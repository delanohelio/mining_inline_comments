{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5Mjc3NDQy", "number": 4547, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMzoyNToxMVrOE5fHQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMDo0MToyMVrOE59LYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NzE0MDUwOnYy", "diffSide": "RIGHT", "path": "splice_ck/src/main/java/com/splicemachine/ck/ConnectionCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMzoyNToxMVrOHz-ktw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwOToxMTowMVrOH0rGKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI2NDYzMQ==", "bodyText": "Rename to ConnectionSingleton.", "url": "https://github.com/splicemachine/spliceengine/pull/4547#discussion_r524264631", "createdAt": "2020-11-16T13:25:11Z", "author": {"login": "hatyo"}, "path": "splice_ck/src/main/java/com/splicemachine/ck/ConnectionCache.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package com.splicemachine.ck;\n+\n+import com.splicemachine.ck.hwrap.ConnectionWrapper;\n+import org.apache.hadoop.conf.Configuration;\n+\n+import java.io.IOException;\n+\n+public class ConnectionCache {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f323ab356d2d50aaeb3ac1b2e625cddcb619950"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk5NDA4OQ==", "bodyText": "done", "url": "https://github.com/splicemachine/spliceengine/pull/4547#discussion_r524994089", "createdAt": "2020-11-17T09:11:01Z", "author": {"login": "martinrupp"}, "path": "splice_ck/src/main/java/com/splicemachine/ck/ConnectionCache.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package com.splicemachine.ck;\n+\n+import com.splicemachine.ck.hwrap.ConnectionWrapper;\n+import org.apache.hadoop.conf.Configuration;\n+\n+import java.io.IOException;\n+\n+public class ConnectionCache {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI2NDYzMQ=="}, "originalCommit": {"oid": "2f323ab356d2d50aaeb3ac1b2e625cddcb619950"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NzE0NjE2OnYy", "diffSide": "RIGHT", "path": "splice_ck/src/main/java/com/splicemachine/ck/HBaseInspector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMzoyNjozM1rOHz-oBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwOToxMjoxMVrOH0rJEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI2NTQ3Ng==", "bodyText": "move to Utils.java.", "url": "https://github.com/splicemachine/spliceengine/pull/4547#discussion_r524265476", "createdAt": "2020-11-16T13:26:33Z", "author": {"login": "hatyo"}, "path": "splice_ck/src/main/java/com/splicemachine/ck/HBaseInspector.java", "diffHunk": "@@ -54,41 +57,66 @@ public HBaseInspector(final Configuration config) {\n         this.config = config;\n     }\n \n-    public String scanRow(final String region, final String rowKey, final Utils.SQLType[] cols) throws Exception {\n+    String limitString(int limit)\n+    {\n+        return \"   .\\n   .\\n   .\\n\" + Utils.Colored.red(\n+                \"--- Result list was limited to \" + limit + \" entries, \" + \"result was cut off ---\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f323ab356d2d50aaeb3ac1b2e625cddcb619950"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk5NDgzNQ==", "bodyText": "done", "url": "https://github.com/splicemachine/spliceengine/pull/4547#discussion_r524994835", "createdAt": "2020-11-17T09:12:11Z", "author": {"login": "martinrupp"}, "path": "splice_ck/src/main/java/com/splicemachine/ck/HBaseInspector.java", "diffHunk": "@@ -54,41 +57,66 @@ public HBaseInspector(final Configuration config) {\n         this.config = config;\n     }\n \n-    public String scanRow(final String region, final String rowKey, final Utils.SQLType[] cols) throws Exception {\n+    String limitString(int limit)\n+    {\n+        return \"   .\\n   .\\n   .\\n\" + Utils.Colored.red(\n+                \"--- Result list was limited to \" + limit + \" entries, \" + \"result was cut off ---\");\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI2NTQ3Ng=="}, "originalCommit": {"oid": "2f323ab356d2d50aaeb3ac1b2e625cddcb619950"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NzE1MTQxOnYy", "diffSide": "RIGHT", "path": "splice_ck/src/main/java/com/splicemachine/ck/HBaseInspector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMzoyNzo1MlrOHz-rPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwOToxMzowOFrOH0rLfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI2NjMwMw==", "bodyText": "Needs rephrasing maybe?", "url": "https://github.com/splicemachine/spliceengine/pull/4547#discussion_r524266303", "createdAt": "2020-11-16T13:27:52Z", "author": {"login": "hatyo"}, "path": "splice_ck/src/main/java/com/splicemachine/ck/HBaseInspector.java", "diffHunk": "@@ -54,41 +57,66 @@ public HBaseInspector(final Configuration config) {\n         this.config = config;\n     }\n \n-    public String scanRow(final String region, final String rowKey, final Utils.SQLType[] cols) throws Exception {\n+    String limitString(int limit)\n+    {\n+        return \"   .\\n   .\\n   .\\n\" + Utils.Colored.red(\n+                \"--- Result list was limited to \" + limit + \" entries, \" + \"result was cut off ---\");\n+    }\n+\n+    public String scanRow(final String region, final String rowKey, final Utils.SQLType[] cols,\n+                          int limit, int versions, boolean hbase) throws Exception {\n+\n         StringBuilder result = new StringBuilder();\n-        try(final ConnectionWrapper connectionWrapper = new ConnectionWrapper();\n-            final ResultScanner rs = connectionWrapper.withConfiguration(config).connect().withRegion(region).scanSingleRowAllVersions(rowKey)) {\n-            TableRowPrinter rowVisitor = new TableRowPrinter(cols == null ? null : new UserDefinedDataDecoder(cols, 4));\n+        UserDataDecoder decoder = cols == null ? null : new UserDefinedDataDecoder(cols, 4);\n+\n+        // scan for one more than the limit so now if we truncated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f323ab356d2d50aaeb3ac1b2e625cddcb619950"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk5NTQ1Mg==", "bodyText": "done. sorry i meant \"so that we KNOW if we truncated\" not \"now\" :-P", "url": "https://github.com/splicemachine/spliceengine/pull/4547#discussion_r524995452", "createdAt": "2020-11-17T09:13:08Z", "author": {"login": "martinrupp"}, "path": "splice_ck/src/main/java/com/splicemachine/ck/HBaseInspector.java", "diffHunk": "@@ -54,41 +57,66 @@ public HBaseInspector(final Configuration config) {\n         this.config = config;\n     }\n \n-    public String scanRow(final String region, final String rowKey, final Utils.SQLType[] cols) throws Exception {\n+    String limitString(int limit)\n+    {\n+        return \"   .\\n   .\\n   .\\n\" + Utils.Colored.red(\n+                \"--- Result list was limited to \" + limit + \" entries, \" + \"result was cut off ---\");\n+    }\n+\n+    public String scanRow(final String region, final String rowKey, final Utils.SQLType[] cols,\n+                          int limit, int versions, boolean hbase) throws Exception {\n+\n         StringBuilder result = new StringBuilder();\n-        try(final ConnectionWrapper connectionWrapper = new ConnectionWrapper();\n-            final ResultScanner rs = connectionWrapper.withConfiguration(config).connect().withRegion(region).scanSingleRowAllVersions(rowKey)) {\n-            TableRowPrinter rowVisitor = new TableRowPrinter(cols == null ? null : new UserDefinedDataDecoder(cols, 4));\n+        UserDataDecoder decoder = cols == null ? null : new UserDefinedDataDecoder(cols, 4);\n+\n+        // scan for one more than the limit so now if we truncated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI2NjMwMw=="}, "originalCommit": {"oid": "2f323ab356d2d50aaeb3ac1b2e625cddcb619950"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NzE1OTMwOnYy", "diffSide": "RIGHT", "path": "splice_ck/src/main/java/com/splicemachine/ck/HBaseInspector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMzoyOTo0MVrOHz-v2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwOToyMjozOFrOH0rkyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI2NzQ4Mw==", "bodyText": "please put in a separate method (something like: generateRowId) and put it in Utils.java, or, even better, make it part of the processRow method.", "url": "https://github.com/splicemachine/spliceengine/pull/4547#discussion_r524267483", "createdAt": "2020-11-16T13:29:41Z", "author": {"login": "hatyo"}, "path": "splice_ck/src/main/java/com/splicemachine/ck/HBaseInspector.java", "diffHunk": "@@ -54,41 +57,66 @@ public HBaseInspector(final Configuration config) {\n         this.config = config;\n     }\n \n-    public String scanRow(final String region, final String rowKey, final Utils.SQLType[] cols) throws Exception {\n+    String limitString(int limit)\n+    {\n+        return \"   .\\n   .\\n   .\\n\" + Utils.Colored.red(\n+                \"--- Result list was limited to \" + limit + \" entries, \" + \"result was cut off ---\");\n+    }\n+\n+    public String scanRow(final String region, final String rowKey, final Utils.SQLType[] cols,\n+                          int limit, int versions, boolean hbase) throws Exception {\n+\n         StringBuilder result = new StringBuilder();\n-        try(final ConnectionWrapper connectionWrapper = new ConnectionWrapper();\n-            final ResultScanner rs = connectionWrapper.withConfiguration(config).connect().withRegion(region).scanSingleRowAllVersions(rowKey)) {\n-            TableRowPrinter rowVisitor = new TableRowPrinter(cols == null ? null : new UserDefinedDataDecoder(cols, 4));\n+        UserDataDecoder decoder = cols == null ? null : new UserDefinedDataDecoder(cols, 4);\n+\n+        // scan for one more than the limit so now if we truncated\n+        int scanLimit = limit == 0 ? 0 : limit+1;\n+        int count = 0;\n+        ConnectionWrapper c = getCachedConnection().withRegion(region);\n+        try(final ResultScanner rs = rowKey == null ?\n+                c.scanVersions(scanLimit, versions) :\n+                c.scanSingleRow(rowKey, versions)) {\n             for(Result row : rs) {\n+                if( count++ == limit ) {\n+                    result.append(limitString(limit));\n+                    break;\n+                }\n+                TableRowPrinter rowVisitor = new TableRowPrinter(decoder, hbase);\n+                String hbaseStr = !hbase ? \"\" : \" / \" + com.splicemachine.primitives.Bytes.toStringBinary(row.getRow());\n+                result.append(Utils.Colored.red(\"[ Row \" + Hex.encodeHexString(row.getRow()) + hbaseStr + \" ]\\n\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f323ab356d2d50aaeb3ac1b2e625cddcb619950"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAwMTkzMQ==", "bodyText": "done", "url": "https://github.com/splicemachine/spliceengine/pull/4547#discussion_r525001931", "createdAt": "2020-11-17T09:22:38Z", "author": {"login": "martinrupp"}, "path": "splice_ck/src/main/java/com/splicemachine/ck/HBaseInspector.java", "diffHunk": "@@ -54,41 +57,66 @@ public HBaseInspector(final Configuration config) {\n         this.config = config;\n     }\n \n-    public String scanRow(final String region, final String rowKey, final Utils.SQLType[] cols) throws Exception {\n+    String limitString(int limit)\n+    {\n+        return \"   .\\n   .\\n   .\\n\" + Utils.Colored.red(\n+                \"--- Result list was limited to \" + limit + \" entries, \" + \"result was cut off ---\");\n+    }\n+\n+    public String scanRow(final String region, final String rowKey, final Utils.SQLType[] cols,\n+                          int limit, int versions, boolean hbase) throws Exception {\n+\n         StringBuilder result = new StringBuilder();\n-        try(final ConnectionWrapper connectionWrapper = new ConnectionWrapper();\n-            final ResultScanner rs = connectionWrapper.withConfiguration(config).connect().withRegion(region).scanSingleRowAllVersions(rowKey)) {\n-            TableRowPrinter rowVisitor = new TableRowPrinter(cols == null ? null : new UserDefinedDataDecoder(cols, 4));\n+        UserDataDecoder decoder = cols == null ? null : new UserDefinedDataDecoder(cols, 4);\n+\n+        // scan for one more than the limit so now if we truncated\n+        int scanLimit = limit == 0 ? 0 : limit+1;\n+        int count = 0;\n+        ConnectionWrapper c = getCachedConnection().withRegion(region);\n+        try(final ResultScanner rs = rowKey == null ?\n+                c.scanVersions(scanLimit, versions) :\n+                c.scanSingleRow(rowKey, versions)) {\n             for(Result row : rs) {\n+                if( count++ == limit ) {\n+                    result.append(limitString(limit));\n+                    break;\n+                }\n+                TableRowPrinter rowVisitor = new TableRowPrinter(decoder, hbase);\n+                String hbaseStr = !hbase ? \"\" : \" / \" + com.splicemachine.primitives.Bytes.toStringBinary(row.getRow());\n+                result.append(Utils.Colored.red(\"[ Row \" + Hex.encodeHexString(row.getRow()) + hbaseStr + \" ]\\n\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI2NzQ4Mw=="}, "originalCommit": {"oid": "2f323ab356d2d50aaeb3ac1b2e625cddcb619950"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NzE4NjAxOnYy", "diffSide": "RIGHT", "path": "splice_ck/src/main/java/com/splicemachine/ck/command/RootCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMzozNjozM1rOHz_ANQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwOToyMzoxOVrOH0rmbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI3MTY2OQ==", "bodyText": "is this necessary?", "url": "https://github.com/splicemachine/spliceengine/pull/4547#discussion_r524271669", "createdAt": "2020-11-16T13:36:33Z", "author": {"login": "hatyo"}, "path": "splice_ck/src/main/java/com/splicemachine/ck/command/RootCommand.java", "diffHunk": "@@ -14,19 +14,54 @@\n \n package com.splicemachine.ck.command;\n \n+import com.splicemachine.ck.ConnectionCache;\n+import com.splicemachine.ck.Utils;\n import org.apache.log4j.Level;\n import org.apache.log4j.Logger;\n import picocli.CommandLine;\n import picocli.CommandLine.Command;\n \n-@Command(mixinStandardHelpOptions = true, name = \"spliceck\", description = \"SpliceMachine check command suite\", descriptionHeading = \"Description:%n\",\n+import java.util.Arrays;\n+import java.util.Scanner;\n+\n+@Command(mixinStandardHelpOptions = true, name = \"spliceck\", description = \"SpliceMachine check command suite\",\n+        descriptionHeading = \"Description:%n\",\n         optionListHeading = \"Options:%n\", subcommands = {TListCommand.class,\n         TColsCommand.class, RegionOfCommand.class, TableOfCommand.class, RGetCommand.class, RPutCommand.class,\n         TxListCommand.class, SListCommand.class})\n class RootCommand {\n     public static void main(String... args) {\n         Logger.getRootLogger().setLevel(Level.OFF);\n-        int exitCode = new CommandLine(new RootCommand()).setExecutionStrategy(new CommandLine.RunLast()).execute(args);\n+        ConnectionCache c = new ConnectionCache();\n+\n+        int exitCode = 0;\n+        if(!args[0].equals(\"interactive\")) {\n+            exitCode = new CommandLine(new RootCommand()).setExecutionStrategy(new CommandLine.RunLast()).execute(args);\n+        }\n+        else {\n+            Scanner command = new Scanner(System.in);\n+            CommandLine cl = new CommandLine(new RootCommand()).setExecutionStrategy(new CommandLine.RunLast());\n+            while (true) {\n+                System.out.print(\"spliceck> \");\n+                String s = command.nextLine();\n+                if (s.equals(\"exit\")) break;\n+                if (s.trim().length() == 0) continue;\n+                String[] args2 = s.split(\" \");\n+                exitCode = cl.execute(args2);\n+                if( exitCode == 0 )\n+                    System.out.println(Utils.Colored.green( \"return code \" + exitCode + \"\\n\") );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f323ab356d2d50aaeb3ac1b2e625cddcb619950"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAwMjM0OQ==", "bodyText": "not really super necessary. i thought it's maybe interesting if the last command succeeded, but i guess that's visible from the command output as well.\nremoved.", "url": "https://github.com/splicemachine/spliceengine/pull/4547#discussion_r525002349", "createdAt": "2020-11-17T09:23:19Z", "author": {"login": "martinrupp"}, "path": "splice_ck/src/main/java/com/splicemachine/ck/command/RootCommand.java", "diffHunk": "@@ -14,19 +14,54 @@\n \n package com.splicemachine.ck.command;\n \n+import com.splicemachine.ck.ConnectionCache;\n+import com.splicemachine.ck.Utils;\n import org.apache.log4j.Level;\n import org.apache.log4j.Logger;\n import picocli.CommandLine;\n import picocli.CommandLine.Command;\n \n-@Command(mixinStandardHelpOptions = true, name = \"spliceck\", description = \"SpliceMachine check command suite\", descriptionHeading = \"Description:%n\",\n+import java.util.Arrays;\n+import java.util.Scanner;\n+\n+@Command(mixinStandardHelpOptions = true, name = \"spliceck\", description = \"SpliceMachine check command suite\",\n+        descriptionHeading = \"Description:%n\",\n         optionListHeading = \"Options:%n\", subcommands = {TListCommand.class,\n         TColsCommand.class, RegionOfCommand.class, TableOfCommand.class, RGetCommand.class, RPutCommand.class,\n         TxListCommand.class, SListCommand.class})\n class RootCommand {\n     public static void main(String... args) {\n         Logger.getRootLogger().setLevel(Level.OFF);\n-        int exitCode = new CommandLine(new RootCommand()).setExecutionStrategy(new CommandLine.RunLast()).execute(args);\n+        ConnectionCache c = new ConnectionCache();\n+\n+        int exitCode = 0;\n+        if(!args[0].equals(\"interactive\")) {\n+            exitCode = new CommandLine(new RootCommand()).setExecutionStrategy(new CommandLine.RunLast()).execute(args);\n+        }\n+        else {\n+            Scanner command = new Scanner(System.in);\n+            CommandLine cl = new CommandLine(new RootCommand()).setExecutionStrategy(new CommandLine.RunLast());\n+            while (true) {\n+                System.out.print(\"spliceck> \");\n+                String s = command.nextLine();\n+                if (s.equals(\"exit\")) break;\n+                if (s.trim().length() == 0) continue;\n+                String[] args2 = s.split(\" \");\n+                exitCode = cl.execute(args2);\n+                if( exitCode == 0 )\n+                    System.out.println(Utils.Colored.green( \"return code \" + exitCode + \"\\n\") );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI3MTY2OQ=="}, "originalCommit": {"oid": "2f323ab356d2d50aaeb3ac1b2e625cddcb619950"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NzIwMTgxOnYy", "diffSide": "RIGHT", "path": "splice_ck/src/main/java/com/splicemachine/ck/command/RootCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMzo0MDozMFrOHz_Jng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwOToyNDo1MlrOH0rqng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI3NDA3OA==", "bodyText": "I think this is redundant, ConnectionWrapper is AutoCloseable, the static object will be destroyed when the process finishes closing it resource.", "url": "https://github.com/splicemachine/spliceengine/pull/4547#discussion_r524274078", "createdAt": "2020-11-16T13:40:30Z", "author": {"login": "hatyo"}, "path": "splice_ck/src/main/java/com/splicemachine/ck/command/RootCommand.java", "diffHunk": "@@ -14,19 +14,54 @@\n \n package com.splicemachine.ck.command;\n \n+import com.splicemachine.ck.ConnectionCache;\n+import com.splicemachine.ck.Utils;\n import org.apache.log4j.Level;\n import org.apache.log4j.Logger;\n import picocli.CommandLine;\n import picocli.CommandLine.Command;\n \n-@Command(mixinStandardHelpOptions = true, name = \"spliceck\", description = \"SpliceMachine check command suite\", descriptionHeading = \"Description:%n\",\n+import java.util.Arrays;\n+import java.util.Scanner;\n+\n+@Command(mixinStandardHelpOptions = true, name = \"spliceck\", description = \"SpliceMachine check command suite\",\n+        descriptionHeading = \"Description:%n\",\n         optionListHeading = \"Options:%n\", subcommands = {TListCommand.class,\n         TColsCommand.class, RegionOfCommand.class, TableOfCommand.class, RGetCommand.class, RPutCommand.class,\n         TxListCommand.class, SListCommand.class})\n class RootCommand {\n     public static void main(String... args) {\n         Logger.getRootLogger().setLevel(Level.OFF);\n-        int exitCode = new CommandLine(new RootCommand()).setExecutionStrategy(new CommandLine.RunLast()).execute(args);\n+        ConnectionCache c = new ConnectionCache();\n+\n+        int exitCode = 0;\n+        if(!args[0].equals(\"interactive\")) {\n+            exitCode = new CommandLine(new RootCommand()).setExecutionStrategy(new CommandLine.RunLast()).execute(args);\n+        }\n+        else {\n+            Scanner command = new Scanner(System.in);\n+            CommandLine cl = new CommandLine(new RootCommand()).setExecutionStrategy(new CommandLine.RunLast());\n+            while (true) {\n+                System.out.print(\"spliceck> \");\n+                String s = command.nextLine();\n+                if (s.equals(\"exit\")) break;\n+                if (s.trim().length() == 0) continue;\n+                String[] args2 = s.split(\" \");\n+                exitCode = cl.execute(args2);\n+                if( exitCode == 0 )\n+                    System.out.println(Utils.Colored.green( \"return code \" + exitCode + \"\\n\") );\n+                else\n+                    System.out.println(Utils.Colored.red( \"return code \" + exitCode + \"\\n\") );\n+\n+            }\n+            command.close();\n+        }\n+\n+        try {\n+            c.close();\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f323ab356d2d50aaeb3ac1b2e625cddcb619950"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAwMzQyMg==", "bodyText": "i wanted to make sure here we're closing the hbase connection as soon as possible", "url": "https://github.com/splicemachine/spliceengine/pull/4547#discussion_r525003422", "createdAt": "2020-11-17T09:24:52Z", "author": {"login": "martinrupp"}, "path": "splice_ck/src/main/java/com/splicemachine/ck/command/RootCommand.java", "diffHunk": "@@ -14,19 +14,54 @@\n \n package com.splicemachine.ck.command;\n \n+import com.splicemachine.ck.ConnectionCache;\n+import com.splicemachine.ck.Utils;\n import org.apache.log4j.Level;\n import org.apache.log4j.Logger;\n import picocli.CommandLine;\n import picocli.CommandLine.Command;\n \n-@Command(mixinStandardHelpOptions = true, name = \"spliceck\", description = \"SpliceMachine check command suite\", descriptionHeading = \"Description:%n\",\n+import java.util.Arrays;\n+import java.util.Scanner;\n+\n+@Command(mixinStandardHelpOptions = true, name = \"spliceck\", description = \"SpliceMachine check command suite\",\n+        descriptionHeading = \"Description:%n\",\n         optionListHeading = \"Options:%n\", subcommands = {TListCommand.class,\n         TColsCommand.class, RegionOfCommand.class, TableOfCommand.class, RGetCommand.class, RPutCommand.class,\n         TxListCommand.class, SListCommand.class})\n class RootCommand {\n     public static void main(String... args) {\n         Logger.getRootLogger().setLevel(Level.OFF);\n-        int exitCode = new CommandLine(new RootCommand()).setExecutionStrategy(new CommandLine.RunLast()).execute(args);\n+        ConnectionCache c = new ConnectionCache();\n+\n+        int exitCode = 0;\n+        if(!args[0].equals(\"interactive\")) {\n+            exitCode = new CommandLine(new RootCommand()).setExecutionStrategy(new CommandLine.RunLast()).execute(args);\n+        }\n+        else {\n+            Scanner command = new Scanner(System.in);\n+            CommandLine cl = new CommandLine(new RootCommand()).setExecutionStrategy(new CommandLine.RunLast());\n+            while (true) {\n+                System.out.print(\"spliceck> \");\n+                String s = command.nextLine();\n+                if (s.equals(\"exit\")) break;\n+                if (s.trim().length() == 0) continue;\n+                String[] args2 = s.split(\" \");\n+                exitCode = cl.execute(args2);\n+                if( exitCode == 0 )\n+                    System.out.println(Utils.Colored.green( \"return code \" + exitCode + \"\\n\") );\n+                else\n+                    System.out.println(Utils.Colored.red( \"return code \" + exitCode + \"\\n\") );\n+\n+            }\n+            command.close();\n+        }\n+\n+        try {\n+            c.close();\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI3NDA3OA=="}, "originalCommit": {"oid": "2f323ab356d2d50aaeb3ac1b2e625cddcb619950"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NzIwMzA0OnYy", "diffSide": "RIGHT", "path": "splice_ck/src/main/java/com/splicemachine/ck/ConnectionCache.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMzo0MDo1MFrOHz_KXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwOToyNTowOFrOH0rrSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI3NDI3MQ==", "bodyText": "probably not needed.", "url": "https://github.com/splicemachine/spliceengine/pull/4547#discussion_r524274271", "createdAt": "2020-11-16T13:40:50Z", "author": {"login": "hatyo"}, "path": "splice_ck/src/main/java/com/splicemachine/ck/ConnectionCache.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package com.splicemachine.ck;\n+\n+import com.splicemachine.ck.hwrap.ConnectionWrapper;\n+import org.apache.hadoop.conf.Configuration;\n+\n+import java.io.IOException;\n+\n+public class ConnectionCache {\n+\n+    static ConnectionWrapper c;\n+    public static ConnectionWrapper getConnection(final Configuration config) throws IOException {\n+        if( c == null ) {\n+            System.out.print(\"Trying to connect... \");\n+            c = new ConnectionWrapper().withConfiguration(config).connect();\n+            System.out.println(\"connected!\");\n+        }\n+        return c;\n+    }\n+\n+    public static void close() throws Exception {\n+        if( c != null ) {\n+            c.close();\n+            c = null;\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f323ab356d2d50aaeb3ac1b2e625cddcb619950"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAwMzU5Mw==", "bodyText": "as above", "url": "https://github.com/splicemachine/spliceengine/pull/4547#discussion_r525003593", "createdAt": "2020-11-17T09:25:08Z", "author": {"login": "martinrupp"}, "path": "splice_ck/src/main/java/com/splicemachine/ck/ConnectionCache.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package com.splicemachine.ck;\n+\n+import com.splicemachine.ck.hwrap.ConnectionWrapper;\n+import org.apache.hadoop.conf.Configuration;\n+\n+import java.io.IOException;\n+\n+public class ConnectionCache {\n+\n+    static ConnectionWrapper c;\n+    public static ConnectionWrapper getConnection(final Configuration config) throws IOException {\n+        if( c == null ) {\n+            System.out.print(\"Trying to connect... \");\n+            c = new ConnectionWrapper().withConfiguration(config).connect();\n+            System.out.println(\"connected!\");\n+        }\n+        return c;\n+    }\n+\n+    public static void close() throws Exception {\n+        if( c != null ) {\n+            c.close();\n+            c = null;\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI3NDI3MQ=="}, "originalCommit": {"oid": "2f323ab356d2d50aaeb3ac1b2e625cddcb619950"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MjA2NjI0OnYy", "diffSide": "RIGHT", "path": "splice_ck/src/main/java/com/splicemachine/ck/HBaseInspector.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMDo0MToyMVrOH0uyYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMTowODowNlrOH0vy3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA1NDU2Mw==", "bodyText": "maybe separate to two lines instead of using comma", "url": "https://github.com/splicemachine/spliceengine/pull/4547#discussion_r525054563", "createdAt": "2020-11-17T10:41:21Z", "author": {"login": "ascend1"}, "path": "splice_ck/src/main/java/com/splicemachine/ck/HBaseInspector.java", "diffHunk": "@@ -125,40 +144,52 @@ private String schemaIdOf(String schemaName) throws Exception {\n         return schemaId.get().getSecond();\n     }\n \n-    private Utils.Tabular getListTransactions() throws Exception {\n+    public String getListTransactions(int limit) throws Exception {\n         String region = SPLICE_PREFIX + HBaseConfiguration.TRANSACTION_TABLE;\n         Utils.Tabular tabular = new Utils.Tabular(Utils.Tabular.SortHint.AsInteger,\n                 TBL_TXN_COL0, TBL_TXN_COL1, TBL_TXN_COL2, TBL_TXN_COL3, TBL_TXN_COL4,\n                 TBL_TXN_COL5, TBL_TXN_COL6, TBL_TXN_COL7, TBL_TXN_COL8, TBL_TXN_COL9);\n         TxnTableRowPrinter rowVisitor = new TxnTableRowPrinter();\n-        try(final ConnectionWrapper connectionWrapper = new ConnectionWrapper();\n-            final ResultScanner rs = connectionWrapper.withConfiguration(config).connect().withRegion(region).scan()) {\n+\n+        // scan for one more than the limit so the we know if we truncated\n+        int scanLimit = limit == 0 ? 0 : limit+1, count = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10c19432fdccdaac6e7e38c6e87d5f80c25f2175"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA3MTA3MQ==", "bodyText": "that is really hard to read, agreed!", "url": "https://github.com/splicemachine/spliceengine/pull/4547#discussion_r525071071", "createdAt": "2020-11-17T11:08:06Z", "author": {"login": "martinrupp"}, "path": "splice_ck/src/main/java/com/splicemachine/ck/HBaseInspector.java", "diffHunk": "@@ -125,40 +144,52 @@ private String schemaIdOf(String schemaName) throws Exception {\n         return schemaId.get().getSecond();\n     }\n \n-    private Utils.Tabular getListTransactions() throws Exception {\n+    public String getListTransactions(int limit) throws Exception {\n         String region = SPLICE_PREFIX + HBaseConfiguration.TRANSACTION_TABLE;\n         Utils.Tabular tabular = new Utils.Tabular(Utils.Tabular.SortHint.AsInteger,\n                 TBL_TXN_COL0, TBL_TXN_COL1, TBL_TXN_COL2, TBL_TXN_COL3, TBL_TXN_COL4,\n                 TBL_TXN_COL5, TBL_TXN_COL6, TBL_TXN_COL7, TBL_TXN_COL8, TBL_TXN_COL9);\n         TxnTableRowPrinter rowVisitor = new TxnTableRowPrinter();\n-        try(final ConnectionWrapper connectionWrapper = new ConnectionWrapper();\n-            final ResultScanner rs = connectionWrapper.withConfiguration(config).connect().withRegion(region).scan()) {\n+\n+        // scan for one more than the limit so the we know if we truncated\n+        int scanLimit = limit == 0 ? 0 : limit+1, count = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA1NDU2Mw=="}, "originalCommit": {"oid": "10c19432fdccdaac6e7e38c6e87d5f80c25f2175"}, "originalPosition": 119}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2823, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}