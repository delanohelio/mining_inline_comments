{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwMTcwODE1", "number": 4162, "title": "DB-10236 Take expression-based indexes as covering indexes properly", "bodyText": "", "createdAt": "2020-09-21T09:44:33Z", "url": "https://github.com/splicemachine/spliceengine/pull/4162", "merged": true, "mergeCommit": {"oid": "0896c666a930002750c867a0d10ee795131410ac"}, "closed": true, "closedAt": "2020-11-12T23:23:19Z", "author": {"login": "ascend1"}, "timelineItems": {"totalCount": 53, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdLvG86ABqjM3OTg5OTExNzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdb6sDSAH2gAyNDkwMTcwODE1OjllNmJiYzJhOTU2YWFlMTNhZDk3NDcxMTY1ZjhkYTE3MzdkNmI4YjA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "06f4b113437a8ddf315516840b82196bba3c2bfb", "author": {"user": {"login": "ascend1", "name": "Zhen Li"}}, "url": "https://github.com/splicemachine/spliceengine/commit/06f4b113437a8ddf315516840b82196bba3c2bfb", "committedDate": "2020-09-21T15:28:48Z", "message": "DB-10236 Fix SpotBugs"}, "afterCommit": {"oid": "14fe546ec41d9966447fba8619955372f4d21cc1", "author": {"user": {"login": "ascend1", "name": "Zhen Li"}}, "url": "https://github.com/splicemachine/spliceengine/commit/14fe546ec41d9966447fba8619955372f4d21cc1", "committedDate": "2020-09-23T16:23:03Z", "message": "DB-10236 Fix SpotBugs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c7e264195c5cd1059332c52d5307791bf296e95", "author": {"user": {"login": "ascend1", "name": "Zhen Li"}}, "url": "https://github.com/splicemachine/spliceengine/commit/5c7e264195c5cd1059332c52d5307791bf296e95", "committedDate": "2020-10-07T14:08:11Z", "message": "DB-10175 Expression-based index scan with relational operator preds"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e22d448f521f0b4e81a9edae44a00a40fbe90cfd", "author": {"user": {"login": "ascend1", "name": "Zhen Li"}}, "url": "https://github.com/splicemachine/spliceengine/commit/e22d448f521f0b4e81a9edae44a00a40fbe90cfd", "committedDate": "2020-10-07T14:08:11Z", "message": "DB-10175 Expression-based index scan with in-list predicates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57ce9e16fc3de1c64638575483938d57d6795e42", "author": {"user": {"login": "ascend1", "name": "Zhen Li"}}, "url": "https://github.com/splicemachine/spliceengine/commit/57ce9e16fc3de1c64638575483938d57d6795e42", "committedDate": "2020-10-07T14:08:11Z", "message": "DB-10175 Fix SpotBugs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44ec6f37735acf851ff4a82268c0d544693b4790", "author": {"user": {"login": "ascend1", "name": "Zhen Li"}}, "url": "https://github.com/splicemachine/spliceengine/commit/44ec6f37735acf851ff4a82268c0d544693b4790", "committedDate": "2020-10-07T14:08:11Z", "message": "DB-10175 Address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "14fe546ec41d9966447fba8619955372f4d21cc1", "author": {"user": {"login": "ascend1", "name": "Zhen Li"}}, "url": "https://github.com/splicemachine/spliceengine/commit/14fe546ec41d9966447fba8619955372f4d21cc1", "committedDate": "2020-09-23T16:23:03Z", "message": "DB-10236 Fix SpotBugs"}, "afterCommit": {"oid": "0ffbe56cc0c711fb7b5e75a12eb20159832f1d72", "author": {"user": {"login": "ascend1", "name": "Zhen Li"}}, "url": "https://github.com/splicemachine/spliceengine/commit/0ffbe56cc0c711fb7b5e75a12eb20159832f1d72", "committedDate": "2020-10-07T14:13:33Z", "message": "DB-10236 Fix SpotBugs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0ffbe56cc0c711fb7b5e75a12eb20159832f1d72", "author": {"user": {"login": "ascend1", "name": "Zhen Li"}}, "url": "https://github.com/splicemachine/spliceengine/commit/0ffbe56cc0c711fb7b5e75a12eb20159832f1d72", "committedDate": "2020-10-07T14:13:33Z", "message": "DB-10236 Fix SpotBugs"}, "afterCommit": {"oid": "9e3af248dd4661a171b634971791d42033e722d5", "author": {"user": {"login": "ascend1", "name": "Zhen Li"}}, "url": "https://github.com/splicemachine/spliceengine/commit/9e3af248dd4661a171b634971791d42033e722d5", "committedDate": "2020-10-08T14:21:25Z", "message": "DB-10236 Fix SpotBugs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b965fdf6ac44f431b541813d79344aec6776bde4", "author": {"user": {"login": "ascend1", "name": "Zhen Li"}}, "url": "https://github.com/splicemachine/spliceengine/commit/b965fdf6ac44f431b541813d79344aec6776bde4", "committedDate": "2020-10-15T11:22:30Z", "message": "Merge branch 'master' into DB-10175"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dbfaf16eec41093937c3c62b8d4b853ac9eda344", "author": {"user": {"login": "ascend1", "name": "Zhen Li"}}, "url": "https://github.com/splicemachine/spliceengine/commit/dbfaf16eec41093937c3c62b8d4b853ac9eda344", "committedDate": "2020-10-09T14:41:36Z", "message": "DB-10236 Fix TernaryOperator handling in index expression rewriting"}, "afterCommit": {"oid": "317898efdf1bf6ad03f6da2230cb4237c7acca9e", "author": {"user": {"login": "ascend1", "name": "Zhen Li"}}, "url": "https://github.com/splicemachine/spliceengine/commit/317898efdf1bf6ad03f6da2230cb4237c7acca9e", "committedDate": "2020-10-15T11:37:51Z", "message": "DB-10236 Fix TernaryOperator handling in index expression rewriting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1516c436841f204c294d1ac4329eeea983ef3802", "author": {"user": {"login": "ascend1", "name": "Zhen Li"}}, "url": "https://github.com/splicemachine/spliceengine/commit/1516c436841f204c294d1ac4329eeea983ef3802", "committedDate": "2020-10-22T09:06:54Z", "message": "Merge branch 'master' into DB-10175"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5d12ed61478bccf565395f8029144a5314879b4", "author": {"user": {"login": "ascend1", "name": "Zhen Li"}}, "url": "https://github.com/splicemachine/spliceengine/commit/c5d12ed61478bccf565395f8029144a5314879b4", "committedDate": "2020-10-23T12:46:54Z", "message": "Merge branch 'master' into DB-10175"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "317898efdf1bf6ad03f6da2230cb4237c7acca9e", "author": {"user": {"login": "ascend1", "name": "Zhen Li"}}, "url": "https://github.com/splicemachine/spliceengine/commit/317898efdf1bf6ad03f6da2230cb4237c7acca9e", "committedDate": "2020-10-15T11:37:51Z", "message": "DB-10236 Fix TernaryOperator handling in index expression rewriting"}, "afterCommit": {"oid": "e3acbd50dffaed40a0feb9068ad4d8eb155fb4d5", "author": {"user": {"login": "ascend1", "name": "Zhen Li"}}, "url": "https://github.com/splicemachine/spliceengine/commit/e3acbd50dffaed40a0feb9068ad4d8eb155fb4d5", "committedDate": "2020-10-23T12:47:57Z", "message": "DB-10236 Fix TernaryOperator handling in index expression rewriting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c65948d27940e0e3567baa1adc0839afc56da45", "author": {"user": {"login": "ascend1", "name": "Zhen Li"}}, "url": "https://github.com/splicemachine/spliceengine/commit/4c65948d27940e0e3567baa1adc0839afc56da45", "committedDate": "2020-10-26T08:16:31Z", "message": "Merge branch 'master' into DB-10175"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e06325c12c5c50abc3cc93e6c3b406ce657a5c77", "author": {"user": {"login": "ascend1", "name": "Zhen Li"}}, "url": "https://github.com/splicemachine/spliceengine/commit/e06325c12c5c50abc3cc93e6c3b406ce657a5c77", "committedDate": "2020-10-26T08:17:27Z", "message": "DB-10236 Rewrite query for a covering expression-based index\n\nIn this change, rewriting happens in:\n\n- where clause\n- group by clause\n- order by clause\n- having clause, including aggregates\n- select list, including aggregates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c1e30772a08c639076530ca35d0220475f6190b", "author": {"user": {"login": "ascend1", "name": "Zhen Li"}}, "url": "https://github.com/splicemachine/spliceengine/commit/7c1e30772a08c639076530ca35d0220475f6190b", "committedDate": "2020-10-26T08:17:27Z", "message": "DB-10236 Make joins work correctly for covering expr index"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7554fbf220cd6282423c68ce60e6ec3e5021056e", "author": {"user": {"login": "ascend1", "name": "Zhen Li"}}, "url": "https://github.com/splicemachine/spliceengine/commit/7554fbf220cd6282423c68ce60e6ec3e5021056e", "committedDate": "2020-10-26T08:17:27Z", "message": "DB-10236 Fix SpotBugs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c136be91f09b0a1fa2c9b9786fb30c61fced173d", "author": {"user": {"login": "ascend1", "name": "Zhen Li"}}, "url": "https://github.com/splicemachine/spliceengine/commit/c136be91f09b0a1fa2c9b9786fb30c61fced173d", "committedDate": "2020-10-26T08:17:27Z", "message": "DB-10236 Fix TernaryOperator handling in index expression rewriting"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e3acbd50dffaed40a0feb9068ad4d8eb155fb4d5", "author": {"user": {"login": "ascend1", "name": "Zhen Li"}}, "url": "https://github.com/splicemachine/spliceengine/commit/e3acbd50dffaed40a0feb9068ad4d8eb155fb4d5", "committedDate": "2020-10-23T12:47:57Z", "message": "DB-10236 Fix TernaryOperator handling in index expression rewriting"}, "afterCommit": {"oid": "c136be91f09b0a1fa2c9b9786fb30c61fced173d", "author": {"user": {"login": "ascend1", "name": "Zhen Li"}}, "url": "https://github.com/splicemachine/spliceengine/commit/c136be91f09b0a1fa2c9b9786fb30c61fced173d", "committedDate": "2020-10-26T08:17:27Z", "message": "DB-10236 Fix TernaryOperator handling in index expression rewriting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9f90256bb404ab2ad137a4fee677c2b0dc3a3d5", "author": {"user": {"login": "ascend1", "name": "Zhen Li"}}, "url": "https://github.com/splicemachine/spliceengine/commit/d9f90256bb404ab2ad137a4fee677c2b0dc3a3d5", "committedDate": "2020-10-27T15:47:00Z", "message": "Merge branch 'master' into DB-10175"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf9602776fbe57fac0d07cbe0dff0c086932f8e4", "author": {"user": {"login": "ascend1", "name": "Zhen Li"}}, "url": "https://github.com/splicemachine/spliceengine/commit/bf9602776fbe57fac0d07cbe0dff0c086932f8e4", "committedDate": "2020-10-27T15:56:25Z", "message": "DB-10175 Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MDc1NjQx", "url": "https://github.com/splicemachine/spliceengine/pull/4162#pullrequestreview-518075641", "createdAt": "2020-10-27T19:33:42Z", "commit": {"oid": "c136be91f09b0a1fa2c9b9786fb30c61fced173d"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxOTozMzo0MlrOHpNatQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxOTozMzo0MlrOHpNatQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk3MzQ5Mw==", "bodyText": "It would be a good idea to use a different method than equals in all of the locations where we compare index expressions, like a wrapper function.  For now, perhaps the wrapper function would call equals, but later, when we want a+1 to be matched equivalent with 1+a, we can simply add the new logic to that method and all the required locations will see the new logic.", "url": "https://github.com/splicemachine/spliceengine/pull/4162#discussion_r512973493", "createdAt": "2020-10-27T19:33:42Z", "author": {"login": "msirek"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/ValueNode.java", "diffHunk": "@@ -1512,4 +1522,70 @@ public int getOuterJoinLevel() {\n     public void setOuterJoinLevel(int level) {\n         return;\n     }\n+\n+    public ValueNode replaceIndexExpression(ResultColumnList childRCL) throws StandardException {\n+        // by default, try replace this whole subtree\n+        if (childRCL != null) {\n+            for (ResultColumn childRC : childRCL) {\n+                if (this.equals(childRC.getIndexExpression())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c136be91f09b0a1fa2c9b9786fb30c61fced173d"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MTA5NjIw", "url": "https://github.com/splicemachine/spliceengine/pull/4162#pullrequestreview-518109620", "createdAt": "2020-10-27T20:21:03Z", "commit": {"oid": "c136be91f09b0a1fa2c9b9786fb30c61fced173d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMDoyMTowM1rOHpPVqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMDoyMTowM1rOHpPVqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAwNDk2OQ==", "bodyText": "This check is too simple to cover all combinations.  For example:\n\ncreate table t1 (a int, b int, primary key(a));\ncreate index t1_idx on t1(a+1, b);\nexplain select count(*) from t1 --splice-properties index=t1_idx\nwhere a+1 > 1 and b+b > 1;\n->  GroupBy(n=4,totalCost=38.017,outputRows=1,outputHeapSize=0 B,partitions=1)\n->  ProjectRestrict(n=3,totalCost=30.413,outputRows=4,outputHeapSize=7 B,partitions=1)\n->  ProjectRestrict(n=2,totalCost=30.413,outputRows=4,outputHeapSize=7 B,partitions=1,preds=[((B[1:2] + B[1:2]) > 1)])\n->  IndexLookup(n=1,totalCost=30.413,outputRows=7,outputHeapSize=7 B,partitions=1)\n->  IndexScan[T1_IDX(7249)](n=0,totalCost=4.013,scannedRows=7,outputRows=7,outputHeapSize=7 B,partitions=1,baseTable=T1(7232),preds=[((A[1:1] + 1) > 1)])\n\nEven though column B is in the index, an expensive IndexLookup operation is done in order to evaluate b+b > 1.  Without expression-based indexes, the reference to b+b does not cause an IndexLookup.\nI'm not sure how we should handle this, perhaps by not marking rc.isReferenced for column A in this case, or maybe detecting whether all column references of a given column only occur as matched index expressions.  But having to do IndexLookup is very expensive so we want to always avoid it if possible.\nWe may want to resolve this before merging.  If not, at least open a Jira for it.", "url": "https://github.com/splicemachine/spliceengine/pull/4162#discussion_r513004969", "createdAt": "2020-10-27T20:21:03Z", "author": {"login": "msirek"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/FromBaseTable.java", "diffHunk": "@@ -561,6 +566,48 @@ public boolean isCoveringIndex(ConglomerateDescriptor cd) throws StandardExcepti\n         return coveringIndex;\n     }\n \n+    private boolean areAllReferencingExprsCoveredByIndex(IndexDescriptor id) throws StandardException {\n+        if (referencingExpressions == null || referencingExpressions.isEmpty()) {\n+            return false;\n+        }\n+        return getRefExprIndexPositions(id).size() == referencingExpressions.size();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c136be91f09b0a1fa2c9b9786fb30c61fced173d"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MTEzOTc3", "url": "https://github.com/splicemachine/spliceengine/pull/4162#pullrequestreview-518113977", "createdAt": "2020-10-27T20:27:10Z", "commit": {"oid": "c136be91f09b0a1fa2c9b9786fb30c61fced173d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MjA2MTQ1", "url": "https://github.com/splicemachine/spliceengine/pull/4162#pullrequestreview-518206145", "createdAt": "2020-10-27T22:45:05Z", "commit": {"oid": "c136be91f09b0a1fa2c9b9786fb30c61fced173d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMjo0NTowNVrOHpTudw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMzozNzowOFrOHpUylQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA3Njg1NQ==", "bodyText": "This will disqualify the following case as a covering index:\ncreate table t1 (a1 int, b1 int, c1 int);\nreate index idx_t1 on t1(a1+1);\n\nexplain select count(*) from t1 --splice-properties index=idx_t1\n;", "url": "https://github.com/splicemachine/spliceengine/pull/4162#discussion_r513076855", "createdAt": "2020-10-27T22:45:05Z", "author": {"login": "yxia92"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/FromBaseTable.java", "diffHunk": "@@ -561,6 +566,48 @@ public boolean isCoveringIndex(ConglomerateDescriptor cd) throws StandardExcepti\n         return coveringIndex;\n     }\n \n+    private boolean areAllReferencingExprsCoveredByIndex(IndexDescriptor id) throws StandardException {\n+        if (referencingExpressions == null || referencingExpressions.isEmpty()) {\n+            return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c136be91f09b0a1fa2c9b9786fb30c61fced173d"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA4NzE4OA==", "bodyText": "I'm thinking if it is possible to call collectExpression() in a separate phase right before the costing phase. At this stage, the tree is still under rewrite, so the tree form is still changing. For example, derived tables(FromSubqueryNode) and outer joins (HalfOuterJoinNode) haven't been flattened. They are done a little late in fromList.flattenFromTables(). The flattening of derived table and outer joins could change the mapping between the tablenumber and the expression, and may make more cases disqualified as covering index case. For example:\ncreate table t1 (a1 int, b1 int, c1 int);\ncreate index idx_t1 on t1(a1+1);\nsplice> explain select a1+1 from (select a1 from t1 --splice-properties index=idx_t1\n> ) dt;\nPlan                                                                                                                                                                                                                                                            \n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nCursor(n=4,rows=20,updateMode=READ_ONLY (1),engine=OLTP (default))                                                                                                                                                                                              \n  ->  ScrollInsensitive(n=4,totalCost=88.227,outputRows=20,outputHeapSize=20 B,partitions=1)                                                                                                                                                                    \n    ->  ProjectRestrict(n=3,totalCost=84.027,outputRows=20,outputHeapSize=20 B,partitions=1)                                                                                                                                                                    \n      ->  IndexLookup(n=1,totalCost=84.027,outputRows=20,outputHeapSize=20 B,partitions=1)                                                                                                                                                                      \n        ->  IndexScan[IDX_T1(1681)](n=0,totalCost=4.027,scannedRows=20,outputRows=20,outputHeapSize=20 B,partitions=1,baseTable=T1(1664))                                                                                                                       \n\n5 rows selected\nELAPSED TIME = 167844 milliseconds\n\nHere the derived table would be flattened to\nexplain select a1+1 from t1;\n\nSo, the index could be qualified as a covering index.\nalso, unsatisiable tree pruning, constant folding and transitive closure also happen later, which could either eliminate expressions(due to unsat tree pruning/constant folding) or introduce more expressions (due to Transitive closure not currently, but maybe in the future by deriving condition like a1+1=a2 and a2=3 => a1+1=3.", "url": "https://github.com/splicemachine/spliceengine/pull/4162#discussion_r513087188", "createdAt": "2020-10-27T23:15:35Z", "author": {"login": "yxia92"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/SelectNode.java", "diffHunk": "@@ -889,7 +891,8 @@ public ResultSetNode preprocess(int numTables,GroupByList gbl,FromList fl) throw\n          * ProjectRestrictNode. If it is a FromBaseTable, then we will generate\n          * the ProjectRestrictNode above it.\n          */\n-        fromList.preprocess(numTables,groupByList,whereClause);\n+        fromList.preprocess(numTables,groupByList,whereClause,\n+                exprMap == null ? collectExpression() : exprMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c136be91f09b0a1fa2c9b9786fb30c61fced173d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA4OTEwNg==", "bodyText": "this variable does not seem to be useful.", "url": "https://github.com/splicemachine/spliceengine/pull/4162#discussion_r513089106", "createdAt": "2020-10-27T23:20:51Z", "author": {"login": "yxia92"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/SelectNode.java", "diffHunk": "@@ -2853,4 +2911,62 @@ public JBitSet collectInnerTablesFromFlattenedOJ() {\n         }\n         return collected;\n     }\n+\n+    private Map<Integer, List<ValueNode>> collectExpression() {\n+        HashMap<Integer, List<ValueNode>> result = new HashMap<>();\n+        boolean proceed = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c136be91f09b0a1fa2c9b9786fb30c61fced173d"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5MDA5Nw==", "bodyText": "We also need to check window function nodes.", "url": "https://github.com/splicemachine/spliceengine/pull/4162#discussion_r513090097", "createdAt": "2020-10-27T23:23:54Z", "author": {"login": "yxia92"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/SelectNode.java", "diffHunk": "@@ -2853,4 +2911,62 @@ public JBitSet collectInnerTablesFromFlattenedOJ() {\n         }\n         return collected;\n     }\n+\n+    private Map<Integer, List<ValueNode>> collectExpression() {\n+        HashMap<Integer, List<ValueNode>> result = new HashMap<>();\n+        boolean proceed = true;\n+\n+        if (groupByList != null) {\n+            for (int i = 0; i < groupByList.size(); i++) {\n+                proceed = proceed && groupByList.getGroupByColumn(i).getColumnExpression().collectSingleExpression(result);\n+            }\n+        }\n+\n+        if (orderByList != null) {\n+            for (int i = 0; i < orderByList.size(); i++) {\n+                proceed = proceed && orderByList.getOrderByColumn(i).getColumnExpression().collectSingleExpression(result);\n+            }\n+        }\n+\n+        if (whereClause != null) {\n+            whereClause.collectExpressions(result);\n+        }\n+\n+        if (havingClause != null) {\n+            havingClause.collectExpressions(result);\n+        }\n+\n+        if (selectAggregates != null) {\n+            for (AggregateNode selectAggregate : selectAggregates) {\n+                selectAggregate.collectExpressions(result);\n+            }\n+        }\n+\n+        if (havingAggregates != null) {\n+            for (AggregateNode havingAggregate : havingAggregates) {\n+                havingAggregate.collectExpressions(result);\n+            }\n+        }\n+        // no need to check whereAggregates, should be empty\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c136be91f09b0a1fa2c9b9786fb30c61fced173d"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5NDI5Mw==", "bodyText": "We need to do the mapping for window function node also.", "url": "https://github.com/splicemachine/spliceengine/pull/4162#discussion_r513094293", "createdAt": "2020-10-27T23:37:08Z", "author": {"login": "yxia92"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/SelectNode.java", "diffHunk": "@@ -1253,6 +1270,28 @@ public ResultSetNode genProjectRestrict(int origFromListSize) throws StandardExc\n         ** block.\n         */\n         if(((selectAggregates!=null) && (!selectAggregates.isEmpty())) || (groupByList!=null)){\n+            if (childResultColumns.isFromExprIndex()) {\n+                if (groupByList != null) {\n+                    groupByList.replaceIndexExpressions(childResultColumns);\n+                }\n+                if (havingClause != null) {\n+                    for (ResultColumn childRC : childResultColumns) {\n+                        IndexExpressionReplacementVisitor ierv =\n+                                new IndexExpressionReplacementVisitor(childRC, null);\n+                        havingClause.accept(ierv);\n+                    }\n+                }\n+                if (havingAggregates != null) {\n+                    for (AggregateNode havingAggr : havingAggregates) {\n+                        havingAggr.replaceIndexExpression(childResultColumns);\n+                    }\n+                }\n+                if (selectAggregates != null) {\n+                    for (AggregateNode selectAggr : selectAggregates) {\n+                        selectAggr.replaceIndexExpression(childResultColumns);\n+                    }\n+                }\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c136be91f09b0a1fa2c9b9786fb30c61fced173d"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MjQ3NTY5", "url": "https://github.com/splicemachine/spliceengine/pull/4162#pullrequestreview-518247569", "createdAt": "2020-10-28T00:39:05Z", "commit": {"oid": "c136be91f09b0a1fa2c9b9786fb30c61fced173d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMDozOTowNVrOHpV6cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMDozOTowNVrOHpV6cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzExMjY5MA==", "bodyText": "There is no need to check receiver. It is either left operand or right operand and used at the code generation phase.", "url": "https://github.com/splicemachine/spliceengine/pull/4162#discussion_r513112690", "createdAt": "2020-10-28T00:39:05Z", "author": {"login": "yxia92"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/BinaryComparisonOperatorNode.java", "diffHunk": "@@ -495,4 +494,36 @@ public ValueNode genSQLJavaSQLTree() throws StandardException\n \n \t\treturn this;\n \t}\n+\n+\t@Override\n+\tpublic ValueNode replaceIndexExpression(ResultColumnList childRCL) throws StandardException {\n+\t\tif (childRCL == null) {\n+\t\t\treturn this;\n+\t\t}\n+\t\tif (receiver != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c136be91f09b0a1fa2c9b9786fb30c61fced173d"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MjQ3NzAw", "url": "https://github.com/splicemachine/spliceengine/pull/4162#pullrequestreview-518247700", "createdAt": "2020-10-28T00:39:27Z", "commit": {"oid": "c136be91f09b0a1fa2c9b9786fb30c61fced173d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMDozOToyN1rOHpV69w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMDozOToyN1rOHpV69w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzExMjgyMw==", "bodyText": "Same here, no need to look at receiver.", "url": "https://github.com/splicemachine/spliceengine/pull/4162#discussion_r513112823", "createdAt": "2020-10-28T00:39:27Z", "author": {"login": "yxia92"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/BinaryComparisonOperatorNode.java", "diffHunk": "@@ -495,4 +494,36 @@ public ValueNode genSQLJavaSQLTree() throws StandardException\n \n \t\treturn this;\n \t}\n+\n+\t@Override\n+\tpublic ValueNode replaceIndexExpression(ResultColumnList childRCL) throws StandardException {\n+\t\tif (childRCL == null) {\n+\t\t\treturn this;\n+\t\t}\n+\t\tif (receiver != null) {\n+\t\t\treceiver = receiver.replaceIndexExpression(childRCL);\n+\t\t}\n+\t\tif (leftOperand != null) {\n+\t\t\tleftOperand = leftOperand.replaceIndexExpression(childRCL);\n+\t\t}\n+\t\tif (rightOperand != null) {\n+\t\t\trightOperand = rightOperand.replaceIndexExpression(childRCL);\n+\t\t}\n+\t\treturn this;\n+\t}\n+\n+\t@Override\n+\tpublic boolean collectExpressions(Map<Integer, List<ValueNode>> exprMap) {\n+\t\tboolean result = true;\n+\t\tif (receiver != null) {\n+\t\t\tresult = receiver.collectExpressions(exprMap);\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c136be91f09b0a1fa2c9b9786fb30c61fced173d"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MjUzNTAy", "url": "https://github.com/splicemachine/spliceengine/pull/4162#pullrequestreview-518253502", "createdAt": "2020-10-28T00:58:28Z", "commit": {"oid": "c136be91f09b0a1fa2c9b9786fb30c61fced173d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMDo1ODoyOFrOHpWO1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMDo1ODoyOFrOHpWO1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzExNzkwOQ==", "bodyText": "We need to check the rightOperandList also, as it could also contain expressions:\nFor example:\ncreate table t1 (a1 int, b1 int, c1 int);\ncreate index idx_t1 on t1(a1+1);\ncreate table t2(a2 int, b2 int, c2 int);\n\nsplice> explain select a1+1 from t1\n> , t2 where a2 in (1, a1+1);\nERROR XJ001: DERBY SQL error: SQLCODE: -1, SQLSTATE: XJ001, SQLERRMC: java.lang.IllegalStateExceptionASSERT FAILED sourceResultSetNumber expected to be >= 0 for null.A1XJ001.U", "url": "https://github.com/splicemachine/spliceengine/pull/4162#discussion_r513117909", "createdAt": "2020-10-28T00:58:28Z", "author": {"login": "yxia92"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/BinaryListOperatorNode.java", "diffHunk": "@@ -472,4 +473,24 @@ public int getOuterJoinLevel() {\n     public void setOuterJoinLevel(int level) {\n         outerJoinLevel = level;\n     }\n+\n+    public ValueNode replaceIndexExpression(ResultColumnList childRCL) throws StandardException {\n+        ValueNodeList newList = (ValueNodeList) getNodeFactory().getNode(\n+                C_NodeTypes.VALUE_NODE_LIST,\n+                getContextManager());\n+        for (Object leftItem : leftOperandList) {\n+            newList.addValueNode(((ValueNode) leftItem).replaceIndexExpression(childRCL));\n+        }\n+        leftOperandList = newList;\n+        return this;\n+    }\n+\n+    @Override\n+    public boolean collectExpressions(Map<Integer, List<ValueNode>> exprMap) {\n+        boolean result = true;\n+        for (Object leftItem : leftOperandList) {\n+            result = result && ((ValueNode) leftItem).collectExpressions(exprMap);\n+        }\n+        return result;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c136be91f09b0a1fa2c9b9786fb30c61fced173d"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MjUzNzU4", "url": "https://github.com/splicemachine/spliceengine/pull/4162#pullrequestreview-518253758", "createdAt": "2020-10-28T00:59:14Z", "commit": {"oid": "c136be91f09b0a1fa2c9b9786fb30c61fced173d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMDo1OToxNFrOHpWPtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMDo1OToxNFrOHpWPtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzExODEzNQ==", "bodyText": "We need to check the rightOperandList also.", "url": "https://github.com/splicemachine/spliceengine/pull/4162#discussion_r513118135", "createdAt": "2020-10-28T00:59:14Z", "author": {"login": "yxia92"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/BinaryListOperatorNode.java", "diffHunk": "@@ -472,4 +473,24 @@ public int getOuterJoinLevel() {\n     public void setOuterJoinLevel(int level) {\n         outerJoinLevel = level;\n     }\n+\n+    public ValueNode replaceIndexExpression(ResultColumnList childRCL) throws StandardException {\n+        ValueNodeList newList = (ValueNodeList) getNodeFactory().getNode(\n+                C_NodeTypes.VALUE_NODE_LIST,\n+                getContextManager());\n+        for (Object leftItem : leftOperandList) {\n+            newList.addValueNode(((ValueNode) leftItem).replaceIndexExpression(childRCL));\n+        }\n+        leftOperandList = newList;\n+        return this;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c136be91f09b0a1fa2c9b9786fb30c61fced173d"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MjUzOTkz", "url": "https://github.com/splicemachine/spliceengine/pull/4162#pullrequestreview-518253993", "createdAt": "2020-10-28T00:59:55Z", "commit": {"oid": "c136be91f09b0a1fa2c9b9786fb30c61fced173d"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMDo1OTo1NVrOHpWQlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMzowMzowNFrOHpYSTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzExODM1OQ==", "bodyText": "No need to check receiver.", "url": "https://github.com/splicemachine/spliceengine/pull/4162#discussion_r513118359", "createdAt": "2020-10-28T00:59:55Z", "author": {"login": "yxia92"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/BinaryLogicalOperatorNode.java", "diffHunk": "@@ -228,4 +227,36 @@ DataTypeDescriptor resolveLogicalBinaryOperator(\n \t\treturn leftType.getNullabilityType(\n \t\t\t\t\tleftType.isNullable() || rightType.isNullable());\n \t}\n+\n+\t@Override\n+\tpublic ValueNode replaceIndexExpression(ResultColumnList childRCL) throws StandardException {\n+\t\tif (childRCL == null) {\n+\t\t\treturn this;\n+\t\t}\n+\t\tif (receiver != null) {\n+\t\t\treceiver = receiver.replaceIndexExpression(childRCL);\n+\t\t}\n+\t\tif (leftOperand != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c136be91f09b0a1fa2c9b9786fb30c61fced173d"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzExODU4NQ==", "bodyText": "No need to check receiver.", "url": "https://github.com/splicemachine/spliceengine/pull/4162#discussion_r513118585", "createdAt": "2020-10-28T01:00:45Z", "author": {"login": "yxia92"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/BinaryLogicalOperatorNode.java", "diffHunk": "@@ -228,4 +227,36 @@ DataTypeDescriptor resolveLogicalBinaryOperator(\n \t\treturn leftType.getNullabilityType(\n \t\t\t\t\tleftType.isNullable() || rightType.isNullable());\n \t}\n+\n+\t@Override\n+\tpublic ValueNode replaceIndexExpression(ResultColumnList childRCL) throws StandardException {\n+\t\tif (childRCL == null) {\n+\t\t\treturn this;\n+\t\t}\n+\t\tif (receiver != null) {\n+\t\t\treceiver = receiver.replaceIndexExpression(childRCL);\n+\t\t}\n+\t\tif (leftOperand != null) {\n+\t\t\tleftOperand = leftOperand.replaceIndexExpression(childRCL);\n+\t\t}\n+\t\tif (rightOperand != null) {\n+\t\t\trightOperand = rightOperand.replaceIndexExpression(childRCL);\n+\t\t}\n+\t\treturn this;\n+\t}\n+\n+\t@Override\n+\tpublic boolean collectExpressions(Map<Integer, List<ValueNode>> exprMap) {\n+\t\tboolean result = true;\n+\t\tif (receiver != null) {\n+\t\t\tresult = receiver.collectExpressions(exprMap);\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c136be91f09b0a1fa2c9b9786fb30c61fced173d"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE0NDUzOQ==", "bodyText": "Is there a reason to call binding logic here? I don't see that binding logic is applied to other nodes like GroupByList, is there something special about OrderByList?", "url": "https://github.com/splicemachine/spliceengine/pull/4162#discussion_r513144539", "createdAt": "2020-10-28T02:37:12Z", "author": {"login": "yxia92"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/OrderByList.java", "diffHunk": "@@ -616,4 +616,13 @@ boolean requiresDescending(ColumnReference cRef,int numOptimizables) throws Stan\n          */\n         return false;\n     }\n+\n+    public void replaceIndexExpressions(ResultSetNode child) throws StandardException {\n+        ResultColumnList childRCL = child.getResultColumns();\n+        for (int i = 0; i < size(); i++) {\n+            OrderByColumn obc = (OrderByColumn) elementAt(i);\n+            obc.setColumnExpression(obc.getColumnExpression().replaceIndexExpression(childRCL));\n+        }\n+        bindOrderByColumns(child);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c136be91f09b0a1fa2c9b9786fb30c61fced173d"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE1MTU2Nw==", "bodyText": "resultSet of a SubqueryNode could be a SelectNode, but when we get it, it is called from modifyAccessPath phase, so I guess SelectNode has already been replaced by a ProjectRestrictNode, so the assertion here is OK. Am I right? A comment may be helpful here.", "url": "https://github.com/splicemachine/spliceengine/pull/4162#discussion_r513151567", "createdAt": "2020-10-28T03:03:04Z", "author": {"login": "yxia92"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/SubqueryNode.java", "diffHunk": "@@ -2702,4 +2699,11 @@ public int getCardinalityCheck() throws StandardException {\n             return OnceResultSet.DO_CARDINALITY_CHECK;\n         }\n     }\n+\n+    @Override\n+    public ValueNode replaceIndexExpression(ResultColumnList childRCL) throws StandardException {\n+        assert resultSet instanceof Optimizable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c136be91f09b0a1fa2c9b9786fb30c61fced173d"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MzA4NzEy", "url": "https://github.com/splicemachine/spliceengine/pull/4162#pullrequestreview-518308712", "createdAt": "2020-10-28T04:02:32Z", "commit": {"oid": "c136be91f09b0a1fa2c9b9786fb30c61fced173d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNDowMjozM1rOHpZPYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNDowMjozM1rOHpZPYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE2NzIwMg==", "bodyText": "I have a concern with the replacement of the resultColumns here. As all the column references that are on top of this ProjectRestrictNode that reference the result columns in resultColumns will be broken. I'm trying to use s derived table as a case to demonstrate the problem, but currently in the presence of derived table, index are always qualified as a non-covering index, so this logic is not triggered. We need to check back here once the derived table issue is fixed.", "url": "https://github.com/splicemachine/spliceengine/pull/4162#discussion_r513167202", "createdAt": "2020-10-28T04:02:33Z", "author": {"login": "yxia92"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/ProjectRestrictNode.java", "diffHunk": "@@ -809,6 +809,17 @@ else if(!(childResult instanceof FromBaseTable)){\n         }\n         accessPathModified=true;\n \n+        if (childResult.getResultColumns().isFromExprIndex()) {\n+            /* We get a shallow copy of the ResultColumnList and its\n+             * ResultColumns.  (Copy maintains ResultColumn.expression for now.)\n+             */\n+            resultColumns = childResult.getResultColumns().copyListAndObjects();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c136be91f09b0a1fa2c9b9786fb30c61fced173d"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4236cac5c473ac58a99061323b366d5edc70eda8", "author": {"user": {"login": "ascend1", "name": "Zhen Li"}}, "url": "https://github.com/splicemachine/spliceengine/commit/4236cac5c473ac58a99061323b366d5edc70eda8", "committedDate": "2020-10-28T14:38:13Z", "message": "Merge branch 'master' into DB-10175\n\nConflicts:\n\tdb-engine/src/main/java/com/splicemachine/db/impl/sql/compile/Predicate.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2cf8db9f4c07e7ecbdf84a340c73c407a3ee70ca", "author": {"user": {"login": "ascend1", "name": "Zhen Li"}}, "url": "https://github.com/splicemachine/spliceengine/commit/2cf8db9f4c07e7ecbdf84a340c73c407a3ee70ca", "committedDate": "2020-10-29T20:24:59Z", "message": "DB-10175 Address comments / add semanticallyEquals()\n\nDB-10312 Cache index expression ASTs is partially applied here so that\nthe code binding index expressions is not duplicated everywhere."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83a20d4c2342308c196697fa55929e49e997c901", "author": {"user": {"login": "ascend1", "name": "Zhen Li"}}, "url": "https://github.com/splicemachine/spliceengine/commit/83a20d4c2342308c196697fa55929e49e997c901", "committedDate": "2020-10-29T20:26:10Z", "message": "Merge branch 'master' into DB-10175"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35654b5f5111273d24a3a795f0ab4adcca2f8f70", "author": {"user": {"login": "ascend1", "name": "Zhen Li"}}, "url": "https://github.com/splicemachine/spliceengine/commit/35654b5f5111273d24a3a795f0ab4adcca2f8f70", "committedDate": "2020-10-30T10:09:08Z", "message": "DB-10175 Address comments / fix potential concurrent issue\n\nIndex expression ASTs should not be cached in IndexDescriptor because\nit is in turns cached in data dictionary cache, which is global to all\nqueries. For now, always return a copy of ASTs."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e84193961ad090ee1047773f57b3d810224cdde1", "author": {"user": {"login": "ascend1", "name": "Zhen Li"}}, "url": "https://github.com/splicemachine/spliceengine/commit/e84193961ad090ee1047773f57b3d810224cdde1", "committedDate": "2020-10-30T10:43:27Z", "message": "Merge branch 'DB-10175' into DB-10236\n\nConflicts:\n\tdb-engine/src/main/java/com/splicemachine/db/impl/sql/compile/FromBaseTable.java\n\tdb-engine/src/main/java/com/splicemachine/db/impl/sql/compile/Predicate.java\n\tdb-engine/src/main/java/com/splicemachine/db/impl/sql/compile/PredicateList.java\n\tdb-engine/src/main/java/com/splicemachine/db/impl/sql/compile/TernaryOperatorNode.java\n\tsplice_machine/src/test/java/com/splicemachine/derby/impl/sql/actions/index/IndexIT.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e15d6ad1db16a17112f3cf80e4e2b87c46039d20", "author": {"user": {"login": "ascend1", "name": "Zhen Li"}}, "url": "https://github.com/splicemachine/spliceengine/commit/e15d6ad1db16a17112f3cf80e4e2b87c46039d20", "committedDate": "2020-10-30T14:49:11Z", "message": "DB-10236 Adapt to the latest changes made in DB-10175\n\nNote: IndexIT.testCoveringExpressionBasedIndexSubquery fails in\ncurrent state because we cannot bind expressions after resultColumns\nare changed to index columns after changeAccessPath(). As a result,\nindex expressions containing JavaToSQLValueNode do not work."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93d5dd9183c6871c1822362d45225f14e8734abf", "author": {"user": {"login": "ascend1", "name": "Zhen Li"}}, "url": "https://github.com/splicemachine/spliceengine/commit/93d5dd9183c6871c1822362d45225f14e8734abf", "committedDate": "2020-10-30T17:50:59Z", "message": "DB-10236 Fix IndexIT.testCoveringExpressionBasedIndexSubquery\n\nThe fix is done by allowing binding base table columns even after\ntable's access path has been changed to index columns. This ability is\nlimited to index on expressions only."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1b3b65435c343fca40c91a1d99ae948a147461e", "author": {"user": {"login": "ascend1", "name": "Zhen Li"}}, "url": "https://github.com/splicemachine/spliceengine/commit/d1b3b65435c343fca40c91a1d99ae948a147461e", "committedDate": "2020-11-02T08:52:12Z", "message": "DB-10312 Add hashCode() to ValueNode class hierarchy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "edd0881cf1a975079c18a51632f64ac0eb77a36b", "author": {"user": {"login": "ascend1", "name": "Zhen Li"}}, "url": "https://github.com/splicemachine/spliceengine/commit/edd0881cf1a975079c18a51632f64ac0eb77a36b", "committedDate": "2020-11-02T15:29:40Z", "message": "DB-10236 Address comments / fix expr collecting and derived tables"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f192d6f3a9ee4bf31a6f7120b5db18543bc380b", "author": {"user": {"login": "ascend1", "name": "Zhen Li"}}, "url": "https://github.com/splicemachine/spliceengine/commit/1f192d6f3a9ee4bf31a6f7120b5db18543bc380b", "committedDate": "2020-11-02T16:57:50Z", "message": "DB-10236 Address comments / fix index expr in RHS of in-list"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dec647dfb3287c8ab6cc63e298cee3454ae3ba42", "author": {"user": {"login": "ascend1", "name": "Zhen Li"}}, "url": "https://github.com/splicemachine/spliceengine/commit/dec647dfb3287c8ab6cc63e298cee3454ae3ba42", "committedDate": "2020-11-04T16:25:58Z", "message": "WIP: DB-10236 Address comments / fix count(*) and index expr in window"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6fbed9d56a55f3be3bd4f02f9b6af7eee168ff2e", "author": {"user": {"login": "ascend1", "name": "Zhen Li"}}, "url": "https://github.com/splicemachine/spliceengine/commit/6fbed9d56a55f3be3bd4f02f9b6af7eee168ff2e", "committedDate": "2020-11-04T23:19:18Z", "message": "Merge branch 'master' into DB-10236\n\nConflicts:\n\tdb-engine/src/main/java/com/splicemachine/db/catalog/types/IndexDescriptorImpl.java\n\tdb-engine/src/main/java/com/splicemachine/db/impl/sql/compile/ArrayConstantNode.java\n\tdb-engine/src/main/java/com/splicemachine/db/impl/sql/compile/BinaryListOperatorNode.java\n\tdb-engine/src/main/java/com/splicemachine/db/impl/sql/compile/BinaryOperatorNode.java\n\tdb-engine/src/main/java/com/splicemachine/db/impl/sql/compile/CastNode.java\n\tdb-engine/src/main/java/com/splicemachine/db/impl/sql/compile/ConditionalNode.java\n\tdb-engine/src/main/java/com/splicemachine/db/impl/sql/compile/FromBaseTable.java\n\tdb-engine/src/main/java/com/splicemachine/db/impl/sql/compile/GenerationClauseNode.java\n\tdb-engine/src/main/java/com/splicemachine/db/impl/sql/compile/JavaToSQLValueNode.java\n\tdb-engine/src/main/java/com/splicemachine/db/impl/sql/compile/JavaValueNode.java\n\tdb-engine/src/main/java/com/splicemachine/db/impl/sql/compile/MethodCallNode.java\n\tdb-engine/src/main/java/com/splicemachine/db/impl/sql/compile/Predicate.java\n\tdb-engine/src/main/java/com/splicemachine/db/impl/sql/compile/PredicateList.java\n\tdb-engine/src/main/java/com/splicemachine/db/impl/sql/compile/SQLToJavaValueNode.java\n\tdb-engine/src/main/java/com/splicemachine/db/impl/sql/compile/StaticClassFieldReferenceNode.java\n\tdb-engine/src/main/java/com/splicemachine/db/impl/sql/compile/TernaryOperatorNode.java\n\tdb-engine/src/main/java/com/splicemachine/db/impl/sql/compile/UnaryOperatorNode.java\n\tdb-engine/src/main/java/com/splicemachine/db/impl/sql/compile/ValueNode.java\n\tdb-engine/src/main/java/com/splicemachine/db/impl/sql/compile/ValueTupleNode.java\n\tdb-engine/src/main/java/com/splicemachine/db/impl/sql/compile/VirtualColumnNode.java\n\tsplice_machine/src/test/java/com/splicemachine/derby/impl/sql/actions/index/IndexIT.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87fbb50fa6439543ca5a01ab2b4851000aba3662", "author": {"user": {"login": "ascend1", "name": "Zhen Li"}}, "url": "https://github.com/splicemachine/spliceengine/commit/87fbb50fa6439543ca5a01ab2b4851000aba3662", "committedDate": "2020-11-04T23:45:54Z", "message": "Resolved missed conflicts"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0Nzk2Mzc4", "url": "https://github.com/splicemachine/spliceengine/pull/4162#pullrequestreview-524796378", "createdAt": "2020-11-06T01:29:23Z", "commit": {"oid": "87fbb50fa6439543ca5a01ab2b4851000aba3662"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "713a0d727e775503dd2374aaba512d3794026d10", "author": {"user": {"login": "ascend1", "name": "Zhen Li"}}, "url": "https://github.com/splicemachine/spliceengine/commit/713a0d727e775503dd2374aaba512d3794026d10", "committedDate": "2020-11-07T03:02:29Z", "message": "DB-10236 Column mapping manipulation for index on expressions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d908f867665b138a317911e3caafb2ac6be60073", "author": {"user": {"login": "ascend1", "name": "Zhen Li"}}, "url": "https://github.com/splicemachine/spliceengine/commit/d908f867665b138a317911e3caafb2ac6be60073", "committedDate": "2020-11-07T03:04:11Z", "message": "Merge branch 'master' into DB-10236"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50554af111bb803018025226236573fc4b3e8976", "author": {"user": {"login": "ascend1", "name": "Zhen Li"}}, "url": "https://github.com/splicemachine/spliceengine/commit/50554af111bb803018025226236573fc4b3e8976", "committedDate": "2020-11-09T08:28:12Z", "message": "Merge branch 'master' into DB-10236"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b6aef41c1efc752ed870edc5016410a283c57e7", "author": {"user": {"login": "ascend1", "name": "Zhen Li"}}, "url": "https://github.com/splicemachine/spliceengine/commit/6b6aef41c1efc752ed870edc5016410a283c57e7", "committedDate": "2020-11-09T10:57:04Z", "message": "DB-10236 Fix outer join without correcting column references"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NzkwNzU4", "url": "https://github.com/splicemachine/spliceengine/pull/4162#pullrequestreview-527790758", "createdAt": "2020-11-11T02:02:11Z", "commit": {"oid": "6b6aef41c1efc752ed870edc5016410a283c57e7"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMjowMjoxMlrOHw4a8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMzoyNzowMVrOHw8T1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTAxODA5OQ==", "bodyText": "It seems to me that the replacement of index expression in all places (window functions, order by list) should be done in one shot before the group by node is generated. As before the group by node is generated, these expressions should all be pointing to the join result; after the group by node is generated, they will automatically be pointing to the group by result node. If we delay the replacement of expression in window function and order by list, these expression will still be pointing to the join result instead of the group by result, which does not seem right.", "url": "https://github.com/splicemachine/spliceengine/pull/4162#discussion_r521018099", "createdAt": "2020-11-11T02:02:12Z", "author": {"login": "yxia92"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/SelectNode.java", "diffHunk": "@@ -1283,6 +1322,9 @@ public ResultSetNode genProjectRestrict(int origFromListSize) throws StandardExc\n         if(hasWindows()){\n             // Now we add a window result set wrapped in a PRN on top of what we currently have.\n             for (WindowNode windowDefinition : windowDefinitionList) {\n+                if (childResultColumns.isFromExprIndex()) {\n+                    windowDefinition.replaceIndexExpression(childResultColumns);\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b6aef41c1efc752ed870edc5016410a283c57e7"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA3ODg5NQ==", "bodyText": "It seems that for non-flattened correlated subquery, we are not collecting all the expressions. Here is an example:\ncreate table t1 (a1 int, b1 int, c1 int, d1 int);\ncreate index idx_t1 on t1 (a1+1, b1+2);\ncreate table t2 (a2 int, b2 int, c2 int, d2 int);\n\nexplain select 1 from t1 --splice-properties index=idx_t1\nwhere a1+1 not in (select a2 from t2 where b1+2 =b2);\n\nIn this case, I don't see the expression a1+1 being collected. This condition is in the PR node underneath SubqueryNode but above the SELECT node, so we may examine that also.", "url": "https://github.com/splicemachine/spliceengine/pull/4162#discussion_r521078895", "createdAt": "2020-11-11T03:22:31Z", "author": {"login": "yxia92"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/SelectNode.java", "diffHunk": "@@ -2876,4 +2937,60 @@ public JBitSet collectInnerTablesFromFlattenedOJ() {\n         }\n         return collected;\n     }\n+\n+    public Map<Integer, Set<ValueNode>> collectExpressions() {\n+        HashMap<Integer, Set<ValueNode>> result = new HashMap<>();\n+\n+        if (groupByList != null) {\n+            groupByList.collectExpressions(result);\n+        }\n+\n+        if (orderByList != null) {\n+            orderByList.collectExpressions(result);\n+        }\n+\n+        if (whereClause != null) {\n+            whereClause.collectExpressions(result);\n+        }\n+        if (wherePredicates != null) {\n+            wherePredicates.collectExpressions(result);\n+        }\n+\n+        if (havingClause != null) {\n+            havingClause.collectExpressions(result);\n+        }\n+\n+        if (selectAggregates != null) {\n+            for (AggregateNode selectAggregate : selectAggregates) {\n+                selectAggregate.collectExpressions(result);\n+            }\n+        }\n+\n+        if (havingAggregates != null) {\n+            for (AggregateNode havingAggregate : havingAggregates) {\n+                havingAggregate.collectExpressions(result);\n+            }\n+        }\n+        // no need to check whereAggregates, should be empty\n+\n+        if (windowDefinitionList != null) {\n+            for (WindowNode wn : windowDefinitionList) {\n+                wn.collectExpressions(result);\n+            }\n+        }\n+\n+        for (QueryTreeNode fromItem : fromList) {\n+            if (fromItem instanceof ResultSetNode) {  // this is probably always true?\n+                ((ResultSetNode) fromItem).collectExpressions(result);\n+            }\n+        }\n+\n+        for (ResultColumn rc : resultColumns) {\n+            rc.getExpression().collectSingleExpression(result);\n+        }\n+\n+        return result;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b6aef41c1efc752ed870edc5016410a283c57e7"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA4MTgxMw==", "bodyText": "I don't see a problem with the logic here, but the below case returns a wrong plan, maybe we are missing the replacement for post join conditions?\ncreate table t1 (a1 int, b1 int, c1 int, d1 int);\ncreate index idx_t1 on t1 (a1+1, b1+2);\n\nexplain select a1+1 from t2 left join t1 --splice-properties index=idx_t1\non a1+1=a2 where a1+1 is null;\n\nPlan\n----\nCursor(n=8,rows=20,updateMode=READ_ONLY (1),engine=OLTP (default))\n  ->  ScrollInsensitive(n=8,totalCost=193.12,outputRows=20,outputHeapSize=160 B,partitions=1,parallelTasks=1)\n    ->  ProjectRestrict(n=7,totalCost=184.72,outputRows=20,outputHeapSize=160 B,partitions=1,parallelTasks=1)\n      ->  ProjectRestrict(n=6,totalCost=184.72,outputRows=20,outputHeapSize=160 B,partitions=1,parallelTasks=1,preds=[is null((A1[5:2] + 1))])\n        ->  MergeSortLeftOuterJoin(n=5,totalCost=184.72,outputRows=20,outputHeapSize=160 B,partitions=1,parallelTasks=1,preds=[(A1[5:3] = A2[5:1])])\n          ->  ProjectRestrict(n=4,totalCost=84.03,outputRows=20,outputHeapSize=160 B,partitions=1,parallelTasks=1)\n            ->  IndexLookup(n=3,totalCost=84.03,outputRows=20,outputHeapSize=160 B,partitions=1,parallelTasks=1)\n              ->  IndexScan[IDX_T1(1681)](n=2,totalCost=4.03,scannedRows=20,outputRows=20,outputHeapSize=160 B,partitions=1,parallelTasks=1,baseTable=T1(1664),preds=[(A1[5:3] = A2[5:1])])\n          ->  TableScan[T2(1696)](n=0,totalCost=4.04,scannedRows=20,outputRows=20,outputHeapSize=80 B,partitions=1,parallelTasks=1)\n\nthe condition a1=a2 is pushed to the the index scan step(n=2),", "url": "https://github.com/splicemachine/spliceengine/pull/4162#discussion_r521081813", "createdAt": "2020-11-11T03:27:01Z", "author": {"login": "yxia92"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/JoinNode.java", "diffHunk": "@@ -378,6 +402,33 @@ public Optimizable modifyAccessPath(JBitSet outerTables) throws StandardExceptio\n \n         super.modifyAccessPath(outerTables);\n \n+        /* If any of the two children has chosen an index on expression, result\n+         * columns have to be rebuilt because the number may change. Column\n+         * mapping between parent node and this node is broken after reassigning\n+         * resultColumns. For this reason, resultColumns of (grand-)parent nodes\n+         * must be rebuilt until the top select node in the current query block.\n+         *\n+         * This logic handles nested JoinNode. If parent node is a PRN, its\n+         * result columns are rebuilt in its modifyAccessPath() method. If\n+         * parent is SelectNode, there is no need to rebuild its result columns\n+         * but only replace their expressions.\n+         */\n+        if (leftResultSet.getResultColumns().isFromExprIndex() || rightResultSet.getResultColumns().isFromExprIndex()) {\n+            ResultColumnList newResultColumns = (ResultColumnList) getNodeFactory()\n+                    .getNode(C_NodeTypes.RESULT_COLUMN_LIST, getContextManager());\n+            newResultColumns.copyOrderBySelect(resultColumns);\n+\n+            getNewResultColumns(resultColumns, newResultColumns, leftResultSet);\n+            getNewResultColumns(resultColumns, newResultColumns, rightResultSet);\n+            resultColumns = newResultColumns;\n+            assert resultColumns.size() == leftResultSet.getResultColumns().size() + rightResultSet.getResultColumns().size();\n+        }\n+\n+        // replace join predicates pushed down to right\n+        if (leftResultSet.getResultColumns().isFromExprIndex()) {\n+            rightResultSet.replaceIndexExpressions(leftResultSet.getResultColumns());\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b6aef41c1efc752ed870edc5016410a283c57e7"}, "originalPosition": 70}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4dc00f89ca5d25c80a135036925b7298607d57ab", "author": {"user": {"login": "ascend1", "name": "Zhen Li"}}, "url": "https://github.com/splicemachine/spliceengine/commit/4dc00f89ca5d25c80a135036925b7298607d57ab", "committedDate": "2020-11-12T04:10:57Z", "message": "DB-10236 Address comments / fix collecting expressions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2208d1c4f7a8b2cb3b207e07d658704a5580eefd", "author": {"user": {"login": "ascend1", "name": "Zhen Li"}}, "url": "https://github.com/splicemachine/spliceengine/commit/2208d1c4f7a8b2cb3b207e07d658704a5580eefd", "committedDate": "2020-11-12T06:38:51Z", "message": "DB-10236 Address comment / fix post join condition replacing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5NTEwMjg2", "url": "https://github.com/splicemachine/spliceengine/pull/4162#pullrequestreview-529510286", "createdAt": "2020-11-12T21:27:03Z", "commit": {"oid": "2208d1c4f7a8b2cb3b207e07d658704a5580eefd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e6bbc2a956aae13ad97471165f8da1737d6b8b0", "author": {"user": {"login": "ascend1", "name": "Zhen Li"}}, "url": "https://github.com/splicemachine/spliceengine/commit/9e6bbc2a956aae13ad97471165f8da1737d6b8b0", "committedDate": "2020-11-12T22:55:48Z", "message": "Merge branch 'master' into DB-10236\n\nConflicts:\n\tdb-engine/src/main/java/com/splicemachine/db/impl/sql/compile/ValueTupleNode.java"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1118, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}