{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyMzUxNDAy", "number": 3668, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxODoxMzoyOFrOEEzAgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxOTowNTozMFrOEE0AxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDY1NDcyOnYy", "diffSide": "RIGHT", "path": "hbase_sql/src/main/java/com/splicemachine/derby/impl/SpliceSpark.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxODoxMzoyOFrOGipQQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwODozOTo1N1rOGkRN9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk4MDY3NA==", "bodyText": "Is it possible session is not initialized and null when getSession s called first time?", "url": "https://github.com/splicemachine/spliceengine/pull/3668#discussion_r438980674", "createdAt": "2020-06-11T18:13:28Z", "author": {"login": "jyuanca"}, "path": "hbase_sql/src/main/java/com/splicemachine/derby/impl/SpliceSpark.java", "diffHunk": "@@ -70,14 +71,23 @@ private SpliceSpark() {} // private constructor forbids creating instances\n     private static final String OLD_SCOPE_KEY = \"spark.rdd.scope.old\";\n     private static final String OLD_SCOPE_OVERRIDE = \"spark.rdd.scope.noOverride.old\";\n \n+    public static void resetSession() {\n+        sessions.remove();\n+    }\n+\n     // Sets both ctx and session\n     public static synchronized SparkSession getSession() {\n         String threadName = Thread.currentThread().getName();\n         if (!SpliceClient.isClient() && !threadName.startsWith(\"olap-worker-\")) {\n              // Not running on the Olap Server... raise exception. Use getSessionUnsafe() if you know what you are doing.\n             throw new RuntimeException(\"Trying to get a SparkSession from outside the OlapServer\");\n         }\n-        return getSessionUnsafe();\n+        SparkSession result = sessions.get();\n+        if (result == null) {\n+            result = session.newSession();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "319406a823cbc845302de4aa4609007a97f32e7f"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY4NDAyMA==", "bodyText": "Nice catch, I'm calling getSessionUnsafe() now to guarantee it's properly initialized", "url": "https://github.com/splicemachine/spliceengine/pull/3668#discussion_r440684020", "createdAt": "2020-06-16T08:39:57Z", "author": {"login": "dgomezferro"}, "path": "hbase_sql/src/main/java/com/splicemachine/derby/impl/SpliceSpark.java", "diffHunk": "@@ -70,14 +71,23 @@ private SpliceSpark() {} // private constructor forbids creating instances\n     private static final String OLD_SCOPE_KEY = \"spark.rdd.scope.old\";\n     private static final String OLD_SCOPE_OVERRIDE = \"spark.rdd.scope.noOverride.old\";\n \n+    public static void resetSession() {\n+        sessions.remove();\n+    }\n+\n     // Sets both ctx and session\n     public static synchronized SparkSession getSession() {\n         String threadName = Thread.currentThread().getName();\n         if (!SpliceClient.isClient() && !threadName.startsWith(\"olap-worker-\")) {\n              // Not running on the Olap Server... raise exception. Use getSessionUnsafe() if you know what you are doing.\n             throw new RuntimeException(\"Trying to get a SparkSession from outside the OlapServer\");\n         }\n-        return getSessionUnsafe();\n+        SparkSession result = sessions.get();\n+        if (result == null) {\n+            result = session.newSession();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk4MDY3NA=="}, "originalCommit": {"oid": "319406a823cbc845302de4aa4609007a97f32e7f"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDgxOTI1OnYy", "diffSide": "RIGHT", "path": "hbase_sql/src/main/java/com/splicemachine/stream/StreamableRDD.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxOTowNTozMFrOGiq6mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwODoyMzo0OFrOGkQl8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAwNzg5OA==", "bodyText": "Why do we need to set shuffle partition property both here and in QueryJob?", "url": "https://github.com/splicemachine/spliceengine/pull/3668#discussion_r439007898", "createdAt": "2020-06-11T19:05:30Z", "author": {"login": "yxia92"}, "path": "hbase_sql/src/main/java/com/splicemachine/stream/StreamableRDD.java", "diffHunk": "@@ -153,6 +156,8 @@ private void submitBatch(int batch, int batchSize, int numPartitions, final Java\n             public Object call() throws Exception {\n                 SparkContext sc = SpliceSpark.getContextUnsafe().sc();\n                 sc.setLocalProperties(properties);\n+                if (shufflePartitions != null)\n+                    sc.setLocalProperty(SQLConf.SHUFFLE_PARTITIONS().key(), shufflePartitions.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5d6ed1fce94ada9cae0a6bed81c0d594c550397"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY3Mzc3Nw==", "bodyText": "This wasn't needed, it was an initial attempt at fixing the problem that didn't work out, nice catch!", "url": "https://github.com/splicemachine/spliceengine/pull/3668#discussion_r440673777", "createdAt": "2020-06-16T08:23:48Z", "author": {"login": "dgomezferro"}, "path": "hbase_sql/src/main/java/com/splicemachine/stream/StreamableRDD.java", "diffHunk": "@@ -153,6 +156,8 @@ private void submitBatch(int batch, int batchSize, int numPartitions, final Java\n             public Object call() throws Exception {\n                 SparkContext sc = SpliceSpark.getContextUnsafe().sc();\n                 sc.setLocalProperties(properties);\n+                if (shufflePartitions != null)\n+                    sc.setLocalProperty(SQLConf.SHUFFLE_PARTITIONS().key(), shufflePartitions.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAwNzg5OA=="}, "originalCommit": {"oid": "c5d6ed1fce94ada9cae0a6bed81c0d594c550397"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3193, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}