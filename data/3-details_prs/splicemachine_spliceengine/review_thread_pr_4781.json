{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyNTgwMTc4", "number": 4781, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQwMDo1MTo0N1rOFBCbWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQwMDo1MTo0N1rOFBCbWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NjMyNjY2OnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/TableOperatorNode.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQwMDo1MTo0N1rOH_nQ3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxODowMDowMVrOIBtuIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ2NTYyOQ==", "bodyText": "It might be a good idea to introduce a new flag, such as 'needsProjectRestrict' so we don't overload flattenableJoin.  Is my understanding correct?  We can still flatten these child JoinNodes, but we just need to mark them so a ProjectRestrict is built?", "url": "https://github.com/splicemachine/spliceengine/pull/4781#discussion_r536465629", "createdAt": "2020-12-05T00:51:47Z", "author": {"login": "msirek"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/TableOperatorNode.java", "diffHunk": "@@ -529,6 +529,19 @@ protected FromTable getFromTableByName(String name,String schemaName,boolean exa\n      */\n     @Override\n     public ResultSetNode preprocess(int numTables, GroupByList gbl, FromList fromList) throws StandardException{\n+        /* DB-10817 note\n+         * For a non-flattenable join, set the non-flattenable flag to all nested joins.\n+         * This has nothing to do with flattening, but to build a PRN on top of each\n+         * nested joins. This is necessary because JoinConditionVisitor may add extra\n+         * hash key columns into children's result column lists. If any child is a\n+         * JoinNode, not PRN, then it breaks the equation that\n+         * resultColumns.size() = leftResultSet.resultColumns.size() + rightResultSet.resultColumns.size(),\n+         * which is the assumption in generated code.\n+         */\n+        if (!isFlattenableJoinNode()) {\n+            leftResultSet.notFlattenableJoin();\n+            rightResultSet.notFlattenableJoin();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f913266eca67f3a33682514ed0c3eb6b6f3ed40b"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM0MzQ5MQ==", "bodyText": "Hmm, I'm not sure if we will flatten the child JoinNodes in this case. Here is my understanding from the source code:\nFromSubquery and JoinNodes flattening happens in SelectNode's preprocess(), when calling fromList.flattenFromTables(...). So at this time, join order is the one specified in query, no reordering yet.\nLooking into flattenFromTables, we see that it iterates over each FromTable in fromList. If a FromTable is a JoinNode that can be flattened, its children will be put into fromList and flattened is set to true. The outer while loop continues, meaning we will try to flatten the nested join.\nHowever, if the JoinNode is not flattenable, then flattened will not be set, and the outer loop terminates. That means all nested loops do not have a chance to be considered. Basically, that means if a JoinNode is not flattenable, the whole sub-tree is not flattenable. Another clue about this is the implementation of notFlattenableJoin. This method is actually recursive. Calling leftResultSet.notFlattenableJoin() sets all JoinNodes in the sub-tree to be non-flattenable.\nTo me, the question is why we need this flag. If a join cannot be flattened, then all nested joins in the sub-tree doesn't participate join ordering? But I see that we maintain dependencies between joins, too. If that's the case, shouldn't all joins participate join ordering and dependencies prevent some illegal order? Do you have a clue on this Mark?", "url": "https://github.com/splicemachine/spliceengine/pull/4781#discussion_r537343491", "createdAt": "2020-12-07T09:13:49Z", "author": {"login": "ascend1"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/TableOperatorNode.java", "diffHunk": "@@ -529,6 +529,19 @@ protected FromTable getFromTableByName(String name,String schemaName,boolean exa\n      */\n     @Override\n     public ResultSetNode preprocess(int numTables, GroupByList gbl, FromList fromList) throws StandardException{\n+        /* DB-10817 note\n+         * For a non-flattenable join, set the non-flattenable flag to all nested joins.\n+         * This has nothing to do with flattening, but to build a PRN on top of each\n+         * nested joins. This is necessary because JoinConditionVisitor may add extra\n+         * hash key columns into children's result column lists. If any child is a\n+         * JoinNode, not PRN, then it breaks the equation that\n+         * resultColumns.size() = leftResultSet.resultColumns.size() + rightResultSet.resultColumns.size(),\n+         * which is the assumption in generated code.\n+         */\n+        if (!isFlattenableJoinNode()) {\n+            leftResultSet.notFlattenableJoin();\n+            rightResultSet.notFlattenableJoin();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ2NTYyOQ=="}, "originalCommit": {"oid": "f913266eca67f3a33682514ed0c3eb6b6f3ed40b"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY2ODU3Ng==", "bodyText": "@ascend1 I'm not sure, unless a JoinNode can show up in multiple FromLists, or maybe the code author just wanted the nodes to all be consistent (indicate that nothing was flattened).  In any case, the code you added, I see the same code in JoinNode.java, so this is the current convention for marking the tree, so is consistent.  Also, I cannot find a test case where the recursive marking of notFlattenableJoin makes a difference.", "url": "https://github.com/splicemachine/spliceengine/pull/4781#discussion_r538668576", "createdAt": "2020-12-08T18:00:01Z", "author": {"login": "msirek"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/TableOperatorNode.java", "diffHunk": "@@ -529,6 +529,19 @@ protected FromTable getFromTableByName(String name,String schemaName,boolean exa\n      */\n     @Override\n     public ResultSetNode preprocess(int numTables, GroupByList gbl, FromList fromList) throws StandardException{\n+        /* DB-10817 note\n+         * For a non-flattenable join, set the non-flattenable flag to all nested joins.\n+         * This has nothing to do with flattening, but to build a PRN on top of each\n+         * nested joins. This is necessary because JoinConditionVisitor may add extra\n+         * hash key columns into children's result column lists. If any child is a\n+         * JoinNode, not PRN, then it breaks the equation that\n+         * resultColumns.size() = leftResultSet.resultColumns.size() + rightResultSet.resultColumns.size(),\n+         * which is the assumption in generated code.\n+         */\n+        if (!isFlattenableJoinNode()) {\n+            leftResultSet.notFlattenableJoin();\n+            rightResultSet.notFlattenableJoin();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ2NTYyOQ=="}, "originalCommit": {"oid": "f913266eca67f3a33682514ed0c3eb6b6f3ed40b"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2705, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}