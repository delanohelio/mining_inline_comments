{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxNTA3NzM5", "number": 4266, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMDowMDozM1rOEvsofw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMTo0NTozNVrOEyT1Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NDQ5NzkxOnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/DeleteNode.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMDowMDozM1rOHk0fkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwODozMTo0OFrOHlgZcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM3MDgzNA==", "bodyText": "maybe the last parameter should be argCount+4 as well?", "url": "https://github.com/splicemachine/spliceengine/pull/4266#discussion_r508370834", "createdAt": "2020-10-20T10:00:33Z", "author": {"login": "hatyo"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/DeleteNode.java", "diffHunk": "@@ -703,12 +730,14 @@ public void generate(ActivationClassBuilder acb,\n         if (\"getDeleteResultSet\".equals(resultSetGetter)) {\n             mb.push(this.printExplainInformationForActivation());\n             BaseJoinStrategy.pushNullableString(mb, bulkDeleteDirectory);\n+            BaseJoinStrategy.pushNullableString(mb, isNoTriggerRIMode() ? \"1\" : \"0\" );\n+\n             if (colMap != null && colMap.length > 0) {\n                 mb.push(acb.addItem(colMap));\n             } else {\n                 mb.push(-1);\n             }\n-            argCount += 3;\n+            argCount += 4;\n         }\n         mb.callMethod(VMOpcode.INVOKEINTERFACE, (String) null, resultSetGetter, ClassName.ResultSet, argCount+3);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f72f583f6f1ecd3e12917d696c3b00b6cd7c7bd4"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA5MDE2Mg==", "bodyText": "no, the argCount+=4 is specific for the if (\"getDeleteResultSet\".equals(resultSetGetter)).\nWe push here to mb the 4 parameters printExplainInformationForActivation, bulkDeleteDirectory, isNoTriggerRIMode and colMap.\nThe arg+3 is for the parameters (String) null, resultSetGetter, ClassName.ResultSet.\nI mean to be honest, we should change how we do this. There's reflection and stuff that should make this rock solid.", "url": "https://github.com/splicemachine/spliceengine/pull/4266#discussion_r509090162", "createdAt": "2020-10-21T08:31:48Z", "author": {"login": "martinrupp"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/DeleteNode.java", "diffHunk": "@@ -703,12 +730,14 @@ public void generate(ActivationClassBuilder acb,\n         if (\"getDeleteResultSet\".equals(resultSetGetter)) {\n             mb.push(this.printExplainInformationForActivation());\n             BaseJoinStrategy.pushNullableString(mb, bulkDeleteDirectory);\n+            BaseJoinStrategy.pushNullableString(mb, isNoTriggerRIMode() ? \"1\" : \"0\" );\n+\n             if (colMap != null && colMap.length > 0) {\n                 mb.push(acb.addItem(colMap));\n             } else {\n                 mb.push(-1);\n             }\n-            argCount += 3;\n+            argCount += 4;\n         }\n         mb.callMethod(VMOpcode.INVOKEINTERFACE, (String) null, resultSetGetter, ClassName.ResultSet, argCount+3);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM3MDgzNA=="}, "originalCommit": {"oid": "f72f583f6f1ecd3e12917d696c3b00b6cd7c7bd4"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NDUwMDgzOnYy", "diffSide": "RIGHT", "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/load/HdfsImport.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMDowMToyMlrOHk0hgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNTozNDo1MFrOHlDkug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM3MTMyOQ==", "bodyText": "makes sense to check, that conn != null, as SpliceAdmin.getDefaultConn can throw SQLException", "url": "https://github.com/splicemachine/spliceengine/pull/4266#discussion_r508371329", "createdAt": "2020-10-20T10:01:22Z", "author": {"login": "ipraznik-splice"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/load/HdfsImport.java", "diffHunk": "@@ -770,6 +828,9 @@ private static void doImport(String schemaName,\n                 rs.open();\n                 results[0] = new EmbedResultSet40((EmbedConnection) conn, rs, false, null, true);\n             } catch (SQLException | StandardException | IOException e) {\n+                if( isLoadReplaceMode ) {\n+                    conn.rollback();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f72f583f6f1ecd3e12917d696c3b00b6cd7c7bd4"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYxNzkxNA==", "bodyText": "good find! fixed", "url": "https://github.com/splicemachine/spliceengine/pull/4266#discussion_r508617914", "createdAt": "2020-10-20T15:34:50Z", "author": {"login": "martinrupp"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/load/HdfsImport.java", "diffHunk": "@@ -770,6 +828,9 @@ private static void doImport(String schemaName,\n                 rs.open();\n                 results[0] = new EmbedResultSet40((EmbedConnection) conn, rs, false, null, true);\n             } catch (SQLException | StandardException | IOException e) {\n+                if( isLoadReplaceMode ) {\n+                    conn.rollback();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM3MTMyOQ=="}, "originalCommit": {"oid": "f72f583f6f1ecd3e12917d696c3b00b6cd7c7bd4"}, "originalPosition": 174}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NDUxMTI5OnYy", "diffSide": "RIGHT", "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/sql/execute/operations/InsertOperation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMDowNDowNFrOHk0oCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwODoxNDo1NFrOHlfqPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM3MzAwMQ==", "bodyText": "looks like not used", "url": "https://github.com/splicemachine/spliceengine/pull/4266#discussion_r508373001", "createdAt": "2020-10-20T10:04:04Z", "author": {"login": "ipraznik-splice"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/sql/execute/operations/InsertOperation.java", "diffHunk": "@@ -38,6 +38,7 @@\n import com.splicemachine.derby.impl.sql.execute.actions.InsertConstantOperation;\n import com.splicemachine.derby.impl.sql.execute.sequence.SequenceKey;\n import com.splicemachine.derby.impl.sql.execute.sequence.SpliceSequence;\n+import com.splicemachine.derby.stream.control.ControlDataSet;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f72f583f6f1ecd3e12917d696c3b00b6cd7c7bd4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA3ODA3OQ==", "bodyText": "done", "url": "https://github.com/splicemachine/spliceengine/pull/4266#discussion_r509078079", "createdAt": "2020-10-21T08:14:54Z", "author": {"login": "martinrupp"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/sql/execute/operations/InsertOperation.java", "diffHunk": "@@ -38,6 +38,7 @@\n import com.splicemachine.derby.impl.sql.execute.actions.InsertConstantOperation;\n import com.splicemachine.derby.impl.sql.execute.sequence.SequenceKey;\n import com.splicemachine.derby.impl.sql.execute.sequence.SpliceSequence;\n+import com.splicemachine.derby.stream.control.ControlDataSet;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM3MzAwMQ=="}, "originalCommit": {"oid": "f72f583f6f1ecd3e12917d696c3b00b6cd7c7bd4"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NDUzMDk2OnYy", "diffSide": "RIGHT", "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/output/insert/InsertPipelineWriter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMDowODo1NVrOHk00dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwODoxNTowNVrOHlfqsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM3NjE4MQ==", "bodyText": "field name is not in Java style", "url": "https://github.com/splicemachine/spliceengine/pull/4266#discussion_r508376181", "createdAt": "2020-10-20T10:08:55Z", "author": {"login": "ipraznik-splice"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/output/insert/InsertPipelineWriter.java", "diffHunk": "@@ -58,6 +57,7 @@\n     protected InsertOperation insertOperation;\n     protected boolean isUpsert;\n     private Partition table;\n+    private boolean load_replace_mode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f72f583f6f1ecd3e12917d696c3b00b6cd7c7bd4"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA3ODE5NA==", "bodyText": "done (also others in change)", "url": "https://github.com/splicemachine/spliceengine/pull/4266#discussion_r509078194", "createdAt": "2020-10-21T08:15:05Z", "author": {"login": "martinrupp"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/output/insert/InsertPipelineWriter.java", "diffHunk": "@@ -58,6 +57,7 @@\n     protected InsertOperation insertOperation;\n     protected boolean isUpsert;\n     private Partition table;\n+    private boolean load_replace_mode;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM3NjE4MQ=="}, "originalCommit": {"oid": "f72f583f6f1ecd3e12917d696c3b00b6cd7c7bd4"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NDUzNDI0OnYy", "diffSide": "RIGHT", "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/output/insert/InsertTableWriterBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMDowOTo1MFrOHk02og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwODoxNToxMFrOHlfq9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM3NjczOA==", "bodyText": "parameter load_replace_mode  name not in Java style", "url": "https://github.com/splicemachine/spliceengine/pull/4266#discussion_r508376738", "createdAt": "2020-10-20T10:09:50Z", "author": {"login": "ipraznik-splice"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/output/insert/InsertTableWriterBuilder.java", "diffHunk": "@@ -243,4 +247,16 @@ public static InsertTableWriterBuilder getInsertTableWriterBuilderFromBase64Stri\n     public String getInsertTableWriterBuilderBase64String() throws IOException, StandardException {\n         return Base64.encodeBase64String(SerializationUtils.serialize(this));\n     }\n+\n+\n+    @Override\n+    public DataSetWriterBuilder loadReplaceMode(boolean load_replace_mode) {\n+        this.loadReplaceMode = load_replace_mode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f72f583f6f1ecd3e12917d696c3b00b6cd7c7bd4"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA3ODI2Mg==", "bodyText": "done", "url": "https://github.com/splicemachine/spliceengine/pull/4266#discussion_r509078262", "createdAt": "2020-10-21T08:15:10Z", "author": {"login": "martinrupp"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/output/insert/InsertTableWriterBuilder.java", "diffHunk": "@@ -243,4 +247,16 @@ public static InsertTableWriterBuilder getInsertTableWriterBuilderFromBase64Stri\n     public String getInsertTableWriterBuilderBase64String() throws IOException, StandardException {\n         return Base64.encodeBase64String(SerializationUtils.serialize(this));\n     }\n+\n+\n+    @Override\n+    public DataSetWriterBuilder loadReplaceMode(boolean load_replace_mode) {\n+        this.loadReplaceMode = load_replace_mode;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM3NjczOA=="}, "originalCommit": {"oid": "f72f583f6f1ecd3e12917d696c3b00b6cd7c7bd4"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NDU3NjcyOnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/dictionary/TableDescriptor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMDoyMToxMVrOHk1RRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMDoyMToxMVrOHk1RRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM4MzU1OQ==", "bodyText": "nice refactoring.", "url": "https://github.com/splicemachine/spliceengine/pull/4266#discussion_r508383559", "createdAt": "2020-10-20T10:21:11Z", "author": {"login": "hatyo"}, "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/dictionary/TableDescriptor.java", "diffHunk": "@@ -784,6 +784,18 @@ public int getQualifiedNumberOfIndexes(int minColCount,boolean nonUniqeTrumpsCol\n         return matches;\n     }\n \n+    private static void assertValidStatementType(int statementType)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f72f583f6f1ecd3e12917d696c3b00b6cd7c7bd4"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NDU5MDg2OnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/DeleteNode.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMDoyNDo1NFrOHk1aQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwODozMjozOFrOHlgbow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM4NTg1OQ==", "bodyText": "Out of curiosity, why do we call remove here causing a side-effect? If that's intentional, should be maybe change the method name into something like spliceDeleteProperties ( no puns intended! :) )", "url": "https://github.com/splicemachine/spliceengine/pull/4266#discussion_r508385859", "createdAt": "2020-10-20T10:24:54Z", "author": {"login": "hatyo"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/DeleteNode.java", "diffHunk": "@@ -112,6 +114,32 @@ public void init(Object targetTableName,\n         this.targetProperties = (Properties) targetProperties;\n     }\n \n+    static public boolean isBulkDelete(Properties properties)\n+    {\n+        return properties == null ? false :\n+                properties.getProperty(BULK_DELETE_DIRECTORY) != null;\n+    }\n+\n+    static public Properties getDeleteProperties(Properties tableProperties)\n+    {\n+        if (tableProperties == null) {\n+            return null;\n+        }\n+        String dir = (String)tableProperties.remove(BULK_DELETE_DIRECTORY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f72f583f6f1ecd3e12917d696c3b00b6cd7c7bd4"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA5MDcyMw==", "bodyText": "you are right. i have no idea, i just mimicked the original code", "url": "https://github.com/splicemachine/spliceengine/pull/4266#discussion_r509090723", "createdAt": "2020-10-21T08:32:38Z", "author": {"login": "martinrupp"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/DeleteNode.java", "diffHunk": "@@ -112,6 +114,32 @@ public void init(Object targetTableName,\n         this.targetProperties = (Properties) targetProperties;\n     }\n \n+    static public boolean isBulkDelete(Properties properties)\n+    {\n+        return properties == null ? false :\n+                properties.getProperty(BULK_DELETE_DIRECTORY) != null;\n+    }\n+\n+    static public Properties getDeleteProperties(Properties tableProperties)\n+    {\n+        if (tableProperties == null) {\n+            return null;\n+        }\n+        String dir = (String)tableProperties.remove(BULK_DELETE_DIRECTORY);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM4NTg1OQ=="}, "originalCommit": {"oid": "f72f583f6f1ecd3e12917d696c3b00b6cd7c7bd4"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NDYxNDQ0OnYy", "diffSide": "RIGHT", "path": "hbase_pipeline/src/main/java/com/splicemachine/derby/hbase/SpliceIndexEndpoint.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMDozMToyMVrOHk1pPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMDozMToyMVrOHk1pPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM4OTY5Mg==", "bodyText": "I guess you want to have something similar to reverse iterator, right? (not that it exists AFAIK, but maybe you can wrap this in a special method to make the intention clear.", "url": "https://github.com/splicemachine/spliceengine/pull/4266#discussion_r508389692", "createdAt": "2020-10-20T10:31:21Z", "author": {"login": "hatyo"}, "path": "hbase_pipeline/src/main/java/com/splicemachine/derby/hbase/SpliceIndexEndpoint.java", "diffHunk": "@@ -198,15 +199,26 @@ private boolean useToken(BulkWrites bulkWrites) {\n         return true;\n     }\n \n+    // todo: improve this\n+    private boolean isLoadReplaceMode(BulkWrites bulkWrites) {\n+        boolean loadReplaceMode = false;\n+        Iterator<BulkWrite> iterator = bulkWrites.getBulkWrites().iterator();\n+        if (iterator.hasNext()) {\n+            BulkWrite bw = iterator.next();\n+            loadReplaceMode = bw.isLoadReplaceMode();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f72f583f6f1ecd3e12917d696c3b00b6cd7c7bd4"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NDYyNDIyOnYy", "diffSide": "RIGHT", "path": "pipeline_api/src/main/java/com/splicemachine/pipeline/contextfactory/LocalWriteContextFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMDozNDowMFrOHk1vVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwODo0Mjo0MFrOHlg2XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM5MTI1Mg==", "bodyText": "please write a comment here explaining situations where foreignKeyChecks can be set to false.", "url": "https://github.com/splicemachine/spliceengine/pull/4266#discussion_r508391252", "createdAt": "2020-10-20T10:34:00Z", "author": {"login": "hatyo"}, "path": "pipeline_api/src/main/java/com/splicemachine/pipeline/contextfactory/LocalWriteContextFactory.java", "diffHunk": "@@ -231,7 +222,8 @@ private void addWriteHandlerFactories(int expectedWrites, PipelineWriteContext c\n             ddlFactories.addFactories(context,true,expectedWrites);\n \n             // FK - child intercept (of inserts/updates)\n-            fkGroup.addFactories(context,false,expectedWrites);\n+            if( foreignKeyChecks )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f72f583f6f1ecd3e12917d696c3b00b6cd7c7bd4"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA5NzU2NQ==", "bodyText": "done", "url": "https://github.com/splicemachine/spliceengine/pull/4266#discussion_r509097565", "createdAt": "2020-10-21T08:42:40Z", "author": {"login": "martinrupp"}, "path": "pipeline_api/src/main/java/com/splicemachine/pipeline/contextfactory/LocalWriteContextFactory.java", "diffHunk": "@@ -231,7 +222,8 @@ private void addWriteHandlerFactories(int expectedWrites, PipelineWriteContext c\n             ddlFactories.addFactories(context,true,expectedWrites);\n \n             // FK - child intercept (of inserts/updates)\n-            fkGroup.addFactories(context,false,expectedWrites);\n+            if( foreignKeyChecks )", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM5MTI1Mg=="}, "originalCommit": {"oid": "f72f583f6f1ecd3e12917d696c3b00b6cd7c7bd4"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMDQ5ODU1OnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/execute/ResultSetFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNDoxMTozM1rOHnPl2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwOToyMjoyNFrOHsmCGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDkxMTk2MA==", "bodyText": "Is it possible to get a better datatype here? are we expecting to pass more info in this parameter in the future?", "url": "https://github.com/splicemachine/spliceengine/pull/4266#discussion_r510911960", "createdAt": "2020-10-23T14:11:33Z", "author": {"login": "dgomezferro"}, "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/execute/ResultSetFactory.java", "diffHunk": "@@ -185,12 +185,13 @@ ResultSet getDeleteVTIResultSet(NoPutResultSet source, double optimizerEstimated\n      *               be deleted from the target table. This result set must\n      *               contain one column which provides RowLocations that are\n      *               valid in the target table.\n+     * @param noTriggerRI if set to 1, DELETE will not fire triggers or check foreign key constraints\n      * @return the delete operation as a result set.\n      * @throws StandardException thrown when unable to perform the delete\n      */\n     ResultSet getDeleteResultSet(NoPutResultSet source, double optimizerEstimatedRowCount,\n                                  double optimizerEstimatedCost, String tableVersion,\n-                                 String explainPlan, String bulkDeleteDirectory, int colMapRefItem)\n+                                 String explainPlan, String bulkDeleteDirectory, String noTriggerRI, int colMapRefItem)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28d61c9a0a096916a991681ae15a215590367942"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUyMjUyMw==", "bodyText": "done", "url": "https://github.com/splicemachine/spliceengine/pull/4266#discussion_r516522523", "createdAt": "2020-11-03T09:22:24Z", "author": {"login": "martinrupp"}, "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/execute/ResultSetFactory.java", "diffHunk": "@@ -185,12 +185,13 @@ ResultSet getDeleteVTIResultSet(NoPutResultSet source, double optimizerEstimated\n      *               be deleted from the target table. This result set must\n      *               contain one column which provides RowLocations that are\n      *               valid in the target table.\n+     * @param noTriggerRI if set to 1, DELETE will not fire triggers or check foreign key constraints\n      * @return the delete operation as a result set.\n      * @throws StandardException thrown when unable to perform the delete\n      */\n     ResultSet getDeleteResultSet(NoPutResultSet source, double optimizerEstimatedRowCount,\n                                  double optimizerEstimatedCost, String tableVersion,\n-                                 String explainPlan, String bulkDeleteDirectory, int colMapRefItem)\n+                                 String explainPlan, String bulkDeleteDirectory, String noTriggerRI, int colMapRefItem)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDkxMTk2MA=="}, "originalCommit": {"oid": "28d61c9a0a096916a991681ae15a215590367942"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMTg0MDcxOnYy", "diffSide": "RIGHT", "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/output/delete/DeletePipelineWriter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMTozMTo1MFrOHo3iYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDowMDowNlrOHsnfWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYxNTAwOA==", "bodyText": "Isn't it possible you are changing here a shared writeConfiguration?", "url": "https://github.com/splicemachine/spliceengine/pull/4266#discussion_r512615008", "createdAt": "2020-10-27T11:31:50Z", "author": {"login": "dgomezferro"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/output/delete/DeletePipelineWriter.java", "diffHunk": "@@ -44,23 +44,27 @@\n     public int rowsDeleted = 0;\n     protected DeleteOperation deleteOperation;\n \n-    public DeletePipelineWriter(TxnView txn,byte[] token,long heapConglom,long tempConglomID, String tableVersion, ExecRow execRowDefinition, OperationContext operationContext) throws StandardException {\n-        super(txn, token, heapConglom, tempConglomID, tableVersion, execRowDefinition, operationContext);\n+    public DeletePipelineWriter(TxnView txn, byte[] token, long heapConglom, long tempConglomID,\n+                                String tableVersion, ExecRow execRowDefinition, OperationContext operationContext,\n+                                boolean loadReplaceMode)\n+            throws StandardException {\n+        super(txn, token, heapConglom, tempConglomID, tableVersion, execRowDefinition, operationContext, loadReplaceMode);\n         if (operationContext != null) {\n             deleteOperation = (DeleteOperation)operationContext.getOperation();\n         }\n     }\n \n     public void open() throws StandardException {\n-        open(deleteOperation != null ? deleteOperation.getTriggerHandler() : null, deleteOperation);\n+        open(deleteOperation != null ? deleteOperation.getTriggerHandler() : null, deleteOperation, loadReplaceMode);\n     }\n \n-    public void open(TriggerHandler triggerHandler, SpliceOperation operation) throws StandardException {\n-        super.open(triggerHandler, operation);\n+    public void open(TriggerHandler triggerHandler, SpliceOperation operation, boolean loadReplaceMode) throws StandardException {\n+        super.open(triggerHandler, operation, loadReplaceMode);\n         try{\n             WriteConfiguration writeConfiguration = writeCoordinator.defaultWriteConfiguration();\n             if(rollforward)\n                 writeConfiguration = new RollforwardWriteConfiguration(writeConfiguration);\n+            writeConfiguration.setLoadReplaceMode(loadReplaceMode);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28d61c9a0a096916a991681ae15a215590367942"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU0NjM5NQ==", "bodyText": "you're right, i replaced with newDefaultWriteConfiguration, which returns a new object", "url": "https://github.com/splicemachine/spliceengine/pull/4266#discussion_r516546395", "createdAt": "2020-11-03T10:00:06Z", "author": {"login": "martinrupp"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/output/delete/DeletePipelineWriter.java", "diffHunk": "@@ -44,23 +44,27 @@\n     public int rowsDeleted = 0;\n     protected DeleteOperation deleteOperation;\n \n-    public DeletePipelineWriter(TxnView txn,byte[] token,long heapConglom,long tempConglomID, String tableVersion, ExecRow execRowDefinition, OperationContext operationContext) throws StandardException {\n-        super(txn, token, heapConglom, tempConglomID, tableVersion, execRowDefinition, operationContext);\n+    public DeletePipelineWriter(TxnView txn, byte[] token, long heapConglom, long tempConglomID,\n+                                String tableVersion, ExecRow execRowDefinition, OperationContext operationContext,\n+                                boolean loadReplaceMode)\n+            throws StandardException {\n+        super(txn, token, heapConglom, tempConglomID, tableVersion, execRowDefinition, operationContext, loadReplaceMode);\n         if (operationContext != null) {\n             deleteOperation = (DeleteOperation)operationContext.getOperation();\n         }\n     }\n \n     public void open() throws StandardException {\n-        open(deleteOperation != null ? deleteOperation.getTriggerHandler() : null, deleteOperation);\n+        open(deleteOperation != null ? deleteOperation.getTriggerHandler() : null, deleteOperation, loadReplaceMode);\n     }\n \n-    public void open(TriggerHandler triggerHandler, SpliceOperation operation) throws StandardException {\n-        super.open(triggerHandler, operation);\n+    public void open(TriggerHandler triggerHandler, SpliceOperation operation, boolean loadReplaceMode) throws StandardException {\n+        super.open(triggerHandler, operation, loadReplaceMode);\n         try{\n             WriteConfiguration writeConfiguration = writeCoordinator.defaultWriteConfiguration();\n             if(rollforward)\n                 writeConfiguration = new RollforwardWriteConfiguration(writeConfiguration);\n+            writeConfiguration.setLoadReplaceMode(loadReplaceMode);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYxNTAwOA=="}, "originalCommit": {"oid": "28d61c9a0a096916a991681ae15a215590367942"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMTg3ODgwOnYy", "diffSide": "RIGHT", "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/load/HdfsImport.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMTo0MjoyMFrOHo35MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDowMDoyNVrOHsngLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYyMDg0OQ==", "bodyText": "If the parent connection has autocommit=true, does this work? In any case it would be better to use savepoints I think, rather than rolling back the whole user transaction.", "url": "https://github.com/splicemachine/spliceengine/pull/4266#discussion_r512620849", "createdAt": "2020-10-27T11:42:20Z", "author": {"login": "dgomezferro"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/load/HdfsImport.java", "diffHunk": "@@ -770,6 +828,10 @@ private static void doImport(String schemaName,\n                 rs.open();\n                 results[0] = new EmbedResultSet40((EmbedConnection) conn, rs, false, null, true);\n             } catch (SQLException | StandardException | IOException e) {\n+                if( conn != null && isLoadReplaceMode ) {\n+                    // rolling back the DELETE we've done\n+                    conn.rollback();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28d61c9a0a096916a991681ae15a215590367942"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU0NjYwNA==", "bodyText": "ok, using savepoints now and added a test", "url": "https://github.com/splicemachine/spliceengine/pull/4266#discussion_r516546604", "createdAt": "2020-11-03T10:00:25Z", "author": {"login": "martinrupp"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/load/HdfsImport.java", "diffHunk": "@@ -770,6 +828,10 @@ private static void doImport(String schemaName,\n                 rs.open();\n                 results[0] = new EmbedResultSet40((EmbedConnection) conn, rs, false, null, true);\n             } catch (SQLException | StandardException | IOException e) {\n+                if( conn != null && isLoadReplaceMode ) {\n+                    // rolling back the DELETE we've done\n+                    conn.rollback();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYyMDg0OQ=="}, "originalCommit": {"oid": "28d61c9a0a096916a991681ae15a215590367942"}, "originalPosition": 175}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMTg4MjA0OnYy", "diffSide": "RIGHT", "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/load/HdfsImport.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMTo0MzoyMVrOHo37Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDowMjozNFrOHsnlVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYyMTM3OQ==", "bodyText": "Are we deleting all rows? Should we use truncate here instead?", "url": "https://github.com/splicemachine/spliceengine/pull/4266#discussion_r512621379", "createdAt": "2020-10-27T11:43:21Z", "author": {"login": "dgomezferro"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/load/HdfsImport.java", "diffHunk": "@@ -670,18 +715,31 @@ private static void doImport(String schemaName,\n                 throw new SQLException(e);\n             }\n \n+            String insertMode = (isUpsert ? \"UPSERT\" : \"INSERT\");\n+            if( isLoadReplaceMode ) insertMode = InsertNode.LOAD_REPLACE;\n+\n             ColumnInfo columnInfo = new ColumnInfo(conn, schemaName, tableName, insertColumnList);\n             String selectList = generateColumnList(lcc,schemaName,tableName,insertColumnList, true, null);\n             String vtiTable = importVTI + \" AS importVTI (\" + columnInfo.getImportAsColumns() + \")\";\n             String insertSql = \"INSERT INTO \" + entityName + \"(\" + columnInfo.getInsertColumnNames() + \") \" +\n-                    \"--splice-properties useSpark=true , insertMode=\" + (isUpsert ? \"UPSERT\" : \"INSERT\") + \", statusDirectory=\" +\n+                    \"--splice-properties useSpark=true , insertMode=\" + insertMode + \", statusDirectory=\" +\n                     badRecordDirectory + \", badRecordsAllowed=\" + badRecordsAllowed + \", bulkImportDirectory=\" + bulkImportDirectory\n                     + \", samplingOnly=\" + samplingOnly + \", outputKeysOnly=\" + outputKeysOnly + \", skipSampling=\" + skipSampling\n                     + (skipConflictDetection ? \", skipConflictDetection=true\" : \"\") + (skipWAL ? \", skipWAL=true\" : \"\")\n                     + (indexName !=null ? (\", index=\" + indexName):\"\") + \"\\n\" +\n                     \" SELECT \"+ selectList +\n                     \" from \" + vtiTable;\n \n+            if(isLoadReplaceMode)\n+            {\n+                // delete table before inserting\n+                try (PreparedStatement ips = conn.prepareStatement(\"DELETE FROM \" + entityName + DeleteNode.NO_TRIGGER_RI_PROPERTY)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28d61c9a0a096916a991681ae15a215590367942"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE5MTU3MQ==", "bodyText": "My understanding is that not all rows are to be deleted from the table. Should join the table with input file using PK as join key, and delete all rows from the table whose PK is in the join result.", "url": "https://github.com/splicemachine/spliceengine/pull/4266#discussion_r513191571", "createdAt": "2020-10-28T05:37:26Z", "author": {"login": "jyuanca"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/load/HdfsImport.java", "diffHunk": "@@ -670,18 +715,31 @@ private static void doImport(String schemaName,\n                 throw new SQLException(e);\n             }\n \n+            String insertMode = (isUpsert ? \"UPSERT\" : \"INSERT\");\n+            if( isLoadReplaceMode ) insertMode = InsertNode.LOAD_REPLACE;\n+\n             ColumnInfo columnInfo = new ColumnInfo(conn, schemaName, tableName, insertColumnList);\n             String selectList = generateColumnList(lcc,schemaName,tableName,insertColumnList, true, null);\n             String vtiTable = importVTI + \" AS importVTI (\" + columnInfo.getImportAsColumns() + \")\";\n             String insertSql = \"INSERT INTO \" + entityName + \"(\" + columnInfo.getInsertColumnNames() + \") \" +\n-                    \"--splice-properties useSpark=true , insertMode=\" + (isUpsert ? \"UPSERT\" : \"INSERT\") + \", statusDirectory=\" +\n+                    \"--splice-properties useSpark=true , insertMode=\" + insertMode + \", statusDirectory=\" +\n                     badRecordDirectory + \", badRecordsAllowed=\" + badRecordsAllowed + \", bulkImportDirectory=\" + bulkImportDirectory\n                     + \", samplingOnly=\" + samplingOnly + \", outputKeysOnly=\" + outputKeysOnly + \", skipSampling=\" + skipSampling\n                     + (skipConflictDetection ? \", skipConflictDetection=true\" : \"\") + (skipWAL ? \", skipWAL=true\" : \"\")\n                     + (indexName !=null ? (\", index=\" + indexName):\"\") + \"\\n\" +\n                     \" SELECT \"+ selectList +\n                     \" from \" + vtiTable;\n \n+            if(isLoadReplaceMode)\n+            {\n+                // delete table before inserting\n+                try (PreparedStatement ips = conn.prepareStatement(\"DELETE FROM \" + entityName + DeleteNode.NO_TRIGGER_RI_PROPERTY)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYyMTM3OQ=="}, "originalCommit": {"oid": "28d61c9a0a096916a991681ae15a215590367942"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU0NzkyNw==", "bodyText": "discussed with Gene, he thinks the DELETE+INSERT is the thing the customer wants. We can add an UPSERT mode later if needed.\nTRUNCATE would be possible, but is more difficult to implement. As it is a performance improvement over this, i created DB-10642 .", "url": "https://github.com/splicemachine/spliceengine/pull/4266#discussion_r516547927", "createdAt": "2020-11-03T10:02:34Z", "author": {"login": "martinrupp"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/load/HdfsImport.java", "diffHunk": "@@ -670,18 +715,31 @@ private static void doImport(String schemaName,\n                 throw new SQLException(e);\n             }\n \n+            String insertMode = (isUpsert ? \"UPSERT\" : \"INSERT\");\n+            if( isLoadReplaceMode ) insertMode = InsertNode.LOAD_REPLACE;\n+\n             ColumnInfo columnInfo = new ColumnInfo(conn, schemaName, tableName, insertColumnList);\n             String selectList = generateColumnList(lcc,schemaName,tableName,insertColumnList, true, null);\n             String vtiTable = importVTI + \" AS importVTI (\" + columnInfo.getImportAsColumns() + \")\";\n             String insertSql = \"INSERT INTO \" + entityName + \"(\" + columnInfo.getInsertColumnNames() + \") \" +\n-                    \"--splice-properties useSpark=true , insertMode=\" + (isUpsert ? \"UPSERT\" : \"INSERT\") + \", statusDirectory=\" +\n+                    \"--splice-properties useSpark=true , insertMode=\" + insertMode + \", statusDirectory=\" +\n                     badRecordDirectory + \", badRecordsAllowed=\" + badRecordsAllowed + \", bulkImportDirectory=\" + bulkImportDirectory\n                     + \", samplingOnly=\" + samplingOnly + \", outputKeysOnly=\" + outputKeysOnly + \", skipSampling=\" + skipSampling\n                     + (skipConflictDetection ? \", skipConflictDetection=true\" : \"\") + (skipWAL ? \", skipWAL=true\" : \"\")\n                     + (indexName !=null ? (\", index=\" + indexName):\"\") + \"\\n\" +\n                     \" SELECT \"+ selectList +\n                     \" from \" + vtiTable;\n \n+            if(isLoadReplaceMode)\n+            {\n+                // delete table before inserting\n+                try (PreparedStatement ips = conn.prepareStatement(\"DELETE FROM \" + entityName + DeleteNode.NO_TRIGGER_RI_PROPERTY)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYyMTM3OQ=="}, "originalCommit": {"oid": "28d61c9a0a096916a991681ae15a215590367942"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMTg5MTQ2OnYy", "diffSide": "RIGHT", "path": "pipeline_api/src/main/java/com/splicemachine/pipeline/contextfactory/LocalWriteContextFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMTo0NTozNVrOHo4ApQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMTo0NTozNVrOHo4ApQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYyMjc1Nw==", "bodyText": "missing comment?", "url": "https://github.com/splicemachine/spliceengine/pull/4266#discussion_r512622757", "createdAt": "2020-10-27T11:45:35Z", "author": {"login": "dgomezferro"}, "path": "pipeline_api/src/main/java/com/splicemachine/pipeline/contextfactory/LocalWriteContextFactory.java", "diffHunk": "@@ -216,11 +204,19 @@ private void isInitialized(TxnView txn) throws IOException, InterruptedException\n         }\n     }\n \n-    private void addWriteHandlerFactories(int expectedWrites, PipelineWriteContext context) throws IOException, InterruptedException {\n+    /**\n+     * addWriteHandlerFactories\n+     * @param foreignKeyChecks if set to false, we don't check referential integrity (foreign key checks)\n+     *                         this is used e.g. with INSERT ... insertMode=LOAD_REPLACE or DELETE ... noTriggerRI=1\n+     */\n+    private void addWriteHandlerFactories(int expectedWrites, PipelineWriteContext context,\n+                                          boolean foreignKeyChecks) throws IOException, InterruptedException {\n         isInitialized(context.getTxn());\n         //only add constraints and indices when we are in a RUNNING state\n         if (state.get() == State.RUNNING) {\n             //add Constraint checks before anything else\n+\n+            // ?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28d61c9a0a096916a991681ae15a215590367942"}, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2866, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}