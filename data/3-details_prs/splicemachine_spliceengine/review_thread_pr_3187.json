{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwMjU2NTU2", "number": 3187, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjoyNDoxMlrODgcmBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMToyNDowM1rODg25-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzQ5NTEwOnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/conn/SessionProperties.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjoyNDoxMlrOFqqGJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNzoxOTozMFrOFscKQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI3NDIxNQ==", "bodyText": "We could catch NumberFormatException rather than the all catching Exception\nAlso, rename parseIntE to parseLongE", "url": "https://github.com/splicemachine/spliceengine/pull/3187#discussion_r380274215", "createdAt": "2020-02-17T16:24:12Z", "author": {"login": "arnaud-splice"}, "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/conn/SessionProperties.java", "diffHunk": "@@ -114,6 +115,14 @@ public int getId() {\n                 if (recursivequeryIterationLimit <= 0)\n                     throw StandardException.newException(SQLState.LANG_INVALID_SESSION_PROPERTY_VALUE, valString, \"value should be a positive integer or null\");\n                 break;\n+            case SNAPSHOT_TIMESTAMP:\n+                long timestamp;\n+                try {\n+                    timestamp = Long.parseLong(valString);\n+                } catch (Exception parseIntE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c23f1411dc39dc0b54dfa7535e96ce72b501c04"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE0MzA0MQ==", "bodyText": "Done", "url": "https://github.com/splicemachine/spliceengine/pull/3187#discussion_r382143041", "createdAt": "2020-02-20T17:19:30Z", "author": {"login": "dgomezferro"}, "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/conn/SessionProperties.java", "diffHunk": "@@ -114,6 +115,14 @@ public int getId() {\n                 if (recursivequeryIterationLimit <= 0)\n                     throw StandardException.newException(SQLState.LANG_INVALID_SESSION_PROPERTY_VALUE, valString, \"value should be a positive integer or null\");\n                 break;\n+            case SNAPSHOT_TIMESTAMP:\n+                long timestamp;\n+                try {\n+                    timestamp = Long.parseLong(valString);\n+                } catch (Exception parseIntE) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI3NDIxNQ=="}, "originalCommit": {"oid": "4c23f1411dc39dc0b54dfa7535e96ce72b501c04"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzQ5NzM1OnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/conn/SessionProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjoyNDo1NVrOFqqHhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjoyNDo1NVrOFqqHhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI3NDU2Nw==", "bodyText": "You don't test for positive long here, only long. If you wanna test positive, add an if after the try_catch. Or change the error message", "url": "https://github.com/splicemachine/spliceengine/pull/3187#discussion_r380274567", "createdAt": "2020-02-17T16:24:55Z", "author": {"login": "arnaud-splice"}, "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/conn/SessionProperties.java", "diffHunk": "@@ -114,6 +115,14 @@ public int getId() {\n                 if (recursivequeryIterationLimit <= 0)\n                     throw StandardException.newException(SQLState.LANG_INVALID_SESSION_PROPERTY_VALUE, valString, \"value should be a positive integer or null\");\n                 break;\n+            case SNAPSHOT_TIMESTAMP:\n+                long timestamp;\n+                try {\n+                    timestamp = Long.parseLong(valString);\n+                } catch (Exception parseIntE) {\n+                    throw StandardException.newException(SQLState.LANG_INVALID_SESSION_PROPERTY_VALUE, valString, \"value should be a positive long\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c23f1411dc39dc0b54dfa7535e96ce72b501c04"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzUzMjQ3OnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/dictionary/SPSDescriptor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjozNDo0N1rOFqqb3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMTo1MDo0OVrOFs0dNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI3OTc3Mg==", "bodyText": "Is it even possible to combine !read_only with a snapshot timestamp? Shouldn't we throw something then?\nWhat about line 523 of this file where we call !isReadOnly, should we also check against SNAPSHOT_TIMESTAMP?\nWhat about SYSSTATEMENTSRowFactory.java:301?\nIf a check could be applied to all those, I'd push the session check inside isReadOnlyUpgrade(llc)", "url": "https://github.com/splicemachine/spliceengine/pull/3187#discussion_r380279772", "createdAt": "2020-02-17T16:34:47Z", "author": {"login": "arnaud-splice"}, "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/dictionary/SPSDescriptor.java", "diffHunk": "@@ -298,7 +299,8 @@ private void compileStatement(LanguageConnectionContext lcc,\n         setCompileTime();\n         setParams(preparedStatement.getParameterTypes());\n \n-        if (!dd.isReadOnlyUpgrade()) {\n+        if (!dd.isReadOnlyUpgrade() &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c23f1411dc39dc0b54dfa7535e96ce72b501c04"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEyNDY2Mw==", "bodyText": "I'm not sure what you mean with the first question. !readOnlyUpgrade is the \"default\" state, and whenever we have a snapshot timestamp readOnlyUpgrade will most likely be false. What I don't think should ever happen is readOnlyUpgrade==true && snapshotTimestamp != null. Does that answer your question?\nOn line 523 and SYSSTATEMENTSRowFactory.java:301 we don't need to check for a snapshotTimestamp, on the first case we end up checking on updateSYSSTATEMENTS() line 905 (we want to compile the statement, and avoid writing it to the DB)", "url": "https://github.com/splicemachine/spliceengine/pull/3187#discussion_r382124663", "createdAt": "2020-02-20T16:47:22Z", "author": {"login": "dgomezferro"}, "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/dictionary/SPSDescriptor.java", "diffHunk": "@@ -298,7 +299,8 @@ private void compileStatement(LanguageConnectionContext lcc,\n         setCompileTime();\n         setParams(preparedStatement.getParameterTypes());\n \n-        if (!dd.isReadOnlyUpgrade()) {\n+        if (!dd.isReadOnlyUpgrade() &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI3OTc3Mg=="}, "originalCommit": {"oid": "4c23f1411dc39dc0b54dfa7535e96ce72b501c04"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU0MTEwOQ==", "bodyText": "All right, makes sense :)", "url": "https://github.com/splicemachine/spliceengine/pull/3187#discussion_r382541109", "createdAt": "2020-02-21T11:50:49Z", "author": {"login": "arnaud-splice"}, "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/dictionary/SPSDescriptor.java", "diffHunk": "@@ -298,7 +299,8 @@ private void compileStatement(LanguageConnectionContext lcc,\n         setCompileTime();\n         setParams(preparedStatement.getParameterTypes());\n \n-        if (!dd.isReadOnlyUpgrade()) {\n+        if (!dd.isReadOnlyUpgrade() &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI3OTc3Mg=="}, "originalCommit": {"oid": "4c23f1411dc39dc0b54dfa7535e96ce72b501c04"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzU1MTI1OnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/db/BasicDatabase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjo0MDo0N1rOFqqnGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNzoyMToyNVrOFscOcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI4MjY1MA==", "bodyText": "This \"snapshot\" kinda looks like a magic value here.\nSince both \"olapQueue\" and \"snapshot\" are magic'ed in GenericLanguageConnectionContext, why not define constants there and use it here?\nAlthough, does that even work? I'd think that sessionProperties are set in GenericLanguageConnectionContext with enums already and that \"snapshot\" would only be available in the connectionProperties", "url": "https://github.com/splicemachine/spliceengine/pull/3187#discussion_r380282650", "createdAt": "2020-02-17T16:40:47Z", "author": {"login": "arnaud-splice"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/db/BasicDatabase.java", "diffHunk": "@@ -279,7 +280,14 @@ public LanguageConnectionContext setupConnection(ContextManager cm, String user,\n \t\t\t\t\t\t\t\t\t\t\t\t\t Properties sessionProperties)\n \t\tthrows StandardException {\n \n-\t\tTransactionController tc = getConnectionTransaction(cm);\n+\t\tString snapshot = sessionProperties.getProperty(\"snapshot\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c23f1411dc39dc0b54dfa7535e96ce72b501c04"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE0NDExMg==", "bodyText": "I moved all hardcoded strings to com.splicemachine.db.iapi.reference.Property", "url": "https://github.com/splicemachine/spliceengine/pull/3187#discussion_r382144112", "createdAt": "2020-02-20T17:21:25Z", "author": {"login": "dgomezferro"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/db/BasicDatabase.java", "diffHunk": "@@ -279,7 +280,14 @@ public LanguageConnectionContext setupConnection(ContextManager cm, String user,\n \t\t\t\t\t\t\t\t\t\t\t\t\t Properties sessionProperties)\n \t\tthrows StandardException {\n \n-\t\tTransactionController tc = getConnectionTransaction(cm);\n+\t\tString snapshot = sessionProperties.getProperty(\"snapshot\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI4MjY1MA=="}, "originalCommit": {"oid": "4c23f1411dc39dc0b54dfa7535e96ce72b501c04"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzU3MTE1OnYy", "diffSide": "RIGHT", "path": "db-tools-i18n/src/main/resources/com/splicemachine/db/loc/messages.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjo0Nzo0MVrOFqqzLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjo0Nzo0MVrOFqqzLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI4NTc0MA==", "bodyText": "unnecessary new line", "url": "https://github.com/splicemachine/spliceengine/pull/3187#discussion_r380285740", "createdAt": "2020-02-17T16:47:41Z", "author": {"login": "arnaud-splice"}, "path": "db-tools-i18n/src/main/resources/com/splicemachine/db/loc/messages.xml", "diffHunk": "@@ -8928,6 +8933,7 @@ Shutting down instance {0} on database directory {1} with class loader {2} </tex\n                <arg>configurationField</arg>\n            </msg>\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c23f1411dc39dc0b54dfa7535e96ce72b501c04"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzU3NTgwOnYy", "diffSide": "RIGHT", "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/store/access/PastTransaction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjo0OToyMFrOFqq2FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjo0OToyMFrOFqq2FQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI4NjQ4NQ==", "bodyText": "update copyright", "url": "https://github.com/splicemachine/spliceengine/pull/3187#discussion_r380286485", "createdAt": "2020-02-17T16:49:20Z", "author": {"login": "arnaud-splice"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/store/access/PastTransaction.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright (c) 2012 - 2019 Splice Machine, Inc.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c23f1411dc39dc0b54dfa7535e96ce72b501c04"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzU4MzI5OnYy", "diffSide": "RIGHT", "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjo1MTo0NVrOFqq6kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNzoyMTo1MVrOFscPYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI4NzYzNQ==", "bodyText": "Should we throw an exception?\nIn any case, this XXX should either be addressed or removed. We might wanna replace the whole thing with assert cm != null", "url": "https://github.com/splicemachine/spliceengine/pull/3187#discussion_r380287635", "createdAt": "2020-02-17T16:51:45Z", "author": {"login": "arnaud-splice"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java", "diffHunk": "@@ -326,6 +326,48 @@ public TransactionController getTransaction(ContextManager cm) throws StandardEx\n         return getAndNameTransaction(cm, AccessFactoryGlobals.USER_TRANS_NAME);\n     }\n \n+    public TransactionController getReadOnlyTransaction(ContextManager cm, long id) throws StandardException {\n+        String transName = AccessFactoryGlobals.USER_TRANS_NAME;\n+\n+        /*\n+         * This call represents the top-level transactional access point. E.g., the top-level user transaction\n+         * is created by a call to this method. In this case we are creating a read only transaction at a predefined point\n+         */\n+        if (LOG.isDebugEnabled())\n+            LOG.debug(\"in SpliceAccessManager - getAndNameTransaction, transName=\" + transName);\n+        if (cm == null)\n+            return null;  // XXX (nat) should throw exception", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c23f1411dc39dc0b54dfa7535e96ce72b501c04"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE0NDM1Mg==", "bodyText": "I raise an NPE here", "url": "https://github.com/splicemachine/spliceengine/pull/3187#discussion_r382144352", "createdAt": "2020-02-20T17:21:51Z", "author": {"login": "dgomezferro"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java", "diffHunk": "@@ -326,6 +326,48 @@ public TransactionController getTransaction(ContextManager cm) throws StandardEx\n         return getAndNameTransaction(cm, AccessFactoryGlobals.USER_TRANS_NAME);\n     }\n \n+    public TransactionController getReadOnlyTransaction(ContextManager cm, long id) throws StandardException {\n+        String transName = AccessFactoryGlobals.USER_TRANS_NAME;\n+\n+        /*\n+         * This call represents the top-level transactional access point. E.g., the top-level user transaction\n+         * is created by a call to this method. In this case we are creating a read only transaction at a predefined point\n+         */\n+        if (LOG.isDebugEnabled())\n+            LOG.debug(\"in SpliceAccessManager - getAndNameTransaction, transName=\" + transName);\n+        if (cm == null)\n+            return null;  // XXX (nat) should throw exception", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI4NzYzNQ=="}, "originalCommit": {"oid": "4c23f1411dc39dc0b54dfa7535e96ce72b501c04"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzcxODY3OnYy", "diffSide": "RIGHT", "path": "splice_si_api/src/main/java/com/splicemachine/si/impl/PastTransactionImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzo0Mzo0NlrOFqsK3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzo0Mzo0NlrOFqsK3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMwODE4OA==", "bodyText": "copyright", "url": "https://github.com/splicemachine/spliceengine/pull/3187#discussion_r380308188", "createdAt": "2020-02-17T17:43:46Z", "author": {"login": "arnaud-splice"}, "path": "splice_si_api/src/main/java/com/splicemachine/si/impl/PastTransactionImpl.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright (c) 2012 - 2019 Splice Machine, Inc.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c23f1411dc39dc0b54dfa7535e96ce72b501c04"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Mzc0NzU2OnYy", "diffSide": "RIGHT", "path": "splice_si_api/src/main/java/com/splicemachine/si/impl/PastTransactionImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzo1NTo1NlrOFqsbxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNzowMToyN1rOFsbjVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMxMjUxOQ==", "bodyText": "Should that include the timestamp of our time travel?", "url": "https://github.com/splicemachine/spliceengine/pull/3187#discussion_r380312519", "createdAt": "2020-02-17T17:55:56Z", "author": {"login": "arnaud-splice"}, "path": "splice_si_api/src/main/java/com/splicemachine/si/impl/PastTransactionImpl.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright (c) 2012 - 2019 Splice Machine, Inc.\n+ *\n+ * This file is part of Splice Machine.\n+ * Splice Machine is free software: you can redistribute it and/or modify it under the terms of the\n+ * GNU Affero General Public License as published by the Free Software Foundation, either\n+ * version 3, or (at your option) any later version.\n+ * Splice Machine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ * See the GNU Affero General Public License for more details.\n+ * You should have received a copy of the GNU Affero General Public License along with Splice Machine.\n+ * If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ */\n+\n+package com.splicemachine.si.impl;\n+\n+import com.splicemachine.si.api.data.ExceptionFactory;\n+import com.splicemachine.si.api.txn.Txn;\n+import com.splicemachine.si.api.txn.TxnLifecycleManager;\n+import com.splicemachine.si.api.txn.TxnView;\n+import com.splicemachine.si.impl.driver.SIDriver;\n+import com.splicemachine.si.impl.txn.PastTxn;\n+import com.splicemachine.si.impl.txn.ReadOnlyTxn;\n+import com.splicemachine.utils.SpliceLogUtils;\n+import org.apache.log4j.Logger;\n+\n+import java.io.IOException;\n+import java.util.Deque;\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+\n+public class PastTransactionImpl extends TransactionImpl {\n+    private static Logger LOG=Logger.getLogger(PastTransactionImpl.class);\n+    Txn txn;\n+\n+    public PastTransactionImpl(String transName, long transactionId){\n+        super(transName, false, null);\n+        SpliceLogUtils.trace(LOG,\"Instantiating Splice past transaction\");\n+        this.txn = new PastTxn(transactionId);\n+    }\n+\n+    @Override\n+    public int setSavePoint(String name,Object kindOfSavepoint) throws IOException{\n+        return 1;\n+    }\n+\n+    @Override\n+    public int releaseSavePoint(String name,Object kindOfSavepoint) throws IOException{\n+        return 1;\n+    }\n+\n+    public String getActiveStateTxnName(){\n+        return \"PAST_TRANSACTION\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c23f1411dc39dc0b54dfa7535e96ce72b501c04"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEzMzA3OQ==", "bodyText": "I added it, but it never gets called", "url": "https://github.com/splicemachine/spliceengine/pull/3187#discussion_r382133079", "createdAt": "2020-02-20T17:01:27Z", "author": {"login": "dgomezferro"}, "path": "splice_si_api/src/main/java/com/splicemachine/si/impl/PastTransactionImpl.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright (c) 2012 - 2019 Splice Machine, Inc.\n+ *\n+ * This file is part of Splice Machine.\n+ * Splice Machine is free software: you can redistribute it and/or modify it under the terms of the\n+ * GNU Affero General Public License as published by the Free Software Foundation, either\n+ * version 3, or (at your option) any later version.\n+ * Splice Machine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ * See the GNU Affero General Public License for more details.\n+ * You should have received a copy of the GNU Affero General Public License along with Splice Machine.\n+ * If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ */\n+\n+package com.splicemachine.si.impl;\n+\n+import com.splicemachine.si.api.data.ExceptionFactory;\n+import com.splicemachine.si.api.txn.Txn;\n+import com.splicemachine.si.api.txn.TxnLifecycleManager;\n+import com.splicemachine.si.api.txn.TxnView;\n+import com.splicemachine.si.impl.driver.SIDriver;\n+import com.splicemachine.si.impl.txn.PastTxn;\n+import com.splicemachine.si.impl.txn.ReadOnlyTxn;\n+import com.splicemachine.utils.SpliceLogUtils;\n+import org.apache.log4j.Logger;\n+\n+import java.io.IOException;\n+import java.util.Deque;\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+\n+public class PastTransactionImpl extends TransactionImpl {\n+    private static Logger LOG=Logger.getLogger(PastTransactionImpl.class);\n+    Txn txn;\n+\n+    public PastTransactionImpl(String transName, long transactionId){\n+        super(transName, false, null);\n+        SpliceLogUtils.trace(LOG,\"Instantiating Splice past transaction\");\n+        this.txn = new PastTxn(transactionId);\n+    }\n+\n+    @Override\n+    public int setSavePoint(String name,Object kindOfSavepoint) throws IOException{\n+        return 1;\n+    }\n+\n+    @Override\n+    public int releaseSavePoint(String name,Object kindOfSavepoint) throws IOException{\n+        return 1;\n+    }\n+\n+    public String getActiveStateTxnName(){\n+        return \"PAST_TRANSACTION\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMxMjUxOQ=="}, "originalCommit": {"oid": "4c23f1411dc39dc0b54dfa7535e96ce72b501c04"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Mzc1ODM3OnYy", "diffSide": "RIGHT", "path": "splice_si_api/src/main/java/com/splicemachine/si/impl/txn/PastTxn.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxODowMDo0OVrOFqsiMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxODowMDo0OVrOFqsiMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMxNDE2MQ==", "bodyText": "copyright", "url": "https://github.com/splicemachine/spliceengine/pull/3187#discussion_r380314161", "createdAt": "2020-02-17T18:00:49Z", "author": {"login": "arnaud-splice"}, "path": "splice_si_api/src/main/java/com/splicemachine/si/impl/txn/PastTxn.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright (c) 2012 - 2019 Splice Machine, Inc.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c23f1411dc39dc0b54dfa7535e96ce72b501c04"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzgwNTQwOnYy", "diffSide": "RIGHT", "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMToyMzo1MlrOFrS7PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMToyMzo1MlrOFrS7PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0MzE2NQ==", "bodyText": "Debug tracing message may be confusing. Either change it or refactor code to avoid copying code.", "url": "https://github.com/splicemachine/spliceengine/pull/3187#discussion_r380943165", "createdAt": "2020-02-18T21:23:52Z", "author": {"login": "jyuanca"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java", "diffHunk": "@@ -326,6 +326,48 @@ public TransactionController getTransaction(ContextManager cm) throws StandardEx\n         return getAndNameTransaction(cm, AccessFactoryGlobals.USER_TRANS_NAME);\n     }\n \n+    public TransactionController getReadOnlyTransaction(ContextManager cm, long id) throws StandardException {\n+        String transName = AccessFactoryGlobals.USER_TRANS_NAME;\n+\n+        /*\n+         * This call represents the top-level transactional access point. E.g., the top-level user transaction\n+         * is created by a call to this method. In this case we are creating a read only transaction at a predefined point\n+         */\n+        if (LOG.isDebugEnabled())\n+            LOG.debug(\"in SpliceAccessManager - getAndNameTransaction, transName=\" + transName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c23f1411dc39dc0b54dfa7535e96ce72b501c04"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzgwNjAwOnYy", "diffSide": "RIGHT", "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMToyNDowM1rOFrS7lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMToyNDowM1rOFrS7lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0MzI1Mg==", "bodyText": "Ditto", "url": "https://github.com/splicemachine/spliceengine/pull/3187#discussion_r380943252", "createdAt": "2020-02-18T21:24:03Z", "author": {"login": "jyuanca"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java", "diffHunk": "@@ -326,6 +326,48 @@ public TransactionController getTransaction(ContextManager cm) throws StandardEx\n         return getAndNameTransaction(cm, AccessFactoryGlobals.USER_TRANS_NAME);\n     }\n \n+    public TransactionController getReadOnlyTransaction(ContextManager cm, long id) throws StandardException {\n+        String transName = AccessFactoryGlobals.USER_TRANS_NAME;\n+\n+        /*\n+         * This call represents the top-level transactional access point. E.g., the top-level user transaction\n+         * is created by a call to this method. In this case we are creating a read only transaction at a predefined point\n+         */\n+        if (LOG.isDebugEnabled())\n+            LOG.debug(\"in SpliceAccessManager - getAndNameTransaction, transName=\" + transName);\n+        if (cm == null)\n+            return null;  // XXX (nat) should throw exception\n+\n+        /*\n+         * See if there's already a transaction context. If there is, then we just work with the one\n+         * already created. Otherwise, we have to make a new one\n+         */\n+        SpliceTransactionManagerContext rtc = (SpliceTransactionManagerContext)\n+                cm.getContext(AccessFactoryGlobals.RAMXACT_CONTEXT_ID);\n+\n+        if (rtc != null)\n+            return rtc.getTransactionManager(); //we already have a transaction from the context\n+\n+        if (LOG.isDebugEnabled())\n+            LOG.debug(\"in SpliceAccessManager - getAndNameTransaction, SpliceTransactionManagerContext is null\");\n+        /*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c23f1411dc39dc0b54dfa7535e96ce72b501c04"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3353, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}