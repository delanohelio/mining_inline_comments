{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0NDQ2NzI5", "number": 4306, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwODo1MToxMFrOEvq0LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwODo1NjoyMVrOEvq8uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NDIwMDEyOnYy", "diffSide": "RIGHT", "path": "hbase_storage/src/main/java/com/splicemachine/hbase/ZkUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwODo1MToxMFrOHkxoDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwODo1MToxMFrOHkxoDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMyMzg1NQ==", "bodyText": "If we are sleeping, can you use PipelineUtils.getPauseTime() or something similar to do an exponential backoff and add jitter?", "url": "https://github.com/splicemachine/spliceengine/pull/4306#discussion_r508323855", "createdAt": "2020-10-20T08:51:10Z", "author": {"login": "dgomezferro"}, "path": "hbase_storage/src/main/java/com/splicemachine/hbase/ZkUtils.java", "diffHunk": "@@ -315,10 +317,17 @@ public static long nextSequenceId(String counterNode) throws IOException{\n \t\t */\n \n         RecoverableZooKeeper rzk=ZkUtils.getRecoverableZooKeeper();\n-        int maxTries=10;\n+        int maxTries=Integer.MAX_VALUE;\n         int tries=0;\n         while(tries<=maxTries){\n             tries++;\n+            if (tries > 1) {\n+                try {\n+                    Thread.sleep(50);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5f7fb66dcc5002504beab2556a97f639d8f4d92"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NDIwODgyOnYy", "diffSide": "RIGHT", "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/store/access/btree/IndexConglomerate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwODo1MzoxM1rOHkxtdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwODo1MzoxM1rOHkxtdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMyNTIzOA==", "bodyText": "Not used, remove", "url": "https://github.com/splicemachine/spliceengine/pull/4306#discussion_r508325238", "createdAt": "2020-10-20T08:53:13Z", "author": {"login": "dgomezferro"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/store/access/btree/IndexConglomerate.java", "diffHunk": "@@ -151,16 +155,25 @@ protected void create(boolean isExternal,\n         }\n         try{\n //            ((SpliceTransaction)rawtran).elevate(Bytes.toBytes(Long.toString(containerId)));\n+\n+            TxnView txnView = null;\n+            if (rawtran instanceof SpliceTransaction) {\n+                txnView = ((SpliceTransaction) rawtran).getTxnInformation();\n+            }\n+            else if (rawtran instanceof SpliceTransactionView) {\n+                txnView = ((SpliceTransactionView) rawtran).getTxnInformation();\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5f7fb66dcc5002504beab2556a97f639d8f4d92"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NDIxMjkzOnYy", "diffSide": "RIGHT", "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/store/access/btree/IndexConglomerate.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwODo1NDoxN1rOHkxv7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwMDo0MzozNFrOHmMm1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMyNTg2OQ==", "bodyText": "TxnView does not seem to be used in the following code. Looks like line 169 covers both cases here.", "url": "https://github.com/splicemachine/spliceengine/pull/4306#discussion_r508325869", "createdAt": "2020-10-20T08:54:17Z", "author": {"login": "ascend1"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/store/access/btree/IndexConglomerate.java", "diffHunk": "@@ -151,16 +155,25 @@ protected void create(boolean isExternal,\n         }\n         try{\n //            ((SpliceTransaction)rawtran).elevate(Bytes.toBytes(Long.toString(containerId)));\n+\n+            TxnView txnView = null;\n+            if (rawtran instanceof SpliceTransaction) {\n+                txnView = ((SpliceTransaction) rawtran).getTxnInformation();\n+            }\n+            else if (rawtran instanceof SpliceTransactionView) {\n+                txnView = ((SpliceTransactionView) rawtran).getTxnInformation();\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5f7fb66dcc5002504beab2556a97f639d8f4d92"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgxNDQ4NA==", "bodyText": "This has been deleted", "url": "https://github.com/splicemachine/spliceengine/pull/4306#discussion_r509814484", "createdAt": "2020-10-22T00:43:34Z", "author": {"login": "jyuanca"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/store/access/btree/IndexConglomerate.java", "diffHunk": "@@ -151,16 +155,25 @@ protected void create(boolean isExternal,\n         }\n         try{\n //            ((SpliceTransaction)rawtran).elevate(Bytes.toBytes(Long.toString(containerId)));\n+\n+            TxnView txnView = null;\n+            if (rawtran instanceof SpliceTransaction) {\n+                txnView = ((SpliceTransaction) rawtran).getTxnInformation();\n+            }\n+            else if (rawtran instanceof SpliceTransactionView) {\n+                txnView = ((SpliceTransactionView) rawtran).getTxnInformation();\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMyNTg2OQ=="}, "originalCommit": {"oid": "d5f7fb66dcc5002504beab2556a97f639d8f4d92"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NDIyMjAzOnYy", "diffSide": "RIGHT", "path": "hbase_storage/src/main/java/com/splicemachine/hbase/ZkUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwODo1NjoyMVrOHkx1oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwMDo0Mzo1NlrOHmMnJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMyNzMyOA==", "bodyText": "Is this common in zk code? I'm not very familiar with this but loop forever gives a strange feel...", "url": "https://github.com/splicemachine/spliceengine/pull/4306#discussion_r508327328", "createdAt": "2020-10-20T08:56:21Z", "author": {"login": "ascend1"}, "path": "hbase_storage/src/main/java/com/splicemachine/hbase/ZkUtils.java", "diffHunk": "@@ -315,10 +317,17 @@ public static long nextSequenceId(String counterNode) throws IOException{\n \t\t */\n \n         RecoverableZooKeeper rzk=ZkUtils.getRecoverableZooKeeper();\n-        int maxTries=10;\n+        int maxTries=Integer.MAX_VALUE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5f7fb66dcc5002504beab2556a97f639d8f4d92"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgxNDU2Ng==", "bodyText": "Retry until successful.", "url": "https://github.com/splicemachine/spliceengine/pull/4306#discussion_r509814566", "createdAt": "2020-10-22T00:43:56Z", "author": {"login": "jyuanca"}, "path": "hbase_storage/src/main/java/com/splicemachine/hbase/ZkUtils.java", "diffHunk": "@@ -315,10 +317,17 @@ public static long nextSequenceId(String counterNode) throws IOException{\n \t\t */\n \n         RecoverableZooKeeper rzk=ZkUtils.getRecoverableZooKeeper();\n-        int maxTries=10;\n+        int maxTries=Integer.MAX_VALUE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMyNzMyOA=="}, "originalCommit": {"oid": "d5f7fb66dcc5002504beab2556a97f639d8f4d92"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2888, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}