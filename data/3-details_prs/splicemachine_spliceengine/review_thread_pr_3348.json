{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0MjY1NzY5", "number": 3348, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODoxOTo1NVrODtbQiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODoxOTo1NVrODtbQiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTU5MTE1OnYy", "diffSide": "RIGHT", "path": "splice_machine/src/test/java/com/splicemachine/derby/utils/ShowCreateTableIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODoxOTo1NVrOF-1vXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMTo0Njo0NVrOF-86Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQzNjUwOQ==", "bodyText": "Did you mean to call this on the view instead of the system table?", "url": "https://github.com/splicemachine/spliceengine/pull/3348#discussion_r401436509", "createdAt": "2020-04-01T08:19:55Z", "author": {"login": "dgomezferro"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/utils/ShowCreateTableIT.java", "diffHunk": "@@ -382,4 +397,93 @@ public void testTextDefaultUserRole() throws Exception\n                 \") ;\", rs.getString(1));\n \n     }\n+\n+    @Category(HBaseTest.class)\n+    @Test\n+    public void testExternalTablePlainText() throws Exception {\n+        //Plain text\n+        String textDLL = String.format(\"CREATE EXTERNAL TABLE SHOWCREATETABLEIT.testCsvFile (id INT, c_text varchar(30)) \\n\" +\n+                \"ROW FORMAT DELIMITED \\n\" +\n+                \"FIELDS TERMINATED BY ','\\n\" +\n+                \"STORED AS TEXTFILE\\n\" +\n+                \"location '%s'\", getExternalResourceDirectory() + \"testCsvFile\");\n+        methodWatcher.executeUpdate(textDLL);\n+        ResultSet rs = methodWatcher.executeQuery(\"call syscs_util.SHOW_CREATE_TABLE('SHOWCREATETABLEIT','TESTCSVFILE')\");\n+        rs.next();\n+        Assert.assertEquals(\"CREATE EXTERNAL TABLE \\\"SHOWCREATETABLEIT\\\".\\\"TESTCSVFILE\\\" (\\n\" +\n+                \"\\\"ID\\\" INTEGER\\n\" +\n+                \",\\\"C_TEXT\\\" VARCHAR(30)\\n\" +\n+                \") \\n\" +\n+                \"ROW FORMAT DELIMITED FIELDS TERMINATED BY ','\\n\" +\n+                \"STORED AS TEXTFILE\\n\" +\n+                \"LOCATION '\"+getExternalResourceDirectory()+\"testCsvFile';\", rs.getString(1));\n+    }\n+\n+    @Category(HBaseTest.class)\n+    @Test\n+    public void testExternalTableParquetWithoutCompression() throws Exception {\n+        //Parquet Without compression\n+        String parquetDDL = String.format(\"create external table SHOWCREATETABLEIT.testParquet (col1 int, col2 varchar(24))\" +\n+                \"partitioned by (col1) STORED AS parquet LOCATION '%s'\", getExternalResourceDirectory() + \"testParquet\");\n+\n+        methodWatcher.executeUpdate(parquetDDL);\n+        ResultSet rs = methodWatcher.executeQuery(\"call syscs_util.SHOW_CREATE_TABLE('SHOWCREATETABLEIT','TESTPARQUET')\");\n+        rs.next();\n+        Assert.assertEquals(\"CREATE EXTERNAL TABLE \\\"SHOWCREATETABLEIT\\\".\\\"TESTPARQUET\\\" (\\n\" +\n+                \"\\\"COL1\\\" INTEGER\\n\" +\n+                \",\\\"COL2\\\" VARCHAR(24)\\n\" +\n+                \") \\n\" +\n+                \"PARTITIONED BY (COL1)\\n\" +\n+                \"STORED AS PARQUET\\n\" +\n+                \"LOCATION '\"+getExternalResourceDirectory()+\"testParquet';\", rs.getString(1));\n+    }\n+\n+    @Category(HBaseTest.class)\n+    @Test\n+    public void testExternalTableOrcSnappy() throws Exception {\n+        //Orc With compression\n+        String orcDDL = String.format(\"create external table SHOWCREATETABLEIT.testOrcSnappy (col1 int, col2 varchar(24))\" +\n+                \"compressed with snappy partitioned by (col2) STORED AS ORC LOCATION '%s'\", getExternalResourceDirectory()+\"testOrcSnappy\");\n+        methodWatcher.executeUpdate(orcDDL);\n+        ResultSet rs = methodWatcher.executeQuery(\"call syscs_util.SHOW_CREATE_TABLE('SHOWCREATETABLEIT','TESTORCSNAPPY')\");\n+        rs.next();\n+        Assert.assertEquals(\"CREATE EXTERNAL TABLE \\\"SHOWCREATETABLEIT\\\".\\\"TESTORCSNAPPY\\\" (\\n\" +\n+                \"\\\"COL1\\\" INTEGER\\n\" +\n+                \",\\\"COL2\\\" VARCHAR(24)\\n\" +\n+                \") \\n\" +\n+                \"COMPRESSED WITH snappy\\n\" +\n+                \"PARTITIONED BY (COL2)\\n\" +\n+                \"STORED AS ORC\\n\" +\n+                \"LOCATION '\"+getExternalResourceDirectory()+\"testOrcSnappy';\", rs.getString(1));\n+    }\n+\n+    @Test\n+    public void testSystemTable() throws Exception {\n+        try\n+        {\n+            methodWatcher.execute(\"call syscs_util.SHOW_CREATE_TABLE('SYS','SYSTABLES')\");\n+            Assert.fail(\"Expected to fail\");\n+        }\n+        catch (SQLException e)\n+        {\n+            String sqlState = e.getSQLState();\n+            Assert.assertEquals(\"42X62\",sqlState);\n+        }\n+    }\n+\n+    @Test\n+    public void testView() throws Exception {\n+        try\n+        {\n+            methodWatcher.executeUpdate(\"create view v1 as (select a1 from showcreatetableit.t1)\");\n+            methodWatcher.execute(\"call syscs_util.SHOW_CREATE_TABLE('SYS','SYSTABLES')\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fc1a40f14a909c822fb4b6829b4d8e57c18c450"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU1Mzk5MA==", "bodyText": "Thanks for catching it!", "url": "https://github.com/splicemachine/spliceengine/pull/3348#discussion_r401553990", "createdAt": "2020-04-01T11:46:45Z", "author": {"login": "changli6"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/utils/ShowCreateTableIT.java", "diffHunk": "@@ -382,4 +397,93 @@ public void testTextDefaultUserRole() throws Exception\n                 \") ;\", rs.getString(1));\n \n     }\n+\n+    @Category(HBaseTest.class)\n+    @Test\n+    public void testExternalTablePlainText() throws Exception {\n+        //Plain text\n+        String textDLL = String.format(\"CREATE EXTERNAL TABLE SHOWCREATETABLEIT.testCsvFile (id INT, c_text varchar(30)) \\n\" +\n+                \"ROW FORMAT DELIMITED \\n\" +\n+                \"FIELDS TERMINATED BY ','\\n\" +\n+                \"STORED AS TEXTFILE\\n\" +\n+                \"location '%s'\", getExternalResourceDirectory() + \"testCsvFile\");\n+        methodWatcher.executeUpdate(textDLL);\n+        ResultSet rs = methodWatcher.executeQuery(\"call syscs_util.SHOW_CREATE_TABLE('SHOWCREATETABLEIT','TESTCSVFILE')\");\n+        rs.next();\n+        Assert.assertEquals(\"CREATE EXTERNAL TABLE \\\"SHOWCREATETABLEIT\\\".\\\"TESTCSVFILE\\\" (\\n\" +\n+                \"\\\"ID\\\" INTEGER\\n\" +\n+                \",\\\"C_TEXT\\\" VARCHAR(30)\\n\" +\n+                \") \\n\" +\n+                \"ROW FORMAT DELIMITED FIELDS TERMINATED BY ','\\n\" +\n+                \"STORED AS TEXTFILE\\n\" +\n+                \"LOCATION '\"+getExternalResourceDirectory()+\"testCsvFile';\", rs.getString(1));\n+    }\n+\n+    @Category(HBaseTest.class)\n+    @Test\n+    public void testExternalTableParquetWithoutCompression() throws Exception {\n+        //Parquet Without compression\n+        String parquetDDL = String.format(\"create external table SHOWCREATETABLEIT.testParquet (col1 int, col2 varchar(24))\" +\n+                \"partitioned by (col1) STORED AS parquet LOCATION '%s'\", getExternalResourceDirectory() + \"testParquet\");\n+\n+        methodWatcher.executeUpdate(parquetDDL);\n+        ResultSet rs = methodWatcher.executeQuery(\"call syscs_util.SHOW_CREATE_TABLE('SHOWCREATETABLEIT','TESTPARQUET')\");\n+        rs.next();\n+        Assert.assertEquals(\"CREATE EXTERNAL TABLE \\\"SHOWCREATETABLEIT\\\".\\\"TESTPARQUET\\\" (\\n\" +\n+                \"\\\"COL1\\\" INTEGER\\n\" +\n+                \",\\\"COL2\\\" VARCHAR(24)\\n\" +\n+                \") \\n\" +\n+                \"PARTITIONED BY (COL1)\\n\" +\n+                \"STORED AS PARQUET\\n\" +\n+                \"LOCATION '\"+getExternalResourceDirectory()+\"testParquet';\", rs.getString(1));\n+    }\n+\n+    @Category(HBaseTest.class)\n+    @Test\n+    public void testExternalTableOrcSnappy() throws Exception {\n+        //Orc With compression\n+        String orcDDL = String.format(\"create external table SHOWCREATETABLEIT.testOrcSnappy (col1 int, col2 varchar(24))\" +\n+                \"compressed with snappy partitioned by (col2) STORED AS ORC LOCATION '%s'\", getExternalResourceDirectory()+\"testOrcSnappy\");\n+        methodWatcher.executeUpdate(orcDDL);\n+        ResultSet rs = methodWatcher.executeQuery(\"call syscs_util.SHOW_CREATE_TABLE('SHOWCREATETABLEIT','TESTORCSNAPPY')\");\n+        rs.next();\n+        Assert.assertEquals(\"CREATE EXTERNAL TABLE \\\"SHOWCREATETABLEIT\\\".\\\"TESTORCSNAPPY\\\" (\\n\" +\n+                \"\\\"COL1\\\" INTEGER\\n\" +\n+                \",\\\"COL2\\\" VARCHAR(24)\\n\" +\n+                \") \\n\" +\n+                \"COMPRESSED WITH snappy\\n\" +\n+                \"PARTITIONED BY (COL2)\\n\" +\n+                \"STORED AS ORC\\n\" +\n+                \"LOCATION '\"+getExternalResourceDirectory()+\"testOrcSnappy';\", rs.getString(1));\n+    }\n+\n+    @Test\n+    public void testSystemTable() throws Exception {\n+        try\n+        {\n+            methodWatcher.execute(\"call syscs_util.SHOW_CREATE_TABLE('SYS','SYSTABLES')\");\n+            Assert.fail(\"Expected to fail\");\n+        }\n+        catch (SQLException e)\n+        {\n+            String sqlState = e.getSQLState();\n+            Assert.assertEquals(\"42X62\",sqlState);\n+        }\n+    }\n+\n+    @Test\n+    public void testView() throws Exception {\n+        try\n+        {\n+            methodWatcher.executeUpdate(\"create view v1 as (select a1 from showcreatetableit.t1)\");\n+            methodWatcher.execute(\"call syscs_util.SHOW_CREATE_TABLE('SYS','SYSTABLES')\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQzNjUwOQ=="}, "originalCommit": {"oid": "0fc1a40f14a909c822fb4b6829b4d8e57c18c450"}, "originalPosition": 124}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3295, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}