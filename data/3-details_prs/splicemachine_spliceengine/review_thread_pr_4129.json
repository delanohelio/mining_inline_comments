{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3NjA1OTAz", "number": 4129, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNDozMToyN1rOEkz-YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMjowNDoxM1rOEuM4Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDM1NzQ1OnYy", "diffSide": "RIGHT", "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/sql/catalog/SpliceDataDictionary.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNDozMToyN1rOHT9s5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwOToxMjoyMVrOHcUJeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY5NTkxMA==", "bodyText": "We need to check rowTemplate[I] == null here which has the fetched row content.", "url": "https://github.com/splicemachine/spliceengine/pull/4129#discussion_r490695910", "createdAt": "2020-09-18T04:31:27Z", "author": {"login": "yxia92"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/sql/catalog/SpliceDataDictionary.java", "diffHunk": "@@ -1692,4 +1693,50 @@ public void addMinRetentionPeriodColumn(TransactionController tc) throws Standar\n                     SYSTABLESRowFactory.MIN_RETENTION_PERIOD));\n         }\n     }\n+\n+    public void setJavaClassNameColumnInSysAliases(TransactionController tc) throws StandardException {\n+        SchemaDescriptor sd = getSystemSchemaDescriptor();\n+        TabInfoImpl ti=getNonCoreTI(SYSALIASES_CATALOG_NUM);\n+        faultInTabInfo(ti);\n+\n+        FormatableBitSet columnToReadSet=new FormatableBitSet(SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT);\n+        FormatableBitSet columnToUpdateSet=new FormatableBitSet(SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT);\n+        for(int i=0;i<SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT;i++){\n+            // we do not want to read the saved serialized plan\n+            if (i+1 == SYSALIASESRowFactory.SYSALIASES_JAVACLASSNAME) {\n+                columnToReadSet.set(i);\n+            }\n+            columnToUpdateSet.set(i);\n+        }\n+        /* Set up a couple of row templates for fetching CHARS */\n+        DataValueDescriptor[] rowTemplate = new DataValueDescriptor[SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT];\n+        DataValueDescriptor[] replaceRow= new DataValueDescriptor[SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT];\n+\n+        /* Scan the entire heap */\n+        ScanController sc=\n+                tc.openScan(\n+                        ti.getHeapConglomerate(),\n+                        false,\n+                        TransactionController.OPENMODE_FORUPDATE,\n+                        TransactionController.MODE_TABLE,\n+                        TransactionController.ISOLATION_REPEATABLE_READ,\n+                        columnToReadSet,\n+                        null,\n+                        ScanController.NA,\n+                        null,\n+                        null,\n+                        ScanController.NA);\n+\n+        while(sc.fetchNext(rowTemplate)){\n+            /* If JAVACLASSNAME was set to null, rewrite it to \"NULL\" string literal instead. */\n+            for (int i=0; i<rowTemplate.length; i++) {\n+                if (i+1 == SYSALIASESRowFactory.SYSALIASES_JAVACLASSNAME)\n+                    if(replaceRow[i] == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6d8057d3f19c77d126a7381fd6d732ce6a8d185"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ1MjI4MA==", "bodyText": "Thanks!", "url": "https://github.com/splicemachine/spliceengine/pull/4129#discussion_r499452280", "createdAt": "2020-10-05T09:12:21Z", "author": {"login": "hatyo"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/sql/catalog/SpliceDataDictionary.java", "diffHunk": "@@ -1692,4 +1693,50 @@ public void addMinRetentionPeriodColumn(TransactionController tc) throws Standar\n                     SYSTABLESRowFactory.MIN_RETENTION_PERIOD));\n         }\n     }\n+\n+    public void setJavaClassNameColumnInSysAliases(TransactionController tc) throws StandardException {\n+        SchemaDescriptor sd = getSystemSchemaDescriptor();\n+        TabInfoImpl ti=getNonCoreTI(SYSALIASES_CATALOG_NUM);\n+        faultInTabInfo(ti);\n+\n+        FormatableBitSet columnToReadSet=new FormatableBitSet(SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT);\n+        FormatableBitSet columnToUpdateSet=new FormatableBitSet(SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT);\n+        for(int i=0;i<SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT;i++){\n+            // we do not want to read the saved serialized plan\n+            if (i+1 == SYSALIASESRowFactory.SYSALIASES_JAVACLASSNAME) {\n+                columnToReadSet.set(i);\n+            }\n+            columnToUpdateSet.set(i);\n+        }\n+        /* Set up a couple of row templates for fetching CHARS */\n+        DataValueDescriptor[] rowTemplate = new DataValueDescriptor[SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT];\n+        DataValueDescriptor[] replaceRow= new DataValueDescriptor[SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT];\n+\n+        /* Scan the entire heap */\n+        ScanController sc=\n+                tc.openScan(\n+                        ti.getHeapConglomerate(),\n+                        false,\n+                        TransactionController.OPENMODE_FORUPDATE,\n+                        TransactionController.MODE_TABLE,\n+                        TransactionController.ISOLATION_REPEATABLE_READ,\n+                        columnToReadSet,\n+                        null,\n+                        ScanController.NA,\n+                        null,\n+                        null,\n+                        ScanController.NA);\n+\n+        while(sc.fetchNext(rowTemplate)){\n+            /* If JAVACLASSNAME was set to null, rewrite it to \"NULL\" string literal instead. */\n+            for (int i=0; i<rowTemplate.length; i++) {\n+                if (i+1 == SYSALIASESRowFactory.SYSALIASES_JAVACLASSNAME)\n+                    if(replaceRow[i] == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY5NTkxMA=="}, "originalCommit": {"oid": "c6d8057d3f19c77d126a7381fd6d732ce6a8d185"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDM2MzA5OnYy", "diffSide": "RIGHT", "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/sql/catalog/SpliceDataDictionary.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNDozNToxM1rOHT9wHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwOToxMTo0OVrOHcUIEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY5NjczMw==", "bodyText": "From DB-9388, I learnt that for rows in dictionary table, partial row update does not seem to work well. To be safe, we should read all the columns of the row, and also provide the complete update row for update. That is, set all the bits for both columnToReadSet and columnToUpdateSet.", "url": "https://github.com/splicemachine/spliceengine/pull/4129#discussion_r490696733", "createdAt": "2020-09-18T04:35:13Z", "author": {"login": "yxia92"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/sql/catalog/SpliceDataDictionary.java", "diffHunk": "@@ -1692,4 +1693,50 @@ public void addMinRetentionPeriodColumn(TransactionController tc) throws Standar\n                     SYSTABLESRowFactory.MIN_RETENTION_PERIOD));\n         }\n     }\n+\n+    public void setJavaClassNameColumnInSysAliases(TransactionController tc) throws StandardException {\n+        SchemaDescriptor sd = getSystemSchemaDescriptor();\n+        TabInfoImpl ti=getNonCoreTI(SYSALIASES_CATALOG_NUM);\n+        faultInTabInfo(ti);\n+\n+        FormatableBitSet columnToReadSet=new FormatableBitSet(SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT);\n+        FormatableBitSet columnToUpdateSet=new FormatableBitSet(SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT);\n+        for(int i=0;i<SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT;i++){\n+            // we do not want to read the saved serialized plan\n+            if (i+1 == SYSALIASESRowFactory.SYSALIASES_JAVACLASSNAME) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6d8057d3f19c77d126a7381fd6d732ce6a8d185"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ1MTkyMA==", "bodyText": "Thanks for the information, I did not know that partial row updates are not working properly, we should investigate this further and fix it.\nI will follow your proposed safe measure and mark all columns for read and update.", "url": "https://github.com/splicemachine/spliceengine/pull/4129#discussion_r499451920", "createdAt": "2020-10-05T09:11:49Z", "author": {"login": "hatyo"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/sql/catalog/SpliceDataDictionary.java", "diffHunk": "@@ -1692,4 +1693,50 @@ public void addMinRetentionPeriodColumn(TransactionController tc) throws Standar\n                     SYSTABLESRowFactory.MIN_RETENTION_PERIOD));\n         }\n     }\n+\n+    public void setJavaClassNameColumnInSysAliases(TransactionController tc) throws StandardException {\n+        SchemaDescriptor sd = getSystemSchemaDescriptor();\n+        TabInfoImpl ti=getNonCoreTI(SYSALIASES_CATALOG_NUM);\n+        faultInTabInfo(ti);\n+\n+        FormatableBitSet columnToReadSet=new FormatableBitSet(SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT);\n+        FormatableBitSet columnToUpdateSet=new FormatableBitSet(SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT);\n+        for(int i=0;i<SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT;i++){\n+            // we do not want to read the saved serialized plan\n+            if (i+1 == SYSALIASESRowFactory.SYSALIASES_JAVACLASSNAME) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY5NjczMw=="}, "originalCommit": {"oid": "c6d8057d3f19c77d126a7381fd6d732ce6a8d185"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDM2NDY4OnYy", "diffSide": "RIGHT", "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/sql/catalog/SpliceDataDictionary.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNDozNjowNVrOHT9w8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwOToxNTo0M1rOHcURkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY5Njk0Ng==", "bodyText": "It is better to populate all columns of the replaceRow.", "url": "https://github.com/splicemachine/spliceengine/pull/4129#discussion_r490696946", "createdAt": "2020-09-18T04:36:05Z", "author": {"login": "yxia92"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/sql/catalog/SpliceDataDictionary.java", "diffHunk": "@@ -1692,4 +1693,50 @@ public void addMinRetentionPeriodColumn(TransactionController tc) throws Standar\n                     SYSTABLESRowFactory.MIN_RETENTION_PERIOD));\n         }\n     }\n+\n+    public void setJavaClassNameColumnInSysAliases(TransactionController tc) throws StandardException {\n+        SchemaDescriptor sd = getSystemSchemaDescriptor();\n+        TabInfoImpl ti=getNonCoreTI(SYSALIASES_CATALOG_NUM);\n+        faultInTabInfo(ti);\n+\n+        FormatableBitSet columnToReadSet=new FormatableBitSet(SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT);\n+        FormatableBitSet columnToUpdateSet=new FormatableBitSet(SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT);\n+        for(int i=0;i<SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT;i++){\n+            // we do not want to read the saved serialized plan\n+            if (i+1 == SYSALIASESRowFactory.SYSALIASES_JAVACLASSNAME) {\n+                columnToReadSet.set(i);\n+            }\n+            columnToUpdateSet.set(i);\n+        }\n+        /* Set up a couple of row templates for fetching CHARS */\n+        DataValueDescriptor[] rowTemplate = new DataValueDescriptor[SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT];\n+        DataValueDescriptor[] replaceRow= new DataValueDescriptor[SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT];\n+\n+        /* Scan the entire heap */\n+        ScanController sc=\n+                tc.openScan(\n+                        ti.getHeapConglomerate(),\n+                        false,\n+                        TransactionController.OPENMODE_FORUPDATE,\n+                        TransactionController.MODE_TABLE,\n+                        TransactionController.ISOLATION_REPEATABLE_READ,\n+                        columnToReadSet,\n+                        null,\n+                        ScanController.NA,\n+                        null,\n+                        null,\n+                        ScanController.NA);\n+\n+        while(sc.fetchNext(rowTemplate)){\n+            /* If JAVACLASSNAME was set to null, rewrite it to \"NULL\" string literal instead. */\n+            for (int i=0; i<rowTemplate.length; i++) {\n+                if (i+1 == SYSALIASESRowFactory.SYSALIASES_JAVACLASSNAME)\n+                    if(replaceRow[i] == null) {\n+                        replaceRow[i] = new SQLLongvarchar(\"NULL\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6d8057d3f19c77d126a7381fd6d732ce6a8d185"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY5NzQ0Mg==", "bodyText": "Can you run the upgrade test with some alias/synonym created before the upgrade, and see if the rows in sys aliases are properly updated and can be queried?", "url": "https://github.com/splicemachine/spliceengine/pull/4129#discussion_r490697442", "createdAt": "2020-09-18T04:38:15Z", "author": {"login": "yxia92"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/sql/catalog/SpliceDataDictionary.java", "diffHunk": "@@ -1692,4 +1693,50 @@ public void addMinRetentionPeriodColumn(TransactionController tc) throws Standar\n                     SYSTABLESRowFactory.MIN_RETENTION_PERIOD));\n         }\n     }\n+\n+    public void setJavaClassNameColumnInSysAliases(TransactionController tc) throws StandardException {\n+        SchemaDescriptor sd = getSystemSchemaDescriptor();\n+        TabInfoImpl ti=getNonCoreTI(SYSALIASES_CATALOG_NUM);\n+        faultInTabInfo(ti);\n+\n+        FormatableBitSet columnToReadSet=new FormatableBitSet(SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT);\n+        FormatableBitSet columnToUpdateSet=new FormatableBitSet(SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT);\n+        for(int i=0;i<SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT;i++){\n+            // we do not want to read the saved serialized plan\n+            if (i+1 == SYSALIASESRowFactory.SYSALIASES_JAVACLASSNAME) {\n+                columnToReadSet.set(i);\n+            }\n+            columnToUpdateSet.set(i);\n+        }\n+        /* Set up a couple of row templates for fetching CHARS */\n+        DataValueDescriptor[] rowTemplate = new DataValueDescriptor[SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT];\n+        DataValueDescriptor[] replaceRow= new DataValueDescriptor[SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT];\n+\n+        /* Scan the entire heap */\n+        ScanController sc=\n+                tc.openScan(\n+                        ti.getHeapConglomerate(),\n+                        false,\n+                        TransactionController.OPENMODE_FORUPDATE,\n+                        TransactionController.MODE_TABLE,\n+                        TransactionController.ISOLATION_REPEATABLE_READ,\n+                        columnToReadSet,\n+                        null,\n+                        ScanController.NA,\n+                        null,\n+                        null,\n+                        ScanController.NA);\n+\n+        while(sc.fetchNext(rowTemplate)){\n+            /* If JAVACLASSNAME was set to null, rewrite it to \"NULL\" string literal instead. */\n+            for (int i=0; i<rowTemplate.length; i++) {\n+                if (i+1 == SYSALIASESRowFactory.SYSALIASES_JAVACLASSNAME)\n+                    if(replaceRow[i] == null) {\n+                        replaceRow[i] = new SQLLongvarchar(\"NULL\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY5Njk0Ng=="}, "originalCommit": {"oid": "c6d8057d3f19c77d126a7381fd6d732ce6a8d185"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAxNTk5NQ==", "bodyText": "Can you run the upgrade test with some alias/synonym created before the upgrade, and see if the rows in sys aliases are properly updated and can be queried?\n\nI already did that before pushing the PR, works as expected.", "url": "https://github.com/splicemachine/spliceengine/pull/4129#discussion_r491015995", "createdAt": "2020-09-18T15:10:51Z", "author": {"login": "hatyo"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/sql/catalog/SpliceDataDictionary.java", "diffHunk": "@@ -1692,4 +1693,50 @@ public void addMinRetentionPeriodColumn(TransactionController tc) throws Standar\n                     SYSTABLESRowFactory.MIN_RETENTION_PERIOD));\n         }\n     }\n+\n+    public void setJavaClassNameColumnInSysAliases(TransactionController tc) throws StandardException {\n+        SchemaDescriptor sd = getSystemSchemaDescriptor();\n+        TabInfoImpl ti=getNonCoreTI(SYSALIASES_CATALOG_NUM);\n+        faultInTabInfo(ti);\n+\n+        FormatableBitSet columnToReadSet=new FormatableBitSet(SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT);\n+        FormatableBitSet columnToUpdateSet=new FormatableBitSet(SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT);\n+        for(int i=0;i<SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT;i++){\n+            // we do not want to read the saved serialized plan\n+            if (i+1 == SYSALIASESRowFactory.SYSALIASES_JAVACLASSNAME) {\n+                columnToReadSet.set(i);\n+            }\n+            columnToUpdateSet.set(i);\n+        }\n+        /* Set up a couple of row templates for fetching CHARS */\n+        DataValueDescriptor[] rowTemplate = new DataValueDescriptor[SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT];\n+        DataValueDescriptor[] replaceRow= new DataValueDescriptor[SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT];\n+\n+        /* Scan the entire heap */\n+        ScanController sc=\n+                tc.openScan(\n+                        ti.getHeapConglomerate(),\n+                        false,\n+                        TransactionController.OPENMODE_FORUPDATE,\n+                        TransactionController.MODE_TABLE,\n+                        TransactionController.ISOLATION_REPEATABLE_READ,\n+                        columnToReadSet,\n+                        null,\n+                        ScanController.NA,\n+                        null,\n+                        null,\n+                        ScanController.NA);\n+\n+        while(sc.fetchNext(rowTemplate)){\n+            /* If JAVACLASSNAME was set to null, rewrite it to \"NULL\" string literal instead. */\n+            for (int i=0; i<rowTemplate.length; i++) {\n+                if (i+1 == SYSALIASESRowFactory.SYSALIASES_JAVACLASSNAME)\n+                    if(replaceRow[i] == null) {\n+                        replaceRow[i] = new SQLLongvarchar(\"NULL\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY5Njk0Ng=="}, "originalCommit": {"oid": "c6d8057d3f19c77d126a7381fd6d732ce6a8d185"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ1NDM1NQ==", "bodyText": "It is better to populate all columns of the replaceRow.\n\ndone.", "url": "https://github.com/splicemachine/spliceengine/pull/4129#discussion_r499454355", "createdAt": "2020-10-05T09:15:43Z", "author": {"login": "hatyo"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/sql/catalog/SpliceDataDictionary.java", "diffHunk": "@@ -1692,4 +1693,50 @@ public void addMinRetentionPeriodColumn(TransactionController tc) throws Standar\n                     SYSTABLESRowFactory.MIN_RETENTION_PERIOD));\n         }\n     }\n+\n+    public void setJavaClassNameColumnInSysAliases(TransactionController tc) throws StandardException {\n+        SchemaDescriptor sd = getSystemSchemaDescriptor();\n+        TabInfoImpl ti=getNonCoreTI(SYSALIASES_CATALOG_NUM);\n+        faultInTabInfo(ti);\n+\n+        FormatableBitSet columnToReadSet=new FormatableBitSet(SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT);\n+        FormatableBitSet columnToUpdateSet=new FormatableBitSet(SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT);\n+        for(int i=0;i<SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT;i++){\n+            // we do not want to read the saved serialized plan\n+            if (i+1 == SYSALIASESRowFactory.SYSALIASES_JAVACLASSNAME) {\n+                columnToReadSet.set(i);\n+            }\n+            columnToUpdateSet.set(i);\n+        }\n+        /* Set up a couple of row templates for fetching CHARS */\n+        DataValueDescriptor[] rowTemplate = new DataValueDescriptor[SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT];\n+        DataValueDescriptor[] replaceRow= new DataValueDescriptor[SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT];\n+\n+        /* Scan the entire heap */\n+        ScanController sc=\n+                tc.openScan(\n+                        ti.getHeapConglomerate(),\n+                        false,\n+                        TransactionController.OPENMODE_FORUPDATE,\n+                        TransactionController.MODE_TABLE,\n+                        TransactionController.ISOLATION_REPEATABLE_READ,\n+                        columnToReadSet,\n+                        null,\n+                        ScanController.NA,\n+                        null,\n+                        null,\n+                        ScanController.NA);\n+\n+        while(sc.fetchNext(rowTemplate)){\n+            /* If JAVACLASSNAME was set to null, rewrite it to \"NULL\" string literal instead. */\n+            for (int i=0; i<rowTemplate.length; i++) {\n+                if (i+1 == SYSALIASESRowFactory.SYSALIASES_JAVACLASSNAME)\n+                    if(replaceRow[i] == null) {\n+                        replaceRow[i] = new SQLLongvarchar(\"NULL\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY5Njk0Ng=="}, "originalCommit": {"oid": "c6d8057d3f19c77d126a7381fd6d732ce6a8d185"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NjY0ODY0OnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/catalog/SYSALIASESRowFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNDozNToyNVrOHWWB8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwODo1NTo0OFrOHcTi_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE5MTY2NA==", "bodyText": "Move this down with other column names for better readability", "url": "https://github.com/splicemachine/spliceengine/pull/4129#discussion_r493191664", "createdAt": "2020-09-23T04:35:25Z", "author": {"login": "jyuanca"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/catalog/SYSALIASESRowFactory.java", "diffHunk": "@@ -48,346 +48,338 @@\n \n /**\n  * Factory for creating a SYSALIASES row.\n- *\n+ * <p>\n  * Here are the directions for adding a new system supplied alias.\n  * Misc:\n- *  All system supplied aliases are class aliases at this point.\n- *\tAdditional arrays will need to be added if we supply system\n- *\taliases of other types.\n- *\tThe preloadAliasIDs array is an array of hard coded UUIDs\n- *\tfor the system supplied aliases.\n- *\tThe preloadAliases array is the array of aliases\n- *\tfor the system supplied aliases.  This array is in alphabetical\n- *\torder by package and class in Xena.  Each alias is the uppercase\n- *\tclass name of the alias.\n- *  The preloadJavaClassNames array is the array of full package.class\n- *  names for the system supplied aliases.  This array is in alphabetical\n- *\torder by package and class in Xena.  \n- *\tSYSALIASES_NUM_BOOT_ROWS is the number of boot rows in sys.sysaliases\n- *  in a new database.\n- *\n- *\n+ * All system supplied aliases are class aliases at this point.\n+ * Additional arrays will need to be added if we supply system\n+ * aliases of other types.\n+ * The preloadAliasIDs array is an array of hard coded UUIDs\n+ * for the system supplied aliases.\n+ * The preloadAliases array is the array of aliases\n+ * for the system supplied aliases.  This array is in alphabetical\n+ * order by package and class in Xena.  Each alias is the uppercase\n+ * class name of the alias.\n+ * The preloadJavaClassNames array is the array of full package.class\n+ * names for the system supplied aliases.  This array is in alphabetical\n+ * order by package and class in Xena.\n+ * SYSALIASES_NUM_BOOT_ROWS is the number of boot rows in sys.sysaliases\n+ * in a new database.\n  */\n \n-public class SYSALIASESRowFactory extends CatalogRowFactory\n-{\n-\n-\tprivate static final int\t\tSYSALIASES_COLUMN_COUNT = 9;\n-\tprivate static final int\t\tSYSALIASES_ALIASID = 1;\n-\tprivate static final int\t\tSYSALIASES_ALIAS = 2;\n-\tprivate static final int\t\tSYSALIASES_SCHEMAID = 3;\n-\tprivate static final int\t\tSYSALIASES_JAVACLASSNAME = 4;\n-\tprivate static final int\t\tSYSALIASES_ALIASTYPE = 5;\n-\tprivate static final int\t\tSYSALIASES_NAMESPACE = 6;\n-\tprivate static final int\t\tSYSALIASES_SYSTEMALIAS = 7;\n-\tpublic  static final int\t\tSYSALIASES_ALIASINFO = 8;\n-\tprivate static final int\t\tSYSALIASES_SPECIFIC_NAME = 9;\n-\n- \n-\tprotected static final int\t\tSYSALIASES_INDEX1_ID = 0;\n-\n-\tprotected static final int\t\tSYSALIASES_INDEX2_ID = 1;\n-\n-\tprotected static final int\t\tSYSALIASES_INDEX3_ID = 2;\n-\n-\t// null means all unique.\n-    private\tstatic\tfinal\tboolean[]\tuniqueness = null;\n-\n-\tprivate static int[][] indexColumnPositions =\n-\t{\n-\t\t{SYSALIASES_SCHEMAID, SYSALIASES_ALIAS, SYSALIASES_NAMESPACE},\n-\t\t{SYSALIASES_ALIASID},\n-\t\t{SYSALIASES_SCHEMAID, SYSALIASES_SPECIFIC_NAME},\n-\t};\n-\n-\tprivate\tstatic\tfinal\tString[]\tuuids =\n-\t{\n-\t\t \"c013800d-00d7-ddbd-08ce-000a0a411400\"\t// catalog UUID\n-\t\t,\"c013800d-00d7-ddbd-75d4-000a0a411400\"\t// heap UUID\n-\t\t,\"c013800d-00d7-ddbe-b99d-000a0a411400\"\t// SYSALIASES_INDEX1\n-\t\t,\"c013800d-00d7-ddbe-c4e1-000a0a411400\"\t// SYSALIASES_INDEX2\n-\t\t,\"c013800d-00d7-ddbe-34ae-000a0a411400\"\t// SYSALIASES_INDEX3\n-\t};\n-\n-\t/////////////////////////////////////////////////////////////////////////////\n-\t//\n-\t//\tCONSTRUCTORS\n-\t//\n-\t/////////////////////////////////////////////////////////////////////////////\n-\n-    public SYSALIASESRowFactory(UUIDFactory uuidf, ExecutionFactory ef, DataValueFactory dvf, DataDictionary dd)\n-\t{\n-\t\tsuper(uuidf,ef,dvf,dd);\n-\t\tinitInfo(SYSALIASES_COLUMN_COUNT, \"SYSALIASES\", indexColumnPositions, uniqueness, uuids);\n-\t}\n-\n-\t/////////////////////////////////////////////////////////////////////////////\n-\t//\n-\t//\tMETHODS\n-\t//\n-\t/////////////////////////////////////////////////////////////////////////////\n-\n-  /**\n-\t * Make a SYSALIASES row\n-\t *\n-\t *\n-\t * @return\tRow suitable for inserting into SYSALIASES.\n-\t *\n-\t * @exception   StandardException thrown on failure\n-\t */\n-\tpublic ExecRow makeRow(boolean latestVersion, TupleDescriptor\ttd, TupleDescriptor parent)\n-\t\t\t\t\tthrows StandardException \n-\t{\n-\t\tDataValueDescriptor\t\tcol;\n-\t\tString\t\t\t\t\tschemaID = null;\n-\t\tString\t\t\t\t\tjavaClassName = null;\n-\t\tString\t\t\t\t\tsAliasType = null;\n-\t\tString\t\t\t\t\taliasID = null;\n-\t\tString\t\t\t\t\taliasName = null;\n-\t\tString\t\t\t\t\tspecificName = null;\n-\t\tchar\t\t\t\t\tcAliasType = AliasInfo.ALIAS_TYPE_PROCEDURE_AS_CHAR;\n-\t\tchar\t\t\t\t\tcNameSpace = AliasInfo.ALIAS_NAME_SPACE_PROCEDURE_AS_CHAR;\n-\t\tboolean\t\t\t\t\tsystemAlias = false;\n-\t\tAliasInfo\t\t\t\taliasInfo = null;\n-\n-\t\tif (td != null && (td instanceof AliasDescriptor)) {\n-\t\t\t\n-\t\t\tAliasDescriptor \t\tad = (AliasDescriptor)td;\n-\t\t\taliasID\t= ad.getUUID().toString();\n-\t\t\taliasName = ad.getDescriptorName();\n-\t\t\tschemaID\t= ad.getSchemaUUID().toString();\n-\t\t\tjavaClassName\t= ad.getJavaClassName();\n-\t\t\tcAliasType = ad.getAliasType();\n-\t\t\tcNameSpace = ad.getNameSpace();\n-\t\t\tsystemAlias = ad.getSystemAlias();\n-\t\t\taliasInfo = ad.getAliasInfo();\n-\t\t\tspecificName = ad.getSpecificName();\n-\n-\t\t\tchar[] charArray = new char[1];\n-\t\t\tcharArray[0] = cAliasType;\n-\t\t\tsAliasType = new String(charArray);\n-\n-\t\t\tif (SanityManager.DEBUG)\n-\t\t\t{\n-\t\t\t\tswitch (cAliasType)\n-\t\t\t\t{\n-\t\t\t\t\tcase AliasInfo.ALIAS_TYPE_PROCEDURE_AS_CHAR:\n-\t\t\t\t\tcase AliasInfo.ALIAS_TYPE_FUNCTION_AS_CHAR:\n-\t\t\t\t\tcase AliasInfo.ALIAS_TYPE_SYNONYM_AS_CHAR:\n-\t\t\t\t\tcase AliasInfo.ALIAS_TYPE_UDT_AS_CHAR:\n-\t\t\t\t\tcase AliasInfo.ALIAS_TYPE_AGGREGATE_AS_CHAR:\n-\t\t\t\t\t\tbreak;\n-\n-\t\t\t\t\tdefault:\n-\t\t\t\t\t\tSanityManager.THROWASSERT(\n-\t\t\t\t\t\t\t\"Unexpected value (\" + cAliasType +\n-\t\t\t\t\t\t\t\") for aliasType\");\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\n-\t\t/* Insert info into sysaliases */\n-\n-\t\t/* RESOLVE - It would be nice to require less knowledge about sysaliases\n-\t\t * and have this be more table driven.\n-\t\t */\n-\n-\t\t/* Build the row to insert */\n-\t\tExecRow row = getExecutionFactory().getValueRow(SYSALIASES_COLUMN_COUNT);\n-\n-\t\t/* 1st column is ALIASID (UUID - char(36)) */\n-\t\trow.setColumn(SYSALIASES_ALIASID, new SQLChar(aliasID));\n-\n-\t\t/* 2nd column is ALIAS (varchar(128))) */\n-\t\trow.setColumn(SYSALIASES_ALIAS, new SQLVarchar(aliasName));\n-\t\t//\t\tSystem.out.println(\" added row-- \" + aliasName);\n-\n-\t\t/* 3rd column is SCHEMAID (UUID - char(36)) */\n-\t\trow.setColumn(SYSALIASES_SCHEMAID, new SQLChar(schemaID));\n-\n-\t\t/* 4th column is JAVACLASSNAME (longvarchar) */\n-\t\trow.setColumn(SYSALIASES_JAVACLASSNAME, dvf.getLongvarcharDataValue(javaClassName));\n-\n-\t\t/* 5th column is ALIASTYPE (char(1)) */\n-\t\trow.setColumn(SYSALIASES_ALIASTYPE, new SQLChar(sAliasType));\n-\n-\t\t/* 6th column is NAMESPACE (char(1)) */\n-\t\tString sNameSpace = new String(new char[] { cNameSpace });\n-\n-\t\trow.setColumn\n-\t\t\t(SYSALIASES_NAMESPACE, new SQLChar(sNameSpace));\n-\n-\n-\t\t/* 7th column is SYSTEMALIAS (boolean) */\n-\t\trow.setColumn\n-\t\t\t(SYSALIASES_SYSTEMALIAS, new SQLBoolean(systemAlias));\n-\n-\t\t/* 8th column is ALIASINFO (com.splicemachine.db.catalog.AliasInfo) */\n-\t\trow.setColumn(SYSALIASES_ALIASINFO, \n-\t\t\tnew UserType(aliasInfo));\n-\n-\t\t/* 9th column is specific name */\n-\t\trow.setColumn\n-\t\t\t(SYSALIASES_SPECIFIC_NAME, new SQLVarchar(specificName));\n-\n-\n-\t\treturn row;\n-\t}\n-\n-\t///////////////////////////////////////////////////////////////////////////\n-\t//\n-\t//\tABSTRACT METHODS TO BE IMPLEMENTED BY CHILDREN OF CatalogRowFactory\n-\t//\n-\t///////////////////////////////////////////////////////////////////////////\n-\n-\t/**\n-\t * Make a AliasDescriptor out of a SYSALIASES row\n-\t *\n-\t * @param row a SYSALIASES row\n-\t * @param parentTupleDescriptor\tNull for this kind of descriptor.\n-\t * @param dd dataDictionary\n-\t *\n-\t * @exception   StandardException thrown on failure\n-\t */\n-\tpublic TupleDescriptor buildDescriptor(\n-\t\tExecRow\t\t\t\t\trow,\n-\t\tTupleDescriptor\t\t\tparentTupleDescriptor,\n-\t\tDataDictionary \t\t\tdd )\n-\t\t\t\t\tthrows StandardException\n-\t{\n-\t\tif (SanityManager.DEBUG)\n-\t\t{\n-\t\t\tSanityManager.ASSERT(\n-\t\t\t\trow.nColumns() == SYSALIASES_COLUMN_COUNT, \n-\t\t\t\t\"Wrong number of columns for a SYSALIASES row\");\n-\t\t}\n-\n-\t\tchar\t\t\t\tcAliasType;\n-\t\tchar\t\t\t\tcNameSpace;\n-\t\tDataValueDescriptor\tcol;\n-\t\tString\t\t\t\taliasID;\n-\t\tUUID\t\t\t\taliasUUID;\n-\t\tString\t\t\t\taliasName;\n-\t\tString\t\t\t\tjavaClassName;\n-\t\tString\t\t\t\tsAliasType;\n-\t\tString\t\t\t\tsNameSpace;\n-\t\tString\t\t\t\ttypeStr;\n-\t\tboolean\t\t\t\tsystemAlias = false;\n-\t\tAliasInfo\t\t\taliasInfo = null;\n-\n-\t\t/* 1st column is ALIASID (UUID - char(36)) */\n-\t\tcol = row.getColumn(SYSALIASES_ALIASID);\n-\t\taliasID = col.getString();\n-\t\taliasUUID = getUUIDFactory().recreateUUID(aliasID);\n-\n-\t\t/* 2nd column is ALIAS (varchar(128)) */\n-\t\tcol = row.getColumn(SYSALIASES_ALIAS);\n-\t\taliasName = col.getString();\n-\n-\t\t/* 3rd column is SCHEMAID (UUID - char(36)) */\n-\t\tcol = row.getColumn(SYSALIASES_SCHEMAID);\n-\t\tUUID schemaUUID = col.isNull() ? null : getUUIDFactory().recreateUUID(col.getString());\n-\n-\t\t/* 4th column is JAVACLASSNAME (longvarchar) */\n-\t\tcol = row.getColumn(SYSALIASES_JAVACLASSNAME);\n-\t\tjavaClassName = col.getString();\n-\n-\t\t/* 5th column is ALIASTYPE (char(1)) */\n-\t\tcol = row.getColumn(SYSALIASES_ALIASTYPE);\n-\t\tsAliasType = col.getString();\n-\t\tif (SanityManager.DEBUG)\n-\t\t{\n-\t\t\tSanityManager.ASSERT(sAliasType.length() == 1, \n-\t\t\t\t\"Fifth column (aliastype) type incorrect\");\n-\t\t\tswitch (sAliasType.charAt(0))\n-\t\t\t{\n-\t\t\t\tcase AliasInfo.ALIAS_TYPE_PROCEDURE_AS_CHAR: \n-\t\t\t\tcase AliasInfo.ALIAS_TYPE_FUNCTION_AS_CHAR: \n-\t\t\t\tcase AliasInfo.ALIAS_TYPE_SYNONYM_AS_CHAR: \n-\t\t\t\tcase AliasInfo.ALIAS_TYPE_UDT_AS_CHAR: \n-\t\t\t\tcase AliasInfo.ALIAS_TYPE_AGGREGATE_AS_CHAR:\n-\t\t\t\t\tbreak;\n-\n-\t\t\t\tdefault: \n-\t\t\t\t\tSanityManager.THROWASSERT(\"Invalid type value '\"\n-\t\t\t\t\t\t\t+sAliasType+ \"' for  alias\");\n-\t\t\t}\n-\t\t}\n-\n-\t\tcAliasType = sAliasType.charAt(0);\n-\n-\t\t/* 6th column is NAMESPACE (char(1)) */\n-\t\tcol = row.getColumn(SYSALIASES_NAMESPACE);\n-\t\tsNameSpace = col.getString();\n-\t\tif (SanityManager.DEBUG)\n-\t\t{\n-\t\t\tSanityManager.ASSERT(sNameSpace.length() == 1, \n-\t\t\t\t\"Sixth column (namespace) type incorrect\");\n-\t\t\tswitch (sNameSpace.charAt(0))\n-\t\t\t{\n-\t\t\t\tcase AliasInfo.ALIAS_NAME_SPACE_PROCEDURE_AS_CHAR: \n-\t\t\t\tcase AliasInfo.ALIAS_NAME_SPACE_FUNCTION_AS_CHAR: \n-\t\t\t\tcase AliasInfo.ALIAS_TYPE_SYNONYM_AS_CHAR: \n-\t\t\t\tcase AliasInfo.ALIAS_TYPE_UDT_AS_CHAR: \n-\t\t\t\tcase AliasInfo.ALIAS_TYPE_AGGREGATE_AS_CHAR:\n-\t\t\t\t\tbreak;\n-\n-\t\t\t\tdefault: \n-\t\t\t\t\tSanityManager.THROWASSERT(\"Invalid type value '\"\n-\t\t\t\t\t\t\t+sNameSpace+ \"' for  alias\");\n-\t\t\t}\n-\t\t}\n-\n-\t\tcNameSpace = sNameSpace.charAt(0);\n-\n-\n-\t\t/* 7th column is SYSTEMALIAS (boolean) */\n-\t\tcol = row.getColumn(SYSALIASES_SYSTEMALIAS);\n-\t\tsystemAlias = col.getBoolean();\n-\n-\t\t/* 8th column is ALIASINFO (com.splicemachine.db.catalog.AliasInfo) */\n-\t\tcol = row.getColumn(SYSALIASES_ALIASINFO);\n-\t\taliasInfo = (AliasInfo) col.getObject();\n-\n-\t\t/* 9th column is specific name */\n-\t\tcol = row.getColumn(SYSALIASES_SPECIFIC_NAME);\n-\t\tString specificName = col.getString();\n-\n-\n-\t\t/* now build and return the descriptor */\n-\t\treturn new AliasDescriptor(dd, aliasUUID, aliasName,\n-\t\t\t\t\t\t\t\t\t\tschemaUUID, javaClassName, cAliasType,\n-\t\t\t\t\t\t\t\t\t\tcNameSpace, systemAlias,\n-\t\t\t\t\t\t\t\t\t\taliasInfo, specificName);\n-\t}\n+public class SYSALIASESRowFactory extends CatalogRowFactory {\n+    public static final String TABLENAME_STRING = \"SYSALIASES\";\n+    public static final int SYSALIASES_ALIASINFO = 8;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f00194cf7f1ad5be1d2c186f3dcdfd60c2a102b9"}, "originalPosition": 334}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ0MjQyOA==", "bodyText": "done.", "url": "https://github.com/splicemachine/spliceengine/pull/4129#discussion_r499442428", "createdAt": "2020-10-05T08:55:48Z", "author": {"login": "hatyo"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/catalog/SYSALIASESRowFactory.java", "diffHunk": "@@ -48,346 +48,338 @@\n \n /**\n  * Factory for creating a SYSALIASES row.\n- *\n+ * <p>\n  * Here are the directions for adding a new system supplied alias.\n  * Misc:\n- *  All system supplied aliases are class aliases at this point.\n- *\tAdditional arrays will need to be added if we supply system\n- *\taliases of other types.\n- *\tThe preloadAliasIDs array is an array of hard coded UUIDs\n- *\tfor the system supplied aliases.\n- *\tThe preloadAliases array is the array of aliases\n- *\tfor the system supplied aliases.  This array is in alphabetical\n- *\torder by package and class in Xena.  Each alias is the uppercase\n- *\tclass name of the alias.\n- *  The preloadJavaClassNames array is the array of full package.class\n- *  names for the system supplied aliases.  This array is in alphabetical\n- *\torder by package and class in Xena.  \n- *\tSYSALIASES_NUM_BOOT_ROWS is the number of boot rows in sys.sysaliases\n- *  in a new database.\n- *\n- *\n+ * All system supplied aliases are class aliases at this point.\n+ * Additional arrays will need to be added if we supply system\n+ * aliases of other types.\n+ * The preloadAliasIDs array is an array of hard coded UUIDs\n+ * for the system supplied aliases.\n+ * The preloadAliases array is the array of aliases\n+ * for the system supplied aliases.  This array is in alphabetical\n+ * order by package and class in Xena.  Each alias is the uppercase\n+ * class name of the alias.\n+ * The preloadJavaClassNames array is the array of full package.class\n+ * names for the system supplied aliases.  This array is in alphabetical\n+ * order by package and class in Xena.\n+ * SYSALIASES_NUM_BOOT_ROWS is the number of boot rows in sys.sysaliases\n+ * in a new database.\n  */\n \n-public class SYSALIASESRowFactory extends CatalogRowFactory\n-{\n-\n-\tprivate static final int\t\tSYSALIASES_COLUMN_COUNT = 9;\n-\tprivate static final int\t\tSYSALIASES_ALIASID = 1;\n-\tprivate static final int\t\tSYSALIASES_ALIAS = 2;\n-\tprivate static final int\t\tSYSALIASES_SCHEMAID = 3;\n-\tprivate static final int\t\tSYSALIASES_JAVACLASSNAME = 4;\n-\tprivate static final int\t\tSYSALIASES_ALIASTYPE = 5;\n-\tprivate static final int\t\tSYSALIASES_NAMESPACE = 6;\n-\tprivate static final int\t\tSYSALIASES_SYSTEMALIAS = 7;\n-\tpublic  static final int\t\tSYSALIASES_ALIASINFO = 8;\n-\tprivate static final int\t\tSYSALIASES_SPECIFIC_NAME = 9;\n-\n- \n-\tprotected static final int\t\tSYSALIASES_INDEX1_ID = 0;\n-\n-\tprotected static final int\t\tSYSALIASES_INDEX2_ID = 1;\n-\n-\tprotected static final int\t\tSYSALIASES_INDEX3_ID = 2;\n-\n-\t// null means all unique.\n-    private\tstatic\tfinal\tboolean[]\tuniqueness = null;\n-\n-\tprivate static int[][] indexColumnPositions =\n-\t{\n-\t\t{SYSALIASES_SCHEMAID, SYSALIASES_ALIAS, SYSALIASES_NAMESPACE},\n-\t\t{SYSALIASES_ALIASID},\n-\t\t{SYSALIASES_SCHEMAID, SYSALIASES_SPECIFIC_NAME},\n-\t};\n-\n-\tprivate\tstatic\tfinal\tString[]\tuuids =\n-\t{\n-\t\t \"c013800d-00d7-ddbd-08ce-000a0a411400\"\t// catalog UUID\n-\t\t,\"c013800d-00d7-ddbd-75d4-000a0a411400\"\t// heap UUID\n-\t\t,\"c013800d-00d7-ddbe-b99d-000a0a411400\"\t// SYSALIASES_INDEX1\n-\t\t,\"c013800d-00d7-ddbe-c4e1-000a0a411400\"\t// SYSALIASES_INDEX2\n-\t\t,\"c013800d-00d7-ddbe-34ae-000a0a411400\"\t// SYSALIASES_INDEX3\n-\t};\n-\n-\t/////////////////////////////////////////////////////////////////////////////\n-\t//\n-\t//\tCONSTRUCTORS\n-\t//\n-\t/////////////////////////////////////////////////////////////////////////////\n-\n-    public SYSALIASESRowFactory(UUIDFactory uuidf, ExecutionFactory ef, DataValueFactory dvf, DataDictionary dd)\n-\t{\n-\t\tsuper(uuidf,ef,dvf,dd);\n-\t\tinitInfo(SYSALIASES_COLUMN_COUNT, \"SYSALIASES\", indexColumnPositions, uniqueness, uuids);\n-\t}\n-\n-\t/////////////////////////////////////////////////////////////////////////////\n-\t//\n-\t//\tMETHODS\n-\t//\n-\t/////////////////////////////////////////////////////////////////////////////\n-\n-  /**\n-\t * Make a SYSALIASES row\n-\t *\n-\t *\n-\t * @return\tRow suitable for inserting into SYSALIASES.\n-\t *\n-\t * @exception   StandardException thrown on failure\n-\t */\n-\tpublic ExecRow makeRow(boolean latestVersion, TupleDescriptor\ttd, TupleDescriptor parent)\n-\t\t\t\t\tthrows StandardException \n-\t{\n-\t\tDataValueDescriptor\t\tcol;\n-\t\tString\t\t\t\t\tschemaID = null;\n-\t\tString\t\t\t\t\tjavaClassName = null;\n-\t\tString\t\t\t\t\tsAliasType = null;\n-\t\tString\t\t\t\t\taliasID = null;\n-\t\tString\t\t\t\t\taliasName = null;\n-\t\tString\t\t\t\t\tspecificName = null;\n-\t\tchar\t\t\t\t\tcAliasType = AliasInfo.ALIAS_TYPE_PROCEDURE_AS_CHAR;\n-\t\tchar\t\t\t\t\tcNameSpace = AliasInfo.ALIAS_NAME_SPACE_PROCEDURE_AS_CHAR;\n-\t\tboolean\t\t\t\t\tsystemAlias = false;\n-\t\tAliasInfo\t\t\t\taliasInfo = null;\n-\n-\t\tif (td != null && (td instanceof AliasDescriptor)) {\n-\t\t\t\n-\t\t\tAliasDescriptor \t\tad = (AliasDescriptor)td;\n-\t\t\taliasID\t= ad.getUUID().toString();\n-\t\t\taliasName = ad.getDescriptorName();\n-\t\t\tschemaID\t= ad.getSchemaUUID().toString();\n-\t\t\tjavaClassName\t= ad.getJavaClassName();\n-\t\t\tcAliasType = ad.getAliasType();\n-\t\t\tcNameSpace = ad.getNameSpace();\n-\t\t\tsystemAlias = ad.getSystemAlias();\n-\t\t\taliasInfo = ad.getAliasInfo();\n-\t\t\tspecificName = ad.getSpecificName();\n-\n-\t\t\tchar[] charArray = new char[1];\n-\t\t\tcharArray[0] = cAliasType;\n-\t\t\tsAliasType = new String(charArray);\n-\n-\t\t\tif (SanityManager.DEBUG)\n-\t\t\t{\n-\t\t\t\tswitch (cAliasType)\n-\t\t\t\t{\n-\t\t\t\t\tcase AliasInfo.ALIAS_TYPE_PROCEDURE_AS_CHAR:\n-\t\t\t\t\tcase AliasInfo.ALIAS_TYPE_FUNCTION_AS_CHAR:\n-\t\t\t\t\tcase AliasInfo.ALIAS_TYPE_SYNONYM_AS_CHAR:\n-\t\t\t\t\tcase AliasInfo.ALIAS_TYPE_UDT_AS_CHAR:\n-\t\t\t\t\tcase AliasInfo.ALIAS_TYPE_AGGREGATE_AS_CHAR:\n-\t\t\t\t\t\tbreak;\n-\n-\t\t\t\t\tdefault:\n-\t\t\t\t\t\tSanityManager.THROWASSERT(\n-\t\t\t\t\t\t\t\"Unexpected value (\" + cAliasType +\n-\t\t\t\t\t\t\t\") for aliasType\");\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\n-\t\t/* Insert info into sysaliases */\n-\n-\t\t/* RESOLVE - It would be nice to require less knowledge about sysaliases\n-\t\t * and have this be more table driven.\n-\t\t */\n-\n-\t\t/* Build the row to insert */\n-\t\tExecRow row = getExecutionFactory().getValueRow(SYSALIASES_COLUMN_COUNT);\n-\n-\t\t/* 1st column is ALIASID (UUID - char(36)) */\n-\t\trow.setColumn(SYSALIASES_ALIASID, new SQLChar(aliasID));\n-\n-\t\t/* 2nd column is ALIAS (varchar(128))) */\n-\t\trow.setColumn(SYSALIASES_ALIAS, new SQLVarchar(aliasName));\n-\t\t//\t\tSystem.out.println(\" added row-- \" + aliasName);\n-\n-\t\t/* 3rd column is SCHEMAID (UUID - char(36)) */\n-\t\trow.setColumn(SYSALIASES_SCHEMAID, new SQLChar(schemaID));\n-\n-\t\t/* 4th column is JAVACLASSNAME (longvarchar) */\n-\t\trow.setColumn(SYSALIASES_JAVACLASSNAME, dvf.getLongvarcharDataValue(javaClassName));\n-\n-\t\t/* 5th column is ALIASTYPE (char(1)) */\n-\t\trow.setColumn(SYSALIASES_ALIASTYPE, new SQLChar(sAliasType));\n-\n-\t\t/* 6th column is NAMESPACE (char(1)) */\n-\t\tString sNameSpace = new String(new char[] { cNameSpace });\n-\n-\t\trow.setColumn\n-\t\t\t(SYSALIASES_NAMESPACE, new SQLChar(sNameSpace));\n-\n-\n-\t\t/* 7th column is SYSTEMALIAS (boolean) */\n-\t\trow.setColumn\n-\t\t\t(SYSALIASES_SYSTEMALIAS, new SQLBoolean(systemAlias));\n-\n-\t\t/* 8th column is ALIASINFO (com.splicemachine.db.catalog.AliasInfo) */\n-\t\trow.setColumn(SYSALIASES_ALIASINFO, \n-\t\t\tnew UserType(aliasInfo));\n-\n-\t\t/* 9th column is specific name */\n-\t\trow.setColumn\n-\t\t\t(SYSALIASES_SPECIFIC_NAME, new SQLVarchar(specificName));\n-\n-\n-\t\treturn row;\n-\t}\n-\n-\t///////////////////////////////////////////////////////////////////////////\n-\t//\n-\t//\tABSTRACT METHODS TO BE IMPLEMENTED BY CHILDREN OF CatalogRowFactory\n-\t//\n-\t///////////////////////////////////////////////////////////////////////////\n-\n-\t/**\n-\t * Make a AliasDescriptor out of a SYSALIASES row\n-\t *\n-\t * @param row a SYSALIASES row\n-\t * @param parentTupleDescriptor\tNull for this kind of descriptor.\n-\t * @param dd dataDictionary\n-\t *\n-\t * @exception   StandardException thrown on failure\n-\t */\n-\tpublic TupleDescriptor buildDescriptor(\n-\t\tExecRow\t\t\t\t\trow,\n-\t\tTupleDescriptor\t\t\tparentTupleDescriptor,\n-\t\tDataDictionary \t\t\tdd )\n-\t\t\t\t\tthrows StandardException\n-\t{\n-\t\tif (SanityManager.DEBUG)\n-\t\t{\n-\t\t\tSanityManager.ASSERT(\n-\t\t\t\trow.nColumns() == SYSALIASES_COLUMN_COUNT, \n-\t\t\t\t\"Wrong number of columns for a SYSALIASES row\");\n-\t\t}\n-\n-\t\tchar\t\t\t\tcAliasType;\n-\t\tchar\t\t\t\tcNameSpace;\n-\t\tDataValueDescriptor\tcol;\n-\t\tString\t\t\t\taliasID;\n-\t\tUUID\t\t\t\taliasUUID;\n-\t\tString\t\t\t\taliasName;\n-\t\tString\t\t\t\tjavaClassName;\n-\t\tString\t\t\t\tsAliasType;\n-\t\tString\t\t\t\tsNameSpace;\n-\t\tString\t\t\t\ttypeStr;\n-\t\tboolean\t\t\t\tsystemAlias = false;\n-\t\tAliasInfo\t\t\taliasInfo = null;\n-\n-\t\t/* 1st column is ALIASID (UUID - char(36)) */\n-\t\tcol = row.getColumn(SYSALIASES_ALIASID);\n-\t\taliasID = col.getString();\n-\t\taliasUUID = getUUIDFactory().recreateUUID(aliasID);\n-\n-\t\t/* 2nd column is ALIAS (varchar(128)) */\n-\t\tcol = row.getColumn(SYSALIASES_ALIAS);\n-\t\taliasName = col.getString();\n-\n-\t\t/* 3rd column is SCHEMAID (UUID - char(36)) */\n-\t\tcol = row.getColumn(SYSALIASES_SCHEMAID);\n-\t\tUUID schemaUUID = col.isNull() ? null : getUUIDFactory().recreateUUID(col.getString());\n-\n-\t\t/* 4th column is JAVACLASSNAME (longvarchar) */\n-\t\tcol = row.getColumn(SYSALIASES_JAVACLASSNAME);\n-\t\tjavaClassName = col.getString();\n-\n-\t\t/* 5th column is ALIASTYPE (char(1)) */\n-\t\tcol = row.getColumn(SYSALIASES_ALIASTYPE);\n-\t\tsAliasType = col.getString();\n-\t\tif (SanityManager.DEBUG)\n-\t\t{\n-\t\t\tSanityManager.ASSERT(sAliasType.length() == 1, \n-\t\t\t\t\"Fifth column (aliastype) type incorrect\");\n-\t\t\tswitch (sAliasType.charAt(0))\n-\t\t\t{\n-\t\t\t\tcase AliasInfo.ALIAS_TYPE_PROCEDURE_AS_CHAR: \n-\t\t\t\tcase AliasInfo.ALIAS_TYPE_FUNCTION_AS_CHAR: \n-\t\t\t\tcase AliasInfo.ALIAS_TYPE_SYNONYM_AS_CHAR: \n-\t\t\t\tcase AliasInfo.ALIAS_TYPE_UDT_AS_CHAR: \n-\t\t\t\tcase AliasInfo.ALIAS_TYPE_AGGREGATE_AS_CHAR:\n-\t\t\t\t\tbreak;\n-\n-\t\t\t\tdefault: \n-\t\t\t\t\tSanityManager.THROWASSERT(\"Invalid type value '\"\n-\t\t\t\t\t\t\t+sAliasType+ \"' for  alias\");\n-\t\t\t}\n-\t\t}\n-\n-\t\tcAliasType = sAliasType.charAt(0);\n-\n-\t\t/* 6th column is NAMESPACE (char(1)) */\n-\t\tcol = row.getColumn(SYSALIASES_NAMESPACE);\n-\t\tsNameSpace = col.getString();\n-\t\tif (SanityManager.DEBUG)\n-\t\t{\n-\t\t\tSanityManager.ASSERT(sNameSpace.length() == 1, \n-\t\t\t\t\"Sixth column (namespace) type incorrect\");\n-\t\t\tswitch (sNameSpace.charAt(0))\n-\t\t\t{\n-\t\t\t\tcase AliasInfo.ALIAS_NAME_SPACE_PROCEDURE_AS_CHAR: \n-\t\t\t\tcase AliasInfo.ALIAS_NAME_SPACE_FUNCTION_AS_CHAR: \n-\t\t\t\tcase AliasInfo.ALIAS_TYPE_SYNONYM_AS_CHAR: \n-\t\t\t\tcase AliasInfo.ALIAS_TYPE_UDT_AS_CHAR: \n-\t\t\t\tcase AliasInfo.ALIAS_TYPE_AGGREGATE_AS_CHAR:\n-\t\t\t\t\tbreak;\n-\n-\t\t\t\tdefault: \n-\t\t\t\t\tSanityManager.THROWASSERT(\"Invalid type value '\"\n-\t\t\t\t\t\t\t+sNameSpace+ \"' for  alias\");\n-\t\t\t}\n-\t\t}\n-\n-\t\tcNameSpace = sNameSpace.charAt(0);\n-\n-\n-\t\t/* 7th column is SYSTEMALIAS (boolean) */\n-\t\tcol = row.getColumn(SYSALIASES_SYSTEMALIAS);\n-\t\tsystemAlias = col.getBoolean();\n-\n-\t\t/* 8th column is ALIASINFO (com.splicemachine.db.catalog.AliasInfo) */\n-\t\tcol = row.getColumn(SYSALIASES_ALIASINFO);\n-\t\taliasInfo = (AliasInfo) col.getObject();\n-\n-\t\t/* 9th column is specific name */\n-\t\tcol = row.getColumn(SYSALIASES_SPECIFIC_NAME);\n-\t\tString specificName = col.getString();\n-\n-\n-\t\t/* now build and return the descriptor */\n-\t\treturn new AliasDescriptor(dd, aliasUUID, aliasName,\n-\t\t\t\t\t\t\t\t\t\tschemaUUID, javaClassName, cAliasType,\n-\t\t\t\t\t\t\t\t\t\tcNameSpace, systemAlias,\n-\t\t\t\t\t\t\t\t\t\taliasInfo, specificName);\n-\t}\n+public class SYSALIASESRowFactory extends CatalogRowFactory {\n+    public static final String TABLENAME_STRING = \"SYSALIASES\";\n+    public static final int SYSALIASES_ALIASINFO = 8;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE5MTY2NA=="}, "originalCommit": {"oid": "f00194cf7f1ad5be1d2c186f3dcdfd60c2a102b9"}, "originalPosition": 334}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NjY1NDMxOnYy", "diffSide": "RIGHT", "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/sql/catalog/upgrade/SpliceCatalogUpgradeScripts.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNDozODozOFrOHWWFGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwODo1NjoxNlrOHcTkTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE5MjQ3Mg==", "bodyText": "change build number to 1976", "url": "https://github.com/splicemachine/spliceengine/pull/4129#discussion_r493192472", "createdAt": "2020-09-23T04:38:38Z", "author": {"login": "jyuanca"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/sql/catalog/upgrade/SpliceCatalogUpgradeScripts.java", "diffHunk": "@@ -75,6 +75,7 @@ else if(v1==v2)\n         scripts.put(new Splice_DD_Version(sdd,3,1,0, 1970), new UpgradeScriptForAddTablesAndViewsInSYSIBMADM(sdd,tc));\n         scripts.put(new Splice_DD_Version(sdd,3,1,0, 1971), new UpgradeScriptToAddCatalogVersion(sdd,tc));\n         scripts.put(new Splice_DD_Version(sdd,3,1,0, 1974), new UpgradeScriptToAddMinRetentionPeriodColumnToSYSTABLES(sdd, tc));\n+        scripts.put(new Splice_DD_Version(sdd,3,1,0, 1975), new UpgradeScriptToSetJavaClassNameColumnInSYSALIASES(sdd, tc));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f00194cf7f1ad5be1d2c186f3dcdfd60c2a102b9"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ0Mjc2NA==", "bodyText": "changed to the upcoming build 1978.", "url": "https://github.com/splicemachine/spliceengine/pull/4129#discussion_r499442764", "createdAt": "2020-10-05T08:56:16Z", "author": {"login": "hatyo"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/sql/catalog/upgrade/SpliceCatalogUpgradeScripts.java", "diffHunk": "@@ -75,6 +75,7 @@ else if(v1==v2)\n         scripts.put(new Splice_DD_Version(sdd,3,1,0, 1970), new UpgradeScriptForAddTablesAndViewsInSYSIBMADM(sdd,tc));\n         scripts.put(new Splice_DD_Version(sdd,3,1,0, 1971), new UpgradeScriptToAddCatalogVersion(sdd,tc));\n         scripts.put(new Splice_DD_Version(sdd,3,1,0, 1974), new UpgradeScriptToAddMinRetentionPeriodColumnToSYSTABLES(sdd, tc));\n+        scripts.put(new Splice_DD_Version(sdd,3,1,0, 1975), new UpgradeScriptToSetJavaClassNameColumnInSYSALIASES(sdd, tc));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE5MjQ3Mg=="}, "originalCommit": {"oid": "f00194cf7f1ad5be1d2c186f3dcdfd60c2a102b9"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNTMwNzc3OnYy", "diffSide": "RIGHT", "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/sql/catalog/SpliceDataDictionary.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNDoyMzozOFrOHdiFpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNToyMzozN1rOHfOipA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcyOTI1NA==", "bodyText": "Shouldn't we use the check \"rowTemplate[I] == null\"? I think we only have problem when this field is not populated at all, and thus null. Do we have a problem if rowTemplate[I] has a NULL value?", "url": "https://github.com/splicemachine/spliceengine/pull/4129#discussion_r500729254", "createdAt": "2020-10-07T04:23:38Z", "author": {"login": "yxia92"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/sql/catalog/SpliceDataDictionary.java", "diffHunk": "@@ -1715,46 +1719,45 @@ public void addMinRetentionPeriodColumn(TransactionController tc) throws Standar\n     }\n \n     public void setJavaClassNameColumnInSysAliases(TransactionController tc) throws StandardException {\n-        TabInfoImpl ti=getNonCoreTI(SYSALIASES_CATALOG_NUM);\n+        TabInfoImpl ti = getNonCoreTI(SYSALIASES_CATALOG_NUM);\n         faultInTabInfo(ti);\n \n-        FormatableBitSet columnToReadSet=new FormatableBitSet(SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT);\n-        FormatableBitSet columnToUpdateSet=new FormatableBitSet(SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT);\n-        for(int i=0;i<SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT;i++){\n-            // we do not want to read the saved serialized plan\n-            if (i+1 == SYSALIASESRowFactory.SYSALIASES_JAVACLASSNAME) {\n-                columnToReadSet.set(i);\n-            }\n+        FormatableBitSet columnToReadSet = new FormatableBitSet(SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT);\n+        FormatableBitSet columnToUpdateSet = new FormatableBitSet(SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT);\n+        for (int i = 0; i < SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT; i++) {\n+            // partial row updates do not work properly (DB-9388), therefore, we read all columns and mark them all for\n+            // update even if this is not necessary for all of them.\n+            columnToReadSet.set(i);\n             columnToUpdateSet.set(i);\n         }\n-        /* Set up a couple of row templates for fetching CHARS */\n+        /* Set up a row template for fetching */\n         DataValueDescriptor[] rowTemplate = new DataValueDescriptor[SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT];\n-        DataValueDescriptor[] replaceRow= new DataValueDescriptor[SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT];\n+        /* Set up another row for replacing the existing row, effectively updating it */\n+        DataValueDescriptor[] replaceRow = new DataValueDescriptor[SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT];\n \n         /* Scan the entire heap */\n-        ScanController sc=\n-                tc.openScan(\n-                        ti.getHeapConglomerate(),\n-                        false,\n-                        TransactionController.OPENMODE_FORUPDATE,\n-                        TransactionController.MODE_TABLE,\n-                        TransactionController.ISOLATION_REPEATABLE_READ,\n-                        columnToReadSet,\n-                        null,\n-                        ScanController.NA,\n-                        null,\n-                        null,\n-                        ScanController.NA);\n-\n-        while(sc.fetchNext(rowTemplate)){\n-            /* If JAVACLASSNAME was set to null, rewrite it to \"NULL\" string literal instead. */\n-            for (int i=0; i<rowTemplate.length; i++) {\n-                if (i+1 == SYSALIASESRowFactory.SYSALIASES_JAVACLASSNAME)\n-                    if(replaceRow[i] == null) {\n-                        replaceRow[i] = new SQLLongvarchar(\"NULL\");\n-                    }\n+        ScanController sc = tc.openScan(\n+                ti.getHeapConglomerate(),\n+                false,\n+                TransactionController.OPENMODE_FORUPDATE,\n+                TransactionController.MODE_TABLE,\n+                TransactionController.ISOLATION_REPEATABLE_READ,\n+                columnToReadSet,\n+                null,\n+                ScanController.NA,\n+                null,\n+                null,\n+                ScanController.NA);\n+\n+        while (sc.fetchNext(rowTemplate)) {\n+            for (int i = 0; i < rowTemplate.length; i++) {\n+                replaceRow[i] = rowTemplate[i].cloneValue(false);\n+                /* If JAVACLASSNAME was set to null, rewrite it to \"NULL\" string literal instead. */\n+                if (i + 1 == SYSALIASESRowFactory.SYSALIASES_JAVACLASSNAME && rowTemplate[i].isNull()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2996a34a34cc992be48aaeaf88c358f9e0cde8ef"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUwMTQ4OQ==", "bodyText": "The problem we\u2019re facing here is that we store null in a non-nullable column. The column type is defined as the following:\nSystemColumnImpl.getColumn(\"JAVACLASSNAME\", java.sql.Types.LONGVARCHAR, false /*isNullable?*/, Integer.MAX_VALUE)\nLater on, we create a DVD and store a null into it:\nrow.setColumn(SYSALIASES_JAVACLASSNAME, dvf.getLongvarcharDataValue(javaClassName)); // javaClassName is null\nI think this is causing the decoder to be confused leading to corrupted decoded data since we send null value in a non-nullable field.\nTo solve this problem, I made sure that we\u2019re writing \"NULL\" literal leaving no chance for the field to be null.\nI think the interesting part is we can provide a much simpler solution by simply making the column nullable! i.e. it is a one-liner change from:\nSystemColumnImpl.getColumn(\"JAVACLASSNAME\", java.sql.Types.LONGVARCHAR, false /*isNullable?*/, Integer.MAX_VALUE)\nto\nSystemColumnImpl.getColumn(\"JAVACLASSNAME\", java.sql.Types.LONGVARCHAR, true /*isNullable?*/, Integer.MAX_VALUE)\nThis makes the decoder happy and everything works as expected (just tested it). Moreover, I don\u2019t think we need an upgrade script for it.\nHowever it means that we will have to change the SYSALIASES schema. Not sure if this is something we want to do, that\u2019s why I lean towards the proposed solution in this PR.", "url": "https://github.com/splicemachine/spliceengine/pull/4129#discussion_r502501489", "createdAt": "2020-10-09T15:16:13Z", "author": {"login": "hatyo"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/sql/catalog/SpliceDataDictionary.java", "diffHunk": "@@ -1715,46 +1719,45 @@ public void addMinRetentionPeriodColumn(TransactionController tc) throws Standar\n     }\n \n     public void setJavaClassNameColumnInSysAliases(TransactionController tc) throws StandardException {\n-        TabInfoImpl ti=getNonCoreTI(SYSALIASES_CATALOG_NUM);\n+        TabInfoImpl ti = getNonCoreTI(SYSALIASES_CATALOG_NUM);\n         faultInTabInfo(ti);\n \n-        FormatableBitSet columnToReadSet=new FormatableBitSet(SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT);\n-        FormatableBitSet columnToUpdateSet=new FormatableBitSet(SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT);\n-        for(int i=0;i<SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT;i++){\n-            // we do not want to read the saved serialized plan\n-            if (i+1 == SYSALIASESRowFactory.SYSALIASES_JAVACLASSNAME) {\n-                columnToReadSet.set(i);\n-            }\n+        FormatableBitSet columnToReadSet = new FormatableBitSet(SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT);\n+        FormatableBitSet columnToUpdateSet = new FormatableBitSet(SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT);\n+        for (int i = 0; i < SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT; i++) {\n+            // partial row updates do not work properly (DB-9388), therefore, we read all columns and mark them all for\n+            // update even if this is not necessary for all of them.\n+            columnToReadSet.set(i);\n             columnToUpdateSet.set(i);\n         }\n-        /* Set up a couple of row templates for fetching CHARS */\n+        /* Set up a row template for fetching */\n         DataValueDescriptor[] rowTemplate = new DataValueDescriptor[SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT];\n-        DataValueDescriptor[] replaceRow= new DataValueDescriptor[SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT];\n+        /* Set up another row for replacing the existing row, effectively updating it */\n+        DataValueDescriptor[] replaceRow = new DataValueDescriptor[SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT];\n \n         /* Scan the entire heap */\n-        ScanController sc=\n-                tc.openScan(\n-                        ti.getHeapConglomerate(),\n-                        false,\n-                        TransactionController.OPENMODE_FORUPDATE,\n-                        TransactionController.MODE_TABLE,\n-                        TransactionController.ISOLATION_REPEATABLE_READ,\n-                        columnToReadSet,\n-                        null,\n-                        ScanController.NA,\n-                        null,\n-                        null,\n-                        ScanController.NA);\n-\n-        while(sc.fetchNext(rowTemplate)){\n-            /* If JAVACLASSNAME was set to null, rewrite it to \"NULL\" string literal instead. */\n-            for (int i=0; i<rowTemplate.length; i++) {\n-                if (i+1 == SYSALIASESRowFactory.SYSALIASES_JAVACLASSNAME)\n-                    if(replaceRow[i] == null) {\n-                        replaceRow[i] = new SQLLongvarchar(\"NULL\");\n-                    }\n+        ScanController sc = tc.openScan(\n+                ti.getHeapConglomerate(),\n+                false,\n+                TransactionController.OPENMODE_FORUPDATE,\n+                TransactionController.MODE_TABLE,\n+                TransactionController.ISOLATION_REPEATABLE_READ,\n+                columnToReadSet,\n+                null,\n+                ScanController.NA,\n+                null,\n+                null,\n+                ScanController.NA);\n+\n+        while (sc.fetchNext(rowTemplate)) {\n+            for (int i = 0; i < rowTemplate.length; i++) {\n+                replaceRow[i] = rowTemplate[i].cloneValue(false);\n+                /* If JAVACLASSNAME was set to null, rewrite it to \"NULL\" string literal instead. */\n+                if (i + 1 == SYSALIASESRowFactory.SYSALIASES_JAVACLASSNAME && rowTemplate[i].isNull()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcyOTI1NA=="}, "originalCommit": {"oid": "2996a34a34cc992be48aaeaf88c358f9e0cde8ef"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUwNjE0OA==", "bodyText": "Thank you @hatyo for the explanation! I'm good with the current approach taken and will approve the PR.", "url": "https://github.com/splicemachine/spliceengine/pull/4129#discussion_r502506148", "createdAt": "2020-10-09T15:23:37Z", "author": {"login": "yxia92"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/sql/catalog/SpliceDataDictionary.java", "diffHunk": "@@ -1715,46 +1719,45 @@ public void addMinRetentionPeriodColumn(TransactionController tc) throws Standar\n     }\n \n     public void setJavaClassNameColumnInSysAliases(TransactionController tc) throws StandardException {\n-        TabInfoImpl ti=getNonCoreTI(SYSALIASES_CATALOG_NUM);\n+        TabInfoImpl ti = getNonCoreTI(SYSALIASES_CATALOG_NUM);\n         faultInTabInfo(ti);\n \n-        FormatableBitSet columnToReadSet=new FormatableBitSet(SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT);\n-        FormatableBitSet columnToUpdateSet=new FormatableBitSet(SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT);\n-        for(int i=0;i<SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT;i++){\n-            // we do not want to read the saved serialized plan\n-            if (i+1 == SYSALIASESRowFactory.SYSALIASES_JAVACLASSNAME) {\n-                columnToReadSet.set(i);\n-            }\n+        FormatableBitSet columnToReadSet = new FormatableBitSet(SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT);\n+        FormatableBitSet columnToUpdateSet = new FormatableBitSet(SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT);\n+        for (int i = 0; i < SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT; i++) {\n+            // partial row updates do not work properly (DB-9388), therefore, we read all columns and mark them all for\n+            // update even if this is not necessary for all of them.\n+            columnToReadSet.set(i);\n             columnToUpdateSet.set(i);\n         }\n-        /* Set up a couple of row templates for fetching CHARS */\n+        /* Set up a row template for fetching */\n         DataValueDescriptor[] rowTemplate = new DataValueDescriptor[SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT];\n-        DataValueDescriptor[] replaceRow= new DataValueDescriptor[SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT];\n+        /* Set up another row for replacing the existing row, effectively updating it */\n+        DataValueDescriptor[] replaceRow = new DataValueDescriptor[SYSALIASESRowFactory.SYSALIASES_COLUMN_COUNT];\n \n         /* Scan the entire heap */\n-        ScanController sc=\n-                tc.openScan(\n-                        ti.getHeapConglomerate(),\n-                        false,\n-                        TransactionController.OPENMODE_FORUPDATE,\n-                        TransactionController.MODE_TABLE,\n-                        TransactionController.ISOLATION_REPEATABLE_READ,\n-                        columnToReadSet,\n-                        null,\n-                        ScanController.NA,\n-                        null,\n-                        null,\n-                        ScanController.NA);\n-\n-        while(sc.fetchNext(rowTemplate)){\n-            /* If JAVACLASSNAME was set to null, rewrite it to \"NULL\" string literal instead. */\n-            for (int i=0; i<rowTemplate.length; i++) {\n-                if (i+1 == SYSALIASESRowFactory.SYSALIASES_JAVACLASSNAME)\n-                    if(replaceRow[i] == null) {\n-                        replaceRow[i] = new SQLLongvarchar(\"NULL\");\n-                    }\n+        ScanController sc = tc.openScan(\n+                ti.getHeapConglomerate(),\n+                false,\n+                TransactionController.OPENMODE_FORUPDATE,\n+                TransactionController.MODE_TABLE,\n+                TransactionController.ISOLATION_REPEATABLE_READ,\n+                columnToReadSet,\n+                null,\n+                ScanController.NA,\n+                null,\n+                null,\n+                ScanController.NA);\n+\n+        while (sc.fetchNext(rowTemplate)) {\n+            for (int i = 0; i < rowTemplate.length; i++) {\n+                replaceRow[i] = rowTemplate[i].cloneValue(false);\n+                /* If JAVACLASSNAME was set to null, rewrite it to \"NULL\" string literal instead. */\n+                if (i + 1 == SYSALIASESRowFactory.SYSALIASES_JAVACLASSNAME && rowTemplate[i].isNull()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcyOTI1NA=="}, "originalCommit": {"oid": "2996a34a34cc992be48aaeaf88c358f9e0cde8ef"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzM2NjA0OnYy", "diffSide": "RIGHT", "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/sql/catalog/upgrade/SpliceCatalogUpgradeScripts.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxODowMTowM1rOHgIQKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwODoyMzozNVrOHgbE_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ1MTY4OA==", "bodyText": "1979", "url": "https://github.com/splicemachine/spliceengine/pull/4129#discussion_r503451688", "createdAt": "2020-10-12T18:01:03Z", "author": {"login": "martinrupp"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/sql/catalog/upgrade/SpliceCatalogUpgradeScripts.java", "diffHunk": "@@ -76,6 +76,7 @@ else if(v1==v2)\n         scripts.put(new Splice_DD_Version(sdd,3,1,0, 1971), new UpgradeScriptToAddCatalogVersion(sdd,tc));\n         scripts.put(new Splice_DD_Version(sdd,3,1,0, 1974), new UpgradeScriptToAddMinRetentionPeriodColumnToSYSTABLES(sdd, tc));\n         scripts.put(new Splice_DD_Version(sdd,3,1,0, 1977), new UpgradeScriptToAddSysKeyColUseViewInSYSIBM(sdd, tc));\n+        scripts.put(new Splice_DD_Version(sdd,3,1,0, 1978), new UpgradeScriptToSetJavaClassNameColumnInSYSALIASES(sdd, tc));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "614c1f3ec9795156114fe459136586eb5020f634"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc2MDEyNA==", "bodyText": "fixed", "url": "https://github.com/splicemachine/spliceengine/pull/4129#discussion_r503760124", "createdAt": "2020-10-13T08:23:35Z", "author": {"login": "martinrupp"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/sql/catalog/upgrade/SpliceCatalogUpgradeScripts.java", "diffHunk": "@@ -76,6 +76,7 @@ else if(v1==v2)\n         scripts.put(new Splice_DD_Version(sdd,3,1,0, 1971), new UpgradeScriptToAddCatalogVersion(sdd,tc));\n         scripts.put(new Splice_DD_Version(sdd,3,1,0, 1974), new UpgradeScriptToAddMinRetentionPeriodColumnToSYSTABLES(sdd, tc));\n         scripts.put(new Splice_DD_Version(sdd,3,1,0, 1977), new UpgradeScriptToAddSysKeyColUseViewInSYSIBM(sdd, tc));\n+        scripts.put(new Splice_DD_Version(sdd,3,1,0, 1978), new UpgradeScriptToSetJavaClassNameColumnInSYSALIASES(sdd, tc));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ1MTY4OA=="}, "originalCommit": {"oid": "614c1f3ec9795156114fe459136586eb5020f634"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2ODgwODQxOnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/catalog/SYSALIASESRowFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMjowMzo1MlrOHidGew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMjowMzo1MlrOHidGew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg5MDQyNw==", "bodyText": "this is a constructor, not a method...?", "url": "https://github.com/splicemachine/spliceengine/pull/4129#discussion_r505890427", "createdAt": "2020-10-15T22:03:52Z", "author": {"login": "martinrupp"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/catalog/SYSALIASESRowFactory.java", "diffHunk": "@@ -51,343 +51,335 @@\n  *\n  * Here are the directions for adding a new system supplied alias.\n  * Misc:\n- *  All system supplied aliases are class aliases at this point.\n- *\tAdditional arrays will need to be added if we supply system\n- *\taliases of other types.\n- *\tThe preloadAliasIDs array is an array of hard coded UUIDs\n- *\tfor the system supplied aliases.\n- *\tThe preloadAliases array is the array of aliases\n- *\tfor the system supplied aliases.  This array is in alphabetical\n- *\torder by package and class in Xena.  Each alias is the uppercase\n- *\tclass name of the alias.\n- *  The preloadJavaClassNames array is the array of full package.class\n- *  names for the system supplied aliases.  This array is in alphabetical\n- *\torder by package and class in Xena.  \n- *\tSYSALIASES_NUM_BOOT_ROWS is the number of boot rows in sys.sysaliases\n- *  in a new database.\n- *\n- *\n+ * All system supplied aliases are class aliases at this point.\n+ * Additional arrays will need to be added if we supply system\n+ * aliases of other types.\n+ * The preloadAliasIDs array is an array of hard coded UUIDs\n+ * for the system supplied aliases.\n+ * The preloadAliases array is the array of aliases\n+ * for the system supplied aliases.  This array is in alphabetical\n+ * order by package and class in Xena.  Each alias is the uppercase\n+ * class name of the alias.\n+ * The preloadJavaClassNames array is the array of full package.class\n+ * names for the system supplied aliases.  This array is in alphabetical\n+ * order by package and class in Xena.\n+ * SYSALIASES_NUM_BOOT_ROWS is the number of boot rows in sys.sysaliases\n+ * in a new database.\n  */\n \n-public class SYSALIASESRowFactory extends CatalogRowFactory\n-{\n-\n-\tprivate static final int\t\tSYSALIASES_COLUMN_COUNT = 9;\n-\tprivate static final int\t\tSYSALIASES_ALIASID = 1;\n-\tprivate static final int\t\tSYSALIASES_ALIAS = 2;\n-\tprivate static final int\t\tSYSALIASES_SCHEMAID = 3;\n-\tprivate static final int\t\tSYSALIASES_JAVACLASSNAME = 4;\n-\tprivate static final int\t\tSYSALIASES_ALIASTYPE = 5;\n-\tprivate static final int\t\tSYSALIASES_NAMESPACE = 6;\n-\tprivate static final int\t\tSYSALIASES_SYSTEMALIAS = 7;\n-\tpublic  static final int\t\tSYSALIASES_ALIASINFO = 8;\n-\tprivate static final int\t\tSYSALIASES_SPECIFIC_NAME = 9;\n-\n- \n-\tprotected static final int\t\tSYSALIASES_INDEX1_ID = 0;\n-\n-\tprotected static final int\t\tSYSALIASES_INDEX2_ID = 1;\n-\n-\tprotected static final int\t\tSYSALIASES_INDEX3_ID = 2;\n-\n-\t// null means all unique.\n-    private\tstatic\tfinal\tboolean[]\tuniqueness = null;\n-\n-\tprivate static int[][] indexColumnPositions =\n-\t{\n-\t\t{SYSALIASES_SCHEMAID, SYSALIASES_ALIAS, SYSALIASES_NAMESPACE},\n-\t\t{SYSALIASES_ALIASID},\n-\t\t{SYSALIASES_SCHEMAID, SYSALIASES_SPECIFIC_NAME},\n-\t};\n-\n-\tprivate\tstatic\tfinal\tString[]\tuuids =\n-\t{\n-\t\t \"c013800d-00d7-ddbd-08ce-000a0a411400\"\t// catalog UUID\n-\t\t,\"c013800d-00d7-ddbd-75d4-000a0a411400\"\t// heap UUID\n-\t\t,\"c013800d-00d7-ddbe-b99d-000a0a411400\"\t// SYSALIASES_INDEX1\n-\t\t,\"c013800d-00d7-ddbe-c4e1-000a0a411400\"\t// SYSALIASES_INDEX2\n-\t\t,\"c013800d-00d7-ddbe-34ae-000a0a411400\"\t// SYSALIASES_INDEX3\n-\t};\n-\n-\t/////////////////////////////////////////////////////////////////////////////\n-\t//\n-\t//\tCONSTRUCTORS\n-\t//\n-\t/////////////////////////////////////////////////////////////////////////////\n-\n-    public SYSALIASESRowFactory(UUIDFactory uuidf, ExecutionFactory ef, DataValueFactory dvf, DataDictionary dd)\n-\t{\n-\t\tsuper(uuidf,ef,dvf,dd);\n-\t\tinitInfo(SYSALIASES_COLUMN_COUNT, \"SYSALIASES\", indexColumnPositions, uniqueness, uuids);\n-\t}\n-\n-\t/////////////////////////////////////////////////////////////////////////////\n-\t//\n-\t//\tMETHODS\n-\t//\n-\t/////////////////////////////////////////////////////////////////////////////\n-\n-  /**\n-\t * Make a SYSALIASES row\n-\t *\n-\t *\n-\t * @return\tRow suitable for inserting into SYSALIASES.\n-\t *\n-\t * @exception   StandardException thrown on failure\n-\t */\n-\tpublic ExecRow makeRow(boolean latestVersion, TupleDescriptor\ttd, TupleDescriptor parent)\n-\t\t\t\t\tthrows StandardException \n-\t{\n-\t\tDataValueDescriptor\t\tcol;\n-\t\tString\t\t\t\t\tschemaID = null;\n-\t\tString\t\t\t\t\tjavaClassName = null;\n-\t\tString\t\t\t\t\tsAliasType = null;\n-\t\tString\t\t\t\t\taliasID = null;\n-\t\tString\t\t\t\t\taliasName = null;\n-\t\tString\t\t\t\t\tspecificName = null;\n-\t\tchar\t\t\t\t\tcAliasType = AliasInfo.ALIAS_TYPE_PROCEDURE_AS_CHAR;\n-\t\tchar\t\t\t\t\tcNameSpace = AliasInfo.ALIAS_NAME_SPACE_PROCEDURE_AS_CHAR;\n-\t\tboolean\t\t\t\t\tsystemAlias = false;\n-\t\tAliasInfo\t\t\t\taliasInfo = null;\n-\n-\t\tif (td != null && (td instanceof AliasDescriptor)) {\n-\t\t\t\n-\t\t\tAliasDescriptor \t\tad = (AliasDescriptor)td;\n-\t\t\taliasID\t= ad.getUUID().toString();\n-\t\t\taliasName = ad.getDescriptorName();\n-\t\t\tschemaID\t= ad.getSchemaUUID().toString();\n-\t\t\tjavaClassName\t= ad.getJavaClassName();\n-\t\t\tcAliasType = ad.getAliasType();\n-\t\t\tcNameSpace = ad.getNameSpace();\n-\t\t\tsystemAlias = ad.getSystemAlias();\n-\t\t\taliasInfo = ad.getAliasInfo();\n-\t\t\tspecificName = ad.getSpecificName();\n-\n-\t\t\tchar[] charArray = new char[1];\n-\t\t\tcharArray[0] = cAliasType;\n-\t\t\tsAliasType = new String(charArray);\n-\n-\t\t\tif (SanityManager.DEBUG)\n-\t\t\t{\n-\t\t\t\tswitch (cAliasType)\n-\t\t\t\t{\n-\t\t\t\t\tcase AliasInfo.ALIAS_TYPE_PROCEDURE_AS_CHAR:\n-\t\t\t\t\tcase AliasInfo.ALIAS_TYPE_FUNCTION_AS_CHAR:\n-\t\t\t\t\tcase AliasInfo.ALIAS_TYPE_SYNONYM_AS_CHAR:\n-\t\t\t\t\tcase AliasInfo.ALIAS_TYPE_UDT_AS_CHAR:\n-\t\t\t\t\tcase AliasInfo.ALIAS_TYPE_AGGREGATE_AS_CHAR:\n-\t\t\t\t\t\tbreak;\n-\n-\t\t\t\t\tdefault:\n-\t\t\t\t\t\tSanityManager.THROWASSERT(\n-\t\t\t\t\t\t\t\"Unexpected value (\" + cAliasType +\n-\t\t\t\t\t\t\t\") for aliasType\");\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\n-\t\t/* Insert info into sysaliases */\n-\n-\t\t/* RESOLVE - It would be nice to require less knowledge about sysaliases\n-\t\t * and have this be more table driven.\n-\t\t */\n-\n-\t\t/* Build the row to insert */\n-\t\tExecRow row = getExecutionFactory().getValueRow(SYSALIASES_COLUMN_COUNT);\n-\n-\t\t/* 1st column is ALIASID (UUID - char(36)) */\n-\t\trow.setColumn(SYSALIASES_ALIASID, new SQLChar(aliasID));\n-\n-\t\t/* 2nd column is ALIAS (varchar(128))) */\n-\t\trow.setColumn(SYSALIASES_ALIAS, new SQLVarchar(aliasName));\n-\t\t//\t\tSystem.out.println(\" added row-- \" + aliasName);\n-\n-\t\t/* 3rd column is SCHEMAID (UUID - char(36)) */\n-\t\trow.setColumn(SYSALIASES_SCHEMAID, new SQLChar(schemaID));\n-\n-\t\t/* 4th column is JAVACLASSNAME (longvarchar) */\n-\t\trow.setColumn(SYSALIASES_JAVACLASSNAME, dvf.getLongvarcharDataValue(javaClassName));\n-\n-\t\t/* 5th column is ALIASTYPE (char(1)) */\n-\t\trow.setColumn(SYSALIASES_ALIASTYPE, new SQLChar(sAliasType));\n-\n-\t\t/* 6th column is NAMESPACE (char(1)) */\n-\t\tString sNameSpace = new String(new char[] { cNameSpace });\n-\n-\t\trow.setColumn\n-\t\t\t(SYSALIASES_NAMESPACE, new SQLChar(sNameSpace));\n-\n-\n-\t\t/* 7th column is SYSTEMALIAS (boolean) */\n-\t\trow.setColumn\n-\t\t\t(SYSALIASES_SYSTEMALIAS, new SQLBoolean(systemAlias));\n-\n-\t\t/* 8th column is ALIASINFO (com.splicemachine.db.catalog.AliasInfo) */\n-\t\trow.setColumn(SYSALIASES_ALIASINFO, \n-\t\t\tnew UserType(aliasInfo));\n-\n-\t\t/* 9th column is specific name */\n-\t\trow.setColumn\n-\t\t\t(SYSALIASES_SPECIFIC_NAME, new SQLVarchar(specificName));\n-\n-\n-\t\treturn row;\n-\t}\n-\n-\t///////////////////////////////////////////////////////////////////////////\n-\t//\n-\t//\tABSTRACT METHODS TO BE IMPLEMENTED BY CHILDREN OF CatalogRowFactory\n-\t//\n-\t///////////////////////////////////////////////////////////////////////////\n-\n-\t/**\n-\t * Make a AliasDescriptor out of a SYSALIASES row\n-\t *\n-\t * @param row a SYSALIASES row\n-\t * @param parentTupleDescriptor\tNull for this kind of descriptor.\n-\t * @param dd dataDictionary\n-\t *\n-\t * @exception   StandardException thrown on failure\n-\t */\n-\tpublic TupleDescriptor buildDescriptor(\n-\t\tExecRow\t\t\t\t\trow,\n-\t\tTupleDescriptor\t\t\tparentTupleDescriptor,\n-\t\tDataDictionary \t\t\tdd )\n-\t\t\t\t\tthrows StandardException\n-\t{\n-\t\tif (SanityManager.DEBUG)\n-\t\t{\n-\t\t\tSanityManager.ASSERT(\n-\t\t\t\trow.nColumns() == SYSALIASES_COLUMN_COUNT, \n-\t\t\t\t\"Wrong number of columns for a SYSALIASES row\");\n-\t\t}\n-\n-\t\tchar\t\t\t\tcAliasType;\n-\t\tchar\t\t\t\tcNameSpace;\n-\t\tDataValueDescriptor\tcol;\n-\t\tString\t\t\t\taliasID;\n-\t\tUUID\t\t\t\taliasUUID;\n-\t\tString\t\t\t\taliasName;\n-\t\tString\t\t\t\tjavaClassName;\n-\t\tString\t\t\t\tsAliasType;\n-\t\tString\t\t\t\tsNameSpace;\n-\t\tString\t\t\t\ttypeStr;\n-\t\tboolean\t\t\t\tsystemAlias = false;\n-\t\tAliasInfo\t\t\taliasInfo = null;\n-\n-\t\t/* 1st column is ALIASID (UUID - char(36)) */\n-\t\tcol = row.getColumn(SYSALIASES_ALIASID);\n-\t\taliasID = col.getString();\n-\t\taliasUUID = getUUIDFactory().recreateUUID(aliasID);\n-\n-\t\t/* 2nd column is ALIAS (varchar(128)) */\n-\t\tcol = row.getColumn(SYSALIASES_ALIAS);\n-\t\taliasName = col.getString();\n-\n-\t\t/* 3rd column is SCHEMAID (UUID - char(36)) */\n-\t\tcol = row.getColumn(SYSALIASES_SCHEMAID);\n-\t\tUUID schemaUUID = col.isNull() ? null : getUUIDFactory().recreateUUID(col.getString());\n-\n-\t\t/* 4th column is JAVACLASSNAME (longvarchar) */\n-\t\tcol = row.getColumn(SYSALIASES_JAVACLASSNAME);\n-\t\tjavaClassName = col.getString();\n-\n-\t\t/* 5th column is ALIASTYPE (char(1)) */\n-\t\tcol = row.getColumn(SYSALIASES_ALIASTYPE);\n-\t\tsAliasType = col.getString();\n-\t\tif (SanityManager.DEBUG)\n-\t\t{\n-\t\t\tSanityManager.ASSERT(sAliasType.length() == 1, \n-\t\t\t\t\"Fifth column (aliastype) type incorrect\");\n-\t\t\tswitch (sAliasType.charAt(0))\n-\t\t\t{\n-\t\t\t\tcase AliasInfo.ALIAS_TYPE_PROCEDURE_AS_CHAR: \n-\t\t\t\tcase AliasInfo.ALIAS_TYPE_FUNCTION_AS_CHAR: \n-\t\t\t\tcase AliasInfo.ALIAS_TYPE_SYNONYM_AS_CHAR: \n-\t\t\t\tcase AliasInfo.ALIAS_TYPE_UDT_AS_CHAR: \n-\t\t\t\tcase AliasInfo.ALIAS_TYPE_AGGREGATE_AS_CHAR:\n-\t\t\t\t\tbreak;\n-\n-\t\t\t\tdefault: \n-\t\t\t\t\tSanityManager.THROWASSERT(\"Invalid type value '\"\n-\t\t\t\t\t\t\t+sAliasType+ \"' for  alias\");\n-\t\t\t}\n-\t\t}\n-\n-\t\tcAliasType = sAliasType.charAt(0);\n-\n-\t\t/* 6th column is NAMESPACE (char(1)) */\n-\t\tcol = row.getColumn(SYSALIASES_NAMESPACE);\n-\t\tsNameSpace = col.getString();\n-\t\tif (SanityManager.DEBUG)\n-\t\t{\n-\t\t\tSanityManager.ASSERT(sNameSpace.length() == 1, \n-\t\t\t\t\"Sixth column (namespace) type incorrect\");\n-\t\t\tswitch (sNameSpace.charAt(0))\n-\t\t\t{\n-\t\t\t\tcase AliasInfo.ALIAS_NAME_SPACE_PROCEDURE_AS_CHAR: \n-\t\t\t\tcase AliasInfo.ALIAS_NAME_SPACE_FUNCTION_AS_CHAR: \n-\t\t\t\tcase AliasInfo.ALIAS_TYPE_SYNONYM_AS_CHAR: \n-\t\t\t\tcase AliasInfo.ALIAS_TYPE_UDT_AS_CHAR: \n-\t\t\t\tcase AliasInfo.ALIAS_TYPE_AGGREGATE_AS_CHAR:\n-\t\t\t\t\tbreak;\n-\n-\t\t\t\tdefault: \n-\t\t\t\t\tSanityManager.THROWASSERT(\"Invalid type value '\"\n-\t\t\t\t\t\t\t+sNameSpace+ \"' for  alias\");\n-\t\t\t}\n-\t\t}\n-\n-\t\tcNameSpace = sNameSpace.charAt(0);\n-\n-\n-\t\t/* 7th column is SYSTEMALIAS (boolean) */\n-\t\tcol = row.getColumn(SYSALIASES_SYSTEMALIAS);\n-\t\tsystemAlias = col.getBoolean();\n-\n-\t\t/* 8th column is ALIASINFO (com.splicemachine.db.catalog.AliasInfo) */\n-\t\tcol = row.getColumn(SYSALIASES_ALIASINFO);\n-\t\taliasInfo = (AliasInfo) col.getObject();\n-\n-\t\t/* 9th column is specific name */\n-\t\tcol = row.getColumn(SYSALIASES_SPECIFIC_NAME);\n-\t\tString specificName = col.getString();\n-\n-\n-\t\t/* now build and return the descriptor */\n-\t\treturn new AliasDescriptor(dd, aliasUUID, aliasName,\n-\t\t\t\t\t\t\t\t\t\tschemaUUID, javaClassName, cAliasType,\n-\t\t\t\t\t\t\t\t\t\tcNameSpace, systemAlias,\n-\t\t\t\t\t\t\t\t\t\taliasInfo, specificName);\n-\t}\n+public class SYSALIASESRowFactory extends CatalogRowFactory {\n+    public static final String TABLENAME_STRING = \"SYSALIASES\";\n+    protected static final int SYSALIASES_INDEX1_ID = 0;\n+    protected static final int SYSALIASES_INDEX2_ID = 1;\n+    protected static final int SYSALIASES_INDEX3_ID = 2;\n+\n+    private static final int SYSALIASES_ALIASID = 1;\n+    private static final int SYSALIASES_ALIAS = 2;\n+    private static final int SYSALIASES_SCHEMAID = 3;\n+    public static final int SYSALIASES_JAVACLASSNAME = 4;\n+    private static final int SYSALIASES_ALIASTYPE = 5;\n+    private static final int SYSALIASES_NAMESPACE = 6;\n+    private static final int SYSALIASES_SYSTEMALIAS = 7;\n+    public static final int SYSALIASES_ALIASINFO = 8;\n+    private static final int SYSALIASES_SPECIFIC_NAME = 9;\n+    public static final int SYSALIASES_COLUMN_COUNT = 9;\n+\n+    // column names\n+    private static final String ALIASID = \"ALIASID\";\n+    private static final String ALIAS = \"ALIAS\";\n+    private static final String SCHEMAID = \"SCHEMAID\";\n+    public static final String JAVACLASSNAME = \"JAVACLASSNAME\";\n+    private static final String ALIASTYPE = \"ALIASTYPE\";\n+    private static final String NAMESPACE = \"NAMESPACE\";\n+    private static final String SYSTEMALIAS = \"SYSTEMALIAS\";\n+    private static final String ALIASINFO = \"ALIASINFO\";\n+    private static final String SPECIFICNAME = \"SPECIFICNAME\";\n+\n+    // null means all unique.\n+    private static final boolean[] uniqueness = null;\n+    private static final String[] uuids =\n+            {\n+                    \"c013800d-00d7-ddbd-08ce-000a0a411400\"    // catalog UUID\n+                    , \"c013800d-00d7-ddbd-75d4-000a0a411400\"    // heap UUID\n+                    , \"c013800d-00d7-ddbe-b99d-000a0a411400\"    // SYSALIASES_INDEX1\n+                    , \"c013800d-00d7-ddbe-c4e1-000a0a411400\"    // SYSALIASES_INDEX2\n+                    , \"c013800d-00d7-ddbe-34ae-000a0a411400\"    // SYSALIASES_INDEX3\n+            };\n+    public static String SYSALIAS_TO_TABLE_VIEW_SQL = \"create view SYSALIASTOTABLEVIEW as \\n\" +\n+            \"SELECT S.SCHEMANAME, A.alias as ALIAS, cast(A.ALIASINFO as varchar(256)) as BASETABLE \\n\" +\n+            \"FROM \\n\" +\n+            \"SYS.SYSALIASES A, SYS.SYSTABLES T, SYSVW.SYSSCHEMASVIEW S \\n\" +\n+            \"WHERE A.ALIASTYPE = 'S' AND \\n\" +\n+            \"S.SCHEMAID = T.SCHEMAID AND \\n\" +\n+            \"A.SCHEMAID = T.SCHEMAID AND \\n\" +\n+            \"A.ALIAS = T.TABLENAME\";\n+\n+    /////////////////////////////////////////////////////////////////////////////\n+    //\n+    //\tCONSTRUCTORS\n+    //\n+    /////////////////////////////////////////////////////////////////////////////\n+    private static int[][] indexColumnPositions =\n+            {\n+                    {SYSALIASES_SCHEMAID, SYSALIASES_ALIAS, SYSALIASES_NAMESPACE},\n+                    {SYSALIASES_ALIASID},\n+                    {SYSALIASES_SCHEMAID, SYSALIASES_SPECIFIC_NAME},\n+            };\n+\n+    /////////////////////////////////////////////////////////////////////////////\n+    //\n+    //\tMETHODS\n+    //\n+    /////////////////////////////////////////////////////////////////////////////\n+\n+    public SYSALIASESRowFactory(UUIDFactory uuidf, ExecutionFactory ef, DataValueFactory dvf, DataDictionary dd) {\n+        super(uuidf, ef, dvf, dd);\n+        initInfo(SYSALIASES_COLUMN_COUNT, TABLENAME_STRING, indexColumnPositions, uniqueness, uuids);\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4c2f5a0e40b6ee73d1847aa0a0949cc8815685b"}, "originalPosition": 397}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2ODgwOTE0OnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/catalog/SYSALIASESRowFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMjowNDoxM1rOHidG8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMjowNDoxM1rOHidG8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg5MDU0Ng==", "bodyText": "not really a constructor, should be with the other variables.", "url": "https://github.com/splicemachine/spliceengine/pull/4129#discussion_r505890546", "createdAt": "2020-10-15T22:04:13Z", "author": {"login": "martinrupp"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/catalog/SYSALIASESRowFactory.java", "diffHunk": "@@ -51,343 +51,335 @@\n  *\n  * Here are the directions for adding a new system supplied alias.\n  * Misc:\n- *  All system supplied aliases are class aliases at this point.\n- *\tAdditional arrays will need to be added if we supply system\n- *\taliases of other types.\n- *\tThe preloadAliasIDs array is an array of hard coded UUIDs\n- *\tfor the system supplied aliases.\n- *\tThe preloadAliases array is the array of aliases\n- *\tfor the system supplied aliases.  This array is in alphabetical\n- *\torder by package and class in Xena.  Each alias is the uppercase\n- *\tclass name of the alias.\n- *  The preloadJavaClassNames array is the array of full package.class\n- *  names for the system supplied aliases.  This array is in alphabetical\n- *\torder by package and class in Xena.  \n- *\tSYSALIASES_NUM_BOOT_ROWS is the number of boot rows in sys.sysaliases\n- *  in a new database.\n- *\n- *\n+ * All system supplied aliases are class aliases at this point.\n+ * Additional arrays will need to be added if we supply system\n+ * aliases of other types.\n+ * The preloadAliasIDs array is an array of hard coded UUIDs\n+ * for the system supplied aliases.\n+ * The preloadAliases array is the array of aliases\n+ * for the system supplied aliases.  This array is in alphabetical\n+ * order by package and class in Xena.  Each alias is the uppercase\n+ * class name of the alias.\n+ * The preloadJavaClassNames array is the array of full package.class\n+ * names for the system supplied aliases.  This array is in alphabetical\n+ * order by package and class in Xena.\n+ * SYSALIASES_NUM_BOOT_ROWS is the number of boot rows in sys.sysaliases\n+ * in a new database.\n  */\n \n-public class SYSALIASESRowFactory extends CatalogRowFactory\n-{\n-\n-\tprivate static final int\t\tSYSALIASES_COLUMN_COUNT = 9;\n-\tprivate static final int\t\tSYSALIASES_ALIASID = 1;\n-\tprivate static final int\t\tSYSALIASES_ALIAS = 2;\n-\tprivate static final int\t\tSYSALIASES_SCHEMAID = 3;\n-\tprivate static final int\t\tSYSALIASES_JAVACLASSNAME = 4;\n-\tprivate static final int\t\tSYSALIASES_ALIASTYPE = 5;\n-\tprivate static final int\t\tSYSALIASES_NAMESPACE = 6;\n-\tprivate static final int\t\tSYSALIASES_SYSTEMALIAS = 7;\n-\tpublic  static final int\t\tSYSALIASES_ALIASINFO = 8;\n-\tprivate static final int\t\tSYSALIASES_SPECIFIC_NAME = 9;\n-\n- \n-\tprotected static final int\t\tSYSALIASES_INDEX1_ID = 0;\n-\n-\tprotected static final int\t\tSYSALIASES_INDEX2_ID = 1;\n-\n-\tprotected static final int\t\tSYSALIASES_INDEX3_ID = 2;\n-\n-\t// null means all unique.\n-    private\tstatic\tfinal\tboolean[]\tuniqueness = null;\n-\n-\tprivate static int[][] indexColumnPositions =\n-\t{\n-\t\t{SYSALIASES_SCHEMAID, SYSALIASES_ALIAS, SYSALIASES_NAMESPACE},\n-\t\t{SYSALIASES_ALIASID},\n-\t\t{SYSALIASES_SCHEMAID, SYSALIASES_SPECIFIC_NAME},\n-\t};\n-\n-\tprivate\tstatic\tfinal\tString[]\tuuids =\n-\t{\n-\t\t \"c013800d-00d7-ddbd-08ce-000a0a411400\"\t// catalog UUID\n-\t\t,\"c013800d-00d7-ddbd-75d4-000a0a411400\"\t// heap UUID\n-\t\t,\"c013800d-00d7-ddbe-b99d-000a0a411400\"\t// SYSALIASES_INDEX1\n-\t\t,\"c013800d-00d7-ddbe-c4e1-000a0a411400\"\t// SYSALIASES_INDEX2\n-\t\t,\"c013800d-00d7-ddbe-34ae-000a0a411400\"\t// SYSALIASES_INDEX3\n-\t};\n-\n-\t/////////////////////////////////////////////////////////////////////////////\n-\t//\n-\t//\tCONSTRUCTORS\n-\t//\n-\t/////////////////////////////////////////////////////////////////////////////\n-\n-    public SYSALIASESRowFactory(UUIDFactory uuidf, ExecutionFactory ef, DataValueFactory dvf, DataDictionary dd)\n-\t{\n-\t\tsuper(uuidf,ef,dvf,dd);\n-\t\tinitInfo(SYSALIASES_COLUMN_COUNT, \"SYSALIASES\", indexColumnPositions, uniqueness, uuids);\n-\t}\n-\n-\t/////////////////////////////////////////////////////////////////////////////\n-\t//\n-\t//\tMETHODS\n-\t//\n-\t/////////////////////////////////////////////////////////////////////////////\n-\n-  /**\n-\t * Make a SYSALIASES row\n-\t *\n-\t *\n-\t * @return\tRow suitable for inserting into SYSALIASES.\n-\t *\n-\t * @exception   StandardException thrown on failure\n-\t */\n-\tpublic ExecRow makeRow(boolean latestVersion, TupleDescriptor\ttd, TupleDescriptor parent)\n-\t\t\t\t\tthrows StandardException \n-\t{\n-\t\tDataValueDescriptor\t\tcol;\n-\t\tString\t\t\t\t\tschemaID = null;\n-\t\tString\t\t\t\t\tjavaClassName = null;\n-\t\tString\t\t\t\t\tsAliasType = null;\n-\t\tString\t\t\t\t\taliasID = null;\n-\t\tString\t\t\t\t\taliasName = null;\n-\t\tString\t\t\t\t\tspecificName = null;\n-\t\tchar\t\t\t\t\tcAliasType = AliasInfo.ALIAS_TYPE_PROCEDURE_AS_CHAR;\n-\t\tchar\t\t\t\t\tcNameSpace = AliasInfo.ALIAS_NAME_SPACE_PROCEDURE_AS_CHAR;\n-\t\tboolean\t\t\t\t\tsystemAlias = false;\n-\t\tAliasInfo\t\t\t\taliasInfo = null;\n-\n-\t\tif (td != null && (td instanceof AliasDescriptor)) {\n-\t\t\t\n-\t\t\tAliasDescriptor \t\tad = (AliasDescriptor)td;\n-\t\t\taliasID\t= ad.getUUID().toString();\n-\t\t\taliasName = ad.getDescriptorName();\n-\t\t\tschemaID\t= ad.getSchemaUUID().toString();\n-\t\t\tjavaClassName\t= ad.getJavaClassName();\n-\t\t\tcAliasType = ad.getAliasType();\n-\t\t\tcNameSpace = ad.getNameSpace();\n-\t\t\tsystemAlias = ad.getSystemAlias();\n-\t\t\taliasInfo = ad.getAliasInfo();\n-\t\t\tspecificName = ad.getSpecificName();\n-\n-\t\t\tchar[] charArray = new char[1];\n-\t\t\tcharArray[0] = cAliasType;\n-\t\t\tsAliasType = new String(charArray);\n-\n-\t\t\tif (SanityManager.DEBUG)\n-\t\t\t{\n-\t\t\t\tswitch (cAliasType)\n-\t\t\t\t{\n-\t\t\t\t\tcase AliasInfo.ALIAS_TYPE_PROCEDURE_AS_CHAR:\n-\t\t\t\t\tcase AliasInfo.ALIAS_TYPE_FUNCTION_AS_CHAR:\n-\t\t\t\t\tcase AliasInfo.ALIAS_TYPE_SYNONYM_AS_CHAR:\n-\t\t\t\t\tcase AliasInfo.ALIAS_TYPE_UDT_AS_CHAR:\n-\t\t\t\t\tcase AliasInfo.ALIAS_TYPE_AGGREGATE_AS_CHAR:\n-\t\t\t\t\t\tbreak;\n-\n-\t\t\t\t\tdefault:\n-\t\t\t\t\t\tSanityManager.THROWASSERT(\n-\t\t\t\t\t\t\t\"Unexpected value (\" + cAliasType +\n-\t\t\t\t\t\t\t\") for aliasType\");\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\n-\t\t/* Insert info into sysaliases */\n-\n-\t\t/* RESOLVE - It would be nice to require less knowledge about sysaliases\n-\t\t * and have this be more table driven.\n-\t\t */\n-\n-\t\t/* Build the row to insert */\n-\t\tExecRow row = getExecutionFactory().getValueRow(SYSALIASES_COLUMN_COUNT);\n-\n-\t\t/* 1st column is ALIASID (UUID - char(36)) */\n-\t\trow.setColumn(SYSALIASES_ALIASID, new SQLChar(aliasID));\n-\n-\t\t/* 2nd column is ALIAS (varchar(128))) */\n-\t\trow.setColumn(SYSALIASES_ALIAS, new SQLVarchar(aliasName));\n-\t\t//\t\tSystem.out.println(\" added row-- \" + aliasName);\n-\n-\t\t/* 3rd column is SCHEMAID (UUID - char(36)) */\n-\t\trow.setColumn(SYSALIASES_SCHEMAID, new SQLChar(schemaID));\n-\n-\t\t/* 4th column is JAVACLASSNAME (longvarchar) */\n-\t\trow.setColumn(SYSALIASES_JAVACLASSNAME, dvf.getLongvarcharDataValue(javaClassName));\n-\n-\t\t/* 5th column is ALIASTYPE (char(1)) */\n-\t\trow.setColumn(SYSALIASES_ALIASTYPE, new SQLChar(sAliasType));\n-\n-\t\t/* 6th column is NAMESPACE (char(1)) */\n-\t\tString sNameSpace = new String(new char[] { cNameSpace });\n-\n-\t\trow.setColumn\n-\t\t\t(SYSALIASES_NAMESPACE, new SQLChar(sNameSpace));\n-\n-\n-\t\t/* 7th column is SYSTEMALIAS (boolean) */\n-\t\trow.setColumn\n-\t\t\t(SYSALIASES_SYSTEMALIAS, new SQLBoolean(systemAlias));\n-\n-\t\t/* 8th column is ALIASINFO (com.splicemachine.db.catalog.AliasInfo) */\n-\t\trow.setColumn(SYSALIASES_ALIASINFO, \n-\t\t\tnew UserType(aliasInfo));\n-\n-\t\t/* 9th column is specific name */\n-\t\trow.setColumn\n-\t\t\t(SYSALIASES_SPECIFIC_NAME, new SQLVarchar(specificName));\n-\n-\n-\t\treturn row;\n-\t}\n-\n-\t///////////////////////////////////////////////////////////////////////////\n-\t//\n-\t//\tABSTRACT METHODS TO BE IMPLEMENTED BY CHILDREN OF CatalogRowFactory\n-\t//\n-\t///////////////////////////////////////////////////////////////////////////\n-\n-\t/**\n-\t * Make a AliasDescriptor out of a SYSALIASES row\n-\t *\n-\t * @param row a SYSALIASES row\n-\t * @param parentTupleDescriptor\tNull for this kind of descriptor.\n-\t * @param dd dataDictionary\n-\t *\n-\t * @exception   StandardException thrown on failure\n-\t */\n-\tpublic TupleDescriptor buildDescriptor(\n-\t\tExecRow\t\t\t\t\trow,\n-\t\tTupleDescriptor\t\t\tparentTupleDescriptor,\n-\t\tDataDictionary \t\t\tdd )\n-\t\t\t\t\tthrows StandardException\n-\t{\n-\t\tif (SanityManager.DEBUG)\n-\t\t{\n-\t\t\tSanityManager.ASSERT(\n-\t\t\t\trow.nColumns() == SYSALIASES_COLUMN_COUNT, \n-\t\t\t\t\"Wrong number of columns for a SYSALIASES row\");\n-\t\t}\n-\n-\t\tchar\t\t\t\tcAliasType;\n-\t\tchar\t\t\t\tcNameSpace;\n-\t\tDataValueDescriptor\tcol;\n-\t\tString\t\t\t\taliasID;\n-\t\tUUID\t\t\t\taliasUUID;\n-\t\tString\t\t\t\taliasName;\n-\t\tString\t\t\t\tjavaClassName;\n-\t\tString\t\t\t\tsAliasType;\n-\t\tString\t\t\t\tsNameSpace;\n-\t\tString\t\t\t\ttypeStr;\n-\t\tboolean\t\t\t\tsystemAlias = false;\n-\t\tAliasInfo\t\t\taliasInfo = null;\n-\n-\t\t/* 1st column is ALIASID (UUID - char(36)) */\n-\t\tcol = row.getColumn(SYSALIASES_ALIASID);\n-\t\taliasID = col.getString();\n-\t\taliasUUID = getUUIDFactory().recreateUUID(aliasID);\n-\n-\t\t/* 2nd column is ALIAS (varchar(128)) */\n-\t\tcol = row.getColumn(SYSALIASES_ALIAS);\n-\t\taliasName = col.getString();\n-\n-\t\t/* 3rd column is SCHEMAID (UUID - char(36)) */\n-\t\tcol = row.getColumn(SYSALIASES_SCHEMAID);\n-\t\tUUID schemaUUID = col.isNull() ? null : getUUIDFactory().recreateUUID(col.getString());\n-\n-\t\t/* 4th column is JAVACLASSNAME (longvarchar) */\n-\t\tcol = row.getColumn(SYSALIASES_JAVACLASSNAME);\n-\t\tjavaClassName = col.getString();\n-\n-\t\t/* 5th column is ALIASTYPE (char(1)) */\n-\t\tcol = row.getColumn(SYSALIASES_ALIASTYPE);\n-\t\tsAliasType = col.getString();\n-\t\tif (SanityManager.DEBUG)\n-\t\t{\n-\t\t\tSanityManager.ASSERT(sAliasType.length() == 1, \n-\t\t\t\t\"Fifth column (aliastype) type incorrect\");\n-\t\t\tswitch (sAliasType.charAt(0))\n-\t\t\t{\n-\t\t\t\tcase AliasInfo.ALIAS_TYPE_PROCEDURE_AS_CHAR: \n-\t\t\t\tcase AliasInfo.ALIAS_TYPE_FUNCTION_AS_CHAR: \n-\t\t\t\tcase AliasInfo.ALIAS_TYPE_SYNONYM_AS_CHAR: \n-\t\t\t\tcase AliasInfo.ALIAS_TYPE_UDT_AS_CHAR: \n-\t\t\t\tcase AliasInfo.ALIAS_TYPE_AGGREGATE_AS_CHAR:\n-\t\t\t\t\tbreak;\n-\n-\t\t\t\tdefault: \n-\t\t\t\t\tSanityManager.THROWASSERT(\"Invalid type value '\"\n-\t\t\t\t\t\t\t+sAliasType+ \"' for  alias\");\n-\t\t\t}\n-\t\t}\n-\n-\t\tcAliasType = sAliasType.charAt(0);\n-\n-\t\t/* 6th column is NAMESPACE (char(1)) */\n-\t\tcol = row.getColumn(SYSALIASES_NAMESPACE);\n-\t\tsNameSpace = col.getString();\n-\t\tif (SanityManager.DEBUG)\n-\t\t{\n-\t\t\tSanityManager.ASSERT(sNameSpace.length() == 1, \n-\t\t\t\t\"Sixth column (namespace) type incorrect\");\n-\t\t\tswitch (sNameSpace.charAt(0))\n-\t\t\t{\n-\t\t\t\tcase AliasInfo.ALIAS_NAME_SPACE_PROCEDURE_AS_CHAR: \n-\t\t\t\tcase AliasInfo.ALIAS_NAME_SPACE_FUNCTION_AS_CHAR: \n-\t\t\t\tcase AliasInfo.ALIAS_TYPE_SYNONYM_AS_CHAR: \n-\t\t\t\tcase AliasInfo.ALIAS_TYPE_UDT_AS_CHAR: \n-\t\t\t\tcase AliasInfo.ALIAS_TYPE_AGGREGATE_AS_CHAR:\n-\t\t\t\t\tbreak;\n-\n-\t\t\t\tdefault: \n-\t\t\t\t\tSanityManager.THROWASSERT(\"Invalid type value '\"\n-\t\t\t\t\t\t\t+sNameSpace+ \"' for  alias\");\n-\t\t\t}\n-\t\t}\n-\n-\t\tcNameSpace = sNameSpace.charAt(0);\n-\n-\n-\t\t/* 7th column is SYSTEMALIAS (boolean) */\n-\t\tcol = row.getColumn(SYSALIASES_SYSTEMALIAS);\n-\t\tsystemAlias = col.getBoolean();\n-\n-\t\t/* 8th column is ALIASINFO (com.splicemachine.db.catalog.AliasInfo) */\n-\t\tcol = row.getColumn(SYSALIASES_ALIASINFO);\n-\t\taliasInfo = (AliasInfo) col.getObject();\n-\n-\t\t/* 9th column is specific name */\n-\t\tcol = row.getColumn(SYSALIASES_SPECIFIC_NAME);\n-\t\tString specificName = col.getString();\n-\n-\n-\t\t/* now build and return the descriptor */\n-\t\treturn new AliasDescriptor(dd, aliasUUID, aliasName,\n-\t\t\t\t\t\t\t\t\t\tschemaUUID, javaClassName, cAliasType,\n-\t\t\t\t\t\t\t\t\t\tcNameSpace, systemAlias,\n-\t\t\t\t\t\t\t\t\t\taliasInfo, specificName);\n-\t}\n+public class SYSALIASESRowFactory extends CatalogRowFactory {\n+    public static final String TABLENAME_STRING = \"SYSALIASES\";\n+    protected static final int SYSALIASES_INDEX1_ID = 0;\n+    protected static final int SYSALIASES_INDEX2_ID = 1;\n+    protected static final int SYSALIASES_INDEX3_ID = 2;\n+\n+    private static final int SYSALIASES_ALIASID = 1;\n+    private static final int SYSALIASES_ALIAS = 2;\n+    private static final int SYSALIASES_SCHEMAID = 3;\n+    public static final int SYSALIASES_JAVACLASSNAME = 4;\n+    private static final int SYSALIASES_ALIASTYPE = 5;\n+    private static final int SYSALIASES_NAMESPACE = 6;\n+    private static final int SYSALIASES_SYSTEMALIAS = 7;\n+    public static final int SYSALIASES_ALIASINFO = 8;\n+    private static final int SYSALIASES_SPECIFIC_NAME = 9;\n+    public static final int SYSALIASES_COLUMN_COUNT = 9;\n+\n+    // column names\n+    private static final String ALIASID = \"ALIASID\";\n+    private static final String ALIAS = \"ALIAS\";\n+    private static final String SCHEMAID = \"SCHEMAID\";\n+    public static final String JAVACLASSNAME = \"JAVACLASSNAME\";\n+    private static final String ALIASTYPE = \"ALIASTYPE\";\n+    private static final String NAMESPACE = \"NAMESPACE\";\n+    private static final String SYSTEMALIAS = \"SYSTEMALIAS\";\n+    private static final String ALIASINFO = \"ALIASINFO\";\n+    private static final String SPECIFICNAME = \"SPECIFICNAME\";\n+\n+    // null means all unique.\n+    private static final boolean[] uniqueness = null;\n+    private static final String[] uuids =\n+            {\n+                    \"c013800d-00d7-ddbd-08ce-000a0a411400\"    // catalog UUID\n+                    , \"c013800d-00d7-ddbd-75d4-000a0a411400\"    // heap UUID\n+                    , \"c013800d-00d7-ddbe-b99d-000a0a411400\"    // SYSALIASES_INDEX1\n+                    , \"c013800d-00d7-ddbe-c4e1-000a0a411400\"    // SYSALIASES_INDEX2\n+                    , \"c013800d-00d7-ddbe-34ae-000a0a411400\"    // SYSALIASES_INDEX3\n+            };\n+    public static String SYSALIAS_TO_TABLE_VIEW_SQL = \"create view SYSALIASTOTABLEVIEW as \\n\" +\n+            \"SELECT S.SCHEMANAME, A.alias as ALIAS, cast(A.ALIASINFO as varchar(256)) as BASETABLE \\n\" +\n+            \"FROM \\n\" +\n+            \"SYS.SYSALIASES A, SYS.SYSTABLES T, SYSVW.SYSSCHEMASVIEW S \\n\" +\n+            \"WHERE A.ALIASTYPE = 'S' AND \\n\" +\n+            \"S.SCHEMAID = T.SCHEMAID AND \\n\" +\n+            \"A.SCHEMAID = T.SCHEMAID AND \\n\" +\n+            \"A.ALIAS = T.TABLENAME\";\n+\n+    /////////////////////////////////////////////////////////////////////////////\n+    //\n+    //\tCONSTRUCTORS\n+    //\n+    /////////////////////////////////////////////////////////////////////////////\n+    private static int[][] indexColumnPositions =\n+            {\n+                    {SYSALIASES_SCHEMAID, SYSALIASES_ALIAS, SYSALIASES_NAMESPACE},\n+                    {SYSALIASES_ALIASID},\n+                    {SYSALIASES_SCHEMAID, SYSALIASES_SPECIFIC_NAME},\n+            };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4c2f5a0e40b6ee73d1847aa0a0949cc8815685b"}, "originalPosition": 385}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2990, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}