{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1MjE2NzM2", "number": 3873, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMzowODoxOVrOERP_NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMTo1NDowN1rOEU9yzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTIzMTg4OnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/JoinNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMzowODoxOVrOG13Rqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwOToyNjozOVrOG2C2vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEzMzM1NQ==", "bodyText": "This line is not needed.", "url": "https://github.com/splicemachine/spliceengine/pull/3873#discussion_r459133355", "createdAt": "2020-07-22T23:08:19Z", "author": {"login": "yxia92"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/JoinNode.java", "diffHunk": "@@ -2005,6 +2005,15 @@ private int getJoinArguments(ActivationClassBuilder acb,\n         // Is the right from SSQ\n         mb.push(rightResultSet.getFromSSQ());\n \n+        if (isCrossJoin()) {\n+            assert rightResultSet instanceof Optimizable;\n+            Optimizable rightOpt = (Optimizable)rightResultSet;\n+            boolean broadcastRightSide = rightOpt.getTrulyTheBestAccessPath().getJoinStrategy().getBroadcastRight();\n+            acb.addItem(broadcastRightSide);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "673b6d93b937410a958579dae5226e9775b5218f"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMyMzA2OQ==", "bodyText": "Done.", "url": "https://github.com/splicemachine/spliceengine/pull/3873#discussion_r459323069", "createdAt": "2020-07-23T09:26:39Z", "author": {"login": "ascend1"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/JoinNode.java", "diffHunk": "@@ -2005,6 +2005,15 @@ private int getJoinArguments(ActivationClassBuilder acb,\n         // Is the right from SSQ\n         mb.push(rightResultSet.getFromSSQ());\n \n+        if (isCrossJoin()) {\n+            assert rightResultSet instanceof Optimizable;\n+            Optimizable rightOpt = (Optimizable)rightResultSet;\n+            boolean broadcastRightSide = rightOpt.getTrulyTheBestAccessPath().getJoinStrategy().getBroadcastRight();\n+            acb.addItem(broadcastRightSide);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEzMzM1NQ=="}, "originalCommit": {"oid": "673b6d93b937410a958579dae5226e9775b5218f"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTMwMjQzOnYy", "diffSide": "RIGHT", "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/sql/compile/CrossJoinStrategy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMzo0MjowNVrOG136zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwOToyOToxM1rOG2C8Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE0Mzg4Nw==", "bodyText": "Since the existing check in CrossJoinOperation does not check the heapsize, to minimize the impact on execution plans, I would leave out this check for now. We can put back in if we have the corresponding cross join hint enhanced.", "url": "https://github.com/splicemachine/spliceengine/pull/3873#discussion_r459143887", "createdAt": "2020-07-22T23:42:05Z", "author": {"login": "yxia92"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/sql/compile/CrossJoinStrategy.java", "diffHunk": "@@ -231,6 +232,13 @@ public void estimateCost(Optimizable innerTable,\n \n         // Only use cross join when it is inner join and run on Spark\n         innerCost.setBase(innerCost.cloneMe());\n+        double estimatedMemoryMB = innerCost.getEstimatedHeapSize()/1024d/1024d;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "673b6d93b937410a958579dae5226e9775b5218f"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMyNDQxOA==", "bodyText": "Done, I removed the estimatedMemoryMB < regionThreshold check in this change.", "url": "https://github.com/splicemachine/spliceengine/pull/3873#discussion_r459324418", "createdAt": "2020-07-23T09:29:13Z", "author": {"login": "ascend1"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/sql/compile/CrossJoinStrategy.java", "diffHunk": "@@ -231,6 +232,13 @@ public void estimateCost(Optimizable innerTable,\n \n         // Only use cross join when it is inner join and run on Spark\n         innerCost.setBase(innerCost.cloneMe());\n+        double estimatedMemoryMB = innerCost.getEstimatedHeapSize()/1024d/1024d;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE0Mzg4Nw=="}, "originalCommit": {"oid": "673b6d93b937410a958579dae5226e9775b5218f"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTM2NDQ3OnYy", "diffSide": "RIGHT", "path": "splice_machine/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/SparkExplainIT.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMDoxNToyN1rOG14e8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMTo0NjozM1rOG2G84w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE1MzEzOQ==", "bodyText": "Could you also add a check for static explain whether the table BIG is the picked as the left table of the cross join? Thanks!", "url": "https://github.com/splicemachine/spliceengine/pull/3873#discussion_r459153139", "createdAt": "2020-07-23T00:15:27Z", "author": {"login": "yxia92"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/SparkExplainIT.java", "diffHunk": "@@ -805,11 +805,26 @@ public void testCrossJoinBroadcastRight() throws Exception {\n     }\n \n     @Test\n-    public void testCrossJoinBroadcastLeft() throws Exception {\n+    public void testCrossJoinNeverBroadcastLeft() throws Exception {\n+        /* DB-9579\n+         * In case of a cross join, we only check if the right side can be broadcast and never broadcast the left\n+         * side. Reason is that when the plan reaches Spark and it doesn't have a sort node, it might be the case\n+         * that there are sort keys but the sort node is optimized away because the left side row order satisfies\n+         * the sort keys. If we broadcast the left side, resulting row order might be different.\n+         */\n         if (useSpark.equalsIgnoreCase(\"false\")) return; // cross join only has Spark implementation\n         String sqlText = \"sparkexplain select count(*) from --splice-properties joinOrder=fixed\\n\" +\n                 \"        big --splice-properties useSpark=true, joinStrategy=cross\\n\" +\n                 \"        inner join t1 on 1=1\";\n-        testQueryContains(sqlText, \"BroadcastNestedLoopJoin BuildLeft, Cross\", methodWatcher, true);\n+        testQueryContains(sqlText, \"CartesianProduct\", methodWatcher, true);\n+    }\n+\n+    @Test\n+    public void testCrossJoinBroadcastRightNoHint() throws Exception {\n+        if (useSpark.equalsIgnoreCase(\"false\")) return; // cross join only has Spark implementation\n+        String sqlText = \"sparkexplain select count(*) from\\n\" +\n+                \"        t1 --splice-properties useSpark=true\\n\" +\n+                \"        inner join big on 1=1\";\n+        testQueryContains(sqlText, \"BroadcastNestedLoopJoin BuildRight, Cross\", methodWatcher, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "673b6d93b937410a958579dae5226e9775b5218f"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE2NTE5NQ==", "bodyText": "Also, please add an IT with data to test the preservation of sortorder for eligible cross join cases. Thanks!", "url": "https://github.com/splicemachine/spliceengine/pull/3873#discussion_r459165195", "createdAt": "2020-07-23T01:04:03Z", "author": {"login": "yxia92"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/SparkExplainIT.java", "diffHunk": "@@ -805,11 +805,26 @@ public void testCrossJoinBroadcastRight() throws Exception {\n     }\n \n     @Test\n-    public void testCrossJoinBroadcastLeft() throws Exception {\n+    public void testCrossJoinNeverBroadcastLeft() throws Exception {\n+        /* DB-9579\n+         * In case of a cross join, we only check if the right side can be broadcast and never broadcast the left\n+         * side. Reason is that when the plan reaches Spark and it doesn't have a sort node, it might be the case\n+         * that there are sort keys but the sort node is optimized away because the left side row order satisfies\n+         * the sort keys. If we broadcast the left side, resulting row order might be different.\n+         */\n         if (useSpark.equalsIgnoreCase(\"false\")) return; // cross join only has Spark implementation\n         String sqlText = \"sparkexplain select count(*) from --splice-properties joinOrder=fixed\\n\" +\n                 \"        big --splice-properties useSpark=true, joinStrategy=cross\\n\" +\n                 \"        inner join t1 on 1=1\";\n-        testQueryContains(sqlText, \"BroadcastNestedLoopJoin BuildLeft, Cross\", methodWatcher, true);\n+        testQueryContains(sqlText, \"CartesianProduct\", methodWatcher, true);\n+    }\n+\n+    @Test\n+    public void testCrossJoinBroadcastRightNoHint() throws Exception {\n+        if (useSpark.equalsIgnoreCase(\"false\")) return; // cross join only has Spark implementation\n+        String sqlText = \"sparkexplain select count(*) from\\n\" +\n+                \"        t1 --splice-properties useSpark=true\\n\" +\n+                \"        inner join big on 1=1\";\n+        testQueryContains(sqlText, \"BroadcastNestedLoopJoin BuildRight, Cross\", methodWatcher, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE1MzEzOQ=="}, "originalCommit": {"oid": "673b6d93b937410a958579dae5226e9775b5218f"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM0MDkyOA==", "bodyText": "Could you also add a check for static explain whether the table BIG is the picked as the left table of the cross join? Thanks!\n\nDone.", "url": "https://github.com/splicemachine/spliceengine/pull/3873#discussion_r459340928", "createdAt": "2020-07-23T10:00:37Z", "author": {"login": "ascend1"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/SparkExplainIT.java", "diffHunk": "@@ -805,11 +805,26 @@ public void testCrossJoinBroadcastRight() throws Exception {\n     }\n \n     @Test\n-    public void testCrossJoinBroadcastLeft() throws Exception {\n+    public void testCrossJoinNeverBroadcastLeft() throws Exception {\n+        /* DB-9579\n+         * In case of a cross join, we only check if the right side can be broadcast and never broadcast the left\n+         * side. Reason is that when the plan reaches Spark and it doesn't have a sort node, it might be the case\n+         * that there are sort keys but the sort node is optimized away because the left side row order satisfies\n+         * the sort keys. If we broadcast the left side, resulting row order might be different.\n+         */\n         if (useSpark.equalsIgnoreCase(\"false\")) return; // cross join only has Spark implementation\n         String sqlText = \"sparkexplain select count(*) from --splice-properties joinOrder=fixed\\n\" +\n                 \"        big --splice-properties useSpark=true, joinStrategy=cross\\n\" +\n                 \"        inner join t1 on 1=1\";\n-        testQueryContains(sqlText, \"BroadcastNestedLoopJoin BuildLeft, Cross\", methodWatcher, true);\n+        testQueryContains(sqlText, \"CartesianProduct\", methodWatcher, true);\n+    }\n+\n+    @Test\n+    public void testCrossJoinBroadcastRightNoHint() throws Exception {\n+        if (useSpark.equalsIgnoreCase(\"false\")) return; // cross join only has Spark implementation\n+        String sqlText = \"sparkexplain select count(*) from\\n\" +\n+                \"        t1 --splice-properties useSpark=true\\n\" +\n+                \"        inner join big on 1=1\";\n+        testQueryContains(sqlText, \"BroadcastNestedLoopJoin BuildRight, Cross\", methodWatcher, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE1MzEzOQ=="}, "originalCommit": {"oid": "673b6d93b937410a958579dae5226e9775b5218f"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM5MDE3OQ==", "bodyText": "Also, please add an IT with data to test the preservation of sortorder for eligible cross join cases. Thanks!\n\nDone. I add this one to CrossJoinIT.", "url": "https://github.com/splicemachine/spliceengine/pull/3873#discussion_r459390179", "createdAt": "2020-07-23T11:46:33Z", "author": {"login": "ascend1"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/SparkExplainIT.java", "diffHunk": "@@ -805,11 +805,26 @@ public void testCrossJoinBroadcastRight() throws Exception {\n     }\n \n     @Test\n-    public void testCrossJoinBroadcastLeft() throws Exception {\n+    public void testCrossJoinNeverBroadcastLeft() throws Exception {\n+        /* DB-9579\n+         * In case of a cross join, we only check if the right side can be broadcast and never broadcast the left\n+         * side. Reason is that when the plan reaches Spark and it doesn't have a sort node, it might be the case\n+         * that there are sort keys but the sort node is optimized away because the left side row order satisfies\n+         * the sort keys. If we broadcast the left side, resulting row order might be different.\n+         */\n         if (useSpark.equalsIgnoreCase(\"false\")) return; // cross join only has Spark implementation\n         String sqlText = \"sparkexplain select count(*) from --splice-properties joinOrder=fixed\\n\" +\n                 \"        big --splice-properties useSpark=true, joinStrategy=cross\\n\" +\n                 \"        inner join t1 on 1=1\";\n-        testQueryContains(sqlText, \"BroadcastNestedLoopJoin BuildLeft, Cross\", methodWatcher, true);\n+        testQueryContains(sqlText, \"CartesianProduct\", methodWatcher, true);\n+    }\n+\n+    @Test\n+    public void testCrossJoinBroadcastRightNoHint() throws Exception {\n+        if (useSpark.equalsIgnoreCase(\"false\")) return; // cross join only has Spark implementation\n+        String sqlText = \"sparkexplain select count(*) from\\n\" +\n+                \"        t1 --splice-properties useSpark=true\\n\" +\n+                \"        inner join big on 1=1\";\n+        testQueryContains(sqlText, \"BroadcastNestedLoopJoin BuildRight, Cross\", methodWatcher, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE1MzEzOQ=="}, "originalCommit": {"oid": "673b6d93b937410a958579dae5226e9775b5218f"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODU0OTE0OnYy", "diffSide": "RIGHT", "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/sql/compile/CrossJoinStrategy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODoyNzowMVrOG2WhFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMTo0Mzo0N1rOG2cnVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0NTIwNg==", "bodyText": "I just realize that we share the same CrossJoinStrategy for all cross joins in the same query, so set the braodcastInner flag in one cross join will be applied to all cross joins in the query, which is not right.", "url": "https://github.com/splicemachine/spliceengine/pull/3873#discussion_r459645206", "createdAt": "2020-07-23T18:27:01Z", "author": {"login": "yxia92"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/sql/compile/CrossJoinStrategy.java", "diffHunk": "@@ -231,6 +232,11 @@ public void estimateCost(Optimizable innerTable,\n \n         // Only use cross join when it is inner join and run on Spark\n         innerCost.setBase(innerCost.cloneMe());\n+        double estimatedRowCount = innerCost.getEstimatedRowCount();\n+        SConfiguration configuration=EngineDriver.driver().getConfiguration();\n+        long rowCountThreshold = configuration.getBroadcastRegionRowThreshold();\n+        broadcastInner = estimatedRowCount < rowCountThreshold;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ce935b66293736b19d74c4ccf3415f7e64d016e"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0NTEwOQ==", "bodyText": "As we discussed on the call, I removed the field from CrossJoinStrategy class and went around other engineering restrictions. Tests are also improved according to previous comments.", "url": "https://github.com/splicemachine/spliceengine/pull/3873#discussion_r459745109", "createdAt": "2020-07-23T21:43:47Z", "author": {"login": "ascend1"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/sql/compile/CrossJoinStrategy.java", "diffHunk": "@@ -231,6 +232,11 @@ public void estimateCost(Optimizable innerTable,\n \n         // Only use cross join when it is inner join and run on Spark\n         innerCost.setBase(innerCost.cloneMe());\n+        double estimatedRowCount = innerCost.getEstimatedRowCount();\n+        SConfiguration configuration=EngineDriver.driver().getConfiguration();\n+        long rowCountThreshold = configuration.getBroadcastRegionRowThreshold();\n+        broadcastInner = estimatedRowCount < rowCountThreshold;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0NTIwNg=="}, "originalCommit": {"oid": "2ce935b66293736b19d74c4ccf3415f7e64d016e"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTk3Mjk3OnYy", "diffSide": "RIGHT", "path": "splice_machine/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/joins/CrossJoinIT.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNTozNzo0OFrOG2jpFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNjoxNjozNlrOG3prlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2MDI0Ng==", "bodyText": "@ascend1 Can you check further why we pick cross join over broadcast join? With equality join condition, we should pick pick broadcast join instead of cross join. Thanks!", "url": "https://github.com/splicemachine/spliceengine/pull/3873#discussion_r459860246", "createdAt": "2020-07-24T05:37:48Z", "author": {"login": "yxia92"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/joins/CrossJoinIT.java", "diffHunk": "@@ -328,7 +328,8 @@ public void testPickBroadcastEquality() throws Exception {\n                 format(\"explain select count(*) from %s as a inner join %s as b \" +\n                         \"--SPLICE-PROPERTIES useSpark=%s \\n\" +\n                         \" on a.a1 = b.a1\" , s1, s1, useSpark);\n-        rowContainsQuery(6, sqlText,\"Broadcast\", classWatcher);\n+        String expected = useSpark ? \"CrossJoin\" : \"Broadcast\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b5ec0996be764ec88cafa8d97c6411b36008ab5"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkzMjg0OQ==", "bodyText": "Yes, I debugged into this test and its about the change on outerCost.RemoteCost. Not adding it to the local cost making the total cost of cross join lower.\nI read some articles about Spark broadcast join and cross join today and learned that the broadcast join is actually a hash join. That makes things clear. I was thinking if Spark can choose to broadcast left or right side of a cross join, what's the difference with a broadcast join then...\nI revert the change in crossJoinStrategyLocalCost and this test. Now the optimizer should make the same choice as before.", "url": "https://github.com/splicemachine/spliceengine/pull/3873#discussion_r459932849", "createdAt": "2020-07-24T08:58:44Z", "author": {"login": "ascend1"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/joins/CrossJoinIT.java", "diffHunk": "@@ -328,7 +328,8 @@ public void testPickBroadcastEquality() throws Exception {\n                 format(\"explain select count(*) from %s as a inner join %s as b \" +\n                         \"--SPLICE-PROPERTIES useSpark=%s \\n\" +\n                         \" on a.a1 = b.a1\" , s1, s1, useSpark);\n-        rowContainsQuery(6, sqlText,\"Broadcast\", classWatcher);\n+        String expected = useSpark ? \"CrossJoin\" : \"Broadcast\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2MDI0Ng=="}, "originalCommit": {"oid": "4b5ec0996be764ec88cafa8d97c6411b36008ab5"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE5MDk2MA==", "bodyText": "Also, it seems after this change: https://github.com/splicemachine/spliceengine/pull/3826/files, UpgradeScriptToInvalidateStoredStatement becomes a default upgrade action.", "url": "https://github.com/splicemachine/spliceengine/pull/3873#discussion_r460190960", "createdAt": "2020-07-24T17:28:58Z", "author": {"login": "ascend1"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/joins/CrossJoinIT.java", "diffHunk": "@@ -328,7 +328,8 @@ public void testPickBroadcastEquality() throws Exception {\n                 format(\"explain select count(*) from %s as a inner join %s as b \" +\n                         \"--SPLICE-PROPERTIES useSpark=%s \\n\" +\n                         \" on a.a1 = b.a1\" , s1, s1, useSpark);\n-        rowContainsQuery(6, sqlText,\"Broadcast\", classWatcher);\n+        String expected = useSpark ? \"CrossJoin\" : \"Broadcast\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2MDI0Ng=="}, "originalCommit": {"oid": "4b5ec0996be764ec88cafa8d97c6411b36008ab5"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAwNzc2Ng==", "bodyText": "You are right, I forgot about the change of DB-9821 which removes the need to add the upgrade script. Thanks!", "url": "https://github.com/splicemachine/spliceengine/pull/3873#discussion_r461007766", "createdAt": "2020-07-27T16:16:36Z", "author": {"login": "yxia92"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/joins/CrossJoinIT.java", "diffHunk": "@@ -328,7 +328,8 @@ public void testPickBroadcastEquality() throws Exception {\n                 format(\"explain select count(*) from %s as a inner join %s as b \" +\n                         \"--SPLICE-PROPERTIES useSpark=%s \\n\" +\n                         \" on a.a1 = b.a1\" , s1, s1, useSpark);\n-        rowContainsQuery(6, sqlText,\"Broadcast\", classWatcher);\n+        String expected = useSpark ? \"CrossJoin\" : \"Broadcast\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2MDI0Ng=="}, "originalCommit": {"oid": "4b5ec0996be764ec88cafa8d97c6411b36008ab5"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNDE5Mjk1OnYy", "diffSide": "RIGHT", "path": "splice_machine/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/joins/CrossJoinIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMTo1Mzo1MFrOG7dCrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMjoxMDo0MlrOG7dkRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk5NDk4OA==", "bodyText": "use try-with-resources here to auto close the resultset", "url": "https://github.com/splicemachine/spliceengine/pull/3873#discussion_r464994988", "createdAt": "2020-08-04T11:53:50Z", "author": {"login": "arnaud-splice"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/joins/CrossJoinIT.java", "diffHunk": "@@ -713,5 +713,42 @@ public void testCharTimestampColumnsCrossJoin() throws Exception {\n         rs.close();\n     }\n \n+    @Test\n+    public void testCrossJoinPreserveSortOrderNoJoinStrategyHint() throws Exception {\n+        String sqlText = format(\"select tt2.a from \\n\" +\n+                \"tab2 tt2 --splice-properties useSpark=%s\\n\" +\n+                \"inner join %s ttb\\n\" +\n+                \"on ttb.c2 < 5 and tt2.a < 4 order by tt2.a\", useSpark, bigTable);\n+\n+        if (useSpark) {\n+            ResultSet rs = classWatcher.executeQuery(\"explain \" + sqlText);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a014d560b86c1c329e24ce291a1ae6b1b65f636f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAwMzU4OA==", "bodyText": "Done.", "url": "https://github.com/splicemachine/spliceengine/pull/3873#discussion_r465003588", "createdAt": "2020-08-04T12:10:42Z", "author": {"login": "ascend1"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/joins/CrossJoinIT.java", "diffHunk": "@@ -713,5 +713,42 @@ public void testCharTimestampColumnsCrossJoin() throws Exception {\n         rs.close();\n     }\n \n+    @Test\n+    public void testCrossJoinPreserveSortOrderNoJoinStrategyHint() throws Exception {\n+        String sqlText = format(\"select tt2.a from \\n\" +\n+                \"tab2 tt2 --splice-properties useSpark=%s\\n\" +\n+                \"inner join %s ttb\\n\" +\n+                \"on ttb.c2 < 5 and tt2.a < 4 order by tt2.a\", useSpark, bigTable);\n+\n+        if (useSpark) {\n+            ResultSet rs = classWatcher.executeQuery(\"explain \" + sqlText);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk5NDk4OA=="}, "originalCommit": {"oid": "a014d560b86c1c329e24ce291a1ae6b1b65f636f"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNDE5NDA3OnYy", "diffSide": "RIGHT", "path": "splice_machine/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/joins/CrossJoinIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMTo1NDowN1rOG7dDVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMjoxMDo0OFrOG7dkgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk5NTE1Ng==", "bodyText": "same", "url": "https://github.com/splicemachine/spliceengine/pull/3873#discussion_r464995156", "createdAt": "2020-08-04T11:54:07Z", "author": {"login": "arnaud-splice"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/joins/CrossJoinIT.java", "diffHunk": "@@ -713,5 +713,42 @@ public void testCharTimestampColumnsCrossJoin() throws Exception {\n         rs.close();\n     }\n \n+    @Test\n+    public void testCrossJoinPreserveSortOrderNoJoinStrategyHint() throws Exception {\n+        String sqlText = format(\"select tt2.a from \\n\" +\n+                \"tab2 tt2 --splice-properties useSpark=%s\\n\" +\n+                \"inner join %s ttb\\n\" +\n+                \"on ttb.c2 < 5 and tt2.a < 4 order by tt2.a\", useSpark, bigTable);\n+\n+        if (useSpark) {\n+            ResultSet rs = classWatcher.executeQuery(\"explain \" + sqlText);\n+            String matchString = TestUtils.FormattedResult.ResultFactory.toStringUnsorted(rs);\n+            assertTrue(\"Cross join is not selected for OLAP\", matchString.contains(\"CrossJoin\"));\n+        }\n \n+        /* DB-9579\n+         * The plan of the query above may or may not have an OrderBy. It depends on optimizer\n+         * implementation and that could change over time. However, correctness should always\n+         * be guaranteed and result must be the same for both OLTP and OLAP.\n+         */\n+        String expected = \"A |\\n\" +\n+                \"----\\n\" +\n+                \" 1 |\\n\" +\n+                \" 1 |\\n\" +\n+                \" 1 |\\n\" +\n+                \" 1 |\\n\" +\n+                \" 2 |\\n\" +\n+                \" 2 |\\n\" +\n+                \" 2 |\\n\" +\n+                \" 2 |\\n\" +\n+                \" 3 |\\n\" +\n+                \" 3 |\\n\" +\n+                \" 3 |\\n\" +\n+                \" 3 |\";\n+\n+        ResultSet rs = classWatcher.executeQuery(sqlText);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a014d560b86c1c329e24ce291a1ae6b1b65f636f"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAwMzY0OQ==", "bodyText": "Done.", "url": "https://github.com/splicemachine/spliceengine/pull/3873#discussion_r465003649", "createdAt": "2020-08-04T12:10:48Z", "author": {"login": "ascend1"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/joins/CrossJoinIT.java", "diffHunk": "@@ -713,5 +713,42 @@ public void testCharTimestampColumnsCrossJoin() throws Exception {\n         rs.close();\n     }\n \n+    @Test\n+    public void testCrossJoinPreserveSortOrderNoJoinStrategyHint() throws Exception {\n+        String sqlText = format(\"select tt2.a from \\n\" +\n+                \"tab2 tt2 --splice-properties useSpark=%s\\n\" +\n+                \"inner join %s ttb\\n\" +\n+                \"on ttb.c2 < 5 and tt2.a < 4 order by tt2.a\", useSpark, bigTable);\n+\n+        if (useSpark) {\n+            ResultSet rs = classWatcher.executeQuery(\"explain \" + sqlText);\n+            String matchString = TestUtils.FormattedResult.ResultFactory.toStringUnsorted(rs);\n+            assertTrue(\"Cross join is not selected for OLAP\", matchString.contains(\"CrossJoin\"));\n+        }\n \n+        /* DB-9579\n+         * The plan of the query above may or may not have an OrderBy. It depends on optimizer\n+         * implementation and that could change over time. However, correctness should always\n+         * be guaranteed and result must be the same for both OLTP and OLAP.\n+         */\n+        String expected = \"A |\\n\" +\n+                \"----\\n\" +\n+                \" 1 |\\n\" +\n+                \" 1 |\\n\" +\n+                \" 1 |\\n\" +\n+                \" 1 |\\n\" +\n+                \" 2 |\\n\" +\n+                \" 2 |\\n\" +\n+                \" 2 |\\n\" +\n+                \" 2 |\\n\" +\n+                \" 3 |\\n\" +\n+                \" 3 |\\n\" +\n+                \" 3 |\\n\" +\n+                \" 3 |\";\n+\n+        ResultSet rs = classWatcher.executeQuery(sqlText);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk5NTE1Ng=="}, "originalCommit": {"oid": "a014d560b86c1c329e24ce291a1ae6b1b65f636f"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3123, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}