{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxMzg0MjI1", "number": 4880, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMDozNzoyM1rOFGo7gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxODoyNTozMlrOFIQYBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNTA2MzY4OnYy", "diffSide": "RIGHT", "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/function/ScrollInsensitiveFunction.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMDozNzoyM1rOIHvOWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxODo0NzowNVrOIIuiag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk4NDY2Nw==", "bodyText": "@dgomezferro this prevents serializing rowId. Should we added to other functions that could be pushed down to Spark executors and used by the ResultStreamer?", "url": "https://github.com/splicemachine/spliceengine/pull/4880#discussion_r544984667", "createdAt": "2020-12-17T10:37:23Z", "author": {"login": "hatyo"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/function/ScrollInsensitiveFunction.java", "diffHunk": "@@ -41,6 +41,9 @@ public ExecRow call(ExecRow execRow) throws Exception {\n             this.operationContext.recordRead();\n             op.setCurrentRow(execRow);\n             this.operationContext.recordProduced();\n+            if(!op.isForUpdate()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c391ebe00788b3c9c0a8654ee14bda281c36521"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTAwNjI5Mw==", "bodyText": "I think this is the only case, at least for now", "url": "https://github.com/splicemachine/spliceengine/pull/4880#discussion_r545006293", "createdAt": "2020-12-17T11:10:34Z", "author": {"login": "dgomezferro"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/function/ScrollInsensitiveFunction.java", "diffHunk": "@@ -41,6 +41,9 @@ public ExecRow call(ExecRow execRow) throws Exception {\n             this.operationContext.recordRead();\n             op.setCurrentRow(execRow);\n             this.operationContext.recordProduced();\n+            if(!op.isForUpdate()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk4NDY2Nw=="}, "originalCommit": {"oid": "3c391ebe00788b3c9c0a8654ee14bda281c36521"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAyMTk5NA==", "bodyText": "ok", "url": "https://github.com/splicemachine/spliceengine/pull/4880#discussion_r546021994", "createdAt": "2020-12-18T18:47:05Z", "author": {"login": "hatyo"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/function/ScrollInsensitiveFunction.java", "diffHunk": "@@ -41,6 +41,9 @@ public ExecRow call(ExecRow execRow) throws Exception {\n             this.operationContext.recordRead();\n             op.setCurrentRow(execRow);\n             this.operationContext.recordProduced();\n+            if(!op.isForUpdate()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk4NDY2Nw=="}, "originalCommit": {"oid": "3c391ebe00788b3c9c0a8654ee14bda281c36521"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNTE5Mzc5OnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/DeleteNode.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMTowNzowNVrOIHwaCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwOTozMDoyOVrOIKedPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTAwNDA0MQ==", "bodyText": "Why is this change needed? @ascend1 @msirek can you comment on whether this could cause issues?", "url": "https://github.com/splicemachine/spliceengine/pull/4880#discussion_r545004041", "createdAt": "2020-12-17T11:07:05Z", "author": {"login": "dgomezferro"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/DeleteNode.java", "diffHunk": "@@ -325,19 +325,11 @@ else if (cursorTargetTableName != null)\n                     rowIdColumn.setName(COLUMNNAME);\n                 }\n \n-                ColumnReference columnReference = (ColumnReference) getNodeFactory().getNode(\n-                        C_NodeTypes.COLUMN_REFERENCE,\n-                        rowIdColumn.getName(),\n-                        null,\n-                        getContextManager());\n-                columnReference.setSource(rowIdColumn);\n-                columnReference.setNestingLevel(targetTable.getLevel());\n-                columnReference.setSourceLevel(targetTable.getLevel());\n                 rowLocationColumn =\n                         (ResultColumn) getNodeFactory().getNode(\n                                 C_NodeTypes.RESULT_COLUMN,\n                                 COLUMNNAME,\n-                                columnReference,\n+                                rowIdColumn,\n                                 getContextManager());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c391ebe00788b3c9c0a8654ee14bda281c36521"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAyMTYyMw==", "bodyText": "If we don't expose the CURRENT_ROW_LOCATION_NODE in the RCL for update/delete nodes we will not generate the corresponding getRowLocation in the projection expression, which means we will not be able to retrieve the rowId from the projection node.\nFor more information please have a look at com.splicemachine.db.impl.sql.compile.ResultColumnList#generateEvaluatedRow", "url": "https://github.com/splicemachine/spliceengine/pull/4880#discussion_r546021623", "createdAt": "2020-12-18T18:46:22Z", "author": {"login": "hatyo"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/DeleteNode.java", "diffHunk": "@@ -325,19 +325,11 @@ else if (cursorTargetTableName != null)\n                     rowIdColumn.setName(COLUMNNAME);\n                 }\n \n-                ColumnReference columnReference = (ColumnReference) getNodeFactory().getNode(\n-                        C_NodeTypes.COLUMN_REFERENCE,\n-                        rowIdColumn.getName(),\n-                        null,\n-                        getContextManager());\n-                columnReference.setSource(rowIdColumn);\n-                columnReference.setNestingLevel(targetTable.getLevel());\n-                columnReference.setSourceLevel(targetTable.getLevel());\n                 rowLocationColumn =\n                         (ResultColumn) getNodeFactory().getNode(\n                                 C_NodeTypes.RESULT_COLUMN,\n                                 COLUMNNAME,\n-                                columnReference,\n+                                rowIdColumn,\n                                 getContextManager());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTAwNDA0MQ=="}, "originalCommit": {"oid": "3c391ebe00788b3c9c0a8654ee14bda281c36521"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg1NTY3Nw==", "bodyText": "That makes sense, thanks!", "url": "https://github.com/splicemachine/spliceengine/pull/4880#discussion_r547855677", "createdAt": "2020-12-23T09:30:29Z", "author": {"login": "dgomezferro"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/DeleteNode.java", "diffHunk": "@@ -325,19 +325,11 @@ else if (cursorTargetTableName != null)\n                     rowIdColumn.setName(COLUMNNAME);\n                 }\n \n-                ColumnReference columnReference = (ColumnReference) getNodeFactory().getNode(\n-                        C_NodeTypes.COLUMN_REFERENCE,\n-                        rowIdColumn.getName(),\n-                        null,\n-                        getContextManager());\n-                columnReference.setSource(rowIdColumn);\n-                columnReference.setNestingLevel(targetTable.getLevel());\n-                columnReference.setSourceLevel(targetTable.getLevel());\n                 rowLocationColumn =\n                         (ResultColumn) getNodeFactory().getNode(\n                                 C_NodeTypes.RESULT_COLUMN,\n                                 COLUMNNAME,\n-                                columnReference,\n+                                rowIdColumn,\n                                 getContextManager());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTAwNDA0MQ=="}, "originalCommit": {"oid": "3c391ebe00788b3c9c0a8654ee14bda281c36521"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNTIyNDkwOnYy", "diffSide": "RIGHT", "path": "splice_machine/src/test/java/com/splicemachine/derby/test/framework/SpliceIndexWatcher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMToxNDoxM1rOIHwr0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxODo0Njo0MVrOIIuhoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTAwODU5NA==", "bodyText": "Nitpick, a getter for this would be better", "url": "https://github.com/splicemachine/spliceengine/pull/4880#discussion_r545008594", "createdAt": "2020-12-17T11:14:13Z", "author": {"login": "dgomezferro"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/test/framework/SpliceIndexWatcher.java", "diffHunk": "@@ -31,7 +31,7 @@\n     protected String tableName;\n     protected String tableSchemaName;\n     protected String createString;\n-    protected String indexName;\n+    public final String indexName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c391ebe00788b3c9c0a8654ee14bda281c36521"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAyMTc5Mw==", "bodyText": "fixed it.", "url": "https://github.com/splicemachine/spliceengine/pull/4880#discussion_r546021793", "createdAt": "2020-12-18T18:46:41Z", "author": {"login": "hatyo"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/test/framework/SpliceIndexWatcher.java", "diffHunk": "@@ -31,7 +31,7 @@\n     protected String tableName;\n     protected String tableSchemaName;\n     protected String createString;\n-    protected String indexName;\n+    public final String indexName;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTAwODU5NA=="}, "originalCommit": {"oid": "3c391ebe00788b3c9c0a8654ee14bda281c36521"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTMxNjEwOnYy", "diffSide": "RIGHT", "path": "platform_it/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNTowNDoxNVrOIJ-OuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxOTowOToyMFrOIKGAUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMyNzY3Mw==", "bodyText": "Remove this line", "url": "https://github.com/splicemachine/spliceengine/pull/4880#discussion_r547327673", "createdAt": "2020-12-22T15:04:15Z", "author": {"login": "dgomezferro"}, "path": "platform_it/pom.xml", "diffHunk": "@@ -1069,6 +1069,7 @@\n                                 <argument>-Dderby.language.updateSystemProcs=false</argument>\n                                 <!-- Setting the logStatementText option to true enables logging of all statements. -->\n                                 <argument>-Dderby.infolog.append=true</argument>\n+                                <argument>-Dderby.debug.true=DumpClassFile</argument>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76010a3390f9fa3114ae7527d8e1108d96843268"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ1NTA1OA==", "bodyText": "done.", "url": "https://github.com/splicemachine/spliceengine/pull/4880#discussion_r547455058", "createdAt": "2020-12-22T19:09:20Z", "author": {"login": "hatyo"}, "path": "platform_it/pom.xml", "diffHunk": "@@ -1069,6 +1069,7 @@\n                                 <argument>-Dderby.language.updateSystemProcs=false</argument>\n                                 <!-- Setting the logStatementText option to true enables logging of all statements. -->\n                                 <argument>-Dderby.infolog.append=true</argument>\n+                                <argument>-Dderby.debug.true=DumpClassFile</argument>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMyNzY3Mw=="}, "originalCommit": {"oid": "76010a3390f9fa3114ae7527d8e1108d96843268"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTk3NDQ5OnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/execute/IndexValueRow.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxODoxNjoyNFrOIKEYvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxOToxMDozOVrOIKGClw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQyODU0Mg==", "bodyText": "Remove extra spacing", "url": "https://github.com/splicemachine/spliceengine/pull/4880#discussion_r547428542", "createdAt": "2020-12-22T18:16:24Z", "author": {"login": "dgomezferro"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/execute/IndexValueRow.java", "diffHunk": "@@ -54,7 +54,7 @@\n  */\n public class IndexValueRow implements ExecIndexRow, Serializable {\n \n-\tprivate ExecRow valueRow;\n+\tprivate ExecRow                                     valueRow;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76010a3390f9fa3114ae7527d8e1108d96843268"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ1NTYzOQ==", "bodyText": "done.", "url": "https://github.com/splicemachine/spliceengine/pull/4880#discussion_r547455639", "createdAt": "2020-12-22T19:10:39Z", "author": {"login": "hatyo"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/execute/IndexValueRow.java", "diffHunk": "@@ -54,7 +54,7 @@\n  */\n public class IndexValueRow implements ExecIndexRow, Serializable {\n \n-\tprivate ExecRow valueRow;\n+\tprivate ExecRow                                     valueRow;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQyODU0Mg=="}, "originalCommit": {"oid": "76010a3390f9fa3114ae7527d8e1108d96843268"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MjAwOTYwOnYy", "diffSide": "RIGHT", "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/function/SetCurrentLocatedRowAndRowKeyFunction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxODoyNDo0NVrOIKEvZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxOToxMjozMVrOIKGFxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQzNDM0Mg==", "bodyText": "We are setting this unconditionally, not just for \"FOR UPDATE\" statements. Is it possible to restrict it?", "url": "https://github.com/splicemachine/spliceengine/pull/4880#discussion_r547434342", "createdAt": "2020-12-22T18:24:45Z", "author": {"login": "dgomezferro"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/function/SetCurrentLocatedRowAndRowKeyFunction.java", "diffHunk": "@@ -17,27 +17,31 @@\n import com.splicemachine.db.iapi.sql.execute.ExecRow;\n import com.splicemachine.db.iapi.types.HBaseRowLocation;\n import com.splicemachine.derby.iapi.sql.execute.SpliceOperation;\n+import com.splicemachine.derby.impl.sql.execute.operations.ProjectRestrictOperation;\n+import com.splicemachine.derby.impl.sql.execute.operations.ScrollInsensitiveOperation;\n+import com.splicemachine.derby.impl.sql.execute.operations.TableScanOperation;\n import com.splicemachine.derby.stream.iapi.OperationContext;\n import com.splicemachine.derby.stream.utils.StreamLogUtils;\n \n-/**\n- *\n- *\n- */\n public class SetCurrentLocatedRowAndRowKeyFunction<Op extends SpliceOperation> extends SpliceFunction<Op,ExecRow,ExecRow> {\n \n+    private BaseRowLocatorFunction<Op> locatorFunction;\n+\n     public SetCurrentLocatedRowAndRowKeyFunction() {\n         super();\n+        locatorFunction = new BaseRowLocatorFunction<>();\n     }\n \n     public SetCurrentLocatedRowAndRowKeyFunction(OperationContext operationContext) {\n         super(operationContext);\n+        locatorFunction = new BaseRowLocatorFunction<>();\n     }\n \n     @Override\n     public ExecRow call(ExecRow locatedRow) throws Exception {\n         getOperation().setCurrentRow(locatedRow);\n         getOperation().setCurrentRowLocation(new HBaseRowLocation(locatedRow.getKey()));\n+        getOperation().setCurrentBaseRowLocation(locatorFunction.call(operationContext));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76010a3390f9fa3114ae7527d8e1108d96843268"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ1NjQ1Mw==", "bodyText": "You're right, I restrict it now for for-update plans.", "url": "https://github.com/splicemachine/spliceengine/pull/4880#discussion_r547456453", "createdAt": "2020-12-22T19:12:31Z", "author": {"login": "hatyo"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/function/SetCurrentLocatedRowAndRowKeyFunction.java", "diffHunk": "@@ -17,27 +17,31 @@\n import com.splicemachine.db.iapi.sql.execute.ExecRow;\n import com.splicemachine.db.iapi.types.HBaseRowLocation;\n import com.splicemachine.derby.iapi.sql.execute.SpliceOperation;\n+import com.splicemachine.derby.impl.sql.execute.operations.ProjectRestrictOperation;\n+import com.splicemachine.derby.impl.sql.execute.operations.ScrollInsensitiveOperation;\n+import com.splicemachine.derby.impl.sql.execute.operations.TableScanOperation;\n import com.splicemachine.derby.stream.iapi.OperationContext;\n import com.splicemachine.derby.stream.utils.StreamLogUtils;\n \n-/**\n- *\n- *\n- */\n public class SetCurrentLocatedRowAndRowKeyFunction<Op extends SpliceOperation> extends SpliceFunction<Op,ExecRow,ExecRow> {\n \n+    private BaseRowLocatorFunction<Op> locatorFunction;\n+\n     public SetCurrentLocatedRowAndRowKeyFunction() {\n         super();\n+        locatorFunction = new BaseRowLocatorFunction<>();\n     }\n \n     public SetCurrentLocatedRowAndRowKeyFunction(OperationContext operationContext) {\n         super(operationContext);\n+        locatorFunction = new BaseRowLocatorFunction<>();\n     }\n \n     @Override\n     public ExecRow call(ExecRow locatedRow) throws Exception {\n         getOperation().setCurrentRow(locatedRow);\n         getOperation().setCurrentRowLocation(new HBaseRowLocation(locatedRow.getKey()));\n+        getOperation().setCurrentBaseRowLocation(locatorFunction.call(operationContext));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQzNDM0Mg=="}, "originalCommit": {"oid": "76010a3390f9fa3114ae7527d8e1108d96843268"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MjAxMjIyOnYy", "diffSide": "RIGHT", "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/function/BaseRowLocatorFunction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxODoyNTozMlrOIKEw_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxOToxNDoyN1rOIKGJGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQzNDc0OA==", "bodyText": "I don't think this needs to be a SpliceFunction, the logic could even be a static function. I'm ok with it being a functional object, but no need to extend SpliceFunction, implement hasNativeSparkImplementation etc.", "url": "https://github.com/splicemachine/spliceengine/pull/4880#discussion_r547434748", "createdAt": "2020-12-22T18:25:32Z", "author": {"login": "dgomezferro"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/function/BaseRowLocatorFunction.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright (c) 2012 - 2020 Splice Machine, Inc.\n+ * This file is part of Splice Machine.\n+ * Splice Machine is free software: you can redistribute it and/or modify it under the terms of the\n+ * GNU Affero General Public License as published by the Free Software Foundation, either\n+ * version 3, or (at your option) any later version.\n+ * Splice Machine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ * See the GNU Affero General Public License for more details.\n+ * You should have received a copy of the GNU Affero General Public License along with Splice Machine.\n+ * If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.splicemachine.derby.stream.function;\n+\n+import com.splicemachine.db.iapi.sql.execute.ExecRow;\n+import com.splicemachine.derby.iapi.sql.execute.SpliceOperation;\n+import com.splicemachine.derby.impl.sql.execute.operations.IndexRowToBaseRowOperation;\n+import com.splicemachine.derby.impl.sql.execute.operations.ProjectRestrictOperation;\n+import com.splicemachine.derby.impl.sql.execute.operations.ScrollInsensitiveOperation;\n+import com.splicemachine.derby.impl.sql.execute.operations.TableScanOperation;\n+import com.splicemachine.derby.stream.iapi.OperationContext;\n+\n+public class BaseRowLocatorFunction <Op extends SpliceOperation> extends SpliceFunction<Op, OperationContext<Op>,ExecRow> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76010a3390f9fa3114ae7527d8e1108d96843268"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ1NzMwNw==", "bodyText": "You're right, I wanted initially to make it a full-fledged SpliceFunction that I inject in the plan execution, but along the way I reduced it to a normal static function. I will refactor it accordingly.", "url": "https://github.com/splicemachine/spliceengine/pull/4880#discussion_r547457307", "createdAt": "2020-12-22T19:14:27Z", "author": {"login": "hatyo"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/function/BaseRowLocatorFunction.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright (c) 2012 - 2020 Splice Machine, Inc.\n+ * This file is part of Splice Machine.\n+ * Splice Machine is free software: you can redistribute it and/or modify it under the terms of the\n+ * GNU Affero General Public License as published by the Free Software Foundation, either\n+ * version 3, or (at your option) any later version.\n+ * Splice Machine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ * See the GNU Affero General Public License for more details.\n+ * You should have received a copy of the GNU Affero General Public License along with Splice Machine.\n+ * If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.splicemachine.derby.stream.function;\n+\n+import com.splicemachine.db.iapi.sql.execute.ExecRow;\n+import com.splicemachine.derby.iapi.sql.execute.SpliceOperation;\n+import com.splicemachine.derby.impl.sql.execute.operations.IndexRowToBaseRowOperation;\n+import com.splicemachine.derby.impl.sql.execute.operations.ProjectRestrictOperation;\n+import com.splicemachine.derby.impl.sql.execute.operations.ScrollInsensitiveOperation;\n+import com.splicemachine.derby.impl.sql.execute.operations.TableScanOperation;\n+import com.splicemachine.derby.stream.iapi.OperationContext;\n+\n+public class BaseRowLocatorFunction <Op extends SpliceOperation> extends SpliceFunction<Op, OperationContext<Op>,ExecRow> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQzNDc0OA=="}, "originalCommit": {"oid": "76010a3390f9fa3114ae7527d8e1108d96843268"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3403, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}