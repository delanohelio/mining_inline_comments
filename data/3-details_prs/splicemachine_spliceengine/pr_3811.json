{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3OTU0NjE3", "number": 3811, "title": "DB-9782 improve ExternalTableIT to handle more column types / unify tests", "bodyText": "tests like testAbcParquet, testAbcORC, testAbcAvro have been unified to  testAbc.\nremoved code duplication, especially in tests for syntax error handling\ntestWriteReadFromSimpleExternalTable will now tests ALL available column types\nadded CreateTableTypeHelper to make testing multiple column, values and null values types easier, even if Parquet, ORC and Avro sometimes support different types.", "createdAt": "2020-07-12T21:03:59Z", "url": "https://github.com/splicemachine/spliceengine/pull/3811", "merged": true, "mergeCommit": {"oid": "0417c2b3f43469255e3a994871f1d2eecd614bb7"}, "closed": true, "closedAt": "2020-07-17T17:39:04Z", "author": {"login": "martinrupp"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc0SQYuAH2gAyNDQ3OTU0NjE3OjMyZGM0N2Y5ZmRkZjAxYzQxMTE3MTZjM2NjOTc0MzYyNTZjY2EyYTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc1bomVgFqTQ0OTY2NzQ1MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "32dc47f9fddf01c4111716c3cc97436256cca2a4", "author": {"user": {"login": "martinrupp", "name": "Martin Rupp"}}, "url": "https://github.com/splicemachine/spliceengine/commit/32dc47f9fddf01c4111716c3cc97436256cca2a4", "committedDate": "2020-07-12T19:46:20Z", "message": "DB-9782 better ExternalTableIT\n\nnow for ORC/PARQUET/AVRO in one function:\n- testCannotDeleteOrUpdateExternalTable\n- testEmptyDirectory\n- testLocationCannotBeAFile\n- refreshRequireExternalTable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "732880a64c5fbf9fe1eb29c83e766387b79053f9", "author": {"user": {"login": "martinrupp", "name": "Martin Rupp"}}, "url": "https://github.com/splicemachine/spliceengine/commit/732880a64c5fbf9fe1eb29c83e766387b79053f9", "committedDate": "2020-07-12T19:50:32Z", "message": "DB-9782 testModifyExtTableFails\n\nreplacing\n- testCannotAlterExternalTable/Avro\n- testCannotAddIndexToExternalTable/Avro\n- testCannotAddTriggerToExternalTable/Avro"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70cd60f4f87a23e0b329c48bcfc610a645d381e0", "author": {"user": {"login": "martinrupp", "name": "Martin Rupp"}}, "url": "https://github.com/splicemachine/spliceengine/commit/70cd60f4f87a23e0b329c48bcfc610a645d381e0", "committedDate": "2020-07-12T19:52:40Z", "message": "DB-9782 testWriteX\n\nfor Parquet/AVRO/ORC\n- testWriteToWrongPartitionedParquetExternalTable\n- testWriteToNotPermittedLocation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74d6e813b831b24b4acfd76eec59aa37dc6eb921", "author": {"user": {"login": "martinrupp", "name": "Martin Rupp"}}, "url": "https://github.com/splicemachine/spliceengine/commit/74d6e813b831b24b4acfd76eec59aa37dc6eb921", "committedDate": "2020-07-12T19:54:03Z", "message": "DB-9782 testCollectStats/testWriteReadArrays\n\nreplacing\n- testCollectStats/Text/Parquet/Avro\n- testWriteReadArraysParquet/Avro/ORC\n- testWriteReadArraysWithStatsParquet/Avro"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "acc4b1bd1f11ff309d1806c2f95ae6a17a2e2d67", "author": {"user": {"login": "martinrupp", "name": "Martin Rupp"}}, "url": "https://github.com/splicemachine/spliceengine/commit/acc4b1bd1f11ff309d1806c2f95ae6a17a2e2d67", "committedDate": "2020-07-12T19:58:28Z", "message": "DB-9782 testShowCreateTableOrcExternalTable\n\nreplacing\n- testShowCreateTable{Parquet/Avro/Orc}ExternalTable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64904f9dcaab697737e062e33851dde77e86feb2", "author": {"user": {"login": "martinrupp", "name": "Martin Rupp"}}, "url": "https://github.com/splicemachine/spliceengine/commit/64904f9dcaab697737e062e33851dde77e86feb2", "committedDate": "2020-07-12T20:04:47Z", "message": "DB-9782 simplifying tests for invalid syntax / unsupported ops on ext.tables"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee4f7f689b0c0ad79480b146e3538078de586a00", "author": {"user": {"login": "martinrupp", "name": "Martin Rupp"}}, "url": "https://github.com/splicemachine/spliceengine/commit/ee4f7f689b0c0ad79480b146e3538078de586a00", "committedDate": "2020-07-12T20:57:50Z", "message": "DB-9782 unifying write/read from ext tables with all column types"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41935beb67f161ea0d395570ba993ecc4c0eafb1", "author": {"user": {"login": "martinrupp", "name": "Martin Rupp"}}, "url": "https://github.com/splicemachine/spliceengine/commit/41935beb67f161ea0d395570ba993ecc4c0eafb1", "committedDate": "2020-07-13T14:13:39Z", "message": "DB-9782 ExternalTableIT: repair broken IT"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4NjU5ODcy", "url": "https://github.com/splicemachine/spliceengine/pull/3811#pullrequestreview-448659872", "createdAt": "2020-07-15T06:23:01Z", "commit": {"oid": "41935beb67f161ea0d395570ba993ecc4c0eafb1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec0cf8c7913a1caca33446f2fd2a26f34400baf6", "author": {"user": {"login": "arnaud-splice", "name": "Arnaud Lacurie"}}, "url": "https://github.com/splicemachine/spliceengine/commit/ec0cf8c7913a1caca33446f2fd2a26f34400baf6", "committedDate": "2020-07-15T06:34:49Z", "message": "DB-9782 Use streams"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0e3d1f8f0251dd4538209bddc065ee1dc2abaab", "author": {"user": {"login": "martinrupp", "name": "Martin Rupp"}}, "url": "https://github.com/splicemachine/spliceengine/commit/e0e3d1f8f0251dd4538209bddc065ee1dc2abaab", "committedDate": "2020-07-15T09:23:39Z", "message": "DB-9782 simplify ExternalTablePartitionIT"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4NzkzNTI2", "url": "https://github.com/splicemachine/spliceengine/pull/3811#pullrequestreview-448793526", "createdAt": "2020-07-15T09:41:30Z", "commit": {"oid": "e0e3d1f8f0251dd4538209bddc065ee1dc2abaab"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwOTo0MTozMFrOGx2cUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwOTo0MTozMFrOGx2cUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkyNTM5Mw==", "bodyText": "I guess this could also be replaced by streams, but that's not blocking", "url": "https://github.com/splicemachine/spliceengine/pull/3811#discussion_r454925393", "createdAt": "2020-07-15T09:41:30Z", "author": {"login": "arnaud-splice"}, "path": "hbase_sql/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/CreateTableTypeHelper.java", "diffHunk": "@@ -0,0 +1,243 @@\n+package com.splicemachine.derby.impl.sql.execute.operations;\n+\n+import org.junit.Assert;\n+\n+import java.sql.Clob;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Types;\n+import java.time.format.DateTimeFormatter;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.function.Consumer;\n+import java.util.function.IntFunction;\n+import java.util.stream.Collectors;\n+\n+/// a helper class to define column types, and then create external tables and insert data into them\n+/// to make writing tests for all column types easier.\n+\n+public class CreateTableTypeHelper {\n+    /// @param types: an array of Types that should be used\n+    /// @param ivalues: an array of values to use. 0 is NULL value, all other values will\n+    /// generate corresponding entries that are somewhat associated with the integer val\n+    /// e.g. mostly if the int values increase, the corresponding e.g. date value also increases.\n+    public CreateTableTypeHelper(int[] types, int[] ivalues)\n+    {\n+        schema = Arrays.stream(types).mapToObj(this::getTypesName).collect(Collectors.joining(\", \"));\n+        suggestedTypes = Arrays.stream(types).mapToObj(this::getTypesNameInfered).collect(Collectors.joining(\", \"));\n+\n+        IntFunction<String> iValueStringFunc = ivalue -> Arrays.stream(types)\n+                .mapToObj(type -> getTypeValue(type, ivalue))\n+                .collect(Collectors.joining(\", \"));\n+\n+        values2 = Arrays.stream(ivalues).mapToObj(iValueStringFunc).sorted().collect(Collectors.toList());\n+        insertValues = Arrays.stream(ivalues).mapToObj(iValueStringFunc).map(s -> \"(\" + s + \")\").collect(Collectors.joining(\", \"));\n+    }\n+\n+    public String getInsertValues() {\n+        return insertValues;\n+    }\n+\n+    /// @return schema as to be used in `create external table <NAME> ( <SCHEMA> ) ...`\n+    public String getSchema()\n+    {\n+        return schema;\n+    }\n+\n+    /// @return schema that will be returned when suggesting a schema to the user.\n+    public String getSuggestedTypes() {\n+        return suggestedTypes;\n+    }\n+\n+\n+    /// @return types that are supported by Parquet\n+    static public int[] getParquetTypes() {\n+        return new int[]{\n+                Types.VARCHAR, Types.CHAR,\n+                Types.DATE, Types.TIMESTAMP,\n+                // Types.TIME, // supported, but will be written as TIMESTAMP\n+                Types.TINYINT, Types.SMALLINT, Types.INTEGER, Types.BIGINT,\n+                Types.DOUBLE, Types.REAL, Types.DECIMAL, Types.BOOLEAN\n+        };\n+    }\n+\n+    /// @return types that are supported by ORC\n+    static public int[] getORCTypes() {\n+        return new int[]{\n+                Types.VARCHAR, Types.CHAR,\n+                Types.DATE, Types.TIMESTAMP,\n+                // Types.TIME, // supported, but will be written as TIMESTAMP\n+                Types.TINYINT, Types.SMALLINT, Types.INTEGER, Types.BIGINT,\n+                Types.DOUBLE, Types.REAL, Types.DECIMAL, Types.BOOLEAN\n+        };\n+    }\n+\n+    /// @return types that are supported by Avro\n+    static public int[] getAvroTypes() {\n+        return new int[]{\n+                Types.VARCHAR, Types.CHAR,\n+                // Types.DATE, Types.TIME // not supported\n+                Types.TIMESTAMP,\n+                //Types.TINYINT, Types.SMALLINT, // not supported\n+                Types.INTEGER, Types.BIGINT,\n+                Types.DOUBLE, Types.REAL,\n+                // Types.DECIMAL, // not supported\n+                Types.BOOLEAN\n+        };\n+    }\n+\n+    /// @return supported types by fileFormat PARQUET, ORC or AVRO\n+    static public int[] getTypes(String fileFormat) {\n+        if(fileFormat.equalsIgnoreCase(\"PARQUET\"))\n+            return getParquetTypes();\n+        else if(fileFormat.equalsIgnoreCase(\"ORC\"))\n+            return getORCTypes();\n+        else if(fileFormat.equalsIgnoreCase(\"AVRO\"))\n+            return getAvroTypes();\n+        throw new RuntimeException(\"unsupported fileformat \" + fileFormat);\n+    }\n+\n+    /// compare that result in ResultSet rs is the same as from the generated insert values.\n+    public void checkResultSetSelectAll(ResultSet rs) throws SQLException {\n+        ArrayList<String> results = new ArrayList<>();\n+        int nCols = rs.getMetaData().getColumnCount();\n+        while (rs.next()) {\n+            StringBuilder sb = new StringBuilder();\n+            for (int i = 1; i <= nCols; i++) {\n+                Object value = rs.getObject(i);\n+                if (value != null && value instanceof Clob) {\n+                    throw new RuntimeException(\"Clob not supported\");\n+                } else {\n+                    if( i > 1 ) sb.append(\", \");\n+                    if( value != null && value.toString() != null ) {\n+                        sb.append(\"'\");\n+                        sb.append(value.toString());\n+                        sb.append(\"'\");\n+                    }\n+                    else {\n+                        sb.append(\"NULL\");\n+                    }\n+                }\n+            }\n+            results.add(sb.toString());\n+        }\n+        results.sort(String::compareTo);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0e3d1f8f0251dd4538209bddc065ee1dc2abaab"}, "originalPosition": 126}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98032803ba19149df80b3b5649f265bfda31278e", "author": {"user": {"login": "martinrupp", "name": "Martin Rupp"}}, "url": "https://github.com/splicemachine/spliceengine/commit/98032803ba19149df80b3b5649f265bfda31278e", "committedDate": "2020-07-15T12:59:01Z", "message": "DB-9782 code review: fix javadoc comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5NjY3NDUw", "url": "https://github.com/splicemachine/spliceengine/pull/3811#pullrequestreview-449667450", "createdAt": "2020-07-16T09:15:51Z", "commit": {"oid": "98032803ba19149df80b3b5649f265bfda31278e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1238, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}