{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5MzAzMjY0", "number": 3828, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODozMzozOFrOEPcodw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODo0MTozM1rOEPczQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjMzMjA3OnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/iapi/util/RowIdUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODozMzozOFrOGzKZSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODozMzozOFrOGzKZSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMwMDg3NQ==", "bodyText": "this could be a static function. then you could have a unit test for toLongTimestamp\npublic static long toLongTimestamp( String str, long time )\n{\n\tString hex = toHBaseEscaped( str );\n    long value = Bytes.toLong(Bytes.toBytesBinary(hex));\n    long ts = time & (~TIMESTAMP_MASK);\n    ts |= (value >> TIMESTAMP_SHIFT) & TIMESTAMP_MASK;\n    return ts;\n}\n\nstatic DateTimeDataValue toInstant(DataValueDescriptor s) throws StandardException {\n    if(s == null) {\n        return null;\n    }\n\n    long time = System.currentTimeMillis();\n    return new SQLTimestamp(new Timestamp( toLongTimestamp(s.getString(), time)));\n}", "url": "https://github.com/splicemachine/spliceengine/pull/3828#discussion_r456300875", "createdAt": "2020-07-17T08:33:38Z", "author": {"login": "martinrupp"}, "path": "db-engine/src/main/java/com/splicemachine/db/iapi/util/RowIdUtil.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package com.splicemachine.db.iapi.util;\n+\n+import com.splicemachine.db.iapi.error.StandardException;\n+import com.splicemachine.db.iapi.types.*;\n+import com.splicemachine.primitives.Bytes;\n+\n+import java.sql.Timestamp;\n+import java.time.Instant;\n+\n+import static com.splicemachine.uuid.Snowflake.TIMESTAMP_MASK;\n+import static com.splicemachine.uuid.Snowflake.TIMESTAMP_SHIFT;\n+\n+public interface RowIdUtil {\n+\n+    static String toHBaseEscaped(String s) {\n+        StringBuilder sb = new StringBuilder();\n+        for (int i = 0; i < s.length(); i += 2) {\n+            sb.append(\"\\\\x\").append(s, i, i+2);\n+        }\n+        return sb.toString();\n+    }\n+\n+    static DateTimeDataValue toInstant(DataValueDescriptor s) throws StandardException {\n+        if(s == null) {\n+            return null;\n+        }\n+        String hex = toHBaseEscaped(s.getString());\n+        long value = Bytes.toLong(Bytes.toBytesBinary(hex));\n+        long ts = System.currentTimeMillis() & (~TIMESTAMP_MASK);\n+        ts |= (value >> TIMESTAMP_SHIFT) & TIMESTAMP_MASK;\n+        return new SQLTimestamp(new Timestamp(ts));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b70fe61e3d04a4a04e52d280392b667e9794db4b"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjM1OTMwOnYy", "diffSide": "RIGHT", "path": "splice_machine/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/RowIdIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODo0MToyNlrOGzKpcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODo0MToyNlrOGzKpcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMwNTAxMA==", "bodyText": "this looks like you're comparing the result against the result.\nmaybe instead of result use expectedEscaped.", "url": "https://github.com/splicemachine/spliceengine/pull/3828#discussion_r456305010", "createdAt": "2020-07-17T08:41:26Z", "author": {"login": "martinrupp"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/RowIdIT.java", "diffHunk": "@@ -450,4 +451,30 @@ public void testRowIdToInstantFunctionInvalidInput() {\n         }\n         fail(\"Expected: java.sql.SQLException: ERROR 22008: '33445567' is an invalid argument to the TO_INSTANT function.\");\n     }\n+\n+    @Test\n+    public void testRowIdToHbaseEscapedFunction() throws Exception {\n+        ResultSet resultSet  = methodWatcher.executeQuery(String.format(\"select cast(rowid as varchar(30)) from %s\",\n+                this.getTableReference(TABLE7_NAME)));\n+        Assert.assertTrue(resultSet.next());\n+        String rowId = resultSet.getString(1);\n+        Assert.assertFalse(resultSet.next());\n+        StringDataValue result = RowIdUtil.toHBaseEscaped(new SQLChar(rowId));\n+        resultSet = methodWatcher.executeQuery(String.format(\"select to_hbase_escaped(rowid) from %s\", this.getTableReference(TABLE7_NAME)));\n+        Assert.assertTrue(resultSet.next());\n+        Assert.assertEquals(result.getString(), resultSet.getString(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f519d29cfe67c4c764f0ef919f6e52e3ad738748"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjM1OTcwOnYy", "diffSide": "RIGHT", "path": "splice_machine/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/RowIdIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODo0MTozM1rOGzKprA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODo0MTozM1rOGzKprA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMwNTA2OA==", "bodyText": "can you add a test where you have input and output as strings? e.g.\nAssert.equals( RowIdUtil.toHBaseEscaped(\"HelloWorld\\x33asdf\\n\\t\") , \"HelloWorld\\\\x33asdf\\\\x0D\" ));\nOtherwise it somehow feels like you're testing toHBaseEscaped by using toHBaseEscaped.", "url": "https://github.com/splicemachine/spliceengine/pull/3828#discussion_r456305068", "createdAt": "2020-07-17T08:41:33Z", "author": {"login": "martinrupp"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/RowIdIT.java", "diffHunk": "@@ -450,4 +451,30 @@ public void testRowIdToInstantFunctionInvalidInput() {\n         }\n         fail(\"Expected: java.sql.SQLException: ERROR 22008: '33445567' is an invalid argument to the TO_INSTANT function.\");\n     }\n+\n+    @Test\n+    public void testRowIdToHbaseEscapedFunction() throws Exception {\n+        ResultSet resultSet  = methodWatcher.executeQuery(String.format(\"select cast(rowid as varchar(30)) from %s\",\n+                this.getTableReference(TABLE7_NAME)));\n+        Assert.assertTrue(resultSet.next());\n+        String rowId = resultSet.getString(1);\n+        Assert.assertFalse(resultSet.next());\n+        StringDataValue result = RowIdUtil.toHBaseEscaped(new SQLChar(rowId));\n+        resultSet = methodWatcher.executeQuery(String.format(\"select to_hbase_escaped(rowid) from %s\", this.getTableReference(TABLE7_NAME)));\n+        Assert.assertTrue(resultSet.next());\n+        Assert.assertEquals(result.getString(), resultSet.getString(1));\n+        Assert.assertFalse(resultSet.next());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f519d29cfe67c4c764f0ef919f6e52e3ad738748"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3099, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}