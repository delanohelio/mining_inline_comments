{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyMTE0NTAx", "number": 4890, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwOTowMzo0OVrOFHFwVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwOTowMzo0OVrOFHFwVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyOTc4NjQ0OnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/HashableJoinStrategy.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwOTowMzo0OVrOIIZ1bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNDo1NjowMlrOIImTlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTY4Mjc5OQ==", "bodyText": "@msirek should we also allow RIGHTOUTERJOIN here, or at this point we only have LEFT OUTER ?", "url": "https://github.com/splicemachine/spliceengine/pull/4890#discussion_r545682799", "createdAt": "2020-12-18T09:03:49Z", "author": {"login": "dgomezferro"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/HashableJoinStrategy.java", "diffHunk": "@@ -167,7 +167,8 @@ public boolean feasible(Optimizable innerTable,\n         if (hashKeyColumns == null && skipKeyCheck) {\n             // For full outer join, broadcast join is the default join strategy that can be applied\n             // to any kinds of join predicate, so make the eligibility check more general\n-            if (outerCost.getJoinType() == JoinNode.FULLOUTERJOIN &&\n+            if ((outerCost.getJoinType() == JoinNode.FULLOUTERJOIN ||\n+                 outerCost.getJoinType() == JoinNode.LEFTOUTERJOIN) &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37eb36296c4f49b44f80ff34d9ade4f2d612cb14"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg0MDg2OQ==", "bodyText": "@dgomezferro For join algorithms we currently only have left outer join.  If we specify a right outer join in SQL it is executed using a left outer join algorithm (but with left and right tables swapped).  There is a test for it in BroadCastJoinIT.", "url": "https://github.com/splicemachine/spliceengine/pull/4890#discussion_r545840869", "createdAt": "2020-12-18T13:47:28Z", "author": {"login": "msirek"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/HashableJoinStrategy.java", "diffHunk": "@@ -167,7 +167,8 @@ public boolean feasible(Optimizable innerTable,\n         if (hashKeyColumns == null && skipKeyCheck) {\n             // For full outer join, broadcast join is the default join strategy that can be applied\n             // to any kinds of join predicate, so make the eligibility check more general\n-            if (outerCost.getJoinType() == JoinNode.FULLOUTERJOIN &&\n+            if ((outerCost.getJoinType() == JoinNode.FULLOUTERJOIN ||\n+                 outerCost.getJoinType() == JoinNode.LEFTOUTERJOIN) &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTY4Mjc5OQ=="}, "originalCommit": {"oid": "37eb36296c4f49b44f80ff34d9ade4f2d612cb14"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg4NzEyNw==", "bodyText": "@msirek got it, thanks!", "url": "https://github.com/splicemachine/spliceengine/pull/4890#discussion_r545887127", "createdAt": "2020-12-18T14:56:02Z", "author": {"login": "dgomezferro"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/HashableJoinStrategy.java", "diffHunk": "@@ -167,7 +167,8 @@ public boolean feasible(Optimizable innerTable,\n         if (hashKeyColumns == null && skipKeyCheck) {\n             // For full outer join, broadcast join is the default join strategy that can be applied\n             // to any kinds of join predicate, so make the eligibility check more general\n-            if (outerCost.getJoinType() == JoinNode.FULLOUTERJOIN &&\n+            if ((outerCost.getJoinType() == JoinNode.FULLOUTERJOIN ||\n+                 outerCost.getJoinType() == JoinNode.LEFTOUTERJOIN) &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTY4Mjc5OQ=="}, "originalCommit": {"oid": "37eb36296c4f49b44f80ff34d9ade4f2d612cb14"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3413, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}