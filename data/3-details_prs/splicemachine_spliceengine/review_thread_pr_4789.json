{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyNzAyMjIz", "number": 4789, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwOTo1MTo0OVrOFCOmSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMTo1NDo0MVrOFDcFVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3ODgwNjQ5OnYy", "diffSide": "RIGHT", "path": "splice_machine/src/test/java/com/splicemachine/derby/test/framework/SpliceWatcher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwOTo1MTo0OVrOIBQqvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMTowMjo1M1rOIDDqHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE5MjU3NA==", "bodyText": "The thread pool is shared right? according to the doc:\n\npublic static ExecutorService newFixedThreadPool(int nThreads)\n... At any point, at most nThreads threads will be active processing tasks. If additional tasks are submitted when all threads are active, they will wait in the queue until a thread is available.\n\nIf we run Test suites in parallel which use SpliceWatcher, could it lead to competition between different suites calling closeConnection on parallel and causing some of them to time out (as they are given 10 seconds to finish per line 198).", "url": "https://github.com/splicemachine/spliceengine/pull/4789#discussion_r538192574", "createdAt": "2020-12-08T09:51:49Z", "author": {"login": "hatyo"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/test/framework/SpliceWatcher.java", "diffHunk": "@@ -160,21 +173,61 @@ public PreparedStatement prepareStatement(String sql) throws SQLException {\n         return ps;\n     }\n \n+    /**\n+     * Try closing connections gracefully from different threads, if that takes long it could be some queries are stuck,\n+     * so abort the connections forcefully instead\n+     */\n     private void closeConnections() {\n+        int numThreads = connections.size() + 2; // two extra for the .abort() call\n+        ExecutorService executor = Executors.newFixedThreadPool(numThreads,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf96b9ee9ecfab3e890703e8f21a29662d1ce126"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA3NjU3NQ==", "bodyText": "It wasn't shared, but I think it's better if it is. I made the Executor a cachedThreadPool without a thread limit, so resources should be enough for concurrent ITs.", "url": "https://github.com/splicemachine/spliceengine/pull/4789#discussion_r540076575", "createdAt": "2020-12-10T11:02:53Z", "author": {"login": "dgomezferro"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/test/framework/SpliceWatcher.java", "diffHunk": "@@ -160,21 +173,61 @@ public PreparedStatement prepareStatement(String sql) throws SQLException {\n         return ps;\n     }\n \n+    /**\n+     * Try closing connections gracefully from different threads, if that takes long it could be some queries are stuck,\n+     * so abort the connections forcefully instead\n+     */\n     private void closeConnections() {\n+        int numThreads = connections.size() + 2; // two extra for the .abort() call\n+        ExecutorService executor = Executors.newFixedThreadPool(numThreads,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE5MjU3NA=="}, "originalCommit": {"oid": "cf96b9ee9ecfab3e890703e8f21a29662d1ce126"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3ODgxNDgwOnYy", "diffSide": "RIGHT", "path": "splice_machine/src/test/java/com/splicemachine/derby/test/framework/SpliceWatcher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwOTo1MzoyOVrOIBQvjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMTowMzozOFrOIDDr4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE5MzgwNA==", "bodyText": "Does it make sense to at least log this exception?", "url": "https://github.com/splicemachine/spliceengine/pull/4789#discussion_r538193804", "createdAt": "2020-12-08T09:53:29Z", "author": {"login": "hatyo"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/test/framework/SpliceWatcher.java", "diffHunk": "@@ -160,21 +173,61 @@ public PreparedStatement prepareStatement(String sql) throws SQLException {\n         return ps;\n     }\n \n+    /**\n+     * Try closing connections gracefully from different threads, if that takes long it could be some queries are stuck,\n+     * so abort the connections forcefully instead\n+     */\n     private void closeConnections() {\n+        int numThreads = connections.size() + 2; // two extra for the .abort() call\n+        ExecutorService executor = Executors.newFixedThreadPool(numThreads,\n+                new ThreadFactoryBuilder().setDaemon(true).setNameFormat(\"connection-close-%d\").build());\n+        CompletionService<Void> completionService =\n+                new ExecutorCompletionService<>(executor);\n         try {\n-            for (Connection connection : connections) {\n-                if (connection != null && !connection.isClosed()) {\n-                    try {\n-                        connection.close();\n-                    } catch (SQLException e) {\n-                        connection.rollback();\n+            connections.stream().forEach(connection -> completionService.submit(() -> {\n+                try {\n+                    if (connection != null && !connection.isClosed())\n                         connection.close();\n+                } catch (SQLException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf96b9ee9ecfab3e890703e8f21a29662d1ce126"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA3NzAyNg==", "bodyText": "Good point, made the change.", "url": "https://github.com/splicemachine/spliceengine/pull/4789#discussion_r540077026", "createdAt": "2020-12-10T11:03:38Z", "author": {"login": "dgomezferro"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/test/framework/SpliceWatcher.java", "diffHunk": "@@ -160,21 +173,61 @@ public PreparedStatement prepareStatement(String sql) throws SQLException {\n         return ps;\n     }\n \n+    /**\n+     * Try closing connections gracefully from different threads, if that takes long it could be some queries are stuck,\n+     * so abort the connections forcefully instead\n+     */\n     private void closeConnections() {\n+        int numThreads = connections.size() + 2; // two extra for the .abort() call\n+        ExecutorService executor = Executors.newFixedThreadPool(numThreads,\n+                new ThreadFactoryBuilder().setDaemon(true).setNameFormat(\"connection-close-%d\").build());\n+        CompletionService<Void> completionService =\n+                new ExecutorCompletionService<>(executor);\n         try {\n-            for (Connection connection : connections) {\n-                if (connection != null && !connection.isClosed()) {\n-                    try {\n-                        connection.close();\n-                    } catch (SQLException e) {\n-                        connection.rollback();\n+            connections.stream().forEach(connection -> completionService.submit(() -> {\n+                try {\n+                    if (connection != null && !connection.isClosed())\n                         connection.close();\n+                } catch (SQLException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE5MzgwNA=="}, "originalCommit": {"oid": "cf96b9ee9ecfab3e890703e8f21a29662d1ce126"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3ODgyMzk2OnYy", "diffSide": "RIGHT", "path": "splice_machine/src/test/java/com/splicemachine/derby/utils/SpliceAdmin_OperationsIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwOTo1NToyNlrOIBQ1Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMToxODozMVrOIDEQpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE5NTIzOA==", "bodyText": "we were verifying previously that the result set contained at least one row, this is removed now, is this intentional?", "url": "https://github.com/splicemachine/spliceengine/pull/4789#discussion_r538195238", "createdAt": "2020-12-08T09:55:26Z", "author": {"login": "hatyo"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/utils/SpliceAdmin_OperationsIT.java", "diffHunk": "@@ -239,11 +246,9 @@ public void testKillLongRunningQuery(boolean useSpark) throws Exception {\n         Thread thread = new Thread(new Runnable() {\n             @Override\n             public void run() {\n-                PreparedStatement ps = null;\n-                try (TestConnection connection = methodWatcher.createConnection()) {\n-                    ps = connection.prepareStatement(sql);\n-                    ResultSet rs = ps.executeQuery();\n-                    assertTrue(rs.next());\n+                try (TestConnection connection = methodWatcher.createConnection();\n+                     PreparedStatement ps = connection.prepareStatement(sql);\n+                     ResultSet rs = ps.executeQuery()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf96b9ee9ecfab3e890703e8f21a29662d1ce126"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA4NjQzNg==", "bodyText": "Yes, this query was never completing in the first place (it's a long running query on purpose) and it was running in a separate thread, so even if the assertion failed it wouldn't have failed the test.", "url": "https://github.com/splicemachine/spliceengine/pull/4789#discussion_r540086436", "createdAt": "2020-12-10T11:18:31Z", "author": {"login": "dgomezferro"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/utils/SpliceAdmin_OperationsIT.java", "diffHunk": "@@ -239,11 +246,9 @@ public void testKillLongRunningQuery(boolean useSpark) throws Exception {\n         Thread thread = new Thread(new Runnable() {\n             @Override\n             public void run() {\n-                PreparedStatement ps = null;\n-                try (TestConnection connection = methodWatcher.createConnection()) {\n-                    ps = connection.prepareStatement(sql);\n-                    ResultSet rs = ps.executeQuery();\n-                    assertTrue(rs.next());\n+                try (TestConnection connection = methodWatcher.createConnection();\n+                     PreparedStatement ps = connection.prepareStatement(sql);\n+                     ResultSet rs = ps.executeQuery()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE5NTIzOA=="}, "originalCommit": {"oid": "cf96b9ee9ecfab3e890703e8f21a29662d1ce126"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3OTE3MzIwOnYy", "diffSide": "RIGHT", "path": "splice_machine/src/test/java/com/splicemachine/derby/test/framework/SpliceWatcher.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMTowNjowMlrOIBUBLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMToxOToxOVrOIDESjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI0NzQ3MA==", "bodyText": "(minor comment) this would wait 10 second not for each, but 10 second every time you call it, so the first one is for 10s, the second 20s, third 30s etc.. Maybe sth like\nFuture<Void> future = completionService.poll(futures  == 0 ? 10 : 1, TimeUnit.SECONDS);\nI'm not entirely sure you need a CompletionService here at all, maybe a simple\nExecutorService.invokeAll(Callable, timeout, TimeUnit) would work.", "url": "https://github.com/splicemachine/spliceengine/pull/4789#discussion_r538247470", "createdAt": "2020-12-08T11:06:02Z", "author": {"login": "martinrupp"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/test/framework/SpliceWatcher.java", "diffHunk": "@@ -160,21 +173,61 @@ public PreparedStatement prepareStatement(String sql) throws SQLException {\n         return ps;\n     }\n \n+    /**\n+     * Try closing connections gracefully from different threads, if that takes long it could be some queries are stuck,\n+     * so abort the connections forcefully instead\n+     */\n     private void closeConnections() {\n+        int numThreads = connections.size() + 2; // two extra for the .abort() call\n+        ExecutorService executor = Executors.newFixedThreadPool(numThreads,\n+                new ThreadFactoryBuilder().setDaemon(true).setNameFormat(\"connection-close-%d\").build());\n+        CompletionService<Void> completionService =\n+                new ExecutorCompletionService<>(executor);\n         try {\n-            for (Connection connection : connections) {\n-                if (connection != null && !connection.isClosed()) {\n-                    try {\n-                        connection.close();\n-                    } catch (SQLException e) {\n-                        connection.rollback();\n+            connections.stream().forEach(connection -> completionService.submit(() -> {\n+                try {\n+                    if (connection != null && !connection.isClosed())\n                         connection.close();\n+                } catch (SQLException e) {\n+                }\n+                return null;\n+            }));\n+\n+            int futures = 0;\n+            while(futures++ < connections.size()) {\n+                Future<Void> future = completionService.poll(10, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf96b9ee9ecfab3e890703e8f21a29662d1ce126"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA4NjkyNQ==", "bodyText": "I like the invokeAll approach, we need to check the futures afterwards to see if they are done or not, but I think it's cleaner.", "url": "https://github.com/splicemachine/spliceengine/pull/4789#discussion_r540086925", "createdAt": "2020-12-10T11:19:19Z", "author": {"login": "dgomezferro"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/test/framework/SpliceWatcher.java", "diffHunk": "@@ -160,21 +173,61 @@ public PreparedStatement prepareStatement(String sql) throws SQLException {\n         return ps;\n     }\n \n+    /**\n+     * Try closing connections gracefully from different threads, if that takes long it could be some queries are stuck,\n+     * so abort the connections forcefully instead\n+     */\n     private void closeConnections() {\n+        int numThreads = connections.size() + 2; // two extra for the .abort() call\n+        ExecutorService executor = Executors.newFixedThreadPool(numThreads,\n+                new ThreadFactoryBuilder().setDaemon(true).setNameFormat(\"connection-close-%d\").build());\n+        CompletionService<Void> completionService =\n+                new ExecutorCompletionService<>(executor);\n         try {\n-            for (Connection connection : connections) {\n-                if (connection != null && !connection.isClosed()) {\n-                    try {\n-                        connection.close();\n-                    } catch (SQLException e) {\n-                        connection.rollback();\n+            connections.stream().forEach(connection -> completionService.submit(() -> {\n+                try {\n+                    if (connection != null && !connection.isClosed())\n                         connection.close();\n+                } catch (SQLException e) {\n+                }\n+                return null;\n+            }));\n+\n+            int futures = 0;\n+            while(futures++ < connections.size()) {\n+                Future<Void> future = completionService.poll(10, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI0NzQ3MA=="}, "originalCommit": {"oid": "cf96b9ee9ecfab3e890703e8f21a29662d1ce126"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MTUwMTY2OnYy", "diffSide": "RIGHT", "path": "splice_machine/src/test/java/com/splicemachine/derby/test/framework/SpliceWatcher.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMTo1NDo0MVrOIDFmWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMjowMTowNFrOIDF18Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDEwODM3OA==", "bodyText": "wouldn't this cause problems when running tests in parallel?", "url": "https://github.com/splicemachine/spliceengine/pull/4789#discussion_r540108378", "createdAt": "2020-12-10T11:54:41Z", "author": {"login": "martinrupp"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/test/framework/SpliceWatcher.java", "diffHunk": "@@ -51,6 +54,8 @@\n public class SpliceWatcher extends TestWatcher implements AutoCloseable {\n \n     private static final Logger LOG = Logger.getLogger(SpliceWatcher.class);\n+    private static ExecutorService executor = Executors.newCachedThreadPool(\n+            new ThreadFactoryBuilder().setDaemon(true).setNameFormat(\"connection-close-%d\").build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b1d6b764af5a5eead983f685d6eb33b6f68d48e"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDExMTc4MA==", "bodyText": "I don't think so, each task would get it's own thread and we are not limiting the amount of threads, so there should be no conflict.", "url": "https://github.com/splicemachine/spliceengine/pull/4789#discussion_r540111780", "createdAt": "2020-12-10T12:00:09Z", "author": {"login": "dgomezferro"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/test/framework/SpliceWatcher.java", "diffHunk": "@@ -51,6 +54,8 @@\n public class SpliceWatcher extends TestWatcher implements AutoCloseable {\n \n     private static final Logger LOG = Logger.getLogger(SpliceWatcher.class);\n+    private static ExecutorService executor = Executors.newCachedThreadPool(\n+            new ThreadFactoryBuilder().setDaemon(true).setNameFormat(\"connection-close-%d\").build());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDEwODM3OA=="}, "originalCommit": {"oid": "8b1d6b764af5a5eead983f685d6eb33b6f68d48e"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDExMjM2OQ==", "bodyText": "right, ok!", "url": "https://github.com/splicemachine/spliceengine/pull/4789#discussion_r540112369", "createdAt": "2020-12-10T12:01:04Z", "author": {"login": "martinrupp"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/test/framework/SpliceWatcher.java", "diffHunk": "@@ -51,6 +54,8 @@\n public class SpliceWatcher extends TestWatcher implements AutoCloseable {\n \n     private static final Logger LOG = Logger.getLogger(SpliceWatcher.class);\n+    private static ExecutorService executor = Executors.newCachedThreadPool(\n+            new ThreadFactoryBuilder().setDaemon(true).setNameFormat(\"connection-close-%d\").build());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDEwODM3OA=="}, "originalCommit": {"oid": "8b1d6b764af5a5eead983f685d6eb33b6f68d48e"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2708, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}