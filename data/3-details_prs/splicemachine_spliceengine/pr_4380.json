{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5OTMzNTA0", "number": 4380, "title": "DB-10580 adding tests for serialization of GenericColumnDescriptor and GenericResultDescription", "bodyText": "", "createdAt": "2020-10-26T10:35:26Z", "url": "https://github.com/splicemachine/spliceengine/pull/4380", "merged": true, "mergeCommit": {"oid": "95785ef47431564d453b15fe92fafe05498b39dc"}, "closed": true, "closedAt": "2020-10-30T07:16:10Z", "author": {"login": "martinrupp"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdWR-_7AH2gAyNTA5OTMzNTA0OjVlYTZiNGZjMWVlZGY2NjdhNmYyOGEyZGU2MzRhZTE3NzcyMTgyYWU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdXY75HAH2gAyNTA5OTMzNTA0OmU0ODhlOGIzNDMzYTVmYzgyNDllNTAzYzgxOGU4ZWFiYjNhYTY0MjI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5ea6b4fc1eedf667a6f28a2de634ae17772182ae", "author": {"user": {"login": "martinrupp", "name": "Martin Rupp"}}, "url": "https://github.com/splicemachine/spliceengine/commit/5ea6b4fc1eedf667a6f28a2de634ae17772182ae", "committedDate": "2020-10-26T10:40:46Z", "message": "DB-10580 adding tests for serialization of GenericColumnDescriptor and GenericResultDescription"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2487f0f5ecb6bc311fd74f047da5df94e530f7af", "author": {"user": {"login": "martinrupp", "name": "Martin Rupp"}}, "url": "https://github.com/splicemachine/spliceengine/commit/2487f0f5ecb6bc311fd74f047da5df94e530f7af", "committedDate": "2020-10-26T10:34:43Z", "message": "DB-10580 adding tests for serialization of GenericColumnDescriptor and GenericResultDescription"}, "afterCommit": {"oid": "5ea6b4fc1eedf667a6f28a2de634ae17772182ae", "author": {"user": {"login": "martinrupp", "name": "Martin Rupp"}}, "url": "https://github.com/splicemachine/spliceengine/commit/5ea6b4fc1eedf667a6f28a2de634ae17772182ae", "committedDate": "2020-10-26T10:40:46Z", "message": "DB-10580 adding tests for serialization of GenericColumnDescriptor and GenericResultDescription"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MzM2NzE4", "url": "https://github.com/splicemachine/spliceengine/pull/4380#pullrequestreview-517336718", "createdAt": "2020-10-27T04:15:54Z", "commit": {"oid": "5ea6b4fc1eedf667a6f28a2de634ae17772182ae"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNDoxNTo1NFrOHoq1Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNDoxNTo1NFrOHoq1Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQwNjg3OQ==", "bodyText": "Should this be uncommented?", "url": "https://github.com/splicemachine/spliceengine/pull/4380#discussion_r512406879", "createdAt": "2020-10-27T04:15:54Z", "author": {"login": "jyuanca"}, "path": "db-engine/src/test/java/com/splicemachine/db/impl/sql/SerializationTest.java", "diffHunk": "@@ -0,0 +1,156 @@\n+package com.splicemachine.db.impl.sql;\n+\n+import com.splicemachine.db.iapi.sql.ResultColumnDescriptor;\n+import com.splicemachine.db.iapi.types.DataTypeDescriptor;\n+import com.splicemachine.db.iapi.types.TypeId;\n+import org.apache.spark.sql.types.StructField;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.*;\n+import java.sql.Types;\n+import java.util.Arrays;\n+\n+public class SerializationTest {\n+\n+    static class CustomResultColumnDescriptor implements ResultColumnDescriptor {\n+\n+        String sourceTableName, sourceSchemaName, name;\n+        int iColPos;\n+        DataTypeDescriptor type;\n+        boolean bUpdateableByCursor, bAutoIncrement, bHasGenerationClause;\n+\n+        public CustomResultColumnDescriptor(String name, String sourceTableName, String sourceSchemaName, int iColPos,\n+                                            DataTypeDescriptor type,\n+                                            boolean bAutoIncrement, boolean bUpdateableByCursor, boolean bHasGenerationClause) {\n+            this.name = name;\n+            this.sourceTableName = sourceTableName;\n+            this.sourceSchemaName = sourceSchemaName;\n+            this.iColPos = iColPos;\n+            this.type = type;\n+            this.bAutoIncrement = bAutoIncrement;\n+            this.bUpdateableByCursor = bUpdateableByCursor;\n+            this.bHasGenerationClause = bHasGenerationClause;\n+        }\n+\n+        @Override\n+        public DataTypeDescriptor getType() {\n+            return type;\n+        }\n+\n+        @Override\n+        public StructField getStructField() {\n+            Assert.fail(\"not expected call of getStructField\");\n+            return null;\n+        }\n+\n+        @Override\n+        public String getName() {\n+            return name;\n+        }\n+\n+        @Override\n+        public String getSourceSchemaName() {\n+            return sourceSchemaName;\n+        }\n+\n+        @Override\n+        public String getSourceTableName() {\n+            return sourceTableName;\n+        }\n+\n+        @Override\n+        public boolean updatableByCursor() {\n+            return bUpdateableByCursor;\n+        }\n+\n+        @Override\n+        public int getColumnPosition() {\n+            return iColPos;\n+        }\n+\n+        @Override\n+        public boolean isAutoincrement() {\n+            return bAutoIncrement;\n+        }\n+\n+        @Override\n+        public boolean hasGenerationClause() {\n+            return bHasGenerationClause;\n+        }\n+\n+        public static GenericColumnDescriptor sample1() {\n+            return new GenericColumnDescriptor(new CustomResultColumnDescriptor(\n+                    \"name\", \"tabName\", \"schemaName\", 3,\n+                    new DataTypeDescriptor(TypeId.getBuiltInTypeId(Types.DECIMAL), true, 10),\n+                    true, true, true)\n+            );\n+        }\n+        public static GenericColumnDescriptor sample2() {\n+            return new GenericColumnDescriptor(new CustomResultColumnDescriptor(\n+                    \"sample2name\", \"atable\", \"SPLICE\", 9,\n+                    new DataTypeDescriptor(TypeId.getBuiltInTypeId(Types.DOUBLE), false, 5),\n+                    false, false, false)\n+            );\n+        }\n+\n+        public static void assertEquals(ResultColumnDescriptor rcd1, ResultColumnDescriptor rcd2)\n+        {\n+            Assert.assertEquals(rcd1.getSourceSchemaName(), rcd2.getSourceSchemaName());\n+            Assert.assertEquals(rcd1.getSourceTableName(), rcd2.getSourceTableName());\n+            Assert.assertEquals(rcd1.getName(), rcd2.getName());\n+\n+            Assert.assertEquals(rcd1.getType(), rcd2.getType());\n+            Assert.assertEquals(rcd1.getColumnPosition(), rcd2.getColumnPosition());\n+            Assert.assertEquals(rcd1.isAutoincrement(), rcd2.isAutoincrement());\n+            Assert.assertEquals(rcd1.updatableByCursor(), rcd2.updatableByCursor());\n+\n+            // check this in DB-10582\n+            // Assert.assertEquals(rcd1.hasGenerationClause(), rcd2.hasGenerationClause());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ea6b4fc1eedf667a6f28a2de634ae17772182ae"}, "originalPosition": 110}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3NTA2Nzk0", "url": "https://github.com/splicemachine/spliceengine/pull/4380#pullrequestreview-517506794", "createdAt": "2020-10-27T09:38:20Z", "commit": {"oid": "5ea6b4fc1eedf667a6f28a2de634ae17772182ae"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwOTozODoyMVrOHozBLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwOTozODoyMVrOHozBLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU0MDk3Mg==", "bodyText": "Yes, this is strange, here is an example of ConstantAction implementation that doesn't implement the Externalizable interface", "url": "https://github.com/splicemachine/spliceengine/pull/4380#discussion_r512540972", "createdAt": "2020-10-27T09:38:21Z", "author": {"login": "hatyo"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/GenericStorablePreparedStatement.java", "diffHunk": "@@ -147,12 +148,15 @@ public ExecPreparedStatement getClone() throws StandardException {\n     //\n     /////////////////////////////////////////////////////////////\n \n+    @SuppressFBWarnings(\"DMI_NONSERIALIZABLE_OBJECT_WRITTEN\") // todo in DB-10583\n     @Override\n     public void writeExternal(ObjectOutput out) throws IOException {\n+\n+        // DANGER: do NOT change this serialization unless you have an upgrade script, see DB-10566\n         out.writeObject(getCursorInfo());\n         out.writeBoolean(needsSavepoint());\n         out.writeBoolean(isAtomic);\n-        out.writeObject(executionConstants);\n+        out.writeObject(executionConstants); // DB-10583", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ea6b4fc1eedf667a6f28a2de634ae17772182ae"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3NTA5OTEy", "url": "https://github.com/splicemachine/spliceengine/pull/4380#pullrequestreview-517509912", "createdAt": "2020-10-27T09:41:54Z", "commit": {"oid": "5ea6b4fc1eedf667a6f28a2de634ae17772182ae"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NzE5NzM5", "url": "https://github.com/splicemachine/spliceengine/pull/4380#pullrequestreview-518719739", "createdAt": "2020-10-28T14:25:07Z", "commit": {"oid": "5ea6b4fc1eedf667a6f28a2de634ae17772182ae"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5MzQ1NjMx", "url": "https://github.com/splicemachine/spliceengine/pull/4380#pullrequestreview-519345631", "createdAt": "2020-10-29T05:40:52Z", "commit": {"oid": "5ea6b4fc1eedf667a6f28a2de634ae17772182ae"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9045a16bc2bd99dc3db874dbea707711d69bc450", "author": {"user": {"login": "martinrupp", "name": "Martin Rupp"}}, "url": "https://github.com/splicemachine/spliceengine/commit/9045a16bc2bd99dc3db874dbea707711d69bc450", "committedDate": "2020-10-29T10:44:03Z", "message": "Merge remote-tracking branch 'origin/master' into DB-10580"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e488e8b3433a5fc8249e503c818e8eabb3aa6422", "author": {"user": {"login": "martinrupp", "name": "Martin Rupp"}}, "url": "https://github.com/splicemachine/spliceengine/commit/e488e8b3433a5fc8249e503c818e8eabb3aa6422", "committedDate": "2020-10-29T21:20:38Z", "message": "Merge remote-tracking branch 'origin/master' into DB-10580"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1076, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}