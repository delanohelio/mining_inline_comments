{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxNDkxMDMz", "number": 4264, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwOToyMDoxMFrOEs8j6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwOToyOTo1M1rOEs81Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTY1MDM0OnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/sqlgrammar.jj", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwOToyMDoxMFrOHgdaLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwOToyOTozMVrOHhKZAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc5ODMxOA==", "bodyText": "Should that be a reserved keyword? I would rather have added it in the non reserved keyword list.", "url": "https://github.com/splicemachine/spliceengine/pull/4264#discussion_r503798318", "createdAt": "2020-10-13T09:20:10Z", "author": {"login": "arnaud-splice"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/sqlgrammar.jj", "diffHunk": "@@ -18002,6 +18038,7 @@ reservedKeyword() :\n |    tok = <XMLSERIALIZE>\n |    tok = <XMLEXISTS>\n |    tok = <XMLQUERY>\n+|    tok = <SPLIT_PART>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86354332834113f4ce311033a2396933ef657733"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUzNTI5Nw==", "bodyText": "done", "url": "https://github.com/splicemachine/spliceengine/pull/4264#discussion_r504535297", "createdAt": "2020-10-14T09:29:31Z", "author": {"login": "ipraznik-splice"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/sqlgrammar.jj", "diffHunk": "@@ -18002,6 +18038,7 @@ reservedKeyword() :\n |    tok = <XMLSERIALIZE>\n |    tok = <XMLEXISTS>\n |    tok = <XMLQUERY>\n+|    tok = <SPLIT_PART>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc5ODMxOA=="}, "originalCommit": {"oid": "86354332834113f4ce311033a2396933ef657733"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTY1MDg4OnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/iapi/types/SQLChar.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwOToyMDoxNlrOHgdadQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwOToyOTozOFrOHhKZZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc5ODM4OQ==", "bodyText": "what happens if partIndex is negative?", "url": "https://github.com/splicemachine/spliceengine/pull/4264#discussion_r503798389", "createdAt": "2020-10-13T09:20:16Z", "author": {"login": "hatyo"}, "path": "db-engine/src/main/java/com/splicemachine/db/iapi/types/SQLChar.java", "diffHunk": "@@ -2644,6 +2645,57 @@ public ConcatableDataValue substring(\n         return stringResult;\n     }\n \n+    /**\n+     * The SQL split_part() is used to split a given string based on a delimiter and pick out the desired field from the string, start from the left of the string.\n+     *\n+     * @param delimiter the delimiter of the defined string\n+     * @param fieldNumber number of a result field\n+     * @param result The result of a previous call to this method, null if not called yet.\n+     *\n+     * @return  A StringDataValue containing the result of the split_part()\n+     *\n+     * @exception StandardException     Thrown on error\n+     */\n+    public StringDataValue split_part(\n+            StringDataValue delimiter,\n+            NumberDataValue fieldNumber,\n+            StringDataValue result)\n+            throws StandardException\n+    {\n+        StringDataValue stringResult;\n+\n+        if (result == null)\n+        {\n+            result = getNewVarchar();\n+        }\n+\n+        stringResult = (StringDataValue) result;\n+\n+        // The result is null if the receiver (this) is null\n+        // or either operand is null.\n+\n+        if (this.isNull() ||\n+                delimiter == null || delimiter.isNull() || delimiter.getString() == null ||\n+                fieldNumber == null || fieldNumber.isNull())\n+        {\n+            stringResult.setToNull();\n+            return stringResult;\n+        }\n+\n+        String valueParts[] = getString().split(Pattern.quote(delimiter.getString()));\n+        int partIndex = fieldNumber.getInt();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86354332834113f4ce311033a2396933ef657733"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUzNTM5OA==", "bodyText": "done", "url": "https://github.com/splicemachine/spliceengine/pull/4264#discussion_r504535398", "createdAt": "2020-10-14T09:29:38Z", "author": {"login": "ipraznik-splice"}, "path": "db-engine/src/main/java/com/splicemachine/db/iapi/types/SQLChar.java", "diffHunk": "@@ -2644,6 +2645,57 @@ public ConcatableDataValue substring(\n         return stringResult;\n     }\n \n+    /**\n+     * The SQL split_part() is used to split a given string based on a delimiter and pick out the desired field from the string, start from the left of the string.\n+     *\n+     * @param delimiter the delimiter of the defined string\n+     * @param fieldNumber number of a result field\n+     * @param result The result of a previous call to this method, null if not called yet.\n+     *\n+     * @return  A StringDataValue containing the result of the split_part()\n+     *\n+     * @exception StandardException     Thrown on error\n+     */\n+    public StringDataValue split_part(\n+            StringDataValue delimiter,\n+            NumberDataValue fieldNumber,\n+            StringDataValue result)\n+            throws StandardException\n+    {\n+        StringDataValue stringResult;\n+\n+        if (result == null)\n+        {\n+            result = getNewVarchar();\n+        }\n+\n+        stringResult = (StringDataValue) result;\n+\n+        // The result is null if the receiver (this) is null\n+        // or either operand is null.\n+\n+        if (this.isNull() ||\n+                delimiter == null || delimiter.isNull() || delimiter.getString() == null ||\n+                fieldNumber == null || fieldNumber.isNull())\n+        {\n+            stringResult.setToNull();\n+            return stringResult;\n+        }\n+\n+        String valueParts[] = getString().split(Pattern.quote(delimiter.getString()));\n+        int partIndex = fieldNumber.getInt();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc5ODM4OQ=="}, "originalCommit": {"oid": "86354332834113f4ce311033a2396933ef657733"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTY5NDkwOnYy", "diffSide": "RIGHT", "path": "splice_machine/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/TernaryOperationIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwOToyOTo1M1rOHgd0vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwOToyOTo0N1rOHhKZvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgwNTExOQ==", "bodyText": "Could you please rewrite:\nString.format(\"select split_part(e, ' ', %d), e from \", fieldNumber) + tableWatcherB\nto:\nString.format(\"select split_part(e, ' ', %d), e from %s\", fieldNumber, tableWatcherB)", "url": "https://github.com/splicemachine/spliceengine/pull/4264#discussion_r503805119", "createdAt": "2020-10-13T09:29:53Z", "author": {"login": "hatyo"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/TernaryOperationIT.java", "diffHunk": "@@ -484,5 +481,49 @@ public void testSTRIPNegative() throws Exception {\n             Assert.assertTrue(\"Unexpected error code: \" + e.getSQLState(),  SQLState.LANG_SYNTAX_ERROR.startsWith(e.getSQLState()));\n         }\n     }\n+\n+    private void executeAndCheckSplitPart(int fieldNumber) throws SQLException {\n+        int count = 0;\n+        String sCell1 = null;\n+        String sCell2 = null;\n+        ResultSet rs;\n+\n+        rs = methodWatcher.executeQuery(String.format(\"select split_part(e, ' ', %d), e from \", fieldNumber) + tableWatcherB);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86354332834113f4ce311033a2396933ef657733"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUzNTQ4Nw==", "bodyText": "done", "url": "https://github.com/splicemachine/spliceengine/pull/4264#discussion_r504535487", "createdAt": "2020-10-14T09:29:47Z", "author": {"login": "ipraznik-splice"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/TernaryOperationIT.java", "diffHunk": "@@ -484,5 +481,49 @@ public void testSTRIPNegative() throws Exception {\n             Assert.assertTrue(\"Unexpected error code: \" + e.getSQLState(),  SQLState.LANG_SYNTAX_ERROR.startsWith(e.getSQLState()));\n         }\n     }\n+\n+    private void executeAndCheckSplitPart(int fieldNumber) throws SQLException {\n+        int count = 0;\n+        String sCell1 = null;\n+        String sCell2 = null;\n+        ResultSet rs;\n+\n+        rs = methodWatcher.executeQuery(String.format(\"select split_part(e, ' ', %d), e from \", fieldNumber) + tableWatcherB);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgwNTExOQ=="}, "originalCommit": {"oid": "86354332834113f4ce311033a2396933ef657733"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2863, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}