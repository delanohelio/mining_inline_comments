{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyNzM4MTY3", "number": 4281, "title": "DB-9010 implement FK ON DELETE CASCADE", "bodyText": "In this PR we provide support to foreign key ON DELETE CASCADE. The write pipeline is extended in a way that allows executing recursive cascading deletes, self-referencing foreign keys are also covered and support recursive cascading deletes.", "createdAt": "2020-10-13T19:29:22Z", "url": "https://github.com/splicemachine/spliceengine/pull/4281", "merged": true, "mergeCommit": {"oid": "197e199fd9209e203e72b04ce70b869ccffb4970"}, "closed": true, "closedAt": "2020-10-16T19:33:05Z", "author": {"login": "hatyo"}, "timelineItems": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdQjbMMAH2gAyNTAyNzM4MTY3OjQ4OGQ0NDU4MjIyZGE5ZjIxYTA2N2M5NjY4YTc2MDE0ZmQ4MzkzZmI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdTHSljAFqTUxMDUyNzU4NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "488d4458222da9f21a067c9668a76014fd8393fb", "author": {"user": {"login": "hatyo", "name": "Youssef Hatem"}}, "url": "https://github.com/splicemachine/spliceengine/commit/488d4458222da9f21a067c9668a76014fd8393fb", "committedDate": "2020-10-08T15:36:24Z", "message": "DB-9009 implement FK ON DELETE SET NULL."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f113738d59d877946937c0988bf2b6d11715dec", "author": {"user": {"login": "hatyo", "name": "Youssef Hatem"}}, "url": "https://github.com/splicemachine/spliceengine/commit/8f113738d59d877946937c0988bf2b6d11715dec", "committedDate": "2020-10-08T15:37:02Z", "message": "DB-9009 refactoring and cleaning up."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bed852b3949b015f6ddea7f6d489b7c407957c7d", "author": {"user": {"login": "hatyo", "name": "Youssef Hatem"}}, "url": "https://github.com/splicemachine/spliceengine/commit/bed852b3949b015f6ddea7f6d489b7c407957c7d", "committedDate": "2020-10-08T17:04:42Z", "message": "DB-9009 address spotbugs issues."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9fa652767e34e1fe0a92ba8658619cb4819badd", "author": {"user": {"login": "hatyo", "name": "Youssef Hatem"}}, "url": "https://github.com/splicemachine/spliceengine/commit/d9fa652767e34e1fe0a92ba8658619cb4819badd", "committedDate": "2020-10-08T18:02:47Z", "message": "DB-9009 make FK tests green."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e868cbfa2c6bc8efd7a4b92901b22ab8185debcb", "author": {"user": {"login": "hatyo", "name": "Youssef Hatem"}}, "url": "https://github.com/splicemachine/spliceengine/commit/e868cbfa2c6bc8efd7a4b92901b22ab8185debcb", "committedDate": "2020-10-08T19:55:26Z", "message": "DB-9009 add tests and fixes.\n\n- add tests for ON DELETE SET NULL.\n- fix self-referencing FK with ON DELETE SET NULL.\n- other smaller fixes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be8ecb2293a12ebfaec9b4bf49bb0cc0729e47ea", "author": {"user": {"login": "hatyo", "name": "Youssef Hatem"}}, "url": "https://github.com/splicemachine/spliceengine/commit/be8ecb2293a12ebfaec9b4bf49bb0cc0729e47ea", "committedDate": "2020-10-08T19:57:16Z", "message": "Merge remote-tracking branch 'origin/master' into DB-9009"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb96fc91fb918b8bef0c2a2a06073618ac3cd914", "author": {"user": {"login": "hatyo", "name": "Youssef Hatem"}}, "url": "https://github.com/splicemachine/spliceengine/commit/bb96fc91fb918b8bef0c2a2a06073618ac3cd914", "committedDate": "2020-10-08T20:15:10Z", "message": "DB-10435 Add test."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f557ff1d7eb3edf6a99bccc527abcde6e30f203a", "author": {"user": {"login": "hatyo", "name": "Youssef Hatem"}}, "url": "https://github.com/splicemachine/spliceengine/commit/f557ff1d7eb3edf6a99bccc527abcde6e30f203a", "committedDate": "2020-10-12T07:00:07Z", "message": "Merge remote-tracking branch 'origin/master' into DB-9009"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a112b13605964b374f99a0f71b4bf8358d639a9b", "author": {"user": {"login": "hatyo", "name": "Youssef Hatem"}}, "url": "https://github.com/splicemachine/spliceengine/commit/a112b13605964b374f99a0f71b4bf8358d639a9b", "committedDate": "2020-10-12T11:28:41Z", "message": "DB-9009 address comments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a67c4e7532a033098c2dbe79e1c9cd3a756eebac", "author": {"user": {"login": "hatyo", "name": "Youssef Hatem"}}, "url": "https://github.com/splicemachine/spliceengine/commit/a67c4e7532a033098c2dbe79e1c9cd3a756eebac", "committedDate": "2020-10-12T11:36:23Z", "message": "Merge remote-tracking branch 'origin/master' into DB-9009"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30c5d9c6f571c6a4af826e0a9e395b86504ce392", "author": {"user": {"login": "hatyo", "name": "Youssef Hatem"}}, "url": "https://github.com/splicemachine/spliceengine/commit/30c5d9c6f571c6a4af826e0a9e395b86504ce392", "committedDate": "2020-10-12T14:28:35Z", "message": "DB-9009 fix spotbugs issues."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0e78c7485a1d769a625c91f05f63814e9e7b4f6", "author": {"user": {"login": "hatyo", "name": "Youssef Hatem"}}, "url": "https://github.com/splicemachine/spliceengine/commit/a0e78c7485a1d769a625c91f05f63814e9e7b4f6", "committedDate": "2020-10-13T19:07:34Z", "message": "DB-9009 address comments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e80b0bb7b957de7c5eeac040ef3f431c2b66952a", "author": {"user": {"login": "hatyo", "name": "Youssef Hatem"}}, "url": "https://github.com/splicemachine/spliceengine/commit/e80b0bb7b957de7c5eeac040ef3f431c2b66952a", "committedDate": "2020-10-13T19:24:21Z", "message": "DB-9010 suppport foreign key ON DELETE CASCADE."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3OTg0ODUw", "url": "https://github.com/splicemachine/spliceengine/pull/4281#pullrequestreview-507984850", "createdAt": "2020-10-14T04:24:33Z", "commit": {"oid": "e80b0bb7b957de7c5eeac040ef3f431c2b66952a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNDoyNDozM1rOHhBt0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNToyNjoxMFrOHhCtQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM5MzE2OA==", "bodyText": "What impact will this change have?", "url": "https://github.com/splicemachine/spliceengine/pull/4281#discussion_r504393168", "createdAt": "2020-10-14T04:24:33Z", "author": {"login": "jyuanca"}, "path": "pipeline_api/src/main/java/com/splicemachine/pipeline/config/SharedWriteConfiguration.java", "diffHunk": "@@ -105,7 +105,7 @@ public WriteResponse partialFailure(BulkWriteResult result, BulkWrite request) t\n                         context.failed(main, mutationResult);\n                     }\n                 }\n-                return WriteResponse.IGNORE;\n+                return WriteResponse.THROW_ERROR;\n             }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e80b0bb7b957de7c5eeac040ef3f431c2b66952a"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM5NDQwNw==", "bodyText": "currentRowKey is not used", "url": "https://github.com/splicemachine/spliceengine/pull/4281#discussion_r504394407", "createdAt": "2020-10-14T04:29:26Z", "author": {"login": "jyuanca"}, "path": "pipeline_api/src/main/java/com/splicemachine/pipeline/context/PipelineWriteContext.java", "diffHunk": "@@ -124,14 +124,21 @@ public void result(KVPair put, WriteResult result) {\n \n     @Override\n     public void result(byte[] resultRowKey, WriteResult result) {\n+        boolean added = false;\n         for (KVPair kvPair : resultsMap.keySet()) {\n             byte[] currentRowKey = kvPair.getRowKey();\n             if (Arrays.equals(currentRowKey, resultRowKey)) {\n                 resultsMap.put(kvPair, result);\n-                return;\n+                added = true;\n+                break;\n+            }\n+        }\n+        if (!added) {\n+            for (KVPair kvPair : resultsMap.keySet()) {\n+                byte[] currentRowKey = kvPair.getRowKey();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e80b0bb7b957de7c5eeac040ef3f431c2b66952a"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQwOTQwOQ==", "bodyText": "Can you comment the magic number 2?", "url": "https://github.com/splicemachine/spliceengine/pull/4281#discussion_r504409409", "createdAt": "2020-10-14T05:26:10Z", "author": {"login": "jyuanca"}, "path": "splice_machine/src/main/java/com/splicemachine/pipeline/foreignkey/actions/OnDeleteAbstractAction.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*\n+ * Copyright (c) 2012 - 2020 Splice Machine, Inc.\n+ *\n+ * This file is part of Splice Machine.\n+ * Splice Machine is free software: you can redistribute it and/or modify it under the terms of the\n+ * GNU Affero General Public License as published by the Free Software Foundation, either\n+ * version 3, or (at your option) any later version.\n+ * Splice Machine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ * See the GNU Affero General Public License for more details.\n+ * You should have received a copy of the GNU Affero General Public License along with Splice Machine.\n+ * If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.splicemachine.pipeline.foreignkey.actions;\n+\n+import com.carrotsearch.hppc.ObjectObjectHashMap;\n+import com.splicemachine.db.iapi.error.StandardException;\n+import com.splicemachine.db.iapi.services.io.StoredFormatIds;\n+import com.splicemachine.ddl.DDLMessage;\n+import com.splicemachine.derby.ddl.DDLUtils;\n+import com.splicemachine.derby.utils.marshall.dvd.TypeProvider;\n+import com.splicemachine.derby.utils.marshall.dvd.VersionedSerializers;\n+import com.splicemachine.encoding.Encoding;\n+import com.splicemachine.encoding.MultiFieldDecoder;\n+import com.splicemachine.kvpair.KVPair;\n+import com.splicemachine.pipeline.callbuffer.CallBuffer;\n+import com.splicemachine.pipeline.client.WriteResult;\n+import com.splicemachine.pipeline.context.WriteContext;\n+import com.splicemachine.pipeline.foreignkey.ForeignKeyViolationProcessor;\n+import com.splicemachine.primitives.Bytes;\n+import com.splicemachine.si.api.data.TxnOperationFactory;\n+import com.splicemachine.si.api.txn.TxnView;\n+import com.splicemachine.si.impl.SimpleTxnFilter;\n+import com.splicemachine.si.impl.driver.SIDriver;\n+import com.splicemachine.si.impl.readresolve.NoOpReadResolver;\n+import com.splicemachine.si.impl.txn.ActiveWriteTxn;\n+import com.splicemachine.si.impl.txn.WritableTxn;\n+import com.splicemachine.storage.*;\n+import com.splicemachine.utils.Pair;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+public abstract class OnDeleteAbstractAction extends Action {\n+\n+    private static final int MAX_BUFFER_SIZE = 1000;\n+\n+    protected final DDLMessage.FKConstraintInfo constraintInfo;\n+    protected final ObjectObjectHashMap<KVPair, KVPair> mutationBuffer;\n+    protected final CallBuffer<KVPair> pipelineBuffer;\n+    Partition indexTable;\n+    private final TxnOperationFactory txnOperationFactory;\n+\n+    private final ForeignKeyViolationProcessor violationProcessor;\n+\n+    public OnDeleteAbstractAction(Long backingIndexConglomId,\n+                                  DDLMessage.FKConstraintInfo constraintInfo,\n+                                  WriteContext writeContext,\n+                                  TxnOperationFactory txnOperationFactory, ForeignKeyViolationProcessor violationProcessor) throws Exception {\n+        super(constraintInfo.getTable().getConglomerate(), backingIndexConglomId);\n+        this.txnOperationFactory = txnOperationFactory;\n+        assert childBaseTableConglomId != null;\n+        assert backingIndexConglomId != null;\n+        assert violationProcessor != null;\n+        this.constraintInfo = constraintInfo;\n+        this.mutationBuffer = new ObjectObjectHashMap<>();\n+        this.pipelineBuffer = writeContext.getSharedWriteBuffer(\n+                DDLUtils.getIndexConglomBytes(childBaseTableConglomId),\n+                this.mutationBuffer,\n+                MAX_BUFFER_SIZE * 2 + 10,\n+                true,\n+                writeContext.getTxn(),\n+                writeContext.getToken());\n+        this.indexTable = null;\n+        this.violationProcessor = violationProcessor;\n+    }\n+\n+    /*\n+     * The way prefix keys work is that longer keys sort after shorter keys. We\n+     * are already starting exactly where we want to be, and we want to end as soon\n+     * as we hit a record which is not this key.\n+     *\n+     * Historically, we did this by using an HBase PrefixFilter. We can do that again,\n+     * but it's a bit of a pain to make that work in an architecture-independent\n+     * way (we would need to implement a version of that for other architectures,\n+     * for example. It's much easier for us to just make use of row key sorting\n+     * to do the job for us.\n+     *\n+     * We start where we want, and we need to end as soon as we run off that. The\n+     * first key which is higher than the start key is the start key as a prefix followed\n+     * by 0x00 (in unsigned sort order). Therefore, we make the end key\n+     * [startKey | 0x00].\n+     */\n+    private static DataScan prepareScan(TxnOperationFactory factory, KVPair needle) {\n+        byte[] startKey = needle.getRowKey();\n+        byte[] stopKey = Bytes.unsignedCopyAndIncrement(startKey); // +1 from startKey.\n+        DataScan scan = factory.newDataScan(null); // Non-Transactional, will resolve on this side\n+        return scan.startKey(startKey).stopKey(stopKey);\n+    }\n+\n+    private static Pair<SimpleTxnFilter, SimpleTxnFilter> prepareScanFilters(TxnView txnView, long indexConglomerateId) throws IOException {\n+        SimpleTxnFilter readUncommittedFilter, readCommittedFilter;\n+        if (txnView instanceof ActiveWriteTxn) {\n+            readCommittedFilter = new SimpleTxnFilter(Long.toString(indexConglomerateId), ((ActiveWriteTxn) txnView).getReadCommittedActiveTxn(), NoOpReadResolver.INSTANCE, SIDriver.driver().getTxnStore());\n+            readUncommittedFilter = new SimpleTxnFilter(Long.toString(indexConglomerateId), ((ActiveWriteTxn) txnView).getReadUncommittedActiveTxn(), NoOpReadResolver.INSTANCE, SIDriver.driver().getTxnStore());\n+\n+        } else if (txnView instanceof WritableTxn) {\n+            readCommittedFilter = new SimpleTxnFilter(Long.toString(indexConglomerateId), ((WritableTxn) txnView).getReadCommittedActiveTxn(), NoOpReadResolver.INSTANCE, SIDriver.driver().getTxnStore());\n+            readUncommittedFilter = new SimpleTxnFilter(Long.toString(indexConglomerateId), ((WritableTxn) txnView).getReadUncommittedActiveTxn(), NoOpReadResolver.INSTANCE, SIDriver.driver().getTxnStore());\n+        } else {\n+            throw new IOException(\"invalidTxn,\");\n+        }\n+        return Pair.newPair(readCommittedFilter, readUncommittedFilter);\n+    }\n+\n+    private byte[] isVisible(List<DataCell> next, SimpleTxnFilter txnFilter) throws IOException {\n+        int cellCount = next.size();\n+        for(DataCell dc:next){\n+            DataFilter.ReturnCode rC = txnFilter.filterCell(dc);\n+            switch(rC){\n+                case NEXT_ROW:\n+                    return null; //the entire row is filtered\n+                case SKIP:\n+                case NEXT_COL:\n+                case SEEK:\n+                    cellCount--; //the cell is filtered\n+                    break;\n+                case INCLUDE:\n+                case INCLUDE_AND_NEXT_COL: //the cell is included\n+                default:\n+                    break;\n+            }\n+        }\n+        if(cellCount > 0) {\n+            return next.get(0).key();\n+        }\n+        return null;\n+    }\n+\n+    private Partition getTable() throws IOException {\n+        if(indexTable == null) {\n+            indexTable = SIDriver.driver().getTableFactory().getTable(Long.toString((backingIndexConglomId)));\n+        }\n+        return indexTable;\n+    }\n+\n+    protected abstract WriteResult handleExistingRow(byte[] indexRow, byte[] sourceRowKey) throws Exception;\n+\n+    protected static byte[] toChildBaseRowId(byte[] indexRowId, DDLMessage.FKConstraintInfo fkConstraintInfo) throws StandardException {\n+        MultiFieldDecoder multiFieldDecoder = MultiFieldDecoder.create();\n+        TypeProvider typeProvider = VersionedSerializers.typesForVersion(fkConstraintInfo.getParentTableVersion());\n+        int position = 0;\n+        multiFieldDecoder.set(indexRowId);\n+        for (int i = 0; i < fkConstraintInfo.getFormatIdsCount(); i++) {\n+            if (multiFieldDecoder.nextIsNull()) {\n+                throw StandardException.newException(String.format(\"unexpected index rowid format %s\", Bytes.toHex(indexRowId)));\n+            }\n+            if (fkConstraintInfo.getFormatIds(i) == StoredFormatIds.SQL_DOUBLE_ID) {\n+                position += multiFieldDecoder.skipDouble();\n+            } else if (fkConstraintInfo.getFormatIds(i) == StoredFormatIds.SQL_REAL_ID) {\n+                position += multiFieldDecoder.skipFloat();\n+            } else if (typeProvider.isScalar(fkConstraintInfo.getFormatIds(i))) {\n+                position += multiFieldDecoder.skipLong();\n+            } else {\n+                position += multiFieldDecoder.skip();\n+            }\n+        }\n+        int lastKeyIndex = position - 2;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e80b0bb7b957de7c5eeac040ef3f431c2b66952a"}, "originalPosition": 170}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c11fcb6a3f13a31c51693a16836cfbaebde324fa", "author": {"user": {"login": "hatyo", "name": "Youssef Hatem"}}, "url": "https://github.com/splicemachine/spliceengine/commit/c11fcb6a3f13a31c51693a16836cfbaebde324fa", "committedDate": "2020-10-14T10:29:44Z", "message": "DB-9010 address comments."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4MjM0MTY3", "url": "https://github.com/splicemachine/spliceengine/pull/4281#pullrequestreview-508234167", "createdAt": "2020-10-14T11:06:16Z", "commit": {"oid": "e80b0bb7b957de7c5eeac040ef3f431c2b66952a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMTowNjoxN1rOHhNxow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMTowNjoxN1rOHhNxow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU5MDc1NQ==", "bodyText": "I don't understand this change, if the rowKey is found it's updated with the result, otherwise all rows are updated with the result? What's the rationale behind it?", "url": "https://github.com/splicemachine/spliceengine/pull/4281#discussion_r504590755", "createdAt": "2020-10-14T11:06:17Z", "author": {"login": "dgomezferro"}, "path": "pipeline_api/src/main/java/com/splicemachine/pipeline/context/PipelineWriteContext.java", "diffHunk": "@@ -124,14 +124,21 @@ public void result(KVPair put, WriteResult result) {\n \n     @Override\n     public void result(byte[] resultRowKey, WriteResult result) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e80b0bb7b957de7c5eeac040ef3f431c2b66952a"}, "originalPosition": 3}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1539ea9be372153a1391a2091fd556bc212961b0", "author": {"user": {"login": "hatyo", "name": "Youssef Hatem"}}, "url": "https://github.com/splicemachine/spliceengine/commit/1539ea9be372153a1391a2091fd556bc212961b0", "committedDate": "2020-10-14T11:10:28Z", "message": "DB-9010 address spotbugs issues."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d48e0db750256adca9c796ea4096bef827b7e44b", "author": {"user": {"login": "hatyo", "name": "Youssef Hatem"}}, "url": "https://github.com/splicemachine/spliceengine/commit/d48e0db750256adca9c796ea4096bef827b7e44b", "committedDate": "2020-10-14T13:50:24Z", "message": "Merge remote-tracking branch 'origin/master' into DB-9010"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4Njc0NjI2", "url": "https://github.com/splicemachine/spliceengine/pull/4281#pullrequestreview-508674626", "createdAt": "2020-10-14T19:46:44Z", "commit": {"oid": "d48e0db750256adca9c796ea4096bef827b7e44b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4ODY0MDQz", "url": "https://github.com/splicemachine/spliceengine/pull/4281#pullrequestreview-508864043", "createdAt": "2020-10-15T00:45:47Z", "commit": {"oid": "d48e0db750256adca9c796ea4096bef827b7e44b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5MTA4OTY1", "url": "https://github.com/splicemachine/spliceengine/pull/4281#pullrequestreview-509108965", "createdAt": "2020-10-15T07:52:40Z", "commit": {"oid": "e80b0bb7b957de7c5eeac040ef3f431c2b66952a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNzo1Mjo0MVrOHh4lBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNzo1Mjo0MVrOHh4lBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI5MjAzNw==", "bodyText": "I think we need to map the lower level failure to the specific rows that failed at this level, and keep the same code we had here.", "url": "https://github.com/splicemachine/spliceengine/pull/4281#discussion_r505292037", "createdAt": "2020-10-15T07:52:41Z", "author": {"login": "dgomezferro"}, "path": "pipeline_api/src/main/java/com/splicemachine/pipeline/context/PipelineWriteContext.java", "diffHunk": "@@ -124,14 +124,21 @@ public void result(KVPair put, WriteResult result) {\n \n     @Override\n     public void result(byte[] resultRowKey, WriteResult result) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU5MDc1NQ=="}, "originalCommit": {"oid": "e80b0bb7b957de7c5eeac040ef3f431c2b66952a"}, "originalPosition": 3}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c435c1e10243fb519045fa35595ea04e50a9054d", "author": {"user": {"login": "hatyo", "name": "Youssef Hatem"}}, "url": "https://github.com/splicemachine/spliceengine/commit/c435c1e10243fb519045fa35595ea04e50a9054d", "committedDate": "2020-10-15T20:51:20Z", "message": "DB-9010 address comments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "206b21a1395e4474043393cbd58b10fbe9a9c9fe", "author": {"user": {"login": "hatyo", "name": "Youssef Hatem"}}, "url": "https://github.com/splicemachine/spliceengine/commit/206b21a1395e4474043393cbd58b10fbe9a9c9fe", "committedDate": "2020-10-16T12:27:57Z", "message": "DB-9010 fix bugs and add more tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be5e7ff9dad1f9ba10aac0ff227fff971081997b", "author": {"user": {"login": "hatyo", "name": "Youssef Hatem"}}, "url": "https://github.com/splicemachine/spliceengine/commit/be5e7ff9dad1f9ba10aac0ff227fff971081997b", "committedDate": "2020-10-16T14:00:05Z", "message": "Merge remote-tracking branch 'origin/master' into DB-9010"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwNTI3NTg0", "url": "https://github.com/splicemachine/spliceengine/pull/4281#pullrequestreview-510527584", "createdAt": "2020-10-16T14:31:26Z", "commit": {"oid": "be5e7ff9dad1f9ba10aac0ff227fff971081997b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1097, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}