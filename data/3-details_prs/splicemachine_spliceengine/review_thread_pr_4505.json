{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2ODczOTA2", "number": 4505, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNzoxMTozOFrOE2Ky0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNzozNDozN1rOE2LSwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MjM1NDA5OnYy", "diffSide": "RIGHT", "path": "splice_machine/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/FunctionIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNzoxMTozOFrOHu2cQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNzoyOTowMVrOHu3CVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg4ODUxNQ==", "bodyText": "why not use SQLState.LANG_INVALID_CAST", "url": "https://github.com/splicemachine/spliceengine/pull/4505#discussion_r518888515", "createdAt": "2020-11-06T17:11:38Z", "author": {"login": "martinrupp"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/FunctionIT.java", "diffHunk": "@@ -725,5 +726,46 @@ public void testDateTimeToCharVarcharConstants() throws Exception {\n             Assert.assertEquals(\"22018\", e.getSQLState());\n         }\n     }\n+\n+    @Test\n+    public void testCastToCharWithLength() throws Exception {\n+        try (ResultSet ignored = methodWatcher.executeQuery(\"select char(current date, 20)\")) {\n+            Assert.fail(\"expect failure since we cannot specify a length with something which is not a char/varchar\");\n+        } catch (SQLException e) {\n+            assertEquals(\"42846\", e.getSQLState());\n+            Assert.assertThat(e.getMessage(), containsString(\"Cannot set a length\"));\n+        }\n+        try (ResultSet ignored = methodWatcher.executeQuery(\"select char(42, 20)\")) {\n+            Assert.fail(\"expect failure since we cannot specify a length with something which is not a char/varchar\");\n+        } catch (SQLException e) {\n+            assertEquals(\"42846\", e.getSQLState());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6ed1a2e255df79e857fb4e4c78ca57282b8684e"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg5ODI2Mw==", "bodyText": "I'm using a variation of it. Same prefix number, but more comprehensive error message", "url": "https://github.com/splicemachine/spliceengine/pull/4505#discussion_r518898263", "createdAt": "2020-11-06T17:29:01Z", "author": {"login": "arnaud-splice"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/FunctionIT.java", "diffHunk": "@@ -725,5 +726,46 @@ public void testDateTimeToCharVarcharConstants() throws Exception {\n             Assert.assertEquals(\"22018\", e.getSQLState());\n         }\n     }\n+\n+    @Test\n+    public void testCastToCharWithLength() throws Exception {\n+        try (ResultSet ignored = methodWatcher.executeQuery(\"select char(current date, 20)\")) {\n+            Assert.fail(\"expect failure since we cannot specify a length with something which is not a char/varchar\");\n+        } catch (SQLException e) {\n+            assertEquals(\"42846\", e.getSQLState());\n+            Assert.assertThat(e.getMessage(), containsString(\"Cannot set a length\"));\n+        }\n+        try (ResultSet ignored = methodWatcher.executeQuery(\"select char(42, 20)\")) {\n+            Assert.fail(\"expect failure since we cannot specify a length with something which is not a char/varchar\");\n+        } catch (SQLException e) {\n+            assertEquals(\"42846\", e.getSQLState());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg4ODUxNQ=="}, "originalCommit": {"oid": "e6ed1a2e255df79e857fb4e4c78ca57282b8684e"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MjQyNjA5OnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/sqlgrammar.jj", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNzozMTo0N1rOHu3IaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNzo1MDozMFrOHu3u7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg5OTgxNg==", "bodyText": "Ah, now I see why the regression is there. Because they both start with <COMMA>, and the length one is shadowed. Thanks for the fix!", "url": "https://github.com/splicemachine/spliceengine/pull/4505#discussion_r518899816", "createdAt": "2020-11-06T17:31:47Z", "author": {"login": "ascend1"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/sqlgrammar.jj", "diffHunk": "@@ -9023,7 +9023,17 @@ ValueNode\n \n             return value;\n       }\n-     | charType = charOrVarchar() <LEFT_PAREN> operand = additiveExpression(null,0) [<COMMA> format = datetimeStringFormat()] [ <COMMA> length = length() ] <RIGHT_PAREN>\n+     |\n+     charType = charOrVarchar()\n+     <LEFT_PAREN>\n+     operand = additiveExpression(null,0)\n+     [\n+        <COMMA> (\n+            format = datetimeStringFormat()\n+        |\n+            length = length()\n+        )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6ed1a2e255df79e857fb4e4c78ca57282b8684e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkwOTY3OA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/splicemachine/spliceengine/pull/4505#discussion_r518909678", "createdAt": "2020-11-06T17:50:30Z", "author": {"login": "arnaud-splice"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/sqlgrammar.jj", "diffHunk": "@@ -9023,7 +9023,17 @@ ValueNode\n \n             return value;\n       }\n-     | charType = charOrVarchar() <LEFT_PAREN> operand = additiveExpression(null,0) [<COMMA> format = datetimeStringFormat()] [ <COMMA> length = length() ] <RIGHT_PAREN>\n+     |\n+     charType = charOrVarchar()\n+     <LEFT_PAREN>\n+     operand = additiveExpression(null,0)\n+     [\n+        <COMMA> (\n+            format = datetimeStringFormat()\n+        |\n+            length = length()\n+        )", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg5OTgxNg=="}, "originalCommit": {"oid": "e6ed1a2e255df79e857fb4e4c78ca57282b8684e"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MjQzNTg2OnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/CastNode.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNzozNDozN1rOHu3OOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNzo1NzoyNVrOHu39ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkwMTMwNA==", "bodyText": "I'm not sure if this is always fine. I wanted to do check here, but then there are cases where sourceCTI is null.", "url": "https://github.com/splicemachine/spliceengine/pull/4505#discussion_r518901304", "createdAt": "2020-11-06T17:34:37Z", "author": {"login": "ascend1"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/CastNode.java", "diffHunk": "@@ -320,6 +324,20 @@ else if (this.targetCharType == Types.VARCHAR)\n \n         bindCastNodeOnly();\n \n+        if (getTypeId().isCharOrVarChar()) {\n+            if (requestedStringLength != -1 && !sourceCTI.isCharOrVarChar()) {\n+                throw StandardException.newException(\n+                        SQLState.LANG_INVALID_CAST_TO_CHAR_WITH_LENGTH_NOT_FROM_CHAR,\n+                        sourceCTI.getSQLTypeName(),\n+                        getTypeId().getSQLTypeName());\n+            }\n+            if (dateToStringFormat != -1 && !sourceCTI.isDateTimeTimeStampTypeID()) {\n+                throw StandardException.newException(\n+                        SQLState.LANG_INVALID_CAST_TO_CHAR_WITH_FORMAT_NOT_FROM_DATE\n+                );\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6ed1a2e255df79e857fb4e4c78ca57282b8684e"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkwNjUyOQ==", "bodyText": "Do you know when that can be null?\nIn the meantime, I added a nullcheck", "url": "https://github.com/splicemachine/spliceengine/pull/4505#discussion_r518906529", "createdAt": "2020-11-06T17:44:41Z", "author": {"login": "arnaud-splice"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/CastNode.java", "diffHunk": "@@ -320,6 +324,20 @@ else if (this.targetCharType == Types.VARCHAR)\n \n         bindCastNodeOnly();\n \n+        if (getTypeId().isCharOrVarChar()) {\n+            if (requestedStringLength != -1 && !sourceCTI.isCharOrVarChar()) {\n+                throw StandardException.newException(\n+                        SQLState.LANG_INVALID_CAST_TO_CHAR_WITH_LENGTH_NOT_FROM_CHAR,\n+                        sourceCTI.getSQLTypeName(),\n+                        getTypeId().getSQLTypeName());\n+            }\n+            if (dateToStringFormat != -1 && !sourceCTI.isDateTimeTimeStampTypeID()) {\n+                throw StandardException.newException(\n+                        SQLState.LANG_INVALID_CAST_TO_CHAR_WITH_FORMAT_NOT_FROM_DATE\n+                );\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkwMTMwNA=="}, "originalCommit": {"oid": "e6ed1a2e255df79e857fb4e4c78ca57282b8684e"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkxMzQzOA==", "bodyText": "I moved line 367 and 368 out, then added a check like if (sourceJDBCTypeId == Types.TIMESTAMP && stringFormat >= 0) then throw (because DB2 doesn\u2019t accept datetime format for timestamp), and run tests, then there will be NPE.", "url": "https://github.com/splicemachine/spliceengine/pull/4505#discussion_r518913438", "createdAt": "2020-11-06T17:57:25Z", "author": {"login": "ascend1"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/CastNode.java", "diffHunk": "@@ -320,6 +324,20 @@ else if (this.targetCharType == Types.VARCHAR)\n \n         bindCastNodeOnly();\n \n+        if (getTypeId().isCharOrVarChar()) {\n+            if (requestedStringLength != -1 && !sourceCTI.isCharOrVarChar()) {\n+                throw StandardException.newException(\n+                        SQLState.LANG_INVALID_CAST_TO_CHAR_WITH_LENGTH_NOT_FROM_CHAR,\n+                        sourceCTI.getSQLTypeName(),\n+                        getTypeId().getSQLTypeName());\n+            }\n+            if (dateToStringFormat != -1 && !sourceCTI.isDateTimeTimeStampTypeID()) {\n+                throw StandardException.newException(\n+                        SQLState.LANG_INVALID_CAST_TO_CHAR_WITH_FORMAT_NOT_FROM_DATE\n+                );\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkwMTMwNA=="}, "originalCommit": {"oid": "e6ed1a2e255df79e857fb4e4c78ca57282b8684e"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2809, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}