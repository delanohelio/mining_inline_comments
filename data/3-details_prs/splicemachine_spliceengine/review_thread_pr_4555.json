{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5NTM5NTQy", "number": 4555, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMTozOTozN1rOE4H3ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMToxNDoyMlrOE41nAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3Mjg0NjM4OnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/sqlgrammar.jj", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMTozOTozN1rOHx27kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMTo0NzoyM1rOHyPmhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjA0MjI1OQ==", "bodyText": "Should we document that TRIG_<kind of a UUID> are reserved names for triggers?\nSame question for NT_<>", "url": "https://github.com/splicemachine/spliceengine/pull/4555#discussion_r522042259", "createdAt": "2020-11-12T11:39:37Z", "author": {"login": "arnaud-splice"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/sqlgrammar.jj", "diffHunk": "@@ -11599,6 +11665,115 @@ FromTable tableFactor() throws StandardException :\n                                 getContextManager());\n         return fromTable;\n     }\n+|\n+    fromTableType = fromTableType() <TABLE> <LEFT_PAREN> statement = preparableDMLDataStatement() <RIGHT_PAREN>\n+    [ optionalTableClauses = optionalTableProperties() ]  {\n+        boolean isOld = fromTableType.kind == OLD;\n+        boolean isFinalTable = fromTableType.kind == FINAL;\n+        dmlStatement = (DMLModStatementNode)statement;\n+        LanguageConnectionContext lcc = dmlStatement.getLanguageConnectionContext();\n+        tableName = dmlStatement.getTargetTableName();\n+        String uniqueId = java.util.UUID.randomUUID().toString().replaceAll(\"-\", \"_\").toUpperCase();\n+        String tempTriggerName = \"TRIG_\" + uniqueId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7df489b532d736ad44c90edca40f31c852cdad88"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ0NjQ2OQ==", "bodyText": "It doesn't matter what name we use here since the trigger and referenced table (NT_<>) are only visible to the executing query.  I could have just called these TRIGGER and NT, but having a really long name makes it clear that this is the temporary trigger, for debugging purposes.  I guess I could have used INTERNALLY_GENERATED_TRIGGER and FROM_TABLE_DML_REFERENCED_TABLE as names to make it clearer.", "url": "https://github.com/splicemachine/spliceengine/pull/4555#discussion_r522446469", "createdAt": "2020-11-12T21:47:23Z", "author": {"login": "msirek"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/sqlgrammar.jj", "diffHunk": "@@ -11599,6 +11665,115 @@ FromTable tableFactor() throws StandardException :\n                                 getContextManager());\n         return fromTable;\n     }\n+|\n+    fromTableType = fromTableType() <TABLE> <LEFT_PAREN> statement = preparableDMLDataStatement() <RIGHT_PAREN>\n+    [ optionalTableClauses = optionalTableProperties() ]  {\n+        boolean isOld = fromTableType.kind == OLD;\n+        boolean isFinalTable = fromTableType.kind == FINAL;\n+        dmlStatement = (DMLModStatementNode)statement;\n+        LanguageConnectionContext lcc = dmlStatement.getLanguageConnectionContext();\n+        tableName = dmlStatement.getTargetTableName();\n+        String uniqueId = java.util.UUID.randomUUID().toString().replaceAll(\"-\", \"_\").toUpperCase();\n+        String tempTriggerName = \"TRIG_\" + uniqueId;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjA0MjI1OQ=="}, "originalCommit": {"oid": "7df489b532d736ad44c90edca40f31c852cdad88"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3Mjk2NTExOnYy", "diffSide": "RIGHT", "path": "splice_machine/src/test/java/com/splicemachine/derby/test/framework/SpliceUnitTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMjoxMzoxM1rOHx4ENw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMTo1MToyMFrOHyPukg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjA2MDg1NQ==", "bodyText": "Cool helper! Minor suggestion:\nif you use try(ResultSet rs = method....) {, you can remove the finally section.", "url": "https://github.com/splicemachine/spliceengine/pull/4555#discussion_r522060855", "createdAt": "2020-11-12T12:13:13Z", "author": {"login": "arnaud-splice"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/test/framework/SpliceUnitTest.java", "diffHunk": "@@ -567,6 +567,31 @@ protected void testFail(String expectedErrorCode,\n         }\n     }\n \n+    protected void testFail(String expectedErrorCode, String sqlText, SpliceWatcher methodWatcher) throws Exception {\n+        ResultSet rs = null;\n+        try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7df489b532d736ad44c90edca40f31c852cdad88"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ0ODUzMA==", "bodyText": "Made the change.", "url": "https://github.com/splicemachine/spliceengine/pull/4555#discussion_r522448530", "createdAt": "2020-11-12T21:51:20Z", "author": {"login": "msirek"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/test/framework/SpliceUnitTest.java", "diffHunk": "@@ -567,6 +567,31 @@ protected void testFail(String expectedErrorCode,\n         }\n     }\n \n+    protected void testFail(String expectedErrorCode, String sqlText, SpliceWatcher methodWatcher) throws Exception {\n+        ResultSet rs = null;\n+        try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjA2MDg1NQ=="}, "originalCommit": {"oid": "7df489b532d736ad44c90edca40f31c852cdad88"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MzMyMjY1OnYy", "diffSide": "RIGHT", "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/sql/execute/operations/TriggerHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMzo0ODoxNFrOHx7grQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMjowMDoyNFrOHyQAEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjExNzI5Mw==", "bodyText": "I'm not sure I understand the logic with the 2 phase cleanup. Can you add a comment there?", "url": "https://github.com/splicemachine/spliceengine/pull/4555#discussion_r522117293", "createdAt": "2020-11-12T13:48:14Z", "author": {"login": "arnaud-splice"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/sql/execute/operations/TriggerHandler.java", "diffHunk": "@@ -278,11 +294,15 @@ private void initConnectionContext(LanguageConnectionContext lcc) throws Standar\n     }\n \n     public void cleanup() throws StandardException {\n-        if (triggerActivator != null) {\n-            triggerActivator.cleanup(false);\n+        if (triggerActivator != null && !cleanup2Done) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7df489b532d736ad44c90edca40f31c852cdad88"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ1MzAxMQ==", "bodyText": "I've added this comment to the code:\n\n    // If an Exception is encountered, some resources may be closed more than\n    // once during unwinding of the call stack we want to make sure that\n    // full cleanup isn't indefinitely deferred, and isn't unnecessarily\n    // called multiple times, so add a cleanup1Done phase to indicate\n    // the next time around, we don't defer full cleanup any longer, and\n    // a cleanup2Done phase to indicate we've already done full cleanup\n    // and we don't accidentally try to clean already-cleaned resources.\n    // \n    // This is also needed for statements such as:\n    // SELECT * FROM FINAL TABLE (INSERT INTO t1 VALUES(1,2));\n    // The first time cleanup is called, for the DML statement,\n    // we want to retain the trigger result set for consumption\n    // by the SELECT statement, but once the SELECT completes,\n    // we want to make sure any buffers or temporary conglomerates\n    // are cleaned up.", "url": "https://github.com/splicemachine/spliceengine/pull/4555#discussion_r522453011", "createdAt": "2020-11-12T22:00:24Z", "author": {"login": "msirek"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/sql/execute/operations/TriggerHandler.java", "diffHunk": "@@ -278,11 +294,15 @@ private void initConnectionContext(LanguageConnectionContext lcc) throws Standar\n     }\n \n     public void cleanup() throws StandardException {\n-        if (triggerActivator != null) {\n-            triggerActivator.cleanup(false);\n+        if (triggerActivator != null && !cleanup2Done) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjExNzI5Mw=="}, "originalCommit": {"oid": "7df489b532d736ad44c90edca40f31c852cdad88"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MzM3NTE1OnYy", "diffSide": "RIGHT", "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/sql/execute/TriggerRowHolderImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMzo1OTo0N1rOHx8Avw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMjoxNDozOFrOHyQh4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEyNTUwMw==", "bodyText": "Should we log the potential error?", "url": "https://github.com/splicemachine/spliceengine/pull/4555#discussion_r522125503", "createdAt": "2020-11-12T13:59:47Z", "author": {"login": "arnaud-splice"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/sql/execute/TriggerRowHolderImpl.java", "diffHunk": "@@ -471,8 +471,17 @@ private void dropTable(long conglomID) throws StandardException {\n     private void dropConglomerate() throws StandardException {\n         TransactionController tc = activation.getTransactionController();\n         LOG.trace(format(\"Dropping temporary conglomerate splice:%d\", CID));\n-        tc.dropConglomerate(CID);\n-        dropTable(CID);\n+        try {\n+            tc.dropConglomerate(CID);\n+        }\n+        catch (StandardException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7df489b532d736ad44c90edca40f31c852cdad88"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ2MTY2Nw==", "bodyText": "Added code to log a warning message about failure to do cleanup, indicating cleanup may have been called twice.", "url": "https://github.com/splicemachine/spliceengine/pull/4555#discussion_r522461667", "createdAt": "2020-11-12T22:14:38Z", "author": {"login": "msirek"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/sql/execute/TriggerRowHolderImpl.java", "diffHunk": "@@ -471,8 +471,17 @@ private void dropTable(long conglomID) throws StandardException {\n     private void dropConglomerate() throws StandardException {\n         TransactionController tc = activation.getTransactionController();\n         LOG.trace(format(\"Dropping temporary conglomerate splice:%d\", CID));\n-        tc.dropConglomerate(CID);\n-        dropTable(CID);\n+        try {\n+            tc.dropConglomerate(CID);\n+        }\n+        catch (StandardException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEyNTUwMw=="}, "originalCommit": {"oid": "7df489b532d736ad44c90edca40f31c852cdad88"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MzM4MzI4OnYy", "diffSide": "RIGHT", "path": "hbase_sql/src/main/java/com/splicemachine/stream/QueryJob.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNDowMToyNVrOHx8Fmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMjoxOToyOFrOHyQysA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEyNjc0Nw==", "bodyText": "Should we log errors?", "url": "https://github.com/splicemachine/spliceengine/pull/4555#discussion_r522126747", "createdAt": "2020-11-12T14:01:25Z", "author": {"login": "arnaud-splice"}, "path": "hbase_sql/src/main/java/com/splicemachine/stream/QueryJob.java", "diffHunk": "@@ -114,11 +120,29 @@ public Void call() throws Exception {\n                 SpliceSpark.getContext().sc().cancelJobGroup(jobName);\n             throw e;\n         } finally {\n+            long tempTriggerConglomerate = dsp.getTempTriggerConglomerate();\n+            if (tempTriggerConglomerate != 0 && activation != null)\n+                dropConglomerate(tempTriggerConglomerate, activation);\n             if(resetSession)\n                 SpliceSpark.resetSession();\n             ah.close();\n         }\n \n         return null;\n     }\n+\n+    private void dropConglomerate(long CID, Activation activation) {\n+        TransactionController tc = activation.getTransactionController();\n+        LOG.trace(format(\"Dropping temporary conglomerate splice:%d\", CID));\n+        try {\n+            tc.dropConglomerate(CID);\n+        }\n+        catch (StandardException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7df489b532d736ad44c90edca40f31c852cdad88"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ2NTk2OA==", "bodyText": "Yes, added logging here too.", "url": "https://github.com/splicemachine/spliceengine/pull/4555#discussion_r522465968", "createdAt": "2020-11-12T22:19:28Z", "author": {"login": "msirek"}, "path": "hbase_sql/src/main/java/com/splicemachine/stream/QueryJob.java", "diffHunk": "@@ -114,11 +120,29 @@ public Void call() throws Exception {\n                 SpliceSpark.getContext().sc().cancelJobGroup(jobName);\n             throw e;\n         } finally {\n+            long tempTriggerConglomerate = dsp.getTempTriggerConglomerate();\n+            if (tempTriggerConglomerate != 0 && activation != null)\n+                dropConglomerate(tempTriggerConglomerate, activation);\n             if(resetSession)\n                 SpliceSpark.resetSession();\n             ah.close();\n         }\n \n         return null;\n     }\n+\n+    private void dropConglomerate(long CID, Activation activation) {\n+        TransactionController tc = activation.getTransactionController();\n+        LOG.trace(format(\"Dropping temporary conglomerate splice:%d\", CID));\n+        try {\n+            tc.dropConglomerate(CID);\n+        }\n+        catch (StandardException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEyNjc0Nw=="}, "originalCommit": {"oid": "7df489b532d736ad44c90edca40f31c852cdad88"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MzQwMjY5OnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/execute/TriggerExecutionContext.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNDowNTozOVrOHx8Raw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMjoyMjowNVrOHyQ8ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEyOTc3MQ==", "bodyText": "Update above comment", "url": "https://github.com/splicemachine/spliceengine/pull/4555#discussion_r522129771", "createdAt": "2020-11-12T14:05:39Z", "author": {"login": "arnaud-splice"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/execute/TriggerExecutionContext.java", "diffHunk": "@@ -158,10 +160,13 @@ public TriggerExecutionContext(ConnectionContext cc,\n         this.cc = cc;\n \n         this.fromSparkExecution = fromSparkExecution;\n+        this.fromTableDmlSpsDescriptor = fromTableDmlSpsDescriptor;\n         // only use the local cache for spark execution\n-        if (fromSparkExecution)\n+        if (fromSparkExecution || fromTableDmlSpsDescriptor != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7df489b532d736ad44c90edca40f31c852cdad88"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ2ODQ1Mw==", "bodyText": "Done.\n\n    // Only use the local cache for spark execution, or if we have a temporary\n    // trigger created for execution of a FROM FINAL TABLE clause, which\n    // does not store its SPS in the data dictionary, so needs to use\n    // a ManagedCache.", "url": "https://github.com/splicemachine/spliceengine/pull/4555#discussion_r522468453", "createdAt": "2020-11-12T22:22:05Z", "author": {"login": "msirek"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/execute/TriggerExecutionContext.java", "diffHunk": "@@ -158,10 +160,13 @@ public TriggerExecutionContext(ConnectionContext cc,\n         this.cc = cc;\n \n         this.fromSparkExecution = fromSparkExecution;\n+        this.fromTableDmlSpsDescriptor = fromTableDmlSpsDescriptor;\n         // only use the local cache for spark execution\n-        if (fromSparkExecution)\n+        if (fromSparkExecution || fromTableDmlSpsDescriptor != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEyOTc3MQ=="}, "originalCommit": {"oid": "7df489b532d736ad44c90edca40f31c852cdad88"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDMyNzcyOnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/GenericStatement.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMTowOToyOVrOHy_pWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMTowOToyOVrOHy_pWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIzMzYyNg==", "bodyText": "boundAndOptimizedStatement with lowercase B", "url": "https://github.com/splicemachine/spliceengine/pull/4555#discussion_r523233626", "createdAt": "2020-11-13T21:09:29Z", "author": {"login": "dgomezferro"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/GenericStatement.java", "diffHunk": "@@ -117,6 +118,16 @@ public PreparedStatement prepare(LanguageConnectionContext lcc) throws StandardE\n     }\n \n     public PreparedStatement prepare(LanguageConnectionContext lcc,boolean forMetaData) throws StandardException{\n+        return prepare(lcc, forMetaData, null);\n+    }\n+\n+    // If BoundAndOptimizedStatement is passed in, we don't try to\n+    // parse, bind and optimize the statement from its SQL text\n+    // before passing to code generation.\n+    // Instead we just directly compile BoundAndOptimizedStatement.\n+    public PreparedStatement prepare(LanguageConnectionContext lcc,\n+                                     boolean forMetaData,\n+                                     StatementNode BoundAndOptimizedStatement) throws StandardException{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "558dc4dfefbc349b247b6cc026297b4850d6543d"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDMzMzUzOnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/GenericStatement.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMToxMTo0MVrOHy_s1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMToxMTo0MVrOHy_s1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIzNDUxNg==", "bodyText": "lowercase B", "url": "https://github.com/splicemachine/spliceengine/pull/4555#discussion_r523234516", "createdAt": "2020-11-13T21:11:41Z", "author": {"login": "dgomezferro"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/GenericStatement.java", "diffHunk": "@@ -257,13 +268,21 @@ private boolean isExplainStatement(){\n         return s.startsWith(\"EXPLAIN\");\n     }\n \n+    private PreparedStatement prepMinion(LanguageConnectionContext lcc,\n+                                         boolean cacheMe,\n+                                         Object[] paramDefaults,\n+                                         SchemaDescriptor spsSchema,\n+                                         boolean internalSQL) throws StandardException{\n+        return prepMinion(lcc, cacheMe, paramDefaults, spsSchema, internalSQL, null);\n+    }\n     @SuppressFBWarnings(value = \"ML_SYNC_ON_FIELD_TO_GUARD_CHANGING_THAT_FIELD\",\n             justification = \"the new object created at line 370 will not be put into cache and it cannot be referenced by other threads\")\n     private PreparedStatement prepMinion(LanguageConnectionContext lcc,\n                                          boolean cacheMe,\n                                          Object[] paramDefaults,\n                                          SchemaDescriptor spsSchema,\n-                                         boolean internalSQL) throws StandardException{\n+                                         boolean internalSQL,\n+                                         StatementNode BoundAndOptimizedStatement) throws StandardException{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "558dc4dfefbc349b247b6cc026297b4850d6543d"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDM0MDUwOnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/catalog/DataDictionaryCache.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMToxNDoyMlrOHy_xBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMzowNDo0NVrOHzCUFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIzNTU4OA==", "bodyText": "I don't like too much using a ThreadLocal like this, at least I think it should go somewhere else other than the DataDictionaryCache (maybe on one of the Context objects?). Can you open a JIRA to revisit this sometime later?", "url": "https://github.com/splicemachine/spliceengine/pull/4555#discussion_r523235588", "createdAt": "2020-11-13T21:14:22Z", "author": {"login": "dgomezferro"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/catalog/DataDictionaryCache.java", "diffHunk": "@@ -89,6 +89,9 @@\n     private ManagedCache<Long, Optional<String>> catalogVersionCache;\n     private ManagedCache<UUID, ConstraintDescriptorList> constraintDescriptorListCache;\n     private DataDictionary dd;\n+\n+    public static final ThreadLocal<TriggerDescriptor> fromTableTriggerDescriptor = new ThreadLocal<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "558dc4dfefbc349b247b6cc026297b4850d6543d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI3NzMzNA==", "bodyText": "Opened DB-10738 for this.  Can also take care of uppercased BoundAndOptimizedStatement through that Jira.", "url": "https://github.com/splicemachine/spliceengine/pull/4555#discussion_r523277334", "createdAt": "2020-11-13T23:04:45Z", "author": {"login": "msirek"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/catalog/DataDictionaryCache.java", "diffHunk": "@@ -89,6 +89,9 @@\n     private ManagedCache<Long, Optional<String>> catalogVersionCache;\n     private ManagedCache<UUID, ConstraintDescriptorList> constraintDescriptorListCache;\n     private DataDictionary dd;\n+\n+    public static final ThreadLocal<TriggerDescriptor> fromTableTriggerDescriptor = new ThreadLocal<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIzNTU4OA=="}, "originalCommit": {"oid": "558dc4dfefbc349b247b6cc026297b4850d6543d"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2775, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}