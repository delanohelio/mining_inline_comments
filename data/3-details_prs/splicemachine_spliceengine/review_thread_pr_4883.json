{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxNDQyNzkx", "number": 4883, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMjoyNTowMVrOFG_XjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMjoyNzoxNlrOFIj8sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyODczOTk3OnYy", "diffSide": "RIGHT", "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/function/csv/CsvParserConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMjoyNTowMVrOIIQlgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNzo1MjowOVrOIIWhVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTUzMTI2Ng==", "bodyText": "License header is missing", "url": "https://github.com/splicemachine/spliceengine/pull/4883#discussion_r545531266", "createdAt": "2020-12-18T02:25:01Z", "author": {"login": "jyuanca"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/function/csv/CsvParserConfig.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.splicemachine.derby.stream.function.csv;\n+import org.supercsv.prefs.CsvPreference;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c45bf3cc9d6030b474820efe3af9b562d6f10fe9"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYyODUwMA==", "bodyText": "done", "url": "https://github.com/splicemachine/spliceengine/pull/4883#discussion_r545628500", "createdAt": "2020-12-18T07:52:09Z", "author": {"login": "martinrupp"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/function/csv/CsvParserConfig.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.splicemachine.derby.stream.function.csv;\n+import org.supercsv.prefs.CsvPreference;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTUzMTI2Ng=="}, "originalCommit": {"oid": "c45bf3cc9d6030b474820efe3af9b562d6f10fe9"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyODc2ODcyOnYy", "diffSide": "RIGHT", "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/function/csv/QuoteTrackingTokenizer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMjozNzoyM1rOIIQ1gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNzo1MzoxMVrOIIWi8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTUzNTM2MA==", "bodyText": "is0D0Amode is always false and never true, then why we need this flag?", "url": "https://github.com/splicemachine/spliceengine/pull/4883#discussion_r545535360", "createdAt": "2020-12-18T02:37:23Z", "author": {"login": "jyuanca"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/function/csv/QuoteTrackingTokenizer.java", "diffHunk": "@@ -310,8 +314,10 @@ private String getCurrentLine() {\n             return currentRow.last();\n         }\n     }\n+    boolean is0D0Amode = false;\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c45bf3cc9d6030b474820efe3af9b562d6f10fe9"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYyODkxNA==", "bodyText": "you're right, that's a leftover from a previous attempt i forgot to remove. thanks!", "url": "https://github.com/splicemachine/spliceengine/pull/4883#discussion_r545628914", "createdAt": "2020-12-18T07:53:11Z", "author": {"login": "martinrupp"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/function/csv/QuoteTrackingTokenizer.java", "diffHunk": "@@ -310,8 +314,10 @@ private String getCurrentLine() {\n             return currentRow.last();\n         }\n     }\n+    boolean is0D0Amode = false;\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTUzNTM2MA=="}, "originalCommit": {"oid": "c45bf3cc9d6030b474820efe3af9b562d6f10fe9"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NDc0MDQ4OnYy", "diffSide": "RIGHT", "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/storage/SpliceRegionAdmin.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwOTozODo1NlrOIKe9Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQyMDozNDoxOVrOIMBhzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg2MzgyMg==", "bodyText": "This logic looks reversed to me, it shouldn't have the ! I think.", "url": "https://github.com/splicemachine/spliceengine/pull/4883#discussion_r547863822", "createdAt": "2020-12-23T09:38:56Z", "author": {"login": "dgomezferro"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/storage/SpliceRegionAdmin.java", "diffHunk": "@@ -782,8 +782,14 @@ public static  ConglomerateDescriptor getIndex(TableDescriptor td, String indexN\n \n         boolean quotedEmptyIsNull = !PropertyUtil.getCachedDatabaseBoolean(\n                 lcc, Property.SPLICE_DB2_IMPORT_EMPTY_STRING_COMPATIBLE);\n-        MutableCSVTokenizer tokenizer = new MutableCSVTokenizer(reader,preference, false, quotedEmptyIsNull,\n+        boolean preserveLineEndings = !PropertyUtil.getCachedDatabaseBoolean(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d723b8e2d0ae517660f5c5d65f6158ec5a90a26f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk1NTM5NA==", "bodyText": "you're right", "url": "https://github.com/splicemachine/spliceengine/pull/4883#discussion_r547955394", "createdAt": "2020-12-23T13:20:43Z", "author": {"login": "martinrupp"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/storage/SpliceRegionAdmin.java", "diffHunk": "@@ -782,8 +782,14 @@ public static  ConglomerateDescriptor getIndex(TableDescriptor td, String indexN\n \n         boolean quotedEmptyIsNull = !PropertyUtil.getCachedDatabaseBoolean(\n                 lcc, Property.SPLICE_DB2_IMPORT_EMPTY_STRING_COMPATIBLE);\n-        MutableCSVTokenizer tokenizer = new MutableCSVTokenizer(reader,preference, false, quotedEmptyIsNull,\n+        boolean preserveLineEndings = !PropertyUtil.getCachedDatabaseBoolean(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg2MzgyMg=="}, "originalCommit": {"oid": "d723b8e2d0ae517660f5c5d65f6158ec5a90a26f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ3ODg2MA==", "bodyText": "done", "url": "https://github.com/splicemachine/spliceengine/pull/4883#discussion_r549478860", "createdAt": "2020-12-28T20:34:19Z", "author": {"login": "martinrupp"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/storage/SpliceRegionAdmin.java", "diffHunk": "@@ -782,8 +782,14 @@ public static  ConglomerateDescriptor getIndex(TableDescriptor td, String indexN\n \n         boolean quotedEmptyIsNull = !PropertyUtil.getCachedDatabaseBoolean(\n                 lcc, Property.SPLICE_DB2_IMPORT_EMPTY_STRING_COMPATIBLE);\n-        MutableCSVTokenizer tokenizer = new MutableCSVTokenizer(reader,preference, false, quotedEmptyIsNull,\n+        boolean preserveLineEndings = !PropertyUtil.getCachedDatabaseBoolean(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg2MzgyMg=="}, "originalCommit": {"oid": "d723b8e2d0ae517660f5c5d65f6158ec5a90a26f"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NDkzNzA1OnYy", "diffSide": "RIGHT", "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/function/csv/QuoteTrackingTokenizer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMDo0MTowMFrOIKgxNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQyMDozMzo1NFrOIMBhcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg5MzU1Nw==", "bodyText": "I don't think reusing the StringBuilder makes a big difference, but if you want to reuse it I'd call sb.setLength(0) rather than sb.delete() to clear it, since the latter ends up calling a native method.", "url": "https://github.com/splicemachine/spliceengine/pull/4883#discussion_r547893557", "createdAt": "2020-12-23T10:41:00Z", "author": {"login": "dgomezferro"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/function/csv/QuoteTrackingTokenizer.java", "diffHunk": "@@ -110,7 +110,10 @@ public String at(int index) {\n         }\n \n         public String toString() {\n-            StringBuilder sb = new StringBuilder(length());\n+            if(sb == null)\n+                 sb = new StringBuilder(length());\n+            else\n+                sb.delete(0, sb.length());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d723b8e2d0ae517660f5c5d65f6158ec5a90a26f"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk1NTU0Mw==", "bodyText": "ok", "url": "https://github.com/splicemachine/spliceengine/pull/4883#discussion_r547955543", "createdAt": "2020-12-23T13:21:02Z", "author": {"login": "martinrupp"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/function/csv/QuoteTrackingTokenizer.java", "diffHunk": "@@ -110,7 +110,10 @@ public String at(int index) {\n         }\n \n         public String toString() {\n-            StringBuilder sb = new StringBuilder(length());\n+            if(sb == null)\n+                 sb = new StringBuilder(length());\n+            else\n+                sb.delete(0, sb.length());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg5MzU1Nw=="}, "originalCommit": {"oid": "d723b8e2d0ae517660f5c5d65f6158ec5a90a26f"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ3ODc3MQ==", "bodyText": "done", "url": "https://github.com/splicemachine/spliceengine/pull/4883#discussion_r549478771", "createdAt": "2020-12-28T20:33:54Z", "author": {"login": "martinrupp"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/function/csv/QuoteTrackingTokenizer.java", "diffHunk": "@@ -110,7 +110,10 @@ public String at(int index) {\n         }\n \n         public String toString() {\n-            StringBuilder sb = new StringBuilder(length());\n+            if(sb == null)\n+                 sb = new StringBuilder(length());\n+            else\n+                sb.delete(0, sb.length());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg5MzU1Nw=="}, "originalCommit": {"oid": "d723b8e2d0ae517660f5c5d65f6158ec5a90a26f"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NDk1NDUyOnYy", "diffSide": "RIGHT", "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/function/csv/StreamFileFunction.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMDo0NzoxMVrOIKg7Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQyMDozMzozMlrOIMBg-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg5NjEzOA==", "bodyText": "Is it possible to remove this BufferedReader then?", "url": "https://github.com/splicemachine/spliceengine/pull/4883#discussion_r547896138", "createdAt": "2020-12-23T10:47:11Z", "author": {"login": "dgomezferro"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/function/csv/StreamFileFunction.java", "diffHunk": "@@ -80,12 +86,13 @@ public boolean hasNext() {\n                                 return hasNext;\n                             try {\n                                 if (!initialized) {\n+                                    // BUFFERED? it's buffered again...\n                                     reader = new BufferedReader(new InputStreamReader(s,charset));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d723b8e2d0ae517660f5c5d65f6158ec5a90a26f"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk1NTY1NQ==", "bodyText": "i think so i forgot to check this again", "url": "https://github.com/splicemachine/spliceengine/pull/4883#discussion_r547955655", "createdAt": "2020-12-23T13:21:15Z", "author": {"login": "martinrupp"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/function/csv/StreamFileFunction.java", "diffHunk": "@@ -80,12 +86,13 @@ public boolean hasNext() {\n                                 return hasNext;\n                             try {\n                                 if (!initialized) {\n+                                    // BUFFERED? it's buffered again...\n                                     reader = new BufferedReader(new InputStreamReader(s,charset));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg5NjEzOA=="}, "originalCommit": {"oid": "d723b8e2d0ae517660f5c5d65f6158ec5a90a26f"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ3ODY0OQ==", "bodyText": "done", "url": "https://github.com/splicemachine/spliceengine/pull/4883#discussion_r549478649", "createdAt": "2020-12-28T20:33:32Z", "author": {"login": "martinrupp"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/function/csv/StreamFileFunction.java", "diffHunk": "@@ -80,12 +86,13 @@ public boolean hasNext() {\n                                 return hasNext;\n                             try {\n                                 if (!initialized) {\n+                                    // BUFFERED? it's buffered again...\n                                     reader = new BufferedReader(new InputStreamReader(s,charset));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg5NjEzOA=="}, "originalCommit": {"oid": "d723b8e2d0ae517660f5c5d65f6158ec5a90a26f"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NTA4MDQxOnYy", "diffSide": "RIGHT", "path": "splice_machine/src/test/test-data/newline.csv", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMTozNDo1OFrOIKiEUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQyMDozMzoxNFrOIMBgrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkxNDgzMw==", "bodyText": "This file is not used, remove", "url": "https://github.com/splicemachine/spliceengine/pull/4883#discussion_r547914833", "createdAt": "2020-12-23T11:34:58Z", "author": {"login": "dgomezferro"}, "path": "splice_machine/src/test/test-data/newline.csv", "diffHunk": "@@ -0,0 +1,4 @@\n+\"Hello\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d723b8e2d0ae517660f5c5d65f6158ec5a90a26f"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk1NTcwMQ==", "bodyText": "agreed", "url": "https://github.com/splicemachine/spliceengine/pull/4883#discussion_r547955701", "createdAt": "2020-12-23T13:21:22Z", "author": {"login": "martinrupp"}, "path": "splice_machine/src/test/test-data/newline.csv", "diffHunk": "@@ -0,0 +1,4 @@\n+\"Hello\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkxNDgzMw=="}, "originalCommit": {"oid": "d723b8e2d0ae517660f5c5d65f6158ec5a90a26f"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ3ODU3Mw==", "bodyText": "done", "url": "https://github.com/splicemachine/spliceengine/pull/4883#discussion_r549478573", "createdAt": "2020-12-28T20:33:14Z", "author": {"login": "martinrupp"}, "path": "splice_machine/src/test/test-data/newline.csv", "diffHunk": "@@ -0,0 +1,4 @@\n+\"Hello\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkxNDgzMw=="}, "originalCommit": {"oid": "d723b8e2d0ae517660f5c5d65f6158ec5a90a26f"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NTE1MTA2OnYy", "diffSide": "RIGHT", "path": "splice_machine/src/test/java/com/splicemachine/derby/impl/load/CsvLineReaderCRTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMjowMjowN1rOIKisQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQyMDozMzowN1rOIMBggw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkyNTA1OA==", "bodyText": "Can you repeat this same case with sizes 4 and 6 (buffer ending just before the carriage return, and just after the line feed)?", "url": "https://github.com/splicemachine/spliceengine/pull/4883#discussion_r547925058", "createdAt": "2020-12-23T12:02:07Z", "author": {"login": "dgomezferro"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/impl/load/CsvLineReaderCRTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package com.splicemachine.derby.impl.load;\n+\n+import com.splicemachine.derby.stream.function.csv.CsvLineReaderCR;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+\n+public class CsvLineReaderCRTest {\n+    void test(String s, String[] expected, int configBufferSize) throws IOException {\n+        CsvLineReaderCR r = new CsvLineReaderCR(new StringReader(s), 1024, configBufferSize);\n+\n+        for(int i=0; ; i++) {\n+            String line = r.readLine();\n+            if( line == null ) break;\n+            Assert.assertTrue( i < expected.length );\n+            Assert.assertEquals(r.getLineNumber(), i+1);\n+            Assert.assertEquals( expected[i*2], line);\n+            Assert.assertEquals( expected[i*2+1], r.getCurrentLineEnding());\n+        }\n+        Assert.assertEquals( expected.length/2, r.getLineNumber() );\n+\n+    }\n+    @Test\n+    public void testSimple() throws IOException {\n+        test( \"Hello\\nWorld\\n\", new String[]{\"Hello\", \"\\n\", \"World\", \"\\n\"}, 1024);\n+        test( \"Hello\\r\\nWorld\\n\", new String[]{\"Hello\", \"\\r\\n\", \"World\", \"\\n\"}, 1024);\n+        test( \"Hello\\nWorld\\r\", new String[]{\"Hello\", \"\\n\", \"World\", \"\\r\"}, 1024);\n+        test( \"Hello\\r\\nWorld\\r\\n\", new String[]{\"Hello\", \"\\r\\n\", \"World\", \"\\r\\n\"}, 1024);\n+        test( \"Hello\\rWorld\", new String[]{\"Hello\", \"\\r\", \"World\", \"\"}, 1024);\n+    }\n+\n+    @Test\n+    public void testAllCases() throws IOException {\n+        boolean crNewline = true;\n+        test(\"\", new String[]{}, 5);\n+\n+        // CASE 1 : configBufferSize=10\n+        // 1234\\n\n+        test(\"1234\\n\", new String[]{\"1234\", \"\\n\"}, 10);\n+        // CASE 2 : configBufferSize=10\n+        // 1234<EOF>\n+        test(\"1234\", new String[]{\"1234\", \"\"}, 10);\n+\n+        // CASE 3 : configBufferSize=20\n+        // 123\\r\\n123\\r\\n\n+        test(\"123\\r\\n123\\r\\nabc\\n\", new String[]{\"123\", \"\\r\\n\", \"123\", \"\\r\\n\", \"abc\", \"\\n\"}, 20);\n+\n+\n+        // CASE 4 : configBufferSize=20\n+        // 123\\r123\\r\\n\n+\n+        test(\"123\\r123\\r\\nabc\\n\", new String[]{\"123\", \"\\r\", \"123\", \"\\r\\n\", \"abc\", \"\\n\"}, 20);\n+\n+        // CASE 5 : configBufferSize=5\n+        // 1234\\r<EOF>\n+        test(\"1234\\r\", new String[]{\"1234\", \"\\r\"}, 5);\n+        //test(\"1234\\r\", new String[]{\"1234\\r\"}, false, 5);\n+\n+        // CASE 6 : configBufferSize=5\n+        // 1234\\r\\n\n+        // abc\\r\\n\n+        test(\"1234\\r\\nabc\\r\\n\", new String[]{\"1234\", \"\\r\\n\", \"abc\", \"\\r\\n\"}, 5);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d723b8e2d0ae517660f5c5d65f6158ec5a90a26f"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk1NTc3Ng==", "bodyText": "yes good idea", "url": "https://github.com/splicemachine/spliceengine/pull/4883#discussion_r547955776", "createdAt": "2020-12-23T13:21:34Z", "author": {"login": "martinrupp"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/impl/load/CsvLineReaderCRTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package com.splicemachine.derby.impl.load;\n+\n+import com.splicemachine.derby.stream.function.csv.CsvLineReaderCR;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+\n+public class CsvLineReaderCRTest {\n+    void test(String s, String[] expected, int configBufferSize) throws IOException {\n+        CsvLineReaderCR r = new CsvLineReaderCR(new StringReader(s), 1024, configBufferSize);\n+\n+        for(int i=0; ; i++) {\n+            String line = r.readLine();\n+            if( line == null ) break;\n+            Assert.assertTrue( i < expected.length );\n+            Assert.assertEquals(r.getLineNumber(), i+1);\n+            Assert.assertEquals( expected[i*2], line);\n+            Assert.assertEquals( expected[i*2+1], r.getCurrentLineEnding());\n+        }\n+        Assert.assertEquals( expected.length/2, r.getLineNumber() );\n+\n+    }\n+    @Test\n+    public void testSimple() throws IOException {\n+        test( \"Hello\\nWorld\\n\", new String[]{\"Hello\", \"\\n\", \"World\", \"\\n\"}, 1024);\n+        test( \"Hello\\r\\nWorld\\n\", new String[]{\"Hello\", \"\\r\\n\", \"World\", \"\\n\"}, 1024);\n+        test( \"Hello\\nWorld\\r\", new String[]{\"Hello\", \"\\n\", \"World\", \"\\r\"}, 1024);\n+        test( \"Hello\\r\\nWorld\\r\\n\", new String[]{\"Hello\", \"\\r\\n\", \"World\", \"\\r\\n\"}, 1024);\n+        test( \"Hello\\rWorld\", new String[]{\"Hello\", \"\\r\", \"World\", \"\"}, 1024);\n+    }\n+\n+    @Test\n+    public void testAllCases() throws IOException {\n+        boolean crNewline = true;\n+        test(\"\", new String[]{}, 5);\n+\n+        // CASE 1 : configBufferSize=10\n+        // 1234\\n\n+        test(\"1234\\n\", new String[]{\"1234\", \"\\n\"}, 10);\n+        // CASE 2 : configBufferSize=10\n+        // 1234<EOF>\n+        test(\"1234\", new String[]{\"1234\", \"\"}, 10);\n+\n+        // CASE 3 : configBufferSize=20\n+        // 123\\r\\n123\\r\\n\n+        test(\"123\\r\\n123\\r\\nabc\\n\", new String[]{\"123\", \"\\r\\n\", \"123\", \"\\r\\n\", \"abc\", \"\\n\"}, 20);\n+\n+\n+        // CASE 4 : configBufferSize=20\n+        // 123\\r123\\r\\n\n+\n+        test(\"123\\r123\\r\\nabc\\n\", new String[]{\"123\", \"\\r\", \"123\", \"\\r\\n\", \"abc\", \"\\n\"}, 20);\n+\n+        // CASE 5 : configBufferSize=5\n+        // 1234\\r<EOF>\n+        test(\"1234\\r\", new String[]{\"1234\", \"\\r\"}, 5);\n+        //test(\"1234\\r\", new String[]{\"1234\\r\"}, false, 5);\n+\n+        // CASE 6 : configBufferSize=5\n+        // 1234\\r\\n\n+        // abc\\r\\n\n+        test(\"1234\\r\\nabc\\r\\n\", new String[]{\"1234\", \"\\r\\n\", \"abc\", \"\\r\\n\"}, 5);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkyNTA1OA=="}, "originalCommit": {"oid": "d723b8e2d0ae517660f5c5d65f6158ec5a90a26f"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ3ODUzMQ==", "bodyText": "done", "url": "https://github.com/splicemachine/spliceengine/pull/4883#discussion_r549478531", "createdAt": "2020-12-28T20:33:07Z", "author": {"login": "martinrupp"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/impl/load/CsvLineReaderCRTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package com.splicemachine.derby.impl.load;\n+\n+import com.splicemachine.derby.stream.function.csv.CsvLineReaderCR;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+\n+public class CsvLineReaderCRTest {\n+    void test(String s, String[] expected, int configBufferSize) throws IOException {\n+        CsvLineReaderCR r = new CsvLineReaderCR(new StringReader(s), 1024, configBufferSize);\n+\n+        for(int i=0; ; i++) {\n+            String line = r.readLine();\n+            if( line == null ) break;\n+            Assert.assertTrue( i < expected.length );\n+            Assert.assertEquals(r.getLineNumber(), i+1);\n+            Assert.assertEquals( expected[i*2], line);\n+            Assert.assertEquals( expected[i*2+1], r.getCurrentLineEnding());\n+        }\n+        Assert.assertEquals( expected.length/2, r.getLineNumber() );\n+\n+    }\n+    @Test\n+    public void testSimple() throws IOException {\n+        test( \"Hello\\nWorld\\n\", new String[]{\"Hello\", \"\\n\", \"World\", \"\\n\"}, 1024);\n+        test( \"Hello\\r\\nWorld\\n\", new String[]{\"Hello\", \"\\r\\n\", \"World\", \"\\n\"}, 1024);\n+        test( \"Hello\\nWorld\\r\", new String[]{\"Hello\", \"\\n\", \"World\", \"\\r\"}, 1024);\n+        test( \"Hello\\r\\nWorld\\r\\n\", new String[]{\"Hello\", \"\\r\\n\", \"World\", \"\\r\\n\"}, 1024);\n+        test( \"Hello\\rWorld\", new String[]{\"Hello\", \"\\r\", \"World\", \"\"}, 1024);\n+    }\n+\n+    @Test\n+    public void testAllCases() throws IOException {\n+        boolean crNewline = true;\n+        test(\"\", new String[]{}, 5);\n+\n+        // CASE 1 : configBufferSize=10\n+        // 1234\\n\n+        test(\"1234\\n\", new String[]{\"1234\", \"\\n\"}, 10);\n+        // CASE 2 : configBufferSize=10\n+        // 1234<EOF>\n+        test(\"1234\", new String[]{\"1234\", \"\"}, 10);\n+\n+        // CASE 3 : configBufferSize=20\n+        // 123\\r\\n123\\r\\n\n+        test(\"123\\r\\n123\\r\\nabc\\n\", new String[]{\"123\", \"\\r\\n\", \"123\", \"\\r\\n\", \"abc\", \"\\n\"}, 20);\n+\n+\n+        // CASE 4 : configBufferSize=20\n+        // 123\\r123\\r\\n\n+\n+        test(\"123\\r123\\r\\nabc\\n\", new String[]{\"123\", \"\\r\", \"123\", \"\\r\\n\", \"abc\", \"\\n\"}, 20);\n+\n+        // CASE 5 : configBufferSize=5\n+        // 1234\\r<EOF>\n+        test(\"1234\\r\", new String[]{\"1234\", \"\\r\"}, 5);\n+        //test(\"1234\\r\", new String[]{\"1234\\r\"}, false, 5);\n+\n+        // CASE 6 : configBufferSize=5\n+        // 1234\\r\\n\n+        // abc\\r\\n\n+        test(\"1234\\r\\nabc\\r\\n\", new String[]{\"1234\", \"\\r\\n\", \"abc\", \"\\r\\n\"}, 5);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkyNTA1OA=="}, "originalCommit": {"oid": "d723b8e2d0ae517660f5c5d65f6158ec5a90a26f"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NTE2MDEyOnYy", "diffSide": "RIGHT", "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/function/csv/AbstractFileFunction.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMjowNTozMFrOIKixUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQyMDozMjozMVrOIMBgGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkyNjM1NQ==", "bodyText": "I think this could be protected since it's only accessed from a subclass", "url": "https://github.com/splicemachine/spliceengine/pull/4883#discussion_r547926355", "createdAt": "2020-12-23T12:05:30Z", "author": {"login": "dgomezferro"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/function/csv/AbstractFileFunction.java", "diffHunk": "@@ -268,7 +270,7 @@ else if (values.size() < returnRow.nColumns()) {\n         }\n     }\n \n-    void checkPreference() {\n+    public void checkPreference() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d723b8e2d0ae517660f5c5d65f6158ec5a90a26f"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk1NTgxMw==", "bodyText": "ok", "url": "https://github.com/splicemachine/spliceengine/pull/4883#discussion_r547955813", "createdAt": "2020-12-23T13:21:40Z", "author": {"login": "martinrupp"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/function/csv/AbstractFileFunction.java", "diffHunk": "@@ -268,7 +270,7 @@ else if (values.size() < returnRow.nColumns()) {\n         }\n     }\n \n-    void checkPreference() {\n+    public void checkPreference() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkyNjM1NQ=="}, "originalCommit": {"oid": "d723b8e2d0ae517660f5c5d65f6158ec5a90a26f"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ3ODQyNA==", "bodyText": "done", "url": "https://github.com/splicemachine/spliceengine/pull/4883#discussion_r549478424", "createdAt": "2020-12-28T20:32:31Z", "author": {"login": "martinrupp"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/function/csv/AbstractFileFunction.java", "diffHunk": "@@ -268,7 +270,7 @@ else if (values.size() < returnRow.nColumns()) {\n         }\n     }\n \n-    void checkPreference() {\n+    public void checkPreference() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkyNjM1NQ=="}, "originalCommit": {"oid": "d723b8e2d0ae517660f5c5d65f6158ec5a90a26f"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NTE4NTI2OnYy", "diffSide": "RIGHT", "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/function/csv/CsvLineReaderCR.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMjoxNDo1N1rOIKi_Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQyMDozMjo0NlrOIMBgPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkyOTk0Ng==", "bodyText": "We should use StringBuilder (non thread safe version, recommended)", "url": "https://github.com/splicemachine/spliceengine/pull/4883#discussion_r547929946", "createdAt": "2020-12-23T12:14:57Z", "author": {"login": "dgomezferro"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/function/csv/CsvLineReaderCR.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Copyright (c) 2012 - 2020 Splice Machine, Inc.\n+ *\n+ * This file is part of Splice Machine.\n+ * Splice Machine is free software: you can redistribute it and/or modify it under the terms of the\n+ * GNU Affero General Public License as published by the Free Software Foundation, either\n+ * version 3, or (at your option) any later version.\n+ * Splice Machine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ * See the GNU Affero General Public License for more details.\n+ * You should have received a copy of the GNU Affero General Public License along with Splice Machine.\n+ * If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.splicemachine.derby.stream.function.csv;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+\n+/**\n+ * A buffered CSV line reader which is able to return the current line ending's type via\n+ * getCurrentLineEndingType / getCurrentLineEnding (like \"\\r\\n\", \"\\r\", \"\\n\", or \"\" = EOF)\n+ */\n+public class CsvLineReaderCR {\n+    private final Reader reader;\n+    private final int configInitialStringBufferSize;\n+    private final int configBufferSize;\n+\n+    private char bufferBytes[];\n+    private int bufferSize, bufferPos;\n+    private int lineNumber = 0;\n+\n+    private StringBuffer res = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d723b8e2d0ae517660f5c5d65f6158ec5a90a26f"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk1NTg2Nw==", "bodyText": "ah ok", "url": "https://github.com/splicemachine/spliceengine/pull/4883#discussion_r547955867", "createdAt": "2020-12-23T13:21:49Z", "author": {"login": "martinrupp"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/function/csv/CsvLineReaderCR.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Copyright (c) 2012 - 2020 Splice Machine, Inc.\n+ *\n+ * This file is part of Splice Machine.\n+ * Splice Machine is free software: you can redistribute it and/or modify it under the terms of the\n+ * GNU Affero General Public License as published by the Free Software Foundation, either\n+ * version 3, or (at your option) any later version.\n+ * Splice Machine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ * See the GNU Affero General Public License for more details.\n+ * You should have received a copy of the GNU Affero General Public License along with Splice Machine.\n+ * If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.splicemachine.derby.stream.function.csv;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+\n+/**\n+ * A buffered CSV line reader which is able to return the current line ending's type via\n+ * getCurrentLineEndingType / getCurrentLineEnding (like \"\\r\\n\", \"\\r\", \"\\n\", or \"\" = EOF)\n+ */\n+public class CsvLineReaderCR {\n+    private final Reader reader;\n+    private final int configInitialStringBufferSize;\n+    private final int configBufferSize;\n+\n+    private char bufferBytes[];\n+    private int bufferSize, bufferPos;\n+    private int lineNumber = 0;\n+\n+    private StringBuffer res = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkyOTk0Ng=="}, "originalCommit": {"oid": "d723b8e2d0ae517660f5c5d65f6158ec5a90a26f"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ3ODQ2MQ==", "bodyText": "done", "url": "https://github.com/splicemachine/spliceengine/pull/4883#discussion_r549478461", "createdAt": "2020-12-28T20:32:46Z", "author": {"login": "martinrupp"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/function/csv/CsvLineReaderCR.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Copyright (c) 2012 - 2020 Splice Machine, Inc.\n+ *\n+ * This file is part of Splice Machine.\n+ * Splice Machine is free software: you can redistribute it and/or modify it under the terms of the\n+ * GNU Affero General Public License as published by the Free Software Foundation, either\n+ * version 3, or (at your option) any later version.\n+ * Splice Machine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ * See the GNU Affero General Public License for more details.\n+ * You should have received a copy of the GNU Affero General Public License along with Splice Machine.\n+ * If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.splicemachine.derby.stream.function.csv;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+\n+/**\n+ * A buffered CSV line reader which is able to return the current line ending's type via\n+ * getCurrentLineEndingType / getCurrentLineEnding (like \"\\r\\n\", \"\\r\", \"\\n\", or \"\" = EOF)\n+ */\n+public class CsvLineReaderCR {\n+    private final Reader reader;\n+    private final int configInitialStringBufferSize;\n+    private final int configBufferSize;\n+\n+    private char bufferBytes[];\n+    private int bufferSize, bufferPos;\n+    private int lineNumber = 0;\n+\n+    private StringBuffer res = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkyOTk0Ng=="}, "originalCommit": {"oid": "d723b8e2d0ae517660f5c5d65f6158ec5a90a26f"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NTIxOTA0OnYy", "diffSide": "RIGHT", "path": "splice_machine/src/test/java/com/splicemachine/derby/impl/load/HdfsImportIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMjoyNzoxNlrOIKjR-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMjo1ODo0M1rOIKkBjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkzNDcxNA==", "bodyText": "@OlegMazurov does HdfsImportIT work with the remote ITs? Do we need to ignore these added tests for the remote profile?", "url": "https://github.com/splicemachine/spliceengine/pull/4883#discussion_r547934714", "createdAt": "2020-12-23T12:27:16Z", "author": {"login": "dgomezferro"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/impl/load/HdfsImportIT.java", "diffHunk": "@@ -2117,4 +2122,95 @@ public void testVarbitColumn() throws Exception {\n         Assert.assertEquals(expected, result);\n     }\n \n+    @Test\n+    public void testAnalyzeExternalTable() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d723b8e2d0ae517660f5c5d65f6158ec5a90a26f"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk0Njg5Mw==", "bodyText": "I see HdfsImportIT is excluded in remote_it, so disregard this.", "url": "https://github.com/splicemachine/spliceengine/pull/4883#discussion_r547946893", "createdAt": "2020-12-23T12:58:43Z", "author": {"login": "dgomezferro"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/impl/load/HdfsImportIT.java", "diffHunk": "@@ -2117,4 +2122,95 @@ public void testVarbitColumn() throws Exception {\n         Assert.assertEquals(expected, result);\n     }\n \n+    @Test\n+    public void testAnalyzeExternalTable() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkzNDcxNA=="}, "originalCommit": {"oid": "d723b8e2d0ae517660f5c5d65f6158ec5a90a26f"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3407, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}