{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5NDg2MDU0", "number": 4001, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNToxMzo0N1rOEZyTow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNToxNjozMVrOEZyXow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDc0MDgzOnYy", "diffSide": "LEFT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/CreateViewNode.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNToxMzo0N1rOHCzn_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNTowNjozMFrOHEGDAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjcwNTAyMg==", "bodyText": "I think we should not remove this check completely, we allow dynamic view to be in session schema, but not regular views. Right now with the change, regular view will be created successfully using the session schema:\nsplice> create view session.v1 as select a1 from t1;\n0 rows inserted/updated/deleted\nELAPSED TIME = 129 milliseconds\nsplice> select * from session.v1;\nERROR XJ001: DERBY SQL error: SQLCODE: -1, SQLSTATE: XJ001, SQLERRMC: java.lang.NullPointerExceptionXJ001.U\nsplice> quit;", "url": "https://github.com/splicemachine/spliceengine/pull/4001#discussion_r472705022", "createdAt": "2020-08-19T05:13:47Z", "author": {"login": "yxia92"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/CreateViewNode.java", "diffHunk": "@@ -291,9 +291,6 @@ public void bindStatement() throws StandardException\n \t\t\t//cannot define views on temporary tables\n \t\t\tif (queryExpr instanceof SelectNode)\n \t\t\t{\n-\t\t\t\t//If attempting to reference a SESSION schema table (temporary or permanent) in the view, throw an exception", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "226b78c6bcb17840eb24bf4867a44d55c38dfd86"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk4NjIwMQ==", "bodyText": "Hmm, I agree that removing the check is not correct. Basically, we want to allow a CTE to reference another CTE, which could be in SESSION schema. But we don't want to allow a normal view to reference any objects in SESSION. I fix this part in the new commit by adding an isDynamic flag to CreateViewNode.\nHowever, the example you showed is also very interesting. Since the check is queryExpr.referencesSessionSchema(), we only check if the view definition references any objects in SESSION schema, not if the view is created under SESSION schema. I tried your example on the latest master, and it causes the same error.\nI think we should definitely disallow this case, too. So in the latest commit, I also improved the condition to make sure we throw if users want to create a view under SESSION. Please take a look if it is good enough.", "url": "https://github.com/splicemachine/spliceengine/pull/4001#discussion_r472986201", "createdAt": "2020-08-19T12:21:09Z", "author": {"login": "ascend1"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/CreateViewNode.java", "diffHunk": "@@ -291,9 +291,6 @@ public void bindStatement() throws StandardException\n \t\t\t//cannot define views on temporary tables\n \t\t\tif (queryExpr instanceof SelectNode)\n \t\t\t{\n-\t\t\t\t//If attempting to reference a SESSION schema table (temporary or permanent) in the view, throw an exception", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjcwNTAyMg=="}, "originalCommit": {"oid": "226b78c6bcb17840eb24bf4867a44d55c38dfd86"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM3NzU0Nw==", "bodyText": "The change looks good to me. A minor comment is that the call with the updated version of this.referencesSessionSchema() completely covers queryExpr.referencesSessionSchema(), so there is some redundancy. Maybe you can leave unchanged, and directly add the check getObjectName().schemaName.equals(SchemaDescriptor.STD_DECLARED_GLOBAL_TEMPORARY_TABLES_SCHEMA_NAME) here?", "url": "https://github.com/splicemachine/spliceengine/pull/4001#discussion_r473377547", "createdAt": "2020-08-19T22:14:49Z", "author": {"login": "yxia92"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/CreateViewNode.java", "diffHunk": "@@ -291,9 +291,6 @@ public void bindStatement() throws StandardException\n \t\t\t//cannot define views on temporary tables\n \t\t\tif (queryExpr instanceof SelectNode)\n \t\t\t{\n-\t\t\t\t//If attempting to reference a SESSION schema table (temporary or permanent) in the view, throw an exception", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjcwNTAyMg=="}, "originalCommit": {"oid": "226b78c6bcb17840eb24bf4867a44d55c38dfd86"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA1NTQyNA==", "bodyText": "Sure, done in the latest commit.", "url": "https://github.com/splicemachine/spliceengine/pull/4001#discussion_r474055424", "createdAt": "2020-08-20T15:06:30Z", "author": {"login": "ascend1"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/CreateViewNode.java", "diffHunk": "@@ -291,9 +291,6 @@ public void bindStatement() throws StandardException\n \t\t\t//cannot define views on temporary tables\n \t\t\tif (queryExpr instanceof SelectNode)\n \t\t\t{\n-\t\t\t\t//If attempting to reference a SESSION schema table (temporary or permanent) in the view, throw an exception", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjcwNTAyMg=="}, "originalCommit": {"oid": "226b78c6bcb17840eb24bf4867a44d55c38dfd86"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDc1MTA3OnYy", "diffSide": "RIGHT", "path": "splice_machine/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/WithStatementIT.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNToxNjozMVrOHCzukg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMjoxNjowNlrOHDcvAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjcwNjcwNg==", "bodyText": "Could you add a test case to test that in two concurrent connections, we can create two dynamic views using the same name under the session schema, and they will not interfere with each other? Thanks!", "url": "https://github.com/splicemachine/spliceengine/pull/4001#discussion_r472706706", "createdAt": "2020-08-19T05:16:31Z", "author": {"login": "yxia92"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/WithStatementIT.java", "diffHunk": "@@ -209,5 +231,34 @@ public void testInsertContainingWith() throws Exception {\n         assertEquals(expectedResult, TestUtils.FormattedResult.ResultFactory.toString(rs));\n     }\n \n+    @Test\n+    public void testWithInSchemaNotSufficientPrivilege() throws Exception {\n+        methodWatcher.executeUpdate(\"insert into t12 values (1)\");\n+        String expected = \"I |\\n\" +\n+                \"----\\n\" +\n+                \" 1 |\";\n+\n+        // user with enough privilege, dynamic view in SESSION schema\n+        try (ResultSet rs = methodWatcher.executeQuery(\"with dt as (select * from t12) select * from dt\")) {\n+            assertEquals(expected, TestUtils.FormattedResult.ResultFactory.toString(rs));\n+        }\n+        // user with enough privilege, dynamic view in current schema\n+        try (ResultSet rs = methodWatcher.executeQuery(format(\"with %s.dt as (select * from t12) select * from dt\", SCHEMA))) {\n+            assertEquals(expected, TestUtils.FormattedResult.ResultFactory.toString(rs));\n+        }\n+\n+        try (ResultSet rs = testUserConn.createStatement().executeQuery(\"values current schema\")) {\n+            String expectedSchema = \"1        |\\n\" +\n+                    \"-----------------\\n\" +\n+                    \"WITHSTATEMENTIT |\";\n+            assertEquals(expectedSchema, TestUtils.FormattedResult.ResultFactory.toString(rs));\n+        }\n \n+        // user with no write privilege, dynamic view in SESSION schema\n+        try (ResultSet rs = testUserConn.createStatement().executeQuery(format(\"with dt as (select * from t12) select * from dt\"))) {\n+            assertEquals(expected, TestUtils.FormattedResult.ResultFactory.toString(rs));\n+        }\n+        // user with no write privilege, dynamic view in current schema\n+        assertFailed(testUserConn, format(\"with %s.dt as (select * from t12) select * from dt\", SCHEMA), SQLState.AUTH_NO_ACCESS_NOT_OWNER);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "226b78c6bcb17840eb24bf4867a44d55c38dfd86"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk4MTU4Nw==", "bodyText": "Done.", "url": "https://github.com/splicemachine/spliceengine/pull/4001#discussion_r472981587", "createdAt": "2020-08-19T12:13:04Z", "author": {"login": "ascend1"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/WithStatementIT.java", "diffHunk": "@@ -209,5 +231,34 @@ public void testInsertContainingWith() throws Exception {\n         assertEquals(expectedResult, TestUtils.FormattedResult.ResultFactory.toString(rs));\n     }\n \n+    @Test\n+    public void testWithInSchemaNotSufficientPrivilege() throws Exception {\n+        methodWatcher.executeUpdate(\"insert into t12 values (1)\");\n+        String expected = \"I |\\n\" +\n+                \"----\\n\" +\n+                \" 1 |\";\n+\n+        // user with enough privilege, dynamic view in SESSION schema\n+        try (ResultSet rs = methodWatcher.executeQuery(\"with dt as (select * from t12) select * from dt\")) {\n+            assertEquals(expected, TestUtils.FormattedResult.ResultFactory.toString(rs));\n+        }\n+        // user with enough privilege, dynamic view in current schema\n+        try (ResultSet rs = methodWatcher.executeQuery(format(\"with %s.dt as (select * from t12) select * from dt\", SCHEMA))) {\n+            assertEquals(expected, TestUtils.FormattedResult.ResultFactory.toString(rs));\n+        }\n+\n+        try (ResultSet rs = testUserConn.createStatement().executeQuery(\"values current schema\")) {\n+            String expectedSchema = \"1        |\\n\" +\n+                    \"-----------------\\n\" +\n+                    \"WITHSTATEMENTIT |\";\n+            assertEquals(expectedSchema, TestUtils.FormattedResult.ResultFactory.toString(rs));\n+        }\n \n+        // user with no write privilege, dynamic view in SESSION schema\n+        try (ResultSet rs = testUserConn.createStatement().executeQuery(format(\"with dt as (select * from t12) select * from dt\"))) {\n+            assertEquals(expected, TestUtils.FormattedResult.ResultFactory.toString(rs));\n+        }\n+        // user with no write privilege, dynamic view in current schema\n+        assertFailed(testUserConn, format(\"with %s.dt as (select * from t12) select * from dt\", SCHEMA), SQLState.AUTH_NO_ACCESS_NOT_OWNER);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjcwNjcwNg=="}, "originalCommit": {"oid": "226b78c6bcb17840eb24bf4867a44d55c38dfd86"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM3ODU2Mg==", "bodyText": "Thanks!", "url": "https://github.com/splicemachine/spliceengine/pull/4001#discussion_r473378562", "createdAt": "2020-08-19T22:16:06Z", "author": {"login": "yxia92"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/WithStatementIT.java", "diffHunk": "@@ -209,5 +231,34 @@ public void testInsertContainingWith() throws Exception {\n         assertEquals(expectedResult, TestUtils.FormattedResult.ResultFactory.toString(rs));\n     }\n \n+    @Test\n+    public void testWithInSchemaNotSufficientPrivilege() throws Exception {\n+        methodWatcher.executeUpdate(\"insert into t12 values (1)\");\n+        String expected = \"I |\\n\" +\n+                \"----\\n\" +\n+                \" 1 |\";\n+\n+        // user with enough privilege, dynamic view in SESSION schema\n+        try (ResultSet rs = methodWatcher.executeQuery(\"with dt as (select * from t12) select * from dt\")) {\n+            assertEquals(expected, TestUtils.FormattedResult.ResultFactory.toString(rs));\n+        }\n+        // user with enough privilege, dynamic view in current schema\n+        try (ResultSet rs = methodWatcher.executeQuery(format(\"with %s.dt as (select * from t12) select * from dt\", SCHEMA))) {\n+            assertEquals(expected, TestUtils.FormattedResult.ResultFactory.toString(rs));\n+        }\n+\n+        try (ResultSet rs = testUserConn.createStatement().executeQuery(\"values current schema\")) {\n+            String expectedSchema = \"1        |\\n\" +\n+                    \"-----------------\\n\" +\n+                    \"WITHSTATEMENTIT |\";\n+            assertEquals(expectedSchema, TestUtils.FormattedResult.ResultFactory.toString(rs));\n+        }\n \n+        // user with no write privilege, dynamic view in SESSION schema\n+        try (ResultSet rs = testUserConn.createStatement().executeQuery(format(\"with dt as (select * from t12) select * from dt\"))) {\n+            assertEquals(expected, TestUtils.FormattedResult.ResultFactory.toString(rs));\n+        }\n+        // user with no write privilege, dynamic view in current schema\n+        assertFailed(testUserConn, format(\"with %s.dt as (select * from t12) select * from dt\", SCHEMA), SQLState.AUTH_NO_ACCESS_NOT_OWNER);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjcwNjcwNg=="}, "originalCommit": {"oid": "226b78c6bcb17840eb24bf4867a44d55c38dfd86"}, "originalPosition": 150}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3003, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}