{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMxMDg0MzI4", "number": 4763, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNjoxNjowMVrOE_smDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNjoxOTo1NVrOE_stpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MjI2MzgxOnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/BinaryComparisonOperatorNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNjoxNjowMVrOH9iznA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNjo1NDo0MVrOH9ko1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI5NTQ1Mg==", "bodyText": "Change this to 'else if'", "url": "https://github.com/splicemachine/spliceengine/pull/4763#discussion_r534295452", "createdAt": "2020-12-02T16:16:01Z", "author": {"login": "msirek"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/BinaryComparisonOperatorNode.java", "diffHunk": "@@ -116,6 +116,24 @@ boolean getBetweenSelectivity() {\n         return betweenSelectivity;\n     }\n \n+    @Override\n+    protected void bindParameters() throws StandardException {\n+        if (leftOperand.requiresTypeFromContext()) {\n+            if (rightOperand.requiresTypeFromContext()) {\n+                // DB2 compatible behavior\n+                DataTypeDescriptor dtd = DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.VARCHAR, false, 254);\n+                leftOperand.setType(dtd);\n+                rightOperand.setType(dtd);\n+                return;\n+            } else {\n+                leftOperand.setType(rightOperand.getTypeServices());\n+            }\n+        }\n+\n+        if (rightOperand.requiresTypeFromContext()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "162127727c1941f2285c4d146a685e8063f4a72a"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDMyNTQ2Mw==", "bodyText": "Done.", "url": "https://github.com/splicemachine/spliceengine/pull/4763#discussion_r534325463", "createdAt": "2020-12-02T16:54:41Z", "author": {"login": "ascend1"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/BinaryComparisonOperatorNode.java", "diffHunk": "@@ -116,6 +116,24 @@ boolean getBetweenSelectivity() {\n         return betweenSelectivity;\n     }\n \n+    @Override\n+    protected void bindParameters() throws StandardException {\n+        if (leftOperand.requiresTypeFromContext()) {\n+            if (rightOperand.requiresTypeFromContext()) {\n+                // DB2 compatible behavior\n+                DataTypeDescriptor dtd = DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.VARCHAR, false, 254);\n+                leftOperand.setType(dtd);\n+                rightOperand.setType(dtd);\n+                return;\n+            } else {\n+                leftOperand.setType(rightOperand.getTypeServices());\n+            }\n+        }\n+\n+        if (rightOperand.requiresTypeFromContext()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI5NTQ1Mg=="}, "originalCommit": {"oid": "162127727c1941f2285c4d146a685e8063f4a72a"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MjI2NzMzOnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/BinaryOperatorNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNjoxNjozNlrOH9i1nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNjo1NTo0MVrOH9kr9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI5NTk2NQ==", "bodyText": "Change to 'else if'", "url": "https://github.com/splicemachine/spliceengine/pull/4763#discussion_r534295965", "createdAt": "2020-12-02T16:16:36Z", "author": {"login": "msirek"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/BinaryOperatorNode.java", "diffHunk": "@@ -322,6 +322,31 @@ public void printSubNodes(int depth)\n         }\n     }\n \n+    protected void bindParameters() throws StandardException {\n+        /* Is there a ? parameter on the left? */\n+        if (leftOperand.requiresTypeFromContext()) {\n+            /* Default Splice behavior:\n+             * It's an error if both operands are ? parameters.\n+             * This is overridden is some of the derived classes to be DB2 compatible.\n+             * DB2 doc on this:\n+             * https://www.ibm.com/support/knowledgecenter/SSEPGG_11.5.0/com.ibm.db2.luw.sql.ref.doc/doc/r0053561.html\n+             */\n+            if (rightOperand.requiresTypeFromContext()) {\n+                throw StandardException.newException(SQLState.LANG_BINARY_OPERANDS_BOTH_PARMS,\n+                        operator);\n+            }\n+\n+            /* Set the left operand to the type of right parameter. */\n+            leftOperand.setType(rightOperand.getTypeServices());\n+        }\n+\n+        /* Is there a ? parameter on the right? */\n+        if (rightOperand.requiresTypeFromContext()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "162127727c1941f2285c4d146a685e8063f4a72a"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDMyNjI2MQ==", "bodyText": "Done.", "url": "https://github.com/splicemachine/spliceengine/pull/4763#discussion_r534326261", "createdAt": "2020-12-02T16:55:41Z", "author": {"login": "ascend1"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/BinaryOperatorNode.java", "diffHunk": "@@ -322,6 +322,31 @@ public void printSubNodes(int depth)\n         }\n     }\n \n+    protected void bindParameters() throws StandardException {\n+        /* Is there a ? parameter on the left? */\n+        if (leftOperand.requiresTypeFromContext()) {\n+            /* Default Splice behavior:\n+             * It's an error if both operands are ? parameters.\n+             * This is overridden is some of the derived classes to be DB2 compatible.\n+             * DB2 doc on this:\n+             * https://www.ibm.com/support/knowledgecenter/SSEPGG_11.5.0/com.ibm.db2.luw.sql.ref.doc/doc/r0053561.html\n+             */\n+            if (rightOperand.requiresTypeFromContext()) {\n+                throw StandardException.newException(SQLState.LANG_BINARY_OPERANDS_BOTH_PARMS,\n+                        operator);\n+            }\n+\n+            /* Set the left operand to the type of right parameter. */\n+            leftOperand.setType(rightOperand.getTypeServices());\n+        }\n+\n+        /* Is there a ? parameter on the right? */\n+        if (rightOperand.requiresTypeFromContext()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI5NTk2NQ=="}, "originalCommit": {"oid": "162127727c1941f2285c4d146a685e8063f4a72a"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MjI4MzI2OnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/ProjectRestrictNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNjoxOTo1NVrOH9i_tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNjo1MjowNlrOH9khaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI5ODU0OA==", "bodyText": "Since you are not using the collected nodes, it would be more efficient to have a mode where CollectNodesVisitor stops searching once the first node is found.  Maybe create a new constructor that accepts a boolean as a 2nd parameter.", "url": "https://github.com/splicemachine/spliceengine/pull/4763#discussion_r534298548", "createdAt": "2020-12-02T16:19:55Z", "author": {"login": "msirek"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/ProjectRestrictNode.java", "diffHunk": "@@ -1719,6 +1721,10 @@ private void generateMinion(ExpressionClassBuilder acb,\n             // which is the static field that \"points\" to the userExprFun\n             // that evaluates the where clause.\n             acb.pushMethodReference(mb,userExprFun);\n+\n+            CollectNodesVisitor cnv = new CollectNodesVisitor(ParameterNode.class);\n+            constantRestriction.accept(cnv);\n+            mb.push(!cnv.getList().isEmpty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "162127727c1941f2285c4d146a685e8063f4a72a"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDMyMzU2MQ==", "bodyText": "You're right. I just remember that we have a HasNodeVisitor. Will use that instead.", "url": "https://github.com/splicemachine/spliceengine/pull/4763#discussion_r534323561", "createdAt": "2020-12-02T16:52:06Z", "author": {"login": "ascend1"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/ProjectRestrictNode.java", "diffHunk": "@@ -1719,6 +1721,10 @@ private void generateMinion(ExpressionClassBuilder acb,\n             // which is the static field that \"points\" to the userExprFun\n             // that evaluates the where clause.\n             acb.pushMethodReference(mb,userExprFun);\n+\n+            CollectNodesVisitor cnv = new CollectNodesVisitor(ParameterNode.class);\n+            constantRestriction.accept(cnv);\n+            mb.push(!cnv.getList().isEmpty());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI5ODU0OA=="}, "originalCommit": {"oid": "162127727c1941f2285c4d146a685e8063f4a72a"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2696, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}