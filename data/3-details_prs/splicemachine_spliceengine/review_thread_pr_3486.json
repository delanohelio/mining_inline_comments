{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4NjUzODMy", "number": 3486, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOToyNTowN1rOD16_5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMDoyMDoxOVrOD18Nug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3ODY3NzQ4OnYy", "diffSide": "RIGHT", "path": "hbase_sql/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/ExternalTableIT.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOToyNTowN1rOGLmAsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwODo0Mzo0NlrOGLylPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgxMDI5MQ==", "bodyText": "I think \"null_test_location_avro\" should be \"/null_test_location_avro\", otherwise, the temporary directory used would be something like \"SpliceUnitTest_temp_xxxxnull_test_location_avro\" instead of \"SpliceUnitTest_temp_xxxxn/ull_test_location_avro\". And the after test call deleteTempDirectory() wouldn't be able to delete this directory.  Everything else looks good to me.", "url": "https://github.com/splicemachine/spliceengine/pull/3486#discussion_r414810291", "createdAt": "2020-04-24T19:25:07Z", "author": {"login": "yxia92"}, "path": "hbase_sql/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/ExternalTableIT.java", "diffHunk": "@@ -572,7 +562,7 @@ public void testWriteReadNullValues() throws Exception {\n     @Test\n     public void testWriteReadNullValuesAvro() throws Exception {\n \n-        String tablePath = getExternalResourceDirectory()+\"null_test_location_avro\";\n+        String tablePath = getTempOutputDirectory() + \"null_test_location_avro\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f0f076aef9c07ef99d334cf0c81c9fffc6bb67b"}, "originalPosition": 279}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg5NTQ4OQ==", "bodyText": "actually a lot of tests forgot the /, so i added it to getTempOutputDirectory", "url": "https://github.com/splicemachine/spliceengine/pull/3486#discussion_r414895489", "createdAt": "2020-04-24T22:21:58Z", "author": {"login": "martinrupp"}, "path": "hbase_sql/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/ExternalTableIT.java", "diffHunk": "@@ -572,7 +562,7 @@ public void testWriteReadNullValues() throws Exception {\n     @Test\n     public void testWriteReadNullValuesAvro() throws Exception {\n \n-        String tablePath = getExternalResourceDirectory()+\"null_test_location_avro\";\n+        String tablePath = getTempOutputDirectory() + \"null_test_location_avro\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgxMDI5MQ=="}, "originalCommit": {"oid": "7f0f076aef9c07ef99d334cf0c81c9fffc6bb67b"}, "originalPosition": 279}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAxNjI1NQ==", "bodyText": "done", "url": "https://github.com/splicemachine/spliceengine/pull/3486#discussion_r415016255", "createdAt": "2020-04-25T08:43:46Z", "author": {"login": "martinrupp"}, "path": "hbase_sql/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/ExternalTableIT.java", "diffHunk": "@@ -572,7 +562,7 @@ public void testWriteReadNullValues() throws Exception {\n     @Test\n     public void testWriteReadNullValuesAvro() throws Exception {\n \n-        String tablePath = getExternalResourceDirectory()+\"null_test_location_avro\";\n+        String tablePath = getTempOutputDirectory() + \"null_test_location_avro\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgxMDI5MQ=="}, "originalCommit": {"oid": "7f0f076aef9c07ef99d334cf0c81c9fffc6bb67b"}, "originalPosition": 279}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3ODg2Nzc0OnYy", "diffSide": "RIGHT", "path": "splice_machine/src/test/java/com/splicemachine/derby/test/framework/SpliceUnitTestWithTempDirectory.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMDoxNzo0NFrOGLntQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwODo0Mzo1MlrOGLylUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgzODA4Mw==", "bodyText": "Better create temp directories in \"/target\" as previously - build is self-contained, more control, less surprises.", "url": "https://github.com/splicemachine/spliceengine/pull/3486#discussion_r414838083", "createdAt": "2020-04-24T20:17:44Z", "author": {"login": "OlegMazurov"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/test/framework/SpliceUnitTestWithTempDirectory.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package com.splicemachine.derby.test.framework;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.junit.After;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+/// this class extends SpliceUnitTest so that each test\n+/// can access a temporary output directory that is removed after the test is run\n+/// the temporary output directory is created only on demand.\n+/// might be also doable like SpliceSchemaWatcher extends TestWatcher\n+public class SpliceUnitTestWithTempDirectory extends SpliceUnitTest\n+{\n+    /// set the following boolean to true to prevent deletion of temporary files (e.g. for debugging)\n+    public boolean debug_no_delete = false;\n+    /// the temporary directory (created on demand)\n+    private Path tempDir = null;\n+\n+    /// this will be called after each test, deleting possible temp directories.\n+    @After\n+    public void deleteTempDirectory() throws Exception\n+    {\n+        if( tempDir == null )\n+            return;\n+        else if( debug_no_delete )\n+            System.out.println( \"Not deleting test temporary directory \" + tempDir );\n+        else\n+            FileUtils.deleteDirectory( tempDir.toFile() );\n+    }\n+\n+    /// this will return the temp directory, that is created on demand once for each test\n+    public String getTempOutputDirectory() throws Exception\n+    {\n+        if( tempDir == null)\n+            tempDir = Files.createTempDirectory( \"SpliceUnitTest_temp_\" );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f0f076aef9c07ef99d334cf0c81c9fffc6bb67b"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg5NDIwMQ==", "bodyText": "ok", "url": "https://github.com/splicemachine/spliceengine/pull/3486#discussion_r414894201", "createdAt": "2020-04-24T22:18:18Z", "author": {"login": "martinrupp"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/test/framework/SpliceUnitTestWithTempDirectory.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package com.splicemachine.derby.test.framework;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.junit.After;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+/// this class extends SpliceUnitTest so that each test\n+/// can access a temporary output directory that is removed after the test is run\n+/// the temporary output directory is created only on demand.\n+/// might be also doable like SpliceSchemaWatcher extends TestWatcher\n+public class SpliceUnitTestWithTempDirectory extends SpliceUnitTest\n+{\n+    /// set the following boolean to true to prevent deletion of temporary files (e.g. for debugging)\n+    public boolean debug_no_delete = false;\n+    /// the temporary directory (created on demand)\n+    private Path tempDir = null;\n+\n+    /// this will be called after each test, deleting possible temp directories.\n+    @After\n+    public void deleteTempDirectory() throws Exception\n+    {\n+        if( tempDir == null )\n+            return;\n+        else if( debug_no_delete )\n+            System.out.println( \"Not deleting test temporary directory \" + tempDir );\n+        else\n+            FileUtils.deleteDirectory( tempDir.toFile() );\n+    }\n+\n+    /// this will return the temp directory, that is created on demand once for each test\n+    public String getTempOutputDirectory() throws Exception\n+    {\n+        if( tempDir == null)\n+            tempDir = Files.createTempDirectory( \"SpliceUnitTest_temp_\" );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgzODA4Mw=="}, "originalCommit": {"oid": "7f0f076aef9c07ef99d334cf0c81c9fffc6bb67b"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAxNjI3Mw==", "bodyText": "done", "url": "https://github.com/splicemachine/spliceengine/pull/3486#discussion_r415016273", "createdAt": "2020-04-25T08:43:52Z", "author": {"login": "martinrupp"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/test/framework/SpliceUnitTestWithTempDirectory.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package com.splicemachine.derby.test.framework;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.junit.After;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+/// this class extends SpliceUnitTest so that each test\n+/// can access a temporary output directory that is removed after the test is run\n+/// the temporary output directory is created only on demand.\n+/// might be also doable like SpliceSchemaWatcher extends TestWatcher\n+public class SpliceUnitTestWithTempDirectory extends SpliceUnitTest\n+{\n+    /// set the following boolean to true to prevent deletion of temporary files (e.g. for debugging)\n+    public boolean debug_no_delete = false;\n+    /// the temporary directory (created on demand)\n+    private Path tempDir = null;\n+\n+    /// this will be called after each test, deleting possible temp directories.\n+    @After\n+    public void deleteTempDirectory() throws Exception\n+    {\n+        if( tempDir == null )\n+            return;\n+        else if( debug_no_delete )\n+            System.out.println( \"Not deleting test temporary directory \" + tempDir );\n+        else\n+            FileUtils.deleteDirectory( tempDir.toFile() );\n+    }\n+\n+    /// this will return the temp directory, that is created on demand once for each test\n+    public String getTempOutputDirectory() throws Exception\n+    {\n+        if( tempDir == null)\n+            tempDir = Files.createTempDirectory( \"SpliceUnitTest_temp_\" );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgzODA4Mw=="}, "originalCommit": {"oid": "7f0f076aef9c07ef99d334cf0c81c9fffc6bb67b"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3ODg3MDAwOnYy", "diffSide": "RIGHT", "path": "splice_machine/src/test/java/com/splicemachine/derby/test/framework/SpliceUnitTestWithTempDirectory.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMDoxODoyMFrOGLnugQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwODo0Mzo1N1rOGLylZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgzODQwMQ==", "bodyText": "Why not merge the content of this class into SpliceUnitTest. We already have createBadLogDirectory there, f.e.\nDevelopers creating new unit tests won't need to differentiate between SpliceUnitTest and SpliceUnitTestWithTempDirectory: either you use the temporary directory or not. Passive overhead is negligible.", "url": "https://github.com/splicemachine/spliceengine/pull/3486#discussion_r414838401", "createdAt": "2020-04-24T20:18:20Z", "author": {"login": "OlegMazurov"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/test/framework/SpliceUnitTestWithTempDirectory.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package com.splicemachine.derby.test.framework;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.junit.After;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+/// this class extends SpliceUnitTest so that each test\n+/// can access a temporary output directory that is removed after the test is run\n+/// the temporary output directory is created only on demand.\n+/// might be also doable like SpliceSchemaWatcher extends TestWatcher\n+public class SpliceUnitTestWithTempDirectory extends SpliceUnitTest", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f0f076aef9c07ef99d334cf0c81c9fffc6bb67b"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg5NDY3NQ==", "bodyText": "if preferred, also possible.", "url": "https://github.com/splicemachine/spliceengine/pull/3486#discussion_r414894675", "createdAt": "2020-04-24T22:19:40Z", "author": {"login": "martinrupp"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/test/framework/SpliceUnitTestWithTempDirectory.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package com.splicemachine.derby.test.framework;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.junit.After;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+/// this class extends SpliceUnitTest so that each test\n+/// can access a temporary output directory that is removed after the test is run\n+/// the temporary output directory is created only on demand.\n+/// might be also doable like SpliceSchemaWatcher extends TestWatcher\n+public class SpliceUnitTestWithTempDirectory extends SpliceUnitTest", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgzODQwMQ=="}, "originalCommit": {"oid": "7f0f076aef9c07ef99d334cf0c81c9fffc6bb67b"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAxNjI5NA==", "bodyText": "done", "url": "https://github.com/splicemachine/spliceengine/pull/3486#discussion_r415016294", "createdAt": "2020-04-25T08:43:57Z", "author": {"login": "martinrupp"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/test/framework/SpliceUnitTestWithTempDirectory.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package com.splicemachine.derby.test.framework;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.junit.After;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+/// this class extends SpliceUnitTest so that each test\n+/// can access a temporary output directory that is removed after the test is run\n+/// the temporary output directory is created only on demand.\n+/// might be also doable like SpliceSchemaWatcher extends TestWatcher\n+public class SpliceUnitTestWithTempDirectory extends SpliceUnitTest", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgzODQwMQ=="}, "originalCommit": {"oid": "7f0f076aef9c07ef99d334cf0c81c9fffc6bb67b"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3ODg3Njc0OnYy", "diffSide": "RIGHT", "path": "splice_machine/src/test/java/com/splicemachine/derby/test/framework/SpliceUnitTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMDoyMDoxOVrOGLnyXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwODo0NDowNFrOGLyldg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgzOTM5MA==", "bodyText": "Not used?", "url": "https://github.com/splicemachine/spliceengine/pull/3486#discussion_r414839390", "createdAt": "2020-04-24T20:20:19Z", "author": {"login": "OlegMazurov"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/test/framework/SpliceUnitTest.java", "diffHunk": "@@ -17,7 +17,9 @@\n import com.splicemachine.homeless.TestUtils;\n import com.splicemachine.utils.Pair;\n import org.apache.commons.io.FileUtils;\n+import org.junit.AfterClass;\n import org.junit.Assert;\n+import org.junit.BeforeClass;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f0f076aef9c07ef99d334cf0c81c9fffc6bb67b"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAxNjMxMA==", "bodyText": "done", "url": "https://github.com/splicemachine/spliceengine/pull/3486#discussion_r415016310", "createdAt": "2020-04-25T08:44:04Z", "author": {"login": "martinrupp"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/test/framework/SpliceUnitTest.java", "diffHunk": "@@ -17,7 +17,9 @@\n import com.splicemachine.homeless.TestUtils;\n import com.splicemachine.utils.Pair;\n import org.apache.commons.io.FileUtils;\n+import org.junit.AfterClass;\n import org.junit.Assert;\n+import org.junit.BeforeClass;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgzOTM5MA=="}, "originalCommit": {"oid": "7f0f076aef9c07ef99d334cf0c81c9fffc6bb67b"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3273, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}