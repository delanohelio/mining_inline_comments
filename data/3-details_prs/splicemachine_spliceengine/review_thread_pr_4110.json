{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg0MzE3ODIz", "number": 4110, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMzozNjo0N1rOEkwvdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNzo0MDoxNlrOEzrh4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTgyNzcyOnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/FromBaseTable.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMzozNjo0N1rOHT4_8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMzoxNTo0OFrOHWtb7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYxODg2Nw==", "bodyText": "Here we set proper ordering to base table columns according to index column ordering. For expression-based indexes, however, I'm not sure what to do here since whether an index column is ascending or descending doesn't really mean anything to the ordering of base table columns.", "url": "https://github.com/splicemachine/spliceengine/pull/4110#discussion_r490618867", "createdAt": "2020-09-17T23:36:47Z", "author": {"login": "ascend1"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/FromBaseTable.java", "diffHunk": "@@ -436,18 +435,20 @@ public boolean nextAccessPath(Optimizer optimizer,\n                 boolean[] isAscending=irg.isAscending();\n \n                 for(int i=0;i<baseColumnPositions.length;i++){\n-                    int rowOrderDirection=isAscending[i]?RowOrdering.ASCENDING:RowOrdering.DESCENDING;\n-                    int pos = rowOrdering.orderedPositionForColumn(rowOrderDirection,getTableNumber(),baseColumnPositions[i]);\n-                    if (pos == -1) {\n-                        rowOrdering.nextOrderPosition(rowOrderDirection);\n-                        pos = rowOrdering.addOrderedColumn(rowOrderDirection,getTableNumber(),baseColumnPositions[i]);\n-                    }\n-                    // check if the column has a constant predicate like \"col=constant\" defined on it,\n-                    // if so, we can treat it as sorted as it has only one value\n-                    if (pos >=0 &&    /* a column ordering is added or exists */\n-                        hasConstantPredicate(getTableNumber(), baseColumnPositions[i], predList)) {\n-                        ColumnOrdering co = rowOrdering.getOrderedColumn(pos);\n-                        co.setBoundByConstant(true);\n+                    if (!irg.isOnExpression()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "198a53e02ead69b95bf102b6df95704ea706d167"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA4Njc1MA==", "bodyText": "I think we are not leveraging the sortorder of the index on expression right now (which could be useful for qualifying merge join and to do orderby elimination), that is fine, but we should track this as a limitation or future enhancement.", "url": "https://github.com/splicemachine/spliceengine/pull/4110#discussion_r493086750", "createdAt": "2020-09-22T23:21:44Z", "author": {"login": "yxia92"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/FromBaseTable.java", "diffHunk": "@@ -436,18 +435,20 @@ public boolean nextAccessPath(Optimizer optimizer,\n                 boolean[] isAscending=irg.isAscending();\n \n                 for(int i=0;i<baseColumnPositions.length;i++){\n-                    int rowOrderDirection=isAscending[i]?RowOrdering.ASCENDING:RowOrdering.DESCENDING;\n-                    int pos = rowOrdering.orderedPositionForColumn(rowOrderDirection,getTableNumber(),baseColumnPositions[i]);\n-                    if (pos == -1) {\n-                        rowOrdering.nextOrderPosition(rowOrderDirection);\n-                        pos = rowOrdering.addOrderedColumn(rowOrderDirection,getTableNumber(),baseColumnPositions[i]);\n-                    }\n-                    // check if the column has a constant predicate like \"col=constant\" defined on it,\n-                    // if so, we can treat it as sorted as it has only one value\n-                    if (pos >=0 &&    /* a column ordering is added or exists */\n-                        hasConstantPredicate(getTableNumber(), baseColumnPositions[i], predList)) {\n-                        ColumnOrdering co = rowOrdering.getOrderedColumn(pos);\n-                        co.setBoundByConstant(true);\n+                    if (!irg.isOnExpression()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYxODg2Nw=="}, "originalCommit": {"oid": "198a53e02ead69b95bf102b6df95704ea706d167"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzU3NTE1MQ==", "bodyText": "OK, I created a Jira ticket to track this issue. I need to investigate a bit more on how we can respect the sort order defined on index expressions.", "url": "https://github.com/splicemachine/spliceengine/pull/4110#discussion_r493575151", "createdAt": "2020-09-23T13:15:48Z", "author": {"login": "ascend1"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/FromBaseTable.java", "diffHunk": "@@ -436,18 +435,20 @@ public boolean nextAccessPath(Optimizer optimizer,\n                 boolean[] isAscending=irg.isAscending();\n \n                 for(int i=0;i<baseColumnPositions.length;i++){\n-                    int rowOrderDirection=isAscending[i]?RowOrdering.ASCENDING:RowOrdering.DESCENDING;\n-                    int pos = rowOrdering.orderedPositionForColumn(rowOrderDirection,getTableNumber(),baseColumnPositions[i]);\n-                    if (pos == -1) {\n-                        rowOrdering.nextOrderPosition(rowOrderDirection);\n-                        pos = rowOrdering.addOrderedColumn(rowOrderDirection,getTableNumber(),baseColumnPositions[i]);\n-                    }\n-                    // check if the column has a constant predicate like \"col=constant\" defined on it,\n-                    // if so, we can treat it as sorted as it has only one value\n-                    if (pos >=0 &&    /* a column ordering is added or exists */\n-                        hasConstantPredicate(getTableNumber(), baseColumnPositions[i], predList)) {\n-                        ColumnOrdering co = rowOrdering.getOrderedColumn(pos);\n-                        co.setBoundByConstant(true);\n+                    if (!irg.isOnExpression()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYxODg2Nw=="}, "originalCommit": {"oid": "198a53e02ead69b95bf102b6df95704ea706d167"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTgzNzYyOnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/FromBaseTable.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMzo0MToyNlrOHT5Fgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMzo0MToyNlrOHT5Fgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYyMDI5MQ==", "bodyText": "For now, simply take all expression-based indexes as non-covering indexes. Doing so limits the scope of this change to a manageable size for code review. Treating an expression-based index as a covering index is DB-10236 and will have its own PR.", "url": "https://github.com/splicemachine/spliceengine/pull/4110#discussion_r490620291", "createdAt": "2020-09-17T23:41:26Z", "author": {"login": "ascend1"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/FromBaseTable.java", "diffHunk": "@@ -516,8 +517,11 @@ public boolean isCoveringIndex(ConglomerateDescriptor cd) throws StandardExcepti\n             return false;\n \n         IndexRowGenerator irg=cd.getIndexDescriptor();\n-        int[] baseCols=irg.baseColumnPositions();\n \n+        if (irg.isOnExpression())\n+            return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "198a53e02ead69b95bf102b6df95704ea706d167"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTg0NjQxOnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/FromBaseTable.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMzo0NTozOFrOHT5KpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMzo0NTozOFrOHT5KpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYyMTYwNA==", "bodyText": "This comment is true only for this change because all expression-based indexes are non-covering indexes. In next step, to rewrite an index expression to a column reference, we do the following:\nrc.setIndexExpression(exprAst);\nrc.setReferenced();\nrc.setVirtualColumnId(i + 1);  // virtual column IDs are 1-based\nrc.setName(idxCD.getConglomerateName() + \"_col\" + rc.getColumnPosition());", "url": "https://github.com/splicemachine/spliceengine/pull/4110#discussion_r490621604", "createdAt": "2020-09-17T23:45:38Z", "author": {"login": "ascend1"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/FromBaseTable.java", "diffHunk": "@@ -1952,43 +1980,61 @@ private ResultColumnList newResultColumns(\n             boolean cloneRCs)\n             throws StandardException{\n         IndexRowGenerator irg=idxCD.getIndexDescriptor();\n-        int[] baseCols=irg.baseColumnPositions();\n-        ResultColumnList newCols=\n-                (ResultColumnList)getNodeFactory().getNode(\n+        ResultColumnList newCols =\n+                (ResultColumnList) getNodeFactory().getNode(\n                         C_NodeTypes.RESULT_COLUMN_LIST,\n                         getContextManager());\n \n-        for(int basePosition : baseCols){\n-            ResultColumn oldCol=oldColumns.getResultColumn(basePosition);\n-            ResultColumn newCol;\n+        if (irg.isOnExpression()) {\n+            // When building new ResultColumn instances, we don't need to set expression\n+            // or virtual column number as they are not needed. In case of a scan on an\n+            // expression-based index, these are just placeholders. All we care about is\n+            // that they should all be referenced for now so that we can build the\n+            // template row, then we will clear reference status and set them properly.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "198a53e02ead69b95bf102b6df95704ea706d167"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTgwOTM1OnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/BinaryRelationalOperatorNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMjoyNDo1OFrOHWOdNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMzoyMDoyM1rOHWtstQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA2NzU3NQ==", "bodyText": "This logic is not consistent with the original logic. When forIndexExpression is false, the logic will still set otherSide if left has more than one column reference, as long as the first column reference matches the input column reference. With the original logic, otherSide won't be set if there are more than one column references. Is this change intended?", "url": "https://github.com/splicemachine/spliceengine/pull/4110#discussion_r493067575", "createdAt": "2020-09-22T22:24:58Z", "author": {"login": "yxia92"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/BinaryRelationalOperatorNode.java", "diffHunk": "@@ -502,12 +523,27 @@ public boolean selfComparison(ColumnReference cr)\n         ** Figure out which side the given ColumnReference is on,\n         ** and look for the same table on the other side.\n         */\n-        if(lcr != null && lcr.size() == 1 && lcr.get(0) == cr){\n-            otherSide=rightOperand;\n-        }else {\n+        if(lcr != null && !lcr.isEmpty()){\n+            int bound = forIndexExpression ? lcr.size() : 1;\n+            for (int i = 0; i < bound; i++) {\n+                if (lcr.get(i) == cr) {\n+                    otherSide = rightOperand;\n+                    break;\n+                }\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f3a3b8c1b41b91e877b949971df30bb4f1fe1d"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzU3OTQ0NQ==", "bodyText": "You are right, behavior of this function is changed and it's not intended. It's fixed in next commit.", "url": "https://github.com/splicemachine/spliceengine/pull/4110#discussion_r493579445", "createdAt": "2020-09-23T13:20:23Z", "author": {"login": "ascend1"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/BinaryRelationalOperatorNode.java", "diffHunk": "@@ -502,12 +523,27 @@ public boolean selfComparison(ColumnReference cr)\n         ** Figure out which side the given ColumnReference is on,\n         ** and look for the same table on the other side.\n         */\n-        if(lcr != null && lcr.size() == 1 && lcr.get(0) == cr){\n-            otherSide=rightOperand;\n-        }else {\n+        if(lcr != null && !lcr.isEmpty()){\n+            int bound = forIndexExpression ? lcr.size() : 1;\n+            for (int i = 0; i < bound; i++) {\n+                if (lcr.get(i) == cr) {\n+                    otherSide = rightOperand;\n+                    break;\n+                }\n+            }\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA2NzU3NQ=="}, "originalCommit": {"oid": "f5f3a3b8c1b41b91e877b949971df30bb4f1fe1d"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTk0NTg3OnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/PredicateList.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMzoyNjo1NFrOHWPuCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMzo1MToxNFrOHWvhOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA4ODI2NA==", "bodyText": "It seems that usefulStartKey() calls BinaryRelationalOperatorNode.usefulStartKey() which relies on leftMatchIndexExpr and rightMatchIndexExpr, however, these two variables are only set in matchIndexExpression() which is called a few lines below.", "url": "https://github.com/splicemachine/spliceengine/pull/4110#discussion_r493088264", "createdAt": "2020-09-22T23:26:54Z", "author": {"login": "yxia92"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/PredicateList.java", "diffHunk": "@@ -183,7 +200,7 @@ public boolean useful(Optimizable optTable,ConglomerateDescriptor cd) throws Sta\n             ** nor a useful stop key for this table, it is not useful\n             ** for limiting an index scan.\n             */\n-            if((!isIn) && (!relop.usefulStartKey(optTable)) && (!relop.usefulStopKey(optTable))){\n+            if((!isIn) && (!relop.usefulStartKey(optTable, id)) && (!relop.usefulStopKey(optTable, id))){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f3a3b8c1b41b91e877b949971df30bb4f1fe1d"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYwOTI3NQ==", "bodyText": "Oh, that's a good catch! In next commit, I have moved this check down below, after matchIndexExpression is called.", "url": "https://github.com/splicemachine/spliceengine/pull/4110#discussion_r493609275", "createdAt": "2020-09-23T13:51:14Z", "author": {"login": "ascend1"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/PredicateList.java", "diffHunk": "@@ -183,7 +200,7 @@ public boolean useful(Optimizable optTable,ConglomerateDescriptor cd) throws Sta\n             ** nor a useful stop key for this table, it is not useful\n             ** for limiting an index scan.\n             */\n-            if((!isIn) && (!relop.usefulStartKey(optTable)) && (!relop.usefulStopKey(optTable))){\n+            if((!isIn) && (!relop.usefulStartKey(optTable, id)) && (!relop.usefulStopKey(optTable, id))){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA4ODI2NA=="}, "originalCommit": {"oid": "f5f3a3b8c1b41b91e877b949971df30bb4f1fe1d"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTk4NDIzOnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/PredicateList.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMzo0NDo1MVrOHWQESA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNDowNToyM1rOHWwN1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA5Mzk2MA==", "bodyText": "Looking at the caller of matchIndexExpression(), the list of column references found does not seem to be really useful, would a boolean as returned value sufficient?", "url": "https://github.com/splicemachine/spliceengine/pull/4110#discussion_r493093960", "createdAt": "2020-09-22T23:44:51Z", "author": {"login": "yxia92"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/PredicateList.java", "diffHunk": "@@ -564,6 +612,58 @@ public static Integer isIndexUseful(Predicate pred,\n         return indexPosition;\n     }\n \n+    // Return an empty list if relOp doesn't match index expression. This is OK because an index expression must\n+    // have at least one column reference. Also, since an index is defined on one table, an index expression\n+    // cannot have column references referencing different tables.\n+    private static List<ColumnReference> matchIndexExpression(RelationalOperator relOp, InListOperatorNode inNode,\n+                                                              boolean isIn, boolean isProbe,\n+                                                              ValueNode indexExprAst, Optimizable optTable)\n+            throws StandardException\n+    {\n+        CollectNodesVisitor cnv = new CollectNodesVisitor(ColumnReference.class);\n+        int tableNumber = optTable.getTableNumber();  // OK to be -1, will be checked when use\n+        if (isIn) {\n+            if (inNode.getLeftOperand().equals(indexExprAst)) {\n+                inNode.getLeftOperand().accept(cnv);\n+                if (isProbe) {\n+                    assert relOp instanceof BinaryOperatorNode;\n+                    BinaryOperatorNode binOp = (BinaryOperatorNode) relOp;\n+                    binOp.setMatchIndexExpr(tableNumber, true);\n+                }\n+            }\n+        } else {\n+            if (relOp instanceof BinaryOperatorNode) {\n+                BinaryOperatorNode binOp = (BinaryOperatorNode) relOp;\n+                if (binOp.getLeftOperand().equals(indexExprAst)) {\n+                    binOp.getLeftOperand().accept(cnv);\n+                    binOp.setMatchIndexExpr(tableNumber, true);\n+                } else if (binOp.getRightOperand().equals(indexExprAst)) {\n+                    binOp.getRightOperand().accept(cnv);\n+                    binOp.setMatchIndexExpr(tableNumber, false);\n+                }\n+            } else if (relOp instanceof IsNullNode) {\n+                IsNullNode isNull = (IsNullNode) relOp;\n+                if (isNull.getOperand().equals(indexExprAst)) {\n+                    isNull.getOperand().accept(cnv);\n+                    // No need to set any matchIndexExpr flag since it won't be used in code generation.\n+                }\n+            }\n+        }\n+        return cnv.getList();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f3a3b8c1b41b91e877b949971df30bb4f1fe1d"}, "originalPosition": 214}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYyMDY5Mg==", "bodyText": "Right, the list is not useful. I changed the return value to boolean in the next commit.\nI was thinking that we have to pass in a valid ColumnReference to selfReference() and selfComparison(), otherwise the logic might be broken. But I just checked again these two functions and it seems they only care about tableNumber, which is correctly set in the index expression AST.", "url": "https://github.com/splicemachine/spliceengine/pull/4110#discussion_r493620692", "createdAt": "2020-09-23T14:05:23Z", "author": {"login": "ascend1"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/PredicateList.java", "diffHunk": "@@ -564,6 +612,58 @@ public static Integer isIndexUseful(Predicate pred,\n         return indexPosition;\n     }\n \n+    // Return an empty list if relOp doesn't match index expression. This is OK because an index expression must\n+    // have at least one column reference. Also, since an index is defined on one table, an index expression\n+    // cannot have column references referencing different tables.\n+    private static List<ColumnReference> matchIndexExpression(RelationalOperator relOp, InListOperatorNode inNode,\n+                                                              boolean isIn, boolean isProbe,\n+                                                              ValueNode indexExprAst, Optimizable optTable)\n+            throws StandardException\n+    {\n+        CollectNodesVisitor cnv = new CollectNodesVisitor(ColumnReference.class);\n+        int tableNumber = optTable.getTableNumber();  // OK to be -1, will be checked when use\n+        if (isIn) {\n+            if (inNode.getLeftOperand().equals(indexExprAst)) {\n+                inNode.getLeftOperand().accept(cnv);\n+                if (isProbe) {\n+                    assert relOp instanceof BinaryOperatorNode;\n+                    BinaryOperatorNode binOp = (BinaryOperatorNode) relOp;\n+                    binOp.setMatchIndexExpr(tableNumber, true);\n+                }\n+            }\n+        } else {\n+            if (relOp instanceof BinaryOperatorNode) {\n+                BinaryOperatorNode binOp = (BinaryOperatorNode) relOp;\n+                if (binOp.getLeftOperand().equals(indexExprAst)) {\n+                    binOp.getLeftOperand().accept(cnv);\n+                    binOp.setMatchIndexExpr(tableNumber, true);\n+                } else if (binOp.getRightOperand().equals(indexExprAst)) {\n+                    binOp.getRightOperand().accept(cnv);\n+                    binOp.setMatchIndexExpr(tableNumber, false);\n+                }\n+            } else if (relOp instanceof IsNullNode) {\n+                IsNullNode isNull = (IsNullNode) relOp;\n+                if (isNull.getOperand().equals(indexExprAst)) {\n+                    isNull.getOperand().accept(cnv);\n+                    // No need to set any matchIndexExpr flag since it won't be used in code generation.\n+                }\n+            }\n+        }\n+        return cnv.getList();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA5Mzk2MA=="}, "originalCommit": {"oid": "f5f3a3b8c1b41b91e877b949971df30bb4f1fe1d"}, "originalPosition": 214}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTk5OTM2OnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/PredicateList.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMzo1Mjo1MVrOHWQNXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNDowMTo0MlrOHdhybg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA5NjI4Nw==", "bodyText": "Is it possible to cache the constructed AST tree? It seems expensive to re-construct the tree every time we evaluate the predicate list for an index. When there are N-way join and the number of join order permutations goes up, we could get here very frequently.", "url": "https://github.com/splicemachine/spliceengine/pull/4110#discussion_r493096287", "createdAt": "2020-09-22T23:52:51Z", "author": {"login": "yxia92"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/PredicateList.java", "diffHunk": "@@ -522,21 +549,42 @@ public static Integer isIndexUseful(Predicate pred,\n             return null;\n \n         /* Look for an index column on one side of the relop */\n-        if (baseColumnPositions != null) {\n-            for (indexPosition = 0; indexPosition < baseColumnPositions.length; indexPosition++) {\n-                if (isIn) {\n-                    if (inNode.getLeftOperand() instanceof ColumnReference) {\n-                        indexCol = (ColumnReference) inNode.getLeftOperand();\n-                        if ((optTable.getTableNumber() != indexCol.getTableNumber())\n-                                || (indexCol.getColumnNumber() != baseColumnPositions[indexPosition])\n-                                || inNode.selfReference(indexCol))\n-                            indexCol = null;\n+        if (isIndexOnExpr) {\n+            LanguageConnectionContext lcc = pred.getLanguageConnectionContext();\n+            CompilerContext newCC = lcc.pushCompilerContext();\n+            Parser p = newCC.getParser();\n+\n+            String[] exprTexts = indexDescriptor.getExprTexts();\n+            for (indexPosition = 0; indexPosition < exprTexts.length; indexPosition++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f3a3b8c1b41b91e877b949971df30bb4f1fe1d"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY3MzgwMQ==", "bodyText": "Yes, we definitely need to cache them. I have been thinking about it and created a Jira ticket to track things that could be improved: https://splicemachine.atlassian.net/browse/DB-10312.\nI didn't do it in this PR because I was not sure about where to cache these ASTs. I was thinking that they would be required in many other places not touched in this change, and if I implement something back then, it probably needs to be changed later.\nNow that I'm almost in the last major piece of this whole story, my idea is to cache the index expression ASTs in ConglomerateDescriptor. They will not be serialized or deserialized with other fields. Instead, we have always an empty Valuenode array when getting an instance either by constructing or deserialzing. Index expression will be parsed and stored in the array in the first time we use them, and later we just get from the array.\nI think it's a good place because we set ConglomerateDescriptor in access path once and almost every following operations on this access path get this instance. It's global enough, yet much better scoped than the context.\nI'd like to have your opinions on this before I start the implementation.", "url": "https://github.com/splicemachine/spliceengine/pull/4110#discussion_r493673801", "createdAt": "2020-09-23T15:11:40Z", "author": {"login": "ascend1"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/PredicateList.java", "diffHunk": "@@ -522,21 +549,42 @@ public static Integer isIndexUseful(Predicate pred,\n             return null;\n \n         /* Look for an index column on one side of the relop */\n-        if (baseColumnPositions != null) {\n-            for (indexPosition = 0; indexPosition < baseColumnPositions.length; indexPosition++) {\n-                if (isIn) {\n-                    if (inNode.getLeftOperand() instanceof ColumnReference) {\n-                        indexCol = (ColumnReference) inNode.getLeftOperand();\n-                        if ((optTable.getTableNumber() != indexCol.getTableNumber())\n-                                || (indexCol.getColumnNumber() != baseColumnPositions[indexPosition])\n-                                || inNode.selfReference(indexCol))\n-                            indexCol = null;\n+        if (isIndexOnExpr) {\n+            LanguageConnectionContext lcc = pred.getLanguageConnectionContext();\n+            CompilerContext newCC = lcc.pushCompilerContext();\n+            Parser p = newCC.getParser();\n+\n+            String[] exprTexts = indexDescriptor.getExprTexts();\n+            for (indexPosition = 0; indexPosition < exprTexts.length; indexPosition++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA5NjI4Nw=="}, "originalCommit": {"oid": "f5f3a3b8c1b41b91e877b949971df30bb4f1fe1d"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcyNDMzNA==", "bodyText": "Thanks @ascend1 ! It makes sense to me to cache it in the ConglomerateDescriptor. I couldn't think of any side effect of this approach, but it would be great to run through @dgomezferro and @jyuanca also and see if they see any downside about this approach.", "url": "https://github.com/splicemachine/spliceengine/pull/4110#discussion_r500724334", "createdAt": "2020-10-07T04:01:42Z", "author": {"login": "yxia92"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/PredicateList.java", "diffHunk": "@@ -522,21 +549,42 @@ public static Integer isIndexUseful(Predicate pred,\n             return null;\n \n         /* Look for an index column on one side of the relop */\n-        if (baseColumnPositions != null) {\n-            for (indexPosition = 0; indexPosition < baseColumnPositions.length; indexPosition++) {\n-                if (isIn) {\n-                    if (inNode.getLeftOperand() instanceof ColumnReference) {\n-                        indexCol = (ColumnReference) inNode.getLeftOperand();\n-                        if ((optTable.getTableNumber() != indexCol.getTableNumber())\n-                                || (indexCol.getColumnNumber() != baseColumnPositions[indexPosition])\n-                                || inNode.selfReference(indexCol))\n-                            indexCol = null;\n+        if (isIndexOnExpr) {\n+            LanguageConnectionContext lcc = pred.getLanguageConnectionContext();\n+            CompilerContext newCC = lcc.pushCompilerContext();\n+            Parser p = newCC.getParser();\n+\n+            String[] exprTexts = indexDescriptor.getExprTexts();\n+            for (indexPosition = 0; indexPosition < exprTexts.length; indexPosition++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA5NjI4Nw=="}, "originalCommit": {"oid": "f5f3a3b8c1b41b91e877b949971df30bb4f1fe1d"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NjAyMTA1OnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/Predicate.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMDowMzo1NlrOHWQaKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNDo0NzoxN1rOHWyQeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA5OTU2MQ==", "bodyText": "Can you reset the flag matchIndexExpression in clearScanFlags()?", "url": "https://github.com/splicemachine/spliceengine/pull/4110#discussion_r493099561", "createdAt": "2020-09-23T00:03:56Z", "author": {"login": "yxia92"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/Predicate.java", "diffHunk": "@@ -81,6 +81,8 @@\n     // getPredScopedForResultSet() method of this class for more.\n     private boolean scoped;\n \n+    private boolean matchIndexExpression;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f3a3b8c1b41b91e877b949971df30bb4f1fe1d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY1NDEzOA==", "bodyText": "Done.", "url": "https://github.com/splicemachine/spliceengine/pull/4110#discussion_r493654138", "createdAt": "2020-09-23T14:47:17Z", "author": {"login": "ascend1"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/Predicate.java", "diffHunk": "@@ -81,6 +81,8 @@\n     // getPredScopedForResultSet() method of this class for more.\n     private boolean scoped;\n \n+    private boolean matchIndexExpression;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA5OTU2MQ=="}, "originalCommit": {"oid": "f5f3a3b8c1b41b91e877b949971df30bb4f1fe1d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMDU4NTY1OnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/BinaryListOperatorNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNToxMzo1NFrOHortFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNjoxMzo1NFrOHpEs-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQyMTE0MA==", "bodyText": "The variable declaration of cnv should be moved inside the for loop, otherwise, we won't be able to detect empty column references correctly for second element and upper.", "url": "https://github.com/splicemachine/spliceengine/pull/4110#discussion_r512421140", "createdAt": "2020-10-27T05:13:54Z", "author": {"login": "yxia92"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/BinaryListOperatorNode.java", "diffHunk": "@@ -110,9 +110,11 @@ public ValueNode getLeftOperand() {\n         return (ValueNode) (singleLeftOperand ? leftOperandList.elementAt(0) : null);\n     }\n     \n-    public boolean allLeftOperandsColumnReferences() {\n-        for (Object obj:leftOperandList) {\n-            if (!(obj instanceof  ColumnReference))\n+    public boolean allLeftOperandsContainColumnReferences() throws StandardException {\n+        CollectNodesVisitor cnv = new CollectNodesVisitor(ColumnReference.class);\n+        for (int i = 0; i < leftOperandList.size(); i++) {\n+            leftOperandList.elementAt(i).accept(cnv);\n+            if (cnv.getList().isEmpty())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c65948d27940e0e3567baa1adc0839afc56da45"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjgzMDcxNQ==", "bodyText": "Ah, yes, this is buggy. I add cnv.getList().clear() in the loop. It should clear the vector and avoid constructing new object for each iteration.", "url": "https://github.com/splicemachine/spliceengine/pull/4110#discussion_r512830715", "createdAt": "2020-10-27T16:13:54Z", "author": {"login": "ascend1"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/BinaryListOperatorNode.java", "diffHunk": "@@ -110,9 +110,11 @@ public ValueNode getLeftOperand() {\n         return (ValueNode) (singleLeftOperand ? leftOperandList.elementAt(0) : null);\n     }\n     \n-    public boolean allLeftOperandsColumnReferences() {\n-        for (Object obj:leftOperandList) {\n-            if (!(obj instanceof  ColumnReference))\n+    public boolean allLeftOperandsContainColumnReferences() throws StandardException {\n+        CollectNodesVisitor cnv = new CollectNodesVisitor(ColumnReference.class);\n+        for (int i = 0; i < leftOperandList.size(); i++) {\n+            leftOperandList.elementAt(i).accept(cnv);\n+            if (cnv.getList().isEmpty())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQyMTE0MA=="}, "originalCommit": {"oid": "4c65948d27940e0e3567baa1adc0839afc56da45"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMjc1OTIwOnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/BinaryRelationalOperatorNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNDo1MTo0NlrOHpAYZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNTozNTo1NVrOHpwRlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc1OTkxMA==", "bodyText": "Method keyColumnOnLeft should be updated to handle all types of expressions.  It relies on getHashableJoinColumnReference() to collect the columns in the expression, but it doesn't seem to be working.\nExample:\n\ncreate table t1 (a int, b int, primary key(a));\ncreate index t1_idx on t1(a+b);\nexplain select * from t1 where a+b = 1;\nERROR XJ001: DERBY SQL error: SQLCODE: -1, SQLSTATE: XJ001, SQLERRMC: java.lang.IllegalStateExceptionASSERT FAILED Key column not found on either side.XJ001.U", "url": "https://github.com/splicemachine/spliceengine/pull/4110#discussion_r512759910", "createdAt": "2020-10-27T14:51:46Z", "author": {"login": "msirek"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/BinaryRelationalOperatorNode.java", "diffHunk": "@@ -527,19 +565,34 @@ public boolean selfComparison(ColumnReference cr)\n     /**\n      * @see RelationalOperator#usefulStartKey\n      */\n-    public boolean usefulStartKey(Optimizable optTable) {\n+    public boolean usefulStartKey(Optimizable optTable, IndexDescriptor id) {\n \n         BinaryRelationalOperatorNodeUtil.coerceDataTypeIfNecessary(this);\n \n         /*\n         ** Determine whether this operator is a useful start operator\n         ** with knowledge of whether the key column is on the left or right.\n         */\n-        int columnSide = columnOnOneSide(optTable);\n+        boolean isIndexOnExpr = id != null && id.isOnExpression();\n+        int columnSide = isIndexOnExpr ? indexExprOnOneSide(optTable) : columnOnOneSide(optTable);\n \n         return columnSide != NEITHER && usefulStartKey(columnSide == LEFT);\n     }\n \n+     /**\n+      * @see RelationalOperator#usefulStopKey\n+      */\n+     public boolean usefulStopKey(Optimizable optTable, IndexDescriptor id) {\n+         /*\n+          ** Determine whether this operator is a useful start operator\n+          ** with knowledge of whether the key column is on the left or right.\n+          */\n+         boolean isIndexOnExpr = id != null && id.isOnExpression();\n+         int columnSide = isIndexOnExpr ? indexExprOnOneSide(optTable) : columnOnOneSide(optTable);\n+\n+         return columnSide != NEITHER && usefulStopKey(columnSide == LEFT);\n+     }\n+\n     /**\n      * Return true if a key column for the given table is found on the\n      * left side of this operator, false if it is found on the right", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c65948d27940e0e3567baa1adc0839afc56da45"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU0NDU5Nw==", "bodyText": "Yes, I encountered this problem and adapted this method in a later change: https://github.com/splicemachine/spliceengine/pull/4302/files#diff-1a44e74c70698678a5e81411dcd41091a5b75308c80a5717a30f842b31256dfc. But still, I think it's better to apply the fix here and I make a new test for a case like a+b.", "url": "https://github.com/splicemachine/spliceengine/pull/4110#discussion_r513544597", "createdAt": "2020-10-28T15:35:55Z", "author": {"login": "ascend1"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/BinaryRelationalOperatorNode.java", "diffHunk": "@@ -527,19 +565,34 @@ public boolean selfComparison(ColumnReference cr)\n     /**\n      * @see RelationalOperator#usefulStartKey\n      */\n-    public boolean usefulStartKey(Optimizable optTable) {\n+    public boolean usefulStartKey(Optimizable optTable, IndexDescriptor id) {\n \n         BinaryRelationalOperatorNodeUtil.coerceDataTypeIfNecessary(this);\n \n         /*\n         ** Determine whether this operator is a useful start operator\n         ** with knowledge of whether the key column is on the left or right.\n         */\n-        int columnSide = columnOnOneSide(optTable);\n+        boolean isIndexOnExpr = id != null && id.isOnExpression();\n+        int columnSide = isIndexOnExpr ? indexExprOnOneSide(optTable) : columnOnOneSide(optTable);\n \n         return columnSide != NEITHER && usefulStartKey(columnSide == LEFT);\n     }\n \n+     /**\n+      * @see RelationalOperator#usefulStopKey\n+      */\n+     public boolean usefulStopKey(Optimizable optTable, IndexDescriptor id) {\n+         /*\n+          ** Determine whether this operator is a useful start operator\n+          ** with knowledge of whether the key column is on the left or right.\n+          */\n+         boolean isIndexOnExpr = id != null && id.isOnExpression();\n+         int columnSide = isIndexOnExpr ? indexExprOnOneSide(optTable) : columnOnOneSide(optTable);\n+\n+         return columnSide != NEITHER && usefulStopKey(columnSide == LEFT);\n+     }\n+\n     /**\n      * Return true if a key column for the given table is found on the\n      * left side of this operator, false if it is found on the right", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc1OTkxMA=="}, "originalCommit": {"oid": "4c65948d27940e0e3567baa1adc0839afc56da45"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMzU4MjMxOnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/PredicateList.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNzozNDozMVrOHpIdHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNTo0MjoyNVrOHpwmXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg5MjE5MQ==", "bodyText": "The equals method will only match 2 different JavaToSQLValueNodes if they are the exact same object:\n\nprotected boolean isEquivalent(ValueNode o)\n{\n    // anything in the java domain is not equiavlent.\n    return false;//this == o;\n}\n\n\nTherefore, if you have something like:\n\ncreate index t1_idx on t1(ln(a));\nexplain select * from t1 --splice-properties index=t1_idx\nwhere ln(a) > 1;\n\nIt cannot take advantage of the index.  It may be better to write a new method for comparing expressions, that defaults to using the equals method for all nodes, but then for JavaToSQLValueNode we could override the implementation and do the proper expression comparison.  Note that non-deterministic functions should not ever be considered the same expression.", "url": "https://github.com/splicemachine/spliceengine/pull/4110#discussion_r512892191", "createdAt": "2020-10-27T17:34:31Z", "author": {"login": "msirek"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/PredicateList.java", "diffHunk": "@@ -564,6 +613,53 @@ public static Integer isIndexUseful(Predicate pred,\n         return indexPosition;\n     }\n \n+    private static boolean matchIndexExpression(RelationalOperator relOp, InListOperatorNode inNode,\n+                                                boolean isIn, boolean isProbe,\n+                                                ValueNode indexExprAst, Optimizable optTable) {\n+        boolean match = false;\n+        int tableNumber = optTable.getTableNumber();  // OK to be -1, will be checked when use\n+        if (isIn) {\n+            if (inNode.getLeftOperand().equals(indexExprAst)) {\n+                match = true;\n+                if (isProbe) {\n+                    assert relOp instanceof BinaryOperatorNode;\n+                    BinaryOperatorNode binOp = (BinaryOperatorNode) relOp;\n+                    binOp.setMatchIndexExpr(tableNumber, true);\n+                }\n+            }\n+        } else {\n+            if (relOp instanceof BinaryOperatorNode) {\n+                BinaryOperatorNode binOp = (BinaryOperatorNode) relOp;\n+                if (binOp.getLeftOperand().equals(indexExprAst)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf9602776fbe57fac0d07cbe0dff0c086932f8e4"}, "originalPosition": 223}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU0OTkxOQ==", "bodyText": "Absolutely. I just found this yesterday when implementing hashCode() and it made my eyes open. There are also some other classes compare using ==. I'm working on a fix.", "url": "https://github.com/splicemachine/spliceengine/pull/4110#discussion_r513549919", "createdAt": "2020-10-28T15:42:25Z", "author": {"login": "ascend1"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/PredicateList.java", "diffHunk": "@@ -564,6 +613,53 @@ public static Integer isIndexUseful(Predicate pred,\n         return indexPosition;\n     }\n \n+    private static boolean matchIndexExpression(RelationalOperator relOp, InListOperatorNode inNode,\n+                                                boolean isIn, boolean isProbe,\n+                                                ValueNode indexExprAst, Optimizable optTable) {\n+        boolean match = false;\n+        int tableNumber = optTable.getTableNumber();  // OK to be -1, will be checked when use\n+        if (isIn) {\n+            if (inNode.getLeftOperand().equals(indexExprAst)) {\n+                match = true;\n+                if (isProbe) {\n+                    assert relOp instanceof BinaryOperatorNode;\n+                    BinaryOperatorNode binOp = (BinaryOperatorNode) relOp;\n+                    binOp.setMatchIndexExpr(tableNumber, true);\n+                }\n+            }\n+        } else {\n+            if (relOp instanceof BinaryOperatorNode) {\n+                BinaryOperatorNode binOp = (BinaryOperatorNode) relOp;\n+                if (binOp.getLeftOperand().equals(indexExprAst)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg5MjE5MQ=="}, "originalCommit": {"oid": "bf9602776fbe57fac0d07cbe0dff0c086932f8e4"}, "originalPosition": 223}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjI2MDE5OnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/catalog/types/IndexDescriptorImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNzo0MDoxNlrOHrEEIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNTo1MjoyNlrOHrVVXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkxNzQwOQ==", "bodyText": "@ascend1 Could you check if IndexDescriptorImpl is cached as part of the TableDescriptor in dictionary cache? If so, it is shared among all the queries and the these code could cause the data structure to be modified concurrently, and that could be problematic.", "url": "https://github.com/splicemachine/spliceengine/pull/4110#discussion_r514917409", "createdAt": "2020-10-30T07:40:16Z", "author": {"login": "yxia92"}, "path": "db-engine/src/main/java/com/splicemachine/db/catalog/types/IndexDescriptorImpl.java", "diffHunk": "@@ -553,10 +564,90 @@ public BaseExecutableIndexExpression getExecutableIndexExpression(int indexColum\n                 : \"index has expression but generated class name is unknown\";\n         LanguageConnectionContext lcc = (LanguageConnectionContext) ContextService.getContext\n                 (LanguageConnectionContext.CONTEXT_ID);\n+        assert lcc != null;\n         ClassFactory classFactory = lcc.getLanguageConnectionFactory().getClassFactory();\n         GeneratedClass gc = classFactory.loadGeneratedClass(\n                 generatedClassNames[indexColumnPosition], exprBytecode[indexColumnPosition]);\n         executableExprs[indexColumnPosition] = (BaseExecutableIndexExpression) gc.newInstance(lcc);\n         return executableExprs[indexColumnPosition];\n     }\n+\n+    /** @see IndexDescriptor#getParsedIndexExpressions */\n+    @Override\n+    public ValueNode[] getParsedIndexExpressions(LanguageConnectionContext context, Optimizable optTable)\n+            throws StandardException\n+    {\n+        LanguageConnectionContext lcc = context;\n+        if (lcc == null) {\n+            lcc = (LanguageConnectionContext) ContextService.getContext(LanguageConnectionContext.CONTEXT_ID);\n+        }\n+        assert lcc != null;\n+\n+        if (exprAsts != null) {\n+            for (ValueNode ast : exprAsts) {\n+                setTableNumberToIndexExpr(ast, optTable);\n+                bindNecessaryNodesInIndexExpr(ast, optTable, lcc);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cf8db9f4c07e7ecbdf84a340c73c407a3ee70ca"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk4Mzk5OQ==", "bodyText": "@yxia92 I looked into the code again and I think IndexDescriptorImpl will be effectively cached because it's part of ConglomerateDescriptor, and TableDescriptor has a conglomerateDescriptorList. Thanks for pointing this out, it's indeed a serious problem.\nFor this change, I can remove the cache and let the method always parse. I mean, at this point, it doesn't seem to be a bad idea because it's correct and simple. Options to improve it could be:\n\nCache the ASTs in a statement-level cache so that different queries do not step on each other's feet. I'm not sure which objects' life cycle align with a statement and are always accessible during optimization. Maybe CompilerContext? It's managed in a stack, doesn't seem to be per statement. LCC? It's probably alive for the whole session?\nImplement clone() method to ValueNode class hierarchy and always return a deep copy of ASTs. IMHO, code would be more readable and maintainable in this way. Also, clone() is needed (I encountered two places) by some logic and currently we cannot do that for index expressions. But then back to the beginning, this probably has only marginal performance improvement comparing to always parsing since in both way we need to construct the same amount of objects. Only the grammar matching of parsing is saved, which is probably not much anyway, since javacc doesn't do backtracking and index expressions are usually short.", "url": "https://github.com/splicemachine/spliceengine/pull/4110#discussion_r514983999", "createdAt": "2020-10-30T09:56:39Z", "author": {"login": "ascend1"}, "path": "db-engine/src/main/java/com/splicemachine/db/catalog/types/IndexDescriptorImpl.java", "diffHunk": "@@ -553,10 +564,90 @@ public BaseExecutableIndexExpression getExecutableIndexExpression(int indexColum\n                 : \"index has expression but generated class name is unknown\";\n         LanguageConnectionContext lcc = (LanguageConnectionContext) ContextService.getContext\n                 (LanguageConnectionContext.CONTEXT_ID);\n+        assert lcc != null;\n         ClassFactory classFactory = lcc.getLanguageConnectionFactory().getClassFactory();\n         GeneratedClass gc = classFactory.loadGeneratedClass(\n                 generatedClassNames[indexColumnPosition], exprBytecode[indexColumnPosition]);\n         executableExprs[indexColumnPosition] = (BaseExecutableIndexExpression) gc.newInstance(lcc);\n         return executableExprs[indexColumnPosition];\n     }\n+\n+    /** @see IndexDescriptor#getParsedIndexExpressions */\n+    @Override\n+    public ValueNode[] getParsedIndexExpressions(LanguageConnectionContext context, Optimizable optTable)\n+            throws StandardException\n+    {\n+        LanguageConnectionContext lcc = context;\n+        if (lcc == null) {\n+            lcc = (LanguageConnectionContext) ContextService.getContext(LanguageConnectionContext.CONTEXT_ID);\n+        }\n+        assert lcc != null;\n+\n+        if (exprAsts != null) {\n+            for (ValueNode ast : exprAsts) {\n+                setTableNumberToIndexExpr(ast, optTable);\n+                bindNecessaryNodesInIndexExpr(ast, optTable, lcc);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkxNzQwOQ=="}, "originalCommit": {"oid": "2cf8db9f4c07e7ecbdf84a340c73c407a3ee70ca"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIwMDM1MA==", "bodyText": "Thanks @ascend1 for checking! I'm good with moving this change out from the current PR. CompilerContext as I understand is per-query, and it should be like a global structure visible during the query compilation phase for a particular query.", "url": "https://github.com/splicemachine/spliceengine/pull/4110#discussion_r515200350", "createdAt": "2020-10-30T15:52:26Z", "author": {"login": "yxia92"}, "path": "db-engine/src/main/java/com/splicemachine/db/catalog/types/IndexDescriptorImpl.java", "diffHunk": "@@ -553,10 +564,90 @@ public BaseExecutableIndexExpression getExecutableIndexExpression(int indexColum\n                 : \"index has expression but generated class name is unknown\";\n         LanguageConnectionContext lcc = (LanguageConnectionContext) ContextService.getContext\n                 (LanguageConnectionContext.CONTEXT_ID);\n+        assert lcc != null;\n         ClassFactory classFactory = lcc.getLanguageConnectionFactory().getClassFactory();\n         GeneratedClass gc = classFactory.loadGeneratedClass(\n                 generatedClassNames[indexColumnPosition], exprBytecode[indexColumnPosition]);\n         executableExprs[indexColumnPosition] = (BaseExecutableIndexExpression) gc.newInstance(lcc);\n         return executableExprs[indexColumnPosition];\n     }\n+\n+    /** @see IndexDescriptor#getParsedIndexExpressions */\n+    @Override\n+    public ValueNode[] getParsedIndexExpressions(LanguageConnectionContext context, Optimizable optTable)\n+            throws StandardException\n+    {\n+        LanguageConnectionContext lcc = context;\n+        if (lcc == null) {\n+            lcc = (LanguageConnectionContext) ContextService.getContext(LanguageConnectionContext.CONTEXT_ID);\n+        }\n+        assert lcc != null;\n+\n+        if (exprAsts != null) {\n+            for (ValueNode ast : exprAsts) {\n+                setTableNumberToIndexExpr(ast, optTable);\n+                bindNecessaryNodesInIndexExpr(ast, optTable, lcc);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkxNzQwOQ=="}, "originalCommit": {"oid": "2cf8db9f4c07e7ecbdf84a340c73c407a3ee70ca"}, "originalPosition": 80}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2980, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}