{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwMDIyMzkz", "number": 4863, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMDowOToxNFrOFFyNZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMDowOToxNFrOFFyNZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNjA5ODMwOnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/OptimizerImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMDowOToxNFrOIGd64Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMToyNDowNlrOIGgluQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY1MjU3Nw==", "bodyText": "Nitpick, can you make it a static constant instead of a hardcoded number?", "url": "https://github.com/splicemachine/spliceengine/pull/4863#discussion_r543652577", "createdAt": "2020-12-15T20:09:14Z", "author": {"login": "dgomezferro"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/OptimizerImpl.java", "diffHunk": "@@ -2178,6 +2196,17 @@ private void rememberBestCost(CostEstimate currentCost,int planType) throws Stan\n         // Consider consolidating all these into nanoseconds in the future.\n         if((bestCost.getEstimatedCost()/NANOS_TO_MILLIS)<timeLimit) {\n             timeLimit=bestCost.getEstimatedCost()/NANOS_TO_MILLIS;\n+\n+            // Triggers and other prepared statements may have a very low\n+            // cost estimate because the size of the involved trigger rows\n+            // is not known up-front.  We don't want to quit query compilation\n+            // early, resulting in a bad query plan or a plan which fails to\n+            // pick up query hints, especially since the\n+            // prepared statement does not need to be compiled on every\n+            // invocation, just once in a while.  So, it is time well\n+            // spent if it means we can compile a more optimal plan.\n+            if (timeLimit < 2000 && isPreparedStatement())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfa69d9ac5f9e39edd55fcce0affc27f3235a5d5"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY5NjMxMw==", "bodyText": "Done.", "url": "https://github.com/splicemachine/spliceengine/pull/4863#discussion_r543696313", "createdAt": "2020-12-15T21:24:06Z", "author": {"login": "msirek"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/OptimizerImpl.java", "diffHunk": "@@ -2178,6 +2196,17 @@ private void rememberBestCost(CostEstimate currentCost,int planType) throws Stan\n         // Consider consolidating all these into nanoseconds in the future.\n         if((bestCost.getEstimatedCost()/NANOS_TO_MILLIS)<timeLimit) {\n             timeLimit=bestCost.getEstimatedCost()/NANOS_TO_MILLIS;\n+\n+            // Triggers and other prepared statements may have a very low\n+            // cost estimate because the size of the involved trigger rows\n+            // is not known up-front.  We don't want to quit query compilation\n+            // early, resulting in a bad query plan or a plan which fails to\n+            // pick up query hints, especially since the\n+            // prepared statement does not need to be compiled on every\n+            // invocation, just once in a while.  So, it is time well\n+            // spent if it means we can compile a more optimal plan.\n+            if (timeLimit < 2000 && isPreparedStatement())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY1MjU3Nw=="}, "originalCommit": {"oid": "cfa69d9ac5f9e39edd55fcce0affc27f3235a5d5"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3397, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}