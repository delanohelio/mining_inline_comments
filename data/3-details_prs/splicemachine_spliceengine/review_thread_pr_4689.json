{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2NjkyMjk5", "number": 4689, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMjoxMjozNVrOE882xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMzozMjowN1rOE8_18w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzQ3MDc4OnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/SubqueryNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMjoxMjozNVrOH5YFAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMzo0NTozNFrOH5dpKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkyNTM3Nw==", "bodyText": "subqueryType cannot be NOT_EXISTS_SUBQUERY at this point, so we can safely remove this condition. subqueryType is modified later when eliminateNots is called in preprocssing the predicate containing this subquery.", "url": "https://github.com/splicemachine/spliceengine/pull/4689#discussion_r529925377", "createdAt": "2020-11-24T22:12:35Z", "author": {"login": "ascend1"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/SubqueryNode.java", "diffHunk": "@@ -425,6 +529,16 @@ public ValueNode bindExpression(FromList fromList,\n         //check if subquery is allowed in expression tree\n         checkReliability(CompilerContext.SUBQUERY_ILLEGAL,SQLState.LANG_SUBQUERY);\n \n+        // Rewrite a set operator tree so it's wrapped in a derived table.\n+        // This allows it to be flattenable, allowing for more efficient joins.\n+        // Disallow multicolumn IN/NOT IN for now to be safe.\n+        if (resultSet instanceof SetOperatorNode &&\n+            this.subqueryType != SubqueryNode.FROM_SUBQUERY &&\n+            (resultSet.getResultColumns().size() == 1 ||\n+             this.subqueryType == EXISTS_SUBQUERY     ||\n+             this.subqueryType == NOT_EXISTS_SUBQUERY ))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e520ff3c090a859c1f40c952c634f4b6476681d9"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAxNjU1NQ==", "bodyText": "OK, removed it.", "url": "https://github.com/splicemachine/spliceengine/pull/4689#discussion_r530016555", "createdAt": "2020-11-24T23:45:34Z", "author": {"login": "msirek"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/SubqueryNode.java", "diffHunk": "@@ -425,6 +529,16 @@ public ValueNode bindExpression(FromList fromList,\n         //check if subquery is allowed in expression tree\n         checkReliability(CompilerContext.SUBQUERY_ILLEGAL,SQLState.LANG_SUBQUERY);\n \n+        // Rewrite a set operator tree so it's wrapped in a derived table.\n+        // This allows it to be flattenable, allowing for more efficient joins.\n+        // Disallow multicolumn IN/NOT IN for now to be safe.\n+        if (resultSet instanceof SetOperatorNode &&\n+            this.subqueryType != SubqueryNode.FROM_SUBQUERY &&\n+            (resultSet.getResultColumns().size() == 1 ||\n+             this.subqueryType == EXISTS_SUBQUERY     ||\n+             this.subqueryType == NOT_EXISTS_SUBQUERY ))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkyNTM3Nw=="}, "originalCommit": {"oid": "e520ff3c090a859c1f40c952c634f4b6476681d9"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzUwOTI5OnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/SubqueryNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMjoxODo0NFrOH5YdtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMzo0NTo1MVrOH5dpmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkzMTcwMQ==", "bodyText": "Not used", "url": "https://github.com/splicemachine/spliceengine/pull/4689#discussion_r529931701", "createdAt": "2020-11-24T22:18:44Z", "author": {"login": "dgomezferro"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/SubqueryNode.java", "diffHunk": "@@ -403,6 +406,107 @@ public ValueNode remapColumnReferencesToExpressions() throws StandardException{\n         return this;\n     }\n \n+    private void updateColumnNamesInSetQuery(SetOperatorNode setOperatorNode,\n+                                             String columnName,\n+                                             int columnPosition)   throws StandardException {\n+        ResultColumn rc;\n+        boolean replacementDone = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e520ff3c090a859c1f40c952c634f4b6476681d9"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAxNjY2Ng==", "bodyText": "Removed it.", "url": "https://github.com/splicemachine/spliceengine/pull/4689#discussion_r530016666", "createdAt": "2020-11-24T23:45:51Z", "author": {"login": "msirek"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/SubqueryNode.java", "diffHunk": "@@ -403,6 +406,107 @@ public ValueNode remapColumnReferencesToExpressions() throws StandardException{\n         return this;\n     }\n \n+    private void updateColumnNamesInSetQuery(SetOperatorNode setOperatorNode,\n+                                             String columnName,\n+                                             int columnPosition)   throws StandardException {\n+        ResultColumn rc;\n+        boolean replacementDone = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkzMTcwMQ=="}, "originalCommit": {"oid": "e520ff3c090a859c1f40c952c634f4b6476681d9"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzY3NjE5OnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/SubqueryNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMjo0NDoxOFrOH5aInQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMzo0MTowNFrOH5diOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk1OTA2OQ==", "bodyText": "These two seem to be always nulls. Should we just pass in null, null or I missed something here?", "url": "https://github.com/splicemachine/spliceengine/pull/4689#discussion_r529959069", "createdAt": "2020-11-24T22:44:18Z", "author": {"login": "ascend1"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/SubqueryNode.java", "diffHunk": "@@ -403,6 +406,107 @@ public ValueNode remapColumnReferencesToExpressions() throws StandardException{\n         return this;\n     }\n \n+    private void updateColumnNamesInSetQuery(SetOperatorNode setOperatorNode,\n+                                             String columnName,\n+                                             int columnPosition)   throws StandardException {\n+        ResultColumn rc;\n+        boolean replacementDone = false;\n+        if (setOperatorNode.getLeftResultSet() instanceof SetOperatorNode) {\n+            updateColumnNamesInSetQuery((SetOperatorNode)setOperatorNode.getLeftResultSet(), columnName, columnPosition);\n+\n+        }\n+        else {\n+            rc = setOperatorNode.getLeftResultSet().getResultColumns().elementAt(columnPosition);\n+            rc.setName(columnName);\n+        }\n+        if (setOperatorNode.getRightResultSet() instanceof SetOperatorNode)\n+            updateColumnNamesInSetQuery((SetOperatorNode)setOperatorNode.getRightResultSet(), columnName, columnPosition);\n+        else {\n+            rc = setOperatorNode.getRightResultSet().getResultColumns().elementAt(columnPosition);\n+            rc.setName(columnName);\n+        }\n+        rc = setOperatorNode.getResultColumns().elementAt(columnPosition);;\n+        rc.setName(columnName);\n+        ColumnReference columnReference = (ColumnReference) getNodeFactory().getNode(\n+            C_NodeTypes.COLUMN_REFERENCE,\n+            columnName,\n+            null,\n+            getContextManager());\n+        rc.setExpression(columnReference);\n+    }\n+\n+    // Subquery flattening logic only knows how to flatten a SelectNode\n+    // in a subquery.  Everything else must be evaluated one row-at-a-time.\n+    // Let's get around the restriction by wrapping SetOp queries\n+    // (UNION, EXCEPT, INTERSECT) in a derived table, which itself\n+    // is represented as a SelectNode.\n+    // TODO:  Enhance subquery flattening logic to not require the\n+    //        the subquery expression to be a SelectNode.\n+    private void wrapSetQueryInDerivedTable() throws StandardException {\n+        if (!(resultSet instanceof SetOperatorNode))\n+            return;\n+        SetOperatorNode setOperatorNode = (SetOperatorNode)resultSet;\n+        ValueNode[] offsetClauses = new ValueNode[ OFFSET_CLAUSE_COUNT ];\n+        SubqueryNode derivedTable = (SubqueryNode) getNodeFactory().getNode(\n+                                        C_NodeTypes.SUBQUERY_NODE,\n+                                        resultSet,  // SetOperatorNode\n+                                        ReuseFactory.getInteger(SubqueryNode.FROM_SUBQUERY),\n+                                        null, // leftOperand,\n+                                        null, // orderCols,\n+                                        offsetClauses[ OFFSET_CLAUSE ],\n+                                        offsetClauses[ FETCH_FIRST_CLAUSE ],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e520ff3c090a859c1f40c952c634f4b6476681d9"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAxNDc3Ng==", "bodyText": "Yes, always nulls.  That means these options are not used.  This is code copied from sqlgrammar.  I tried to keep it the same instead of passing a null for the whole parameter in case that would cause NullPointerException.  I was comparing what happens when I create a derived table manually, and it created the array with nulls as well.", "url": "https://github.com/splicemachine/spliceengine/pull/4689#discussion_r530014776", "createdAt": "2020-11-24T23:41:04Z", "author": {"login": "msirek"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/SubqueryNode.java", "diffHunk": "@@ -403,6 +406,107 @@ public ValueNode remapColumnReferencesToExpressions() throws StandardException{\n         return this;\n     }\n \n+    private void updateColumnNamesInSetQuery(SetOperatorNode setOperatorNode,\n+                                             String columnName,\n+                                             int columnPosition)   throws StandardException {\n+        ResultColumn rc;\n+        boolean replacementDone = false;\n+        if (setOperatorNode.getLeftResultSet() instanceof SetOperatorNode) {\n+            updateColumnNamesInSetQuery((SetOperatorNode)setOperatorNode.getLeftResultSet(), columnName, columnPosition);\n+\n+        }\n+        else {\n+            rc = setOperatorNode.getLeftResultSet().getResultColumns().elementAt(columnPosition);\n+            rc.setName(columnName);\n+        }\n+        if (setOperatorNode.getRightResultSet() instanceof SetOperatorNode)\n+            updateColumnNamesInSetQuery((SetOperatorNode)setOperatorNode.getRightResultSet(), columnName, columnPosition);\n+        else {\n+            rc = setOperatorNode.getRightResultSet().getResultColumns().elementAt(columnPosition);\n+            rc.setName(columnName);\n+        }\n+        rc = setOperatorNode.getResultColumns().elementAt(columnPosition);;\n+        rc.setName(columnName);\n+        ColumnReference columnReference = (ColumnReference) getNodeFactory().getNode(\n+            C_NodeTypes.COLUMN_REFERENCE,\n+            columnName,\n+            null,\n+            getContextManager());\n+        rc.setExpression(columnReference);\n+    }\n+\n+    // Subquery flattening logic only knows how to flatten a SelectNode\n+    // in a subquery.  Everything else must be evaluated one row-at-a-time.\n+    // Let's get around the restriction by wrapping SetOp queries\n+    // (UNION, EXCEPT, INTERSECT) in a derived table, which itself\n+    // is represented as a SelectNode.\n+    // TODO:  Enhance subquery flattening logic to not require the\n+    //        the subquery expression to be a SelectNode.\n+    private void wrapSetQueryInDerivedTable() throws StandardException {\n+        if (!(resultSet instanceof SetOperatorNode))\n+            return;\n+        SetOperatorNode setOperatorNode = (SetOperatorNode)resultSet;\n+        ValueNode[] offsetClauses = new ValueNode[ OFFSET_CLAUSE_COUNT ];\n+        SubqueryNode derivedTable = (SubqueryNode) getNodeFactory().getNode(\n+                                        C_NodeTypes.SUBQUERY_NODE,\n+                                        resultSet,  // SetOperatorNode\n+                                        ReuseFactory.getInteger(SubqueryNode.FROM_SUBQUERY),\n+                                        null, // leftOperand,\n+                                        null, // orderCols,\n+                                        offsetClauses[ OFFSET_CLAUSE ],\n+                                        offsetClauses[ FETCH_FIRST_CLAUSE ],", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk1OTA2OQ=="}, "originalCommit": {"oid": "e520ff3c090a859c1f40c952c634f4b6476681d9"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzY5MzM2OnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/SubqueryNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMjo0Njo1OVrOH5aTbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMzo0MzoxMlrOH5dl6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk2MTgzNg==", "bodyText": "This flag is not used anywhere. Remove?", "url": "https://github.com/splicemachine/spliceengine/pull/4689#discussion_r529961836", "createdAt": "2020-11-24T22:46:59Z", "author": {"login": "ascend1"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/SubqueryNode.java", "diffHunk": "@@ -403,6 +406,107 @@ public ValueNode remapColumnReferencesToExpressions() throws StandardException{\n         return this;\n     }\n \n+    private void updateColumnNamesInSetQuery(SetOperatorNode setOperatorNode,\n+                                             String columnName,\n+                                             int columnPosition)   throws StandardException {\n+        ResultColumn rc;\n+        boolean replacementDone = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e520ff3c090a859c1f40c952c634f4b6476681d9"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAxNTcyMg==", "bodyText": "OK, removed it.", "url": "https://github.com/splicemachine/spliceengine/pull/4689#discussion_r530015722", "createdAt": "2020-11-24T23:43:12Z", "author": {"login": "msirek"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/SubqueryNode.java", "diffHunk": "@@ -403,6 +406,107 @@ public ValueNode remapColumnReferencesToExpressions() throws StandardException{\n         return this;\n     }\n \n+    private void updateColumnNamesInSetQuery(SetOperatorNode setOperatorNode,\n+                                             String columnName,\n+                                             int columnPosition)   throws StandardException {\n+        ResultColumn rc;\n+        boolean replacementDone = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk2MTgzNg=="}, "originalCommit": {"oid": "e520ff3c090a859c1f40c952c634f4b6476681d9"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzcwNTkwOnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/SubqueryNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMjo0OTowN1rOH5abwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMzo0MzozMlrOH5dmWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk2Mzk3MA==", "bodyText": "dummy semicolon at the end of line", "url": "https://github.com/splicemachine/spliceengine/pull/4689#discussion_r529963970", "createdAt": "2020-11-24T22:49:07Z", "author": {"login": "ascend1"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/SubqueryNode.java", "diffHunk": "@@ -403,6 +406,107 @@ public ValueNode remapColumnReferencesToExpressions() throws StandardException{\n         return this;\n     }\n \n+    private void updateColumnNamesInSetQuery(SetOperatorNode setOperatorNode,\n+                                             String columnName,\n+                                             int columnPosition)   throws StandardException {\n+        ResultColumn rc;\n+        boolean replacementDone = false;\n+        if (setOperatorNode.getLeftResultSet() instanceof SetOperatorNode) {\n+            updateColumnNamesInSetQuery((SetOperatorNode)setOperatorNode.getLeftResultSet(), columnName, columnPosition);\n+\n+        }\n+        else {\n+            rc = setOperatorNode.getLeftResultSet().getResultColumns().elementAt(columnPosition);\n+            rc.setName(columnName);\n+        }\n+        if (setOperatorNode.getRightResultSet() instanceof SetOperatorNode)\n+            updateColumnNamesInSetQuery((SetOperatorNode)setOperatorNode.getRightResultSet(), columnName, columnPosition);\n+        else {\n+            rc = setOperatorNode.getRightResultSet().getResultColumns().elementAt(columnPosition);\n+            rc.setName(columnName);\n+        }\n+        rc = setOperatorNode.getResultColumns().elementAt(columnPosition);;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e520ff3c090a859c1f40c952c634f4b6476681d9"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAxNTgzMg==", "bodyText": "removed", "url": "https://github.com/splicemachine/spliceengine/pull/4689#discussion_r530015832", "createdAt": "2020-11-24T23:43:32Z", "author": {"login": "msirek"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/SubqueryNode.java", "diffHunk": "@@ -403,6 +406,107 @@ public ValueNode remapColumnReferencesToExpressions() throws StandardException{\n         return this;\n     }\n \n+    private void updateColumnNamesInSetQuery(SetOperatorNode setOperatorNode,\n+                                             String columnName,\n+                                             int columnPosition)   throws StandardException {\n+        ResultColumn rc;\n+        boolean replacementDone = false;\n+        if (setOperatorNode.getLeftResultSet() instanceof SetOperatorNode) {\n+            updateColumnNamesInSetQuery((SetOperatorNode)setOperatorNode.getLeftResultSet(), columnName, columnPosition);\n+\n+        }\n+        else {\n+            rc = setOperatorNode.getLeftResultSet().getResultColumns().elementAt(columnPosition);\n+            rc.setName(columnName);\n+        }\n+        if (setOperatorNode.getRightResultSet() instanceof SetOperatorNode)\n+            updateColumnNamesInSetQuery((SetOperatorNode)setOperatorNode.getRightResultSet(), columnName, columnPosition);\n+        else {\n+            rc = setOperatorNode.getRightResultSet().getResultColumns().elementAt(columnPosition);\n+            rc.setName(columnName);\n+        }\n+        rc = setOperatorNode.getResultColumns().elementAt(columnPosition);;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk2Mzk3MA=="}, "originalCommit": {"oid": "e520ff3c090a859c1f40c952c634f4b6476681d9"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzk2MDE5OnYy", "diffSide": "RIGHT", "path": "splice_machine/src/test/java/com/splicemachine/subquery/Subquery_Flattening_InList_IT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMzozMjowN1rOH5dBdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMzo0NDo0M1rOH5doAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAwNjM5MA==", "bodyText": "We have an IT called Subquery_Flattening_Exists_Union_IT, probably a better match for this case. But it's your decision whether to move it or not.", "url": "https://github.com/splicemachine/spliceengine/pull/4689#discussion_r530006390", "createdAt": "2020-11-24T23:32:07Z", "author": {"login": "ascend1"}, "path": "splice_machine/src/test/java/com/splicemachine/subquery/Subquery_Flattening_InList_IT.java", "diffHunk": "@@ -360,4 +360,100 @@ public void numberOfColumnsMismatch() throws Exception {\n             Assert.assertEquals(\"42X58\", e.getSQLState());\n         }\n     }\n+\n+    @Test\n+    public void testSetOpInSubQFlatten() throws Exception {\n+\n+        String expected =\n+            \"A1 |A2 |\\n\" +\n+            \"--------\\n\" +\n+            \" 0 | 0 |\\n\" +\n+            \" 1 |10 |\\n\" +\n+            \" 2 |20 |\\n\" +\n+            \" 3 |30 |\\n\" +\n+            \" 4 |40 |\\n\" +\n+            \" 5 |50 |\";\n+        String sql = \"select a1,a2 from A\\n\" +\n+                \"WHERE a1 in (select a1 from A\" +\n+                \"            WHERE a1 in (\\n\" +\n+                \"            SELECT b1 FROM B \" +\n+                \"            UNION \" +\n+                \"            SELECT b1 FROM B ))\";\n+        assertUnorderedResult(methodWatcher.getOrCreateConnection(),\n+                              sql , ZERO_SUBQUERY_NODES, expected );\n+        sql = \"select a1,a2 from A\\n\" +\n+                \"WHERE a1 in (select a1 from A\" +\n+                \"            WHERE a1+a1 in (\\n\" +\n+                \"            SELECT b1+b1 FROM B \" +\n+                \"            UNION \" +\n+                \"            SELECT b1 FROM B ))\";\n+        assertUnorderedResult(methodWatcher.getOrCreateConnection(),\n+                              sql , ZERO_SUBQUERY_NODES, expected );\n+        sql = \"select a1,a2 from A\\n\" +\n+                \"WHERE a1 in (select a1 from A\" +\n+                \"            WHERE a1+a1 in (\\n\" +\n+                \"            SELECT b1 FROM B \" +\n+                \"            UNION \" +\n+                \"            SELECT b1+b1 FROM B ))\";\n+        assertUnorderedResult(methodWatcher.getOrCreateConnection(),\n+                              sql , ZERO_SUBQUERY_NODES, expected );\n+\n+        sql = \"select a1,a2 from A\\n\" +\n+                \"WHERE exists (select a1 from A\" +\n+                \"            WHERE a1+a1 in (\\n\" +\n+                \"            SELECT b1 FROM B \" +\n+                \"            UNION \" +\n+                \"            SELECT b1+b1 FROM B ))\";\n+        assertUnorderedResult(methodWatcher.getOrCreateConnection(),\n+                              sql , ONE_SUBQUERY_NODE, expected );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e520ff3c090a859c1f40c952c634f4b6476681d9"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAxNjI1Nw==", "bodyText": "OK, well I was mainly fixing this for IN list, so I put it there.  Also, this isn't specific to UNION, it's for all 3 set operation kinds.", "url": "https://github.com/splicemachine/spliceengine/pull/4689#discussion_r530016257", "createdAt": "2020-11-24T23:44:43Z", "author": {"login": "msirek"}, "path": "splice_machine/src/test/java/com/splicemachine/subquery/Subquery_Flattening_InList_IT.java", "diffHunk": "@@ -360,4 +360,100 @@ public void numberOfColumnsMismatch() throws Exception {\n             Assert.assertEquals(\"42X58\", e.getSQLState());\n         }\n     }\n+\n+    @Test\n+    public void testSetOpInSubQFlatten() throws Exception {\n+\n+        String expected =\n+            \"A1 |A2 |\\n\" +\n+            \"--------\\n\" +\n+            \" 0 | 0 |\\n\" +\n+            \" 1 |10 |\\n\" +\n+            \" 2 |20 |\\n\" +\n+            \" 3 |30 |\\n\" +\n+            \" 4 |40 |\\n\" +\n+            \" 5 |50 |\";\n+        String sql = \"select a1,a2 from A\\n\" +\n+                \"WHERE a1 in (select a1 from A\" +\n+                \"            WHERE a1 in (\\n\" +\n+                \"            SELECT b1 FROM B \" +\n+                \"            UNION \" +\n+                \"            SELECT b1 FROM B ))\";\n+        assertUnorderedResult(methodWatcher.getOrCreateConnection(),\n+                              sql , ZERO_SUBQUERY_NODES, expected );\n+        sql = \"select a1,a2 from A\\n\" +\n+                \"WHERE a1 in (select a1 from A\" +\n+                \"            WHERE a1+a1 in (\\n\" +\n+                \"            SELECT b1+b1 FROM B \" +\n+                \"            UNION \" +\n+                \"            SELECT b1 FROM B ))\";\n+        assertUnorderedResult(methodWatcher.getOrCreateConnection(),\n+                              sql , ZERO_SUBQUERY_NODES, expected );\n+        sql = \"select a1,a2 from A\\n\" +\n+                \"WHERE a1 in (select a1 from A\" +\n+                \"            WHERE a1+a1 in (\\n\" +\n+                \"            SELECT b1 FROM B \" +\n+                \"            UNION \" +\n+                \"            SELECT b1+b1 FROM B ))\";\n+        assertUnorderedResult(methodWatcher.getOrCreateConnection(),\n+                              sql , ZERO_SUBQUERY_NODES, expected );\n+\n+        sql = \"select a1,a2 from A\\n\" +\n+                \"WHERE exists (select a1 from A\" +\n+                \"            WHERE a1+a1 in (\\n\" +\n+                \"            SELECT b1 FROM B \" +\n+                \"            UNION \" +\n+                \"            SELECT b1+b1 FROM B ))\";\n+        assertUnorderedResult(methodWatcher.getOrCreateConnection(),\n+                              sql , ONE_SUBQUERY_NODE, expected );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAwNjM5MA=="}, "originalCommit": {"oid": "e520ff3c090a859c1f40c952c634f4b6476681d9"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2751, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}