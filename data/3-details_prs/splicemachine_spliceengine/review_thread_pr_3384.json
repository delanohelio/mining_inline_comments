{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4NDc2OTY4", "number": 3384, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMjoyOTo0MlrODvGtxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODozODozMVrODvdTYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNzE5Njg0OnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/GenericStatement.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMjoyOTo0MlrOGBVaDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMjoyOTo0MlrOGBVaDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA1MjQ5NQ==", "bodyText": "A warning could be logged here.", "url": "https://github.com/splicemachine/spliceengine/pull/3384#discussion_r404052495", "createdAt": "2020-04-06T12:29:42Z", "author": {"login": "arnaud-splice"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/GenericStatement.java", "diffHunk": "@@ -591,6 +591,20 @@ else if (nativeSparkAggregationModeString.equals(\"forced\"))\n                 }\n                 cc.setSparkVersion(sparkVersion);\n             }\n+\n+            String ssqFlatteningForUpdateDisabledString =\n+                    PropertyUtil.getCachedDatabaseProperty(lcc, Property.SSQ_FLATTENING_FOR_UPDATE_DISABLED);\n+            boolean ssqFlatteningForUpdateDisabled = CompilerContext.DEFAULT_SSQ_FLATTENING_FOR_UPDATE_DISABLED;\n+            try {\n+                if (ssqFlatteningForUpdateDisabledString != null)\n+                    ssqFlatteningForUpdateDisabled =\n+                            Boolean.valueOf(ssqFlatteningForUpdateDisabledString);\n+            } catch (Exception e) {\n+                // If the property value failed to convert to a boolean, don't throw an error,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2e7f08a7d8554f2e8aaae53f6d31c9df492219c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDg3NDkwOnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/execute/ResultSetFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODozMjozM1rOGB4ziA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjoxNzozNlrOGC2v9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYzMjQ1Ng==", "bodyText": "Are we forcing the recompilation of stored prepared statements? Otherwise we might break some with this change (triggers for instance)", "url": "https://github.com/splicemachine/spliceengine/pull/3384#discussion_r404632456", "createdAt": "2020-04-07T08:32:33Z", "author": {"login": "dgomezferro"}, "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/execute/ResultSetFactory.java", "diffHunk": "@@ -2105,60 +2105,62 @@ NoPutResultSet getRowCountResultSet(\n     /**\n      * Export\n      */\n-\tNoPutResultSet getExportResultSet(NoPutResultSet source,\n-\t\t\t\t\t\t\t\t\t  Activation activation,\n-\t\t\t\t\t\t\t\t\t  int resultSetNumber,\n-\t\t\t\t\t\t\t\t\t  String exportPath,\n-\t\t\t\t\t\t\t\t\t  String compression,\n-\t\t\t\t\t\t\t\t\t  int replicationCount,\n-\t\t\t\t\t\t\t\t\t  String encoding,\n-\t\t\t\t\t\t\t\t\t  String fieldSeparator,\n-\t\t\t\t\t\t\t\t\t  String quoteChar,\n-\t\t\t\t\t\t\t\t\t  int srcResultDescriptionSavedObjectNum) throws StandardException;\n-\n-\n-\t/**\n-\t * Binary Export\n-\t */\n-\tNoPutResultSet getBinaryExportResultSet(NoPutResultSet source,\n-\t\t\t\t\t\t\t\t\t  Activation activation,\n-\t\t\t\t\t\t\t\t\t  int resultSetNumber,\n-\t\t\t\t\t\t\t\t\t  String exportPath,\n-\t\t\t\t\t\t\t\t\t  String compression,\n-\t\t\t\t\t\t\t\t\t  String format,\n-\t\t\t\t\t\t\t\t\t  int srcResultDescriptionSavedObjectNum) throws StandardException;\n+    NoPutResultSet getExportResultSet(NoPutResultSet source,\n+                                      Activation activation,\n+                                      int resultSetNumber,\n+                                      String exportPath,\n+                                      String compression,\n+                                      int replicationCount,\n+                                      String encoding,\n+                                      String fieldSeparator,\n+                                      String quoteChar,\n+                                      int srcResultDescriptionSavedObjectNum) throws StandardException;\n+\n+\n+    /**\n+     * Binary Export\n+     */\n+    NoPutResultSet getBinaryExportResultSet(NoPutResultSet source,\n+                                      Activation activation,\n+                                      int resultSetNumber,\n+                                      String exportPath,\n+                                      String compression,\n+                                      String format,\n+                                      int srcResultDescriptionSavedObjectNum) throws StandardException;\n     /**\n      * Batch Once\n      */\n-\tNoPutResultSet getBatchOnceResultSet(NoPutResultSet source,\n-\t\t\t\t\t\t\t\t\t\t Activation activation,\n-\t\t\t\t\t\t\t\t\t\t int resultSetNumber,\n-\t\t\t\t\t\t\t\t\t\t NoPutResultSet subqueryResultSet,\n-\t\t\t\t\t\t\t\t\t\t String updateResultSetFieldName,\n-\t\t\t\t\t\t\t\t\t\t int sourceCorrelatedColumnItem,\n-\t\t\t\t\t\t\t\t\t\t int subqueryCorrelatedColumnItem) throws StandardException;\n-\n-\t/**\n-\t * Recursive query\n-\t */\n-\tNoPutResultSet getSelfReferenceResultSet(Activation activation,\n-\t\t\t\t\t\t\t\t\t\t\t GeneratedMethod rowAllocator,\n-\t\t\t\t\t\t\t\t\t\t\t int resultSetNumber,\n-\t\t\t\t\t\t\t\t\t\t\t double optimizerEstimatedRowCount,\n-\t\t\t\t\t\t\t\t\t\t\t double optimizerEstimatedCost,\n-\t\t\t\t\t\t\t\t\t\t\t String explainPlan) throws StandardException;\n-\n-\tNoPutResultSet getRecursiveUnionResultSet(NoPutResultSet leftResultSet,\n-\t\t\t\t\t\t\t\t\t\t\t  NoPutResultSet rightResultSet,\n-\t\t\t\t\t\t\t\t\t\t\t  int resultSetNumber,\n-\t\t\t\t\t\t\t\t\t\t\t  double optimizerEstimatedRowCount,\n-\t\t\t\t\t\t\t\t\t\t\t  double optimizerEstimatedCost,\n-\t\t\t\t\t\t\t\t\t\t\t  String explainPlan,\n-\t\t\t\t\t\t\t\t\t\t\t  int iterationLimit) throws StandardException;\n-\n-\tNoPutResultSet getSignalResultSet(Activation activation,\n-\t                                  String sqlState,\n-\t                                  GeneratedMethod errorTextGenerator) throws StandardException;\n+    NoPutResultSet getBatchOnceResultSet(NoPutResultSet source,\n+                                         Activation activation,\n+                                         int resultSetNumber,\n+                                         NoPutResultSet subqueryResultSet,\n+                                         String updateResultSetFieldName,\n+                                         int sourceCorrelatedColumnItem,\n+                                         int subqueryCorrelatedColumnItem,\n+                                         int sourceRowLoationColumnPosition,\n+                                         int cardinalityCheck) throws StandardException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2e7f08a7d8554f2e8aaae53f6d31c9df492219c"}, "originalPosition": 3913}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY0NzM0OQ==", "bodyText": "Thanks Daniel! Yes, we need to force a re=compilation of stored prepared statement. I've added an upgrade script to do that and tested upgrade with a trigger case.", "url": "https://github.com/splicemachine/spliceengine/pull/3384#discussion_r405647349", "createdAt": "2020-04-08T16:17:36Z", "author": {"login": "yxia92"}, "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/execute/ResultSetFactory.java", "diffHunk": "@@ -2105,60 +2105,62 @@ NoPutResultSet getRowCountResultSet(\n     /**\n      * Export\n      */\n-\tNoPutResultSet getExportResultSet(NoPutResultSet source,\n-\t\t\t\t\t\t\t\t\t  Activation activation,\n-\t\t\t\t\t\t\t\t\t  int resultSetNumber,\n-\t\t\t\t\t\t\t\t\t  String exportPath,\n-\t\t\t\t\t\t\t\t\t  String compression,\n-\t\t\t\t\t\t\t\t\t  int replicationCount,\n-\t\t\t\t\t\t\t\t\t  String encoding,\n-\t\t\t\t\t\t\t\t\t  String fieldSeparator,\n-\t\t\t\t\t\t\t\t\t  String quoteChar,\n-\t\t\t\t\t\t\t\t\t  int srcResultDescriptionSavedObjectNum) throws StandardException;\n-\n-\n-\t/**\n-\t * Binary Export\n-\t */\n-\tNoPutResultSet getBinaryExportResultSet(NoPutResultSet source,\n-\t\t\t\t\t\t\t\t\t  Activation activation,\n-\t\t\t\t\t\t\t\t\t  int resultSetNumber,\n-\t\t\t\t\t\t\t\t\t  String exportPath,\n-\t\t\t\t\t\t\t\t\t  String compression,\n-\t\t\t\t\t\t\t\t\t  String format,\n-\t\t\t\t\t\t\t\t\t  int srcResultDescriptionSavedObjectNum) throws StandardException;\n+    NoPutResultSet getExportResultSet(NoPutResultSet source,\n+                                      Activation activation,\n+                                      int resultSetNumber,\n+                                      String exportPath,\n+                                      String compression,\n+                                      int replicationCount,\n+                                      String encoding,\n+                                      String fieldSeparator,\n+                                      String quoteChar,\n+                                      int srcResultDescriptionSavedObjectNum) throws StandardException;\n+\n+\n+    /**\n+     * Binary Export\n+     */\n+    NoPutResultSet getBinaryExportResultSet(NoPutResultSet source,\n+                                      Activation activation,\n+                                      int resultSetNumber,\n+                                      String exportPath,\n+                                      String compression,\n+                                      String format,\n+                                      int srcResultDescriptionSavedObjectNum) throws StandardException;\n     /**\n      * Batch Once\n      */\n-\tNoPutResultSet getBatchOnceResultSet(NoPutResultSet source,\n-\t\t\t\t\t\t\t\t\t\t Activation activation,\n-\t\t\t\t\t\t\t\t\t\t int resultSetNumber,\n-\t\t\t\t\t\t\t\t\t\t NoPutResultSet subqueryResultSet,\n-\t\t\t\t\t\t\t\t\t\t String updateResultSetFieldName,\n-\t\t\t\t\t\t\t\t\t\t int sourceCorrelatedColumnItem,\n-\t\t\t\t\t\t\t\t\t\t int subqueryCorrelatedColumnItem) throws StandardException;\n-\n-\t/**\n-\t * Recursive query\n-\t */\n-\tNoPutResultSet getSelfReferenceResultSet(Activation activation,\n-\t\t\t\t\t\t\t\t\t\t\t GeneratedMethod rowAllocator,\n-\t\t\t\t\t\t\t\t\t\t\t int resultSetNumber,\n-\t\t\t\t\t\t\t\t\t\t\t double optimizerEstimatedRowCount,\n-\t\t\t\t\t\t\t\t\t\t\t double optimizerEstimatedCost,\n-\t\t\t\t\t\t\t\t\t\t\t String explainPlan) throws StandardException;\n-\n-\tNoPutResultSet getRecursiveUnionResultSet(NoPutResultSet leftResultSet,\n-\t\t\t\t\t\t\t\t\t\t\t  NoPutResultSet rightResultSet,\n-\t\t\t\t\t\t\t\t\t\t\t  int resultSetNumber,\n-\t\t\t\t\t\t\t\t\t\t\t  double optimizerEstimatedRowCount,\n-\t\t\t\t\t\t\t\t\t\t\t  double optimizerEstimatedCost,\n-\t\t\t\t\t\t\t\t\t\t\t  String explainPlan,\n-\t\t\t\t\t\t\t\t\t\t\t  int iterationLimit) throws StandardException;\n-\n-\tNoPutResultSet getSignalResultSet(Activation activation,\n-\t                                  String sqlState,\n-\t                                  GeneratedMethod errorTextGenerator) throws StandardException;\n+    NoPutResultSet getBatchOnceResultSet(NoPutResultSet source,\n+                                         Activation activation,\n+                                         int resultSetNumber,\n+                                         NoPutResultSet subqueryResultSet,\n+                                         String updateResultSetFieldName,\n+                                         int sourceCorrelatedColumnItem,\n+                                         int subqueryCorrelatedColumnItem,\n+                                         int sourceRowLoationColumnPosition,\n+                                         int cardinalityCheck) throws StandardException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYzMjQ1Ng=="}, "originalCommit": {"oid": "c2e7f08a7d8554f2e8aaae53f6d31c9df492219c"}, "originalPosition": 3913}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDg5NzYwOnYy", "diffSide": "RIGHT", "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/db/SpliceDatabase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODozODozMVrOGB5CLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjoxODo0NFrOGC2zHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYzNjIwNw==", "bodyText": "If we remove it from here we won't be using it anymore, right? I'd remove it altogether (BOVisitor, BONode and BOOperation)", "url": "https://github.com/splicemachine/spliceengine/pull/3384#discussion_r404636207", "createdAt": "2020-04-07T08:38:31Z", "author": {"login": "dgomezferro"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/db/SpliceDatabase.java", "diffHunk": "@@ -129,7 +128,7 @@ private void setupASTVisitors(LanguageConnectionContext lctx) {\n         afterOptVisitors.add(RowLocationColumnVisitor.class);\n         afterOptVisitors.add(FixSubqueryColRefs.class);\n         afterOptVisitors.add(JoinConditionVisitor.class);\n-        afterOptVisitors.add(BatchOnceVisitor.class);\n+    //    afterOptVisitors.add(BatchOnceVisitor.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2e7f08a7d8554f2e8aaae53f6d31c9df492219c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY0ODE1Ng==", "bodyText": "They are removed.", "url": "https://github.com/splicemachine/spliceengine/pull/3384#discussion_r405648156", "createdAt": "2020-04-08T16:18:44Z", "author": {"login": "yxia92"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/db/SpliceDatabase.java", "diffHunk": "@@ -129,7 +128,7 @@ private void setupASTVisitors(LanguageConnectionContext lctx) {\n         afterOptVisitors.add(RowLocationColumnVisitor.class);\n         afterOptVisitors.add(FixSubqueryColRefs.class);\n         afterOptVisitors.add(JoinConditionVisitor.class);\n-        afterOptVisitors.add(BatchOnceVisitor.class);\n+    //    afterOptVisitors.add(BatchOnceVisitor.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYzNjIwNw=="}, "originalCommit": {"oid": "c2e7f08a7d8554f2e8aaae53f6d31c9df492219c"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3310, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}