{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwMTMwMDQy", "number": 4577, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMjoyMDo1M1rOE4YPMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNDozNzozM1rOE4sJ_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NTUyODE5OnYy", "diffSide": "RIGHT", "path": "splice_si_api/src/main/java/com/splicemachine/si/impl/server/SITransactor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMjoyMDo1M1rOHyQ37g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMjoyMDo1M1rOHyQ37g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ2NzMxMA==", "bodyText": "note for myself: are these conflicts collected? why does getLatest have parameter possibleConfilcts?", "url": "https://github.com/splicemachine/spliceengine/pull/4577#discussion_r522467310", "createdAt": "2020-11-12T22:20:53Z", "author": {"login": "martinrupp"}, "path": "splice_si_api/src/main/java/com/splicemachine/si/impl/server/SITransactor.java", "diffHunk": "@@ -284,6 +284,17 @@ private void releaseLocksForKvBatch(Pair<KVPair, Lock>[] locks){\n             ConflictResults conflictResults=ConflictResults.NO_CONFLICT;\n             KVPair kvPair=baseDataAndLock.getFirst();\n             KVPair.Type writeType=kvPair.getType();\n+\n+            DataResult possibleConflicts = null;\n+            if(!skipConflictDetection)\n+            {\n+                // we need the possibleConflicts for\n+                // - has constraintChecker && writeType == UPSERT/UPDATE/DELETE: checking for constraint violations\n+                // - writeType == INSERT/UPSERT/DELETE: evaluating addFirstOccurrenceToken\n+                if( bloomInMemoryCheck == null || bloomInMemoryCheck.get(i) ) {\n+                    possibleConflicts = table.getLatest(kvPair.getRowKey(), possibleConflicts);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e74c822da95e0badc23e553b02936aeb91fe736b"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3ODc5MTAyOnYy", "diffSide": "RIGHT", "path": "hbase_storage/src/test/java/com/splicemachine/si/impl/server/SICompactionStateMutateTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNDozNzoyNFrOHywxFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNDozNzoyNFrOHywxFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk4OTg0Nw==", "bodyText": "Remove", "url": "https://github.com/splicemachine/spliceengine/pull/4577#discussion_r522989847", "createdAt": "2020-11-13T14:37:24Z", "author": {"login": "dgomezferro"}, "path": "hbase_storage/src/test/java/com/splicemachine/si/impl/server/SICompactionStateMutateTest.java", "diffHunk": "@@ -412,6 +441,8 @@ public void mutatePurgeLatestTombstoneInMinorCompaction() throws IOException {\n                 SITestUtils.getMockFirstWriteCell(100)\n         ));\n \n+        System.out.println(toString(inputCells, false));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cce89377a2b233de28b4ddcf8868396396fae09e"}, "originalPosition": 229}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3ODc5MTY2OnYy", "diffSide": "RIGHT", "path": "hbase_storage/src/test/java/com/splicemachine/si/impl/server/SICompactionStateMutateTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNDozNzozM1rOHywxfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNDozNzozM1rOHywxfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk4OTk1MA==", "bodyText": "Remove", "url": "https://github.com/splicemachine/spliceengine/pull/4577#discussion_r522989950", "createdAt": "2020-11-13T14:37:33Z", "author": {"login": "dgomezferro"}, "path": "hbase_storage/src/test/java/com/splicemachine/si/impl/server/SICompactionStateMutateTest.java", "diffHunk": "@@ -422,8 +453,9 @@ public void mutatePurgeLatestTombstoneInMinorCompaction() throws IOException {\n                 transaction2,\n                 transaction1\n         ));\n-        cutPurgeDuringMinorCompaction.mutate(inputCells, transactions, outputCells);\n+        SICompactionStateMutate.mutate(cutPurgeDuringMinorCompaction, context, inputCells, transactions, outputCells);\n         assertThat(outputCells, is(empty()));\n+        System.out.println(toString(outputCells, false));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cce89377a2b233de28b4ddcf8868396396fae09e"}, "originalPosition": 241}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2783, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}