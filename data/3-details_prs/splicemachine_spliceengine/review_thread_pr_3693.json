{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2MDg1MjE1", "number": 3693, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNDozMzoyM1rOEHIxjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNjoxMDoyMVrOEOHeAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1OTE5MjQ0OnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/sqlgrammar.jj", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNDozMzoyM1rOGmW-kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODoyMjoyMFrOGtiW6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg3NTUzOA==", "bodyText": "Is this lookahead necessary?", "url": "https://github.com/splicemachine/spliceengine/pull/3693#discussion_r442875538", "createdAt": "2020-06-19T14:33:23Z", "author": {"login": "arnaud-splice"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/sqlgrammar.jj", "diffHunk": "@@ -12276,6 +12295,18 @@ windowDefinition(WindowList wl) throws StandardException :\n     }\n }\n \n+Long\n+asOfClause() throws StandardException :\n+{\n+    Long txId = null;\n+}\n+{\n+    LOOKAHEAD({(getToken(1).kind == AS && getToken(2).kind == OF)}) <AS> <OF> txId = exactNumber()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49ecb0fde526b1f6baf19453462a6e2760dbe7bd"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQwMjAyNQ==", "bodyText": "Actually, you're right, I have an opposite lookahead (line 10933) on aliasing rule that allows the AS OF rule to be matched correctly, this lookahead is redundant and can be removed. I will remove it. Thanks!", "url": "https://github.com/splicemachine/spliceengine/pull/3693#discussion_r450402025", "createdAt": "2020-07-06T18:22:20Z", "author": {"login": "hatyo"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/sqlgrammar.jj", "diffHunk": "@@ -12276,6 +12295,18 @@ windowDefinition(WindowList wl) throws StandardException :\n     }\n }\n \n+Long\n+asOfClause() throws StandardException :\n+{\n+    Long txId = null;\n+}\n+{\n+    LOOKAHEAD({(getToken(1).kind == AS && getToken(2).kind == OF)}) <AS> <OF> txId = exactNumber()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg3NTUzOA=="}, "originalCommit": {"oid": "49ecb0fde526b1f6baf19453462a6e2760dbe7bd"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1OTIzMjI1OnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/FromBaseTable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNDo0NTozMlrOGmXYUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNjoyNjowMVrOGtef1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg4MjEzMA==", "bodyText": "I think a dedicated parameter would be cleaner instead of shoehorning a long in a boolean parameter.", "url": "https://github.com/splicemachine/spliceengine/pull/3693#discussion_r442882130", "createdAt": "2020-06-19T14:45:32Z", "author": {"login": "arnaud-splice"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/FromBaseTable.java", "diffHunk": "@@ -196,36 +196,30 @@\n     private AggregateNode aggrForSpecialMaxScan;\n \n     private boolean isBulkDelete = false;\n+\n+    private long pastTxId = -1;\n+\n     @Override\n     public boolean isParallelizable(){\n         return false;\n     }\n \n     /**\n-     * Initializer for a table in a FROM list. Parameters are as follows:\n-     * <p/>\n-     * <ul>\n-     * <li>tableName            The name of the table</li>\n-     * <li>correlationName    The correlation name</li>\n-     * <li>derivedRCL        The derived column list</li>\n-     * <li>tableProperties    The Properties list associated with the table.</li>\n-     * </ul>\n-     * <p/>\n-     * <p>\n-     * - OR -\n-     * </p>\n-     * <p/>\n-     * <ul>\n-     * <li>tableName            The name of the table</li>\n-     * <li>correlationName    The correlation name</li>\n-     * <li>updateOrDelete    Table is being updated/deleted from. </li>\n-     * <li>derivedRCL        The derived column list</li>\n-     * </ul>\n+     * Initializer for a table in a FROM list.\n+     * @param tableName The name of the table\n+     * @param correlationName The correlation name\n+     * @param rclOrUD update/delete flag or result column list\n+     * @param propsOrRcl properties or result column list\n+     * @param isBulkDeleteOrTxId bulk delete flag or past tx id.\n      */\n     @Override\n-    public void init(Object tableName,Object correlationName,Object rclOrUD,Object propsOrRcl, Object isBulkDelete){\n+    public void init(Object tableName,Object correlationName,Object rclOrUD,Object propsOrRcl, Object isBulkDeleteOrTxId){\n+        if(isBulkDeleteOrTxId instanceof Boolean) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49ecb0fde526b1f6baf19453462a6e2760dbe7bd"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDMzODc3NQ==", "bodyText": "I wanted to follow the convention, that's all. Anyway, I will look into rewriting this.", "url": "https://github.com/splicemachine/spliceengine/pull/3693#discussion_r450338775", "createdAt": "2020-07-06T16:26:01Z", "author": {"login": "hatyo"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/FromBaseTable.java", "diffHunk": "@@ -196,36 +196,30 @@\n     private AggregateNode aggrForSpecialMaxScan;\n \n     private boolean isBulkDelete = false;\n+\n+    private long pastTxId = -1;\n+\n     @Override\n     public boolean isParallelizable(){\n         return false;\n     }\n \n     /**\n-     * Initializer for a table in a FROM list. Parameters are as follows:\n-     * <p/>\n-     * <ul>\n-     * <li>tableName            The name of the table</li>\n-     * <li>correlationName    The correlation name</li>\n-     * <li>derivedRCL        The derived column list</li>\n-     * <li>tableProperties    The Properties list associated with the table.</li>\n-     * </ul>\n-     * <p/>\n-     * <p>\n-     * - OR -\n-     * </p>\n-     * <p/>\n-     * <ul>\n-     * <li>tableName            The name of the table</li>\n-     * <li>correlationName    The correlation name</li>\n-     * <li>updateOrDelete    Table is being updated/deleted from. </li>\n-     * <li>derivedRCL        The derived column list</li>\n-     * </ul>\n+     * Initializer for a table in a FROM list.\n+     * @param tableName The name of the table\n+     * @param correlationName The correlation name\n+     * @param rclOrUD update/delete flag or result column list\n+     * @param propsOrRcl properties or result column list\n+     * @param isBulkDeleteOrTxId bulk delete flag or past tx id.\n      */\n     @Override\n-    public void init(Object tableName,Object correlationName,Object rclOrUD,Object propsOrRcl, Object isBulkDelete){\n+    public void init(Object tableName,Object correlationName,Object rclOrUD,Object propsOrRcl, Object isBulkDeleteOrTxId){\n+        if(isBulkDeleteOrTxId instanceof Boolean) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg4MjEzMA=="}, "originalCommit": {"oid": "49ecb0fde526b1f6baf19453462a6e2760dbe7bd"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1OTI0MjQzOnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/FromBaseTable.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNDo0ODozNlrOGmXezQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNjoxNjoxMVrOGteHlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg4Mzc4OQ==", "bodyText": "Please add a space before timeTravelTx.\nAlso, you could simply write \"as of\" instead, to echo the query, but that's unimportant.", "url": "https://github.com/splicemachine/spliceengine/pull/3693#discussion_r442883789", "createdAt": "2020-06-19T14:48:36Z", "author": {"login": "arnaud-splice"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/FromBaseTable.java", "diffHunk": "@@ -3410,7 +3408,11 @@ private String getClassName(String niceIndexName) throws StandardException {\n         if(niceIndexName!=null){\n             cName = \"IndexScan[\"+niceIndexName+\"]\";\n         }else{\n-            cName = \"TableScan[\"+getPrettyTableName()+\"]\";\n+            cName = \"TableScan[\"+getPrettyTableName();\n+            if(pastTxId >= 0){\n+                cName += \"timeTravelTx(\" + pastTxId + \")\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49ecb0fde526b1f6baf19453462a6e2760dbe7bd"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDMzMjMzNg==", "bodyText": "I think the general term for this feature is time travel. Therefore I would like to keep using this term for consistency.", "url": "https://github.com/splicemachine/spliceengine/pull/3693#discussion_r450332336", "createdAt": "2020-07-06T16:15:49Z", "author": {"login": "hatyo"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/FromBaseTable.java", "diffHunk": "@@ -3410,7 +3408,11 @@ private String getClassName(String niceIndexName) throws StandardException {\n         if(niceIndexName!=null){\n             cName = \"IndexScan[\"+niceIndexName+\"]\";\n         }else{\n-            cName = \"TableScan[\"+getPrettyTableName()+\"]\";\n+            cName = \"TableScan[\"+getPrettyTableName();\n+            if(pastTxId >= 0){\n+                cName += \"timeTravelTx(\" + pastTxId + \")\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg4Mzc4OQ=="}, "originalCommit": {"oid": "49ecb0fde526b1f6baf19453462a6e2760dbe7bd"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDMzMjU2NA==", "bodyText": "I will fix the extra-space.", "url": "https://github.com/splicemachine/spliceengine/pull/3693#discussion_r450332564", "createdAt": "2020-07-06T16:16:11Z", "author": {"login": "hatyo"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/FromBaseTable.java", "diffHunk": "@@ -3410,7 +3408,11 @@ private String getClassName(String niceIndexName) throws StandardException {\n         if(niceIndexName!=null){\n             cName = \"IndexScan[\"+niceIndexName+\"]\";\n         }else{\n-            cName = \"TableScan[\"+getPrettyTableName()+\"]\";\n+            cName = \"TableScan[\"+getPrettyTableName();\n+            if(pastTxId >= 0){\n+                cName += \"timeTravelTx(\" + pastTxId + \")\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg4Mzc4OQ=="}, "originalCommit": {"oid": "49ecb0fde526b1f6baf19453462a6e2760dbe7bd"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NzEyNzUwOnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/sqlgrammar.jj", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNzowMjoxMlrOGpDxlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjowMjozOFrOGwvQ_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTcwNjY0NA==", "bodyText": "Could we remove the lookahead with something like\n[ [ <AS> [ <OF> txnId = asOfClause() [ AS ] ] ...  ?", "url": "https://github.com/splicemachine/spliceengine/pull/3693#discussion_r445706644", "createdAt": "2020-06-25T17:02:12Z", "author": {"login": "dgomezferro"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/sqlgrammar.jj", "diffHunk": "@@ -10914,28 +10915,45 @@ tableReferenceTypes(boolean nestedInParens) throws StandardException :\n Object[]\n optionalTableClauses() throws StandardException :\n {\n-    Object[]             otc = null;\n-    Properties            tableProperties = null;\n-    ResultColumnList    derivedRCL = null;\n-    String                correlationName = null;\n+    Object[]         otc = null;\n+    Properties       tableProperties = null;\n+    ResultColumnList derivedRCL = null;\n+    String           correlationName = null;\n+    Long             txnId = null;\n }\n {\n     otc = optionalTableProperties()\n     {\n         otc[OPTIONAL_TABLE_CLAUSES_DERIVED_RCL] = derivedRCL;\n         otc[OPTIONAL_TABLE_CLAUSES_CORRELATION_NAME] = correlationName;\n+        otc[OPTIONAL_TABLE_CLAUSES_TXN_ID] = txnId;\n         return otc;\n     }\n |\n+    LOOKAHEAD( { getToken(1).kind != AS || getToken(2).kind != OF })\n     [ [ <AS> ]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49ecb0fde526b1f6baf19453462a6e2760dbe7bd"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM5ODA1Nw==", "bodyText": "I tried but I couldn't find a good alternative, I mean with your proposal we would bind AS OF with having an alias (line 10936) which is not necessary.\nIdeally we should allow the following cases:\n\n<ALIAS>\nAS <ALIAS>\n<ALIAS> AS OF ...\nAS <ALIAS> AS OF ...\nAS OF ...\nI couldn't find single rule for all these cases that why I broke it in two.", "url": "https://github.com/splicemachine/spliceengine/pull/3693#discussion_r450398057", "createdAt": "2020-07-06T18:14:21Z", "author": {"login": "hatyo"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/sqlgrammar.jj", "diffHunk": "@@ -10914,28 +10915,45 @@ tableReferenceTypes(boolean nestedInParens) throws StandardException :\n Object[]\n optionalTableClauses() throws StandardException :\n {\n-    Object[]             otc = null;\n-    Properties            tableProperties = null;\n-    ResultColumnList    derivedRCL = null;\n-    String                correlationName = null;\n+    Object[]         otc = null;\n+    Properties       tableProperties = null;\n+    ResultColumnList derivedRCL = null;\n+    String           correlationName = null;\n+    Long             txnId = null;\n }\n {\n     otc = optionalTableProperties()\n     {\n         otc[OPTIONAL_TABLE_CLAUSES_DERIVED_RCL] = derivedRCL;\n         otc[OPTIONAL_TABLE_CLAUSES_CORRELATION_NAME] = correlationName;\n+        otc[OPTIONAL_TABLE_CLAUSES_TXN_ID] = txnId;\n         return otc;\n     }\n |\n+    LOOKAHEAD( { getToken(1).kind != AS || getToken(2).kind != OF })\n     [ [ <AS> ]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTcwNjY0NA=="}, "originalCommit": {"oid": "49ecb0fde526b1f6baf19453462a6e2760dbe7bd"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc1OTIzMA==", "bodyText": "Yes @dgomezferro , you are right, the we need upgrade script to invalidate the saved plans in sys.systatements.", "url": "https://github.com/splicemachine/spliceengine/pull/3693#discussion_r453759230", "createdAt": "2020-07-13T16:02:38Z", "author": {"login": "yxia92"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/sqlgrammar.jj", "diffHunk": "@@ -10914,28 +10915,45 @@ tableReferenceTypes(boolean nestedInParens) throws StandardException :\n Object[]\n optionalTableClauses() throws StandardException :\n {\n-    Object[]             otc = null;\n-    Properties            tableProperties = null;\n-    ResultColumnList    derivedRCL = null;\n-    String                correlationName = null;\n+    Object[]         otc = null;\n+    Properties       tableProperties = null;\n+    ResultColumnList derivedRCL = null;\n+    String           correlationName = null;\n+    Long             txnId = null;\n }\n {\n     otc = optionalTableProperties()\n     {\n         otc[OPTIONAL_TABLE_CLAUSES_DERIVED_RCL] = derivedRCL;\n         otc[OPTIONAL_TABLE_CLAUSES_CORRELATION_NAME] = correlationName;\n+        otc[OPTIONAL_TABLE_CLAUSES_TXN_ID] = txnId;\n         return otc;\n     }\n |\n+    LOOKAHEAD( { getToken(1).kind != AS || getToken(2).kind != OF })\n     [ [ <AS> ]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTcwNjY0NA=="}, "originalCommit": {"oid": "49ecb0fde526b1f6baf19453462a6e2760dbe7bd"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTk1NTQwOnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/sqlgrammar.jj", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMjozMTo1OFrOGxBtNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNToxNDowNVrOGxYZYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA2MTM2Ng==", "bodyText": "I think this shouldn't be optional once we get into this branch.", "url": "https://github.com/splicemachine/spliceengine/pull/3693#discussion_r454061366", "createdAt": "2020-07-14T02:31:58Z", "author": {"login": "yxia92"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/sqlgrammar.jj", "diffHunk": "@@ -10914,28 +10916,45 @@ tableReferenceTypes(boolean nestedInParens) throws StandardException :\n Object[]\n optionalTableClauses() throws StandardException :\n {\n-    Object[]             otc = null;\n-    Properties            tableProperties = null;\n-    ResultColumnList    derivedRCL = null;\n-    String                correlationName = null;\n+    Object[]         otc = null;\n+    Properties       tableProperties = null;\n+    ResultColumnList derivedRCL = null;\n+    String           correlationName = null;\n+    Long             txnId = -1L;\n }\n {\n     otc = optionalTableProperties()\n     {\n         otc[OPTIONAL_TABLE_CLAUSES_DERIVED_RCL] = derivedRCL;\n         otc[OPTIONAL_TABLE_CLAUSES_CORRELATION_NAME] = correlationName;\n+        otc[OPTIONAL_TABLE_CLAUSES_TXN_ID] = txnId;\n         return otc;\n     }\n |\n+    LOOKAHEAD( { getToken(1).kind != AS || getToken(2).kind != OF })\n     [ [ <AS> ]\n         correlationName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true)\n+        [txnId = asOfClause()]\n         [ <LEFT_PAREN> derivedRCL = derivedColumnList() <RIGHT_PAREN> ]\n         [tableProperties = propertyList(true) <CHECK_PROPERTIES>] ]\n     {\n         otc = new Object[OPTIONAL_TABLE_CLAUSES_SIZE];\n         otc[OPTIONAL_TABLE_CLAUSES_TABLE_PROPERTIES] = tableProperties;\n         otc[OPTIONAL_TABLE_CLAUSES_DERIVED_RCL] = derivedRCL;\n         otc[OPTIONAL_TABLE_CLAUSES_CORRELATION_NAME] = correlationName;\n+        otc[OPTIONAL_TABLE_CLAUSES_TXN_ID] = txnId;\n+        return otc;\n+    }\n+|\n+    [txnId = asOfClause()]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f544c86289748608ac77934e5bc1250f7fdfbae"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQzMzEyMw==", "bodyText": "You're right, I removed it.", "url": "https://github.com/splicemachine/spliceengine/pull/3693#discussion_r454433123", "createdAt": "2020-07-14T15:14:05Z", "author": {"login": "hatyo"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/sqlgrammar.jj", "diffHunk": "@@ -10914,28 +10916,45 @@ tableReferenceTypes(boolean nestedInParens) throws StandardException :\n Object[]\n optionalTableClauses() throws StandardException :\n {\n-    Object[]             otc = null;\n-    Properties            tableProperties = null;\n-    ResultColumnList    derivedRCL = null;\n-    String                correlationName = null;\n+    Object[]         otc = null;\n+    Properties       tableProperties = null;\n+    ResultColumnList derivedRCL = null;\n+    String           correlationName = null;\n+    Long             txnId = -1L;\n }\n {\n     otc = optionalTableProperties()\n     {\n         otc[OPTIONAL_TABLE_CLAUSES_DERIVED_RCL] = derivedRCL;\n         otc[OPTIONAL_TABLE_CLAUSES_CORRELATION_NAME] = correlationName;\n+        otc[OPTIONAL_TABLE_CLAUSES_TXN_ID] = txnId;\n         return otc;\n     }\n |\n+    LOOKAHEAD( { getToken(1).kind != AS || getToken(2).kind != OF })\n     [ [ <AS> ]\n         correlationName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true)\n+        [txnId = asOfClause()]\n         [ <LEFT_PAREN> derivedRCL = derivedColumnList() <RIGHT_PAREN> ]\n         [tableProperties = propertyList(true) <CHECK_PROPERTIES>] ]\n     {\n         otc = new Object[OPTIONAL_TABLE_CLAUSES_SIZE];\n         otc[OPTIONAL_TABLE_CLAUSES_TABLE_PROPERTIES] = tableProperties;\n         otc[OPTIONAL_TABLE_CLAUSES_DERIVED_RCL] = derivedRCL;\n         otc[OPTIONAL_TABLE_CLAUSES_CORRELATION_NAME] = correlationName;\n+        otc[OPTIONAL_TABLE_CLAUSES_TXN_ID] = txnId;\n+        return otc;\n+    }\n+|\n+    [txnId = asOfClause()]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA2MTM2Ng=="}, "originalCommit": {"oid": "2f544c86289748608ac77934e5bc1250f7fdfbae"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMjM0NzUwOnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/FromBaseTable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNTo1NjozOVrOGxFPug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDo1MDoyMFrOGxXS8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDExOTM1NA==", "bodyText": "We need to remove the closing bracket \"]\" for IndexScan here also", "url": "https://github.com/splicemachine/spliceengine/pull/3693#discussion_r454119354", "createdAt": "2020-07-14T05:56:39Z", "author": {"login": "yxia92"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/FromBaseTable.java", "diffHunk": "@@ -3411,7 +3422,11 @@ private String getClassName(String niceIndexName) throws StandardException {\n         if(niceIndexName!=null){\n             cName = \"IndexScan[\"+niceIndexName+\"]\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f544c86289748608ac77934e5bc1250f7fdfbae"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxNTA5MQ==", "bodyText": "Right, thanks!", "url": "https://github.com/splicemachine/spliceengine/pull/3693#discussion_r454415091", "createdAt": "2020-07-14T14:50:20Z", "author": {"login": "hatyo"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/FromBaseTable.java", "diffHunk": "@@ -3411,7 +3422,11 @@ private String getClassName(String niceIndexName) throws StandardException {\n         if(niceIndexName!=null){\n             cName = \"IndexScan[\"+niceIndexName+\"]\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDExOTM1NA=="}, "originalCommit": {"oid": "2f544c86289748608ac77934e5bc1250f7fdfbae"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMjM3ODkwOnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/FromBaseTable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNjoxMDoyMVrOGxFiYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNToxMzo0OVrOGxYYlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEyNDEzMQ==", "bodyText": "Can you add check for tableDescriptor.getTableType()==TableDescriptor.WITH_TYPE also?", "url": "https://github.com/splicemachine/spliceengine/pull/3693#discussion_r454124131", "createdAt": "2020-07-14T06:10:21Z", "author": {"login": "yxia92"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/FromBaseTable.java", "diffHunk": "@@ -1042,6 +1038,17 @@ public ResultSetNode bindNonVTITables(DataDictionary dataDictionary,\n                                           FromList fromListParam)throws StandardException{\n         TableDescriptor tableDescriptor=bindTableDescriptor();\n \n+        int tableType = tableDescriptor.getTableType();\n+        if(pastTxId >= 0)\n+        {\n+            if(tableType==TableDescriptor.VIEW_TYPE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f544c86289748608ac77934e5bc1250f7fdfbae"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQzMjkxOQ==", "bodyText": "Sure, I added a check and a test as well.", "url": "https://github.com/splicemachine/spliceengine/pull/3693#discussion_r454432919", "createdAt": "2020-07-14T15:13:49Z", "author": {"login": "hatyo"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/FromBaseTable.java", "diffHunk": "@@ -1042,6 +1038,17 @@ public ResultSetNode bindNonVTITables(DataDictionary dataDictionary,\n                                           FromList fromListParam)throws StandardException{\n         TableDescriptor tableDescriptor=bindTableDescriptor();\n \n+        int tableType = tableDescriptor.getTableType();\n+        if(pastTxId >= 0)\n+        {\n+            if(tableType==TableDescriptor.VIEW_TYPE) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEyNDEzMQ=="}, "originalCommit": {"oid": "2f544c86289748608ac77934e5bc1250f7fdfbae"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3135, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}