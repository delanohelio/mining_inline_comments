{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzNDM5NTA1", "number": 3755, "title": "DB-9756 reduce filesystem metadata calls for external tables", "bodyText": "some cleanup in SparkDataSetProcessor.write{X}\nHNIOFileSystem.getInfo will return a FileInfo which is calculating expensive (recursive) size() and fileCount() only on demand.\nadded FileInfo.isEmptyDirectory to avoid scanning the whole directory tree for this\nmodified SpliceTestPlatformConfig and SpliceTestYarnPlatform so that standalone spliceengine can use s3 access keys from ~/.aws/credentials or environment (AWS_ACCESS_KEY_ID / AWS_SECRET_ACCESS_KEY).\nstart-splice-cluster: don't start splice cluster if build failed.", "createdAt": "2020-07-02T10:56:14Z", "url": "https://github.com/splicemachine/spliceengine/pull/3755", "merged": true, "mergeCommit": {"oid": "f157e9ec7d9c8e96927bf9cea7de5acab164f0b3"}, "closed": true, "closedAt": "2020-07-08T15:57:17Z", "author": {"login": "martinrupp"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcw-CdjgH2gAyNDQzNDM5NTA1OmQyOTdlODhiMTg0YzJiZTI1YWFiNjE4ODQxY2Y1M2E0OGE2MmViYjg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcy2wz4gFqTQ0NDU1NTkxNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d297e88b184c2be25aab618841cf53a48a62ebb8", "author": {"user": {"login": "martinrupp", "name": "Martin Rupp"}}, "url": "https://github.com/splicemachine/spliceengine/commit/d297e88b184c2be25aab618841cf53a48a62ebb8", "committedDate": "2020-07-02T12:31:15Z", "message": "DB-9756 reduce filesystem metadata calls for external tables"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1be830826509f5c9437abdbe9f5bcd7ae97f1855", "author": {"user": {"login": "martinrupp", "name": "Martin Rupp"}}, "url": "https://github.com/splicemachine/spliceengine/commit/1be830826509f5c9437abdbe9f5bcd7ae97f1855", "committedDate": "2020-07-02T12:28:49Z", "message": "fix"}, "afterCommit": {"oid": "d297e88b184c2be25aab618841cf53a48a62ebb8", "author": {"user": {"login": "martinrupp", "name": "Martin Rupp"}}, "url": "https://github.com/splicemachine/spliceengine/commit/d297e88b184c2be25aab618841cf53a48a62ebb8", "committedDate": "2020-07-02T12:31:15Z", "message": "DB-9756 reduce filesystem metadata calls for external tables"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxNjYxMDA2", "url": "https://github.com/splicemachine/spliceengine/pull/3755#pullrequestreview-441661006", "createdAt": "2020-07-02T13:08:58Z", "commit": {"oid": "d297e88b184c2be25aab618841cf53a48a62ebb8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMzowODo1OFrOGsMG1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMzoyMToxOFrOGsMl4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk4ODg4NQ==", "bodyText": "Method names should be lower case", "url": "https://github.com/splicemachine/spliceengine/pull/3755#discussion_r448988885", "createdAt": "2020-07-02T13:08:58Z", "author": {"login": "dgomezferro"}, "path": "standalone/src/test/java/com/splicemachine/test/SpliceTestYarnPlatform.java", "diffHunk": "@@ -98,6 +102,35 @@ public void stop() {\n             yarnCluster.stop();\n         }\n     }\n+    // todo: this is the same as SpliceTestPlatform.ConfigureS3( config ),\n+    // but I didn't manage to get dependencies right\n+    private static void ConfigureS3(Configuration config)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d297e88b184c2be25aab618841cf53a48a62ebb8"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk4OTAwNw==", "bodyText": "Method names should be lower case", "url": "https://github.com/splicemachine/spliceengine/pull/3755#discussion_r448989007", "createdAt": "2020-07-02T13:09:10Z", "author": {"login": "dgomezferro"}, "path": "platform_it/src/test/java/com/splicemachine/test/SpliceTestPlatformConfig.java", "diffHunk": "@@ -95,6 +100,33 @@\n             SpliceHFileCleaner.class,\n             TimeToLiveHFileCleaner.class);\n \n+    public static void ConfigureS3(Configuration config)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d297e88b184c2be25aab618841cf53a48a62ebb8"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk5MDQ5Nw==", "bodyText": "Nitpick: explicit variables would be better IMHO (e.g. length / fileCount / dirCount)", "url": "https://github.com/splicemachine/spliceengine/pull/3755#discussion_r448990497", "createdAt": "2020-07-02T13:11:25Z", "author": {"login": "dgomezferro"}, "path": "hbase_storage/src/main/java/com/splicemachine/storage/HNIOFileSystem.java", "diffHunk": "@@ -187,58 +172,62 @@ public void concat(Path target, Path... sources)  throws IOException {\n         return new org.apache.hadoop.fs.Path(path.toUri());\n     }\n \n-\n     private class HFileInfo implements FileInfo{\n-        private final boolean isDir;\n-        private final AclStatus aclStatus;\n-        private final boolean isReadable;\n-        private final boolean isWritable;\n         private org.apache.hadoop.fs.Path path;\n-        private ContentSummary contentSummary;\n+        FileStatus fileStatus;\n+        private ContentSummary contentSummary = null; // calculate on demand\n \n-        public HFileInfo(org.apache.hadoop.fs.Path path,ContentSummary contentSummary) throws IOException{\n+        public HFileInfo(org.apache.hadoop.fs.Path path) throws IOException{\n             this.path=path;\n-            this.contentSummary=contentSummary;\n-            this.isDir = fs.isDirectory(path);\n-            AclStatus aclS;\n-            try{\n-                aclS=fs.getAclStatus(path);\n-            } catch (UnsupportedOperationException | AclException e) { // Runtime Exception for RawFS\n-                aclS = new AclStatus.Builder().owner(\"unknown\").group(\"unknown\").build();\n-            } catch(Exception e){\n-                e = exceptionFactory.processRemoteException(e); //strip any multi-retry errors out\n-                //noinspection ConstantConditions\n-                if(e instanceof UnsupportedOperationException|| e instanceof AclException){\n-                    /*\n-                     * Some Filesystems don't support aclStatus. In that case,\n-                     * we replace it with our own ACL status object\n-                     */\n-                    aclS=new AclStatus.Builder().owner(\"unknown\").group(\"unknown\").build();\n-                }else{\n-                    /*\n-                     * the remaining errors are of the category of FileNotFound,UnresolvedPath,\n-                     * etc. These are environmental, so we should throw up here.\n-                     */\n-                    throw new IOException(e);\n-                }\n-            }\n-            this.aclStatus = aclS;\n-            boolean readable;\n-            try{\n-                fs.access(path,FsAction.READ);\n-                readable= true;\n-            }catch(IOException ioe){\n-               readable = false;\n+            try {\n+                this.fileStatus = fs.getFileStatus(path);\n+            } catch( FileNotFoundException e )\n+            {\n+                this.fileStatus = null;\n             }\n-            boolean writable;\n-            try{\n-                fs.access(path,FsAction.WRITE);\n-                writable = true;\n-            }catch(IOException ioe){\n-                writable = false;\n+        }\n+\n+        // these two methods are to avoid having to re-calculate the list of files in the directory\n+        // for isEmptyDirectory\n+        // todo(martinrupp): replace with recursive listdir\n+        private FileStatus rootFileStatusArr[];\n+        private FileStatus[] listRoot() throws IOException {\n+            if (rootFileStatusArr != null || !exists() || !fileStatus.isDirectory()) return rootFileStatusArr;\n+            rootFileStatusArr = fs.listStatus(path);\n+            return rootFileStatusArr;\n+        }\n+        // note this is expensive for deeply nested directories. avoid calling fileCount, spaceConsumed and size\n+        // partly copied FileSystem.getContentSummary , however with cached fileStatus and using (cached) listRoot for listing root.\n+        private ContentSummary getContentSummary() {\n+            if( contentSummary != null ) return contentSummary;\n+            try {\n+                if (fileStatus.isFile()) {\n+                    // f is a file\n+                    long length = fileStatus.getLen();\n+                    contentSummary = new ContentSummary.Builder().length(length).\n+                            fileCount(1).directoryCount(0).spaceConsumed(length).build();\n+                }\n+                else {\n+                    // f is a directory\n+                    long[] summary = {0, 0, 1};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d297e88b184c2be25aab618841cf53a48a62ebb8"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk5MTY2OA==", "bodyText": "If this shouldn't happen then it would make sense to bubble up the exception. We should log it at the very least", "url": "https://github.com/splicemachine/spliceengine/pull/3755#discussion_r448991668", "createdAt": "2020-07-02T13:13:18Z", "author": {"login": "dgomezferro"}, "path": "hbase_storage/src/main/java/com/splicemachine/storage/HNIOFileSystem.java", "diffHunk": "@@ -253,64 +242,87 @@ public String fullPath(){\n \n         @Override\n         public boolean isDirectory(){\n-            return isDir;\n+            return fileStatus != null && fileStatus.isDirectory();\n         }\n \n         @Override\n         public long fileCount(){\n-            return contentSummary.getFileCount();\n+            if( !exists() ) return 0;\n+            return getContentSummary().getFileCount();\n+        }\n+\n+        @Override\n+        public boolean isEmptyDirectory() {\n+            if( !exists() ) return false;\n+            if( !isDirectory() ) return false;\n+            try {\n+                for (FileStatus s : listRoot() ) {\n+                    if (s.getPath().getName().equals(\"_SUCCESS\") || s.getPath().getName().equals(\"_SUCCESS.crc\") ) continue;\n+                    return false;\n+                }\n+                return true;\n+            } catch( Exception e ) {\n+                // this shouldn't happen, as we already check if it exists.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d297e88b184c2be25aab618841cf53a48a62ebb8"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk5NDkxMQ==", "bodyText": "This should probably be a javadoc comment, you need /** */ for that", "url": "https://github.com/splicemachine/spliceengine/pull/3755#discussion_r448994911", "createdAt": "2020-07-02T13:18:10Z", "author": {"login": "dgomezferro"}, "path": "splice_access_api/src/main/java/com/splicemachine/access/api/FileInfo.java", "diffHunk": "@@ -26,21 +26,33 @@\n \n     boolean isDirectory();\n \n+    /// returns true if isDirectory() and (directory is empty or only contains one file _SUCCESS)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d297e88b184c2be25aab618841cf53a48a62ebb8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk5NDk5NQ==", "bodyText": "Make it javadoc", "url": "https://github.com/splicemachine/spliceengine/pull/3755#discussion_r448994995", "createdAt": "2020-07-02T13:18:18Z", "author": {"login": "dgomezferro"}, "path": "splice_access_api/src/main/java/com/splicemachine/access/api/FileInfo.java", "diffHunk": "@@ -26,21 +26,33 @@\n \n     boolean isDirectory();\n \n+    /// returns true if isDirectory() and (directory is empty or only contains one file _SUCCESS)\n+    boolean isEmptyDirectory();\n+\n     /**\n      * @return the number of files in the directory, or 1 if this is a file.\n+     * Note: this is SLOW on big directory trees when using remote filesystems like S3,\n+     * since requiring a full recursive listdir\n+     * If just need to check for empty directory, use {@link #isEmptyDirectory()}\n      */\n     long fileCount();\n \n+\n     /**\n      * Returns the overall space consumed for the file.\n      * Depends on the file system. For HDFS, this would return\n      * not the current size of the file but rather\n      * current size * replication factor. For a local system,\n      * it would return the same value as {@link #size()},\n      * the actual current size of the file.\n+     * Note: this is SLOW on big directory trees when using remote filesystems like S3,\n+     * since requiring a full recursive listdir\n      */\n     long spaceConsumed();\n \n+    /* Note: this is SLOW on big directory trees when using remote filesystems like S3,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d297e88b184c2be25aab618841cf53a48a62ebb8"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk5NjgzMw==", "bodyText": "This looks very broad to me. Is there an expected exception we want to catch here? I think in most cases we'd need to bubble up the exception or return a nicer error.", "url": "https://github.com/splicemachine/spliceengine/pull/3755#discussion_r448996833", "createdAt": "2020-07-02T13:21:18Z", "author": {"login": "dgomezferro"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/utils/ExternalTableUtils.java", "diffHunk": "@@ -261,16 +262,25 @@ public static void preSortColumns(StructField[] schema, int[] partitionColumnMap\n     }\n \n     public static boolean isEmptyDirectory(String location) throws Exception {\n-        String[] files = ImportUtils.getFileSystem(location).getExistingFiles(location, \"*\");\n-        return ((files.length == 0) || (files.length == 1 && \"_SUCCESS\".equals(truncateFileNameFromFullPath(files[0]))));\n-\n+        DistributedFileSystem dfs = ImportUtils.getFileSystem(location);\n+        return dfs.getInfo(location).isEmptyDirectory();\n     }\n \n     public static boolean isExisting(String location) throws Exception {\n         FileInfo fileInfo = ImportUtils.getFileSystem(location).getInfo(location);\n-        return  fileInfo.exists();\n+        return fileInfo.exists();\n \n     }\n+    public static FileInfo getFileInfoOrNull(String location)\n+    {\n+        try {\n+            return ImportUtils.getFileSystem(location).getInfo(location);\n+        }\n+        catch( StandardException | IOException e )\n+        {\n+            return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d297e88b184c2be25aab618841cf53a48a62ebb8"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e16a5c7c152024a7c307296a52bc4dd1a12a1b9", "author": {"user": {"login": "martinrupp", "name": "Martin Rupp"}}, "url": "https://github.com/splicemachine/spliceengine/commit/3e16a5c7c152024a7c307296a52bc4dd1a12a1b9", "committedDate": "2020-07-02T14:53:42Z", "message": "DB-9756 fix spotbugs: remove DistributedFileSystem.concat (not used)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf1de0630591f22f4186fdeea617b585876b418d", "author": {"user": {"login": "martinrupp", "name": "Martin Rupp"}}, "url": "https://github.com/splicemachine/spliceengine/commit/bf1de0630591f22f4186fdeea617b585876b418d", "committedDate": "2020-07-02T16:32:20Z", "message": "DB-9756 address code review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyMjI2NDk5", "url": "https://github.com/splicemachine/spliceengine/pull/3755#pullrequestreview-442226499", "createdAt": "2020-07-03T08:08:16Z", "commit": {"oid": "bf1de0630591f22f4186fdeea617b585876b418d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNDY0Nzkz", "url": "https://github.com/splicemachine/spliceengine/pull/3755#pullrequestreview-442464793", "createdAt": "2020-07-03T14:59:03Z", "commit": {"oid": "bf1de0630591f22f4186fdeea617b585876b418d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0NTU1OTE0", "url": "https://github.com/splicemachine/spliceengine/pull/3755#pullrequestreview-444555914", "createdAt": "2020-07-08T09:10:29Z", "commit": {"oid": "bf1de0630591f22f4186fdeea617b585876b418d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1289, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}