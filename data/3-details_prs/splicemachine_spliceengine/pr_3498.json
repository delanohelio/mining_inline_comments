{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwODc0MjYy", "number": 3498, "title": "DB-9448 Fix resurfacing rows issue in Spark", "bodyText": "Migration to hbase2.0 created two issues:\n\nWe did not use memStoreAware's lock properly anymore\nWe did not know about compacted files when creating a HRegion from\nSpark's side\n\nThis commit addresses these two issues in the following way:\n\n\n\nSpliceCompactionRequest.setOffPeak is now hijacked to properly\nrelease the lock on memStoreAware once a compaction has completed.\nShort of modifying HBase's code to be able to use a custom\nCompactionLifeCycleTracker (only DUMMY is used outside of their tests),\nthis seems to be the only reliable solution.\n\n\n\nSpark side now RPC calls the relevant region to get a list of compacted\nfiles so that regions created on Spark side can properly exclude\ncompacted store files that pertains to a specific region.", "createdAt": "2020-04-29T18:18:59Z", "url": "https://github.com/splicemachine/spliceengine/pull/3498", "merged": true, "mergeCommit": {"oid": "08b166671579dbc11e6ae6b60419b28c54880608"}, "closed": true, "closedAt": "2020-05-15T00:13:28Z", "author": {"login": "arnaud-splice"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcgn9cQAH2gAyNDEwODc0MjYyOjgxMTQ1M2EyNTI4ZTMyODc5MzRlN2FkZTE2ZTkyZmEzNmI3MGZlMTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABchPXPwgFqTQxMTkzMjk2Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "811453a2528e3287934e7ade16e92fa36b70fe17", "author": {"user": {"login": "arnaud-splice", "name": "Arnaud Lacurie"}}, "url": "https://github.com/splicemachine/spliceengine/commit/811453a2528e3287934e7ade16e92fa36b70fe17", "committedDate": "2020-05-12T17:45:04Z", "message": "DB-9448 Fix resurfacing rows issue in Spark\n\nMigration to hbase2.0 created two issues:\n1. We did not use memStoreAware's lock properly anymore\n2. We did not know about compacted files when creating a HRegion from\nSpark's side\n\nThis commit addresses these two issues in the following way:\n\n1.\nSpliceCompactionRequest.setOffPeak is now hijacked to properly\nrelease the lock on memStoreAware once a compaction has completed.\nShort of modifying HBase's code to be able to use a custom\nCompactionLifeCycleTracker (only DUMMY is used outside of their tests),\nthis seems to be the only reliable solution.\n\n2.\nSpark side now RPC calls the relevant region to get a list of compacted\nfiles so that regions created on Spark side can properly exclude\ncompacted store files that pertains to a specific region."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0190a04973c8a3f26fb4b409c6090c3e051768db", "author": {"user": {"login": "arnaud-splice", "name": "Arnaud Lacurie"}}, "url": "https://github.com/splicemachine/spliceengine/commit/0190a04973c8a3f26fb4b409c6090c3e051768db", "committedDate": "2020-05-12T15:39:20Z", "message": "WIP"}, "afterCommit": {"oid": "811453a2528e3287934e7ade16e92fa36b70fe17", "author": {"user": {"login": "arnaud-splice", "name": "Arnaud Lacurie"}}, "url": "https://github.com/splicemachine/spliceengine/commit/811453a2528e3287934e7ade16e92fa36b70fe17", "committedDate": "2020-05-12T17:45:04Z", "message": "DB-9448 Fix resurfacing rows issue in Spark\n\nMigration to hbase2.0 created two issues:\n1. We did not use memStoreAware's lock properly anymore\n2. We did not know about compacted files when creating a HRegion from\nSpark's side\n\nThis commit addresses these two issues in the following way:\n\n1.\nSpliceCompactionRequest.setOffPeak is now hijacked to properly\nrelease the lock on memStoreAware once a compaction has completed.\nShort of modifying HBase's code to be able to use a custom\nCompactionLifeCycleTracker (only DUMMY is used outside of their tests),\nthis seems to be the only reliable solution.\n\n2.\nSpark side now RPC calls the relevant region to get a list of compacted\nfiles so that regions created on Spark side can properly exclude\ncompacted store files that pertains to a specific region."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2ef2a063363679852f99e73fd38546e78d50821", "author": {"user": {"login": "arnaud-splice", "name": "Arnaud Lacurie"}}, "url": "https://github.com/splicemachine/spliceengine/commit/c2ef2a063363679852f99e73fd38546e78d50821", "committedDate": "2020-05-12T22:51:51Z", "message": "DB-9448 Fix spotbugs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9968c9044b37f9cf0552b64a67f116fed61c3a33", "author": {"user": {"login": "arnaud-splice", "name": "Arnaud Lacurie"}}, "url": "https://github.com/splicemachine/spliceengine/commit/9968c9044b37f9cf0552b64a67f116fed61c3a33", "committedDate": "2020-05-12T23:13:21Z", "message": "DB-9448 Remove assert"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNjc4MDc0", "url": "https://github.com/splicemachine/spliceengine/pull/3498#pullrequestreview-410678074", "createdAt": "2020-05-13T07:59:01Z", "commit": {"oid": "9968c9044b37f9cf0552b64a67f116fed61c3a33"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNzo1OTowMVrOGUl3hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwODowMTo0MlrOGUl9pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI0NTEyNw==", "bodyText": "Now that I look at the code and the comment, the memstoreAware field already had the role of guarding against failed compactions, if compactionCountIncremented is false then memstoreAware will also be null, right? I think compactionCountIncremented is redundant.", "url": "https://github.com/splicemachine/spliceengine/pull/3498#discussion_r424245127", "createdAt": "2020-05-13T07:59:01Z", "author": {"login": "dgomezferro"}, "path": "hbase_sql/src/main/java/com/splicemachine/compactions/SpliceCompactionRequest.java", "diffHunk": "@@ -51,19 +55,35 @@ public void preStorefilesRename() throws IOException {\n                 }\n                 continue;\n             }\n-            if(memstoreAware.compareAndSet(latest, MemstoreAware.incrementCompactionCount(latest)))\n+            if(memstoreAware.compareAndSet(latest, MemstoreAware.incrementCompactionCount(latest))) {\n+                if(LOG.isDebugEnabled()) {\n+                    SpliceLogUtils.debug(LOG, \"memstoreAware@\" + System.identityHashCode(memstoreAware) +\n+                            \" 's compactionCount incremented from \" + latest.currentCompactionCount +\n+                            \" to \" + (latest.currentCompactionCount + 1));\n+                }\n+                assert !compactionCountIncremented;\n+                compactionCountIncremented = true;\n                 break;\n+            }\n         }\n     }\n     public void afterExecute(){\n-        if (memstoreAware == null) {\n+        if (memstoreAware == null || !compactionCountIncremented) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9968c9044b37f9cf0552b64a67f116fed61c3a33"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI0NTk2NQ==", "bodyText": "These two methods can be removed since they don't change the superclass implementation.", "url": "https://github.com/splicemachine/spliceengine/pull/3498#discussion_r424245965", "createdAt": "2020-05-13T08:00:27Z", "author": {"login": "dgomezferro"}, "path": "hbase_sql/src/main/java/com/splicemachine/compactions/SpliceCompactionRequest.java", "diffHunk": "@@ -82,4 +102,26 @@ public void setRegion(HRegion region) {\n         this.region = region;\n     }\n \n+    @Override\n+    public void setOffPeak(boolean value) {\n+        // We hijack setOffPeak because it is only called twice:\n+        // 1. set to true in SpliceDefaultCompactionPolicy before compaction happens\n+        // 2. set to false in HStore.finishCompactionRequest (hbase code)\n+        // At those points, the value passed is irrelevant and is \"only\" used for logging\n+        // purpose, so we can hijack it.\n+        super.setOffPeak(value);\n+        if (!value) {\n+            afterExecute();\n+        }\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9968c9044b37f9cf0552b64a67f116fed61c3a33"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI0NjY5Mg==", "bodyText": "Are there any interactions with real off-peak compactions scheduled from HBase?", "url": "https://github.com/splicemachine/spliceengine/pull/3498#discussion_r424246692", "createdAt": "2020-05-13T08:01:42Z", "author": {"login": "dgomezferro"}, "path": "hbase_sql/src/main/java/com/splicemachine/compactions/SpliceDefaultCompactionPolicy.java", "diffHunk": "@@ -48,7 +48,9 @@ public CompactionRequestImpl selectCompaction(Collection<HStoreFile> candidateFi\n         HRegion region = store.getHRegion();\n         String storeName = store.getColumnFamilyName();\n         scr.setIsMajor(cr.isMajor(), cr.isAllFiles());\n-        scr.setOffPeak(cr.isOffPeak());\n+        // Ignoring cr.isOffPeak() and hardcoding true because SpliceCompactionRequest.setOffPeak is hijacked to run\n+        // SpliceCompactionRequest.afterExecute if isOffPeak(false) is called.\n+        scr.setOffPeak(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9968c9044b37f9cf0552b64a67f116fed61c3a33"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNzE4ODE5", "url": "https://github.com/splicemachine/spliceengine/pull/3498#pullrequestreview-410718819", "createdAt": "2020-05-13T08:51:01Z", "commit": {"oid": "9968c9044b37f9cf0552b64a67f116fed61c3a33"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMzc5OTgz", "url": "https://github.com/splicemachine/spliceengine/pull/3498#pullrequestreview-411379983", "createdAt": "2020-05-14T00:05:23Z", "commit": {"oid": "9968c9044b37f9cf0552b64a67f116fed61c3a33"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExOTMyOTY2", "url": "https://github.com/splicemachine/spliceengine/pull/3498#pullrequestreview-411932966", "createdAt": "2020-05-14T15:39:33Z", "commit": {"oid": "9968c9044b37f9cf0552b64a67f116fed61c3a33"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1327, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}