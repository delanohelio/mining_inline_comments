{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3NDM3MDYz", "number": 3240, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMDoxNzowOFrODhql4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMTozMzoxNFrODhr7PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjI3NDI0OnYy", "diffSide": "LEFT", "path": "splice_machine/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/export/ExportFileTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMDoxNzowOFrOFshv4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMTo1NjoxNlrOFskhDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIzNDU5Mg==", "bodyText": "That's a good use case for hamcrest: more concise, more readable and out of the box comprehensive error message:\nassertThat(e.getMessage(), anyOf(containsString(strA), containsString(strB))\nor, if you're adventurous:\nassertThat(e.getMessage(), matchesPattern(\"IOException '/noPermissionToCreateFolderInRoot(: Read-only file system)+' when accessing directory\"))\nThe second one might need adjustments, I'm a bit rusty on patterns.", "url": "https://github.com/splicemachine/spliceengine/pull/3240#discussion_r382234592", "createdAt": "2020-02-20T20:17:08Z", "author": {"login": "arnaud-splice"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/export/ExportFileTest.java", "diffHunk": "@@ -111,7 +111,8 @@ public void createDirectory_returnsFalseWhenCannotCreate() throws IOException, S\n             assertFalse(exportFile.createDirectory());\n         }\n         catch (Exception e) {\n-             Assert.assertTrue(e.getMessage(), e.getMessage().contains(\"IOException '/noPermissionToCreateFolderInRoot' when accessing directory\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66c1069bb237b1578d3f96465755743685ae0d90"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI3OTk1MQ==", "bodyText": "done, thanks for the suggestion.", "url": "https://github.com/splicemachine/spliceengine/pull/3240#discussion_r382279951", "createdAt": "2020-02-20T21:56:16Z", "author": {"login": "yxia92"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/export/ExportFileTest.java", "diffHunk": "@@ -111,7 +111,8 @@ public void createDirectory_returnsFalseWhenCannotCreate() throws IOException, S\n             assertFalse(exportFile.createDirectory());\n         }\n         catch (Exception e) {\n-             Assert.assertTrue(e.getMessage(), e.getMessage().contains(\"IOException '/noPermissionToCreateFolderInRoot' when accessing directory\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIzNDU5Mg=="}, "originalCommit": {"oid": "66c1069bb237b1578d3f96465755743685ae0d90"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjI3NTEyOnYy", "diffSide": "RIGHT", "path": "splice_machine/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/export/ExportPermissionCheckTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMDoxNzoyNlrOFshwdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMTo1NjoyNFrOFskhVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIzNDc0MA==", "bodyText": "same", "url": "https://github.com/splicemachine/spliceengine/pull/3240#discussion_r382234740", "createdAt": "2020-02-20T20:17:26Z", "author": {"login": "arnaud-splice"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/export/ExportPermissionCheckTest.java", "diffHunk": "@@ -47,12 +48,15 @@ public static void setupConfig() {\n \n     @Test\n     public void verify_failCase() throws IOException, StandardException {\n-        expectedException.expect(StandardException.class);\n-        expectedException.expectMessage(\"IOException '/ExportPermissionCheckTest' when accessing directory\");\n-\n         ExportParams exportParams = ExportParams.withDirectory(\"/ExportPermissionCheckTest\");\n         ExportPermissionCheck permissionCheck = new ExportPermissionCheck(exportParams,dfs);\n-        permissionCheck.verify();\n+        try {\n+            permissionCheck.verify();\n+        } catch (Exception e) {\n+            Assert.assertTrue(e.getMessage(), e.getMessage().contains(\"IOException '/ExportPermissionCheckTest' when accessing directory\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66c1069bb237b1578d3f96465755743685ae0d90"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI4MDAyMQ==", "bodyText": "done.", "url": "https://github.com/splicemachine/spliceengine/pull/3240#discussion_r382280021", "createdAt": "2020-02-20T21:56:24Z", "author": {"login": "yxia92"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/export/ExportPermissionCheckTest.java", "diffHunk": "@@ -47,12 +48,15 @@ public static void setupConfig() {\n \n     @Test\n     public void verify_failCase() throws IOException, StandardException {\n-        expectedException.expect(StandardException.class);\n-        expectedException.expectMessage(\"IOException '/ExportPermissionCheckTest' when accessing directory\");\n-\n         ExportParams exportParams = ExportParams.withDirectory(\"/ExportPermissionCheckTest\");\n         ExportPermissionCheck permissionCheck = new ExportPermissionCheck(exportParams,dfs);\n-        permissionCheck.verify();\n+        try {\n+            permissionCheck.verify();\n+        } catch (Exception e) {\n+            Assert.assertTrue(e.getMessage(), e.getMessage().contains(\"IOException '/ExportPermissionCheckTest' when accessing directory\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIzNDc0MA=="}, "originalCommit": {"oid": "66c1069bb237b1578d3f96465755743685ae0d90"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjQ5Mjc3OnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/HalfOuterJoinNode.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMTozMzoxNFrOFsj4hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMjoxNToxMlrOFslCCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI2OTU3Mg==", "bodyText": "Does delayPreproessingJoinClause always return false for HalfOuterJoinNode?", "url": "https://github.com/splicemachine/spliceengine/pull/3240#discussion_r382269572", "createdAt": "2020-02-20T21:33:14Z", "author": {"login": "jyuanca"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/HalfOuterJoinNode.java", "diffHunk": "@@ -923,6 +923,11 @@ public FromList flatten(ResultColumnList rcl,\n             havingClause.remapColumnReferencesToExpressions();\n         }\n \n+        if (delayPreprocessingJoinClause()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66c1069bb237b1578d3f96465755743685ae0d90"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI3NTc2Nw==", "bodyText": "Yes, currently we don't have the logic to flatten ON clause subquery for outer joins (both Half and FullOuterJoinNode), so there is no need to delayPreprocessingJoinClause for Half and FullOuterJoinNode.", "url": "https://github.com/splicemachine/spliceengine/pull/3240#discussion_r382275767", "createdAt": "2020-02-20T21:47:05Z", "author": {"login": "yxia92"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/HalfOuterJoinNode.java", "diffHunk": "@@ -923,6 +923,11 @@ public FromList flatten(ResultColumnList rcl,\n             havingClause.remapColumnReferencesToExpressions();\n         }\n \n+        if (delayPreprocessingJoinClause()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI2OTU3Mg=="}, "originalCommit": {"oid": "66c1069bb237b1578d3f96465755743685ae0d90"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI4MzExNQ==", "bodyText": "If it is always false, this block will never executed.", "url": "https://github.com/splicemachine/spliceengine/pull/3240#discussion_r382283115", "createdAt": "2020-02-20T22:03:09Z", "author": {"login": "jyuanca"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/HalfOuterJoinNode.java", "diffHunk": "@@ -923,6 +923,11 @@ public FromList flatten(ResultColumnList rcl,\n             havingClause.remapColumnReferencesToExpressions();\n         }\n \n+        if (delayPreprocessingJoinClause()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI2OTU3Mg=="}, "originalCommit": {"oid": "66c1069bb237b1578d3f96465755743685ae0d90"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI4ODM5Mw==", "bodyText": "Hi @jyuanca You are correct, this block is not exercised now. I put it here in anticipation that in the future we may support the flattening of ON clause subquery for outer joins too.", "url": "https://github.com/splicemachine/spliceengine/pull/3240#discussion_r382288393", "createdAt": "2020-02-20T22:15:12Z", "author": {"login": "yxia92"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/HalfOuterJoinNode.java", "diffHunk": "@@ -923,6 +923,11 @@ public FromList flatten(ResultColumnList rcl,\n             havingClause.remapColumnReferencesToExpressions();\n         }\n \n+        if (delayPreprocessingJoinClause()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI2OTU3Mg=="}, "originalCommit": {"oid": "66c1069bb237b1578d3f96465755743685ae0d90"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3380, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}