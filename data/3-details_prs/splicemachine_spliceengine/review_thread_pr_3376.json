{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3Mjg5NjYw", "number": 3376, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNTowMjowNFrODvZaGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDoxNTozNVrODvuWzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDI1OTQ3OnYy", "diffSide": "RIGHT", "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/storage/CheckTableJob.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNTowMjowNFrOGBy8JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNTowMjowNFrOGBy8JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUzNjM1Ng==", "bodyText": "This line is not used and can be removed.", "url": "https://github.com/splicemachine/spliceengine/pull/3376#discussion_r404536356", "createdAt": "2020-04-07T05:02:04Z", "author": {"login": "yxia92"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/storage/CheckTableJob.java", "diffHunk": "@@ -118,10 +119,12 @@ public Void call() throws Exception {\n         CheckTableResult checkTableResult = new CheckTableResult();\n         Map<String, List<String>> errors = new TreeMap<>();\n \n+        int[] baseColumnMap = getBaseColumnMap(tentativeIndexList);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88b37a1300bf09be424eb5c565c5846473519262"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzQ5MTYwOnYy", "diffSide": "RIGHT", "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/control/ControlTableChecker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOToxNzoxNVrOGCSboA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOToxNzoxNVrOGCSboA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1MjMyMA==", "bodyText": "Should we return here? I thought we only want to suppress the messages in the report, but we want to continue to remove the invalidate indexes. If we want to stop fixing indexes when it reaches maxCheckTableErrors, maybe we should return in the result an explicit message that not all indexes have been fixed.", "url": "https://github.com/splicemachine/spliceengine/pull/3376#discussion_r405052320", "createdAt": "2020-04-07T19:17:15Z", "author": {"login": "yxia92"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/control/ControlTableChecker.java", "diffHunk": "@@ -167,57 +188,150 @@ private void populateData(PairDataSet table, PairDataSet index) {\n             }\n         }\n \n-        int i = 0;\n         if (invalidIndexCount > 0) {\n-            messages.add(String.format(\"The following %d indexes are invalid:\", invalidIndexCount));\n+            if (fix) {\n+                return fixInvalidIndexes(result);\n+            } else {\n+                return reportInvalidIndexes(result);\n+            }\n+        }\n+        return new LinkedList<>();\n+    }\n+\n+    private List<String> reportInvalidIndexes(ArrayListMultimap<String, byte[]> result) throws StandardException {\n+        List<String> messages = new LinkedList<>();\n+        int i = 0;\n+        messages.add(String.format(\"The following %d indexes are invalid:\", invalidIndexCount));\n+        for (String baseRowId : result.keySet()) {\n+            List<byte[]> keys = result.get(baseRowId);\n+            for (byte[] key : keys) {\n+                if (i >= maxCheckTableErrors) {\n+                    messages.add(\"...\");\n+                    return messages;\n+                }\n+                indexKeyDecoder.set(key, 0, key.length);\n+                indexKeyDecoder.decode(indexKeyTemplate);\n+                messages.add(indexKeyTemplate.getClone().toString() + \"=>\" + baseRowId);\n+                i++;\n+            }\n+        }\n+        return  messages;\n+    }\n+\n+\n+    private List<String> fixInvalidIndexes(ArrayListMultimap<String, byte[]> result) throws StandardException {\n+        try {\n+            WriteCoordinator writeCoordinator = PipelineDriver.driver().writeCoordinator();\n+            WriteConfiguration writeConfiguration = writeCoordinator.defaultWriteConfiguration();\n+            Partition indexPartition = SIDriver.driver().getTableFactory().getTable(Long.toString(conglomerate));\n+            RecordingCallBuffer<KVPair> writeBuffer = writeCoordinator.writeBuffer(indexPartition, txn, null, writeConfiguration);\n+\n+            List<String> messages = new LinkedList<>();\n+            int i = 0;\n+            messages.add(String.format(\"The following %d indexes are deleted:\", invalidIndexCount));\n             for (String baseRowId : result.keySet()) {\n                 List<byte[]> keys = result.get(baseRowId);\n                 for (byte[] key : keys) {\n-                    if (i >= maxCheckTableErrors) {\n+                    if (i == maxCheckTableErrors) {\n                         messages.add(\"...\");\n                         return messages;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88b37a1300bf09be424eb5c565c5846473519262"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzUxNDA4OnYy", "diffSide": "RIGHT", "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/control/ControlTableChecker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOToyMzoyNVrOGCSpYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOToyMzoyNVrOGCSpYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1NTg0MA==", "bodyText": "Same question here, should we break out here without fixing the remaining rows?", "url": "https://github.com/splicemachine/spliceengine/pull/3376#discussion_r405055840", "createdAt": "2020-04-07T19:23:25Z", "author": {"login": "yxia92"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/control/ControlTableChecker.java", "diffHunk": "@@ -167,57 +188,150 @@ private void populateData(PairDataSet table, PairDataSet index) {\n             }\n         }\n \n-        int i = 0;\n         if (invalidIndexCount > 0) {\n-            messages.add(String.format(\"The following %d indexes are invalid:\", invalidIndexCount));\n+            if (fix) {\n+                return fixInvalidIndexes(result);\n+            } else {\n+                return reportInvalidIndexes(result);\n+            }\n+        }\n+        return new LinkedList<>();\n+    }\n+\n+    private List<String> reportInvalidIndexes(ArrayListMultimap<String, byte[]> result) throws StandardException {\n+        List<String> messages = new LinkedList<>();\n+        int i = 0;\n+        messages.add(String.format(\"The following %d indexes are invalid:\", invalidIndexCount));\n+        for (String baseRowId : result.keySet()) {\n+            List<byte[]> keys = result.get(baseRowId);\n+            for (byte[] key : keys) {\n+                if (i >= maxCheckTableErrors) {\n+                    messages.add(\"...\");\n+                    return messages;\n+                }\n+                indexKeyDecoder.set(key, 0, key.length);\n+                indexKeyDecoder.decode(indexKeyTemplate);\n+                messages.add(indexKeyTemplate.getClone().toString() + \"=>\" + baseRowId);\n+                i++;\n+            }\n+        }\n+        return  messages;\n+    }\n+\n+\n+    private List<String> fixInvalidIndexes(ArrayListMultimap<String, byte[]> result) throws StandardException {\n+        try {\n+            WriteCoordinator writeCoordinator = PipelineDriver.driver().writeCoordinator();\n+            WriteConfiguration writeConfiguration = writeCoordinator.defaultWriteConfiguration();\n+            Partition indexPartition = SIDriver.driver().getTableFactory().getTable(Long.toString(conglomerate));\n+            RecordingCallBuffer<KVPair> writeBuffer = writeCoordinator.writeBuffer(indexPartition, txn, null, writeConfiguration);\n+\n+            List<String> messages = new LinkedList<>();\n+            int i = 0;\n+            messages.add(String.format(\"The following %d indexes are deleted:\", invalidIndexCount));\n             for (String baseRowId : result.keySet()) {\n                 List<byte[]> keys = result.get(baseRowId);\n                 for (byte[] key : keys) {\n-                    if (i >= maxCheckTableErrors) {\n+                    if (i == maxCheckTableErrors) {\n                         messages.add(\"...\");\n                         return messages;\n                     }\n+                    writeBuffer.add(new KVPair(key, new byte[0], KVPair.Type.DELETE));\n+                    if (i > maxCheckTableErrors) {\n+                        continue;\n+                    }\n                     indexKeyDecoder.set(key, 0, key.length);\n                     indexKeyDecoder.decode(indexKeyTemplate);\n                     messages.add(indexKeyTemplate.getClone().toString() + \"=>\" + baseRowId);\n                     i++;\n                 }\n             }\n+            writeBuffer.flushBuffer();\n+            return messages;\n+        }\n+        catch (Exception e) {\n+            throw StandardException.plainWrapException(e);\n         }\n-        return  messages;\n     }\n \n     private List<String> checkMissingIndexes() throws StandardException {\n         List<String> messages = new LinkedList<>();\n         missingIndexCount = 0;\n-        Map<String, byte[]> result = new HashMap<>();\n+        Map<String, ExecRow> result = new HashMap<>();\n         for (String rowId : tableData.keySet()) {\n             if (!indexData.containsKey(rowId)) {\n                 missingIndexCount++;\n                 result.put(rowId, tableData.get(rowId));\n             }\n         }\n+        if (missingIndexCount > 0) {\n+            if (fix) {\n+                return fixMissingIndexes(result);\n+            } else {\n+                return reportMissingIndexes(result);\n+            }\n+        }\n+        return new LinkedList<>();\n+    }\n+\n+    private List<String> fixMissingIndexes(Map<String, ExecRow> result) throws StandardException {\n+        List<String> messages = new LinkedList<>();\n+\n+        DataSet<ExecRow> dataSet = new ControlDataSet<>(result.values().iterator());\n+        PairDataSet dsToWrite = dataSet\n+                .map(new IndexTransformFunction(tentativeIndex), null, false, true, \"Prepare Index\")\n+                .index(new KVPairFunction(), false, true, \"Add missing indexes\");\n+        DataSetWriter writer = dsToWrite.directWriteData()\n+                .destConglomerate(tentativeIndex.getIndex().getConglomerate())\n+                .txn(txn)\n+                .build();\n+        writer.write();\n \n         int i = 0;\n-        if (missingIndexCount > 0) {\n-            messages.add(String.format(\"The following %d rows from base table %s.%s are not indexed:\", result.size(), schemaName, tableName));\n-            for (Map.Entry<String, byte[]> entry : result.entrySet()) {\n-                if (i >= maxCheckTableErrors) {\n-                    messages.add(\"...\");\n-                    break;\n-                }\n-                byte[] key = entry.getValue();\n-                if (tableKeyTemplate.nColumns() > 0) {\n-                    tableKeyDecoder.set(key, 0, key.length);\n-                    tableKeyDecoder.decode(tableKeyTemplate);\n-                    messages.add(tableKeyTemplate.getClone().toString());\n-                }\n-                else {\n-                    messages.add(entry.getKey());\n-                }\n-                i++;\n+        messages.add(String.format(\"Create index for the following %d rows from base table %s.%s:\", result.size(), schemaName, tableName));\n+        for (Map.Entry<String, ExecRow> entry : result.entrySet()) {\n+            if (i >= maxCheckTableErrors) {\n+                messages.add(\"...\");\n+                break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88b37a1300bf09be424eb5c565c5846473519262"}, "originalPosition": 233}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzUzMTA4OnYy", "diffSide": "RIGHT", "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/control/ControlTableChecker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOToyODoxNVrOGCS0CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMjo0ODoxOFrOGCY44Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1ODU2OA==", "bodyText": "If we stop at the maxCheckTableErrors, why we have this check here?", "url": "https://github.com/splicemachine/spliceengine/pull/3376#discussion_r405058568", "createdAt": "2020-04-07T19:28:15Z", "author": {"login": "yxia92"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/control/ControlTableChecker.java", "diffHunk": "@@ -167,57 +188,150 @@ private void populateData(PairDataSet table, PairDataSet index) {\n             }\n         }\n \n-        int i = 0;\n         if (invalidIndexCount > 0) {\n-            messages.add(String.format(\"The following %d indexes are invalid:\", invalidIndexCount));\n+            if (fix) {\n+                return fixInvalidIndexes(result);\n+            } else {\n+                return reportInvalidIndexes(result);\n+            }\n+        }\n+        return new LinkedList<>();\n+    }\n+\n+    private List<String> reportInvalidIndexes(ArrayListMultimap<String, byte[]> result) throws StandardException {\n+        List<String> messages = new LinkedList<>();\n+        int i = 0;\n+        messages.add(String.format(\"The following %d indexes are invalid:\", invalidIndexCount));\n+        for (String baseRowId : result.keySet()) {\n+            List<byte[]> keys = result.get(baseRowId);\n+            for (byte[] key : keys) {\n+                if (i >= maxCheckTableErrors) {\n+                    messages.add(\"...\");\n+                    return messages;\n+                }\n+                indexKeyDecoder.set(key, 0, key.length);\n+                indexKeyDecoder.decode(indexKeyTemplate);\n+                messages.add(indexKeyTemplate.getClone().toString() + \"=>\" + baseRowId);\n+                i++;\n+            }\n+        }\n+        return  messages;\n+    }\n+\n+\n+    private List<String> fixInvalidIndexes(ArrayListMultimap<String, byte[]> result) throws StandardException {\n+        try {\n+            WriteCoordinator writeCoordinator = PipelineDriver.driver().writeCoordinator();\n+            WriteConfiguration writeConfiguration = writeCoordinator.defaultWriteConfiguration();\n+            Partition indexPartition = SIDriver.driver().getTableFactory().getTable(Long.toString(conglomerate));\n+            RecordingCallBuffer<KVPair> writeBuffer = writeCoordinator.writeBuffer(indexPartition, txn, null, writeConfiguration);\n+\n+            List<String> messages = new LinkedList<>();\n+            int i = 0;\n+            messages.add(String.format(\"The following %d indexes are deleted:\", invalidIndexCount));\n             for (String baseRowId : result.keySet()) {\n                 List<byte[]> keys = result.get(baseRowId);\n                 for (byte[] key : keys) {\n-                    if (i >= maxCheckTableErrors) {\n+                    if (i == maxCheckTableErrors) {\n                         messages.add(\"...\");\n                         return messages;\n                     }\n+                    writeBuffer.add(new KVPair(key, new byte[0], KVPair.Type.DELETE));\n+                    if (i > maxCheckTableErrors) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88b37a1300bf09be424eb5c565c5846473519262"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE1ODExMw==", "bodyText": "Let me restructure the code to make it more readable.", "url": "https://github.com/splicemachine/spliceengine/pull/3376#discussion_r405158113", "createdAt": "2020-04-07T22:48:18Z", "author": {"login": "jyuanca"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/control/ControlTableChecker.java", "diffHunk": "@@ -167,57 +188,150 @@ private void populateData(PairDataSet table, PairDataSet index) {\n             }\n         }\n \n-        int i = 0;\n         if (invalidIndexCount > 0) {\n-            messages.add(String.format(\"The following %d indexes are invalid:\", invalidIndexCount));\n+            if (fix) {\n+                return fixInvalidIndexes(result);\n+            } else {\n+                return reportInvalidIndexes(result);\n+            }\n+        }\n+        return new LinkedList<>();\n+    }\n+\n+    private List<String> reportInvalidIndexes(ArrayListMultimap<String, byte[]> result) throws StandardException {\n+        List<String> messages = new LinkedList<>();\n+        int i = 0;\n+        messages.add(String.format(\"The following %d indexes are invalid:\", invalidIndexCount));\n+        for (String baseRowId : result.keySet()) {\n+            List<byte[]> keys = result.get(baseRowId);\n+            for (byte[] key : keys) {\n+                if (i >= maxCheckTableErrors) {\n+                    messages.add(\"...\");\n+                    return messages;\n+                }\n+                indexKeyDecoder.set(key, 0, key.length);\n+                indexKeyDecoder.decode(indexKeyTemplate);\n+                messages.add(indexKeyTemplate.getClone().toString() + \"=>\" + baseRowId);\n+                i++;\n+            }\n+        }\n+        return  messages;\n+    }\n+\n+\n+    private List<String> fixInvalidIndexes(ArrayListMultimap<String, byte[]> result) throws StandardException {\n+        try {\n+            WriteCoordinator writeCoordinator = PipelineDriver.driver().writeCoordinator();\n+            WriteConfiguration writeConfiguration = writeCoordinator.defaultWriteConfiguration();\n+            Partition indexPartition = SIDriver.driver().getTableFactory().getTable(Long.toString(conglomerate));\n+            RecordingCallBuffer<KVPair> writeBuffer = writeCoordinator.writeBuffer(indexPartition, txn, null, writeConfiguration);\n+\n+            List<String> messages = new LinkedList<>();\n+            int i = 0;\n+            messages.add(String.format(\"The following %d indexes are deleted:\", invalidIndexCount));\n             for (String baseRowId : result.keySet()) {\n                 List<byte[]> keys = result.get(baseRowId);\n                 for (byte[] key : keys) {\n-                    if (i >= maxCheckTableErrors) {\n+                    if (i == maxCheckTableErrors) {\n                         messages.add(\"...\");\n                         return messages;\n                     }\n+                    writeBuffer.add(new KVPair(key, new byte[0], KVPair.Type.DELETE));\n+                    if (i > maxCheckTableErrors) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1ODU2OA=="}, "originalCommit": {"oid": "88b37a1300bf09be424eb5c565c5846473519262"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzY5MTY2OnYy", "diffSide": "RIGHT", "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/control/ControlTableChecker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDoxNTozNVrOGCUZrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMjo0Nzo1NVrOGCY4Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA4NDU4OA==", "bodyText": "For checkDuplicateIndexes(), shouldn't we also handle the fix=true path, and remove duplicate indexes?", "url": "https://github.com/splicemachine/spliceengine/pull/3376#discussion_r405084588", "createdAt": "2020-04-07T20:15:35Z", "author": {"login": "yxia92"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/control/ControlTableChecker.java", "diffHunk": "@@ -157,7 +178,7 @@ private void populateData(PairDataSet table, PairDataSet index) {\n \n     private List<String> checkInvalidIndexes() throws StandardException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88b37a1300bf09be424eb5c565c5846473519262"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE1Nzk0Mg==", "bodyText": "This does not happen for system tables. I'll file another Jira( DB-9361) to address this issue.", "url": "https://github.com/splicemachine/spliceengine/pull/3376#discussion_r405157942", "createdAt": "2020-04-07T22:47:55Z", "author": {"login": "jyuanca"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/control/ControlTableChecker.java", "diffHunk": "@@ -157,7 +178,7 @@ private void populateData(PairDataSet table, PairDataSet index) {\n \n     private List<String> checkInvalidIndexes() throws StandardException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA4NDU4OA=="}, "originalCommit": {"oid": "88b37a1300bf09be424eb5c565c5846473519262"}, "originalPosition": 96}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3304, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}