{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0NjY3MDM4", "number": 3683, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMDoxNDowOFrOEFrmEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMjoxNzozN1rOEFwf3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzkyNTkzOnYy", "diffSide": "RIGHT", "path": "hbase_sql/src/main/java/com/splicemachine/olap/OlapServerSubmitter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMDoxNDowOFrOGkBJzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwODozNjo0M1rOGkRF3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQyMDgxMw==", "bodyText": "Is it needed to wrap the exception in a RuntimeException, can we just remove the catch?", "url": "https://github.com/splicemachine/spliceengine/pull/3683#discussion_r440420813", "createdAt": "2020-06-15T20:14:08Z", "author": {"login": "hatyo"}, "path": "hbase_sql/src/main/java/com/splicemachine/olap/OlapServerSubmitter.java", "diffHunk": "@@ -244,6 +244,24 @@ public void run() {\n \n     }\n \n+    private byte[] getKeepAlivePayload() {\n+        DatabaseVersion version;\n+        try {\n+            version = JMXUtils.getLocalMBeanProxy(JMXUtils.SPLICEMACHINE_VERSION, DatabaseVersion.class);\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80edd6ee0f01907ddae32e081bebde1ba96751d3"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY4MTk1MQ==", "bodyText": "I removed that as part of the refactoring to address other comments", "url": "https://github.com/splicemachine/spliceengine/pull/3683#discussion_r440681951", "createdAt": "2020-06-16T08:36:43Z", "author": {"login": "dgomezferro"}, "path": "hbase_sql/src/main/java/com/splicemachine/olap/OlapServerSubmitter.java", "diffHunk": "@@ -244,6 +244,24 @@ public void run() {\n \n     }\n \n+    private byte[] getKeepAlivePayload() {\n+        DatabaseVersion version;\n+        try {\n+            version = JMXUtils.getLocalMBeanProxy(JMXUtils.SPLICEMACHINE_VERSION, DatabaseVersion.class);\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQyMDgxMw=="}, "originalCommit": {"oid": "80edd6ee0f01907ddae32e081bebde1ba96751d3"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0Mzk1MDkzOnYy", "diffSide": "RIGHT", "path": "hbase_sql/src/main/java/com/splicemachine/olap/OlapServerSubmitter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMDoyMjoxOVrOGkBZkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwODozNzo1OVrOGkRJCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQyNDg1MA==", "bodyText": "Does version need to be re-read on every call? Can it be an instance, or even static, variable similar to OlapServerMaster?", "url": "https://github.com/splicemachine/spliceengine/pull/3683#discussion_r440424850", "createdAt": "2020-06-15T20:22:19Z", "author": {"login": "OlegMazurov"}, "path": "hbase_sql/src/main/java/com/splicemachine/olap/OlapServerSubmitter.java", "diffHunk": "@@ -244,6 +244,24 @@ public void run() {\n \n     }\n \n+    private byte[] getKeepAlivePayload() {\n+        DatabaseVersion version;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80edd6ee0f01907ddae32e081bebde1ba96751d3"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY4Mjc2Mw==", "bodyText": "I initialize a keepAlive message prototype once in the beginning with the version information and then use that to generate the payload with the time, so we only access the version once per OlapServer lifetime.", "url": "https://github.com/splicemachine/spliceengine/pull/3683#discussion_r440682763", "createdAt": "2020-06-16T08:37:59Z", "author": {"login": "dgomezferro"}, "path": "hbase_sql/src/main/java/com/splicemachine/olap/OlapServerSubmitter.java", "diffHunk": "@@ -244,6 +244,24 @@ public void run() {\n \n     }\n \n+    private byte[] getKeepAlivePayload() {\n+        DatabaseVersion version;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQyNDg1MA=="}, "originalCommit": {"oid": "80edd6ee0f01907ddae32e081bebde1ba96751d3"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDcyOTI2OnYy", "diffSide": "RIGHT", "path": "hbase_sql/src/main/java/com/splicemachine/olap/OlapServerSubmitter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMjoxNzozN1rOGkI4mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwODozODoxNFrOGkRJpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU0NzQ4MQ==", "bodyText": "Is this code possible after the change? Should we still ignore it?", "url": "https://github.com/splicemachine/spliceengine/pull/3683#discussion_r440547481", "createdAt": "2020-06-16T02:17:37Z", "author": {"login": "OlegMazurov"}, "path": "hbase_sql/src/main/java/com/splicemachine/olap/OlapServerSubmitter.java", "diffHunk": "@@ -166,10 +163,13 @@ public void run() {\n                         public void run() {\n                             RecoverableZooKeeper zk = ZkUtils.getRecoverableZooKeeper();\n                             String root = HConfiguration.getConfiguration().getSpliceRootPath();\n-                            String path = root + HBaseConfiguration.OLAP_SERVER_PATH + HBaseConfiguration.OLAP_SERVER_KEEP_ALIVE_PATH + \"/\" + appName;\n-                            byte[] payload = Bytes.toBytes(System.currentTimeMillis());\n+                            String keepAlivePath = root + HBaseConfiguration.OLAP_SERVER_PATH + HBaseConfiguration.OLAP_SERVER_KEEP_ALIVE_PATH + \"/\" + appName;\n+\n+                            byte[] payload = getKeepAlivePayload();\n                             try {\n-                                zk.create(path, payload, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n+                                // clean up node if it exists\n+                                ZkUtils.safeDelete(keepAlivePath, -1);\n+                                zk.create(keepAlivePath, payload, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n                             } catch (KeeperException ke) {\n                                 if (ke.code().equals(NODEEXISTS)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80edd6ee0f01907ddae32e081bebde1ba96751d3"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY4MjkxNw==", "bodyText": "I removed it, good point", "url": "https://github.com/splicemachine/spliceengine/pull/3683#discussion_r440682917", "createdAt": "2020-06-16T08:38:14Z", "author": {"login": "dgomezferro"}, "path": "hbase_sql/src/main/java/com/splicemachine/olap/OlapServerSubmitter.java", "diffHunk": "@@ -166,10 +163,13 @@ public void run() {\n                         public void run() {\n                             RecoverableZooKeeper zk = ZkUtils.getRecoverableZooKeeper();\n                             String root = HConfiguration.getConfiguration().getSpliceRootPath();\n-                            String path = root + HBaseConfiguration.OLAP_SERVER_PATH + HBaseConfiguration.OLAP_SERVER_KEEP_ALIVE_PATH + \"/\" + appName;\n-                            byte[] payload = Bytes.toBytes(System.currentTimeMillis());\n+                            String keepAlivePath = root + HBaseConfiguration.OLAP_SERVER_PATH + HBaseConfiguration.OLAP_SERVER_KEEP_ALIVE_PATH + \"/\" + appName;\n+\n+                            byte[] payload = getKeepAlivePayload();\n                             try {\n-                                zk.create(path, payload, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n+                                // clean up node if it exists\n+                                ZkUtils.safeDelete(keepAlivePath, -1);\n+                                zk.create(keepAlivePath, payload, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n                             } catch (KeeperException ke) {\n                                 if (ke.code().equals(NODEEXISTS)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU0NzQ4MQ=="}, "originalCommit": {"oid": "80edd6ee0f01907ddae32e081bebde1ba96751d3"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3199, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}