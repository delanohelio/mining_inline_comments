{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5MzEzNzE3", "number": 4240, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMDo0OTozOFrOEwMAJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNDo0MToxMVrOEyLhPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTYzNzQ5OnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/catalog/DataDictionaryImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMDo0OTozOFrOHll0xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwODozOTo0M1rOHmW2tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE3OTA3OQ==", "bodyText": "What's the placeholder?", "url": "https://github.com/splicemachine/spliceengine/pull/4240#discussion_r509179079", "createdAt": "2020-10-21T10:49:38Z", "author": {"login": "dgomezferro"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/catalog/DataDictionaryImpl.java", "diffHunk": "@@ -727,6 +713,21 @@ private void getBuiltinSpliceDb() throws StandardException {\n                 databaseID);\n     }\n \n+    public UUID createNewDatabase(String name) throws StandardException {\n+        ContextService.getFactory();\n+        TransactionController tc = af.getTransaction(ContextService.getCurrentContextManager());\n+        if (!tc.isElevated()) {\n+            StandardException.plainWrapException(new IOException(\"addStoreDependency: not writeable\"));\n+        }\n+\n+        UUID uuid = getUUIDFactory().createUUID();\n+        DatabaseDescriptor desc = new DatabaseDescriptor(\n+                this, name, \"PLACEHOLDER\", uuid); // XXX (arnaud multidb) replace placeholder", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5590a7c561423e1551c9e070ba6c08790ebb4078"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk4MjM4OQ==", "bodyText": "It's meant to be replaced by the dbOwner.\nThis will be part of DB-10472 (PR coming soon)", "url": "https://github.com/splicemachine/spliceengine/pull/4240#discussion_r509982389", "createdAt": "2020-10-22T08:39:43Z", "author": {"login": "arnaud-splice"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/catalog/DataDictionaryImpl.java", "diffHunk": "@@ -727,6 +713,21 @@ private void getBuiltinSpliceDb() throws StandardException {\n                 databaseID);\n     }\n \n+    public UUID createNewDatabase(String name) throws StandardException {\n+        ContextService.getFactory();\n+        TransactionController tc = af.getTransaction(ContextService.getCurrentContextManager());\n+        if (!tc.isElevated()) {\n+            StandardException.plainWrapException(new IOException(\"addStoreDependency: not writeable\"));\n+        }\n+\n+        UUID uuid = getUUIDFactory().createUUID();\n+        DatabaseDescriptor desc = new DatabaseDescriptor(\n+                this, name, \"PLACEHOLDER\", uuid); // XXX (arnaud multidb) replace placeholder", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE3OTA3OQ=="}, "originalCommit": {"oid": "5590a7c561423e1551c9e070ba6c08790ebb4078"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTY0OTI5OnYy", "diffSide": "RIGHT", "path": "db-tools-i18n/src/main/resources/com/splicemachine/db/loc/messages_es.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMDo1Mjo0OVrOHll79Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwODo0MTowMFrOHmW6Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE4MDkxNw==", "bodyText": "vac\\u00EDa.", "url": "https://github.com/splicemachine/spliceengine/pull/4240#discussion_r509180917", "createdAt": "2020-10-21T10:52:49Z", "author": {"login": "dgomezferro"}, "path": "db-tools-i18n/src/main/resources/com/splicemachine/db/loc/messages_es.properties", "diffHunk": "@@ -872,6 +873,7 @@ X0Y43.S=La restricci\\u00F3n ''{0}'' no es v\\u00E1lida\\: el n\\u00FAmero de column\n X0Y44.S=La restricci\\u00F3n ''{0}'' no es v\\u00E1lida\\: no existe una restricci\\u00F3n de clave \\u00FAnica o primaria sobre la tabla ''{1}'' que coincida con el n\\u00FAmero y tipos de las columnas de la clave primaria.\n X0Y45.S=La restricci\\u00F3n de clave for\\u00E1nea ''{0}'' no se puede a\\u00F1adir o habilitar sobre la tabla {1} porque una o m\\u00E1s claves for\\u00E1neas no tienen claves referenciadas coincidentes.  \n X0Y46.S=La restricci\\u00F3n ''{0}'' no es v\\u00E1lida\\: la tabla referenciada {1} no existe.\n+X0Y53.S=La base de datos ''{0}'' no se puede eliminar porque no est\\u00E1 vac\\u00EDo.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5590a7c561423e1551c9e070ba6c08790ebb4078"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk4MzI3OQ==", "bodyText": "Done, thanks!", "url": "https://github.com/splicemachine/spliceengine/pull/4240#discussion_r509983279", "createdAt": "2020-10-22T08:41:00Z", "author": {"login": "arnaud-splice"}, "path": "db-tools-i18n/src/main/resources/com/splicemachine/db/loc/messages_es.properties", "diffHunk": "@@ -872,6 +873,7 @@ X0Y43.S=La restricci\\u00F3n ''{0}'' no es v\\u00E1lida\\: el n\\u00FAmero de column\n X0Y44.S=La restricci\\u00F3n ''{0}'' no es v\\u00E1lida\\: no existe una restricci\\u00F3n de clave \\u00FAnica o primaria sobre la tabla ''{1}'' que coincida con el n\\u00FAmero y tipos de las columnas de la clave primaria.\n X0Y45.S=La restricci\\u00F3n de clave for\\u00E1nea ''{0}'' no se puede a\\u00F1adir o habilitar sobre la tabla {1} porque una o m\\u00E1s claves for\\u00E1neas no tienen claves referenciadas coincidentes.  \n X0Y46.S=La restricci\\u00F3n ''{0}'' no es v\\u00E1lida\\: la tabla referenciada {1} no existe.\n+X0Y53.S=La base de datos ''{0}'' no se puede eliminar porque no est\\u00E1 vac\\u00EDo.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE4MDkxNw=="}, "originalCommit": {"oid": "5590a7c561423e1551c9e070ba6c08790ebb4078"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTY2MjU0OnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/dictionary/DatabaseDescriptor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMDo1NjoyNFrOHlmEEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNDowNjozOFrOHmjj8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE4Mjk5Mg==", "bodyText": "This should also be called in other RSs through the DDL coordination mechanism, is that happening?", "url": "https://github.com/splicemachine/spliceengine/pull/4240#discussion_r509182992", "createdAt": "2020-10-21T10:56:24Z", "author": {"login": "dgomezferro"}, "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/dictionary/DatabaseDescriptor.java", "diffHunk": "@@ -265,4 +272,50 @@ public void writeExternal(ObjectOutput output) throws IOException {\n     public void setDataDictionary(DataDictionary dataDictionary) {\n         this.dataDictionary = dataDictionary;\n     }\n+\n+    /**\n+     * Drop this database.\n+     * Drops the database if it is empty.\n+     * @throws StandardException Schema could not be dropped.\n+     */\n+    public void drop(LanguageConnectionContext lcc,\n+                     Activation activation) throws StandardException\n+    {\n+        DataDictionary dd = getDataDictionary();\n+        DependencyManager dm = dd.getDependencyManager();\n+        TransactionController tc = lcc.getTransactionExecute();\n+\n+        // First drop restrict the default SPLICE schema:\n+        SchemaDescriptor spliceSchemaDesc = dd.getSchemaDescriptor(getUUID(), Property.DEFAULT_USER_NAME, tc, false);\n+        if (spliceSchemaDesc != null) {\n+            spliceSchemaDesc.drop(lcc, activation);\n+        }\n+\n+        /*\n+         ** Make sure the database is empty.\n+         ** In the future we want to drop everything\n+         ** in the database if it is CASCADE.\n+         */\n+        if (!dd.isDatabaseEmpty(this))\n+        {\n+            throw StandardException.newException(SQLState.LANG_DATABASE_NOT_EMPTY, getDatabaseName());\n+        }\n+\n+        /* Prepare all dependents to invalidate.  (This is there chance\n+         * to say that they can't be invalidated.  For example, an open\n+         * cursor referencing a table/view that the user is attempting to\n+         * drop.) If no one objects, then invalidate any dependent objects.\n+         */\n+        dm.invalidateFor(this, DependencyManager.DROP_DATABASE, lcc);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5590a7c561423e1551c9e070ba6c08790ebb4078"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAwNTM4OQ==", "bodyText": "I did the same thing as what was being done for SchemaDescriptor. Is that not enough?", "url": "https://github.com/splicemachine/spliceengine/pull/4240#discussion_r510005389", "createdAt": "2020-10-22T09:13:06Z", "author": {"login": "arnaud-splice"}, "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/dictionary/DatabaseDescriptor.java", "diffHunk": "@@ -265,4 +272,50 @@ public void writeExternal(ObjectOutput output) throws IOException {\n     public void setDataDictionary(DataDictionary dataDictionary) {\n         this.dataDictionary = dataDictionary;\n     }\n+\n+    /**\n+     * Drop this database.\n+     * Drops the database if it is empty.\n+     * @throws StandardException Schema could not be dropped.\n+     */\n+    public void drop(LanguageConnectionContext lcc,\n+                     Activation activation) throws StandardException\n+    {\n+        DataDictionary dd = getDataDictionary();\n+        DependencyManager dm = dd.getDependencyManager();\n+        TransactionController tc = lcc.getTransactionExecute();\n+\n+        // First drop restrict the default SPLICE schema:\n+        SchemaDescriptor spliceSchemaDesc = dd.getSchemaDescriptor(getUUID(), Property.DEFAULT_USER_NAME, tc, false);\n+        if (spliceSchemaDesc != null) {\n+            spliceSchemaDesc.drop(lcc, activation);\n+        }\n+\n+        /*\n+         ** Make sure the database is empty.\n+         ** In the future we want to drop everything\n+         ** in the database if it is CASCADE.\n+         */\n+        if (!dd.isDatabaseEmpty(this))\n+        {\n+            throw StandardException.newException(SQLState.LANG_DATABASE_NOT_EMPTY, getDatabaseName());\n+        }\n+\n+        /* Prepare all dependents to invalidate.  (This is there chance\n+         * to say that they can't be invalidated.  For example, an open\n+         * cursor referencing a table/view that the user is attempting to\n+         * drop.) If no one objects, then invalidate any dependent objects.\n+         */\n+        dm.invalidateFor(this, DependencyManager.DROP_DATABASE, lcc);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE4Mjk5Mg=="}, "originalCommit": {"oid": "5590a7c561423e1551c9e070ba6c08790ebb4078"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE5MDU3OQ==", "bodyText": "After discussing this offline, I made SchemaDescritor and DatabaseDescriptor behave like TableDescriptor", "url": "https://github.com/splicemachine/spliceengine/pull/4240#discussion_r510190579", "createdAt": "2020-10-22T14:06:38Z", "author": {"login": "arnaud-splice"}, "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/dictionary/DatabaseDescriptor.java", "diffHunk": "@@ -265,4 +272,50 @@ public void writeExternal(ObjectOutput output) throws IOException {\n     public void setDataDictionary(DataDictionary dataDictionary) {\n         this.dataDictionary = dataDictionary;\n     }\n+\n+    /**\n+     * Drop this database.\n+     * Drops the database if it is empty.\n+     * @throws StandardException Schema could not be dropped.\n+     */\n+    public void drop(LanguageConnectionContext lcc,\n+                     Activation activation) throws StandardException\n+    {\n+        DataDictionary dd = getDataDictionary();\n+        DependencyManager dm = dd.getDependencyManager();\n+        TransactionController tc = lcc.getTransactionExecute();\n+\n+        // First drop restrict the default SPLICE schema:\n+        SchemaDescriptor spliceSchemaDesc = dd.getSchemaDescriptor(getUUID(), Property.DEFAULT_USER_NAME, tc, false);\n+        if (spliceSchemaDesc != null) {\n+            spliceSchemaDesc.drop(lcc, activation);\n+        }\n+\n+        /*\n+         ** Make sure the database is empty.\n+         ** In the future we want to drop everything\n+         ** in the database if it is CASCADE.\n+         */\n+        if (!dd.isDatabaseEmpty(this))\n+        {\n+            throw StandardException.newException(SQLState.LANG_DATABASE_NOT_EMPTY, getDatabaseName());\n+        }\n+\n+        /* Prepare all dependents to invalidate.  (This is there chance\n+         * to say that they can't be invalidated.  For example, an open\n+         * cursor referencing a table/view that the user is attempting to\n+         * drop.) If no one objects, then invalidate any dependent objects.\n+         */\n+        dm.invalidateFor(this, DependencyManager.DROP_DATABASE, lcc);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE4Mjk5Mg=="}, "originalCommit": {"oid": "5590a7c561423e1551c9e070ba6c08790ebb4078"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTY3NTA3OnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/conn/GenericLanguageConnectionContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMTowMDowM1rOHlmLsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTo1NjowNVrOHmow3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE4NDk0Nw==", "bodyText": "Would it be possible to cache the DatabaseDescriptor in the initialize() method similarly to what we do with the SchemaDescriptor, so that we don't have to throw StandardExceptions all over the place?", "url": "https://github.com/splicemachine/spliceengine/pull/4240#discussion_r509184947", "createdAt": "2020-10-21T11:00:03Z", "author": {"login": "dgomezferro"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/conn/GenericLanguageConnectionContext.java", "diffHunk": "@@ -3660,23 +3673,19 @@ public void setupSubStatementSessionContext(Activation a) throws StandardExcepti\n     }\n \n     @Override\n-    public SQLSessionContext getTopLevelSQLSessionContext() {\n+    public SQLSessionContext getTopLevelSQLSessionContext() throws StandardException {\n         if(topLevelSSC==null){\n-            topLevelSSC=new SQLSessionContextImpl(\n-                    getInitialDefaultSchemaDescriptor(),\n-                    getSessionUserId(),\n-                    defaultRoles, groupuserlist);\n+            topLevelSSC = createSQLSessionContext();\n         }\n         return topLevelSSC;\n     }\n \n \n     @Override\n-    public SQLSessionContext createSQLSessionContext() {\n-        return new SQLSessionContextImpl(\n-                getInitialDefaultSchemaDescriptor(),\n-                getSessionUserId() /* a priori */,\n-                defaultRoles, groupuserlist);\n+    public SQLSessionContext createSQLSessionContext() throws StandardException {\n+        return new SQLSessionContextImpl(getDataDictionary().getDatabaseDescriptor(dbName, getTransactionCompile()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5590a7c561423e1551c9e070ba6c08790ebb4078"}, "originalPosition": 334}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3NTgwNA==", "bodyText": "Done! That's a lot simpler now, thanks!", "url": "https://github.com/splicemachine/spliceengine/pull/4240#discussion_r510275804", "createdAt": "2020-10-22T15:56:05Z", "author": {"login": "arnaud-splice"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/conn/GenericLanguageConnectionContext.java", "diffHunk": "@@ -3660,23 +3673,19 @@ public void setupSubStatementSessionContext(Activation a) throws StandardExcepti\n     }\n \n     @Override\n-    public SQLSessionContext getTopLevelSQLSessionContext() {\n+    public SQLSessionContext getTopLevelSQLSessionContext() throws StandardException {\n         if(topLevelSSC==null){\n-            topLevelSSC=new SQLSessionContextImpl(\n-                    getInitialDefaultSchemaDescriptor(),\n-                    getSessionUserId(),\n-                    defaultRoles, groupuserlist);\n+            topLevelSSC = createSQLSessionContext();\n         }\n         return topLevelSSC;\n     }\n \n \n     @Override\n-    public SQLSessionContext createSQLSessionContext() {\n-        return new SQLSessionContextImpl(\n-                getInitialDefaultSchemaDescriptor(),\n-                getSessionUserId() /* a priori */,\n-                defaultRoles, groupuserlist);\n+    public SQLSessionContext createSQLSessionContext() throws StandardException {\n+        return new SQLSessionContextImpl(getDataDictionary().getDatabaseDescriptor(dbName, getTransactionCompile()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE4NDk0Nw=="}, "originalCommit": {"oid": "5590a7c561423e1551c9e070ba6c08790ebb4078"}, "originalPosition": 334}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMDUyOTg4OnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/dictionary/DatabaseDescriptor.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNDo0MToxMVrOHorMpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNjo0NjoyOFrOHqlFUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQxMjgzOA==", "bodyText": "It is not clear to me what behavior we should support when the default database in the connection is dropped. Right now, after dropping the default database in a connection, we still allow new schema to be created, but using the database id that has been dropped, thus creating dangling schemas:\nsplice> create database test_db;\n0 rows inserted/updated/deleted\nELAPSED TIME = 18 milliseconds\nsplice> connect 'jdbc:splice://localhost:1527/test_db;user=splice;password=admin' as testdb_con;\nELAPSED TIME = 18 milliseconds\nsplice> show schemas;\nTABLE_SCHEM                   \n------------------------------\nSPLICE                        \nSYS                           \nSYSFUN                        \nSYSIBM                        \nSYSIBMADM                     \nSYSVW                         \n\n6 rows selected\nELAPSED TIME = 19 milliseconds\nsplice> set connection splice;\nELAPSED TIME = 0 milliseconds\nsplice> select * from sys.sysdatabases;\nDATABASEID                          |DATABASENAME                                                                                                                    |AUTHORIZATIONID                                                                                                                 \n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\necec0361-0175-66e7-a8b7-000001040c80|TEST_DB                                                                                                                         |PLACEHOLDER                                                                                                                     \na816c00e-0175-66e7-a8b7-000001040c80|SPLICEDB                                                                                                                        |PLACEHOLDER                                                                                                                     \n\n2 rows selected\nELAPSED TIME = 8 milliseconds\nsplice> drop database test_db restrict;\n0 rows inserted/updated/deleted\nELAPSED TIME = 46 milliseconds\nsplice> set connection testdb_con;\nELAPSED TIME = 0 milliseconds\nsplice> create schema test_sch;\n0 rows inserted/updated/deleted\nELAPSED TIME = 29 milliseconds\nsplice> show schemas;\nTABLE_SCHEM                   \n------------------------------\nSYS                           \nSYSFUN                        \nSYSIBM                        \nSYSIBMADM                     \nSYSVW                         \n\n5 rows selected\nELAPSED TIME = 15 milliseconds\nsplice> select * from sys.sysschemas;\nSCHEMAID                            |SCHEMANAME                                                                                                                      |AUTHORIZATIONID                                                                                                                 |DATABASEID                          \n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n2a534337-0175-66e7-a8b7-000001040c80|TEMP                                                                                                                            |SPLICE                                                                                                                          |a816c00e-0175-66e7-a8b7-000001040c80\nbde2434f-0175-66e7-a8b7-000001040c80|TEMP2                                                                                                                           |SPLICE                                                                                                                          |2cd98344-0175-66e7-a8b7-000001040c80\nd8d6436f-0175-66e7-a8b7-000001040c80|TEST_SCH                                                                                                                        |SPLICE                                                                                                                          |ecec0361-0175-66e7-a8b7-000001040c80\nc013800d-00f8-5b53-28a9-00000019ed88|SYSIBM                                                                                                                          |SPLICE                                                                                                                          |a816c00e-0175-66e7-a8b7-000001040c80\n62bfdcdb-ea53-4339-bd1b-018e411b8852|SYSIBMADM                                                                                                                       |SPLICE                                                                                                                          |a816c00e-0175-66e7-a8b7-000001040c80\n8000000d-00d0-fd77-3ed8-000a0a0b1900|SYS                                                                                                                             |SPLICE                                                                                                                          |a816c00e-0175-66e7-a8b7-000001040c80\nc013800d-00fb-2641-07ec-000000134f30|SYSCAT                                                                                                                          |SPLICE                                                                                                                          |a816c00e-0175-66e7-a8b7-000001040c80\nc013800d-00fb-2642-07ec-000000134f30|SYSFUN                                                                                                                          |SPLICE                                                                                                                          |a816c00e-0175-66e7-a8b7-000001040c80\nc013800d-00fb-2643-07ec-000000134f30|SYSPROC                                                                                                                         |SPLICE                                                                                                                          |a816c00e-0175-66e7-a8b7-000001040c80\nc013800d-00fb-2644-07ec-000000134f30|SYSSTAT                                                                                                                         |SPLICE                                                                                                                          |a816c00e-0175-66e7-a8b7-000001040c80\nc013800d-00fb-2647-07ec-000000134f30|NULLID                                                                                                                          |SPLICE                                                                                                                          |a816c00e-0175-66e7-a8b7-000001040c80\nc013800d-00fb-2648-07ec-000000134f30|SQLJ                                                                                                                            |SPLICE                                                                                                                          |a816c00e-0175-66e7-a8b7-000001040c80\nc013800d-00fb-2646-07ec-000000134f30|SYSCS_DIAG                                                                                                                      |SPLICE                                                                                                                          |a816c00e-0175-66e7-a8b7-000001040c80\nc013800d-00fb-2649-07ec-000000134f30|SYSCS_UTIL                                                                                                                      |SPLICE                                                                                                                          |a816c00e-0175-66e7-a8b7-000001040c80\nc013800d-00fb-264d-07ec-000000134f30|SYSVW                                                                                                                           |SPLICE                                                                                                                          |a816c00e-0175-66e7-a8b7-000001040c80\n80000000-00d2-b38f-4cda-000a0a412c00|SPLICE                                                                                                                          |SPLICE                                                                                                                          |a816c00e-0175-66e7-a8b7-000001040c80\n\n16 rows selected\nELAPSED TIME = 28 milliseconds\n\nAs we can see, the schema test_sch 's database id is still pointing to ecec0361-0175-66e7-a8b7-000001040c80, which is the database id of test_db.", "url": "https://github.com/splicemachine/spliceengine/pull/4240#discussion_r512412838", "createdAt": "2020-10-27T04:41:11Z", "author": {"login": "yxia92"}, "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/dictionary/DatabaseDescriptor.java", "diffHunk": "@@ -265,4 +272,50 @@ public void writeExternal(ObjectOutput output) throws IOException {\n     public void setDataDictionary(DataDictionary dataDictionary) {\n         this.dataDictionary = dataDictionary;\n     }\n+\n+    /**\n+     * Drop this database.\n+     * Drops the database if it is empty.\n+     * @throws StandardException Schema could not be dropped.\n+     */\n+    public void drop(LanguageConnectionContext lcc,\n+                     Activation activation) throws StandardException\n+    {\n+        DataDictionary dd = getDataDictionary();\n+        DependencyManager dm = dd.getDependencyManager();\n+        TransactionController tc = lcc.getTransactionExecute();\n+\n+        // First drop restrict the default SPLICE schema:\n+        SchemaDescriptor spliceSchemaDesc = dd.getSchemaDescriptor(getUUID(), Property.DEFAULT_USER_NAME, tc, false);\n+        if (spliceSchemaDesc != null) {\n+            spliceSchemaDesc.drop(lcc, activation);\n+        }\n+\n+        /*\n+         ** Make sure the database is empty.\n+         ** In the future we want to drop everything\n+         ** in the database if it is CASCADE.\n+         */\n+        if (!dd.isDatabaseEmpty(this))\n+        {\n+            throw StandardException.newException(SQLState.LANG_DATABASE_NOT_EMPTY, getDatabaseName());\n+        }\n+\n+        /* Prepare all dependents to invalidate.  (This is there chance\n+         * to say that they can't be invalidated.  For example, an open\n+         * cursor referencing a table/view that the user is attempting to\n+         * drop.) If no one objects, then invalidate any dependent objects.\n+         */\n+        dm.invalidateFor(this, DependencyManager.DROP_DATABASE, lcc);\n+\n+        dd.dropDatabaseDescriptor(getDatabaseName(), tc);\n+\n+        /*\n+         ** If we have dropped the current default databae,\n+         ** then we will set the default to null.  The\n+         ** LCC is free to set the new default database to\n+         ** some system defined default.\n+         */\n+        // lcc.resetSchemaUsages(activation, getDatabaseName()); XXX (arnaud multidb) implement that?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4bce1729192e3e6018463a02d26e83052788b95"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQxNTYxMQ==", "bodyText": "We should check the existence of the database before creating the schema, so that dangling schemas can be avoided.", "url": "https://github.com/splicemachine/spliceengine/pull/4240#discussion_r512415611", "createdAt": "2020-10-27T04:52:33Z", "author": {"login": "yxia92"}, "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/dictionary/DatabaseDescriptor.java", "diffHunk": "@@ -265,4 +272,50 @@ public void writeExternal(ObjectOutput output) throws IOException {\n     public void setDataDictionary(DataDictionary dataDictionary) {\n         this.dataDictionary = dataDictionary;\n     }\n+\n+    /**\n+     * Drop this database.\n+     * Drops the database if it is empty.\n+     * @throws StandardException Schema could not be dropped.\n+     */\n+    public void drop(LanguageConnectionContext lcc,\n+                     Activation activation) throws StandardException\n+    {\n+        DataDictionary dd = getDataDictionary();\n+        DependencyManager dm = dd.getDependencyManager();\n+        TransactionController tc = lcc.getTransactionExecute();\n+\n+        // First drop restrict the default SPLICE schema:\n+        SchemaDescriptor spliceSchemaDesc = dd.getSchemaDescriptor(getUUID(), Property.DEFAULT_USER_NAME, tc, false);\n+        if (spliceSchemaDesc != null) {\n+            spliceSchemaDesc.drop(lcc, activation);\n+        }\n+\n+        /*\n+         ** Make sure the database is empty.\n+         ** In the future we want to drop everything\n+         ** in the database if it is CASCADE.\n+         */\n+        if (!dd.isDatabaseEmpty(this))\n+        {\n+            throw StandardException.newException(SQLState.LANG_DATABASE_NOT_EMPTY, getDatabaseName());\n+        }\n+\n+        /* Prepare all dependents to invalidate.  (This is there chance\n+         * to say that they can't be invalidated.  For example, an open\n+         * cursor referencing a table/view that the user is attempting to\n+         * drop.) If no one objects, then invalidate any dependent objects.\n+         */\n+        dm.invalidateFor(this, DependencyManager.DROP_DATABASE, lcc);\n+\n+        dd.dropDatabaseDescriptor(getDatabaseName(), tc);\n+\n+        /*\n+         ** If we have dropped the current default databae,\n+         ** then we will set the default to null.  The\n+         ** LCC is free to set the new default database to\n+         ** some system defined default.\n+         */\n+        // lcc.resetSchemaUsages(activation, getDatabaseName()); XXX (arnaud multidb) implement that?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQxMjgzOA=="}, "originalCommit": {"oid": "f4bce1729192e3e6018463a02d26e83052788b95"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjgzMDIxNg==", "bodyText": "That's a very good point, thanks!\nIs it alright with you if I jira that for later?", "url": "https://github.com/splicemachine/spliceengine/pull/4240#discussion_r512830216", "createdAt": "2020-10-27T16:13:15Z", "author": {"login": "arnaud-splice"}, "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/dictionary/DatabaseDescriptor.java", "diffHunk": "@@ -265,4 +272,50 @@ public void writeExternal(ObjectOutput output) throws IOException {\n     public void setDataDictionary(DataDictionary dataDictionary) {\n         this.dataDictionary = dataDictionary;\n     }\n+\n+    /**\n+     * Drop this database.\n+     * Drops the database if it is empty.\n+     * @throws StandardException Schema could not be dropped.\n+     */\n+    public void drop(LanguageConnectionContext lcc,\n+                     Activation activation) throws StandardException\n+    {\n+        DataDictionary dd = getDataDictionary();\n+        DependencyManager dm = dd.getDependencyManager();\n+        TransactionController tc = lcc.getTransactionExecute();\n+\n+        // First drop restrict the default SPLICE schema:\n+        SchemaDescriptor spliceSchemaDesc = dd.getSchemaDescriptor(getUUID(), Property.DEFAULT_USER_NAME, tc, false);\n+        if (spliceSchemaDesc != null) {\n+            spliceSchemaDesc.drop(lcc, activation);\n+        }\n+\n+        /*\n+         ** Make sure the database is empty.\n+         ** In the future we want to drop everything\n+         ** in the database if it is CASCADE.\n+         */\n+        if (!dd.isDatabaseEmpty(this))\n+        {\n+            throw StandardException.newException(SQLState.LANG_DATABASE_NOT_EMPTY, getDatabaseName());\n+        }\n+\n+        /* Prepare all dependents to invalidate.  (This is there chance\n+         * to say that they can't be invalidated.  For example, an open\n+         * cursor referencing a table/view that the user is attempting to\n+         * drop.) If no one objects, then invalidate any dependent objects.\n+         */\n+        dm.invalidateFor(this, DependencyManager.DROP_DATABASE, lcc);\n+\n+        dd.dropDatabaseDescriptor(getDatabaseName(), tc);\n+\n+        /*\n+         ** If we have dropped the current default databae,\n+         ** then we will set the default to null.  The\n+         ** LCC is free to set the new default database to\n+         ** some system defined default.\n+         */\n+        // lcc.resetSchemaUsages(activation, getDatabaseName()); XXX (arnaud multidb) implement that?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQxMjgzOA=="}, "originalCommit": {"oid": "f4bce1729192e3e6018463a02d26e83052788b95"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA0NjA5Nw==", "bodyText": "A JIRA to track is fine. Thanks!", "url": "https://github.com/splicemachine/spliceengine/pull/4240#discussion_r513046097", "createdAt": "2020-10-27T21:33:36Z", "author": {"login": "yxia92"}, "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/dictionary/DatabaseDescriptor.java", "diffHunk": "@@ -265,4 +272,50 @@ public void writeExternal(ObjectOutput output) throws IOException {\n     public void setDataDictionary(DataDictionary dataDictionary) {\n         this.dataDictionary = dataDictionary;\n     }\n+\n+    /**\n+     * Drop this database.\n+     * Drops the database if it is empty.\n+     * @throws StandardException Schema could not be dropped.\n+     */\n+    public void drop(LanguageConnectionContext lcc,\n+                     Activation activation) throws StandardException\n+    {\n+        DataDictionary dd = getDataDictionary();\n+        DependencyManager dm = dd.getDependencyManager();\n+        TransactionController tc = lcc.getTransactionExecute();\n+\n+        // First drop restrict the default SPLICE schema:\n+        SchemaDescriptor spliceSchemaDesc = dd.getSchemaDescriptor(getUUID(), Property.DEFAULT_USER_NAME, tc, false);\n+        if (spliceSchemaDesc != null) {\n+            spliceSchemaDesc.drop(lcc, activation);\n+        }\n+\n+        /*\n+         ** Make sure the database is empty.\n+         ** In the future we want to drop everything\n+         ** in the database if it is CASCADE.\n+         */\n+        if (!dd.isDatabaseEmpty(this))\n+        {\n+            throw StandardException.newException(SQLState.LANG_DATABASE_NOT_EMPTY, getDatabaseName());\n+        }\n+\n+        /* Prepare all dependents to invalidate.  (This is there chance\n+         * to say that they can't be invalidated.  For example, an open\n+         * cursor referencing a table/view that the user is attempting to\n+         * drop.) If no one objects, then invalidate any dependent objects.\n+         */\n+        dm.invalidateFor(this, DependencyManager.DROP_DATABASE, lcc);\n+\n+        dd.dropDatabaseDescriptor(getDatabaseName(), tc);\n+\n+        /*\n+         ** If we have dropped the current default databae,\n+         ** then we will set the default to null.  The\n+         ** LCC is free to set the new default database to\n+         ** some system defined default.\n+         */\n+        // lcc.resetSchemaUsages(activation, getDatabaseName()); XXX (arnaud multidb) implement that?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQxMjgzOA=="}, "originalCommit": {"oid": "f4bce1729192e3e6018463a02d26e83052788b95"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQwOTgwOQ==", "bodyText": "Tracked by DB-10591", "url": "https://github.com/splicemachine/spliceengine/pull/4240#discussion_r514409809", "createdAt": "2020-10-29T16:46:28Z", "author": {"login": "arnaud-splice"}, "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/dictionary/DatabaseDescriptor.java", "diffHunk": "@@ -265,4 +272,50 @@ public void writeExternal(ObjectOutput output) throws IOException {\n     public void setDataDictionary(DataDictionary dataDictionary) {\n         this.dataDictionary = dataDictionary;\n     }\n+\n+    /**\n+     * Drop this database.\n+     * Drops the database if it is empty.\n+     * @throws StandardException Schema could not be dropped.\n+     */\n+    public void drop(LanguageConnectionContext lcc,\n+                     Activation activation) throws StandardException\n+    {\n+        DataDictionary dd = getDataDictionary();\n+        DependencyManager dm = dd.getDependencyManager();\n+        TransactionController tc = lcc.getTransactionExecute();\n+\n+        // First drop restrict the default SPLICE schema:\n+        SchemaDescriptor spliceSchemaDesc = dd.getSchemaDescriptor(getUUID(), Property.DEFAULT_USER_NAME, tc, false);\n+        if (spliceSchemaDesc != null) {\n+            spliceSchemaDesc.drop(lcc, activation);\n+        }\n+\n+        /*\n+         ** Make sure the database is empty.\n+         ** In the future we want to drop everything\n+         ** in the database if it is CASCADE.\n+         */\n+        if (!dd.isDatabaseEmpty(this))\n+        {\n+            throw StandardException.newException(SQLState.LANG_DATABASE_NOT_EMPTY, getDatabaseName());\n+        }\n+\n+        /* Prepare all dependents to invalidate.  (This is there chance\n+         * to say that they can't be invalidated.  For example, an open\n+         * cursor referencing a table/view that the user is attempting to\n+         * drop.) If no one objects, then invalidate any dependent objects.\n+         */\n+        dm.invalidateFor(this, DependencyManager.DROP_DATABASE, lcc);\n+\n+        dd.dropDatabaseDescriptor(getDatabaseName(), tc);\n+\n+        /*\n+         ** If we have dropped the current default databae,\n+         ** then we will set the default to null.  The\n+         ** LCC is free to set the new default database to\n+         ** some system defined default.\n+         */\n+        // lcc.resetSchemaUsages(activation, getDatabaseName()); XXX (arnaud multidb) implement that?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQxMjgzOA=="}, "originalCommit": {"oid": "f4bce1729192e3e6018463a02d26e83052788b95"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2954, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}