{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0MTQ2MzMw", "number": 2125, "title": "Standardization of Tag and Flavor handling", "bodyText": "This PR is a first draft for #1157. I added a method getTagsAndFlavors(enum: srcTags, enum: srcFlavors, enum: targetTags, enum: tagretFlavors) in the AbstractWorkflowOperationHandler. One can specify to read none, one or many of each tag/flavor type. So for example: nothing, \"source-tag\" or \"source-tags\" will be parsed depending on the configuration of enum: srcTags. Flavors will also be checked for validity.\nA ConfiguredTagsAndFlavors object will be returned. I added this class to store a seperate List for each of the specified tags/flavors. It includes simple getter methods to access the values.\nI also exemplary changed the  AnalyzeAudioWOH, AnalyzeTracksWOH and CoverImageWOH, using the new implemented method.\nIf this solution is alright, I will adjust all the WOHs. Feedback appreciated!\nYour pull request should\u2026\n\n have a concise title\n close an accompanying issue if one exists\n be against the correct branch (features can only go into develop)\n include migration scripts and documentation, if appropriate\n pass automated tests\n have a clean commit history\n have proper commit messages (title and body) for all commits", "createdAt": "2020-12-08T06:01:37Z", "url": "https://github.com/opencast/opencast/pull/2125", "merged": true, "mergeCommit": {"oid": "d9e7b28afeda56773dba5e383e0281587e6560e4"}, "closed": true, "closedAt": "2021-05-13T22:20:03Z", "author": {"login": "jduehring"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdgdvzEAH2gAyNTM0MTQ2MzMwOjkzNDZkYTRlMTQ1ODE2OWI0ZmRmMzBhYjhkNTE4MzRkYjM2OTMzZDU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABePbazfAH2gAyNTM0MTQ2MzMwOjYxMjJkNGYzZDhlZGVhNDg2N2FmMmQ4ZWRjMjU3ZWIzY2RjNzg3MmM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9346da4e1458169b4fdf30ab8d51834db36933d5", "author": {"user": null}, "url": "https://github.com/opencast/opencast/commit/9346da4e1458169b4fdf30ab8d51834db36933d5", "committedDate": "2020-11-27T02:02:16Z", "message": "basic functionality"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d68aa9de6dfdad2a2983affe1ae2f564f67dbb0f", "author": {"user": null}, "url": "https://github.com/opencast/opencast/commit/d68aa9de6dfdad2a2983affe1ae2f564f67dbb0f", "committedDate": "2020-12-02T15:36:13Z", "message": "Merge branch 'develop' of github.com:opencast/opencast into TagHandling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c83f53a9512fa4d315bb0aacedace82362e2ff7c", "author": {"user": null}, "url": "https://github.com/opencast/opencast/commit/c83f53a9512fa4d315bb0aacedace82362e2ff7c", "committedDate": "2020-12-07T13:29:32Z", "message": "Merge remote-tracking branch 'upstream/develop' into TagHandling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f3e63b60a029d31116278f14e3ff0a0d4e4643a", "author": {"user": null}, "url": "https://github.com/opencast/opencast/commit/5f3e63b60a029d31116278f14e3ff0a0d4e4643a", "committedDate": "2020-12-08T05:24:55Z", "message": "finished functionality for TagHandling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b58cd95933525a861deb17fa56fb78274bdd025", "author": {"user": null}, "url": "https://github.com/opencast/opencast/commit/7b58cd95933525a861deb17fa56fb78274bdd025", "committedDate": "2020-12-08T05:26:34Z", "message": "implemented exemplary changes for three WOHs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3Mjk0MDkz", "url": "https://github.com/opencast/opencast/pull/2125#pullrequestreview-557294093", "createdAt": "2020-12-22T18:50:34Z", "commit": {"oid": "7b58cd95933525a861deb17fa56fb78274bdd025"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxODo1MDozNFrOIKFfcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxOToxMzowNVrOIKGGqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ0NjY0Mw==", "bodyText": "It's often okay to have no tags defined (e.g. if you specify a flavor).\nWarning about this indicates that there is something wrong.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (srcFlavorList.isEmpty()) {\n          \n          \n            \n                      logger.warn(\"Configuration keys '\" + SOURCE_FLAVORS + \"and\" + SOURCE_FLAVOR + \"' are empty\");", "url": "https://github.com/opencast/opencast/pull/2125#discussion_r547446643", "createdAt": "2020-12-22T18:50:34Z", "author": {"login": "lkiesow"}, "path": "modules/workflow-service-api/src/main/java/org/opencastproject/workflow/api/AbstractWorkflowOperationHandler.java", "diffHunk": "@@ -360,6 +378,160 @@ protected String getConfig(WorkflowOperationInstance woi, String key) throws Wor\n     return Opt.nul(woi.getConfiguration(key)).flatMap(Strings.trimToNone);\n   }\n \n+  /**\n+   * Returns a ConfiguredTagsAndFlavors instance, which includes all specified source/target tags and flavors if they are valid\n+   * Lists can be empty, if no values were specified! This is to enable WOHs to individually check if a given tag/flavor was set.\n+   * @param srcTags none, one or many\n+   * @param srcFlavors none, one or many\n+   * @param targetFlavors none, one or many\n+   * @param targetTags none, one or many\n+   * @return ConfiguredTagsAndFlavors object including lists for the configured tags/flavors\n+   */\n+  protected ConfiguredTagsAndFlavors getTagsAndFlavors(WorkflowInstance wi, Configuration srcTags, Configuration srcFlavors, Configuration targetTags, Configuration targetFlavors) throws WorkflowOperationException {\n+    WorkflowOperationInstance woi = wi.getCurrentOperation();\n+    ConfiguredTagsAndFlavors tagsAndFlavors = new ConfiguredTagsAndFlavors();\n+    MediaPackageElementFlavor flavor;\n+\n+    List<String> srcTagList = new ArrayList<>();\n+    String srcTag;\n+    switch(srcTags) {\n+      case none:\n+        break;\n+      case one:\n+        srcTag = StringUtils.trimToNull(woi.getConfiguration(SOURCE_TAG));\n+        if (srcTag == null) {\n+          throw new WorkflowOperationException(\"Configuration key '\" + SOURCE_TAG + \"' must be set\");\n+        } else {\n+          srcTagList.add(srcTag);\n+        }\n+        break;\n+      case many:\n+        srcTagList = asList(StringUtils.trimToNull(woi.getConfiguration(SOURCE_TAGS)));\n+        srcTag = StringUtils.trimToNull(woi.getConfiguration(SOURCE_TAG));\n+        if (srcTagList.isEmpty() && srcTag != null) {\n+          srcTagList.add(srcTag);\n+        }\n+        if (srcTagList.isEmpty()) {\n+          logger.warn(\"Configuration keys '\" + SOURCE_TAGS + \"and\" + SOURCE_TAG + \"' are empty\");\n+        }\n+        break;\n+      default:\n+        throw new WorkflowOperationException(\"Couldn't process srcTags configuration option!\");\n+    }\n+    tagsAndFlavors.setSrcTags(srcTagList);\n+\n+    List<String> srcFlavorList = new ArrayList<>();\n+    String sourceFlavor;\n+    switch(srcFlavors) {\n+      case none:\n+        break;\n+      case one:\n+        sourceFlavor = StringUtils.trimToNull(woi.getConfiguration(SOURCE_FLAVOR));\n+        if (sourceFlavor == null) {\n+          throw new WorkflowOperationException(\"Configuration key '\" + SOURCE_FLAVOR + \"' must be set\");\n+        } else {\n+          srcFlavorList.add(sourceFlavor);\n+          try {\n+            flavor = MediaPackageElementFlavor.parseFlavor(srcFlavorList.get(0));\n+          } catch (IllegalArgumentException e) {\n+            throw new WorkflowOperationException(srcFlavorList.get(0) + \" is not a valid flavor!\");\n+          }\n+        }\n+        break;\n+      case many:\n+        srcFlavorList = asList(StringUtils.trimToNull(woi.getConfiguration(SOURCE_FLAVORS)));\n+        sourceFlavor = StringUtils.trimToNull(woi.getConfiguration(SOURCE_FLAVOR));\n+        if (srcFlavorList.isEmpty() && sourceFlavor != null) {\n+          srcFlavorList.add(sourceFlavor);\n+        }\n+        if (srcFlavorList.isEmpty()) {\n+          logger.warn(\"Configuration keys '\" + SOURCE_FLAVORS + \"and\" + SOURCE_FLAVOR + \"' are empty\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b58cd95933525a861deb17fa56fb78274bdd025"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ0NzIwNw==", "bodyText": "No need to check if the list is empty. It won't loop over anything if it is.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } else {\n          \n          \n            \n                      for (String elem : srcFlavorList) {\n          \n          \n            \n                        try {\n          \n          \n            \n                          flavor = MediaPackageElementFlavor.parseFlavor(elem);\n          \n          \n            \n                        } catch (IllegalArgumentException e) {\n          \n          \n            \n                          throw new WorkflowOperationException(elem + \" is not a valid flavor!\");\n          \n          \n            \n                        }\n          \n          \n            \n                      }\n          \n          \n            \n                    }\n          \n          \n            \n                    for (String elem : srcFlavorList) {\n          \n          \n            \n                      try {\n          \n          \n            \n                        flavor = MediaPackageElementFlavor.parseFlavor(elem);\n          \n          \n            \n                      } catch (IllegalArgumentException e) {\n          \n          \n            \n                        throw new WorkflowOperationException(elem + \" is not a valid flavor!\");\n          \n          \n            \n                      }\n          \n          \n            \n                    }", "url": "https://github.com/opencast/opencast/pull/2125#discussion_r547447207", "createdAt": "2020-12-22T18:51:45Z", "author": {"login": "lkiesow"}, "path": "modules/workflow-service-api/src/main/java/org/opencastproject/workflow/api/AbstractWorkflowOperationHandler.java", "diffHunk": "@@ -360,6 +378,160 @@ protected String getConfig(WorkflowOperationInstance woi, String key) throws Wor\n     return Opt.nul(woi.getConfiguration(key)).flatMap(Strings.trimToNone);\n   }\n \n+  /**\n+   * Returns a ConfiguredTagsAndFlavors instance, which includes all specified source/target tags and flavors if they are valid\n+   * Lists can be empty, if no values were specified! This is to enable WOHs to individually check if a given tag/flavor was set.\n+   * @param srcTags none, one or many\n+   * @param srcFlavors none, one or many\n+   * @param targetFlavors none, one or many\n+   * @param targetTags none, one or many\n+   * @return ConfiguredTagsAndFlavors object including lists for the configured tags/flavors\n+   */\n+  protected ConfiguredTagsAndFlavors getTagsAndFlavors(WorkflowInstance wi, Configuration srcTags, Configuration srcFlavors, Configuration targetTags, Configuration targetFlavors) throws WorkflowOperationException {\n+    WorkflowOperationInstance woi = wi.getCurrentOperation();\n+    ConfiguredTagsAndFlavors tagsAndFlavors = new ConfiguredTagsAndFlavors();\n+    MediaPackageElementFlavor flavor;\n+\n+    List<String> srcTagList = new ArrayList<>();\n+    String srcTag;\n+    switch(srcTags) {\n+      case none:\n+        break;\n+      case one:\n+        srcTag = StringUtils.trimToNull(woi.getConfiguration(SOURCE_TAG));\n+        if (srcTag == null) {\n+          throw new WorkflowOperationException(\"Configuration key '\" + SOURCE_TAG + \"' must be set\");\n+        } else {\n+          srcTagList.add(srcTag);\n+        }\n+        break;\n+      case many:\n+        srcTagList = asList(StringUtils.trimToNull(woi.getConfiguration(SOURCE_TAGS)));\n+        srcTag = StringUtils.trimToNull(woi.getConfiguration(SOURCE_TAG));\n+        if (srcTagList.isEmpty() && srcTag != null) {\n+          srcTagList.add(srcTag);\n+        }\n+        if (srcTagList.isEmpty()) {\n+          logger.warn(\"Configuration keys '\" + SOURCE_TAGS + \"and\" + SOURCE_TAG + \"' are empty\");\n+        }\n+        break;\n+      default:\n+        throw new WorkflowOperationException(\"Couldn't process srcTags configuration option!\");\n+    }\n+    tagsAndFlavors.setSrcTags(srcTagList);\n+\n+    List<String> srcFlavorList = new ArrayList<>();\n+    String sourceFlavor;\n+    switch(srcFlavors) {\n+      case none:\n+        break;\n+      case one:\n+        sourceFlavor = StringUtils.trimToNull(woi.getConfiguration(SOURCE_FLAVOR));\n+        if (sourceFlavor == null) {\n+          throw new WorkflowOperationException(\"Configuration key '\" + SOURCE_FLAVOR + \"' must be set\");\n+        } else {\n+          srcFlavorList.add(sourceFlavor);\n+          try {\n+            flavor = MediaPackageElementFlavor.parseFlavor(srcFlavorList.get(0));\n+          } catch (IllegalArgumentException e) {\n+            throw new WorkflowOperationException(srcFlavorList.get(0) + \" is not a valid flavor!\");\n+          }\n+        }\n+        break;\n+      case many:\n+        srcFlavorList = asList(StringUtils.trimToNull(woi.getConfiguration(SOURCE_FLAVORS)));\n+        sourceFlavor = StringUtils.trimToNull(woi.getConfiguration(SOURCE_FLAVOR));\n+        if (srcFlavorList.isEmpty() && sourceFlavor != null) {\n+          srcFlavorList.add(sourceFlavor);\n+        }\n+        if (srcFlavorList.isEmpty()) {\n+          logger.warn(\"Configuration keys '\" + SOURCE_FLAVORS + \"and\" + SOURCE_FLAVOR + \"' are empty\");\n+        } else {\n+          for (String elem : srcFlavorList) {\n+            try {\n+              flavor = MediaPackageElementFlavor.parseFlavor(elem);\n+            } catch (IllegalArgumentException e) {\n+              throw new WorkflowOperationException(elem + \" is not a valid flavor!\");\n+            }\n+          }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b58cd95933525a861deb17fa56fb78274bdd025"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ0Nzk5Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } else {\n          \n          \n            \n                      targetTagList.add(targetTag);\n          \n          \n            \n                    }\n          \n          \n            \n                    }\n          \n          \n            \n                    targetTagList.add(targetTag);", "url": "https://github.com/opencast/opencast/pull/2125#discussion_r547447992", "createdAt": "2020-12-22T18:53:36Z", "author": {"login": "lkiesow"}, "path": "modules/workflow-service-api/src/main/java/org/opencastproject/workflow/api/AbstractWorkflowOperationHandler.java", "diffHunk": "@@ -360,6 +378,160 @@ protected String getConfig(WorkflowOperationInstance woi, String key) throws Wor\n     return Opt.nul(woi.getConfiguration(key)).flatMap(Strings.trimToNone);\n   }\n \n+  /**\n+   * Returns a ConfiguredTagsAndFlavors instance, which includes all specified source/target tags and flavors if they are valid\n+   * Lists can be empty, if no values were specified! This is to enable WOHs to individually check if a given tag/flavor was set.\n+   * @param srcTags none, one or many\n+   * @param srcFlavors none, one or many\n+   * @param targetFlavors none, one or many\n+   * @param targetTags none, one or many\n+   * @return ConfiguredTagsAndFlavors object including lists for the configured tags/flavors\n+   */\n+  protected ConfiguredTagsAndFlavors getTagsAndFlavors(WorkflowInstance wi, Configuration srcTags, Configuration srcFlavors, Configuration targetTags, Configuration targetFlavors) throws WorkflowOperationException {\n+    WorkflowOperationInstance woi = wi.getCurrentOperation();\n+    ConfiguredTagsAndFlavors tagsAndFlavors = new ConfiguredTagsAndFlavors();\n+    MediaPackageElementFlavor flavor;\n+\n+    List<String> srcTagList = new ArrayList<>();\n+    String srcTag;\n+    switch(srcTags) {\n+      case none:\n+        break;\n+      case one:\n+        srcTag = StringUtils.trimToNull(woi.getConfiguration(SOURCE_TAG));\n+        if (srcTag == null) {\n+          throw new WorkflowOperationException(\"Configuration key '\" + SOURCE_TAG + \"' must be set\");\n+        } else {\n+          srcTagList.add(srcTag);\n+        }\n+        break;\n+      case many:\n+        srcTagList = asList(StringUtils.trimToNull(woi.getConfiguration(SOURCE_TAGS)));\n+        srcTag = StringUtils.trimToNull(woi.getConfiguration(SOURCE_TAG));\n+        if (srcTagList.isEmpty() && srcTag != null) {\n+          srcTagList.add(srcTag);\n+        }\n+        if (srcTagList.isEmpty()) {\n+          logger.warn(\"Configuration keys '\" + SOURCE_TAGS + \"and\" + SOURCE_TAG + \"' are empty\");\n+        }\n+        break;\n+      default:\n+        throw new WorkflowOperationException(\"Couldn't process srcTags configuration option!\");\n+    }\n+    tagsAndFlavors.setSrcTags(srcTagList);\n+\n+    List<String> srcFlavorList = new ArrayList<>();\n+    String sourceFlavor;\n+    switch(srcFlavors) {\n+      case none:\n+        break;\n+      case one:\n+        sourceFlavor = StringUtils.trimToNull(woi.getConfiguration(SOURCE_FLAVOR));\n+        if (sourceFlavor == null) {\n+          throw new WorkflowOperationException(\"Configuration key '\" + SOURCE_FLAVOR + \"' must be set\");\n+        } else {\n+          srcFlavorList.add(sourceFlavor);\n+          try {\n+            flavor = MediaPackageElementFlavor.parseFlavor(srcFlavorList.get(0));\n+          } catch (IllegalArgumentException e) {\n+            throw new WorkflowOperationException(srcFlavorList.get(0) + \" is not a valid flavor!\");\n+          }\n+        }\n+        break;\n+      case many:\n+        srcFlavorList = asList(StringUtils.trimToNull(woi.getConfiguration(SOURCE_FLAVORS)));\n+        sourceFlavor = StringUtils.trimToNull(woi.getConfiguration(SOURCE_FLAVOR));\n+        if (srcFlavorList.isEmpty() && sourceFlavor != null) {\n+          srcFlavorList.add(sourceFlavor);\n+        }\n+        if (srcFlavorList.isEmpty()) {\n+          logger.warn(\"Configuration keys '\" + SOURCE_FLAVORS + \"and\" + SOURCE_FLAVOR + \"' are empty\");\n+        } else {\n+          for (String elem : srcFlavorList) {\n+            try {\n+              flavor = MediaPackageElementFlavor.parseFlavor(elem);\n+            } catch (IllegalArgumentException e) {\n+              throw new WorkflowOperationException(elem + \" is not a valid flavor!\");\n+            }\n+          }\n+        }\n+        break;\n+      default:\n+        throw new WorkflowOperationException(\"Couldn't process srcFlavors configuration option!\");\n+    }\n+    tagsAndFlavors.setSrcFlavors(srcFlavorList);\n+\n+    List<String> targetTagList = new ArrayList<>();\n+    String targetTag;\n+    switch(targetTags) {\n+      case none:\n+        break;\n+      case one:\n+        targetTag = StringUtils.trimToNull(woi.getConfiguration(TARGET_TAG));\n+        if (targetTag == null) {\n+          throw new WorkflowOperationException(\"Configuration key '\" + TARGET_TAG + \"' must be set\");\n+        } else {\n+          targetTagList.add(targetTag);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b58cd95933525a861deb17fa56fb78274bdd025"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ0ODIwMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (targetTagList.isEmpty()) {\n          \n          \n            \n                      logger.warn(\"Configuration keys '\" + TARGET_TAGS + \"and\" + TARGET_TAG + \"' are empty\");\n          \n          \n            \n                    }", "url": "https://github.com/opencast/opencast/pull/2125#discussion_r547448200", "createdAt": "2020-12-22T18:54:03Z", "author": {"login": "lkiesow"}, "path": "modules/workflow-service-api/src/main/java/org/opencastproject/workflow/api/AbstractWorkflowOperationHandler.java", "diffHunk": "@@ -360,6 +378,160 @@ protected String getConfig(WorkflowOperationInstance woi, String key) throws Wor\n     return Opt.nul(woi.getConfiguration(key)).flatMap(Strings.trimToNone);\n   }\n \n+  /**\n+   * Returns a ConfiguredTagsAndFlavors instance, which includes all specified source/target tags and flavors if they are valid\n+   * Lists can be empty, if no values were specified! This is to enable WOHs to individually check if a given tag/flavor was set.\n+   * @param srcTags none, one or many\n+   * @param srcFlavors none, one or many\n+   * @param targetFlavors none, one or many\n+   * @param targetTags none, one or many\n+   * @return ConfiguredTagsAndFlavors object including lists for the configured tags/flavors\n+   */\n+  protected ConfiguredTagsAndFlavors getTagsAndFlavors(WorkflowInstance wi, Configuration srcTags, Configuration srcFlavors, Configuration targetTags, Configuration targetFlavors) throws WorkflowOperationException {\n+    WorkflowOperationInstance woi = wi.getCurrentOperation();\n+    ConfiguredTagsAndFlavors tagsAndFlavors = new ConfiguredTagsAndFlavors();\n+    MediaPackageElementFlavor flavor;\n+\n+    List<String> srcTagList = new ArrayList<>();\n+    String srcTag;\n+    switch(srcTags) {\n+      case none:\n+        break;\n+      case one:\n+        srcTag = StringUtils.trimToNull(woi.getConfiguration(SOURCE_TAG));\n+        if (srcTag == null) {\n+          throw new WorkflowOperationException(\"Configuration key '\" + SOURCE_TAG + \"' must be set\");\n+        } else {\n+          srcTagList.add(srcTag);\n+        }\n+        break;\n+      case many:\n+        srcTagList = asList(StringUtils.trimToNull(woi.getConfiguration(SOURCE_TAGS)));\n+        srcTag = StringUtils.trimToNull(woi.getConfiguration(SOURCE_TAG));\n+        if (srcTagList.isEmpty() && srcTag != null) {\n+          srcTagList.add(srcTag);\n+        }\n+        if (srcTagList.isEmpty()) {\n+          logger.warn(\"Configuration keys '\" + SOURCE_TAGS + \"and\" + SOURCE_TAG + \"' are empty\");\n+        }\n+        break;\n+      default:\n+        throw new WorkflowOperationException(\"Couldn't process srcTags configuration option!\");\n+    }\n+    tagsAndFlavors.setSrcTags(srcTagList);\n+\n+    List<String> srcFlavorList = new ArrayList<>();\n+    String sourceFlavor;\n+    switch(srcFlavors) {\n+      case none:\n+        break;\n+      case one:\n+        sourceFlavor = StringUtils.trimToNull(woi.getConfiguration(SOURCE_FLAVOR));\n+        if (sourceFlavor == null) {\n+          throw new WorkflowOperationException(\"Configuration key '\" + SOURCE_FLAVOR + \"' must be set\");\n+        } else {\n+          srcFlavorList.add(sourceFlavor);\n+          try {\n+            flavor = MediaPackageElementFlavor.parseFlavor(srcFlavorList.get(0));\n+          } catch (IllegalArgumentException e) {\n+            throw new WorkflowOperationException(srcFlavorList.get(0) + \" is not a valid flavor!\");\n+          }\n+        }\n+        break;\n+      case many:\n+        srcFlavorList = asList(StringUtils.trimToNull(woi.getConfiguration(SOURCE_FLAVORS)));\n+        sourceFlavor = StringUtils.trimToNull(woi.getConfiguration(SOURCE_FLAVOR));\n+        if (srcFlavorList.isEmpty() && sourceFlavor != null) {\n+          srcFlavorList.add(sourceFlavor);\n+        }\n+        if (srcFlavorList.isEmpty()) {\n+          logger.warn(\"Configuration keys '\" + SOURCE_FLAVORS + \"and\" + SOURCE_FLAVOR + \"' are empty\");\n+        } else {\n+          for (String elem : srcFlavorList) {\n+            try {\n+              flavor = MediaPackageElementFlavor.parseFlavor(elem);\n+            } catch (IllegalArgumentException e) {\n+              throw new WorkflowOperationException(elem + \" is not a valid flavor!\");\n+            }\n+          }\n+        }\n+        break;\n+      default:\n+        throw new WorkflowOperationException(\"Couldn't process srcFlavors configuration option!\");\n+    }\n+    tagsAndFlavors.setSrcFlavors(srcFlavorList);\n+\n+    List<String> targetTagList = new ArrayList<>();\n+    String targetTag;\n+    switch(targetTags) {\n+      case none:\n+        break;\n+      case one:\n+        targetTag = StringUtils.trimToNull(woi.getConfiguration(TARGET_TAG));\n+        if (targetTag == null) {\n+          throw new WorkflowOperationException(\"Configuration key '\" + TARGET_TAG + \"' must be set\");\n+        } else {\n+          targetTagList.add(targetTag);\n+        }\n+        break;\n+      case many:\n+        targetTagList = asList(StringUtils.trimToNull(woi.getConfiguration(TARGET_TAGS)));\n+        targetTag = StringUtils.trimToNull(woi.getConfiguration(TARGET_TAG));\n+        if (targetTagList.isEmpty() && targetTag != null) {\n+          targetTagList.add(targetTag);\n+        }\n+        if (targetTagList.isEmpty()) {\n+          logger.warn(\"Configuration keys '\" + TARGET_TAGS + \"and\" + TARGET_TAG + \"' are empty\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b58cd95933525a861deb17fa56fb78274bdd025"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ0OTE3OA==", "bodyText": "We don't need to check plus you check targetTagList:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (targetTagList.isEmpty()) {\n          \n          \n            \n                      logger.warn(\"Configuration key '\" + TARGET_FLAVORS + \"and\" + TARGET_FLAVOR + \"' are empty\");\n          \n          \n            \n                    } else {\n          \n          \n            \n                      for (String elem : targetFlavorList) {\n          \n          \n            \n                        try {\n          \n          \n            \n                          flavor = MediaPackageElementFlavor.parseFlavor(elem);\n          \n          \n            \n                        } catch (IllegalArgumentException e) {\n          \n          \n            \n                          throw new WorkflowOperationException(elem + \" is not a valid flavor!\");\n          \n          \n            \n                        }\n          \n          \n            \n                      }\n          \n          \n            \n                    }\n          \n          \n            \n                    for (String elem : targetFlavorList) {\n          \n          \n            \n                      try {\n          \n          \n            \n                        flavor = MediaPackageElementFlavor.parseFlavor(elem);\n          \n          \n            \n                      } catch (IllegalArgumentException e) {\n          \n          \n            \n                        throw new WorkflowOperationException(elem + \" is not a valid flavor!\");\n          \n          \n            \n                      }\n          \n          \n            \n                    }", "url": "https://github.com/opencast/opencast/pull/2125#discussion_r547449178", "createdAt": "2020-12-22T18:56:11Z", "author": {"login": "lkiesow"}, "path": "modules/workflow-service-api/src/main/java/org/opencastproject/workflow/api/AbstractWorkflowOperationHandler.java", "diffHunk": "@@ -360,6 +378,160 @@ protected String getConfig(WorkflowOperationInstance woi, String key) throws Wor\n     return Opt.nul(woi.getConfiguration(key)).flatMap(Strings.trimToNone);\n   }\n \n+  /**\n+   * Returns a ConfiguredTagsAndFlavors instance, which includes all specified source/target tags and flavors if they are valid\n+   * Lists can be empty, if no values were specified! This is to enable WOHs to individually check if a given tag/flavor was set.\n+   * @param srcTags none, one or many\n+   * @param srcFlavors none, one or many\n+   * @param targetFlavors none, one or many\n+   * @param targetTags none, one or many\n+   * @return ConfiguredTagsAndFlavors object including lists for the configured tags/flavors\n+   */\n+  protected ConfiguredTagsAndFlavors getTagsAndFlavors(WorkflowInstance wi, Configuration srcTags, Configuration srcFlavors, Configuration targetTags, Configuration targetFlavors) throws WorkflowOperationException {\n+    WorkflowOperationInstance woi = wi.getCurrentOperation();\n+    ConfiguredTagsAndFlavors tagsAndFlavors = new ConfiguredTagsAndFlavors();\n+    MediaPackageElementFlavor flavor;\n+\n+    List<String> srcTagList = new ArrayList<>();\n+    String srcTag;\n+    switch(srcTags) {\n+      case none:\n+        break;\n+      case one:\n+        srcTag = StringUtils.trimToNull(woi.getConfiguration(SOURCE_TAG));\n+        if (srcTag == null) {\n+          throw new WorkflowOperationException(\"Configuration key '\" + SOURCE_TAG + \"' must be set\");\n+        } else {\n+          srcTagList.add(srcTag);\n+        }\n+        break;\n+      case many:\n+        srcTagList = asList(StringUtils.trimToNull(woi.getConfiguration(SOURCE_TAGS)));\n+        srcTag = StringUtils.trimToNull(woi.getConfiguration(SOURCE_TAG));\n+        if (srcTagList.isEmpty() && srcTag != null) {\n+          srcTagList.add(srcTag);\n+        }\n+        if (srcTagList.isEmpty()) {\n+          logger.warn(\"Configuration keys '\" + SOURCE_TAGS + \"and\" + SOURCE_TAG + \"' are empty\");\n+        }\n+        break;\n+      default:\n+        throw new WorkflowOperationException(\"Couldn't process srcTags configuration option!\");\n+    }\n+    tagsAndFlavors.setSrcTags(srcTagList);\n+\n+    List<String> srcFlavorList = new ArrayList<>();\n+    String sourceFlavor;\n+    switch(srcFlavors) {\n+      case none:\n+        break;\n+      case one:\n+        sourceFlavor = StringUtils.trimToNull(woi.getConfiguration(SOURCE_FLAVOR));\n+        if (sourceFlavor == null) {\n+          throw new WorkflowOperationException(\"Configuration key '\" + SOURCE_FLAVOR + \"' must be set\");\n+        } else {\n+          srcFlavorList.add(sourceFlavor);\n+          try {\n+            flavor = MediaPackageElementFlavor.parseFlavor(srcFlavorList.get(0));\n+          } catch (IllegalArgumentException e) {\n+            throw new WorkflowOperationException(srcFlavorList.get(0) + \" is not a valid flavor!\");\n+          }\n+        }\n+        break;\n+      case many:\n+        srcFlavorList = asList(StringUtils.trimToNull(woi.getConfiguration(SOURCE_FLAVORS)));\n+        sourceFlavor = StringUtils.trimToNull(woi.getConfiguration(SOURCE_FLAVOR));\n+        if (srcFlavorList.isEmpty() && sourceFlavor != null) {\n+          srcFlavorList.add(sourceFlavor);\n+        }\n+        if (srcFlavorList.isEmpty()) {\n+          logger.warn(\"Configuration keys '\" + SOURCE_FLAVORS + \"and\" + SOURCE_FLAVOR + \"' are empty\");\n+        } else {\n+          for (String elem : srcFlavorList) {\n+            try {\n+              flavor = MediaPackageElementFlavor.parseFlavor(elem);\n+            } catch (IllegalArgumentException e) {\n+              throw new WorkflowOperationException(elem + \" is not a valid flavor!\");\n+            }\n+          }\n+        }\n+        break;\n+      default:\n+        throw new WorkflowOperationException(\"Couldn't process srcFlavors configuration option!\");\n+    }\n+    tagsAndFlavors.setSrcFlavors(srcFlavorList);\n+\n+    List<String> targetTagList = new ArrayList<>();\n+    String targetTag;\n+    switch(targetTags) {\n+      case none:\n+        break;\n+      case one:\n+        targetTag = StringUtils.trimToNull(woi.getConfiguration(TARGET_TAG));\n+        if (targetTag == null) {\n+          throw new WorkflowOperationException(\"Configuration key '\" + TARGET_TAG + \"' must be set\");\n+        } else {\n+          targetTagList.add(targetTag);\n+        }\n+        break;\n+      case many:\n+        targetTagList = asList(StringUtils.trimToNull(woi.getConfiguration(TARGET_TAGS)));\n+        targetTag = StringUtils.trimToNull(woi.getConfiguration(TARGET_TAG));\n+        if (targetTagList.isEmpty() && targetTag != null) {\n+          targetTagList.add(targetTag);\n+        }\n+        if (targetTagList.isEmpty()) {\n+          logger.warn(\"Configuration keys '\" + TARGET_TAGS + \"and\" + TARGET_TAG + \"' are empty\");\n+        }\n+        break;\n+      default:\n+        throw new WorkflowOperationException(\"Couldn't process target-tag configuration option!\");\n+    }\n+    tagsAndFlavors.setTargetTags(targetTagList);\n+\n+    List<String> targetFlavorList = new ArrayList<>();\n+    String targetFlavor;\n+    switch(targetFlavors) {\n+      case none:\n+        break;\n+      case one:\n+        targetFlavor = StringUtils.trimToNull(woi.getConfiguration(TARGET_FLAVOR));\n+        if (targetFlavor == null) {\n+          throw new WorkflowOperationException(\"Configuration key '\" + TARGET_FLAVOR + \"' must be set\");\n+        } else {\n+          targetFlavorList.add(targetFlavor);\n+          try {\n+            flavor = MediaPackageElementFlavor.parseFlavor(targetFlavorList.get(0));\n+          } catch (IllegalArgumentException e) {\n+            throw new WorkflowOperationException(targetFlavorList.get(0) + \" is not a valid flavor!\");\n+          }\n+        }\n+        break;\n+      case many:\n+        targetFlavorList = asList(StringUtils.trimToNull(woi.getConfiguration(TARGET_FLAVORS)));\n+        targetFlavor = StringUtils.trimToNull(woi.getConfiguration(TARGET_FLAVOR));\n+        if (targetFlavorList.isEmpty() && targetFlavor != null) {\n+          targetFlavorList.add(targetFlavor);\n+        }\n+        if (targetTagList.isEmpty()) {\n+          logger.warn(\"Configuration key '\" + TARGET_FLAVORS + \"and\" + TARGET_FLAVOR + \"' are empty\");\n+        } else {\n+          for (String elem : targetFlavorList) {\n+            try {\n+              flavor = MediaPackageElementFlavor.parseFlavor(elem);\n+            } catch (IllegalArgumentException e) {\n+              throw new WorkflowOperationException(elem + \" is not a valid flavor!\");\n+            }\n+          }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b58cd95933525a861deb17fa56fb78274bdd025"}, "originalPosition": 195}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ1MDY1Nw==", "bodyText": "If you check all of these, wouldn't it make sense to actually check if one exists? Otherwise, you might have gotten two tags/flavors and more or less pick one randomly.", "url": "https://github.com/opencast/opencast/pull/2125#discussion_r547450657", "createdAt": "2020-12-22T18:59:20Z", "author": {"login": "lkiesow"}, "path": "modules/workflow-service-api/src/main/java/org/opencastproject/workflow/api/ConfiguredTagsAndFlavors.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/**\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ *\n+ * The Apereo Foundation licenses this file to you under the Educational\n+ * Community License, Version 2.0 (the \"License\"); you may not use this file\n+ * except in compliance with the License. You may obtain a copy of the License\n+ * at:\n+ *\n+ *   http://opensource.org/licenses/ecl2.txt\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+package org.opencastproject.workflow.api;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Class for Handling source/target tags and flavors.\n+ * Consists of four lists each containing a number of configured source/target tags and flavors.\n+ */\n+public class ConfiguredTagsAndFlavors {\n+\n+    private List<String> srcTags;\n+    private List<String> targetTags;\n+    private List<String> srcFlavors;\n+    private List<String> targetFlavors;\n+\n+    /** The logging facility */\n+    private static final Logger logger = LoggerFactory.getLogger(ConfiguredTagsAndFlavors.class);\n+\n+    protected ConfiguredTagsAndFlavors() {\n+        this.srcTags = new ArrayList<>();\n+        this.targetTags = new ArrayList<>();\n+        this.srcFlavors = new ArrayList<>();\n+        this.targetFlavors = new ArrayList<>();\n+    }\n+\n+    /**\n+     * Return all configured source-tags as a list\n+     */\n+    public List<String> getSrcTags() {\n+        return this.srcTags;\n+    }\n+\n+    /**\n+     * Return all configured target-tags as a list\n+     */\n+    public List<String> getTargetTags() {\n+        return this.targetTags;\n+    }\n+\n+    /**\n+     * Return all configured source-flavors as a list\n+     */\n+    public List<String> getSrcFlavors() {\n+        return this.srcFlavors;\n+    }\n+\n+    /**\n+     * Return all configured target-flavors as a list\n+     */\n+    public List<String> getTargetFlavors() {\n+        return this.targetFlavors;\n+    }\n+\n+    /**\n+     * Return a single source tag\n+     */\n+    public String getSingleSrcTag() {\n+        if (this.srcTags.isEmpty()) {\n+            throw new IllegalStateException(\"No source-tag was configured!\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b58cd95933525a861deb17fa56fb78274bdd025"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ1MTAxMw==", "bodyText": "same below\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    logger.info(\"Added \" + srcTags.size() + \" elements to srcTags list\");\n          \n          \n            \n                    logger.debug(\"Added \" + srcTags.size() + \" elements to srcTags list\");", "url": "https://github.com/opencast/opencast/pull/2125#discussion_r547451013", "createdAt": "2020-12-22T19:00:12Z", "author": {"login": "lkiesow"}, "path": "modules/workflow-service-api/src/main/java/org/opencastproject/workflow/api/ConfiguredTagsAndFlavors.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/**\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ *\n+ * The Apereo Foundation licenses this file to you under the Educational\n+ * Community License, Version 2.0 (the \"License\"); you may not use this file\n+ * except in compliance with the License. You may obtain a copy of the License\n+ * at:\n+ *\n+ *   http://opensource.org/licenses/ecl2.txt\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+package org.opencastproject.workflow.api;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Class for Handling source/target tags and flavors.\n+ * Consists of four lists each containing a number of configured source/target tags and flavors.\n+ */\n+public class ConfiguredTagsAndFlavors {\n+\n+    private List<String> srcTags;\n+    private List<String> targetTags;\n+    private List<String> srcFlavors;\n+    private List<String> targetFlavors;\n+\n+    /** The logging facility */\n+    private static final Logger logger = LoggerFactory.getLogger(ConfiguredTagsAndFlavors.class);\n+\n+    protected ConfiguredTagsAndFlavors() {\n+        this.srcTags = new ArrayList<>();\n+        this.targetTags = new ArrayList<>();\n+        this.srcFlavors = new ArrayList<>();\n+        this.targetFlavors = new ArrayList<>();\n+    }\n+\n+    /**\n+     * Return all configured source-tags as a list\n+     */\n+    public List<String> getSrcTags() {\n+        return this.srcTags;\n+    }\n+\n+    /**\n+     * Return all configured target-tags as a list\n+     */\n+    public List<String> getTargetTags() {\n+        return this.targetTags;\n+    }\n+\n+    /**\n+     * Return all configured source-flavors as a list\n+     */\n+    public List<String> getSrcFlavors() {\n+        return this.srcFlavors;\n+    }\n+\n+    /**\n+     * Return all configured target-flavors as a list\n+     */\n+    public List<String> getTargetFlavors() {\n+        return this.targetFlavors;\n+    }\n+\n+    /**\n+     * Return a single source tag\n+     */\n+    public String getSingleSrcTag() {\n+        if (this.srcTags.isEmpty()) {\n+            throw new IllegalStateException(\"No source-tag was configured!\");\n+        }\n+        return this.srcTags.get(0);\n+    }\n+\n+    /**\n+     * Return a single target tag\n+     */\n+    public String getSingleTargetTag() {\n+        if (this.targetTags.isEmpty()) {\n+            throw new IllegalStateException(\"No target-tag was configured!\");\n+        }\n+        return this.targetTags.get(0);\n+    }\n+\n+    /**\n+     * Return a single source flavor\n+     */\n+    public String getSingleSrcFlavor() {\n+        if (this.srcFlavors.isEmpty()) {\n+            throw new IllegalStateException(\"No source-flavor was configured!\");\n+        }\n+        return this.srcFlavors.get(0);\n+    }\n+\n+    /**\n+     * Return a single target flavor\n+     */\n+    public String getSingleTargetFlavor() {\n+        if (this.targetFlavors.isEmpty()) {\n+            throw new IllegalStateException(\"No target-flavor was configured!\");\n+        }\n+        return this.targetFlavors.get(0);\n+    }\n+\n+    /**\n+     * Setter for srcTags list\n+     */\n+    protected void setSrcTags(List<String> srcTags) {\n+        this.srcTags = srcTags;\n+        logger.info(\"Added \" + srcTags.size() + \" elements to srcTags list\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b58cd95933525a861deb17fa56fb78274bdd025"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ1MTkwMQ==", "bodyText": "Why also have the configuration in here. Your update is supposed to remove these I think.", "url": "https://github.com/opencast/opencast/pull/2125#discussion_r547451901", "createdAt": "2020-12-22T19:02:23Z", "author": {"login": "lkiesow"}, "path": "modules/workflow-workflowoperation/src/main/java/org/opencastproject/workflow/handler/workflow/AnalyzeTracksWorkflowOperationHandler.java", "diffHunk": "@@ -70,7 +71,8 @@ public WorkflowOperationResult start(WorkflowInstance workflowInstance, JobConte\n     final String sourceFlavor = getConfig(workflowInstance, OPT_SOURCE_FLAVOR);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b58cd95933525a861deb17fa56fb78274bdd025"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ1MzE4Mg==", "bodyText": "You parse all the flavors only to then ignore the flavor objects store strings in the targetFlavor array and later on parse them again in the operations. It would be far more efficient to store the flavor objects in the first place.", "url": "https://github.com/opencast/opencast/pull/2125#discussion_r547453182", "createdAt": "2020-12-22T19:05:12Z", "author": {"login": "lkiesow"}, "path": "modules/workflow-service-api/src/main/java/org/opencastproject/workflow/api/AbstractWorkflowOperationHandler.java", "diffHunk": "@@ -360,6 +378,160 @@ protected String getConfig(WorkflowOperationInstance woi, String key) throws Wor\n     return Opt.nul(woi.getConfiguration(key)).flatMap(Strings.trimToNone);\n   }\n \n+  /**\n+   * Returns a ConfiguredTagsAndFlavors instance, which includes all specified source/target tags and flavors if they are valid\n+   * Lists can be empty, if no values were specified! This is to enable WOHs to individually check if a given tag/flavor was set.\n+   * @param srcTags none, one or many\n+   * @param srcFlavors none, one or many\n+   * @param targetFlavors none, one or many\n+   * @param targetTags none, one or many\n+   * @return ConfiguredTagsAndFlavors object including lists for the configured tags/flavors\n+   */\n+  protected ConfiguredTagsAndFlavors getTagsAndFlavors(WorkflowInstance wi, Configuration srcTags, Configuration srcFlavors, Configuration targetTags, Configuration targetFlavors) throws WorkflowOperationException {\n+    WorkflowOperationInstance woi = wi.getCurrentOperation();\n+    ConfiguredTagsAndFlavors tagsAndFlavors = new ConfiguredTagsAndFlavors();\n+    MediaPackageElementFlavor flavor;\n+\n+    List<String> srcTagList = new ArrayList<>();\n+    String srcTag;\n+    switch(srcTags) {\n+      case none:\n+        break;\n+      case one:\n+        srcTag = StringUtils.trimToNull(woi.getConfiguration(SOURCE_TAG));\n+        if (srcTag == null) {\n+          throw new WorkflowOperationException(\"Configuration key '\" + SOURCE_TAG + \"' must be set\");\n+        } else {\n+          srcTagList.add(srcTag);\n+        }\n+        break;\n+      case many:\n+        srcTagList = asList(StringUtils.trimToNull(woi.getConfiguration(SOURCE_TAGS)));\n+        srcTag = StringUtils.trimToNull(woi.getConfiguration(SOURCE_TAG));\n+        if (srcTagList.isEmpty() && srcTag != null) {\n+          srcTagList.add(srcTag);\n+        }\n+        if (srcTagList.isEmpty()) {\n+          logger.warn(\"Configuration keys '\" + SOURCE_TAGS + \"and\" + SOURCE_TAG + \"' are empty\");\n+        }\n+        break;\n+      default:\n+        throw new WorkflowOperationException(\"Couldn't process srcTags configuration option!\");\n+    }\n+    tagsAndFlavors.setSrcTags(srcTagList);\n+\n+    List<String> srcFlavorList = new ArrayList<>();\n+    String sourceFlavor;\n+    switch(srcFlavors) {\n+      case none:\n+        break;\n+      case one:\n+        sourceFlavor = StringUtils.trimToNull(woi.getConfiguration(SOURCE_FLAVOR));\n+        if (sourceFlavor == null) {\n+          throw new WorkflowOperationException(\"Configuration key '\" + SOURCE_FLAVOR + \"' must be set\");\n+        } else {\n+          srcFlavorList.add(sourceFlavor);\n+          try {\n+            flavor = MediaPackageElementFlavor.parseFlavor(srcFlavorList.get(0));\n+          } catch (IllegalArgumentException e) {\n+            throw new WorkflowOperationException(srcFlavorList.get(0) + \" is not a valid flavor!\");\n+          }\n+        }\n+        break;\n+      case many:\n+        srcFlavorList = asList(StringUtils.trimToNull(woi.getConfiguration(SOURCE_FLAVORS)));\n+        sourceFlavor = StringUtils.trimToNull(woi.getConfiguration(SOURCE_FLAVOR));\n+        if (srcFlavorList.isEmpty() && sourceFlavor != null) {\n+          srcFlavorList.add(sourceFlavor);\n+        }\n+        if (srcFlavorList.isEmpty()) {\n+          logger.warn(\"Configuration keys '\" + SOURCE_FLAVORS + \"and\" + SOURCE_FLAVOR + \"' are empty\");\n+        } else {\n+          for (String elem : srcFlavorList) {\n+            try {\n+              flavor = MediaPackageElementFlavor.parseFlavor(elem);\n+            } catch (IllegalArgumentException e) {\n+              throw new WorkflowOperationException(elem + \" is not a valid flavor!\");\n+            }\n+          }\n+        }\n+        break;\n+      default:\n+        throw new WorkflowOperationException(\"Couldn't process srcFlavors configuration option!\");\n+    }\n+    tagsAndFlavors.setSrcFlavors(srcFlavorList);\n+\n+    List<String> targetTagList = new ArrayList<>();\n+    String targetTag;\n+    switch(targetTags) {\n+      case none:\n+        break;\n+      case one:\n+        targetTag = StringUtils.trimToNull(woi.getConfiguration(TARGET_TAG));\n+        if (targetTag == null) {\n+          throw new WorkflowOperationException(\"Configuration key '\" + TARGET_TAG + \"' must be set\");\n+        } else {\n+          targetTagList.add(targetTag);\n+        }\n+        break;\n+      case many:\n+        targetTagList = asList(StringUtils.trimToNull(woi.getConfiguration(TARGET_TAGS)));\n+        targetTag = StringUtils.trimToNull(woi.getConfiguration(TARGET_TAG));\n+        if (targetTagList.isEmpty() && targetTag != null) {\n+          targetTagList.add(targetTag);\n+        }\n+        if (targetTagList.isEmpty()) {\n+          logger.warn(\"Configuration keys '\" + TARGET_TAGS + \"and\" + TARGET_TAG + \"' are empty\");\n+        }\n+        break;\n+      default:\n+        throw new WorkflowOperationException(\"Couldn't process target-tag configuration option!\");\n+    }\n+    tagsAndFlavors.setTargetTags(targetTagList);\n+\n+    List<String> targetFlavorList = new ArrayList<>();\n+    String targetFlavor;\n+    switch(targetFlavors) {\n+      case none:\n+        break;\n+      case one:\n+        targetFlavor = StringUtils.trimToNull(woi.getConfiguration(TARGET_FLAVOR));\n+        if (targetFlavor == null) {\n+          throw new WorkflowOperationException(\"Configuration key '\" + TARGET_FLAVOR + \"' must be set\");\n+        } else {\n+          targetFlavorList.add(targetFlavor);\n+          try {\n+            flavor = MediaPackageElementFlavor.parseFlavor(targetFlavorList.get(0));\n+          } catch (IllegalArgumentException e) {\n+            throw new WorkflowOperationException(targetFlavorList.get(0) + \" is not a valid flavor!\");\n+          }\n+        }\n+        break;\n+      case many:\n+        targetFlavorList = asList(StringUtils.trimToNull(woi.getConfiguration(TARGET_FLAVORS)));\n+        targetFlavor = StringUtils.trimToNull(woi.getConfiguration(TARGET_FLAVOR));\n+        if (targetFlavorList.isEmpty() && targetFlavor != null) {\n+          targetFlavorList.add(targetFlavor);\n+        }\n+        if (targetTagList.isEmpty()) {\n+          logger.warn(\"Configuration key '\" + TARGET_FLAVORS + \"and\" + TARGET_FLAVOR + \"' are empty\");\n+        } else {\n+          for (String elem : targetFlavorList) {\n+            try {\n+              flavor = MediaPackageElementFlavor.parseFlavor(elem);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b58cd95933525a861deb17fa56fb78274bdd025"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ1Mzk4OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              protected ConfiguredTagsAndFlavors getTagsAndFlavors(WorkflowInstance wi, Configuration srcTags, Configuration srcFlavors, Configuration targetTags, Configuration targetFlavors) throws WorkflowOperationException {\n          \n          \n            \n                WorkflowOperationInstance woi = wi.getCurrentOperation();\n          \n          \n            \n              protected ConfiguredTagsAndFlavors getTagsAndFlavors(WorkflowInstance workflow, Configuration srcTags, Configuration srcFlavors, Configuration targetTags, Configuration targetFlavors) throws WorkflowOperationException {\n          \n          \n            \n                WorkflowOperationInstance operation = wi.getCurrentOperation();\n          \n      \n    \n    \n  \n\nGood names are good \ud83d\ude3c", "url": "https://github.com/opencast/opencast/pull/2125#discussion_r547453988", "createdAt": "2020-12-22T19:07:00Z", "author": {"login": "lkiesow"}, "path": "modules/workflow-service-api/src/main/java/org/opencastproject/workflow/api/AbstractWorkflowOperationHandler.java", "diffHunk": "@@ -360,6 +378,160 @@ protected String getConfig(WorkflowOperationInstance woi, String key) throws Wor\n     return Opt.nul(woi.getConfiguration(key)).flatMap(Strings.trimToNone);\n   }\n \n+  /**\n+   * Returns a ConfiguredTagsAndFlavors instance, which includes all specified source/target tags and flavors if they are valid\n+   * Lists can be empty, if no values were specified! This is to enable WOHs to individually check if a given tag/flavor was set.\n+   * @param srcTags none, one or many\n+   * @param srcFlavors none, one or many\n+   * @param targetFlavors none, one or many\n+   * @param targetTags none, one or many\n+   * @return ConfiguredTagsAndFlavors object including lists for the configured tags/flavors\n+   */\n+  protected ConfiguredTagsAndFlavors getTagsAndFlavors(WorkflowInstance wi, Configuration srcTags, Configuration srcFlavors, Configuration targetTags, Configuration targetFlavors) throws WorkflowOperationException {\n+    WorkflowOperationInstance woi = wi.getCurrentOperation();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b58cd95933525a861deb17fa56fb78274bdd025"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ1NTUxNQ==", "bodyText": "Why call this option? These are now the source flavors, aren't they?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                List<String> sourceFlavorsOption = tagsAndFlavors.getSrcFlavors();\n          \n          \n            \n                List<String> sourceFlavors = tagsAndFlavors.getSrcFlavors();\n          \n      \n    \n    \n  \n\n(Same with tags)", "url": "https://github.com/opencast/opencast/pull/2125#discussion_r547455515", "createdAt": "2020-12-22T19:10:21Z", "author": {"login": "lkiesow"}, "path": "modules/sox-workflowoperation/src/main/java/org/opencastproject/workflow/handler/sox/AnalyzeAudioWorkflowOperationHandler.java", "diffHunk": "@@ -118,43 +118,32 @@ public WorkflowOperationResult start(final WorkflowInstance workflowInstance, Jo\n     logger.debug(\"Running analyze audio workflow operation on workflow {}\", workflowInstance.getId());\n \n     try {\n-      return analyze(workflowInstance.getMediaPackage(), workflowInstance.getCurrentOperation());\n+      return analyze(workflowInstance.getMediaPackage(), workflowInstance.getCurrentOperation(), workflowInstance);\n     } catch (Exception e) {\n       throw new WorkflowOperationException(e);\n     }\n   }\n \n-  private WorkflowOperationResult analyze(MediaPackage src, WorkflowOperationInstance operation) throws SoxException,\n+  private WorkflowOperationResult analyze(MediaPackage src, WorkflowOperationInstance operation, WorkflowInstance wi) throws SoxException,\n           IOException, NotFoundException, MediaPackageException, WorkflowOperationException, EncoderException {\n     MediaPackage mediaPackage = (MediaPackage) src.clone();\n \n-    // Check which tags have been configured\n-    String sourceTagsOption = StringUtils.trimToNull(operation.getConfiguration(\"source-tags\"));\n-    String sourceFlavorOption = StringUtils.trimToNull(operation.getConfiguration(\"source-flavor\"));\n-    String sourceFlavorsOption = StringUtils.trimToNull(operation.getConfiguration(\"source-flavors\"));\n+    ConfiguredTagsAndFlavors tagsAndFlavors = getTagsAndFlavors(wi, Configuration.many, Configuration.many, Configuration.none, Configuration.none);\n+\n     boolean forceTranscode = BooleanUtils.toBoolean(operation.getConfiguration(\"force-transcode\"));\n \n     AbstractMediaPackageElementSelector<Track> elementSelector = new TrackSelector();\n \n     // Make sure either one of tags or flavors are provided\n-    if (StringUtils.isBlank(sourceTagsOption) && StringUtils.isBlank(sourceFlavorOption)\n-            && StringUtils.isBlank(sourceFlavorsOption)) {\n+    List<String> sourceFlavorsOption = tagsAndFlavors.getSrcFlavors();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b58cd95933525a861deb17fa56fb78274bdd025"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ1NjE2Ng==", "bodyText": "Why pass on the instance and one of its parameters?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  return analyze(workflowInstance.getMediaPackage(), workflowInstance.getCurrentOperation(), workflowInstance);\n          \n          \n            \n                  return analyze(workflowInstance.getMediaPackage(), workflowInstance);", "url": "https://github.com/opencast/opencast/pull/2125#discussion_r547456166", "createdAt": "2020-12-22T19:11:55Z", "author": {"login": "lkiesow"}, "path": "modules/sox-workflowoperation/src/main/java/org/opencastproject/workflow/handler/sox/AnalyzeAudioWorkflowOperationHandler.java", "diffHunk": "@@ -118,43 +118,32 @@ public WorkflowOperationResult start(final WorkflowInstance workflowInstance, Jo\n     logger.debug(\"Running analyze audio workflow operation on workflow {}\", workflowInstance.getId());\n \n     try {\n-      return analyze(workflowInstance.getMediaPackage(), workflowInstance.getCurrentOperation());\n+      return analyze(workflowInstance.getMediaPackage(), workflowInstance.getCurrentOperation(), workflowInstance);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b58cd95933525a861deb17fa56fb78274bdd025"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ1NjY4MQ==", "bodyText": "Your code already ensures that, doesn't it?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (StringUtils.trimToNull(tag) != null) {", "url": "https://github.com/opencast/opencast/pull/2125#discussion_r547456681", "createdAt": "2020-12-22T19:13:05Z", "author": {"login": "lkiesow"}, "path": "modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java", "diffHunk": "@@ -164,12 +156,10 @@ public WorkflowOperationResult start(final WorkflowInstance workflowInstance, Jo\n       coverImage.setMimeType(MimeTypes.PNG);\n \n       // Add tags\n-      final String targetTags = StringUtils.trimToNull(operation.getConfiguration(TARGET_TAGS));\n-      if (targetTags != null) {\n-        for (String tag : asList(targetTags)) {\n-          logger.trace(\"Tagging image with '{}'\", tag);\n-          if (StringUtils.trimToNull(tag) != null)\n-            coverImage.addTag(tag);\n+      for (String tag : tagsAndFlavors.getTargetTags()) {\n+        logger.trace(\"Tagging image with '{}'\", tag);\n+        if (StringUtils.trimToNull(tag) != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b58cd95933525a861deb17fa56fb78274bdd025"}, "originalPosition": 52}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "696e99b88248dee77a74783b85208c42f2f5b0c2", "author": {"user": null}, "url": "https://github.com/opencast/opencast/commit/696e99b88248dee77a74783b85208c42f2f5b0c2", "committedDate": "2020-12-22T23:53:18Z", "message": "removed unnecessary check if lists are empty + corresponding warnings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84a6b59a8cc755730297d73fd47bdad1f669da9c", "author": {"user": null}, "url": "https://github.com/opencast/opencast/commit/84a6b59a8cc755730297d73fd47bdad1f669da9c", "committedDate": "2020-12-23T00:28:47Z", "message": "ConfigruedTagsAndFlavors now stores flavors as flavor objects. Made corresponding changes in AbstractWOH"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5694e9a0ccce28f6d23f9ff38e95fe072f8fbb0b", "author": {"user": null}, "url": "https://github.com/opencast/opencast/commit/5694e9a0ccce28f6d23f9ff38e95fe072f8fbb0b", "committedDate": "2020-12-23T01:15:33Z", "message": "fixed minor style issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9a5be96435d00601db5a82270b133ba8c8196ed", "author": {"user": null}, "url": "https://github.com/opencast/opencast/commit/a9a5be96435d00601db5a82270b133ba8c8196ed", "committedDate": "2020-12-23T01:16:43Z", "message": "reworked CoverImageWOH, AnalyzeAudioWOH and AnalyzeTrackWOH"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6a2d052e55d3fae8e84c7fbef98eda82294931b", "author": {"user": null}, "url": "https://github.com/opencast/opencast/commit/e6a2d052e55d3fae8e84c7fbef98eda82294931b", "committedDate": "2021-03-20T23:22:52Z", "message": "minor fix for ConfiguregTagsAndFlavors class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c7d3db3c204cedb2cee195cbacba3fdcaeb4c49", "author": {"user": null}, "url": "https://github.com/opencast/opencast/commit/5c7d3db3c204cedb2cee195cbacba3fdcaeb4c49", "committedDate": "2021-03-21T00:04:19Z", "message": "reworked Animate, AmberScriptAttachTranscription, AmberScriptAttachTranscription WOHs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4ed3d2525fc003321db32ac757d60d4987c4f53", "author": {"user": null}, "url": "https://github.com/opencast/opencast/commit/e4ed3d2525fc003321db32ac757d60d4987c4f53", "committedDate": "2021-04-05T13:20:29Z", "message": "updated transcription-service-wohs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c42f0961f438fea3b54bc0255bc994aee8416334", "author": {"user": null}, "url": "https://github.com/opencast/opencast/commit/c42f0961f438fea3b54bc0255bc994aee8416334", "committedDate": "2021-04-05T13:28:16Z", "message": "use target-tags instead of target-tag in transcription-service-wohs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2a6002a554e6196e84791ec33fbfd6abfbb9578", "author": {"user": null}, "url": "https://github.com/opencast/opencast/commit/c2a6002a554e6196e84791ec33fbfd6abfbb9578", "committedDate": "2021-04-05T14:02:58Z", "message": "updated sox-wohs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3341bf906fcf4975c8e6ecfd40302bc01fafdd8", "author": {"user": null}, "url": "https://github.com/opencast/opencast/commit/f3341bf906fcf4975c8e6ecfd40302bc01fafdd8", "committedDate": "2021-04-14T12:00:26Z", "message": "updated AssetManagerWOH"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15dfd9ce6d1bb2152def0552dd02681e94f223c4", "author": {"user": null}, "url": "https://github.com/opencast/opencast/commit/15dfd9ce6d1bb2152def0552dd02681e94f223c4", "committedDate": "2021-04-14T12:02:32Z", "message": "updated first 3 composer WOHs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc74433ac13e68895f4990fa0203115cf6bcffb8", "author": {"user": null}, "url": "https://github.com/opencast/opencast/commit/fc74433ac13e68895f4990fa0203115cf6bcffb8", "committedDate": "2021-04-14T22:24:01Z", "message": "merge with develop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b248d9dd73e937437c2b284cea49cb22f13af7b", "author": {"user": null}, "url": "https://github.com/opencast/opencast/commit/1b248d9dd73e937437c2b284cea49cb22f13af7b", "committedDate": "2021-04-21T19:14:46Z", "message": "finished composerWOHs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3afee07293999ef682b993b4cff2a0e6d84c583a", "author": {"user": null}, "url": "https://github.com/opencast/opencast/commit/3afee07293999ef682b993b4cff2a0e6d84c583a", "committedDate": "2021-04-21T23:44:09Z", "message": "finished updateting WOHs in workflow-workflowoperation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31548f0d30e323d2bc6840633bcc011d924061c1", "author": {"user": null}, "url": "https://github.com/opencast/opencast/commit/31548f0d30e323d2bc6840633bcc011d924061c1", "committedDate": "2021-04-21T23:44:55Z", "message": "finished updating execute-wohs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed7f3ede276ee53d4403550ef7139b7852b46cc8", "author": {"user": null}, "url": "https://github.com/opencast/opencast/commit/ed7f3ede276ee53d4403550ef7139b7852b46cc8", "committedDate": "2021-04-21T23:46:40Z", "message": "finished updating crop, distribution and videoeditor WOHs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b83245b2711c99fadb78c6a545be95d6110a041d", "author": {"user": null}, "url": "https://github.com/opencast/opencast/commit/b83245b2711c99fadb78c6a545be95d6110a041d", "committedDate": "2021-04-21T23:48:38Z", "message": "finished updating remaining WOHs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6122d4f3d8edea4867af2d8edc257eb3cdc7872c", "author": {"user": null}, "url": "https://github.com/opencast/opencast/commit/6122d4f3d8edea4867af2d8edc257eb3cdc7872c", "committedDate": "2021-04-21T23:53:58Z", "message": "merged with develop"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1691, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}