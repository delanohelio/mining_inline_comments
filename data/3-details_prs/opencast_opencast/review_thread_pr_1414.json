{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2NzAzMjc3", "number": 1414, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNjozNTozOVrODgxFTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMjoyOTo1MlrODhDTDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Njg1MTk2OnYy", "diffSide": "RIGHT", "path": "modules/kernel/src/main/java/org/opencastproject/kernel/security/CustomPasswordEncoder.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNjozNTozOVrOFrJpuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzowMzoxOFrOFrKt8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc5MTIyNQ==", "bodyText": "I guess this is caused by .charAt(0)?\nIf yes, instead of catching the exception, my suggestion would be to use StringUtils#startsWith instead which will gracefully handle this in the first place and also handle null.", "url": "https://github.com/opencast/opencast/pull/1414#discussion_r380791225", "createdAt": "2020-02-18T16:35:39Z", "author": {"login": "lkiesow"}, "path": "modules/kernel/src/main/java/org/opencastproject/kernel/security/CustomPasswordEncoder.java", "diffHunk": "@@ -78,6 +78,8 @@ public boolean isPasswordValid(String encodedPassword, String rawPassword, Objec\n       return encodedPassword.charAt(0) == '$' && BCrypt.checkpw(rawPassword, encodedPassword);\n     } catch (IllegalArgumentException e) {\n       logger.debug(\"bcrypt hash verification failed\", e);\n+    } catch (StringIndexOutOfBoundsException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "726c9830741c6a484ed87d247d32315d4129cc48"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc5NTIxMQ==", "bodyText": "Seems my guess was correct. The cause is charAt and switching to startsWith should fix the underlying problem.", "url": "https://github.com/opencast/opencast/pull/1414#discussion_r380795211", "createdAt": "2020-02-18T16:41:45Z", "author": {"login": "lkiesow"}, "path": "modules/kernel/src/main/java/org/opencastproject/kernel/security/CustomPasswordEncoder.java", "diffHunk": "@@ -78,6 +78,8 @@ public boolean isPasswordValid(String encodedPassword, String rawPassword, Objec\n       return encodedPassword.charAt(0) == '$' && BCrypt.checkpw(rawPassword, encodedPassword);\n     } catch (IllegalArgumentException e) {\n       logger.debug(\"bcrypt hash verification failed\", e);\n+    } catch (StringIndexOutOfBoundsException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc5MTIyNQ=="}, "originalCommit": {"oid": "726c9830741c6a484ed87d247d32315d4129cc48"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgwNjY5NQ==", "bodyText": "Yep, my concern exactly.  I haven't had a chance to dig deeper into this, but this logic appears to check if there is an old md5'd password, and failing that checks for a bcrypt'd one.  If neither of these things are true, shouldn't this throw an exception?  A user without a valid form of password seems like a bug to me.", "url": "https://github.com/opencast/opencast/pull/1414#discussion_r380806695", "createdAt": "2020-02-18T16:59:53Z", "author": {"login": "gregorydlogan"}, "path": "modules/kernel/src/main/java/org/opencastproject/kernel/security/CustomPasswordEncoder.java", "diffHunk": "@@ -78,6 +78,8 @@ public boolean isPasswordValid(String encodedPassword, String rawPassword, Objec\n       return encodedPassword.charAt(0) == '$' && BCrypt.checkpw(rawPassword, encodedPassword);\n     } catch (IllegalArgumentException e) {\n       logger.debug(\"bcrypt hash verification failed\", e);\n+    } catch (StringIndexOutOfBoundsException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc5MTIyNQ=="}, "originalCommit": {"oid": "726c9830741c6a484ed87d247d32315d4129cc48"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgwODY4OQ==", "bodyText": "No. You really don't want to throw an exception here if possible since this will cause Opencast to return an internal server error on login and may even disclose internal log-in credentials which is why I would also be careful with logging here. That's also part of why the logging for the IllegalArgumentException is just debug.", "url": "https://github.com/opencast/opencast/pull/1414#discussion_r380808689", "createdAt": "2020-02-18T17:03:18Z", "author": {"login": "lkiesow"}, "path": "modules/kernel/src/main/java/org/opencastproject/kernel/security/CustomPasswordEncoder.java", "diffHunk": "@@ -78,6 +78,8 @@ public boolean isPasswordValid(String encodedPassword, String rawPassword, Objec\n       return encodedPassword.charAt(0) == '$' && BCrypt.checkpw(rawPassword, encodedPassword);\n     } catch (IllegalArgumentException e) {\n       logger.debug(\"bcrypt hash verification failed\", e);\n+    } catch (StringIndexOutOfBoundsException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc5MTIyNQ=="}, "originalCommit": {"oid": "726c9830741c6a484ed87d247d32315d4129cc48"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1OTgzNjI4OnYy", "diffSide": "RIGHT", "path": "modules/kernel/src/main/java/org/opencastproject/kernel/security/CustomPasswordEncoder.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMjoyOTo1MlrOFrmSvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNzo0MzozMVrOFsuEow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI2MDQ3Ng==", "bodyText": "This will indeed handle more cases but will still fail if encodedPassword is null. Can we switch to using StringUtils#startsWith? That will handle that as well.", "url": "https://github.com/opencast/opencast/pull/1414#discussion_r381260476", "createdAt": "2020-02-19T12:29:52Z", "author": {"login": "lkiesow"}, "path": "modules/kernel/src/main/java/org/opencastproject/kernel/security/CustomPasswordEncoder.java", "diffHunk": "@@ -75,13 +75,14 @@ public boolean isPasswordValid(String encodedPassword, String rawPassword, Objec\n     // Test BCrypt encoded hash\n     logger.debug(\"Verifying bcrypt hash {}\", encodedPassword);\n     try {\n-      return encodedPassword.charAt(0) == '$' && BCrypt.checkpw(rawPassword, encodedPassword);\n+      return encodedPassword.startsWith(\"$\") && BCrypt.checkpw(rawPassword, encodedPassword);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cc8d0db0b6cdaf133c55fe1c78d9ddacced07ed"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg0MDQwMA==", "bodyText": "I don't understand you, I changed yesterday to use startsWith", "url": "https://github.com/opencast/opencast/pull/1414#discussion_r381840400", "createdAt": "2020-02-20T08:13:54Z", "author": {"login": "mliradelc"}, "path": "modules/kernel/src/main/java/org/opencastproject/kernel/security/CustomPasswordEncoder.java", "diffHunk": "@@ -75,13 +75,14 @@ public boolean isPasswordValid(String encodedPassword, String rawPassword, Objec\n     // Test BCrypt encoded hash\n     logger.debug(\"Verifying bcrypt hash {}\", encodedPassword);\n     try {\n-      return encodedPassword.charAt(0) == '$' && BCrypt.checkpw(rawPassword, encodedPassword);\n+      return encodedPassword.startsWith(\"$\") && BCrypt.checkpw(rawPassword, encodedPassword);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI2MDQ3Ng=="}, "originalCommit": {"oid": "1cc8d0db0b6cdaf133c55fe1c78d9ddacced07ed"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTkzMzczMw==", "bodyText": "You used String#startsWith but I suggested StringUtils#startsWith.\nThe difference is basically that StringUtils#startsWith works as if you had an additional check for null:\nreturn StringUtils.startsWith(encodedPassword, \"$\") && BCrypt.checkpw(rawPassword, encodedPassword); \n\u2026roughly equals\u2026\nreturn encodedPassword != null && encodedPassword.startsWith(\"$\") && BCrypt.checkpw(rawPassword, encodedPassword); \n\u2026which is both just fine btb :)", "url": "https://github.com/opencast/opencast/pull/1414#discussion_r381933733", "createdAt": "2020-02-20T11:11:17Z", "author": {"login": "lkiesow"}, "path": "modules/kernel/src/main/java/org/opencastproject/kernel/security/CustomPasswordEncoder.java", "diffHunk": "@@ -75,13 +75,14 @@ public boolean isPasswordValid(String encodedPassword, String rawPassword, Objec\n     // Test BCrypt encoded hash\n     logger.debug(\"Verifying bcrypt hash {}\", encodedPassword);\n     try {\n-      return encodedPassword.charAt(0) == '$' && BCrypt.checkpw(rawPassword, encodedPassword);\n+      return encodedPassword.startsWith(\"$\") && BCrypt.checkpw(rawPassword, encodedPassword);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI2MDQ3Ng=="}, "originalCommit": {"oid": "1cc8d0db0b6cdaf133c55fe1c78d9ddacced07ed"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQzNjUxNQ==", "bodyText": "Aha!, I thought that it was StringUtils, I will change that ASAP!", "url": "https://github.com/opencast/opencast/pull/1414#discussion_r382436515", "createdAt": "2020-02-21T07:43:31Z", "author": {"login": "mliradelc"}, "path": "modules/kernel/src/main/java/org/opencastproject/kernel/security/CustomPasswordEncoder.java", "diffHunk": "@@ -75,13 +75,14 @@ public boolean isPasswordValid(String encodedPassword, String rawPassword, Objec\n     // Test BCrypt encoded hash\n     logger.debug(\"Verifying bcrypt hash {}\", encodedPassword);\n     try {\n-      return encodedPassword.charAt(0) == '$' && BCrypt.checkpw(rawPassword, encodedPassword);\n+      return encodedPassword.startsWith(\"$\") && BCrypt.checkpw(rawPassword, encodedPassword);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI2MDQ3Ng=="}, "originalCommit": {"oid": "1cc8d0db0b6cdaf133c55fe1c78d9ddacced07ed"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3258, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}