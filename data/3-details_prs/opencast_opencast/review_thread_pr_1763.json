{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2ODAzNzI2", "number": 1763, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNTozMzo1N1rOEXrmkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxOTo0NDoxMFrOEZMrGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjY3MDg5OnYy", "diffSide": "RIGHT", "path": "modules/admin-ui-frontend/app/scripts/shared/services/restServiceMonitor.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNTozMzo1N1rOG_mzzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNTozMzo1N1rOG_mzzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM0OTMyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      } else if (parseInt(latest_version[0]) - parseInt(my_version[0]) <= 2) {\n          \n          \n            \n                      } else if (parseInt(latest_version[0]) - parseInt(my_version[0]) < 2) {\n          \n      \n    \n    \n  \n\nCurrently, 8.6 is the latest version and 8.x and 7.x is supported.\nIf someone has a 6.4 then 8 - 6 = 2 which should yield the \u2026is no longer supported. Please update.", "url": "https://github.com/opencast/opencast/pull/1763#discussion_r469349327", "createdAt": "2020-08-12T15:33:57Z", "author": {"login": "lkiesow"}, "path": "modules/admin-ui-frontend/app/scripts/shared/services/restServiceMonitor.js", "diffHunk": "@@ -45,6 +48,42 @@ angular.module('adminNg.services')\n \n     Monitoring.getActiveMQStats();\n     Monitoring.getBasicServiceStats();\n+    Monitoring.getVersionStats();\n+  };\n+\n+  Monitoring.getVersionStats = function() {\n+    $http.get(MY_VERSION_PATH).then(function(response_my_version) {\n+      $http.get(LATEST_VERSION_PATH).then(function(response_latest_version) {\n+        Monitoring.populateService(LATEST_VERSION_NAME);\n+\n+        if (response_latest_version.status === 200 && response_my_version.status === 200\n+        && response_my_version.data.consistent) {\n+          var my_version = response_my_version.data.version;\n+          var latest_version = response_latest_version.data;\n+          services.service[LATEST_VERSION_NAME].docs_url =\n+            'https://docs.opencast.org/r/' + latest_version[0] + '.x/admin/';\n+\n+          if (parseFloat(my_version) >= parseFloat(latest_version) || my_version.endsWith('SNAPSHOT')) {\n+            services.service[LATEST_VERSION_NAME].status = OK;\n+            services.service[LATEST_VERSION_NAME].error = false;\n+          } else if (my_version[0] == latest_version[0]) {\n+            services.service[LATEST_VERSION_NAME].status = 'There is a minor update available.';\n+            services.service[LATEST_VERSION_NAME].error = true;\n+          } else if (parseInt(latest_version[0]) - parseInt(my_version[0]) <= 2) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dc7cd77e58ba238717bcaf3ca44de63283283e2"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjY4NzE5OnYy", "diffSide": "RIGHT", "path": "modules/admin-ui-frontend/app/scripts/shared/services/restServiceMonitor.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNTozNzozOVrOG_m94w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNTozNzozOVrOG_m94w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM1MTkwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      if (parseFloat(my_version) >= parseFloat(latest_version) || my_version.endsWith('SNAPSHOT')) {\n          \n          \n            \n                      if (parseFloat(my_version) >= parseFloat(latest_version)\n          \n          \n            \n                         || (my_version[0] == latest_version[0] && my_version.endsWith('SNAPSHOT'))) {\n          \n      \n    \n    \n  \n\nThis could also be 4.0.0-SNAPSHOT which could be identified as very old.", "url": "https://github.com/opencast/opencast/pull/1763#discussion_r469351907", "createdAt": "2020-08-12T15:37:39Z", "author": {"login": "lkiesow"}, "path": "modules/admin-ui-frontend/app/scripts/shared/services/restServiceMonitor.js", "diffHunk": "@@ -45,6 +48,42 @@ angular.module('adminNg.services')\n \n     Monitoring.getActiveMQStats();\n     Monitoring.getBasicServiceStats();\n+    Monitoring.getVersionStats();\n+  };\n+\n+  Monitoring.getVersionStats = function() {\n+    $http.get(MY_VERSION_PATH).then(function(response_my_version) {\n+      $http.get(LATEST_VERSION_PATH).then(function(response_latest_version) {\n+        Monitoring.populateService(LATEST_VERSION_NAME);\n+\n+        if (response_latest_version.status === 200 && response_my_version.status === 200\n+        && response_my_version.data.consistent) {\n+          var my_version = response_my_version.data.version;\n+          var latest_version = response_latest_version.data;\n+          services.service[LATEST_VERSION_NAME].docs_url =\n+            'https://docs.opencast.org/r/' + latest_version[0] + '.x/admin/';\n+\n+          if (parseFloat(my_version) >= parseFloat(latest_version) || my_version.endsWith('SNAPSHOT')) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dc7cd77e58ba238717bcaf3ca44de63283283e2"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjcxNDg5OnYy", "diffSide": "RIGHT", "path": "modules/admin-ui/src/main/java/org/opencastproject/adminui/endpoint/VersionEndpoint.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNTo0MjoyNlrOG_nNtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMDozMTowN1rOHAFt9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM1NTk1OQ==", "bodyText": "I would make this a warning since it's not something an admin would (or most likely even could) fix.\nAnd use the logger's functionality to handle exceptions:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  logger.error(\"Error while parsing the version: \" + e.toString());\n          \n          \n            \n                  logger.error(\"Error while parsing the Opencast version from GitHub\", e);", "url": "https://github.com/opencast/opencast/pull/1763#discussion_r469355959", "createdAt": "2020-08-12T15:42:26Z", "author": {"login": "lkiesow"}, "path": "modules/admin-ui/src/main/java/org/opencastproject/adminui/endpoint/VersionEndpoint.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/**\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ *\n+ * The Apereo Foundation licenses this file to you under the Educational\n+ * Community License, Version 2.0 (the \"License\"); you may not use this file\n+ * except in compliance with the License. You may obtain a copy of the License\n+ * at:\n+ *\n+ *   http://opensource.org/licenses/ecl2.txt\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.opencastproject.adminui.endpoint;\n+\n+import static org.apache.http.HttpStatus.SC_OK;\n+\n+import org.opencastproject.util.doc.rest.RestQuery;\n+import org.opencastproject.util.doc.rest.RestResponse;\n+import org.opencastproject.util.doc.rest.RestService;\n+\n+import com.google.gson.Gson;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Map;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/\")\n+@RestService(name = \"VersionService\", title = \"Version service\",\n+  abstractText = \"Provides latest opencast version\",\n+  notes = { \"This service offers the GET method to retrieve the latest opencast version from https://api.github.com .\"})\n+@Component(\n+  immediate = true,\n+  service = VersionEndpoint.class,\n+  property = {\n+    \"service.description=Admin UI - Latest Version Endpoint\",\n+    \"opencast.service.type=org.opencastproject.adminui.endpoint.VersionEndpoint\",\n+    \"opencast.service.path=/admin-ng/oc-version\"\n+  }\n+)\n+public class VersionEndpoint {\n+\n+  /** The logging facility */\n+  private static final Logger logger = LoggerFactory.getLogger(VersionEndpoint.class);\n+\n+  /** The version */\n+  private String version = \"\";\n+\n+  /** GitHub URL */\n+  private String url = \"https://api.github.com/repos/opencast/opencast/releases/latest\";\n+\n+  /** The date */\n+  private long lastUpdated = 0;\n+\n+  private static final Gson gson = new Gson();\n+\n+  /** OSGi callback. */\n+  @Activate\n+  protected void activate() {\n+    logger.info(\"Activate the Admin ui - Latest version endpoint\");\n+  }\n+\n+  @GET\n+  @Path(\"version.json\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @RestQuery(name = \"latestversion\", description = \"Returns the latest Opencast version\",\n+          returnDescription = \"Returns the latest Opencast version retrieved from GitHub\",\n+          reponses = { @RestResponse(responseCode = SC_OK, description = \"The latest Opencast version.\") })\n+  public String getVersion() {\n+    if (System.currentTimeMillis() / 1000L - lastUpdated >= 3600) {\n+      updateVersion();\n+    }\n+    return gson.toJson(version);\n+  }\n+\n+  private synchronized void updateVersion() {\n+    if (System.currentTimeMillis() / 1000L - lastUpdated < 3600) {\n+      return;\n+    }\n+    try {\n+      HttpClient client = HttpClientBuilder.create().build();\n+      HttpGet request = new HttpGet(url);\n+      HttpResponse response = client.execute(request);\n+      String responseString = IOUtils.toString(response.getEntity().getContent(), \"utf-8\");\n+      Map data = gson.fromJson(responseString, Map.class);\n+      version = (String) data.get(\"tag_name\");\n+      lastUpdated = System.currentTimeMillis() / 1000L;\n+    } catch (Exception e) {\n+      logger.error(\"Error while parsing the version: \" + e.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dc7cd77e58ba238717bcaf3ca44de63283283e2"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg0OTg2Ng==", "bodyText": "How do I make this a warning?\nDoes the logger.error() function handle the Exception in a way such that it will create a warning?", "url": "https://github.com/opencast/opencast/pull/1763#discussion_r469849866", "createdAt": "2020-08-13T10:19:32Z", "author": {"login": "mheyen"}, "path": "modules/admin-ui/src/main/java/org/opencastproject/adminui/endpoint/VersionEndpoint.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/**\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ *\n+ * The Apereo Foundation licenses this file to you under the Educational\n+ * Community License, Version 2.0 (the \"License\"); you may not use this file\n+ * except in compliance with the License. You may obtain a copy of the License\n+ * at:\n+ *\n+ *   http://opensource.org/licenses/ecl2.txt\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.opencastproject.adminui.endpoint;\n+\n+import static org.apache.http.HttpStatus.SC_OK;\n+\n+import org.opencastproject.util.doc.rest.RestQuery;\n+import org.opencastproject.util.doc.rest.RestResponse;\n+import org.opencastproject.util.doc.rest.RestService;\n+\n+import com.google.gson.Gson;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Map;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/\")\n+@RestService(name = \"VersionService\", title = \"Version service\",\n+  abstractText = \"Provides latest opencast version\",\n+  notes = { \"This service offers the GET method to retrieve the latest opencast version from https://api.github.com .\"})\n+@Component(\n+  immediate = true,\n+  service = VersionEndpoint.class,\n+  property = {\n+    \"service.description=Admin UI - Latest Version Endpoint\",\n+    \"opencast.service.type=org.opencastproject.adminui.endpoint.VersionEndpoint\",\n+    \"opencast.service.path=/admin-ng/oc-version\"\n+  }\n+)\n+public class VersionEndpoint {\n+\n+  /** The logging facility */\n+  private static final Logger logger = LoggerFactory.getLogger(VersionEndpoint.class);\n+\n+  /** The version */\n+  private String version = \"\";\n+\n+  /** GitHub URL */\n+  private String url = \"https://api.github.com/repos/opencast/opencast/releases/latest\";\n+\n+  /** The date */\n+  private long lastUpdated = 0;\n+\n+  private static final Gson gson = new Gson();\n+\n+  /** OSGi callback. */\n+  @Activate\n+  protected void activate() {\n+    logger.info(\"Activate the Admin ui - Latest version endpoint\");\n+  }\n+\n+  @GET\n+  @Path(\"version.json\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @RestQuery(name = \"latestversion\", description = \"Returns the latest Opencast version\",\n+          returnDescription = \"Returns the latest Opencast version retrieved from GitHub\",\n+          reponses = { @RestResponse(responseCode = SC_OK, description = \"The latest Opencast version.\") })\n+  public String getVersion() {\n+    if (System.currentTimeMillis() / 1000L - lastUpdated >= 3600) {\n+      updateVersion();\n+    }\n+    return gson.toJson(version);\n+  }\n+\n+  private synchronized void updateVersion() {\n+    if (System.currentTimeMillis() / 1000L - lastUpdated < 3600) {\n+      return;\n+    }\n+    try {\n+      HttpClient client = HttpClientBuilder.create().build();\n+      HttpGet request = new HttpGet(url);\n+      HttpResponse response = client.execute(request);\n+      String responseString = IOUtils.toString(response.getEntity().getContent(), \"utf-8\");\n+      Map data = gson.fromJson(responseString, Map.class);\n+      version = (String) data.get(\"tag_name\");\n+      lastUpdated = System.currentTimeMillis() / 1000L;\n+    } catch (Exception e) {\n+      logger.error(\"Error while parsing the version: \" + e.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM1NTk1OQ=="}, "originalCommit": {"oid": "7dc7cd77e58ba238717bcaf3ca44de63283283e2"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg1NTczNA==", "bodyText": "logger.warn(\u2026)", "url": "https://github.com/opencast/opencast/pull/1763#discussion_r469855734", "createdAt": "2020-08-13T10:31:07Z", "author": {"login": "lkiesow"}, "path": "modules/admin-ui/src/main/java/org/opencastproject/adminui/endpoint/VersionEndpoint.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/**\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ *\n+ * The Apereo Foundation licenses this file to you under the Educational\n+ * Community License, Version 2.0 (the \"License\"); you may not use this file\n+ * except in compliance with the License. You may obtain a copy of the License\n+ * at:\n+ *\n+ *   http://opensource.org/licenses/ecl2.txt\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.opencastproject.adminui.endpoint;\n+\n+import static org.apache.http.HttpStatus.SC_OK;\n+\n+import org.opencastproject.util.doc.rest.RestQuery;\n+import org.opencastproject.util.doc.rest.RestResponse;\n+import org.opencastproject.util.doc.rest.RestService;\n+\n+import com.google.gson.Gson;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Map;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/\")\n+@RestService(name = \"VersionService\", title = \"Version service\",\n+  abstractText = \"Provides latest opencast version\",\n+  notes = { \"This service offers the GET method to retrieve the latest opencast version from https://api.github.com .\"})\n+@Component(\n+  immediate = true,\n+  service = VersionEndpoint.class,\n+  property = {\n+    \"service.description=Admin UI - Latest Version Endpoint\",\n+    \"opencast.service.type=org.opencastproject.adminui.endpoint.VersionEndpoint\",\n+    \"opencast.service.path=/admin-ng/oc-version\"\n+  }\n+)\n+public class VersionEndpoint {\n+\n+  /** The logging facility */\n+  private static final Logger logger = LoggerFactory.getLogger(VersionEndpoint.class);\n+\n+  /** The version */\n+  private String version = \"\";\n+\n+  /** GitHub URL */\n+  private String url = \"https://api.github.com/repos/opencast/opencast/releases/latest\";\n+\n+  /** The date */\n+  private long lastUpdated = 0;\n+\n+  private static final Gson gson = new Gson();\n+\n+  /** OSGi callback. */\n+  @Activate\n+  protected void activate() {\n+    logger.info(\"Activate the Admin ui - Latest version endpoint\");\n+  }\n+\n+  @GET\n+  @Path(\"version.json\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @RestQuery(name = \"latestversion\", description = \"Returns the latest Opencast version\",\n+          returnDescription = \"Returns the latest Opencast version retrieved from GitHub\",\n+          reponses = { @RestResponse(responseCode = SC_OK, description = \"The latest Opencast version.\") })\n+  public String getVersion() {\n+    if (System.currentTimeMillis() / 1000L - lastUpdated >= 3600) {\n+      updateVersion();\n+    }\n+    return gson.toJson(version);\n+  }\n+\n+  private synchronized void updateVersion() {\n+    if (System.currentTimeMillis() / 1000L - lastUpdated < 3600) {\n+      return;\n+    }\n+    try {\n+      HttpClient client = HttpClientBuilder.create().build();\n+      HttpGet request = new HttpGet(url);\n+      HttpResponse response = client.execute(request);\n+      String responseString = IOUtils.toString(response.getEntity().getContent(), \"utf-8\");\n+      Map data = gson.fromJson(responseString, Map.class);\n+      version = (String) data.get(\"tag_name\");\n+      lastUpdated = System.currentTimeMillis() / 1000L;\n+    } catch (Exception e) {\n+      logger.error(\"Error while parsing the version: \" + e.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM1NTk1OQ=="}, "originalCommit": {"oid": "7dc7cd77e58ba238717bcaf3ca44de63283283e2"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNjk5NjY3OnYy", "diffSide": "RIGHT", "path": "modules/admin-ui/src/main/java/org/opencastproject/adminui/endpoint/VersionEndpoint.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNTowMDowOVrOHAPlxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwOTowNzozMVrOHAtWkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAxNzQ3OQ==", "bodyText": "This should be re**s**ponses, especially since I'm looking at #1766 too :)", "url": "https://github.com/opencast/opencast/pull/1763#discussion_r470017479", "createdAt": "2020-08-13T15:00:09Z", "author": {"login": "gregorydlogan"}, "path": "modules/admin-ui/src/main/java/org/opencastproject/adminui/endpoint/VersionEndpoint.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/**\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ *\n+ * The Apereo Foundation licenses this file to you under the Educational\n+ * Community License, Version 2.0 (the \"License\"); you may not use this file\n+ * except in compliance with the License. You may obtain a copy of the License\n+ * at:\n+ *\n+ *   http://opensource.org/licenses/ecl2.txt\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.opencastproject.adminui.endpoint;\n+\n+import static org.apache.http.HttpStatus.SC_OK;\n+\n+import org.opencastproject.util.doc.rest.RestQuery;\n+import org.opencastproject.util.doc.rest.RestResponse;\n+import org.opencastproject.util.doc.rest.RestService;\n+\n+import com.google.gson.Gson;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Map;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/\")\n+@RestService(name = \"VersionService\", title = \"Version service\",\n+  abstractText = \"Provides latest opencast version\",\n+  notes = { \"This service offers the GET method to retrieve the latest opencast version from https://api.github.com .\"})\n+@Component(\n+  immediate = true,\n+  service = VersionEndpoint.class,\n+  property = {\n+    \"service.description=Admin UI - Latest Version Endpoint\",\n+    \"opencast.service.type=org.opencastproject.adminui.endpoint.VersionEndpoint\",\n+    \"opencast.service.path=/admin-ng/oc-version\"\n+  }\n+)\n+public class VersionEndpoint {\n+\n+  /** The logging facility */\n+  private static final Logger logger = LoggerFactory.getLogger(VersionEndpoint.class);\n+\n+  /** The version */\n+  private String version = \"\";\n+\n+  /** GitHub URL */\n+  private String url = \"https://api.github.com/repos/opencast/opencast/releases/latest\";\n+\n+  /** The date */\n+  private long lastUpdated = 0;\n+\n+  private static final Gson gson = new Gson();\n+\n+  /** OSGi callback. */\n+  @Activate\n+  protected void activate() {\n+    logger.info(\"Activate the Admin ui - Latest version endpoint\");\n+  }\n+\n+  @GET\n+  @Path(\"version.json\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @RestQuery(name = \"latestversion\", description = \"Returns the latest Opencast version\",\n+          returnDescription = \"Returns the latest Opencast version retrieved from GitHub\",\n+          reponses = { @RestResponse(responseCode = SC_OK, description = \"The latest Opencast version.\") })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f621ec0286481e59c7459177a102d1c8c1e3b41c"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUwNTEwNA==", "bodyText": "That is absolutely correct ;)", "url": "https://github.com/opencast/opencast/pull/1763#discussion_r470505104", "createdAt": "2020-08-14T09:07:31Z", "author": {"login": "mheyen"}, "path": "modules/admin-ui/src/main/java/org/opencastproject/adminui/endpoint/VersionEndpoint.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/**\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ *\n+ * The Apereo Foundation licenses this file to you under the Educational\n+ * Community License, Version 2.0 (the \"License\"); you may not use this file\n+ * except in compliance with the License. You may obtain a copy of the License\n+ * at:\n+ *\n+ *   http://opensource.org/licenses/ecl2.txt\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.opencastproject.adminui.endpoint;\n+\n+import static org.apache.http.HttpStatus.SC_OK;\n+\n+import org.opencastproject.util.doc.rest.RestQuery;\n+import org.opencastproject.util.doc.rest.RestResponse;\n+import org.opencastproject.util.doc.rest.RestService;\n+\n+import com.google.gson.Gson;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Map;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/\")\n+@RestService(name = \"VersionService\", title = \"Version service\",\n+  abstractText = \"Provides latest opencast version\",\n+  notes = { \"This service offers the GET method to retrieve the latest opencast version from https://api.github.com .\"})\n+@Component(\n+  immediate = true,\n+  service = VersionEndpoint.class,\n+  property = {\n+    \"service.description=Admin UI - Latest Version Endpoint\",\n+    \"opencast.service.type=org.opencastproject.adminui.endpoint.VersionEndpoint\",\n+    \"opencast.service.path=/admin-ng/oc-version\"\n+  }\n+)\n+public class VersionEndpoint {\n+\n+  /** The logging facility */\n+  private static final Logger logger = LoggerFactory.getLogger(VersionEndpoint.class);\n+\n+  /** The version */\n+  private String version = \"\";\n+\n+  /** GitHub URL */\n+  private String url = \"https://api.github.com/repos/opencast/opencast/releases/latest\";\n+\n+  /** The date */\n+  private long lastUpdated = 0;\n+\n+  private static final Gson gson = new Gson();\n+\n+  /** OSGi callback. */\n+  @Activate\n+  protected void activate() {\n+    logger.info(\"Activate the Admin ui - Latest version endpoint\");\n+  }\n+\n+  @GET\n+  @Path(\"version.json\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @RestQuery(name = \"latestversion\", description = \"Returns the latest Opencast version\",\n+          returnDescription = \"Returns the latest Opencast version retrieved from GitHub\",\n+          reponses = { @RestResponse(responseCode = SC_OK, description = \"The latest Opencast version.\") })", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAxNzQ3OQ=="}, "originalCommit": {"oid": "f621ec0286481e59c7459177a102d1c8c1e3b41c"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNzAyMDc4OnYy", "diffSide": "LEFT", "path": "modules/admin-ui-frontend/app/scripts/shared/services/restServiceMonitor.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNTowNDo1M1rOHAPz8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwOTowNjoxOVrOHAtUGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAyMTEwNw==", "bodyText": "What was the reasoning behind removing this?", "url": "https://github.com/opencast/opencast/pull/1763#discussion_r470021107", "createdAt": "2020-08-13T15:04:53Z", "author": {"login": "gregorydlogan"}, "path": "modules/admin-ui-frontend/app/scripts/shared/services/restServiceMonitor.js", "diffHunk": "@@ -58,11 +98,7 @@ angular.module('adminNg.services')\n         services.service[AMQ_NAME].error = true;\n       }\n     }).catch(function(err) {\n-      Monitoring.populateService(AMQ_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f621ec0286481e59c7459177a102d1c8c1e3b41c"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUwNDQ3NA==", "bodyText": "Monitoring.setError() already calls the Monitoring.populateService() function.\nTherefore I thought it would not be necessary to call it twice.\nBasically it was just to remove redundant code.", "url": "https://github.com/opencast/opencast/pull/1763#discussion_r470504474", "createdAt": "2020-08-14T09:06:19Z", "author": {"login": "mheyen"}, "path": "modules/admin-ui-frontend/app/scripts/shared/services/restServiceMonitor.js", "diffHunk": "@@ -58,11 +98,7 @@ angular.module('adminNg.services')\n         services.service[AMQ_NAME].error = true;\n       }\n     }).catch(function(err) {\n-      Monitoring.populateService(AMQ_NAME);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAyMTEwNw=="}, "originalCommit": {"oid": "f621ec0286481e59c7459177a102d1c8c1e3b41c"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNzAyNjM4OnYy", "diffSide": "RIGHT", "path": "modules/admin-ui/src/main/java/org/opencastproject/adminui/endpoint/VersionEndpoint.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNTowNjoxMlrOHAP3dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNToyODowOVrOHAQ0Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAyMjAwNw==", "bodyText": "Probably only need to check this once, either here, or in updateVersion", "url": "https://github.com/opencast/opencast/pull/1763#discussion_r470022007", "createdAt": "2020-08-13T15:06:12Z", "author": {"login": "gregorydlogan"}, "path": "modules/admin-ui/src/main/java/org/opencastproject/adminui/endpoint/VersionEndpoint.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/**\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ *\n+ * The Apereo Foundation licenses this file to you under the Educational\n+ * Community License, Version 2.0 (the \"License\"); you may not use this file\n+ * except in compliance with the License. You may obtain a copy of the License\n+ * at:\n+ *\n+ *   http://opensource.org/licenses/ecl2.txt\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.opencastproject.adminui.endpoint;\n+\n+import static org.apache.http.HttpStatus.SC_OK;\n+\n+import org.opencastproject.util.doc.rest.RestQuery;\n+import org.opencastproject.util.doc.rest.RestResponse;\n+import org.opencastproject.util.doc.rest.RestService;\n+\n+import com.google.gson.Gson;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Map;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/\")\n+@RestService(name = \"VersionService\", title = \"Version service\",\n+  abstractText = \"Provides latest opencast version\",\n+  notes = { \"This service offers the GET method to retrieve the latest opencast version from https://api.github.com .\"})\n+@Component(\n+  immediate = true,\n+  service = VersionEndpoint.class,\n+  property = {\n+    \"service.description=Admin UI - Latest Version Endpoint\",\n+    \"opencast.service.type=org.opencastproject.adminui.endpoint.VersionEndpoint\",\n+    \"opencast.service.path=/admin-ng/oc-version\"\n+  }\n+)\n+public class VersionEndpoint {\n+\n+  /** The logging facility */\n+  private static final Logger logger = LoggerFactory.getLogger(VersionEndpoint.class);\n+\n+  /** The version */\n+  private String version = \"\";\n+\n+  /** GitHub URL */\n+  private String url = \"https://api.github.com/repos/opencast/opencast/releases/latest\";\n+\n+  /** The date */\n+  private long lastUpdated = 0;\n+\n+  private static final Gson gson = new Gson();\n+\n+  /** OSGi callback. */\n+  @Activate\n+  protected void activate() {\n+    logger.info(\"Activate the Admin ui - Latest version endpoint\");\n+  }\n+\n+  @GET\n+  @Path(\"version.json\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @RestQuery(name = \"latestversion\", description = \"Returns the latest Opencast version\",\n+          returnDescription = \"Returns the latest Opencast version retrieved from GitHub\",\n+          reponses = { @RestResponse(responseCode = SC_OK, description = \"The latest Opencast version.\") })\n+  public String getVersion() {\n+    if (System.currentTimeMillis() / 1000L - lastUpdated >= 3600) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f621ec0286481e59c7459177a102d1c8c1e3b41c"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAyOTA2NA==", "bodyText": "It does make sense to check this twice. If you check it just in updateVersion you have basically a single-threaded web server for this endpoint since that function is synchronized. If you have it just here, you can have multiple updates triggered at once which could cause GitHub temporarily blocking you.", "url": "https://github.com/opencast/opencast/pull/1763#discussion_r470029064", "createdAt": "2020-08-13T15:16:18Z", "author": {"login": "lkiesow"}, "path": "modules/admin-ui/src/main/java/org/opencastproject/adminui/endpoint/VersionEndpoint.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/**\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ *\n+ * The Apereo Foundation licenses this file to you under the Educational\n+ * Community License, Version 2.0 (the \"License\"); you may not use this file\n+ * except in compliance with the License. You may obtain a copy of the License\n+ * at:\n+ *\n+ *   http://opensource.org/licenses/ecl2.txt\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.opencastproject.adminui.endpoint;\n+\n+import static org.apache.http.HttpStatus.SC_OK;\n+\n+import org.opencastproject.util.doc.rest.RestQuery;\n+import org.opencastproject.util.doc.rest.RestResponse;\n+import org.opencastproject.util.doc.rest.RestService;\n+\n+import com.google.gson.Gson;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Map;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/\")\n+@RestService(name = \"VersionService\", title = \"Version service\",\n+  abstractText = \"Provides latest opencast version\",\n+  notes = { \"This service offers the GET method to retrieve the latest opencast version from https://api.github.com .\"})\n+@Component(\n+  immediate = true,\n+  service = VersionEndpoint.class,\n+  property = {\n+    \"service.description=Admin UI - Latest Version Endpoint\",\n+    \"opencast.service.type=org.opencastproject.adminui.endpoint.VersionEndpoint\",\n+    \"opencast.service.path=/admin-ng/oc-version\"\n+  }\n+)\n+public class VersionEndpoint {\n+\n+  /** The logging facility */\n+  private static final Logger logger = LoggerFactory.getLogger(VersionEndpoint.class);\n+\n+  /** The version */\n+  private String version = \"\";\n+\n+  /** GitHub URL */\n+  private String url = \"https://api.github.com/repos/opencast/opencast/releases/latest\";\n+\n+  /** The date */\n+  private long lastUpdated = 0;\n+\n+  private static final Gson gson = new Gson();\n+\n+  /** OSGi callback. */\n+  @Activate\n+  protected void activate() {\n+    logger.info(\"Activate the Admin ui - Latest version endpoint\");\n+  }\n+\n+  @GET\n+  @Path(\"version.json\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @RestQuery(name = \"latestversion\", description = \"Returns the latest Opencast version\",\n+          returnDescription = \"Returns the latest Opencast version retrieved from GitHub\",\n+          reponses = { @RestResponse(responseCode = SC_OK, description = \"The latest Opencast version.\") })\n+  public String getVersion() {\n+    if (System.currentTimeMillis() / 1000L - lastUpdated >= 3600) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAyMjAwNw=="}, "originalCommit": {"oid": "f621ec0286481e59c7459177a102d1c8c1e3b41c"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAzNzU0Ng==", "bodyText": "Ah, I see what you're saying.  I'm not sure that avoiding the single thread matters, but you're correct in that this approach will scale better.", "url": "https://github.com/opencast/opencast/pull/1763#discussion_r470037546", "createdAt": "2020-08-13T15:28:09Z", "author": {"login": "gregorydlogan"}, "path": "modules/admin-ui/src/main/java/org/opencastproject/adminui/endpoint/VersionEndpoint.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/**\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ *\n+ * The Apereo Foundation licenses this file to you under the Educational\n+ * Community License, Version 2.0 (the \"License\"); you may not use this file\n+ * except in compliance with the License. You may obtain a copy of the License\n+ * at:\n+ *\n+ *   http://opensource.org/licenses/ecl2.txt\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.opencastproject.adminui.endpoint;\n+\n+import static org.apache.http.HttpStatus.SC_OK;\n+\n+import org.opencastproject.util.doc.rest.RestQuery;\n+import org.opencastproject.util.doc.rest.RestResponse;\n+import org.opencastproject.util.doc.rest.RestService;\n+\n+import com.google.gson.Gson;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Map;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/\")\n+@RestService(name = \"VersionService\", title = \"Version service\",\n+  abstractText = \"Provides latest opencast version\",\n+  notes = { \"This service offers the GET method to retrieve the latest opencast version from https://api.github.com .\"})\n+@Component(\n+  immediate = true,\n+  service = VersionEndpoint.class,\n+  property = {\n+    \"service.description=Admin UI - Latest Version Endpoint\",\n+    \"opencast.service.type=org.opencastproject.adminui.endpoint.VersionEndpoint\",\n+    \"opencast.service.path=/admin-ng/oc-version\"\n+  }\n+)\n+public class VersionEndpoint {\n+\n+  /** The logging facility */\n+  private static final Logger logger = LoggerFactory.getLogger(VersionEndpoint.class);\n+\n+  /** The version */\n+  private String version = \"\";\n+\n+  /** GitHub URL */\n+  private String url = \"https://api.github.com/repos/opencast/opencast/releases/latest\";\n+\n+  /** The date */\n+  private long lastUpdated = 0;\n+\n+  private static final Gson gson = new Gson();\n+\n+  /** OSGi callback. */\n+  @Activate\n+  protected void activate() {\n+    logger.info(\"Activate the Admin ui - Latest version endpoint\");\n+  }\n+\n+  @GET\n+  @Path(\"version.json\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @RestQuery(name = \"latestversion\", description = \"Returns the latest Opencast version\",\n+          returnDescription = \"Returns the latest Opencast version retrieved from GitHub\",\n+          reponses = { @RestResponse(responseCode = SC_OK, description = \"The latest Opencast version.\") })\n+  public String getVersion() {\n+    if (System.currentTimeMillis() / 1000L - lastUpdated >= 3600) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAyMjAwNw=="}, "originalCommit": {"oid": "f621ec0286481e59c7459177a102d1c8c1e3b41c"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0ODU3NDk5OnYy", "diffSide": "RIGHT", "path": "modules/admin-ui-frontend/app/scripts/shared/services/restServiceMonitor.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxOTo0NDoxMFrOHB4cCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNzowMjowNFrOHC4T-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTczNTMwNg==", "bodyText": "Testing this, I patched out the endpoint to return \"10.0\" as the version.  This line generates links to https://docs.opencast.org/r/1.x/admin/ rather than https://docs.opencast.org/r/10.x/admin/\nOtherwise looks good and works as expected!", "url": "https://github.com/opencast/opencast/pull/1763#discussion_r471735306", "createdAt": "2020-08-17T19:44:10Z", "author": {"login": "gregorydlogan"}, "path": "modules/admin-ui-frontend/app/scripts/shared/services/restServiceMonitor.js", "diffHunk": "@@ -45,6 +48,43 @@ angular.module('adminNg.services')\n \n     Monitoring.getActiveMQStats();\n     Monitoring.getBasicServiceStats();\n+    Monitoring.getVersionStats();\n+  };\n+\n+  Monitoring.getVersionStats = function() {\n+    $http.get(MY_VERSION_PATH).then(function(response_my_version) {\n+      $http.get(LATEST_VERSION_PATH).then(function(response_latest_version) {\n+        Monitoring.populateService(LATEST_VERSION_NAME);\n+\n+        if (response_latest_version.status === 200 && response_my_version.status === 200\n+        && response_my_version.data.consistent) {\n+          var my_version = response_my_version.data.version;\n+          var latest_version = response_latest_version.data;\n+          services.service[LATEST_VERSION_NAME].docs_url =\n+            'https://docs.opencast.org/r/' + latest_version[0] + '.x/admin/';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2257e7eabaa8ef6426da2e3db39417fc9cdd2417"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc4MTgxOA==", "bodyText": "You are right. I patched this and it should work now. Thanks!", "url": "https://github.com/opencast/opencast/pull/1763#discussion_r472781818", "createdAt": "2020-08-19T07:02:04Z", "author": {"login": "mheyen"}, "path": "modules/admin-ui-frontend/app/scripts/shared/services/restServiceMonitor.js", "diffHunk": "@@ -45,6 +48,43 @@ angular.module('adminNg.services')\n \n     Monitoring.getActiveMQStats();\n     Monitoring.getBasicServiceStats();\n+    Monitoring.getVersionStats();\n+  };\n+\n+  Monitoring.getVersionStats = function() {\n+    $http.get(MY_VERSION_PATH).then(function(response_my_version) {\n+      $http.get(LATEST_VERSION_PATH).then(function(response_latest_version) {\n+        Monitoring.populateService(LATEST_VERSION_NAME);\n+\n+        if (response_latest_version.status === 200 && response_my_version.status === 200\n+        && response_my_version.data.consistent) {\n+          var my_version = response_my_version.data.version;\n+          var latest_version = response_latest_version.data;\n+          services.service[LATEST_VERSION_NAME].docs_url =\n+            'https://docs.opencast.org/r/' + latest_version[0] + '.x/admin/';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTczNTMwNg=="}, "originalCommit": {"oid": "2257e7eabaa8ef6426da2e3db39417fc9cdd2417"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3163, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}