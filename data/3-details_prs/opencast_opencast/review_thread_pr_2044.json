{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1MDk0MjQ4", "number": 2044, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMDoxMToyMVrOE3ZS9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMDo0Nzo1NVrOE3aC6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NTIxNTkwOnYy", "diffSide": "RIGHT", "path": "modules/distribution-service-aws-s3/src/main/java/org/opencastproject/distribution/aws/s3/AwsS3DistributionServiceImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMDoxMToyMVrOHwt22A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMjozMDowOVrOHz74Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg0NTAxNg==", "bodyText": "We should be enforcing a maximum here.  Looking at the AWS docs, a simple max of 6 hours ought to do it - then we don't have to figure out what kind of credentials we are working with.", "url": "https://github.com/opencast/opencast/pull/2044#discussion_r520845016", "createdAt": "2020-11-10T20:11:21Z", "author": {"login": "gregorydlogan"}, "path": "modules/distribution-service-aws-s3/src/main/java/org/opencastproject/distribution/aws/s3/AwsS3DistributionServiceImpl.java", "diffHunk": "@@ -227,6 +241,16 @@ public void activate(ComponentContext cc) {\n       pathStyle = Boolean.valueOf(getAWSConfigKey(cc, AWS_S3_PATH_STYLE_CONFIG));\n       logger.info(\"AWS path style is {}\", pathStyle);\n \n+      // AWS presigned URL\n+      String presignedUrlConfigValue = OsgiUtil.getComponentContextProperty(cc, AWS_S3_PRESIGNED_URL_CONFIG, \"false\");\n+      presignedUrl = StringUtils.equalsIgnoreCase(\"true\", presignedUrlConfigValue);\n+      logger.info(\"AWS use presigned URL: {}\", presignedUrl);\n+\n+      // AWS presigned URL expiration time in millis\n+      String presignedUrlExpTimeMillisConfigValue = OsgiUtil.getComponentContextProperty(cc,\n+              AWS_S3_PRESIGNED_URL_VALID_DURATION_CONFIG, null);\n+      presignedUrlValidDuration = NumberUtils.toInt(presignedUrlExpTimeMillisConfigValue, DEFAULT_PRESIGNED_URL_EXPIRE_MILLIS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc0b8b2129c7c1a0b036fc432def78f622949b55"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzkyNjEyNA==", "bodyText": "You mean, set the valid duration to 6 hours and remove the AWS_S3_PRESIGNED_URL_VALID_DURATION_CONFIG ?\nWhat about set the default value to 6 hours, and still give users the ability to change it?", "url": "https://github.com/opencast/opencast/pull/2044#discussion_r523926124", "createdAt": "2020-11-16T06:47:16Z", "author": {"login": "Gao-Jun"}, "path": "modules/distribution-service-aws-s3/src/main/java/org/opencastproject/distribution/aws/s3/AwsS3DistributionServiceImpl.java", "diffHunk": "@@ -227,6 +241,16 @@ public void activate(ComponentContext cc) {\n       pathStyle = Boolean.valueOf(getAWSConfigKey(cc, AWS_S3_PATH_STYLE_CONFIG));\n       logger.info(\"AWS path style is {}\", pathStyle);\n \n+      // AWS presigned URL\n+      String presignedUrlConfigValue = OsgiUtil.getComponentContextProperty(cc, AWS_S3_PRESIGNED_URL_CONFIG, \"false\");\n+      presignedUrl = StringUtils.equalsIgnoreCase(\"true\", presignedUrlConfigValue);\n+      logger.info(\"AWS use presigned URL: {}\", presignedUrl);\n+\n+      // AWS presigned URL expiration time in millis\n+      String presignedUrlExpTimeMillisConfigValue = OsgiUtil.getComponentContextProperty(cc,\n+              AWS_S3_PRESIGNED_URL_VALID_DURATION_CONFIG, null);\n+      presignedUrlValidDuration = NumberUtils.toInt(presignedUrlExpTimeMillisConfigValue, DEFAULT_PRESIGNED_URL_EXPIRE_MILLIS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg0NTAxNg=="}, "originalCommit": {"oid": "bc0b8b2129c7c1a0b036fc432def78f622949b55"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIyMDQ5MA==", "bodyText": "I'm fine setting the default to 6 hours, and leaving the ability to change it, but reading the presigned url docs there is an absolute max duration we can create a valid URL for.  We should be trying to make sure we can't let the Opencast adopter set up requests which are invalid for their account type.\nMy initial read was incorrect in thinking 6 hours was the value, in actuality 7 days is the max with the right mix of credentials and signing version.  I would set the default to 6 hours, and have it check to make sure the user has not specified a duration longer than 7 days.  Ideally we could check the credential type, but I'm not entirely sure how to do that.  If you know how then adding some logic to automatically select the correct AWS-defined maximum duration would be awesome too.", "url": "https://github.com/opencast/opencast/pull/2044#discussion_r524220490", "createdAt": "2020-11-16T12:30:09Z", "author": {"login": "gregorydlogan"}, "path": "modules/distribution-service-aws-s3/src/main/java/org/opencastproject/distribution/aws/s3/AwsS3DistributionServiceImpl.java", "diffHunk": "@@ -227,6 +241,16 @@ public void activate(ComponentContext cc) {\n       pathStyle = Boolean.valueOf(getAWSConfigKey(cc, AWS_S3_PATH_STYLE_CONFIG));\n       logger.info(\"AWS path style is {}\", pathStyle);\n \n+      // AWS presigned URL\n+      String presignedUrlConfigValue = OsgiUtil.getComponentContextProperty(cc, AWS_S3_PRESIGNED_URL_CONFIG, \"false\");\n+      presignedUrl = StringUtils.equalsIgnoreCase(\"true\", presignedUrlConfigValue);\n+      logger.info(\"AWS use presigned URL: {}\", presignedUrl);\n+\n+      // AWS presigned URL expiration time in millis\n+      String presignedUrlExpTimeMillisConfigValue = OsgiUtil.getComponentContextProperty(cc,\n+              AWS_S3_PRESIGNED_URL_VALID_DURATION_CONFIG, null);\n+      presignedUrlValidDuration = NumberUtils.toInt(presignedUrlExpTimeMillisConfigValue, DEFAULT_PRESIGNED_URL_EXPIRE_MILLIS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg0NTAxNg=="}, "originalCommit": {"oid": "bc0b8b2129c7c1a0b036fc432def78f622949b55"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NTMwMjcxOnYy", "diffSide": "RIGHT", "path": "modules/authorization-xacml/src/main/java/org/opencastproject/authorization/xacml/XACMLAuthorizationService.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMDozNzozOFrOHwur5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0wNlQwODowNTo1N1rOJ5jc4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg1ODU5Ng==", "bodyText": "I see a total of four MediaPackageSerializer implementations in the codebase, two of which would always be present.  At runtime you're going to get one of them, but perhaps not the right one.  I can see this especially being true if the adopter is distributing via both S3 and Opencast URL signing since these are both implemented with a serializer.", "url": "https://github.com/opencast/opencast/pull/2044#discussion_r520858596", "createdAt": "2020-11-10T20:37:38Z", "author": {"login": "gregorydlogan"}, "path": "modules/authorization-xacml/src/main/java/org/opencastproject/authorization/xacml/XACMLAuthorizationService.java", "diffHunk": "@@ -110,6 +116,11 @@ public void modified(Map<String, Object> config) {\n     // updated() will handle the configuration update.\n   }\n \n+  @Reference(cardinality = ReferenceCardinality.OPTIONAL)\n+  public void setMediaPackageSerializer(MediaPackageSerializer serializer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc0b8b2129c7c1a0b036fc432def78f622949b55"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzkyNzA1MA==", "bodyText": "Yes, there are several MediaPackageSerializer. Yet, all of these are managed by ChainingMediaPackageSerializer, and the encodeURI, decodeURI method will processed by all serializer one by one.\nSerializers will check if the input URI should be processed by them. And PresignedUrlMediaPackageSerializer will only handle URI match S3 config.", "url": "https://github.com/opencast/opencast/pull/2044#discussion_r523927050", "createdAt": "2020-11-16T06:50:16Z", "author": {"login": "Gao-Jun"}, "path": "modules/authorization-xacml/src/main/java/org/opencastproject/authorization/xacml/XACMLAuthorizationService.java", "diffHunk": "@@ -110,6 +116,11 @@ public void modified(Map<String, Object> config) {\n     // updated() will handle the configuration update.\n   }\n \n+  @Reference(cardinality = ReferenceCardinality.OPTIONAL)\n+  public void setMediaPackageSerializer(MediaPackageSerializer serializer) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg1ODU5Ng=="}, "originalCommit": {"oid": "bc0b8b2129c7c1a0b036fc432def78f622949b55"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NDMyOTQ0MQ==", "bodyText": "I think this can currently break in two ways, the first of which we are experiencing right now at SWITCH:\n\nThis will cause workspace ACL URLs to be signed with a Stream Security policy since the signing provider only has a base URL to go on (in this case the admin URL) and that matches here, but the signing provider wasn't previously invoked in this context. This will later cause workspace and WFR URLs not to match, which will cause unnecessary reloading of files.\nAs Greg said, there are multiple services providing the MediaPackageSerializer interface available via OSGI, so I don't see how you can guarantee to get the right one (or the one chaining up the rest). But then, we seem to do just that in other classes as well, and I don't understand how that works? Luck??", "url": "https://github.com/opencast/opencast/pull/2044#discussion_r664329441", "createdAt": "2021-07-06T08:05:57Z", "author": {"login": "KatrinIhler"}, "path": "modules/authorization-xacml/src/main/java/org/opencastproject/authorization/xacml/XACMLAuthorizationService.java", "diffHunk": "@@ -110,6 +116,11 @@ public void modified(Map<String, Object> config) {\n     // updated() will handle the configuration update.\n   }\n \n+  @Reference(cardinality = ReferenceCardinality.OPTIONAL)\n+  public void setMediaPackageSerializer(MediaPackageSerializer serializer) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg1ODU5Ng=="}, "originalCommit": {"oid": "bc0b8b2129c7c1a0b036fc432def78f622949b55"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NTMzODY1OnYy", "diffSide": "RIGHT", "path": "etc/org.opencastproject.distribution.aws.s3.AwsS3DistributionServiceImpl.cfg", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMDo0Nzo1NVrOHwvBgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwNjo1NDozN1rOHzqDHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg2NDEzMA==", "bodyText": "There should be a blank line between config and description of the next key.", "url": "https://github.com/opencast/opencast/pull/2044#discussion_r520864130", "createdAt": "2020-11-10T20:47:55Z", "author": {"login": "gregorydlogan"}, "path": "etc/org.opencastproject.distribution.aws.s3.AwsS3DistributionServiceImpl.cfg", "diffHunk": "@@ -44,4 +44,8 @@ org.opencastproject.distribution.aws.s3.distribution.enable=false\n # If you are using another S3 service/provider, please refer to its documentation.\n #org.opencastproject.distribution.aws.s3.path.style=true\n \n-\n+# Enable presigned URL\n+# Leave this commented out to use presigned URL fow AWS S3\n+#org.opencastproject.distribution.aws.s3.presigned.url=true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc0b8b2129c7c1a0b036fc432def78f622949b55"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzkyODM1MQ==", "bodyText": "That's easy, I'll update the PR once the former problems solved.", "url": "https://github.com/opencast/opencast/pull/2044#discussion_r523928351", "createdAt": "2020-11-16T06:54:37Z", "author": {"login": "Gao-Jun"}, "path": "etc/org.opencastproject.distribution.aws.s3.AwsS3DistributionServiceImpl.cfg", "diffHunk": "@@ -44,4 +44,8 @@ org.opencastproject.distribution.aws.s3.distribution.enable=false\n # If you are using another S3 service/provider, please refer to its documentation.\n #org.opencastproject.distribution.aws.s3.path.style=true\n \n-\n+# Enable presigned URL\n+# Leave this commented out to use presigned URL fow AWS S3\n+#org.opencastproject.distribution.aws.s3.presigned.url=true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg2NDEzMA=="}, "originalCommit": {"oid": "bc0b8b2129c7c1a0b036fc432def78f622949b55"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3091, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}