{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4ODAzODg0", "number": 2106, "title": "Attempt to detect invalid DB credentials", "bodyText": "Adding an attempt to check if the database user permissions are correct.  This is by no means comprehensive, but will catch a bunch of easily missed situations.  The exception looks like the following, and stops Opencast from booting:\n2020-11-27T16:28:35,989 | ERROR | (BootFeaturesInstaller:113) - Error installing boot features\norg.apache.karaf.features.internal.util.MultiException: Error restarting bundles:\n        Activator start error in bundle opencast-db [80].\n        at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:1044) ~[?:?]\n        at org.apache.karaf.features.internal.service.FeaturesServiceImpl.doProvision(FeaturesServiceImpl.java:1062) ~[?:?]\n        at org.apache.karaf.features.internal.service.FeaturesServiceImpl.lambda$doProvisionInThread$13(FeaturesServiceImpl.java:998) ~[?:?]\n        at java.util.concurrent.FutureTask.run(FutureTask.java:264) [?:?]\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) [?:?]\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) [?:?]\n        at java.lang.Thread.run(Thread.java:834) [?:?]\n        Suppressed: org.osgi.framework.BundleException: Activator start error in bundle opencast-db [80].\n                at org.apache.felix.framework.Felix.activateBundle(Felix.java:2290) ~[?:?]\n                at org.apache.felix.framework.Felix.startBundle(Felix.java:2146) ~[?:?]\n                at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:998) ~[?:?]\n                at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:984) ~[?:?]\n                at org.apache.karaf.features.internal.service.BundleInstallSupportImpl.startBundle(BundleInstallSupportImpl.java:165) ~[?:?]\n                at org.apache.karaf.features.internal.service.FeaturesServiceImpl.startBundle(FeaturesServiceImpl.java:1153) ~[?:?]\n                at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:1036) ~[?:?]\n                at org.apache.karaf.features.internal.service.FeaturesServiceImpl.doProvision(FeaturesServiceImpl.java:1062) ~[?:?]\n                at org.apache.karaf.features.internal.service.FeaturesServiceImpl.lambda$doProvisionInThread$13(FeaturesServiceImpl.java:998) ~[?:?]\n                at java.util.concurrent.FutureTask.run(FutureTask.java:264) [?:?]\n                at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) [?:?]\n                at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) [?:?]\n                at java.lang.Thread.run(Thread.java:834) [?:?]\n        Caused by: java.lang.RuntimeException: Unable to verify SQL credentials have required permissions!\n                at org.opencastproject.db.Activator.start(Activator.java:161) ~[?:?]\n                at org.apache.felix.framework.util.SecureAction.startActivator(SecureAction.java:697) ~[?:?]\n                at org.apache.felix.framework.Felix.activateBundle(Felix.java:2240) ~[?:?]\n                ... 12 more\n\nNote: I've tested against MariaDB 10 so this will probably work against MySQL as well. We should double check that it works against PostgreSQL though...\nYour pull request should\u2026\n\n have a concise title\n close an accompanying issue if one exists\n be against the correct branch (features can only go into develop)\n include migration scripts and documentation, if appropriate\n pass automated tests\n have a clean commit history\n have proper commit messages (title and body) for all commits", "createdAt": "2020-11-27T22:31:47Z", "url": "https://github.com/opencast/opencast/pull/2106", "merged": true, "mergeCommit": {"oid": "40fc9a11430c3208d8af1200578752787ce01f56"}, "closed": true, "closedAt": "2021-01-05T16:26:02Z", "author": {"login": "gregorydlogan"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdgvT3fgH2gAyNTI4ODAzODg0OjhhY2RhNzA4ZmEwMzA5Y2M5NGE1ZjQwZTVmZTM1ZmUwZTNmNWE4ZGI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABds-XUKgFqTU2MTQwMjUzOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8acda708fa0309cc94a5f40e5fe35fe0e3f5a8db", "author": {"user": {"login": "gregorydlogan", "name": "Greg Logan"}}, "url": "https://github.com/opencast/opencast/commit/8acda708fa0309cc94a5f40e5fe35fe0e3f5a8db", "committedDate": "2020-11-27T22:30:03Z", "message": "Adding an attempt to check if the database user permissions are correct.  This is by no means comprehensive, but will catch a bunch of easily missed situations."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwNDEyMTAx", "url": "https://github.com/opencast/opencast/pull/2106#pullrequestreview-540412101", "createdAt": "2020-11-28T19:20:58Z", "commit": {"oid": "8acda708fa0309cc94a5f40e5fe35fe0e3f5a8db"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQxOToyMDo1OFrOH7cmDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQxOTo0MzoxMVrOH7cunw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA5NjUyNw==", "bodyText": "Nitpicking ;-P\nTo be consistent with the other table names:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                String tableName = \"oc-temp\" + time;\n          \n          \n            \n                String tableName = \"oc_temp_\" + time;", "url": "https://github.com/opencast/opencast/pull/2106#discussion_r532096527", "createdAt": "2020-11-28T19:20:58Z", "author": {"login": "lkiesow"}, "path": "modules/db/src/main/java/org/opencastproject/db/Activator.java", "diffHunk": "@@ -137,6 +139,36 @@ else if (pooledDataSource.getMaxIdleTime() == 0) {\n     logger.info(\"Database connection pool established at {}\", jdbcUrl);\n     logger.info(\"Database connection pool parameters: max.size={}, min.size={}, max.idle.time={}\",\n       pooledDataSource.getMaxPoolSize(), pooledDataSource.getMinPoolSize(), pooledDataSource.getMaxIdleTime());\n+    Statement statement = pooledDataSource.getConnection().createStatement();\n+\n+    long time = System.currentTimeMillis();\n+    String tableName = \"oc-temp\" + time;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8acda708fa0309cc94a5f40e5fe35fe0e3f5a8db"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA5ODI2MQ==", "bodyText": "I don't think this is actually doing what you want it to do. You are selecting the entry with id = time + 2 but you only ever set id = time and id = time + 1. This means that you never actually go into the loop. Also, one simple insert should suffice for this test:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  runUpdate(statement, \"INSERT INTO \" + tableName + \" VALUES (\" + time + \",\" + time + \");\");\n          \n          \n            \n                  runUpdate(statement, \"INSERT INTO \" + tableName + \" VALUES (\" + time + 1 + \",\" + time + 1 + \");\");\n          \n          \n            \n                  runUpdate(statement, \"UPDATE \" + tableName + \" SET test = \" + time + 2 + \" WHERE id = \" + time + \";\");\n          \n          \n            \n                  ResultSet rs = statement.executeQuery(\"SELECT FROM \" + tableName + \" WHERE id = \" + time + 2 + \";\");\n          \n          \n            \n                  while (rs.next()) {\n          \n          \n            \n                    long id = rs.getLong(\"id\");\n          \n          \n            \n                    long test = rs.getLong(\"test\");\n          \n          \n            \n                    if (id != time || test != time + 2) {\n          \n          \n            \n                  runUpdate(statement, \"INSERT INTO \" + tableName + \" VALUES (\" + time + \", 0);\");\n          \n          \n            \n                  runUpdate(statement, \"UPDATE \" + tableName + \" SET test = \" + time + \";\");\n          \n          \n            \n                  ResultSet rs = statement.executeQuery(\"SELECT FROM \" + tableName + \";\");\n          \n          \n            \n                  while (rs.next()) {\n          \n          \n            \n                    long id = rs.getLong(\"id\");\n          \n          \n            \n                    long test = rs.getLong(\"test\");\n          \n          \n            \n                    if (id != time || test != time) {", "url": "https://github.com/opencast/opencast/pull/2106#discussion_r532098261", "createdAt": "2020-11-28T19:39:01Z", "author": {"login": "lkiesow"}, "path": "modules/db/src/main/java/org/opencastproject/db/Activator.java", "diffHunk": "@@ -137,6 +139,36 @@ else if (pooledDataSource.getMaxIdleTime() == 0) {\n     logger.info(\"Database connection pool established at {}\", jdbcUrl);\n     logger.info(\"Database connection pool parameters: max.size={}, min.size={}, max.idle.time={}\",\n       pooledDataSource.getMaxPoolSize(), pooledDataSource.getMinPoolSize(), pooledDataSource.getMaxIdleTime());\n+    Statement statement = pooledDataSource.getConnection().createStatement();\n+\n+    long time = System.currentTimeMillis();\n+    String tableName = \"oc-temp\" + time;\n+    try {\n+      runUpdate(statement, \"CREATE TABLE \" + tableName + \" ( id BIGINT NOT NULL, test BIGINT, PRIMARY KEY (id) );\");\n+      runUpdate(statement, \"INSERT INTO \" + tableName + \" VALUES (\" + time + \",\" + time + \");\");\n+      runUpdate(statement, \"INSERT INTO \" + tableName + \" VALUES (\" + time + 1 + \",\" + time + 1 + \");\");\n+      runUpdate(statement, \"UPDATE \" + tableName + \" SET test = \" + time + 2 + \" WHERE id = \" + time + \";\");\n+      ResultSet rs = statement.executeQuery(\"SELECT FROM \" + tableName + \" WHERE id = \" + time + 2 + \";\");\n+      while (rs.next()) {\n+        long id = rs.getLong(\"id\");\n+        long test = rs.getLong(\"test\");\n+        if (id != time || test != time + 2) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8acda708fa0309cc94a5f40e5fe35fe0e3f5a8db"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA5ODUyNQ==", "bodyText": "I think using a unique table name is a good solution for this problem. But imaging a cluster to start up at the same time. That would potentially select the same table names. Maybe just pick a large random number instead?", "url": "https://github.com/opencast/opencast/pull/2106#discussion_r532098525", "createdAt": "2020-11-28T19:41:09Z", "author": {"login": "lkiesow"}, "path": "modules/db/src/main/java/org/opencastproject/db/Activator.java", "diffHunk": "@@ -137,6 +139,36 @@ else if (pooledDataSource.getMaxIdleTime() == 0) {\n     logger.info(\"Database connection pool established at {}\", jdbcUrl);\n     logger.info(\"Database connection pool parameters: max.size={}, min.size={}, max.idle.time={}\",\n       pooledDataSource.getMaxPoolSize(), pooledDataSource.getMinPoolSize(), pooledDataSource.getMaxIdleTime());\n+    Statement statement = pooledDataSource.getConnection().createStatement();\n+\n+    long time = System.currentTimeMillis();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8acda708fa0309cc94a5f40e5fe35fe0e3f5a8db"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA5ODcxOQ==", "bodyText": "In case of an error, we might leave a random table in the database. We could try deleting it in case of an error?\nSomething like this in a final block (catching and ignoring excepzions):\nrunUpdate(statement, \"DROP TABLE \" + tableName + \";\");", "url": "https://github.com/opencast/opencast/pull/2106#discussion_r532098719", "createdAt": "2020-11-28T19:43:11Z", "author": {"login": "lkiesow"}, "path": "modules/db/src/main/java/org/opencastproject/db/Activator.java", "diffHunk": "@@ -137,6 +139,36 @@ else if (pooledDataSource.getMaxIdleTime() == 0) {\n     logger.info(\"Database connection pool established at {}\", jdbcUrl);\n     logger.info(\"Database connection pool parameters: max.size={}, min.size={}, max.idle.time={}\",\n       pooledDataSource.getMaxPoolSize(), pooledDataSource.getMinPoolSize(), pooledDataSource.getMaxIdleTime());\n+    Statement statement = pooledDataSource.getConnection().createStatement();\n+\n+    long time = System.currentTimeMillis();\n+    String tableName = \"oc-temp\" + time;\n+    try {\n+      runUpdate(statement, \"CREATE TABLE \" + tableName + \" ( id BIGINT NOT NULL, test BIGINT, PRIMARY KEY (id) );\");\n+      runUpdate(statement, \"INSERT INTO \" + tableName + \" VALUES (\" + time + \",\" + time + \");\");\n+      runUpdate(statement, \"INSERT INTO \" + tableName + \" VALUES (\" + time + 1 + \",\" + time + 1 + \");\");\n+      runUpdate(statement, \"UPDATE \" + tableName + \" SET test = \" + time + 2 + \" WHERE id = \" + time + \";\");\n+      ResultSet rs = statement.executeQuery(\"SELECT FROM \" + tableName + \" WHERE id = \" + time + 2 + \";\");\n+      while (rs.next()) {\n+        long id = rs.getLong(\"id\");\n+        long test = rs.getLong(\"test\");\n+        if (id != time || test != time + 2) {\n+          throw new RuntimeException(\"Unable to verify updating a table functions correctly\");\n+        }\n+      }\n+      runUpdate(statement, \"DELETE FROM \" + tableName + \" WHERE id = \" + time + \";\");\n+      runUpdate(statement, \"DROP TABLE \" + tableName + \";\");\n+    } catch (Exception e) {\n+      throw new RuntimeException(\"Unable to verify SQL credentials have required permissions!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8acda708fa0309cc94a5f40e5fe35fe0e3f5a8db"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b80b20e9d18dcf2b126017a8852d3889f99a4d76", "author": {"user": {"login": "gregorydlogan", "name": "Greg Logan"}}, "url": "https://github.com/opencast/opencast/commit/b80b20e9d18dcf2b126017a8852d3889f99a4d76", "committedDate": "2020-12-01T03:11:19Z", "message": "Addressing review comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0240f96149c41a8f926ff3ad7cfedf558f7688a3", "author": {"user": {"login": "gregorydlogan", "name": "Greg Logan"}}, "url": "https://github.com/opencast/opencast/commit/0240f96149c41a8f926ff3ad7cfedf558f7688a3", "committedDate": "2020-12-01T02:50:32Z", "message": "Addressing review comments"}, "afterCommit": {"oid": "b80b20e9d18dcf2b126017a8852d3889f99a4d76", "author": {"user": {"login": "gregorydlogan", "name": "Greg Logan"}}, "url": "https://github.com/opencast/opencast/commit/b80b20e9d18dcf2b126017a8852d3889f99a4d76", "committedDate": "2020-12-01T03:11:19Z", "message": "Addressing review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MDY3NTY5", "url": "https://github.com/opencast/opencast/pull/2106#pullrequestreview-556067569", "createdAt": "2020-12-20T22:32:09Z", "commit": {"oid": "b80b20e9d18dcf2b126017a8852d3889f99a4d76"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "483cfd4f29d4c263f9840a762b106e9a6b00a7bb", "author": {"user": {"login": "gregorydlogan", "name": "Greg Logan"}}, "url": "https://github.com/opencast/opencast/commit/483cfd4f29d4c263f9840a762b106e9a6b00a7bb", "committedDate": "2021-01-04T21:08:54Z", "message": "Fixing a bunch of broken logic.\n\n1) double -> long: Table names can't have dots in them (duh).\n2) SELECT needs to know what it's selecting.\n3) CREATE and DROP table does not generate an affected, yielding a failed test."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxNDAyNTM4", "url": "https://github.com/opencast/opencast/pull/2106#pullrequestreview-561402538", "createdAt": "2021-01-04T22:49:29Z", "commit": {"oid": "483cfd4f29d4c263f9840a762b106e9a6b00a7bb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1764, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}