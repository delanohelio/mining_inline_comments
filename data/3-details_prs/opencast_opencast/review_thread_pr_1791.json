{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwNzk5NDIw", "number": 1791, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMToyMTozMlrOEoCM1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMTozNDozMVrOEoCdEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDE0NTUxOnYy", "diffSide": "RIGHT", "path": "modules/external-api/src/main/java/org/opencastproject/external/endpoint/SeriesEndpoint.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMToyMTozMlrOHY5SYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNzo0MDoxMlrOHbj32Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg2NjQ2NQ==", "bodyText": "I remember a mailing list discussion about brace style and I think the vast majority of responses were in favor of Greg's proposal to make braces mandatory.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  if (series.getAccessPolicy() != null)\n          \n          \n            \n                    activeAcl = AccessControlParser.parseAcl(series.getAccessPolicy());\n          \n          \n            \n                  if (series.getAccessPolicy() != null) {\n          \n          \n            \n                    activeAcl = AccessControlParser.parseAcl(series.getAccessPolicy());\n          \n          \n            \n                  }", "url": "https://github.com/opencast/opencast/pull/1791#discussion_r495866465", "createdAt": "2020-09-28T11:21:32Z", "author": {"login": "LukasKalbertodt"}, "path": "modules/external-api/src/main/java/org/opencastproject/external/endpoint/SeriesEndpoint.java", "diffHunk": "@@ -344,15 +359,45 @@ public JValue apply(SearchResultItem<Series> a) {\n     }\n   }\n \n+  /**\n+   * Get an {@link AccessControlList} from a {@link Series}.\n+   *\n+   * @param series\n+   *          The {@link Series} to get the ACL from.\n+   * @return The {@link AccessControlList} stored in the {@link Series}\n+   */\n+  private static AccessControlList getAclFromSeries(Series series) {\n+    AccessControlList activeAcl = new AccessControlList();\n+    try {\n+      if (series.getAccessPolicy() != null)\n+        activeAcl = AccessControlParser.parseAcl(series.getAccessPolicy());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "661fab6c39d8ab045ba1e59cce4363ae4164be8a"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY2MTMzNw==", "bodyText": "You're right. I simply copied this over from the EventsEndpoint, but I'll add some braces (I like braces!)", "url": "https://github.com/opencast/opencast/pull/1791#discussion_r498661337", "createdAt": "2020-10-02T07:40:12Z", "author": {"login": "KatrinIhler"}, "path": "modules/external-api/src/main/java/org/opencastproject/external/endpoint/SeriesEndpoint.java", "diffHunk": "@@ -344,15 +359,45 @@ public JValue apply(SearchResultItem<Series> a) {\n     }\n   }\n \n+  /**\n+   * Get an {@link AccessControlList} from a {@link Series}.\n+   *\n+   * @param series\n+   *          The {@link Series} to get the ACL from.\n+   * @return The {@link AccessControlList} stored in the {@link Series}\n+   */\n+  private static AccessControlList getAclFromSeries(Series series) {\n+    AccessControlList activeAcl = new AccessControlList();\n+    try {\n+      if (series.getAccessPolicy() != null)\n+        activeAcl = AccessControlParser.parseAcl(series.getAccessPolicy());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg2NjQ2NQ=="}, "originalCommit": {"oid": "661fab6c39d8ab045ba1e59cce4363ae4164be8a"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDE1MDU0OnYy", "diffSide": "RIGHT", "path": "modules/external-api/src/main/java/org/opencastproject/external/endpoint/SeriesEndpoint.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMToyMzoxMlrOHY5Vbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMDo0NToyNVrOHbpNUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg2NzI0Ng==", "bodyText": "Is \"log error and continue with dummy value\" a valid error handling style in Opencast? I would assume the API should respond with 5xx if parsing the ACL fails. But I am not sure, as I have no experience on how the API code usually handles these things.", "url": "https://github.com/opencast/opencast/pull/1791#discussion_r495867246", "createdAt": "2020-09-28T11:23:12Z", "author": {"login": "LukasKalbertodt"}, "path": "modules/external-api/src/main/java/org/opencastproject/external/endpoint/SeriesEndpoint.java", "diffHunk": "@@ -344,15 +359,45 @@ public JValue apply(SearchResultItem<Series> a) {\n     }\n   }\n \n+  /**\n+   * Get an {@link AccessControlList} from a {@link Series}.\n+   *\n+   * @param series\n+   *          The {@link Series} to get the ACL from.\n+   * @return The {@link AccessControlList} stored in the {@link Series}\n+   */\n+  private static AccessControlList getAclFromSeries(Series series) {\n+    AccessControlList activeAcl = new AccessControlList();\n+    try {\n+      if (series.getAccessPolicy() != null)\n+        activeAcl = AccessControlParser.parseAcl(series.getAccessPolicy());\n+    } catch (Exception e) {\n+      logger.error(\"Unable to parse access policy\", e);\n+    }\n+    return activeAcl;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "661fab6c39d8ab045ba1e59cce4363ae4164be8a"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY2NzI4MA==", "bodyText": "This is a tricky one. In general, this is probably not a good idea. However, if asking for a list of a series fails with 500 only because one ACL is broken, that's also gonna suck. I guess it would be possible not to include an ACL if it can't be parsed. However, then the series API and the event API will behave differently there. And changing the latter is not something I want to spend time on right now. So maybe this is okay since it falls back to the default ACL, which is \"allow nothing\". Opinions?", "url": "https://github.com/opencast/opencast/pull/1791#discussion_r498667280", "createdAt": "2020-10-02T07:53:04Z", "author": {"login": "KatrinIhler"}, "path": "modules/external-api/src/main/java/org/opencastproject/external/endpoint/SeriesEndpoint.java", "diffHunk": "@@ -344,15 +359,45 @@ public JValue apply(SearchResultItem<Series> a) {\n     }\n   }\n \n+  /**\n+   * Get an {@link AccessControlList} from a {@link Series}.\n+   *\n+   * @param series\n+   *          The {@link Series} to get the ACL from.\n+   * @return The {@link AccessControlList} stored in the {@link Series}\n+   */\n+  private static AccessControlList getAclFromSeries(Series series) {\n+    AccessControlList activeAcl = new AccessControlList();\n+    try {\n+      if (series.getAccessPolicy() != null)\n+        activeAcl = AccessControlParser.parseAcl(series.getAccessPolicy());\n+    } catch (Exception e) {\n+      logger.error(\"Unable to parse access policy\", e);\n+    }\n+    return activeAcl;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg2NzI0Ng=="}, "originalCommit": {"oid": "661fab6c39d8ab045ba1e59cce4363ae4164be8a"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODcxODYyMg==", "bodyText": "However, then the series API and the event API will behave differently there.\n\nThat's a shame. When was that part of the API added? Would it still be possible to change it without breaking backwards compatibility?\nI do think that using the default ACL as fallback is not a good idea. For software using the API, this can easily lead to strange errors down the line. Even if these programs would explicitly check for an empty ACL and interpret it as \"ACL cannot be parsed\", then we have no way of actually communicating an empty ACL. (Not sure if that can ever happen.)\nIn my opinion, if parsing the ACL should never happen (as in: if it fails, there is a bug somewhere else in Opencast), then the API should return 5xx in that case. If parsing failure is somewhat expected and does not imply a bug in Opencast, then the API should explicitly return acl: null or something like that to clearly indicate broken ACL.\nIn this week alone, strange and unexpected behaviors of the API were brought up twice in our internal meetings. Everyone just sighs, maybe laughs, but then carries on. If the Opencast community just keeps adding to the pile of strange API things, the situation is only gonna get worse. I am obviously not blaming you by the way; it's just the community's stance on this issue that I kind of criticize.\nSo I personally would not merge this PR, but fix the behavior as stated above and if somehow possible also fix the behavior of the event API to make them consistent. That said, this is not for me to decide. Maybe the benefits of having this API in 9.x outweighs the disadvantages of the strangeness. Maybe this can still be fixed after the feature freeze. And I probably just lack experience in this community to know what's best.", "url": "https://github.com/opencast/opencast/pull/1791#discussion_r498718622", "createdAt": "2020-10-02T09:37:36Z", "author": {"login": "LukasKalbertodt"}, "path": "modules/external-api/src/main/java/org/opencastproject/external/endpoint/SeriesEndpoint.java", "diffHunk": "@@ -344,15 +359,45 @@ public JValue apply(SearchResultItem<Series> a) {\n     }\n   }\n \n+  /**\n+   * Get an {@link AccessControlList} from a {@link Series}.\n+   *\n+   * @param series\n+   *          The {@link Series} to get the ACL from.\n+   * @return The {@link AccessControlList} stored in the {@link Series}\n+   */\n+  private static AccessControlList getAclFromSeries(Series series) {\n+    AccessControlList activeAcl = new AccessControlList();\n+    try {\n+      if (series.getAccessPolicy() != null)\n+        activeAcl = AccessControlParser.parseAcl(series.getAccessPolicy());\n+    } catch (Exception e) {\n+      logger.error(\"Unable to parse access policy\", e);\n+    }\n+    return activeAcl;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg2NzI0Ng=="}, "originalCommit": {"oid": "661fab6c39d8ab045ba1e59cce4363ae4164be8a"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc0ODc1Mg==", "bodyText": "I understands your frustration with the API in general and swallowing errors specifically , though I think this case isn't quite as bad. At least this way, Opencast offers a reasonable fallback (deny everything) instead of leaving every external system to figure this out for themselves.\nThe point of changing behaviour of existing API endpoints is that this can (per our rules) only be done for new API versions, so you would have to add a condition to the events API that handles broken ACLs differently for different versions. This is a general problem which stems from the trade-off between a stable API and improving things. Not sure if this case is worth it.", "url": "https://github.com/opencast/opencast/pull/1791#discussion_r498748752", "createdAt": "2020-10-02T10:45:25Z", "author": {"login": "KatrinIhler"}, "path": "modules/external-api/src/main/java/org/opencastproject/external/endpoint/SeriesEndpoint.java", "diffHunk": "@@ -344,15 +359,45 @@ public JValue apply(SearchResultItem<Series> a) {\n     }\n   }\n \n+  /**\n+   * Get an {@link AccessControlList} from a {@link Series}.\n+   *\n+   * @param series\n+   *          The {@link Series} to get the ACL from.\n+   * @return The {@link AccessControlList} stored in the {@link Series}\n+   */\n+  private static AccessControlList getAclFromSeries(Series series) {\n+    AccessControlList activeAcl = new AccessControlList();\n+    try {\n+      if (series.getAccessPolicy() != null)\n+        activeAcl = AccessControlParser.parseAcl(series.getAccessPolicy());\n+    } catch (Exception e) {\n+      logger.error(\"Unable to parse access policy\", e);\n+    }\n+    return activeAcl;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg2NzI0Ng=="}, "originalCommit": {"oid": "661fab6c39d8ab045ba1e59cce4363ae4164be8a"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDE4NzA3OnYy", "diffSide": "RIGHT", "path": "modules/external-api/src/main/java/org/opencastproject/external/endpoint/CaptureAgentsEndpoint.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMTozNDozMVrOHY5q5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwOToyMjo0M1rOHbm8fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg3Mjc0MQ==", "bodyText": "Opencast doesn't have to be any enforced line length limit, but maybe it's time to break this line? This also applies to other places in this PR.", "url": "https://github.com/opencast/opencast/pull/1791#discussion_r495872741", "createdAt": "2020-09-28T11:34:31Z", "author": {"login": "LukasKalbertodt"}, "path": "modules/external-api/src/main/java/org/opencastproject/external/endpoint/CaptureAgentsEndpoint.java", "diffHunk": "@@ -55,7 +55,7 @@\n import javax.ws.rs.core.Response;\n \n @Path(\"/\")\n-@Produces({ ApiMediaType.JSON, ApiMediaType.VERSION_1_1_0, ApiMediaType.VERSION_1_2_0, ApiMediaType.VERSION_1_3_0, ApiMediaType.VERSION_1_4_0 })\n+@Produces({ ApiMediaType.JSON, ApiMediaType.VERSION_1_1_0, ApiMediaType.VERSION_1_2_0, ApiMediaType.VERSION_1_3_0, ApiMediaType.VERSION_1_4_0, ApiMediaType.VERSION_1_5_0 })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "661fab6c39d8ab045ba1e59cce4363ae4164be8a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY2NDg3Ng==", "bodyText": "I'll break the lines containing the API versions. The rest I'll leave as is for now, otherwise I'll still be here tomorrow. ;)", "url": "https://github.com/opencast/opencast/pull/1791#discussion_r498664876", "createdAt": "2020-10-02T07:48:00Z", "author": {"login": "KatrinIhler"}, "path": "modules/external-api/src/main/java/org/opencastproject/external/endpoint/CaptureAgentsEndpoint.java", "diffHunk": "@@ -55,7 +55,7 @@\n import javax.ws.rs.core.Response;\n \n @Path(\"/\")\n-@Produces({ ApiMediaType.JSON, ApiMediaType.VERSION_1_1_0, ApiMediaType.VERSION_1_2_0, ApiMediaType.VERSION_1_3_0, ApiMediaType.VERSION_1_4_0 })\n+@Produces({ ApiMediaType.JSON, ApiMediaType.VERSION_1_1_0, ApiMediaType.VERSION_1_2_0, ApiMediaType.VERSION_1_3_0, ApiMediaType.VERSION_1_4_0, ApiMediaType.VERSION_1_5_0 })", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg3Mjc0MQ=="}, "originalCommit": {"oid": "661fab6c39d8ab045ba1e59cce4363ae4164be8a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODcxMTY3Ng==", "bodyText": "Looks good now. Apparently I can't \"resolve\" these PR comments. Feel free to resolve this one yourself.", "url": "https://github.com/opencast/opencast/pull/1791#discussion_r498711676", "createdAt": "2020-10-02T09:22:43Z", "author": {"login": "LukasKalbertodt"}, "path": "modules/external-api/src/main/java/org/opencastproject/external/endpoint/CaptureAgentsEndpoint.java", "diffHunk": "@@ -55,7 +55,7 @@\n import javax.ws.rs.core.Response;\n \n @Path(\"/\")\n-@Produces({ ApiMediaType.JSON, ApiMediaType.VERSION_1_1_0, ApiMediaType.VERSION_1_2_0, ApiMediaType.VERSION_1_3_0, ApiMediaType.VERSION_1_4_0 })\n+@Produces({ ApiMediaType.JSON, ApiMediaType.VERSION_1_1_0, ApiMediaType.VERSION_1_2_0, ApiMediaType.VERSION_1_3_0, ApiMediaType.VERSION_1_4_0, ApiMediaType.VERSION_1_5_0 })", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg3Mjc0MQ=="}, "originalCommit": {"oid": "661fab6c39d8ab045ba1e59cce4363ae4164be8a"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3175, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}