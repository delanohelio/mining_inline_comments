{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1MTczODEy", "number": 1615, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMDo0MDozOFrOEDnozg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMjoyMjoyOFrOEDpaFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjMwNjA2OnYy", "diffSide": "LEFT", "path": "docs/guides/developer/docs/api/base-api.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMDo0MDozOFrOGgvm5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNTozNTo0NlrOGh6wDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk4NzYyMQ==", "bodyText": "While the original response descriptions were in a passive voice, the switch to active voice doesn't quite work.  This kind of thing is quite common in technical writing.", "url": "https://github.com/opencast/opencast/pull/1615#discussion_r436987621", "createdAt": "2020-06-08T20:40:38Z", "author": {"login": "gregorydlogan"}, "path": "docs/guides/developer/docs/api/base-api.md", "diffHunk": "@@ -11,7 +11,7 @@ Returns key characteristics of the External API such as the API base URL and the\n \n __Response__\n \n-`200 (OK)`: The api information is returned as a JSON object containing the following fields:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6dcbaf352840e5d0d8fbc68ac90134a1607344c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIxODc2NA==", "bodyText": "Maybe it is because of my background with UK English but I will roll back that. I trust in a native speaker more \ud83d\ude04", "url": "https://github.com/opencast/opencast/pull/1615#discussion_r438218764", "createdAt": "2020-06-10T15:35:46Z", "author": {"login": "mliradelc"}, "path": "docs/guides/developer/docs/api/base-api.md", "diffHunk": "@@ -11,7 +11,7 @@ Returns key characteristics of the External API such as the API base URL and the\n \n __Response__\n \n-`200 (OK)`: The api information is returned as a JSON object containing the following fields:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk4NzYyMQ=="}, "originalCommit": {"oid": "a6dcbaf352840e5d0d8fbc68ac90134a1607344c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjMwOTAxOnYy", "diffSide": "RIGHT", "path": "docs/guides/developer/docs/api/events-api.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMDo0MTozMFrOGgvopA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMDo0MTozMFrOGgvopA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk4ODA2OA==", "bodyText": "Version 1.5.0 and newer support comma separated use of the filter keyword, creating a logical OR.", "url": "https://github.com/opencast/opencast/pull/1615#discussion_r436988068", "createdAt": "2020-06-08T20:41:30Z", "author": {"login": "gregorydlogan"}, "path": "docs/guides/developer/docs/api/events-api.md", "diffHunk": "@@ -9,7 +9,7 @@ The following query string parameters are supported to filter, sort and pagingat\n \n Query String Parameter |Type                         | Description\n :----------------------|:----------------------------|:-----------\n-`filter`               | [`string`](types.md#basic)  | A comma-separated list of filters to limit the results with (see [Filtering](usage.md#filtering)). See the below table for the list of available filters\n+`filter`               | [`string`](types.md#basic)  | A comma-separated list of filters to limit the results with (see [Filtering](usage.md#filtering)). See the below table for the list of available filters. From version 1.5.0 is possible to repeat this filter in the query to add other results", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6dcbaf352840e5d0d8fbc68ac90134a1607344c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjQwMzgwOnYy", "diffSide": "RIGHT", "path": "modules/external-api/src/main/java/org/opencastproject/external/endpoint/EventsEndpoint.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMToxMToyMlrOGgwktw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMToxMToyMlrOGgwktw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAwMzQ0Nw==", "bodyText": "I would move this to debug since your server admin probably doesn't care what random junk their users are dropping into the filter :)", "url": "https://github.com/opencast/opencast/pull/1615#discussion_r437003447", "createdAt": "2020-06-08T21:11:22Z", "author": {"login": "gregorydlogan"}, "path": "modules/external-api/src/main/java/org/opencastproject/external/endpoint/EventsEndpoint.java", "diffHunk": "@@ -642,177 +646,265 @@ public Response getEvents(@HeaderParam(\"Accept\") String acceptHeader, @QueryPara\n       optLimit = Option.none();\n     }\n \n-    // Parse the filters\n-    if (StringUtils.isNotBlank(filter)) {\n-      for (String f : filter.split(\",\")) {\n-        String[] filterTuple = f.split(\":\");\n-        if (filterTuple.length < 2) {\n-          logger.info(\"No value for filter {} in filters list: {}\", filterTuple[0], filter);\n-          continue;\n-        }\n+    //List of all events from the filters\n+    List<IndexObject> allEvents = new ArrayList<>();\n \n-        String name = filterTuple[0];\n-        String value;\n+    if (!isNullOrEmpty(filter)) {\n+      // API version 1.5.0: Additive filter\n+      if (!requestedVersion.isSmallerThan(ApiVersion.VERSION_1_5_0)) {\n+        filter = filter.subList(0,1);\n+      }\n+      for (String filterPart : filter) {\n+        // Parse the filters\n+\n+        for (String f : filterPart.split(\",\")) {\n+          String[] filterTuple = f.split(\":\");\n+          if (filterTuple.length < 2) {\n+            logger.info(\"No value for filter {} in filters list: {}\", filterTuple[0], filter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6dcbaf352840e5d0d8fbc68ac90134a1607344c"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjU5NjA2OnYy", "diffSide": "RIGHT", "path": "modules/external-api/src/main/java/org/opencastproject/external/endpoint/EventsEndpoint.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMjoyMjoyOFrOGgybXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNzowNzoyNVrOGuxcqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzMzgyMQ==", "bodyText": "I would move the sorting logic into a helper function rather than duplicating code.", "url": "https://github.com/opencast/opencast/pull/1615#discussion_r437033821", "createdAt": "2020-06-08T22:22:28Z", "author": {"login": "gregorydlogan"}, "path": "modules/external-api/src/main/java/org/opencastproject/external/endpoint/EventsEndpoint.java", "diffHunk": "@@ -642,177 +646,265 @@ public Response getEvents(@HeaderParam(\"Accept\") String acceptHeader, @QueryPara\n       optLimit = Option.none();\n     }\n \n-    // Parse the filters\n-    if (StringUtils.isNotBlank(filter)) {\n-      for (String f : filter.split(\",\")) {\n-        String[] filterTuple = f.split(\":\");\n-        if (filterTuple.length < 2) {\n-          logger.info(\"No value for filter {} in filters list: {}\", filterTuple[0], filter);\n-          continue;\n-        }\n+    //List of all events from the filters\n+    List<IndexObject> allEvents = new ArrayList<>();\n \n-        String name = filterTuple[0];\n-        String value;\n+    if (!isNullOrEmpty(filter)) {\n+      // API version 1.5.0: Additive filter\n+      if (!requestedVersion.isSmallerThan(ApiVersion.VERSION_1_5_0)) {\n+        filter = filter.subList(0,1);\n+      }\n+      for (String filterPart : filter) {\n+        // Parse the filters\n+\n+        for (String f : filterPart.split(\",\")) {\n+          String[] filterTuple = f.split(\":\");\n+          if (filterTuple.length < 2) {\n+            logger.info(\"No value for filter {} in filters list: {}\", filterTuple[0], filter);\n+            continue;\n+          }\n \n-        if (!requestedVersion.isSmallerThan(ApiVersion.VERSION_1_1_0)) {\n-          // MH-13038 - 1.1.0 and higher support colons in values\n-          value = f.substring(name.length() + 1);\n-        } else {\n-          value = filterTuple[1];\n-        }\n+          String name = filterTuple[0];\n+          String value;\n \n-        if (\"presenters\".equals(name)) {\n-          query.withPresenter(value);\n-        } else if (\"contributors\".equals(name)) {\n-          query.withContributor(value);\n-        } else if (\"location\".equals(name)) {\n-          query.withLocation(value);\n-        } else if (\"textFilter\".equals(name)) {\n-          query.withText(\"*\" + value + \"*\");\n-        } else if (\"series\".equals(name)) {\n-          query.withSeriesId(value);\n-        } else if (\"subject\".equals(name)) {\n-          query.withSubject(value);\n-        } else if (!requestedVersion.isSmallerThan(ApiVersion.VERSION_1_1_0)) {\n-          // additional filters only available with Version 1.1.0 or higher\n-          if (\"identifier\".equals(name)) {\n-            query.withIdentifier(value);\n-          } else if (\"title\".equals(name)) {\n-            query.withTitle(value);\n-          } else if (\"description\".equals(name)) {\n-            query.withDescription(value);\n-          } else if (\"series_name\".equals(name)) {\n-            query.withSeriesName(value);\n-          } else if (\"language\".equals(name)) {\n-            query.withLanguage(value);\n-          } else if (\"created\".equals(name)) {\n-            query.withCreated(value);\n-          } else if (\"license\".equals(name)) {\n-            query.withLicense(value);\n-          } else if (\"rightsholder\".equals(name)) {\n-            query.withRights(value);\n-          } else if (\"is_part_of\".equals(name)) {\n+          if (!requestedVersion.isSmallerThan(ApiVersion.VERSION_1_1_0)) {\n+            // MH-13038 - 1.1.0 and higher support colons in values\n+            value = f.substring(name.length() + 1);\n+          } else {\n+            value = filterTuple[1];\n+          }\n+\n+          if (\"presenters\".equals(name)) {\n+            query.withPresenter(value);\n+          } else if (\"contributors\".equals(name)) {\n+            query.withContributor(value);\n+          } else if (\"location\".equals(name)) {\n+            query.withLocation(value);\n+          } else if (\"textFilter\".equals(name)) {\n+            query.withText(\"*\" + value + \"*\");\n+          } else if (\"series\".equals(name)) {\n             query.withSeriesId(value);\n-          } else if (\"source\".equals(name)) {\n-            query.withSource(value);\n-          } else if (\"status\".equals(name)) {\n-            query.withEventStatus(value);\n-          } else if (\"agent_id\".equals(name)) {\n-            query.withAgentId(value);\n-          } else if (\"start\".equals(name)) {\n-            try {\n-              Tuple<Date, Date> fromAndToCreationRange = RestUtils.getFromAndToDateRange(value);\n-              query.withStartFrom(fromAndToCreationRange.getA());\n-              query.withStartTo(fromAndToCreationRange.getB());\n-            } catch (Exception e) {\n-              return RestUtil.R\n-                      .badRequest(String.format(\"Filter 'start' could not be parsed: %s\", e.getMessage()));\n+          } else if (\"subject\".equals(name)) {\n+            query.withSubject(value);\n+          } else if (!requestedVersion.isSmallerThan(ApiVersion.VERSION_1_1_0)) {\n+            // additional filters only available with Version 1.1.0 or higher\n+            if (\"identifier\".equals(name)) {\n+              query.withIdentifier(value);\n+            } else if (\"title\".equals(name)) {\n+              query.withTitle(value);\n+            } else if (\"description\".equals(name)) {\n+              query.withDescription(value);\n+            } else if (\"series_name\".equals(name)) {\n+              query.withSeriesName(value);\n+            } else if (\"language\".equals(name)) {\n+              query.withLanguage(value);\n+            } else if (\"created\".equals(name)) {\n+              query.withCreated(value);\n+            } else if (\"license\".equals(name)) {\n+              query.withLicense(value);\n+            } else if (\"rightsholder\".equals(name)) {\n+              query.withRights(value);\n+            } else if (\"is_part_of\".equals(name)) {\n+              query.withSeriesId(value);\n+            } else if (\"source\".equals(name)) {\n+              query.withSource(value);\n+            } else if (\"status\".equals(name)) {\n+              query.withEventStatus(value);\n+            } else if (\"agent_id\".equals(name)) {\n+              query.withAgentId(value);\n+            } else if (\"start\".equals(name)) {\n+              try {\n+                Tuple<Date, Date> fromAndToCreationRange = RestUtils.getFromAndToDateRange(value);\n+                query.withStartFrom(fromAndToCreationRange.getA());\n+                query.withStartTo(fromAndToCreationRange.getB());\n+              } catch (Exception e) {\n+                return RestUtil.R\n+                        .badRequest(String.format(\"Filter 'start' could not be parsed: %s\", e.getMessage()));\n+\n+              }\n+            } else if (\"technical_start\".equals(name)) {\n+              try {\n+                Tuple<Date, Date> fromAndToCreationRange = RestUtils.getFromAndToDateRange(value);\n+                query.withTechnicalStartFrom(fromAndToCreationRange.getA());\n+                query.withTechnicalStartTo(fromAndToCreationRange.getB());\n+              } catch (Exception e) {\n+                return RestUtil.R\n+                        .badRequest(String.format(\"Filter 'technical_start' could not be parsed: %s\", e.getMessage()));\n+\n+              }\n+            } else {\n+              logger.warn(\"Unknown filter criteria {}\", name);\n+              return RestUtil.R.badRequest(String.format(\"Unknown filter criterion in request: %s\", name));\n \n             }\n-          } else if (\"technical_start\".equals(name)) {\n-            try {\n-              Tuple<Date, Date> fromAndToCreationRange = RestUtils.getFromAndToDateRange(value);\n-              query.withTechnicalStartFrom(fromAndToCreationRange.getA());\n-              query.withTechnicalStartTo(fromAndToCreationRange.getB());\n-            } catch (Exception e) {\n-              return RestUtil.R\n-                      .badRequest(String.format(\"Filter 'technical_start' could not be parsed: %s\", e.getMessage()));\n+          }\n+        }\n \n+        if (optSort.isSome()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6dcbaf352840e5d0d8fbc68ac90134a1607344c"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIyMjM0Mg==", "bodyText": "You are right!. How I didn't see that!\nIt was bothering me a lot have to duplicate the code. Creates a new point of failure. I will create the helper function to do that.", "url": "https://github.com/opencast/opencast/pull/1615#discussion_r438222342", "createdAt": "2020-06-10T15:40:48Z", "author": {"login": "mliradelc"}, "path": "modules/external-api/src/main/java/org/opencastproject/external/endpoint/EventsEndpoint.java", "diffHunk": "@@ -642,177 +646,265 @@ public Response getEvents(@HeaderParam(\"Accept\") String acceptHeader, @QueryPara\n       optLimit = Option.none();\n     }\n \n-    // Parse the filters\n-    if (StringUtils.isNotBlank(filter)) {\n-      for (String f : filter.split(\",\")) {\n-        String[] filterTuple = f.split(\":\");\n-        if (filterTuple.length < 2) {\n-          logger.info(\"No value for filter {} in filters list: {}\", filterTuple[0], filter);\n-          continue;\n-        }\n+    //List of all events from the filters\n+    List<IndexObject> allEvents = new ArrayList<>();\n \n-        String name = filterTuple[0];\n-        String value;\n+    if (!isNullOrEmpty(filter)) {\n+      // API version 1.5.0: Additive filter\n+      if (!requestedVersion.isSmallerThan(ApiVersion.VERSION_1_5_0)) {\n+        filter = filter.subList(0,1);\n+      }\n+      for (String filterPart : filter) {\n+        // Parse the filters\n+\n+        for (String f : filterPart.split(\",\")) {\n+          String[] filterTuple = f.split(\":\");\n+          if (filterTuple.length < 2) {\n+            logger.info(\"No value for filter {} in filters list: {}\", filterTuple[0], filter);\n+            continue;\n+          }\n \n-        if (!requestedVersion.isSmallerThan(ApiVersion.VERSION_1_1_0)) {\n-          // MH-13038 - 1.1.0 and higher support colons in values\n-          value = f.substring(name.length() + 1);\n-        } else {\n-          value = filterTuple[1];\n-        }\n+          String name = filterTuple[0];\n+          String value;\n \n-        if (\"presenters\".equals(name)) {\n-          query.withPresenter(value);\n-        } else if (\"contributors\".equals(name)) {\n-          query.withContributor(value);\n-        } else if (\"location\".equals(name)) {\n-          query.withLocation(value);\n-        } else if (\"textFilter\".equals(name)) {\n-          query.withText(\"*\" + value + \"*\");\n-        } else if (\"series\".equals(name)) {\n-          query.withSeriesId(value);\n-        } else if (\"subject\".equals(name)) {\n-          query.withSubject(value);\n-        } else if (!requestedVersion.isSmallerThan(ApiVersion.VERSION_1_1_0)) {\n-          // additional filters only available with Version 1.1.0 or higher\n-          if (\"identifier\".equals(name)) {\n-            query.withIdentifier(value);\n-          } else if (\"title\".equals(name)) {\n-            query.withTitle(value);\n-          } else if (\"description\".equals(name)) {\n-            query.withDescription(value);\n-          } else if (\"series_name\".equals(name)) {\n-            query.withSeriesName(value);\n-          } else if (\"language\".equals(name)) {\n-            query.withLanguage(value);\n-          } else if (\"created\".equals(name)) {\n-            query.withCreated(value);\n-          } else if (\"license\".equals(name)) {\n-            query.withLicense(value);\n-          } else if (\"rightsholder\".equals(name)) {\n-            query.withRights(value);\n-          } else if (\"is_part_of\".equals(name)) {\n+          if (!requestedVersion.isSmallerThan(ApiVersion.VERSION_1_1_0)) {\n+            // MH-13038 - 1.1.0 and higher support colons in values\n+            value = f.substring(name.length() + 1);\n+          } else {\n+            value = filterTuple[1];\n+          }\n+\n+          if (\"presenters\".equals(name)) {\n+            query.withPresenter(value);\n+          } else if (\"contributors\".equals(name)) {\n+            query.withContributor(value);\n+          } else if (\"location\".equals(name)) {\n+            query.withLocation(value);\n+          } else if (\"textFilter\".equals(name)) {\n+            query.withText(\"*\" + value + \"*\");\n+          } else if (\"series\".equals(name)) {\n             query.withSeriesId(value);\n-          } else if (\"source\".equals(name)) {\n-            query.withSource(value);\n-          } else if (\"status\".equals(name)) {\n-            query.withEventStatus(value);\n-          } else if (\"agent_id\".equals(name)) {\n-            query.withAgentId(value);\n-          } else if (\"start\".equals(name)) {\n-            try {\n-              Tuple<Date, Date> fromAndToCreationRange = RestUtils.getFromAndToDateRange(value);\n-              query.withStartFrom(fromAndToCreationRange.getA());\n-              query.withStartTo(fromAndToCreationRange.getB());\n-            } catch (Exception e) {\n-              return RestUtil.R\n-                      .badRequest(String.format(\"Filter 'start' could not be parsed: %s\", e.getMessage()));\n+          } else if (\"subject\".equals(name)) {\n+            query.withSubject(value);\n+          } else if (!requestedVersion.isSmallerThan(ApiVersion.VERSION_1_1_0)) {\n+            // additional filters only available with Version 1.1.0 or higher\n+            if (\"identifier\".equals(name)) {\n+              query.withIdentifier(value);\n+            } else if (\"title\".equals(name)) {\n+              query.withTitle(value);\n+            } else if (\"description\".equals(name)) {\n+              query.withDescription(value);\n+            } else if (\"series_name\".equals(name)) {\n+              query.withSeriesName(value);\n+            } else if (\"language\".equals(name)) {\n+              query.withLanguage(value);\n+            } else if (\"created\".equals(name)) {\n+              query.withCreated(value);\n+            } else if (\"license\".equals(name)) {\n+              query.withLicense(value);\n+            } else if (\"rightsholder\".equals(name)) {\n+              query.withRights(value);\n+            } else if (\"is_part_of\".equals(name)) {\n+              query.withSeriesId(value);\n+            } else if (\"source\".equals(name)) {\n+              query.withSource(value);\n+            } else if (\"status\".equals(name)) {\n+              query.withEventStatus(value);\n+            } else if (\"agent_id\".equals(name)) {\n+              query.withAgentId(value);\n+            } else if (\"start\".equals(name)) {\n+              try {\n+                Tuple<Date, Date> fromAndToCreationRange = RestUtils.getFromAndToDateRange(value);\n+                query.withStartFrom(fromAndToCreationRange.getA());\n+                query.withStartTo(fromAndToCreationRange.getB());\n+              } catch (Exception e) {\n+                return RestUtil.R\n+                        .badRequest(String.format(\"Filter 'start' could not be parsed: %s\", e.getMessage()));\n+\n+              }\n+            } else if (\"technical_start\".equals(name)) {\n+              try {\n+                Tuple<Date, Date> fromAndToCreationRange = RestUtils.getFromAndToDateRange(value);\n+                query.withTechnicalStartFrom(fromAndToCreationRange.getA());\n+                query.withTechnicalStartTo(fromAndToCreationRange.getB());\n+              } catch (Exception e) {\n+                return RestUtil.R\n+                        .badRequest(String.format(\"Filter 'technical_start' could not be parsed: %s\", e.getMessage()));\n+\n+              }\n+            } else {\n+              logger.warn(\"Unknown filter criteria {}\", name);\n+              return RestUtil.R.badRequest(String.format(\"Unknown filter criterion in request: %s\", name));\n \n             }\n-          } else if (\"technical_start\".equals(name)) {\n-            try {\n-              Tuple<Date, Date> fromAndToCreationRange = RestUtils.getFromAndToDateRange(value);\n-              query.withTechnicalStartFrom(fromAndToCreationRange.getA());\n-              query.withTechnicalStartTo(fromAndToCreationRange.getB());\n-            } catch (Exception e) {\n-              return RestUtil.R\n-                      .badRequest(String.format(\"Filter 'technical_start' could not be parsed: %s\", e.getMessage()));\n+          }\n+        }\n \n+        if (optSort.isSome()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzMzgyMQ=="}, "originalCommit": {"oid": "a6dcbaf352840e5d0d8fbc68ac90134a1607344c"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY5NzgzMw==", "bodyText": "Sounds good.  Please ping me when this is done!", "url": "https://github.com/opencast/opencast/pull/1615#discussion_r451697833", "createdAt": "2020-07-08T17:07:25Z", "author": {"login": "gregorydlogan"}, "path": "modules/external-api/src/main/java/org/opencastproject/external/endpoint/EventsEndpoint.java", "diffHunk": "@@ -642,177 +646,265 @@ public Response getEvents(@HeaderParam(\"Accept\") String acceptHeader, @QueryPara\n       optLimit = Option.none();\n     }\n \n-    // Parse the filters\n-    if (StringUtils.isNotBlank(filter)) {\n-      for (String f : filter.split(\",\")) {\n-        String[] filterTuple = f.split(\":\");\n-        if (filterTuple.length < 2) {\n-          logger.info(\"No value for filter {} in filters list: {}\", filterTuple[0], filter);\n-          continue;\n-        }\n+    //List of all events from the filters\n+    List<IndexObject> allEvents = new ArrayList<>();\n \n-        String name = filterTuple[0];\n-        String value;\n+    if (!isNullOrEmpty(filter)) {\n+      // API version 1.5.0: Additive filter\n+      if (!requestedVersion.isSmallerThan(ApiVersion.VERSION_1_5_0)) {\n+        filter = filter.subList(0,1);\n+      }\n+      for (String filterPart : filter) {\n+        // Parse the filters\n+\n+        for (String f : filterPart.split(\",\")) {\n+          String[] filterTuple = f.split(\":\");\n+          if (filterTuple.length < 2) {\n+            logger.info(\"No value for filter {} in filters list: {}\", filterTuple[0], filter);\n+            continue;\n+          }\n \n-        if (!requestedVersion.isSmallerThan(ApiVersion.VERSION_1_1_0)) {\n-          // MH-13038 - 1.1.0 and higher support colons in values\n-          value = f.substring(name.length() + 1);\n-        } else {\n-          value = filterTuple[1];\n-        }\n+          String name = filterTuple[0];\n+          String value;\n \n-        if (\"presenters\".equals(name)) {\n-          query.withPresenter(value);\n-        } else if (\"contributors\".equals(name)) {\n-          query.withContributor(value);\n-        } else if (\"location\".equals(name)) {\n-          query.withLocation(value);\n-        } else if (\"textFilter\".equals(name)) {\n-          query.withText(\"*\" + value + \"*\");\n-        } else if (\"series\".equals(name)) {\n-          query.withSeriesId(value);\n-        } else if (\"subject\".equals(name)) {\n-          query.withSubject(value);\n-        } else if (!requestedVersion.isSmallerThan(ApiVersion.VERSION_1_1_0)) {\n-          // additional filters only available with Version 1.1.0 or higher\n-          if (\"identifier\".equals(name)) {\n-            query.withIdentifier(value);\n-          } else if (\"title\".equals(name)) {\n-            query.withTitle(value);\n-          } else if (\"description\".equals(name)) {\n-            query.withDescription(value);\n-          } else if (\"series_name\".equals(name)) {\n-            query.withSeriesName(value);\n-          } else if (\"language\".equals(name)) {\n-            query.withLanguage(value);\n-          } else if (\"created\".equals(name)) {\n-            query.withCreated(value);\n-          } else if (\"license\".equals(name)) {\n-            query.withLicense(value);\n-          } else if (\"rightsholder\".equals(name)) {\n-            query.withRights(value);\n-          } else if (\"is_part_of\".equals(name)) {\n+          if (!requestedVersion.isSmallerThan(ApiVersion.VERSION_1_1_0)) {\n+            // MH-13038 - 1.1.0 and higher support colons in values\n+            value = f.substring(name.length() + 1);\n+          } else {\n+            value = filterTuple[1];\n+          }\n+\n+          if (\"presenters\".equals(name)) {\n+            query.withPresenter(value);\n+          } else if (\"contributors\".equals(name)) {\n+            query.withContributor(value);\n+          } else if (\"location\".equals(name)) {\n+            query.withLocation(value);\n+          } else if (\"textFilter\".equals(name)) {\n+            query.withText(\"*\" + value + \"*\");\n+          } else if (\"series\".equals(name)) {\n             query.withSeriesId(value);\n-          } else if (\"source\".equals(name)) {\n-            query.withSource(value);\n-          } else if (\"status\".equals(name)) {\n-            query.withEventStatus(value);\n-          } else if (\"agent_id\".equals(name)) {\n-            query.withAgentId(value);\n-          } else if (\"start\".equals(name)) {\n-            try {\n-              Tuple<Date, Date> fromAndToCreationRange = RestUtils.getFromAndToDateRange(value);\n-              query.withStartFrom(fromAndToCreationRange.getA());\n-              query.withStartTo(fromAndToCreationRange.getB());\n-            } catch (Exception e) {\n-              return RestUtil.R\n-                      .badRequest(String.format(\"Filter 'start' could not be parsed: %s\", e.getMessage()));\n+          } else if (\"subject\".equals(name)) {\n+            query.withSubject(value);\n+          } else if (!requestedVersion.isSmallerThan(ApiVersion.VERSION_1_1_0)) {\n+            // additional filters only available with Version 1.1.0 or higher\n+            if (\"identifier\".equals(name)) {\n+              query.withIdentifier(value);\n+            } else if (\"title\".equals(name)) {\n+              query.withTitle(value);\n+            } else if (\"description\".equals(name)) {\n+              query.withDescription(value);\n+            } else if (\"series_name\".equals(name)) {\n+              query.withSeriesName(value);\n+            } else if (\"language\".equals(name)) {\n+              query.withLanguage(value);\n+            } else if (\"created\".equals(name)) {\n+              query.withCreated(value);\n+            } else if (\"license\".equals(name)) {\n+              query.withLicense(value);\n+            } else if (\"rightsholder\".equals(name)) {\n+              query.withRights(value);\n+            } else if (\"is_part_of\".equals(name)) {\n+              query.withSeriesId(value);\n+            } else if (\"source\".equals(name)) {\n+              query.withSource(value);\n+            } else if (\"status\".equals(name)) {\n+              query.withEventStatus(value);\n+            } else if (\"agent_id\".equals(name)) {\n+              query.withAgentId(value);\n+            } else if (\"start\".equals(name)) {\n+              try {\n+                Tuple<Date, Date> fromAndToCreationRange = RestUtils.getFromAndToDateRange(value);\n+                query.withStartFrom(fromAndToCreationRange.getA());\n+                query.withStartTo(fromAndToCreationRange.getB());\n+              } catch (Exception e) {\n+                return RestUtil.R\n+                        .badRequest(String.format(\"Filter 'start' could not be parsed: %s\", e.getMessage()));\n+\n+              }\n+            } else if (\"technical_start\".equals(name)) {\n+              try {\n+                Tuple<Date, Date> fromAndToCreationRange = RestUtils.getFromAndToDateRange(value);\n+                query.withTechnicalStartFrom(fromAndToCreationRange.getA());\n+                query.withTechnicalStartTo(fromAndToCreationRange.getB());\n+              } catch (Exception e) {\n+                return RestUtil.R\n+                        .badRequest(String.format(\"Filter 'technical_start' could not be parsed: %s\", e.getMessage()));\n+\n+              }\n+            } else {\n+              logger.warn(\"Unknown filter criteria {}\", name);\n+              return RestUtil.R.badRequest(String.format(\"Unknown filter criterion in request: %s\", name));\n \n             }\n-          } else if (\"technical_start\".equals(name)) {\n-            try {\n-              Tuple<Date, Date> fromAndToCreationRange = RestUtils.getFromAndToDateRange(value);\n-              query.withTechnicalStartFrom(fromAndToCreationRange.getA());\n-              query.withTechnicalStartTo(fromAndToCreationRange.getB());\n-            } catch (Exception e) {\n-              return RestUtil.R\n-                      .badRequest(String.format(\"Filter 'technical_start' could not be parsed: %s\", e.getMessage()));\n+          }\n+        }\n \n+        if (optSort.isSome()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzMzgyMQ=="}, "originalCommit": {"oid": "a6dcbaf352840e5d0d8fbc68ac90134a1607344c"}, "originalPosition": 187}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3252, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}