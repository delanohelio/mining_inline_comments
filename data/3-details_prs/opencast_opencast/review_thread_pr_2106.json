{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4ODAzODg0", "number": 2106, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQxOToyMDo1OFrOE-TlxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQxOTo0MzoxMVrOE-TtAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNzY4MTMyOnYy", "diffSide": "RIGHT", "path": "modules/db/src/main/java/org/opencastproject/db/Activator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQxOToyMDo1OFrOH7cmDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQxOToyMDo1OFrOH7cmDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA5NjUyNw==", "bodyText": "Nitpicking ;-P\nTo be consistent with the other table names:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                String tableName = \"oc-temp\" + time;\n          \n          \n            \n                String tableName = \"oc_temp_\" + time;", "url": "https://github.com/opencast/opencast/pull/2106#discussion_r532096527", "createdAt": "2020-11-28T19:20:58Z", "author": {"login": "lkiesow"}, "path": "modules/db/src/main/java/org/opencastproject/db/Activator.java", "diffHunk": "@@ -137,6 +139,36 @@ else if (pooledDataSource.getMaxIdleTime() == 0) {\n     logger.info(\"Database connection pool established at {}\", jdbcUrl);\n     logger.info(\"Database connection pool parameters: max.size={}, min.size={}, max.idle.time={}\",\n       pooledDataSource.getMaxPoolSize(), pooledDataSource.getMinPoolSize(), pooledDataSource.getMaxIdleTime());\n+    Statement statement = pooledDataSource.getConnection().createStatement();\n+\n+    long time = System.currentTimeMillis();\n+    String tableName = \"oc-temp\" + time;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8acda708fa0309cc94a5f40e5fe35fe0e3f5a8db"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNzY5NTk3OnYy", "diffSide": "RIGHT", "path": "modules/db/src/main/java/org/opencastproject/db/Activator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQxOTozOTowMVrOH7cs1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQxOTozOTowMVrOH7cs1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA5ODI2MQ==", "bodyText": "I don't think this is actually doing what you want it to do. You are selecting the entry with id = time + 2 but you only ever set id = time and id = time + 1. This means that you never actually go into the loop. Also, one simple insert should suffice for this test:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  runUpdate(statement, \"INSERT INTO \" + tableName + \" VALUES (\" + time + \",\" + time + \");\");\n          \n          \n            \n                  runUpdate(statement, \"INSERT INTO \" + tableName + \" VALUES (\" + time + 1 + \",\" + time + 1 + \");\");\n          \n          \n            \n                  runUpdate(statement, \"UPDATE \" + tableName + \" SET test = \" + time + 2 + \" WHERE id = \" + time + \";\");\n          \n          \n            \n                  ResultSet rs = statement.executeQuery(\"SELECT FROM \" + tableName + \" WHERE id = \" + time + 2 + \";\");\n          \n          \n            \n                  while (rs.next()) {\n          \n          \n            \n                    long id = rs.getLong(\"id\");\n          \n          \n            \n                    long test = rs.getLong(\"test\");\n          \n          \n            \n                    if (id != time || test != time + 2) {\n          \n          \n            \n                  runUpdate(statement, \"INSERT INTO \" + tableName + \" VALUES (\" + time + \", 0);\");\n          \n          \n            \n                  runUpdate(statement, \"UPDATE \" + tableName + \" SET test = \" + time + \";\");\n          \n          \n            \n                  ResultSet rs = statement.executeQuery(\"SELECT FROM \" + tableName + \";\");\n          \n          \n            \n                  while (rs.next()) {\n          \n          \n            \n                    long id = rs.getLong(\"id\");\n          \n          \n            \n                    long test = rs.getLong(\"test\");\n          \n          \n            \n                    if (id != time || test != time) {", "url": "https://github.com/opencast/opencast/pull/2106#discussion_r532098261", "createdAt": "2020-11-28T19:39:01Z", "author": {"login": "lkiesow"}, "path": "modules/db/src/main/java/org/opencastproject/db/Activator.java", "diffHunk": "@@ -137,6 +139,36 @@ else if (pooledDataSource.getMaxIdleTime() == 0) {\n     logger.info(\"Database connection pool established at {}\", jdbcUrl);\n     logger.info(\"Database connection pool parameters: max.size={}, min.size={}, max.idle.time={}\",\n       pooledDataSource.getMaxPoolSize(), pooledDataSource.getMinPoolSize(), pooledDataSource.getMaxIdleTime());\n+    Statement statement = pooledDataSource.getConnection().createStatement();\n+\n+    long time = System.currentTimeMillis();\n+    String tableName = \"oc-temp\" + time;\n+    try {\n+      runUpdate(statement, \"CREATE TABLE \" + tableName + \" ( id BIGINT NOT NULL, test BIGINT, PRIMARY KEY (id) );\");\n+      runUpdate(statement, \"INSERT INTO \" + tableName + \" VALUES (\" + time + \",\" + time + \");\");\n+      runUpdate(statement, \"INSERT INTO \" + tableName + \" VALUES (\" + time + 1 + \",\" + time + 1 + \");\");\n+      runUpdate(statement, \"UPDATE \" + tableName + \" SET test = \" + time + 2 + \" WHERE id = \" + time + \";\");\n+      ResultSet rs = statement.executeQuery(\"SELECT FROM \" + tableName + \" WHERE id = \" + time + 2 + \";\");\n+      while (rs.next()) {\n+        long id = rs.getLong(\"id\");\n+        long test = rs.getLong(\"test\");\n+        if (id != time || test != time + 2) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8acda708fa0309cc94a5f40e5fe35fe0e3f5a8db"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNzY5ODIyOnYy", "diffSide": "RIGHT", "path": "modules/db/src/main/java/org/opencastproject/db/Activator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQxOTo0MTowOVrOH7ct3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQxOTo0MTowOVrOH7ct3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA5ODUyNQ==", "bodyText": "I think using a unique table name is a good solution for this problem. But imaging a cluster to start up at the same time. That would potentially select the same table names. Maybe just pick a large random number instead?", "url": "https://github.com/opencast/opencast/pull/2106#discussion_r532098525", "createdAt": "2020-11-28T19:41:09Z", "author": {"login": "lkiesow"}, "path": "modules/db/src/main/java/org/opencastproject/db/Activator.java", "diffHunk": "@@ -137,6 +139,36 @@ else if (pooledDataSource.getMaxIdleTime() == 0) {\n     logger.info(\"Database connection pool established at {}\", jdbcUrl);\n     logger.info(\"Database connection pool parameters: max.size={}, min.size={}, max.idle.time={}\",\n       pooledDataSource.getMaxPoolSize(), pooledDataSource.getMinPoolSize(), pooledDataSource.getMaxIdleTime());\n+    Statement statement = pooledDataSource.getConnection().createStatement();\n+\n+    long time = System.currentTimeMillis();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8acda708fa0309cc94a5f40e5fe35fe0e3f5a8db"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNzY5OTg3OnYy", "diffSide": "RIGHT", "path": "modules/db/src/main/java/org/opencastproject/db/Activator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQxOTo0MzoxMVrOH7cunw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQxOTo0MzoxMVrOH7cunw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA5ODcxOQ==", "bodyText": "In case of an error, we might leave a random table in the database. We could try deleting it in case of an error?\nSomething like this in a final block (catching and ignoring excepzions):\nrunUpdate(statement, \"DROP TABLE \" + tableName + \";\");", "url": "https://github.com/opencast/opencast/pull/2106#discussion_r532098719", "createdAt": "2020-11-28T19:43:11Z", "author": {"login": "lkiesow"}, "path": "modules/db/src/main/java/org/opencastproject/db/Activator.java", "diffHunk": "@@ -137,6 +139,36 @@ else if (pooledDataSource.getMaxIdleTime() == 0) {\n     logger.info(\"Database connection pool established at {}\", jdbcUrl);\n     logger.info(\"Database connection pool parameters: max.size={}, min.size={}, max.idle.time={}\",\n       pooledDataSource.getMaxPoolSize(), pooledDataSource.getMinPoolSize(), pooledDataSource.getMaxIdleTime());\n+    Statement statement = pooledDataSource.getConnection().createStatement();\n+\n+    long time = System.currentTimeMillis();\n+    String tableName = \"oc-temp\" + time;\n+    try {\n+      runUpdate(statement, \"CREATE TABLE \" + tableName + \" ( id BIGINT NOT NULL, test BIGINT, PRIMARY KEY (id) );\");\n+      runUpdate(statement, \"INSERT INTO \" + tableName + \" VALUES (\" + time + \",\" + time + \");\");\n+      runUpdate(statement, \"INSERT INTO \" + tableName + \" VALUES (\" + time + 1 + \",\" + time + 1 + \");\");\n+      runUpdate(statement, \"UPDATE \" + tableName + \" SET test = \" + time + 2 + \" WHERE id = \" + time + \";\");\n+      ResultSet rs = statement.executeQuery(\"SELECT FROM \" + tableName + \" WHERE id = \" + time + 2 + \";\");\n+      while (rs.next()) {\n+        long id = rs.getLong(\"id\");\n+        long test = rs.getLong(\"test\");\n+        if (id != time || test != time + 2) {\n+          throw new RuntimeException(\"Unable to verify updating a table functions correctly\");\n+        }\n+      }\n+      runUpdate(statement, \"DELETE FROM \" + tableName + \" WHERE id = \" + time + \";\");\n+      runUpdate(statement, \"DROP TABLE \" + tableName + \";\");\n+    } catch (Exception e) {\n+      throw new RuntimeException(\"Unable to verify SQL credentials have required permissions!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8acda708fa0309cc94a5f40e5fe35fe0e3f5a8db"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3121, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}