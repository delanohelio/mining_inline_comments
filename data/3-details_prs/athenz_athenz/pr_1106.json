{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyOTU0OTk3", "number": 1106, "title": "validation of role/group members", "bodyText": "I confirm that this contribution is made under the terms of the license found in the root directory of this repository's source tree and that I have the authority necessary to make this contribution on behalf of its copyright owner.", "createdAt": "2020-09-09T16:07:12Z", "url": "https://github.com/AthenZ/athenz/pull/1106", "merged": true, "mergeCommit": {"oid": "6fd7c4d709a356de44c538503f103390c718ec87"}, "closed": true, "closedAt": "2020-09-09T19:55:42Z", "author": {"login": "havetisyan"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdHOePAAH2gAyNDgyOTU0OTk3Ojk3MWIxMTE3MTU5MjMxMWY5NjdmNDBmMjk4NDczMjBiYzUxMmMxMDA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdHRvpWAFqTQ4NTM1NzIyMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "971b11171592311f967f40f29847320bc512c100", "author": {"user": null}, "url": "https://github.com/AthenZ/athenz/commit/971b11171592311f967f40f29847320bc512c100", "committedDate": "2020-09-09T16:06:24Z", "message": "validation of role/group members"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1MzQ5MjM5", "url": "https://github.com/AthenZ/athenz/pull/1106#pullrequestreview-485349239", "createdAt": "2020-09-09T19:42:49Z", "commit": {"oid": "971b11171592311f967f40f29847320bc512c100"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOTo0Mjo0OVrOHPXR4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOTo0Mjo0OVrOHPXR4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg3MjA5Nw==", "bodyText": "we can have a check for idx == -1 here as well", "url": "https://github.com/AthenZ/athenz/pull/1106#discussion_r485872097", "createdAt": "2020-09-09T19:42:49Z", "author": {"login": "abvaidya"}, "path": "servers/zms/src/main/java/com/yahoo/athenz/zms/ZMSImpl.java", "diffHunk": "@@ -3192,7 +3192,67 @@ void updateRoleMemberUserAuthorityExpiry(final Role role, final String caller) {\n         }\n     }\n \n-    void validateRoleMemberPrincipal(final String memberName, int principalType, final String userAuthorityFilter, final String caller) {\n+    void validateUserPrincipal(final String memberName, boolean validateUserMember, final String userAuthorityFilter,\n+                               final String caller) {\n+\n+        if (userAuthority == null) {\n+            return;\n+        }\n+\n+        if (validateUserMember) {\n+            if (!userAuthority.isValidUser(memberName)) {\n+                throw ZMSUtils.requestError(\"Principal \" + memberName + \" is not valid\", caller);\n+            }\n+        }\n+\n+        // once we know it's a valid principal and we have a user\n+        // authority filter configured, we'll check that as well\n+        // if we're already determined that the principal is not\n+        // valid there is no point of running this check\n+\n+        if (!StringUtil.isEmpty(userAuthorityFilter)) {\n+            if (!ZMSUtils.isUserAuthorityFilterValid(userAuthority, userAuthorityFilter, memberName)) {\n+                throw ZMSUtils.requestError(\"Invalid member: \" + memberName +\n+                        \". Required user authority filter not valid for the member\", caller);\n+            }\n+        }\n+    }\n+\n+    void validateServicePrincipal(final String memberName, final String caller) {\n+\n+        int idx = memberName.lastIndexOf('.');\n+        if (idx == -1) {\n+            throw ZMSUtils.requestError(\"Principal \" + memberName + \" is not valid\", caller);\n+        }\n+\n+        final String domainName = memberName.substring(0, idx);\n+        final String serviceName = memberName.substring(idx + 1);\n+\n+        // first we need to check if the domain is on the list of\n+        // our skip domains for service member validation. these\n+        // are typically domains (like for ci/cd) where services\n+        // are dynamic and do not need to be registered in Athenz\n+\n+        if (!validateServiceMemberSkipDomains.contains(domainName)) {\n+            if (dbService.getServiceIdentity(domainName, serviceName, true) == null) {\n+                throw ZMSUtils.requestError(\"Principal \" + memberName + \" is not a valid service\", caller);\n+            }\n+        }\n+    }\n+\n+    void validateGroupPrincipal(final String memberName, final String caller) {\n+\n+        int idx = memberName.indexOf(AuthorityConsts.GROUP_SEP);\n+        final String domainName = memberName.substring(0, idx);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "971b11171592311f967f40f29847320bc512c100"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1MzU3MjIy", "url": "https://github.com/AthenZ/athenz/pull/1106#pullrequestreview-485357222", "createdAt": "2020-09-09T19:55:08Z", "commit": {"oid": "971b11171592311f967f40f29847320bc512c100"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2905, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}