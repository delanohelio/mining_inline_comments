{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3MDU4MTYw", "number": 944, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMjo1MDowMlrOD4O8jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwODowOTowMVrOD7IWTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjkxNzI3OnYy", "diffSide": "RIGHT", "path": "docker/README.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMjo1MDowMlrOGO8_Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNDoxMToxMFrOGPBoCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMzMjUwMw==", "bodyText": "Is the comment correct?", "url": "https://github.com/AthenZ/athenz/pull/944#discussion_r418332503", "createdAt": "2020-04-30T22:50:02Z", "author": {"login": "ssunorz"}, "path": "docker/README.md", "diffHunk": "@@ -6,117 +6,157 @@\n \n - [Athenz on Docker](#athenz-on-docker)\n     - [Index](#index)\n-    - [Prerequisite](#prerequisite)\n+    - [Prerequisites](#prerequisites)\n     - [Build Athenz](#build-athenz)\n     - [Deploy Athenz](#deploy-athenz)\n+    - [Verify Athenz Deployment](#verify-athenz-deployment)\n+        - [JAVA Remote debugging](#java-remote-debugging)\n     - [Cleanup](#cleanup)\n-    - [Configuration Details](#configuration-details)\n-    - [Useful Commands](#useful-commands)\n-    - [[WIP] deploy with docker-stack](#wip-deploy-with-docker-stack)\n-    - [TO-DO](#to-do)\n-    - [Important Files](#important-files)\n+    - [Appendix](#appendix)\n+        - [Important Files](#important-files)\n+        - [[WIP] Configuration Details](#wip-configuration-details)\n+        - [Useful Commands](#useful-commands)\n+        - [TODO](#todo)\n \n <!-- /TOC -->\n \n-<a id=\"markdown-prerequisite\" name=\"prerequisite\"></a>\n-## Prerequisite\n-- docker\n-- make\n+<a id=\"markdown-prerequisites\" name=\"prerequisites\"></a>\n+## Prerequisites\n+\n+1. `git`\n+1. `docker`\n+1. `make`\n \n <a id=\"markdown-build-athenz\" name=\"build-athenz\"></a>\n ## Build Athenz\n \n ```bash\n cd `git rev-parse --show-toplevel`/docker\n \n-# there are a lot of build logs. You may want to check it inside a log file later on.\n-make build | tee ./athenz-docker-build.log\n+# it takes about 15-30 mins\n+make build\n+\n+# TODO: update the min. version before merge\n+# P.S. the latest code may cause docker build to fail, please use older version by specifying the tag version (> v1.8.60) or post an issue\n+# make build TAG=v1.8.60\n ```\n \n <a id=\"markdown-deploy-athenz\" name=\"deploy-athenz\"></a>\n ## Deploy Athenz\n \n+- production environment\n+    - [Athenz-bootstrap](./docs/Athenz-bootstrap.md)\n+- development environment\n+    ```bash\n+    make deploy-dev\n+    ```\n+\n+<a id=\"markdown-verify-athenz-deployment\" name=\"verify-athenz-deployment\"></a>\n+## Verify Athenz Deployment\n+\n+- production environment\n+    - [acceptance-test](./docs/acceptance-test.md)\n - development environment\n-    - deploy commands\n-        ```bash\n-        cd `git rev-parse --show-toplevel`/docker\n-\n-        # 1. set passwords (P.S. values in *.properties files will overwrite these values)\n-        source ./setup-scripts/0.export-default-passwords.sh\n-\n-        # 2. generate key-pairs, certificates and keystore/truststore\n-        make setup-dev-config\n-\n-        # 3. (once ONLY) create docker network\n-        make setup-docker-network\n-\n-        # 4.1 (optional) if you are running web browser and docker containers in the same host\n-        export HOSTNAME=localhost\n-        # 4.2. run Athenz\n-        make run-docker-dev\n-        ```\n-    - Note for UI\n-        - To ignore certificate warning from the browser,\n-            1. for ZMS server certificate,\n-                1. get ZMS URL by `echo https://${HOSTNAME}:${ZMS_PORT:-4443}/zms/v1/status`\n-                1. access ZMS using above URL in the browser\n-                1. ignore the browser warning (certificate authority invalid)\n-            1. for UI server certificate,\n-                1. get UI URL by `echo https://${HOSTNAME}:${UI_PORT:-443}/`\n-                1. access UI using above URL in the browser\n-                1. ignore the browser warning (certificate authority invalid)\n-            - Why do I need to explicitly ignore certificate warning from the browser for both ZMS and UI?\n-                - You need to connect to ZMS to get a user token during the login process of UI.\n-                - Since the certificates generated in DEV. deployment are all self-signed certificates, they are not trusted by the browser.\n-                - Also, they may not have the correct `${HOSTNAME}` in the SAN field depending on your DEV. deployment.\n-                - Hence, explicitly ignoring the browsers warning message is needed for both ZMS and UI.\n-        - UI login username/password\n-            - username: `admin` ([zms.properties](./zms/conf/zms.properties#L37-L41))\n-            - password: `replace_me_with_a_strong_password` ([deploy script](./deploy-scripts/1.2.config-zms-domain-admin.dev.sh#L12))\n+    ```bash\n+    make verify\n+    ```\n+\n+<a id=\"markdown-java-remote-debugging\" name=\"java-remote-debugging\"></a>\n+### JAVA Remote debugging\n+\n+```bash\n+### ZMS\n+ZMS_DEBUG_PORT=8001\n+export ZMS_JAVA_OPTS=\"-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=${ZMS_DEBUG_PORT}\"\n+# re-deploy ZMS, reference: ./deploy-scripts/zms-deploy.sh\n+# expose debug port\n+docker run --rm \\\n+    --network=\"${DOCKER_NETWORK}\" \\\n+    -p \"${ZMS_DEBUG_PORT}:${ZMS_DEBUG_PORT}\" \\\n+    --link \"${ZMS_HOST}:target\" \\\n+    alpine/socat \\\n+    \"tcp-listen:${ZMS_DEBUG_PORT},fork,reuseaddr\" \\\n+    \"tcp-connect:target:${ZMS_DEBUG_PORT}\"\n+\n+### ZTS\n+ZTS_DEBUG_PORT=8002\n+export ZTS_JAVA_OPTS=\"-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=${ZTS_DEBUG_PORT}\"\n+# re-deploy ZTS, reference: ./deploy-scripts/zts-deploy.sh\n+# expose debug port\n+docker run --rm \\\n+    --network=\"${DOCKER_NETWORK}\" \\\n+    -p \"${ZTS_DEBUG_PORT}:${ZTS_DEBUG_PORT}\" \\\n+    --link \"${ZTS_HOST}:target\" \\\n+    alpine/socat \\\n+    \"tcp-listen:${ZTS_DEBUG_PORT},fork,reuseaddr\" \\\n+    \"tcp-connect:target:${ZTS_DEBUG_PORT}\"\n+```\n \n <a id=\"markdown-cleanup\" name=\"cleanup\"></a>\n ## Cleanup\n+\n ```bash\n-# remove deployment\n+# remove Athenz containers\n+make remove-containers\n+\n+# remove server data\n+make remove-files\n+\n+# remove bootstrap setup files", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aad60957f2178f8e8bfee09481ae5fe7e0fc2b4c"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQwNDI4OQ==", "bodyText": "any other suggestions?", "url": "https://github.com/AthenZ/athenz/pull/944#discussion_r418404289", "createdAt": "2020-05-01T03:47:17Z", "author": {"login": "WindzCUHK"}, "path": "docker/README.md", "diffHunk": "@@ -6,117 +6,157 @@\n \n - [Athenz on Docker](#athenz-on-docker)\n     - [Index](#index)\n-    - [Prerequisite](#prerequisite)\n+    - [Prerequisites](#prerequisites)\n     - [Build Athenz](#build-athenz)\n     - [Deploy Athenz](#deploy-athenz)\n+    - [Verify Athenz Deployment](#verify-athenz-deployment)\n+        - [JAVA Remote debugging](#java-remote-debugging)\n     - [Cleanup](#cleanup)\n-    - [Configuration Details](#configuration-details)\n-    - [Useful Commands](#useful-commands)\n-    - [[WIP] deploy with docker-stack](#wip-deploy-with-docker-stack)\n-    - [TO-DO](#to-do)\n-    - [Important Files](#important-files)\n+    - [Appendix](#appendix)\n+        - [Important Files](#important-files)\n+        - [[WIP] Configuration Details](#wip-configuration-details)\n+        - [Useful Commands](#useful-commands)\n+        - [TODO](#todo)\n \n <!-- /TOC -->\n \n-<a id=\"markdown-prerequisite\" name=\"prerequisite\"></a>\n-## Prerequisite\n-- docker\n-- make\n+<a id=\"markdown-prerequisites\" name=\"prerequisites\"></a>\n+## Prerequisites\n+\n+1. `git`\n+1. `docker`\n+1. `make`\n \n <a id=\"markdown-build-athenz\" name=\"build-athenz\"></a>\n ## Build Athenz\n \n ```bash\n cd `git rev-parse --show-toplevel`/docker\n \n-# there are a lot of build logs. You may want to check it inside a log file later on.\n-make build | tee ./athenz-docker-build.log\n+# it takes about 15-30 mins\n+make build\n+\n+# TODO: update the min. version before merge\n+# P.S. the latest code may cause docker build to fail, please use older version by specifying the tag version (> v1.8.60) or post an issue\n+# make build TAG=v1.8.60\n ```\n \n <a id=\"markdown-deploy-athenz\" name=\"deploy-athenz\"></a>\n ## Deploy Athenz\n \n+- production environment\n+    - [Athenz-bootstrap](./docs/Athenz-bootstrap.md)\n+- development environment\n+    ```bash\n+    make deploy-dev\n+    ```\n+\n+<a id=\"markdown-verify-athenz-deployment\" name=\"verify-athenz-deployment\"></a>\n+## Verify Athenz Deployment\n+\n+- production environment\n+    - [acceptance-test](./docs/acceptance-test.md)\n - development environment\n-    - deploy commands\n-        ```bash\n-        cd `git rev-parse --show-toplevel`/docker\n-\n-        # 1. set passwords (P.S. values in *.properties files will overwrite these values)\n-        source ./setup-scripts/0.export-default-passwords.sh\n-\n-        # 2. generate key-pairs, certificates and keystore/truststore\n-        make setup-dev-config\n-\n-        # 3. (once ONLY) create docker network\n-        make setup-docker-network\n-\n-        # 4.1 (optional) if you are running web browser and docker containers in the same host\n-        export HOSTNAME=localhost\n-        # 4.2. run Athenz\n-        make run-docker-dev\n-        ```\n-    - Note for UI\n-        - To ignore certificate warning from the browser,\n-            1. for ZMS server certificate,\n-                1. get ZMS URL by `echo https://${HOSTNAME}:${ZMS_PORT:-4443}/zms/v1/status`\n-                1. access ZMS using above URL in the browser\n-                1. ignore the browser warning (certificate authority invalid)\n-            1. for UI server certificate,\n-                1. get UI URL by `echo https://${HOSTNAME}:${UI_PORT:-443}/`\n-                1. access UI using above URL in the browser\n-                1. ignore the browser warning (certificate authority invalid)\n-            - Why do I need to explicitly ignore certificate warning from the browser for both ZMS and UI?\n-                - You need to connect to ZMS to get a user token during the login process of UI.\n-                - Since the certificates generated in DEV. deployment are all self-signed certificates, they are not trusted by the browser.\n-                - Also, they may not have the correct `${HOSTNAME}` in the SAN field depending on your DEV. deployment.\n-                - Hence, explicitly ignoring the browsers warning message is needed for both ZMS and UI.\n-        - UI login username/password\n-            - username: `admin` ([zms.properties](./zms/conf/zms.properties#L37-L41))\n-            - password: `replace_me_with_a_strong_password` ([deploy script](./deploy-scripts/1.2.config-zms-domain-admin.dev.sh#L12))\n+    ```bash\n+    make verify\n+    ```\n+\n+<a id=\"markdown-java-remote-debugging\" name=\"java-remote-debugging\"></a>\n+### JAVA Remote debugging\n+\n+```bash\n+### ZMS\n+ZMS_DEBUG_PORT=8001\n+export ZMS_JAVA_OPTS=\"-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=${ZMS_DEBUG_PORT}\"\n+# re-deploy ZMS, reference: ./deploy-scripts/zms-deploy.sh\n+# expose debug port\n+docker run --rm \\\n+    --network=\"${DOCKER_NETWORK}\" \\\n+    -p \"${ZMS_DEBUG_PORT}:${ZMS_DEBUG_PORT}\" \\\n+    --link \"${ZMS_HOST}:target\" \\\n+    alpine/socat \\\n+    \"tcp-listen:${ZMS_DEBUG_PORT},fork,reuseaddr\" \\\n+    \"tcp-connect:target:${ZMS_DEBUG_PORT}\"\n+\n+### ZTS\n+ZTS_DEBUG_PORT=8002\n+export ZTS_JAVA_OPTS=\"-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=${ZTS_DEBUG_PORT}\"\n+# re-deploy ZTS, reference: ./deploy-scripts/zts-deploy.sh\n+# expose debug port\n+docker run --rm \\\n+    --network=\"${DOCKER_NETWORK}\" \\\n+    -p \"${ZTS_DEBUG_PORT}:${ZTS_DEBUG_PORT}\" \\\n+    --link \"${ZTS_HOST}:target\" \\\n+    alpine/socat \\\n+    \"tcp-listen:${ZTS_DEBUG_PORT},fork,reuseaddr\" \\\n+    \"tcp-connect:target:${ZTS_DEBUG_PORT}\"\n+```\n \n <a id=\"markdown-cleanup\" name=\"cleanup\"></a>\n ## Cleanup\n+\n ```bash\n-# remove deployment\n+# remove Athenz containers\n+make remove-containers\n+\n+# remove server data\n+make remove-files\n+\n+# remove bootstrap setup files", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMzMjUwMw=="}, "originalCommit": {"oid": "aad60957f2178f8e8bfee09481ae5fe7e0fc2b4c"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQwODQ1OA==", "bodyText": "I'm sorry, it was a mistake. I think this is fine.", "url": "https://github.com/AthenZ/athenz/pull/944#discussion_r418408458", "createdAt": "2020-05-01T04:11:10Z", "author": {"login": "ssunorz"}, "path": "docker/README.md", "diffHunk": "@@ -6,117 +6,157 @@\n \n - [Athenz on Docker](#athenz-on-docker)\n     - [Index](#index)\n-    - [Prerequisite](#prerequisite)\n+    - [Prerequisites](#prerequisites)\n     - [Build Athenz](#build-athenz)\n     - [Deploy Athenz](#deploy-athenz)\n+    - [Verify Athenz Deployment](#verify-athenz-deployment)\n+        - [JAVA Remote debugging](#java-remote-debugging)\n     - [Cleanup](#cleanup)\n-    - [Configuration Details](#configuration-details)\n-    - [Useful Commands](#useful-commands)\n-    - [[WIP] deploy with docker-stack](#wip-deploy-with-docker-stack)\n-    - [TO-DO](#to-do)\n-    - [Important Files](#important-files)\n+    - [Appendix](#appendix)\n+        - [Important Files](#important-files)\n+        - [[WIP] Configuration Details](#wip-configuration-details)\n+        - [Useful Commands](#useful-commands)\n+        - [TODO](#todo)\n \n <!-- /TOC -->\n \n-<a id=\"markdown-prerequisite\" name=\"prerequisite\"></a>\n-## Prerequisite\n-- docker\n-- make\n+<a id=\"markdown-prerequisites\" name=\"prerequisites\"></a>\n+## Prerequisites\n+\n+1. `git`\n+1. `docker`\n+1. `make`\n \n <a id=\"markdown-build-athenz\" name=\"build-athenz\"></a>\n ## Build Athenz\n \n ```bash\n cd `git rev-parse --show-toplevel`/docker\n \n-# there are a lot of build logs. You may want to check it inside a log file later on.\n-make build | tee ./athenz-docker-build.log\n+# it takes about 15-30 mins\n+make build\n+\n+# TODO: update the min. version before merge\n+# P.S. the latest code may cause docker build to fail, please use older version by specifying the tag version (> v1.8.60) or post an issue\n+# make build TAG=v1.8.60\n ```\n \n <a id=\"markdown-deploy-athenz\" name=\"deploy-athenz\"></a>\n ## Deploy Athenz\n \n+- production environment\n+    - [Athenz-bootstrap](./docs/Athenz-bootstrap.md)\n+- development environment\n+    ```bash\n+    make deploy-dev\n+    ```\n+\n+<a id=\"markdown-verify-athenz-deployment\" name=\"verify-athenz-deployment\"></a>\n+## Verify Athenz Deployment\n+\n+- production environment\n+    - [acceptance-test](./docs/acceptance-test.md)\n - development environment\n-    - deploy commands\n-        ```bash\n-        cd `git rev-parse --show-toplevel`/docker\n-\n-        # 1. set passwords (P.S. values in *.properties files will overwrite these values)\n-        source ./setup-scripts/0.export-default-passwords.sh\n-\n-        # 2. generate key-pairs, certificates and keystore/truststore\n-        make setup-dev-config\n-\n-        # 3. (once ONLY) create docker network\n-        make setup-docker-network\n-\n-        # 4.1 (optional) if you are running web browser and docker containers in the same host\n-        export HOSTNAME=localhost\n-        # 4.2. run Athenz\n-        make run-docker-dev\n-        ```\n-    - Note for UI\n-        - To ignore certificate warning from the browser,\n-            1. for ZMS server certificate,\n-                1. get ZMS URL by `echo https://${HOSTNAME}:${ZMS_PORT:-4443}/zms/v1/status`\n-                1. access ZMS using above URL in the browser\n-                1. ignore the browser warning (certificate authority invalid)\n-            1. for UI server certificate,\n-                1. get UI URL by `echo https://${HOSTNAME}:${UI_PORT:-443}/`\n-                1. access UI using above URL in the browser\n-                1. ignore the browser warning (certificate authority invalid)\n-            - Why do I need to explicitly ignore certificate warning from the browser for both ZMS and UI?\n-                - You need to connect to ZMS to get a user token during the login process of UI.\n-                - Since the certificates generated in DEV. deployment are all self-signed certificates, they are not trusted by the browser.\n-                - Also, they may not have the correct `${HOSTNAME}` in the SAN field depending on your DEV. deployment.\n-                - Hence, explicitly ignoring the browsers warning message is needed for both ZMS and UI.\n-        - UI login username/password\n-            - username: `admin` ([zms.properties](./zms/conf/zms.properties#L37-L41))\n-            - password: `replace_me_with_a_strong_password` ([deploy script](./deploy-scripts/1.2.config-zms-domain-admin.dev.sh#L12))\n+    ```bash\n+    make verify\n+    ```\n+\n+<a id=\"markdown-java-remote-debugging\" name=\"java-remote-debugging\"></a>\n+### JAVA Remote debugging\n+\n+```bash\n+### ZMS\n+ZMS_DEBUG_PORT=8001\n+export ZMS_JAVA_OPTS=\"-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=${ZMS_DEBUG_PORT}\"\n+# re-deploy ZMS, reference: ./deploy-scripts/zms-deploy.sh\n+# expose debug port\n+docker run --rm \\\n+    --network=\"${DOCKER_NETWORK}\" \\\n+    -p \"${ZMS_DEBUG_PORT}:${ZMS_DEBUG_PORT}\" \\\n+    --link \"${ZMS_HOST}:target\" \\\n+    alpine/socat \\\n+    \"tcp-listen:${ZMS_DEBUG_PORT},fork,reuseaddr\" \\\n+    \"tcp-connect:target:${ZMS_DEBUG_PORT}\"\n+\n+### ZTS\n+ZTS_DEBUG_PORT=8002\n+export ZTS_JAVA_OPTS=\"-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=${ZTS_DEBUG_PORT}\"\n+# re-deploy ZTS, reference: ./deploy-scripts/zts-deploy.sh\n+# expose debug port\n+docker run --rm \\\n+    --network=\"${DOCKER_NETWORK}\" \\\n+    -p \"${ZTS_DEBUG_PORT}:${ZTS_DEBUG_PORT}\" \\\n+    --link \"${ZTS_HOST}:target\" \\\n+    alpine/socat \\\n+    \"tcp-listen:${ZTS_DEBUG_PORT},fork,reuseaddr\" \\\n+    \"tcp-connect:target:${ZTS_DEBUG_PORT}\"\n+```\n \n <a id=\"markdown-cleanup\" name=\"cleanup\"></a>\n ## Cleanup\n+\n ```bash\n-# remove deployment\n+# remove Athenz containers\n+make remove-containers\n+\n+# remove server data\n+make remove-files\n+\n+# remove bootstrap setup files", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMzMjUwMw=="}, "originalCommit": {"oid": "aad60957f2178f8e8bfee09481ae5fe7e0fc2b4c"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjkxOTQ1OnYy", "diffSide": "RIGHT", "path": "docker/README.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMjo1MTowNlrOGO9AvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNDowNzowNFrOGPBlfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMzMjg2MA==", "bodyText": "Is the comment correct?", "url": "https://github.com/AthenZ/athenz/pull/944#discussion_r418332860", "createdAt": "2020-04-30T22:51:06Z", "author": {"login": "ssunorz"}, "path": "docker/README.md", "diffHunk": "@@ -6,117 +6,157 @@\n \n - [Athenz on Docker](#athenz-on-docker)\n     - [Index](#index)\n-    - [Prerequisite](#prerequisite)\n+    - [Prerequisites](#prerequisites)\n     - [Build Athenz](#build-athenz)\n     - [Deploy Athenz](#deploy-athenz)\n+    - [Verify Athenz Deployment](#verify-athenz-deployment)\n+        - [JAVA Remote debugging](#java-remote-debugging)\n     - [Cleanup](#cleanup)\n-    - [Configuration Details](#configuration-details)\n-    - [Useful Commands](#useful-commands)\n-    - [[WIP] deploy with docker-stack](#wip-deploy-with-docker-stack)\n-    - [TO-DO](#to-do)\n-    - [Important Files](#important-files)\n+    - [Appendix](#appendix)\n+        - [Important Files](#important-files)\n+        - [[WIP] Configuration Details](#wip-configuration-details)\n+        - [Useful Commands](#useful-commands)\n+        - [TODO](#todo)\n \n <!-- /TOC -->\n \n-<a id=\"markdown-prerequisite\" name=\"prerequisite\"></a>\n-## Prerequisite\n-- docker\n-- make\n+<a id=\"markdown-prerequisites\" name=\"prerequisites\"></a>\n+## Prerequisites\n+\n+1. `git`\n+1. `docker`\n+1. `make`\n \n <a id=\"markdown-build-athenz\" name=\"build-athenz\"></a>\n ## Build Athenz\n \n ```bash\n cd `git rev-parse --show-toplevel`/docker\n \n-# there are a lot of build logs. You may want to check it inside a log file later on.\n-make build | tee ./athenz-docker-build.log\n+# it takes about 15-30 mins\n+make build\n+\n+# TODO: update the min. version before merge\n+# P.S. the latest code may cause docker build to fail, please use older version by specifying the tag version (> v1.8.60) or post an issue\n+# make build TAG=v1.8.60\n ```\n \n <a id=\"markdown-deploy-athenz\" name=\"deploy-athenz\"></a>\n ## Deploy Athenz\n \n+- production environment\n+    - [Athenz-bootstrap](./docs/Athenz-bootstrap.md)\n+- development environment\n+    ```bash\n+    make deploy-dev\n+    ```\n+\n+<a id=\"markdown-verify-athenz-deployment\" name=\"verify-athenz-deployment\"></a>\n+## Verify Athenz Deployment\n+\n+- production environment\n+    - [acceptance-test](./docs/acceptance-test.md)\n - development environment\n-    - deploy commands\n-        ```bash\n-        cd `git rev-parse --show-toplevel`/docker\n-\n-        # 1. set passwords (P.S. values in *.properties files will overwrite these values)\n-        source ./setup-scripts/0.export-default-passwords.sh\n-\n-        # 2. generate key-pairs, certificates and keystore/truststore\n-        make setup-dev-config\n-\n-        # 3. (once ONLY) create docker network\n-        make setup-docker-network\n-\n-        # 4.1 (optional) if you are running web browser and docker containers in the same host\n-        export HOSTNAME=localhost\n-        # 4.2. run Athenz\n-        make run-docker-dev\n-        ```\n-    - Note for UI\n-        - To ignore certificate warning from the browser,\n-            1. for ZMS server certificate,\n-                1. get ZMS URL by `echo https://${HOSTNAME}:${ZMS_PORT:-4443}/zms/v1/status`\n-                1. access ZMS using above URL in the browser\n-                1. ignore the browser warning (certificate authority invalid)\n-            1. for UI server certificate,\n-                1. get UI URL by `echo https://${HOSTNAME}:${UI_PORT:-443}/`\n-                1. access UI using above URL in the browser\n-                1. ignore the browser warning (certificate authority invalid)\n-            - Why do I need to explicitly ignore certificate warning from the browser for both ZMS and UI?\n-                - You need to connect to ZMS to get a user token during the login process of UI.\n-                - Since the certificates generated in DEV. deployment are all self-signed certificates, they are not trusted by the browser.\n-                - Also, they may not have the correct `${HOSTNAME}` in the SAN field depending on your DEV. deployment.\n-                - Hence, explicitly ignoring the browsers warning message is needed for both ZMS and UI.\n-        - UI login username/password\n-            - username: `admin` ([zms.properties](./zms/conf/zms.properties#L37-L41))\n-            - password: `replace_me_with_a_strong_password` ([deploy script](./deploy-scripts/1.2.config-zms-domain-admin.dev.sh#L12))\n+    ```bash\n+    make verify\n+    ```\n+\n+<a id=\"markdown-java-remote-debugging\" name=\"java-remote-debugging\"></a>\n+### JAVA Remote debugging\n+\n+```bash\n+### ZMS\n+ZMS_DEBUG_PORT=8001\n+export ZMS_JAVA_OPTS=\"-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=${ZMS_DEBUG_PORT}\"\n+# re-deploy ZMS, reference: ./deploy-scripts/zms-deploy.sh\n+# expose debug port\n+docker run --rm \\\n+    --network=\"${DOCKER_NETWORK}\" \\\n+    -p \"${ZMS_DEBUG_PORT}:${ZMS_DEBUG_PORT}\" \\\n+    --link \"${ZMS_HOST}:target\" \\\n+    alpine/socat \\\n+    \"tcp-listen:${ZMS_DEBUG_PORT},fork,reuseaddr\" \\\n+    \"tcp-connect:target:${ZMS_DEBUG_PORT}\"\n+\n+### ZTS\n+ZTS_DEBUG_PORT=8002\n+export ZTS_JAVA_OPTS=\"-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=${ZTS_DEBUG_PORT}\"\n+# re-deploy ZTS, reference: ./deploy-scripts/zts-deploy.sh\n+# expose debug port\n+docker run --rm \\\n+    --network=\"${DOCKER_NETWORK}\" \\\n+    -p \"${ZTS_DEBUG_PORT}:${ZTS_DEBUG_PORT}\" \\\n+    --link \"${ZTS_HOST}:target\" \\\n+    alpine/socat \\\n+    \"tcp-listen:${ZTS_DEBUG_PORT},fork,reuseaddr\" \\\n+    \"tcp-connect:target:${ZTS_DEBUG_PORT}\"\n+```\n \n <a id=\"markdown-cleanup\" name=\"cleanup\"></a>\n ## Cleanup\n+\n ```bash\n-# remove deployment\n+# remove Athenz containers\n+make remove-containers\n+\n+# remove server data\n+make remove-files\n+\n+# remove bootstrap setup files\n+make reset-repo\n+```\n+```bash\n+# ENV reset", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aad60957f2178f8e8bfee09481ae5fe7e0fc2b4c"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQwNDQxOA==", "bodyText": "how about\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # ENV reset\n          \n          \n            \n            # reset docker and repo", "url": "https://github.com/AthenZ/athenz/pull/944#discussion_r418404418", "createdAt": "2020-05-01T03:48:08Z", "author": {"login": "WindzCUHK"}, "path": "docker/README.md", "diffHunk": "@@ -6,117 +6,157 @@\n \n - [Athenz on Docker](#athenz-on-docker)\n     - [Index](#index)\n-    - [Prerequisite](#prerequisite)\n+    - [Prerequisites](#prerequisites)\n     - [Build Athenz](#build-athenz)\n     - [Deploy Athenz](#deploy-athenz)\n+    - [Verify Athenz Deployment](#verify-athenz-deployment)\n+        - [JAVA Remote debugging](#java-remote-debugging)\n     - [Cleanup](#cleanup)\n-    - [Configuration Details](#configuration-details)\n-    - [Useful Commands](#useful-commands)\n-    - [[WIP] deploy with docker-stack](#wip-deploy-with-docker-stack)\n-    - [TO-DO](#to-do)\n-    - [Important Files](#important-files)\n+    - [Appendix](#appendix)\n+        - [Important Files](#important-files)\n+        - [[WIP] Configuration Details](#wip-configuration-details)\n+        - [Useful Commands](#useful-commands)\n+        - [TODO](#todo)\n \n <!-- /TOC -->\n \n-<a id=\"markdown-prerequisite\" name=\"prerequisite\"></a>\n-## Prerequisite\n-- docker\n-- make\n+<a id=\"markdown-prerequisites\" name=\"prerequisites\"></a>\n+## Prerequisites\n+\n+1. `git`\n+1. `docker`\n+1. `make`\n \n <a id=\"markdown-build-athenz\" name=\"build-athenz\"></a>\n ## Build Athenz\n \n ```bash\n cd `git rev-parse --show-toplevel`/docker\n \n-# there are a lot of build logs. You may want to check it inside a log file later on.\n-make build | tee ./athenz-docker-build.log\n+# it takes about 15-30 mins\n+make build\n+\n+# TODO: update the min. version before merge\n+# P.S. the latest code may cause docker build to fail, please use older version by specifying the tag version (> v1.8.60) or post an issue\n+# make build TAG=v1.8.60\n ```\n \n <a id=\"markdown-deploy-athenz\" name=\"deploy-athenz\"></a>\n ## Deploy Athenz\n \n+- production environment\n+    - [Athenz-bootstrap](./docs/Athenz-bootstrap.md)\n+- development environment\n+    ```bash\n+    make deploy-dev\n+    ```\n+\n+<a id=\"markdown-verify-athenz-deployment\" name=\"verify-athenz-deployment\"></a>\n+## Verify Athenz Deployment\n+\n+- production environment\n+    - [acceptance-test](./docs/acceptance-test.md)\n - development environment\n-    - deploy commands\n-        ```bash\n-        cd `git rev-parse --show-toplevel`/docker\n-\n-        # 1. set passwords (P.S. values in *.properties files will overwrite these values)\n-        source ./setup-scripts/0.export-default-passwords.sh\n-\n-        # 2. generate key-pairs, certificates and keystore/truststore\n-        make setup-dev-config\n-\n-        # 3. (once ONLY) create docker network\n-        make setup-docker-network\n-\n-        # 4.1 (optional) if you are running web browser and docker containers in the same host\n-        export HOSTNAME=localhost\n-        # 4.2. run Athenz\n-        make run-docker-dev\n-        ```\n-    - Note for UI\n-        - To ignore certificate warning from the browser,\n-            1. for ZMS server certificate,\n-                1. get ZMS URL by `echo https://${HOSTNAME}:${ZMS_PORT:-4443}/zms/v1/status`\n-                1. access ZMS using above URL in the browser\n-                1. ignore the browser warning (certificate authority invalid)\n-            1. for UI server certificate,\n-                1. get UI URL by `echo https://${HOSTNAME}:${UI_PORT:-443}/`\n-                1. access UI using above URL in the browser\n-                1. ignore the browser warning (certificate authority invalid)\n-            - Why do I need to explicitly ignore certificate warning from the browser for both ZMS and UI?\n-                - You need to connect to ZMS to get a user token during the login process of UI.\n-                - Since the certificates generated in DEV. deployment are all self-signed certificates, they are not trusted by the browser.\n-                - Also, they may not have the correct `${HOSTNAME}` in the SAN field depending on your DEV. deployment.\n-                - Hence, explicitly ignoring the browsers warning message is needed for both ZMS and UI.\n-        - UI login username/password\n-            - username: `admin` ([zms.properties](./zms/conf/zms.properties#L37-L41))\n-            - password: `replace_me_with_a_strong_password` ([deploy script](./deploy-scripts/1.2.config-zms-domain-admin.dev.sh#L12))\n+    ```bash\n+    make verify\n+    ```\n+\n+<a id=\"markdown-java-remote-debugging\" name=\"java-remote-debugging\"></a>\n+### JAVA Remote debugging\n+\n+```bash\n+### ZMS\n+ZMS_DEBUG_PORT=8001\n+export ZMS_JAVA_OPTS=\"-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=${ZMS_DEBUG_PORT}\"\n+# re-deploy ZMS, reference: ./deploy-scripts/zms-deploy.sh\n+# expose debug port\n+docker run --rm \\\n+    --network=\"${DOCKER_NETWORK}\" \\\n+    -p \"${ZMS_DEBUG_PORT}:${ZMS_DEBUG_PORT}\" \\\n+    --link \"${ZMS_HOST}:target\" \\\n+    alpine/socat \\\n+    \"tcp-listen:${ZMS_DEBUG_PORT},fork,reuseaddr\" \\\n+    \"tcp-connect:target:${ZMS_DEBUG_PORT}\"\n+\n+### ZTS\n+ZTS_DEBUG_PORT=8002\n+export ZTS_JAVA_OPTS=\"-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=${ZTS_DEBUG_PORT}\"\n+# re-deploy ZTS, reference: ./deploy-scripts/zts-deploy.sh\n+# expose debug port\n+docker run --rm \\\n+    --network=\"${DOCKER_NETWORK}\" \\\n+    -p \"${ZTS_DEBUG_PORT}:${ZTS_DEBUG_PORT}\" \\\n+    --link \"${ZTS_HOST}:target\" \\\n+    alpine/socat \\\n+    \"tcp-listen:${ZTS_DEBUG_PORT},fork,reuseaddr\" \\\n+    \"tcp-connect:target:${ZTS_DEBUG_PORT}\"\n+```\n \n <a id=\"markdown-cleanup\" name=\"cleanup\"></a>\n ## Cleanup\n+\n ```bash\n-# remove deployment\n+# remove Athenz containers\n+make remove-containers\n+\n+# remove server data\n+make remove-files\n+\n+# remove bootstrap setup files\n+make reset-repo\n+```\n+```bash\n+# ENV reset", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMzMjg2MA=="}, "originalCommit": {"oid": "aad60957f2178f8e8bfee09481ae5fe7e0fc2b4c"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQwNzgwNg==", "bodyText": "I think it's good.", "url": "https://github.com/AthenZ/athenz/pull/944#discussion_r418407806", "createdAt": "2020-05-01T04:07:04Z", "author": {"login": "ssunorz"}, "path": "docker/README.md", "diffHunk": "@@ -6,117 +6,157 @@\n \n - [Athenz on Docker](#athenz-on-docker)\n     - [Index](#index)\n-    - [Prerequisite](#prerequisite)\n+    - [Prerequisites](#prerequisites)\n     - [Build Athenz](#build-athenz)\n     - [Deploy Athenz](#deploy-athenz)\n+    - [Verify Athenz Deployment](#verify-athenz-deployment)\n+        - [JAVA Remote debugging](#java-remote-debugging)\n     - [Cleanup](#cleanup)\n-    - [Configuration Details](#configuration-details)\n-    - [Useful Commands](#useful-commands)\n-    - [[WIP] deploy with docker-stack](#wip-deploy-with-docker-stack)\n-    - [TO-DO](#to-do)\n-    - [Important Files](#important-files)\n+    - [Appendix](#appendix)\n+        - [Important Files](#important-files)\n+        - [[WIP] Configuration Details](#wip-configuration-details)\n+        - [Useful Commands](#useful-commands)\n+        - [TODO](#todo)\n \n <!-- /TOC -->\n \n-<a id=\"markdown-prerequisite\" name=\"prerequisite\"></a>\n-## Prerequisite\n-- docker\n-- make\n+<a id=\"markdown-prerequisites\" name=\"prerequisites\"></a>\n+## Prerequisites\n+\n+1. `git`\n+1. `docker`\n+1. `make`\n \n <a id=\"markdown-build-athenz\" name=\"build-athenz\"></a>\n ## Build Athenz\n \n ```bash\n cd `git rev-parse --show-toplevel`/docker\n \n-# there are a lot of build logs. You may want to check it inside a log file later on.\n-make build | tee ./athenz-docker-build.log\n+# it takes about 15-30 mins\n+make build\n+\n+# TODO: update the min. version before merge\n+# P.S. the latest code may cause docker build to fail, please use older version by specifying the tag version (> v1.8.60) or post an issue\n+# make build TAG=v1.8.60\n ```\n \n <a id=\"markdown-deploy-athenz\" name=\"deploy-athenz\"></a>\n ## Deploy Athenz\n \n+- production environment\n+    - [Athenz-bootstrap](./docs/Athenz-bootstrap.md)\n+- development environment\n+    ```bash\n+    make deploy-dev\n+    ```\n+\n+<a id=\"markdown-verify-athenz-deployment\" name=\"verify-athenz-deployment\"></a>\n+## Verify Athenz Deployment\n+\n+- production environment\n+    - [acceptance-test](./docs/acceptance-test.md)\n - development environment\n-    - deploy commands\n-        ```bash\n-        cd `git rev-parse --show-toplevel`/docker\n-\n-        # 1. set passwords (P.S. values in *.properties files will overwrite these values)\n-        source ./setup-scripts/0.export-default-passwords.sh\n-\n-        # 2. generate key-pairs, certificates and keystore/truststore\n-        make setup-dev-config\n-\n-        # 3. (once ONLY) create docker network\n-        make setup-docker-network\n-\n-        # 4.1 (optional) if you are running web browser and docker containers in the same host\n-        export HOSTNAME=localhost\n-        # 4.2. run Athenz\n-        make run-docker-dev\n-        ```\n-    - Note for UI\n-        - To ignore certificate warning from the browser,\n-            1. for ZMS server certificate,\n-                1. get ZMS URL by `echo https://${HOSTNAME}:${ZMS_PORT:-4443}/zms/v1/status`\n-                1. access ZMS using above URL in the browser\n-                1. ignore the browser warning (certificate authority invalid)\n-            1. for UI server certificate,\n-                1. get UI URL by `echo https://${HOSTNAME}:${UI_PORT:-443}/`\n-                1. access UI using above URL in the browser\n-                1. ignore the browser warning (certificate authority invalid)\n-            - Why do I need to explicitly ignore certificate warning from the browser for both ZMS and UI?\n-                - You need to connect to ZMS to get a user token during the login process of UI.\n-                - Since the certificates generated in DEV. deployment are all self-signed certificates, they are not trusted by the browser.\n-                - Also, they may not have the correct `${HOSTNAME}` in the SAN field depending on your DEV. deployment.\n-                - Hence, explicitly ignoring the browsers warning message is needed for both ZMS and UI.\n-        - UI login username/password\n-            - username: `admin` ([zms.properties](./zms/conf/zms.properties#L37-L41))\n-            - password: `replace_me_with_a_strong_password` ([deploy script](./deploy-scripts/1.2.config-zms-domain-admin.dev.sh#L12))\n+    ```bash\n+    make verify\n+    ```\n+\n+<a id=\"markdown-java-remote-debugging\" name=\"java-remote-debugging\"></a>\n+### JAVA Remote debugging\n+\n+```bash\n+### ZMS\n+ZMS_DEBUG_PORT=8001\n+export ZMS_JAVA_OPTS=\"-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=${ZMS_DEBUG_PORT}\"\n+# re-deploy ZMS, reference: ./deploy-scripts/zms-deploy.sh\n+# expose debug port\n+docker run --rm \\\n+    --network=\"${DOCKER_NETWORK}\" \\\n+    -p \"${ZMS_DEBUG_PORT}:${ZMS_DEBUG_PORT}\" \\\n+    --link \"${ZMS_HOST}:target\" \\\n+    alpine/socat \\\n+    \"tcp-listen:${ZMS_DEBUG_PORT},fork,reuseaddr\" \\\n+    \"tcp-connect:target:${ZMS_DEBUG_PORT}\"\n+\n+### ZTS\n+ZTS_DEBUG_PORT=8002\n+export ZTS_JAVA_OPTS=\"-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=${ZTS_DEBUG_PORT}\"\n+# re-deploy ZTS, reference: ./deploy-scripts/zts-deploy.sh\n+# expose debug port\n+docker run --rm \\\n+    --network=\"${DOCKER_NETWORK}\" \\\n+    -p \"${ZTS_DEBUG_PORT}:${ZTS_DEBUG_PORT}\" \\\n+    --link \"${ZTS_HOST}:target\" \\\n+    alpine/socat \\\n+    \"tcp-listen:${ZTS_DEBUG_PORT},fork,reuseaddr\" \\\n+    \"tcp-connect:target:${ZTS_DEBUG_PORT}\"\n+```\n \n <a id=\"markdown-cleanup\" name=\"cleanup\"></a>\n ## Cleanup\n+\n ```bash\n-# remove deployment\n+# remove Athenz containers\n+make remove-containers\n+\n+# remove server data\n+make remove-files\n+\n+# remove bootstrap setup files\n+make reset-repo\n+```\n+```bash\n+# ENV reset", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMzMjg2MA=="}, "originalCommit": {"oid": "aad60957f2178f8e8bfee09481ae5fe7e0fc2b4c"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzQzNTEwOnYy", "diffSide": "RIGHT", "path": "docker/docs/try-out-Athenz-with-self-signed-CA.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNDoxNjoyN1rOGPBr-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMToxODozNVrOGRq_Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQwOTQ2NQ==", "bodyText": "I think it would be better to add the following command.\nBASE_DIR=\"`git rev-parse --show-toplevel`\"", "url": "https://github.com/AthenZ/athenz/pull/944#discussion_r418409465", "createdAt": "2020-05-01T04:16:27Z", "author": {"login": "ssunorz"}, "path": "docker/docs/try-out-Athenz-with-self-signed-CA.md", "diffHunk": "@@ -0,0 +1,133 @@\n+<a id=\"markdown-try-out-athenz-with-self-signed-ca-for-dev-only\" name=\"try-out-athenz-with-self-signed-ca-for-dev-only\"></a>\n+# Try out Athenz with self-signed CA (for dev. ONLY)\n+\n+<!-- TOC -->\n+\n+- [Try out Athenz with self-signed CA (for dev. ONLY)](#try-out-athenz-with-self-signed-ca-for-dev-only)\n+    - [Prerequisites](#prerequisites)\n+    - [Prepare certificates](#prepare-certificates)\n+    - [Overwrite env., and continue the setup](#overwrite-env-and-continue-the-setup)\n+    - [Appendix](#appendix)\n+        - [Note for mac users (not recommended)](#note-for-mac-users-not-recommended)\n+\n+<!-- /TOC -->\n+\n+<a id=\"markdown-prerequisites\" name=\"prerequisites\"></a>\n+## Prerequisites\n+\n+All the setup commands below are expected to run inside [athenz-setup-env](../setup-scripts/Dockerfile) container.\n+```bash", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "750452c03f4e6f9a51e26663e7f807d3db91b92f"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE4MzMxMA==", "bodyText": "added in 392d4ea", "url": "https://github.com/AthenZ/athenz/pull/944#discussion_r421183310", "createdAt": "2020-05-07T01:18:35Z", "author": {"login": "WindzCUHK"}, "path": "docker/docs/try-out-Athenz-with-self-signed-CA.md", "diffHunk": "@@ -0,0 +1,133 @@\n+<a id=\"markdown-try-out-athenz-with-self-signed-ca-for-dev-only\" name=\"try-out-athenz-with-self-signed-ca-for-dev-only\"></a>\n+# Try out Athenz with self-signed CA (for dev. ONLY)\n+\n+<!-- TOC -->\n+\n+- [Try out Athenz with self-signed CA (for dev. ONLY)](#try-out-athenz-with-self-signed-ca-for-dev-only)\n+    - [Prerequisites](#prerequisites)\n+    - [Prepare certificates](#prepare-certificates)\n+    - [Overwrite env., and continue the setup](#overwrite-env-and-continue-the-setup)\n+    - [Appendix](#appendix)\n+        - [Note for mac users (not recommended)](#note-for-mac-users-not-recommended)\n+\n+<!-- /TOC -->\n+\n+<a id=\"markdown-prerequisites\" name=\"prerequisites\"></a>\n+## Prerequisites\n+\n+All the setup commands below are expected to run inside [athenz-setup-env](../setup-scripts/Dockerfile) container.\n+```bash", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQwOTQ2NQ=="}, "originalCommit": {"oid": "750452c03f4e6f9a51e26663e7f807d3db91b92f"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMTg2OTM1OnYy", "diffSide": "RIGHT", "path": "docker/sample/zts/create-self-signed-certs.sh", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMDoxMzoxNlrOGRp0hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMToyMDowNlrOGRrBRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE2NDE2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              ca: ${ATHENZ_CA_PATH}\n          \n          \n            \n              ca: ${DEV_ATHENZ_CA_PATH}", "url": "https://github.com/AthenZ/athenz/pull/944#discussion_r421164167", "createdAt": "2020-05-07T00:13:16Z", "author": {"login": "ssunorz"}, "path": "docker/sample/zts/create-self-signed-certs.sh", "diffHunk": "@@ -0,0 +1,82 @@\n+#!/bin/sh\n+\n+set -eu\n+set -o pipefail\n+\n+# to script directory\n+cd \"$(dirname \"$0\")\"\n+echo 'running...'\n+\n+### ----------------------------------------------------------------\n+# ZTS server certificate\n+# create CSR\n+CN='Sample Self Signed ZTS' SAN=\"${ZTS_HOST}\" openssl req -nodes \\\n+  -config \"${SELF_SIGN_CNF_PATH}\" \\\n+  -reqexts v3_req -extensions usr_cert \\\n+  -newkey rsa:4096 \\\n+  -keyout \"${DEV_ZTS_CERT_KEY_PATH}\" \\\n+  -out \"${DEV_ZTS_CSR_PATH}\" 2> /dev/null\n+# sign request\n+SAN=\"${ZTS_HOST}\" openssl x509 -req -days 3650 \\\n+  -in \"${DEV_ZTS_CSR_PATH}\" \\\n+  -CA \"${DEV_ATHENZ_CA_PATH}\" \\\n+  -CAkey \"${DEV_ATHENZ_CA_KEY_PATH}\" \\\n+  -CAcreateserial \\\n+  -extfile \"${SELF_SIGN_CNF_PATH}\" -extensions usr_cert \\\n+  -out \"${DEV_ZTS_CERT_PATH}\"\n+\n+### ----------------------------------------------------------------\n+# intermediate certificate for certificate signing\n+# create CSR\n+CN='Sample Self Signed Intermediate CA' openssl req -nodes \\\n+  -config \"${SELF_SIGN_CNF_PATH}\" \\\n+  -newkey rsa:4096 \\\n+  -keyout \"${DEV_ZTS_SIGNER_CERT_KEY_PATH}\" \\\n+  -out \"${DEV_ZTS_SIGNER_CSR_PATH}\" 2> /dev/null\n+# sign request using Athenz CA\n+openssl x509 -req -days 3650 \\\n+  -in \"${DEV_ZTS_SIGNER_CSR_PATH}\" \\\n+  -CA \"${DEV_SERVICE_CA_PATH}\" \\\n+  -CAkey \"${DEV_SERVICE_CA_KEY_PATH}\" \\\n+  -CAcreateserial \\\n+  -extfile \"${SELF_SIGN_CNF_PATH}\" -extensions v3_ca \\\n+  -out \"${DEV_ZTS_SIGNER_CERT_PATH}\"\n+\n+### ----------------------------------------------------------------\n+# ZTS client certificate\n+# create CSR (make sure the CN == 'sys.auth.zts')\n+CN='sys.auth.zts' openssl req -nodes \\\n+  -config \"${SELF_SIGN_CNF_PATH}\" \\\n+  -newkey rsa:4096 \\\n+  -keyout \"${DEV_ZMS_CLIENT_CERT_KEY_PATH}\" \\\n+  -out \"${DEV_ZMS_CLIENT_CSR_PATH}\" 2> /dev/null\n+# sign request using the intermediate CA of certificate signer\n+openssl x509 -req -days 3650 \\\n+  -in \"${DEV_ZMS_CLIENT_CSR_PATH}\" \\\n+  -CA \"${DEV_ZTS_SIGNER_CERT_PATH}\" \\\n+  -CAkey \"${DEV_ZTS_SIGNER_CERT_KEY_PATH}\" \\\n+  -CAcreateserial \\\n+  -extfile \"${SELF_SIGN_CNF_PATH}\" -extensions usr_cert \\\n+  -out \"${DEV_ZMS_CLIENT_CERT_PATH}\"\n+# create certificate bundle with client certificate and intermediate certificate\n+cat \"${DEV_ZMS_CLIENT_CERT_PATH}\" \"${DEV_ZTS_SIGNER_CERT_PATH}\" > \"${DEV_ZMS_CLIENT_CERT_BUNDLE_PATH}\"\n+\n+cat <<EOF\n+\n+self-signed ZTS server certificate created.\n+  ca: ${ATHENZ_CA_PATH}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "346a39829e4c70c95f56d23dcaa5e155201900e3"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE4MzgxMg==", "bodyText": "updated, thx", "url": "https://github.com/AthenZ/athenz/pull/944#discussion_r421183812", "createdAt": "2020-05-07T01:20:06Z", "author": {"login": "WindzCUHK"}, "path": "docker/sample/zts/create-self-signed-certs.sh", "diffHunk": "@@ -0,0 +1,82 @@\n+#!/bin/sh\n+\n+set -eu\n+set -o pipefail\n+\n+# to script directory\n+cd \"$(dirname \"$0\")\"\n+echo 'running...'\n+\n+### ----------------------------------------------------------------\n+# ZTS server certificate\n+# create CSR\n+CN='Sample Self Signed ZTS' SAN=\"${ZTS_HOST}\" openssl req -nodes \\\n+  -config \"${SELF_SIGN_CNF_PATH}\" \\\n+  -reqexts v3_req -extensions usr_cert \\\n+  -newkey rsa:4096 \\\n+  -keyout \"${DEV_ZTS_CERT_KEY_PATH}\" \\\n+  -out \"${DEV_ZTS_CSR_PATH}\" 2> /dev/null\n+# sign request\n+SAN=\"${ZTS_HOST}\" openssl x509 -req -days 3650 \\\n+  -in \"${DEV_ZTS_CSR_PATH}\" \\\n+  -CA \"${DEV_ATHENZ_CA_PATH}\" \\\n+  -CAkey \"${DEV_ATHENZ_CA_KEY_PATH}\" \\\n+  -CAcreateserial \\\n+  -extfile \"${SELF_SIGN_CNF_PATH}\" -extensions usr_cert \\\n+  -out \"${DEV_ZTS_CERT_PATH}\"\n+\n+### ----------------------------------------------------------------\n+# intermediate certificate for certificate signing\n+# create CSR\n+CN='Sample Self Signed Intermediate CA' openssl req -nodes \\\n+  -config \"${SELF_SIGN_CNF_PATH}\" \\\n+  -newkey rsa:4096 \\\n+  -keyout \"${DEV_ZTS_SIGNER_CERT_KEY_PATH}\" \\\n+  -out \"${DEV_ZTS_SIGNER_CSR_PATH}\" 2> /dev/null\n+# sign request using Athenz CA\n+openssl x509 -req -days 3650 \\\n+  -in \"${DEV_ZTS_SIGNER_CSR_PATH}\" \\\n+  -CA \"${DEV_SERVICE_CA_PATH}\" \\\n+  -CAkey \"${DEV_SERVICE_CA_KEY_PATH}\" \\\n+  -CAcreateserial \\\n+  -extfile \"${SELF_SIGN_CNF_PATH}\" -extensions v3_ca \\\n+  -out \"${DEV_ZTS_SIGNER_CERT_PATH}\"\n+\n+### ----------------------------------------------------------------\n+# ZTS client certificate\n+# create CSR (make sure the CN == 'sys.auth.zts')\n+CN='sys.auth.zts' openssl req -nodes \\\n+  -config \"${SELF_SIGN_CNF_PATH}\" \\\n+  -newkey rsa:4096 \\\n+  -keyout \"${DEV_ZMS_CLIENT_CERT_KEY_PATH}\" \\\n+  -out \"${DEV_ZMS_CLIENT_CSR_PATH}\" 2> /dev/null\n+# sign request using the intermediate CA of certificate signer\n+openssl x509 -req -days 3650 \\\n+  -in \"${DEV_ZMS_CLIENT_CSR_PATH}\" \\\n+  -CA \"${DEV_ZTS_SIGNER_CERT_PATH}\" \\\n+  -CAkey \"${DEV_ZTS_SIGNER_CERT_KEY_PATH}\" \\\n+  -CAcreateserial \\\n+  -extfile \"${SELF_SIGN_CNF_PATH}\" -extensions usr_cert \\\n+  -out \"${DEV_ZMS_CLIENT_CERT_PATH}\"\n+# create certificate bundle with client certificate and intermediate certificate\n+cat \"${DEV_ZMS_CLIENT_CERT_PATH}\" \"${DEV_ZTS_SIGNER_CERT_PATH}\" > \"${DEV_ZMS_CLIENT_CERT_BUNDLE_PATH}\"\n+\n+cat <<EOF\n+\n+self-signed ZTS server certificate created.\n+  ca: ${ATHENZ_CA_PATH}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE2NDE2Nw=="}, "originalCommit": {"oid": "346a39829e4c70c95f56d23dcaa5e155201900e3"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMTg3MDYxOnYy", "diffSide": "RIGHT", "path": "docker/sample/zts/create-self-signed-certs.sh", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMDoxMzo1NFrOGRp1Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMToyMDoxMlrOGRrBVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE2NDM0Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              ca: ${SERVICE_CA_PATH}\n          \n          \n            \n              ca: ${DEV_SERVICE_CA_PATH}", "url": "https://github.com/AthenZ/athenz/pull/944#discussion_r421164347", "createdAt": "2020-05-07T00:13:54Z", "author": {"login": "ssunorz"}, "path": "docker/sample/zts/create-self-signed-certs.sh", "diffHunk": "@@ -0,0 +1,82 @@\n+#!/bin/sh\n+\n+set -eu\n+set -o pipefail\n+\n+# to script directory\n+cd \"$(dirname \"$0\")\"\n+echo 'running...'\n+\n+### ----------------------------------------------------------------\n+# ZTS server certificate\n+# create CSR\n+CN='Sample Self Signed ZTS' SAN=\"${ZTS_HOST}\" openssl req -nodes \\\n+  -config \"${SELF_SIGN_CNF_PATH}\" \\\n+  -reqexts v3_req -extensions usr_cert \\\n+  -newkey rsa:4096 \\\n+  -keyout \"${DEV_ZTS_CERT_KEY_PATH}\" \\\n+  -out \"${DEV_ZTS_CSR_PATH}\" 2> /dev/null\n+# sign request\n+SAN=\"${ZTS_HOST}\" openssl x509 -req -days 3650 \\\n+  -in \"${DEV_ZTS_CSR_PATH}\" \\\n+  -CA \"${DEV_ATHENZ_CA_PATH}\" \\\n+  -CAkey \"${DEV_ATHENZ_CA_KEY_PATH}\" \\\n+  -CAcreateserial \\\n+  -extfile \"${SELF_SIGN_CNF_PATH}\" -extensions usr_cert \\\n+  -out \"${DEV_ZTS_CERT_PATH}\"\n+\n+### ----------------------------------------------------------------\n+# intermediate certificate for certificate signing\n+# create CSR\n+CN='Sample Self Signed Intermediate CA' openssl req -nodes \\\n+  -config \"${SELF_SIGN_CNF_PATH}\" \\\n+  -newkey rsa:4096 \\\n+  -keyout \"${DEV_ZTS_SIGNER_CERT_KEY_PATH}\" \\\n+  -out \"${DEV_ZTS_SIGNER_CSR_PATH}\" 2> /dev/null\n+# sign request using Athenz CA\n+openssl x509 -req -days 3650 \\\n+  -in \"${DEV_ZTS_SIGNER_CSR_PATH}\" \\\n+  -CA \"${DEV_SERVICE_CA_PATH}\" \\\n+  -CAkey \"${DEV_SERVICE_CA_KEY_PATH}\" \\\n+  -CAcreateserial \\\n+  -extfile \"${SELF_SIGN_CNF_PATH}\" -extensions v3_ca \\\n+  -out \"${DEV_ZTS_SIGNER_CERT_PATH}\"\n+\n+### ----------------------------------------------------------------\n+# ZTS client certificate\n+# create CSR (make sure the CN == 'sys.auth.zts')\n+CN='sys.auth.zts' openssl req -nodes \\\n+  -config \"${SELF_SIGN_CNF_PATH}\" \\\n+  -newkey rsa:4096 \\\n+  -keyout \"${DEV_ZMS_CLIENT_CERT_KEY_PATH}\" \\\n+  -out \"${DEV_ZMS_CLIENT_CSR_PATH}\" 2> /dev/null\n+# sign request using the intermediate CA of certificate signer\n+openssl x509 -req -days 3650 \\\n+  -in \"${DEV_ZMS_CLIENT_CSR_PATH}\" \\\n+  -CA \"${DEV_ZTS_SIGNER_CERT_PATH}\" \\\n+  -CAkey \"${DEV_ZTS_SIGNER_CERT_KEY_PATH}\" \\\n+  -CAcreateserial \\\n+  -extfile \"${SELF_SIGN_CNF_PATH}\" -extensions usr_cert \\\n+  -out \"${DEV_ZMS_CLIENT_CERT_PATH}\"\n+# create certificate bundle with client certificate and intermediate certificate\n+cat \"${DEV_ZMS_CLIENT_CERT_PATH}\" \"${DEV_ZTS_SIGNER_CERT_PATH}\" > \"${DEV_ZMS_CLIENT_CERT_BUNDLE_PATH}\"\n+\n+cat <<EOF\n+\n+self-signed ZTS server certificate created.\n+  ca: ${ATHENZ_CA_PATH}\n+  key: ${DEV_ZTS_CERT_KEY_PATH}\n+  cert: ${DEV_ZTS_CERT_PATH}\n+\n+self-signed Intermediate CA certificate created.\n+  ca: ${SERVICE_CA_PATH}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "346a39829e4c70c95f56d23dcaa5e155201900e3"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE4MzgzMQ==", "bodyText": "updated, thx", "url": "https://github.com/AthenZ/athenz/pull/944#discussion_r421183831", "createdAt": "2020-05-07T01:20:12Z", "author": {"login": "WindzCUHK"}, "path": "docker/sample/zts/create-self-signed-certs.sh", "diffHunk": "@@ -0,0 +1,82 @@\n+#!/bin/sh\n+\n+set -eu\n+set -o pipefail\n+\n+# to script directory\n+cd \"$(dirname \"$0\")\"\n+echo 'running...'\n+\n+### ----------------------------------------------------------------\n+# ZTS server certificate\n+# create CSR\n+CN='Sample Self Signed ZTS' SAN=\"${ZTS_HOST}\" openssl req -nodes \\\n+  -config \"${SELF_SIGN_CNF_PATH}\" \\\n+  -reqexts v3_req -extensions usr_cert \\\n+  -newkey rsa:4096 \\\n+  -keyout \"${DEV_ZTS_CERT_KEY_PATH}\" \\\n+  -out \"${DEV_ZTS_CSR_PATH}\" 2> /dev/null\n+# sign request\n+SAN=\"${ZTS_HOST}\" openssl x509 -req -days 3650 \\\n+  -in \"${DEV_ZTS_CSR_PATH}\" \\\n+  -CA \"${DEV_ATHENZ_CA_PATH}\" \\\n+  -CAkey \"${DEV_ATHENZ_CA_KEY_PATH}\" \\\n+  -CAcreateserial \\\n+  -extfile \"${SELF_SIGN_CNF_PATH}\" -extensions usr_cert \\\n+  -out \"${DEV_ZTS_CERT_PATH}\"\n+\n+### ----------------------------------------------------------------\n+# intermediate certificate for certificate signing\n+# create CSR\n+CN='Sample Self Signed Intermediate CA' openssl req -nodes \\\n+  -config \"${SELF_SIGN_CNF_PATH}\" \\\n+  -newkey rsa:4096 \\\n+  -keyout \"${DEV_ZTS_SIGNER_CERT_KEY_PATH}\" \\\n+  -out \"${DEV_ZTS_SIGNER_CSR_PATH}\" 2> /dev/null\n+# sign request using Athenz CA\n+openssl x509 -req -days 3650 \\\n+  -in \"${DEV_ZTS_SIGNER_CSR_PATH}\" \\\n+  -CA \"${DEV_SERVICE_CA_PATH}\" \\\n+  -CAkey \"${DEV_SERVICE_CA_KEY_PATH}\" \\\n+  -CAcreateserial \\\n+  -extfile \"${SELF_SIGN_CNF_PATH}\" -extensions v3_ca \\\n+  -out \"${DEV_ZTS_SIGNER_CERT_PATH}\"\n+\n+### ----------------------------------------------------------------\n+# ZTS client certificate\n+# create CSR (make sure the CN == 'sys.auth.zts')\n+CN='sys.auth.zts' openssl req -nodes \\\n+  -config \"${SELF_SIGN_CNF_PATH}\" \\\n+  -newkey rsa:4096 \\\n+  -keyout \"${DEV_ZMS_CLIENT_CERT_KEY_PATH}\" \\\n+  -out \"${DEV_ZMS_CLIENT_CSR_PATH}\" 2> /dev/null\n+# sign request using the intermediate CA of certificate signer\n+openssl x509 -req -days 3650 \\\n+  -in \"${DEV_ZMS_CLIENT_CSR_PATH}\" \\\n+  -CA \"${DEV_ZTS_SIGNER_CERT_PATH}\" \\\n+  -CAkey \"${DEV_ZTS_SIGNER_CERT_KEY_PATH}\" \\\n+  -CAcreateserial \\\n+  -extfile \"${SELF_SIGN_CNF_PATH}\" -extensions usr_cert \\\n+  -out \"${DEV_ZMS_CLIENT_CERT_PATH}\"\n+# create certificate bundle with client certificate and intermediate certificate\n+cat \"${DEV_ZMS_CLIENT_CERT_PATH}\" \"${DEV_ZTS_SIGNER_CERT_PATH}\" > \"${DEV_ZMS_CLIENT_CERT_BUNDLE_PATH}\"\n+\n+cat <<EOF\n+\n+self-signed ZTS server certificate created.\n+  ca: ${ATHENZ_CA_PATH}\n+  key: ${DEV_ZTS_CERT_KEY_PATH}\n+  cert: ${DEV_ZTS_CERT_PATH}\n+\n+self-signed Intermediate CA certificate created.\n+  ca: ${SERVICE_CA_PATH}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE2NDM0Nw=="}, "originalCommit": {"oid": "346a39829e4c70c95f56d23dcaa5e155201900e3"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjQ5MjcwOnYy", "diffSide": "RIGHT", "path": "docker/docs/configuration.dev.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNTo1NjowNlrOGRvbfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMDo1NDozN1rOGSP4Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI1NjA2Mg==", "bodyText": "I think it would be better to state that this file is a work in progress. Because there are multiple broken links.", "url": "https://github.com/AthenZ/athenz/pull/944#discussion_r421256062", "createdAt": "2020-05-07T05:56:06Z", "author": {"login": "ssunorz"}, "path": "docker/docs/configuration.dev.md", "diffHunk": "@@ -4,25 +4,19 @@\n ## Index", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efa346a06f0b705c98a0f95412a6aad8b862780d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc4Nzc1MQ==", "bodyText": "deleted", "url": "https://github.com/AthenZ/athenz/pull/944#discussion_r421787751", "createdAt": "2020-05-07T20:54:37Z", "author": {"login": "WindzCUHK"}, "path": "docker/docs/configuration.dev.md", "diffHunk": "@@ -4,25 +4,19 @@\n ## Index", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI1NjA2Mg=="}, "originalCommit": {"oid": "efa346a06f0b705c98a0f95412a6aad8b862780d"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjkzMDc2OnYy", "diffSide": "RIGHT", "path": "docker/docs/zms-setup.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODoyMDowM1rOGRznFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMDo1NzoxMFrOGSP97w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMyNDU2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            docker run --rm -it \\\n          \n          \n            \n            BASE_DIR=\"`git rev-parse --show-toplevel`\"\n          \n          \n            \n            docker run --rm -it \\", "url": "https://github.com/AthenZ/athenz/pull/944#discussion_r421324564", "createdAt": "2020-05-07T08:20:03Z", "author": {"login": "ssunorz"}, "path": "docker/docs/zms-setup.md", "diffHunk": "@@ -0,0 +1,213 @@\n+<a id=\"markdown-setup-zms-in-production-env\" name=\"setup-zms-in-production-env\"></a>\n+# Setup ZMS in production env.\n+\n+<!-- TOC -->\n+\n+- [Setup ZMS in production env.](#setup-zms-in-production-env)\n+    - [Prerequisites](#prerequisites)\n+    - [Target](#target)\n+    - [Steps](#steps)\n+        - [1. update your passwords](#1-update-your-passwords)\n+        - [2. get a server certificate for ZMS](#2-get-a-server-certificate-for-zms)\n+        - [3. create ZMS key pairs for signing Athenz token](#3-create-zms-key-pairs-for-signing-athenz-token)\n+        - [4. create ZMS trust store for HTTPS connections](#4-create-zms-trust-store-for-https-connections)\n+        - [5. create ZMS key store with ZMS server certificate](#5-create-zms-key-store-with-zms-server-certificate)\n+        - [6. config the Athenz domain admin](#6-config-the-athenz-domain-admin)\n+        - [7. summary](#7-summary)\n+    - [Get Athenz domain admin user certificate for accessing ZMS](#get-athenz-domain-admin-user-certificate-for-accessing-zms)\n+    - [Deploy ZMS](#deploy-zms)\n+        - [Debug ZMS](#debug-zms)\n+\n+<!-- /TOC -->\n+\n+<a id=\"markdown-prerequisites\" name=\"prerequisites\"></a>\n+## Prerequisites\n+\n+1. Env. setup done. ([env.sh](../env.sh))\n+1. Bootstrap setup done. ([Done step 1, 2, 3](./Athenz-bootstrap.md#bootstrap-steps))\n+1. All the setup commands below are expected to run inside [athenz-setup-env](../setup-scripts/Dockerfile) container.\n+```bash\n+docker run --rm -it \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efa346a06f0b705c98a0f95412a6aad8b862780d"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc4OTE2Nw==", "bodyText": "updated", "url": "https://github.com/AthenZ/athenz/pull/944#discussion_r421789167", "createdAt": "2020-05-07T20:57:10Z", "author": {"login": "WindzCUHK"}, "path": "docker/docs/zms-setup.md", "diffHunk": "@@ -0,0 +1,213 @@\n+<a id=\"markdown-setup-zms-in-production-env\" name=\"setup-zms-in-production-env\"></a>\n+# Setup ZMS in production env.\n+\n+<!-- TOC -->\n+\n+- [Setup ZMS in production env.](#setup-zms-in-production-env)\n+    - [Prerequisites](#prerequisites)\n+    - [Target](#target)\n+    - [Steps](#steps)\n+        - [1. update your passwords](#1-update-your-passwords)\n+        - [2. get a server certificate for ZMS](#2-get-a-server-certificate-for-zms)\n+        - [3. create ZMS key pairs for signing Athenz token](#3-create-zms-key-pairs-for-signing-athenz-token)\n+        - [4. create ZMS trust store for HTTPS connections](#4-create-zms-trust-store-for-https-connections)\n+        - [5. create ZMS key store with ZMS server certificate](#5-create-zms-key-store-with-zms-server-certificate)\n+        - [6. config the Athenz domain admin](#6-config-the-athenz-domain-admin)\n+        - [7. summary](#7-summary)\n+    - [Get Athenz domain admin user certificate for accessing ZMS](#get-athenz-domain-admin-user-certificate-for-accessing-zms)\n+    - [Deploy ZMS](#deploy-zms)\n+        - [Debug ZMS](#debug-zms)\n+\n+<!-- /TOC -->\n+\n+<a id=\"markdown-prerequisites\" name=\"prerequisites\"></a>\n+## Prerequisites\n+\n+1. Env. setup done. ([env.sh](../env.sh))\n+1. Bootstrap setup done. ([Done step 1, 2, 3](./Athenz-bootstrap.md#bootstrap-steps))\n+1. All the setup commands below are expected to run inside [athenz-setup-env](../setup-scripts/Dockerfile) container.\n+```bash\n+docker run --rm -it \\", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMyNDU2NA=="}, "originalCommit": {"oid": "efa346a06f0b705c98a0f95412a6aad8b862780d"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjkzMjU3OnYy", "diffSide": "RIGHT", "path": "docker/docs/zts-setup.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODoyMDozMFrOGRzoIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMDo1OToyNVrOGSQC1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMyNDgzNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            docker run --rm -it \\\n          \n          \n            \n            BASE_DIR=\"`git rev-parse --show-toplevel`\"\n          \n          \n            \n            docker run --rm -it \\", "url": "https://github.com/AthenZ/athenz/pull/944#discussion_r421324834", "createdAt": "2020-05-07T08:20:30Z", "author": {"login": "ssunorz"}, "path": "docker/docs/zts-setup.md", "diffHunk": "@@ -0,0 +1,352 @@\n+\n+<a id=\"markdown-setup-zts-in-production-env\" name=\"setup-zts-in-production-env\"></a>\n+# Setup ZTS in production env.\n+\n+<!-- TOC -->\n+\n+- [Setup ZTS in production env.](#setup-zts-in-production-env)\n+    - [Prerequisites](#prerequisites)\n+    - [Target](#target)\n+    - [Steps](#steps)\n+        - [1. update your passwords](#1-update-your-passwords)\n+        - [2. get a server certificate for ZTS](#2-get-a-server-certificate-for-zts)\n+        - [3. create ZTS key pairs for signing Athenz token](#3-create-zts-key-pairs-for-signing-athenz-token)\n+        - [4. create trust store containing all the trusted CAs](#4-create-trust-store-containing-all-the-trusted-cas)\n+        - [5. create key store containing the ZTS server certificate](#5-create-key-store-containing-the-zts-server-certificate)\n+        - [6. set up for certificate signing](#6-set-up-for-certificate-signing)\n+            - [HttpCertSigner](#httpcertsigner)\n+            - [KeyStoreCertSigner](#keystorecertsigner)\n+        - [7. set up for ZMS connection](#7-set-up-for-zms-connection)\n+            - [Note](#note)\n+        - [8. summary](#8-summary)\n+        - [9. register ZTS service to Athenz](#9-register-zts-service-to-athenz)\n+        - [10. create athenz.conf](#10-create-athenzconf)\n+    - [Deploy ZTS](#deploy-zts)\n+        - [Debug ZTS](#debug-zts)\n+    - [Appendix](#appendix)\n+        - [HttpCertSigner Details](#httpcertsigner-details)\n+\n+<!-- /TOC -->\n+\n+\n+<a id=\"markdown-prerequisites\" name=\"prerequisites\"></a>\n+## Prerequisites\n+\n+1. Env. setup done. ([env.sh](../env.sh))\n+1. Bootstrap setup done. ([Done step 1, 2, 3, 4](./Athenz-bootstrap.md#bootstrap-steps))\n+1. ZMS is running. ([zms-setup](./zms-setup.md))\n+1. All the setup commands below are expected to run inside [athenz-setup-env](../setup-scripts/Dockerfile) container.\n+```bash\n+docker run --rm -it \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efa346a06f0b705c98a0f95412a6aad8b862780d"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc5MDQyMg==", "bodyText": "no change\n\nUser has to set DOCKER_NETWORK in the command.\nAs stated in the prerequisites, user should run the env.sh already and set both BASE_DIR and DOCKER_NETWORK before running the command.", "url": "https://github.com/AthenZ/athenz/pull/944#discussion_r421790422", "createdAt": "2020-05-07T20:59:25Z", "author": {"login": "WindzCUHK"}, "path": "docker/docs/zts-setup.md", "diffHunk": "@@ -0,0 +1,352 @@\n+\n+<a id=\"markdown-setup-zts-in-production-env\" name=\"setup-zts-in-production-env\"></a>\n+# Setup ZTS in production env.\n+\n+<!-- TOC -->\n+\n+- [Setup ZTS in production env.](#setup-zts-in-production-env)\n+    - [Prerequisites](#prerequisites)\n+    - [Target](#target)\n+    - [Steps](#steps)\n+        - [1. update your passwords](#1-update-your-passwords)\n+        - [2. get a server certificate for ZTS](#2-get-a-server-certificate-for-zts)\n+        - [3. create ZTS key pairs for signing Athenz token](#3-create-zts-key-pairs-for-signing-athenz-token)\n+        - [4. create trust store containing all the trusted CAs](#4-create-trust-store-containing-all-the-trusted-cas)\n+        - [5. create key store containing the ZTS server certificate](#5-create-key-store-containing-the-zts-server-certificate)\n+        - [6. set up for certificate signing](#6-set-up-for-certificate-signing)\n+            - [HttpCertSigner](#httpcertsigner)\n+            - [KeyStoreCertSigner](#keystorecertsigner)\n+        - [7. set up for ZMS connection](#7-set-up-for-zms-connection)\n+            - [Note](#note)\n+        - [8. summary](#8-summary)\n+        - [9. register ZTS service to Athenz](#9-register-zts-service-to-athenz)\n+        - [10. create athenz.conf](#10-create-athenzconf)\n+    - [Deploy ZTS](#deploy-zts)\n+        - [Debug ZTS](#debug-zts)\n+    - [Appendix](#appendix)\n+        - [HttpCertSigner Details](#httpcertsigner-details)\n+\n+<!-- /TOC -->\n+\n+\n+<a id=\"markdown-prerequisites\" name=\"prerequisites\"></a>\n+## Prerequisites\n+\n+1. Env. setup done. ([env.sh](../env.sh))\n+1. Bootstrap setup done. ([Done step 1, 2, 3, 4](./Athenz-bootstrap.md#bootstrap-steps))\n+1. ZMS is running. ([zms-setup](./zms-setup.md))\n+1. All the setup commands below are expected to run inside [athenz-setup-env](../setup-scripts/Dockerfile) container.\n+```bash\n+docker run --rm -it \\", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMyNDgzNA=="}, "originalCommit": {"oid": "efa346a06f0b705c98a0f95412a6aad8b862780d"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjI3NjgzOnYy", "diffSide": "RIGHT", "path": "docker/zms/conf/zms.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMzo1NDo0NFrOGSUPVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMjowMjo0OVrOGSWaiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg1OTE1Nw==", "bodyText": "Please add the following.\nhttps://github.com/yahoo/athenz/blob/377b2963d3ecf118d2e77663175078bc6d98a4b5/servers/zms/conf/zms.properties#L419-L421", "url": "https://github.com/AthenZ/athenz/pull/944#discussion_r421859157", "createdAt": "2020-05-07T23:54:44Z", "author": {"login": "ssunorz"}, "path": "docker/zms/conf/zms.properties", "diffHunk": "@@ -9,7 +9,7 @@\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a10b9cfa60a2324ca8377be4c272f8aea960d0ae"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg5NDc5Mw==", "bodyText": "thx, fixed in 39efe30", "url": "https://github.com/AthenZ/athenz/pull/944#discussion_r421894793", "createdAt": "2020-05-08T02:02:49Z", "author": {"login": "WindzCUHK"}, "path": "docker/zms/conf/zms.properties", "diffHunk": "@@ -9,7 +9,7 @@\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg1OTE1Nw=="}, "originalCommit": {"oid": "a10b9cfa60a2324ca8377be4c272f8aea960d0ae"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjMzMTE1OnYy", "diffSide": "RIGHT", "path": "docker/docs/zts-setup.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMDoyMjoxM1rOGSUvIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMjowMjo1NVrOGSWapA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg2NzI5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                echo \"${ZMS_CERT_KEY_PATH}\"\n          \n          \n            \n                echo \"${ZTS_SIGNER_CERT_KEY_PATH}\"", "url": "https://github.com/AthenZ/athenz/pull/944#discussion_r421867298", "createdAt": "2020-05-08T00:22:13Z", "author": {"login": "ssunorz"}, "path": "docker/docs/zts-setup.md", "diffHunk": "@@ -0,0 +1,352 @@\n+\n+<a id=\"markdown-setup-zts-in-production-env\" name=\"setup-zts-in-production-env\"></a>\n+# Setup ZTS in production env.\n+\n+<!-- TOC -->\n+\n+- [Setup ZTS in production env.](#setup-zts-in-production-env)\n+    - [Prerequisites](#prerequisites)\n+    - [Target](#target)\n+    - [Steps](#steps)\n+        - [1. update your passwords](#1-update-your-passwords)\n+        - [2. get a server certificate for ZTS](#2-get-a-server-certificate-for-zts)\n+        - [3. create ZTS key pairs for signing Athenz token](#3-create-zts-key-pairs-for-signing-athenz-token)\n+        - [4. create trust store containing all the trusted CAs](#4-create-trust-store-containing-all-the-trusted-cas)\n+        - [5. create key store containing the ZTS server certificate](#5-create-key-store-containing-the-zts-server-certificate)\n+        - [6. set up for certificate signing](#6-set-up-for-certificate-signing)\n+            - [HttpCertSigner](#httpcertsigner)\n+            - [KeyStoreCertSigner](#keystorecertsigner)\n+        - [7. set up for ZMS connection](#7-set-up-for-zms-connection)\n+            - [Note](#note)\n+        - [8. summary](#8-summary)\n+        - [9. register ZTS service to Athenz](#9-register-zts-service-to-athenz)\n+        - [10. create athenz.conf](#10-create-athenzconf)\n+    - [Deploy ZTS](#deploy-zts)\n+        - [Debug ZTS](#debug-zts)\n+    - [Appendix](#appendix)\n+        - [HttpCertSigner Details](#httpcertsigner-details)\n+\n+<!-- /TOC -->\n+\n+\n+<a id=\"markdown-prerequisites\" name=\"prerequisites\"></a>\n+## Prerequisites\n+\n+1. Env. setup done. ([env.sh](../env.sh))\n+1. Bootstrap setup done. ([Done step 1, 2, 3, 4](./Athenz-bootstrap.md#bootstrap-steps))\n+1. ZMS is running. ([zms-setup](./zms-setup.md))\n+1. All the setup commands below are expected to run inside [athenz-setup-env](../setup-scripts/Dockerfile) container.\n+```bash\n+docker run --rm -it \\\n+    --network=\"${DOCKER_NETWORK}\" \\\n+    -v \"${BASE_DIR}:/athenz\" \\\n+    --user \"$(id -u):$(id -g)\" \\\n+    athenz-setup-env \\\n+    sh\n+\n+# load the ENV. inside the container\n+BASE_DIR=\"`git rev-parse --show-toplevel`\"\n+source \"${BASE_DIR}/docker/env.sh\"\n+```\n+\n+<a id=\"markdown-target\" name=\"target\"></a>\n+## Target\n+\n+![ZTS-setup](./images/ZTS-setup.png)\n+\n+<a id=\"markdown-steps\" name=\"steps\"></a>\n+## Steps\n+\n+<a id=\"markdown-1-update-your-passwords\" name=\"1-update-your-passwords\"></a>\n+### 1. update your passwords\n+\n+```bash\n+# ZTS passwords\n+export ZTS_DB_ROOT_PASS=<your_password>\n+export ZTS_DB_ADMIN_PASS=<your_password>\n+export ZTS_KEYSTORE_PASS=<your_password>\n+export ZTS_TRUSTSTORE_PASS=<your_password>\n+\n+# used by com.yahoo.athenz.zts.cert.impl.HttpCertSigner, com.yahoo.athenz.zts.cert.impl.crypki.HttpCertSigner\n+export ZTS_SIGNER_KEYSTORE_PASS=<your_password>\n+export ZTS_SIGNER_TRUSTSTORE_PASS=<your_password>\n+\n+# used by ZMS client in ZTS for ZMS connection\n+export ZMS_CLIENT_KEYSTORE_PASS=<your_password>\n+export ZMS_CLIENT_TRUSTSTORE_PASS=<your_password>\n+\n+# javax.net.ssl.trustStorePassword\n+# export ZTS_JAVAX_TRUSTSTORE_PASS=<your_password>\n+```\n+\n+<a id=\"markdown-2-get-a-server-certificate-for-zts\" name=\"2-get-a-server-certificate-for-zts\"></a>\n+### 2. get a server certificate for ZTS\n+\n+- Create your CSR and private key for ZTS\n+- Ask your **Athenz CA** to sign the CSR and get the server certificate for ZTS\n+```bash\n+# copy your file in the following paths\n+echo ${ZTS_CERT_KEY_PATH}\n+echo ${ZTS_CERT_PATH}\n+```\n+\n+<a id=\"markdown-3-create-zts-key-pairs-for-signing-athenz-token\" name=\"3-create-zts-key-pairs-for-signing-athenz-token\"></a>\n+### 3. create ZTS key pairs for signing Athenz token\n+```bash\n+openssl genrsa -out \"${ZTS_PRIVATE_KEY_PATH}\" 4096\n+openssl rsa -pubout -in \"${ZTS_PRIVATE_KEY_PATH}\" -out \"${ZTS_PUBLIC_KEY_PATH}\"\n+```\n+\n+<a id=\"markdown-4-create-trust-store-containing-all-the-trusted-cas\" name=\"4-create-trust-store-containing-all-the-trusted-cas\"></a>\n+### 4. create trust store containing all the trusted CAs\n+\n+- Verify CA file paths\n+```bash\n+ls -l \"${ATHENZ_CA_PATH}\"\n+ls -l \"${USER_CA_PATH}\"\n+ls -l \"${SERVICE_CA_PATH}\"\n+```\n+- Create the ZTS trust store\n+```bash\n+rm -f \"${ZTS_TRUSTSTORE_PATH}\"\n+\n+CERT_ALIAS='athenz_ca'\n+openssl x509 -outform pem -in \"${ATHENZ_CA_PATH}\" | keytool -importcert -noprompt \\\n+    -keystore \"${ZTS_TRUSTSTORE_PATH}\" -storepass \"${ZTS_TRUSTSTORE_PASS}\" \\\n+    -storetype JKS -alias \"${CERT_ALIAS}\"\n+\n+CERT_ALIAS='user_ca'\n+openssl x509 -outform pem -in \"${USER_CA_PATH}\" | keytool -importcert -noprompt \\\n+    -keystore \"${ZTS_TRUSTSTORE_PATH}\" -storepass \"${ZTS_TRUSTSTORE_PASS}\" \\\n+    -storetype JKS -alias \"${CERT_ALIAS}\"\n+\n+CERT_ALIAS='service_ca'\n+openssl x509 -outform pem -in \"${SERVICE_CA_PATH}\" | keytool -importcert -noprompt \\\n+    -keystore \"${ZTS_TRUSTSTORE_PATH}\" -storepass \"${ZTS_TRUSTSTORE_PASS}\" \\\n+    -storetype JKS -alias \"${CERT_ALIAS}\"\n+\n+# keytool -list -storepass \"${ZTS_TRUSTSTORE_PASS}\" -keystore \"${ZTS_TRUSTSTORE_PATH}\"\n+```\n+\n+<a id=\"markdown-5-create-key-store-containing-the-zts-server-certificate\" name=\"5-create-key-store-containing-the-zts-server-certificate\"></a>\n+### 5. create key store containing the ZTS server certificate\n+\n+```bash\n+openssl pkcs12 -export -noiter -nomaciter \\\n+    -out \"${ZTS_KEYSTORE_PATH}\" -passout \"pass:${ZTS_KEYSTORE_PASS}\" \\\n+    -in \"${ZTS_CERT_PATH}\" -inkey \"${ZTS_CERT_KEY_PATH}\"\n+\n+# keytool -list -storepass \"${ZTS_KEYSTORE_PASS}\" -keystore \"${ZTS_KEYSTORE_PATH}\"\n+```\n+\n+<a id=\"markdown-6-set-up-for-certificate-signing\" name=\"6-set-up-for-certificate-signing\"></a>\n+### 6. set up for certificate signing\n+\n+<a id=\"markdown-httpcertsigner\" name=\"httpcertsigner\"></a>\n+#### HttpCertSigner\n+For production environment, we suggest to use the [HttpCertSigner.java](https://github.com/yahoo/athenz/blob/master/servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/HttpCertSigner.java), so that you do not need to manage the signer CA's private key in Athenz server. For details, please refer to [HttpCertSigner Details](./zts-setup.md#httpcertsigner-details).\n+\n+<a id=\"markdown-keystorecertsigner\" name=\"keystorecertsigner\"></a>\n+#### KeyStoreCertSigner\n+However, to simplify the setup, we will create an intermediate CA signed by the **Service CA** (1), and then use that intermediate CA to sign the service certificates issued by Athenz (2).\n+\n+1. Create an intermediate CA certificate\n+    - Create your CSR and private key for the intermediate CA\n+    - Ask your **Service CA** to sign the CSR and get the intermediate CA certificate\n+    ```bash\n+    # copy your file in the following paths\n+    echo \"${ZMS_CERT_KEY_PATH}\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a10b9cfa60a2324ca8377be4c272f8aea960d0ae"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg5NDgyMA==", "bodyText": "thx, fixed in 39efe30", "url": "https://github.com/AthenZ/athenz/pull/944#discussion_r421894820", "createdAt": "2020-05-08T02:02:55Z", "author": {"login": "WindzCUHK"}, "path": "docker/docs/zts-setup.md", "diffHunk": "@@ -0,0 +1,352 @@\n+\n+<a id=\"markdown-setup-zts-in-production-env\" name=\"setup-zts-in-production-env\"></a>\n+# Setup ZTS in production env.\n+\n+<!-- TOC -->\n+\n+- [Setup ZTS in production env.](#setup-zts-in-production-env)\n+    - [Prerequisites](#prerequisites)\n+    - [Target](#target)\n+    - [Steps](#steps)\n+        - [1. update your passwords](#1-update-your-passwords)\n+        - [2. get a server certificate for ZTS](#2-get-a-server-certificate-for-zts)\n+        - [3. create ZTS key pairs for signing Athenz token](#3-create-zts-key-pairs-for-signing-athenz-token)\n+        - [4. create trust store containing all the trusted CAs](#4-create-trust-store-containing-all-the-trusted-cas)\n+        - [5. create key store containing the ZTS server certificate](#5-create-key-store-containing-the-zts-server-certificate)\n+        - [6. set up for certificate signing](#6-set-up-for-certificate-signing)\n+            - [HttpCertSigner](#httpcertsigner)\n+            - [KeyStoreCertSigner](#keystorecertsigner)\n+        - [7. set up for ZMS connection](#7-set-up-for-zms-connection)\n+            - [Note](#note)\n+        - [8. summary](#8-summary)\n+        - [9. register ZTS service to Athenz](#9-register-zts-service-to-athenz)\n+        - [10. create athenz.conf](#10-create-athenzconf)\n+    - [Deploy ZTS](#deploy-zts)\n+        - [Debug ZTS](#debug-zts)\n+    - [Appendix](#appendix)\n+        - [HttpCertSigner Details](#httpcertsigner-details)\n+\n+<!-- /TOC -->\n+\n+\n+<a id=\"markdown-prerequisites\" name=\"prerequisites\"></a>\n+## Prerequisites\n+\n+1. Env. setup done. ([env.sh](../env.sh))\n+1. Bootstrap setup done. ([Done step 1, 2, 3, 4](./Athenz-bootstrap.md#bootstrap-steps))\n+1. ZMS is running. ([zms-setup](./zms-setup.md))\n+1. All the setup commands below are expected to run inside [athenz-setup-env](../setup-scripts/Dockerfile) container.\n+```bash\n+docker run --rm -it \\\n+    --network=\"${DOCKER_NETWORK}\" \\\n+    -v \"${BASE_DIR}:/athenz\" \\\n+    --user \"$(id -u):$(id -g)\" \\\n+    athenz-setup-env \\\n+    sh\n+\n+# load the ENV. inside the container\n+BASE_DIR=\"`git rev-parse --show-toplevel`\"\n+source \"${BASE_DIR}/docker/env.sh\"\n+```\n+\n+<a id=\"markdown-target\" name=\"target\"></a>\n+## Target\n+\n+![ZTS-setup](./images/ZTS-setup.png)\n+\n+<a id=\"markdown-steps\" name=\"steps\"></a>\n+## Steps\n+\n+<a id=\"markdown-1-update-your-passwords\" name=\"1-update-your-passwords\"></a>\n+### 1. update your passwords\n+\n+```bash\n+# ZTS passwords\n+export ZTS_DB_ROOT_PASS=<your_password>\n+export ZTS_DB_ADMIN_PASS=<your_password>\n+export ZTS_KEYSTORE_PASS=<your_password>\n+export ZTS_TRUSTSTORE_PASS=<your_password>\n+\n+# used by com.yahoo.athenz.zts.cert.impl.HttpCertSigner, com.yahoo.athenz.zts.cert.impl.crypki.HttpCertSigner\n+export ZTS_SIGNER_KEYSTORE_PASS=<your_password>\n+export ZTS_SIGNER_TRUSTSTORE_PASS=<your_password>\n+\n+# used by ZMS client in ZTS for ZMS connection\n+export ZMS_CLIENT_KEYSTORE_PASS=<your_password>\n+export ZMS_CLIENT_TRUSTSTORE_PASS=<your_password>\n+\n+# javax.net.ssl.trustStorePassword\n+# export ZTS_JAVAX_TRUSTSTORE_PASS=<your_password>\n+```\n+\n+<a id=\"markdown-2-get-a-server-certificate-for-zts\" name=\"2-get-a-server-certificate-for-zts\"></a>\n+### 2. get a server certificate for ZTS\n+\n+- Create your CSR and private key for ZTS\n+- Ask your **Athenz CA** to sign the CSR and get the server certificate for ZTS\n+```bash\n+# copy your file in the following paths\n+echo ${ZTS_CERT_KEY_PATH}\n+echo ${ZTS_CERT_PATH}\n+```\n+\n+<a id=\"markdown-3-create-zts-key-pairs-for-signing-athenz-token\" name=\"3-create-zts-key-pairs-for-signing-athenz-token\"></a>\n+### 3. create ZTS key pairs for signing Athenz token\n+```bash\n+openssl genrsa -out \"${ZTS_PRIVATE_KEY_PATH}\" 4096\n+openssl rsa -pubout -in \"${ZTS_PRIVATE_KEY_PATH}\" -out \"${ZTS_PUBLIC_KEY_PATH}\"\n+```\n+\n+<a id=\"markdown-4-create-trust-store-containing-all-the-trusted-cas\" name=\"4-create-trust-store-containing-all-the-trusted-cas\"></a>\n+### 4. create trust store containing all the trusted CAs\n+\n+- Verify CA file paths\n+```bash\n+ls -l \"${ATHENZ_CA_PATH}\"\n+ls -l \"${USER_CA_PATH}\"\n+ls -l \"${SERVICE_CA_PATH}\"\n+```\n+- Create the ZTS trust store\n+```bash\n+rm -f \"${ZTS_TRUSTSTORE_PATH}\"\n+\n+CERT_ALIAS='athenz_ca'\n+openssl x509 -outform pem -in \"${ATHENZ_CA_PATH}\" | keytool -importcert -noprompt \\\n+    -keystore \"${ZTS_TRUSTSTORE_PATH}\" -storepass \"${ZTS_TRUSTSTORE_PASS}\" \\\n+    -storetype JKS -alias \"${CERT_ALIAS}\"\n+\n+CERT_ALIAS='user_ca'\n+openssl x509 -outform pem -in \"${USER_CA_PATH}\" | keytool -importcert -noprompt \\\n+    -keystore \"${ZTS_TRUSTSTORE_PATH}\" -storepass \"${ZTS_TRUSTSTORE_PASS}\" \\\n+    -storetype JKS -alias \"${CERT_ALIAS}\"\n+\n+CERT_ALIAS='service_ca'\n+openssl x509 -outform pem -in \"${SERVICE_CA_PATH}\" | keytool -importcert -noprompt \\\n+    -keystore \"${ZTS_TRUSTSTORE_PATH}\" -storepass \"${ZTS_TRUSTSTORE_PASS}\" \\\n+    -storetype JKS -alias \"${CERT_ALIAS}\"\n+\n+# keytool -list -storepass \"${ZTS_TRUSTSTORE_PASS}\" -keystore \"${ZTS_TRUSTSTORE_PATH}\"\n+```\n+\n+<a id=\"markdown-5-create-key-store-containing-the-zts-server-certificate\" name=\"5-create-key-store-containing-the-zts-server-certificate\"></a>\n+### 5. create key store containing the ZTS server certificate\n+\n+```bash\n+openssl pkcs12 -export -noiter -nomaciter \\\n+    -out \"${ZTS_KEYSTORE_PATH}\" -passout \"pass:${ZTS_KEYSTORE_PASS}\" \\\n+    -in \"${ZTS_CERT_PATH}\" -inkey \"${ZTS_CERT_KEY_PATH}\"\n+\n+# keytool -list -storepass \"${ZTS_KEYSTORE_PASS}\" -keystore \"${ZTS_KEYSTORE_PATH}\"\n+```\n+\n+<a id=\"markdown-6-set-up-for-certificate-signing\" name=\"6-set-up-for-certificate-signing\"></a>\n+### 6. set up for certificate signing\n+\n+<a id=\"markdown-httpcertsigner\" name=\"httpcertsigner\"></a>\n+#### HttpCertSigner\n+For production environment, we suggest to use the [HttpCertSigner.java](https://github.com/yahoo/athenz/blob/master/servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/HttpCertSigner.java), so that you do not need to manage the signer CA's private key in Athenz server. For details, please refer to [HttpCertSigner Details](./zts-setup.md#httpcertsigner-details).\n+\n+<a id=\"markdown-keystorecertsigner\" name=\"keystorecertsigner\"></a>\n+#### KeyStoreCertSigner\n+However, to simplify the setup, we will create an intermediate CA signed by the **Service CA** (1), and then use that intermediate CA to sign the service certificates issued by Athenz (2).\n+\n+1. Create an intermediate CA certificate\n+    - Create your CSR and private key for the intermediate CA\n+    - Ask your **Service CA** to sign the CSR and get the intermediate CA certificate\n+    ```bash\n+    # copy your file in the following paths\n+    echo \"${ZMS_CERT_KEY_PATH}\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg2NzI5OA=="}, "originalCommit": {"oid": "a10b9cfa60a2324ca8377be4c272f8aea960d0ae"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjMzMTkwOnYy", "diffSide": "RIGHT", "path": "docker/docs/zts-setup.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMDoyMjozOVrOGSUvlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMjowMjo1OFrOGSWauA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg2NzQxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                echo \"${ZMS_CERT_PATH}\"\n          \n          \n            \n                echo \"${ZTS_SIGNER_CERT_PATH}\"", "url": "https://github.com/AthenZ/athenz/pull/944#discussion_r421867413", "createdAt": "2020-05-08T00:22:39Z", "author": {"login": "ssunorz"}, "path": "docker/docs/zts-setup.md", "diffHunk": "@@ -0,0 +1,352 @@\n+\n+<a id=\"markdown-setup-zts-in-production-env\" name=\"setup-zts-in-production-env\"></a>\n+# Setup ZTS in production env.\n+\n+<!-- TOC -->\n+\n+- [Setup ZTS in production env.](#setup-zts-in-production-env)\n+    - [Prerequisites](#prerequisites)\n+    - [Target](#target)\n+    - [Steps](#steps)\n+        - [1. update your passwords](#1-update-your-passwords)\n+        - [2. get a server certificate for ZTS](#2-get-a-server-certificate-for-zts)\n+        - [3. create ZTS key pairs for signing Athenz token](#3-create-zts-key-pairs-for-signing-athenz-token)\n+        - [4. create trust store containing all the trusted CAs](#4-create-trust-store-containing-all-the-trusted-cas)\n+        - [5. create key store containing the ZTS server certificate](#5-create-key-store-containing-the-zts-server-certificate)\n+        - [6. set up for certificate signing](#6-set-up-for-certificate-signing)\n+            - [HttpCertSigner](#httpcertsigner)\n+            - [KeyStoreCertSigner](#keystorecertsigner)\n+        - [7. set up for ZMS connection](#7-set-up-for-zms-connection)\n+            - [Note](#note)\n+        - [8. summary](#8-summary)\n+        - [9. register ZTS service to Athenz](#9-register-zts-service-to-athenz)\n+        - [10. create athenz.conf](#10-create-athenzconf)\n+    - [Deploy ZTS](#deploy-zts)\n+        - [Debug ZTS](#debug-zts)\n+    - [Appendix](#appendix)\n+        - [HttpCertSigner Details](#httpcertsigner-details)\n+\n+<!-- /TOC -->\n+\n+\n+<a id=\"markdown-prerequisites\" name=\"prerequisites\"></a>\n+## Prerequisites\n+\n+1. Env. setup done. ([env.sh](../env.sh))\n+1. Bootstrap setup done. ([Done step 1, 2, 3, 4](./Athenz-bootstrap.md#bootstrap-steps))\n+1. ZMS is running. ([zms-setup](./zms-setup.md))\n+1. All the setup commands below are expected to run inside [athenz-setup-env](../setup-scripts/Dockerfile) container.\n+```bash\n+docker run --rm -it \\\n+    --network=\"${DOCKER_NETWORK}\" \\\n+    -v \"${BASE_DIR}:/athenz\" \\\n+    --user \"$(id -u):$(id -g)\" \\\n+    athenz-setup-env \\\n+    sh\n+\n+# load the ENV. inside the container\n+BASE_DIR=\"`git rev-parse --show-toplevel`\"\n+source \"${BASE_DIR}/docker/env.sh\"\n+```\n+\n+<a id=\"markdown-target\" name=\"target\"></a>\n+## Target\n+\n+![ZTS-setup](./images/ZTS-setup.png)\n+\n+<a id=\"markdown-steps\" name=\"steps\"></a>\n+## Steps\n+\n+<a id=\"markdown-1-update-your-passwords\" name=\"1-update-your-passwords\"></a>\n+### 1. update your passwords\n+\n+```bash\n+# ZTS passwords\n+export ZTS_DB_ROOT_PASS=<your_password>\n+export ZTS_DB_ADMIN_PASS=<your_password>\n+export ZTS_KEYSTORE_PASS=<your_password>\n+export ZTS_TRUSTSTORE_PASS=<your_password>\n+\n+# used by com.yahoo.athenz.zts.cert.impl.HttpCertSigner, com.yahoo.athenz.zts.cert.impl.crypki.HttpCertSigner\n+export ZTS_SIGNER_KEYSTORE_PASS=<your_password>\n+export ZTS_SIGNER_TRUSTSTORE_PASS=<your_password>\n+\n+# used by ZMS client in ZTS for ZMS connection\n+export ZMS_CLIENT_KEYSTORE_PASS=<your_password>\n+export ZMS_CLIENT_TRUSTSTORE_PASS=<your_password>\n+\n+# javax.net.ssl.trustStorePassword\n+# export ZTS_JAVAX_TRUSTSTORE_PASS=<your_password>\n+```\n+\n+<a id=\"markdown-2-get-a-server-certificate-for-zts\" name=\"2-get-a-server-certificate-for-zts\"></a>\n+### 2. get a server certificate for ZTS\n+\n+- Create your CSR and private key for ZTS\n+- Ask your **Athenz CA** to sign the CSR and get the server certificate for ZTS\n+```bash\n+# copy your file in the following paths\n+echo ${ZTS_CERT_KEY_PATH}\n+echo ${ZTS_CERT_PATH}\n+```\n+\n+<a id=\"markdown-3-create-zts-key-pairs-for-signing-athenz-token\" name=\"3-create-zts-key-pairs-for-signing-athenz-token\"></a>\n+### 3. create ZTS key pairs for signing Athenz token\n+```bash\n+openssl genrsa -out \"${ZTS_PRIVATE_KEY_PATH}\" 4096\n+openssl rsa -pubout -in \"${ZTS_PRIVATE_KEY_PATH}\" -out \"${ZTS_PUBLIC_KEY_PATH}\"\n+```\n+\n+<a id=\"markdown-4-create-trust-store-containing-all-the-trusted-cas\" name=\"4-create-trust-store-containing-all-the-trusted-cas\"></a>\n+### 4. create trust store containing all the trusted CAs\n+\n+- Verify CA file paths\n+```bash\n+ls -l \"${ATHENZ_CA_PATH}\"\n+ls -l \"${USER_CA_PATH}\"\n+ls -l \"${SERVICE_CA_PATH}\"\n+```\n+- Create the ZTS trust store\n+```bash\n+rm -f \"${ZTS_TRUSTSTORE_PATH}\"\n+\n+CERT_ALIAS='athenz_ca'\n+openssl x509 -outform pem -in \"${ATHENZ_CA_PATH}\" | keytool -importcert -noprompt \\\n+    -keystore \"${ZTS_TRUSTSTORE_PATH}\" -storepass \"${ZTS_TRUSTSTORE_PASS}\" \\\n+    -storetype JKS -alias \"${CERT_ALIAS}\"\n+\n+CERT_ALIAS='user_ca'\n+openssl x509 -outform pem -in \"${USER_CA_PATH}\" | keytool -importcert -noprompt \\\n+    -keystore \"${ZTS_TRUSTSTORE_PATH}\" -storepass \"${ZTS_TRUSTSTORE_PASS}\" \\\n+    -storetype JKS -alias \"${CERT_ALIAS}\"\n+\n+CERT_ALIAS='service_ca'\n+openssl x509 -outform pem -in \"${SERVICE_CA_PATH}\" | keytool -importcert -noprompt \\\n+    -keystore \"${ZTS_TRUSTSTORE_PATH}\" -storepass \"${ZTS_TRUSTSTORE_PASS}\" \\\n+    -storetype JKS -alias \"${CERT_ALIAS}\"\n+\n+# keytool -list -storepass \"${ZTS_TRUSTSTORE_PASS}\" -keystore \"${ZTS_TRUSTSTORE_PATH}\"\n+```\n+\n+<a id=\"markdown-5-create-key-store-containing-the-zts-server-certificate\" name=\"5-create-key-store-containing-the-zts-server-certificate\"></a>\n+### 5. create key store containing the ZTS server certificate\n+\n+```bash\n+openssl pkcs12 -export -noiter -nomaciter \\\n+    -out \"${ZTS_KEYSTORE_PATH}\" -passout \"pass:${ZTS_KEYSTORE_PASS}\" \\\n+    -in \"${ZTS_CERT_PATH}\" -inkey \"${ZTS_CERT_KEY_PATH}\"\n+\n+# keytool -list -storepass \"${ZTS_KEYSTORE_PASS}\" -keystore \"${ZTS_KEYSTORE_PATH}\"\n+```\n+\n+<a id=\"markdown-6-set-up-for-certificate-signing\" name=\"6-set-up-for-certificate-signing\"></a>\n+### 6. set up for certificate signing\n+\n+<a id=\"markdown-httpcertsigner\" name=\"httpcertsigner\"></a>\n+#### HttpCertSigner\n+For production environment, we suggest to use the [HttpCertSigner.java](https://github.com/yahoo/athenz/blob/master/servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/HttpCertSigner.java), so that you do not need to manage the signer CA's private key in Athenz server. For details, please refer to [HttpCertSigner Details](./zts-setup.md#httpcertsigner-details).\n+\n+<a id=\"markdown-keystorecertsigner\" name=\"keystorecertsigner\"></a>\n+#### KeyStoreCertSigner\n+However, to simplify the setup, we will create an intermediate CA signed by the **Service CA** (1), and then use that intermediate CA to sign the service certificates issued by Athenz (2).\n+\n+1. Create an intermediate CA certificate\n+    - Create your CSR and private key for the intermediate CA\n+    - Ask your **Service CA** to sign the CSR and get the intermediate CA certificate\n+    ```bash\n+    # copy your file in the following paths\n+    echo \"${ZMS_CERT_KEY_PATH}\"\n+    echo \"${ZMS_CERT_PATH}\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a10b9cfa60a2324ca8377be4c272f8aea960d0ae"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg5NDg0MA==", "bodyText": "thx, fixed in 39efe30", "url": "https://github.com/AthenZ/athenz/pull/944#discussion_r421894840", "createdAt": "2020-05-08T02:02:58Z", "author": {"login": "WindzCUHK"}, "path": "docker/docs/zts-setup.md", "diffHunk": "@@ -0,0 +1,352 @@\n+\n+<a id=\"markdown-setup-zts-in-production-env\" name=\"setup-zts-in-production-env\"></a>\n+# Setup ZTS in production env.\n+\n+<!-- TOC -->\n+\n+- [Setup ZTS in production env.](#setup-zts-in-production-env)\n+    - [Prerequisites](#prerequisites)\n+    - [Target](#target)\n+    - [Steps](#steps)\n+        - [1. update your passwords](#1-update-your-passwords)\n+        - [2. get a server certificate for ZTS](#2-get-a-server-certificate-for-zts)\n+        - [3. create ZTS key pairs for signing Athenz token](#3-create-zts-key-pairs-for-signing-athenz-token)\n+        - [4. create trust store containing all the trusted CAs](#4-create-trust-store-containing-all-the-trusted-cas)\n+        - [5. create key store containing the ZTS server certificate](#5-create-key-store-containing-the-zts-server-certificate)\n+        - [6. set up for certificate signing](#6-set-up-for-certificate-signing)\n+            - [HttpCertSigner](#httpcertsigner)\n+            - [KeyStoreCertSigner](#keystorecertsigner)\n+        - [7. set up for ZMS connection](#7-set-up-for-zms-connection)\n+            - [Note](#note)\n+        - [8. summary](#8-summary)\n+        - [9. register ZTS service to Athenz](#9-register-zts-service-to-athenz)\n+        - [10. create athenz.conf](#10-create-athenzconf)\n+    - [Deploy ZTS](#deploy-zts)\n+        - [Debug ZTS](#debug-zts)\n+    - [Appendix](#appendix)\n+        - [HttpCertSigner Details](#httpcertsigner-details)\n+\n+<!-- /TOC -->\n+\n+\n+<a id=\"markdown-prerequisites\" name=\"prerequisites\"></a>\n+## Prerequisites\n+\n+1. Env. setup done. ([env.sh](../env.sh))\n+1. Bootstrap setup done. ([Done step 1, 2, 3, 4](./Athenz-bootstrap.md#bootstrap-steps))\n+1. ZMS is running. ([zms-setup](./zms-setup.md))\n+1. All the setup commands below are expected to run inside [athenz-setup-env](../setup-scripts/Dockerfile) container.\n+```bash\n+docker run --rm -it \\\n+    --network=\"${DOCKER_NETWORK}\" \\\n+    -v \"${BASE_DIR}:/athenz\" \\\n+    --user \"$(id -u):$(id -g)\" \\\n+    athenz-setup-env \\\n+    sh\n+\n+# load the ENV. inside the container\n+BASE_DIR=\"`git rev-parse --show-toplevel`\"\n+source \"${BASE_DIR}/docker/env.sh\"\n+```\n+\n+<a id=\"markdown-target\" name=\"target\"></a>\n+## Target\n+\n+![ZTS-setup](./images/ZTS-setup.png)\n+\n+<a id=\"markdown-steps\" name=\"steps\"></a>\n+## Steps\n+\n+<a id=\"markdown-1-update-your-passwords\" name=\"1-update-your-passwords\"></a>\n+### 1. update your passwords\n+\n+```bash\n+# ZTS passwords\n+export ZTS_DB_ROOT_PASS=<your_password>\n+export ZTS_DB_ADMIN_PASS=<your_password>\n+export ZTS_KEYSTORE_PASS=<your_password>\n+export ZTS_TRUSTSTORE_PASS=<your_password>\n+\n+# used by com.yahoo.athenz.zts.cert.impl.HttpCertSigner, com.yahoo.athenz.zts.cert.impl.crypki.HttpCertSigner\n+export ZTS_SIGNER_KEYSTORE_PASS=<your_password>\n+export ZTS_SIGNER_TRUSTSTORE_PASS=<your_password>\n+\n+# used by ZMS client in ZTS for ZMS connection\n+export ZMS_CLIENT_KEYSTORE_PASS=<your_password>\n+export ZMS_CLIENT_TRUSTSTORE_PASS=<your_password>\n+\n+# javax.net.ssl.trustStorePassword\n+# export ZTS_JAVAX_TRUSTSTORE_PASS=<your_password>\n+```\n+\n+<a id=\"markdown-2-get-a-server-certificate-for-zts\" name=\"2-get-a-server-certificate-for-zts\"></a>\n+### 2. get a server certificate for ZTS\n+\n+- Create your CSR and private key for ZTS\n+- Ask your **Athenz CA** to sign the CSR and get the server certificate for ZTS\n+```bash\n+# copy your file in the following paths\n+echo ${ZTS_CERT_KEY_PATH}\n+echo ${ZTS_CERT_PATH}\n+```\n+\n+<a id=\"markdown-3-create-zts-key-pairs-for-signing-athenz-token\" name=\"3-create-zts-key-pairs-for-signing-athenz-token\"></a>\n+### 3. create ZTS key pairs for signing Athenz token\n+```bash\n+openssl genrsa -out \"${ZTS_PRIVATE_KEY_PATH}\" 4096\n+openssl rsa -pubout -in \"${ZTS_PRIVATE_KEY_PATH}\" -out \"${ZTS_PUBLIC_KEY_PATH}\"\n+```\n+\n+<a id=\"markdown-4-create-trust-store-containing-all-the-trusted-cas\" name=\"4-create-trust-store-containing-all-the-trusted-cas\"></a>\n+### 4. create trust store containing all the trusted CAs\n+\n+- Verify CA file paths\n+```bash\n+ls -l \"${ATHENZ_CA_PATH}\"\n+ls -l \"${USER_CA_PATH}\"\n+ls -l \"${SERVICE_CA_PATH}\"\n+```\n+- Create the ZTS trust store\n+```bash\n+rm -f \"${ZTS_TRUSTSTORE_PATH}\"\n+\n+CERT_ALIAS='athenz_ca'\n+openssl x509 -outform pem -in \"${ATHENZ_CA_PATH}\" | keytool -importcert -noprompt \\\n+    -keystore \"${ZTS_TRUSTSTORE_PATH}\" -storepass \"${ZTS_TRUSTSTORE_PASS}\" \\\n+    -storetype JKS -alias \"${CERT_ALIAS}\"\n+\n+CERT_ALIAS='user_ca'\n+openssl x509 -outform pem -in \"${USER_CA_PATH}\" | keytool -importcert -noprompt \\\n+    -keystore \"${ZTS_TRUSTSTORE_PATH}\" -storepass \"${ZTS_TRUSTSTORE_PASS}\" \\\n+    -storetype JKS -alias \"${CERT_ALIAS}\"\n+\n+CERT_ALIAS='service_ca'\n+openssl x509 -outform pem -in \"${SERVICE_CA_PATH}\" | keytool -importcert -noprompt \\\n+    -keystore \"${ZTS_TRUSTSTORE_PATH}\" -storepass \"${ZTS_TRUSTSTORE_PASS}\" \\\n+    -storetype JKS -alias \"${CERT_ALIAS}\"\n+\n+# keytool -list -storepass \"${ZTS_TRUSTSTORE_PASS}\" -keystore \"${ZTS_TRUSTSTORE_PATH}\"\n+```\n+\n+<a id=\"markdown-5-create-key-store-containing-the-zts-server-certificate\" name=\"5-create-key-store-containing-the-zts-server-certificate\"></a>\n+### 5. create key store containing the ZTS server certificate\n+\n+```bash\n+openssl pkcs12 -export -noiter -nomaciter \\\n+    -out \"${ZTS_KEYSTORE_PATH}\" -passout \"pass:${ZTS_KEYSTORE_PASS}\" \\\n+    -in \"${ZTS_CERT_PATH}\" -inkey \"${ZTS_CERT_KEY_PATH}\"\n+\n+# keytool -list -storepass \"${ZTS_KEYSTORE_PASS}\" -keystore \"${ZTS_KEYSTORE_PATH}\"\n+```\n+\n+<a id=\"markdown-6-set-up-for-certificate-signing\" name=\"6-set-up-for-certificate-signing\"></a>\n+### 6. set up for certificate signing\n+\n+<a id=\"markdown-httpcertsigner\" name=\"httpcertsigner\"></a>\n+#### HttpCertSigner\n+For production environment, we suggest to use the [HttpCertSigner.java](https://github.com/yahoo/athenz/blob/master/servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/HttpCertSigner.java), so that you do not need to manage the signer CA's private key in Athenz server. For details, please refer to [HttpCertSigner Details](./zts-setup.md#httpcertsigner-details).\n+\n+<a id=\"markdown-keystorecertsigner\" name=\"keystorecertsigner\"></a>\n+#### KeyStoreCertSigner\n+However, to simplify the setup, we will create an intermediate CA signed by the **Service CA** (1), and then use that intermediate CA to sign the service certificates issued by Athenz (2).\n+\n+1. Create an intermediate CA certificate\n+    - Create your CSR and private key for the intermediate CA\n+    - Ask your **Service CA** to sign the CSR and get the intermediate CA certificate\n+    ```bash\n+    # copy your file in the following paths\n+    echo \"${ZMS_CERT_KEY_PATH}\"\n+    echo \"${ZMS_CERT_PATH}\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg2NzQxMw=="}, "originalCommit": {"oid": "a10b9cfa60a2324ca8377be4c272f8aea960d0ae"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzI5MzU3OnYy", "diffSide": "RIGHT", "path": "docker/deploy-scripts/zms-deploy.sh", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwODowOTowMVrOGTRSvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNzo0NjowMlrOGVP9Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg1OTQ1Mg==", "bodyText": "I understand why it fails on ubuntu.\nhttps://stackoverflow.com/questions/13702425/source-command-not-found-in-sh-shell\nFor the time being, I think it's okay to exclude ubuntu from support, but what do you think?", "url": "https://github.com/AthenZ/athenz/pull/944#discussion_r422859452", "createdAt": "2020-05-11T08:09:01Z", "author": {"login": "ssunorz"}, "path": "docker/deploy-scripts/zms-deploy.sh", "diffHunk": "@@ -0,0 +1,118 @@\n+#!/bin/sh\n+\n+set -eu\n+set -o pipefail\n+\n+# to script directory\n+cd \"$(dirname \"$0\")\"\n+\n+# import functions\n+source ../setup-scripts/common/color-print.sh", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39efe305c88a541059e4398383df86b99f9fbbad"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA0OTE0NQ==", "bodyText": "sure, can you help to fix the script?", "url": "https://github.com/AthenZ/athenz/pull/944#discussion_r423049145", "createdAt": "2020-05-11T13:43:44Z", "author": {"login": "WindzCUHK"}, "path": "docker/deploy-scripts/zms-deploy.sh", "diffHunk": "@@ -0,0 +1,118 @@\n+#!/bin/sh\n+\n+set -eu\n+set -o pipefail\n+\n+# to script directory\n+cd \"$(dirname \"$0\")\"\n+\n+# import functions\n+source ../setup-scripts/common/color-print.sh", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg1OTQ1Mg=="}, "originalCommit": {"oid": "39efe305c88a541059e4398383df86b99f9fbbad"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkzNDY3MQ==", "bodyText": "since it is difficult to be compatible with dash in Ubuntu, added note in a8740c7.", "url": "https://github.com/AthenZ/athenz/pull/944#discussion_r424934671", "createdAt": "2020-05-14T07:46:02Z", "author": {"login": "WindzCUHK"}, "path": "docker/deploy-scripts/zms-deploy.sh", "diffHunk": "@@ -0,0 +1,118 @@\n+#!/bin/sh\n+\n+set -eu\n+set -o pipefail\n+\n+# to script directory\n+cd \"$(dirname \"$0\")\"\n+\n+# import functions\n+source ../setup-scripts/common/color-print.sh", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg1OTQ1Mg=="}, "originalCommit": {"oid": "39efe305c88a541059e4398383df86b99f9fbbad"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1766, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}