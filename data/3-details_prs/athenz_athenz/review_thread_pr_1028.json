{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0NjU4ODk4", "number": 1028, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQyMzozMjo0M1rOENpNzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMDo1ODoyNlrOEPW3xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNzQyMjIyOnYy", "diffSide": "RIGHT", "path": "clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQyMzozMjo0M1rOGwX7DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQyMzozMjo0M1rOGwX7DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM3Njc4MQ==", "bodyText": "this should be an error if file based access tokens is enabled and we're not able to read them from disk.", "url": "https://github.com/AthenZ/athenz/pull/1028#discussion_r453376781", "createdAt": "2020-07-12T23:32:43Z", "author": {"login": "havetisyan"}, "path": "clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "diffHunk": "@@ -1168,31 +1192,41 @@ public AccessTokenResponse getAccessToken(String domainName, List<String> roleNa\n             }\n         }\n \n+        // if no hit then we need to look up in disk\n+        try {\n+            accessTokenResponse = ztsFileUtil.lookupAccessTokenFromDisk(domainName, roleNames);\n+        } catch (IOException e) {\n+            LOG.warn(\"GetAccessToken: failed to load access token from disk \", e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f752126dc7dcbe37f728dd8bb39276727269d071"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNzQyMzUyOnYy", "diffSide": "RIGHT", "path": "clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSFileUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQyMzozNDoyNVrOGwX7vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQyMzozNDoyNVrOGwX7vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM3Njk1OA==", "bodyText": "we should use pathSeparator instead of \"/\"", "url": "https://github.com/AthenZ/athenz/pull/1028#discussion_r453376958", "createdAt": "2020-07-12T23:34:25Z", "author": {"login": "havetisyan"}, "path": "clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSFileUtil.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package com.yahoo.athenz.zts;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.yahoo.athenz.auth.token.AccessToken;\n+import com.yahoo.athenz.auth.token.jwts.JwtsSigningKeyResolver;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.*;\n+\n+public class ZTSFileUtil {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(ZTSFileUtil.class);\n+\n+    static private final String DEFAULT_ACCESS_TOKEN_DIR_PATH = \"/var/lib/sia/tokens/\";\n+    static private final String ACCESS_TOKEN_PATH_PROPERTY = \"zts.client.accesstoken.path\";\n+    static private final String ROLE_NAME_CONNECTOR = \",\";\n+    private JwtsSigningKeyResolver accessSignKeyResolver = null;\n+    private ObjectMapper objectMapper = new ObjectMapper();\n+    private Map<String, String> roleNameMap;\n+\n+    public ZTSFileUtil(JwtsSigningKeyResolver resolver) {\n+        roleNameMap = new HashMap<>();\n+        accessSignKeyResolver = resolver;\n+    }\n+\n+    public void preload() {\n+        String path = System.getProperty(ACCESS_TOKEN_PATH_PROPERTY, DEFAULT_ACCESS_TOKEN_DIR_PATH);\n+        File dir = new File(path);\n+\n+        // preload the map from the domain, rolesname to file path\n+        if (dir.exists() && dir.isDirectory()) {\n+            for (File domainDir: dir.listFiles()) {\n+                if (domainDir.isDirectory()) {\n+                    for (File tokenFile: domainDir.listFiles()) {\n+                        if (!tokenFile.isDirectory()) {\n+                            AccessTokenResponse accessTokenResponse = null;\n+                            try {\n+                                accessTokenResponse = objectMapper.readValue(tokenFile, AccessTokenResponse.class);\n+                            } catch (IOException e) {\n+                                LOG.warn(\"Failed to load or parse token file: {}\", tokenFile);\n+                            }\n+\n+                            if (accessTokenResponse == null) {\n+                                continue;\n+                            }\n+\n+                            AccessTokenResponseCacheEntry cacheEntry = new AccessTokenResponseCacheEntry(accessTokenResponse);\n+\n+                            if (!cacheEntry.isExpired(-1)) {\n+                                try {\n+                                    addToRoleMap(domainDir.getName(), tokenFile.getName(), accessTokenResponse);\n+                                } catch (IOException e) {\n+                                    LOG.warn(\"Failed to put role map for token: {}\", tokenFile.getName());\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+    }\n+\n+    // function load the access token from file\n+    public AccessTokenResponse lookupAccessTokenFromDisk(String domain, List<String> rolesName) throws IOException {\n+        String path = System.getProperty(ACCESS_TOKEN_PATH_PROPERTY, DEFAULT_ACCESS_TOKEN_DIR_PATH);\n+        LOG.debug(\"Trying to fetch access token from disk for domain: {}, roleNames: {}\", domain, rolesName);\n+        String rolesStr = getRolesStr(domain, rolesName);\n+        String fileName = roleNameMap.get(rolesStr);\n+        if (fileName == null) {\n+            return null;\n+        }\n+        File tokenFile = new File(path + \"/\" + domain + \"/\" + fileName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f752126dc7dcbe37f728dd8bb39276727269d071"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNzQyMzgyOnYy", "diffSide": "RIGHT", "path": "clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSFileUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQyMzozNDo1NlrOGwX76Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMjozMjo1OVrOGy_EYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM3NzAwMQ==", "bodyText": "make this and other String variables as final as necessary.", "url": "https://github.com/AthenZ/athenz/pull/1028#discussion_r453377001", "createdAt": "2020-07-12T23:34:56Z", "author": {"login": "havetisyan"}, "path": "clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSFileUtil.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package com.yahoo.athenz.zts;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.yahoo.athenz.auth.token.AccessToken;\n+import com.yahoo.athenz.auth.token.jwts.JwtsSigningKeyResolver;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.*;\n+\n+public class ZTSFileUtil {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(ZTSFileUtil.class);\n+\n+    static private final String DEFAULT_ACCESS_TOKEN_DIR_PATH = \"/var/lib/sia/tokens/\";\n+    static private final String ACCESS_TOKEN_PATH_PROPERTY = \"zts.client.accesstoken.path\";\n+    static private final String ROLE_NAME_CONNECTOR = \",\";\n+    private JwtsSigningKeyResolver accessSignKeyResolver = null;\n+    private ObjectMapper objectMapper = new ObjectMapper();\n+    private Map<String, String> roleNameMap;\n+\n+    public ZTSFileUtil(JwtsSigningKeyResolver resolver) {\n+        roleNameMap = new HashMap<>();\n+        accessSignKeyResolver = resolver;\n+    }\n+\n+    public void preload() {\n+        String path = System.getProperty(ACCESS_TOKEN_PATH_PROPERTY, DEFAULT_ACCESS_TOKEN_DIR_PATH);\n+        File dir = new File(path);\n+\n+        // preload the map from the domain, rolesname to file path\n+        if (dir.exists() && dir.isDirectory()) {\n+            for (File domainDir: dir.listFiles()) {\n+                if (domainDir.isDirectory()) {\n+                    for (File tokenFile: domainDir.listFiles()) {\n+                        if (!tokenFile.isDirectory()) {\n+                            AccessTokenResponse accessTokenResponse = null;\n+                            try {\n+                                accessTokenResponse = objectMapper.readValue(tokenFile, AccessTokenResponse.class);\n+                            } catch (IOException e) {\n+                                LOG.warn(\"Failed to load or parse token file: {}\", tokenFile);\n+                            }\n+\n+                            if (accessTokenResponse == null) {\n+                                continue;\n+                            }\n+\n+                            AccessTokenResponseCacheEntry cacheEntry = new AccessTokenResponseCacheEntry(accessTokenResponse);\n+\n+                            if (!cacheEntry.isExpired(-1)) {\n+                                try {\n+                                    addToRoleMap(domainDir.getName(), tokenFile.getName(), accessTokenResponse);\n+                                } catch (IOException e) {\n+                                    LOG.warn(\"Failed to put role map for token: {}\", tokenFile.getName());\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+    }\n+\n+    // function load the access token from file\n+    public AccessTokenResponse lookupAccessTokenFromDisk(String domain, List<String> rolesName) throws IOException {\n+        String path = System.getProperty(ACCESS_TOKEN_PATH_PROPERTY, DEFAULT_ACCESS_TOKEN_DIR_PATH);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f752126dc7dcbe37f728dd8bb39276727269d071"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjExNTI5OQ==", "bodyText": "updated", "url": "https://github.com/AthenZ/athenz/pull/1028#discussion_r456115299", "createdAt": "2020-07-16T22:32:59Z", "author": {"login": "MartinTrojans"}, "path": "clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSFileUtil.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package com.yahoo.athenz.zts;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.yahoo.athenz.auth.token.AccessToken;\n+import com.yahoo.athenz.auth.token.jwts.JwtsSigningKeyResolver;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.*;\n+\n+public class ZTSFileUtil {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(ZTSFileUtil.class);\n+\n+    static private final String DEFAULT_ACCESS_TOKEN_DIR_PATH = \"/var/lib/sia/tokens/\";\n+    static private final String ACCESS_TOKEN_PATH_PROPERTY = \"zts.client.accesstoken.path\";\n+    static private final String ROLE_NAME_CONNECTOR = \",\";\n+    private JwtsSigningKeyResolver accessSignKeyResolver = null;\n+    private ObjectMapper objectMapper = new ObjectMapper();\n+    private Map<String, String> roleNameMap;\n+\n+    public ZTSFileUtil(JwtsSigningKeyResolver resolver) {\n+        roleNameMap = new HashMap<>();\n+        accessSignKeyResolver = resolver;\n+    }\n+\n+    public void preload() {\n+        String path = System.getProperty(ACCESS_TOKEN_PATH_PROPERTY, DEFAULT_ACCESS_TOKEN_DIR_PATH);\n+        File dir = new File(path);\n+\n+        // preload the map from the domain, rolesname to file path\n+        if (dir.exists() && dir.isDirectory()) {\n+            for (File domainDir: dir.listFiles()) {\n+                if (domainDir.isDirectory()) {\n+                    for (File tokenFile: domainDir.listFiles()) {\n+                        if (!tokenFile.isDirectory()) {\n+                            AccessTokenResponse accessTokenResponse = null;\n+                            try {\n+                                accessTokenResponse = objectMapper.readValue(tokenFile, AccessTokenResponse.class);\n+                            } catch (IOException e) {\n+                                LOG.warn(\"Failed to load or parse token file: {}\", tokenFile);\n+                            }\n+\n+                            if (accessTokenResponse == null) {\n+                                continue;\n+                            }\n+\n+                            AccessTokenResponseCacheEntry cacheEntry = new AccessTokenResponseCacheEntry(accessTokenResponse);\n+\n+                            if (!cacheEntry.isExpired(-1)) {\n+                                try {\n+                                    addToRoleMap(domainDir.getName(), tokenFile.getName(), accessTokenResponse);\n+                                } catch (IOException e) {\n+                                    LOG.warn(\"Failed to put role map for token: {}\", tokenFile.getName());\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+    }\n+\n+    // function load the access token from file\n+    public AccessTokenResponse lookupAccessTokenFromDisk(String domain, List<String> rolesName) throws IOException {\n+        String path = System.getProperty(ACCESS_TOKEN_PATH_PROPERTY, DEFAULT_ACCESS_TOKEN_DIR_PATH);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM3NzAwMQ=="}, "originalCommit": {"oid": "f752126dc7dcbe37f728dd8bb39276727269d071"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNzQyNTE2OnYy", "diffSide": "RIGHT", "path": "clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSFileUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQyMzozNTo0OFrOGwX8ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQyMzozNTo0OFrOGwX8ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM3NzE2Mg==", "bodyText": "no need to create this object and and instead we can just have:\nreturn objectMapper.readValue(tokenFile, AccessTokenResponse.class);", "url": "https://github.com/AthenZ/athenz/pull/1028#discussion_r453377162", "createdAt": "2020-07-12T23:35:48Z", "author": {"login": "havetisyan"}, "path": "clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSFileUtil.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package com.yahoo.athenz.zts;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.yahoo.athenz.auth.token.AccessToken;\n+import com.yahoo.athenz.auth.token.jwts.JwtsSigningKeyResolver;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.*;\n+\n+public class ZTSFileUtil {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(ZTSFileUtil.class);\n+\n+    static private final String DEFAULT_ACCESS_TOKEN_DIR_PATH = \"/var/lib/sia/tokens/\";\n+    static private final String ACCESS_TOKEN_PATH_PROPERTY = \"zts.client.accesstoken.path\";\n+    static private final String ROLE_NAME_CONNECTOR = \",\";\n+    private JwtsSigningKeyResolver accessSignKeyResolver = null;\n+    private ObjectMapper objectMapper = new ObjectMapper();\n+    private Map<String, String> roleNameMap;\n+\n+    public ZTSFileUtil(JwtsSigningKeyResolver resolver) {\n+        roleNameMap = new HashMap<>();\n+        accessSignKeyResolver = resolver;\n+    }\n+\n+    public void preload() {\n+        String path = System.getProperty(ACCESS_TOKEN_PATH_PROPERTY, DEFAULT_ACCESS_TOKEN_DIR_PATH);\n+        File dir = new File(path);\n+\n+        // preload the map from the domain, rolesname to file path\n+        if (dir.exists() && dir.isDirectory()) {\n+            for (File domainDir: dir.listFiles()) {\n+                if (domainDir.isDirectory()) {\n+                    for (File tokenFile: domainDir.listFiles()) {\n+                        if (!tokenFile.isDirectory()) {\n+                            AccessTokenResponse accessTokenResponse = null;\n+                            try {\n+                                accessTokenResponse = objectMapper.readValue(tokenFile, AccessTokenResponse.class);\n+                            } catch (IOException e) {\n+                                LOG.warn(\"Failed to load or parse token file: {}\", tokenFile);\n+                            }\n+\n+                            if (accessTokenResponse == null) {\n+                                continue;\n+                            }\n+\n+                            AccessTokenResponseCacheEntry cacheEntry = new AccessTokenResponseCacheEntry(accessTokenResponse);\n+\n+                            if (!cacheEntry.isExpired(-1)) {\n+                                try {\n+                                    addToRoleMap(domainDir.getName(), tokenFile.getName(), accessTokenResponse);\n+                                } catch (IOException e) {\n+                                    LOG.warn(\"Failed to put role map for token: {}\", tokenFile.getName());\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+    }\n+\n+    // function load the access token from file\n+    public AccessTokenResponse lookupAccessTokenFromDisk(String domain, List<String> rolesName) throws IOException {\n+        String path = System.getProperty(ACCESS_TOKEN_PATH_PROPERTY, DEFAULT_ACCESS_TOKEN_DIR_PATH);\n+        LOG.debug(\"Trying to fetch access token from disk for domain: {}, roleNames: {}\", domain, rolesName);\n+        String rolesStr = getRolesStr(domain, rolesName);\n+        String fileName = roleNameMap.get(rolesStr);\n+        if (fileName == null) {\n+            return null;\n+        }\n+        File tokenFile = new File(path + \"/\" + domain + \"/\" + fileName);\n+\n+        AccessTokenResponse accessTokenResponse = objectMapper.readValue(tokenFile, AccessTokenResponse.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f752126dc7dcbe37f728dd8bb39276727269d071"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNzQyNTQyOnYy", "diffSide": "RIGHT", "path": "clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSFileUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQyMzozNjoxMVrOGwX8rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQyMzozNjoxMVrOGwX8rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM3NzE5Ng==", "bodyText": "this should be final", "url": "https://github.com/AthenZ/athenz/pull/1028#discussion_r453377196", "createdAt": "2020-07-12T23:36:11Z", "author": {"login": "havetisyan"}, "path": "clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSFileUtil.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package com.yahoo.athenz.zts;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.yahoo.athenz.auth.token.AccessToken;\n+import com.yahoo.athenz.auth.token.jwts.JwtsSigningKeyResolver;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.*;\n+\n+public class ZTSFileUtil {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(ZTSFileUtil.class);\n+\n+    static private final String DEFAULT_ACCESS_TOKEN_DIR_PATH = \"/var/lib/sia/tokens/\";\n+    static private final String ACCESS_TOKEN_PATH_PROPERTY = \"zts.client.accesstoken.path\";\n+    static private final String ROLE_NAME_CONNECTOR = \",\";\n+    private JwtsSigningKeyResolver accessSignKeyResolver = null;\n+    private ObjectMapper objectMapper = new ObjectMapper();\n+    private Map<String, String> roleNameMap;\n+\n+    public ZTSFileUtil(JwtsSigningKeyResolver resolver) {\n+        roleNameMap = new HashMap<>();\n+        accessSignKeyResolver = resolver;\n+    }\n+\n+    public void preload() {\n+        String path = System.getProperty(ACCESS_TOKEN_PATH_PROPERTY, DEFAULT_ACCESS_TOKEN_DIR_PATH);\n+        File dir = new File(path);\n+\n+        // preload the map from the domain, rolesname to file path\n+        if (dir.exists() && dir.isDirectory()) {\n+            for (File domainDir: dir.listFiles()) {\n+                if (domainDir.isDirectory()) {\n+                    for (File tokenFile: domainDir.listFiles()) {\n+                        if (!tokenFile.isDirectory()) {\n+                            AccessTokenResponse accessTokenResponse = null;\n+                            try {\n+                                accessTokenResponse = objectMapper.readValue(tokenFile, AccessTokenResponse.class);\n+                            } catch (IOException e) {\n+                                LOG.warn(\"Failed to load or parse token file: {}\", tokenFile);\n+                            }\n+\n+                            if (accessTokenResponse == null) {\n+                                continue;\n+                            }\n+\n+                            AccessTokenResponseCacheEntry cacheEntry = new AccessTokenResponseCacheEntry(accessTokenResponse);\n+\n+                            if (!cacheEntry.isExpired(-1)) {\n+                                try {\n+                                    addToRoleMap(domainDir.getName(), tokenFile.getName(), accessTokenResponse);\n+                                } catch (IOException e) {\n+                                    LOG.warn(\"Failed to put role map for token: {}\", tokenFile.getName());\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+    }\n+\n+    // function load the access token from file\n+    public AccessTokenResponse lookupAccessTokenFromDisk(String domain, List<String> rolesName) throws IOException {\n+        String path = System.getProperty(ACCESS_TOKEN_PATH_PROPERTY, DEFAULT_ACCESS_TOKEN_DIR_PATH);\n+        LOG.debug(\"Trying to fetch access token from disk for domain: {}, roleNames: {}\", domain, rolesName);\n+        String rolesStr = getRolesStr(domain, rolesName);\n+        String fileName = roleNameMap.get(rolesStr);\n+        if (fileName == null) {\n+            return null;\n+        }\n+        File tokenFile = new File(path + \"/\" + domain + \"/\" + fileName);\n+\n+        AccessTokenResponse accessTokenResponse = objectMapper.readValue(tokenFile, AccessTokenResponse.class);\n+\n+        return accessTokenResponse;\n+    }\n+\n+    static private String getRolesStr(String domain, List<String> roleNames) {\n+        if (roleNames == null || roleNames.isEmpty()) {\n+            //if no role name specific, should return all roles\n+            return \"*\";\n+        }\n+        Collections.sort(roleNames);\n+        return domain + ROLE_NAME_CONNECTOR + String.join(ROLE_NAME_CONNECTOR, roleNames);\n+    }\n+\n+    private void addToRoleMap(String domain, String fileName, AccessTokenResponse accessTokenResponse) throws IOException {\n+        // parse roles from access token\n+        String token = accessTokenResponse.getAccess_token();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f752126dc7dcbe37f728dd8bb39276727269d071"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNzQyNTY3OnYy", "diffSide": "RIGHT", "path": "clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSFileUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQyMzozNjo0MVrOGwX80A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQyMzozNjo0MVrOGwX80A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM3NzIzMg==", "bodyText": "any exceptions should be logger as error", "url": "https://github.com/AthenZ/athenz/pull/1028#discussion_r453377232", "createdAt": "2020-07-12T23:36:41Z", "author": {"login": "havetisyan"}, "path": "clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSFileUtil.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package com.yahoo.athenz.zts;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.yahoo.athenz.auth.token.AccessToken;\n+import com.yahoo.athenz.auth.token.jwts.JwtsSigningKeyResolver;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.*;\n+\n+public class ZTSFileUtil {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(ZTSFileUtil.class);\n+\n+    static private final String DEFAULT_ACCESS_TOKEN_DIR_PATH = \"/var/lib/sia/tokens/\";\n+    static private final String ACCESS_TOKEN_PATH_PROPERTY = \"zts.client.accesstoken.path\";\n+    static private final String ROLE_NAME_CONNECTOR = \",\";\n+    private JwtsSigningKeyResolver accessSignKeyResolver = null;\n+    private ObjectMapper objectMapper = new ObjectMapper();\n+    private Map<String, String> roleNameMap;\n+\n+    public ZTSFileUtil(JwtsSigningKeyResolver resolver) {\n+        roleNameMap = new HashMap<>();\n+        accessSignKeyResolver = resolver;\n+    }\n+\n+    public void preload() {\n+        String path = System.getProperty(ACCESS_TOKEN_PATH_PROPERTY, DEFAULT_ACCESS_TOKEN_DIR_PATH);\n+        File dir = new File(path);\n+\n+        // preload the map from the domain, rolesname to file path\n+        if (dir.exists() && dir.isDirectory()) {\n+            for (File domainDir: dir.listFiles()) {\n+                if (domainDir.isDirectory()) {\n+                    for (File tokenFile: domainDir.listFiles()) {\n+                        if (!tokenFile.isDirectory()) {\n+                            AccessTokenResponse accessTokenResponse = null;\n+                            try {\n+                                accessTokenResponse = objectMapper.readValue(tokenFile, AccessTokenResponse.class);\n+                            } catch (IOException e) {\n+                                LOG.warn(\"Failed to load or parse token file: {}\", tokenFile);\n+                            }\n+\n+                            if (accessTokenResponse == null) {\n+                                continue;\n+                            }\n+\n+                            AccessTokenResponseCacheEntry cacheEntry = new AccessTokenResponseCacheEntry(accessTokenResponse);\n+\n+                            if (!cacheEntry.isExpired(-1)) {\n+                                try {\n+                                    addToRoleMap(domainDir.getName(), tokenFile.getName(), accessTokenResponse);\n+                                } catch (IOException e) {\n+                                    LOG.warn(\"Failed to put role map for token: {}\", tokenFile.getName());\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+    }\n+\n+    // function load the access token from file\n+    public AccessTokenResponse lookupAccessTokenFromDisk(String domain, List<String> rolesName) throws IOException {\n+        String path = System.getProperty(ACCESS_TOKEN_PATH_PROPERTY, DEFAULT_ACCESS_TOKEN_DIR_PATH);\n+        LOG.debug(\"Trying to fetch access token from disk for domain: {}, roleNames: {}\", domain, rolesName);\n+        String rolesStr = getRolesStr(domain, rolesName);\n+        String fileName = roleNameMap.get(rolesStr);\n+        if (fileName == null) {\n+            return null;\n+        }\n+        File tokenFile = new File(path + \"/\" + domain + \"/\" + fileName);\n+\n+        AccessTokenResponse accessTokenResponse = objectMapper.readValue(tokenFile, AccessTokenResponse.class);\n+\n+        return accessTokenResponse;\n+    }\n+\n+    static private String getRolesStr(String domain, List<String> roleNames) {\n+        if (roleNames == null || roleNames.isEmpty()) {\n+            //if no role name specific, should return all roles\n+            return \"*\";\n+        }\n+        Collections.sort(roleNames);\n+        return domain + ROLE_NAME_CONNECTOR + String.join(ROLE_NAME_CONNECTOR, roleNames);\n+    }\n+\n+    private void addToRoleMap(String domain, String fileName, AccessTokenResponse accessTokenResponse) throws IOException {\n+        // parse roles from access token\n+        String token = accessTokenResponse.getAccess_token();\n+\n+        try {\n+            AccessToken accessToken = new AccessToken(token, accessSignKeyResolver);\n+            List<String> roleNames = accessToken.getScope();\n+            roleNameMap.put(getRolesStr(domain, roleNames), fileName);\n+        } catch (Exception e) {\n+            LOG.warn(\"Got error to parse access token file {}, error: {}\", fileName, e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f752126dc7dcbe37f728dd8bb39276727269d071"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNzQyNzQxOnYy", "diffSide": "RIGHT", "path": "clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSFileUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQyMzozODo1OFrOGwX9tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQyMzozODo1OFrOGwX9tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM3NzQ2Mg==", "bodyText": "we should add more comments here as far what is the expected directory structure otherwise it's not easy to follow why we're keep traversing, etc", "url": "https://github.com/AthenZ/athenz/pull/1028#discussion_r453377462", "createdAt": "2020-07-12T23:38:58Z", "author": {"login": "havetisyan"}, "path": "clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSFileUtil.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package com.yahoo.athenz.zts;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.yahoo.athenz.auth.token.AccessToken;\n+import com.yahoo.athenz.auth.token.jwts.JwtsSigningKeyResolver;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.*;\n+\n+public class ZTSFileUtil {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(ZTSFileUtil.class);\n+\n+    static private final String DEFAULT_ACCESS_TOKEN_DIR_PATH = \"/var/lib/sia/tokens/\";\n+    static private final String ACCESS_TOKEN_PATH_PROPERTY = \"zts.client.accesstoken.path\";\n+    static private final String ROLE_NAME_CONNECTOR = \",\";\n+    private JwtsSigningKeyResolver accessSignKeyResolver = null;\n+    private ObjectMapper objectMapper = new ObjectMapper();\n+    private Map<String, String> roleNameMap;\n+\n+    public ZTSFileUtil(JwtsSigningKeyResolver resolver) {\n+        roleNameMap = new HashMap<>();\n+        accessSignKeyResolver = resolver;\n+    }\n+\n+    public void preload() {\n+        String path = System.getProperty(ACCESS_TOKEN_PATH_PROPERTY, DEFAULT_ACCESS_TOKEN_DIR_PATH);\n+        File dir = new File(path);\n+\n+        // preload the map from the domain, rolesname to file path", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f752126dc7dcbe37f728dd8bb39276727269d071"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNzQzMDU4OnYy", "diffSide": "RIGHT", "path": "clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSFileUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQyMzo0MjoxM1rOGwX_NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQyMzo0MjoxM1rOGwX_NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM3Nzg0NA==", "bodyText": "this should also be an error", "url": "https://github.com/AthenZ/athenz/pull/1028#discussion_r453377844", "createdAt": "2020-07-12T23:42:13Z", "author": {"login": "havetisyan"}, "path": "clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSFileUtil.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package com.yahoo.athenz.zts;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.yahoo.athenz.auth.token.AccessToken;\n+import com.yahoo.athenz.auth.token.jwts.JwtsSigningKeyResolver;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.*;\n+\n+public class ZTSFileUtil {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(ZTSFileUtil.class);\n+\n+    static private final String DEFAULT_ACCESS_TOKEN_DIR_PATH = \"/var/lib/sia/tokens/\";\n+    static private final String ACCESS_TOKEN_PATH_PROPERTY = \"zts.client.accesstoken.path\";\n+    static private final String ROLE_NAME_CONNECTOR = \",\";\n+    private JwtsSigningKeyResolver accessSignKeyResolver = null;\n+    private ObjectMapper objectMapper = new ObjectMapper();\n+    private Map<String, String> roleNameMap;\n+\n+    public ZTSFileUtil(JwtsSigningKeyResolver resolver) {\n+        roleNameMap = new HashMap<>();\n+        accessSignKeyResolver = resolver;\n+    }\n+\n+    public void preload() {\n+        String path = System.getProperty(ACCESS_TOKEN_PATH_PROPERTY, DEFAULT_ACCESS_TOKEN_DIR_PATH);\n+        File dir = new File(path);\n+\n+        // preload the map from the domain, rolesname to file path\n+        if (dir.exists() && dir.isDirectory()) {\n+            for (File domainDir: dir.listFiles()) {\n+                if (domainDir.isDirectory()) {\n+                    for (File tokenFile: domainDir.listFiles()) {\n+                        if (!tokenFile.isDirectory()) {\n+                            AccessTokenResponse accessTokenResponse = null;\n+                            try {\n+                                accessTokenResponse = objectMapper.readValue(tokenFile, AccessTokenResponse.class);\n+                            } catch (IOException e) {\n+                                LOG.warn(\"Failed to load or parse token file: {}\", tokenFile);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f752126dc7dcbe37f728dd8bb39276727269d071"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNzQzMDkyOnYy", "diffSide": "RIGHT", "path": "clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSFileUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQyMzo0Mjo0NFrOGwX_Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQyMzo0Mjo0NFrOGwX_Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM3Nzg4Ng==", "bodyText": "here as well let's make this an error", "url": "https://github.com/AthenZ/athenz/pull/1028#discussion_r453377886", "createdAt": "2020-07-12T23:42:44Z", "author": {"login": "havetisyan"}, "path": "clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSFileUtil.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package com.yahoo.athenz.zts;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.yahoo.athenz.auth.token.AccessToken;\n+import com.yahoo.athenz.auth.token.jwts.JwtsSigningKeyResolver;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.*;\n+\n+public class ZTSFileUtil {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(ZTSFileUtil.class);\n+\n+    static private final String DEFAULT_ACCESS_TOKEN_DIR_PATH = \"/var/lib/sia/tokens/\";\n+    static private final String ACCESS_TOKEN_PATH_PROPERTY = \"zts.client.accesstoken.path\";\n+    static private final String ROLE_NAME_CONNECTOR = \",\";\n+    private JwtsSigningKeyResolver accessSignKeyResolver = null;\n+    private ObjectMapper objectMapper = new ObjectMapper();\n+    private Map<String, String> roleNameMap;\n+\n+    public ZTSFileUtil(JwtsSigningKeyResolver resolver) {\n+        roleNameMap = new HashMap<>();\n+        accessSignKeyResolver = resolver;\n+    }\n+\n+    public void preload() {\n+        String path = System.getProperty(ACCESS_TOKEN_PATH_PROPERTY, DEFAULT_ACCESS_TOKEN_DIR_PATH);\n+        File dir = new File(path);\n+\n+        // preload the map from the domain, rolesname to file path\n+        if (dir.exists() && dir.isDirectory()) {\n+            for (File domainDir: dir.listFiles()) {\n+                if (domainDir.isDirectory()) {\n+                    for (File tokenFile: domainDir.listFiles()) {\n+                        if (!tokenFile.isDirectory()) {\n+                            AccessTokenResponse accessTokenResponse = null;\n+                            try {\n+                                accessTokenResponse = objectMapper.readValue(tokenFile, AccessTokenResponse.class);\n+                            } catch (IOException e) {\n+                                LOG.warn(\"Failed to load or parse token file: {}\", tokenFile);\n+                            }\n+\n+                            if (accessTokenResponse == null) {\n+                                continue;\n+                            }\n+\n+                            AccessTokenResponseCacheEntry cacheEntry = new AccessTokenResponseCacheEntry(accessTokenResponse);\n+\n+                            if (!cacheEntry.isExpired(-1)) {\n+                                try {\n+                                    addToRoleMap(domainDir.getName(), tokenFile.getName(), accessTokenResponse);\n+                                } catch (IOException e) {\n+                                    LOG.warn(\"Failed to put role map for token: {}\", tokenFile.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f752126dc7dcbe37f728dd8bb39276727269d071"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNzQzNDA1OnYy", "diffSide": "RIGHT", "path": "clients/java/zts/core/src/test/java/com/yahoo/athenz/zts/ZTSClientTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQyMzo0NjowOVrOGwYA6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNzoyNDoyNFrOGy097A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM3ODI4MQ==", "bodyText": "we should add test cases where we have invalid access tokens on disk and make sure those are correctly handled and skipped by the client", "url": "https://github.com/AthenZ/athenz/pull/1028#discussion_r453378281", "createdAt": "2020-07-12T23:46:09Z", "author": {"login": "havetisyan"}, "path": "clients/java/zts/core/src/test/java/com/yahoo/athenz/zts/ZTSClientTest.java", "diffHunk": "@@ -3014,6 +3019,31 @@ public void testGetAccessTokenCacheKeySSLContext() {\n         client.close();\n     }\n \n+    @Test\n+    public void testGetAccessTokenFromFile() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f752126dc7dcbe37f728dd8bb39276727269d071"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk0OTgwNA==", "bodyText": "Added invalid access token", "url": "https://github.com/AthenZ/athenz/pull/1028#discussion_r455949804", "createdAt": "2020-07-16T17:24:24Z", "author": {"login": "MartinTrojans"}, "path": "clients/java/zts/core/src/test/java/com/yahoo/athenz/zts/ZTSClientTest.java", "diffHunk": "@@ -3014,6 +3019,31 @@ public void testGetAccessTokenCacheKeySSLContext() {\n         client.close();\n     }\n \n+    @Test\n+    public void testGetAccessTokenFromFile() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM3ODI4MQ=="}, "originalCommit": {"oid": "f752126dc7dcbe37f728dd8bb39276727269d071"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNzQzNzUwOnYy", "diffSide": "RIGHT", "path": "clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQyMzo1MDoxOVrOGwYCnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMTowNTo1OVrOGzB5DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM3ODcxOQ==", "bodyText": "I'm not sure why we're only setting the resolver here and not doing anything else since it means after I do this I also need to call initZtsFileUtil to set the resolver and call preload. So why just within this call we reload the file util object ourselves instead of asking the user to do it.", "url": "https://github.com/AthenZ/athenz/pull/1028#discussion_r453378719", "createdAt": "2020-07-12T23:50:19Z", "author": {"login": "havetisyan"}, "path": "clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "diffHunk": "@@ -327,6 +334,23 @@ public static void lookupZTSUrl() {\n             }\n         }\n     }\n+\n+    public static void initZtsFileUtil() {\n+        ztsFileUtil = new ZTSFileUtil(getAccessTokenSignKeyResolver());\n+        ztsFileUtil.preload();\n+    }\n+\n+    public static void setAccessTokenSignKeyResolver(JwtsSigningKeyResolver jwtsSigningKeyResolver) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f752126dc7dcbe37f728dd8bb39276727269d071"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk0OTQwMA==", "bodyText": "Having setAccessTokenSignKeyResolver and getAccessTokenSignKeyResolver is for setting mock resolver in unit test", "url": "https://github.com/AthenZ/athenz/pull/1028#discussion_r455949400", "createdAt": "2020-07-16T17:23:39Z", "author": {"login": "MartinTrojans"}, "path": "clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "diffHunk": "@@ -327,6 +334,23 @@ public static void lookupZTSUrl() {\n             }\n         }\n     }\n+\n+    public static void initZtsFileUtil() {\n+        ztsFileUtil = new ZTSFileUtil(getAccessTokenSignKeyResolver());\n+        ztsFileUtil.preload();\n+    }\n+\n+    public static void setAccessTokenSignKeyResolver(JwtsSigningKeyResolver jwtsSigningKeyResolver) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM3ODcxOQ=="}, "originalCommit": {"oid": "f752126dc7dcbe37f728dd8bb39276727269d071"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE2MTU0OA==", "bodyText": "but we still need to make them usable since they're declared as public. so rather than just having a resolver kept as a member variable, we can call the init method again to reinitialize the file utility and you don't need the getAccessTokenSignKeyResolver() at all.\nThis also gives the client the flexibility for someone who doesn't want to use the conf file but define their own resolver, so that they can do so and pass it to the client.", "url": "https://github.com/AthenZ/athenz/pull/1028#discussion_r456161548", "createdAt": "2020-07-17T01:05:59Z", "author": {"login": "havetisyan"}, "path": "clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "diffHunk": "@@ -327,6 +334,23 @@ public static void lookupZTSUrl() {\n             }\n         }\n     }\n+\n+    public static void initZtsFileUtil() {\n+        ztsFileUtil = new ZTSFileUtil(getAccessTokenSignKeyResolver());\n+        ztsFileUtil.preload();\n+    }\n+\n+    public static void setAccessTokenSignKeyResolver(JwtsSigningKeyResolver jwtsSigningKeyResolver) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM3ODcxOQ=="}, "originalCommit": {"oid": "f752126dc7dcbe37f728dd8bb39276727269d071"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNzQzNzcwOnYy", "diffSide": "RIGHT", "path": "clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQyMzo1MDo0MVrOGwYCuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMTowNjoyMFrOGzB5fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM3ODc0NQ==", "bodyText": "based on the previous comment for the setAccessTokenSignKeyResolver I don't think we need this function at all.", "url": "https://github.com/AthenZ/athenz/pull/1028#discussion_r453378745", "createdAt": "2020-07-12T23:50:41Z", "author": {"login": "havetisyan"}, "path": "clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "diffHunk": "@@ -327,6 +334,23 @@ public static void lookupZTSUrl() {\n             }\n         }\n     }\n+\n+    public static void initZtsFileUtil() {\n+        ztsFileUtil = new ZTSFileUtil(getAccessTokenSignKeyResolver());\n+        ztsFileUtil.preload();\n+    }\n+\n+    public static void setAccessTokenSignKeyResolver(JwtsSigningKeyResolver jwtsSigningKeyResolver) {\n+        resolver = jwtsSigningKeyResolver;\n+    }\n+\n+    public static JwtsSigningKeyResolver getAccessTokenSignKeyResolver() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f752126dc7dcbe37f728dd8bb39276727269d071"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk0OTQ0Mg==", "bodyText": "Having setAccessTokenSignKeyResolver and getAccessTokenSignKeyResolver is for setting mock resolver in unit test", "url": "https://github.com/AthenZ/athenz/pull/1028#discussion_r455949442", "createdAt": "2020-07-16T17:23:44Z", "author": {"login": "MartinTrojans"}, "path": "clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "diffHunk": "@@ -327,6 +334,23 @@ public static void lookupZTSUrl() {\n             }\n         }\n     }\n+\n+    public static void initZtsFileUtil() {\n+        ztsFileUtil = new ZTSFileUtil(getAccessTokenSignKeyResolver());\n+        ztsFileUtil.preload();\n+    }\n+\n+    public static void setAccessTokenSignKeyResolver(JwtsSigningKeyResolver jwtsSigningKeyResolver) {\n+        resolver = jwtsSigningKeyResolver;\n+    }\n+\n+    public static JwtsSigningKeyResolver getAccessTokenSignKeyResolver() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM3ODc0NQ=="}, "originalCommit": {"oid": "f752126dc7dcbe37f728dd8bb39276727269d071"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE2MTY2Mg==", "bodyText": "the unit tests can only be done with the set method . no need for this get method.", "url": "https://github.com/AthenZ/athenz/pull/1028#discussion_r456161662", "createdAt": "2020-07-17T01:06:20Z", "author": {"login": "havetisyan"}, "path": "clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "diffHunk": "@@ -327,6 +334,23 @@ public static void lookupZTSUrl() {\n             }\n         }\n     }\n+\n+    public static void initZtsFileUtil() {\n+        ztsFileUtil = new ZTSFileUtil(getAccessTokenSignKeyResolver());\n+        ztsFileUtil.preload();\n+    }\n+\n+    public static void setAccessTokenSignKeyResolver(JwtsSigningKeyResolver jwtsSigningKeyResolver) {\n+        resolver = jwtsSigningKeyResolver;\n+    }\n+\n+    public static JwtsSigningKeyResolver getAccessTokenSignKeyResolver() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM3ODc0NQ=="}, "originalCommit": {"oid": "f752126dc7dcbe37f728dd8bb39276727269d071"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNzQzODI4OnYy", "diffSide": "RIGHT", "path": "clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQyMzo1MToxNVrOGwYDAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQyMzo1MToxNVrOGwYDAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM3ODgxNg==", "bodyText": "Let's call it more specific ZTSAccessTokenFileLoader instead of ZTSFileUtil", "url": "https://github.com/AthenZ/athenz/pull/1028#discussion_r453378816", "createdAt": "2020-07-12T23:51:15Z", "author": {"login": "havetisyan"}, "path": "clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "diffHunk": "@@ -172,6 +174,7 @@\n     private static ServiceLoader<ZTSClientService> ztsTokenProviders;\n     private static AtomicReference<Set<String>> svcLoaderCacheKeys;\n     private static PrivateKeyStore PRIVATE_KEY_STORE = loadServicePrivateKey();\n+    private static ZTSFileUtil ztsFileUtil;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f752126dc7dcbe37f728dd8bb39276727269d071"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNzQzOTI5OnYy", "diffSide": "RIGHT", "path": "clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSFileUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQyMzo1MjoyMlrOGwYDfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQyMzo1MjoyMlrOGwYDfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM3ODk0MA==", "bodyText": "all of our property names start with athenz.", "url": "https://github.com/AthenZ/athenz/pull/1028#discussion_r453378940", "createdAt": "2020-07-12T23:52:22Z", "author": {"login": "havetisyan"}, "path": "clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSFileUtil.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package com.yahoo.athenz.zts;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.yahoo.athenz.auth.token.AccessToken;\n+import com.yahoo.athenz.auth.token.jwts.JwtsSigningKeyResolver;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.*;\n+\n+public class ZTSFileUtil {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(ZTSFileUtil.class);\n+\n+    static private final String DEFAULT_ACCESS_TOKEN_DIR_PATH = \"/var/lib/sia/tokens/\";\n+    static private final String ACCESS_TOKEN_PATH_PROPERTY = \"zts.client.accesstoken.path\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f752126dc7dcbe37f728dd8bb39276727269d071"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NTM3Njg1OnYy", "diffSide": "RIGHT", "path": "clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSAccessTokenFileLoader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMDo1MjozM1rOGzBq5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMDo1MjozM1rOGzBq5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE1NzkyNw==", "bodyText": "Instead of defining our path separator we should use File.pathSeparator", "url": "https://github.com/AthenZ/athenz/pull/1028#discussion_r456157927", "createdAt": "2020-07-17T00:52:33Z", "author": {"login": "havetisyan"}, "path": "clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSAccessTokenFileLoader.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package com.yahoo.athenz.zts;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.yahoo.athenz.auth.token.AccessToken;\n+import com.yahoo.athenz.auth.token.jwts.JwtsSigningKeyResolver;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.*;\n+\n+public class ZTSAccessTokenFileLoader {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(ZTSAccessTokenFileLoader.class);\n+\n+    static public final String ACCESS_TOKEN_PATH_PROPERTY = \"athenz.zts.client.accesstoken.path\";\n+    static private final String DEFAULT_ACCESS_TOKEN_DIR_PATH = \"/var/lib/sia/tokens/\";\n+    static private final String ROLE_NAME_CONNECTOR = \",\";\n+    static private final String PATH_SEPARATOR = \"/\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b84de099b370c9cfa6728a68d0f633d553680efa"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NTM3OTQ1OnYy", "diffSide": "RIGHT", "path": "clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSAccessTokenFileLoader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMDo1NDowN1rOGzBsYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMDo1NDowN1rOGzBsYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE1ODMwNQ==", "bodyText": "we should have both rolesStr and fileName as final", "url": "https://github.com/AthenZ/athenz/pull/1028#discussion_r456158305", "createdAt": "2020-07-17T00:54:07Z", "author": {"login": "havetisyan"}, "path": "clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSAccessTokenFileLoader.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package com.yahoo.athenz.zts;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.yahoo.athenz.auth.token.AccessToken;\n+import com.yahoo.athenz.auth.token.jwts.JwtsSigningKeyResolver;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.*;\n+\n+public class ZTSAccessTokenFileLoader {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(ZTSAccessTokenFileLoader.class);\n+\n+    static public final String ACCESS_TOKEN_PATH_PROPERTY = \"athenz.zts.client.accesstoken.path\";\n+    static private final String DEFAULT_ACCESS_TOKEN_DIR_PATH = \"/var/lib/sia/tokens/\";\n+    static private final String ROLE_NAME_CONNECTOR = \",\";\n+    static private final String PATH_SEPARATOR = \"/\";\n+    private JwtsSigningKeyResolver accessSignKeyResolver;\n+    private ObjectMapper objectMapper = new ObjectMapper();\n+    private Map<String, String> roleNameMap;\n+\n+    public ZTSAccessTokenFileLoader(JwtsSigningKeyResolver resolver) {\n+        roleNameMap = new HashMap<>();\n+        accessSignKeyResolver = resolver;\n+    }\n+\n+    public void preload() {\n+        final String path = System.getProperty(ACCESS_TOKEN_PATH_PROPERTY, DEFAULT_ACCESS_TOKEN_DIR_PATH);\n+        File dir = new File(path);\n+\n+        // preload the map from the <domain, rolesname> -> <file path>\n+        // expected dir should be <base token path>/<domain dir>/<token file>s\n+        // after preload the map, when we look up the access token,\n+        // the map will directly read the required file\n+        if (dir.exists() && dir.isDirectory()) {\n+            for (File domainDir: dir.listFiles()) {\n+                if (domainDir.isDirectory()) {\n+                    for (File tokenFile: domainDir.listFiles()) {\n+                        if (!tokenFile.isDirectory()) {\n+                            AccessTokenResponse accessTokenResponse = null;\n+                            try {\n+                                accessTokenResponse = objectMapper.readValue(tokenFile, AccessTokenResponse.class);\n+                            } catch (IOException e) {\n+                                LOG.error(\"Failed to load or parse token file: {}\", tokenFile);\n+                            }\n+\n+                            // if access token parsed fail, continue to scan tokens\n+                            if (accessTokenResponse == null) {\n+                                continue;\n+                            }\n+\n+                            AccessTokenResponseCacheEntry cacheEntry = new AccessTokenResponseCacheEntry(accessTokenResponse);\n+\n+                            // check access token is still valid\n+                            if (!cacheEntry.isExpired(-1)) {\n+                                addToRoleMap(domainDir.getName(), tokenFile.getName(), accessTokenResponse);\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+    }\n+\n+    // function load the access token from file\n+    public AccessTokenResponse lookupAccessTokenFromDisk(String domain, List<String> rolesName) throws IOException {\n+        LOG.debug(\"Trying to fetch access token from disk for domain: {}, roleNames: {}\", domain, rolesName);\n+        final String path = System.getProperty(ACCESS_TOKEN_PATH_PROPERTY, DEFAULT_ACCESS_TOKEN_DIR_PATH);\n+        String rolesStr = getRolesStr(domain, rolesName);\n+        String fileName = roleNameMap.get(rolesStr);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b84de099b370c9cfa6728a68d0f633d553680efa"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NTM4NjkyOnYy", "diffSide": "RIGHT", "path": "clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSAccessTokenFileLoader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMDo1Nzo0NVrOGzBwXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMDo1Nzo0NVrOGzBwXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE1OTMyNA==", "bodyText": "The list given to us might be immutable so we can't just call sort on it. Make a copy of the list and then sort that list.", "url": "https://github.com/AthenZ/athenz/pull/1028#discussion_r456159324", "createdAt": "2020-07-17T00:57:45Z", "author": {"login": "havetisyan"}, "path": "clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSAccessTokenFileLoader.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package com.yahoo.athenz.zts;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.yahoo.athenz.auth.token.AccessToken;\n+import com.yahoo.athenz.auth.token.jwts.JwtsSigningKeyResolver;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.*;\n+\n+public class ZTSAccessTokenFileLoader {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(ZTSAccessTokenFileLoader.class);\n+\n+    static public final String ACCESS_TOKEN_PATH_PROPERTY = \"athenz.zts.client.accesstoken.path\";\n+    static private final String DEFAULT_ACCESS_TOKEN_DIR_PATH = \"/var/lib/sia/tokens/\";\n+    static private final String ROLE_NAME_CONNECTOR = \",\";\n+    static private final String PATH_SEPARATOR = \"/\";\n+    private JwtsSigningKeyResolver accessSignKeyResolver;\n+    private ObjectMapper objectMapper = new ObjectMapper();\n+    private Map<String, String> roleNameMap;\n+\n+    public ZTSAccessTokenFileLoader(JwtsSigningKeyResolver resolver) {\n+        roleNameMap = new HashMap<>();\n+        accessSignKeyResolver = resolver;\n+    }\n+\n+    public void preload() {\n+        final String path = System.getProperty(ACCESS_TOKEN_PATH_PROPERTY, DEFAULT_ACCESS_TOKEN_DIR_PATH);\n+        File dir = new File(path);\n+\n+        // preload the map from the <domain, rolesname> -> <file path>\n+        // expected dir should be <base token path>/<domain dir>/<token file>s\n+        // after preload the map, when we look up the access token,\n+        // the map will directly read the required file\n+        if (dir.exists() && dir.isDirectory()) {\n+            for (File domainDir: dir.listFiles()) {\n+                if (domainDir.isDirectory()) {\n+                    for (File tokenFile: domainDir.listFiles()) {\n+                        if (!tokenFile.isDirectory()) {\n+                            AccessTokenResponse accessTokenResponse = null;\n+                            try {\n+                                accessTokenResponse = objectMapper.readValue(tokenFile, AccessTokenResponse.class);\n+                            } catch (IOException e) {\n+                                LOG.error(\"Failed to load or parse token file: {}\", tokenFile);\n+                            }\n+\n+                            // if access token parsed fail, continue to scan tokens\n+                            if (accessTokenResponse == null) {\n+                                continue;\n+                            }\n+\n+                            AccessTokenResponseCacheEntry cacheEntry = new AccessTokenResponseCacheEntry(accessTokenResponse);\n+\n+                            // check access token is still valid\n+                            if (!cacheEntry.isExpired(-1)) {\n+                                addToRoleMap(domainDir.getName(), tokenFile.getName(), accessTokenResponse);\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+    }\n+\n+    // function load the access token from file\n+    public AccessTokenResponse lookupAccessTokenFromDisk(String domain, List<String> rolesName) throws IOException {\n+        LOG.debug(\"Trying to fetch access token from disk for domain: {}, roleNames: {}\", domain, rolesName);\n+        final String path = System.getProperty(ACCESS_TOKEN_PATH_PROPERTY, DEFAULT_ACCESS_TOKEN_DIR_PATH);\n+        String rolesStr = getRolesStr(domain, rolesName);\n+        String fileName = roleNameMap.get(rolesStr);\n+        if (fileName == null) {\n+            return null;\n+        }\n+        File tokenFile = new File(path + PATH_SEPARATOR + domain + PATH_SEPARATOR + fileName);\n+\n+        return objectMapper.readValue(tokenFile, AccessTokenResponse.class);\n+    }\n+\n+    static private String getRolesStr(String domain, List<String> roleNames) {\n+        if (roleNames == null || roleNames.isEmpty()) {\n+            //if no role name specific, should return all roles\n+            return \"*\";\n+        }\n+        Collections.sort(roleNames);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b84de099b370c9cfa6728a68d0f633d553680efa"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NTM4ODIyOnYy", "diffSide": "RIGHT", "path": "clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSAccessTokenFileLoader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMDo1ODoyNlrOGzBxCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMDo1ODoyNlrOGzBxCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE1OTQ5OA==", "bodyText": "we should probably just get this property in the constructor and not get it every time in this method", "url": "https://github.com/AthenZ/athenz/pull/1028#discussion_r456159498", "createdAt": "2020-07-17T00:58:26Z", "author": {"login": "havetisyan"}, "path": "clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSAccessTokenFileLoader.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package com.yahoo.athenz.zts;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.yahoo.athenz.auth.token.AccessToken;\n+import com.yahoo.athenz.auth.token.jwts.JwtsSigningKeyResolver;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.*;\n+\n+public class ZTSAccessTokenFileLoader {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(ZTSAccessTokenFileLoader.class);\n+\n+    static public final String ACCESS_TOKEN_PATH_PROPERTY = \"athenz.zts.client.accesstoken.path\";\n+    static private final String DEFAULT_ACCESS_TOKEN_DIR_PATH = \"/var/lib/sia/tokens/\";\n+    static private final String ROLE_NAME_CONNECTOR = \",\";\n+    static private final String PATH_SEPARATOR = \"/\";\n+    private JwtsSigningKeyResolver accessSignKeyResolver;\n+    private ObjectMapper objectMapper = new ObjectMapper();\n+    private Map<String, String> roleNameMap;\n+\n+    public ZTSAccessTokenFileLoader(JwtsSigningKeyResolver resolver) {\n+        roleNameMap = new HashMap<>();\n+        accessSignKeyResolver = resolver;\n+    }\n+\n+    public void preload() {\n+        final String path = System.getProperty(ACCESS_TOKEN_PATH_PROPERTY, DEFAULT_ACCESS_TOKEN_DIR_PATH);\n+        File dir = new File(path);\n+\n+        // preload the map from the <domain, rolesname> -> <file path>\n+        // expected dir should be <base token path>/<domain dir>/<token file>s\n+        // after preload the map, when we look up the access token,\n+        // the map will directly read the required file\n+        if (dir.exists() && dir.isDirectory()) {\n+            for (File domainDir: dir.listFiles()) {\n+                if (domainDir.isDirectory()) {\n+                    for (File tokenFile: domainDir.listFiles()) {\n+                        if (!tokenFile.isDirectory()) {\n+                            AccessTokenResponse accessTokenResponse = null;\n+                            try {\n+                                accessTokenResponse = objectMapper.readValue(tokenFile, AccessTokenResponse.class);\n+                            } catch (IOException e) {\n+                                LOG.error(\"Failed to load or parse token file: {}\", tokenFile);\n+                            }\n+\n+                            // if access token parsed fail, continue to scan tokens\n+                            if (accessTokenResponse == null) {\n+                                continue;\n+                            }\n+\n+                            AccessTokenResponseCacheEntry cacheEntry = new AccessTokenResponseCacheEntry(accessTokenResponse);\n+\n+                            // check access token is still valid\n+                            if (!cacheEntry.isExpired(-1)) {\n+                                addToRoleMap(domainDir.getName(), tokenFile.getName(), accessTokenResponse);\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+    }\n+\n+    // function load the access token from file\n+    public AccessTokenResponse lookupAccessTokenFromDisk(String domain, List<String> rolesName) throws IOException {\n+        LOG.debug(\"Trying to fetch access token from disk for domain: {}, roleNames: {}\", domain, rolesName);\n+        final String path = System.getProperty(ACCESS_TOKEN_PATH_PROPERTY, DEFAULT_ACCESS_TOKEN_DIR_PATH);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b84de099b370c9cfa6728a68d0f633d553680efa"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1689, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}