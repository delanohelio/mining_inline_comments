{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0NDY0NDQ1", "number": 1027, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQyMzozMjoxN1rOELgS8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQyMzozMjo0MlrOELgTBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNDk4OTMwOnYy", "diffSide": "RIGHT", "path": "servers/zms/src/main/java/com/yahoo/athenz/zms/ZMSImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQyMzozMjoxN1rOGtFmXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQyMzozMjoxN1rOGtFmXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkzMDg0NQ==", "bodyText": "Typo in method name.", "url": "https://github.com/AthenZ/athenz/pull/1027#discussion_r449930845", "createdAt": "2020-07-05T23:32:17Z", "author": {"login": "abvaidya"}, "path": "servers/zms/src/main/java/com/yahoo/athenz/zms/ZMSImpl.java", "diffHunk": "@@ -2142,24 +2143,46 @@ Principal createPrincipalForName(String principalName) {\n         return SimplePrincipal.create(domain, name, (String) null);\n     }\n \n-    boolean validRoleTokenAccess(String trustDomain, String domainName, String principalName) {\n+    boolean validateRoleBasedAccessCheck(List<String> roles, final String trustDomain, final String domainName,\n+                                         final String principalName, Authority authority) {\n+\n+        // we must have a valid authority to do the check\n+\n+        if (authority == null) {\n+            LOG.error(\"validateRoleBasedAccessCheck: principal has no valid authority\");\n+            return false;\n+        }\n \n         if (trustDomain != null) {\n-            if (LOG.isWarnEnabled()) {\n-                LOG.warn(\"validRoleTokenAccess: Cannot access cross-domain resources with RoleToken\");\n-            }\n+            LOG.error(\"validateRoleBasedAccessCheck: Cannot access cross-domain resources with role\");\n             return false;\n         }\n \n-        // for Role tokens we don't have a name component in the principal\n-        // so the principal name should be the same as the domain value \n-        // thus it must match the domain name from the resource\n+        if (authority instanceof RoleAuthority) {\n \n-        if (!domainName.equalsIgnoreCase(principalName)) {\n-            if (LOG.isWarnEnabled()) {\n-                LOG.warn(\"validRoleTokenAccess: resource domain does not match RoleToken domain\");\n+            // for Role tokens we don't have a name component in the principal\n+            // so the principal name should be the same as the domain value\n+            // thus it must match the domain name from the resource\n+\n+            if (!domainName.equalsIgnoreCase(principalName)) {\n+                LOG.error(\"validateRoleBasedAccessCheckq: resource domain {} does not match RoleToken domain {}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de5e6e15c5b2a9d73b15d43c35e11ff75f0d1c7b"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNDk4OTUxOnYy", "diffSide": "RIGHT", "path": "servers/zms/src/main/java/com/yahoo/athenz/zms/ZMSImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQyMzozMjo0MlrOGtFmgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQyMzozMjo0MlrOGtFmgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkzMDg4MA==", "bodyText": "Typo in method name.", "url": "https://github.com/AthenZ/athenz/pull/1027#discussion_r449930880", "createdAt": "2020-07-05T23:32:42Z", "author": {"login": "abvaidya"}, "path": "servers/zms/src/main/java/com/yahoo/athenz/zms/ZMSImpl.java", "diffHunk": "@@ -2142,24 +2143,46 @@ Principal createPrincipalForName(String principalName) {\n         return SimplePrincipal.create(domain, name, (String) null);\n     }\n \n-    boolean validRoleTokenAccess(String trustDomain, String domainName, String principalName) {\n+    boolean validateRoleBasedAccessCheck(List<String> roles, final String trustDomain, final String domainName,\n+                                         final String principalName, Authority authority) {\n+\n+        // we must have a valid authority to do the check\n+\n+        if (authority == null) {\n+            LOG.error(\"validateRoleBasedAccessCheck: principal has no valid authority\");\n+            return false;\n+        }\n \n         if (trustDomain != null) {\n-            if (LOG.isWarnEnabled()) {\n-                LOG.warn(\"validRoleTokenAccess: Cannot access cross-domain resources with RoleToken\");\n-            }\n+            LOG.error(\"validateRoleBasedAccessCheck: Cannot access cross-domain resources with role\");\n             return false;\n         }\n \n-        // for Role tokens we don't have a name component in the principal\n-        // so the principal name should be the same as the domain value \n-        // thus it must match the domain name from the resource\n+        if (authority instanceof RoleAuthority) {\n \n-        if (!domainName.equalsIgnoreCase(principalName)) {\n-            if (LOG.isWarnEnabled()) {\n-                LOG.warn(\"validRoleTokenAccess: resource domain does not match RoleToken domain\");\n+            // for Role tokens we don't have a name component in the principal\n+            // so the principal name should be the same as the domain value\n+            // thus it must match the domain name from the resource\n+\n+            if (!domainName.equalsIgnoreCase(principalName)) {\n+                LOG.error(\"validateRoleBasedAccessCheckq: resource domain {} does not match RoleToken domain {}\",\n+                        domainName, principalName);\n+                return false;\n+            }\n+        } else {\n+\n+            // for role certificates we're maintaining the full\n+            // role name in the list so we're going to make sure\n+            // they all have the correct prefix\n+\n+            final String prefix = domainName + AuthorityConsts.ROLE_SEP;\n+            for (String role : roles) {\n+                if (!role.startsWith(prefix)) {\n+                    LOG.error(\"validRoleBasedAccessCheck: role {} does not start with resource domain {}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de5e6e15c5b2a9d73b15d43c35e11ff75f0d1c7b"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1686, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}