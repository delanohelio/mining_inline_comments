{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxOTMwODI4", "number": 1003, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNjo0MDoxNVrOED98kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNzoyNTo1OVrOEE9bHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTk2MTEzOnYy", "diffSide": "RIGHT", "path": "servers/zts/src/main/java/com/yahoo/athenz/zts/notification/CertFailedRefreshNotificationTask.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNjo0MDoxNVrOGhTK2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNjo0MDoxNVrOGhTK2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU3MDI2Ng==", "bodyText": "Note that I've changed this check to only verify hostname If hostnameResolver is used.", "url": "https://github.com/AthenZ/athenz/pull/1003#discussion_r437570266", "createdAt": "2020-06-09T16:40:15Z", "author": {"login": "OferLevi85"}, "path": "servers/zts/src/main/java/com/yahoo/athenz/zts/notification/CertFailedRefreshNotificationTask.java", "diffHunk": "@@ -132,7 +132,7 @@ public CertFailedRefreshNotificationTask(InstanceCertManager instanceCertManager\n \n     private List<X509CertRecord> getRecordsWithValidHosts(List<X509CertRecord> unrefreshedCerts) {\n         return unrefreshedCerts.stream()\n-                    .filter(record -> hostnameResolver.isValidHostname(record.getHostName()))\n+                    .filter(record -> hostnameResolver == null || hostnameResolver.isValidHostname(record.getHostName()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4158ef4bad47fcc08683f66358c5e8a894e07025"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTk2NTgwOnYy", "diffSide": "RIGHT", "path": "servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/DynamoDBCertRecordStoreConnection.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNjo0MTozOFrOGhTN2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNzoyODoyN1rOGi57hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU3MTAzMw==", "bodyText": "Note that we need to create a new index in prod and any other environment before pushing these changes", "url": "https://github.com/AthenZ/athenz/pull/1003#discussion_r437571033", "createdAt": "2020-06-09T16:41:38Z", "author": {"login": "OferLevi85"}, "path": "servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/DynamoDBCertRecordStoreConnection.java", "diffHunk": "@@ -54,17 +59,25 @@\n     private static final String KEY_EXPIRY_TIME = \"expiryTime\";\n     private static final String KEY_HOSTNAME = \"hostName\";\n     private static final String KEY_TTL = \"ttl\";\n+    public static final String INDEX_CURRENT_DATE = \"currentDate-index\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4158ef4bad47fcc08683f66358c5e8a894e07025"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI1Mzg5Mg==", "bodyText": "In the conf/zts.properties for the athenz.zts.cert_dynamodb_table_name setting I have small section what type of table we need to create. can you also update that section to include the requirement for this index as well.", "url": "https://github.com/AthenZ/athenz/pull/1003#discussion_r439253892", "createdAt": "2020-06-12T07:28:27Z", "author": {"login": "havetisyan"}, "path": "servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/DynamoDBCertRecordStoreConnection.java", "diffHunk": "@@ -54,17 +59,25 @@\n     private static final String KEY_EXPIRY_TIME = \"expiryTime\";\n     private static final String KEY_HOSTNAME = \"hostName\";\n     private static final String KEY_TTL = \"ttl\";\n+    public static final String INDEX_CURRENT_DATE = \"currentDate-index\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU3MTAzMw=="}, "originalCommit": {"oid": "4158ef4bad47fcc08683f66358c5e8a894e07025"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTk3NjQ5OnYy", "diffSide": "RIGHT", "path": "servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/DynamoDBCertRecordStoreConnection.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNjo0NDozNVrOGhTUmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMDoyNzo0NlrOGiXiAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU3Mjc2Mg==", "bodyText": "Regarding the scan, please note the following:\n\nCouldn't avoid the scan when getting the updated records as I must use consistent reading. Indexes only support eventual consistency so there's a good chance we'll miss records if we use it.\nWe will need to enable Scan in DynamoDB for the IAM role in prod and any other environments in order for scanning to work.", "url": "https://github.com/AthenZ/athenz/pull/1003#discussion_r437572762", "createdAt": "2020-06-09T16:44:35Z", "author": {"login": "OferLevi85"}, "path": "servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/DynamoDBCertRecordStoreConnection.java", "diffHunk": "@@ -213,17 +231,92 @@ public int deleteExpiredX509CertRecords(int expiryTimeMins) {\n     public boolean updateUnrefreshedCertificatesNotificationTimestamp(String lastNotifiedServer,\n                                                                       long lastNotifiedTime,\n                                                                       String provider) {\n-        // Currently unimplemented for AWS\n-        return false;\n+        try {\n+            List<Item> items = getUnrefreshedCertsRecords(lastNotifiedTime, provider);\n+            updateLastNotified(lastNotifiedServer, lastNotifiedTime, items);\n+        } catch (Exception ex) {\n+            LOGGER.error(\"DynamoDB updateUnrefreshedCertificatesNotificationTimestamp Error: {}/{}\", ex.getClass(), ex.getMessage());\n+            return false;\n+        }\n+\n+        return true;\n     }\n \n     @Override\n     public List<X509CertRecord> getNotifyUnrefreshedCertificates(String lastNotifiedServer, long lastNotifiedTime) {\n-        // Currently unimplemented for AWS\n-        return new ArrayList<>();\n+\n+        Map<String, AttributeValue> expressionAttributeValues = new HashMap<>();\n+        expressionAttributeValues.put(\":lastNotifiedServerVal\", new AttributeValue().withS(lastNotifiedServer));\n+        expressionAttributeValues.put(\":lastNotifiedTimeVal\", new AttributeValue().withN(Long.toString(lastNotifiedTime)));\n+\n+        // Get all records that that should receive notifications.\n+        ScanRequest scanRequest = new ScanRequest()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4158ef4bad47fcc08683f66358c5e8a894e07025"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM4MjY2Ng==", "bodyText": "We don't really care about consistency reading in this use case. Remember we're not making changes and then expecting to read within a second or two to process notifications. Notifications are processed for records that have been created at least 3 days ago so there isn't much chance of missing records. We should use query instead of scan for all of our use cases.", "url": "https://github.com/AthenZ/athenz/pull/1003#discussion_r438382666", "createdAt": "2020-06-10T20:15:14Z", "author": {"login": "havetisyan"}, "path": "servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/DynamoDBCertRecordStoreConnection.java", "diffHunk": "@@ -213,17 +231,92 @@ public int deleteExpiredX509CertRecords(int expiryTimeMins) {\n     public boolean updateUnrefreshedCertificatesNotificationTimestamp(String lastNotifiedServer,\n                                                                       long lastNotifiedTime,\n                                                                       String provider) {\n-        // Currently unimplemented for AWS\n-        return false;\n+        try {\n+            List<Item> items = getUnrefreshedCertsRecords(lastNotifiedTime, provider);\n+            updateLastNotified(lastNotifiedServer, lastNotifiedTime, items);\n+        } catch (Exception ex) {\n+            LOGGER.error(\"DynamoDB updateUnrefreshedCertificatesNotificationTimestamp Error: {}/{}\", ex.getClass(), ex.getMessage());\n+            return false;\n+        }\n+\n+        return true;\n     }\n \n     @Override\n     public List<X509CertRecord> getNotifyUnrefreshedCertificates(String lastNotifiedServer, long lastNotifiedTime) {\n-        // Currently unimplemented for AWS\n-        return new ArrayList<>();\n+\n+        Map<String, AttributeValue> expressionAttributeValues = new HashMap<>();\n+        expressionAttributeValues.put(\":lastNotifiedServerVal\", new AttributeValue().withS(lastNotifiedServer));\n+        expressionAttributeValues.put(\":lastNotifiedTimeVal\", new AttributeValue().withN(Long.toString(lastNotifiedTime)));\n+\n+        // Get all records that that should receive notifications.\n+        ScanRequest scanRequest = new ScanRequest()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU3Mjc2Mg=="}, "originalCommit": {"oid": "4158ef4bad47fcc08683f66358c5e8a894e07025"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU3OTI3Nw==", "bodyText": "We actually make an update just moments before when writing the lastNotifiedTime and server.\nIn InstanceCertManager.getUnrefreshedCertsNotifications we call 2 functions right after the other:\n\nupdateUnrefreshedCertificatesNotificationTimestamp - we quey the index and update the records with the lastNotifiedTime and server\nMake the call to this function, getNotifyUnrefreshedCertificates to get all the records that were just updated by us.\nIf we update the records and don't read them with consistency then we'll miss some of these records and skip their notifications.", "url": "https://github.com/AthenZ/athenz/pull/1003#discussion_r438579277", "createdAt": "2020-06-11T06:55:47Z", "author": {"login": "OferLevi85"}, "path": "servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/DynamoDBCertRecordStoreConnection.java", "diffHunk": "@@ -213,17 +231,92 @@ public int deleteExpiredX509CertRecords(int expiryTimeMins) {\n     public boolean updateUnrefreshedCertificatesNotificationTimestamp(String lastNotifiedServer,\n                                                                       long lastNotifiedTime,\n                                                                       String provider) {\n-        // Currently unimplemented for AWS\n-        return false;\n+        try {\n+            List<Item> items = getUnrefreshedCertsRecords(lastNotifiedTime, provider);\n+            updateLastNotified(lastNotifiedServer, lastNotifiedTime, items);\n+        } catch (Exception ex) {\n+            LOGGER.error(\"DynamoDB updateUnrefreshedCertificatesNotificationTimestamp Error: {}/{}\", ex.getClass(), ex.getMessage());\n+            return false;\n+        }\n+\n+        return true;\n     }\n \n     @Override\n     public List<X509CertRecord> getNotifyUnrefreshedCertificates(String lastNotifiedServer, long lastNotifiedTime) {\n-        // Currently unimplemented for AWS\n-        return new ArrayList<>();\n+\n+        Map<String, AttributeValue> expressionAttributeValues = new HashMap<>();\n+        expressionAttributeValues.put(\":lastNotifiedServerVal\", new AttributeValue().withS(lastNotifiedServer));\n+        expressionAttributeValues.put(\":lastNotifiedTimeVal\", new AttributeValue().withN(Long.toString(lastNotifiedTime)));\n+\n+        // Get all records that that should receive notifications.\n+        ScanRequest scanRequest = new ScanRequest()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU3Mjc2Mg=="}, "originalCommit": {"oid": "4158ef4bad47fcc08683f66358c5e8a894e07025"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY5MDMwNw==", "bodyText": "Edit: There is actually no good reason for InstanceCertManager.getUnrefreshedCertsNotifications to make separate calls.\nWe can make a single call to the store connection and have it responsible for getting all records that should receive notifications.\nFor JDBC we can leave the implementation as is (it will just do the calls one after the other) but for DynamoDB we can just return all the updated records from the query. I'll fix it and push", "url": "https://github.com/AthenZ/athenz/pull/1003#discussion_r438690307", "createdAt": "2020-06-11T10:27:46Z", "author": {"login": "OferLevi85"}, "path": "servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/DynamoDBCertRecordStoreConnection.java", "diffHunk": "@@ -213,17 +231,92 @@ public int deleteExpiredX509CertRecords(int expiryTimeMins) {\n     public boolean updateUnrefreshedCertificatesNotificationTimestamp(String lastNotifiedServer,\n                                                                       long lastNotifiedTime,\n                                                                       String provider) {\n-        // Currently unimplemented for AWS\n-        return false;\n+        try {\n+            List<Item> items = getUnrefreshedCertsRecords(lastNotifiedTime, provider);\n+            updateLastNotified(lastNotifiedServer, lastNotifiedTime, items);\n+        } catch (Exception ex) {\n+            LOGGER.error(\"DynamoDB updateUnrefreshedCertificatesNotificationTimestamp Error: {}/{}\", ex.getClass(), ex.getMessage());\n+            return false;\n+        }\n+\n+        return true;\n     }\n \n     @Override\n     public List<X509CertRecord> getNotifyUnrefreshedCertificates(String lastNotifiedServer, long lastNotifiedTime) {\n-        // Currently unimplemented for AWS\n-        return new ArrayList<>();\n+\n+        Map<String, AttributeValue> expressionAttributeValues = new HashMap<>();\n+        expressionAttributeValues.put(\":lastNotifiedServerVal\", new AttributeValue().withS(lastNotifiedServer));\n+        expressionAttributeValues.put(\":lastNotifiedTimeVal\", new AttributeValue().withN(Long.toString(lastNotifiedTime)));\n+\n+        // Get all records that that should receive notifications.\n+        ScanRequest scanRequest = new ScanRequest()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU3Mjc2Mg=="}, "originalCommit": {"oid": "4158ef4bad47fcc08683f66358c5e8a894e07025"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNjc1MjA5OnYy", "diffSide": "RIGHT", "path": "servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/DynamoDBCertRecordStoreConnection.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMDozMTo0OFrOGhbGFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMDozMTo0OFrOGhbGFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcwMDExNw==", "bodyText": "Everytime we update the currentTime column (hold epoch in long format), we should also update the new currentDate column (ISO date in the format YYYY-MM-DD).", "url": "https://github.com/AthenZ/athenz/pull/1003#discussion_r437700117", "createdAt": "2020-06-09T20:31:48Z", "author": {"login": "OferLevi85"}, "path": "servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/DynamoDBCertRecordStoreConnection.java", "diffHunk": "@@ -139,10 +156,10 @@ public boolean updateX509CertRecord(X509CertRecord certRecord) {\n                             new AttributeUpdate(KEY_CURRENT_SERIAL).put(certRecord.getCurrentSerial()),\n                             new AttributeUpdate(KEY_CURRENT_IP).put(certRecord.getCurrentIP()),\n                             new AttributeUpdate(KEY_CURRENT_TIME).put(getLongFromDate(certRecord.getCurrentTime())),\n+                            new AttributeUpdate(KEY_CURRENT_DATE).put(dynamoDBUtils.getIso8601FromDate(certRecord.getCurrentTime())),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba2d1ff0e82f86f2bfd29777db1ad07a2d425844"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMDk3MjE3OnYy", "diffSide": "LEFT", "path": "servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/DynamoDBCertRecordStoreConnection.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMDoxNTo0OFrOGiExbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNzozMjozNlrOGi6CYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM4Mjk1Ng==", "bodyText": "what was the reason for removing client cert flag?", "url": "https://github.com/AthenZ/athenz/pull/1003#discussion_r438382956", "createdAt": "2020-06-10T20:15:48Z", "author": {"login": "havetisyan"}, "path": "servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/DynamoDBCertRecordStoreConnection.java", "diffHunk": "@@ -139,10 +156,10 @@ public boolean updateX509CertRecord(X509CertRecord certRecord) {\n                             new AttributeUpdate(KEY_CURRENT_SERIAL).put(certRecord.getCurrentSerial()),\n                             new AttributeUpdate(KEY_CURRENT_IP).put(certRecord.getCurrentIP()),\n                             new AttributeUpdate(KEY_CURRENT_TIME).put(getLongFromDate(certRecord.getCurrentTime())),\n+                            new AttributeUpdate(KEY_CURRENT_DATE).put(dynamoDBUtils.getIso8601FromDate(certRecord.getCurrentTime())),\n                             new AttributeUpdate(KEY_PREV_SERIAL).put(certRecord.getPrevSerial()),\n                             new AttributeUpdate(KEY_PREV_IP).put(certRecord.getPrevIP()),\n                             new AttributeUpdate(KEY_PREV_TIME).put(getLongFromDate(certRecord.getPrevTime())),\n-                            new AttributeUpdate(KEY_CLIENT_CERT).put(certRecord.getClientCert()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba2d1ff0e82f86f2bfd29777db1ad07a2d425844"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU4MTQwMg==", "bodyText": "Yeah sorry I put the explanation in the closed PR and forgot to copy it here.\nIn any case, I noticed that in JDBC connection we do not update this column during an update.\nAfter checking the purpose of this attribute (differentiating between server and client certificates), I assumed that it is a column that should never be changed after the record is first inserted.\nIf my assumption is incorrect let me know (in which case we should also add it to the JDBC update call).", "url": "https://github.com/AthenZ/athenz/pull/1003#discussion_r438581402", "createdAt": "2020-06-11T07:00:33Z", "author": {"login": "OferLevi85"}, "path": "servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/DynamoDBCertRecordStoreConnection.java", "diffHunk": "@@ -139,10 +156,10 @@ public boolean updateX509CertRecord(X509CertRecord certRecord) {\n                             new AttributeUpdate(KEY_CURRENT_SERIAL).put(certRecord.getCurrentSerial()),\n                             new AttributeUpdate(KEY_CURRENT_IP).put(certRecord.getCurrentIP()),\n                             new AttributeUpdate(KEY_CURRENT_TIME).put(getLongFromDate(certRecord.getCurrentTime())),\n+                            new AttributeUpdate(KEY_CURRENT_DATE).put(dynamoDBUtils.getIso8601FromDate(certRecord.getCurrentTime())),\n                             new AttributeUpdate(KEY_PREV_SERIAL).put(certRecord.getPrevSerial()),\n                             new AttributeUpdate(KEY_PREV_IP).put(certRecord.getPrevIP()),\n                             new AttributeUpdate(KEY_PREV_TIME).put(getLongFromDate(certRecord.getPrevTime())),\n-                            new AttributeUpdate(KEY_CLIENT_CERT).put(certRecord.getClientCert()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM4Mjk1Ng=="}, "originalCommit": {"oid": "ba2d1ff0e82f86f2bfd29777db1ad07a2d425844"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI1NTY0OA==", "bodyText": "Yes, we should update it and fix jdbc as well. The logic is that once you get a client cert, you can't request a service cert. However, the provider may decide that it wants ZTS to issue a client cert only for a request in which case we honor the downgrade option.", "url": "https://github.com/AthenZ/athenz/pull/1003#discussion_r439255648", "createdAt": "2020-06-12T07:32:36Z", "author": {"login": "havetisyan"}, "path": "servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/DynamoDBCertRecordStoreConnection.java", "diffHunk": "@@ -139,10 +156,10 @@ public boolean updateX509CertRecord(X509CertRecord certRecord) {\n                             new AttributeUpdate(KEY_CURRENT_SERIAL).put(certRecord.getCurrentSerial()),\n                             new AttributeUpdate(KEY_CURRENT_IP).put(certRecord.getCurrentIP()),\n                             new AttributeUpdate(KEY_CURRENT_TIME).put(getLongFromDate(certRecord.getCurrentTime())),\n+                            new AttributeUpdate(KEY_CURRENT_DATE).put(dynamoDBUtils.getIso8601FromDate(certRecord.getCurrentTime())),\n                             new AttributeUpdate(KEY_PREV_SERIAL).put(certRecord.getPrevSerial()),\n                             new AttributeUpdate(KEY_PREV_IP).put(certRecord.getPrevIP()),\n                             new AttributeUpdate(KEY_PREV_TIME).put(getLongFromDate(certRecord.getPrevTime())),\n-                            new AttributeUpdate(KEY_CLIENT_CERT).put(certRecord.getClientCert()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM4Mjk1Ng=="}, "originalCommit": {"oid": "ba2d1ff0e82f86f2bfd29777db1ad07a2d425844"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjMzMjc1OnYy", "diffSide": "RIGHT", "path": "libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/cert/CertRecordStoreConnection.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNzoxNTowNFrOGi5lmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNzoxNTowNFrOGi5lmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI0ODI4Mg==", "bodyText": "by default we were list certs that were not refreshed for more than 3 days (the default value in jdbc)\nlet's update the return description since we're returning List now.", "url": "https://github.com/AthenZ/athenz/pull/1003#discussion_r439248282", "createdAt": "2020-06-12T07:15:04Z", "author": {"login": "havetisyan"}, "path": "libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/cert/CertRecordStoreConnection.java", "diffHunk": "@@ -73,21 +73,13 @@\n     int deleteExpiredX509CertRecords(int expiryTimeMins);\n \n     /**\n-     * Update lastNotifiedServer and lastNotifiedTime for certificate that failed to refresh for more than one day.\n+     * List all certificates that failed to refresh for more than one day.\n      * @param lastNotifiedServer\n      * @param lastNotifiedTime\n      * @param provider\n      * @return True if at least one certificate record was updated (needs notification to be sent)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28e7213bbaa8dbe23208b4e49f2fd130740e80c7"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjM2MTI3OnYy", "diffSide": "RIGHT", "path": "servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/DynamoDBCertRecordStore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNzoyNTo1OVrOGi53NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNzoyNTo1OVrOGi53NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI1Mjc4OA==", "bodyText": "what are we creating a new instance of DynamoDBUtils and passing here? Why can't DynamoDBCertRecordStoreConnection just maintain it's own instance of the class since it only has a couple of public methods? Any reason why those methods can't be static and then no need to create any instances?", "url": "https://github.com/AthenZ/athenz/pull/1003#discussion_r439252788", "createdAt": "2020-06-12T07:25:59Z", "author": {"login": "havetisyan"}, "path": "servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/DynamoDBCertRecordStore.java", "diffHunk": "@@ -32,18 +33,18 @@\n     private static final Logger LOGGER = LoggerFactory.getLogger(DynamoDBCertRecordStore.class);\n     private static final Logger CERTLOGGER = LoggerFactory.getLogger(\"X509CertLogger\");\n \n-    private DynamoDB dynamoDB;\n     private String tableName;\n+    private DynamoDB dynamoDB;\n \n     public DynamoDBCertRecordStore(AmazonDynamoDB client, final String tableName) {\n-        dynamoDB = new DynamoDB(client);\n+        this.dynamoDB = new DynamoDB(client);\n         this.tableName = tableName;\n     }\n \n     @Override\n     public CertRecordStoreConnection getConnection() {\n         try {\n-            return new DynamoDBCertRecordStoreConnection(dynamoDB, tableName);\n+            return new DynamoDBCertRecordStoreConnection(dynamoDB, tableName, new DynamoDBUtils());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28e7213bbaa8dbe23208b4e49f2fd130740e80c7"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1667, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}