{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4ODUzMTUz", "number": 871, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxODo1MTo1NFrODcBa_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxOToyODoyMVrODcCICg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzEwMDE0OnYy", "diffSide": "RIGHT", "path": "libs/go/zmscli/cli.go", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxODo1MTo1NFrOFj2BDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxODo1MTo1NFrOFj2BDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzEyOTQ4Ng==", "bodyText": "typo - set-role-revuew-enabled", "url": "https://github.com/AthenZ/athenz/pull/871#discussion_r373129486", "createdAt": "2020-01-30T18:51:54Z", "author": {"login": "abvaidya"}, "path": "libs/go/zmscli/cli.go", "diffHunk": "@@ -1874,12 +1908,14 @@ func (cli Zms) HelpListCommand() string {\n \tbuf.WriteString(\"   delete-domain-role-member member\\n\")\n \tbuf.WriteString(\"   delete-role role\\n\")\n \tbuf.WriteString(\"   set-role-audit-enabled group_role audit-enabled\\n\")\n+\tbuf.WriteString(\"   set-role-revuew-enabled group_role review-enabled\\n\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55f8bccbe0350ea510b4bcaa2412ca44816d5cff"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzIxMDEzOnYy", "diffSide": "RIGHT", "path": "servers/zms/src/main/java/com/yahoo/athenz/zms/ZMSImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxOToyNjoyOVrOFj3GYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxOToyNjoyOVrOFj3GYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE0NzIzMg==", "bodyText": "typo. going", "url": "https://github.com/AthenZ/athenz/pull/871#discussion_r373147232", "createdAt": "2020-01-30T19:26:29Z", "author": {"login": "abvaidya"}, "path": "servers/zms/src/main/java/com/yahoo/athenz/zms/ZMSImpl.java", "diffHunk": "@@ -6505,7 +6522,13 @@ void addDefaultAdminAssertion(ResourceContext ctx, String domainName, Policy adm\n         if (LOG.isInfoEnabled()) {\n             LOG.info(\"Adding default admin assertion to admin policy because no default admin assertion was found for admin policy for domain: \" + domainName);\n         }\n-        \n+\n+        // if we had invalid assertions then we're gonig to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55f8bccbe0350ea510b4bcaa2412ca44816d5cff"}, "originalPosition": 2335}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzIxNTQ2OnYy", "diffSide": "RIGHT", "path": "servers/zms/src/main/java/com/yahoo/athenz/zms/ZMSImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxOToyODoyMVrOFj3J6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxOToyODoyMVrOFj3J6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE0ODEzOQ==", "bodyText": "need to pass argument principal.getFullName() to LOG.error", "url": "https://github.com/AthenZ/athenz/pull/871#discussion_r373148139", "createdAt": "2020-01-30T19:28:21Z", "author": {"login": "abvaidya"}, "path": "servers/zms/src/main/java/com/yahoo/athenz/zms/ZMSImpl.java", "diffHunk": "@@ -7087,14 +7111,43 @@ public void putMembershipDecision(ResourceContext ctx, String domainName, String\n     }\n \n     private boolean isAllowedPutMembershipDecision(final Principal principal, final AthenzDomain domain,\n-            final Role role) {\n+            final Role role, final RoleMember roleMember, final String caller) {\n+\n+        // if this is an audit enabled domain then we're going to carry\n+        // out the authorization in the sys.auth.audit domains\n \n         if (role.getAuditEnabled() == Boolean.TRUE) {\n-            // check authorization in sys.auth.audit domains\n             return isAllowedAuditRoleMembershipApproval(principal, domain);\n-        } else {\n-            return isAllowedPutMembershipAccess(principal, domain, role);\n         }\n+\n+        // otherwise we're going to do a standard check if the principal\n+        // is authorized to update the domain role membership\n+\n+        boolean allowed = isAllowedPutMembershipAccess(principal, domain, role);\n+\n+        // if the user is allowed to make changes in the domain but\n+        // the role is review enabled then we need to make sure\n+        // the approver cannot be the same as the requester\n+\n+        if (allowed && role.getReviewEnabled() == Boolean.TRUE) {\n+\n+            Membership pendingMember = dbService.getMembership(domain.getName(),\n+                    ZMSUtils.extractRoleName(domain.getName(), role.getName()),\n+                    roleMember.getMemberName(), 0, true);\n+\n+            // if the member is not found then we're going to throw a not found exception\n+\n+            if (!pendingMember.getIsMember()) {\n+                throw ZMSUtils.notFoundError(\"Pending member \" + roleMember.getMemberName() + \" not found\", caller);\n+            }\n+\n+            if (pendingMember.getRequestPrincipal().equalsIgnoreCase(principal.getFullName())) {\n+                LOG.error(\"Principal {} cannot approve his/her own request\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55f8bccbe0350ea510b4bcaa2412ca44816d5cff"}, "originalPosition": 2420}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1785, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}