{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExNTUxNjY0", "number": 1166, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzo0MDozM1rOEy0QvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzo0MDozM1rOEy0QvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNzIwNTA4OnYy", "diffSide": "RIGHT", "path": "servers/zms/src/main/java/com/yahoo/athenz/zms/store/jdbc/JDBCConnection.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzo0MDozM1rOHpqiXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzo0MDozM1rOHpqiXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ1MDU5MQ==", "bodyText": "We only send review notifications if expiry isn't set. If it is we'll send expiration notifications (if the review date is set it will be used to determine when to start sending the notifications but the content will be an \"expiration notification\" email and not a \"review reminder\" email)", "url": "https://github.com/AthenZ/athenz/pull/1166#discussion_r513450591", "createdAt": "2020-10-28T13:40:33Z", "author": {"login": "OferLevi85"}, "path": "servers/zms/src/main/java/com/yahoo/athenz/zms/store/jdbc/JDBCConnection.java", "diffHunk": "@@ -331,17 +331,27 @@\n     private static final String SQL_UPDATE_PENDING_ROLE_MEMBERS_NOTIFICATION_TIMESTAMP = \"UPDATE pending_role_member SET last_notified_time=?, server=? \" +\n             \"WHERE DAYOFWEEK(req_time)=DAYOFWEEK(?) AND (last_notified_time IS NULL || last_notified_time < (CURRENT_TIME - INTERVAL ? DAY));\";\n \n-    private static final String SQL_UPDATE_ROLE_MEMBERS_EXPIRY_NOTIFICATION_TIMESTAMP = \"UPDATE role_member SET last_notified_time=?, server=? \" +\n-            \"WHERE expiration > CURRENT_TIME AND DATEDIFF(expiration, CURRENT_TIME) IN (0,1,7,14,21,28) AND (last_notified_time IS NULL || last_notified_time < (CURRENT_TIME - INTERVAL ? DAY));\";\n+    private static final String SQL_UPDATE_ROLE_MEMBERS_EXPIRY_NOTIFICATION_TIMESTAMP =\n+            \"UPDATE role_member SET last_notified_time=?, server=? \" +\n+            \"WHERE (\" +\n+                    // Expiration is set and Review isn't (or after expiration) - start sending a month before expiration\n+                    \"(expiration > CURRENT_TIME AND (review_reminder is NULL OR review_reminder >= expiration) AND DATEDIFF(expiration, CURRENT_TIME) IN (0,1,7,14,21,28)) OR\" +\n+                    // Expiration and Review both set and review is before expiration - start sending from review date\n+                    \"(expiration > CURRENT_TIME AND review_reminder is not NULL AND review_reminder <= CURRENT_TIME AND DATEDIFF(expiration, CURRENT_TIME) IN (0,1,7,14,21,28))\" +\n+                    \") AND \" +\n+                    \"(last_notified_time IS NULL || last_notified_time < (CURRENT_TIME - INTERVAL ? DAY));\";\n     private static final String SQL_LIST_NOTIFY_TEMPORARY_ROLE_MEMBERS = \"SELECT domain.name AS domain_name, role.name AS role_name, \" +\n             \"principal.name AS principal_name, role_member.expiration, role_member.review_reminder FROM role_member \" +\n             \"JOIN role ON role.role_id=role_member.role_id \" +\n             \"JOIN principal ON principal.principal_id=role_member.principal_id \" +\n             \"JOIN domain ON domain.domain_id=role.domain_id \" +\n             \"WHERE role_member.last_notified_time=? AND role_member.server=?;\";\n \n-    private static final String SQL_UPDATE_ROLE_MEMBERS_REVIEW_NOTIFICATION_TIMESTAMP = \"UPDATE role_member SET review_last_notified_time=?, review_server=? \" +\n-            \"WHERE review_reminder > CURRENT_TIME AND DATEDIFF(review_reminder, CURRENT_TIME) IN (0,1,7,14,21,28) AND (review_last_notified_time IS NULL || review_last_notified_time < (CURRENT_TIME - INTERVAL ? DAY));\";\n+    private static final String SQL_UPDATE_ROLE_MEMBERS_REVIEW_NOTIFICATION_TIMESTAMP =\n+            \"UPDATE role_member SET review_last_notified_time=?, review_server=? \" +\n+            \"WHERE (\" +\n+                    \"review_reminder > CURRENT_TIME AND (expiration is NULL) AND DATEDIFF(review_reminder, CURRENT_TIME) IN (0,1,7,14,21,28) AND \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59c05f686fb4bdb25db5080444e46c62270977b4"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1632, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}