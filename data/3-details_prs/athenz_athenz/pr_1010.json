{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1MDc4MTY0", "number": 1010, "title": "Provide AWS Temp credentials for ZTS connection to DynamoDB", "bodyText": "And enable notifications for failures\n\nI confirm that this contribution is made under the terms of the license found in the root directory of this repository's source tree and that I have the authority necessary to make this contribution on behalf of its copyright owner.", "createdAt": "2020-06-16T09:07:15Z", "url": "https://github.com/AthenZ/athenz/pull/1010", "merged": true, "mergeCommit": {"oid": "86e91d8b15562e612ea49cc4fc36f9ab7d8034d9"}, "closed": true, "closedAt": "2020-06-29T19:37:17Z", "author": {"login": "OferLevi85"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcry9gyABqjM0NDgzODI3ODg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcwGVRrgFqTQzOTQ0MjYzMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bdbb6cf49ecad631eb68cbd8e5008c6806c0b431", "author": {"user": {"login": "OferLevi85", "name": "Ofer Levi"}}, "url": "https://github.com/AthenZ/athenz/commit/bdbb6cf49ecad631eb68cbd8e5008c6806c0b431", "committedDate": "2020-06-16T09:06:43Z", "message": "Provide AWS Temp credentials for ZTS connection to DynamoDB\nAnd enable notifications for failures"}, "afterCommit": {"oid": "4648c9c5ac0d91a3db9bf1211709a885a64dd519", "author": {"user": {"login": "OferLevi85", "name": "Ofer Levi"}}, "url": "https://github.com/AthenZ/athenz/commit/4648c9c5ac0d91a3db9bf1211709a885a64dd519", "committedDate": "2020-06-16T10:46:55Z", "message": "Provide AWS Temp credentials for ZTS connection to DynamoDB\nAnd enable notifications for failures"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4648c9c5ac0d91a3db9bf1211709a885a64dd519", "author": {"user": {"login": "OferLevi85", "name": "Ofer Levi"}}, "url": "https://github.com/AthenZ/athenz/commit/4648c9c5ac0d91a3db9bf1211709a885a64dd519", "committedDate": "2020-06-16T10:46:55Z", "message": "Provide AWS Temp credentials for ZTS connection to DynamoDB\nAnd enable notifications for failures"}, "afterCommit": {"oid": "4c88463fcb43026fb3fad161b3680673c89fea92", "author": {"user": {"login": "OferLevi85", "name": "Ofer Levi"}}, "url": "https://github.com/AthenZ/athenz/commit/4c88463fcb43026fb3fad161b3680673c89fea92", "committedDate": "2020-06-16T11:05:43Z", "message": "Provide AWS Temp credentials for ZTS connection to DynamoDB\nAnd enable notifications for failures"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4c88463fcb43026fb3fad161b3680673c89fea92", "author": {"user": {"login": "OferLevi85", "name": "Ofer Levi"}}, "url": "https://github.com/AthenZ/athenz/commit/4c88463fcb43026fb3fad161b3680673c89fea92", "committedDate": "2020-06-16T11:05:43Z", "message": "Provide AWS Temp credentials for ZTS connection to DynamoDB\nAnd enable notifications for failures"}, "afterCommit": {"oid": "a26f997f2dc14fc7f5c2d409c5c668772c308845", "author": {"user": {"login": "OferLevi85", "name": "Ofer Levi"}}, "url": "https://github.com/AthenZ/athenz/commit/a26f997f2dc14fc7f5c2d409c5c668772c308845", "committedDate": "2020-06-16T11:31:56Z", "message": "Provide AWS Temp credentials for ZTS connection to DynamoDB\nAnd enable notifications for failures"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a26f997f2dc14fc7f5c2d409c5c668772c308845", "author": {"user": {"login": "OferLevi85", "name": "Ofer Levi"}}, "url": "https://github.com/AthenZ/athenz/commit/a26f997f2dc14fc7f5c2d409c5c668772c308845", "committedDate": "2020-06-16T11:31:56Z", "message": "Provide AWS Temp credentials for ZTS connection to DynamoDB\nAnd enable notifications for failures"}, "afterCommit": {"oid": "529f0296036d2f07ae9094453c3e2af4b2e0ba87", "author": {"user": {"login": "OferLevi85", "name": "Ofer Levi"}}, "url": "https://github.com/AthenZ/athenz/commit/529f0296036d2f07ae9094453c3e2af4b2e0ba87", "committedDate": "2020-06-16T19:41:13Z", "message": "Provide AWS Temp credentials for ZTS connection to DynamoDB\nAnd enable notifications for failures"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxODQxMTM4", "url": "https://github.com/AthenZ/athenz/pull/1010#pullrequestreview-431841138", "createdAt": "2020-06-16T19:50:39Z", "commit": {"oid": "529f0296036d2f07ae9094453c3e2af4b2e0ba87"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxOTo1MDo0MFrOGkqyXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxOTo1MDo0MFrOGkqyXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEwMjk0Mw==", "bodyText": "The current logic refreshes the token once it gets to half time before the expiration.\nI didn't had to change this logic, I just had to make sure that notification will be sent in case of failure", "url": "https://github.com/AthenZ/athenz/pull/1010#discussion_r441102943", "createdAt": "2020-06-16T19:50:40Z", "author": {"login": "OferLevi85"}, "path": "clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "diffHunk": "@@ -1505,7 +1559,7 @@ public void run() {\n             boolean svcTokenRefresh = false;\n             for (PrefetchTokenScheduledItem item : PREFETCH_SCHEDULED_ITEMS) {\n \n-                // see if item expires within next two minutes\n+                // see if item requires refresh", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "529f0296036d2f07ae9094453c3e2af4b2e0ba87"}, "originalPosition": 171}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxODQzMDYy", "url": "https://github.com/AthenZ/athenz/pull/1010#pullrequestreview-431843062", "createdAt": "2020-06-16T19:53:34Z", "commit": {"oid": "529f0296036d2f07ae9094453c3e2af4b2e0ba87"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxOTo1MzozNFrOGkq4cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxOTo1MzozNFrOGkq4cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEwNDQ5OA==", "bodyText": "This is just a small improvement I had to do after I entered this template as a resource for the third time :)", "url": "https://github.com/AthenZ/athenz/pull/1010#discussion_r441104498", "createdAt": "2020-06-16T19:53:34Z", "author": {"login": "OferLevi85"}, "path": "libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/notification/NotificationToEmailConverterCommon.java", "diffHunk": "@@ -111,6 +111,18 @@ public String generateBodyFromTemplate(Map<String, String> metaDetails,\n         return addCssStyleToBody(bodyString);\n     }\n \n+    public String getTableEntryTemplate(int numOfColumns) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "529f0296036d2f07ae9094453c3e2af4b2e0ba87"}, "originalPosition": 24}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "529f0296036d2f07ae9094453c3e2af4b2e0ba87", "author": {"user": {"login": "OferLevi85", "name": "Ofer Levi"}}, "url": "https://github.com/AthenZ/athenz/commit/529f0296036d2f07ae9094453c3e2af4b2e0ba87", "committedDate": "2020-06-16T19:41:13Z", "message": "Provide AWS Temp credentials for ZTS connection to DynamoDB\nAnd enable notifications for failures"}, "afterCommit": {"oid": "b9a14030d8f34bd37409990f4bff7e063dc047c4", "author": {"user": {"login": "OferLevi85", "name": "Ofer Levi"}}, "url": "https://github.com/AthenZ/athenz/commit/b9a14030d8f34bd37409990f4bff7e063dc047c4", "committedDate": "2020-06-16T19:55:10Z", "message": "Provide AWS Temp credentials for ZTS connection to DynamoDB\nAnd enable notifications for failures"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b9a14030d8f34bd37409990f4bff7e063dc047c4", "author": {"user": {"login": "OferLevi85", "name": "Ofer Levi"}}, "url": "https://github.com/AthenZ/athenz/commit/b9a14030d8f34bd37409990f4bff7e063dc047c4", "committedDate": "2020-06-16T19:55:10Z", "message": "Provide AWS Temp credentials for ZTS connection to DynamoDB\nAnd enable notifications for failures"}, "afterCommit": {"oid": "ba88c8ffb8484ea09348cebee4c19e314a5c6721", "author": {"user": {"login": "OferLevi85", "name": "Ofer Levi"}}, "url": "https://github.com/AthenZ/athenz/commit/ba88c8ffb8484ea09348cebee4c19e314a5c6721", "committedDate": "2020-06-16T20:01:08Z", "message": "Provide AWS Temp credentials for ZTS connection to DynamoDB\nAnd enable notifications for failures"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ba88c8ffb8484ea09348cebee4c19e314a5c6721", "author": {"user": {"login": "OferLevi85", "name": "Ofer Levi"}}, "url": "https://github.com/AthenZ/athenz/commit/ba88c8ffb8484ea09348cebee4c19e314a5c6721", "committedDate": "2020-06-16T20:01:08Z", "message": "Provide AWS Temp credentials for ZTS connection to DynamoDB\nAnd enable notifications for failures"}, "afterCommit": {"oid": "9dc162c947616b66109fd73b00e17ed87f2cc1c8", "author": {"user": {"login": "OferLevi85", "name": "Ofer Levi"}}, "url": "https://github.com/AthenZ/athenz/commit/9dc162c947616b66109fd73b00e17ed87f2cc1c8", "committedDate": "2020-06-17T01:09:21Z", "message": "Provide AWS Temp credentials for ZTS connection to DynamoDB\nAnd enable notifications for failures"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9dc162c947616b66109fd73b00e17ed87f2cc1c8", "author": {"user": {"login": "OferLevi85", "name": "Ofer Levi"}}, "url": "https://github.com/AthenZ/athenz/commit/9dc162c947616b66109fd73b00e17ed87f2cc1c8", "committedDate": "2020-06-17T01:09:21Z", "message": "Provide AWS Temp credentials for ZTS connection to DynamoDB\nAnd enable notifications for failures"}, "afterCommit": {"oid": "891748ddbc8e879119a8fa24d107ad6dc11ec3ce", "author": {"user": {"login": "OferLevi85", "name": "Ofer Levi"}}, "url": "https://github.com/AthenZ/athenz/commit/891748ddbc8e879119a8fa24d107ad6dc11ec3ce", "committedDate": "2020-06-17T01:31:44Z", "message": "Provide AWS Temp credentials for ZTS connection to DynamoDB\nAnd enable notifications for failures"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "891748ddbc8e879119a8fa24d107ad6dc11ec3ce", "author": {"user": {"login": "OferLevi85", "name": "Ofer Levi"}}, "url": "https://github.com/AthenZ/athenz/commit/891748ddbc8e879119a8fa24d107ad6dc11ec3ce", "committedDate": "2020-06-17T01:31:44Z", "message": "Provide AWS Temp credentials for ZTS connection to DynamoDB\nAnd enable notifications for failures"}, "afterCommit": {"oid": "0c52c29703cf4c01aca4e539f106ea00b19f031f", "author": {"user": {"login": "OferLevi85", "name": "Ofer Levi"}}, "url": "https://github.com/AthenZ/athenz/commit/0c52c29703cf4c01aca4e539f106ea00b19f031f", "committedDate": "2020-06-17T02:00:47Z", "message": "Provide AWS Temp credentials for ZTS connection to DynamoDB\nAnd enable notifications for failures"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNDEwMzkx", "url": "https://github.com/AthenZ/athenz/pull/1010#pullrequestreview-433410391", "createdAt": "2020-06-18T15:39:40Z", "commit": {"oid": "0c52c29703cf4c01aca4e539f106ea00b19f031f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNTozOTo0MVrOGl1IdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjowNzowOFrOGl2RhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyMTAxMw==", "bodyText": "What was the requirement to have this in the constructor? Since the notificationSender is not used in creating the actual rdl generated client, why not just have a setter for this thus allowing the functionality to be used with any of the other constructors if necessary. e.g.:\nZTSClient ztsClient = new ZTSClient(...);\nztsClient.setNotificationSender(notificationSender);", "url": "https://github.com/AthenZ/athenz/pull/1010#discussion_r442321013", "createdAt": "2020-06-18T15:39:41Z", "author": {"login": "havetisyan"}, "path": "clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "diffHunk": "@@ -413,7 +414,21 @@ public ZTSClient(String ztsUrl, Principal identity) {\n     public ZTSClient(String ztsUrl, SSLContext sslContext) {\n         this(ztsUrl, null, sslContext);\n     }\n-    \n+\n+    /**\n+     * Constructs a new ZTSClient object with the given SSLContext object\n+     * and ZTS Server Url. Default read and connect timeout values are\n+     * 30000ms (30sec). The application can change these values by using the\n+     * athenz.zts.client.read_timeout and athenz.zts.client.connect_timeout\n+     * system properties. The values specified for timeouts must be in milliseconds.\n+     * @param ztsUrl ZTS Server's URL (optional)\n+     * @param sslContext SSLContext that includes service's private key and x.509 certificate\n+     * @param notificationSender If provided, will be used for sending notifications on failures\n+     */\n+    public ZTSClient(String ztsUrl, SSLContext sslContext, ZTSClientNotificationSender notificationSender) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c52c29703cf4c01aca4e539f106ea00b19f031f"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyNzc4Nw==", "bodyText": "we should use final for servrerName to be consistent with other methods.", "url": "https://github.com/AthenZ/athenz/pull/1010#discussion_r442327787", "createdAt": "2020-06-18T15:49:25Z", "author": {"login": "havetisyan"}, "path": "libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/ssh/SSHRecordStore.java", "diffHunk": "@@ -50,4 +52,14 @@\n      *     is for a service as opposed to a role\n      */\n     void log(final Principal principal, final String ip, final String service, final String instanceId);\n+\n+    /**\n+     * Enable notifications to be sent regarding the store health (by supported implementers)\n+     * All arguments must be provided (non-null)\n+     * @param notificationManager\n+     * @param rolesProvider\n+     * @param serverName\n+     * @return true if notifications were enabled successfully\n+     */\n+    boolean enableNotifications(NotificationManager notificationManager, RolesProvider rolesProvider, String serverName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c52c29703cf4c01aca4e539f106ea00b19f031f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyOTk5NA==", "bodyText": "let's make this LOGGER.info since it's useful info and only would happen once.", "url": "https://github.com/AthenZ/athenz/pull/1010#discussion_r442329994", "createdAt": "2020-06-18T15:52:37Z", "author": {"login": "havetisyan"}, "path": "servers/zts/src/main/java/com/yahoo/athenz/zts/cert/InstanceCertManager.java", "diffHunk": "@@ -1000,6 +1002,32 @@ public boolean updateSSHCertRecord(SSHCertRecord certRecord, boolean refresh) {\n         return result;\n     }\n \n+    public boolean enableCertStoreNotifications(NotificationManager notificationManager, RolesProvider rolesProvider, String serverName) {\n+        boolean notificationsEnabled = false;\n+        if (certStore != null) {\n+            notificationsEnabled = certStore.enableNotifications(notificationManager, rolesProvider, serverName);\n+        }\n+\n+        if (LOGGER.isDebugEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c52c29703cf4c01aca4e539f106ea00b19f031f"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMzMDE0Mg==", "bodyText": "same as above, let's make this info", "url": "https://github.com/AthenZ/athenz/pull/1010#discussion_r442330142", "createdAt": "2020-06-18T15:52:50Z", "author": {"login": "havetisyan"}, "path": "servers/zts/src/main/java/com/yahoo/athenz/zts/cert/InstanceCertManager.java", "diffHunk": "@@ -1000,6 +1002,32 @@ public boolean updateSSHCertRecord(SSHCertRecord certRecord, boolean refresh) {\n         return result;\n     }\n \n+    public boolean enableCertStoreNotifications(NotificationManager notificationManager, RolesProvider rolesProvider, String serverName) {\n+        boolean notificationsEnabled = false;\n+        if (certStore != null) {\n+            notificationsEnabled = certStore.enableNotifications(notificationManager, rolesProvider, serverName);\n+        }\n+\n+        if (LOGGER.isDebugEnabled()) {\n+            LOGGER.debug(\"certStore Notifications \" + (notificationsEnabled ? \"enabled\" : \"disabled\"));\n+        }\n+\n+        return notificationsEnabled;\n+    }\n+\n+    public boolean enableSSHStoreNotifications(NotificationManager notificationManager, RolesProvider rolesProvider, String serverName) {\n+        boolean notificationsEnabled = false;\n+        if (sshStore != null) {\n+            notificationsEnabled = sshStore.enableNotifications(notificationManager, rolesProvider, serverName);\n+        }\n+\n+        if (LOGGER.isDebugEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c52c29703cf4c01aca4e539f106ea00b19f031f"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMzMjYyMw==", "bodyText": "this should be also be once so let's make it info.", "url": "https://github.com/AthenZ/athenz/pull/1010#discussion_r442332623", "createdAt": "2020-06-18T15:56:27Z", "author": {"login": "havetisyan"}, "path": "servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/DynamoDBClientFetcher.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ *  Copyright 2020 Verizon Media\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package com.yahoo.athenz.zts.cert.impl;\n+\n+import com.amazonaws.auth.AWSCredentialsProvider;\n+import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;\n+import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClientBuilder;\n+import com.oath.auth.KeyRefresher;\n+import com.oath.auth.Utils;\n+import com.yahoo.athenz.zts.AWSCredentialsProviderImpl;\n+import com.yahoo.athenz.zts.ZTSClientNotificationSender;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.net.ssl.SSLContext;\n+\n+import static com.yahoo.athenz.zts.ZTSConsts.*;\n+\n+public class DynamoDBClientFetcher {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DynamoDBClientFetcher.class);\n+\n+    public AmazonDynamoDB getDynamoDBClient(ZTSClientNotificationSender ztsClientNotificationSender) {\n+        // if we're given key/cert path settings then\n+        // we'll deal with aws temporary credentials otherwise\n+        // we'll assume we're running in aws thus our ec2 already\n+        // has credentials to access dynamodb\n+        DynamoDBClientSettings dynamoDBClientSettings = new DynamoDBClientSettings();\n+\n+        if (dynamoDBClientSettings.areCredentialsProvided()) {\n+            if (LOGGER.isDebugEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c52c29703cf4c01aca4e539f106ea00b19f031f"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMzMjg1OA==", "bodyText": "same as above - let's make it info.", "url": "https://github.com/AthenZ/athenz/pull/1010#discussion_r442332858", "createdAt": "2020-06-18T15:56:49Z", "author": {"login": "havetisyan"}, "path": "servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/DynamoDBClientFetcher.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ *  Copyright 2020 Verizon Media\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package com.yahoo.athenz.zts.cert.impl;\n+\n+import com.amazonaws.auth.AWSCredentialsProvider;\n+import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;\n+import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClientBuilder;\n+import com.oath.auth.KeyRefresher;\n+import com.oath.auth.Utils;\n+import com.yahoo.athenz.zts.AWSCredentialsProviderImpl;\n+import com.yahoo.athenz.zts.ZTSClientNotificationSender;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.net.ssl.SSLContext;\n+\n+import static com.yahoo.athenz.zts.ZTSConsts.*;\n+\n+public class DynamoDBClientFetcher {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DynamoDBClientFetcher.class);\n+\n+    public AmazonDynamoDB getDynamoDBClient(ZTSClientNotificationSender ztsClientNotificationSender) {\n+        // if we're given key/cert path settings then\n+        // we'll deal with aws temporary credentials otherwise\n+        // we'll assume we're running in aws thus our ec2 already\n+        // has credentials to access dynamodb\n+        DynamoDBClientSettings dynamoDBClientSettings = new DynamoDBClientSettings();\n+\n+        if (dynamoDBClientSettings.areCredentialsProvided()) {\n+            if (LOGGER.isDebugEnabled()) {\n+                LOGGER.debug(\"DynamoDB Client will use temporary AWS credentials\");\n+            }\n+            return getAuthenticatedDynamoDBClient(dynamoDBClientSettings, ztsClientNotificationSender);\n+        } else {\n+            if (LOGGER.isDebugEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c52c29703cf4c01aca4e539f106ea00b19f031f"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMzOTcxNg==", "bodyText": "we should not read the password directly from the property even if it's only for the truststore. The factory is given a PrivateKeyStore object that should be used to fetch any passwords. I think we should have some examples in the ZTSUtils class", "url": "https://github.com/AthenZ/athenz/pull/1010#discussion_r442339716", "createdAt": "2020-06-18T16:07:08Z", "author": {"login": "havetisyan"}, "path": "servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/DynamoDBClientFetcher.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ *  Copyright 2020 Verizon Media\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package com.yahoo.athenz.zts.cert.impl;\n+\n+import com.amazonaws.auth.AWSCredentialsProvider;\n+import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;\n+import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClientBuilder;\n+import com.oath.auth.KeyRefresher;\n+import com.oath.auth.Utils;\n+import com.yahoo.athenz.zts.AWSCredentialsProviderImpl;\n+import com.yahoo.athenz.zts.ZTSClientNotificationSender;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.net.ssl.SSLContext;\n+\n+import static com.yahoo.athenz.zts.ZTSConsts.*;\n+\n+public class DynamoDBClientFetcher {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DynamoDBClientFetcher.class);\n+\n+    public AmazonDynamoDB getDynamoDBClient(ZTSClientNotificationSender ztsClientNotificationSender) {\n+        // if we're given key/cert path settings then\n+        // we'll deal with aws temporary credentials otherwise\n+        // we'll assume we're running in aws thus our ec2 already\n+        // has credentials to access dynamodb\n+        DynamoDBClientSettings dynamoDBClientSettings = new DynamoDBClientSettings();\n+\n+        if (dynamoDBClientSettings.areCredentialsProvided()) {\n+            if (LOGGER.isDebugEnabled()) {\n+                LOGGER.debug(\"DynamoDB Client will use temporary AWS credentials\");\n+            }\n+            return getAuthenticatedDynamoDBClient(dynamoDBClientSettings, ztsClientNotificationSender);\n+        } else {\n+            if (LOGGER.isDebugEnabled()) {\n+                LOGGER.debug(\"DynamoDB client will use existing AWS authentication\");\n+            }\n+            if (dynamoDBClientSettings.getRegion().isEmpty()) {\n+                // Use default region\n+                return AmazonDynamoDBClientBuilder.standard().build();\n+            } else {\n+                return AmazonDynamoDBClientBuilder\n+                        .standard()\n+                        .withRegion(dynamoDBClientSettings.getRegion())\n+                        .build();\n+            }\n+        }\n+    }\n+\n+    private AmazonDynamoDB getAuthenticatedDynamoDBClient(DynamoDBClientSettings dynamoDBClientSettings,\n+                                                          ZTSClientNotificationSender ztsClientNotificationSender) {\n+        AWSCredentialsProvider credentialsProvider = getCredentials(dynamoDBClientSettings, ztsClientNotificationSender);\n+        return AmazonDynamoDBClientBuilder.standard()\n+                .withCredentials(credentialsProvider)\n+                .withRegion(dynamoDBClientSettings.getRegion())\n+                .build();\n+    }\n+\n+    private AWSCredentialsProvider getCredentials(DynamoDBClientSettings dynamoDBClientSettings,\n+                                                  ZTSClientNotificationSender ztsClientNotificationSender) {\n+        try {\n+            KeyRefresher keyRefresher = Utils.generateKeyRefresher(\n+                    dynamoDBClientSettings.getTrustStore(),\n+                    dynamoDBClientSettings.getTrustStorePassword(),\n+                    dynamoDBClientSettings.getCertPath(),\n+                    dynamoDBClientSettings.getKeyPath());\n+            keyRefresher.startup();\n+\n+            SSLContext sslContext = Utils.buildSSLContext(keyRefresher.getKeyManagerProxy(),\n+                    keyRefresher.getTrustManagerProxy());\n+\n+            String externalId = System.getProperty(ZTS_PROP_DYNAMODB_EXTERNAL_ID, null);\n+            String minExpiryTimeStr = System.getProperty(ZTS_PROP_DYNAMODB_MIN_EXPIRY_TIME, \"\");\n+            String maxExpiryTimeStr = System.getProperty(ZTS_PROP_DYNAMODB_MAX_EXPIRY_TIME, \"\");\n+            Integer minExpiryTime = minExpiryTimeStr.isEmpty() ? null : Integer.parseInt(minExpiryTimeStr);\n+            Integer maxExpiryTime = maxExpiryTimeStr.isEmpty() ? null : Integer.parseInt(maxExpiryTimeStr);\n+\n+            return new AWSCredentialsProviderImpl(\n+                    dynamoDBClientSettings.getZtsURL(),\n+                    sslContext,\n+                    dynamoDBClientSettings.getDomainName(),\n+                    dynamoDBClientSettings.getRoleName(),\n+                    externalId,\n+                    minExpiryTime,\n+                    maxExpiryTime,\n+                    ztsClientNotificationSender);\n+\n+        } catch (Exception ex) {\n+            LOGGER.error(\"Failed to get AWS Temporary credentials: {}\", ex.getMessage());\n+        }\n+        return null;\n+    }\n+\n+    public static class DynamoDBClientSettings {\n+        private String certPath;\n+        private String domainName;\n+        private String roleName;\n+        private String trustStore;\n+        private String trustStorePassword;\n+        private String ztsURL;\n+        private String region;\n+        private String keyPath;\n+\n+        public DynamoDBClientSettings() {\n+            keyPath = System.getProperty(ZTS_PROP_DYNAMODB_KEY_PATH, \"\");\n+            certPath = System.getProperty(ZTS_PROP_DYNAMODB_CERT_PATH, \"\");\n+            domainName = System.getProperty(ZTS_PROP_DYNAMODB_DOMAIN, \"\");\n+            roleName = System.getProperty(ZTS_PROP_DYNAMODB_ROLE, \"\");\n+            trustStore = System.getProperty(ZTS_PROP_DYNAMODB_TRUSTSTORE, \"\");\n+            region = System.getProperty(ZTS_PROP_DYNAMODB_REGION, \"\");\n+            trustStorePassword = System.getProperty(ZTS_PROP_DYNAMODB_TRUSTSTORE_PASSWORD, \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c52c29703cf4c01aca4e539f106ea00b19f031f"}, "originalPosition": 125}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0c52c29703cf4c01aca4e539f106ea00b19f031f", "author": {"user": {"login": "OferLevi85", "name": "Ofer Levi"}}, "url": "https://github.com/AthenZ/athenz/commit/0c52c29703cf4c01aca4e539f106ea00b19f031f", "committedDate": "2020-06-17T02:00:47Z", "message": "Provide AWS Temp credentials for ZTS connection to DynamoDB\nAnd enable notifications for failures"}, "afterCommit": {"oid": "22ca3e28b05044788651b94b3bbcd3a4d15d2aed", "author": {"user": {"login": "OferLevi85", "name": "Ofer Levi"}}, "url": "https://github.com/AthenZ/athenz/commit/22ca3e28b05044788651b94b3bbcd3a4d15d2aed", "committedDate": "2020-06-22T12:34:04Z", "message": "Provide AWS Temp credentials for ZTS connection to DynamoDB\nAnd enable notifications for failures"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "22ca3e28b05044788651b94b3bbcd3a4d15d2aed", "author": {"user": {"login": "OferLevi85", "name": "Ofer Levi"}}, "url": "https://github.com/AthenZ/athenz/commit/22ca3e28b05044788651b94b3bbcd3a4d15d2aed", "committedDate": "2020-06-22T12:34:04Z", "message": "Provide AWS Temp credentials for ZTS connection to DynamoDB\nAnd enable notifications for failures"}, "afterCommit": {"oid": "0ca0d8ae1688e717a3be118ed9da7e6cfef13d99", "author": {"user": {"login": "OferLevi85", "name": "Ofer Levi"}}, "url": "https://github.com/AthenZ/athenz/commit/0ca0d8ae1688e717a3be118ed9da7e6cfef13d99", "committedDate": "2020-06-23T07:38:29Z", "message": "Provide AWS Temp credentials for ZTS connection to DynamoDB\nAnd enable notifications for failures"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bef7ddb3caa7ec5224815bd03bac3d39fd833e28", "author": {"user": {"login": "OferLevi85", "name": "Ofer Levi"}}, "url": "https://github.com/AthenZ/athenz/commit/bef7ddb3caa7ec5224815bd03bac3d39fd833e28", "committedDate": "2020-06-24T11:14:23Z", "message": "Provide AWS Temp credentials for ZTS connection to DynamoDB\nAnd enable notifications for failures"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0ca0d8ae1688e717a3be118ed9da7e6cfef13d99", "author": {"user": {"login": "OferLevi85", "name": "Ofer Levi"}}, "url": "https://github.com/AthenZ/athenz/commit/0ca0d8ae1688e717a3be118ed9da7e6cfef13d99", "committedDate": "2020-06-23T07:38:29Z", "message": "Provide AWS Temp credentials for ZTS connection to DynamoDB\nAnd enable notifications for failures"}, "afterCommit": {"oid": "bef7ddb3caa7ec5224815bd03bac3d39fd833e28", "author": {"user": {"login": "OferLevi85", "name": "Ofer Levi"}}, "url": "https://github.com/AthenZ/athenz/commit/bef7ddb3caa7ec5224815bd03bac3d39fd833e28", "committedDate": "2020-06-24T11:14:23Z", "message": "Provide AWS Temp credentials for ZTS connection to DynamoDB\nAnd enable notifications for failures"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5NDQyNjMy", "url": "https://github.com/AthenZ/athenz/pull/1010#pullrequestreview-439442632", "createdAt": "2020-06-29T19:37:07Z", "commit": {"oid": "bef7ddb3caa7ec5224815bd03bac3d39fd833e28"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2976, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}