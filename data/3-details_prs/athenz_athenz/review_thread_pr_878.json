{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczMTA1Nzkz", "number": 878, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzoxODoyOVrODeibnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzoxODoyOVrODeibnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMzQ3OTk2OnYy", "diffSide": "RIGHT", "path": "servers/zms/src/main/java/com/yahoo/athenz/zms/NotificationManager.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzoxODoyOVrOFnul4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMjoxNjo1MlrOFn3muQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIwMjE0Nw==", "bodyText": "while the logic is correct, I don't want us to carry out additional work if not necessary. e.g. if the principal is not user there is no reason for us to check the expiry (it's just a wasted operation).\nwe should have logic implemented like this:\nif (!roleMember.getMemberName().startsWith(userDomainPrefix)) {\nreturn false;\n}\nreturn (roleMember.getExpiration() == null) || (roleMember.getExpiration().millis() > System.currentTimeMillis());", "url": "https://github.com/AthenZ/athenz/pull/878#discussion_r377202147", "createdAt": "2020-02-10T17:18:29Z", "author": {"login": "havetisyan"}, "path": "servers/zms/src/main/java/com/yahoo/athenz/zms/NotificationManager.java", "diffHunk": "@@ -145,13 +145,19 @@ void addDomainRoleRecipients(Notification notification, final String domainName,\n         for (Role role : domain.getRoles()) {\n             if (role.getName().equals(roleName)) {\n                 notification.getRecipients().addAll(role.getRoleMembers().stream()\n-                        .filter(m -> m.getMemberName().startsWith(userDomainPrefix))\n+                        .filter(this::isUnexpiredUser)\n                         .map(RoleMember::getMemberName).collect(Collectors.toSet()));\n                 return;\n             }\n         }\n     }\n \n+    private boolean isUnexpiredUser(RoleMember roleMember) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69ba2374dcefec8fd7700a5ca9d8f505da53cae0"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMwNzU3Mw==", "bodyText": "Thanks for the review I'll fix it shortly.\nI do want to provide an explanation as to why I did it this way (as I considered the option of returning early if possible). I thought that the extra operation is acceptable as the first check that compares characters is already quite expensive and it won't make a noticeable difference. Readability seemed like the bigger concern so I tried to minimize the number of return statements in the function (as mentioned in \"Code Complete\"). If this extra operation is expensive though, instead of calling System.currentTimeMiils() in each iteration, I can get the current time as a parameter so it will only be calculated once (this will also have some effect on readability). What do you think?", "url": "https://github.com/AthenZ/athenz/pull/878#discussion_r377307573", "createdAt": "2020-02-10T20:48:26Z", "author": {"login": "OferLevi85"}, "path": "servers/zms/src/main/java/com/yahoo/athenz/zms/NotificationManager.java", "diffHunk": "@@ -145,13 +145,19 @@ void addDomainRoleRecipients(Notification notification, final String domainName,\n         for (Role role : domain.getRoles()) {\n             if (role.getName().equals(roleName)) {\n                 notification.getRecipients().addAll(role.getRoleMembers().stream()\n-                        .filter(m -> m.getMemberName().startsWith(userDomainPrefix))\n+                        .filter(this::isUnexpiredUser)\n                         .map(RoleMember::getMemberName).collect(Collectors.toSet()));\n                 return;\n             }\n         }\n     }\n \n+    private boolean isUnexpiredUser(RoleMember roleMember) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIwMjE0Nw=="}, "originalCommit": {"oid": "69ba2374dcefec8fd7700a5ca9d8f505da53cae0"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMzNDY1MQ==", "bodyText": "The problem is not with the System.currentTimeMiils but rather with the Timestamp object from rdl. Take a look at that class's millis implementation (if it hasn't been done before, it actually parses the full string to get a date object and then returns the getTime method - not that efficient so we should try to avoid that as much as possible. if you want to minimize the return statements then you can just combine the values with && in the return - the jdk should optimize the call and not call the second part of the && if the first is already false - something like:\nboolean isUser = roleMember.getMemberName().startsWith(userDomainPrefix);\nreturn (isUser && ((roleMember.getExpiration() == null) || (roleMember.getExpiration().millis() > System.currentTimeMillis())));", "url": "https://github.com/AthenZ/athenz/pull/878#discussion_r377334651", "createdAt": "2020-02-10T21:44:37Z", "author": {"login": "havetisyan"}, "path": "servers/zms/src/main/java/com/yahoo/athenz/zms/NotificationManager.java", "diffHunk": "@@ -145,13 +145,19 @@ void addDomainRoleRecipients(Notification notification, final String domainName,\n         for (Role role : domain.getRoles()) {\n             if (role.getName().equals(roleName)) {\n                 notification.getRecipients().addAll(role.getRoleMembers().stream()\n-                        .filter(m -> m.getMemberName().startsWith(userDomainPrefix))\n+                        .filter(this::isUnexpiredUser)\n                         .map(RoleMember::getMemberName).collect(Collectors.toSet()));\n                 return;\n             }\n         }\n     }\n \n+    private boolean isUnexpiredUser(RoleMember roleMember) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIwMjE0Nw=="}, "originalCommit": {"oid": "69ba2374dcefec8fd7700a5ca9d8f505da53cae0"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM0OTgxNw==", "bodyText": "I wasn't aware of the work done in the rdl to get normalizedMillis. Thanks for pointing it out! Regarding the return statements, I think that it is best to leave it as you first suggested as the full boolean statement with the added parentheses is harder to read then viewing the 2 statements separately.", "url": "https://github.com/AthenZ/athenz/pull/878#discussion_r377349817", "createdAt": "2020-02-10T22:16:52Z", "author": {"login": "OferLevi85"}, "path": "servers/zms/src/main/java/com/yahoo/athenz/zms/NotificationManager.java", "diffHunk": "@@ -145,13 +145,19 @@ void addDomainRoleRecipients(Notification notification, final String domainName,\n         for (Role role : domain.getRoles()) {\n             if (role.getName().equals(roleName)) {\n                 notification.getRecipients().addAll(role.getRoleMembers().stream()\n-                        .filter(m -> m.getMemberName().startsWith(userDomainPrefix))\n+                        .filter(this::isUnexpiredUser)\n                         .map(RoleMember::getMemberName).collect(Collectors.toSet()));\n                 return;\n             }\n         }\n     }\n \n+    private boolean isUnexpiredUser(RoleMember roleMember) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIwMjE0Nw=="}, "originalCommit": {"oid": "69ba2374dcefec8fd7700a5ca9d8f505da53cae0"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1726, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}