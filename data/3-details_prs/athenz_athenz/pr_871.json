{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4ODUzMTUz", "number": 871, "title": "review-enabled option for roles", "bodyText": "using same workflow as the audit enabled domain but this one allows the domain admins themselves to set roles for review.\n\nI confirm that this contribution is made under the terms of the license found in the root directory of this repository's source tree and that I have the authority necessary to make this contribution on behalf of its copyright owner.", "createdAt": "2020-01-30T02:02:53Z", "url": "https://github.com/AthenZ/athenz/pull/871", "merged": true, "mergeCommit": {"oid": "0d26b778c181f473af04b07cb23ea54fe84ae290"}, "closed": true, "closedAt": "2020-01-30T22:18:42Z", "author": {"login": "havetisyan"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb_QujKgH2gAyMzY4ODUzMTUzOjU1ZjhiY2NiZTAzNTBlYTUxMGI0YmNhYTI0MTJjYTQ0ODE2ZDVjZmY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb_hUSVgFqTM1MTE0OTk2Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "55f8bccbe0350ea510b4bcaa2412ca44816d5cff", "author": {"user": null}, "url": "https://github.com/AthenZ/athenz/commit/55f8bccbe0350ea510b4bcaa2412ca44816d5cff", "committedDate": "2020-01-30T02:01:29Z", "message": "review-enabled option for roles"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxMDU5ODY3", "url": "https://github.com/AthenZ/athenz/pull/871#pullrequestreview-351059867", "createdAt": "2020-01-30T18:51:54Z", "commit": {"oid": "55f8bccbe0350ea510b4bcaa2412ca44816d5cff"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxODo1MTo1NFrOFj2BDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxOToyODoyMVrOFj3J6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzEyOTQ4Ng==", "bodyText": "typo - set-role-revuew-enabled", "url": "https://github.com/AthenZ/athenz/pull/871#discussion_r373129486", "createdAt": "2020-01-30T18:51:54Z", "author": {"login": "abvaidya"}, "path": "libs/go/zmscli/cli.go", "diffHunk": "@@ -1874,12 +1908,14 @@ func (cli Zms) HelpListCommand() string {\n \tbuf.WriteString(\"   delete-domain-role-member member\\n\")\n \tbuf.WriteString(\"   delete-role role\\n\")\n \tbuf.WriteString(\"   set-role-audit-enabled group_role audit-enabled\\n\")\n+\tbuf.WriteString(\"   set-role-revuew-enabled group_role review-enabled\\n\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55f8bccbe0350ea510b4bcaa2412ca44816d5cff"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE0NzIzMg==", "bodyText": "typo. going", "url": "https://github.com/AthenZ/athenz/pull/871#discussion_r373147232", "createdAt": "2020-01-30T19:26:29Z", "author": {"login": "abvaidya"}, "path": "servers/zms/src/main/java/com/yahoo/athenz/zms/ZMSImpl.java", "diffHunk": "@@ -6505,7 +6522,13 @@ void addDefaultAdminAssertion(ResourceContext ctx, String domainName, Policy adm\n         if (LOG.isInfoEnabled()) {\n             LOG.info(\"Adding default admin assertion to admin policy because no default admin assertion was found for admin policy for domain: \" + domainName);\n         }\n-        \n+\n+        // if we had invalid assertions then we're gonig to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55f8bccbe0350ea510b4bcaa2412ca44816d5cff"}, "originalPosition": 2335}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE0ODEzOQ==", "bodyText": "need to pass argument principal.getFullName() to LOG.error", "url": "https://github.com/AthenZ/athenz/pull/871#discussion_r373148139", "createdAt": "2020-01-30T19:28:21Z", "author": {"login": "abvaidya"}, "path": "servers/zms/src/main/java/com/yahoo/athenz/zms/ZMSImpl.java", "diffHunk": "@@ -7087,14 +7111,43 @@ public void putMembershipDecision(ResourceContext ctx, String domainName, String\n     }\n \n     private boolean isAllowedPutMembershipDecision(final Principal principal, final AthenzDomain domain,\n-            final Role role) {\n+            final Role role, final RoleMember roleMember, final String caller) {\n+\n+        // if this is an audit enabled domain then we're going to carry\n+        // out the authorization in the sys.auth.audit domains\n \n         if (role.getAuditEnabled() == Boolean.TRUE) {\n-            // check authorization in sys.auth.audit domains\n             return isAllowedAuditRoleMembershipApproval(principal, domain);\n-        } else {\n-            return isAllowedPutMembershipAccess(principal, domain, role);\n         }\n+\n+        // otherwise we're going to do a standard check if the principal\n+        // is authorized to update the domain role membership\n+\n+        boolean allowed = isAllowedPutMembershipAccess(principal, domain, role);\n+\n+        // if the user is allowed to make changes in the domain but\n+        // the role is review enabled then we need to make sure\n+        // the approver cannot be the same as the requester\n+\n+        if (allowed && role.getReviewEnabled() == Boolean.TRUE) {\n+\n+            Membership pendingMember = dbService.getMembership(domain.getName(),\n+                    ZMSUtils.extractRoleName(domain.getName(), role.getName()),\n+                    roleMember.getMemberName(), 0, true);\n+\n+            // if the member is not found then we're going to throw a not found exception\n+\n+            if (!pendingMember.getIsMember()) {\n+                throw ZMSUtils.notFoundError(\"Pending member \" + roleMember.getMemberName() + \" not found\", caller);\n+            }\n+\n+            if (pendingMember.getRequestPrincipal().equalsIgnoreCase(principal.getFullName())) {\n+                LOG.error(\"Principal {} cannot approve his/her own request\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55f8bccbe0350ea510b4bcaa2412ca44816d5cff"}, "originalPosition": 2420}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43d4dcd1a9442c69349a81233b89af5b589fa3b6", "author": {"user": null}, "url": "https://github.com/AthenZ/athenz/commit/43d4dcd1a9442c69349a81233b89af5b589fa3b6", "committedDate": "2020-01-30T20:12:44Z", "message": "address review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxMTQ5OTYz", "url": "https://github.com/AthenZ/athenz/pull/871#pullrequestreview-351149963", "createdAt": "2020-01-30T21:21:11Z", "commit": {"oid": "43d4dcd1a9442c69349a81233b89af5b589fa3b6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3117, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}