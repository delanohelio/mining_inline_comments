{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3NzI5MTUy", "number": 1157, "title": "system disabled state for principals ", "bodyText": "I confirm that this contribution is made under the terms of the license found in the root directory of this repository's source tree and that I have the authority necessary to make this contribution on behalf of its copyright owner.", "createdAt": "2020-10-21T17:25:34Z", "url": "https://github.com/AthenZ/athenz/pull/1157", "merged": true, "mergeCommit": {"oid": "e34ebcf544293ebd1aafd5474dae1c59105bf8a7"}, "closed": true, "closedAt": "2020-10-25T21:31:41Z", "author": {"login": "abvaidya"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdUnaMrAH2gAyNTA3NzI5MTUyOjRiNDQ3NjBjOWE1MmY4YjgzM2E5MTcxYTU2OTUwYzJhZWUyNDc0YmM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdWGsSBAFqTUxNjM5ODgwNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4b44760c9a52f8b833a9171a56950c2aee2474bc", "author": {"user": null}, "url": "https://github.com/AthenZ/athenz/commit/4b44760c9a52f8b833a9171a56950c2aee2474bc", "committedDate": "2020-10-21T06:30:38Z", "message": "system disabled state for principals"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "804c5dd98652af04684fa59d13cf31230a661fe0", "author": {"user": null}, "url": "https://github.com/AthenZ/athenz/commit/804c5dd98652af04684fa59d13cf31230a661fe0", "committedDate": "2020-10-21T16:44:45Z", "message": "adding a config property to start principal state updater"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45b271a460205ef873d48d4247128daa43779d54", "author": {"user": null}, "url": "https://github.com/AthenZ/athenz/commit/45b271a460205ef873d48d4247128daa43779d54", "committedDate": "2020-10-21T18:41:09Z", "message": "switching travis log level back to ERROR"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1MTA3OTk0", "url": "https://github.com/AthenZ/athenz/pull/1157#pullrequestreview-515107994", "createdAt": "2020-10-22T20:50:14Z", "commit": {"oid": "45b271a460205ef873d48d4247128daa43779d54"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDo1MDoxNFrOHmzTVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMjowMDoxMFrOHm1ZbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ0ODQ2OQ==", "bodyText": "somewhat confusing to call this bit as system disabled since the full attribute with combined bits is also called system disabled. So maybe we should call this bit suspended since that's what we're implementing.", "url": "https://github.com/AthenZ/athenz/pull/1157#discussion_r510448469", "createdAt": "2020-10-22T20:50:14Z", "author": {"login": "havetisyan"}, "path": "libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/Principal.java", "diffHunk": "@@ -49,6 +49,31 @@ public static Type getType(int value) {\n         }\n     }\n \n+    /**\n+     * Principal state - active, authority filter disabled or authority system disabled\n+     */\n+    enum State {\n+        ACTIVE(0x00),\n+        AUTHORITY_FILTER_DISABLED(0x01),\n+        AUTHORITY_SYSTEM_DISABLED(0x02);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45b271a460205ef873d48d4247128daa43779d54"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ0OTIzMA==", "bodyText": "consider calling this field as suspended as well.", "url": "https://github.com/AthenZ/athenz/pull/1157#discussion_r510449230", "createdAt": "2020-10-22T20:51:32Z", "author": {"login": "havetisyan"}, "path": "servers/zms/schema/updates/update-20201019.sql", "diffHunk": "@@ -0,0 +1 @@\n+ALTER TABLE `zms_server`.`principal` ADD `system_disabled` INT UNSIGNED NOT NULL DEFAULT 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45b271a460205ef873d48d4247128daa43779d54"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ1MDAxNw==", "bodyText": "since the queriedState does not change we should get the value outside of the for loop so we can call the method once and not for every principal in the list", "url": "https://github.com/AthenZ/athenz/pull/1157#discussion_r510450017", "createdAt": "2020-10-22T20:52:59Z", "author": {"login": "havetisyan"}, "path": "servers/zms/src/main/java/com/yahoo/athenz/zms/DBService.java", "diffHunk": "@@ -6402,6 +6403,147 @@ void enforceGroupUserAuthorityRestrictions(final String domainName, final String\n         }\n     }\n \n+    /**\n+     * This method returns list of Principals based on the state parameter supplied\n+     * @param queriedState state of principal\n+     * @return List of Principals from DB\n+     */\n+    List<Principal> getPrincipals(int queriedState) {\n+        List<Principal> principals = new ArrayList<>();\n+        Principal principal;\n+        try (ObjectStoreConnection con = store.getConnection(true, false)) {\n+           List<String> dbPrincipals = con.getPrincipals(queriedState);\n+           for (String dbPrincipal : dbPrincipals) {\n+               principal = ZMSUtils.createPrincipalForName(dbPrincipal, zmsConfig.getUserDomain(), null);\n+               ((SimplePrincipal) principal).setState(Principal.State.getState(queriedState));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45b271a460205ef873d48d4247128daa43779d54"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ2NzY0OA==", "bodyText": "complexity of this method seems to me is big so not sure if we have full test coverage. Please run clover and make sure this method is fully covered. I would suggest breaking up into smaller function since then it's easier to mock the tests for edge cases.", "url": "https://github.com/AthenZ/athenz/pull/1157#discussion_r510467648", "createdAt": "2020-10-22T21:26:46Z", "author": {"login": "havetisyan"}, "path": "servers/zms/src/main/java/com/yahoo/athenz/zms/DBService.java", "diffHunk": "@@ -6402,6 +6403,147 @@ void enforceGroupUserAuthorityRestrictions(final String domainName, final String\n         }\n     }\n \n+    /**\n+     * This method returns list of Principals based on the state parameter supplied\n+     * @param queriedState state of principal\n+     * @return List of Principals from DB\n+     */\n+    List<Principal> getPrincipals(int queriedState) {\n+        List<Principal> principals = new ArrayList<>();\n+        Principal principal;\n+        try (ObjectStoreConnection con = store.getConnection(true, false)) {\n+           List<String> dbPrincipals = con.getPrincipals(queriedState);\n+           for (String dbPrincipal : dbPrincipals) {\n+               principal = ZMSUtils.createPrincipalForName(dbPrincipal, zmsConfig.getUserDomain(), null);\n+               ((SimplePrincipal) principal).setState(Principal.State.getState(queriedState));\n+               principals.add(principal);\n+           }\n+        }\n+        return principals;\n+    }\n+\n+    /**\n+     * This method toggles state for supplied Principals based on the flag in DB\n+     * as well as modifies memberships of all roles and groups of current principal(s)\n+     * @param changedPrincipals List of Principals from User Authority\n+     * @param newState new state {@link Principal.State}\n+     */\n+    void updatePrincipalBasedOnAuthorityState(List<Principal> changedPrincipals, Principal.State newState) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45b271a460205ef873d48d4247128daa43779d54"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ2ODYzNg==", "bodyText": "we should check if our list is not empty before doing anything at the beginning of the method otherwise we're just wasting get sql connection.", "url": "https://github.com/AthenZ/athenz/pull/1157#discussion_r510468636", "createdAt": "2020-10-22T21:28:56Z", "author": {"login": "havetisyan"}, "path": "servers/zms/src/main/java/com/yahoo/athenz/zms/DBService.java", "diffHunk": "@@ -6402,6 +6403,147 @@ void enforceGroupUserAuthorityRestrictions(final String domainName, final String\n         }\n     }\n \n+    /**\n+     * This method returns list of Principals based on the state parameter supplied\n+     * @param queriedState state of principal\n+     * @return List of Principals from DB\n+     */\n+    List<Principal> getPrincipals(int queriedState) {\n+        List<Principal> principals = new ArrayList<>();\n+        Principal principal;\n+        try (ObjectStoreConnection con = store.getConnection(true, false)) {\n+           List<String> dbPrincipals = con.getPrincipals(queriedState);\n+           for (String dbPrincipal : dbPrincipals) {\n+               principal = ZMSUtils.createPrincipalForName(dbPrincipal, zmsConfig.getUserDomain(), null);\n+               ((SimplePrincipal) principal).setState(Principal.State.getState(queriedState));\n+               principals.add(principal);\n+           }\n+        }\n+        return principals;\n+    }\n+\n+    /**\n+     * This method toggles state for supplied Principals based on the flag in DB\n+     * as well as modifies memberships of all roles and groups of current principal(s)\n+     * @param changedPrincipals List of Principals from User Authority\n+     * @param newState new state {@link Principal.State}\n+     */\n+    void updatePrincipalBasedOnAuthorityState(List<Principal> changedPrincipals, Principal.State newState) {\n+        final String caller = \"updateMembershipBasedOnUserState\";\n+        List<Principal> updatedUsers = new ArrayList<>();\n+        try (ObjectStoreConnection con = store.getConnection(true, true)) {\n+\n+            // first lets update the new state in DB\n+            for (Principal changedPrincipal : changedPrincipals) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45b271a460205ef873d48d4247128daa43779d54"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ3MDMzMw==", "bodyText": "not sure why we have this switch block. the newState is passed in so no need to check what it is. it should be something like:\nif (con.updatePrincipal(changedPrincipal.getFullName(), newState.getValue())) {\nupdatedUsers.add(changedPrincipal);\n}", "url": "https://github.com/AthenZ/athenz/pull/1157#discussion_r510470333", "createdAt": "2020-10-22T21:32:16Z", "author": {"login": "havetisyan"}, "path": "servers/zms/src/main/java/com/yahoo/athenz/zms/DBService.java", "diffHunk": "@@ -6402,6 +6403,147 @@ void enforceGroupUserAuthorityRestrictions(final String domainName, final String\n         }\n     }\n \n+    /**\n+     * This method returns list of Principals based on the state parameter supplied\n+     * @param queriedState state of principal\n+     * @return List of Principals from DB\n+     */\n+    List<Principal> getPrincipals(int queriedState) {\n+        List<Principal> principals = new ArrayList<>();\n+        Principal principal;\n+        try (ObjectStoreConnection con = store.getConnection(true, false)) {\n+           List<String> dbPrincipals = con.getPrincipals(queriedState);\n+           for (String dbPrincipal : dbPrincipals) {\n+               principal = ZMSUtils.createPrincipalForName(dbPrincipal, zmsConfig.getUserDomain(), null);\n+               ((SimplePrincipal) principal).setState(Principal.State.getState(queriedState));\n+               principals.add(principal);\n+           }\n+        }\n+        return principals;\n+    }\n+\n+    /**\n+     * This method toggles state for supplied Principals based on the flag in DB\n+     * as well as modifies memberships of all roles and groups of current principal(s)\n+     * @param changedPrincipals List of Principals from User Authority\n+     * @param newState new state {@link Principal.State}\n+     */\n+    void updatePrincipalBasedOnAuthorityState(List<Principal> changedPrincipals, Principal.State newState) {\n+        final String caller = \"updateMembershipBasedOnUserState\";\n+        List<Principal> updatedUsers = new ArrayList<>();\n+        try (ObjectStoreConnection con = store.getConnection(true, true)) {\n+\n+            // first lets update the new state in DB\n+            for (Principal changedPrincipal : changedPrincipals) {\n+                try {\n+                    switch (newState) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45b271a460205ef873d48d4247128daa43779d54"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ3NzQ5OA==", "bodyText": "this doesn't look correct to me. since ACTIVE itself is not a state bit I don't think we can use it as is. in this method we're either setting or removing the SUSPENDED bit", "url": "https://github.com/AthenZ/athenz/pull/1157#discussion_r510477498", "createdAt": "2020-10-22T21:47:43Z", "author": {"login": "havetisyan"}, "path": "servers/zms/src/main/java/com/yahoo/athenz/zms/DBService.java", "diffHunk": "@@ -6402,6 +6403,147 @@ void enforceGroupUserAuthorityRestrictions(final String domainName, final String\n         }\n     }\n \n+    /**\n+     * This method returns list of Principals based on the state parameter supplied\n+     * @param queriedState state of principal\n+     * @return List of Principals from DB\n+     */\n+    List<Principal> getPrincipals(int queriedState) {\n+        List<Principal> principals = new ArrayList<>();\n+        Principal principal;\n+        try (ObjectStoreConnection con = store.getConnection(true, false)) {\n+           List<String> dbPrincipals = con.getPrincipals(queriedState);\n+           for (String dbPrincipal : dbPrincipals) {\n+               principal = ZMSUtils.createPrincipalForName(dbPrincipal, zmsConfig.getUserDomain(), null);\n+               ((SimplePrincipal) principal).setState(Principal.State.getState(queriedState));\n+               principals.add(principal);\n+           }\n+        }\n+        return principals;\n+    }\n+\n+    /**\n+     * This method toggles state for supplied Principals based on the flag in DB\n+     * as well as modifies memberships of all roles and groups of current principal(s)\n+     * @param changedPrincipals List of Principals from User Authority\n+     * @param newState new state {@link Principal.State}\n+     */\n+    void updatePrincipalBasedOnAuthorityState(List<Principal> changedPrincipals, Principal.State newState) {\n+        final String caller = \"updateMembershipBasedOnUserState\";\n+        List<Principal> updatedUsers = new ArrayList<>();\n+        try (ObjectStoreConnection con = store.getConnection(true, true)) {\n+\n+            // first lets update the new state in DB\n+            for (Principal changedPrincipal : changedPrincipals) {\n+                try {\n+                    switch (newState) {\n+                        case ACTIVE:\n+                            if (con.updatePrincipal(changedPrincipal.getFullName(), Principal.State.ACTIVE.getValue())) {\n+                                updatedUsers.add(changedPrincipal);\n+                            }\n+                            break;\n+                        case AUTHORITY_SYSTEM_DISABLED:\n+                            if (con.updatePrincipal(changedPrincipal.getFullName(), Principal.State.AUTHORITY_SYSTEM_DISABLED.getValue())) {\n+                                updatedUsers.add(changedPrincipal);\n+                            }\n+                            break;\n+                        default:\n+                            break;\n+                    }\n+                } catch (ResourceException ex) {\n+                    if (ex.getCode() == ResourceException.NOT_FOUND) {\n+                        continue;\n+                    }\n+                    throw ex;\n+                }\n+            }\n+            // if new state is updated successfully\n+            // then we need to modify all roles and groups where given principal is member of\n+            if (!updatedUsers.isEmpty()) {\n+\n+                DomainRoleMember domainRoleMember;\n+                DomainGroupMember domainGroupMember;\n+                RoleMember roleMember;\n+                GroupMember groupMember;\n+                List<RoleMember> roleMembersWithUpdatedState;\n+                List<GroupMember> groupMembersWithUpdatedState;\n+                for (Principal updatedUser : updatedUsers) {\n+                    try {\n+                        // get all roles from all domains\n+                        domainRoleMember = con.getPrincipalRoles(updatedUser.getFullName(), null);\n+                        if (!domainRoleMember.getMemberRoles().isEmpty()) {\n+                            for (MemberRole memberRole : domainRoleMember.getMemberRoles()) {\n+                                roleMember = new RoleMember();\n+                                roleMember.setMemberName(updatedUser.getFullName());\n+                                switch (newState) {\n+                                    case ACTIVE:\n+                                        // if new state is ACTIVE then revert back to previous state for the member\n+                                        roleMember.setSystemDisabled(memberRole.getSystemDisabled() & ~newState.getValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45b271a460205ef873d48d4247128daa43779d54"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ3ODYxMA==", "bodyText": "since we might get lots of matches from the same domain (typically a user is included in smaller number of domains in lots of roles), we should probably keep track of domains in a set and then update the set at the end so that each domain is only updated once instead of multiple db calls.", "url": "https://github.com/AthenZ/athenz/pull/1157#discussion_r510478610", "createdAt": "2020-10-22T21:50:20Z", "author": {"login": "havetisyan"}, "path": "servers/zms/src/main/java/com/yahoo/athenz/zms/DBService.java", "diffHunk": "@@ -6402,6 +6403,147 @@ void enforceGroupUserAuthorityRestrictions(final String domainName, final String\n         }\n     }\n \n+    /**\n+     * This method returns list of Principals based on the state parameter supplied\n+     * @param queriedState state of principal\n+     * @return List of Principals from DB\n+     */\n+    List<Principal> getPrincipals(int queriedState) {\n+        List<Principal> principals = new ArrayList<>();\n+        Principal principal;\n+        try (ObjectStoreConnection con = store.getConnection(true, false)) {\n+           List<String> dbPrincipals = con.getPrincipals(queriedState);\n+           for (String dbPrincipal : dbPrincipals) {\n+               principal = ZMSUtils.createPrincipalForName(dbPrincipal, zmsConfig.getUserDomain(), null);\n+               ((SimplePrincipal) principal).setState(Principal.State.getState(queriedState));\n+               principals.add(principal);\n+           }\n+        }\n+        return principals;\n+    }\n+\n+    /**\n+     * This method toggles state for supplied Principals based on the flag in DB\n+     * as well as modifies memberships of all roles and groups of current principal(s)\n+     * @param changedPrincipals List of Principals from User Authority\n+     * @param newState new state {@link Principal.State}\n+     */\n+    void updatePrincipalBasedOnAuthorityState(List<Principal> changedPrincipals, Principal.State newState) {\n+        final String caller = \"updateMembershipBasedOnUserState\";\n+        List<Principal> updatedUsers = new ArrayList<>();\n+        try (ObjectStoreConnection con = store.getConnection(true, true)) {\n+\n+            // first lets update the new state in DB\n+            for (Principal changedPrincipal : changedPrincipals) {\n+                try {\n+                    switch (newState) {\n+                        case ACTIVE:\n+                            if (con.updatePrincipal(changedPrincipal.getFullName(), Principal.State.ACTIVE.getValue())) {\n+                                updatedUsers.add(changedPrincipal);\n+                            }\n+                            break;\n+                        case AUTHORITY_SYSTEM_DISABLED:\n+                            if (con.updatePrincipal(changedPrincipal.getFullName(), Principal.State.AUTHORITY_SYSTEM_DISABLED.getValue())) {\n+                                updatedUsers.add(changedPrincipal);\n+                            }\n+                            break;\n+                        default:\n+                            break;\n+                    }\n+                } catch (ResourceException ex) {\n+                    if (ex.getCode() == ResourceException.NOT_FOUND) {\n+                        continue;\n+                    }\n+                    throw ex;\n+                }\n+            }\n+            // if new state is updated successfully\n+            // then we need to modify all roles and groups where given principal is member of\n+            if (!updatedUsers.isEmpty()) {\n+\n+                DomainRoleMember domainRoleMember;\n+                DomainGroupMember domainGroupMember;\n+                RoleMember roleMember;\n+                GroupMember groupMember;\n+                List<RoleMember> roleMembersWithUpdatedState;\n+                List<GroupMember> groupMembersWithUpdatedState;\n+                for (Principal updatedUser : updatedUsers) {\n+                    try {\n+                        // get all roles from all domains\n+                        domainRoleMember = con.getPrincipalRoles(updatedUser.getFullName(), null);\n+                        if (!domainRoleMember.getMemberRoles().isEmpty()) {\n+                            for (MemberRole memberRole : domainRoleMember.getMemberRoles()) {\n+                                roleMember = new RoleMember();\n+                                roleMember.setMemberName(updatedUser.getFullName());\n+                                switch (newState) {\n+                                    case ACTIVE:\n+                                        // if new state is ACTIVE then revert back to previous state for the member\n+                                        roleMember.setSystemDisabled(memberRole.getSystemDisabled() & ~newState.getValue());\n+                                        break;\n+                                    case AUTHORITY_SYSTEM_DISABLED:\n+                                        // if new state is SYSTEM_DISABLED then add it on to existing state\n+                                        roleMember.setSystemDisabled(memberRole.getSystemDisabled() | newState.getValue());\n+                                        break;\n+                                    default:\n+                                        break;\n+                                }\n+                                roleMembersWithUpdatedState = new ArrayList<>();\n+                                roleMembersWithUpdatedState.add(roleMember);\n+\n+                                // Following method does Audit entry as well\n+                                if (updateRoleMemberDisabledState(null, con, roleMembersWithUpdatedState, memberRole.getDomainName(),\n+                                        memberRole.getRoleName(), ZMSConsts.SYS_AUTH_MONITOR, AUDIT_REF, caller)) {\n+\n+                                    // update our role and domain time-stamps, and invalidate local cache entry\n+                                    con.updateRoleModTimestamp(memberRole.getDomainName(), memberRole.getRoleName());\n+                                    con.updateDomainModTimestamp(memberRole.getDomainName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45b271a460205ef873d48d4247128daa43779d54"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ3ODg1Mg==", "bodyText": "same comments as roles", "url": "https://github.com/AthenZ/athenz/pull/1157#discussion_r510478852", "createdAt": "2020-10-22T21:50:54Z", "author": {"login": "havetisyan"}, "path": "servers/zms/src/main/java/com/yahoo/athenz/zms/DBService.java", "diffHunk": "@@ -6402,6 +6403,147 @@ void enforceGroupUserAuthorityRestrictions(final String domainName, final String\n         }\n     }\n \n+    /**\n+     * This method returns list of Principals based on the state parameter supplied\n+     * @param queriedState state of principal\n+     * @return List of Principals from DB\n+     */\n+    List<Principal> getPrincipals(int queriedState) {\n+        List<Principal> principals = new ArrayList<>();\n+        Principal principal;\n+        try (ObjectStoreConnection con = store.getConnection(true, false)) {\n+           List<String> dbPrincipals = con.getPrincipals(queriedState);\n+           for (String dbPrincipal : dbPrincipals) {\n+               principal = ZMSUtils.createPrincipalForName(dbPrincipal, zmsConfig.getUserDomain(), null);\n+               ((SimplePrincipal) principal).setState(Principal.State.getState(queriedState));\n+               principals.add(principal);\n+           }\n+        }\n+        return principals;\n+    }\n+\n+    /**\n+     * This method toggles state for supplied Principals based on the flag in DB\n+     * as well as modifies memberships of all roles and groups of current principal(s)\n+     * @param changedPrincipals List of Principals from User Authority\n+     * @param newState new state {@link Principal.State}\n+     */\n+    void updatePrincipalBasedOnAuthorityState(List<Principal> changedPrincipals, Principal.State newState) {\n+        final String caller = \"updateMembershipBasedOnUserState\";\n+        List<Principal> updatedUsers = new ArrayList<>();\n+        try (ObjectStoreConnection con = store.getConnection(true, true)) {\n+\n+            // first lets update the new state in DB\n+            for (Principal changedPrincipal : changedPrincipals) {\n+                try {\n+                    switch (newState) {\n+                        case ACTIVE:\n+                            if (con.updatePrincipal(changedPrincipal.getFullName(), Principal.State.ACTIVE.getValue())) {\n+                                updatedUsers.add(changedPrincipal);\n+                            }\n+                            break;\n+                        case AUTHORITY_SYSTEM_DISABLED:\n+                            if (con.updatePrincipal(changedPrincipal.getFullName(), Principal.State.AUTHORITY_SYSTEM_DISABLED.getValue())) {\n+                                updatedUsers.add(changedPrincipal);\n+                            }\n+                            break;\n+                        default:\n+                            break;\n+                    }\n+                } catch (ResourceException ex) {\n+                    if (ex.getCode() == ResourceException.NOT_FOUND) {\n+                        continue;\n+                    }\n+                    throw ex;\n+                }\n+            }\n+            // if new state is updated successfully\n+            // then we need to modify all roles and groups where given principal is member of\n+            if (!updatedUsers.isEmpty()) {\n+\n+                DomainRoleMember domainRoleMember;\n+                DomainGroupMember domainGroupMember;\n+                RoleMember roleMember;\n+                GroupMember groupMember;\n+                List<RoleMember> roleMembersWithUpdatedState;\n+                List<GroupMember> groupMembersWithUpdatedState;\n+                for (Principal updatedUser : updatedUsers) {\n+                    try {\n+                        // get all roles from all domains\n+                        domainRoleMember = con.getPrincipalRoles(updatedUser.getFullName(), null);\n+                        if (!domainRoleMember.getMemberRoles().isEmpty()) {\n+                            for (MemberRole memberRole : domainRoleMember.getMemberRoles()) {\n+                                roleMember = new RoleMember();\n+                                roleMember.setMemberName(updatedUser.getFullName());\n+                                switch (newState) {\n+                                    case ACTIVE:\n+                                        // if new state is ACTIVE then revert back to previous state for the member\n+                                        roleMember.setSystemDisabled(memberRole.getSystemDisabled() & ~newState.getValue());\n+                                        break;\n+                                    case AUTHORITY_SYSTEM_DISABLED:\n+                                        // if new state is SYSTEM_DISABLED then add it on to existing state\n+                                        roleMember.setSystemDisabled(memberRole.getSystemDisabled() | newState.getValue());\n+                                        break;\n+                                    default:\n+                                        break;\n+                                }\n+                                roleMembersWithUpdatedState = new ArrayList<>();\n+                                roleMembersWithUpdatedState.add(roleMember);\n+\n+                                // Following method does Audit entry as well\n+                                if (updateRoleMemberDisabledState(null, con, roleMembersWithUpdatedState, memberRole.getDomainName(),\n+                                        memberRole.getRoleName(), ZMSConsts.SYS_AUTH_MONITOR, AUDIT_REF, caller)) {\n+\n+                                    // update our role and domain time-stamps, and invalidate local cache entry\n+                                    con.updateRoleModTimestamp(memberRole.getDomainName(), memberRole.getRoleName());\n+                                    con.updateDomainModTimestamp(memberRole.getDomainName());\n+                                    cacheStore.invalidate(memberRole.getDomainName());\n+                                }\n+                            }\n+                        }\n+                        domainGroupMember = con.getPrincipalGroups(updatedUser.getFullName(), null);\n+                        if (!domainGroupMember.getMemberGroups().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45b271a460205ef873d48d4247128daa43779d54"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ4MDA0OQ==", "bodyText": "please update the zms conf file to have a small description of these options since by default feature is off and must be enabled", "url": "https://github.com/AthenZ/athenz/pull/1157#discussion_r510480049", "createdAt": "2020-10-22T21:53:49Z", "author": {"login": "havetisyan"}, "path": "servers/zms/src/main/java/com/yahoo/athenz/zms/ZMSConsts.java", "diffHunk": "@@ -298,4 +298,9 @@\n     public static final int ZMS_DISABLED_AUTHORITY_FILTER = 0x01;\n \n     public static final String ZMS_PROP_STATUS_CHECKER_FACTORY_CLASS = \"athenz.zms.status_checker_factory_class\";\n+\n+    public static final String ZMS_PROP_ENABLE_PRINCIPAL_STATE_UPDATER        = \"athenz.zms.enable_principal_state_updater\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45b271a460205ef873d48d4247128daa43779d54"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ4MTg0Mw==", "bodyText": "we should fetch the enablePrincipalStateUpdater setting in this method and most likely it can just be a local setting since it's not used anywhere else.\n\n\nwhere are using principalStateUpdater member? I see no references", "url": "https://github.com/AthenZ/athenz/pull/1157#discussion_r510481843", "createdAt": "2020-10-22T21:57:55Z", "author": {"login": "havetisyan"}, "path": "servers/zms/src/main/java/com/yahoo/athenz/zms/ZMSImpl.java", "diffHunk": "@@ -577,6 +578,16 @@ public ZMSImpl() {\n         // load the StatusChecker\n \n         loadStatusChecker();\n+\n+        // system disabled from UserAuthority\n+        \n+        initializePrincipalStateUpdater();\n+    }\n+\n+    private void initializePrincipalStateUpdater() {\n+        if (enablePrincipalStateUpdater) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45b271a460205ef873d48d4247128daa43779d54"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ4MjQ5OA==", "bodyText": "any reason to get the principal id first - instead of just updating the principal entry based on the name?", "url": "https://github.com/AthenZ/athenz/pull/1157#discussion_r510482498", "createdAt": "2020-10-22T21:59:27Z", "author": {"login": "havetisyan"}, "path": "servers/zms/src/main/java/com/yahoo/athenz/zms/store/jdbc/JDBCConnection.java", "diffHunk": "@@ -5603,6 +5605,43 @@ public DomainGroupMember getPrincipalGroups(String principal, String domainName)\n         return groups;\n     }\n \n+\n+    @Override\n+    public boolean updatePrincipal(String principal, int newState) {\n+        final String caller = \"updatePrincipal\";\n+\n+        int principalId = getPrincipalId(principal);\n+        if (principalId == 0) {\n+            throw notFoundError(caller, ZMSConsts.OBJECT_PRINCIPAL, principal);\n+        }\n+        int affectedRows;\n+        try (PreparedStatement ps = con.prepareStatement(SQL_UPDATE_PRINCIPAL)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45b271a460205ef873d48d4247128daa43779d54"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ4Mjc5Ng==", "bodyText": "prefer using the column names since it's easier to add more fields later and not worry about the order", "url": "https://github.com/AthenZ/athenz/pull/1157#discussion_r510482796", "createdAt": "2020-10-22T22:00:10Z", "author": {"login": "havetisyan"}, "path": "servers/zms/src/main/java/com/yahoo/athenz/zms/store/jdbc/JDBCConnection.java", "diffHunk": "@@ -5603,6 +5605,43 @@ public DomainGroupMember getPrincipalGroups(String principal, String domainName)\n         return groups;\n     }\n \n+\n+    @Override\n+    public boolean updatePrincipal(String principal, int newState) {\n+        final String caller = \"updatePrincipal\";\n+\n+        int principalId = getPrincipalId(principal);\n+        if (principalId == 0) {\n+            throw notFoundError(caller, ZMSConsts.OBJECT_PRINCIPAL, principal);\n+        }\n+        int affectedRows;\n+        try (PreparedStatement ps = con.prepareStatement(SQL_UPDATE_PRINCIPAL)) {\n+            ps.setInt(1, newState);\n+            ps.setInt(2, principalId);\n+            affectedRows = executeUpdate(ps, caller);\n+        } catch (SQLException ex) {\n+            throw sqlError(ex, caller);\n+        }\n+        return (affectedRows > 0);\n+    }\n+\n+    @Override\n+    public List<String> getPrincipals(int queriedState) {\n+        final String caller = \"getPrincipals\";\n+        List<String> principals = new ArrayList<>();\n+        try (PreparedStatement ps = con.prepareStatement(SQL_GET_PRINCIPAL)) {\n+            ps.setInt(1, queriedState);\n+            try (ResultSet rs = executeQuery(ps, caller)) {\n+                while (rs.next()) {\n+                    principals.add(rs.getString(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45b271a460205ef873d48d4247128daa43779d54"}, "originalPosition": 41}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2b6979e4235f325d7eea75d6f63d358c03d8d3c", "author": {"user": null}, "url": "https://github.com/AthenZ/athenz/commit/f2b6979e4235f325d7eea75d6f63d358c03d8d3c", "committedDate": "2020-10-23T06:18:54Z", "message": "addressing review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1ODI4ODE0", "url": "https://github.com/AthenZ/athenz/pull/1157#pullrequestreview-515828814", "createdAt": "2020-10-23T16:32:46Z", "commit": {"oid": "f2b6979e4235f325d7eea75d6f63d358c03d8d3c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNjozMjo0NlrOHnVMTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNjo1NzoxN1rOHnV_Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAwMzcyNg==", "bodyText": "this should be within the if block so we're not wasting create the listing if there is nothing to do. or better yet in order not to have the whole function as we have now within an if block, it's simpler just do the check up front and return and that makes it easier to follow:\nif (chargedPrincipals.isEmpty()) {\nreturn;\n}\n// continue with the rest of the method\nfinal String caller = \"updatePrincipalByStateFromAuthority\";\nList updatedUsers = new ArrayList<>();\n...", "url": "https://github.com/AthenZ/athenz/pull/1157#discussion_r511003726", "createdAt": "2020-10-23T16:32:46Z", "author": {"login": "havetisyan"}, "path": "servers/zms/src/main/java/com/yahoo/athenz/zms/DBService.java", "diffHunk": "@@ -6402,6 +6403,147 @@ void enforceGroupUserAuthorityRestrictions(final String domainName, final String\n         }\n     }\n \n+    /**\n+     * This method returns list of Principals based on the state parameter supplied\n+     * @param queriedState state of principal\n+     * @return List of Principals from DB\n+     */\n+    List<Principal> getPrincipals(int queriedState) {\n+        List<Principal> principals = new ArrayList<>();\n+        Principal principal;\n+        try (ObjectStoreConnection con = store.getConnection(true, false)) {\n+           List<String> dbPrincipals = con.getPrincipals(queriedState);\n+            Principal.State principalState = Principal.State.getState(queriedState);\n+           for (String dbPrincipal : dbPrincipals) {\n+               principal = ZMSUtils.createPrincipalForName(dbPrincipal, zmsConfig.getUserDomain(), null);\n+               ((SimplePrincipal) principal).setState(principalState);\n+               principals.add(principal);\n+           }\n+        }\n+        return principals;\n+    }\n+\n+    /**\n+     * This method toggles state for supplied Principals based on the flag in DB\n+     * as well as modifies memberships of all roles and groups of current principal(s)\n+     * @param changedPrincipals List of Principals from User Authority\n+     * @param suspended boolean indicating principal's state\n+     */\n+    void updatePrincipalByStateFromAuthority(List<Principal> changedPrincipals, boolean suspended) {\n+        final String caller = \"updatePrincipalByStateFromAuthority\";\n+        List<Principal> updatedUsers = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2b6979e4235f325d7eea75d6f63d358c03d8d3c"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAwNzEzNw==", "bodyText": "need to update this command to use the name field instead of principal_id", "url": "https://github.com/AthenZ/athenz/pull/1157#discussion_r511007137", "createdAt": "2020-10-23T16:39:18Z", "author": {"login": "havetisyan"}, "path": "servers/zms/src/main/java/com/yahoo/athenz/zms/store/jdbc/JDBCConnection.java", "diffHunk": "@@ -479,6 +479,8 @@\n             + \"JOIN principal ON principal.principal_id=principal_group_member.principal_id \"\n             + \"JOIN domain ON domain.domain_id=principal_group.domain_id \"\n             + \"WHERE principal_group_member.last_notified_time=? AND principal_group_member.server=?;\";\n+    private static final String SQL_UPDATE_PRINCIPAL = \"UPDATE principal SET system_suspended=? WHERE principal_id=?;\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2b6979e4235f325d7eea75d6f63d358c03d8d3c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAxMTYyNg==", "bodyText": "no need to create an array list with one member all the time. Instead use Collections.singletonList()", "url": "https://github.com/AthenZ/athenz/pull/1157#discussion_r511011626", "createdAt": "2020-10-23T16:47:24Z", "author": {"login": "havetisyan"}, "path": "servers/zms/src/main/java/com/yahoo/athenz/zms/DBService.java", "diffHunk": "@@ -6402,6 +6403,147 @@ void enforceGroupUserAuthorityRestrictions(final String domainName, final String\n         }\n     }\n \n+    /**\n+     * This method returns list of Principals based on the state parameter supplied\n+     * @param queriedState state of principal\n+     * @return List of Principals from DB\n+     */\n+    List<Principal> getPrincipals(int queriedState) {\n+        List<Principal> principals = new ArrayList<>();\n+        Principal principal;\n+        try (ObjectStoreConnection con = store.getConnection(true, false)) {\n+           List<String> dbPrincipals = con.getPrincipals(queriedState);\n+            Principal.State principalState = Principal.State.getState(queriedState);\n+           for (String dbPrincipal : dbPrincipals) {\n+               principal = ZMSUtils.createPrincipalForName(dbPrincipal, zmsConfig.getUserDomain(), null);\n+               ((SimplePrincipal) principal).setState(principalState);\n+               principals.add(principal);\n+           }\n+        }\n+        return principals;\n+    }\n+\n+    /**\n+     * This method toggles state for supplied Principals based on the flag in DB\n+     * as well as modifies memberships of all roles and groups of current principal(s)\n+     * @param changedPrincipals List of Principals from User Authority\n+     * @param suspended boolean indicating principal's state\n+     */\n+    void updatePrincipalByStateFromAuthority(List<Principal> changedPrincipals, boolean suspended) {\n+        final String caller = \"updatePrincipalByStateFromAuthority\";\n+        List<Principal> updatedUsers = new ArrayList<>();\n+        if (!changedPrincipals.isEmpty()) {\n+            try (ObjectStoreConnection con = store.getConnection(true, true)) {\n+\n+                // first lets update the new state in DB\n+                for (Principal changedPrincipal : changedPrincipals) {\n+                    updatePrincipalState(suspended, updatedUsers, con, changedPrincipal);\n+                }\n+                // if new state is updated successfully\n+                // then we need to modify all roles and groups where given principal is member of\n+                if (!updatedUsers.isEmpty()) {\n+                    for (Principal updatedUser : updatedUsers) {\n+                        try {\n+                            updateRoleMembershipsByPrincipalState(suspended, caller, con, updatedUser);\n+                            updateGroupMembershipByPrincipalState(suspended, caller, con, updatedUser);\n+                        } catch (ResourceException ex) {\n+                            if (ex.getCode() == ResourceException.NOT_FOUND) {\n+                                continue;\n+                            }\n+                            throw ex;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    private void updateGroupMembershipByPrincipalState(boolean suspended, String caller, ObjectStoreConnection con, Principal updatedUser) {\n+        List<GroupMember> groupMembersWithUpdatedState;\n+        GroupMember groupMember;\n+        DomainGroupMember domainGroupMember;\n+        Set<GroupMember> updatedGroups = new HashSet<>();\n+\n+        domainGroupMember = con.getPrincipalGroups(updatedUser.getFullName(), null);\n+        if (!domainGroupMember.getMemberGroups().isEmpty()) {\n+            for (GroupMember currentGroup : domainGroupMember.getMemberGroups()) {\n+                groupMember = new GroupMember();\n+                groupMember.setMemberName(updatedUser.getFullName());\n+                if (suspended) {\n+                    groupMember.setSystemDisabled(currentGroup.getSystemDisabled() & ~Principal.State.AUTHORITY_SYSTEM_SUSPENDED.getValue());\n+                } else {\n+                    groupMember.setSystemDisabled(currentGroup.getSystemDisabled() | Principal.State.AUTHORITY_SYSTEM_SUSPENDED.getValue());\n+                }\n+                groupMembersWithUpdatedState = new ArrayList<>();\n+                groupMembersWithUpdatedState.add(groupMember);\n+\n+                // Following method does Audit entry as well\n+                if (updateGroupMemberDisabledState(null, con, groupMembersWithUpdatedState, currentGroup.getDomainName(),\n+                        currentGroup.getGroupName(), ZMSConsts.SYS_AUTH_MONITOR, AUDIT_REF, caller)) {\n+                    updatedGroups.add(currentGroup);\n+                }\n+            }\n+            for (GroupMember updatedGM : updatedGroups) {\n+\n+                // update our group and domain time-stamps, and invalidate local cache entry\n+                con.updateGroupModTimestamp(updatedGM.getDomainName(), updatedGM.getGroupName());\n+                con.updateDomainModTimestamp(updatedGM.getDomainName());\n+                cacheStore.invalidate(updatedGM.getDomainName());\n+            }\n+        }\n+    }\n+\n+    private void updateRoleMembershipsByPrincipalState(boolean suspended, String caller, ObjectStoreConnection con, Principal updatedUser) {\n+        RoleMember roleMember;\n+        List<RoleMember> roleMembersWithUpdatedState;\n+        DomainRoleMember domainRoleMember;\n+        Set<MemberRole> updatedRoles = new HashSet<>();\n+\n+        domainRoleMember = con.getPrincipalRoles(updatedUser.getFullName(), null);\n+        if (!domainRoleMember.getMemberRoles().isEmpty()) {\n+            for (MemberRole memberRole : domainRoleMember.getMemberRoles()) {\n+                roleMember = new RoleMember();\n+                roleMember.setMemberName(updatedUser.getFullName());\n+                if (suspended) {\n+                    roleMember.setSystemDisabled(memberRole.getSystemDisabled() & ~Principal.State.AUTHORITY_SYSTEM_SUSPENDED.getValue());\n+                } else {\n+                    roleMember.setSystemDisabled(memberRole.getSystemDisabled() | Principal.State.AUTHORITY_SYSTEM_SUSPENDED.getValue());\n+                }\n+                roleMembersWithUpdatedState = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2b6979e4235f325d7eea75d6f63d358c03d8d3c"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAxMzQyNw==", "bodyText": "the use of the this does not look correct since we're still processing the domain multiple times. if the principal is part of 10 roles in a domain, then we're updating the role mod timestamp for 10 roles, but then we're doing the same thing for the same domain 10 times.\ninstead of painting a updatedRoles struct, we should maintain:\nSet updatedDomains;\nand then in the function we just call\ncon.updateRoleModTimestamp(memberRole.getDomainName(), memberRole.getRoleName());\nupdatedDomains.put(memberRole.getDomainName()); // this will ignore all duplicates\nthen outside of the for loop you can just iterate through the domain names and call\ncon.updateDomainModTimestamp(updatedMR.getDomainName());\ncacheStore.invalidate(updatedMR.getDomainName());", "url": "https://github.com/AthenZ/athenz/pull/1157#discussion_r511013427", "createdAt": "2020-10-23T16:50:50Z", "author": {"login": "havetisyan"}, "path": "servers/zms/src/main/java/com/yahoo/athenz/zms/DBService.java", "diffHunk": "@@ -6402,6 +6403,147 @@ void enforceGroupUserAuthorityRestrictions(final String domainName, final String\n         }\n     }\n \n+    /**\n+     * This method returns list of Principals based on the state parameter supplied\n+     * @param queriedState state of principal\n+     * @return List of Principals from DB\n+     */\n+    List<Principal> getPrincipals(int queriedState) {\n+        List<Principal> principals = new ArrayList<>();\n+        Principal principal;\n+        try (ObjectStoreConnection con = store.getConnection(true, false)) {\n+           List<String> dbPrincipals = con.getPrincipals(queriedState);\n+            Principal.State principalState = Principal.State.getState(queriedState);\n+           for (String dbPrincipal : dbPrincipals) {\n+               principal = ZMSUtils.createPrincipalForName(dbPrincipal, zmsConfig.getUserDomain(), null);\n+               ((SimplePrincipal) principal).setState(principalState);\n+               principals.add(principal);\n+           }\n+        }\n+        return principals;\n+    }\n+\n+    /**\n+     * This method toggles state for supplied Principals based on the flag in DB\n+     * as well as modifies memberships of all roles and groups of current principal(s)\n+     * @param changedPrincipals List of Principals from User Authority\n+     * @param suspended boolean indicating principal's state\n+     */\n+    void updatePrincipalByStateFromAuthority(List<Principal> changedPrincipals, boolean suspended) {\n+        final String caller = \"updatePrincipalByStateFromAuthority\";\n+        List<Principal> updatedUsers = new ArrayList<>();\n+        if (!changedPrincipals.isEmpty()) {\n+            try (ObjectStoreConnection con = store.getConnection(true, true)) {\n+\n+                // first lets update the new state in DB\n+                for (Principal changedPrincipal : changedPrincipals) {\n+                    updatePrincipalState(suspended, updatedUsers, con, changedPrincipal);\n+                }\n+                // if new state is updated successfully\n+                // then we need to modify all roles and groups where given principal is member of\n+                if (!updatedUsers.isEmpty()) {\n+                    for (Principal updatedUser : updatedUsers) {\n+                        try {\n+                            updateRoleMembershipsByPrincipalState(suspended, caller, con, updatedUser);\n+                            updateGroupMembershipByPrincipalState(suspended, caller, con, updatedUser);\n+                        } catch (ResourceException ex) {\n+                            if (ex.getCode() == ResourceException.NOT_FOUND) {\n+                                continue;\n+                            }\n+                            throw ex;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    private void updateGroupMembershipByPrincipalState(boolean suspended, String caller, ObjectStoreConnection con, Principal updatedUser) {\n+        List<GroupMember> groupMembersWithUpdatedState;\n+        GroupMember groupMember;\n+        DomainGroupMember domainGroupMember;\n+        Set<GroupMember> updatedGroups = new HashSet<>();\n+\n+        domainGroupMember = con.getPrincipalGroups(updatedUser.getFullName(), null);\n+        if (!domainGroupMember.getMemberGroups().isEmpty()) {\n+            for (GroupMember currentGroup : domainGroupMember.getMemberGroups()) {\n+                groupMember = new GroupMember();\n+                groupMember.setMemberName(updatedUser.getFullName());\n+                if (suspended) {\n+                    groupMember.setSystemDisabled(currentGroup.getSystemDisabled() & ~Principal.State.AUTHORITY_SYSTEM_SUSPENDED.getValue());\n+                } else {\n+                    groupMember.setSystemDisabled(currentGroup.getSystemDisabled() | Principal.State.AUTHORITY_SYSTEM_SUSPENDED.getValue());\n+                }\n+                groupMembersWithUpdatedState = new ArrayList<>();\n+                groupMembersWithUpdatedState.add(groupMember);\n+\n+                // Following method does Audit entry as well\n+                if (updateGroupMemberDisabledState(null, con, groupMembersWithUpdatedState, currentGroup.getDomainName(),\n+                        currentGroup.getGroupName(), ZMSConsts.SYS_AUTH_MONITOR, AUDIT_REF, caller)) {\n+                    updatedGroups.add(currentGroup);\n+                }\n+            }\n+            for (GroupMember updatedGM : updatedGroups) {\n+\n+                // update our group and domain time-stamps, and invalidate local cache entry\n+                con.updateGroupModTimestamp(updatedGM.getDomainName(), updatedGM.getGroupName());\n+                con.updateDomainModTimestamp(updatedGM.getDomainName());\n+                cacheStore.invalidate(updatedGM.getDomainName());\n+            }\n+        }\n+    }\n+\n+    private void updateRoleMembershipsByPrincipalState(boolean suspended, String caller, ObjectStoreConnection con, Principal updatedUser) {\n+        RoleMember roleMember;\n+        List<RoleMember> roleMembersWithUpdatedState;\n+        DomainRoleMember domainRoleMember;\n+        Set<MemberRole> updatedRoles = new HashSet<>();\n+\n+        domainRoleMember = con.getPrincipalRoles(updatedUser.getFullName(), null);\n+        if (!domainRoleMember.getMemberRoles().isEmpty()) {\n+            for (MemberRole memberRole : domainRoleMember.getMemberRoles()) {\n+                roleMember = new RoleMember();\n+                roleMember.setMemberName(updatedUser.getFullName());\n+                if (suspended) {\n+                    roleMember.setSystemDisabled(memberRole.getSystemDisabled() & ~Principal.State.AUTHORITY_SYSTEM_SUSPENDED.getValue());\n+                } else {\n+                    roleMember.setSystemDisabled(memberRole.getSystemDisabled() | Principal.State.AUTHORITY_SYSTEM_SUSPENDED.getValue());\n+                }\n+                roleMembersWithUpdatedState = new ArrayList<>();\n+                roleMembersWithUpdatedState.add(roleMember);\n+\n+                // Following method does Audit entry as well\n+                if (updateRoleMemberDisabledState(null, con, roleMembersWithUpdatedState, memberRole.getDomainName(),\n+                        memberRole.getRoleName(), ZMSConsts.SYS_AUTH_MONITOR, AUDIT_REF, caller)) {\n+                    updatedRoles.add(memberRole);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2b6979e4235f325d7eea75d6f63d358c03d8d3c"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAxNDc0MA==", "bodyText": "we should simplify this by calling the updatePrincipal only once.\nnewState = suspended ? Principal.State.AUTHORITY_SYSTEM_SUSPENDED.getValue() : Principal.State.ACTIVE.getValue();\nif (con.updatePrincipal(changedPrincipal.getFullName(), newState)) {\nupdatedUsers.add(changedPrincipal);\n}", "url": "https://github.com/AthenZ/athenz/pull/1157#discussion_r511014740", "createdAt": "2020-10-23T16:53:29Z", "author": {"login": "havetisyan"}, "path": "servers/zms/src/main/java/com/yahoo/athenz/zms/DBService.java", "diffHunk": "@@ -6402,6 +6403,147 @@ void enforceGroupUserAuthorityRestrictions(final String domainName, final String\n         }\n     }\n \n+    /**\n+     * This method returns list of Principals based on the state parameter supplied\n+     * @param queriedState state of principal\n+     * @return List of Principals from DB\n+     */\n+    List<Principal> getPrincipals(int queriedState) {\n+        List<Principal> principals = new ArrayList<>();\n+        Principal principal;\n+        try (ObjectStoreConnection con = store.getConnection(true, false)) {\n+           List<String> dbPrincipals = con.getPrincipals(queriedState);\n+            Principal.State principalState = Principal.State.getState(queriedState);\n+           for (String dbPrincipal : dbPrincipals) {\n+               principal = ZMSUtils.createPrincipalForName(dbPrincipal, zmsConfig.getUserDomain(), null);\n+               ((SimplePrincipal) principal).setState(principalState);\n+               principals.add(principal);\n+           }\n+        }\n+        return principals;\n+    }\n+\n+    /**\n+     * This method toggles state for supplied Principals based on the flag in DB\n+     * as well as modifies memberships of all roles and groups of current principal(s)\n+     * @param changedPrincipals List of Principals from User Authority\n+     * @param suspended boolean indicating principal's state\n+     */\n+    void updatePrincipalByStateFromAuthority(List<Principal> changedPrincipals, boolean suspended) {\n+        final String caller = \"updatePrincipalByStateFromAuthority\";\n+        List<Principal> updatedUsers = new ArrayList<>();\n+        if (!changedPrincipals.isEmpty()) {\n+            try (ObjectStoreConnection con = store.getConnection(true, true)) {\n+\n+                // first lets update the new state in DB\n+                for (Principal changedPrincipal : changedPrincipals) {\n+                    updatePrincipalState(suspended, updatedUsers, con, changedPrincipal);\n+                }\n+                // if new state is updated successfully\n+                // then we need to modify all roles and groups where given principal is member of\n+                if (!updatedUsers.isEmpty()) {\n+                    for (Principal updatedUser : updatedUsers) {\n+                        try {\n+                            updateRoleMembershipsByPrincipalState(suspended, caller, con, updatedUser);\n+                            updateGroupMembershipByPrincipalState(suspended, caller, con, updatedUser);\n+                        } catch (ResourceException ex) {\n+                            if (ex.getCode() == ResourceException.NOT_FOUND) {\n+                                continue;\n+                            }\n+                            throw ex;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    private void updateGroupMembershipByPrincipalState(boolean suspended, String caller, ObjectStoreConnection con, Principal updatedUser) {\n+        List<GroupMember> groupMembersWithUpdatedState;\n+        GroupMember groupMember;\n+        DomainGroupMember domainGroupMember;\n+        Set<GroupMember> updatedGroups = new HashSet<>();\n+\n+        domainGroupMember = con.getPrincipalGroups(updatedUser.getFullName(), null);\n+        if (!domainGroupMember.getMemberGroups().isEmpty()) {\n+            for (GroupMember currentGroup : domainGroupMember.getMemberGroups()) {\n+                groupMember = new GroupMember();\n+                groupMember.setMemberName(updatedUser.getFullName());\n+                if (suspended) {\n+                    groupMember.setSystemDisabled(currentGroup.getSystemDisabled() & ~Principal.State.AUTHORITY_SYSTEM_SUSPENDED.getValue());\n+                } else {\n+                    groupMember.setSystemDisabled(currentGroup.getSystemDisabled() | Principal.State.AUTHORITY_SYSTEM_SUSPENDED.getValue());\n+                }\n+                groupMembersWithUpdatedState = new ArrayList<>();\n+                groupMembersWithUpdatedState.add(groupMember);\n+\n+                // Following method does Audit entry as well\n+                if (updateGroupMemberDisabledState(null, con, groupMembersWithUpdatedState, currentGroup.getDomainName(),\n+                        currentGroup.getGroupName(), ZMSConsts.SYS_AUTH_MONITOR, AUDIT_REF, caller)) {\n+                    updatedGroups.add(currentGroup);\n+                }\n+            }\n+            for (GroupMember updatedGM : updatedGroups) {\n+\n+                // update our group and domain time-stamps, and invalidate local cache entry\n+                con.updateGroupModTimestamp(updatedGM.getDomainName(), updatedGM.getGroupName());\n+                con.updateDomainModTimestamp(updatedGM.getDomainName());\n+                cacheStore.invalidate(updatedGM.getDomainName());\n+            }\n+        }\n+    }\n+\n+    private void updateRoleMembershipsByPrincipalState(boolean suspended, String caller, ObjectStoreConnection con, Principal updatedUser) {\n+        RoleMember roleMember;\n+        List<RoleMember> roleMembersWithUpdatedState;\n+        DomainRoleMember domainRoleMember;\n+        Set<MemberRole> updatedRoles = new HashSet<>();\n+\n+        domainRoleMember = con.getPrincipalRoles(updatedUser.getFullName(), null);\n+        if (!domainRoleMember.getMemberRoles().isEmpty()) {\n+            for (MemberRole memberRole : domainRoleMember.getMemberRoles()) {\n+                roleMember = new RoleMember();\n+                roleMember.setMemberName(updatedUser.getFullName());\n+                if (suspended) {\n+                    roleMember.setSystemDisabled(memberRole.getSystemDisabled() & ~Principal.State.AUTHORITY_SYSTEM_SUSPENDED.getValue());\n+                } else {\n+                    roleMember.setSystemDisabled(memberRole.getSystemDisabled() | Principal.State.AUTHORITY_SYSTEM_SUSPENDED.getValue());\n+                }\n+                roleMembersWithUpdatedState = new ArrayList<>();\n+                roleMembersWithUpdatedState.add(roleMember);\n+\n+                // Following method does Audit entry as well\n+                if (updateRoleMemberDisabledState(null, con, roleMembersWithUpdatedState, memberRole.getDomainName(),\n+                        memberRole.getRoleName(), ZMSConsts.SYS_AUTH_MONITOR, AUDIT_REF, caller)) {\n+                    updatedRoles.add(memberRole);\n+                }\n+            }\n+            for (MemberRole updatedMR : updatedRoles) {\n+\n+                // update our role and domain time-stamps, and invalidate local cache entry\n+                con.updateRoleModTimestamp(updatedMR.getDomainName(), updatedMR.getRoleName());\n+                con.updateDomainModTimestamp(updatedMR.getDomainName());\n+                cacheStore.invalidate(updatedMR.getDomainName());\n+            }\n+        }\n+    }\n+\n+    private void updatePrincipalState(boolean suspended, List<Principal> updatedUsers, ObjectStoreConnection con, Principal changedPrincipal) {\n+        try {\n+            if (suspended) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2b6979e4235f325d7eea75d6f63d358c03d8d3c"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAxNTExOA==", "bodyText": "see the comment in the role section which applies here as well.", "url": "https://github.com/AthenZ/athenz/pull/1157#discussion_r511015118", "createdAt": "2020-10-23T16:54:17Z", "author": {"login": "havetisyan"}, "path": "servers/zms/src/main/java/com/yahoo/athenz/zms/DBService.java", "diffHunk": "@@ -6402,6 +6403,147 @@ void enforceGroupUserAuthorityRestrictions(final String domainName, final String\n         }\n     }\n \n+    /**\n+     * This method returns list of Principals based on the state parameter supplied\n+     * @param queriedState state of principal\n+     * @return List of Principals from DB\n+     */\n+    List<Principal> getPrincipals(int queriedState) {\n+        List<Principal> principals = new ArrayList<>();\n+        Principal principal;\n+        try (ObjectStoreConnection con = store.getConnection(true, false)) {\n+           List<String> dbPrincipals = con.getPrincipals(queriedState);\n+            Principal.State principalState = Principal.State.getState(queriedState);\n+           for (String dbPrincipal : dbPrincipals) {\n+               principal = ZMSUtils.createPrincipalForName(dbPrincipal, zmsConfig.getUserDomain(), null);\n+               ((SimplePrincipal) principal).setState(principalState);\n+               principals.add(principal);\n+           }\n+        }\n+        return principals;\n+    }\n+\n+    /**\n+     * This method toggles state for supplied Principals based on the flag in DB\n+     * as well as modifies memberships of all roles and groups of current principal(s)\n+     * @param changedPrincipals List of Principals from User Authority\n+     * @param suspended boolean indicating principal's state\n+     */\n+    void updatePrincipalByStateFromAuthority(List<Principal> changedPrincipals, boolean suspended) {\n+        final String caller = \"updatePrincipalByStateFromAuthority\";\n+        List<Principal> updatedUsers = new ArrayList<>();\n+        if (!changedPrincipals.isEmpty()) {\n+            try (ObjectStoreConnection con = store.getConnection(true, true)) {\n+\n+                // first lets update the new state in DB\n+                for (Principal changedPrincipal : changedPrincipals) {\n+                    updatePrincipalState(suspended, updatedUsers, con, changedPrincipal);\n+                }\n+                // if new state is updated successfully\n+                // then we need to modify all roles and groups where given principal is member of\n+                if (!updatedUsers.isEmpty()) {\n+                    for (Principal updatedUser : updatedUsers) {\n+                        try {\n+                            updateRoleMembershipsByPrincipalState(suspended, caller, con, updatedUser);\n+                            updateGroupMembershipByPrincipalState(suspended, caller, con, updatedUser);\n+                        } catch (ResourceException ex) {\n+                            if (ex.getCode() == ResourceException.NOT_FOUND) {\n+                                continue;\n+                            }\n+                            throw ex;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    private void updateGroupMembershipByPrincipalState(boolean suspended, String caller, ObjectStoreConnection con, Principal updatedUser) {\n+        List<GroupMember> groupMembersWithUpdatedState;\n+        GroupMember groupMember;\n+        DomainGroupMember domainGroupMember;\n+        Set<GroupMember> updatedGroups = new HashSet<>();\n+\n+        domainGroupMember = con.getPrincipalGroups(updatedUser.getFullName(), null);\n+        if (!domainGroupMember.getMemberGroups().isEmpty()) {\n+            for (GroupMember currentGroup : domainGroupMember.getMemberGroups()) {\n+                groupMember = new GroupMember();\n+                groupMember.setMemberName(updatedUser.getFullName());\n+                if (suspended) {\n+                    groupMember.setSystemDisabled(currentGroup.getSystemDisabled() & ~Principal.State.AUTHORITY_SYSTEM_SUSPENDED.getValue());\n+                } else {\n+                    groupMember.setSystemDisabled(currentGroup.getSystemDisabled() | Principal.State.AUTHORITY_SYSTEM_SUSPENDED.getValue());\n+                }\n+                groupMembersWithUpdatedState = new ArrayList<>();\n+                groupMembersWithUpdatedState.add(groupMember);\n+\n+                // Following method does Audit entry as well\n+                if (updateGroupMemberDisabledState(null, con, groupMembersWithUpdatedState, currentGroup.getDomainName(),\n+                        currentGroup.getGroupName(), ZMSConsts.SYS_AUTH_MONITOR, AUDIT_REF, caller)) {\n+                    updatedGroups.add(currentGroup);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2b6979e4235f325d7eea75d6f63d358c03d8d3c"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAxNjU2Mg==", "bodyText": "let's call groupMember.setSystemDisabled only once.\nwe should determine the state and then just pass that to the method e.g.\nstate = suspended ? a : b;\ngroupMember.setSystemDisabled(state);", "url": "https://github.com/AthenZ/athenz/pull/1157#discussion_r511016562", "createdAt": "2020-10-23T16:56:55Z", "author": {"login": "havetisyan"}, "path": "servers/zms/src/main/java/com/yahoo/athenz/zms/DBService.java", "diffHunk": "@@ -6402,6 +6403,147 @@ void enforceGroupUserAuthorityRestrictions(final String domainName, final String\n         }\n     }\n \n+    /**\n+     * This method returns list of Principals based on the state parameter supplied\n+     * @param queriedState state of principal\n+     * @return List of Principals from DB\n+     */\n+    List<Principal> getPrincipals(int queriedState) {\n+        List<Principal> principals = new ArrayList<>();\n+        Principal principal;\n+        try (ObjectStoreConnection con = store.getConnection(true, false)) {\n+           List<String> dbPrincipals = con.getPrincipals(queriedState);\n+            Principal.State principalState = Principal.State.getState(queriedState);\n+           for (String dbPrincipal : dbPrincipals) {\n+               principal = ZMSUtils.createPrincipalForName(dbPrincipal, zmsConfig.getUserDomain(), null);\n+               ((SimplePrincipal) principal).setState(principalState);\n+               principals.add(principal);\n+           }\n+        }\n+        return principals;\n+    }\n+\n+    /**\n+     * This method toggles state for supplied Principals based on the flag in DB\n+     * as well as modifies memberships of all roles and groups of current principal(s)\n+     * @param changedPrincipals List of Principals from User Authority\n+     * @param suspended boolean indicating principal's state\n+     */\n+    void updatePrincipalByStateFromAuthority(List<Principal> changedPrincipals, boolean suspended) {\n+        final String caller = \"updatePrincipalByStateFromAuthority\";\n+        List<Principal> updatedUsers = new ArrayList<>();\n+        if (!changedPrincipals.isEmpty()) {\n+            try (ObjectStoreConnection con = store.getConnection(true, true)) {\n+\n+                // first lets update the new state in DB\n+                for (Principal changedPrincipal : changedPrincipals) {\n+                    updatePrincipalState(suspended, updatedUsers, con, changedPrincipal);\n+                }\n+                // if new state is updated successfully\n+                // then we need to modify all roles and groups where given principal is member of\n+                if (!updatedUsers.isEmpty()) {\n+                    for (Principal updatedUser : updatedUsers) {\n+                        try {\n+                            updateRoleMembershipsByPrincipalState(suspended, caller, con, updatedUser);\n+                            updateGroupMembershipByPrincipalState(suspended, caller, con, updatedUser);\n+                        } catch (ResourceException ex) {\n+                            if (ex.getCode() == ResourceException.NOT_FOUND) {\n+                                continue;\n+                            }\n+                            throw ex;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    private void updateGroupMembershipByPrincipalState(boolean suspended, String caller, ObjectStoreConnection con, Principal updatedUser) {\n+        List<GroupMember> groupMembersWithUpdatedState;\n+        GroupMember groupMember;\n+        DomainGroupMember domainGroupMember;\n+        Set<GroupMember> updatedGroups = new HashSet<>();\n+\n+        domainGroupMember = con.getPrincipalGroups(updatedUser.getFullName(), null);\n+        if (!domainGroupMember.getMemberGroups().isEmpty()) {\n+            for (GroupMember currentGroup : domainGroupMember.getMemberGroups()) {\n+                groupMember = new GroupMember();\n+                groupMember.setMemberName(updatedUser.getFullName());\n+                if (suspended) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2b6979e4235f325d7eea75d6f63d358c03d8d3c"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAxNjc3NQ==", "bodyText": "no need to create an array list with one member all the time. Instead use Collections.singletonList()", "url": "https://github.com/AthenZ/athenz/pull/1157#discussion_r511016775", "createdAt": "2020-10-23T16:57:17Z", "author": {"login": "havetisyan"}, "path": "servers/zms/src/main/java/com/yahoo/athenz/zms/DBService.java", "diffHunk": "@@ -6402,6 +6403,147 @@ void enforceGroupUserAuthorityRestrictions(final String domainName, final String\n         }\n     }\n \n+    /**\n+     * This method returns list of Principals based on the state parameter supplied\n+     * @param queriedState state of principal\n+     * @return List of Principals from DB\n+     */\n+    List<Principal> getPrincipals(int queriedState) {\n+        List<Principal> principals = new ArrayList<>();\n+        Principal principal;\n+        try (ObjectStoreConnection con = store.getConnection(true, false)) {\n+           List<String> dbPrincipals = con.getPrincipals(queriedState);\n+            Principal.State principalState = Principal.State.getState(queriedState);\n+           for (String dbPrincipal : dbPrincipals) {\n+               principal = ZMSUtils.createPrincipalForName(dbPrincipal, zmsConfig.getUserDomain(), null);\n+               ((SimplePrincipal) principal).setState(principalState);\n+               principals.add(principal);\n+           }\n+        }\n+        return principals;\n+    }\n+\n+    /**\n+     * This method toggles state for supplied Principals based on the flag in DB\n+     * as well as modifies memberships of all roles and groups of current principal(s)\n+     * @param changedPrincipals List of Principals from User Authority\n+     * @param suspended boolean indicating principal's state\n+     */\n+    void updatePrincipalByStateFromAuthority(List<Principal> changedPrincipals, boolean suspended) {\n+        final String caller = \"updatePrincipalByStateFromAuthority\";\n+        List<Principal> updatedUsers = new ArrayList<>();\n+        if (!changedPrincipals.isEmpty()) {\n+            try (ObjectStoreConnection con = store.getConnection(true, true)) {\n+\n+                // first lets update the new state in DB\n+                for (Principal changedPrincipal : changedPrincipals) {\n+                    updatePrincipalState(suspended, updatedUsers, con, changedPrincipal);\n+                }\n+                // if new state is updated successfully\n+                // then we need to modify all roles and groups where given principal is member of\n+                if (!updatedUsers.isEmpty()) {\n+                    for (Principal updatedUser : updatedUsers) {\n+                        try {\n+                            updateRoleMembershipsByPrincipalState(suspended, caller, con, updatedUser);\n+                            updateGroupMembershipByPrincipalState(suspended, caller, con, updatedUser);\n+                        } catch (ResourceException ex) {\n+                            if (ex.getCode() == ResourceException.NOT_FOUND) {\n+                                continue;\n+                            }\n+                            throw ex;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    private void updateGroupMembershipByPrincipalState(boolean suspended, String caller, ObjectStoreConnection con, Principal updatedUser) {\n+        List<GroupMember> groupMembersWithUpdatedState;\n+        GroupMember groupMember;\n+        DomainGroupMember domainGroupMember;\n+        Set<GroupMember> updatedGroups = new HashSet<>();\n+\n+        domainGroupMember = con.getPrincipalGroups(updatedUser.getFullName(), null);\n+        if (!domainGroupMember.getMemberGroups().isEmpty()) {\n+            for (GroupMember currentGroup : domainGroupMember.getMemberGroups()) {\n+                groupMember = new GroupMember();\n+                groupMember.setMemberName(updatedUser.getFullName());\n+                if (suspended) {\n+                    groupMember.setSystemDisabled(currentGroup.getSystemDisabled() & ~Principal.State.AUTHORITY_SYSTEM_SUSPENDED.getValue());\n+                } else {\n+                    groupMember.setSystemDisabled(currentGroup.getSystemDisabled() | Principal.State.AUTHORITY_SYSTEM_SUSPENDED.getValue());\n+                }\n+                groupMembersWithUpdatedState = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2b6979e4235f325d7eea75d6f63d358c03d8d3c"}, "originalPosition": 92}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0dff4be75160c89e9e35b4634db11456460fa25f", "author": {"user": null}, "url": "https://github.com/AthenZ/athenz/commit/0dff4be75160c89e9e35b4634db11456460fa25f", "committedDate": "2020-10-23T19:00:42Z", "message": "addressing review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2Mzk4ODA3", "url": "https://github.com/AthenZ/athenz/pull/1157#pullrequestreview-516398807", "createdAt": "2020-10-25T21:31:22Z", "commit": {"oid": "0dff4be75160c89e9e35b4634db11456460fa25f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2924, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}