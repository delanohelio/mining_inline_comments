{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3OTc2NTMx", "number": 884, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNzoxNzoyM1rODh88kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNzoxODozNFrODh897w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTI4MTQ2OnYy", "diffSide": "RIGHT", "path": "libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/notification/impl/NotificationServiceFactoryImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNzoxNzoyM1rOFs-cSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQxMDowOTo0OVrOFtKfBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcwNDcxMg==", "bodyText": "Instead of hardcoding the AWSEmailProvider here, it should come from properties, so that it can be replaced with another EmailProvider for ZMS vs ZTS", "url": "https://github.com/AthenZ/athenz/pull/884#discussion_r382704712", "createdAt": "2020-02-21T17:17:23Z", "author": {"login": "abvaidya"}, "path": "libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/notification/impl/NotificationServiceFactoryImpl.java", "diffHunk": "@@ -26,6 +26,6 @@\n \n     @Override\n     public NotificationService create() {\n-        return new EmailNotificationService();\n+        return new EmailNotificationService(new AWSEmailProvider());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1969289ad57d57019d8362713e9afce9546e59b3"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkwMjAyMw==", "bodyText": "Yes, I've considered it and it is actually part of the original design. But that means there would be 2 separate factory types. One for NotificationService - currently only email but in the future could be something else like push messages to phone - and another for providers such as AWS SES, or some SMS messages provider.\nThe providers and types of Notification Services are coupled as there is no reason to Instantiate a NotificationService of one type (for example, EmailNotificationService) with a provider from another type (for example, some push notifications Provider).\nSo I've decided on using a single factory. Implementors can implement other factories that create EmailNotificationService with a different provider of their own or create a different type of NotificationService all together with its own providers.", "url": "https://github.com/AthenZ/athenz/pull/884#discussion_r382902023", "createdAt": "2020-02-22T10:09:49Z", "author": {"login": "OferLevi85"}, "path": "libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/notification/impl/NotificationServiceFactoryImpl.java", "diffHunk": "@@ -26,6 +26,6 @@\n \n     @Override\n     public NotificationService create() {\n-        return new EmailNotificationService();\n+        return new EmailNotificationService(new AWSEmailProvider());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcwNDcxMg=="}, "originalCommit": {"oid": "1969289ad57d57019d8362713e9afce9546e59b3"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTI4NDk1OnYy", "diffSide": "RIGHT", "path": "libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/notification/impl/AWSEmailProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNzoxODozNFrOFs-eXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQxMDoxMTo1N1rOFtKfeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcwNTI0NA==", "bodyText": "Since creating MIMEMessage is common across diff email providers, it can be extracted in the EmailProvider implementation as default method", "url": "https://github.com/AthenZ/athenz/pull/884#discussion_r382705244", "createdAt": "2020-02-21T17:18:34Z", "author": {"login": "abvaidya"}, "path": "libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/notification/impl/AWSEmailProvider.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package com.yahoo.athenz.common.server.notification.impl;\n+\n+import com.amazonaws.regions.Region;\n+import com.amazonaws.regions.Regions;\n+import com.amazonaws.services.simpleemail.AmazonSimpleEmailService;\n+import com.amazonaws.services.simpleemail.AmazonSimpleEmailServiceClientBuilder;\n+import com.amazonaws.services.simpleemail.model.RawMessage;\n+import com.amazonaws.services.simpleemail.model.SendRawEmailRequest;\n+import com.amazonaws.services.simpleemail.model.SendRawEmailResult;\n+import com.yahoo.athenz.common.server.notification.EmailProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.mail.Session;\n+import javax.mail.internet.InternetAddress;\n+import javax.mail.internet.MimeBodyPart;\n+import javax.mail.internet.MimeMessage;\n+import javax.mail.internet.MimeMultipart;\n+import java.io.ByteArrayOutputStream;\n+import java.nio.ByteBuffer;\n+import java.util.Collection;\n+import java.util.Properties;\n+\n+import static com.yahoo.athenz.common.server.notification.NotificationServiceConstants.CHARSET_UTF_8;\n+import static com.yahoo.athenz.common.server.notification.NotificationServiceConstants.HTML_LOGO_CID_PLACEHOLDER;\n+\n+public class AWSEmailProvider implements EmailProvider {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AWSEmailProvider.class);\n+    private final AmazonSimpleEmailService ses;\n+\n+    @Override\n+    public boolean sendEmail(String subject, String body, boolean status, Collection<String> recipients, String from, byte[] logoImage) {\n+        try {\n+            Session session = Session.getDefaultInstance(new Properties());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1969289ad57d57019d8362713e9afce9546e59b3"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkwMjEzNg==", "bodyText": "Yes I'm planning on doing it in the next couple of pull requests. I just want to implement one more email provider before doing it so I'll know exactly what I can extract from this method and what I should keep.", "url": "https://github.com/AthenZ/athenz/pull/884#discussion_r382902136", "createdAt": "2020-02-22T10:11:57Z", "author": {"login": "OferLevi85"}, "path": "libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/notification/impl/AWSEmailProvider.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package com.yahoo.athenz.common.server.notification.impl;\n+\n+import com.amazonaws.regions.Region;\n+import com.amazonaws.regions.Regions;\n+import com.amazonaws.services.simpleemail.AmazonSimpleEmailService;\n+import com.amazonaws.services.simpleemail.AmazonSimpleEmailServiceClientBuilder;\n+import com.amazonaws.services.simpleemail.model.RawMessage;\n+import com.amazonaws.services.simpleemail.model.SendRawEmailRequest;\n+import com.amazonaws.services.simpleemail.model.SendRawEmailResult;\n+import com.yahoo.athenz.common.server.notification.EmailProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.mail.Session;\n+import javax.mail.internet.InternetAddress;\n+import javax.mail.internet.MimeBodyPart;\n+import javax.mail.internet.MimeMessage;\n+import javax.mail.internet.MimeMultipart;\n+import java.io.ByteArrayOutputStream;\n+import java.nio.ByteBuffer;\n+import java.util.Collection;\n+import java.util.Properties;\n+\n+import static com.yahoo.athenz.common.server.notification.NotificationServiceConstants.CHARSET_UTF_8;\n+import static com.yahoo.athenz.common.server.notification.NotificationServiceConstants.HTML_LOGO_CID_PLACEHOLDER;\n+\n+public class AWSEmailProvider implements EmailProvider {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AWSEmailProvider.class);\n+    private final AmazonSimpleEmailService ses;\n+\n+    @Override\n+    public boolean sendEmail(String subject, String body, boolean status, Collection<String> recipients, String from, byte[] logoImage) {\n+        try {\n+            Session session = Session.getDefaultInstance(new Properties());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcwNTI0NA=="}, "originalCommit": {"oid": "1969289ad57d57019d8362713e9afce9546e59b3"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1728, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}