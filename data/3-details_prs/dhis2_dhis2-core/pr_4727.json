{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0MDQ3Mzc0", "number": 4727, "title": "feature: (2.34) Add translations support for SystemSettings", "bodyText": "DHIS2-5527", "createdAt": "2020-01-17T09:27:05Z", "url": "https://github.com/dhis2/dhis2-core/pull/4727", "merged": true, "mergeCommit": {"oid": "630bb3e445abc4ce661b038f48b45d1848fa295f"}, "closed": true, "closedAt": "2020-01-17T12:54:28Z", "author": {"login": "huzvak"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb7LLBFgH2gAyMzY0MDQ3Mzc0OjVjZDgxZDAwMDMzNWZlZTBiM2VhNDY3OWVlZDc0ZDNlZTRhY2I4M2E=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb7Nk10AH2gAyMzY0MDQ3Mzc0OjdkY2ZjZjJhOGU4YjNlNjhlMzBmZDkwYjczMzk5NzIyODZlMjc0ZmM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5cd81d000335fee0b3ea4679eed74d3ee4acb83a", "author": {"user": null}, "url": "https://github.com/dhis2/dhis2-core/commit/5cd81d000335fee0b3ea4679eed74d3ee4acb83a", "committedDate": "2020-01-17T09:17:27Z", "message": "feature: (2.34) Add translations support for SystemSettings\n\nDHIS2-5527"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d8c5a06bb19341d3854f008e0d96e98060c764e", "author": {"user": null}, "url": "https://github.com/dhis2/dhis2-core/commit/7d8c5a06bb19341d3854f008e0d96e98060c764e", "committedDate": "2020-01-17T09:25:24Z", "message": "chore: (2.34) Improve naming of constants and formatting\n\nDHIS2-5527"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NDU1NjQ3", "url": "https://github.com/dhis2/dhis2-core/pull/4727#pullrequestreview-344455647", "createdAt": "2020-01-17T09:32:01Z", "commit": {"oid": "7d8c5a06bb19341d3854f008e0d96e98060c764e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e42fd0b5461b0b7c8afaf5eb1a52fcd764bfa79", "author": {"user": null}, "url": "https://github.com/dhis2/dhis2-core/commit/4e42fd0b5461b0b7c8afaf5eb1a52fcd764bfa79", "committedDate": "2020-01-17T09:44:34Z", "message": "chore: (2.34) Remove debug message\n\nDHIS2-5527"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NDYyMDEw", "url": "https://github.com/dhis2/dhis2-core/pull/4727#pullrequestreview-344462010", "createdAt": "2020-01-17T09:43:18Z", "commit": {"oid": "7d8c5a06bb19341d3854f008e0d96e98060c764e"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwOTo0MzoxOFrOFezllg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMDowMDo0MFrOFe0FXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg0NjgwNg==", "bodyText": "(minor) I'm not a big fan of returning an empty string to signal that the method completed succesfully. I'd rather make the method void and  throw a custom Runtime exception that you catch in the caller, and do the exception handler there. This also in light of the fact that the method saveSystemSetting on the same class is void.", "url": "https://github.com/dhis2/dhis2-core/pull/4727#discussion_r367846806", "createdAt": "2020-01-17T09:43:18Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-setting/src/main/java/org/hisp/dhis/setting/DefaultSystemSettingManager.java", "diffHunk": "@@ -155,6 +155,32 @@ public void saveSystemSetting( SettingKey key, Serializable value )\n         }\r\n     }\r\n \r\n+    @Override\r\n+    @Transactional\r\n+    public String saveSystemSettingTranslation( SettingKey key, String locale, String translation )\r\n+    {\r\n+        SystemSetting setting = systemSettingStore.getByName( key.getName() );\r\n+\r\n+        if ( setting == null )\r\n+        {\r\n+            return \"No entry found for key: \" + key;\r\n+        }\r\n+\r\n+        if ( translation.isEmpty() )\r\n+        {\r\n+            setting.getTranslations().remove( locale );\r\n+        }\r\n+        else\r\n+        {\r\n+            setting.getTranslations().put( locale, translation );\r\n+        }\r\n+\r\n+        settingCache.invalidate( key.getName() );\r\n+        systemSettingStore.update( setting );\r\n+\r\n+        return \"\";\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d8c5a06bb19341d3854f008e0d96e98060c764e"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg0ODQ1OQ==", "bodyText": "I would use Optional<String>: this is exactly the case for which Optional was introduced", "url": "https://github.com/dhis2/dhis2-core/pull/4727#discussion_r367848459", "createdAt": "2020-01-17T09:46:52Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-setting/src/main/java/org/hisp/dhis/setting/DefaultSystemSettingManager.java", "diffHunk": "@@ -229,6 +255,18 @@ public Serializable getSystemSetting( SettingKey key, Serializable defaultValue\n         }\r\n     }\r\n \r\n+    @Override\r\n+    public String getSystemSettingTranslation( SettingKey key, String locale )\r\n+    {\r\n+        SystemSetting setting = transactionTemplate.execute( status -> systemSettingStore.getByName( key.getName() ) );\r\n+        if ( setting != null )\r\n+        {\r\n+            return setting.getTranslation( locale );\r\n+        }\r\n+\r\n+        return \"\";\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d8c5a06bb19341d3854f008e0d96e98060c764e"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg0OTE0Ng==", "bodyText": "This is just a tip: since we introduced Lombok, this would be a great use case for using it :) You can remove all getter and setters and hashCode and toString", "url": "https://github.com/dhis2/dhis2-core/pull/4727#discussion_r367849146", "createdAt": "2020-01-17T09:48:17Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-setting/src/main/java/org/hisp/dhis/setting/SystemSetting.java", "diffHunk": "@@ -40,9 +42,8 @@\n import com.fasterxml.jackson.databind.ObjectMapper;\r\n import com.fasterxml.jackson.databind.exc.MismatchedInputException;\r\n \r\n+\r\n /**\r\n- * TODO make IdentifiableObject\r\n- * \r\n  * @author Stian Strandli\r\n  */\r\n public class SystemSetting\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d8c5a06bb19341d3854f008e0d96e98060c764e"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg1Mzg2NA==", "bodyText": "I think you can avoid nesting ifs:\nresponse.setHeader( ContextUtils.HEADER_CACHE_CONTROL, CacheControl.noCache().cachePrivate().getHeaderValue() );\n        \n        Optional<SettingKey> settingKey = SettingKey.getByName( key );\n        String localeToFetch = getLocaleToFetch( locale, key );\n        if ( !systemSettingManager.isConfidential( key ) && settingKey.isPresent()\n            && StringUtils.isNotEmpty( localeToFetch ) )\n        {\n            {\n                String translation = systemSettingManager.getSystemSettingTranslation( settingKey.get(),\n                    localeToFetch );\n\n                if ( !translation.isEmpty() )\n                {\n                    return translation;\n                }\n            }\n\n            Serializable setting = systemSettingManager.getSystemSetting( settingKey.get() );\n            return setting != null ? String.valueOf( setting ) : StringUtils.EMPTY;\n        }\n\n        return StringUtils.EMPTY;", "url": "https://github.com/dhis2/dhis2-core/pull/4727#discussion_r367853864", "createdAt": "2020-01-17T09:58:15Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/SystemSettingController.java", "diffHunk": "@@ -134,45 +179,66 @@ public void setSystemSettingV29( @RequestBody Map<String, Object> settings, Http\n     }\n \n     @RequestMapping( value = \"/{key}\", method = RequestMethod.GET, produces = ContextUtils.CONTENT_TYPE_TEXT )\n-    public @ResponseBody String getSystemSettingAsText( @PathVariable( \"key\" ) String key, HttpServletResponse response )\n+    public @ResponseBody String getSystemSettingOrTranslation( @PathVariable( \"key\" ) String key,\n+        @RequestParam( value = \"locale\", required = false ) String locale, HttpServletResponse response )\n     {\n         response.setHeader( ContextUtils.HEADER_CACHE_CONTROL, CacheControl.noCache().cachePrivate().getHeaderValue() );\n \n-        if ( systemSettingManager.isConfidential( key ) )\n-        {\n-            return StringUtils.EMPTY;\n-        }\n-        else\n+        if ( !systemSettingManager.isConfidential( key ) )\n         {\n             Optional<SettingKey> settingKey = SettingKey.getByName( key );\n \n-            Serializable setting;\n-\n             if ( settingKey.isPresent() )\n             {\n-                setting = systemSettingManager.getSystemSetting( settingKey.get() );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d8c5a06bb19341d3854f008e0d96e98060c764e"}, "originalPosition": 195}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg1NDk0Mg==", "bodyText": "if you want, you can shorten it even more:\nsettingKeys = keys.stream().map( SettingKey::getByName ).filter( Optional::isPresent ).map( Optional::get )\n                .collect( Collectors.toSet() );", "url": "https://github.com/dhis2/dhis2-core/pull/4727#discussion_r367854942", "createdAt": "2020-01-17T10:00:40Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/SystemSettingController.java", "diffHunk": "@@ -184,39 +250,42 @@ public void getSystemSettingsJsonP( @RequestParam( value = \"key\", required = fal\n         @RequestParam( defaultValue = \"callback\" ) String callback, HttpServletResponse response )\n         throws IOException\n     {\n-        Set<SettingKey> settingKeys = null;\n-\n-        if ( keys != null )\n-        {\n-            keys.removeIf( systemSettingManager::isConfidential );\n-            settingKeys = keys.stream().map( key -> SettingKey.getByName( key ) ).filter( settingKeyOpt -> settingKeyOpt.isPresent() )\n-                .map( settingKeyOpt -> settingKeyOpt.get() ).collect( Collectors.toSet() );\n-        }\n+        Set<SettingKey> settingKeys = getSettingKeysToFetch( keys );\n \n         response.setContentType( MediaType.APPLICATION_JSON_VALUE );\n         response.setHeader( ContextUtils.HEADER_CACHE_CONTROL, CacheControl.noCache().cachePrivate().getHeaderValue() );\n         renderService.toJsonP( response.getOutputStream(), getSystemSettings( settingKeys ), callback );\n     }\n \n-    private Map<String, Serializable> getSystemSettings( Set<SettingKey> keys )\n+    private Set<SettingKey> getSettingKeysToFetch( Set<String> keys )\n     {\n-        Map<String, Serializable> value;\n-        if ( keys != null && !keys.isEmpty() )\n+        Set<SettingKey> settingKeys;\n+\n+        if ( keys != null )\n         {\n-            value = systemSettingManager.getSystemSettings( keys );\n+            keys.removeIf( systemSettingManager::isConfidential );\n+            settingKeys = keys.stream().map( key -> SettingKey.getByName( key ) ).filter( settingKeyOpt -> settingKeyOpt.isPresent() )\n+                .map( settingKeyOpt -> settingKeyOpt.get() ).collect( Collectors.toSet() );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d8c5a06bb19341d3854f008e0d96e98060c764e"}, "originalPosition": 291}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7dcfcf2a8e8b3e68e30fd90b7339972286e274fc", "author": {"user": null}, "url": "https://github.com/dhis2/dhis2-core/commit/7dcfcf2a8e8b3e68e30fd90b7339972286e274fc", "committedDate": "2020-01-17T12:05:28Z", "message": "chore: (2.34) Improve structure of the code\n\n- Use Optional where applicable\n- Minimize nested if statements where possible\n\nDHIS2-5527"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2925, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}