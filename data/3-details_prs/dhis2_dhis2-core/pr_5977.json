{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxNTAyODM5", "number": 5977, "title": "feat: add support for application overloads (DHIS2-9092)", "bodyText": "This PR adds a filter to the dhis-web-portal project which implements overloading of bundled core apps (/dhis-web-xyz) with an installed app of the same name (/api/apps/xyz)\nTo simplify this change and prevent issues with server discovery we are NOT changing app paths here.  The core apps are still served at the same paths (/dhis-web-dashboard etc.) but under the hood they will serve an installed dashboard app if it exists.  The path consolidation should be targeted for 2.36\nTODO (in this PR):\n\n If they exist, serve installed apps with names matching core apps from /dhis-web-<name>\n 302 redirect /api/apps/<name> to /dhis-web-<name> for core apps\n Confirm caching behavior\n Hide override apps from modules list (apps menu)\n Fix raw URL handling for overridden apps (i.e. /dhis-web-scheduler should redirect to /dhis-web-scheduler/index.html, does in bundled app but not when overridden) - also applies to any requested directory\n Fix override name matching (uses label)\n Expose isBundledApp property in /api/apps response\n Expose correct baseUrl and launchUrl for bundled apps in API response\n Expose list of bundled / overridable apps at /api/apps/bundledAppNames (removed)\n Support filtering by isBundledApp in /api/apps\n\nTODO (after this PR):\n\nCheck performance - can/should we restrict the filter to a subset of routes in web.xml instead of /*?\nsecurity Consider namespacing core apps or creating a new app type to prevent accidental overrides\nsecurity Consider validating developer org of core apps for override?\nDeprecate getModules.action in favor of /api/apps\nAdd support for \"emergency\" deletion of installed apps (maybe in the /dhis-web-apps project, or just through documentation) This is critical if AppManagement app is broken by a continuous release, which would be really nasty\nLook into excluding manifest.webapp from app cache.\nIn App Management App\n\nSupport easy updating (maybe with an alert banner) of the App Management app itself, so we can defer these changes\nShow bundled / core apps in their own section, warn of overrides\nFix App Icon in App Management app for overrides\nFix link to overridden apps in App Management\n\n\n\nNB Includes some unrelated build automation additions, will remove those and put them in a separate PR\nCache Behavior\nindex.html (including when served from /) appears to always avoid the cache, which was the existing behavior and works well here.  All other app files ARE cached, but since the vast majority include a hash in the filename (referenced from index.html) this should be fine.  The notable exception is manifest.webapp which could be stale - we should look into possibly excluding this from the cache as well**.  More testing is needed, but for the moment the app behavior after an app install / uninstall appears functional and consistent.\nDemo\nA demo of this behavior (with an installed override of the Scheduler app) can be found at http://d2.winged.tech:8080 (admin:district)\nIncidental bugs fixed\nAdditional existing bugs in all Installed Apps fixed by this change:\n\n(in JCloudsAppStorageService.java) requests for non-existent files previously throw a 500 error instead of a 404\n(in JCloudsAppStorageService.java) requests pointing to directories (including the app route) would throw an error rather than serving index.html from that directory", "createdAt": "2020-08-21T08:49:55Z", "url": "https://github.com/dhis2/dhis2-core/pull/5977", "merged": true, "mergeCommit": {"oid": "5b8b47712c8d93e13d2e7164d7a037a3630fbbac"}, "closed": true, "closedAt": "2020-08-27T14:37:10Z", "author": {"login": "amcgee"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdBH0bxAFqTQ3MjY0NzA5Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdDBZm4gFqTQ3Njc4NjAwOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNjQ3MDk2", "url": "https://github.com/dhis2/dhis2-core/pull/5977#pullrequestreview-472647096", "createdAt": "2020-08-21T16:57:46Z", "commit": {"oid": "d4c83d6bffc6d71f65ff5ced30d0aae520c955c5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjo1Nzo0NlrOHE0hPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjo1Nzo0NlrOHE0hPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxNjgyOQ==", "bodyText": "Works, but normally favorable to:\n\nuse Lists over arrays for usability reasons\nuse immutable lists, so that the list cannot be modified during runtime by other code by accident, leading to unpredictable behavior\navoid public static final in interfaces as it is already implicit\nperhaps use ImmutableSet if the order is insignificant as it provides faster lookup\n\nimport com.google.common.collect.Lists;\n//..\nImmutableList<String> BUNDLED_APPS = ImmutableList.of(\n    \"app-management\", \"cache-cleaner\" );", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r474816829", "createdAt": "2020-08-21T16:57:46Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/appmanager/AppManager.java", "diffHunk": "@@ -43,6 +43,40 @@\n {\n     String ID = AppManager.class.getName();\n \n+    public static final String[] BUNDLED_APPS = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4c83d6bffc6d71f65ff5ced30d0aae520c955c5"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNzEwNjA1", "url": "https://github.com/dhis2/dhis2-core/pull/5977#pullrequestreview-472710605", "createdAt": "2020-08-21T18:43:35Z", "commit": {"oid": "d4c83d6bffc6d71f65ff5ced30d0aae520c955c5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxODo0MzozNVrOHE3hEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxODo0MzozNVrOHE3hEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg2NTkzOA==", "bodyText": "Move up to class scope as static final.", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r474865938", "createdAt": "2020-08-21T18:43:35Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package org.hisp.dhis.servlet.filter;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+import lombok.extern.slf4j.Slf4j;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.context.request.ServletWebRequest;\n+import org.springframework.util.StreamUtils;\n+\n+import org.hisp.dhis.util.DateUtils;\n+import org.hisp.dhis.appmanager.App;\n+import org.hisp.dhis.appmanager.AppManager;\n+import org.hisp.dhis.appmanager.AppStatus;\n+\n+/**\n+ * @author Austin McGee <austin@dhis2.org>\n+ */\n+ @Slf4j\n+public class AppOverrideFilter\n+    implements Filter\n+{\n+    @Autowired\n+    private AppManager appManager;\n+\n+    @Autowired\n+    private ObjectMapper jsonMapper;\n+\n+    // -------------------------------------------------------------------------\n+    // Filter implementation\n+    // -------------------------------------------------------------------------\n+\n+    @Override\n+    public void init( FilterConfig config )\n+    {\n+    }\n+\n+    // From AppController.java (some duplication)\n+    private void serveInstalledAppResource( App app, String resourcePath, HttpServletRequest request, HttpServletResponse response)\n+        throws IOException {\n+        // Get page requested\n+\n+        log.debug( String.format( \"Serving app resource: '%s'\", resourcePath ) );\n+\n+        // Handling of 'manifest.webapp'\n+        if ( \"manifest.webapp\".equals( resourcePath ) )\n+        {\n+            // If request was for manifest.webapp, check for * and replace with host\n+            if ( \"*\".equals( app.getActivities().getDhis().getHref() ) )\n+            {\n+                String contextPath = \"../\";\n+                log.debug( String.format( \"Manifest context path: '%s'\", contextPath ) );\n+                app.getActivities().getDhis().setHref( contextPath );\n+            }\n+\n+            jsonMapper.writeValue( response.getOutputStream(), app );\n+        }\n+        // Any other resource\n+        else\n+        {\n+            // Retrieve file\n+            Resource resource = appManager.getAppResource( app, resourcePath );\n+\n+            if ( resource == null )\n+            {\n+                response.sendError( HttpServletResponse.SC_NOT_FOUND );\n+                return;\n+            }\n+\n+            String filename = resource.getFilename();\n+            log.debug( String.format( \"App filename: '%s'\", filename ) );\n+\n+            if ( new ServletWebRequest( request, response ).checkNotModified( resource.lastModified() ) )\n+            {\n+                response.setStatus( HttpServletResponse.SC_NOT_MODIFIED );\n+                return;\n+            }\n+\n+            String mimeType = request.getSession().getServletContext().getMimeType( filename );\n+\n+            if ( mimeType != null )\n+            {\n+                response.setContentType( mimeType );\n+            }\n+\n+            response.setContentLength( (int) resource.contentLength() );\n+            response.setHeader( \"Last-Modified\", DateUtils.getHttpDateString( new Date( resource.lastModified() ) ) );\n+            StreamUtils.copy( resource.getInputStream(), response.getOutputStream() );\n+        }\n+    }\n+\n+    @Override\n+    public void doFilter( ServletRequest req, ServletResponse res, FilterChain chain )\n+        throws IOException, ServletException {\n+        HttpServletRequest request = (HttpServletRequest) req;\n+        HttpServletResponse response = (HttpServletResponse) res;\n+        String requestURI = request.getRequestURI();\n+\n+        List<String> bundledApps = Arrays.asList(AppManager.BUNDLED_APPS);\n+        String pattern = \"^/dhis-web-(\" + String.join(\"|\", bundledApps) + \")(?:/|$)(.*)\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4c83d6bffc6d71f65ff5ced30d0aae520c955c5"}, "originalPosition": 145}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNzExOTE2", "url": "https://github.com/dhis2/dhis2-core/pull/5977#pullrequestreview-472711916", "createdAt": "2020-08-21T18:45:45Z", "commit": {"oid": "d4c83d6bffc6d71f65ff5ced30d0aae520c955c5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxODo0NTo0NVrOHE3k8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxODo0NTo0NVrOHE3k8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg2NjkyOQ==", "bodyText": "Maybe use \"appOverrideFilter\" as name per convention instead of qualified class name.", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r474866929", "createdAt": "2020-08-21T18:45:45Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-web/dhis-web-portal/src/main/webapp/WEB-INF/web.xml", "diffHunk": "@@ -111,6 +111,12 @@\n     </init-param>\n   </filter>\n \n+  <filter>\n+    <filter-name>org.hisp.dhis.servlet.filter.AppOverrideFilter</filter-name>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4c83d6bffc6d71f65ff5ced30d0aae520c955c5"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczMzcwOTI1", "url": "https://github.com/dhis2/dhis2-core/pull/5977#pullrequestreview-473370925", "createdAt": "2020-08-24T11:17:17Z", "commit": {"oid": "81d6ebb8e178ca82d78130dea483cf48bff3e1c7"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMToxNzoxN1rOHFf7uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMToyMToxNFrOHFgCww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyODEyMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if ( app == null || app.getName() == null || AppManager.BUNDLED_APPS.contains(app.getName()) ) {\n          \n          \n            \n                    if ( app == null || app.getName() == null || AppManager.BUNDLED_APPS.contains( app.getName() ) ) {", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r475528120", "createdAt": "2020-08-24T11:17:17Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/appmanager/DefaultAppManager.java", "diffHunk": "@@ -308,7 +308,10 @@ public boolean isAccessible( App app )\n     @Override\n     public boolean isAccessible( App app, User user )\n     {\n-        if ( user == null || user.getUserCredentials() == null || app == null || app.getName() == null )\n+        if ( app == null || app.getName() == null || AppManager.BUNDLED_APPS.contains(app.getName()) ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81d6ebb8e178ca82d78130dea483cf48bff3e1c7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyODIyNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        } catch (LocationManagerException e) {\n          \n          \n            \n                        } catch ( LocationManagerException e ) {", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r475528225", "createdAt": "2020-08-24T11:17:31Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/appmanager/JCloudsAppStorageService.java", "diffHunk": "@@ -429,9 +430,21 @@ public Resource getAppResource( App app, String pageName )\n \n             String filepath = configurationProvider.getProperty( ConfigurationKey.FILESTORE_CONTAINER ) + \"/\" + key;\n             filepath = filepath.replaceAll( \"//\", \"/\" );\n-            File res = locationManager.getFileForReading( filepath );\n+            File res;\n+            \n+            try {\n+                res = locationManager.getFileForReading( filepath );\n+            } catch (LocationManagerException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81d6ebb8e178ca82d78130dea483cf48bff3e1c7"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyODM1NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            String indexPath = pageName.replaceAll(\"/+$\", \"\") + \"/index.html\";\n          \n          \n            \n                            String indexPath = pageName.replaceAll( \"/+$\", \"\" ) + \"/index.html\";", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r475528355", "createdAt": "2020-08-24T11:17:48Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/appmanager/JCloudsAppStorageService.java", "diffHunk": "@@ -429,9 +430,21 @@ public Resource getAppResource( App app, String pageName )\n \n             String filepath = configurationProvider.getProperty( ConfigurationKey.FILESTORE_CONTAINER ) + \"/\" + key;\n             filepath = filepath.replaceAll( \"//\", \"/\" );\n-            File res = locationManager.getFileForReading( filepath );\n+            File res;\n+            \n+            try {\n+                res = locationManager.getFileForReading( filepath );\n+            } catch (LocationManagerException e) {\n+                return null;\n+            }\n \n-            if ( res.exists() )\n+            if ( res.isDirectory() )\n+            {\n+                String indexPath = pageName.replaceAll(\"/+$\", \"\") + \"/index.html\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81d6ebb8e178ca82d78130dea483cf48bff3e1c7"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyODQ0Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            log.info(\"Resource \" + pageName + \" (\" + filepath + \" is a directory, serving \" + indexPath);\n          \n          \n            \n                            log.info( \"Resource \" + pageName + \" (\" + filepath + \" is a directory, serving \" + indexPath );", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r475528442", "createdAt": "2020-08-24T11:17:59Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/appmanager/JCloudsAppStorageService.java", "diffHunk": "@@ -429,9 +430,21 @@ public Resource getAppResource( App app, String pageName )\n \n             String filepath = configurationProvider.getProperty( ConfigurationKey.FILESTORE_CONTAINER ) + \"/\" + key;\n             filepath = filepath.replaceAll( \"//\", \"/\" );\n-            File res = locationManager.getFileForReading( filepath );\n+            File res;\n+            \n+            try {\n+                res = locationManager.getFileForReading( filepath );\n+            } catch (LocationManagerException e) {\n+                return null;\n+            }\n \n-            if ( res.exists() )\n+            if ( res.isDirectory() )\n+            {\n+                String indexPath = pageName.replaceAll(\"/+$\", \"\") + \"/index.html\";\n+                log.info(\"Resource \" + pageName + \" (\" + filepath + \" is a directory, serving \" + indexPath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81d6ebb8e178ca82d78130dea483cf48bff3e1c7"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyODUwMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            return getAppResource(app, indexPath);\n          \n          \n            \n                            return getAppResource( app, indexPath );", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r475528502", "createdAt": "2020-08-24T11:18:07Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/appmanager/JCloudsAppStorageService.java", "diffHunk": "@@ -429,9 +430,21 @@ public Resource getAppResource( App app, String pageName )\n \n             String filepath = configurationProvider.getProperty( ConfigurationKey.FILESTORE_CONTAINER ) + \"/\" + key;\n             filepath = filepath.replaceAll( \"//\", \"/\" );\n-            File res = locationManager.getFileForReading( filepath );\n+            File res;\n+            \n+            try {\n+                res = locationManager.getFileForReading( filepath );\n+            } catch (LocationManagerException e) {\n+                return null;\n+            }\n \n-            if ( res.exists() )\n+            if ( res.isDirectory() )\n+            {\n+                String indexPath = pageName.replaceAll(\"/+$\", \"\") + \"/index.html\";\n+                log.info(\"Resource \" + pageName + \" (\" + filepath + \" is a directory, serving \" + indexPath);\n+                return getAppResource(app, indexPath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81d6ebb8e178ca82d78130dea483cf48bff3e1c7"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyODc0Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private void serveInstalledAppResource( App app, String resourcePath, HttpServletRequest request, HttpServletResponse response)\n          \n          \n            \n                private void serveInstalledAppResource( App app, String resourcePath, HttpServletRequest request, HttpServletResponse response )", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r475528743", "createdAt": "2020-08-24T11:18:37Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package org.hisp.dhis.servlet.filter;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+import lombok.extern.slf4j.Slf4j;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.context.request.ServletWebRequest;\n+import org.springframework.util.StreamUtils;\n+\n+import org.hisp.dhis.util.DateUtils;\n+import org.hisp.dhis.appmanager.App;\n+import org.hisp.dhis.appmanager.AppManager;\n+import org.hisp.dhis.appmanager.AppStatus;\n+\n+/**\n+ * @author Austin McGee <austin@dhis2.org>\n+ */\n+ @Slf4j\n+public class AppOverrideFilter\n+    implements Filter\n+{\n+    @Autowired\n+    private AppManager appManager;\n+\n+    @Autowired\n+    private ObjectMapper jsonMapper;\n+\n+    public static final String APP_PATH_PATTERN = \"^/dhis-web-(\" + String.join(\"|\", AppManager.BUNDLED_APPS) + \")/(.*)\";\n+\n+    // -------------------------------------------------------------------------\n+    // Filter implementation\n+    // -------------------------------------------------------------------------\n+\n+    @Override\n+    public void init( FilterConfig config )\n+    {\n+    }\n+\n+    // From AppController.java (some duplication)\n+    private void serveInstalledAppResource( App app, String resourcePath, HttpServletRequest request, HttpServletResponse response)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81d6ebb8e178ca82d78130dea483cf48bff3e1c7"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyODk2Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Pattern p = Pattern.compile(APP_PATH_PATTERN);\n          \n          \n            \n                    Pattern p = Pattern.compile( APP_PATH_PATTERN );", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r475528963", "createdAt": "2020-08-24T11:19:04Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package org.hisp.dhis.servlet.filter;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+import lombok.extern.slf4j.Slf4j;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.context.request.ServletWebRequest;\n+import org.springframework.util.StreamUtils;\n+\n+import org.hisp.dhis.util.DateUtils;\n+import org.hisp.dhis.appmanager.App;\n+import org.hisp.dhis.appmanager.AppManager;\n+import org.hisp.dhis.appmanager.AppStatus;\n+\n+/**\n+ * @author Austin McGee <austin@dhis2.org>\n+ */\n+ @Slf4j\n+public class AppOverrideFilter\n+    implements Filter\n+{\n+    @Autowired\n+    private AppManager appManager;\n+\n+    @Autowired\n+    private ObjectMapper jsonMapper;\n+\n+    public static final String APP_PATH_PATTERN = \"^/dhis-web-(\" + String.join(\"|\", AppManager.BUNDLED_APPS) + \")/(.*)\";\n+\n+    // -------------------------------------------------------------------------\n+    // Filter implementation\n+    // -------------------------------------------------------------------------\n+\n+    @Override\n+    public void init( FilterConfig config )\n+    {\n+    }\n+\n+    // From AppController.java (some duplication)\n+    private void serveInstalledAppResource( App app, String resourcePath, HttpServletRequest request, HttpServletResponse response)\n+        throws IOException {\n+        // Get page requested\n+\n+        log.debug( String.format( \"Serving app resource: '%s'\", resourcePath ) );\n+\n+        // Handling of 'manifest.webapp'\n+        if ( \"manifest.webapp\".equals( resourcePath ) )\n+        {\n+            // If request was for manifest.webapp, check for * and replace with host\n+            if ( \"*\".equals( app.getActivities().getDhis().getHref() ) )\n+            {\n+                String contextPath = \"../\";\n+                log.debug( String.format( \"Manifest context path: '%s'\", contextPath ) );\n+                app.getActivities().getDhis().setHref( contextPath );\n+            }\n+\n+            jsonMapper.writeValue( response.getOutputStream(), app );\n+        }\n+        // Any other resource\n+        else\n+        {\n+            // Retrieve file\n+            Resource resource = appManager.getAppResource( app, resourcePath );\n+\n+            if ( resource == null )\n+            {\n+                response.sendError( HttpServletResponse.SC_NOT_FOUND );\n+                return;\n+            }\n+\n+            String filename = resource.getFilename();\n+            log.debug( String.format( \"App filename: '%s'\", filename ) );\n+\n+            if ( new ServletWebRequest( request, response ).checkNotModified( resource.lastModified() ) )\n+            {\n+                response.setStatus( HttpServletResponse.SC_NOT_MODIFIED );\n+                return;\n+            }\n+\n+            String mimeType = request.getSession().getServletContext().getMimeType( filename );\n+\n+            if ( mimeType != null )\n+            {\n+                response.setContentType( mimeType );\n+            }\n+\n+            response.setContentLength( (int) resource.contentLength() );\n+            response.setHeader( \"Last-Modified\", DateUtils.getHttpDateString( new Date( resource.lastModified() ) ) );\n+            StreamUtils.copy( resource.getInputStream(), response.getOutputStream() );\n+        }\n+    }\n+\n+    @Override\n+    public void doFilter( ServletRequest req, ServletResponse res, FilterChain chain )\n+        throws IOException, ServletException {\n+        HttpServletRequest request = (HttpServletRequest) req;\n+        HttpServletResponse response = (HttpServletResponse) res;\n+        String requestURI = request.getRequestURI();\n+\n+        Pattern p = Pattern.compile(APP_PATH_PATTERN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81d6ebb8e178ca82d78130dea483cf48bff3e1c7"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyOTAxOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Matcher m = p.matcher(requestURI);\n          \n          \n            \n                    Matcher m = p.matcher( requestURI );", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r475529018", "createdAt": "2020-08-24T11:19:12Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package org.hisp.dhis.servlet.filter;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+import lombok.extern.slf4j.Slf4j;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.context.request.ServletWebRequest;\n+import org.springframework.util.StreamUtils;\n+\n+import org.hisp.dhis.util.DateUtils;\n+import org.hisp.dhis.appmanager.App;\n+import org.hisp.dhis.appmanager.AppManager;\n+import org.hisp.dhis.appmanager.AppStatus;\n+\n+/**\n+ * @author Austin McGee <austin@dhis2.org>\n+ */\n+ @Slf4j\n+public class AppOverrideFilter\n+    implements Filter\n+{\n+    @Autowired\n+    private AppManager appManager;\n+\n+    @Autowired\n+    private ObjectMapper jsonMapper;\n+\n+    public static final String APP_PATH_PATTERN = \"^/dhis-web-(\" + String.join(\"|\", AppManager.BUNDLED_APPS) + \")/(.*)\";\n+\n+    // -------------------------------------------------------------------------\n+    // Filter implementation\n+    // -------------------------------------------------------------------------\n+\n+    @Override\n+    public void init( FilterConfig config )\n+    {\n+    }\n+\n+    // From AppController.java (some duplication)\n+    private void serveInstalledAppResource( App app, String resourcePath, HttpServletRequest request, HttpServletResponse response)\n+        throws IOException {\n+        // Get page requested\n+\n+        log.debug( String.format( \"Serving app resource: '%s'\", resourcePath ) );\n+\n+        // Handling of 'manifest.webapp'\n+        if ( \"manifest.webapp\".equals( resourcePath ) )\n+        {\n+            // If request was for manifest.webapp, check for * and replace with host\n+            if ( \"*\".equals( app.getActivities().getDhis().getHref() ) )\n+            {\n+                String contextPath = \"../\";\n+                log.debug( String.format( \"Manifest context path: '%s'\", contextPath ) );\n+                app.getActivities().getDhis().setHref( contextPath );\n+            }\n+\n+            jsonMapper.writeValue( response.getOutputStream(), app );\n+        }\n+        // Any other resource\n+        else\n+        {\n+            // Retrieve file\n+            Resource resource = appManager.getAppResource( app, resourcePath );\n+\n+            if ( resource == null )\n+            {\n+                response.sendError( HttpServletResponse.SC_NOT_FOUND );\n+                return;\n+            }\n+\n+            String filename = resource.getFilename();\n+            log.debug( String.format( \"App filename: '%s'\", filename ) );\n+\n+            if ( new ServletWebRequest( request, response ).checkNotModified( resource.lastModified() ) )\n+            {\n+                response.setStatus( HttpServletResponse.SC_NOT_MODIFIED );\n+                return;\n+            }\n+\n+            String mimeType = request.getSession().getServletContext().getMimeType( filename );\n+\n+            if ( mimeType != null )\n+            {\n+                response.setContentType( mimeType );\n+            }\n+\n+            response.setContentLength( (int) resource.contentLength() );\n+            response.setHeader( \"Last-Modified\", DateUtils.getHttpDateString( new Date( resource.lastModified() ) ) );\n+            StreamUtils.copy( resource.getInputStream(), response.getOutputStream() );\n+        }\n+    }\n+\n+    @Override\n+    public void doFilter( ServletRequest req, ServletResponse res, FilterChain chain )\n+        throws IOException, ServletException {\n+        HttpServletRequest request = (HttpServletRequest) req;\n+        HttpServletResponse response = (HttpServletResponse) res;\n+        String requestURI = request.getRequestURI();\n+\n+        Pattern p = Pattern.compile(APP_PATH_PATTERN);\n+        Matcher m = p.matcher(requestURI);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81d6ebb8e178ca82d78130dea483cf48bff3e1c7"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyOTA5OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        String namespace = m.group(0);\n          \n          \n            \n                        String namespace = m.group( 0 );", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r475529098", "createdAt": "2020-08-24T11:19:21Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package org.hisp.dhis.servlet.filter;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+import lombok.extern.slf4j.Slf4j;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.context.request.ServletWebRequest;\n+import org.springframework.util.StreamUtils;\n+\n+import org.hisp.dhis.util.DateUtils;\n+import org.hisp.dhis.appmanager.App;\n+import org.hisp.dhis.appmanager.AppManager;\n+import org.hisp.dhis.appmanager.AppStatus;\n+\n+/**\n+ * @author Austin McGee <austin@dhis2.org>\n+ */\n+ @Slf4j\n+public class AppOverrideFilter\n+    implements Filter\n+{\n+    @Autowired\n+    private AppManager appManager;\n+\n+    @Autowired\n+    private ObjectMapper jsonMapper;\n+\n+    public static final String APP_PATH_PATTERN = \"^/dhis-web-(\" + String.join(\"|\", AppManager.BUNDLED_APPS) + \")/(.*)\";\n+\n+    // -------------------------------------------------------------------------\n+    // Filter implementation\n+    // -------------------------------------------------------------------------\n+\n+    @Override\n+    public void init( FilterConfig config )\n+    {\n+    }\n+\n+    // From AppController.java (some duplication)\n+    private void serveInstalledAppResource( App app, String resourcePath, HttpServletRequest request, HttpServletResponse response)\n+        throws IOException {\n+        // Get page requested\n+\n+        log.debug( String.format( \"Serving app resource: '%s'\", resourcePath ) );\n+\n+        // Handling of 'manifest.webapp'\n+        if ( \"manifest.webapp\".equals( resourcePath ) )\n+        {\n+            // If request was for manifest.webapp, check for * and replace with host\n+            if ( \"*\".equals( app.getActivities().getDhis().getHref() ) )\n+            {\n+                String contextPath = \"../\";\n+                log.debug( String.format( \"Manifest context path: '%s'\", contextPath ) );\n+                app.getActivities().getDhis().setHref( contextPath );\n+            }\n+\n+            jsonMapper.writeValue( response.getOutputStream(), app );\n+        }\n+        // Any other resource\n+        else\n+        {\n+            // Retrieve file\n+            Resource resource = appManager.getAppResource( app, resourcePath );\n+\n+            if ( resource == null )\n+            {\n+                response.sendError( HttpServletResponse.SC_NOT_FOUND );\n+                return;\n+            }\n+\n+            String filename = resource.getFilename();\n+            log.debug( String.format( \"App filename: '%s'\", filename ) );\n+\n+            if ( new ServletWebRequest( request, response ).checkNotModified( resource.lastModified() ) )\n+            {\n+                response.setStatus( HttpServletResponse.SC_NOT_MODIFIED );\n+                return;\n+            }\n+\n+            String mimeType = request.getSession().getServletContext().getMimeType( filename );\n+\n+            if ( mimeType != null )\n+            {\n+                response.setContentType( mimeType );\n+            }\n+\n+            response.setContentLength( (int) resource.contentLength() );\n+            response.setHeader( \"Last-Modified\", DateUtils.getHttpDateString( new Date( resource.lastModified() ) ) );\n+            StreamUtils.copy( resource.getInputStream(), response.getOutputStream() );\n+        }\n+    }\n+\n+    @Override\n+    public void doFilter( ServletRequest req, ServletResponse res, FilterChain chain )\n+        throws IOException, ServletException {\n+        HttpServletRequest request = (HttpServletRequest) req;\n+        HttpServletResponse response = (HttpServletResponse) res;\n+        String requestURI = request.getRequestURI();\n+\n+        Pattern p = Pattern.compile(APP_PATH_PATTERN);\n+        Matcher m = p.matcher(requestURI);\n+\n+        if (m.find()) {\n+            String namespace = m.group(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81d6ebb8e178ca82d78130dea483cf48bff3e1c7"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyOTE0Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        String appName = m.group(1);\n          \n          \n            \n                        String appName = m.group( 1 );", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r475529143", "createdAt": "2020-08-24T11:19:27Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package org.hisp.dhis.servlet.filter;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+import lombok.extern.slf4j.Slf4j;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.context.request.ServletWebRequest;\n+import org.springframework.util.StreamUtils;\n+\n+import org.hisp.dhis.util.DateUtils;\n+import org.hisp.dhis.appmanager.App;\n+import org.hisp.dhis.appmanager.AppManager;\n+import org.hisp.dhis.appmanager.AppStatus;\n+\n+/**\n+ * @author Austin McGee <austin@dhis2.org>\n+ */\n+ @Slf4j\n+public class AppOverrideFilter\n+    implements Filter\n+{\n+    @Autowired\n+    private AppManager appManager;\n+\n+    @Autowired\n+    private ObjectMapper jsonMapper;\n+\n+    public static final String APP_PATH_PATTERN = \"^/dhis-web-(\" + String.join(\"|\", AppManager.BUNDLED_APPS) + \")/(.*)\";\n+\n+    // -------------------------------------------------------------------------\n+    // Filter implementation\n+    // -------------------------------------------------------------------------\n+\n+    @Override\n+    public void init( FilterConfig config )\n+    {\n+    }\n+\n+    // From AppController.java (some duplication)\n+    private void serveInstalledAppResource( App app, String resourcePath, HttpServletRequest request, HttpServletResponse response)\n+        throws IOException {\n+        // Get page requested\n+\n+        log.debug( String.format( \"Serving app resource: '%s'\", resourcePath ) );\n+\n+        // Handling of 'manifest.webapp'\n+        if ( \"manifest.webapp\".equals( resourcePath ) )\n+        {\n+            // If request was for manifest.webapp, check for * and replace with host\n+            if ( \"*\".equals( app.getActivities().getDhis().getHref() ) )\n+            {\n+                String contextPath = \"../\";\n+                log.debug( String.format( \"Manifest context path: '%s'\", contextPath ) );\n+                app.getActivities().getDhis().setHref( contextPath );\n+            }\n+\n+            jsonMapper.writeValue( response.getOutputStream(), app );\n+        }\n+        // Any other resource\n+        else\n+        {\n+            // Retrieve file\n+            Resource resource = appManager.getAppResource( app, resourcePath );\n+\n+            if ( resource == null )\n+            {\n+                response.sendError( HttpServletResponse.SC_NOT_FOUND );\n+                return;\n+            }\n+\n+            String filename = resource.getFilename();\n+            log.debug( String.format( \"App filename: '%s'\", filename ) );\n+\n+            if ( new ServletWebRequest( request, response ).checkNotModified( resource.lastModified() ) )\n+            {\n+                response.setStatus( HttpServletResponse.SC_NOT_MODIFIED );\n+                return;\n+            }\n+\n+            String mimeType = request.getSession().getServletContext().getMimeType( filename );\n+\n+            if ( mimeType != null )\n+            {\n+                response.setContentType( mimeType );\n+            }\n+\n+            response.setContentLength( (int) resource.contentLength() );\n+            response.setHeader( \"Last-Modified\", DateUtils.getHttpDateString( new Date( resource.lastModified() ) ) );\n+            StreamUtils.copy( resource.getInputStream(), response.getOutputStream() );\n+        }\n+    }\n+\n+    @Override\n+    public void doFilter( ServletRequest req, ServletResponse res, FilterChain chain )\n+        throws IOException, ServletException {\n+        HttpServletRequest request = (HttpServletRequest) req;\n+        HttpServletResponse response = (HttpServletResponse) res;\n+        String requestURI = request.getRequestURI();\n+\n+        Pattern p = Pattern.compile(APP_PATH_PATTERN);\n+        Matcher m = p.matcher(requestURI);\n+\n+        if (m.find()) {\n+            String namespace = m.group(0);\n+            String appName = m.group(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81d6ebb8e178ca82d78130dea483cf48bff3e1c7"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyOTE5OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        String resourcePath = m.group(2);\n          \n          \n            \n                        String resourcePath = m.group( 2 );", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r475529198", "createdAt": "2020-08-24T11:19:33Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package org.hisp.dhis.servlet.filter;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+import lombok.extern.slf4j.Slf4j;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.context.request.ServletWebRequest;\n+import org.springframework.util.StreamUtils;\n+\n+import org.hisp.dhis.util.DateUtils;\n+import org.hisp.dhis.appmanager.App;\n+import org.hisp.dhis.appmanager.AppManager;\n+import org.hisp.dhis.appmanager.AppStatus;\n+\n+/**\n+ * @author Austin McGee <austin@dhis2.org>\n+ */\n+ @Slf4j\n+public class AppOverrideFilter\n+    implements Filter\n+{\n+    @Autowired\n+    private AppManager appManager;\n+\n+    @Autowired\n+    private ObjectMapper jsonMapper;\n+\n+    public static final String APP_PATH_PATTERN = \"^/dhis-web-(\" + String.join(\"|\", AppManager.BUNDLED_APPS) + \")/(.*)\";\n+\n+    // -------------------------------------------------------------------------\n+    // Filter implementation\n+    // -------------------------------------------------------------------------\n+\n+    @Override\n+    public void init( FilterConfig config )\n+    {\n+    }\n+\n+    // From AppController.java (some duplication)\n+    private void serveInstalledAppResource( App app, String resourcePath, HttpServletRequest request, HttpServletResponse response)\n+        throws IOException {\n+        // Get page requested\n+\n+        log.debug( String.format( \"Serving app resource: '%s'\", resourcePath ) );\n+\n+        // Handling of 'manifest.webapp'\n+        if ( \"manifest.webapp\".equals( resourcePath ) )\n+        {\n+            // If request was for manifest.webapp, check for * and replace with host\n+            if ( \"*\".equals( app.getActivities().getDhis().getHref() ) )\n+            {\n+                String contextPath = \"../\";\n+                log.debug( String.format( \"Manifest context path: '%s'\", contextPath ) );\n+                app.getActivities().getDhis().setHref( contextPath );\n+            }\n+\n+            jsonMapper.writeValue( response.getOutputStream(), app );\n+        }\n+        // Any other resource\n+        else\n+        {\n+            // Retrieve file\n+            Resource resource = appManager.getAppResource( app, resourcePath );\n+\n+            if ( resource == null )\n+            {\n+                response.sendError( HttpServletResponse.SC_NOT_FOUND );\n+                return;\n+            }\n+\n+            String filename = resource.getFilename();\n+            log.debug( String.format( \"App filename: '%s'\", filename ) );\n+\n+            if ( new ServletWebRequest( request, response ).checkNotModified( resource.lastModified() ) )\n+            {\n+                response.setStatus( HttpServletResponse.SC_NOT_MODIFIED );\n+                return;\n+            }\n+\n+            String mimeType = request.getSession().getServletContext().getMimeType( filename );\n+\n+            if ( mimeType != null )\n+            {\n+                response.setContentType( mimeType );\n+            }\n+\n+            response.setContentLength( (int) resource.contentLength() );\n+            response.setHeader( \"Last-Modified\", DateUtils.getHttpDateString( new Date( resource.lastModified() ) ) );\n+            StreamUtils.copy( resource.getInputStream(), response.getOutputStream() );\n+        }\n+    }\n+\n+    @Override\n+    public void doFilter( ServletRequest req, ServletResponse res, FilterChain chain )\n+        throws IOException, ServletException {\n+        HttpServletRequest request = (HttpServletRequest) req;\n+        HttpServletResponse response = (HttpServletResponse) res;\n+        String requestURI = request.getRequestURI();\n+\n+        Pattern p = Pattern.compile(APP_PATH_PATTERN);\n+        Matcher m = p.matcher(requestURI);\n+\n+        if (m.find()) {\n+            String namespace = m.group(0);\n+            String appName = m.group(1);\n+            String resourcePath = m.group(2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81d6ebb8e178ca82d78130dea483cf48bff3e1c7"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyOTI0OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (m.find()) {\n          \n          \n            \n                    if ( m.find() ) {", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r475529248", "createdAt": "2020-08-24T11:19:41Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package org.hisp.dhis.servlet.filter;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+import lombok.extern.slf4j.Slf4j;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.context.request.ServletWebRequest;\n+import org.springframework.util.StreamUtils;\n+\n+import org.hisp.dhis.util.DateUtils;\n+import org.hisp.dhis.appmanager.App;\n+import org.hisp.dhis.appmanager.AppManager;\n+import org.hisp.dhis.appmanager.AppStatus;\n+\n+/**\n+ * @author Austin McGee <austin@dhis2.org>\n+ */\n+ @Slf4j\n+public class AppOverrideFilter\n+    implements Filter\n+{\n+    @Autowired\n+    private AppManager appManager;\n+\n+    @Autowired\n+    private ObjectMapper jsonMapper;\n+\n+    public static final String APP_PATH_PATTERN = \"^/dhis-web-(\" + String.join(\"|\", AppManager.BUNDLED_APPS) + \")/(.*)\";\n+\n+    // -------------------------------------------------------------------------\n+    // Filter implementation\n+    // -------------------------------------------------------------------------\n+\n+    @Override\n+    public void init( FilterConfig config )\n+    {\n+    }\n+\n+    // From AppController.java (some duplication)\n+    private void serveInstalledAppResource( App app, String resourcePath, HttpServletRequest request, HttpServletResponse response)\n+        throws IOException {\n+        // Get page requested\n+\n+        log.debug( String.format( \"Serving app resource: '%s'\", resourcePath ) );\n+\n+        // Handling of 'manifest.webapp'\n+        if ( \"manifest.webapp\".equals( resourcePath ) )\n+        {\n+            // If request was for manifest.webapp, check for * and replace with host\n+            if ( \"*\".equals( app.getActivities().getDhis().getHref() ) )\n+            {\n+                String contextPath = \"../\";\n+                log.debug( String.format( \"Manifest context path: '%s'\", contextPath ) );\n+                app.getActivities().getDhis().setHref( contextPath );\n+            }\n+\n+            jsonMapper.writeValue( response.getOutputStream(), app );\n+        }\n+        // Any other resource\n+        else\n+        {\n+            // Retrieve file\n+            Resource resource = appManager.getAppResource( app, resourcePath );\n+\n+            if ( resource == null )\n+            {\n+                response.sendError( HttpServletResponse.SC_NOT_FOUND );\n+                return;\n+            }\n+\n+            String filename = resource.getFilename();\n+            log.debug( String.format( \"App filename: '%s'\", filename ) );\n+\n+            if ( new ServletWebRequest( request, response ).checkNotModified( resource.lastModified() ) )\n+            {\n+                response.setStatus( HttpServletResponse.SC_NOT_MODIFIED );\n+                return;\n+            }\n+\n+            String mimeType = request.getSession().getServletContext().getMimeType( filename );\n+\n+            if ( mimeType != null )\n+            {\n+                response.setContentType( mimeType );\n+            }\n+\n+            response.setContentLength( (int) resource.contentLength() );\n+            response.setHeader( \"Last-Modified\", DateUtils.getHttpDateString( new Date( resource.lastModified() ) ) );\n+            StreamUtils.copy( resource.getInputStream(), response.getOutputStream() );\n+        }\n+    }\n+\n+    @Override\n+    public void doFilter( ServletRequest req, ServletResponse res, FilterChain chain )\n+        throws IOException, ServletException {\n+        HttpServletRequest request = (HttpServletRequest) req;\n+        HttpServletResponse response = (HttpServletResponse) res;\n+        String requestURI = request.getRequestURI();\n+\n+        Pattern p = Pattern.compile(APP_PATH_PATTERN);\n+        Matcher m = p.matcher(requestURI);\n+\n+        if (m.find()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81d6ebb8e178ca82d78130dea483cf48bff3e1c7"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyOTM3Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        log.info(\"AppOverrideFilter :: Matched for URI \" + requestURI);\n          \n          \n            \n                        log.info( \"AppOverrideFilter :: Matched for URI \" + requestURI );", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r475529376", "createdAt": "2020-08-24T11:20:00Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package org.hisp.dhis.servlet.filter;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+import lombok.extern.slf4j.Slf4j;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.context.request.ServletWebRequest;\n+import org.springframework.util.StreamUtils;\n+\n+import org.hisp.dhis.util.DateUtils;\n+import org.hisp.dhis.appmanager.App;\n+import org.hisp.dhis.appmanager.AppManager;\n+import org.hisp.dhis.appmanager.AppStatus;\n+\n+/**\n+ * @author Austin McGee <austin@dhis2.org>\n+ */\n+ @Slf4j\n+public class AppOverrideFilter\n+    implements Filter\n+{\n+    @Autowired\n+    private AppManager appManager;\n+\n+    @Autowired\n+    private ObjectMapper jsonMapper;\n+\n+    public static final String APP_PATH_PATTERN = \"^/dhis-web-(\" + String.join(\"|\", AppManager.BUNDLED_APPS) + \")/(.*)\";\n+\n+    // -------------------------------------------------------------------------\n+    // Filter implementation\n+    // -------------------------------------------------------------------------\n+\n+    @Override\n+    public void init( FilterConfig config )\n+    {\n+    }\n+\n+    // From AppController.java (some duplication)\n+    private void serveInstalledAppResource( App app, String resourcePath, HttpServletRequest request, HttpServletResponse response)\n+        throws IOException {\n+        // Get page requested\n+\n+        log.debug( String.format( \"Serving app resource: '%s'\", resourcePath ) );\n+\n+        // Handling of 'manifest.webapp'\n+        if ( \"manifest.webapp\".equals( resourcePath ) )\n+        {\n+            // If request was for manifest.webapp, check for * and replace with host\n+            if ( \"*\".equals( app.getActivities().getDhis().getHref() ) )\n+            {\n+                String contextPath = \"../\";\n+                log.debug( String.format( \"Manifest context path: '%s'\", contextPath ) );\n+                app.getActivities().getDhis().setHref( contextPath );\n+            }\n+\n+            jsonMapper.writeValue( response.getOutputStream(), app );\n+        }\n+        // Any other resource\n+        else\n+        {\n+            // Retrieve file\n+            Resource resource = appManager.getAppResource( app, resourcePath );\n+\n+            if ( resource == null )\n+            {\n+                response.sendError( HttpServletResponse.SC_NOT_FOUND );\n+                return;\n+            }\n+\n+            String filename = resource.getFilename();\n+            log.debug( String.format( \"App filename: '%s'\", filename ) );\n+\n+            if ( new ServletWebRequest( request, response ).checkNotModified( resource.lastModified() ) )\n+            {\n+                response.setStatus( HttpServletResponse.SC_NOT_MODIFIED );\n+                return;\n+            }\n+\n+            String mimeType = request.getSession().getServletContext().getMimeType( filename );\n+\n+            if ( mimeType != null )\n+            {\n+                response.setContentType( mimeType );\n+            }\n+\n+            response.setContentLength( (int) resource.contentLength() );\n+            response.setHeader( \"Last-Modified\", DateUtils.getHttpDateString( new Date( resource.lastModified() ) ) );\n+            StreamUtils.copy( resource.getInputStream(), response.getOutputStream() );\n+        }\n+    }\n+\n+    @Override\n+    public void doFilter( ServletRequest req, ServletResponse res, FilterChain chain )\n+        throws IOException, ServletException {\n+        HttpServletRequest request = (HttpServletRequest) req;\n+        HttpServletResponse response = (HttpServletResponse) res;\n+        String requestURI = request.getRequestURI();\n+\n+        Pattern p = Pattern.compile(APP_PATH_PATTERN);\n+        Matcher m = p.matcher(requestURI);\n+\n+        if (m.find()) {\n+            String namespace = m.group(0);\n+            String appName = m.group(1);\n+            String resourcePath = m.group(2);\n+\n+            log.info(\"AppOverrideFilter :: Matched for URI \" + requestURI);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81d6ebb8e178ca82d78130dea483cf48bff3e1c7"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyOTQyMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        App app = appManager.getApp(appName);\n          \n          \n            \n                        App app = appManager.getApp( appName );", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r475529422", "createdAt": "2020-08-24T11:20:06Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package org.hisp.dhis.servlet.filter;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+import lombok.extern.slf4j.Slf4j;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.context.request.ServletWebRequest;\n+import org.springframework.util.StreamUtils;\n+\n+import org.hisp.dhis.util.DateUtils;\n+import org.hisp.dhis.appmanager.App;\n+import org.hisp.dhis.appmanager.AppManager;\n+import org.hisp.dhis.appmanager.AppStatus;\n+\n+/**\n+ * @author Austin McGee <austin@dhis2.org>\n+ */\n+ @Slf4j\n+public class AppOverrideFilter\n+    implements Filter\n+{\n+    @Autowired\n+    private AppManager appManager;\n+\n+    @Autowired\n+    private ObjectMapper jsonMapper;\n+\n+    public static final String APP_PATH_PATTERN = \"^/dhis-web-(\" + String.join(\"|\", AppManager.BUNDLED_APPS) + \")/(.*)\";\n+\n+    // -------------------------------------------------------------------------\n+    // Filter implementation\n+    // -------------------------------------------------------------------------\n+\n+    @Override\n+    public void init( FilterConfig config )\n+    {\n+    }\n+\n+    // From AppController.java (some duplication)\n+    private void serveInstalledAppResource( App app, String resourcePath, HttpServletRequest request, HttpServletResponse response)\n+        throws IOException {\n+        // Get page requested\n+\n+        log.debug( String.format( \"Serving app resource: '%s'\", resourcePath ) );\n+\n+        // Handling of 'manifest.webapp'\n+        if ( \"manifest.webapp\".equals( resourcePath ) )\n+        {\n+            // If request was for manifest.webapp, check for * and replace with host\n+            if ( \"*\".equals( app.getActivities().getDhis().getHref() ) )\n+            {\n+                String contextPath = \"../\";\n+                log.debug( String.format( \"Manifest context path: '%s'\", contextPath ) );\n+                app.getActivities().getDhis().setHref( contextPath );\n+            }\n+\n+            jsonMapper.writeValue( response.getOutputStream(), app );\n+        }\n+        // Any other resource\n+        else\n+        {\n+            // Retrieve file\n+            Resource resource = appManager.getAppResource( app, resourcePath );\n+\n+            if ( resource == null )\n+            {\n+                response.sendError( HttpServletResponse.SC_NOT_FOUND );\n+                return;\n+            }\n+\n+            String filename = resource.getFilename();\n+            log.debug( String.format( \"App filename: '%s'\", filename ) );\n+\n+            if ( new ServletWebRequest( request, response ).checkNotModified( resource.lastModified() ) )\n+            {\n+                response.setStatus( HttpServletResponse.SC_NOT_MODIFIED );\n+                return;\n+            }\n+\n+            String mimeType = request.getSession().getServletContext().getMimeType( filename );\n+\n+            if ( mimeType != null )\n+            {\n+                response.setContentType( mimeType );\n+            }\n+\n+            response.setContentLength( (int) resource.contentLength() );\n+            response.setHeader( \"Last-Modified\", DateUtils.getHttpDateString( new Date( resource.lastModified() ) ) );\n+            StreamUtils.copy( resource.getInputStream(), response.getOutputStream() );\n+        }\n+    }\n+\n+    @Override\n+    public void doFilter( ServletRequest req, ServletResponse res, FilterChain chain )\n+        throws IOException, ServletException {\n+        HttpServletRequest request = (HttpServletRequest) req;\n+        HttpServletResponse response = (HttpServletResponse) res;\n+        String requestURI = request.getRequestURI();\n+\n+        Pattern p = Pattern.compile(APP_PATH_PATTERN);\n+        Matcher m = p.matcher(requestURI);\n+\n+        if (m.find()) {\n+            String namespace = m.group(0);\n+            String appName = m.group(1);\n+            String resourcePath = m.group(2);\n+\n+            log.info(\"AppOverrideFilter :: Matched for URI \" + requestURI);\n+\n+            App app = appManager.getApp(appName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81d6ebb8e178ca82d78130dea483cf48bff3e1c7"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyOTQ5NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (app != null && app.getAppState() != AppStatus.DELETION_IN_PROGRESS) {\n          \n          \n            \n                        if ( app != null && app.getAppState() != AppStatus.DELETION_IN_PROGRESS ) {", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r475529495", "createdAt": "2020-08-24T11:20:15Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package org.hisp.dhis.servlet.filter;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+import lombok.extern.slf4j.Slf4j;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.context.request.ServletWebRequest;\n+import org.springframework.util.StreamUtils;\n+\n+import org.hisp.dhis.util.DateUtils;\n+import org.hisp.dhis.appmanager.App;\n+import org.hisp.dhis.appmanager.AppManager;\n+import org.hisp.dhis.appmanager.AppStatus;\n+\n+/**\n+ * @author Austin McGee <austin@dhis2.org>\n+ */\n+ @Slf4j\n+public class AppOverrideFilter\n+    implements Filter\n+{\n+    @Autowired\n+    private AppManager appManager;\n+\n+    @Autowired\n+    private ObjectMapper jsonMapper;\n+\n+    public static final String APP_PATH_PATTERN = \"^/dhis-web-(\" + String.join(\"|\", AppManager.BUNDLED_APPS) + \")/(.*)\";\n+\n+    // -------------------------------------------------------------------------\n+    // Filter implementation\n+    // -------------------------------------------------------------------------\n+\n+    @Override\n+    public void init( FilterConfig config )\n+    {\n+    }\n+\n+    // From AppController.java (some duplication)\n+    private void serveInstalledAppResource( App app, String resourcePath, HttpServletRequest request, HttpServletResponse response)\n+        throws IOException {\n+        // Get page requested\n+\n+        log.debug( String.format( \"Serving app resource: '%s'\", resourcePath ) );\n+\n+        // Handling of 'manifest.webapp'\n+        if ( \"manifest.webapp\".equals( resourcePath ) )\n+        {\n+            // If request was for manifest.webapp, check for * and replace with host\n+            if ( \"*\".equals( app.getActivities().getDhis().getHref() ) )\n+            {\n+                String contextPath = \"../\";\n+                log.debug( String.format( \"Manifest context path: '%s'\", contextPath ) );\n+                app.getActivities().getDhis().setHref( contextPath );\n+            }\n+\n+            jsonMapper.writeValue( response.getOutputStream(), app );\n+        }\n+        // Any other resource\n+        else\n+        {\n+            // Retrieve file\n+            Resource resource = appManager.getAppResource( app, resourcePath );\n+\n+            if ( resource == null )\n+            {\n+                response.sendError( HttpServletResponse.SC_NOT_FOUND );\n+                return;\n+            }\n+\n+            String filename = resource.getFilename();\n+            log.debug( String.format( \"App filename: '%s'\", filename ) );\n+\n+            if ( new ServletWebRequest( request, response ).checkNotModified( resource.lastModified() ) )\n+            {\n+                response.setStatus( HttpServletResponse.SC_NOT_MODIFIED );\n+                return;\n+            }\n+\n+            String mimeType = request.getSession().getServletContext().getMimeType( filename );\n+\n+            if ( mimeType != null )\n+            {\n+                response.setContentType( mimeType );\n+            }\n+\n+            response.setContentLength( (int) resource.contentLength() );\n+            response.setHeader( \"Last-Modified\", DateUtils.getHttpDateString( new Date( resource.lastModified() ) ) );\n+            StreamUtils.copy( resource.getInputStream(), response.getOutputStream() );\n+        }\n+    }\n+\n+    @Override\n+    public void doFilter( ServletRequest req, ServletResponse res, FilterChain chain )\n+        throws IOException, ServletException {\n+        HttpServletRequest request = (HttpServletRequest) req;\n+        HttpServletResponse response = (HttpServletResponse) res;\n+        String requestURI = request.getRequestURI();\n+\n+        Pattern p = Pattern.compile(APP_PATH_PATTERN);\n+        Matcher m = p.matcher(requestURI);\n+\n+        if (m.find()) {\n+            String namespace = m.group(0);\n+            String appName = m.group(1);\n+            String resourcePath = m.group(2);\n+\n+            log.info(\"AppOverrideFilter :: Matched for URI \" + requestURI);\n+\n+            App app = appManager.getApp(appName);\n+\n+            if (app != null && app.getAppState() != AppStatus.DELETION_IN_PROGRESS) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81d6ebb8e178ca82d78130dea483cf48bff3e1c7"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyOTU3NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            log.info(\"AppOverrideFilter :: Overridden app \" + appName + \" found, serving override\");\n          \n          \n            \n                            log.info( \"AppOverrideFilter :: Overridden app \" + appName + \" found, serving override\" );", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r475529575", "createdAt": "2020-08-24T11:20:26Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package org.hisp.dhis.servlet.filter;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+import lombok.extern.slf4j.Slf4j;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.context.request.ServletWebRequest;\n+import org.springframework.util.StreamUtils;\n+\n+import org.hisp.dhis.util.DateUtils;\n+import org.hisp.dhis.appmanager.App;\n+import org.hisp.dhis.appmanager.AppManager;\n+import org.hisp.dhis.appmanager.AppStatus;\n+\n+/**\n+ * @author Austin McGee <austin@dhis2.org>\n+ */\n+ @Slf4j\n+public class AppOverrideFilter\n+    implements Filter\n+{\n+    @Autowired\n+    private AppManager appManager;\n+\n+    @Autowired\n+    private ObjectMapper jsonMapper;\n+\n+    public static final String APP_PATH_PATTERN = \"^/dhis-web-(\" + String.join(\"|\", AppManager.BUNDLED_APPS) + \")/(.*)\";\n+\n+    // -------------------------------------------------------------------------\n+    // Filter implementation\n+    // -------------------------------------------------------------------------\n+\n+    @Override\n+    public void init( FilterConfig config )\n+    {\n+    }\n+\n+    // From AppController.java (some duplication)\n+    private void serveInstalledAppResource( App app, String resourcePath, HttpServletRequest request, HttpServletResponse response)\n+        throws IOException {\n+        // Get page requested\n+\n+        log.debug( String.format( \"Serving app resource: '%s'\", resourcePath ) );\n+\n+        // Handling of 'manifest.webapp'\n+        if ( \"manifest.webapp\".equals( resourcePath ) )\n+        {\n+            // If request was for manifest.webapp, check for * and replace with host\n+            if ( \"*\".equals( app.getActivities().getDhis().getHref() ) )\n+            {\n+                String contextPath = \"../\";\n+                log.debug( String.format( \"Manifest context path: '%s'\", contextPath ) );\n+                app.getActivities().getDhis().setHref( contextPath );\n+            }\n+\n+            jsonMapper.writeValue( response.getOutputStream(), app );\n+        }\n+        // Any other resource\n+        else\n+        {\n+            // Retrieve file\n+            Resource resource = appManager.getAppResource( app, resourcePath );\n+\n+            if ( resource == null )\n+            {\n+                response.sendError( HttpServletResponse.SC_NOT_FOUND );\n+                return;\n+            }\n+\n+            String filename = resource.getFilename();\n+            log.debug( String.format( \"App filename: '%s'\", filename ) );\n+\n+            if ( new ServletWebRequest( request, response ).checkNotModified( resource.lastModified() ) )\n+            {\n+                response.setStatus( HttpServletResponse.SC_NOT_MODIFIED );\n+                return;\n+            }\n+\n+            String mimeType = request.getSession().getServletContext().getMimeType( filename );\n+\n+            if ( mimeType != null )\n+            {\n+                response.setContentType( mimeType );\n+            }\n+\n+            response.setContentLength( (int) resource.contentLength() );\n+            response.setHeader( \"Last-Modified\", DateUtils.getHttpDateString( new Date( resource.lastModified() ) ) );\n+            StreamUtils.copy( resource.getInputStream(), response.getOutputStream() );\n+        }\n+    }\n+\n+    @Override\n+    public void doFilter( ServletRequest req, ServletResponse res, FilterChain chain )\n+        throws IOException, ServletException {\n+        HttpServletRequest request = (HttpServletRequest) req;\n+        HttpServletResponse response = (HttpServletResponse) res;\n+        String requestURI = request.getRequestURI();\n+\n+        Pattern p = Pattern.compile(APP_PATH_PATTERN);\n+        Matcher m = p.matcher(requestURI);\n+\n+        if (m.find()) {\n+            String namespace = m.group(0);\n+            String appName = m.group(1);\n+            String resourcePath = m.group(2);\n+\n+            log.info(\"AppOverrideFilter :: Matched for URI \" + requestURI);\n+\n+            App app = appManager.getApp(appName);\n+\n+            if (app != null && app.getAppState() != AppStatus.DELETION_IN_PROGRESS) {\n+                log.info(\"AppOverrideFilter :: Overridden app \" + appName + \" found, serving override\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81d6ebb8e178ca82d78130dea483cf48bff3e1c7"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyOTY0Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            serveInstalledAppResource(app, resourcePath, request, response);\n          \n          \n            \n                            serveInstalledAppResource( app, resourcePath, request, response );", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r475529643", "createdAt": "2020-08-24T11:20:35Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package org.hisp.dhis.servlet.filter;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+import lombok.extern.slf4j.Slf4j;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.context.request.ServletWebRequest;\n+import org.springframework.util.StreamUtils;\n+\n+import org.hisp.dhis.util.DateUtils;\n+import org.hisp.dhis.appmanager.App;\n+import org.hisp.dhis.appmanager.AppManager;\n+import org.hisp.dhis.appmanager.AppStatus;\n+\n+/**\n+ * @author Austin McGee <austin@dhis2.org>\n+ */\n+ @Slf4j\n+public class AppOverrideFilter\n+    implements Filter\n+{\n+    @Autowired\n+    private AppManager appManager;\n+\n+    @Autowired\n+    private ObjectMapper jsonMapper;\n+\n+    public static final String APP_PATH_PATTERN = \"^/dhis-web-(\" + String.join(\"|\", AppManager.BUNDLED_APPS) + \")/(.*)\";\n+\n+    // -------------------------------------------------------------------------\n+    // Filter implementation\n+    // -------------------------------------------------------------------------\n+\n+    @Override\n+    public void init( FilterConfig config )\n+    {\n+    }\n+\n+    // From AppController.java (some duplication)\n+    private void serveInstalledAppResource( App app, String resourcePath, HttpServletRequest request, HttpServletResponse response)\n+        throws IOException {\n+        // Get page requested\n+\n+        log.debug( String.format( \"Serving app resource: '%s'\", resourcePath ) );\n+\n+        // Handling of 'manifest.webapp'\n+        if ( \"manifest.webapp\".equals( resourcePath ) )\n+        {\n+            // If request was for manifest.webapp, check for * and replace with host\n+            if ( \"*\".equals( app.getActivities().getDhis().getHref() ) )\n+            {\n+                String contextPath = \"../\";\n+                log.debug( String.format( \"Manifest context path: '%s'\", contextPath ) );\n+                app.getActivities().getDhis().setHref( contextPath );\n+            }\n+\n+            jsonMapper.writeValue( response.getOutputStream(), app );\n+        }\n+        // Any other resource\n+        else\n+        {\n+            // Retrieve file\n+            Resource resource = appManager.getAppResource( app, resourcePath );\n+\n+            if ( resource == null )\n+            {\n+                response.sendError( HttpServletResponse.SC_NOT_FOUND );\n+                return;\n+            }\n+\n+            String filename = resource.getFilename();\n+            log.debug( String.format( \"App filename: '%s'\", filename ) );\n+\n+            if ( new ServletWebRequest( request, response ).checkNotModified( resource.lastModified() ) )\n+            {\n+                response.setStatus( HttpServletResponse.SC_NOT_MODIFIED );\n+                return;\n+            }\n+\n+            String mimeType = request.getSession().getServletContext().getMimeType( filename );\n+\n+            if ( mimeType != null )\n+            {\n+                response.setContentType( mimeType );\n+            }\n+\n+            response.setContentLength( (int) resource.contentLength() );\n+            response.setHeader( \"Last-Modified\", DateUtils.getHttpDateString( new Date( resource.lastModified() ) ) );\n+            StreamUtils.copy( resource.getInputStream(), response.getOutputStream() );\n+        }\n+    }\n+\n+    @Override\n+    public void doFilter( ServletRequest req, ServletResponse res, FilterChain chain )\n+        throws IOException, ServletException {\n+        HttpServletRequest request = (HttpServletRequest) req;\n+        HttpServletResponse response = (HttpServletResponse) res;\n+        String requestURI = request.getRequestURI();\n+\n+        Pattern p = Pattern.compile(APP_PATH_PATTERN);\n+        Matcher m = p.matcher(requestURI);\n+\n+        if (m.find()) {\n+            String namespace = m.group(0);\n+            String appName = m.group(1);\n+            String resourcePath = m.group(2);\n+\n+            log.info(\"AppOverrideFilter :: Matched for URI \" + requestURI);\n+\n+            App app = appManager.getApp(appName);\n+\n+            if (app != null && app.getAppState() != AppStatus.DELETION_IN_PROGRESS) {\n+                log.info(\"AppOverrideFilter :: Overridden app \" + appName + \" found, serving override\");\n+                serveInstalledAppResource(app, resourcePath, request, response);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81d6ebb8e178ca82d78130dea483cf48bff3e1c7"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyOTc2Ng==", "bodyText": "Comments with code", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r475529766", "createdAt": "2020-08-24T11:20:52Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package org.hisp.dhis.servlet.filter;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+import lombok.extern.slf4j.Slf4j;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.context.request.ServletWebRequest;\n+import org.springframework.util.StreamUtils;\n+\n+import org.hisp.dhis.util.DateUtils;\n+import org.hisp.dhis.appmanager.App;\n+import org.hisp.dhis.appmanager.AppManager;\n+import org.hisp.dhis.appmanager.AppStatus;\n+\n+/**\n+ * @author Austin McGee <austin@dhis2.org>\n+ */\n+ @Slf4j\n+public class AppOverrideFilter\n+    implements Filter\n+{\n+    @Autowired\n+    private AppManager appManager;\n+\n+    @Autowired\n+    private ObjectMapper jsonMapper;\n+\n+    public static final String APP_PATH_PATTERN = \"^/dhis-web-(\" + String.join(\"|\", AppManager.BUNDLED_APPS) + \")/(.*)\";\n+\n+    // -------------------------------------------------------------------------\n+    // Filter implementation\n+    // -------------------------------------------------------------------------\n+\n+    @Override\n+    public void init( FilterConfig config )\n+    {\n+    }\n+\n+    // From AppController.java (some duplication)\n+    private void serveInstalledAppResource( App app, String resourcePath, HttpServletRequest request, HttpServletResponse response)\n+        throws IOException {\n+        // Get page requested\n+\n+        log.debug( String.format( \"Serving app resource: '%s'\", resourcePath ) );\n+\n+        // Handling of 'manifest.webapp'\n+        if ( \"manifest.webapp\".equals( resourcePath ) )\n+        {\n+            // If request was for manifest.webapp, check for * and replace with host\n+            if ( \"*\".equals( app.getActivities().getDhis().getHref() ) )\n+            {\n+                String contextPath = \"../\";\n+                log.debug( String.format( \"Manifest context path: '%s'\", contextPath ) );\n+                app.getActivities().getDhis().setHref( contextPath );\n+            }\n+\n+            jsonMapper.writeValue( response.getOutputStream(), app );\n+        }\n+        // Any other resource\n+        else\n+        {\n+            // Retrieve file\n+            Resource resource = appManager.getAppResource( app, resourcePath );\n+\n+            if ( resource == null )\n+            {\n+                response.sendError( HttpServletResponse.SC_NOT_FOUND );\n+                return;\n+            }\n+\n+            String filename = resource.getFilename();\n+            log.debug( String.format( \"App filename: '%s'\", filename ) );\n+\n+            if ( new ServletWebRequest( request, response ).checkNotModified( resource.lastModified() ) )\n+            {\n+                response.setStatus( HttpServletResponse.SC_NOT_MODIFIED );\n+                return;\n+            }\n+\n+            String mimeType = request.getSession().getServletContext().getMimeType( filename );\n+\n+            if ( mimeType != null )\n+            {\n+                response.setContentType( mimeType );\n+            }\n+\n+            response.setContentLength( (int) resource.contentLength() );\n+            response.setHeader( \"Last-Modified\", DateUtils.getHttpDateString( new Date( resource.lastModified() ) ) );\n+            StreamUtils.copy( resource.getInputStream(), response.getOutputStream() );\n+        }\n+    }\n+\n+    @Override\n+    public void doFilter( ServletRequest req, ServletResponse res, FilterChain chain )\n+        throws IOException, ServletException {\n+        HttpServletRequest request = (HttpServletRequest) req;\n+        HttpServletResponse response = (HttpServletResponse) res;\n+        String requestURI = request.getRequestURI();\n+\n+        Pattern p = Pattern.compile(APP_PATH_PATTERN);\n+        Matcher m = p.matcher(requestURI);\n+\n+        if (m.find()) {\n+            String namespace = m.group(0);\n+            String appName = m.group(1);\n+            String resourcePath = m.group(2);\n+\n+            log.info(\"AppOverrideFilter :: Matched for URI \" + requestURI);\n+\n+            App app = appManager.getApp(appName);\n+\n+            if (app != null && app.getAppState() != AppStatus.DELETION_IN_PROGRESS) {\n+                log.info(\"AppOverrideFilter :: Overridden app \" + appName + \" found, serving override\");\n+                serveInstalledAppResource(app, resourcePath, request, response);\n+                // String newURI = \"/api/apps/\" + appName + requestURI.substring(namespace.length());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81d6ebb8e178ca82d78130dea483cf48bff3e1c7"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyOTg3MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            log.info(\"AppOverrideFilter :: App \" + appName + \" not found, falling back to bundled app\");\n          \n          \n            \n                            log.info( \"AppOverrideFilter :: App \" + appName + \" not found, falling back to bundled app\" );", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r475529870", "createdAt": "2020-08-24T11:21:08Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package org.hisp.dhis.servlet.filter;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+import lombok.extern.slf4j.Slf4j;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.context.request.ServletWebRequest;\n+import org.springframework.util.StreamUtils;\n+\n+import org.hisp.dhis.util.DateUtils;\n+import org.hisp.dhis.appmanager.App;\n+import org.hisp.dhis.appmanager.AppManager;\n+import org.hisp.dhis.appmanager.AppStatus;\n+\n+/**\n+ * @author Austin McGee <austin@dhis2.org>\n+ */\n+ @Slf4j\n+public class AppOverrideFilter\n+    implements Filter\n+{\n+    @Autowired\n+    private AppManager appManager;\n+\n+    @Autowired\n+    private ObjectMapper jsonMapper;\n+\n+    public static final String APP_PATH_PATTERN = \"^/dhis-web-(\" + String.join(\"|\", AppManager.BUNDLED_APPS) + \")/(.*)\";\n+\n+    // -------------------------------------------------------------------------\n+    // Filter implementation\n+    // -------------------------------------------------------------------------\n+\n+    @Override\n+    public void init( FilterConfig config )\n+    {\n+    }\n+\n+    // From AppController.java (some duplication)\n+    private void serveInstalledAppResource( App app, String resourcePath, HttpServletRequest request, HttpServletResponse response)\n+        throws IOException {\n+        // Get page requested\n+\n+        log.debug( String.format( \"Serving app resource: '%s'\", resourcePath ) );\n+\n+        // Handling of 'manifest.webapp'\n+        if ( \"manifest.webapp\".equals( resourcePath ) )\n+        {\n+            // If request was for manifest.webapp, check for * and replace with host\n+            if ( \"*\".equals( app.getActivities().getDhis().getHref() ) )\n+            {\n+                String contextPath = \"../\";\n+                log.debug( String.format( \"Manifest context path: '%s'\", contextPath ) );\n+                app.getActivities().getDhis().setHref( contextPath );\n+            }\n+\n+            jsonMapper.writeValue( response.getOutputStream(), app );\n+        }\n+        // Any other resource\n+        else\n+        {\n+            // Retrieve file\n+            Resource resource = appManager.getAppResource( app, resourcePath );\n+\n+            if ( resource == null )\n+            {\n+                response.sendError( HttpServletResponse.SC_NOT_FOUND );\n+                return;\n+            }\n+\n+            String filename = resource.getFilename();\n+            log.debug( String.format( \"App filename: '%s'\", filename ) );\n+\n+            if ( new ServletWebRequest( request, response ).checkNotModified( resource.lastModified() ) )\n+            {\n+                response.setStatus( HttpServletResponse.SC_NOT_MODIFIED );\n+                return;\n+            }\n+\n+            String mimeType = request.getSession().getServletContext().getMimeType( filename );\n+\n+            if ( mimeType != null )\n+            {\n+                response.setContentType( mimeType );\n+            }\n+\n+            response.setContentLength( (int) resource.contentLength() );\n+            response.setHeader( \"Last-Modified\", DateUtils.getHttpDateString( new Date( resource.lastModified() ) ) );\n+            StreamUtils.copy( resource.getInputStream(), response.getOutputStream() );\n+        }\n+    }\n+\n+    @Override\n+    public void doFilter( ServletRequest req, ServletResponse res, FilterChain chain )\n+        throws IOException, ServletException {\n+        HttpServletRequest request = (HttpServletRequest) req;\n+        HttpServletResponse response = (HttpServletResponse) res;\n+        String requestURI = request.getRequestURI();\n+\n+        Pattern p = Pattern.compile(APP_PATH_PATTERN);\n+        Matcher m = p.matcher(requestURI);\n+\n+        if (m.find()) {\n+            String namespace = m.group(0);\n+            String appName = m.group(1);\n+            String resourcePath = m.group(2);\n+\n+            log.info(\"AppOverrideFilter :: Matched for URI \" + requestURI);\n+\n+            App app = appManager.getApp(appName);\n+\n+            if (app != null && app.getAppState() != AppStatus.DELETION_IN_PROGRESS) {\n+                log.info(\"AppOverrideFilter :: Overridden app \" + appName + \" found, serving override\");\n+                serveInstalledAppResource(app, resourcePath, request, response);\n+                // String newURI = \"/api/apps/\" + appName + requestURI.substring(namespace.length());\n+\n+                // req.getRequestDispatcher(newURI).forward(req, res);\n+                return;\n+            } else {\n+                log.info(\"AppOverrideFilter :: App \" + appName + \" not found, falling back to bundled app\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81d6ebb8e178ca82d78130dea483cf48bff3e1c7"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyOTkyMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    chain.doFilter(req, res);\n          \n          \n            \n                    chain.doFilter( req, res );", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r475529923", "createdAt": "2020-08-24T11:21:14Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package org.hisp.dhis.servlet.filter;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+import lombok.extern.slf4j.Slf4j;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.context.request.ServletWebRequest;\n+import org.springframework.util.StreamUtils;\n+\n+import org.hisp.dhis.util.DateUtils;\n+import org.hisp.dhis.appmanager.App;\n+import org.hisp.dhis.appmanager.AppManager;\n+import org.hisp.dhis.appmanager.AppStatus;\n+\n+/**\n+ * @author Austin McGee <austin@dhis2.org>\n+ */\n+ @Slf4j\n+public class AppOverrideFilter\n+    implements Filter\n+{\n+    @Autowired\n+    private AppManager appManager;\n+\n+    @Autowired\n+    private ObjectMapper jsonMapper;\n+\n+    public static final String APP_PATH_PATTERN = \"^/dhis-web-(\" + String.join(\"|\", AppManager.BUNDLED_APPS) + \")/(.*)\";\n+\n+    // -------------------------------------------------------------------------\n+    // Filter implementation\n+    // -------------------------------------------------------------------------\n+\n+    @Override\n+    public void init( FilterConfig config )\n+    {\n+    }\n+\n+    // From AppController.java (some duplication)\n+    private void serveInstalledAppResource( App app, String resourcePath, HttpServletRequest request, HttpServletResponse response)\n+        throws IOException {\n+        // Get page requested\n+\n+        log.debug( String.format( \"Serving app resource: '%s'\", resourcePath ) );\n+\n+        // Handling of 'manifest.webapp'\n+        if ( \"manifest.webapp\".equals( resourcePath ) )\n+        {\n+            // If request was for manifest.webapp, check for * and replace with host\n+            if ( \"*\".equals( app.getActivities().getDhis().getHref() ) )\n+            {\n+                String contextPath = \"../\";\n+                log.debug( String.format( \"Manifest context path: '%s'\", contextPath ) );\n+                app.getActivities().getDhis().setHref( contextPath );\n+            }\n+\n+            jsonMapper.writeValue( response.getOutputStream(), app );\n+        }\n+        // Any other resource\n+        else\n+        {\n+            // Retrieve file\n+            Resource resource = appManager.getAppResource( app, resourcePath );\n+\n+            if ( resource == null )\n+            {\n+                response.sendError( HttpServletResponse.SC_NOT_FOUND );\n+                return;\n+            }\n+\n+            String filename = resource.getFilename();\n+            log.debug( String.format( \"App filename: '%s'\", filename ) );\n+\n+            if ( new ServletWebRequest( request, response ).checkNotModified( resource.lastModified() ) )\n+            {\n+                response.setStatus( HttpServletResponse.SC_NOT_MODIFIED );\n+                return;\n+            }\n+\n+            String mimeType = request.getSession().getServletContext().getMimeType( filename );\n+\n+            if ( mimeType != null )\n+            {\n+                response.setContentType( mimeType );\n+            }\n+\n+            response.setContentLength( (int) resource.contentLength() );\n+            response.setHeader( \"Last-Modified\", DateUtils.getHttpDateString( new Date( resource.lastModified() ) ) );\n+            StreamUtils.copy( resource.getInputStream(), response.getOutputStream() );\n+        }\n+    }\n+\n+    @Override\n+    public void doFilter( ServletRequest req, ServletResponse res, FilterChain chain )\n+        throws IOException, ServletException {\n+        HttpServletRequest request = (HttpServletRequest) req;\n+        HttpServletResponse response = (HttpServletResponse) res;\n+        String requestURI = request.getRequestURI();\n+\n+        Pattern p = Pattern.compile(APP_PATH_PATTERN);\n+        Matcher m = p.matcher(requestURI);\n+\n+        if (m.find()) {\n+            String namespace = m.group(0);\n+            String appName = m.group(1);\n+            String resourcePath = m.group(2);\n+\n+            log.info(\"AppOverrideFilter :: Matched for URI \" + requestURI);\n+\n+            App app = appManager.getApp(appName);\n+\n+            if (app != null && app.getAppState() != AppStatus.DELETION_IN_PROGRESS) {\n+                log.info(\"AppOverrideFilter :: Overridden app \" + appName + \" found, serving override\");\n+                serveInstalledAppResource(app, resourcePath, request, response);\n+                // String newURI = \"/api/apps/\" + appName + requestURI.substring(namespace.length());\n+\n+                // req.getRequestDispatcher(newURI).forward(req, res);\n+                return;\n+            } else {\n+                log.info(\"AppOverrideFilter :: App \" + appName + \" not found, falling back to bundled app\");\n+            }\n+        }\n+\n+        chain.doFilter(req, res);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81d6ebb8e178ca82d78130dea483cf48bff3e1c7"}, "originalPosition": 170}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczMzgzNTIz", "url": "https://github.com/dhis2/dhis2-core/pull/5977#pullrequestreview-473383523", "createdAt": "2020-08-24T11:36:53Z", "commit": {"oid": "45690f03da621303a09cc548a16fdeff4ad198a5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTozNjo1M1rOHFghLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTozNjo1M1rOHFghLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUzNzcwOA==", "bodyText": "Ideally this wouldn't duplicate the app cloning list in dhis-web-apps, but I don't think it would be trivial to refactor them at the moment.  Eventually this should go away when we move to the /apps/xyz app base", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r475537708", "createdAt": "2020-08-24T11:36:53Z", "author": {"login": "amcgee"}, "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/appmanager/AppManager.java", "diffHunk": "@@ -36,13 +36,49 @@\n import java.util.Collection;\n import java.util.List;\n \n+import com.google.common.collect.ImmutableSet;\n+\n /**\n  * @author Saptarshi Purkayastha\n  */\n public interface AppManager\n {\n     String ID = AppManager.class.getName();\n \n+    ImmutableSet<String> BUNDLED_APPS = ImmutableSet.of(\n+        // Javascript apps\n+        \"app-management\",\n+        \"cache-cleaner\",\n+        \"capture\",\n+        \"dashboard\",\n+        \"data-administration\",\n+        \"data-visualizer\",\n+        \"data-quality\",\n+        \"datastore\",\n+        \"event-reports\",\n+        \"event-visualizer\",\n+        \"import-export\",\n+        \"interpretation\",\n+        \"maintenance\",\n+        \"maps\",\n+        \"menu-management\",\n+        \"messaging\",\n+        \"pivot\",\n+        \"reports\",\n+        \"scheduler\",\n+        \"settings\",\n+        \"tracker-capture\",\n+        \"translations\",\n+        \"usage-analytics\",\n+        \"user\",\n+        \"user-profile\",\n+        \n+        // Struts apps\n+        \"approval\",\n+        \"dataentry\",\n+        \"maintenance-mobile\"\n+    );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45690f03da621303a09cc548a16fdeff4ad198a5"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0MTk1MzUx", "url": "https://github.com/dhis2/dhis2-core/pull/5977#pullrequestreview-474195351", "createdAt": "2020-08-25T07:13:50Z", "commit": {"oid": "45690f03da621303a09cc548a16fdeff4ad198a5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNzoxMzo1MVrOHGKlfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNzoxMzo1MVrOHGKlfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIyNjk0MA==", "bodyText": "Apply DHIS 2 code style.", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r476226940", "createdAt": "2020-08-25T07:13:51Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package org.hisp.dhis.servlet.filter;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+import lombok.extern.slf4j.Slf4j;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.context.request.ServletWebRequest;\n+import org.springframework.util.StreamUtils;\n+\n+import org.hisp.dhis.util.DateUtils;\n+import org.hisp.dhis.appmanager.App;\n+import org.hisp.dhis.appmanager.AppManager;\n+import org.hisp.dhis.appmanager.AppStatus;\n+\n+/**\n+ * @author Austin McGee <austin@dhis2.org>\n+ */\n+ @Slf4j\n+public class AppOverrideFilter\n+    implements Filter\n+{\n+    @Autowired\n+    private AppManager appManager;\n+\n+    @Autowired\n+    private ObjectMapper jsonMapper;\n+\n+    public static final String APP_PATH_PATTERN = \"^/dhis-web-(\" + String.join(\"|\", AppManager.BUNDLED_APPS) + \")/(.*)\";\n+\n+    // -------------------------------------------------------------------------\n+    // Filter implementation\n+    // -------------------------------------------------------------------------\n+\n+    @Override\n+    public void init( FilterConfig config )\n+    {\n+    }\n+\n+    // From AppController.java (some duplication)\n+    private void serveInstalledAppResource( App app, String resourcePath, HttpServletRequest request, HttpServletResponse response )\n+        throws IOException {\n+        // Get page requested\n+\n+        log.debug( String.format( \"Serving app resource: '%s'\", resourcePath ) );\n+\n+        // Handling of 'manifest.webapp'\n+        if ( \"manifest.webapp\".equals( resourcePath ) )\n+        {\n+            // If request was for manifest.webapp, check for * and replace with host\n+            if ( \"*\".equals( app.getActivities().getDhis().getHref() ) )\n+            {\n+                String contextPath = \"../\";\n+                log.debug( String.format( \"Manifest context path: '%s'\", contextPath ) );\n+                app.getActivities().getDhis().setHref( contextPath );\n+            }\n+\n+            jsonMapper.writeValue( response.getOutputStream(), app );\n+        }\n+        // Any other resource\n+        else\n+        {\n+            // Retrieve file\n+            Resource resource = appManager.getAppResource( app, resourcePath );\n+\n+            if ( resource == null )\n+            {\n+                response.sendError( HttpServletResponse.SC_NOT_FOUND );\n+                return;\n+            }\n+\n+            String filename = resource.getFilename();\n+            log.debug( String.format( \"App filename: '%s'\", filename ) );\n+\n+            if ( new ServletWebRequest( request, response ).checkNotModified( resource.lastModified() ) )\n+            {\n+                response.setStatus( HttpServletResponse.SC_NOT_MODIFIED );\n+                return;\n+            }\n+\n+            String mimeType = request.getSession().getServletContext().getMimeType( filename );\n+\n+            if ( mimeType != null )\n+            {\n+                response.setContentType( mimeType );\n+            }\n+\n+            response.setContentLength( (int) resource.contentLength() );\n+            response.setHeader( \"Last-Modified\", DateUtils.getHttpDateString( new Date( resource.lastModified() ) ) );\n+            StreamUtils.copy( resource.getInputStream(), response.getOutputStream() );\n+        }\n+    }\n+\n+    @Override\n+    public void doFilter( ServletRequest req, ServletResponse res, FilterChain chain )\n+        throws IOException, ServletException {\n+        HttpServletRequest request = (HttpServletRequest) req;\n+        HttpServletResponse response = (HttpServletResponse) res;\n+        String requestURI = request.getRequestURI();\n+\n+        Pattern p = Pattern.compile( APP_PATH_PATTERN );\n+        Matcher m = p.matcher( requestURI );\n+\n+        if ( m.find() ) {\n+            String namespace = m.group( 0 );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45690f03da621303a09cc548a16fdeff4ad198a5"}, "originalPosition": 150}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0MzcxMDMz", "url": "https://github.com/dhis2/dhis2-core/pull/5977#pullrequestreview-474371033", "createdAt": "2020-08-25T11:06:24Z", "commit": {"oid": "983a3884a71eff0482cf6b41d50ab21ecd2cf0d7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMTowNjoyNVrOHGS90w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMTowNjoyNVrOHGS90w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM2NDI0Mw==", "bodyText": "Perhaps some defensive null checks here to see if activities is actually defined to avoid NullPointerException, with some logging maybe.", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r476364243", "createdAt": "2020-08-25T11:06:25Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package org.hisp.dhis.servlet.filter;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+import lombok.extern.slf4j.Slf4j;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StreamUtils;\n+import org.springframework.web.context.request.ServletWebRequest;\n+\n+import org.hisp.dhis.util.DateUtils;\n+import org.hisp.dhis.appmanager.App;\n+import org.hisp.dhis.appmanager.AppManager;\n+import org.hisp.dhis.appmanager.AppStatus;\n+\n+/**\n+ * @author Austin McGee <austin@dhis2.org>\n+ */\n+ @Slf4j\n+ @Component\n+public class AppOverrideFilter\n+    implements Filter\n+{\n+    @Autowired\n+    private AppManager appManager;\n+\n+    @Autowired\n+    private ObjectMapper jsonMapper;\n+\n+    public static final String APP_PATH_PATTERN = \"^/dhis-web-(\" + String.join(\"|\", AppManager.BUNDLED_APPS) + \")/(.*)\";\n+\n+    // -------------------------------------------------------------------------\n+    // Filter implementation\n+    // -------------------------------------------------------------------------\n+\n+    @Override\n+    public void init( FilterConfig config )\n+    {\n+    }\n+\n+    // From AppController.java (some duplication)\n+    private void serveInstalledAppResource( App app, String resourcePath, HttpServletRequest request, HttpServletResponse response )\n+        throws IOException {\n+        // Get page requested\n+\n+        log.debug( String.format( \"Serving app resource: '%s'\", resourcePath ) );\n+\n+        // Handling of 'manifest.webapp'\n+        if ( \"manifest.webapp\".equals( resourcePath ) )\n+        {\n+            // If request was for manifest.webapp, check for * and replace with host\n+            if ( \"*\".equals( app.getActivities().getDhis().getHref() ) )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "983a3884a71eff0482cf6b41d50ab21ecd2cf0d7"}, "originalPosition": 98}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "039c51a871a5ed5ef8c5f0af7a3fd8e4a7e3d6b2", "author": {"user": {"login": "amcgee", "name": "Austin McGee"}}, "url": "https://github.com/dhis2/dhis2-core/commit/039c51a871a5ed5ef8c5f0af7a3fd8e4a7e3d6b2", "committedDate": "2020-08-25T18:57:11Z", "message": "fix: use decorators for filter application"}, "afterCommit": {"oid": "6fa1129fcf9c20dfe7f85067ddb449ee6f0a600f", "author": {"user": {"login": "amcgee", "name": "Austin McGee"}}, "url": "https://github.com/dhis2/dhis2-core/commit/6fa1129fcf9c20dfe7f85067ddb449ee6f0a600f", "committedDate": "2020-08-25T18:23:42Z", "message": "fix: correctly parse apps api filters"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1Mjc5ODU1", "url": "https://github.com/dhis2/dhis2-core/pull/5977#pullrequestreview-475279855", "createdAt": "2020-08-26T08:45:41Z", "commit": {"oid": "6fa1129fcf9c20dfe7f85067ddb449ee6f0a600f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwODo0NTo0MlrOHHCKbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwODo0NTo0MlrOHHCKbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEzNzUxOQ==", "bodyText": "Brackets on new lines.", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r477137519", "createdAt": "2020-08-26T08:45:42Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/appmanager/JCloudsAppStorageService.java", "diffHunk": "@@ -429,9 +430,21 @@ public Resource getAppResource( App app, String pageName )\n \n             String filepath = configurationProvider.getProperty( ConfigurationKey.FILESTORE_CONTAINER ) + \"/\" + key;\n             filepath = filepath.replaceAll( \"//\", \"/\" );\n-            File res = locationManager.getFileForReading( filepath );\n+            File res;\n+            \n+            try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fa1129fcf9c20dfe7f85067ddb449ee6f0a600f"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5f93cdaaa42ddb903dc60dcab1e8c4786ed5b4d", "author": {"user": {"login": "amcgee", "name": "Austin McGee"}}, "url": "https://github.com/dhis2/dhis2-core/commit/d5f93cdaaa42ddb903dc60dcab1e8c4786ed5b4d", "committedDate": "2020-08-27T08:38:46Z", "message": "feat: implement bundled application overrides"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "652fcf15c7b4f25c9b76fd8f00a8bc4aeb187383", "author": {"user": {"login": "amcgee", "name": "Austin McGee"}}, "url": "https://github.com/dhis2/dhis2-core/commit/652fcf15c7b4f25c9b76fd8f00a8bc4aeb187383", "committedDate": "2020-08-27T07:52:22Z", "message": "Merge remote-tracking branch 'origin/master' into feat/app-overload"}, "afterCommit": {"oid": "d5f93cdaaa42ddb903dc60dcab1e8c4786ed5b4d", "author": {"user": {"login": "amcgee", "name": "Austin McGee"}}, "url": "https://github.com/dhis2/dhis2-core/commit/d5f93cdaaa42ddb903dc60dcab1e8c4786ed5b4d", "committedDate": "2020-08-27T08:38:46Z", "message": "feat: implement bundled application overrides"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d47c4fbbe1647c78d7224ba3c44e8b3a53890b26", "author": {"user": {"login": "amcgee", "name": "Austin McGee"}}, "url": "https://github.com/dhis2/dhis2-core/commit/d47c4fbbe1647c78d7224ba3c44e8b3a53890b26", "committedDate": "2020-08-27T09:02:39Z", "message": "fix: redirect to launch url from index.action legacy requests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1025c5d9a165aececbc754b0fab490b46b39d53e", "author": {"user": {"login": "amcgee", "name": "Austin McGee"}}, "url": "https://github.com/dhis2/dhis2-core/commit/1025c5d9a165aececbc754b0fab490b46b39d53e", "committedDate": "2020-08-27T12:29:12Z", "message": "fix: inject full context path rather than relative URL to manifest.webapp"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6cf80f93cf8268693fd10dbcbbf34928d31f5072", "author": {"user": {"login": "amcgee", "name": "Austin McGee"}}, "url": "https://github.com/dhis2/dhis2-core/commit/6cf80f93cf8268693fd10dbcbbf34928d31f5072", "committedDate": "2020-08-27T12:40:49Z", "message": "chore: revert to original app authority translation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f80a39256916bfcb1a06f2eb2d40e25f426dc0d", "author": {"user": {"login": "amcgee", "name": "Austin McGee"}}, "url": "https://github.com/dhis2/dhis2-core/commit/2f80a39256916bfcb1a06f2eb2d40e25f426dc0d", "committedDate": "2020-08-27T12:41:45Z", "message": "chore: remove bundledAppNames endpoint"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2Nzg1NzMz", "url": "https://github.com/dhis2/dhis2-core/pull/5977#pullrequestreview-476785733", "createdAt": "2020-08-27T14:36:36Z", "commit": {"oid": "2f80a39256916bfcb1a06f2eb2d40e25f426dc0d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNDozNjozNlrOHITYNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNDozNjozNlrOHITYNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ2ODE0OQ==", "bodyText": "Remove commented out code.", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r478468149", "createdAt": "2020-08-27T14:36:36Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "diffHunk": "@@ -0,0 +1,178 @@\n+package org.hisp.dhis.servlet.filter;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+import lombok.extern.slf4j.Slf4j;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StreamUtils;\n+import org.springframework.web.context.request.ServletWebRequest;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+\n+import org.hisp.dhis.util.DateUtils;\n+import org.hisp.dhis.appmanager.App;\n+import org.hisp.dhis.appmanager.AppManager;\n+import org.hisp.dhis.appmanager.AppStatus;\n+import org.hisp.dhis.webapi.utils.ContextUtils;\n+\n+/**\n+ * @author Austin McGee <austin@dhis2.org>\n+ */\n+ @Slf4j\n+ @Component\n+public class AppOverrideFilter\n+    extends OncePerRequestFilter\n+{\n+    @Autowired\n+    private AppManager appManager;\n+\n+    @Autowired\n+    private ObjectMapper jsonMapper;\n+\n+    public static final String APP_PATH_PATTERN = \"^/\" + AppManager.BUNDLED_APP_PREFIX + \"(\" + String.join(\"|\", AppManager.BUNDLED_APPS) + \")/(.*)\";\n+    // public static final String REDIRECT_APP_PATH_PATTERN = \"^/\" + AppController.RESOURCE_PATH + \"-(\" + String.join(\"|\", AppManager.BUNDLED_APPS) + \")/(.*)\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f80a39256916bfcb1a06f2eb2d40e25f426dc0d"}, "originalPosition": 79}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2Nzg2MDA4", "url": "https://github.com/dhis2/dhis2-core/pull/5977#pullrequestreview-476786008", "createdAt": "2020-08-27T14:36:53Z", "commit": {"oid": "2f80a39256916bfcb1a06f2eb2d40e25f426dc0d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2541, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}