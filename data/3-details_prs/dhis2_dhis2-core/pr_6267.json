{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzNTc5NjAy", "number": 6267, "title": "fix: Reject duplicate events from current payload", "bodyText": "", "createdAt": "2020-09-26T13:52:30Z", "url": "https://github.com/dhis2/dhis2-core/pull/6267", "merged": true, "mergeCommit": {"oid": "56fc7559fe63e7722e76d571e90a851ba55a1ad5"}, "closed": true, "closedAt": "2020-10-02T07:21:17Z", "author": {"login": "abyot"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdMqrQNgH2gAyNDkzNTc5NjAyOjhiZGJmNTJiYmViNTU5NGVlMDlkZWI1ZDIzMWNkMTMxN2JjN2ViZDQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdOgvplgFqTUwMDkwNzkwNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8bdbf52bbeb5594ee09deb5d231cd1317bc7ebd4", "author": {"user": {"login": "abyot", "name": "Abyot Asalefew Gizaw"}}, "url": "https://github.com/dhis2/dhis2-core/commit/8bdbf52bbeb5594ee09deb5d231cd1317bc7ebd4", "committedDate": "2020-09-26T13:47:35Z", "message": "fix: Reject duplicate events from current payload"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3MjY3ODM4", "url": "https://github.com/dhis2/dhis2-core/pull/6267#pullrequestreview-497267838", "createdAt": "2020-09-28T07:54:42Z", "commit": {"oid": "8bdbf52bbeb5594ee09deb5d231cd1317bc7ebd4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNzo1NDo0MlrOHYyWCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNzo1ODo0OFrOHYye7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc1MjcxMg==", "bodyText": "We already have a validation rule that checks this condition: ProgramCheck", "url": "https://github.com/dhis2/dhis2-core/pull/6267#discussion_r495752712", "createdAt": "2020-09-28T07:54:42Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventManager.java", "diffHunk": "@@ -344,30 +354,81 @@ private void handleFailure( final WorkContext workContext, final ImportSummaries\n         final WorkContext workContext )\n     {\n         List<Event> importableEvents = new ArrayList<>();\n-        if ( CollectionUtils.isNotEmpty( events ) )\n-        {\n-            final Set<String> existingProgramStageInstances = workContext.getProgramStageInstanceMap().keySet();\n+        Set<String> importableStageEvents = new HashSet<>();\n+        final Set<String> existingProgramStageInstances = workContext.getProgramStageInstanceMap().keySet();\n \n-            for ( Event eventToImport : events )\n+        for ( Event eventToImport : events )\n+        {\n+            if ( existingProgramStageInstances.contains( eventToImport.getUid() ) )\n             {\n-                if ( existingProgramStageInstances.contains( eventToImport.getUid() ) )\n-                {\n-                    final ImportSummary is = new ImportSummary( ERROR,\n-                        \"Event \" + eventToImport.getUid() + \" already exists or was deleted earlier\" )\n-                            .setReference( eventToImport.getUid() ).incrementIgnored();\n+                final ImportSummary is = new ImportSummary( ERROR,\n+                    \"Event \" + eventToImport.getUid() + \" already exists or was deleted earlier\" )\n+                        .setReference( eventToImport.getUid() ).incrementIgnored();\n \n-                    importSummaries.addImportSummary( is );\n-                }\n-                else\n-                {\n-                    importableEvents.add( eventToImport );\n-                }\n+                importSummaries.addImportSummary( is );\n+\n+                continue;\n             }\n-        }\n \n+            boolean isValid = isValidEvent( workContext, eventToImport, importableStageEvents, importSummaries );\n+\n+            if ( isValid )\n+            {\n+                importableEvents.add( eventToImport );\n+            }\n+        }\n         return importableEvents;\n     }\n \n+    private boolean isValidEvent(final WorkContext workContext, Event event, Set<String> importableStageEvents, final ImportSummaries importSummaries )\n+    {\n+        Program program = workContext.getProgramsMap().get( event.getProgram() );\n+\n+        ProgramStage programStage = workContext.getProgramStage( IdScheme.UID, event.getProgramStage() );\n+\n+        if ( program == null )\n+        {\n+            final ImportSummary is = new ImportSummary( ERROR, \"Program \" + event.getProgram() + \" does not point to a valid program\" )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bdbf52bbeb5594ee09deb5d231cd1317bc7ebd4"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc1MzQ2OA==", "bodyText": "We already have a validation rule that checks this condition: ProgramStageCheck", "url": "https://github.com/dhis2/dhis2-core/pull/6267#discussion_r495753468", "createdAt": "2020-09-28T07:56:00Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventManager.java", "diffHunk": "@@ -344,30 +354,81 @@ private void handleFailure( final WorkContext workContext, final ImportSummaries\n         final WorkContext workContext )\n     {\n         List<Event> importableEvents = new ArrayList<>();\n-        if ( CollectionUtils.isNotEmpty( events ) )\n-        {\n-            final Set<String> existingProgramStageInstances = workContext.getProgramStageInstanceMap().keySet();\n+        Set<String> importableStageEvents = new HashSet<>();\n+        final Set<String> existingProgramStageInstances = workContext.getProgramStageInstanceMap().keySet();\n \n-            for ( Event eventToImport : events )\n+        for ( Event eventToImport : events )\n+        {\n+            if ( existingProgramStageInstances.contains( eventToImport.getUid() ) )\n             {\n-                if ( existingProgramStageInstances.contains( eventToImport.getUid() ) )\n-                {\n-                    final ImportSummary is = new ImportSummary( ERROR,\n-                        \"Event \" + eventToImport.getUid() + \" already exists or was deleted earlier\" )\n-                            .setReference( eventToImport.getUid() ).incrementIgnored();\n+                final ImportSummary is = new ImportSummary( ERROR,\n+                    \"Event \" + eventToImport.getUid() + \" already exists or was deleted earlier\" )\n+                        .setReference( eventToImport.getUid() ).incrementIgnored();\n \n-                    importSummaries.addImportSummary( is );\n-                }\n-                else\n-                {\n-                    importableEvents.add( eventToImport );\n-                }\n+                importSummaries.addImportSummary( is );\n+\n+                continue;\n             }\n-        }\n \n+            boolean isValid = isValidEvent( workContext, eventToImport, importableStageEvents, importSummaries );\n+\n+            if ( isValid )\n+            {\n+                importableEvents.add( eventToImport );\n+            }\n+        }\n         return importableEvents;\n     }\n \n+    private boolean isValidEvent(final WorkContext workContext, Event event, Set<String> importableStageEvents, final ImportSummaries importSummaries )\n+    {\n+        Program program = workContext.getProgramsMap().get( event.getProgram() );\n+\n+        ProgramStage programStage = workContext.getProgramStage( IdScheme.UID, event.getProgramStage() );\n+\n+        if ( program == null )\n+        {\n+            final ImportSummary is = new ImportSummary( ERROR, \"Program \" + event.getProgram() + \" does not point to a valid program\" )\n+                    .setReference( event.getUid() ).incrementIgnored();\n+\n+            importSummaries.addImportSummary( is );\n+\n+            return false;\n+        }\n+\n+        if ( programStage == null )\n+        {\n+            final ImportSummary is = new ImportSummary( ERROR, \"ProgramStage \" + event.getProgramStage() + \" does not point to a valid programStage\" )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bdbf52bbeb5594ee09deb5d231cd1317bc7ebd4"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc1NDI3Mw==", "bodyText": "The refactoring of the Event import flow is designed around the concept of pipelines (preprocess, validation, postprocess). Any validation logic should be moved into a validation class (for instance in this case, a rule class named NonRepeatableProgramCheck)", "url": "https://github.com/dhis2/dhis2-core/pull/6267#discussion_r495754273", "createdAt": "2020-09-28T07:57:27Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventManager.java", "diffHunk": "@@ -344,30 +354,81 @@ private void handleFailure( final WorkContext workContext, final ImportSummaries\n         final WorkContext workContext )\n     {\n         List<Event> importableEvents = new ArrayList<>();\n-        if ( CollectionUtils.isNotEmpty( events ) )\n-        {\n-            final Set<String> existingProgramStageInstances = workContext.getProgramStageInstanceMap().keySet();\n+        Set<String> importableStageEvents = new HashSet<>();\n+        final Set<String> existingProgramStageInstances = workContext.getProgramStageInstanceMap().keySet();\n \n-            for ( Event eventToImport : events )\n+        for ( Event eventToImport : events )\n+        {\n+            if ( existingProgramStageInstances.contains( eventToImport.getUid() ) )\n             {\n-                if ( existingProgramStageInstances.contains( eventToImport.getUid() ) )\n-                {\n-                    final ImportSummary is = new ImportSummary( ERROR,\n-                        \"Event \" + eventToImport.getUid() + \" already exists or was deleted earlier\" )\n-                            .setReference( eventToImport.getUid() ).incrementIgnored();\n+                final ImportSummary is = new ImportSummary( ERROR,\n+                    \"Event \" + eventToImport.getUid() + \" already exists or was deleted earlier\" )\n+                        .setReference( eventToImport.getUid() ).incrementIgnored();\n \n-                    importSummaries.addImportSummary( is );\n-                }\n-                else\n-                {\n-                    importableEvents.add( eventToImport );\n-                }\n+                importSummaries.addImportSummary( is );\n+\n+                continue;\n             }\n-        }\n \n+            boolean isValid = isValidEvent( workContext, eventToImport, importableStageEvents, importSummaries );\n+\n+            if ( isValid )\n+            {\n+                importableEvents.add( eventToImport );\n+            }\n+        }\n         return importableEvents;\n     }\n \n+    private boolean isValidEvent(final WorkContext workContext, Event event, Set<String> importableStageEvents, final ImportSummaries importSummaries )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bdbf52bbeb5594ee09deb5d231cd1317bc7ebd4"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc1NDk4OA==", "bodyText": "We already have a validation rule that checks this condition: ProgramInstanceRepeatableStageCheck. We don't check for \"duplicated events\" but it should be possible to add it easily?", "url": "https://github.com/dhis2/dhis2-core/pull/6267#discussion_r495754988", "createdAt": "2020-09-28T07:58:48Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventManager.java", "diffHunk": "@@ -344,30 +354,81 @@ private void handleFailure( final WorkContext workContext, final ImportSummaries\n         final WorkContext workContext )\n     {\n         List<Event> importableEvents = new ArrayList<>();\n-        if ( CollectionUtils.isNotEmpty( events ) )\n-        {\n-            final Set<String> existingProgramStageInstances = workContext.getProgramStageInstanceMap().keySet();\n+        Set<String> importableStageEvents = new HashSet<>();\n+        final Set<String> existingProgramStageInstances = workContext.getProgramStageInstanceMap().keySet();\n \n-            for ( Event eventToImport : events )\n+        for ( Event eventToImport : events )\n+        {\n+            if ( existingProgramStageInstances.contains( eventToImport.getUid() ) )\n             {\n-                if ( existingProgramStageInstances.contains( eventToImport.getUid() ) )\n-                {\n-                    final ImportSummary is = new ImportSummary( ERROR,\n-                        \"Event \" + eventToImport.getUid() + \" already exists or was deleted earlier\" )\n-                            .setReference( eventToImport.getUid() ).incrementIgnored();\n+                final ImportSummary is = new ImportSummary( ERROR,\n+                    \"Event \" + eventToImport.getUid() + \" already exists or was deleted earlier\" )\n+                        .setReference( eventToImport.getUid() ).incrementIgnored();\n \n-                    importSummaries.addImportSummary( is );\n-                }\n-                else\n-                {\n-                    importableEvents.add( eventToImport );\n-                }\n+                importSummaries.addImportSummary( is );\n+\n+                continue;\n             }\n-        }\n \n+            boolean isValid = isValidEvent( workContext, eventToImport, importableStageEvents, importSummaries );\n+\n+            if ( isValid )\n+            {\n+                importableEvents.add( eventToImport );\n+            }\n+        }\n         return importableEvents;\n     }\n \n+    private boolean isValidEvent(final WorkContext workContext, Event event, Set<String> importableStageEvents, final ImportSummaries importSummaries )\n+    {\n+        Program program = workContext.getProgramsMap().get( event.getProgram() );\n+\n+        ProgramStage programStage = workContext.getProgramStage( IdScheme.UID, event.getProgramStage() );\n+\n+        if ( program == null )\n+        {\n+            final ImportSummary is = new ImportSummary( ERROR, \"Program \" + event.getProgram() + \" does not point to a valid program\" )\n+                    .setReference( event.getUid() ).incrementIgnored();\n+\n+            importSummaries.addImportSummary( is );\n+\n+            return false;\n+        }\n+\n+        if ( programStage == null )\n+        {\n+            final ImportSummary is = new ImportSummary( ERROR, \"ProgramStage \" + event.getProgramStage() + \" does not point to a valid programStage\" )\n+                    .setReference( event.getUid() ).incrementIgnored();\n+\n+            importSummaries.addImportSummary( is );\n+\n+            return false;\n+        }\n+\n+        if ( programStage.getRepeatable() || program.isWithoutRegistration() )\n+        {\n+            return true;\n+        }\n+\n+        String eventContextId = programStage.getUid() + \"-\" + event.getEnrollment();\n+\n+        if ( importableStageEvents.contains( eventContextId ) )\n+        {\n+            final ImportSummary is = new ImportSummary( ERROR,\n+                \"ProgramStage \" + event.getProgramStage() + \" is not repeatable. Current payload contains duplicate event\" )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bdbf52bbeb5594ee09deb5d231cd1317bc7ebd4"}, "originalPosition": 147}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6d253c691aa66d6b5b812c77e1f9b318137f060", "author": {"user": {"login": "abyot", "name": "Abyot Asalefew Gizaw"}}, "url": "https://github.com/dhis2/dhis2-core/commit/b6d253c691aa66d6b5b812c77e1f9b318137f060", "committedDate": "2020-09-29T16:51:13Z", "message": "chore: Move validation tasks to the hooks"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5MTkyNjQ0", "url": "https://github.com/dhis2/dhis2-core/pull/6267#pullrequestreview-499192644", "createdAt": "2020-09-30T08:21:58Z", "commit": {"oid": "b6d253c691aa66d6b5b812c77e1f9b318137f060"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwOTA3OTA2", "url": "https://github.com/dhis2/dhis2-core/pull/6267#pullrequestreview-500907906", "createdAt": "2020-10-02T07:21:11Z", "commit": {"oid": "b6d253c691aa66d6b5b812c77e1f9b318137f060"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2411, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}