{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxNDMwMjU1", "number": 6375, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwOToxMzozMFrOEsi2OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwOToxNzoyMlrOEsi8ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MTQzNzM2OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/security/AuthenticationLoggerListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwOToxMzozMFrOHf2AjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwOToxMzozMFrOHf2AjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE1Mjc4MQ==", "bodyText": "Newline", "url": "https://github.com/dhis2/dhis2-core/pull/6375#discussion_r503152781", "createdAt": "2020-10-12T09:13:30Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/security/AuthenticationLoggerListener.java", "diffHunk": "@@ -46,42 +53,75 @@\n {\n     public void onApplicationEvent( AbstractAuthenticationEvent event )\n     {\n+        if ( SessionFixationProtectionEvent.class.isAssignableFrom( event.getClass() ) ||\n+            InteractiveAuthenticationSuccessEvent.class.isAssignableFrom( event.getClass() ) )\n+        {\n+            return;\n+        }\n+\n         if ( log.isWarnEnabled() )\n         {\n-            final StringBuilder builder = new StringBuilder();\n-            builder.append( \"Authentication event \" );\n-            builder.append( ClassUtils.getShortName( event.getClass() ) );\n-            builder.append( \": \" );\n-            builder.append( event.getAuthentication().getName() );\n+            String authName = event.getAuthentication().getName();\n+            String eventClassName = \"Authentication event: \" + ClassUtils.getShortName( event.getClass() );\n \n-            Object details = event.getAuthentication().getDetails();\n+            String exceptionMessage = \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "829558e4fc43c986bf755d8a6f09b5f42d084a0f"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MTQzODA0OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/security/AuthenticationLoggerListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwOToxMzo0MVrOHf2A_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwOToxMzo0MVrOHf2A_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE1Mjg5Mg==", "bodyText": "Newline", "url": "https://github.com/dhis2/dhis2-core/pull/6375#discussion_r503152892", "createdAt": "2020-10-12T09:13:41Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/security/AuthenticationLoggerListener.java", "diffHunk": "@@ -46,42 +53,75 @@\n {\n     public void onApplicationEvent( AbstractAuthenticationEvent event )\n     {\n+        if ( SessionFixationProtectionEvent.class.isAssignableFrom( event.getClass() ) ||\n+            InteractiveAuthenticationSuccessEvent.class.isAssignableFrom( event.getClass() ) )\n+        {\n+            return;\n+        }\n+\n         if ( log.isWarnEnabled() )\n         {\n-            final StringBuilder builder = new StringBuilder();\n-            builder.append( \"Authentication event \" );\n-            builder.append( ClassUtils.getShortName( event.getClass() ) );\n-            builder.append( \": \" );\n-            builder.append( event.getAuthentication().getName() );\n+            String authName = event.getAuthentication().getName();\n+            String eventClassName = \"Authentication event: \" + ClassUtils.getShortName( event.getClass() );\n \n-            Object details = event.getAuthentication().getDetails();\n+            String exceptionMessage = \"\";\n+            if ( event instanceof AbstractAuthenticationFailureEvent )\n+            {\n+                exceptionMessage =\n+                    \"; exception: \" + ((AbstractAuthenticationFailureEvent) event).getException().getMessage();\n+            }\n+\n+            String ipAddress = \"\";\n+            String sessionId = \"\";\n \n+            Object details = event.getAuthentication().getDetails();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "829558e4fc43c986bf755d8a6f09b5f42d084a0f"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MTQzOTIyOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/security/AuthenticationLoggerListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwOToxNDowMVrOHf2BtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwOToxNDowMVrOHf2BtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE1MzA3Nw==", "bodyText": "Newline", "url": "https://github.com/dhis2/dhis2-core/pull/6375#discussion_r503153077", "createdAt": "2020-10-12T09:14:01Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/security/AuthenticationLoggerListener.java", "diffHunk": "@@ -46,42 +53,75 @@\n {\n     public void onApplicationEvent( AbstractAuthenticationEvent event )\n     {\n+        if ( SessionFixationProtectionEvent.class.isAssignableFrom( event.getClass() ) ||\n+            InteractiveAuthenticationSuccessEvent.class.isAssignableFrom( event.getClass() ) )\n+        {\n+            return;\n+        }\n+\n         if ( log.isWarnEnabled() )\n         {\n-            final StringBuilder builder = new StringBuilder();\n-            builder.append( \"Authentication event \" );\n-            builder.append( ClassUtils.getShortName( event.getClass() ) );\n-            builder.append( \": \" );\n-            builder.append( event.getAuthentication().getName() );\n+            String authName = event.getAuthentication().getName();\n+            String eventClassName = \"Authentication event: \" + ClassUtils.getShortName( event.getClass() );\n \n-            Object details = event.getAuthentication().getDetails();\n+            String exceptionMessage = \"\";\n+            if ( event instanceof AbstractAuthenticationFailureEvent )\n+            {\n+                exceptionMessage =\n+                    \"; exception: \" + ((AbstractAuthenticationFailureEvent) event).getException().getMessage();\n+            }\n+\n+            String ipAddress = \"\";\n+            String sessionId = \"\";\n \n+            Object details = event.getAuthentication().getDetails();\n             if ( details != null &&\n                 ForwardedIpAwareWebAuthenticationDetails.class.isAssignableFrom( details.getClass() ) )\n             {\n                 ForwardedIpAwareWebAuthenticationDetails authDetails = (ForwardedIpAwareWebAuthenticationDetails) details;\n-                String ip = authDetails.getIp();\n-\n-                builder.append( \"; ip: \" );\n-                builder.append( ip );\n+                ipAddress = \"; ip: \" + authDetails.getIp();\n+                sessionId = hashSessionId( authDetails.getSessionId() );\n+            }\n+            else if ( OAuth2LoginAuthenticationToken.class.isAssignableFrom( event.getAuthentication().getClass() ) )\n+            {\n+                OAuth2LoginAuthenticationToken authenticationToken = (OAuth2LoginAuthenticationToken) event\n+                    .getAuthentication();\n \n-                String sessionId = authDetails.getSessionId();\n-                if ( sessionId != null )\n+                DhisOidcUser principal = (DhisOidcUser) authenticationToken.getPrincipal();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "829558e4fc43c986bf755d8a6f09b5f42d084a0f"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MTQ1MjI1OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/security/AuthenticationLoggerListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwOToxNzowNlrOHf2JqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMToyNDoyMFrOHf6m7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE1NTExMg==", "bodyText": "Does it make sense to cache this hasher? or even just use Hashing.sha256().hashString(sessionId, StandardCharsets.UTF_8).toString() direcly?", "url": "https://github.com/dhis2/dhis2-core/pull/6375#discussion_r503155112", "createdAt": "2020-10-12T09:17:06Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/security/AuthenticationLoggerListener.java", "diffHunk": "@@ -46,42 +53,75 @@\n {\n     public void onApplicationEvent( AbstractAuthenticationEvent event )\n     {\n+        if ( SessionFixationProtectionEvent.class.isAssignableFrom( event.getClass() ) ||\n+            InteractiveAuthenticationSuccessEvent.class.isAssignableFrom( event.getClass() ) )\n+        {\n+            return;\n+        }\n+\n         if ( log.isWarnEnabled() )\n         {\n-            final StringBuilder builder = new StringBuilder();\n-            builder.append( \"Authentication event \" );\n-            builder.append( ClassUtils.getShortName( event.getClass() ) );\n-            builder.append( \": \" );\n-            builder.append( event.getAuthentication().getName() );\n+            String authName = event.getAuthentication().getName();\n+            String eventClassName = \"Authentication event: \" + ClassUtils.getShortName( event.getClass() );\n \n-            Object details = event.getAuthentication().getDetails();\n+            String exceptionMessage = \"\";\n+            if ( event instanceof AbstractAuthenticationFailureEvent )\n+            {\n+                exceptionMessage =\n+                    \"; exception: \" + ((AbstractAuthenticationFailureEvent) event).getException().getMessage();\n+            }\n+\n+            String ipAddress = \"\";\n+            String sessionId = \"\";\n \n+            Object details = event.getAuthentication().getDetails();\n             if ( details != null &&\n                 ForwardedIpAwareWebAuthenticationDetails.class.isAssignableFrom( details.getClass() ) )\n             {\n                 ForwardedIpAwareWebAuthenticationDetails authDetails = (ForwardedIpAwareWebAuthenticationDetails) details;\n-                String ip = authDetails.getIp();\n-\n-                builder.append( \"; ip: \" );\n-                builder.append( ip );\n+                ipAddress = \"; ip: \" + authDetails.getIp();\n+                sessionId = hashSessionId( authDetails.getSessionId() );\n+            }\n+            else if ( OAuth2LoginAuthenticationToken.class.isAssignableFrom( event.getAuthentication().getClass() ) )\n+            {\n+                OAuth2LoginAuthenticationToken authenticationToken = (OAuth2LoginAuthenticationToken) event\n+                    .getAuthentication();\n \n-                String sessionId = authDetails.getSessionId();\n-                if ( sessionId != null )\n+                DhisOidcUser principal = (DhisOidcUser) authenticationToken.getPrincipal();\n+                if ( principal != null )\n                 {\n-                    HashCode hash = Hashing.sha256().newHasher().putString( sessionId, Charsets.UTF_8 ).hash();\n-                    builder.append( \" sessionId: \" );\n-                    builder.append( hash.toString() );\n+                    UserCredentials userCredentials = principal.getUserCredentials();\n+                    authName = userCredentials.getUsername();\n                 }\n \n+                WebAuthenticationDetails oauthDetails = (WebAuthenticationDetails) authenticationToken.getDetails();\n+                ipAddress = \"; ip: \" + oauthDetails.getRemoteAddress();\n+                sessionId = hashSessionId( oauthDetails.getSessionId() );\n             }\n-\n-            if ( event instanceof AbstractAuthenticationFailureEvent )\n+            else if ( OAuth2AuthenticationToken.class.isAssignableFrom( event.getSource().getClass() ) )\n             {\n-                builder.append( \"; exception: \" );\n-                builder.append( ((AbstractAuthenticationFailureEvent) event).getException().getMessage() );\n+                OAuth2AuthenticationToken authenticationToken = (OAuth2AuthenticationToken) event.getSource();\n+                DhisOidcUser principal = (DhisOidcUser) authenticationToken.getPrincipal();\n+\n+                if ( principal != null )\n+                {\n+                    UserCredentials userCredentials = principal.getUserCredentials();\n+                    authName = userCredentials.getUsername();\n+                }\n             }\n \n-            log.warn( builder.toString() );\n+            log.warn( eventClassName + \"; username: \" + authName + ipAddress + sessionId + exceptionMessage );\n         }\n     }\n+\n+    private String hashSessionId( String sessionId )\n+    {\n+        if ( sessionId == null )\n+        {\n+            return \"\";\n+        }\n+\n+        HashCode hash = Hashing.sha256().newHasher().putString( sessionId, Charsets.UTF_8 ).hash();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "829558e4fc43c986bf755d8a6f09b5f42d084a0f"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzIyODE0Mw==", "bodyText": "I made the HashingFunction a field. The rest of the API is mostly immutable so object reuse is not possible.", "url": "https://github.com/dhis2/dhis2-core/pull/6375#discussion_r503228143", "createdAt": "2020-10-12T11:24:20Z", "author": {"login": "netroms"}, "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/security/AuthenticationLoggerListener.java", "diffHunk": "@@ -46,42 +53,75 @@\n {\n     public void onApplicationEvent( AbstractAuthenticationEvent event )\n     {\n+        if ( SessionFixationProtectionEvent.class.isAssignableFrom( event.getClass() ) ||\n+            InteractiveAuthenticationSuccessEvent.class.isAssignableFrom( event.getClass() ) )\n+        {\n+            return;\n+        }\n+\n         if ( log.isWarnEnabled() )\n         {\n-            final StringBuilder builder = new StringBuilder();\n-            builder.append( \"Authentication event \" );\n-            builder.append( ClassUtils.getShortName( event.getClass() ) );\n-            builder.append( \": \" );\n-            builder.append( event.getAuthentication().getName() );\n+            String authName = event.getAuthentication().getName();\n+            String eventClassName = \"Authentication event: \" + ClassUtils.getShortName( event.getClass() );\n \n-            Object details = event.getAuthentication().getDetails();\n+            String exceptionMessage = \"\";\n+            if ( event instanceof AbstractAuthenticationFailureEvent )\n+            {\n+                exceptionMessage =\n+                    \"; exception: \" + ((AbstractAuthenticationFailureEvent) event).getException().getMessage();\n+            }\n+\n+            String ipAddress = \"\";\n+            String sessionId = \"\";\n \n+            Object details = event.getAuthentication().getDetails();\n             if ( details != null &&\n                 ForwardedIpAwareWebAuthenticationDetails.class.isAssignableFrom( details.getClass() ) )\n             {\n                 ForwardedIpAwareWebAuthenticationDetails authDetails = (ForwardedIpAwareWebAuthenticationDetails) details;\n-                String ip = authDetails.getIp();\n-\n-                builder.append( \"; ip: \" );\n-                builder.append( ip );\n+                ipAddress = \"; ip: \" + authDetails.getIp();\n+                sessionId = hashSessionId( authDetails.getSessionId() );\n+            }\n+            else if ( OAuth2LoginAuthenticationToken.class.isAssignableFrom( event.getAuthentication().getClass() ) )\n+            {\n+                OAuth2LoginAuthenticationToken authenticationToken = (OAuth2LoginAuthenticationToken) event\n+                    .getAuthentication();\n \n-                String sessionId = authDetails.getSessionId();\n-                if ( sessionId != null )\n+                DhisOidcUser principal = (DhisOidcUser) authenticationToken.getPrincipal();\n+                if ( principal != null )\n                 {\n-                    HashCode hash = Hashing.sha256().newHasher().putString( sessionId, Charsets.UTF_8 ).hash();\n-                    builder.append( \" sessionId: \" );\n-                    builder.append( hash.toString() );\n+                    UserCredentials userCredentials = principal.getUserCredentials();\n+                    authName = userCredentials.getUsername();\n                 }\n \n+                WebAuthenticationDetails oauthDetails = (WebAuthenticationDetails) authenticationToken.getDetails();\n+                ipAddress = \"; ip: \" + oauthDetails.getRemoteAddress();\n+                sessionId = hashSessionId( oauthDetails.getSessionId() );\n             }\n-\n-            if ( event instanceof AbstractAuthenticationFailureEvent )\n+            else if ( OAuth2AuthenticationToken.class.isAssignableFrom( event.getSource().getClass() ) )\n             {\n-                builder.append( \"; exception: \" );\n-                builder.append( ((AbstractAuthenticationFailureEvent) event).getException().getMessage() );\n+                OAuth2AuthenticationToken authenticationToken = (OAuth2AuthenticationToken) event.getSource();\n+                DhisOidcUser principal = (DhisOidcUser) authenticationToken.getPrincipal();\n+\n+                if ( principal != null )\n+                {\n+                    UserCredentials userCredentials = principal.getUserCredentials();\n+                    authName = userCredentials.getUsername();\n+                }\n             }\n \n-            log.warn( builder.toString() );\n+            log.warn( eventClassName + \"; username: \" + authName + ipAddress + sessionId + exceptionMessage );\n         }\n     }\n+\n+    private String hashSessionId( String sessionId )\n+    {\n+        if ( sessionId == null )\n+        {\n+            return \"\";\n+        }\n+\n+        HashCode hash = Hashing.sha256().newHasher().putString( sessionId, Charsets.UTF_8 ).hash();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE1NTExMg=="}, "originalCommit": {"oid": "829558e4fc43c986bf755d8a6f09b5f42d084a0f"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MTQ1MzIyOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/security/config/AuthenticationListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwOToxNzoyMlrOHf2KQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwOToxNzoyMlrOHf2KQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE1NTI2Nw==", "bodyText": "Newline", "url": "https://github.com/dhis2/dhis2-core/pull/6375#discussion_r503155267", "createdAt": "2020-10-12T09:17:22Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/security/config/AuthenticationListener.java", "diffHunk": "@@ -66,33 +68,67 @@\n     public void handleAuthenticationFailure( AbstractAuthenticationFailureEvent event )\n     {\n         Authentication auth = event.getAuthentication();\n+        String username = event.getAuthentication().getName();\n \n         if ( TwoFactorWebAuthenticationDetails.class.isAssignableFrom( auth.getDetails().getClass() ) )\n         {\n             TwoFactorWebAuthenticationDetails authDetails =\n-                ( TwoFactorWebAuthenticationDetails ) auth.getDetails();\n+                (TwoFactorWebAuthenticationDetails) auth.getDetails();\n \n             log.info( String.format( \"Login attempt failed for remote IP: %s\", authDetails.getIp() ) );\n         }\n \n-        securityService.registerFailedLogin( auth.getName() );\n+        if ( OAuth2LoginAuthenticationToken.class.isAssignableFrom( auth.getClass() ) )\n+        {\n+            OAuth2LoginAuthenticationToken authenticationToken = (OAuth2LoginAuthenticationToken) auth;\n+            DhisOidcUser principal = (DhisOidcUser) authenticationToken.getPrincipal();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "829558e4fc43c986bf755d8a6f09b5f42d084a0f"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3808, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}