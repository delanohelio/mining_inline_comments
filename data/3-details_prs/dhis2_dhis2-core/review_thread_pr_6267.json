{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzNTc5NjAy", "number": 6267, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNzo1NDo0MlrOEn9qzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNzo1ODo0OFrOEn9wZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzQwMzAyOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNzo1NDo0MlrOHYyWCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjo1Njo0N1rOHZ4Gjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc1MjcxMg==", "bodyText": "We already have a validation rule that checks this condition: ProgramCheck", "url": "https://github.com/dhis2/dhis2-core/pull/6267#discussion_r495752712", "createdAt": "2020-09-28T07:54:42Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventManager.java", "diffHunk": "@@ -344,30 +354,81 @@ private void handleFailure( final WorkContext workContext, final ImportSummaries\n         final WorkContext workContext )\n     {\n         List<Event> importableEvents = new ArrayList<>();\n-        if ( CollectionUtils.isNotEmpty( events ) )\n-        {\n-            final Set<String> existingProgramStageInstances = workContext.getProgramStageInstanceMap().keySet();\n+        Set<String> importableStageEvents = new HashSet<>();\n+        final Set<String> existingProgramStageInstances = workContext.getProgramStageInstanceMap().keySet();\n \n-            for ( Event eventToImport : events )\n+        for ( Event eventToImport : events )\n+        {\n+            if ( existingProgramStageInstances.contains( eventToImport.getUid() ) )\n             {\n-                if ( existingProgramStageInstances.contains( eventToImport.getUid() ) )\n-                {\n-                    final ImportSummary is = new ImportSummary( ERROR,\n-                        \"Event \" + eventToImport.getUid() + \" already exists or was deleted earlier\" )\n-                            .setReference( eventToImport.getUid() ).incrementIgnored();\n+                final ImportSummary is = new ImportSummary( ERROR,\n+                    \"Event \" + eventToImport.getUid() + \" already exists or was deleted earlier\" )\n+                        .setReference( eventToImport.getUid() ).incrementIgnored();\n \n-                    importSummaries.addImportSummary( is );\n-                }\n-                else\n-                {\n-                    importableEvents.add( eventToImport );\n-                }\n+                importSummaries.addImportSummary( is );\n+\n+                continue;\n             }\n-        }\n \n+            boolean isValid = isValidEvent( workContext, eventToImport, importableStageEvents, importSummaries );\n+\n+            if ( isValid )\n+            {\n+                importableEvents.add( eventToImport );\n+            }\n+        }\n         return importableEvents;\n     }\n \n+    private boolean isValidEvent(final WorkContext workContext, Event event, Set<String> importableStageEvents, final ImportSummaries importSummaries )\n+    {\n+        Program program = workContext.getProgramsMap().get( event.getProgram() );\n+\n+        ProgramStage programStage = workContext.getProgramStage( IdScheme.UID, event.getProgramStage() );\n+\n+        if ( program == null )\n+        {\n+            final ImportSummary is = new ImportSummary( ERROR, \"Program \" + event.getProgram() + \" does not point to a valid program\" )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bdbf52bbeb5594ee09deb5d231cd1317bc7ebd4"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg5NTYzMQ==", "bodyText": "check for program is now left for ProgramCheck", "url": "https://github.com/dhis2/dhis2-core/pull/6267#discussion_r496895631", "createdAt": "2020-09-29T16:56:47Z", "author": {"login": "abyot"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventManager.java", "diffHunk": "@@ -344,30 +354,81 @@ private void handleFailure( final WorkContext workContext, final ImportSummaries\n         final WorkContext workContext )\n     {\n         List<Event> importableEvents = new ArrayList<>();\n-        if ( CollectionUtils.isNotEmpty( events ) )\n-        {\n-            final Set<String> existingProgramStageInstances = workContext.getProgramStageInstanceMap().keySet();\n+        Set<String> importableStageEvents = new HashSet<>();\n+        final Set<String> existingProgramStageInstances = workContext.getProgramStageInstanceMap().keySet();\n \n-            for ( Event eventToImport : events )\n+        for ( Event eventToImport : events )\n+        {\n+            if ( existingProgramStageInstances.contains( eventToImport.getUid() ) )\n             {\n-                if ( existingProgramStageInstances.contains( eventToImport.getUid() ) )\n-                {\n-                    final ImportSummary is = new ImportSummary( ERROR,\n-                        \"Event \" + eventToImport.getUid() + \" already exists or was deleted earlier\" )\n-                            .setReference( eventToImport.getUid() ).incrementIgnored();\n+                final ImportSummary is = new ImportSummary( ERROR,\n+                    \"Event \" + eventToImport.getUid() + \" already exists or was deleted earlier\" )\n+                        .setReference( eventToImport.getUid() ).incrementIgnored();\n \n-                    importSummaries.addImportSummary( is );\n-                }\n-                else\n-                {\n-                    importableEvents.add( eventToImport );\n-                }\n+                importSummaries.addImportSummary( is );\n+\n+                continue;\n             }\n-        }\n \n+            boolean isValid = isValidEvent( workContext, eventToImport, importableStageEvents, importSummaries );\n+\n+            if ( isValid )\n+            {\n+                importableEvents.add( eventToImport );\n+            }\n+        }\n         return importableEvents;\n     }\n \n+    private boolean isValidEvent(final WorkContext workContext, Event event, Set<String> importableStageEvents, final ImportSummaries importSummaries )\n+    {\n+        Program program = workContext.getProgramsMap().get( event.getProgram() );\n+\n+        ProgramStage programStage = workContext.getProgramStage( IdScheme.UID, event.getProgramStage() );\n+\n+        if ( program == null )\n+        {\n+            final ImportSummary is = new ImportSummary( ERROR, \"Program \" + event.getProgram() + \" does not point to a valid program\" )", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc1MjcxMg=="}, "originalCommit": {"oid": "8bdbf52bbeb5594ee09deb5d231cd1317bc7ebd4"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzQwNzc0OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNzo1NjowMFrOHYyY_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMToyMDo1MVrOHY5QqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc1MzQ2OA==", "bodyText": "We already have a validation rule that checks this condition: ProgramStageCheck", "url": "https://github.com/dhis2/dhis2-core/pull/6267#discussion_r495753468", "createdAt": "2020-09-28T07:56:00Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventManager.java", "diffHunk": "@@ -344,30 +354,81 @@ private void handleFailure( final WorkContext workContext, final ImportSummaries\n         final WorkContext workContext )\n     {\n         List<Event> importableEvents = new ArrayList<>();\n-        if ( CollectionUtils.isNotEmpty( events ) )\n-        {\n-            final Set<String> existingProgramStageInstances = workContext.getProgramStageInstanceMap().keySet();\n+        Set<String> importableStageEvents = new HashSet<>();\n+        final Set<String> existingProgramStageInstances = workContext.getProgramStageInstanceMap().keySet();\n \n-            for ( Event eventToImport : events )\n+        for ( Event eventToImport : events )\n+        {\n+            if ( existingProgramStageInstances.contains( eventToImport.getUid() ) )\n             {\n-                if ( existingProgramStageInstances.contains( eventToImport.getUid() ) )\n-                {\n-                    final ImportSummary is = new ImportSummary( ERROR,\n-                        \"Event \" + eventToImport.getUid() + \" already exists or was deleted earlier\" )\n-                            .setReference( eventToImport.getUid() ).incrementIgnored();\n+                final ImportSummary is = new ImportSummary( ERROR,\n+                    \"Event \" + eventToImport.getUid() + \" already exists or was deleted earlier\" )\n+                        .setReference( eventToImport.getUid() ).incrementIgnored();\n \n-                    importSummaries.addImportSummary( is );\n-                }\n-                else\n-                {\n-                    importableEvents.add( eventToImport );\n-                }\n+                importSummaries.addImportSummary( is );\n+\n+                continue;\n             }\n-        }\n \n+            boolean isValid = isValidEvent( workContext, eventToImport, importableStageEvents, importSummaries );\n+\n+            if ( isValid )\n+            {\n+                importableEvents.add( eventToImport );\n+            }\n+        }\n         return importableEvents;\n     }\n \n+    private boolean isValidEvent(final WorkContext workContext, Event event, Set<String> importableStageEvents, final ImportSummaries importSummaries )\n+    {\n+        Program program = workContext.getProgramsMap().get( event.getProgram() );\n+\n+        ProgramStage programStage = workContext.getProgramStage( IdScheme.UID, event.getProgramStage() );\n+\n+        if ( program == null )\n+        {\n+            final ImportSummary is = new ImportSummary( ERROR, \"Program \" + event.getProgram() + \" does not point to a valid program\" )\n+                    .setReference( event.getUid() ).incrementIgnored();\n+\n+            importSummaries.addImportSummary( is );\n+\n+            return false;\n+        }\n+\n+        if ( programStage == null )\n+        {\n+            final ImportSummary is = new ImportSummary( ERROR, \"ProgramStage \" + event.getProgramStage() + \" does not point to a valid programStage\" )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bdbf52bbeb5594ee09deb5d231cd1317bc7ebd4"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg2NjAyNA==", "bodyText": "hmmm... so what this check already plugged in? or does program stage check precede program check? I added it because of a test failure", "url": "https://github.com/dhis2/dhis2-core/pull/6267#discussion_r495866024", "createdAt": "2020-09-28T11:20:51Z", "author": {"login": "abyot"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventManager.java", "diffHunk": "@@ -344,30 +354,81 @@ private void handleFailure( final WorkContext workContext, final ImportSummaries\n         final WorkContext workContext )\n     {\n         List<Event> importableEvents = new ArrayList<>();\n-        if ( CollectionUtils.isNotEmpty( events ) )\n-        {\n-            final Set<String> existingProgramStageInstances = workContext.getProgramStageInstanceMap().keySet();\n+        Set<String> importableStageEvents = new HashSet<>();\n+        final Set<String> existingProgramStageInstances = workContext.getProgramStageInstanceMap().keySet();\n \n-            for ( Event eventToImport : events )\n+        for ( Event eventToImport : events )\n+        {\n+            if ( existingProgramStageInstances.contains( eventToImport.getUid() ) )\n             {\n-                if ( existingProgramStageInstances.contains( eventToImport.getUid() ) )\n-                {\n-                    final ImportSummary is = new ImportSummary( ERROR,\n-                        \"Event \" + eventToImport.getUid() + \" already exists or was deleted earlier\" )\n-                            .setReference( eventToImport.getUid() ).incrementIgnored();\n+                final ImportSummary is = new ImportSummary( ERROR,\n+                    \"Event \" + eventToImport.getUid() + \" already exists or was deleted earlier\" )\n+                        .setReference( eventToImport.getUid() ).incrementIgnored();\n \n-                    importSummaries.addImportSummary( is );\n-                }\n-                else\n-                {\n-                    importableEvents.add( eventToImport );\n-                }\n+                importSummaries.addImportSummary( is );\n+\n+                continue;\n             }\n-        }\n \n+            boolean isValid = isValidEvent( workContext, eventToImport, importableStageEvents, importSummaries );\n+\n+            if ( isValid )\n+            {\n+                importableEvents.add( eventToImport );\n+            }\n+        }\n         return importableEvents;\n     }\n \n+    private boolean isValidEvent(final WorkContext workContext, Event event, Set<String> importableStageEvents, final ImportSummaries importSummaries )\n+    {\n+        Program program = workContext.getProgramsMap().get( event.getProgram() );\n+\n+        ProgramStage programStage = workContext.getProgramStage( IdScheme.UID, event.getProgramStage() );\n+\n+        if ( program == null )\n+        {\n+            final ImportSummary is = new ImportSummary( ERROR, \"Program \" + event.getProgram() + \" does not point to a valid program\" )\n+                    .setReference( event.getUid() ).incrementIgnored();\n+\n+            importSummaries.addImportSummary( is );\n+\n+            return false;\n+        }\n+\n+        if ( programStage == null )\n+        {\n+            final ImportSummary is = new ImportSummary( ERROR, \"ProgramStage \" + event.getProgramStage() + \" does not point to a valid programStage\" )", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc1MzQ2OA=="}, "originalCommit": {"oid": "8bdbf52bbeb5594ee09deb5d231cd1317bc7ebd4"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzQxMjY2OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventManager.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNzo1NzoyN1rOHYycIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNzowMzoxMVrOHZHvPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc1NDI3Mw==", "bodyText": "The refactoring of the Event import flow is designed around the concept of pipelines (preprocess, validation, postprocess). Any validation logic should be moved into a validation class (for instance in this case, a rule class named NonRepeatableProgramCheck)", "url": "https://github.com/dhis2/dhis2-core/pull/6267#discussion_r495754273", "createdAt": "2020-09-28T07:57:27Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventManager.java", "diffHunk": "@@ -344,30 +354,81 @@ private void handleFailure( final WorkContext workContext, final ImportSummaries\n         final WorkContext workContext )\n     {\n         List<Event> importableEvents = new ArrayList<>();\n-        if ( CollectionUtils.isNotEmpty( events ) )\n-        {\n-            final Set<String> existingProgramStageInstances = workContext.getProgramStageInstanceMap().keySet();\n+        Set<String> importableStageEvents = new HashSet<>();\n+        final Set<String> existingProgramStageInstances = workContext.getProgramStageInstanceMap().keySet();\n \n-            for ( Event eventToImport : events )\n+        for ( Event eventToImport : events )\n+        {\n+            if ( existingProgramStageInstances.contains( eventToImport.getUid() ) )\n             {\n-                if ( existingProgramStageInstances.contains( eventToImport.getUid() ) )\n-                {\n-                    final ImportSummary is = new ImportSummary( ERROR,\n-                        \"Event \" + eventToImport.getUid() + \" already exists or was deleted earlier\" )\n-                            .setReference( eventToImport.getUid() ).incrementIgnored();\n+                final ImportSummary is = new ImportSummary( ERROR,\n+                    \"Event \" + eventToImport.getUid() + \" already exists or was deleted earlier\" )\n+                        .setReference( eventToImport.getUid() ).incrementIgnored();\n \n-                    importSummaries.addImportSummary( is );\n-                }\n-                else\n-                {\n-                    importableEvents.add( eventToImport );\n-                }\n+                importSummaries.addImportSummary( is );\n+\n+                continue;\n             }\n-        }\n \n+            boolean isValid = isValidEvent( workContext, eventToImport, importableStageEvents, importSummaries );\n+\n+            if ( isValid )\n+            {\n+                importableEvents.add( eventToImport );\n+            }\n+        }\n         return importableEvents;\n     }\n \n+    private boolean isValidEvent(final WorkContext workContext, Event event, Set<String> importableStageEvents, final ImportSummaries importSummaries )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bdbf52bbeb5594ee09deb5d231cd1317bc7ebd4"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg2NTQ0NA==", "bodyText": "Ok, this is a good point. Will create this new class. But EventManager is checking existing or not events ?", "url": "https://github.com/dhis2/dhis2-core/pull/6267#discussion_r495865444", "createdAt": "2020-09-28T11:19:42Z", "author": {"login": "abyot"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventManager.java", "diffHunk": "@@ -344,30 +354,81 @@ private void handleFailure( final WorkContext workContext, final ImportSummaries\n         final WorkContext workContext )\n     {\n         List<Event> importableEvents = new ArrayList<>();\n-        if ( CollectionUtils.isNotEmpty( events ) )\n-        {\n-            final Set<String> existingProgramStageInstances = workContext.getProgramStageInstanceMap().keySet();\n+        Set<String> importableStageEvents = new HashSet<>();\n+        final Set<String> existingProgramStageInstances = workContext.getProgramStageInstanceMap().keySet();\n \n-            for ( Event eventToImport : events )\n+        for ( Event eventToImport : events )\n+        {\n+            if ( existingProgramStageInstances.contains( eventToImport.getUid() ) )\n             {\n-                if ( existingProgramStageInstances.contains( eventToImport.getUid() ) )\n-                {\n-                    final ImportSummary is = new ImportSummary( ERROR,\n-                        \"Event \" + eventToImport.getUid() + \" already exists or was deleted earlier\" )\n-                            .setReference( eventToImport.getUid() ).incrementIgnored();\n+                final ImportSummary is = new ImportSummary( ERROR,\n+                    \"Event \" + eventToImport.getUid() + \" already exists or was deleted earlier\" )\n+                        .setReference( eventToImport.getUid() ).incrementIgnored();\n \n-                    importSummaries.addImportSummary( is );\n-                }\n-                else\n-                {\n-                    importableEvents.add( eventToImport );\n-                }\n+                importSummaries.addImportSummary( is );\n+\n+                continue;\n             }\n-        }\n \n+            boolean isValid = isValidEvent( workContext, eventToImport, importableStageEvents, importSummaries );\n+\n+            if ( isValid )\n+            {\n+                importableEvents.add( eventToImport );\n+            }\n+        }\n         return importableEvents;\n     }\n \n+    private boolean isValidEvent(final WorkContext workContext, Event event, Set<String> importableStageEvents, final ImportSummaries importSummaries )", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc1NDI3Mw=="}, "originalCommit": {"oid": "8bdbf52bbeb5594ee09deb5d231cd1317bc7ebd4"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEwMzIzMQ==", "bodyText": "EventManager does not execute any validation, it delegates to the validation framework.", "url": "https://github.com/dhis2/dhis2-core/pull/6267#discussion_r496103231", "createdAt": "2020-09-28T17:03:11Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventManager.java", "diffHunk": "@@ -344,30 +354,81 @@ private void handleFailure( final WorkContext workContext, final ImportSummaries\n         final WorkContext workContext )\n     {\n         List<Event> importableEvents = new ArrayList<>();\n-        if ( CollectionUtils.isNotEmpty( events ) )\n-        {\n-            final Set<String> existingProgramStageInstances = workContext.getProgramStageInstanceMap().keySet();\n+        Set<String> importableStageEvents = new HashSet<>();\n+        final Set<String> existingProgramStageInstances = workContext.getProgramStageInstanceMap().keySet();\n \n-            for ( Event eventToImport : events )\n+        for ( Event eventToImport : events )\n+        {\n+            if ( existingProgramStageInstances.contains( eventToImport.getUid() ) )\n             {\n-                if ( existingProgramStageInstances.contains( eventToImport.getUid() ) )\n-                {\n-                    final ImportSummary is = new ImportSummary( ERROR,\n-                        \"Event \" + eventToImport.getUid() + \" already exists or was deleted earlier\" )\n-                            .setReference( eventToImport.getUid() ).incrementIgnored();\n+                final ImportSummary is = new ImportSummary( ERROR,\n+                    \"Event \" + eventToImport.getUid() + \" already exists or was deleted earlier\" )\n+                        .setReference( eventToImport.getUid() ).incrementIgnored();\n \n-                    importSummaries.addImportSummary( is );\n-                }\n-                else\n-                {\n-                    importableEvents.add( eventToImport );\n-                }\n+                importSummaries.addImportSummary( is );\n+\n+                continue;\n             }\n-        }\n \n+            boolean isValid = isValidEvent( workContext, eventToImport, importableStageEvents, importSummaries );\n+\n+            if ( isValid )\n+            {\n+                importableEvents.add( eventToImport );\n+            }\n+        }\n         return importableEvents;\n     }\n \n+    private boolean isValidEvent(final WorkContext workContext, Event event, Set<String> importableStageEvents, final ImportSummaries importSummaries )", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc1NDI3Mw=="}, "originalCommit": {"oid": "8bdbf52bbeb5594ee09deb5d231cd1317bc7ebd4"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzQxNzM0OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventManager.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNzo1ODo0OFrOHYye7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMjoyOToyM1rOHY7Xlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc1NDk4OA==", "bodyText": "We already have a validation rule that checks this condition: ProgramInstanceRepeatableStageCheck. We don't check for \"duplicated events\" but it should be possible to add it easily?", "url": "https://github.com/dhis2/dhis2-core/pull/6267#discussion_r495754988", "createdAt": "2020-09-28T07:58:48Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventManager.java", "diffHunk": "@@ -344,30 +354,81 @@ private void handleFailure( final WorkContext workContext, final ImportSummaries\n         final WorkContext workContext )\n     {\n         List<Event> importableEvents = new ArrayList<>();\n-        if ( CollectionUtils.isNotEmpty( events ) )\n-        {\n-            final Set<String> existingProgramStageInstances = workContext.getProgramStageInstanceMap().keySet();\n+        Set<String> importableStageEvents = new HashSet<>();\n+        final Set<String> existingProgramStageInstances = workContext.getProgramStageInstanceMap().keySet();\n \n-            for ( Event eventToImport : events )\n+        for ( Event eventToImport : events )\n+        {\n+            if ( existingProgramStageInstances.contains( eventToImport.getUid() ) )\n             {\n-                if ( existingProgramStageInstances.contains( eventToImport.getUid() ) )\n-                {\n-                    final ImportSummary is = new ImportSummary( ERROR,\n-                        \"Event \" + eventToImport.getUid() + \" already exists or was deleted earlier\" )\n-                            .setReference( eventToImport.getUid() ).incrementIgnored();\n+                final ImportSummary is = new ImportSummary( ERROR,\n+                    \"Event \" + eventToImport.getUid() + \" already exists or was deleted earlier\" )\n+                        .setReference( eventToImport.getUid() ).incrementIgnored();\n \n-                    importSummaries.addImportSummary( is );\n-                }\n-                else\n-                {\n-                    importableEvents.add( eventToImport );\n-                }\n+                importSummaries.addImportSummary( is );\n+\n+                continue;\n             }\n-        }\n \n+            boolean isValid = isValidEvent( workContext, eventToImport, importableStageEvents, importSummaries );\n+\n+            if ( isValid )\n+            {\n+                importableEvents.add( eventToImport );\n+            }\n+        }\n         return importableEvents;\n     }\n \n+    private boolean isValidEvent(final WorkContext workContext, Event event, Set<String> importableStageEvents, final ImportSummaries importSummaries )\n+    {\n+        Program program = workContext.getProgramsMap().get( event.getProgram() );\n+\n+        ProgramStage programStage = workContext.getProgramStage( IdScheme.UID, event.getProgramStage() );\n+\n+        if ( program == null )\n+        {\n+            final ImportSummary is = new ImportSummary( ERROR, \"Program \" + event.getProgram() + \" does not point to a valid program\" )\n+                    .setReference( event.getUid() ).incrementIgnored();\n+\n+            importSummaries.addImportSummary( is );\n+\n+            return false;\n+        }\n+\n+        if ( programStage == null )\n+        {\n+            final ImportSummary is = new ImportSummary( ERROR, \"ProgramStage \" + event.getProgramStage() + \" does not point to a valid programStage\" )\n+                    .setReference( event.getUid() ).incrementIgnored();\n+\n+            importSummaries.addImportSummary( is );\n+\n+            return false;\n+        }\n+\n+        if ( programStage.getRepeatable() || program.isWithoutRegistration() )\n+        {\n+            return true;\n+        }\n+\n+        String eventContextId = programStage.getUid() + \"-\" + event.getEnrollment();\n+\n+        if ( importableStageEvents.contains( eventContextId ) )\n+        {\n+            final ImportSummary is = new ImportSummary( ERROR,\n+                \"ProgramStage \" + event.getProgramStage() + \" is not repeatable. Current payload contains duplicate event\" )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bdbf52bbeb5594ee09deb5d231cd1317bc7ebd4"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg2NzY3OA==", "bodyText": "We can do it here probably much better than ProgramStageCheck\nDoes WorkContext contain the entire event list from the payload?", "url": "https://github.com/dhis2/dhis2-core/pull/6267#discussion_r495867678", "createdAt": "2020-09-28T11:24:07Z", "author": {"login": "abyot"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventManager.java", "diffHunk": "@@ -344,30 +354,81 @@ private void handleFailure( final WorkContext workContext, final ImportSummaries\n         final WorkContext workContext )\n     {\n         List<Event> importableEvents = new ArrayList<>();\n-        if ( CollectionUtils.isNotEmpty( events ) )\n-        {\n-            final Set<String> existingProgramStageInstances = workContext.getProgramStageInstanceMap().keySet();\n+        Set<String> importableStageEvents = new HashSet<>();\n+        final Set<String> existingProgramStageInstances = workContext.getProgramStageInstanceMap().keySet();\n \n-            for ( Event eventToImport : events )\n+        for ( Event eventToImport : events )\n+        {\n+            if ( existingProgramStageInstances.contains( eventToImport.getUid() ) )\n             {\n-                if ( existingProgramStageInstances.contains( eventToImport.getUid() ) )\n-                {\n-                    final ImportSummary is = new ImportSummary( ERROR,\n-                        \"Event \" + eventToImport.getUid() + \" already exists or was deleted earlier\" )\n-                            .setReference( eventToImport.getUid() ).incrementIgnored();\n+                final ImportSummary is = new ImportSummary( ERROR,\n+                    \"Event \" + eventToImport.getUid() + \" already exists or was deleted earlier\" )\n+                        .setReference( eventToImport.getUid() ).incrementIgnored();\n \n-                    importSummaries.addImportSummary( is );\n-                }\n-                else\n-                {\n-                    importableEvents.add( eventToImport );\n-                }\n+                importSummaries.addImportSummary( is );\n+\n+                continue;\n             }\n-        }\n \n+            boolean isValid = isValidEvent( workContext, eventToImport, importableStageEvents, importSummaries );\n+\n+            if ( isValid )\n+            {\n+                importableEvents.add( eventToImport );\n+            }\n+        }\n         return importableEvents;\n     }\n \n+    private boolean isValidEvent(final WorkContext workContext, Event event, Set<String> importableStageEvents, final ImportSummaries importSummaries )\n+    {\n+        Program program = workContext.getProgramsMap().get( event.getProgram() );\n+\n+        ProgramStage programStage = workContext.getProgramStage( IdScheme.UID, event.getProgramStage() );\n+\n+        if ( program == null )\n+        {\n+            final ImportSummary is = new ImportSummary( ERROR, \"Program \" + event.getProgram() + \" does not point to a valid program\" )\n+                    .setReference( event.getUid() ).incrementIgnored();\n+\n+            importSummaries.addImportSummary( is );\n+\n+            return false;\n+        }\n+\n+        if ( programStage == null )\n+        {\n+            final ImportSummary is = new ImportSummary( ERROR, \"ProgramStage \" + event.getProgramStage() + \" does not point to a valid programStage\" )\n+                    .setReference( event.getUid() ).incrementIgnored();\n+\n+            importSummaries.addImportSummary( is );\n+\n+            return false;\n+        }\n+\n+        if ( programStage.getRepeatable() || program.isWithoutRegistration() )\n+        {\n+            return true;\n+        }\n+\n+        String eventContextId = programStage.getUid() + \"-\" + event.getEnrollment();\n+\n+        if ( importableStageEvents.contains( eventContextId ) )\n+        {\n+            final ImportSummary is = new ImportSummary( ERROR,\n+                \"ProgramStage \" + event.getProgramStage() + \" is not repeatable. Current payload contains duplicate event\" )", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc1NDk4OA=="}, "originalCommit": {"oid": "8bdbf52bbeb5594ee09deb5d231cd1317bc7ebd4"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkwMDU2Ng==", "bodyText": "No, each validation check checks only one event at the time. The events are not stored in the WorkContext", "url": "https://github.com/dhis2/dhis2-core/pull/6267#discussion_r495900566", "createdAt": "2020-09-28T12:29:23Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventManager.java", "diffHunk": "@@ -344,30 +354,81 @@ private void handleFailure( final WorkContext workContext, final ImportSummaries\n         final WorkContext workContext )\n     {\n         List<Event> importableEvents = new ArrayList<>();\n-        if ( CollectionUtils.isNotEmpty( events ) )\n-        {\n-            final Set<String> existingProgramStageInstances = workContext.getProgramStageInstanceMap().keySet();\n+        Set<String> importableStageEvents = new HashSet<>();\n+        final Set<String> existingProgramStageInstances = workContext.getProgramStageInstanceMap().keySet();\n \n-            for ( Event eventToImport : events )\n+        for ( Event eventToImport : events )\n+        {\n+            if ( existingProgramStageInstances.contains( eventToImport.getUid() ) )\n             {\n-                if ( existingProgramStageInstances.contains( eventToImport.getUid() ) )\n-                {\n-                    final ImportSummary is = new ImportSummary( ERROR,\n-                        \"Event \" + eventToImport.getUid() + \" already exists or was deleted earlier\" )\n-                            .setReference( eventToImport.getUid() ).incrementIgnored();\n+                final ImportSummary is = new ImportSummary( ERROR,\n+                    \"Event \" + eventToImport.getUid() + \" already exists or was deleted earlier\" )\n+                        .setReference( eventToImport.getUid() ).incrementIgnored();\n \n-                    importSummaries.addImportSummary( is );\n-                }\n-                else\n-                {\n-                    importableEvents.add( eventToImport );\n-                }\n+                importSummaries.addImportSummary( is );\n+\n+                continue;\n             }\n-        }\n \n+            boolean isValid = isValidEvent( workContext, eventToImport, importableStageEvents, importSummaries );\n+\n+            if ( isValid )\n+            {\n+                importableEvents.add( eventToImport );\n+            }\n+        }\n         return importableEvents;\n     }\n \n+    private boolean isValidEvent(final WorkContext workContext, Event event, Set<String> importableStageEvents, final ImportSummaries importSummaries )\n+    {\n+        Program program = workContext.getProgramsMap().get( event.getProgram() );\n+\n+        ProgramStage programStage = workContext.getProgramStage( IdScheme.UID, event.getProgramStage() );\n+\n+        if ( program == null )\n+        {\n+            final ImportSummary is = new ImportSummary( ERROR, \"Program \" + event.getProgram() + \" does not point to a valid program\" )\n+                    .setReference( event.getUid() ).incrementIgnored();\n+\n+            importSummaries.addImportSummary( is );\n+\n+            return false;\n+        }\n+\n+        if ( programStage == null )\n+        {\n+            final ImportSummary is = new ImportSummary( ERROR, \"ProgramStage \" + event.getProgramStage() + \" does not point to a valid programStage\" )\n+                    .setReference( event.getUid() ).incrementIgnored();\n+\n+            importSummaries.addImportSummary( is );\n+\n+            return false;\n+        }\n+\n+        if ( programStage.getRepeatable() || program.isWithoutRegistration() )\n+        {\n+            return true;\n+        }\n+\n+        String eventContextId = programStage.getUid() + \"-\" + event.getEnrollment();\n+\n+        if ( importableStageEvents.contains( eventContextId ) )\n+        {\n+            final ImportSummary is = new ImportSummary( ERROR,\n+                \"ProgramStage \" + event.getProgramStage() + \" is not repeatable. Current payload contains duplicate event\" )", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc1NDk4OA=="}, "originalCommit": {"oid": "8bdbf52bbeb5594ee09deb5d231cd1317bc7ebd4"}, "originalPosition": 147}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3832, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}