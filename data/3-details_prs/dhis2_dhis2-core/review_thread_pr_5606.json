{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5NDMwMDc5", "number": 5606, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNzo0MzowNFrOD-GIZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNDoxNzo1MFrOD-Pb1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NDM4NzU4OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-program-rule/src/main/java/org/hisp/dhis/programrule/engine/ProgramRuleEngine.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNzo0MzowNFrOGX_HHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNzo0MzowNFrOGX_HHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzgwNDQ0NA==", "bodyText": "Don't use * wildcard imports.", "url": "https://github.com/dhis2/dhis2-core/pull/5606#discussion_r427804444", "createdAt": "2020-05-20T07:43:04Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-services/dhis-service-program-rule/src/main/java/org/hisp/dhis/programrule/engine/ProgramRuleEngine.java", "diffHunk": "@@ -30,20 +30,16 @@\n \n import static com.google.common.base.Preconditions.checkNotNull;\n \n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n+import java.util.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "503654d3809f752a68d48ada2d67df4678d565b9"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NDc2OTMyOnYy", "diffSide": "RIGHT", "path": "dhis-2/pom.xml", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwOToyNDowMlrOGYC76Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNjowMDo0MlrOGZLk1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg2NzExMw==", "bodyText": "shouldn't it be 2.0.35.0.", "url": "https://github.com/dhis2/dhis2-core/pull/5606#discussion_r427867113", "createdAt": "2020-05-20T09:24:02Z", "author": {"login": "zubaira"}, "path": "dhis-2/pom.xml", "diffHunk": "@@ -623,7 +623,7 @@\n       <dependency>\n         <groupId>org.hisp.dhis.rules</groupId>\n         <artifactId>rule-engine</artifactId>\n-        <version>2.0.34.0-SNAPSHOT</version>\n+        <version>2.0.1-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "425dcad30eaf4394c7cbf33614d2f2bd40ba2c27"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg3MjgxMA==", "bodyText": "We should really talk about this and have a common strategy.\nIn my opinion, Rule-engine versioning should not follow DHIS2-core versioning, it should be completely independent.", "url": "https://github.com/dhis2/dhis2-core/pull/5606#discussion_r427872810", "createdAt": "2020-05-20T09:33:14Z", "author": {"login": "enricocolasante"}, "path": "dhis-2/pom.xml", "diffHunk": "@@ -623,7 +623,7 @@\n       <dependency>\n         <groupId>org.hisp.dhis.rules</groupId>\n         <artifactId>rule-engine</artifactId>\n-        <version>2.0.34.0-SNAPSHOT</version>\n+        <version>2.0.1-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg2NzExMw=="}, "originalCommit": {"oid": "425dcad30eaf4394c7cbf33614d2f2bd40ba2c27"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA1NzIzNg==", "bodyText": "Agree, it must be independent.", "url": "https://github.com/dhis2/dhis2-core/pull/5606#discussion_r429057236", "createdAt": "2020-05-22T06:00:42Z", "author": {"login": "larshelge"}, "path": "dhis-2/pom.xml", "diffHunk": "@@ -623,7 +623,7 @@\n       <dependency>\n         <groupId>org.hisp.dhis.rules</groupId>\n         <artifactId>rule-engine</artifactId>\n-        <version>2.0.34.0-SNAPSHOT</version>\n+        <version>2.0.1-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg2NzExMw=="}, "originalCommit": {"oid": "425dcad30eaf4394c7cbf33614d2f2bd40ba2c27"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NTc1NzU4OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/programrule/engine/ProgramRuleEngineService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMzo0ODozNFrOGYMnNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMzo0ODozNFrOGYMnNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAyNTY1NA==", "bodyText": "Would be good to have a Javadoc on the interface methods to explain what \"evaluate\" means and which effects are run", "url": "https://github.com/dhis2/dhis2-core/pull/5606#discussion_r428025654", "createdAt": "2020-05-20T13:48:34Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/programrule/engine/ProgramRuleEngineService.java", "diffHunk": "@@ -28,19 +28,15 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-import org.hisp.dhis.rules.models.RuleEffect;\n-\n import java.util.List;\n \n+import org.hisp.dhis.rules.models.RuleEffect;\n+\n /**\n  * Created by zubair@dhis2.org on 23.10.17.\n  */\n public interface ProgramRuleEngineService\n {\n-    List<RuleEffect> evaluateEnrollment( String enrollmentUid );\n-\n-    List<RuleEffect> evaluateEvent( String eventUid );\n-\n     List<RuleEffect> evaluateEnrollmentAndRunEffects( long enrollment );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "425dcad30eaf4394c7cbf33614d2f2bd40ba2c27"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NTc3OTMwOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/programrule/engine/ProgramRuleEntityMapperService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMzo1MjoyOVrOGYMz9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMzo1MjoyOVrOGYMz9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAyODkxNw==", "bodyText": "There are a number of unused methods  in this class, perhaps we can clean them up?\nList<Rule> toMappedProgramRules( Program program );\n\nRule toMappedProgramRule( ProgramRule programRule );\n\nList<RuleVariable> toMappedProgramRuleVariables( Program program );", "url": "https://github.com/dhis2/dhis2-core/pull/5606#discussion_r428028917", "createdAt": "2020-05-20T13:52:29Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/programrule/engine/ProgramRuleEntityMapperService.java", "diffHunk": "@@ -52,7 +53,7 @@\n     List<Rule> toMappedProgramRules();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "425dcad30eaf4394c7cbf33614d2f2bd40ba2c27"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NTgwMTI5OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/programrule/engine/ProgramRuleEntityMapperService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMzo1NjozNVrOGYNBaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNDoxNToyMlrOGY0dnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAzMjM2MQ==", "bodyText": "In general, using Optional as method argument is considered a bad practice (kind of controversial). Also read Java 10 docs: https://docs.oracle.com/javase/10/docs/api/java/util/Optional.html\n\nOptional is primarily intended for use as a method return type where there is a clear need to represent \"no result,\" and where using null is likely to cause errors. A variable whose type is Optional should never itself be null; it should always point to an Optional instance.", "url": "https://github.com/dhis2/dhis2-core/pull/5606#discussion_r428032361", "createdAt": "2020-05-20T13:56:35Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/programrule/engine/ProgramRuleEntityMapperService.java", "diffHunk": "@@ -88,13 +89,8 @@\n      *\n      * @return A list of mapped events for the list of DHIS events.\n      */\n-    List<RuleEvent> toMappedRuleEvents( Set<ProgramStageInstance> programStageInstances, ProgramStageInstance psiToEvaluate );\n-\n-    /**\n-     * @param programStageInstances list of events\n-     * @return A list of mapped events for the list of DHIS events.\n-     */\n-    List<RuleEvent> toMappedRuleEvents( Set<ProgramStageInstance> programStageInstances );\n+    List<RuleEvent> toMappedRuleEvents( Set<ProgramStageInstance> programStageInstances,\n+        Optional<ProgramStageInstance> psiToEvaluate );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "425dcad30eaf4394c7cbf33614d2f2bd40ba2c27"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY3ODU1OQ==", "bodyText": "I can simply remove it and make it nullable, it is not pretty either, but I will not pass Optional as a parameter.\nAnyway, we can discuss more about it", "url": "https://github.com/dhis2/dhis2-core/pull/5606#discussion_r428678559", "createdAt": "2020-05-21T14:15:22Z", "author": {"login": "enricocolasante"}, "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/programrule/engine/ProgramRuleEntityMapperService.java", "diffHunk": "@@ -88,13 +89,8 @@\n      *\n      * @return A list of mapped events for the list of DHIS events.\n      */\n-    List<RuleEvent> toMappedRuleEvents( Set<ProgramStageInstance> programStageInstances, ProgramStageInstance psiToEvaluate );\n-\n-    /**\n-     * @param programStageInstances list of events\n-     * @return A list of mapped events for the list of DHIS events.\n-     */\n-    List<RuleEvent> toMappedRuleEvents( Set<ProgramStageInstance> programStageInstances );\n+    List<RuleEvent> toMappedRuleEvents( Set<ProgramStageInstance> programStageInstances,\n+        Optional<ProgramStageInstance> psiToEvaluate );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAzMjM2MQ=="}, "originalCommit": {"oid": "425dcad30eaf4394c7cbf33614d2f2bd40ba2c27"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NTgxMTYzOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-program-rule/src/main/java/org/hisp/dhis/programrule/config/ProgramRuleConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMzo1ODoxNVrOGYNHfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNDoxNjoxMlrOGY0fpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAzMzkxNw==", "bodyText": "I think that some docs would be good here: what's old and new?", "url": "https://github.com/dhis2/dhis2-core/pull/5606#discussion_r428033917", "createdAt": "2020-05-20T13:58:15Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-program-rule/src/main/java/org/hisp/dhis/programrule/config/ProgramRuleConfig.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.hisp.dhis.programrule.config;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.constant.ConstantService;\n+import org.hisp.dhis.organisationunit.OrganisationUnitGroupService;\n+import org.hisp.dhis.programrule.ProgramRuleVariableService;\n+import org.hisp.dhis.programrule.engine.*;\n+import org.hisp.dhis.user.CurrentUserService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * @author Enrico Colasante\n+ */\n+@Configuration( \"ruleEngineConfig\" )\n+public class ProgramRuleConfig\n+{\n+    @Autowired\n+    private ProgramRuleEntityMapperService programRuleEntityMapperService;\n+\n+    @Autowired\n+    private ProgramRuleVariableService programRuleVariableService;\n+\n+    @Autowired\n+    private OrganisationUnitGroupService organisationUnitGroupService;\n+\n+    @Autowired\n+    private RuleVariableInMemoryMap inMemoryMap;\n+\n+    @Autowired\n+    private CurrentUserService currentUserService;\n+\n+    @Autowired\n+    private ConstantService constantService;\n+\n+    @Bean( \"oldRuleEngine\" )\n+    public ProgramRuleEngine oldRuleEngine( OldImplementableRuleService oldImplementableRuleService )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "425dcad30eaf4394c7cbf33614d2f2bd40ba2c27"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY3OTA3OA==", "bodyText": "I need to find good names for them as well.\nI am thinking", "url": "https://github.com/dhis2/dhis2-core/pull/5606#discussion_r428679078", "createdAt": "2020-05-21T14:16:12Z", "author": {"login": "enricocolasante"}, "path": "dhis-2/dhis-services/dhis-service-program-rule/src/main/java/org/hisp/dhis/programrule/config/ProgramRuleConfig.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.hisp.dhis.programrule.config;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.constant.ConstantService;\n+import org.hisp.dhis.organisationunit.OrganisationUnitGroupService;\n+import org.hisp.dhis.programrule.ProgramRuleVariableService;\n+import org.hisp.dhis.programrule.engine.*;\n+import org.hisp.dhis.user.CurrentUserService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * @author Enrico Colasante\n+ */\n+@Configuration( \"ruleEngineConfig\" )\n+public class ProgramRuleConfig\n+{\n+    @Autowired\n+    private ProgramRuleEntityMapperService programRuleEntityMapperService;\n+\n+    @Autowired\n+    private ProgramRuleVariableService programRuleVariableService;\n+\n+    @Autowired\n+    private OrganisationUnitGroupService organisationUnitGroupService;\n+\n+    @Autowired\n+    private RuleVariableInMemoryMap inMemoryMap;\n+\n+    @Autowired\n+    private CurrentUserService currentUserService;\n+\n+    @Autowired\n+    private ConstantService constantService;\n+\n+    @Bean( \"oldRuleEngine\" )\n+    public ProgramRuleEngine oldRuleEngine( OldImplementableRuleService oldImplementableRuleService )", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAzMzkxNw=="}, "originalCommit": {"oid": "425dcad30eaf4394c7cbf33614d2f2bd40ba2c27"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NTgxODk5OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-program-rule/src/main/java/org/hisp/dhis/programrule/engine/DefaultProgramRuleEngineService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMzo1OTo0MVrOGYNMIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMzo0Nzo0N1rOGYzcOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAzNTEwNA==", "bodyText": "(minor) The loop:\nfor ( RuleEffect effect : ruleEffects )\n        {\n            ruleActionImplementers.stream().filter( i -> i.accept( effect.ruleAction() ) ).forEach( i -> {\n                log.debug( String.format( \"Invoking action implementer: %s\", i.getClass().getSimpleName() ) );\n\n                i.implement( effect, psi );\n            } );\n        }\n\nis duplicated in the same class, can it be refactored to avoid duplication?", "url": "https://github.com/dhis2/dhis2-core/pull/5606#discussion_r428035104", "createdAt": "2020-05-20T13:59:41Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-program-rule/src/main/java/org/hisp/dhis/programrule/engine/DefaultProgramRuleEngineService.java", "diffHunk": "@@ -82,12 +85,18 @@ public DefaultProgramRuleEngineService( ProgramRuleEngine programRuleEngine,\n     public List<RuleEffect> evaluateEnrollmentAndRunEffects( long programInstanceId )\n     {\n         ProgramInstance programInstance = programInstanceService.getProgramInstance( programInstanceId );\n-        List<RuleEffect> ruleEffects = getRuleEffects( programInstance );\n+\n+        if ( programInstance == null )\n+        {\n+            return Lists.newArrayList();\n+        }\n+\n+        List<RuleEffect> ruleEffects = getRuleEffects( programInstance, Optional.empty(),\n+            programInstance.getProgramStageInstances() );\n \n         for ( RuleEffect effect : ruleEffects )\n         {\n-            ruleActionImplementers.stream().filter( i -> i.accept( effect.ruleAction() ) ).forEach( i ->\n-            {\n+            ruleActionImplementers.stream().filter( i -> i.accept( effect.ruleAction() ) ).forEach( i -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "425dcad30eaf4394c7cbf33614d2f2bd40ba2c27"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY2MTgxOA==", "bodyText": "It is duplicated but it is slightly different because the implement method is called one time for ProgramInstance and another time for ProgramStageInstance.\nI will eventually refactor it to avoid this duplication, just not yet.", "url": "https://github.com/dhis2/dhis2-core/pull/5606#discussion_r428661818", "createdAt": "2020-05-21T13:47:47Z", "author": {"login": "enricocolasante"}, "path": "dhis-2/dhis-services/dhis-service-program-rule/src/main/java/org/hisp/dhis/programrule/engine/DefaultProgramRuleEngineService.java", "diffHunk": "@@ -82,12 +85,18 @@ public DefaultProgramRuleEngineService( ProgramRuleEngine programRuleEngine,\n     public List<RuleEffect> evaluateEnrollmentAndRunEffects( long programInstanceId )\n     {\n         ProgramInstance programInstance = programInstanceService.getProgramInstance( programInstanceId );\n-        List<RuleEffect> ruleEffects = getRuleEffects( programInstance );\n+\n+        if ( programInstance == null )\n+        {\n+            return Lists.newArrayList();\n+        }\n+\n+        List<RuleEffect> ruleEffects = getRuleEffects( programInstance, Optional.empty(),\n+            programInstance.getProgramStageInstances() );\n \n         for ( RuleEffect effect : ruleEffects )\n         {\n-            ruleActionImplementers.stream().filter( i -> i.accept( effect.ruleAction() ) ).forEach( i ->\n-            {\n+            ruleActionImplementers.stream().filter( i -> i.accept( effect.ruleAction() ) ).forEach( i -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAzNTEwNA=="}, "originalCommit": {"oid": "425dcad30eaf4394c7cbf33614d2f2bd40ba2c27"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NTg3MTc5OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-program-rule/src/main/java/org/hisp/dhis/programrule/engine/OldImplementableRuleService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNDoxMDoxM1rOGYNsyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNDoxMDoxM1rOGYNsyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA0MzQ2NQ==", "bodyText": "We try to stick to constructor based injection, using this \"template\":\nimport static com.google.common.base.Preconditions.checkNotNull;\n\npublic OldImplementableRuleService( ProgramRuleService programRuleService )\n    {\n        checkNotNull( programRuleService );\n        this.programRuleService = programRuleService;\n    }", "url": "https://github.com/dhis2/dhis2-core/pull/5606#discussion_r428043465", "createdAt": "2020-05-20T14:10:13Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-program-rule/src/main/java/org/hisp/dhis/programrule/engine/OldImplementableRuleService.java", "diffHunk": "@@ -28,48 +26,37 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-import javax.annotation.Nonnull;\n+package org.hisp.dhis.programrule.engine;\n \n-import org.apache.commons.jexl2.JexlException;\n-import org.hisp.dhis.commons.util.DebugUtils;\n-import org.hisp.dhis.commons.util.ExpressionUtils;\n-import org.hisp.dhis.rules.RuleExpressionEvaluator;\n-import org.springframework.stereotype.Component;\n+import java.util.List;\n \n-import lombok.extern.slf4j.Slf4j;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.programrule.ProgramRule;\n+import org.hisp.dhis.programrule.ProgramRuleActionType;\n+import org.hisp.dhis.programrule.ProgramRuleService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n \n-/**\n- * Created by zubair@dhis2.org on 11.10.17.\n- */\n-@Slf4j\n-@Component( \"org.hisp.dhis.programrule.engine.ProgramRuleExpressionEvaluator\" )\n-public class ProgramRuleExpressionEvaluator implements RuleExpressionEvaluator\n+@Component\n+public class OldImplementableRuleService implements ImplementableRuleService\n {\n-    /**\n-     * Return string value of boolean output. False will be returned in case\n-     * of wrongly created expression\n-     *\n-     * @param expression to be evaluated.\n-     * @return string value of boolean true/false.\n-     */\n+    @Autowired\n+    private ProgramRuleService programRuleService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "425dcad30eaf4394c7cbf33614d2f2bd40ba2c27"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NTg3Nzg1OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-program-rule/src/main/java/org/hisp/dhis/programrule/engine/ProgramRuleEngine.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNDoxMToxN1rOGYNwjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNDoxMToxN1rOGYNwjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA0NDQyOA==", "bodyText": "Same consideration as before regarding Optional as method param", "url": "https://github.com/dhis2/dhis2-core/pull/5606#discussion_r428044428", "createdAt": "2020-05-20T14:11:17Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-program-rule/src/main/java/org/hisp/dhis/programrule/engine/ProgramRuleEngine.java", "diffHunk": "@@ -88,108 +75,65 @@\n \n     private final ConstantService constantService;\n \n+    private final ImplementableRuleService implementableRuleService;\n+\n     public ProgramRuleEngine( ProgramRuleEntityMapperService programRuleEntityMapperService,\n-        ProgramRuleExpressionEvaluator programRuleExpressionEvaluator, ProgramRuleService programRuleService,\n         ProgramRuleVariableService programRuleVariableService,\n         OrganisationUnitGroupService organisationUnitGroupService, RuleVariableInMemoryMap inMemoryMap,\n-        CurrentUserService currentUserService, ConstantService constantService )\n+        CurrentUserService currentUserService, ConstantService constantService,\n+        ImplementableRuleService implementableRuleService )\n     {\n \n         checkNotNull( programRuleEntityMapperService );\n-        checkNotNull( programRuleExpressionEvaluator );\n-        checkNotNull( programRuleService );\n         checkNotNull( programRuleVariableService );\n         checkNotNull( organisationUnitGroupService );\n         checkNotNull( currentUserService );\n         checkNotNull( inMemoryMap );\n         checkNotNull( constantService );\n+        checkNotNull( implementableRuleService );\n \n         this.programRuleEntityMapperService = programRuleEntityMapperService;\n-        this.programRuleExpressionEvaluator = programRuleExpressionEvaluator;\n-        this.programRuleService = programRuleService;\n         this.programRuleVariableService = programRuleVariableService;\n         this.organisationUnitGroupService = organisationUnitGroupService;\n         this.inMemoryMap = inMemoryMap;\n         this.currentUserService = currentUserService;\n         this.constantService = constantService;\n+        this.implementableRuleService = implementableRuleService;\n     }\n \n-    public List<RuleEffect> evaluateEnrollment(ProgramInstance enrollment )\n+    public List<RuleEffect> evaluate( ProgramInstance enrollment, Optional<ProgramStageInstance> programStageInstance,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "425dcad30eaf4394c7cbf33614d2f2bd40ba2c27"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NTg4OTc0OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-program-rule/src/main/java/org/hisp/dhis/programrule/engine/ProgramRuleEngine.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNDoxMzo0MlrOGYN38A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNDoxMzo0MlrOGYN38A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA0NjMyMA==", "bodyText": "Why do we need to open a transaction here? It seems that all the dependencies open their own TX?\nAlso, I noticed that the class DefaultProgramRuleService uses a class level @Transactional annotation, which open a read/write TX also for get only method. I know it's outside the scope of this PR, but perhaps we can fix it.", "url": "https://github.com/dhis2/dhis2-core/pull/5606#discussion_r428046320", "createdAt": "2020-05-20T14:13:42Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-program-rule/src/main/java/org/hisp/dhis/programrule/engine/ProgramRuleEngine.java", "diffHunk": "@@ -52,32 +52,19 @@\n import org.hisp.dhis.rules.models.*;\n import org.hisp.dhis.user.CurrentUserService;\n import org.hisp.dhis.user.UserAuthorityGroup;\n-import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n-import lombok.extern.slf4j.Slf4j;\n-\n /**\n  * Created by zubair@dhis2.org on 11.10.17.\n  */\n @Slf4j\n @Transactional( readOnly = true )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "425dcad30eaf4394c7cbf33614d2f2bd40ba2c27"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NTkxMTg4OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerProgramRuleService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNDoxNzo1MFrOGYOFfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNDoxNzo1MFrOGYOFfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA0OTc4OA==", "bodyText": "(minor) Missing javadoc, either remove the @param or fill the missing info", "url": "https://github.com/dhis2/dhis2-core/pull/5606#discussion_r428049788", "createdAt": "2020-05-20T14:17:50Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerProgramRuleService.java", "diffHunk": "@@ -42,20 +44,23 @@\n public interface TrackerProgramRuleService\n {\n     /**\n-     * It feeds in enrollments given in {@link TrackerBundle} into rule engine and return a map of provided enrollments and\n-     * their associated rule effects which are returned by rule engine.\n+     * It feeds in enrollments given in {@link TrackerBundle} into rule engine and\n+     * return a map of provided enrollments and their associated rule effects which\n+     * are returned by rule engine.\n      *\n-     * @param trackerBundle\n+     * @param enrollments", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "425dcad30eaf4394c7cbf33614d2f2bd40ba2c27"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3416, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}