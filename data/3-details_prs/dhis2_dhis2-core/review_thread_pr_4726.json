{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzOTY0MDcz", "number": 4726, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMDowNjoyM1rODab-YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNzoyNToxN1rODbHwGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDQ3OTA1OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/audit/AuditAttribute.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMDowNjoyM1rOFhY7fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMDowNjoyM1rOFhY7fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU1NTc3Mg==", "bodyText": "Please, add some Javadoc to explain what is annotation is used for", "url": "https://github.com/dhis2/dhis2-core/pull/4726#discussion_r370555772", "createdAt": "2020-01-24T10:06:23Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/audit/AuditAttribute.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package org.hisp.dhis.audit;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fc4fa15ae11a78bec2e92d43dae65bdbb979702"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzY0OTg2OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-support/dhis-support-artemis/src/main/java/org/hisp/dhis/artemis/audit/legacy/DefaultAuditObjectFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNzoyNDoxOVrOFibJww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNToyMzowMlrOFi85Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY0MDc3MQ==", "bodyText": "We should probably keep this under watch and make sure we don't kick any fields out... we have quite a lot of classes, and while I'm not sure how many places we will add this attribute, we should never be in a situation where some fields are kicked out of the cache", "url": "https://github.com/dhis2/dhis2-core/pull/4726#discussion_r371640771", "createdAt": "2020-01-28T07:24:19Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-support/dhis-support-artemis/src/main/java/org/hisp/dhis/artemis/audit/legacy/DefaultAuditObjectFactory.java", "diffHunk": "@@ -46,9 +59,24 @@\n {\n     private final RenderService renderService;\n \n-    public DefaultAuditObjectFactory( RenderService renderService )\n+    private final CacheProvider cacheProvider;\n+\n+    private Cache<Map<Field, Method>> cachedAuditAttributeFields;\n+\n+    public DefaultAuditObjectFactory( RenderService renderService, CacheProvider cacheProvider )\n     {\n         this.renderService = renderService;\n+        this.cacheProvider = cacheProvider;\n+    }\n+\n+    @PostConstruct\n+    public void initCache()\n+    {\n+        cachedAuditAttributeFields = cacheProvider.newCacheBuilder( Field.class, Method.class )\n+            .forRegion( \"auditAttributeFields\" )\n+            .withInitialCapacity( 100 )\n+            .withMaximumSize( 500 )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fc4fa15ae11a78bec2e92d43dae65bdbb979702"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE5MzU0Nw==", "bodyText": "increased it to 500-1000", "url": "https://github.com/dhis2/dhis2-core/pull/4726#discussion_r372193547", "createdAt": "2020-01-29T05:23:02Z", "author": {"login": "vietnguyen"}, "path": "dhis-2/dhis-support/dhis-support-artemis/src/main/java/org/hisp/dhis/artemis/audit/legacy/DefaultAuditObjectFactory.java", "diffHunk": "@@ -46,9 +59,24 @@\n {\n     private final RenderService renderService;\n \n-    public DefaultAuditObjectFactory( RenderService renderService )\n+    private final CacheProvider cacheProvider;\n+\n+    private Cache<Map<Field, Method>> cachedAuditAttributeFields;\n+\n+    public DefaultAuditObjectFactory( RenderService renderService, CacheProvider cacheProvider )\n     {\n         this.renderService = renderService;\n+        this.cacheProvider = cacheProvider;\n+    }\n+\n+    @PostConstruct\n+    public void initCache()\n+    {\n+        cachedAuditAttributeFields = cacheProvider.newCacheBuilder( Field.class, Method.class )\n+            .forRegion( \"auditAttributeFields\" )\n+            .withInitialCapacity( 100 )\n+            .withMaximumSize( 500 )", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY0MDc3MQ=="}, "originalCommit": {"oid": "3fc4fa15ae11a78bec2e92d43dae65bdbb979702"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzY1MTQ0OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-support/dhis-support-artemis/src/main/java/org/hisp/dhis/artemis/audit/legacy/DefaultAuditObjectFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNzoyNToxN1rOFibKvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNzoyNToxN1rOFibKvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY0MTAyMQ==", "bodyText": "Could probably be collapsed to a single return? no need to split up here", "url": "https://github.com/dhis2/dhis2-core/pull/4726#discussion_r371641021", "createdAt": "2020-01-28T07:25:17Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-support/dhis-support-artemis/src/main/java/org/hisp/dhis/artemis/audit/legacy/DefaultAuditObjectFactory.java", "diffHunk": "@@ -67,6 +95,38 @@ public Object create( AuditScope auditScope, AuditType auditType, Object object,\n         return null;\n     }\n \n+    @Override\n+    public AuditAttributes collectAuditAttributes( Object auditObject )\n+    {\n+        AuditAttributes auditAttributes = new AuditAttributes();\n+\n+        getAuditAttributeFields( auditObject.getClass() ).entrySet().forEach( entry -> {\n+\n+            Object attributeObject = ReflectionUtils.invokeMethod( auditObject, entry.getValue() );\n+\n+            if ( !ReflectionUtils.isCollection( attributeObject ) )\n+            {\n+                if ( attributeObject instanceof IdentifiableObject )\n+                {\n+                    auditAttributes.put( entry.getKey().getName(), ( ( IdentifiableObject ) attributeObject).getUid() );\n+                }\n+                else\n+                {\n+                    auditAttributes.put( entry.getKey().getName(), attributeObject );\n+                }\n+            }\n+        } );\n+\n+        return auditAttributes;\n+    }\n+\n+    private Map<Field, Method> getAuditAttributeFields( Class<?> auditClass )\n+    {\n+        Optional<Map<Field, Method>> listFields = cachedAuditAttributeFields.get( auditClass.getName(), a -> AnnotationUtils.getAnnotatedFields( auditClass, AuditAttribute.class ) );\n+\n+        return listFields.orElse( new HashMap<>() );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fc4fa15ae11a78bec2e92d43dae65bdbb979702"}, "originalPosition": 86}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3603, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}