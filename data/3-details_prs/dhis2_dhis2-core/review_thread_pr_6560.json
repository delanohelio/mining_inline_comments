{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0NTQ1MDc0", "number": 6560, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMjoxODoxM1rOE3Myvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNToyNDowOFrOE3Rx1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MzE2NzM1OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/supplier/PreheatClassScanner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMjoxODoxM1rOHwZ7qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMDoyMDowOFrOHxG_Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUxODU3MA==", "bodyText": "Commented out code", "url": "https://github.com/dhis2/dhis2-core/pull/6560#discussion_r520518570", "createdAt": "2020-11-10T12:18:13Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/supplier/PreheatClassScanner.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package org.hisp.dhis.tracker.preheat.supplier;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.hisp.dhis.tracker.preheat.supplier.classStrategy.StrategyFor;\n+\n+import io.github.classgraph.AnnotationClassRef;\n+import io.github.classgraph.AnnotationInfo;\n+import io.github.classgraph.ClassGraph;\n+import io.github.classgraph.ClassInfo;\n+import io.github.classgraph.ScanResult;\n+\n+/**\n+ * This class is responsible for creating an associative map where the key is\n+ * the name of a Strategy class and the key is the name of the domain object\n+ * class to cache (based on the {@see StrategyFor} annotation)\n+ * \n+ * @author Luciano Fiandesio\n+ */\n+public class PreheatClassScanner\n+{\n+    public List<String> scanSuppliers()\n+    {\n+        final String pkg = getCurrentPackage();\n+        final String annotation = SupplierDependsOn.class.getName();\n+        try (ScanResult scanResult = new ClassGraph()\n+            // .disableJarScanning()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba3d0c65763776306e3b3c9ef501e5f7580544f2"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI1Njc1MQ==", "bodyText": "Fixed", "url": "https://github.com/dhis2/dhis2-core/pull/6560#discussion_r521256751", "createdAt": "2020-11-11T10:20:08Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/supplier/PreheatClassScanner.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package org.hisp.dhis.tracker.preheat.supplier;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.hisp.dhis.tracker.preheat.supplier.classStrategy.StrategyFor;\n+\n+import io.github.classgraph.AnnotationClassRef;\n+import io.github.classgraph.AnnotationInfo;\n+import io.github.classgraph.ClassGraph;\n+import io.github.classgraph.ClassInfo;\n+import io.github.classgraph.ScanResult;\n+\n+/**\n+ * This class is responsible for creating an associative map where the key is\n+ * the name of a Strategy class and the key is the name of the domain object\n+ * class to cache (based on the {@see StrategyFor} annotation)\n+ * \n+ * @author Luciano Fiandesio\n+ */\n+public class PreheatClassScanner\n+{\n+    public List<String> scanSuppliers()\n+    {\n+        final String pkg = getCurrentPackage();\n+        final String annotation = SupplierDependsOn.class.getName();\n+        try (ScanResult scanResult = new ClassGraph()\n+            // .disableJarScanning()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUxODU3MA=="}, "originalCommit": {"oid": "ba3d0c65763776306e3b3c9ef501e5f7580544f2"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MzIwNTk1OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/supplier/PreheatClassScanner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMjoyOTowMFrOHwaTNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMDoyMDozNFrOHxHAJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUyNDU5Nw==", "bodyText": "Not sure if I'm just not thinking straight, but I'm not sure this for loop does what we want it to?\nSo, I understand it as if we want to sort the list so that dependencies comes in the correct order. IE. if A->B->C, we want to make sure the list follows this.\nHowever, if we have an already ordered list, A->B->C, and C depends on A (which is still true in this order), we swap A and C, ending up out of order? So we need an if statement making sure we only swap when indexOf dependency is higher than current class?", "url": "https://github.com/dhis2/dhis2-core/pull/6560#discussion_r520524597", "createdAt": "2020-11-10T12:29:00Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/supplier/PreheatClassScanner.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package org.hisp.dhis.tracker.preheat.supplier;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.hisp.dhis.tracker.preheat.supplier.classStrategy.StrategyFor;\n+\n+import io.github.classgraph.AnnotationClassRef;\n+import io.github.classgraph.AnnotationInfo;\n+import io.github.classgraph.ClassGraph;\n+import io.github.classgraph.ClassInfo;\n+import io.github.classgraph.ScanResult;\n+\n+/**\n+ * This class is responsible for creating an associative map where the key is\n+ * the name of a Strategy class and the key is the name of the domain object\n+ * class to cache (based on the {@see StrategyFor} annotation)\n+ * \n+ * @author Luciano Fiandesio\n+ */\n+public class PreheatClassScanner\n+{\n+    public List<String> scanSuppliers()\n+    {\n+        final String pkg = getCurrentPackage();\n+        final String annotation = SupplierDependsOn.class.getName();\n+        try (ScanResult scanResult = new ClassGraph()\n+            // .disableJarScanning()\n+            .enableAllInfo()\n+            .disableNestedJarScanning()\n+            .acceptPackages( pkg )\n+            .scan())\n+        {\n+            List<String> cls = scanResult.getAllClasses().stream()\n+                .filter( c -> c.extendsSuperclass( AbstractPreheatSupplier.class.getName() ) )\n+                .map( ClassInfo::getSimpleName ).collect( Collectors.toList() );\n+\n+            for ( ClassInfo classInfo : scanResult.getClassesWithAnnotation( annotation ) )\n+            {\n+                String dependsOn = getTargetClass( classInfo, annotation );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba3d0c65763776306e3b3c9ef501e5f7580544f2"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI1Njk5OA==", "bodyText": "Removed entire class-path based logic", "url": "https://github.com/dhis2/dhis2-core/pull/6560#discussion_r521256998", "createdAt": "2020-11-11T10:20:34Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/supplier/PreheatClassScanner.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package org.hisp.dhis.tracker.preheat.supplier;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.hisp.dhis.tracker.preheat.supplier.classStrategy.StrategyFor;\n+\n+import io.github.classgraph.AnnotationClassRef;\n+import io.github.classgraph.AnnotationInfo;\n+import io.github.classgraph.ClassGraph;\n+import io.github.classgraph.ClassInfo;\n+import io.github.classgraph.ScanResult;\n+\n+/**\n+ * This class is responsible for creating an associative map where the key is\n+ * the name of a Strategy class and the key is the name of the domain object\n+ * class to cache (based on the {@see StrategyFor} annotation)\n+ * \n+ * @author Luciano Fiandesio\n+ */\n+public class PreheatClassScanner\n+{\n+    public List<String> scanSuppliers()\n+    {\n+        final String pkg = getCurrentPackage();\n+        final String annotation = SupplierDependsOn.class.getName();\n+        try (ScanResult scanResult = new ClassGraph()\n+            // .disableJarScanning()\n+            .enableAllInfo()\n+            .disableNestedJarScanning()\n+            .acceptPackages( pkg )\n+            .scan())\n+        {\n+            List<String> cls = scanResult.getAllClasses().stream()\n+                .filter( c -> c.extendsSuperclass( AbstractPreheatSupplier.class.getName() ) )\n+                .map( ClassInfo::getSimpleName ).collect( Collectors.toList() );\n+\n+            for ( ClassInfo classInfo : scanResult.getClassesWithAnnotation( annotation ) )\n+            {\n+                String dependsOn = getTargetClass( classInfo, annotation );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUyNDU5Nw=="}, "originalCommit": {"oid": "ba3d0c65763776306e3b3c9ef501e5f7580544f2"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MzI0MDc2OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/supplier/UserSupplier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMjozODoyN1rOHwaoWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMDoyMDo0OFrOHxHA5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUzMDAwOA==", "bodyText": "Entire class is commented out", "url": "https://github.com/dhis2/dhis2-core/pull/6560#discussion_r520530008", "createdAt": "2020-11-10T12:38:27Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/supplier/UserSupplier.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package org.hisp.dhis.tracker.preheat.supplier;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.hisp.dhis.common.CodeGenerator;\n+import org.hisp.dhis.common.IdentifiableObjectManager;\n+import org.hisp.dhis.tracker.TrackerIdentifier;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.preheat.TrackerPreheat;\n+import org.hisp.dhis.tracker.preheat.TrackerPreheatParams;\n+import org.hisp.dhis.user.User;\n+import org.springframework.stereotype.Component;\n+\n+import lombok.NonNull;\n+import lombok.RequiredArgsConstructor;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@RequiredArgsConstructor\n+@Component", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba3d0c65763776306e3b3c9ef501e5f7580544f2"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI1NzE5MQ==", "bodyText": "False positive :)", "url": "https://github.com/dhis2/dhis2-core/pull/6560#discussion_r521257191", "createdAt": "2020-11-11T10:20:48Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/supplier/UserSupplier.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package org.hisp.dhis.tracker.preheat.supplier;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.hisp.dhis.common.CodeGenerator;\n+import org.hisp.dhis.common.IdentifiableObjectManager;\n+import org.hisp.dhis.tracker.TrackerIdentifier;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.preheat.TrackerPreheat;\n+import org.hisp.dhis.tracker.preheat.TrackerPreheatParams;\n+import org.hisp.dhis.user.User;\n+import org.springframework.stereotype.Component;\n+\n+import lombok.NonNull;\n+import lombok.RequiredArgsConstructor;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@RequiredArgsConstructor\n+@Component", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUzMDAwOA=="}, "originalCommit": {"oid": "ba3d0c65763776306e3b3c9ef501e5f7580544f2"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MzkzNTI5OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/supplier/AbstractPreheatSupplier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNToxNDowM1rOHwhVaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMDoyMjo0OVrOHxHFiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYzOTg1MQ==", "bodyText": "I'm sure it doesn't add much overhead, but if debug isn't enabled maybe we can just skip the creation/starting of it?", "url": "https://github.com/dhis2/dhis2-core/pull/6560#discussion_r520639851", "createdAt": "2020-11-10T15:14:03Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/supplier/AbstractPreheatSupplier.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package org.hisp.dhis.tracker.preheat.supplier;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.commons.lang3.time.StopWatch;\n+import org.hisp.dhis.tracker.preheat.TrackerPreheat;\n+import org.hisp.dhis.tracker.preheat.TrackerPreheatParams;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * A {@link PreheatSupplier} subclass can implement this abstract class to\n+ * execute code before and after the supplier has been executed (e.g. timing)\n+ * \n+ * @author Luciano Fiandesio\n+ */\n+@Slf4j\n+public abstract class AbstractPreheatSupplier implements PreheatSupplier\n+{\n+    @Override\n+    public void add( TrackerPreheatParams params, TrackerPreheat preheat )\n+    {\n+        log.debug( \"Executing preheat supplier: {}\", this.getClass().getName() );\n+        StopWatch watch = new StopWatch();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e394071a1d2fc0eba487e87963bf70f47a368b60"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI1ODM3Ng==", "bodyText": "Fixed: added log.isDebugEnabled() to stopwatch logic", "url": "https://github.com/dhis2/dhis2-core/pull/6560#discussion_r521258376", "createdAt": "2020-11-11T10:22:49Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/supplier/AbstractPreheatSupplier.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package org.hisp.dhis.tracker.preheat.supplier;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.commons.lang3.time.StopWatch;\n+import org.hisp.dhis.tracker.preheat.TrackerPreheat;\n+import org.hisp.dhis.tracker.preheat.TrackerPreheatParams;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * A {@link PreheatSupplier} subclass can implement this abstract class to\n+ * execute code before and after the supplier has been executed (e.g. timing)\n+ * \n+ * @author Luciano Fiandesio\n+ */\n+@Slf4j\n+public abstract class AbstractPreheatSupplier implements PreheatSupplier\n+{\n+    @Override\n+    public void add( TrackerPreheatParams params, TrackerPreheat preheat )\n+    {\n+        log.debug( \"Executing preheat supplier: {}\", this.getClass().getName() );\n+        StopWatch watch = new StopWatch();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYzOTg1MQ=="}, "originalCommit": {"oid": "e394071a1d2fc0eba487e87963bf70f47a368b60"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2Mzk0Nzg0OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/supplier/PreheatStrategyScanner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNToxNjozMVrOHwhdKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMDoyMzo0N1rOHxHHkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY0MTgzMg==", "bodyText": "newline", "url": "https://github.com/dhis2/dhis2-core/pull/6560#discussion_r520641832", "createdAt": "2020-11-10T15:16:31Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/supplier/PreheatStrategyScanner.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package org.hisp.dhis.tracker.preheat.supplier;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.hisp.dhis.tracker.preheat.supplier.classStrategy.StrategyFor;\n+\n+import io.github.classgraph.AnnotationClassRef;\n+import io.github.classgraph.AnnotationInfo;\n+import io.github.classgraph.ClassGraph;\n+import io.github.classgraph.ClassInfo;\n+import io.github.classgraph.ScanResult;\n+\n+/**\n+ * This class is responsible for creating an associative map where the key is\n+ * the name of a Strategy class and the key is the name of the domain object\n+ * class to cache (based on the {@see StrategyFor} annotation)\n+ * \n+ * @author Luciano Fiandesio\n+ */\n+public class PreheatStrategyScanner\n+{\n+    public Map<String, String> scanSupplierStrategies()\n+    {\n+        Map<String, String> classMap = new HashMap<>();\n+        final String pkg = getCurrentPackage();\n+        final String annotation = StrategyFor.class.getName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e394071a1d2fc0eba487e87963bf70f47a368b60"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI1ODg5Ng==", "bodyText": "Fixed", "url": "https://github.com/dhis2/dhis2-core/pull/6560#discussion_r521258896", "createdAt": "2020-11-11T10:23:47Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/supplier/PreheatStrategyScanner.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package org.hisp.dhis.tracker.preheat.supplier;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.hisp.dhis.tracker.preheat.supplier.classStrategy.StrategyFor;\n+\n+import io.github.classgraph.AnnotationClassRef;\n+import io.github.classgraph.AnnotationInfo;\n+import io.github.classgraph.ClassGraph;\n+import io.github.classgraph.ClassInfo;\n+import io.github.classgraph.ScanResult;\n+\n+/**\n+ * This class is responsible for creating an associative map where the key is\n+ * the name of a Strategy class and the key is the name of the domain object\n+ * class to cache (based on the {@see StrategyFor} annotation)\n+ * \n+ * @author Luciano Fiandesio\n+ */\n+public class PreheatStrategyScanner\n+{\n+    public Map<String, String> scanSupplierStrategies()\n+    {\n+        Map<String, String> classMap = new HashMap<>();\n+        final String pkg = getCurrentPackage();\n+        final String annotation = StrategyFor.class.getName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY0MTgzMg=="}, "originalCommit": {"oid": "e394071a1d2fc0eba487e87963bf70f47a368b60"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2Mzk0ODU4OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/supplier/PreheatStrategyScanner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNToxNjo0MVrOHwhdpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMDoyMzo1M1rOHxHHvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY0MTk1Nw==", "bodyText": "newline", "url": "https://github.com/dhis2/dhis2-core/pull/6560#discussion_r520641957", "createdAt": "2020-11-10T15:16:41Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/supplier/PreheatStrategyScanner.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package org.hisp.dhis.tracker.preheat.supplier;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.hisp.dhis.tracker.preheat.supplier.classStrategy.StrategyFor;\n+\n+import io.github.classgraph.AnnotationClassRef;\n+import io.github.classgraph.AnnotationInfo;\n+import io.github.classgraph.ClassGraph;\n+import io.github.classgraph.ClassInfo;\n+import io.github.classgraph.ScanResult;\n+\n+/**\n+ * This class is responsible for creating an associative map where the key is\n+ * the name of a Strategy class and the key is the name of the domain object\n+ * class to cache (based on the {@see StrategyFor} annotation)\n+ * \n+ * @author Luciano Fiandesio\n+ */\n+public class PreheatStrategyScanner\n+{\n+    public Map<String, String> scanSupplierStrategies()\n+    {\n+        Map<String, String> classMap = new HashMap<>();\n+        final String pkg = getCurrentPackage();\n+        final String annotation = StrategyFor.class.getName();\n+        try (ScanResult scanResult = new ClassGraph()\n+            .enableClassInfo()\n+            .acceptPackages( pkg )\n+            .enableAnnotationInfo()\n+            .scan())\n+        {\n+            for ( ClassInfo classInfo : scanResult.getClassesWithAnnotation( annotation ) )\n+            {\n+                classMap.put( getTargetClass( classInfo, annotation ), classInfo.getSimpleName() );\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e394071a1d2fc0eba487e87963bf70f47a368b60"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI1ODk0MQ==", "bodyText": "Fixed", "url": "https://github.com/dhis2/dhis2-core/pull/6560#discussion_r521258941", "createdAt": "2020-11-11T10:23:53Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/supplier/PreheatStrategyScanner.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package org.hisp.dhis.tracker.preheat.supplier;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.hisp.dhis.tracker.preheat.supplier.classStrategy.StrategyFor;\n+\n+import io.github.classgraph.AnnotationClassRef;\n+import io.github.classgraph.AnnotationInfo;\n+import io.github.classgraph.ClassGraph;\n+import io.github.classgraph.ClassInfo;\n+import io.github.classgraph.ScanResult;\n+\n+/**\n+ * This class is responsible for creating an associative map where the key is\n+ * the name of a Strategy class and the key is the name of the domain object\n+ * class to cache (based on the {@see StrategyFor} annotation)\n+ * \n+ * @author Luciano Fiandesio\n+ */\n+public class PreheatStrategyScanner\n+{\n+    public Map<String, String> scanSupplierStrategies()\n+    {\n+        Map<String, String> classMap = new HashMap<>();\n+        final String pkg = getCurrentPackage();\n+        final String annotation = StrategyFor.class.getName();\n+        try (ScanResult scanResult = new ClassGraph()\n+            .enableClassInfo()\n+            .acceptPackages( pkg )\n+            .enableAnnotationInfo()\n+            .scan())\n+        {\n+            for ( ClassInfo classInfo : scanResult.getClassesWithAnnotation( annotation ) )\n+            {\n+                classMap.put( getTargetClass( classInfo, annotation ), classInfo.getSimpleName() );\n+            }\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY0MTk1Nw=="}, "originalCommit": {"oid": "e394071a1d2fc0eba487e87963bf70f47a368b60"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2Mzk1MTA2OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/supplier/PreheatStrategyScanner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNToxNzoxMFrOHwhfLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMDoyNTozN1rOHxHLvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY0MjM0OA==", "bodyText": "newline", "url": "https://github.com/dhis2/dhis2-core/pull/6560#discussion_r520642348", "createdAt": "2020-11-10T15:17:10Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/supplier/PreheatStrategyScanner.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package org.hisp.dhis.tracker.preheat.supplier;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.hisp.dhis.tracker.preheat.supplier.classStrategy.StrategyFor;\n+\n+import io.github.classgraph.AnnotationClassRef;\n+import io.github.classgraph.AnnotationInfo;\n+import io.github.classgraph.ClassGraph;\n+import io.github.classgraph.ClassInfo;\n+import io.github.classgraph.ScanResult;\n+\n+/**\n+ * This class is responsible for creating an associative map where the key is\n+ * the name of a Strategy class and the key is the name of the domain object\n+ * class to cache (based on the {@see StrategyFor} annotation)\n+ * \n+ * @author Luciano Fiandesio\n+ */\n+public class PreheatStrategyScanner\n+{\n+    public Map<String, String> scanSupplierStrategies()\n+    {\n+        Map<String, String> classMap = new HashMap<>();\n+        final String pkg = getCurrentPackage();\n+        final String annotation = StrategyFor.class.getName();\n+        try (ScanResult scanResult = new ClassGraph()\n+            .enableClassInfo()\n+            .acceptPackages( pkg )\n+            .enableAnnotationInfo()\n+            .scan())\n+        {\n+            for ( ClassInfo classInfo : scanResult.getClassesWithAnnotation( annotation ) )\n+            {\n+                classMap.put( getTargetClass( classInfo, annotation ), classInfo.getSimpleName() );\n+            }\n+        }\n+        return classMap;\n+    }\n+\n+    private String getCurrentPackage()\n+    {\n+        return this.getClass().getPackage().getName();\n+    }\n+\n+    private String getTargetClass( ClassInfo classInfo, String annotation )\n+    {\n+        AnnotationInfo annotationInfo = classInfo.getAnnotationInfo( annotation );\n+        AnnotationClassRef klazz = (AnnotationClassRef) annotationInfo.getParameterValues().get( 0 ).getValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e394071a1d2fc0eba487e87963bf70f47a368b60"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI1OTk2Ng==", "bodyText": "Fixed", "url": "https://github.com/dhis2/dhis2-core/pull/6560#discussion_r521259966", "createdAt": "2020-11-11T10:25:37Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/supplier/PreheatStrategyScanner.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package org.hisp.dhis.tracker.preheat.supplier;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.hisp.dhis.tracker.preheat.supplier.classStrategy.StrategyFor;\n+\n+import io.github.classgraph.AnnotationClassRef;\n+import io.github.classgraph.AnnotationInfo;\n+import io.github.classgraph.ClassGraph;\n+import io.github.classgraph.ClassInfo;\n+import io.github.classgraph.ScanResult;\n+\n+/**\n+ * This class is responsible for creating an associative map where the key is\n+ * the name of a Strategy class and the key is the name of the domain object\n+ * class to cache (based on the {@see StrategyFor} annotation)\n+ * \n+ * @author Luciano Fiandesio\n+ */\n+public class PreheatStrategyScanner\n+{\n+    public Map<String, String> scanSupplierStrategies()\n+    {\n+        Map<String, String> classMap = new HashMap<>();\n+        final String pkg = getCurrentPackage();\n+        final String annotation = StrategyFor.class.getName();\n+        try (ScanResult scanResult = new ClassGraph()\n+            .enableClassInfo()\n+            .acceptPackages( pkg )\n+            .enableAnnotationInfo()\n+            .scan())\n+        {\n+            for ( ClassInfo classInfo : scanResult.getClassesWithAnnotation( annotation ) )\n+            {\n+                classMap.put( getTargetClass( classInfo, annotation ), classInfo.getSimpleName() );\n+            }\n+        }\n+        return classMap;\n+    }\n+\n+    private String getCurrentPackage()\n+    {\n+        return this.getClass().getPackage().getName();\n+    }\n+\n+    private String getTargetClass( ClassInfo classInfo, String annotation )\n+    {\n+        AnnotationInfo annotationInfo = classInfo.getAnnotationInfo( annotation );\n+        AnnotationClassRef klazz = (AnnotationClassRef) annotationInfo.getParameterValues().get( 0 ).getValue();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY0MjM0OA=="}, "originalCommit": {"oid": "e394071a1d2fc0eba487e87963bf70f47a368b60"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2Mzk4NDIwOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/supplier/classStrategy/AbstractSchemaStrategy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNToyNDowOFrOHwh0Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMDoyNTozM1rOHxHLqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY0Nzc0Nw==", "bodyText": "newline", "url": "https://github.com/dhis2/dhis2-core/pull/6560#discussion_r520647747", "createdAt": "2020-11-10T15:24:08Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/supplier/classStrategy/AbstractSchemaStrategy.java", "diffHunk": "@@ -0,0 +1,125 @@\n+package org.hisp.dhis.tracker.preheat.supplier.classStrategy;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.util.List;\n+\n+import org.hisp.dhis.attribute.Attribute;\n+import org.hisp.dhis.common.IdentifiableObject;\n+import org.hisp.dhis.common.IdentifiableObjectManager;\n+import org.hisp.dhis.fieldfilter.Defaults;\n+import org.hisp.dhis.query.Query;\n+import org.hisp.dhis.query.QueryService;\n+import org.hisp.dhis.query.Restriction;\n+import org.hisp.dhis.query.Restrictions;\n+import org.hisp.dhis.schema.Schema;\n+import org.hisp.dhis.schema.SchemaService;\n+import org.hisp.dhis.tracker.TrackerIdScheme;\n+import org.hisp.dhis.tracker.TrackerIdentifier;\n+import org.hisp.dhis.tracker.preheat.TrackerPreheat;\n+import org.hisp.dhis.tracker.preheat.TrackerPreheatParams;\n+\n+/**\n+ * Abstract Tracker Preheat strategy that applies to strategies that employ the\n+ * generic {@link QueryService} to fetch data\n+ * \n+ * @author Luciano Fiandesio\n+ */\n+public abstract class AbstractSchemaStrategy implements ClassBasedSupplierStrategy\n+{\n+    protected final SchemaService schemaService;\n+\n+    private final QueryService queryService;\n+\n+    private final IdentifiableObjectManager manager;\n+\n+    public AbstractSchemaStrategy( SchemaService schemaService, QueryService queryService,\n+        IdentifiableObjectManager manager )\n+    {\n+        this.schemaService = schemaService;\n+        this.queryService = queryService;\n+        this.manager = manager;\n+    }\n+\n+    @Override\n+    public void add( TrackerPreheatParams params, List<List<String>> splitList, TrackerPreheat preheat )\n+    {\n+        TrackerIdentifier identifier = params.getIdentifiers().getByClass( getSchemaClass() );\n+        Schema schema = schemaService.getDynamicSchema( getSchemaClass() );\n+\n+        queryForIdentifiableObjects( preheat, schema, identifier, splitList );\n+    }\n+\n+    protected Class<?> getSchemaClass()\n+    {\n+        return getClass().getAnnotation( StrategyFor.class ).value();\n+    }\n+\n+    @SuppressWarnings( \"unchecked\" )\n+    protected void queryForIdentifiableObjects( TrackerPreheat preheat, Schema schema, TrackerIdentifier identifier,\n+        List<List<String>> splitList )\n+    {\n+        TrackerIdScheme idScheme = identifier.getIdScheme();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e394071a1d2fc0eba487e87963bf70f47a368b60"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI1OTk0Nw==", "bodyText": "Fixed", "url": "https://github.com/dhis2/dhis2-core/pull/6560#discussion_r521259947", "createdAt": "2020-11-11T10:25:33Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/supplier/classStrategy/AbstractSchemaStrategy.java", "diffHunk": "@@ -0,0 +1,125 @@\n+package org.hisp.dhis.tracker.preheat.supplier.classStrategy;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.util.List;\n+\n+import org.hisp.dhis.attribute.Attribute;\n+import org.hisp.dhis.common.IdentifiableObject;\n+import org.hisp.dhis.common.IdentifiableObjectManager;\n+import org.hisp.dhis.fieldfilter.Defaults;\n+import org.hisp.dhis.query.Query;\n+import org.hisp.dhis.query.QueryService;\n+import org.hisp.dhis.query.Restriction;\n+import org.hisp.dhis.query.Restrictions;\n+import org.hisp.dhis.schema.Schema;\n+import org.hisp.dhis.schema.SchemaService;\n+import org.hisp.dhis.tracker.TrackerIdScheme;\n+import org.hisp.dhis.tracker.TrackerIdentifier;\n+import org.hisp.dhis.tracker.preheat.TrackerPreheat;\n+import org.hisp.dhis.tracker.preheat.TrackerPreheatParams;\n+\n+/**\n+ * Abstract Tracker Preheat strategy that applies to strategies that employ the\n+ * generic {@link QueryService} to fetch data\n+ * \n+ * @author Luciano Fiandesio\n+ */\n+public abstract class AbstractSchemaStrategy implements ClassBasedSupplierStrategy\n+{\n+    protected final SchemaService schemaService;\n+\n+    private final QueryService queryService;\n+\n+    private final IdentifiableObjectManager manager;\n+\n+    public AbstractSchemaStrategy( SchemaService schemaService, QueryService queryService,\n+        IdentifiableObjectManager manager )\n+    {\n+        this.schemaService = schemaService;\n+        this.queryService = queryService;\n+        this.manager = manager;\n+    }\n+\n+    @Override\n+    public void add( TrackerPreheatParams params, List<List<String>> splitList, TrackerPreheat preheat )\n+    {\n+        TrackerIdentifier identifier = params.getIdentifiers().getByClass( getSchemaClass() );\n+        Schema schema = schemaService.getDynamicSchema( getSchemaClass() );\n+\n+        queryForIdentifiableObjects( preheat, schema, identifier, splitList );\n+    }\n+\n+    protected Class<?> getSchemaClass()\n+    {\n+        return getClass().getAnnotation( StrategyFor.class ).value();\n+    }\n+\n+    @SuppressWarnings( \"unchecked\" )\n+    protected void queryForIdentifiableObjects( TrackerPreheat preheat, Schema schema, TrackerIdentifier identifier,\n+        List<List<String>> splitList )\n+    {\n+        TrackerIdScheme idScheme = identifier.getIdScheme();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY0Nzc0Nw=="}, "originalCommit": {"oid": "e394071a1d2fc0eba487e87963bf70f47a368b60"}, "originalPosition": 88}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3745, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}