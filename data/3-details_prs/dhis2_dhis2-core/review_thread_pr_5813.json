{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzODgyNTc5", "number": 5813, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMTozMzozMVrOENx1nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwODowNjozNlrOEOJoAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODgzNDg0OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/user/UserServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMTozMzozMVrOGwkrKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNDo0Nzo1N1rOGwr8bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU4NTcwNw==", "bodyText": "Add missing test?", "url": "https://github.com/dhis2/dhis2-core/pull/5813#discussion_r453585707", "createdAt": "2020-07-13T11:33:31Z", "author": {"login": "netroms"}, "path": "dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/user/UserServiceTest.java", "diffHunk": "@@ -377,6 +377,28 @@ public void testGetByPhoneNumber()\n         assertEquals( userB, users.get( 0 ) );\n     }\n \n+    @Test\n+    public void testGetByIdentifier()\n+    {\n+        User userA = createUser( 'A' );\n+        User userB = createUser( 'B' );\n+        User userC = createUser( 'C' );\n+\n+        UserCredentials credentialsA = createUserCredentials( 'A', userA );\n+        UserCredentials credentialsB = createUserCredentials( 'B', userB );\n+        UserCredentials credentialsC = createUserCredentials( 'C', userC );\n+\n+        userService.addUser( userA );\n+        userService.addUser( userB );\n+        userService.addUser( userC );\n+\n+        userService.addUserCredentials( credentialsA );\n+        userService.addUserCredentials( credentialsB );\n+        userService.addUserCredentials( credentialsC );\n+\n+        //TODO Add tests", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b92813bea805505a9f587de62a99f98e926a0ee9"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzcwNDgxMw==", "bodyText": "Yep will do.", "url": "https://github.com/dhis2/dhis2-core/pull/5813#discussion_r453704813", "createdAt": "2020-07-13T14:47:57Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/user/UserServiceTest.java", "diffHunk": "@@ -377,6 +377,28 @@ public void testGetByPhoneNumber()\n         assertEquals( userB, users.get( 0 ) );\n     }\n \n+    @Test\n+    public void testGetByIdentifier()\n+    {\n+        User userA = createUser( 'A' );\n+        User userB = createUser( 'B' );\n+        User userC = createUser( 'C' );\n+\n+        UserCredentials credentialsA = createUserCredentials( 'A', userA );\n+        UserCredentials credentialsB = createUserCredentials( 'B', userB );\n+        UserCredentials credentialsC = createUserCredentials( 'C', userC );\n+\n+        userService.addUser( userA );\n+        userService.addUser( userB );\n+        userService.addUser( userC );\n+\n+        userService.addUserCredentials( credentialsA );\n+        userService.addUserCredentials( credentialsB );\n+        userService.addUserCredentials( credentialsC );\n+\n+        //TODO Add tests", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU4NTcwNw=="}, "originalCommit": {"oid": "b92813bea805505a9f587de62a99f98e926a0ee9"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMjczMjE2OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-support/dhis-support-system/src/main/java/org/hisp/dhis/system/util/ValidationUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwODowNjozNlrOGxI4Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwOToyODo0OVrOGxLxKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE3ODg2Ng==", "bodyText": "The username string would go directly into the query from UserCredentials uc where uc.username = :username. Have we already had sql escape somewhere in the api ?\ne.g. what if username string =  (select username from users order by lastlogin desc limit 1)", "url": "https://github.com/dhis2/dhis2-core/pull/5813#discussion_r454178866", "createdAt": "2020-07-14T08:06:36Z", "author": {"login": "vietnguyen"}, "path": "dhis-2/dhis-support/dhis-support-system/src/main/java/org/hisp/dhis/system/util/ValidationUtils.java", "diffHunk": "@@ -177,6 +179,36 @@ public static boolean urlIsValid( String url )\n         return new UrlValidator().isValid( url );\n     }\n \n+    /**\n+     * Validates whether a UUID is valid.\n+     *\n+     * @param uuid the UUID as string.\n+     * @return true if the UUID is valid, false otherwise.\n+     */\n+    public static boolean uuidIsValid( String uuid )\n+    {\n+        try\n+        {\n+            UUID.fromString( uuid );\n+            return true;\n+        }\n+        catch ( IllegalArgumentException ex )\n+        {\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Validates whether a username is valid.\n+     *\n+     * @param username the username.\n+     * @return true if the username is valid, false otherwise.\n+     */\n+    public static boolean usernameIsValid( String username )\n+    {\n+        return username != null && username.length() <= UserCredentials.USERNAME_MAX_LENGTH;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0c086fb5ea73d9807dea985a15d4dc791a6a1b8"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIyNjIxNg==", "bodyText": "Good point. We retrieve user credentials in HibernateUserCredentialsStore using a Hibernate Query with named parameters, where parameters are automatically SQL-sanitized by the JDBC driver.\nhttps://software-security.sans.org/developer-how-to/fix-sql-injection-in-java-hibernate", "url": "https://github.com/dhis2/dhis2-core/pull/5813#discussion_r454226216", "createdAt": "2020-07-14T09:28:49Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-support/dhis-support-system/src/main/java/org/hisp/dhis/system/util/ValidationUtils.java", "diffHunk": "@@ -177,6 +179,36 @@ public static boolean urlIsValid( String url )\n         return new UrlValidator().isValid( url );\n     }\n \n+    /**\n+     * Validates whether a UUID is valid.\n+     *\n+     * @param uuid the UUID as string.\n+     * @return true if the UUID is valid, false otherwise.\n+     */\n+    public static boolean uuidIsValid( String uuid )\n+    {\n+        try\n+        {\n+            UUID.fromString( uuid );\n+            return true;\n+        }\n+        catch ( IllegalArgumentException ex )\n+        {\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Validates whether a username is valid.\n+     *\n+     * @param username the username.\n+     * @return true if the username is valid, false otherwise.\n+     */\n+    public static boolean usernameIsValid( String username )\n+    {\n+        return username != null && username.length() <= UserCredentials.USERNAME_MAX_LENGTH;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE3ODg2Ng=="}, "originalCommit": {"oid": "c0c086fb5ea73d9807dea985a15d4dc791a6a1b8"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3989, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}