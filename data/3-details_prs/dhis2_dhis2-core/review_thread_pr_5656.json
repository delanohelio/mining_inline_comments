{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2MDY0NzI0", "number": 5656, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNzoyNDo0NFrOEBoApQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMDowNDowN1rOEEOp0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMTM5NTU3OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/tracker/acl/TrackedEntityInstanceAclReadTests.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNzoyNDo0NFrOGdlPew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMDo0MDozM1rOGe__aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY3MjA1OQ==", "bodyText": "I think this should go to its own class, somewhere in org.hisp.dhis.dto package", "url": "https://github.com/dhis2/dhis2-core/pull/5656#discussion_r433672059", "createdAt": "2020-06-02T07:24:44Z", "author": {"login": "vilkg"}, "path": "dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/tracker/acl/TrackedEntityInstanceAclReadTests.java", "diffHunk": "@@ -0,0 +1,539 @@\n+package org.hisp.dhis.tracker.acl;\n+\n+import com.google.common.collect.Lists;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import org.apache.commons.collections.ListUtils;\n+import org.hisp.dhis.ApiTest;\n+import org.hisp.dhis.actions.LoginActions;\n+import org.hisp.dhis.actions.RestApiActions;\n+import org.hisp.dhis.actions.UserActions;\n+import org.hisp.dhis.actions.metadata.MetadataActions;\n+import org.hisp.dhis.actions.tracker.EventActions;\n+import org.hisp.dhis.actions.tracker.TEIActions;\n+import org.hisp.dhis.dto.ApiResponse;\n+import org.hisp.dhis.helpers.QueryParamsBuilder;\n+import org.hisp.dhis.helpers.file.FileReaderUtils;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.function.ThrowingSupplier;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+import sun.rmi.runtime.Log;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+/**\n+ * @author Stian Sandvold\n+ */\n+public class TrackedEntityInstanceAclReadTests\n+    extends ApiTest\n+{\n+    private static final String _TEIS = \"trackedEntityInstances\";\n+\n+    private static final String _ENROLLMENTS = \"enrollments\";\n+\n+    private static final String _EVENTS = \"events\";\n+\n+    private static final String _TET = \"trackedEntityType\";\n+\n+    private static final String _PROGRAM = \"program\";\n+\n+    private static final String _PROGRAMSTAGE = \"programStage\";\n+\n+    private static final String _OU = \"orgUnit\";\n+\n+    private static final String _TEI = \"trackedEntityInstance\";\n+\n+    private static final String _ENROLLMENT = \"enrollment\";\n+\n+    private static final String _PROGRAMOWNERS = \"programOwners\";\n+\n+    private static final String _OWNEROU = \"ownerOrgUnit\";\n+\n+    private static final String _DELETED = \"deleted\";\n+\n+    private static final String _ATTRIBUTES = \"attributes\";\n+\n+    private static final String _ATTRIBUTE = \"attribute\";\n+\n+    private MetadataActions metadataActions;\n+\n+    private UserActions userActions;\n+\n+    private TEIActions teiActions;\n+\n+    private static final List<User> users = new ArrayList<>();\n+\n+    private class User", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6060ad7a1c23aabea0965ba8acd27f4ec7020288"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY4MDg5Nw==", "bodyText": "Now that I read everything, I guess this is more tailored to this specific test, so scratch that. We could reuse it with some modifications, read more here: https://github.com/rest-assured/rest-assured/wiki/Usage#object-mapping.", "url": "https://github.com/dhis2/dhis2-core/pull/5656#discussion_r433680897", "createdAt": "2020-06-02T07:42:00Z", "author": {"login": "vilkg"}, "path": "dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/tracker/acl/TrackedEntityInstanceAclReadTests.java", "diffHunk": "@@ -0,0 +1,539 @@\n+package org.hisp.dhis.tracker.acl;\n+\n+import com.google.common.collect.Lists;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import org.apache.commons.collections.ListUtils;\n+import org.hisp.dhis.ApiTest;\n+import org.hisp.dhis.actions.LoginActions;\n+import org.hisp.dhis.actions.RestApiActions;\n+import org.hisp.dhis.actions.UserActions;\n+import org.hisp.dhis.actions.metadata.MetadataActions;\n+import org.hisp.dhis.actions.tracker.EventActions;\n+import org.hisp.dhis.actions.tracker.TEIActions;\n+import org.hisp.dhis.dto.ApiResponse;\n+import org.hisp.dhis.helpers.QueryParamsBuilder;\n+import org.hisp.dhis.helpers.file.FileReaderUtils;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.function.ThrowingSupplier;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+import sun.rmi.runtime.Log;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+/**\n+ * @author Stian Sandvold\n+ */\n+public class TrackedEntityInstanceAclReadTests\n+    extends ApiTest\n+{\n+    private static final String _TEIS = \"trackedEntityInstances\";\n+\n+    private static final String _ENROLLMENTS = \"enrollments\";\n+\n+    private static final String _EVENTS = \"events\";\n+\n+    private static final String _TET = \"trackedEntityType\";\n+\n+    private static final String _PROGRAM = \"program\";\n+\n+    private static final String _PROGRAMSTAGE = \"programStage\";\n+\n+    private static final String _OU = \"orgUnit\";\n+\n+    private static final String _TEI = \"trackedEntityInstance\";\n+\n+    private static final String _ENROLLMENT = \"enrollment\";\n+\n+    private static final String _PROGRAMOWNERS = \"programOwners\";\n+\n+    private static final String _OWNEROU = \"ownerOrgUnit\";\n+\n+    private static final String _DELETED = \"deleted\";\n+\n+    private static final String _ATTRIBUTES = \"attributes\";\n+\n+    private static final String _ATTRIBUTE = \"attribute\";\n+\n+    private MetadataActions metadataActions;\n+\n+    private UserActions userActions;\n+\n+    private TEIActions teiActions;\n+\n+    private static final List<User> users = new ArrayList<>();\n+\n+    private class User", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY3MjA1OQ=="}, "originalCommit": {"oid": "6060ad7a1c23aabea0965ba8acd27f4ec7020288"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE1ODg5MQ==", "bodyText": "I rewrote and moved the /me response this way. I was about to do the same for /metadata, but after I got into it, I realized it would results in a lot of different files only support this single use-case, so I decided to keep it the way it is. I also moved the User class into it's own file to keep the test itself a bit cleaner :)", "url": "https://github.com/dhis2/dhis2-core/pull/5656#discussion_r435158891", "createdAt": "2020-06-04T10:40:33Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/tracker/acl/TrackedEntityInstanceAclReadTests.java", "diffHunk": "@@ -0,0 +1,539 @@\n+package org.hisp.dhis.tracker.acl;\n+\n+import com.google.common.collect.Lists;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import org.apache.commons.collections.ListUtils;\n+import org.hisp.dhis.ApiTest;\n+import org.hisp.dhis.actions.LoginActions;\n+import org.hisp.dhis.actions.RestApiActions;\n+import org.hisp.dhis.actions.UserActions;\n+import org.hisp.dhis.actions.metadata.MetadataActions;\n+import org.hisp.dhis.actions.tracker.EventActions;\n+import org.hisp.dhis.actions.tracker.TEIActions;\n+import org.hisp.dhis.dto.ApiResponse;\n+import org.hisp.dhis.helpers.QueryParamsBuilder;\n+import org.hisp.dhis.helpers.file.FileReaderUtils;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.function.ThrowingSupplier;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+import sun.rmi.runtime.Log;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+/**\n+ * @author Stian Sandvold\n+ */\n+public class TrackedEntityInstanceAclReadTests\n+    extends ApiTest\n+{\n+    private static final String _TEIS = \"trackedEntityInstances\";\n+\n+    private static final String _ENROLLMENTS = \"enrollments\";\n+\n+    private static final String _EVENTS = \"events\";\n+\n+    private static final String _TET = \"trackedEntityType\";\n+\n+    private static final String _PROGRAM = \"program\";\n+\n+    private static final String _PROGRAMSTAGE = \"programStage\";\n+\n+    private static final String _OU = \"orgUnit\";\n+\n+    private static final String _TEI = \"trackedEntityInstance\";\n+\n+    private static final String _ENROLLMENT = \"enrollment\";\n+\n+    private static final String _PROGRAMOWNERS = \"programOwners\";\n+\n+    private static final String _OWNEROU = \"ownerOrgUnit\";\n+\n+    private static final String _DELETED = \"deleted\";\n+\n+    private static final String _ATTRIBUTES = \"attributes\";\n+\n+    private static final String _ATTRIBUTE = \"attribute\";\n+\n+    private MetadataActions metadataActions;\n+\n+    private UserActions userActions;\n+\n+    private TEIActions teiActions;\n+\n+    private static final List<User> users = new ArrayList<>();\n+\n+    private class User", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY3MjA1OQ=="}, "originalCommit": {"oid": "6060ad7a1c23aabea0965ba8acd27f4ec7020288"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMTQwMjI4OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/tracker/acl/TrackedEntityInstanceAclReadTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNzoyNjo0NVrOGdlTuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNzoyNjo0NVrOGdlTuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY3MzE0Nw==", "bodyText": "Here you could use teiActions.postFile(''), since you don't do any modifications to the file", "url": "https://github.com/dhis2/dhis2-core/pull/5656#discussion_r433673147", "createdAt": "2020-06-02T07:26:45Z", "author": {"login": "vilkg"}, "path": "dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/tracker/acl/TrackedEntityInstanceAclReadTests.java", "diffHunk": "@@ -0,0 +1,539 @@\n+package org.hisp.dhis.tracker.acl;\n+\n+import com.google.common.collect.Lists;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import org.apache.commons.collections.ListUtils;\n+import org.hisp.dhis.ApiTest;\n+import org.hisp.dhis.actions.LoginActions;\n+import org.hisp.dhis.actions.RestApiActions;\n+import org.hisp.dhis.actions.UserActions;\n+import org.hisp.dhis.actions.metadata.MetadataActions;\n+import org.hisp.dhis.actions.tracker.EventActions;\n+import org.hisp.dhis.actions.tracker.TEIActions;\n+import org.hisp.dhis.dto.ApiResponse;\n+import org.hisp.dhis.helpers.QueryParamsBuilder;\n+import org.hisp.dhis.helpers.file.FileReaderUtils;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.function.ThrowingSupplier;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+import sun.rmi.runtime.Log;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+/**\n+ * @author Stian Sandvold\n+ */\n+public class TrackedEntityInstanceAclReadTests\n+    extends ApiTest\n+{\n+    private static final String _TEIS = \"trackedEntityInstances\";\n+\n+    private static final String _ENROLLMENTS = \"enrollments\";\n+\n+    private static final String _EVENTS = \"events\";\n+\n+    private static final String _TET = \"trackedEntityType\";\n+\n+    private static final String _PROGRAM = \"program\";\n+\n+    private static final String _PROGRAMSTAGE = \"programStage\";\n+\n+    private static final String _OU = \"orgUnit\";\n+\n+    private static final String _TEI = \"trackedEntityInstance\";\n+\n+    private static final String _ENROLLMENT = \"enrollment\";\n+\n+    private static final String _PROGRAMOWNERS = \"programOwners\";\n+\n+    private static final String _OWNEROU = \"ownerOrgUnit\";\n+\n+    private static final String _DELETED = \"deleted\";\n+\n+    private static final String _ATTRIBUTES = \"attributes\";\n+\n+    private static final String _ATTRIBUTE = \"attribute\";\n+\n+    private MetadataActions metadataActions;\n+\n+    private UserActions userActions;\n+\n+    private TEIActions teiActions;\n+\n+    private static final List<User> users = new ArrayList<>();\n+\n+    private class User\n+    {\n+        private String username;\n+\n+        private String uid;\n+\n+        private String password;\n+\n+        private Map<String, List<String>> dataRead;\n+\n+        private Map<String, List<String>> noDataRead;\n+\n+        private List<String> groups = new ArrayList<>();\n+\n+        private List<String> searchScope = new ArrayList<>();\n+\n+        private List<String> captureScope = new ArrayList<>();\n+\n+        private boolean allAuthority;\n+\n+        public User( String username, String uid, String password )\n+        {\n+            this.username = username;\n+            this.uid = uid;\n+            this.password = password;\n+        }\n+\n+        public String getUsername()\n+        {\n+            return username;\n+        }\n+\n+        public void setUsername( String username )\n+        {\n+            this.username = username;\n+        }\n+\n+        public String getUid()\n+        {\n+            return uid;\n+        }\n+\n+        public void setUid( String uid )\n+        {\n+            this.uid = uid;\n+        }\n+\n+        public String getPassword()\n+        {\n+            return password;\n+        }\n+\n+        public void setPassword( String password )\n+        {\n+            this.password = password;\n+        }\n+\n+        public Map<String, List<String>> getDataRead()\n+        {\n+            return dataRead;\n+        }\n+\n+        public void setDataRead( Map<String, List<String>> dataRead )\n+        {\n+            this.dataRead = dataRead;\n+        }\n+\n+        public Map<String, List<String>> getNoDataRead()\n+        {\n+            return noDataRead;\n+        }\n+\n+        public void setNoDataRead( Map<String, List<String>> noDataRead )\n+        {\n+            this.noDataRead = noDataRead;\n+        }\n+\n+        public List<String> getGroups()\n+        {\n+            return groups;\n+        }\n+\n+        public void setGroups( List<String> groups )\n+        {\n+            this.groups = groups;\n+        }\n+\n+        public List<String> getCaptureScope()\n+        {\n+            return captureScope;\n+        }\n+\n+        public void setCaptureScope( List<String> captureScope )\n+        {\n+            this.captureScope = captureScope;\n+        }\n+\n+        public List<String> getSearchScope()\n+        {\n+            return searchScope;\n+        }\n+\n+        public void setSearchScope( List<String> searchScope )\n+        {\n+            this.searchScope = searchScope;\n+        }\n+\n+        public List<String> getScopes()\n+        {\n+            return ListUtils.union( searchScope, captureScope );\n+        }\n+\n+        public void setAllAuthority( boolean allAuthority )\n+        {\n+            this.allAuthority = allAuthority;\n+        }\n+\n+        public boolean getAllAuthority()\n+        {\n+            return allAuthority;\n+        }\n+\n+        public boolean hasAllAuthority()\n+        {\n+            return allAuthority;\n+        }\n+    }\n+\n+    @BeforeAll\n+    public void before()\n+        throws Exception\n+    {\n+        teiActions = new TEIActions();\n+        metadataActions = new MetadataActions();\n+        userActions = new UserActions();\n+\n+        // Setup as SuperUser\n+        new LoginActions().loginAsDefaultUser();\n+\n+        // Set up metadata (Import twice to connect all references)\n+        metadataActions.importMetadata( new File( \"src/test/resources/tracker/acl/metadata.json\" ) );\n+        metadataActions.importMetadata( new File( \"src/test/resources/tracker/acl/metadata.json\" ) );\n+\n+        // Import test data\n+        JsonObject trackerData = new FileReaderUtils().read( new File( \"src/test/resources/tracker/acl/data.json\" ) )\n+            .get( JsonObject.class );\n+        teiActions.post( trackerData );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6060ad7a1c23aabea0965ba8acd27f4ec7020288"}, "originalPosition": 221}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMTQwNTgzOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/tracker/acl/TrackedEntityInstanceAclReadTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNzoyNzo0OVrOGdlV5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNzoyNzo0OVrOGdlV5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY3MzcwMg==", "bodyText": "Did you try importAndValidateMetadata() ? We might want to have validation here, since it will affect test execution if there are conflicts and metadata is not imported.", "url": "https://github.com/dhis2/dhis2-core/pull/5656#discussion_r433673702", "createdAt": "2020-06-02T07:27:49Z", "author": {"login": "vilkg"}, "path": "dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/tracker/acl/TrackedEntityInstanceAclReadTests.java", "diffHunk": "@@ -0,0 +1,539 @@\n+package org.hisp.dhis.tracker.acl;\n+\n+import com.google.common.collect.Lists;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import org.apache.commons.collections.ListUtils;\n+import org.hisp.dhis.ApiTest;\n+import org.hisp.dhis.actions.LoginActions;\n+import org.hisp.dhis.actions.RestApiActions;\n+import org.hisp.dhis.actions.UserActions;\n+import org.hisp.dhis.actions.metadata.MetadataActions;\n+import org.hisp.dhis.actions.tracker.EventActions;\n+import org.hisp.dhis.actions.tracker.TEIActions;\n+import org.hisp.dhis.dto.ApiResponse;\n+import org.hisp.dhis.helpers.QueryParamsBuilder;\n+import org.hisp.dhis.helpers.file.FileReaderUtils;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.function.ThrowingSupplier;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+import sun.rmi.runtime.Log;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+/**\n+ * @author Stian Sandvold\n+ */\n+public class TrackedEntityInstanceAclReadTests\n+    extends ApiTest\n+{\n+    private static final String _TEIS = \"trackedEntityInstances\";\n+\n+    private static final String _ENROLLMENTS = \"enrollments\";\n+\n+    private static final String _EVENTS = \"events\";\n+\n+    private static final String _TET = \"trackedEntityType\";\n+\n+    private static final String _PROGRAM = \"program\";\n+\n+    private static final String _PROGRAMSTAGE = \"programStage\";\n+\n+    private static final String _OU = \"orgUnit\";\n+\n+    private static final String _TEI = \"trackedEntityInstance\";\n+\n+    private static final String _ENROLLMENT = \"enrollment\";\n+\n+    private static final String _PROGRAMOWNERS = \"programOwners\";\n+\n+    private static final String _OWNEROU = \"ownerOrgUnit\";\n+\n+    private static final String _DELETED = \"deleted\";\n+\n+    private static final String _ATTRIBUTES = \"attributes\";\n+\n+    private static final String _ATTRIBUTE = \"attribute\";\n+\n+    private MetadataActions metadataActions;\n+\n+    private UserActions userActions;\n+\n+    private TEIActions teiActions;\n+\n+    private static final List<User> users = new ArrayList<>();\n+\n+    private class User\n+    {\n+        private String username;\n+\n+        private String uid;\n+\n+        private String password;\n+\n+        private Map<String, List<String>> dataRead;\n+\n+        private Map<String, List<String>> noDataRead;\n+\n+        private List<String> groups = new ArrayList<>();\n+\n+        private List<String> searchScope = new ArrayList<>();\n+\n+        private List<String> captureScope = new ArrayList<>();\n+\n+        private boolean allAuthority;\n+\n+        public User( String username, String uid, String password )\n+        {\n+            this.username = username;\n+            this.uid = uid;\n+            this.password = password;\n+        }\n+\n+        public String getUsername()\n+        {\n+            return username;\n+        }\n+\n+        public void setUsername( String username )\n+        {\n+            this.username = username;\n+        }\n+\n+        public String getUid()\n+        {\n+            return uid;\n+        }\n+\n+        public void setUid( String uid )\n+        {\n+            this.uid = uid;\n+        }\n+\n+        public String getPassword()\n+        {\n+            return password;\n+        }\n+\n+        public void setPassword( String password )\n+        {\n+            this.password = password;\n+        }\n+\n+        public Map<String, List<String>> getDataRead()\n+        {\n+            return dataRead;\n+        }\n+\n+        public void setDataRead( Map<String, List<String>> dataRead )\n+        {\n+            this.dataRead = dataRead;\n+        }\n+\n+        public Map<String, List<String>> getNoDataRead()\n+        {\n+            return noDataRead;\n+        }\n+\n+        public void setNoDataRead( Map<String, List<String>> noDataRead )\n+        {\n+            this.noDataRead = noDataRead;\n+        }\n+\n+        public List<String> getGroups()\n+        {\n+            return groups;\n+        }\n+\n+        public void setGroups( List<String> groups )\n+        {\n+            this.groups = groups;\n+        }\n+\n+        public List<String> getCaptureScope()\n+        {\n+            return captureScope;\n+        }\n+\n+        public void setCaptureScope( List<String> captureScope )\n+        {\n+            this.captureScope = captureScope;\n+        }\n+\n+        public List<String> getSearchScope()\n+        {\n+            return searchScope;\n+        }\n+\n+        public void setSearchScope( List<String> searchScope )\n+        {\n+            this.searchScope = searchScope;\n+        }\n+\n+        public List<String> getScopes()\n+        {\n+            return ListUtils.union( searchScope, captureScope );\n+        }\n+\n+        public void setAllAuthority( boolean allAuthority )\n+        {\n+            this.allAuthority = allAuthority;\n+        }\n+\n+        public boolean getAllAuthority()\n+        {\n+            return allAuthority;\n+        }\n+\n+        public boolean hasAllAuthority()\n+        {\n+            return allAuthority;\n+        }\n+    }\n+\n+    @BeforeAll\n+    public void before()\n+        throws Exception\n+    {\n+        teiActions = new TEIActions();\n+        metadataActions = new MetadataActions();\n+        userActions = new UserActions();\n+\n+        // Setup as SuperUser\n+        new LoginActions().loginAsDefaultUser();\n+\n+        // Set up metadata (Import twice to connect all references)\n+        metadataActions.importMetadata( new File( \"src/test/resources/tracker/acl/metadata.json\" ) );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6060ad7a1c23aabea0965ba8acd27f4ec7020288"}, "originalPosition": 215}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMTQxNzk1OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/tracker/acl/TrackedEntityInstanceAclReadTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNzozMTo0MFrOGdldeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNzozMTo0MFrOGdldeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY3NTY0Mg==", "bodyText": "For better reporting, I would use rest-assured validation here. In that case, assertion failure here will be displayed with request, response and more meaningful message other than \"Assertion failed. Expected true, but was false\".\nIt would be something like response.validate().statusCode(200).body(_TEIS', is(notEmptyArray()))", "url": "https://github.com/dhis2/dhis2-core/pull/5656#discussion_r433675642", "createdAt": "2020-06-02T07:31:40Z", "author": {"login": "vilkg"}, "path": "dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/tracker/acl/TrackedEntityInstanceAclReadTests.java", "diffHunk": "@@ -0,0 +1,539 @@\n+package org.hisp.dhis.tracker.acl;\n+\n+import com.google.common.collect.Lists;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import org.apache.commons.collections.ListUtils;\n+import org.hisp.dhis.ApiTest;\n+import org.hisp.dhis.actions.LoginActions;\n+import org.hisp.dhis.actions.RestApiActions;\n+import org.hisp.dhis.actions.UserActions;\n+import org.hisp.dhis.actions.metadata.MetadataActions;\n+import org.hisp.dhis.actions.tracker.EventActions;\n+import org.hisp.dhis.actions.tracker.TEIActions;\n+import org.hisp.dhis.dto.ApiResponse;\n+import org.hisp.dhis.helpers.QueryParamsBuilder;\n+import org.hisp.dhis.helpers.file.FileReaderUtils;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.function.ThrowingSupplier;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+import sun.rmi.runtime.Log;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+/**\n+ * @author Stian Sandvold\n+ */\n+public class TrackedEntityInstanceAclReadTests\n+    extends ApiTest\n+{\n+    private static final String _TEIS = \"trackedEntityInstances\";\n+\n+    private static final String _ENROLLMENTS = \"enrollments\";\n+\n+    private static final String _EVENTS = \"events\";\n+\n+    private static final String _TET = \"trackedEntityType\";\n+\n+    private static final String _PROGRAM = \"program\";\n+\n+    private static final String _PROGRAMSTAGE = \"programStage\";\n+\n+    private static final String _OU = \"orgUnit\";\n+\n+    private static final String _TEI = \"trackedEntityInstance\";\n+\n+    private static final String _ENROLLMENT = \"enrollment\";\n+\n+    private static final String _PROGRAMOWNERS = \"programOwners\";\n+\n+    private static final String _OWNEROU = \"ownerOrgUnit\";\n+\n+    private static final String _DELETED = \"deleted\";\n+\n+    private static final String _ATTRIBUTES = \"attributes\";\n+\n+    private static final String _ATTRIBUTE = \"attribute\";\n+\n+    private MetadataActions metadataActions;\n+\n+    private UserActions userActions;\n+\n+    private TEIActions teiActions;\n+\n+    private static final List<User> users = new ArrayList<>();\n+\n+    private class User\n+    {\n+        private String username;\n+\n+        private String uid;\n+\n+        private String password;\n+\n+        private Map<String, List<String>> dataRead;\n+\n+        private Map<String, List<String>> noDataRead;\n+\n+        private List<String> groups = new ArrayList<>();\n+\n+        private List<String> searchScope = new ArrayList<>();\n+\n+        private List<String> captureScope = new ArrayList<>();\n+\n+        private boolean allAuthority;\n+\n+        public User( String username, String uid, String password )\n+        {\n+            this.username = username;\n+            this.uid = uid;\n+            this.password = password;\n+        }\n+\n+        public String getUsername()\n+        {\n+            return username;\n+        }\n+\n+        public void setUsername( String username )\n+        {\n+            this.username = username;\n+        }\n+\n+        public String getUid()\n+        {\n+            return uid;\n+        }\n+\n+        public void setUid( String uid )\n+        {\n+            this.uid = uid;\n+        }\n+\n+        public String getPassword()\n+        {\n+            return password;\n+        }\n+\n+        public void setPassword( String password )\n+        {\n+            this.password = password;\n+        }\n+\n+        public Map<String, List<String>> getDataRead()\n+        {\n+            return dataRead;\n+        }\n+\n+        public void setDataRead( Map<String, List<String>> dataRead )\n+        {\n+            this.dataRead = dataRead;\n+        }\n+\n+        public Map<String, List<String>> getNoDataRead()\n+        {\n+            return noDataRead;\n+        }\n+\n+        public void setNoDataRead( Map<String, List<String>> noDataRead )\n+        {\n+            this.noDataRead = noDataRead;\n+        }\n+\n+        public List<String> getGroups()\n+        {\n+            return groups;\n+        }\n+\n+        public void setGroups( List<String> groups )\n+        {\n+            this.groups = groups;\n+        }\n+\n+        public List<String> getCaptureScope()\n+        {\n+            return captureScope;\n+        }\n+\n+        public void setCaptureScope( List<String> captureScope )\n+        {\n+            this.captureScope = captureScope;\n+        }\n+\n+        public List<String> getSearchScope()\n+        {\n+            return searchScope;\n+        }\n+\n+        public void setSearchScope( List<String> searchScope )\n+        {\n+            this.searchScope = searchScope;\n+        }\n+\n+        public List<String> getScopes()\n+        {\n+            return ListUtils.union( searchScope, captureScope );\n+        }\n+\n+        public void setAllAuthority( boolean allAuthority )\n+        {\n+            this.allAuthority = allAuthority;\n+        }\n+\n+        public boolean getAllAuthority()\n+        {\n+            return allAuthority;\n+        }\n+\n+        public boolean hasAllAuthority()\n+        {\n+            return allAuthority;\n+        }\n+    }\n+\n+    @BeforeAll\n+    public void before()\n+        throws Exception\n+    {\n+        teiActions = new TEIActions();\n+        metadataActions = new MetadataActions();\n+        userActions = new UserActions();\n+\n+        // Setup as SuperUser\n+        new LoginActions().loginAsDefaultUser();\n+\n+        // Set up metadata (Import twice to connect all references)\n+        metadataActions.importMetadata( new File( \"src/test/resources/tracker/acl/metadata.json\" ) );\n+        metadataActions.importMetadata( new File( \"src/test/resources/tracker/acl/metadata.json\" ) );\n+\n+        // Import test data\n+        JsonObject trackerData = new FileReaderUtils().read( new File( \"src/test/resources/tracker/acl/data.json\" ) )\n+            .get( JsonObject.class );\n+        teiActions.post( trackerData );\n+\n+        // Set up all users for testing\n+        User admin = new User( \"admin\", \"\", \"district\" );\n+        users.add( new User( \"User A\", \"O2PajOxjJSa\", \"UserA!123\" ) );\n+        users.add( new User( \"User B\", \"aDy67f9ijOe\", \"UserB!123\" ) );\n+        users.add( new User( \"User C\", \"CKrrGm5Be8O\", \"UserC!123\" ) );\n+        users.add( new User( \"User D\", \"Lpa5INiC3Qf\", \"UserD!123\" ) );\n+        users.add( new User( \"User ALL\", \"GTqb3WOZMop\", \"UserALL!123\" ) );\n+\n+        // Update passwords, so we can log in as them\n+        // Set AllAuth if user has it and ou scopes.\n+        // Map metadata and data sharing\n+        users.forEach( this::setupUser );\n+    }\n+\n+    /**\n+     * Takes a User object and retrieves information about the users from the api.\n+     * Updates the password of the user to allow access.\n+     *\n+     * @param user to setup\n+     */\n+    private void setupUser( User user )\n+    {\n+        userActions.updateUserPassword( user.getUid(), user.getPassword() );\n+\n+        new LoginActions().loginAsUser( user.getUsername(), user.getPassword() );\n+\n+        // Get User information from /me\n+        JsonObject me = new RestApiActions( \"/me\" ).get().getBody();\n+\n+        // Add userGroups\n+        for ( JsonElement groupUid : me.getAsJsonArray( \"userGroups\" ) )\n+        {\n+            user.getGroups().add( groupUid.getAsJsonObject().get( \"id\" ).getAsString() );\n+        }\n+\n+        // Add search-scope ous\n+        for ( JsonElement ouUid : me.getAsJsonArray( \"teiSearchOrganisationUnits\" ) )\n+        {\n+            user.getSearchScope().add( ouUid.getAsJsonObject().get( \"id\" ).getAsString() );\n+        }\n+\n+        // Add capture-scope ous\n+        for ( JsonElement ouUid : me.getAsJsonArray( \"organisationUnits\" ) )\n+        {\n+            user.getCaptureScope().add( ouUid.getAsJsonObject().get( \"id\" ).getAsString() );\n+        }\n+\n+        // Add hasAllAuthority if user has ALL authority\n+        for ( JsonElement authority : me.getAsJsonArray( \"authorities\" ) )\n+        {\n+            if ( authority.getAsString().equals( \"ALL\" ) )\n+            {\n+                user.setAllAuthority( true );\n+            }\n+        }\n+\n+        // Setup map to decide what data can and cannot be read.\n+        setupAccessMap( user );\n+    }\n+\n+    /**\n+     * Finds metadata a user has access to and determines what data can be read or not based on sharing.\n+     *\n+     * @param user the user to setup\n+     */\n+    private void setupAccessMap( User user )\n+    {\n+        Map<String, List<String>> dataRead = new HashMap<>();\n+        Map<String, List<String>> noDataRead = new HashMap<>();\n+\n+        // Configure params to only return metadata we care about\n+        String params = (new QueryParamsBuilder())\n+            .add( \"trackedEntityTypes=true\" )\n+            .add( \"dataElements=true\" )\n+            .add( \"relationshipTypes=true\" )\n+            .add( \"programs=true\" )\n+            .add( \"trackedEntityAttributes=true\" )\n+            .add( \"programStages=true\" )\n+            .add( \"fields=id,userAccesses,publicAccess,userGroupAccesses\" )\n+            .build();\n+\n+        ApiResponse response = metadataActions.get( params );\n+\n+        // Build map\n+        response.getBody().entrySet().forEach( ( entry ) -> {\n+\n+            // Skip the System property.\n+            if ( !entry.getKey().equals( \"system\" ) )\n+            {\n+                dataRead.put( entry.getKey(), new ArrayList<>() );\n+                noDataRead.putIfAbsent( entry.getKey(), new ArrayList<>() );\n+\n+                entry.getValue().getAsJsonArray().forEach( obj -> {\n+                    JsonObject object = obj.getAsJsonObject();\n+\n+                    boolean hasDataRead = false;\n+\n+                    if ( object.get( \"publicAccess\" ).getAsString().matches( \"..r.*\" ) )\n+                    {\n+                        hasDataRead = true;\n+                    }\n+                    else\n+                    {\n+                        JsonArray userAccesses = object.getAsJsonArray( \"userAccesses\" ).getAsJsonArray();\n+                        JsonArray userGroupAccess = object.getAsJsonArray( \"userGroupAccesses\" ).getAsJsonArray();\n+\n+                        for ( JsonElement access : userAccesses )\n+                        {\n+                            if ( access.getAsJsonObject().get( \"userUid\" ).getAsString().equals( user.getUid() ) &&\n+                                access.getAsJsonObject().get( \"access\" ).getAsString().matches( \"..r.*\" ) )\n+                            {\n+                                hasDataRead = true;\n+                            }\n+                        }\n+\n+                        if ( !hasDataRead )\n+                        {\n+                            for ( JsonElement access : userGroupAccess )\n+                            {\n+                                if ( user.getGroups()\n+                                    .contains( access.getAsJsonObject().get( \"userGroupUid\" ).getAsString() ) &&\n+                                    access.getAsJsonObject().get( \"access\" ).getAsString().matches( \"..r.*\" ) )\n+                                {\n+                                    hasDataRead = true;\n+                                }\n+                            }\n+                        }\n+                    }\n+\n+                    if ( hasDataRead )\n+                    {\n+                        dataRead.get( entry.getKey() ).add( obj.getAsJsonObject().get( \"id\" ).getAsString() );\n+                    }\n+                    else\n+                    {\n+                        noDataRead.get( entry.getKey() ).add( obj.getAsJsonObject().get( \"id\" ).getAsString() );\n+                    }\n+\n+                } );\n+            }\n+        } );\n+\n+        user.setDataRead( dataRead );\n+        user.setNoDataRead( noDataRead );\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource( strings = { \"O2PajOxjJSa\", \"aDy67f9ijOe\", \"CKrrGm5Be8O\", \"Lpa5INiC3Qf\", \"GTqb3WOZMop\" } )\n+    public void testUserDataAndOrgUnitScopeReadAccess( String userUid )\n+    {\n+        User user = users.stream()\n+            .filter( _user -> _user.getUid().equals( userUid ) )\n+            .findFirst()\n+            .orElseThrow( () -> new RuntimeException( \"User UID not found for test\" ) );\n+\n+        new LoginActions().loginAsUser( user.getUsername(), user.getPassword() );\n+\n+        QueryParamsBuilder queryParamsBuilder = new QueryParamsBuilder();\n+        queryParamsBuilder.addAll( \"ouMode=ACCESSIBLE\", \"fields=*\" );\n+        ApiResponse response = teiActions.get( \"/\", queryParamsBuilder );\n+\n+        response.validate().statusCode( 200 );\n+\n+        JsonObject json = response.getBody();\n+\n+        assertTrue( json.has( _TEIS ) );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6060ad7a1c23aabea0965ba8acd27f4ec7020288"}, "originalPosition": 388}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMTQzMzU1OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/tracker/acl/TrackedEntityInstanceAclReadTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNzozNjozNFrOGdlnBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNzozNjozNFrOGdlnBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY3ODA4Nw==", "bodyText": "In all the asserts, provide a meaningful message as well for better reporting. For example:\nassertTrue(String.format('Object %s with id %s was marked as deleted', .. .. ), object.has( _DELETED ) && !object.get( _DELETED ).getAsBoolean())", "url": "https://github.com/dhis2/dhis2-core/pull/5656#discussion_r433678087", "createdAt": "2020-06-02T07:36:34Z", "author": {"login": "vilkg"}, "path": "dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/tracker/acl/TrackedEntityInstanceAclReadTests.java", "diffHunk": "@@ -0,0 +1,539 @@\n+package org.hisp.dhis.tracker.acl;\n+\n+import com.google.common.collect.Lists;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import org.apache.commons.collections.ListUtils;\n+import org.hisp.dhis.ApiTest;\n+import org.hisp.dhis.actions.LoginActions;\n+import org.hisp.dhis.actions.RestApiActions;\n+import org.hisp.dhis.actions.UserActions;\n+import org.hisp.dhis.actions.metadata.MetadataActions;\n+import org.hisp.dhis.actions.tracker.EventActions;\n+import org.hisp.dhis.actions.tracker.TEIActions;\n+import org.hisp.dhis.dto.ApiResponse;\n+import org.hisp.dhis.helpers.QueryParamsBuilder;\n+import org.hisp.dhis.helpers.file.FileReaderUtils;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.function.ThrowingSupplier;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+import sun.rmi.runtime.Log;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+/**\n+ * @author Stian Sandvold\n+ */\n+public class TrackedEntityInstanceAclReadTests\n+    extends ApiTest\n+{\n+    private static final String _TEIS = \"trackedEntityInstances\";\n+\n+    private static final String _ENROLLMENTS = \"enrollments\";\n+\n+    private static final String _EVENTS = \"events\";\n+\n+    private static final String _TET = \"trackedEntityType\";\n+\n+    private static final String _PROGRAM = \"program\";\n+\n+    private static final String _PROGRAMSTAGE = \"programStage\";\n+\n+    private static final String _OU = \"orgUnit\";\n+\n+    private static final String _TEI = \"trackedEntityInstance\";\n+\n+    private static final String _ENROLLMENT = \"enrollment\";\n+\n+    private static final String _PROGRAMOWNERS = \"programOwners\";\n+\n+    private static final String _OWNEROU = \"ownerOrgUnit\";\n+\n+    private static final String _DELETED = \"deleted\";\n+\n+    private static final String _ATTRIBUTES = \"attributes\";\n+\n+    private static final String _ATTRIBUTE = \"attribute\";\n+\n+    private MetadataActions metadataActions;\n+\n+    private UserActions userActions;\n+\n+    private TEIActions teiActions;\n+\n+    private static final List<User> users = new ArrayList<>();\n+\n+    private class User\n+    {\n+        private String username;\n+\n+        private String uid;\n+\n+        private String password;\n+\n+        private Map<String, List<String>> dataRead;\n+\n+        private Map<String, List<String>> noDataRead;\n+\n+        private List<String> groups = new ArrayList<>();\n+\n+        private List<String> searchScope = new ArrayList<>();\n+\n+        private List<String> captureScope = new ArrayList<>();\n+\n+        private boolean allAuthority;\n+\n+        public User( String username, String uid, String password )\n+        {\n+            this.username = username;\n+            this.uid = uid;\n+            this.password = password;\n+        }\n+\n+        public String getUsername()\n+        {\n+            return username;\n+        }\n+\n+        public void setUsername( String username )\n+        {\n+            this.username = username;\n+        }\n+\n+        public String getUid()\n+        {\n+            return uid;\n+        }\n+\n+        public void setUid( String uid )\n+        {\n+            this.uid = uid;\n+        }\n+\n+        public String getPassword()\n+        {\n+            return password;\n+        }\n+\n+        public void setPassword( String password )\n+        {\n+            this.password = password;\n+        }\n+\n+        public Map<String, List<String>> getDataRead()\n+        {\n+            return dataRead;\n+        }\n+\n+        public void setDataRead( Map<String, List<String>> dataRead )\n+        {\n+            this.dataRead = dataRead;\n+        }\n+\n+        public Map<String, List<String>> getNoDataRead()\n+        {\n+            return noDataRead;\n+        }\n+\n+        public void setNoDataRead( Map<String, List<String>> noDataRead )\n+        {\n+            this.noDataRead = noDataRead;\n+        }\n+\n+        public List<String> getGroups()\n+        {\n+            return groups;\n+        }\n+\n+        public void setGroups( List<String> groups )\n+        {\n+            this.groups = groups;\n+        }\n+\n+        public List<String> getCaptureScope()\n+        {\n+            return captureScope;\n+        }\n+\n+        public void setCaptureScope( List<String> captureScope )\n+        {\n+            this.captureScope = captureScope;\n+        }\n+\n+        public List<String> getSearchScope()\n+        {\n+            return searchScope;\n+        }\n+\n+        public void setSearchScope( List<String> searchScope )\n+        {\n+            this.searchScope = searchScope;\n+        }\n+\n+        public List<String> getScopes()\n+        {\n+            return ListUtils.union( searchScope, captureScope );\n+        }\n+\n+        public void setAllAuthority( boolean allAuthority )\n+        {\n+            this.allAuthority = allAuthority;\n+        }\n+\n+        public boolean getAllAuthority()\n+        {\n+            return allAuthority;\n+        }\n+\n+        public boolean hasAllAuthority()\n+        {\n+            return allAuthority;\n+        }\n+    }\n+\n+    @BeforeAll\n+    public void before()\n+        throws Exception\n+    {\n+        teiActions = new TEIActions();\n+        metadataActions = new MetadataActions();\n+        userActions = new UserActions();\n+\n+        // Setup as SuperUser\n+        new LoginActions().loginAsDefaultUser();\n+\n+        // Set up metadata (Import twice to connect all references)\n+        metadataActions.importMetadata( new File( \"src/test/resources/tracker/acl/metadata.json\" ) );\n+        metadataActions.importMetadata( new File( \"src/test/resources/tracker/acl/metadata.json\" ) );\n+\n+        // Import test data\n+        JsonObject trackerData = new FileReaderUtils().read( new File( \"src/test/resources/tracker/acl/data.json\" ) )\n+            .get( JsonObject.class );\n+        teiActions.post( trackerData );\n+\n+        // Set up all users for testing\n+        User admin = new User( \"admin\", \"\", \"district\" );\n+        users.add( new User( \"User A\", \"O2PajOxjJSa\", \"UserA!123\" ) );\n+        users.add( new User( \"User B\", \"aDy67f9ijOe\", \"UserB!123\" ) );\n+        users.add( new User( \"User C\", \"CKrrGm5Be8O\", \"UserC!123\" ) );\n+        users.add( new User( \"User D\", \"Lpa5INiC3Qf\", \"UserD!123\" ) );\n+        users.add( new User( \"User ALL\", \"GTqb3WOZMop\", \"UserALL!123\" ) );\n+\n+        // Update passwords, so we can log in as them\n+        // Set AllAuth if user has it and ou scopes.\n+        // Map metadata and data sharing\n+        users.forEach( this::setupUser );\n+    }\n+\n+    /**\n+     * Takes a User object and retrieves information about the users from the api.\n+     * Updates the password of the user to allow access.\n+     *\n+     * @param user to setup\n+     */\n+    private void setupUser( User user )\n+    {\n+        userActions.updateUserPassword( user.getUid(), user.getPassword() );\n+\n+        new LoginActions().loginAsUser( user.getUsername(), user.getPassword() );\n+\n+        // Get User information from /me\n+        JsonObject me = new RestApiActions( \"/me\" ).get().getBody();\n+\n+        // Add userGroups\n+        for ( JsonElement groupUid : me.getAsJsonArray( \"userGroups\" ) )\n+        {\n+            user.getGroups().add( groupUid.getAsJsonObject().get( \"id\" ).getAsString() );\n+        }\n+\n+        // Add search-scope ous\n+        for ( JsonElement ouUid : me.getAsJsonArray( \"teiSearchOrganisationUnits\" ) )\n+        {\n+            user.getSearchScope().add( ouUid.getAsJsonObject().get( \"id\" ).getAsString() );\n+        }\n+\n+        // Add capture-scope ous\n+        for ( JsonElement ouUid : me.getAsJsonArray( \"organisationUnits\" ) )\n+        {\n+            user.getCaptureScope().add( ouUid.getAsJsonObject().get( \"id\" ).getAsString() );\n+        }\n+\n+        // Add hasAllAuthority if user has ALL authority\n+        for ( JsonElement authority : me.getAsJsonArray( \"authorities\" ) )\n+        {\n+            if ( authority.getAsString().equals( \"ALL\" ) )\n+            {\n+                user.setAllAuthority( true );\n+            }\n+        }\n+\n+        // Setup map to decide what data can and cannot be read.\n+        setupAccessMap( user );\n+    }\n+\n+    /**\n+     * Finds metadata a user has access to and determines what data can be read or not based on sharing.\n+     *\n+     * @param user the user to setup\n+     */\n+    private void setupAccessMap( User user )\n+    {\n+        Map<String, List<String>> dataRead = new HashMap<>();\n+        Map<String, List<String>> noDataRead = new HashMap<>();\n+\n+        // Configure params to only return metadata we care about\n+        String params = (new QueryParamsBuilder())\n+            .add( \"trackedEntityTypes=true\" )\n+            .add( \"dataElements=true\" )\n+            .add( \"relationshipTypes=true\" )\n+            .add( \"programs=true\" )\n+            .add( \"trackedEntityAttributes=true\" )\n+            .add( \"programStages=true\" )\n+            .add( \"fields=id,userAccesses,publicAccess,userGroupAccesses\" )\n+            .build();\n+\n+        ApiResponse response = metadataActions.get( params );\n+\n+        // Build map\n+        response.getBody().entrySet().forEach( ( entry ) -> {\n+\n+            // Skip the System property.\n+            if ( !entry.getKey().equals( \"system\" ) )\n+            {\n+                dataRead.put( entry.getKey(), new ArrayList<>() );\n+                noDataRead.putIfAbsent( entry.getKey(), new ArrayList<>() );\n+\n+                entry.getValue().getAsJsonArray().forEach( obj -> {\n+                    JsonObject object = obj.getAsJsonObject();\n+\n+                    boolean hasDataRead = false;\n+\n+                    if ( object.get( \"publicAccess\" ).getAsString().matches( \"..r.*\" ) )\n+                    {\n+                        hasDataRead = true;\n+                    }\n+                    else\n+                    {\n+                        JsonArray userAccesses = object.getAsJsonArray( \"userAccesses\" ).getAsJsonArray();\n+                        JsonArray userGroupAccess = object.getAsJsonArray( \"userGroupAccesses\" ).getAsJsonArray();\n+\n+                        for ( JsonElement access : userAccesses )\n+                        {\n+                            if ( access.getAsJsonObject().get( \"userUid\" ).getAsString().equals( user.getUid() ) &&\n+                                access.getAsJsonObject().get( \"access\" ).getAsString().matches( \"..r.*\" ) )\n+                            {\n+                                hasDataRead = true;\n+                            }\n+                        }\n+\n+                        if ( !hasDataRead )\n+                        {\n+                            for ( JsonElement access : userGroupAccess )\n+                            {\n+                                if ( user.getGroups()\n+                                    .contains( access.getAsJsonObject().get( \"userGroupUid\" ).getAsString() ) &&\n+                                    access.getAsJsonObject().get( \"access\" ).getAsString().matches( \"..r.*\" ) )\n+                                {\n+                                    hasDataRead = true;\n+                                }\n+                            }\n+                        }\n+                    }\n+\n+                    if ( hasDataRead )\n+                    {\n+                        dataRead.get( entry.getKey() ).add( obj.getAsJsonObject().get( \"id\" ).getAsString() );\n+                    }\n+                    else\n+                    {\n+                        noDataRead.get( entry.getKey() ).add( obj.getAsJsonObject().get( \"id\" ).getAsString() );\n+                    }\n+\n+                } );\n+            }\n+        } );\n+\n+        user.setDataRead( dataRead );\n+        user.setNoDataRead( noDataRead );\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource( strings = { \"O2PajOxjJSa\", \"aDy67f9ijOe\", \"CKrrGm5Be8O\", \"Lpa5INiC3Qf\", \"GTqb3WOZMop\" } )\n+    public void testUserDataAndOrgUnitScopeReadAccess( String userUid )\n+    {\n+        User user = users.stream()\n+            .filter( _user -> _user.getUid().equals( userUid ) )\n+            .findFirst()\n+            .orElseThrow( () -> new RuntimeException( \"User UID not found for test\" ) );\n+\n+        new LoginActions().loginAsUser( user.getUsername(), user.getPassword() );\n+\n+        QueryParamsBuilder queryParamsBuilder = new QueryParamsBuilder();\n+        queryParamsBuilder.addAll( \"ouMode=ACCESSIBLE\", \"fields=*\" );\n+        ApiResponse response = teiActions.get( \"/\", queryParamsBuilder );\n+\n+        response.validate().statusCode( 200 );\n+\n+        JsonObject json = response.getBody();\n+\n+        assertTrue( json.has( _TEIS ) );\n+\n+        json.getAsJsonArray( _TEIS ).iterator()\n+            .forEachRemaining( ( teiJson ) -> assertTrackedEntityInstance( user, teiJson.getAsJsonObject() ) );\n+\n+    }\n+\n+\n+    /* Helper methods */\n+\n+    /**\n+     * Asserts that the trackedEntityInstance follows the expectations.\n+     *\n+     * @param user the user(username) we are testing as\n+     * @param tei  the trackedEntityInstance we are testing\n+     */\n+    private void assertTrackedEntityInstance( User user, JsonObject tei )\n+    {\n+        String trackedEntityType = tei.get( _TET ).getAsString();\n+        List<String> ous = Lists.newArrayList( tei.getAsJsonObject().get( _OU ).getAsString() );\n+        tei.getAsJsonObject().getAsJsonArray( _PROGRAMOWNERS )\n+            .forEach(\n+                ( programOwner ) -> ous.add( programOwner.getAsJsonObject().get( _OWNEROU ).getAsString() ) );\n+\n+        if ( !user.hasAllAuthority() )\n+        {\n+            assertStringIsInWhitelistOrNotInBlacklist( user.getDataRead().get( \"trackedEntityTypes\" ),\n+                user.getNoDataRead().get( \"trackedEntityTypes\" ), trackedEntityType );\n+        }\n+        assertWithinOuScope( user.getScopes(), ous );\n+        assertNotDeleted( tei );\n+\n+        assertTrue( tei.has( _ENROLLMENTS ) );\n+\n+        tei.getAsJsonArray( _ATTRIBUTES )\n+            .forEach( attributeJson -> assertAttribute( user, attributeJson.getAsJsonObject() ) );\n+\n+        tei.getAsJsonArray( _ENROLLMENTS )\n+            .forEach( enrollmentJson -> assertEnrollment( user, enrollmentJson.getAsJsonObject(), tei ) );\n+    }\n+\n+    /**\n+     * Asserts that the enrollment follows the expectations.\n+     *\n+     * @param user       the user(username) we are testing as\n+     * @param enrollment the enrollment we are testing\n+     * @param tei        the tei wrapped around the enrollment\n+     */\n+    private void assertEnrollment( User user, JsonObject enrollment, JsonObject tei )\n+    {\n+        String program = enrollment.get( _PROGRAM ).getAsString();\n+        String orgUnit = enrollment.get( _OU ).getAsString();\n+\n+        if ( !user.hasAllAuthority() )\n+        {\n+            assertStringIsInWhitelistOrNotInBlacklist( user.getDataRead().get( \"programs\" ),\n+                user.getNoDataRead().get( \"programs\" ), program );\n+        }\n+        assertSameValueForProperty( tei, enrollment, _TEI );\n+        assertWithinOuScope( user.getScopes(), Lists.newArrayList( orgUnit ) );\n+        assertNotDeleted( enrollment );\n+\n+        assertTrue( enrollment.has( _EVENTS ) );\n+\n+        enrollment.get( _EVENTS ).getAsJsonArray()\n+            .forEach( eventJson -> assertEvent( user, eventJson.getAsJsonObject(), enrollment ) );\n+    }\n+\n+    /**\n+     * Asserts that the event follows the expectations.\n+     *\n+     * @param user       the user(username) we are testing as\n+     * @param event      the event we are testing\n+     * @param enrollment the enrollment wrapped around the event\n+     */\n+    private void assertEvent( User user, JsonObject event, JsonObject enrollment )\n+    {\n+        String programStage = event.get( _PROGRAMSTAGE ).getAsString();\n+        String orgUnit = event.get( _OU ).getAsString();\n+\n+        if ( !user.hasAllAuthority() )\n+        {\n+            assertStringIsInWhitelistOrNotInBlacklist( user.getDataRead().get( \"programStages\" ),\n+                user.getNoDataRead().get( \"programStages\" ), programStage );\n+        }\n+        assertWithinOuScope( user.getScopes(), Lists.newArrayList( orgUnit ) );\n+        assertSameValueForProperty( enrollment, event, _ENROLLMENT );\n+        assertSameValueForProperty( enrollment, event, _TEI );\n+        assertNotDeleted( event );\n+    }\n+\n+    private void assertAttribute( User user, JsonObject attribute )\n+    {\n+        String attributeUid = attribute.get( _ATTRIBUTE ).getAsString();\n+\n+        // NoDataRead includes all attributes with metadata read, so we use NoDataRead to check access,\n+        // instead of DataRead, since there is no DataRead for attributes.\n+\n+        if ( !user.hasAllAuthority() )\n+        {\n+            assertStringIsInWhitelistOrNotInBlacklist( user.getNoDataRead().get( \"trackedEntityAttributes\" ),\n+                Lists.newArrayList(), attributeUid );\n+        }\n+    }\n+\n+    /**\n+     * Asserts that the given JsonObject does not have a property \"deleted\" that is true.\n+     *\n+     * @param object the object to check\n+     */\n+    private void assertNotDeleted( JsonObject object )\n+    {\n+        assertTrue( object.has( _DELETED ) && !object.get( _DELETED ).getAsBoolean() );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6060ad7a1c23aabea0965ba8acd27f4ec7020288"}, "originalPosition": 500}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyODY5ODQyOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/tracker/acl/TrackedEntityInstanceAclReadTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMDowNDowN1rOGht_iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMDowNDowN1rOGht_iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODAwOTczNg==", "bodyText": "that is admin: district, not necessarily super user. If you want super, you can use loginAsSuperuser()", "url": "https://github.com/dhis2/dhis2-core/pull/5656#discussion_r438009736", "createdAt": "2020-06-10T10:04:07Z", "author": {"login": "vilkg"}, "path": "dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/tracker/acl/TrackedEntityInstanceAclReadTests.java", "diffHunk": "@@ -0,0 +1,354 @@\n+package org.hisp.dhis.tracker.acl;\n+\n+import com.google.common.collect.Lists;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import org.apache.commons.collections.ListUtils;\n+import org.hamcrest.Matcher;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.Matchers;\n+import org.hamcrest.beans.HasProperty;\n+import org.hamcrest.collection.IsEmptyCollection;\n+import org.hamcrest.core.IsNot;\n+import org.hisp.dhis.ApiTest;\n+import org.hisp.dhis.actions.LoginActions;\n+import org.hisp.dhis.actions.RestApiActions;\n+import org.hisp.dhis.actions.UserActions;\n+import org.hisp.dhis.actions.metadata.MetadataActions;\n+import org.hisp.dhis.actions.tracker.TEIActions;\n+import org.hisp.dhis.dto.ApiResponse;\n+import org.hisp.dhis.dto.Me;\n+import org.hisp.dhis.dto.OrgUnit;\n+import org.hisp.dhis.dto.UserGroup;\n+import org.hisp.dhis.helpers.QueryParamsBuilder;\n+import org.hisp.dhis.helpers.models.User;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+/**\n+ * @author Stian Sandvold\n+ */\n+public class TrackedEntityInstanceAclReadTests\n+    extends ApiTest\n+{\n+    private static final String _DATAREAD = \"..r.*\";\n+\n+    private MetadataActions metadataActions;\n+\n+    private UserActions userActions;\n+\n+    private TEIActions teiActions;\n+\n+    private static final List<User> users = new ArrayList<>();\n+\n+    @BeforeAll\n+    public void before()\n+        throws Exception\n+    {\n+        teiActions = new TEIActions();\n+        metadataActions = new MetadataActions();\n+        userActions = new UserActions();\n+\n+        // Setup as SuperUser\n+        new LoginActions().loginAsDefaultUser();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "209c11b7e7e2cae8e0b95eb737e6252b0832003d"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3432, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}