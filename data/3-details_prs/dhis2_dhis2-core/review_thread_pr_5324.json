{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5NTU2MjM1", "number": 5324, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMDo1OTo1MFrODvE0Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNDo0MDo1M1rODvKRMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNjg4NTQ2OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/dto/ApiResponse.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMDo1OTo1MFrOGBSddw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMDo1OTo1MFrOGBSddw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAwNDIxNQ==", "bodyText": "spaces around \"json\" are required by our code standard", "url": "https://github.com/dhis2/dhis2-core/pull/5324#discussion_r404004215", "createdAt": "2020-04-06T10:59:50Z", "author": {"login": "vilkg"}, "path": "dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/dto/ApiResponse.java", "diffHunk": "@@ -113,7 +113,7 @@ public boolean isEntityCreated()\n \n     public boolean containsImportSummaries()\n     {\n-        return getContentType().contains( \"json\" ) ? !CollectionUtils.isEmpty( getImportSummaries() ) : false;\n+        return getContentType().contains(\"json\") && !CollectionUtils.isEmpty(getImportSummaries());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6152876f5f54f85cd40b9b07282211d37734dc0d"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNjkwMzMwOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/actions/metadata/MetadataPaginationActions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMTowNToyOFrOGBSoXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMTowNzoxNVrOGBSr8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAwNzAwNw==", "bodyText": "To ensure that report upon test failure is useful, I would use rest assure assertions instead of jUnit here. For example:\nresponse.validate() .root(\"pager\") .body(\"\", is(notNullValue())) .body(\"pageCount\", greaterThan(expectedPageCount)) .....\nIf this is used, we will get full request and response printed with assertion error and will be able to better evaluate what went wrong.", "url": "https://github.com/dhis2/dhis2-core/pull/5324#discussion_r404007007", "createdAt": "2020-04-06T11:05:28Z", "author": {"login": "vilkg"}, "path": "dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/actions/metadata/MetadataPaginationActions.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package org.hisp.dhis.actions.metadata;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.*;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.hamcrest.Matchers;\n+import org.hisp.dhis.actions.RestApiActions;\n+import org.hisp.dhis.dto.ApiResponse;\n+import org.hisp.dhis.helpers.QueryParamsBuilder;\n+import org.hisp.dhis.helpers.config.TestConfiguration;\n+\n+import com.google.gson.JsonObject;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class MetadataPaginationActions\n+    extends\n+    RestApiActions\n+{\n+    public static String DEFAULT_METADATA_FIELDS = \"displayName,shortName,id,lastUpdated,created,displayDescription,code,publicAccess,access,href,level,displayName,publicAccess,lastUpdated,order\";\n+\n+    public static String DEFAULT_METADATA_FILTER = \"name:ne:default\";\n+\n+    public static String DEFAULT_METADATA_SORT = \"displayName:ASC\";\n+\n+    public MetadataPaginationActions( String endpoint )\n+    {\n+        super( endpoint );\n+    }\n+\n+    /**\n+     * Executes a metadata request using pagination directives\n+     *\n+     * @param filter a List of String, containing the expressions to filter metadata on\n+     * @param fields a List of String, containing the name of the fields to return\n+     * @param sort a List of String, containing the sort expressions\n+     * @param page the page to return\n+     * @param pageSize the number of elements to return for each page\n+     * @return an {@see ApiResponse} object\n+     */\n+    public ApiResponse getPaginated( List<String> filter, List<String> fields, List<String> sort, int page,\n+        int pageSize )\n+    {\n+        assert filter != null;\n+        assert fields != null && !fields.isEmpty();\n+        assert sort != null && !sort.isEmpty();\n+        QueryParamsBuilder params = new QueryParamsBuilder()\n+            .add( \"filter=\" + String.join( \",\", filter ) )\n+            .add( \"fields=\" + String.join( \",\", fields ) )\n+            .add( \"order=\" + String.join( \",\", sort ) )\n+            .add( \"page=\" + page )\n+            .add( \"pageSize=\" + pageSize );\n+\n+        return get( \"\", params );\n+\n+    }\n+\n+    /**\n+     * Executes a metadata request using pagination directives.\n+     * Uses a default filter expression\n+     *\n+     * @param fields a List of String, containing the name of the fields to return\n+     * @param sort a List of String, containing the sort expressions\n+     * @param page the page to return\n+     * @param pageSize the number of elements to return for each page\n+     * @return an {@see ApiResponse} object\n+     */\n+    public ApiResponse getPaginated( List<String> fields, List<String> sort, int page, int pageSize )\n+    {\n+        return getPaginated( toParamList( DEFAULT_METADATA_FILTER ), fields, sort, page, pageSize );\n+    }\n+\n+    /**\n+     * Executes a metadata request using pagination directives.\n+     * Uses a default filter and sort expression\n+     *\n+     * @param fields a List of String, containing the name of the fields to return\n+     * @param page the page to return\n+     * @param pageSize the number of elements to return for each page\n+     * @return an {@see ApiResponse} object\n+     */\n+    public ApiResponse getPaginated( List<String> fields, int page, int pageSize )\n+    {\n+        return getPaginated( toParamList( DEFAULT_METADATA_FILTER ), fields, toParamList( DEFAULT_METADATA_SORT ), page,\n+            pageSize );\n+    }\n+\n+    /**\n+     * Executes a metadata request using pagination directives.\n+     * Uses a default filter, fields and sort expression\n+     *\n+     * @param page the page to return\n+     * @param pageSize the number of elements to return for each page\n+     * @return an {@see ApiResponse} object\n+     */\n+    public ApiResponse getPaginated( int page, int pageSize )\n+    {\n+        return getPaginated( toParamList( DEFAULT_METADATA_FILTER ), toParamList( DEFAULT_METADATA_FIELDS ),\n+            toParamList( DEFAULT_METADATA_SORT ), page, pageSize );\n+    }\n+\n+    /**\n+     * Assert on the pagination (\"pager\") data within the API response\n+     *\n+     * @param response an {@see ApiResponse} object\n+     * @param expectedTotal the expected minimum total number of metadata items\n+     * @param expectedPageCount the expected minimum total number of pages\n+     * @param expectedPageSize the expected value for page size\n+     * @param expectedPage the expected value for the page\n+     */\n+    public void assertPagination( ApiResponse response, int expectedTotal, int expectedPageCount, int expectedPageSize,\n+        int expectedPage )\n+    {\n+        JsonObject pager = response.extractJsonObject( \"pager\" );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6152876f5f54f85cd40b9b07282211d37734dc0d"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAwNzkyMQ==", "bodyText": "Ah, good point, I'll change it to use RestAssure assertions.", "url": "https://github.com/dhis2/dhis2-core/pull/5324#discussion_r404007921", "createdAt": "2020-04-06T11:07:15Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/actions/metadata/MetadataPaginationActions.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package org.hisp.dhis.actions.metadata;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.*;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.hamcrest.Matchers;\n+import org.hisp.dhis.actions.RestApiActions;\n+import org.hisp.dhis.dto.ApiResponse;\n+import org.hisp.dhis.helpers.QueryParamsBuilder;\n+import org.hisp.dhis.helpers.config.TestConfiguration;\n+\n+import com.google.gson.JsonObject;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class MetadataPaginationActions\n+    extends\n+    RestApiActions\n+{\n+    public static String DEFAULT_METADATA_FIELDS = \"displayName,shortName,id,lastUpdated,created,displayDescription,code,publicAccess,access,href,level,displayName,publicAccess,lastUpdated,order\";\n+\n+    public static String DEFAULT_METADATA_FILTER = \"name:ne:default\";\n+\n+    public static String DEFAULT_METADATA_SORT = \"displayName:ASC\";\n+\n+    public MetadataPaginationActions( String endpoint )\n+    {\n+        super( endpoint );\n+    }\n+\n+    /**\n+     * Executes a metadata request using pagination directives\n+     *\n+     * @param filter a List of String, containing the expressions to filter metadata on\n+     * @param fields a List of String, containing the name of the fields to return\n+     * @param sort a List of String, containing the sort expressions\n+     * @param page the page to return\n+     * @param pageSize the number of elements to return for each page\n+     * @return an {@see ApiResponse} object\n+     */\n+    public ApiResponse getPaginated( List<String> filter, List<String> fields, List<String> sort, int page,\n+        int pageSize )\n+    {\n+        assert filter != null;\n+        assert fields != null && !fields.isEmpty();\n+        assert sort != null && !sort.isEmpty();\n+        QueryParamsBuilder params = new QueryParamsBuilder()\n+            .add( \"filter=\" + String.join( \",\", filter ) )\n+            .add( \"fields=\" + String.join( \",\", fields ) )\n+            .add( \"order=\" + String.join( \",\", sort ) )\n+            .add( \"page=\" + page )\n+            .add( \"pageSize=\" + pageSize );\n+\n+        return get( \"\", params );\n+\n+    }\n+\n+    /**\n+     * Executes a metadata request using pagination directives.\n+     * Uses a default filter expression\n+     *\n+     * @param fields a List of String, containing the name of the fields to return\n+     * @param sort a List of String, containing the sort expressions\n+     * @param page the page to return\n+     * @param pageSize the number of elements to return for each page\n+     * @return an {@see ApiResponse} object\n+     */\n+    public ApiResponse getPaginated( List<String> fields, List<String> sort, int page, int pageSize )\n+    {\n+        return getPaginated( toParamList( DEFAULT_METADATA_FILTER ), fields, sort, page, pageSize );\n+    }\n+\n+    /**\n+     * Executes a metadata request using pagination directives.\n+     * Uses a default filter and sort expression\n+     *\n+     * @param fields a List of String, containing the name of the fields to return\n+     * @param page the page to return\n+     * @param pageSize the number of elements to return for each page\n+     * @return an {@see ApiResponse} object\n+     */\n+    public ApiResponse getPaginated( List<String> fields, int page, int pageSize )\n+    {\n+        return getPaginated( toParamList( DEFAULT_METADATA_FILTER ), fields, toParamList( DEFAULT_METADATA_SORT ), page,\n+            pageSize );\n+    }\n+\n+    /**\n+     * Executes a metadata request using pagination directives.\n+     * Uses a default filter, fields and sort expression\n+     *\n+     * @param page the page to return\n+     * @param pageSize the number of elements to return for each page\n+     * @return an {@see ApiResponse} object\n+     */\n+    public ApiResponse getPaginated( int page, int pageSize )\n+    {\n+        return getPaginated( toParamList( DEFAULT_METADATA_FILTER ), toParamList( DEFAULT_METADATA_FIELDS ),\n+            toParamList( DEFAULT_METADATA_SORT ), page, pageSize );\n+    }\n+\n+    /**\n+     * Assert on the pagination (\"pager\") data within the API response\n+     *\n+     * @param response an {@see ApiResponse} object\n+     * @param expectedTotal the expected minimum total number of metadata items\n+     * @param expectedPageCount the expected minimum total number of pages\n+     * @param expectedPageSize the expected value for page size\n+     * @param expectedPage the expected value for the page\n+     */\n+    public void assertPagination( ApiResponse response, int expectedTotal, int expectedPageCount, int expectedPageSize,\n+        int expectedPage )\n+    {\n+        JsonObject pager = response.extractJsonObject( \"pager\" );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAwNzAwNw=="}, "originalCommit": {"oid": "6152876f5f54f85cd40b9b07282211d37734dc0d"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNzc3MzcyOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/actions/RestApiActions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNDozOTo0N1rOGBbBWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNDozOTo0N1rOGBbBWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE0NDQ3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .filter( typeReport -> typeReport.getStats().getCreated() != 0 || typeReport.getStats().getImported() != 0)\n          \n          \n            \n                            .filter( typeReport -> typeReport.getStats().getCreated() != 0 || typeReport.getStats().getImported() != 0 )", "url": "https://github.com/dhis2/dhis2-core/pull/5324#discussion_r404144475", "createdAt": "2020-04-06T14:39:47Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/actions/RestApiActions.java", "diffHunk": "@@ -280,19 +277,15 @@ private void saveCreatedObjects( ApiResponse response )\n         if ( response.containsImportSummaries() )\n         {\n             List<ImportSummary> importSummaries = response.getSuccessfulImportSummaries();\n-            importSummaries.forEach( importSummary -> {\n-                TestRunStorage.addCreatedEntity( endpoint, importSummary.getReference() );\n-            } );\n+            importSummaries.forEach( importSummary -> TestRunStorage.addCreatedEntity( endpoint, importSummary.getReference() ));\n             return;\n         }\n \n         if ( response.getTypeReports() != null )\n         {\n             SchemasActions schemasActions = new SchemasActions();\n             response.getTypeReports().stream()\n-                .filter( typeReport -> {\n-                    return typeReport.getStats().getCreated() != 0 || typeReport.getStats().getImported() != 0;\n-                } )\n+                .filter( typeReport -> typeReport.getStats().getCreated() != 0 || typeReport.getStats().getImported() != 0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7b3d520ecf6ed9e18dcf4260e6609390df9de81"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNzc3NDI3OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/actions/RestApiActions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNDozOTo1NFrOGBbBqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNDozOTo1NFrOGBbBqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE0NDU1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        importSummaries.forEach( importSummary -> TestRunStorage.addCreatedEntity( endpoint, importSummary.getReference() ));\n          \n          \n            \n                        importSummaries.forEach( importSummary -> TestRunStorage.addCreatedEntity( endpoint, importSummary.getReference() ) );", "url": "https://github.com/dhis2/dhis2-core/pull/5324#discussion_r404144554", "createdAt": "2020-04-06T14:39:54Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/actions/RestApiActions.java", "diffHunk": "@@ -280,19 +277,15 @@ private void saveCreatedObjects( ApiResponse response )\n         if ( response.containsImportSummaries() )\n         {\n             List<ImportSummary> importSummaries = response.getSuccessfulImportSummaries();\n-            importSummaries.forEach( importSummary -> {\n-                TestRunStorage.addCreatedEntity( endpoint, importSummary.getReference() );\n-            } );\n+            importSummaries.forEach( importSummary -> TestRunStorage.addCreatedEntity( endpoint, importSummary.getReference() ));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7b3d520ecf6ed9e18dcf4260e6609390df9de81"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNzc3Nzk3OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/dto/ApiResponse.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNDo0MDozOFrOGBbD5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNDo0MDozOFrOGBbD5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE0NTEyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        .filter( is -> is.getStatus().equalsIgnoreCase( \"SUCCESS\" ))\n          \n          \n            \n                        .filter( is -> is.getStatus().equalsIgnoreCase( \"SUCCESS\" ) )", "url": "https://github.com/dhis2/dhis2-core/pull/5324#discussion_r404145125", "createdAt": "2020-04-06T14:40:38Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/dto/ApiResponse.java", "diffHunk": "@@ -154,9 +155,7 @@ public boolean containsImportSummaries()\n     public List<ImportSummary> getSuccessfulImportSummaries()\n     {\n         return getImportSummaries().stream()\n-            .filter( is -> {\n-                return is.getStatus().equalsIgnoreCase( \"SUCCESS\" );\n-            } )\n+            .filter( is -> is.getStatus().equalsIgnoreCase( \"SUCCESS\" ))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7b3d520ecf6ed9e18dcf4260e6609390df9de81"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNzc3OTA3OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/metadata/MetadataPaginationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNDo0MDo1M1rOGBbEmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNDo0MDo1M1rOGBbEmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE0NTMwNw==", "bodyText": "Triple copyright", "url": "https://github.com/dhis2/dhis2-core/pull/5324#discussion_r404145307", "createdAt": "2020-04-06T14:40:53Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/metadata/MetadataPaginationTest.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright (c) 2004-2018, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+/*\n+ * Copyright (c) 2004-2018, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+/*\n+ * Copyright (c) 2004-2018, University of Oslo", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7b3d520ecf6ed9e18dcf4260e6609390df9de81"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3478, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}