{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyNTM1Nzg4", "number": 5349, "title": "feat: Remove username from user invitation link", "bodyText": "Remove username from invitation and restore URL, use a unique token instead.\nIssue: [DHIS2-8096]", "createdAt": "2020-04-13T08:31:06Z", "url": "https://github.com/dhis2/dhis2-core/pull/5349", "merged": true, "mergeCommit": {"oid": "33ed25c26f19f02890d6735c95c7e2829c3de1ee"}, "closed": true, "closedAt": "2020-11-12T16:07:00Z", "author": {"login": "netroms"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcS--CuAH2gAyNDAyNTM1Nzg4OjJiZjc0ZDBjMWQ5OGFlOGI4ZjZhNjNmOWNhNjJmYjg0ZGI0ZDM5MTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdbam90gFqTUyODAwNTkxNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2bf74d0c1d98ae8b8f6a63f9ca62fb84db4d3916", "author": {"user": {"login": "netroms", "name": null}}, "url": "https://github.com/dhis2/dhis2-core/commit/2bf74d0c1d98ae8b8f6a63f9ca62fb84db4d3916", "committedDate": "2020-03-31T08:38:36Z", "message": "DHIS-8096 re commit\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3708e4777b5261dc337c49c8ca1e48685fb1640d", "author": {"user": {"login": "netroms", "name": null}}, "url": "https://github.com/dhis2/dhis2-core/commit/3708e4777b5261dc337c49c8ca1e48685fb1640d", "committedDate": "2020-04-10T06:47:19Z", "message": "merge\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19c55c0a8f05cea23e1e47cb0e13ce021b4e36ea", "author": {"user": {"login": "netroms", "name": null}}, "url": "https://github.com/dhis2/dhis2-core/commit/19c55c0a8f05cea23e1e47cb0e13ce021b4e36ea", "committedDate": "2020-04-13T08:20:52Z", "message": "feat: Remove username from user invitation link\n\nRemove username from invitation URL to prevent MITM attack snooping username.\nUse usercredential's \"secret\" property together with restore token.\nSecret is used for looking up the user.\n\nIssue: [DHIS2-8096]\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0NTgwMzQx", "url": "https://github.com/dhis2/dhis2-core/pull/5349#pullrequestreview-394580341", "createdAt": "2020-04-16T12:27:02Z", "commit": {"oid": "19c55c0a8f05cea23e1e47cb0e13ce021b4e36ea"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMjoyNzowMlrOGGizfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMjoyNzowMlrOGGizfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUxNDg3OQ==", "bodyText": "Do you know why we get a complete diff on this file, line ending issue?", "url": "https://github.com/dhis2/dhis2-core/pull/5349#discussion_r409514879", "createdAt": "2020-04-16T12:27:02Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/UserService.java", "diffHunk": "@@ -1,392 +1,400 @@\n-package org.hisp.dhis.user;\n-\n-/*\n- * Copyright (c) 2004-2020, University of Oslo\n- * All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions are met:\n- * Redistributions of source code must retain the above copyright notice, this\n- * list of conditions and the following disclaimer.\n- *\n- * Redistributions in binary form must reproduce the above copyright notice,\n- * this list of conditions and the following disclaimer in the documentation\n- * and/or other materials provided with the distribution.\n- * Neither the name of the HISP project nor the names of its contributors may\n- * be used to endorse or promote products derived from this software without\n- * specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n- * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n- * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n- * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n- * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- */\n-\n-import org.hisp.dhis.dataset.DataSet;\n-import org.hisp.dhis.feedback.ErrorReport;\n-\n-import javax.annotation.Nullable;\n-import java.util.Collection;\n-import java.util.Date;\n-import java.util.List;\n-\n-/**\n- * @author Chau Thu Tran\n- */\n-public interface UserService\n-{\n-    String ID = UserService.class.getName();\n-    String PW_NO_INTERNAL_LOGIN = \"--[##no_internal_login##]--\";\n-\n-    // -------------------------------------------------------------------------\n-    // User\n-    // -------------------------------------------------------------------------\n-\n-    /**\n-     * Adds a User.\n-     *\n-     * @param user the User to add.\n-     * @return the generated identifier.\n-     */\n-    long addUser( User user );\n-\n-    /**\n-     * Updates a User.\n-     *\n-     * @param user the User to update.\n-     */\n-    void updateUser( User user );\n-\n-    /**\n-     * Retrieves the User with the given identifier.\n-     *\n-     * @param id the identifier of the User to retrieve.\n-     * @return the User.\n-     */\n-    User getUser( long id );\n-\n-    /**\n-     * Retrieves the User with the given unique identifier.\n-     *\n-     * @param uid the identifier of the User to retrieve.\n-     * @return the User.\n-     */\n-    User getUser( String uid );\n-\n-    /**\n-     * Retrieves a collection of User with the given unique identifiers.\n-     *\n-     * @param uids the identifiers of the collection of Users to retrieve.\n-     * @return the User.\n-     */\n-    List<User> getUsers( Collection<String> uids );\n-\n-    /**\n-     * Returns a List of all Users.\n-     *\n-     * @return a Collection of Users.\n-     */\n-    List<User> getAllUsers();\n-\n-    /**\n-     * Retrieves all Users with first name, surname or user name like the given\n-     * name.\n-     *\n-     * @param name  the name.\n-     * @param first the first item to return.\n-     * @param max   the max number of item to return.\n-     * @return a list of Users.\n-     */\n-    List<User> getAllUsersBetweenByName( String name, int first, int max );\n-\n-    /**\n-     * Deletes a User.\n-     *\n-     * @param user the User to delete.\n-     */\n-    void deleteUser( User user );\n-\n-    /**\n-     * Checks if the given user represents the last user with ALL authority.\n-     *\n-     * @param userCredentials the user.\n-     * @return true if the given user represents the last user with ALL authority.\n-     */\n-    boolean isLastSuperUser( UserCredentials userCredentials );\n-\n-    /**\n-     * Checks if the given user role represents the last role with ALL authority.\n-     *\n-     * @param userAuthorityGroup the user role.\n-     * @return true if the given user role represents the last role with ALL authority.\n-     */\n-    boolean isLastSuperRole( UserAuthorityGroup userAuthorityGroup );\n-\n-    /**\n-     * Returns a list of users based on the given query parameters.\n-     * The default order of last name and first name will be applied.\n-     *\n-     * @param params the user query parameters.\n-     * @return a List of users.\n-     */\n-    List<User> getUsers( UserQueryParams params );\n-\n-    /**\n-     * Returns a list of users based on the given query parameters.\n-     * If the specified list of orders are empty, default order of\n-     * last name and first name will be applied.\n-     *\n-     * @param params the user query parameters.\n-     * @param orders the already validated order strings (e.g. email:asc).\n-     * @return a List of users.\n-     */\n-    List<User> getUsers( UserQueryParams params, @Nullable List<String> orders );\n-\n-    /**\n-     * Returns the number of users based on the given query parameters.\n-     *\n-     * @param params the user query parameters.\n-     * @return number of users.\n-     */\n-    int getUserCount( UserQueryParams params );\n-\n-    /**\n-     * Returns number of all users\n-     *\n-     * @return number of users\n-     */\n-    int getUserCount();\n-\n-    List<User> getUsersByPhoneNumber( String phoneNumber );\n-\n-    /**\n-     * Tests whether the current user is allowed to create a user associated\n-     * with the given user group identifiers. Returns true if current user has\n-     * the F_USER_ADD authority. Returns true if the current user has the\n-     * F_USER_ADD_WITHIN_MANAGED_GROUP authority and can manage any of the given\n-     * user groups. Returns false otherwise.\n-     *\n-     * @param userGroups the user group identifiers.\n-     * @return true if the current user can create user, false if not.\n-     */\n-    boolean canAddOrUpdateUser( Collection<String> userGroups );\n-\n-    boolean canAddOrUpdateUser( Collection<String> userGroups, User currentUser );\n-\n-    // -------------------------------------------------------------------------\n-    // UserCredentials\n-    // -------------------------------------------------------------------------\n-\n-    /**\n-     * Adds a UserCredentials.\n-     *\n-     * @param userCredentials the UserCredentials to add.\n-     * @return the User which the UserCredentials is associated with.\n-     */\n-    long addUserCredentials( UserCredentials userCredentials );\n-\n-    /**\n-     * Updates a UserCredentials.\n-     *\n-     * @param userCredentials the UserCredentials to update.\n-     */\n-    void updateUserCredentials( UserCredentials userCredentials );\n-\n-\n-    /**\n-     * Retrieves the UserCredentials associated with the User with the given\n-     * name.\n-     *\n-     * @param username the name of the User.\n-     * @return the UserCredentials.\n-     */\n-    UserCredentials getUserCredentialsByUsername( String username );\n-\n-    UserCredentials getUserCredentialsWithEagerFetchAuthorities( String username );\n-\n-    /**\n-     * Retrieves the UserCredentials associated with the User with the given\n-     * OpenID.\n-     *\n-     * @param openId the openId of the User.\n-     * @return the UserCredentials.\n-     */\n-    UserCredentials getUserCredentialsByOpenId( String openId );\n-\n-    /**\n-     * Retrieves the UserCredentials associated with the User with the given\n-     * LDAP ID.\n-     *\n-     * @param ldapId the ldapId of the User.\n-     * @return the UserCredentials.\n-     */\n-    UserCredentials getUserCredentialsByLdapId( String ldapId );\n-\n-    /**\n-     * Retrieves all UserCredentials.\n-     *\n-     * @return a List of UserCredentials.\n-     */\n-    List<UserCredentials> getAllUserCredentials();\n-\n-    /**\n-     * Encodes and sets the password of the User.\n-     * Due to business logic required on password updates the password for a user\n-     * should only be changed using this method or {@link #encodeAndSetPassword(UserCredentials, String) encodeAndSetPassword}\n-     * and not directly on the User or UserCredentials object.\n-     * <p>\n-     * Note that the changes made to the User object are not persisted.\n-     *\n-     * @param user        the User.\n-     * @param rawPassword the raw password.\n-     */\n-    void encodeAndSetPassword( User user, String rawPassword );\n-\n-    /**\n-     * Encodes and sets the password of the UserCredentials.\n-     * Due to business logic required on password updates the password for a user\n-     * should only be changed using this method or {@link #encodeAndSetPassword(User, String) encodeAndSetPassword}\n-     * and not directly on the User or UserCredentials object.\n-     * <p>\n-     * Note that the changes made to the UserCredentials object are not persisted.\n-     *\n-     * @param userCredentials the UserCredentials.\n-     * @param rawPassword     the raw password.\n-     */\n-    void encodeAndSetPassword( UserCredentials userCredentials, String rawPassword );\n-\n-    /**\n-     * Updates the last login date of UserCredentials with the given username\n-     * with the current date.\n-     *\n-     * @param username the username of the UserCredentials.\n-     */\n-    void setLastLogin( String username );\n-\n-    int getActiveUsersCount( int days );\n-\n-    int getActiveUsersCount( Date since );\n-\n-    boolean credentialsNonExpired( UserCredentials credentials );\n-\n-    // -------------------------------------------------------------------------\n-    // UserAuthorityGroup\n-    // -------------------------------------------------------------------------\n-\n-    /**\n-     * Adds a UserAuthorityGroup.\n-     *\n-     * @param userAuthorityGroup the UserAuthorityGroup.\n-     * @return the generated identifier.\n-     */\n-    long addUserAuthorityGroup( UserAuthorityGroup userAuthorityGroup );\n-\n-    /**\n-     * Updates a UserAuthorityGroup.\n-     *\n-     * @param userAuthorityGroup the UserAuthorityGroup.\n-     */\n-    void updateUserAuthorityGroup( UserAuthorityGroup userAuthorityGroup );\n-\n-    /**\n-     * Retrieves the UserAuthorityGroup with the given identifier.\n-     *\n-     * @param id the identifier of the UserAuthorityGroup to retrieve.\n-     * @return the UserAuthorityGroup.\n-     */\n-    UserAuthorityGroup getUserAuthorityGroup( long id );\n-\n-    /**\n-     * Retrieves the UserAuthorityGroup with the given identifier.\n-     *\n-     * @param uid the identifier of the UserAuthorityGroup to retrieve.\n-     * @return the UserAuthorityGroup.\n-     */\n-    UserAuthorityGroup getUserAuthorityGroup( String uid );\n-\n-    /**\n-     * Retrieves the UserAuthorityGroup with the given name.\n-     *\n-     * @param name the name of the UserAuthorityGroup to retrieve.\n-     * @return the UserAuthorityGroup.\n-     */\n-    UserAuthorityGroup getUserAuthorityGroupByName( String name );\n-\n-    /**\n-     * Deletes a UserAuthorityGroup.\n-     *\n-     * @param userAuthorityGroup the UserAuthorityGroup to delete.\n-     */\n-    void deleteUserAuthorityGroup( UserAuthorityGroup userAuthorityGroup );\n-\n-    /**\n-     * Retrieves all UserAuthorityGroups.\n-     *\n-     * @return a List of UserAuthorityGroups.\n-     */\n-    List<UserAuthorityGroup> getAllUserAuthorityGroups();\n-\n-    /**\n-     * Retrieves UserAuthorityGroups with the given UIDs.\n-     *\n-     * @param uids the UIDs.\n-     * @return a List of UserAuthorityGroups.\n-     */\n-    List<UserAuthorityGroup> getUserRolesByUid( Collection<String> uids );\n-\n-    /**\n-     * Retrieves all UserAuthorityGroups.\n-     *\n-     * @return a List of UserAuthorityGroups.\n-     */\n-    List<UserAuthorityGroup> getUserRolesBetween( int first, int max );\n-\n-    /**\n-     * Retrieves all UserAuthorityGroups.\n-     *\n-     * @return a List of UserAuthorityGroups.\n-     */\n-    List<UserAuthorityGroup> getUserRolesBetweenByName( String name, int first, int max );\n-\n-    /**\n-     * Returns the number of UserAuthorityGroups which are associated with the\n-     * given DataSet.\n-     *\n-     * @param dataSet the DataSet.\n-     * @return number of UserAuthorityGroups.\n-     */\n-    int countDataSetUserAuthorityGroups( DataSet dataSet );\n-\n-    /**\n-     * Filters the given collection of user roles based on whether the current user\n-     * is allowed to issue it.\n-     *\n-     * @param userRoles the collection of user roles.\n-     */\n-    void canIssueFilter( Collection<UserAuthorityGroup> userRoles );\n-\n-    List<ErrorReport> validateUser( User user, User currentUser );\n-\n-    /**\n-     * Returns list of active users whose credentials are expiring with in few days.\n-     *\n-     * @return list of active users whose credentials are expiring with in few days.\n-     */\n-    List<User> getExpiringUsers();\n-\n-    void set2FA( User user, Boolean twoFA );\n-\n-    /**\n-     * Expire a user's active sessions retrieved from the Spring security's\n-     * org.springframework.security.core.session.SessionRegistry\n-     *\n-     * @param credentials the user credentials\n-     */\n-    void expireActiveSessions( UserCredentials credentials );\n-}\n+package org.hisp.dhis.user;\r\n+\r\n+/*\r\n+ * Copyright (c) 2004-2020, University of Oslo\r\n+ * All rights reserved.\r\n+ *\r\n+ * Redistribution and use in source and binary forms, with or without\r\n+ * modification, are permitted provided that the following conditions are met:\r\n+ * Redistributions of source code must retain the above copyright notice, this\r\n+ * list of conditions and the following disclaimer.\r\n+ *\r\n+ * Redistributions in binary form must reproduce the above copyright notice,\r\n+ * this list of conditions and the following disclaimer in the documentation\r\n+ * and/or other materials provided with the distribution.\r\n+ * Neither the name of the HISP project nor the names of its contributors may\r\n+ * be used to endorse or promote products derived from this software without\r\n+ * specific prior written permission.\r\n+ *\r\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\r\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\r\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n+ */\r\n+\r\n+import org.hisp.dhis.dataset.DataSet;\r\n+import org.hisp.dhis.feedback.ErrorReport;\r\n+\r\n+import javax.annotation.Nullable;\r\n+import java.util.Collection;\r\n+import java.util.Date;\r\n+import java.util.List;\r\n+\r\n+/**\r\n+ * @author Chau Thu Tran\r\n+ */\r\n+public interface UserService\r\n+{\r\n+    String ID = UserService.class.getName();\r\n+    String PW_NO_INTERNAL_LOGIN = \"--[##no_internal_login##]--\";\r\n+\r\n+    // -------------------------------------------------------------------------\r\n+    // User\r\n+    // -------------------------------------------------------------------------\r\n+\r\n+    /**\r\n+     * Adds a User.\r\n+     *\r\n+     * @param user the User to add.\r\n+     * @return the generated identifier.\r\n+     */\r\n+    long addUser( User user );\r\n+\r\n+    /**\r\n+     * Updates a User.\r\n+     *\r\n+     * @param user the User to update.\r\n+     */\r\n+    void updateUser( User user );\r\n+\r\n+    /**\r\n+     * Retrieves the User with the given identifier.\r\n+     *\r\n+     * @param id the identifier of the User to retrieve.\r\n+     * @return the User.\r\n+     */\r\n+    User getUser( long id );\r\n+\r\n+    /**\r\n+     * Retrieves the User with the given unique identifier.\r\n+     *\r\n+     * @param uid the identifier of the User to retrieve.\r\n+     * @return the User.\r\n+     */\r\n+    User getUser( String uid );\r\n+\r\n+    /**\r\n+     * Retrieves a collection of User with the given unique identifiers.\r\n+     *\r\n+     * @param uids the identifiers of the collection of Users to retrieve.\r\n+     * @return the User.\r\n+     */\r\n+    List<User> getUsers( Collection<String> uids );\r\n+\r\n+    /**\r\n+     * Returns a List of all Users.\r\n+     *\r\n+     * @return a Collection of Users.\r\n+     */\r\n+    List<User> getAllUsers();\r\n+\r\n+    /**\r\n+     * Retrieves all Users with first name, surname or user name like the given\r\n+     * name.\r\n+     *\r\n+     * @param name  the name.\r\n+     * @param first the first item to return.\r\n+     * @param max   the max number of item to return.\r\n+     * @return a list of Users.\r\n+     */\r\n+    List<User> getAllUsersBetweenByName( String name, int first, int max );\r\n+\r\n+    /**\r\n+     * Deletes a User.\r\n+     *\r\n+     * @param user the User to delete.\r\n+     */\r\n+    void deleteUser( User user );\r\n+\r\n+    /**\r\n+     * Checks if the given user represents the last user with ALL authority.\r\n+     *\r\n+     * @param userCredentials the user.\r\n+     * @return true if the given user represents the last user with ALL authority.\r\n+     */\r\n+    boolean isLastSuperUser( UserCredentials userCredentials );\r\n+\r\n+    /**\r\n+     * Checks if the given user role represents the last role with ALL authority.\r\n+     *\r\n+     * @param userAuthorityGroup the user role.\r\n+     * @return true if the given user role represents the last role with ALL authority.\r\n+     */\r\n+    boolean isLastSuperRole( UserAuthorityGroup userAuthorityGroup );\r\n+\r\n+    /**\r\n+     * Returns a list of users based on the given query parameters.\r\n+     * The default order of last name and first name will be applied.\r\n+     *\r\n+     * @param params the user query parameters.\r\n+     * @return a List of users.\r\n+     */\r\n+    List<User> getUsers( UserQueryParams params );\r\n+\r\n+    /**\r\n+     * Returns a list of users based on the given query parameters.\r\n+     * If the specified list of orders are empty, default order of\r\n+     * last name and first name will be applied.\r\n+     *\r\n+     * @param params the user query parameters.\r\n+     * @param orders the already validated order strings (e.g. email:asc).\r\n+     * @return a List of users.\r\n+     */\r\n+    List<User> getUsers( UserQueryParams params, @Nullable List<String> orders );\r\n+\r\n+    /**\r\n+     * Returns the number of users based on the given query parameters.\r\n+     *\r\n+     * @param params the user query parameters.\r\n+     * @return number of users.\r\n+     */\r\n+    int getUserCount( UserQueryParams params );\r\n+\r\n+    /**\r\n+     * Returns number of all users\r\n+     *\r\n+     * @return number of users\r\n+     */\r\n+    int getUserCount();\r\n+\r\n+    List<User> getUsersByPhoneNumber( String phoneNumber );\r\n+\r\n+    /**\r\n+     * Tests whether the current user is allowed to create a user associated\r\n+     * with the given user group identifiers. Returns true if current user has\r\n+     * the F_USER_ADD authority. Returns true if the current user has the\r\n+     * F_USER_ADD_WITHIN_MANAGED_GROUP authority and can manage any of the given\r\n+     * user groups. Returns false otherwise.\r\n+     *\r\n+     * @param userGroups the user group identifiers.\r\n+     * @return true if the current user can create user, false if not.\r\n+     */\r\n+    boolean canAddOrUpdateUser( Collection<String> userGroups );\r\n+\r\n+    boolean canAddOrUpdateUser( Collection<String> userGroups, User currentUser );\r\n+\r\n+    // -------------------------------------------------------------------------\r\n+    // UserCredentials\r\n+    // -------------------------------------------------------------------------\r\n+\r\n+    /**\r\n+     * Adds a UserCredentials.\r\n+     *\r\n+     * @param userCredentials the UserCredentials to add.\r\n+     * @return the User which the UserCredentials is associated with.\r\n+     */\r\n+    long addUserCredentials( UserCredentials userCredentials );\r\n+\r\n+    /**\r\n+     * Updates a UserCredentials.\r\n+     *\r\n+     * @param userCredentials the UserCredentials to update.\r\n+     */\r\n+    void updateUserCredentials( UserCredentials userCredentials );\r\n+\r\n+    /**\r\n+     * Retrieves the UserCredentials associated with the User with the given\r\n+     * restore token.\r\n+     *\r\n+     * @param token the restore token of the User.\r\n+     * @return the UserCredentials.\r\n+     */\r\n+    public UserCredentials getUserCredentialsBySecret( String token );\r\n+\r\n+    /**\r\n+     * Retrieves the UserCredentials associated with the User with the given\r\n+     * name.\r\n+     *\r\n+     * @param username the name of the User.\r\n+     * @return the UserCredentials.\r\n+     */\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19c55c0a8f05cea23e1e47cb0e13ce021b4e36ea"}, "originalPosition": 608}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0NTgxMDA2", "url": "https://github.com/dhis2/dhis2-core/pull/5349#pullrequestreview-394581006", "createdAt": "2020-04-16T12:27:55Z", "commit": {"oid": "19c55c0a8f05cea23e1e47cb0e13ce021b4e36ea"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMjoyNzo1NVrOGGi1sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMjoyNzo1NVrOGGi1sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUxNTQ0MQ==", "bodyText": "Let's introduce a new property for this we use only for invites/password reset. The secret field is used as a shared secret for 2FA and we should be very careful not expose it through the API at all.", "url": "https://github.com/dhis2/dhis2-core/pull/5349#discussion_r409515441", "createdAt": "2020-04-16T12:27:55Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/user/hibernate/HibernateUserCredentialsStore.java", "diffHunk": "@@ -73,4 +73,12 @@ public UserCredentials getUserCredentialsByLdapId( String ldapId )\n         query.setParameter( \"ldapId\", ldapId );\n         return query.uniqueResult();\n     }\n+\n+    @Override\n+    public UserCredentials getUserCredentialsBySecret( String secret )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19c55c0a8f05cea23e1e47cb0e13ce021b4e36ea"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0NTgxMTM5", "url": "https://github.com/dhis2/dhis2-core/pull/5349#pullrequestreview-394581139", "createdAt": "2020-04-16T12:28:06Z", "commit": {"oid": "19c55c0a8f05cea23e1e47cb0e13ce021b4e36ea"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMjoyODowNlrOGGi2FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMjoyODowNlrOGGi2FQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUxNTU0MQ==", "bodyText": "See common on new property.", "url": "https://github.com/dhis2/dhis2-core/pull/5349#discussion_r409515541", "createdAt": "2020-04-16T12:28:06Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-support/dhis-support-test/src/main/java/org/hisp/dhis/mock/MockUserService.java", "diffHunk": "@@ -166,6 +166,19 @@ public void updateUserCredentials( UserCredentials userCredentials )\n     {\n     }\n \n+    @Override\n+    public UserCredentials getUserCredentialsBySecret( String secret )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19c55c0a8f05cea23e1e47cb0e13ce021b4e36ea"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0NjIxOTQ5", "url": "https://github.com/dhis2/dhis2-core/pull/5349#pullrequestreview-494621949", "createdAt": "2020-09-23T12:48:20Z", "commit": {"oid": "19c55c0a8f05cea23e1e47cb0e13ce021b4e36ea"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1d849c370ed7fa2b33448680bbba052b71a0e3e", "author": {"user": {"login": "netroms", "name": null}}, "url": "https://github.com/dhis2/dhis2-core/commit/a1d849c370ed7fa2b33448680bbba052b71a0e3e", "committedDate": "2020-11-04T07:21:56Z", "message": "Merge branch 'master' of github.com:dhis2/dhis2-core into DHIS2-8096\n\n\u0001 Conflicts:\n\u0001\tdhis-2/dhis-api/src/main/java/org/hisp/dhis/user/UserCredentialsStore.java\n\u0001\tdhis-2/dhis-api/src/main/java/org/hisp/dhis/user/UserService.java\n\u0001\tdhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/user/hibernate/HibernateUserCredentialsStore.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8981bcf081094d428e12fc6cf05a0e73a1372506", "author": {"user": {"login": "netroms", "name": null}}, "url": "https://github.com/dhis2/dhis2-core/commit/8981bcf081094d428e12fc6cf05a0e73a1372506", "committedDate": "2020-11-04T08:19:46Z", "message": "feat: Remove username from user invitation link\n\nIssue:[DHIS2-8096]\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f8de6803a9d72405e4db92a538db63a2b6ba292", "author": {"user": {"login": "netroms", "name": null}}, "url": "https://github.com/dhis2/dhis2-core/commit/6f8de6803a9d72405e4db92a538db63a2b6ba292", "committedDate": "2020-11-06T18:14:55Z", "message": "feat: Remove username from user invitation and restore link\n\nIssue:[DHIS2-8096]\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9499e3e18b285aa009119b758091fce1d64bca70", "author": {"user": {"login": "netroms", "name": null}}, "url": "https://github.com/dhis2/dhis2-core/commit/9499e3e18b285aa009119b758091fce1d64bca70", "committedDate": "2020-11-06T18:15:35Z", "message": "Merge branch 'master' of github.com:dhis2/dhis2-core into DHIS2-8096"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4MDA1OTE0", "url": "https://github.com/dhis2/dhis2-core/pull/5349#pullrequestreview-528005914", "createdAt": "2020-11-11T09:33:17Z", "commit": {"oid": "9499e3e18b285aa009119b758091fce1d64bca70"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2757, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}