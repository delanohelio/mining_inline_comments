{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3Mjk4MTE2", "number": 6453, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwODoxMDoyNFrOEwIAtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwODoxMTo1OFrOEwIDYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4ODk4MzU3OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/common/AnalyticsQueryCriteria.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwODoxMDoyNFrOHlfe4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwODoxMDoyNFrOHlfe4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA3NTE2OA==", "bodyText": "I suggest using @link instead of @see.", "url": "https://github.com/dhis2/dhis2-core/pull/6453#discussion_r509075168", "createdAt": "2020-10-21T08:10:24Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/common/AnalyticsQueryCriteria.java", "diffHunk": "@@ -0,0 +1,184 @@\n+package org.hisp.dhis.common;\n+\n+import java.util.Date;\n+import java.util.Set;\n+\n+import org.hisp.dhis.analytics.AggregationType;\n+import org.hisp.dhis.analytics.SortOrder;\n+import org.hisp.dhis.analytics.UserOrgUnitType;\n+\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+\n+/**\n+ * This class contains all the criteria that can be used to execute a DHIS2\n+ * analytics query using the {@see AnalyticsController}\n+ */\n+@Data\n+@NoArgsConstructor\n+public class AnalyticsQueryCriteria\n+{\n+    /**\n+     * The analytics dimensions\n+     */\n+    private Set<String> dimension;\n+\n+    /**\n+     * Filters to apply to the analytics query\n+     */\n+    private Set<String> filter;\n+\n+    /**\n+     * The {@see AggregationType}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0256b7dd6e86127acf870b77dc19639c2fd0ccb"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4ODk5MDQwOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/AnalyticsController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwODoxMTo1OFrOHlfi6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwODoxMTo1OFrOHlfi6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA3NjIwMg==", "bodyText": "Codestyle, indent.", "url": "https://github.com/dhis2/dhis2-core/pull/6453#discussion_r509076202", "createdAt": "2020-10-21T08:11:58Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/AnalyticsController.java", "diffHunk": "@@ -585,109 +207,63 @@ public void getRawDataCsv(\n     // Data value set\n     // -------------------------------------------------------------------------\n \n-    @RequestMapping( value = RESOURCE_PATH + DATA_VALUE_SET_PATH + \".xml\", method = RequestMethod.GET )\n+    @GetMapping( value = RESOURCE_PATH + DATA_VALUE_SET_PATH + \".xml\" )\n     public @ResponseBody DataValueSet getDataValueSetXml(\n-        @RequestParam Set<String> dimension,\n-        @RequestParam( required = false ) Set<String> filter,\n-        @RequestParam( required = false ) AggregationType aggregationType,\n-        @RequestParam( required = false ) String measureCriteria,\n-        @RequestParam( required = false ) String preAggregationMeasureCriteria,\n-        @RequestParam( required = false ) Date startDate,\n-        @RequestParam( required = false ) Date endDate,\n-        @RequestParam( required = false ) boolean skipMeta,\n-        @RequestParam( required = false ) boolean skipData,\n-        @RequestParam( required = false ) boolean skipRounding,\n-        @RequestParam( required = false ) boolean completedOnly,\n-        @RequestParam( required = false ) boolean hierarchyMeta,\n-        @RequestParam( required = false ) boolean ignoreLimit,\n-        @RequestParam( required = false ) boolean hideEmptyRows,\n-        @RequestParam( required = false ) boolean hideEmptyColumns,\n-        @RequestParam( required = false ) boolean showHierarchy,\n-        @RequestParam( required = false ) boolean includeNumDen,\n-        @RequestParam( required = false ) boolean includeMetadataDetails,\n-        @RequestParam( required = false ) DisplayProperty displayProperty,\n-        @RequestParam( required = false ) IdScheme outputIdScheme,\n-        @RequestParam( required = false ) IdScheme inputIdScheme,\n-        @RequestParam( required = false ) boolean duplicatesOnly,\n-        @RequestParam( required = false ) String approvalLevel,\n-        @RequestParam( required = false ) Date relativePeriodDate,\n-        @RequestParam( required = false ) String userOrgUnit,\n-        @RequestParam( required = false ) String columns,\n-        @RequestParam( required = false ) String rows,\n+        AnalyticsQueryCriteria criteria,\n         DhisApiVersion apiVersion,\n-        Model model,\n-        HttpServletResponse response ) throws Exception\n+        HttpServletResponse response )\n     {\n-        DataQueryRequest request = DataQueryRequest.newBuilder()\n-            .dimension( dimension ).filter( filter ).aggregationType( aggregationType ).measureCriteria( measureCriteria )\n-            .preAggregationMeasureCriteria( preAggregationMeasureCriteria ).startDate( startDate ).endDate( endDate )\n-            .skipMeta( skipMeta ).skipData( skipData ).skipRounding( skipRounding ).completedOnly( completedOnly )\n-            .hierarchyMeta( hierarchyMeta ).ignoreLimit( ignoreLimit ).hideEmptyRows( hideEmptyRows )\n-            .hideEmptyColumns( hideEmptyColumns ).showHierarchy( showHierarchy ).includeNumDen( includeNumDen )\n-            .includeMetadataDetails( includeMetadataDetails ).displayProperty( displayProperty )\n-            .outputIdScheme( outputIdScheme ).inputIdScheme( inputIdScheme ).duplicatesOnly( duplicatesOnly )\n-            .approvalLevel( approvalLevel ).relativePeriodDate( relativePeriodDate ).userOrgUnit( userOrgUnit )\n-            .apiVersion( apiVersion ).build();\n-\n-        DataQueryParams params = dataQueryService.getFromRequest( request );\n+        DataQueryParams params = dataQueryService.getFromRequest( mapFromCriteria( criteria, apiVersion) );\n \n         contextUtils.configureAnalyticsResponse( response, ContextUtils.CONTENT_TYPE_XML, CacheStrategy.RESPECT_SYSTEM_SETTING, null, false, params.getLatestEndDate() );\n         return analyticsService.getAggregatedDataValueSet( params );\n     }\n \n-    @RequestMapping( value = RESOURCE_PATH + DATA_VALUE_SET_PATH + \".json\", method = RequestMethod.GET )\n+    @GetMapping( value = RESOURCE_PATH + DATA_VALUE_SET_PATH + \".json\" )\n     public @ResponseBody DataValueSet getDataValueSetJson(\n-        @RequestParam Set<String> dimension,\n-        @RequestParam( required = false ) Set<String> filter,\n-        @RequestParam( required = false ) AggregationType aggregationType,\n-        @RequestParam( required = false ) String measureCriteria,\n-        @RequestParam( required = false ) String preAggregationMeasureCriteria,\n-        @RequestParam( required = false ) Date startDate,\n-        @RequestParam( required = false ) Date endDate,\n-        @RequestParam( required = false ) boolean skipMeta,\n-        @RequestParam( required = false ) boolean skipData,\n-        @RequestParam( required = false ) boolean skipRounding,\n-        @RequestParam( required = false ) boolean completedOnly,\n-        @RequestParam( required = false ) boolean hierarchyMeta,\n-        @RequestParam( required = false ) boolean ignoreLimit,\n-        @RequestParam( required = false ) boolean hideEmptyRows,\n-        @RequestParam( required = false ) boolean hideEmptyColumns,\n-        @RequestParam( required = false ) boolean showHierarchy,\n-        @RequestParam( required = false ) boolean includeNumDen,\n-        @RequestParam( required = false ) boolean includeMetadataDetails,\n-        @RequestParam( required = false ) DisplayProperty displayProperty,\n-        @RequestParam( required = false ) IdScheme outputIdScheme,\n-        @RequestParam( required = false ) IdScheme inputIdScheme,\n-        @RequestParam( required = false ) boolean duplicatesOnly,\n-        @RequestParam( required = false ) String approvalLevel,\n-        @RequestParam( required = false ) Date relativePeriodDate,\n-        @RequestParam( required = false ) String userOrgUnit,\n-        @RequestParam( required = false ) String columns,\n-        @RequestParam( required = false ) String rows,\n+        AnalyticsQueryCriteria criteria,\n         DhisApiVersion apiVersion,\n-        Model model,\n-        HttpServletResponse response ) throws Exception\n+        HttpServletResponse response )\n     {\n-        DataQueryRequest request = DataQueryRequest.newBuilder()\n-            .dimension( dimension ).filter( filter ).aggregationType( aggregationType ).measureCriteria( measureCriteria )\n-            .preAggregationMeasureCriteria( preAggregationMeasureCriteria ).startDate( startDate ).endDate( endDate )\n-            .skipMeta( skipMeta ).skipData( skipData ).skipRounding( skipRounding ).completedOnly( completedOnly )\n-            .hierarchyMeta( hierarchyMeta ).ignoreLimit( ignoreLimit ).hideEmptyRows( hideEmptyRows )\n-            .hideEmptyColumns( hideEmptyColumns ).showHierarchy( showHierarchy ).includeNumDen( includeNumDen )\n-            .includeMetadataDetails( includeMetadataDetails ).displayProperty( displayProperty )\n-            .outputIdScheme( outputIdScheme ).inputIdScheme( inputIdScheme ).duplicatesOnly( duplicatesOnly )\n-            .approvalLevel( approvalLevel ).relativePeriodDate( relativePeriodDate ).userOrgUnit( userOrgUnit )\n-            .apiVersion( apiVersion ).build();\n-\n-        DataQueryParams params = dataQueryService.getFromRequest( request );\n+        DataQueryParams params = dataQueryService.getFromRequest( mapFromCriteria( criteria, apiVersion) );\n \n         contextUtils.configureAnalyticsResponse( response, ContextUtils.CONTENT_TYPE_JSON, CacheStrategy.RESPECT_SYSTEM_SETTING, null, false, params.getLatestEndDate() );\n         return analyticsService.getAggregatedDataValueSet( params );\n     }\n \n-    @RequestMapping( value = RESOURCE_PATH + \"/tableTypes\", method = RequestMethod.GET, produces = { \"application/json\", \"application/javascript\" } )\n+    @GetMapping( value = RESOURCE_PATH + \"/tableTypes\", produces = { APPLICATION_JSON_VALUE, \"application/javascript\" } )\n     public @ResponseBody AnalyticsTableType[] getTableTypes()\n     {\n         return AnalyticsTableType.values();\n     }\n+\n+    private Grid getGrid( AnalyticsQueryCriteria criteria, DhisApiVersion apiVersion, String contentType,\n+        HttpServletResponse response )\n+    {\n+        DataQueryParams params = dataQueryService.getFromRequest(  mapFromCriteria( criteria, apiVersion)  );\n+\n+        contextUtils.configureAnalyticsResponse( response, contentType, CacheStrategy.RESPECT_SYSTEM_SETTING, null,\n+            false, params.getLatestEndDate() );\n+\n+        return analyticsService.getAggregatedDataValues( params, getItemsFromParam( criteria.getColumns() ),\n+            getItemsFromParam( criteria.getRows() ) );\n+    }\n+\n+    private Grid getGridWithAttachment( AnalyticsQueryCriteria criteria, DhisApiVersion apiVersion, String contentType, String file,\n+                          HttpServletResponse response )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0256b7dd6e86127acf870b77dc19639c2fd0ccb"}, "originalPosition": 743}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3775, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}