{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI5NDA3NTM5", "number": 6782, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwOTo1NDoxOVrOE-kxvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMDo0MDoxM1rOE-l9YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MDQ5NzI2OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackerConverterService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwOTo1NDoxOVrOH7zZIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNTowMToyN1rOH7_Edw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ3MDA0OQ==", "bodyText": "if we had\n    To from( TrackerPreheat preheat, From object, To existingInstance );\n\n    default To from( TrackerPreheat trackerPreheat, Function<TrackerPreheat, To> toInstanceProvider, From object )\n    {\n        To instance = toInstanceProvider.apply( trackerPreheat );\n        return from( trackerPreheat, object, instance );\n    }\n\n    default List<To> from( TrackerPreheat preheat, List<From> objects )\n    {\n        return objects\n            .stream()\n            .map( object -> from( preheat, object ) )\n            .collect( Collectors.toList() );\n    }\n\nwe might remove all implementations of these methods from children classes, whose responsibility would just be to implement:\n    To from( TrackerPreheat preheat, From object, To existingInstance );", "url": "https://github.com/dhis2/dhis2-core/pull/6782#discussion_r532470049", "createdAt": "2020-11-30T09:54:19Z", "author": {"login": "gnespolino"}, "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackerConverterService.java", "diffHunk": "@@ -46,4 +46,9 @@\n     List<To> from( TrackerPreheat preheat, List<From> objects );\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7609ad704819038d49dbd3438c5185bc390d22e7"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY2MTM2Nw==", "bodyText": "We didn't change the Converter Service directly. I agree with your comment, but I prefer to do it in a separate PR, since this one is already homungous.", "url": "https://github.com/dhis2/dhis2-core/pull/6782#discussion_r532661367", "createdAt": "2020-11-30T15:01:27Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackerConverterService.java", "diffHunk": "@@ -46,4 +46,9 @@\n     List<To> from( TrackerPreheat preheat, List<From> objects );\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ3MDA0OQ=="}, "originalCommit": {"oid": "7609ad704819038d49dbd3438c5185bc390d22e7"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MDUxNjQ3OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/mappers/UserMapper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwOTo1ODo1MFrOH7zkmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNTowMTo1NFrOH7_FmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ3Mjk4NQ==", "bodyText": "I'll comment this just in one place.\nI believe we can use an abstract base mapper to map all common fields like id, uid, code, so we don't have to repeat in all mappers", "url": "https://github.com/dhis2/dhis2-core/pull/6782#discussion_r532472985", "createdAt": "2020-11-30T09:58:50Z", "author": {"login": "gnespolino"}, "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/mappers/UserMapper.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package org.hisp.dhis.tracker.preheat.mappers;\n+\n+import org.hisp.dhis.user.User;\n+import org.mapstruct.BeanMapping;\n+import org.mapstruct.Mapper;\n+import org.mapstruct.Mapping;\n+import org.mapstruct.factory.Mappers;\n+\n+@Mapper( uses = DebugMapper.class )\n+public interface UserMapper extends PreheatMapper<User>\n+{\n+    UserMapper INSTANCE = Mappers.getMapper( UserMapper.class );\n+\n+    @BeanMapping( ignoreByDefault = true )\n+    @Mapping( target = \"id\" )\n+    @Mapping( target = \"uid\" )\n+    @Mapping( target = \"code\" )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7609ad704819038d49dbd3438c5185bc390d22e7"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY2MTY1Ng==", "bodyText": "Yes, 100% right. I will do it in a separate PR.", "url": "https://github.com/dhis2/dhis2-core/pull/6782#discussion_r532661656", "createdAt": "2020-11-30T15:01:54Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/mappers/UserMapper.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package org.hisp.dhis.tracker.preheat.mappers;\n+\n+import org.hisp.dhis.user.User;\n+import org.mapstruct.BeanMapping;\n+import org.mapstruct.Mapper;\n+import org.mapstruct.Mapping;\n+import org.mapstruct.factory.Mappers;\n+\n+@Mapper( uses = DebugMapper.class )\n+public interface UserMapper extends PreheatMapper<User>\n+{\n+    UserMapper INSTANCE = Mappers.getMapper( UserMapper.class );\n+\n+    @BeanMapping( ignoreByDefault = true )\n+    @Mapping( target = \"id\" )\n+    @Mapping( target = \"uid\" )\n+    @Mapping( target = \"code\" )", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ3Mjk4NQ=="}, "originalCommit": {"oid": "7609ad704819038d49dbd3438c5185bc390d22e7"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MDUyOTQ2OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/supplier/classStrategy/AbstractSchemaStrategy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMDowMTo0MVrOH7zsOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNTowNDowOFrOH7_Lrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ3NDkzOQ==", "bodyText": "Mappers generated by MapStruct can be regular Spring Beans, so if we use that approach we might avoid passing them around and we might rather just autowire them as dependency where needed. Since this PR is already quite big, we might have a dedicated ticket to promote mappers to be regular Spring Bean (if possible)", "url": "https://github.com/dhis2/dhis2-core/pull/6782#discussion_r532474939", "createdAt": "2020-11-30T10:01:41Z", "author": {"login": "gnespolino"}, "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/supplier/classStrategy/AbstractSchemaStrategy.java", "diffHunk": "@@ -83,7 +92,7 @@ public void add( TrackerPreheatParams params, List<List<String>> splitList, Trac\n \n     @SuppressWarnings( \"unchecked\" )\n     protected void queryForIdentifiableObjects( TrackerPreheat preheat, Schema schema, TrackerIdentifier identifier,\n-        List<List<String>> splitList )\n+        List<List<String>> splitList, Class<? extends PreheatMapper> mapper )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7609ad704819038d49dbd3438c5185bc390d22e7"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY2MzIxNA==", "bodyText": "Yes, this is a design choice. Since the mappers do not have any other dependency that requires injection and MapStruct has a very convenient method to fetch the mappers (via static method), we decided to keep things simple and avoid involving Spring. In the specific case you are commenting, Spring would have been actually more problematic that useful, because the mapper variable is specified in an annotation.", "url": "https://github.com/dhis2/dhis2-core/pull/6782#discussion_r532663214", "createdAt": "2020-11-30T15:04:08Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/supplier/classStrategy/AbstractSchemaStrategy.java", "diffHunk": "@@ -83,7 +92,7 @@ public void add( TrackerPreheatParams params, List<List<String>> splitList, Trac\n \n     @SuppressWarnings( \"unchecked\" )\n     protected void queryForIdentifiableObjects( TrackerPreheat preheat, Schema schema, TrackerIdentifier identifier,\n-        List<List<String>> splitList )\n+        List<List<String>> splitList, Class<? extends PreheatMapper> mapper )", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ3NDkzOQ=="}, "originalCommit": {"oid": "7609ad704819038d49dbd3438c5185bc390d22e7"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MDY5MDg4OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/preheat/TrackerPreheatServiceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMDo0MDoxM1rOH71MQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNToxODoyOVrOH7_1bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ5OTUyMg==", "bodyText": "add assertions - sonarqube reported issue", "url": "https://github.com/dhis2/dhis2-core/pull/6782#discussion_r532499522", "createdAt": "2020-11-30T10:40:13Z", "author": {"login": "vilkg"}, "path": "dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/preheat/TrackerPreheatServiceTest.java", "diffHunk": "@@ -28,98 +28,57 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-import com.google.common.collect.Lists;\n-import org.hisp.dhis.DhisSpringTest;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Set;\n+\n import org.hisp.dhis.category.CategoryOption;\n import org.hisp.dhis.category.CategoryOptionCombo;\n-import org.hisp.dhis.common.IdentifiableObject;\n import org.hisp.dhis.dataelement.DataElement;\n-import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundle;\n-import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleMode;\n-import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleParams;\n-import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleService;\n-import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleValidationService;\n-import org.hisp.dhis.dxf2.metadata.objectbundle.feedback.ObjectBundleValidationReport;\n-import org.hisp.dhis.importexport.ImportStrategy;\n import org.hisp.dhis.organisationunit.OrganisationUnit;\n import org.hisp.dhis.program.Program;\n import org.hisp.dhis.program.ProgramStage;\n-import org.hisp.dhis.render.RenderFormat;\n-import org.hisp.dhis.render.RenderService;\n import org.hisp.dhis.tracker.TrackerIdScheme;\n import org.hisp.dhis.tracker.TrackerIdentifier;\n import org.hisp.dhis.tracker.TrackerIdentifierCollector;\n import org.hisp.dhis.tracker.TrackerIdentifierParams;\n-import org.hisp.dhis.tracker.bundle.TrackerBundleParams;\n+import org.hisp.dhis.tracker.TrackerImportParams;\n+import org.hisp.dhis.tracker.TrackerTest;\n import org.hisp.dhis.tracker.domain.TrackedEntity;\n-import org.hisp.dhis.user.UserService;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.core.io.ClassPathResource;\n \n-import java.io.IOException;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n+import com.google.common.collect.Lists;\n \n /**\n  * @author Morten Olav Hansen <mortenoh@gmail.com>\n  */\n-public class TrackerPreheatServiceTest\n-    extends DhisSpringTest\n+public class TrackerPreheatServiceTest extends TrackerTest\n {\n-    @Autowired\n-    private ObjectBundleService objectBundleService;\n-\n-    @Autowired\n-    private ObjectBundleValidationService objectBundleValidationService;\n-\n-    @Autowired\n-    private RenderService _renderService;\n-\n-    @Autowired\n-    private UserService _userService;\n-\n     @Autowired\n     private TrackerPreheatService trackerPreheatService;\n \n     @Override\n-    protected void setUpTest()\n+    protected void initTest()\n     {\n-        preCreateInjectAdminUserWithoutPersistence();\n-\n-        renderService = _renderService;\n-        userService = _userService;\n     }\n \n     @Test\n     public void testEventMetadata()\n         throws IOException\n     {\n-        Map<Class<? extends IdentifiableObject>, List<IdentifiableObject>> metadata = renderService.fromMetadata(\n-            new ClassPathResource( \"tracker/event_metadata.json\" ).getInputStream(), RenderFormat.JSON );\n-\n-        ObjectBundleParams params = new ObjectBundleParams();\n-        params.setObjectBundleMode( ObjectBundleMode.COMMIT );\n-        params.setImportStrategy( ImportStrategy.CREATE );\n-        params.setObjects( metadata );\n-\n-        ObjectBundle bundle = objectBundleService.create( params );\n-        ObjectBundleValidationReport validationReport = objectBundleValidationService.validate( bundle );\n-        assertTrue( validationReport.getErrorReports().isEmpty() );\n-\n-        objectBundleService.commit( bundle );\n+        setUpMetadata( \"tracker/event_metadata.json\" );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7609ad704819038d49dbd3438c5185bc390d22e7"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY3MzkwMw==", "bodyText": "Fixed", "url": "https://github.com/dhis2/dhis2-core/pull/6782#discussion_r532673903", "createdAt": "2020-11-30T15:18:29Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/preheat/TrackerPreheatServiceTest.java", "diffHunk": "@@ -28,98 +28,57 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-import com.google.common.collect.Lists;\n-import org.hisp.dhis.DhisSpringTest;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Set;\n+\n import org.hisp.dhis.category.CategoryOption;\n import org.hisp.dhis.category.CategoryOptionCombo;\n-import org.hisp.dhis.common.IdentifiableObject;\n import org.hisp.dhis.dataelement.DataElement;\n-import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundle;\n-import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleMode;\n-import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleParams;\n-import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleService;\n-import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleValidationService;\n-import org.hisp.dhis.dxf2.metadata.objectbundle.feedback.ObjectBundleValidationReport;\n-import org.hisp.dhis.importexport.ImportStrategy;\n import org.hisp.dhis.organisationunit.OrganisationUnit;\n import org.hisp.dhis.program.Program;\n import org.hisp.dhis.program.ProgramStage;\n-import org.hisp.dhis.render.RenderFormat;\n-import org.hisp.dhis.render.RenderService;\n import org.hisp.dhis.tracker.TrackerIdScheme;\n import org.hisp.dhis.tracker.TrackerIdentifier;\n import org.hisp.dhis.tracker.TrackerIdentifierCollector;\n import org.hisp.dhis.tracker.TrackerIdentifierParams;\n-import org.hisp.dhis.tracker.bundle.TrackerBundleParams;\n+import org.hisp.dhis.tracker.TrackerImportParams;\n+import org.hisp.dhis.tracker.TrackerTest;\n import org.hisp.dhis.tracker.domain.TrackedEntity;\n-import org.hisp.dhis.user.UserService;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.core.io.ClassPathResource;\n \n-import java.io.IOException;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n+import com.google.common.collect.Lists;\n \n /**\n  * @author Morten Olav Hansen <mortenoh@gmail.com>\n  */\n-public class TrackerPreheatServiceTest\n-    extends DhisSpringTest\n+public class TrackerPreheatServiceTest extends TrackerTest\n {\n-    @Autowired\n-    private ObjectBundleService objectBundleService;\n-\n-    @Autowired\n-    private ObjectBundleValidationService objectBundleValidationService;\n-\n-    @Autowired\n-    private RenderService _renderService;\n-\n-    @Autowired\n-    private UserService _userService;\n-\n     @Autowired\n     private TrackerPreheatService trackerPreheatService;\n \n     @Override\n-    protected void setUpTest()\n+    protected void initTest()\n     {\n-        preCreateInjectAdminUserWithoutPersistence();\n-\n-        renderService = _renderService;\n-        userService = _userService;\n     }\n \n     @Test\n     public void testEventMetadata()\n         throws IOException\n     {\n-        Map<Class<? extends IdentifiableObject>, List<IdentifiableObject>> metadata = renderService.fromMetadata(\n-            new ClassPathResource( \"tracker/event_metadata.json\" ).getInputStream(), RenderFormat.JSON );\n-\n-        ObjectBundleParams params = new ObjectBundleParams();\n-        params.setObjectBundleMode( ObjectBundleMode.COMMIT );\n-        params.setImportStrategy( ImportStrategy.CREATE );\n-        params.setObjects( metadata );\n-\n-        ObjectBundle bundle = objectBundleService.create( params );\n-        ObjectBundleValidationReport validationReport = objectBundleValidationService.validate( bundle );\n-        assertTrue( validationReport.getErrorReports().isEmpty() );\n-\n-        objectBundleService.commit( bundle );\n+        setUpMetadata( \"tracker/event_metadata.json\" );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ5OTUyMg=="}, "originalCommit": {"oid": "7609ad704819038d49dbd3438c5185bc390d22e7"}, "originalPosition": 104}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3709, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}