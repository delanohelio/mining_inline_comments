{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzNTg1MTMz", "number": 6843, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNToxNzowOFrOFB1Nvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNToxNzowOFrOFB1Nvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NDY0NzY3OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNToxNzowOFrOIArvZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNToxNzowOFrOIArvZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU4NzU1Nw==", "bodyText": "I find this new code a bit hard to read (I would try to keep this method as tiny and lean as possible).\nWhat about encapsulating the call to the rule engine like so:\n@Override\n    public TrackerImportReport importTracker( TrackerImportParams params )\n    {\n        params.setUser( trackerUserService.getUser( params.getUserId() ) );\n\n        // Init the Notifier\n        ImportNotifier notifier = new ImportNotifier( this.notifier, params );\n\n        // Keeps track of the elapsed time of each Import stage\n        TrackerTimingsStats opsTimer = new TrackerTimingsStats();\n\n        notifier.startImport();\n\n        TrackerValidationReport validationReport = null;\n\n        TrackerBundleReport bundleReport;\n\n        try\n        {\n            //\n            // pre-heat\n            //\n            TrackerBundle trackerBundle = opsTimer.exec( PREHEAT_OPS,\n                () -> preheatBundle( params ) );\n\n            Map<TrackerType, Integer> bundleSize = calculatePayloadSize( trackerBundle );\n\n            //\n            // preprocess\n            //\n            opsTimer.execVoid( PREPROCESS_OPS,\n                () -> preProcessBundle( trackerBundle ) );\n\n            //\n            // validate\n            //\n            validationReport = opsTimer.exec( VALIDATION_OPS,\n                () -> validateBundle( trackerBundle ) );\n\n            notifier.notifyOps( VALIDATION_OPS, opsTimer );\n\n            if ( exitOnError( validationReport, params ) )\n            {\n                return buildReportAndNotify( validationReport, opsTimer, bundleSize, notifier );\n            }\n            else\n            {\n                validationReport = execRuleEngine(opsTimer, trackerBundle, validationReport, notifier);\n\n\n                if ( exitOnError( validationReport, params ) )\n                {\n                    return buildReportAndNotify( validationReport, opsTimer, bundleSize, notifier );\n                }\n\n                //\n                // commit\n                //\n                if ( TrackerImportStrategy.DELETE == params.getImportStrategy() )\n                {\n                    bundleReport = opsTimer.exec( COMMIT_OPS, () -> deleteBundle( trackerBundle ) );\n                }\n                else\n                {\n                    bundleReport = opsTimer.exec( COMMIT_OPS, () -> commitBundle( trackerBundle ) );\n                }\n\n                notifier.notifyOps( COMMIT_OPS, opsTimer );\n\n                TrackerImportReport trackerImportReport = TrackerImportReport.withImportCompleted( TrackerStatus.OK,\n                    bundleReport, validationReport,\n                    opsTimer.stopTimer(), bundleSize );\n\n                notifier.endImport( trackerImportReport );\n\n                return trackerImportReport;\n            }\n        }\n        catch ( Exception e )\n        {\n            log.error( \"Exception thrown during import.\", e );\n\n            TrackerImportReport report = TrackerImportReport.withError( \"Exception:\" + e.getMessage(),\n                validationReport, opsTimer.stopTimer() );\n\n            notifier.endImportWithError( report, e );\n\n            return report;\n        }\n    }\n\n    private TrackerValidationReport execRuleEngine( TrackerTimingsStats opsTimer, TrackerBundle trackerBundle,\n        TrackerValidationReport report, ImportNotifier notifier )\n    {\n        //\n        // rule engine\n        //\n        opsTimer.execVoid( PROGRAMRULE_OPS,\n            () -> runRuleEngine( trackerBundle ) );\n\n        notifier.notifyOps( PROGRAMRULE_OPS, opsTimer );\n\n        //\n        // rule engine\n        //\n        TrackerValidationReport finalValidationReport = report;\n        report = opsTimer.exec( VALIDATE_PROGRAMRULE_OPS,\n            () -> validateRuleEngine( trackerBundle, finalValidationReport ) );\n\n        notifier.notifyOps( VALIDATE_PROGRAMRULE_OPS, opsTimer );\n\n        return report;\n    }\n\n    private TrackerImportReport buildReportAndNotify( TrackerValidationReport validationReport,\n        TrackerTimingsStats opsTimer, Map<TrackerType, Integer> bundleSize, ImportNotifier notifier )\n    {\n        TrackerImportReport trackerImportReport = TrackerImportReport\n                .withValidationErrors( validationReport, opsTimer.stopTimer(),\n                        bundleSize.values().stream().mapToInt( Integer::intValue ).sum() );\n\n        notifier.endImport( trackerImportReport );\n\n        return trackerImportReport;\n    }\n\n    private boolean exitOnError( TrackerValidationReport validationReport, TrackerImportParams params )\n    {\n        return validationReport.hasErrors() && params.getAtomicMode() == AtomicMode.ALL;\n    }", "url": "https://github.com/dhis2/dhis2-core/pull/6843#discussion_r537587557", "createdAt": "2020-12-07T15:17:08Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java", "diffHunk": "@@ -136,13 +132,42 @@ public TrackerImportReport importTracker( TrackerImportParams params )\n             }\n             else\n             {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2c1db20247638c6c9a512adf372869345d4be4b"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3718, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}