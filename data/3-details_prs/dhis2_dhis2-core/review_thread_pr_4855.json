{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczNjY4NzE2", "number": 4855, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNDoyNToxOVrODfkI_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNDozMjoxNVrODfkUig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDI0NTc0OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNDoyNToxOVrOFpVtag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMzo1Mzo1OFrOFp3OEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg5MTYyNg==", "bodyText": "can this loop use .parallelStream?", "url": "https://github.com/dhis2/dhis2-core/pull/4855#discussion_r378891626", "createdAt": "2020-02-13T14:25:19Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java", "diffHunk": "@@ -134,6 +125,28 @@ private static void collectEvents(\n         } );\n     }\n \n+    private static void collectRelationships(\n+        Map<Class<?>, Set<String>> map, TrackerIdentifier identifier, List<Relationship> relationships )\n+    {\n+        relationships.forEach( relationship -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aeaa928a1f8334a4d8fe5ba8af138c42048d83c1"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ0MDY1Nw==", "bodyText": "Done", "url": "https://github.com/dhis2/dhis2-core/pull/4855#discussion_r379440657", "createdAt": "2020-02-14T13:53:58Z", "author": {"login": "enricocolasante"}, "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java", "diffHunk": "@@ -134,6 +125,28 @@ private static void collectEvents(\n         } );\n     }\n \n+    private static void collectRelationships(\n+        Map<Class<?>, Set<String>> map, TrackerIdentifier identifier, List<Relationship> relationships )\n+    {\n+        relationships.forEach( relationship -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg5MTYyNg=="}, "originalCommit": {"oid": "aeaa928a1f8334a4d8fe5ba8af138c42048d83c1"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDI1MDAzOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNDoyNjoyMVrOFpVv_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMzo1NjozMFrOFp3TBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg5MjI4Nw==", "bodyText": "Explicit session flush is quite extreme? Can you add a comment why it is required?", "url": "https://github.com/dhis2/dhis2-core/pull/4855#discussion_r378892287", "createdAt": "2020-02-13T14:26:21Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java", "diffHunk": "@@ -278,6 +294,49 @@ private TrackerTypeReport handleEvents( Session session, TrackerBundle bundle )\n         return typeReport;\n     }\n \n+    private TrackerTypeReport handleRelationships( Session session, TrackerBundle bundle )\n+    {\n+        List<Relationship> relationships = bundle.getRelationships();\n+        TrackerTypeReport typeReport = new TrackerTypeReport( TrackerType.RELATIONSHIP );\n+\n+        relationships.forEach( o -> bundleHooks.forEach( hook -> hook.preCreate( Relationship.class, o, bundle ) ) );\n+        session.flush();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aeaa928a1f8334a4d8fe5ba8af138c42048d83c1"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ0MTkyNA==", "bodyText": "Removing the flushing but the one that is called when the user select the option to flush every time and object is added.", "url": "https://github.com/dhis2/dhis2-core/pull/4855#discussion_r379441924", "createdAt": "2020-02-14T13:56:30Z", "author": {"login": "enricocolasante"}, "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java", "diffHunk": "@@ -278,6 +294,49 @@ private TrackerTypeReport handleEvents( Session session, TrackerBundle bundle )\n         return typeReport;\n     }\n \n+    private TrackerTypeReport handleRelationships( Session session, TrackerBundle bundle )\n+    {\n+        List<Relationship> relationships = bundle.getRelationships();\n+        TrackerTypeReport typeReport = new TrackerTypeReport( TrackerType.RELATIONSHIP );\n+\n+        relationships.forEach( o -> bundleHooks.forEach( hook -> hook.preCreate( Relationship.class, o, bundle ) ) );\n+        session.flush();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg5MjI4Nw=="}, "originalCommit": {"oid": "aeaa928a1f8334a4d8fe5ba8af138c42048d83c1"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDI1NTY0OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/RelationshipTrackerConverterService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNDoyNzo0M1rOFpVzZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMzo1NDowNlrOFp3OVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg5MzE1Nw==", "bodyText": "convertRelationShipType -> convertRelationshipType", "url": "https://github.com/dhis2/dhis2-core/pull/4855#discussion_r378893157", "createdAt": "2020-02-13T14:27:43Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/RelationshipTrackerConverterService.java", "diffHunk": "@@ -0,0 +1,245 @@\n+package org.hisp.dhis.tracker.converter;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.common.CodeGenerator;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.relationship.RelationshipType;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.tracker.TrackerIdentifier;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.domain.Relationship;\n+import org.hisp.dhis.tracker.domain.RelationshipItem;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.hisp.dhis.tracker.preheat.TrackerPreheat;\n+import org.hisp.dhis.tracker.preheat.TrackerPreheatParams;\n+import org.hisp.dhis.tracker.preheat.TrackerPreheatService;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.hisp.dhis.relationship.RelationshipEntity.PROGRAM_INSTANCE;\n+import static org.hisp.dhis.relationship.RelationshipEntity.PROGRAM_STAGE_INSTANCE;\n+import static org.hisp.dhis.relationship.RelationshipEntity.TRACKED_ENTITY_INSTANCE;\n+\n+/**\n+ * @author Enrico Colasante\n+ */\n+@Service\n+public class RelationshipTrackerConverterService\n+    implements TrackerConverterService<Relationship, org.hisp.dhis.relationship.Relationship>\n+{\n+    private final TrackerPreheatService trackerPreheatService;\n+\n+    private final TrackerConverterService<TrackedEntity, TrackedEntityInstance> trackedEntityTrackerConverterService;\n+\n+    private final TrackerConverterService<Enrollment, ProgramInstance> enrollmentTrackerConverterService;\n+\n+    private final TrackerConverterService<Event, ProgramStageInstance> eventTrackerConverterService;\n+\n+    public RelationshipTrackerConverterService( TrackerPreheatService trackerPreheatService,\n+        TrackerConverterService<Enrollment, ProgramInstance> enrollmentTrackerConverterService,\n+        TrackerConverterService<Event, ProgramStageInstance> eventTrackerConverterService,\n+        TrackerConverterService<TrackedEntity, TrackedEntityInstance> trackedEntityTrackerConverterService )\n+    {\n+        this.trackerPreheatService = trackerPreheatService;\n+        this.enrollmentTrackerConverterService = enrollmentTrackerConverterService;\n+        this.eventTrackerConverterService = eventTrackerConverterService;\n+        this.trackedEntityTrackerConverterService = trackedEntityTrackerConverterService;\n+    }\n+\n+    @Override\n+    @Transactional( readOnly = true )\n+    public Relationship to( org.hisp.dhis.relationship.Relationship relationship )\n+    {\n+        List<Relationship> relationships = to( Collections.singletonList( relationship ) );\n+\n+        if ( relationships.isEmpty() )\n+        {\n+            return null;\n+        }\n+\n+        return relationships.get( 0 );\n+    }\n+\n+    @Override\n+    @Transactional( readOnly = true )\n+    public List<Relationship> to( List<org.hisp.dhis.relationship.Relationship> relationships )\n+    {\n+        return relationships.stream().map( fromRelationship -> {\n+\n+            Relationship toRelationship = new Relationship();\n+            toRelationship.setRelationship( fromRelationship.getUid() );\n+            toRelationship.setBidirectional( fromRelationship.getRelationshipType().isBidirectional() );\n+            toRelationship.setCreated( fromRelationship.getCreated().toString() );\n+            toRelationship.setFrom( convertRelationShipType( fromRelationship.getFrom() ) );\n+            toRelationship.setTo( convertRelationShipType( fromRelationship.getTo() ) );\n+            toRelationship.setLastUpdated( fromRelationship.getLastUpdated().toString() );\n+            toRelationship.setRelationshipName( fromRelationship.getName() );\n+            toRelationship.setRelationshipType( fromRelationship.getRelationshipType().getUid() );\n+\n+            return toRelationship;\n+        } ).collect( Collectors.toList() );\n+    }\n+\n+    private RelationshipItem convertRelationShipType( org.hisp.dhis.relationship.RelationshipItem from )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aeaa928a1f8334a4d8fe5ba8af138c42048d83c1"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ0MDcyNw==", "bodyText": "Done", "url": "https://github.com/dhis2/dhis2-core/pull/4855#discussion_r379440727", "createdAt": "2020-02-14T13:54:06Z", "author": {"login": "enricocolasante"}, "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/RelationshipTrackerConverterService.java", "diffHunk": "@@ -0,0 +1,245 @@\n+package org.hisp.dhis.tracker.converter;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.common.CodeGenerator;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.relationship.RelationshipType;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.tracker.TrackerIdentifier;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.domain.Relationship;\n+import org.hisp.dhis.tracker.domain.RelationshipItem;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.hisp.dhis.tracker.preheat.TrackerPreheat;\n+import org.hisp.dhis.tracker.preheat.TrackerPreheatParams;\n+import org.hisp.dhis.tracker.preheat.TrackerPreheatService;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.hisp.dhis.relationship.RelationshipEntity.PROGRAM_INSTANCE;\n+import static org.hisp.dhis.relationship.RelationshipEntity.PROGRAM_STAGE_INSTANCE;\n+import static org.hisp.dhis.relationship.RelationshipEntity.TRACKED_ENTITY_INSTANCE;\n+\n+/**\n+ * @author Enrico Colasante\n+ */\n+@Service\n+public class RelationshipTrackerConverterService\n+    implements TrackerConverterService<Relationship, org.hisp.dhis.relationship.Relationship>\n+{\n+    private final TrackerPreheatService trackerPreheatService;\n+\n+    private final TrackerConverterService<TrackedEntity, TrackedEntityInstance> trackedEntityTrackerConverterService;\n+\n+    private final TrackerConverterService<Enrollment, ProgramInstance> enrollmentTrackerConverterService;\n+\n+    private final TrackerConverterService<Event, ProgramStageInstance> eventTrackerConverterService;\n+\n+    public RelationshipTrackerConverterService( TrackerPreheatService trackerPreheatService,\n+        TrackerConverterService<Enrollment, ProgramInstance> enrollmentTrackerConverterService,\n+        TrackerConverterService<Event, ProgramStageInstance> eventTrackerConverterService,\n+        TrackerConverterService<TrackedEntity, TrackedEntityInstance> trackedEntityTrackerConverterService )\n+    {\n+        this.trackerPreheatService = trackerPreheatService;\n+        this.enrollmentTrackerConverterService = enrollmentTrackerConverterService;\n+        this.eventTrackerConverterService = eventTrackerConverterService;\n+        this.trackedEntityTrackerConverterService = trackedEntityTrackerConverterService;\n+    }\n+\n+    @Override\n+    @Transactional( readOnly = true )\n+    public Relationship to( org.hisp.dhis.relationship.Relationship relationship )\n+    {\n+        List<Relationship> relationships = to( Collections.singletonList( relationship ) );\n+\n+        if ( relationships.isEmpty() )\n+        {\n+            return null;\n+        }\n+\n+        return relationships.get( 0 );\n+    }\n+\n+    @Override\n+    @Transactional( readOnly = true )\n+    public List<Relationship> to( List<org.hisp.dhis.relationship.Relationship> relationships )\n+    {\n+        return relationships.stream().map( fromRelationship -> {\n+\n+            Relationship toRelationship = new Relationship();\n+            toRelationship.setRelationship( fromRelationship.getUid() );\n+            toRelationship.setBidirectional( fromRelationship.getRelationshipType().isBidirectional() );\n+            toRelationship.setCreated( fromRelationship.getCreated().toString() );\n+            toRelationship.setFrom( convertRelationShipType( fromRelationship.getFrom() ) );\n+            toRelationship.setTo( convertRelationShipType( fromRelationship.getTo() ) );\n+            toRelationship.setLastUpdated( fromRelationship.getLastUpdated().toString() );\n+            toRelationship.setRelationshipName( fromRelationship.getName() );\n+            toRelationship.setRelationshipType( fromRelationship.getRelationshipType().getUid() );\n+\n+            return toRelationship;\n+        } ).collect( Collectors.toList() );\n+    }\n+\n+    private RelationshipItem convertRelationShipType( org.hisp.dhis.relationship.RelationshipItem from )", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg5MzE1Nw=="}, "originalCommit": {"oid": "aeaa928a1f8334a4d8fe5ba8af138c42048d83c1"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDI2MjUyOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/RelationshipTrackerConverterService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNDoyOTowOVrOFpV3RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMzo1NDo0MVrOFp3PfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg5NDE0OA==", "bodyText": "This class converts objects from one type to another, do we need to run the conversion in a database TX? Can't we cache the lookup data and run outside a tx?", "url": "https://github.com/dhis2/dhis2-core/pull/4855#discussion_r378894148", "createdAt": "2020-02-13T14:29:09Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/RelationshipTrackerConverterService.java", "diffHunk": "@@ -0,0 +1,245 @@\n+package org.hisp.dhis.tracker.converter;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.common.CodeGenerator;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.relationship.RelationshipType;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.tracker.TrackerIdentifier;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.domain.Relationship;\n+import org.hisp.dhis.tracker.domain.RelationshipItem;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.hisp.dhis.tracker.preheat.TrackerPreheat;\n+import org.hisp.dhis.tracker.preheat.TrackerPreheatParams;\n+import org.hisp.dhis.tracker.preheat.TrackerPreheatService;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.hisp.dhis.relationship.RelationshipEntity.PROGRAM_INSTANCE;\n+import static org.hisp.dhis.relationship.RelationshipEntity.PROGRAM_STAGE_INSTANCE;\n+import static org.hisp.dhis.relationship.RelationshipEntity.TRACKED_ENTITY_INSTANCE;\n+\n+/**\n+ * @author Enrico Colasante\n+ */\n+@Service\n+public class RelationshipTrackerConverterService\n+    implements TrackerConverterService<Relationship, org.hisp.dhis.relationship.Relationship>\n+{\n+    private final TrackerPreheatService trackerPreheatService;\n+\n+    private final TrackerConverterService<TrackedEntity, TrackedEntityInstance> trackedEntityTrackerConverterService;\n+\n+    private final TrackerConverterService<Enrollment, ProgramInstance> enrollmentTrackerConverterService;\n+\n+    private final TrackerConverterService<Event, ProgramStageInstance> eventTrackerConverterService;\n+\n+    public RelationshipTrackerConverterService( TrackerPreheatService trackerPreheatService,\n+        TrackerConverterService<Enrollment, ProgramInstance> enrollmentTrackerConverterService,\n+        TrackerConverterService<Event, ProgramStageInstance> eventTrackerConverterService,\n+        TrackerConverterService<TrackedEntity, TrackedEntityInstance> trackedEntityTrackerConverterService )\n+    {\n+        this.trackerPreheatService = trackerPreheatService;\n+        this.enrollmentTrackerConverterService = enrollmentTrackerConverterService;\n+        this.eventTrackerConverterService = eventTrackerConverterService;\n+        this.trackedEntityTrackerConverterService = trackedEntityTrackerConverterService;\n+    }\n+\n+    @Override\n+    @Transactional( readOnly = true )\n+    public Relationship to( org.hisp.dhis.relationship.Relationship relationship )\n+    {\n+        List<Relationship> relationships = to( Collections.singletonList( relationship ) );\n+\n+        if ( relationships.isEmpty() )\n+        {\n+            return null;\n+        }\n+\n+        return relationships.get( 0 );\n+    }\n+\n+    @Override\n+    @Transactional( readOnly = true )\n+    public List<Relationship> to( List<org.hisp.dhis.relationship.Relationship> relationships )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aeaa928a1f8334a4d8fe5ba8af138c42048d83c1"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ0MTAyMA==", "bodyText": "Transactional here was completely wrong.\nRemoving it", "url": "https://github.com/dhis2/dhis2-core/pull/4855#discussion_r379441020", "createdAt": "2020-02-14T13:54:41Z", "author": {"login": "enricocolasante"}, "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/RelationshipTrackerConverterService.java", "diffHunk": "@@ -0,0 +1,245 @@\n+package org.hisp.dhis.tracker.converter;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.common.CodeGenerator;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.relationship.RelationshipType;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.tracker.TrackerIdentifier;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.domain.Relationship;\n+import org.hisp.dhis.tracker.domain.RelationshipItem;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.hisp.dhis.tracker.preheat.TrackerPreheat;\n+import org.hisp.dhis.tracker.preheat.TrackerPreheatParams;\n+import org.hisp.dhis.tracker.preheat.TrackerPreheatService;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.hisp.dhis.relationship.RelationshipEntity.PROGRAM_INSTANCE;\n+import static org.hisp.dhis.relationship.RelationshipEntity.PROGRAM_STAGE_INSTANCE;\n+import static org.hisp.dhis.relationship.RelationshipEntity.TRACKED_ENTITY_INSTANCE;\n+\n+/**\n+ * @author Enrico Colasante\n+ */\n+@Service\n+public class RelationshipTrackerConverterService\n+    implements TrackerConverterService<Relationship, org.hisp.dhis.relationship.Relationship>\n+{\n+    private final TrackerPreheatService trackerPreheatService;\n+\n+    private final TrackerConverterService<TrackedEntity, TrackedEntityInstance> trackedEntityTrackerConverterService;\n+\n+    private final TrackerConverterService<Enrollment, ProgramInstance> enrollmentTrackerConverterService;\n+\n+    private final TrackerConverterService<Event, ProgramStageInstance> eventTrackerConverterService;\n+\n+    public RelationshipTrackerConverterService( TrackerPreheatService trackerPreheatService,\n+        TrackerConverterService<Enrollment, ProgramInstance> enrollmentTrackerConverterService,\n+        TrackerConverterService<Event, ProgramStageInstance> eventTrackerConverterService,\n+        TrackerConverterService<TrackedEntity, TrackedEntityInstance> trackedEntityTrackerConverterService )\n+    {\n+        this.trackerPreheatService = trackerPreheatService;\n+        this.enrollmentTrackerConverterService = enrollmentTrackerConverterService;\n+        this.eventTrackerConverterService = eventTrackerConverterService;\n+        this.trackedEntityTrackerConverterService = trackedEntityTrackerConverterService;\n+    }\n+\n+    @Override\n+    @Transactional( readOnly = true )\n+    public Relationship to( org.hisp.dhis.relationship.Relationship relationship )\n+    {\n+        List<Relationship> relationships = to( Collections.singletonList( relationship ) );\n+\n+        if ( relationships.isEmpty() )\n+        {\n+            return null;\n+        }\n+\n+        return relationships.get( 0 );\n+    }\n+\n+    @Override\n+    @Transactional( readOnly = true )\n+    public List<Relationship> to( List<org.hisp.dhis.relationship.Relationship> relationships )", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg5NDE0OA=="}, "originalCommit": {"oid": "aeaa928a1f8334a4d8fe5ba8af138c42048d83c1"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDI3NTMwOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNDozMjoxNVrOFpV-9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMzo1NDoyNFrOFp3O3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg5NjExOQ==", "bodyText": "Lots of flushing :) why can't we delegate the flushing to hibernate?", "url": "https://github.com/dhis2/dhis2-core/pull/4855#discussion_r378896119", "createdAt": "2020-02-13T14:32:15Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java", "diffHunk": "@@ -278,6 +294,49 @@ private TrackerTypeReport handleEvents( Session session, TrackerBundle bundle )\n         return typeReport;\n     }\n \n+    private TrackerTypeReport handleRelationships( Session session, TrackerBundle bundle )\n+    {\n+        List<Relationship> relationships = bundle.getRelationships();\n+        TrackerTypeReport typeReport = new TrackerTypeReport( TrackerType.RELATIONSHIP );\n+\n+        relationships.forEach( o -> bundleHooks.forEach( hook -> hook.preCreate( Relationship.class, o, bundle ) ) );\n+        session.flush();\n+\n+        for ( int idx = 0; idx < relationships.size(); idx++ )\n+        {\n+            Relationship relationship = relationships.get( idx );\n+            org.hisp.dhis.relationship.Relationship toRelationship = relationshipTrackerConverterService\n+                .from( bundle.getPreheat(), relationship );\n+\n+            TrackerObjectReport objectReport = new TrackerObjectReport( TrackerType.EVENT,\n+                toRelationship.getUid(), idx );\n+            typeReport.addObjectReport( objectReport );\n+\n+            Date now = new Date();\n+\n+            if ( bundle.getImportStrategy().isCreate() )\n+            {\n+                toRelationship.setCreated( now );\n+            }\n+\n+            toRelationship.setLastUpdated( now );\n+            toRelationship.setLastUpdatedBy( bundle.getUser() );\n+\n+            session.persist( toRelationship );\n+            typeReport.getStats().incCreated();\n+\n+            if ( FlushMode.OBJECT == bundle.getFlushMode() )\n+            {\n+                session.flush();\n+            }\n+        }\n+\n+        session.flush();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aeaa928a1f8334a4d8fe5ba8af138c42048d83c1"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ0MDg2Mg==", "bodyText": "Removed the flushing", "url": "https://github.com/dhis2/dhis2-core/pull/4855#discussion_r379440862", "createdAt": "2020-02-14T13:54:24Z", "author": {"login": "enricocolasante"}, "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java", "diffHunk": "@@ -278,6 +294,49 @@ private TrackerTypeReport handleEvents( Session session, TrackerBundle bundle )\n         return typeReport;\n     }\n \n+    private TrackerTypeReport handleRelationships( Session session, TrackerBundle bundle )\n+    {\n+        List<Relationship> relationships = bundle.getRelationships();\n+        TrackerTypeReport typeReport = new TrackerTypeReport( TrackerType.RELATIONSHIP );\n+\n+        relationships.forEach( o -> bundleHooks.forEach( hook -> hook.preCreate( Relationship.class, o, bundle ) ) );\n+        session.flush();\n+\n+        for ( int idx = 0; idx < relationships.size(); idx++ )\n+        {\n+            Relationship relationship = relationships.get( idx );\n+            org.hisp.dhis.relationship.Relationship toRelationship = relationshipTrackerConverterService\n+                .from( bundle.getPreheat(), relationship );\n+\n+            TrackerObjectReport objectReport = new TrackerObjectReport( TrackerType.EVENT,\n+                toRelationship.getUid(), idx );\n+            typeReport.addObjectReport( objectReport );\n+\n+            Date now = new Date();\n+\n+            if ( bundle.getImportStrategy().isCreate() )\n+            {\n+                toRelationship.setCreated( now );\n+            }\n+\n+            toRelationship.setLastUpdated( now );\n+            toRelationship.setLastUpdatedBy( bundle.getUser() );\n+\n+            session.persist( toRelationship );\n+            typeReport.getStats().incCreated();\n+\n+            if ( FlushMode.OBJECT == bundle.getFlushMode() )\n+            {\n+                session.flush();\n+            }\n+        }\n+\n+        session.flush();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg5NjExOQ=="}, "originalCommit": {"oid": "aeaa928a1f8334a4d8fe5ba8af138c42048d83c1"}, "originalPosition": 107}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3580, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}