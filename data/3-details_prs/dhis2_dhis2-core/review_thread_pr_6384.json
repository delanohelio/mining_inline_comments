{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyMDQzMDA4", "number": 6384, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwOTo0Mzo0MlrOEtZzXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwOTo1MTozMFrOEtZ_Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MDQ0MTI3OnYy", "diffSide": "LEFT", "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/program/ProgramStageInstanceService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwOTo0Mzo0MlrOHhK7Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwOTo1MDoxOFrOHozf6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU0NDAyMg==", "bodyText": "Can you add the new argument to the list of Javadoc arguments for the method?", "url": "https://github.com/dhis2/dhis2-core/pull/6384#discussion_r504544022", "createdAt": "2020-10-14T09:43:42Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/program/ProgramStageInstanceService.java", "diffHunk": "@@ -170,7 +170,7 @@ ProgramStageInstance createProgramStageInstance( ProgramInstance programInstance\n      * @param singleValue specifies whether the update is a single value update\r\n      */\r\n     void auditDataValuesChangesAndHandleFileDataValues( Set<EventDataValue> newDataValues, Set<EventDataValue> updatedDataValues,Set<EventDataValue> removedDataValues,\r\n-        Map<String, DataElement> dataElementsCache, ProgramStageInstance programStageInstance, boolean singleValue );\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d67c6f1d7757f6712118d94e203b19ddfdb55475"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU0ODg0MQ==", "bodyText": "yes, just added.", "url": "https://github.com/dhis2/dhis2-core/pull/6384#discussion_r512548841", "createdAt": "2020-10-27T09:50:18Z", "author": {"login": "abyot"}, "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/program/ProgramStageInstanceService.java", "diffHunk": "@@ -170,7 +170,7 @@ ProgramStageInstance createProgramStageInstance( ProgramInstance programInstance\n      * @param singleValue specifies whether the update is a single value update\r\n      */\r\n     void auditDataValuesChangesAndHandleFileDataValues( Set<EventDataValue> newDataValues, Set<EventDataValue> updatedDataValues,Set<EventDataValue> removedDataValues,\r\n-        Map<String, DataElement> dataElementsCache, ProgramStageInstance programStageInstance, boolean singleValue );\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU0NDAyMg=="}, "originalCommit": {"oid": "d67c6f1d7757f6712118d94e203b19ddfdb55475"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MDQ1MTUwOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/program/DefaultProgramStageInstanceService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwOTo0NjowNFrOHhLBOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwOTo1MDowMFrOHozfCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU0NTU5NQ==", "bodyText": "minor: can you format to respect the 80 chars line length:\nSet<EventDataValue> nonAccessibleDataValues = programStageInstance.getEventDataValues().stream()\n    .filter( dv -> nonAccessibleDataElements.contains( dv.getDataElement() ) )\n    .collect( Collectors.toSet() );", "url": "https://github.com/dhis2/dhis2-core/pull/6384#discussion_r504545595", "createdAt": "2020-10-14T09:46:04Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/program/DefaultProgramStageInstanceService.java", "diffHunk": "@@ -310,7 +311,9 @@ public void auditDataValuesChangesAndHandleFileDataValues( Set<EventDataValue> n\n         }\r\n         else\r\n         {\r\n-            programStageInstance.setEventDataValues( updatedOrNewDataValues );\r\n+            Set<EventDataValue> nonAccessibleDataValues = programStageInstance.getEventDataValues().stream().filter( dv -> nonAccessibleDataElements.contains( dv.getDataElement() ) ).collect(  Collectors.toSet() );\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d67c6f1d7757f6712118d94e203b19ddfdb55475"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU0ODYxNg==", "bodyText": "yes, applied the style.", "url": "https://github.com/dhis2/dhis2-core/pull/6384#discussion_r512548616", "createdAt": "2020-10-27T09:50:00Z", "author": {"login": "abyot"}, "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/program/DefaultProgramStageInstanceService.java", "diffHunk": "@@ -310,7 +311,9 @@ public void auditDataValuesChangesAndHandleFileDataValues( Set<EventDataValue> n\n         }\r\n         else\r\n         {\r\n-            programStageInstance.setEventDataValues( updatedOrNewDataValues );\r\n+            Set<EventDataValue> nonAccessibleDataValues = programStageInstance.getEventDataValues().stream().filter( dv -> nonAccessibleDataElements.contains( dv.getDataElement() ) ).collect(  Collectors.toSet() );\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU0NTU5NQ=="}, "originalCommit": {"oid": "d67c6f1d7757f6712118d94e203b19ddfdb55475"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MDQ2MTUyOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/eventdatavalue/DefaultEventDataValueService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwOTo0ODo0NlrOHhLHvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwOTo0OTo0OFrOHozeew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU0NzI2Mw==", "bodyText": "minor: can you reformat to respect 80 chars length\nprogramStageInstanceService.auditDataValuesChangesAndHandleFileDataValues( newDataValues, updatedDataValues,\n    removedDataValuesDueToEmptyValue, dataElementsCache, nonAccessibleDataElements, programStageInstance,\n    singleValue )", "url": "https://github.com/dhis2/dhis2-core/pull/6384#discussion_r504547263", "createdAt": "2020-10-14T09:48:46Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/eventdatavalue/DefaultEventDataValueService.java", "diffHunk": "@@ -116,16 +119,32 @@ public void processDataValues( ProgramStageInstance programStageInstance, Event\n             {\n                 // This can happen if a wrong data element identifier is provided\n                 importSummary.getConflicts().add( new ImportConflict( \"dataElement\", dataValue.getDataElement() + \" is not a valid data element\" ) );\n+                continue;\n             }\n-            else if ( validateDataValue( programStageInstance, importOptions.getUser(), dataElement, dataValue.getValue(), importSummary )\n-                && !importOptions.isDryRun() )\n+\n+            if ( validateDataValue( programStageInstance, importOptions.getUser(), dataElement, dataValue.getValue(), importSummary ) )\n             {\n+                accessibleDataElements.add( dataValue.getDataElement() );\n                 prepareDataValueForStorage( dataElementValueMap, dataValue, dataElement, newDataValues, updatedDataValues,\n                     removedDataValuesDueToEmptyValue, storedBy );\n             }\n+            else\n+            {\n+                nonAccessibleDataElements.add( dataValue.getDataElement() );\n+            }\n         }\n \n-        programStageInstanceService.auditDataValuesChangesAndHandleFileDataValues( newDataValues, updatedDataValues, removedDataValuesDueToEmptyValue, dataElementsCache, programStageInstance, singleValue );\n+        Set<String> checkedDataElements = Sets.union( accessibleDataElements, nonAccessibleDataElements );\n+\n+        for ( DataElement dataElement : programStageInstance.getProgramStage().getDataElements() )\n+        {\n+            if ( !checkedDataElements.contains( dataElement.getUid() ) &&  !trackerAccessManager.canWrite( importOptions.getUser(), programStageInstance, dataElement, true ).isEmpty() )\n+            {\n+                nonAccessibleDataElements.add( dataElement.getUid() );\n+            }\n+        }\n+\n+        programStageInstanceService.auditDataValuesChangesAndHandleFileDataValues( newDataValues, updatedDataValues, removedDataValuesDueToEmptyValue, dataElementsCache, nonAccessibleDataElements, programStageInstance, singleValue );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d67c6f1d7757f6712118d94e203b19ddfdb55475"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU0ODQ3NQ==", "bodyText": "done.", "url": "https://github.com/dhis2/dhis2-core/pull/6384#discussion_r512548475", "createdAt": "2020-10-27T09:49:48Z", "author": {"login": "abyot"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/eventdatavalue/DefaultEventDataValueService.java", "diffHunk": "@@ -116,16 +119,32 @@ public void processDataValues( ProgramStageInstance programStageInstance, Event\n             {\n                 // This can happen if a wrong data element identifier is provided\n                 importSummary.getConflicts().add( new ImportConflict( \"dataElement\", dataValue.getDataElement() + \" is not a valid data element\" ) );\n+                continue;\n             }\n-            else if ( validateDataValue( programStageInstance, importOptions.getUser(), dataElement, dataValue.getValue(), importSummary )\n-                && !importOptions.isDryRun() )\n+\n+            if ( validateDataValue( programStageInstance, importOptions.getUser(), dataElement, dataValue.getValue(), importSummary ) )\n             {\n+                accessibleDataElements.add( dataValue.getDataElement() );\n                 prepareDataValueForStorage( dataElementValueMap, dataValue, dataElement, newDataValues, updatedDataValues,\n                     removedDataValuesDueToEmptyValue, storedBy );\n             }\n+            else\n+            {\n+                nonAccessibleDataElements.add( dataValue.getDataElement() );\n+            }\n         }\n \n-        programStageInstanceService.auditDataValuesChangesAndHandleFileDataValues( newDataValues, updatedDataValues, removedDataValuesDueToEmptyValue, dataElementsCache, programStageInstance, singleValue );\n+        Set<String> checkedDataElements = Sets.union( accessibleDataElements, nonAccessibleDataElements );\n+\n+        for ( DataElement dataElement : programStageInstance.getProgramStage().getDataElements() )\n+        {\n+            if ( !checkedDataElements.contains( dataElement.getUid() ) &&  !trackerAccessManager.canWrite( importOptions.getUser(), programStageInstance, dataElement, true ).isEmpty() )\n+            {\n+                nonAccessibleDataElements.add( dataElement.getUid() );\n+            }\n+        }\n+\n+        programStageInstanceService.auditDataValuesChangesAndHandleFileDataValues( newDataValues, updatedDataValues, removedDataValuesDueToEmptyValue, dataElementsCache, nonAccessibleDataElements, programStageInstance, singleValue );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU0NzI2Mw=="}, "originalCommit": {"oid": "d67c6f1d7757f6712118d94e203b19ddfdb55475"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MDQ3MTc5OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/eventdatavalue/DefaultEventDataValueService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwOTo1MTozMFrOHhLOXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwNjoyMDoxN1rOHiooIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU0ODk1OQ==", "bodyText": "the call to trackerAccessManager.canWrite( importOptions.getUser(), programStageInstance, dataElement, true ) is taking place also at line 125 (inside validateDataValue). I understand that this new block of code (from line 137 to 145) is required for the auditing. Can we somehow avoid the call to this canWrite method a second time?", "url": "https://github.com/dhis2/dhis2-core/pull/6384#discussion_r504548959", "createdAt": "2020-10-14T09:51:30Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/eventdatavalue/DefaultEventDataValueService.java", "diffHunk": "@@ -116,16 +119,32 @@ public void processDataValues( ProgramStageInstance programStageInstance, Event\n             {\n                 // This can happen if a wrong data element identifier is provided\n                 importSummary.getConflicts().add( new ImportConflict( \"dataElement\", dataValue.getDataElement() + \" is not a valid data element\" ) );\n+                continue;\n             }\n-            else if ( validateDataValue( programStageInstance, importOptions.getUser(), dataElement, dataValue.getValue(), importSummary )\n-                && !importOptions.isDryRun() )\n+\n+            if ( validateDataValue( programStageInstance, importOptions.getUser(), dataElement, dataValue.getValue(), importSummary ) )\n             {\n+                accessibleDataElements.add( dataValue.getDataElement() );\n                 prepareDataValueForStorage( dataElementValueMap, dataValue, dataElement, newDataValues, updatedDataValues,\n                     removedDataValuesDueToEmptyValue, storedBy );\n             }\n+            else\n+            {\n+                nonAccessibleDataElements.add( dataValue.getDataElement() );\n+            }\n         }\n \n-        programStageInstanceService.auditDataValuesChangesAndHandleFileDataValues( newDataValues, updatedDataValues, removedDataValuesDueToEmptyValue, dataElementsCache, programStageInstance, singleValue );\n+        Set<String> checkedDataElements = Sets.union( accessibleDataElements, nonAccessibleDataElements );\n+\n+        for ( DataElement dataElement : programStageInstance.getProgramStage().getDataElements() )\n+        {\n+            if ( !checkedDataElements.contains( dataElement.getUid() ) &&  !trackerAccessManager.canWrite( importOptions.getUser(), programStageInstance, dataElement, true ).isEmpty() )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d67c6f1d7757f6712118d94e203b19ddfdb55475"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA3OTI2NQ==", "bodyText": "we are not checking canWritefor the same object. otherwise we need to refactor the entire class, because the way it is written today focuses only on the incoming payload. what we are checking the second time (at least in the ACL) is those not in the payload.", "url": "https://github.com/dhis2/dhis2-core/pull/6384#discussion_r506079265", "createdAt": "2020-10-16T06:20:17Z", "author": {"login": "abyot"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/eventdatavalue/DefaultEventDataValueService.java", "diffHunk": "@@ -116,16 +119,32 @@ public void processDataValues( ProgramStageInstance programStageInstance, Event\n             {\n                 // This can happen if a wrong data element identifier is provided\n                 importSummary.getConflicts().add( new ImportConflict( \"dataElement\", dataValue.getDataElement() + \" is not a valid data element\" ) );\n+                continue;\n             }\n-            else if ( validateDataValue( programStageInstance, importOptions.getUser(), dataElement, dataValue.getValue(), importSummary )\n-                && !importOptions.isDryRun() )\n+\n+            if ( validateDataValue( programStageInstance, importOptions.getUser(), dataElement, dataValue.getValue(), importSummary ) )\n             {\n+                accessibleDataElements.add( dataValue.getDataElement() );\n                 prepareDataValueForStorage( dataElementValueMap, dataValue, dataElement, newDataValues, updatedDataValues,\n                     removedDataValuesDueToEmptyValue, storedBy );\n             }\n+            else\n+            {\n+                nonAccessibleDataElements.add( dataValue.getDataElement() );\n+            }\n         }\n \n-        programStageInstanceService.auditDataValuesChangesAndHandleFileDataValues( newDataValues, updatedDataValues, removedDataValuesDueToEmptyValue, dataElementsCache, programStageInstance, singleValue );\n+        Set<String> checkedDataElements = Sets.union( accessibleDataElements, nonAccessibleDataElements );\n+\n+        for ( DataElement dataElement : programStageInstance.getProgramStage().getDataElements() )\n+        {\n+            if ( !checkedDataElements.contains( dataElement.getUid() ) &&  !trackerAccessManager.canWrite( importOptions.getUser(), programStageInstance, dataElement, true ).isEmpty() )", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU0ODk1OQ=="}, "originalCommit": {"oid": "d67c6f1d7757f6712118d94e203b19ddfdb55475"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3811, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}