{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0MDExMTE0", "number": 5820, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwOTo1MTozMVrOESvSNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwOTo1MTozMVrOESvSNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MDg0NTM0OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-support/dhis-support-db-migration/src/main/java/org/hisp/dhis/db/migration/v35/V2_35_11__Visualization_Move_Columns_To_Filters.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwOTo1MTozMVrOG4FTig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNTo1MzozMlrOG4_CyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ2MDM2Mg==", "bodyText": "typo in method name, \"Filer\" not \"Filter\"", "url": "https://github.com/dhis2/dhis2-core/pull/5820#discussion_r461460362", "createdAt": "2020-07-28T09:51:31Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-support/dhis-support-db-migration/src/main/java/org/hisp/dhis/db/migration/v35/V2_35_11__Visualization_Move_Columns_To_Filters.java", "diffHunk": "@@ -0,0 +1,154 @@\n+package org.hisp.dhis.db.migration.v35;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+\n+import org.flywaydb.core.api.migration.BaseJavaMigration;\n+import org.flywaydb.core.api.migration.Context;\n+\n+public class V2_35_11__Visualization_Move_Columns_To_Filters extends BaseJavaMigration\n+{\n+    @Override\n+    public void migrate( final Context context )\n+        throws SQLException\n+    {\n+        // Select all Visualizations that matches \"type\" equals 'YEAR_OVER_YEAR_COLUMN'\n+        // or 'YEAR_OVER_YEAR_LINE' and \"dimension\" equals 'dx'.\n+        final String sql = \"SELECT visualizationid, dimension, sort_order \"\n+            + \"FROM visualization_columns WHERE visualizationid IN \"\n+            + \"(SELECT v.visualizationid FROM visualization v \"\n+            + \"WHERE UPPER(COALESCE(v.type, '')) = 'YEAR_OVER_YEAR_COLUMN' \"\n+            + \"OR UPPER(COALESCE(v.type, '')) = 'YEAR_OVER_YEAR_LINE') AND LOWER(COALESCE(dimension)) = 'dx'\";\n+\n+        try (final Statement stmt = context.getConnection().createStatement();\n+            final ResultSet rs = stmt.executeQuery( sql ))\n+        {\n+            while ( rs.next() )\n+            {\n+                final long visualizationId = rs.getLong( \"visualizationid\" );\n+                final String dimension = rs.getString( \"dimension\" );\n+                final int sortOrder = rs.getInt( \"sort_order\" );\n+\n+                // Get the greater sort_order, in filters table, for the current Visualization\n+                // id.\n+                int greatVisualizationSortOrder = greaterSortOrderInFiltersTableFor( context,\n+                    rs.getLong( \"visualizationid\" ) );\n+\n+                // Increment the sort order so it can be inserted in the correct position.\n+                greatVisualizationSortOrder++;\n+\n+                // Before inserting the current column into filters table, check if this column\n+                // isn't already present in filters table.\n+                if ( !filtersTableContains( context, visualizationId, dimension ) )\n+                {\n+                    // Insert the current column into filters table.\n+                    insertIntoFilerTable( context, visualizationId, dimension, greatVisualizationSortOrder );\n+\n+                    // Once the columns is copied into filters, remove it from columns table. The\n+                    // \"moving\" process is concluded for this visualization column.\n+                    deleteFromColumnsTable( context, visualizationId, dimension, sortOrder );\n+                }\n+            }\n+        }\n+    }\n+\n+    private int greaterSortOrderInFiltersTableFor( final Context context, final long visualizationId )\n+        throws SQLException\n+    {\n+        final String sql = \"SELECT MAX(sort_order) AS greater_sort_order FROM visualization_filters WHERE visualizationid = ?\";\n+\n+        try (final PreparedStatement ps = context.getConnection().prepareStatement( sql ))\n+        {\n+            ps.setLong( 1, visualizationId );\n+\n+            try (final ResultSet rs = ps.executeQuery())\n+            {\n+                rs.next();\n+                return rs.getInt( \"greater_sort_order\" );\n+            }\n+        }\n+    }\n+\n+    private boolean filtersTableContains( final Context context, final long visualizationId, final String dimension )\n+        throws SQLException\n+    {\n+        final String sql = \"SELECT count(visualizationid) AS vis_counter FROM visualization_filters \"\n+            + \"WHERE visualizationid = ? AND LOWER(dimension) = LOWER(?)\";\n+\n+        try (final PreparedStatement ps = context.getConnection().prepareStatement( sql ))\n+        {\n+            ps.setLong( 1, visualizationId );\n+            ps.setString( 2, dimension );\n+\n+            try (final ResultSet rs = ps.executeQuery())\n+            {\n+                rs.next();\n+                return rs.getInt( \"vis_counter\" ) > 0;\n+            }\n+        }\n+    }\n+\n+    private void insertIntoFilerTable( final Context context, final long visualizationId, final String dimension,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcb89088b60f1c4dea878269c3449a46dada068d"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwNjM0NQ==", "bodyText": "Done", "url": "https://github.com/dhis2/dhis2-core/pull/5820#discussion_r462406345", "createdAt": "2020-07-29T15:53:32Z", "author": {"login": "maikelarabori"}, "path": "dhis-2/dhis-support/dhis-support-db-migration/src/main/java/org/hisp/dhis/db/migration/v35/V2_35_11__Visualization_Move_Columns_To_Filters.java", "diffHunk": "@@ -0,0 +1,154 @@\n+package org.hisp.dhis.db.migration.v35;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+\n+import org.flywaydb.core.api.migration.BaseJavaMigration;\n+import org.flywaydb.core.api.migration.Context;\n+\n+public class V2_35_11__Visualization_Move_Columns_To_Filters extends BaseJavaMigration\n+{\n+    @Override\n+    public void migrate( final Context context )\n+        throws SQLException\n+    {\n+        // Select all Visualizations that matches \"type\" equals 'YEAR_OVER_YEAR_COLUMN'\n+        // or 'YEAR_OVER_YEAR_LINE' and \"dimension\" equals 'dx'.\n+        final String sql = \"SELECT visualizationid, dimension, sort_order \"\n+            + \"FROM visualization_columns WHERE visualizationid IN \"\n+            + \"(SELECT v.visualizationid FROM visualization v \"\n+            + \"WHERE UPPER(COALESCE(v.type, '')) = 'YEAR_OVER_YEAR_COLUMN' \"\n+            + \"OR UPPER(COALESCE(v.type, '')) = 'YEAR_OVER_YEAR_LINE') AND LOWER(COALESCE(dimension)) = 'dx'\";\n+\n+        try (final Statement stmt = context.getConnection().createStatement();\n+            final ResultSet rs = stmt.executeQuery( sql ))\n+        {\n+            while ( rs.next() )\n+            {\n+                final long visualizationId = rs.getLong( \"visualizationid\" );\n+                final String dimension = rs.getString( \"dimension\" );\n+                final int sortOrder = rs.getInt( \"sort_order\" );\n+\n+                // Get the greater sort_order, in filters table, for the current Visualization\n+                // id.\n+                int greatVisualizationSortOrder = greaterSortOrderInFiltersTableFor( context,\n+                    rs.getLong( \"visualizationid\" ) );\n+\n+                // Increment the sort order so it can be inserted in the correct position.\n+                greatVisualizationSortOrder++;\n+\n+                // Before inserting the current column into filters table, check if this column\n+                // isn't already present in filters table.\n+                if ( !filtersTableContains( context, visualizationId, dimension ) )\n+                {\n+                    // Insert the current column into filters table.\n+                    insertIntoFilerTable( context, visualizationId, dimension, greatVisualizationSortOrder );\n+\n+                    // Once the columns is copied into filters, remove it from columns table. The\n+                    // \"moving\" process is concluded for this visualization column.\n+                    deleteFromColumnsTable( context, visualizationId, dimension, sortOrder );\n+                }\n+            }\n+        }\n+    }\n+\n+    private int greaterSortOrderInFiltersTableFor( final Context context, final long visualizationId )\n+        throws SQLException\n+    {\n+        final String sql = \"SELECT MAX(sort_order) AS greater_sort_order FROM visualization_filters WHERE visualizationid = ?\";\n+\n+        try (final PreparedStatement ps = context.getConnection().prepareStatement( sql ))\n+        {\n+            ps.setLong( 1, visualizationId );\n+\n+            try (final ResultSet rs = ps.executeQuery())\n+            {\n+                rs.next();\n+                return rs.getInt( \"greater_sort_order\" );\n+            }\n+        }\n+    }\n+\n+    private boolean filtersTableContains( final Context context, final long visualizationId, final String dimension )\n+        throws SQLException\n+    {\n+        final String sql = \"SELECT count(visualizationid) AS vis_counter FROM visualization_filters \"\n+            + \"WHERE visualizationid = ? AND LOWER(dimension) = LOWER(?)\";\n+\n+        try (final PreparedStatement ps = context.getConnection().prepareStatement( sql ))\n+        {\n+            ps.setLong( 1, visualizationId );\n+            ps.setString( 2, dimension );\n+\n+            try (final ResultSet rs = ps.executeQuery())\n+            {\n+                rs.next();\n+                return rs.getInt( \"vis_counter\" ) > 0;\n+            }\n+        }\n+    }\n+\n+    private void insertIntoFilerTable( final Context context, final long visualizationId, final String dimension,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ2MDM2Mg=="}, "originalCommit": {"oid": "dcb89088b60f1c4dea878269c3449a46dada068d"}, "originalPosition": 121}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3992, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}