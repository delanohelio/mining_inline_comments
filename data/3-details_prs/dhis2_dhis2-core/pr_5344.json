{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxMzg2ODA4", "number": 5344, "title": "fix: Expire user's active sessions when password is changed", "bodyText": "When an admin changes a user's password the user's active sessions should\nbe expired and the user forced to login again with the new password.\nIssue: [DHIS2-8570]\nSigned-off-by: Morten Svanaes msvanaes@dhis2.org\nI also took the liberty to refactor the update user method.\nThe xml and json version was 99.9% like so it was hard to resist not fixing that.", "createdAt": "2020-04-09T12:09:05Z", "url": "https://github.com/dhis2/dhis2-core/pull/5344", "merged": true, "mergeCommit": {"oid": "bd3a29fc536951262bd0494680dd1f8ad0460a09"}, "closed": true, "closedAt": "2020-04-14T14:36:12Z", "author": {"login": "netroms"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcV7VpUAH2gAyNDAxMzg2ODA4OjEyNWQxMTM0M2UyMjYwNjcyYWE1Yjc5OTJlMWVmZTIxMWZlNmY5NWU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcXj-rqgFqTM5Mjk1NTA5NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "125d11343e2260672aa5b7992e1efe211fe6f95e", "author": {"user": {"login": "netroms", "name": null}}, "url": "https://github.com/dhis2/dhis2-core/commit/125d11343e2260672aa5b7992e1efe211fe6f95e", "committedDate": "2020-04-09T12:06:32Z", "message": "fix: Expire user's active sessions when password is changed\n\nWhen an admin changes a user's password the user's active sessions should\nbe expired and the user forced to login again with the new password.\n\nIssue: [DHIS2-8570]\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwNzM1MTcy", "url": "https://github.com/dhis2/dhis2-core/pull/5344#pullrequestreview-390735172", "createdAt": "2020-04-09T12:10:47Z", "commit": {"oid": "125d11343e2260672aa5b7992e1efe211fe6f95e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMjoxMDo0N1rOGDV_EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMjoxMDo0N1rOGDV_EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE1OTEyMA==", "bodyText": "If anyone have any suggestions or comments that would be nice, I would very much like this to not be allowed i.e. currentUser == NULL > cast exception", "url": "https://github.com/dhis2/dhis2-core/pull/5344#discussion_r406159120", "createdAt": "2020-04-09T12:10:47Z", "author": {"login": "netroms"}, "path": "dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/user/UserController.java", "diffHunk": "@@ -445,66 +450,39 @@ public void disableUser( @PathVariable(\"uid\") String uid )\n     @RequestMapping( value = \"/{uid}\", method = RequestMethod.PUT, consumes = { \"application/xml\", \"text/xml\" } )\n     public void putXmlObject( @PathVariable( \"uid\" ) String pvUid, HttpServletRequest request, HttpServletResponse response ) throws Exception\n     {\n-        List<User> users = getEntity( pvUid, NO_WEB_OPTIONS );\n-\n-        if ( users.isEmpty() )\n-        {\n-            throw new WebMessageException( WebMessageUtils.conflict( getEntityName() + \" does not exist: \" + pvUid ) );\n-        }\n-\n-        User currentUser = currentUserService.getCurrentUser();\n-\n-        if ( !aclService.canUpdate( currentUser, users.get( 0 ) ) )\n-        {\n-            throw new UpdateAccessDeniedException( \"You don't have the proper permissions to update this user.\" );\n-        }\n-\n-        // force initialization of all authorities of current user in order to prevent cases where user must be reloaded later\n-        // (in case it gets detached)\n-        if ( currentUser != null )\n-        {\n-            currentUser.getUserCredentials().getAllAuthorities();\n-        }\n-\n         User parsed = renderService.fromXml( request.getInputStream(), getEntityClass() );\n-        parsed.setUid( pvUid );\n-\n-        parsed = mergeLastLoginAttribute( users.get( 0 ), parsed );\n \n-        if ( !userService.canAddOrUpdateUser( IdentifiableObjectUtils.getUids( parsed.getGroups() ), currentUser )\n-            || !currentUser.getUserCredentials().canModifyUser( users.get( 0 ).getUserCredentials() ) )\n-        {\n-            throw new WebMessageException( WebMessageUtils.conflict( \"You must have permissions to create user, or ability to manage at least one user group for the user.\" ) );\n-        }\n-\n-\n-        MetadataImportParams params = importService.getParamsFromMap( contextService.getParameterValuesMap() );\n-        params.setImportReportMode( ImportReportMode.FULL );\n-        params.setImportStrategy( ImportStrategy.UPDATE );\n-        params.addObject( parsed );\n-\n-        ImportReport importReport = importService.importMetadata( params );\n-\n-        updateUserGroups( importReport, pvUid, parsed, currentUser );\n+        ImportReport importReport = updateUser( pvUid, parsed );\n \n         response.setContentType( \"application/xml\" );\n-\n         renderService.toXml( response.getOutputStream(), importReport );\n     }\n \n     @Override\n     @RequestMapping( value = \"/{uid}\", method = RequestMethod.PUT, consumes = \"application/json\" )\n     public void putJsonObject( @PathVariable( \"uid\" ) String pvUid, HttpServletRequest request, HttpServletResponse response ) throws Exception\n     {\n-        List<User> users = getEntity( pvUid, NO_WEB_OPTIONS );\n+        User parsed = renderService.fromJson( request.getInputStream(), getEntityClass() );\n+\n+        ImportReport importReport = updateUser( pvUid, parsed );\n+\n+        response.setContentType( \"application/json\" );\n+        renderService.toJson( response.getOutputStream(), importReport );\n+    }\n+\n+    protected ImportReport updateUser( String userUid, User parsedUserObject )\n+        throws WebMessageException\n+    {\n+        List<User> users = getEntity( userUid, NO_WEB_OPTIONS );\n \n         if ( users.isEmpty() )\n         {\n-            throw new WebMessageException( WebMessageUtils.conflict( getEntityName() + \" does not exist: \" + pvUid ) );\n+            throw new WebMessageException(\n+                WebMessageUtils.conflict( getEntityName() + \" does not exist: \" + userUid ) );\n         }\n \n         User currentUser = currentUserService.getCurrentUser();\n-\n+        // TODO: Can we disallow currentUser == NULL ?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "125d11343e2260672aa5b7992e1efe211fe6f95e"}, "originalPosition": 93}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwNzM3MDkz", "url": "https://github.com/dhis2/dhis2-core/pull/5344#pullrequestreview-390737093", "createdAt": "2020-04-09T12:13:47Z", "commit": {"oid": "125d11343e2260672aa5b7992e1efe211fe6f95e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMjoxMzo0N1rOGDWFcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMjoxMzo0N1rOGDWFcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE2MDc1Mg==", "bodyText": "Here again related to currentUser == null. But here with a twist currentUser == input.user then reset current user, can someone please explain how this will help?", "url": "https://github.com/dhis2/dhis2-core/pull/5344#discussion_r406160752", "createdAt": "2020-04-09T12:13:47Z", "author": {"login": "netroms"}, "path": "dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/user/UserController.java", "diffHunk": "@@ -517,45 +495,57 @@ public void putJsonObject( @PathVariable( \"uid\" ) String pvUid, HttpServletReque\n             currentUser.getUserCredentials().getAllAuthorities();\n         }\n \n-        User parsed = renderService.fromJson( request.getInputStream(), getEntityClass() );\n-        parsed.setUid( pvUid );\n+        parsedUserObject.setUid( userUid );\n+        parsedUserObject = mergeLastLoginAttribute( users.get( 0 ), parsedUserObject );\n+\n+        boolean isPasswordChangeAttempt =\n+            parsedUserObject.getUserCredentials() != null &&\n+                parsedUserObject.getUserCredentials().getPassword() != null;\n \n-        parsed = mergeLastLoginAttribute( users.get( 0 ), parsed );\n+        List<String> groupsUids = IdentifiableObjectUtils.getUids( parsedUserObject.getGroups() );\n \n-        if ( !userService.canAddOrUpdateUser( IdentifiableObjectUtils.getUids( parsed.getGroups() ), currentUser )\n+        if ( !userService.canAddOrUpdateUser( groupsUids, currentUser )\n             || !currentUser.getUserCredentials().canModifyUser( users.get( 0 ).getUserCredentials() ) )\n         {\n-            throw new WebMessageException( WebMessageUtils.conflict( \"You must have permissions to create user, or ability to manage at least one user group for the user.\" ) );\n+            throw new WebMessageException( WebMessageUtils.conflict(\n+                \"You must have permissions to create user, \" +\n+                    \"or ability to manage at least one user group for the user.\" ) );\n         }\n \n         MetadataImportParams params = importService.getParamsFromMap( contextService.getParameterValuesMap() );\n         params.setImportReportMode( ImportReportMode.FULL );\n         params.setImportStrategy( ImportStrategy.UPDATE );\n-        params.addObject( parsed );\n+        params.addObject( parsedUserObject );\n \n         ImportReport importReport = importService.importMetadata( params );\n \n-        updateUserGroups( importReport, pvUid, parsed, currentUser );\n-\n-        response.setContentType( \"application/json\" );\n-\n-        renderService.toJson( response.getOutputStream(), importReport );\n-    }\n-\n-    protected void updateUserGroups( ImportReport importReport, String pvUid, User parsed, User currentUser )\n-    {\n         if ( importReport.getStatus() == Status.OK && importReport.getStats().getUpdated() == 1 )\n         {\n-            User user = userService.getUser( pvUid );\n+            updateUserGroups( userUid, parsedUserObject, currentUser );\n \n-            // current user may have been changed and detached and must become managed again\n-            if ( currentUser != null && currentUser.getId() == user.getId() )\n+            // If it was a pw change attempt (input.pw != null) and update was success we assume password has changed...\n+            // We chose to expire the special case if password is set to the same. i.e. no before & after equals pw check\n+            if ( isPasswordChangeAttempt )\n             {\n-                currentUser = currentUserService.getCurrentUser();\n+                userService.expireActiveSessions( parsedUserObject.getUserCredentials() );\n             }\n+        }\n \n-            userGroupService.updateUserGroups( user, IdentifiableObjectUtils.getUids( parsed.getGroups() ), currentUser );\n+        return importReport;\n+    }\n+\n+    protected void updateUserGroups( String pvUid, User parsed, User currentUser )\n+    {\n+        User user = userService.getUser( pvUid );\n+\n+        // current user may have been changed and detached and must become managed again\n+        // TODO: what is this doing? I don't understand how this is possible.\n+        if ( currentUser != null && currentUser.getId() == user.getId() )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "125d11343e2260672aa5b7992e1efe211fe6f95e"}, "originalPosition": 166}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyOTM2Njkx", "url": "https://github.com/dhis2/dhis2-core/pull/5344#pullrequestreview-392936691", "createdAt": "2020-04-14T13:40:40Z", "commit": {"oid": "125d11343e2260672aa5b7992e1efe211fe6f95e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyOTU1MDk0", "url": "https://github.com/dhis2/dhis2-core/pull/5344#pullrequestreview-392955094", "createdAt": "2020-04-14T13:59:51Z", "commit": {"oid": "125d11343e2260672aa5b7992e1efe211fe6f95e"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMzo1OTo1MlrOGFQCjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMzo1OTo1MlrOGFQCjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE1ODg2MQ==", "bodyText": "As long as the thread has a bound security context (as it always should have, unless using mocking mvc test I guess), it should never be null.. so feel free to throw an exception if it actually is null", "url": "https://github.com/dhis2/dhis2-core/pull/5344#discussion_r408158861", "createdAt": "2020-04-14T13:59:52Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/user/UserController.java", "diffHunk": "@@ -445,66 +450,39 @@ public void disableUser( @PathVariable(\"uid\") String uid )\n     @RequestMapping( value = \"/{uid}\", method = RequestMethod.PUT, consumes = { \"application/xml\", \"text/xml\" } )\n     public void putXmlObject( @PathVariable( \"uid\" ) String pvUid, HttpServletRequest request, HttpServletResponse response ) throws Exception\n     {\n-        List<User> users = getEntity( pvUid, NO_WEB_OPTIONS );\n-\n-        if ( users.isEmpty() )\n-        {\n-            throw new WebMessageException( WebMessageUtils.conflict( getEntityName() + \" does not exist: \" + pvUid ) );\n-        }\n-\n-        User currentUser = currentUserService.getCurrentUser();\n-\n-        if ( !aclService.canUpdate( currentUser, users.get( 0 ) ) )\n-        {\n-            throw new UpdateAccessDeniedException( \"You don't have the proper permissions to update this user.\" );\n-        }\n-\n-        // force initialization of all authorities of current user in order to prevent cases where user must be reloaded later\n-        // (in case it gets detached)\n-        if ( currentUser != null )\n-        {\n-            currentUser.getUserCredentials().getAllAuthorities();\n-        }\n-\n         User parsed = renderService.fromXml( request.getInputStream(), getEntityClass() );\n-        parsed.setUid( pvUid );\n-\n-        parsed = mergeLastLoginAttribute( users.get( 0 ), parsed );\n \n-        if ( !userService.canAddOrUpdateUser( IdentifiableObjectUtils.getUids( parsed.getGroups() ), currentUser )\n-            || !currentUser.getUserCredentials().canModifyUser( users.get( 0 ).getUserCredentials() ) )\n-        {\n-            throw new WebMessageException( WebMessageUtils.conflict( \"You must have permissions to create user, or ability to manage at least one user group for the user.\" ) );\n-        }\n-\n-\n-        MetadataImportParams params = importService.getParamsFromMap( contextService.getParameterValuesMap() );\n-        params.setImportReportMode( ImportReportMode.FULL );\n-        params.setImportStrategy( ImportStrategy.UPDATE );\n-        params.addObject( parsed );\n-\n-        ImportReport importReport = importService.importMetadata( params );\n-\n-        updateUserGroups( importReport, pvUid, parsed, currentUser );\n+        ImportReport importReport = updateUser( pvUid, parsed );\n \n         response.setContentType( \"application/xml\" );\n-\n         renderService.toXml( response.getOutputStream(), importReport );\n     }\n \n     @Override\n     @RequestMapping( value = \"/{uid}\", method = RequestMethod.PUT, consumes = \"application/json\" )\n     public void putJsonObject( @PathVariable( \"uid\" ) String pvUid, HttpServletRequest request, HttpServletResponse response ) throws Exception\n     {\n-        List<User> users = getEntity( pvUid, NO_WEB_OPTIONS );\n+        User parsed = renderService.fromJson( request.getInputStream(), getEntityClass() );\n+\n+        ImportReport importReport = updateUser( pvUid, parsed );\n+\n+        response.setContentType( \"application/json\" );\n+        renderService.toJson( response.getOutputStream(), importReport );\n+    }\n+\n+    protected ImportReport updateUser( String userUid, User parsedUserObject )\n+        throws WebMessageException\n+    {\n+        List<User> users = getEntity( userUid, NO_WEB_OPTIONS );\n \n         if ( users.isEmpty() )\n         {\n-            throw new WebMessageException( WebMessageUtils.conflict( getEntityName() + \" does not exist: \" + pvUid ) );\n+            throw new WebMessageException(\n+                WebMessageUtils.conflict( getEntityName() + \" does not exist: \" + userUid ) );\n         }\n \n         User currentUser = currentUserService.getCurrentUser();\n-\n+        // TODO: Can we disallow currentUser == NULL ?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE1OTEyMA=="}, "originalCommit": {"oid": "125d11343e2260672aa5b7992e1efe211fe6f95e"}, "originalPosition": 93}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2749, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}