{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4MDk5MzMw", "number": 5935, "title": "feat: Dataset openPeriodsAfterCoEndDate", "bodyText": "See https://jira.dhis2.org/browse/DHIS2-9081.\nAlso, I respectfully disagree with SonarCloud that I should make the changes they suggest. :)", "createdAt": "2020-08-14T17:30:11Z", "url": "https://github.com/dhis2/dhis2-core/pull/5935", "merged": true, "mergeCommit": {"oid": "071477a3f5da386771e7dea10d288844f250cf72"}, "closed": true, "closedAt": "2020-08-17T18:43:03Z", "author": {"login": "jimgrace"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-35sdgH2gAyNDY4MDk5MzMwOmM3NzE0NDZjY2Q0N2NjYzQ0MDE2YjMwOTZmMmQ5ZDIyNTgyNTU3Yzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc_vrSkAFqTQ2ODMzMDg2Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c771446ccd47ccc44016b3096f2d9d22582557c7", "author": {"user": {"login": "jimgrace", "name": "Jim Grace"}}, "url": "https://github.com/dhis2/dhis2-core/commit/c771446ccd47ccc44016b3096f2d9d22582557c7", "committedDate": "2020-08-14T17:17:11Z", "message": "feat: Dataset openPeriodsAfterCoEndDate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba18d90187d575349a72260e0f7f202095ec815c", "author": {"user": {"login": "jimgrace", "name": "Jim Grace"}}, "url": "https://github.com/dhis2/dhis2-core/commit/ba18d90187d575349a72260e0f7f202095ec815c", "committedDate": "2020-08-14T17:19:05Z", "message": "Merge branch 'master' into DHIS2-9081"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "adcd99949e70e14cfc7be95f912fcead337aed13", "author": {"user": {"login": "jimgrace", "name": "Jim Grace"}}, "url": "https://github.com/dhis2/dhis2-core/commit/adcd99949e70e14cfc7be95f912fcead337aed13", "committedDate": "2020-08-14T17:29:31Z", "message": "Rename flyway script"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2883e99713ca3578de66ff94dbf36b6046adc9b7", "author": {"user": {"login": "jimgrace", "name": "Jim Grace"}}, "url": "https://github.com/dhis2/dhis2-core/commit/2883e99713ca3578de66ff94dbf36b6046adc9b7", "committedDate": "2020-08-14T18:08:52Z", "message": "Rename flyway script to V2_35_18"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3OTU2MTAw", "url": "https://github.com/dhis2/dhis2-core/pull/5935#pullrequestreview-467956100", "createdAt": "2020-08-15T07:59:19Z", "commit": {"oid": "2883e99713ca3578de66ff94dbf36b6046adc9b7"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwNzo1OToyMFrOHBInrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwODowNjoyMFrOHBIp0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk1MTg1NA==", "bodyText": "Minor: I wonder if we should make this variable's name more explicit (Co -> CategoryOption)", "url": "https://github.com/dhis2/dhis2-core/pull/5935#discussion_r470951854", "createdAt": "2020-08-15T07:59:20Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/dataset/DataSet.java", "diffHunk": "@@ -192,6 +192,12 @@\n      */\n     private int openFuturePeriods;\n \n+    /**\n+     * Number of periods to open for data capture that are after the category\n+     * option's end date.\n+     */\n+    private int openPeriodsAfterCoEndDate;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2883e99713ca3578de66ff94dbf36b6046adc9b7"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk1MjA2OA==", "bodyText": "I'm not sure about this: we are now adding sql (postgres specific) logic to a domain class, which should be agnostic regarding the underlying persistent engine. I wonder if it would be better to have a separate utility class that would return this interval String based on the given period. This would have the benefit of reducing the number of Period subclasses to modify.", "url": "https://github.com/dhis2/dhis2-core/pull/5935#discussion_r470952068", "createdAt": "2020-08-15T08:02:01Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/period/PeriodType.java", "diffHunk": "@@ -344,6 +344,13 @@ public Period toIsoPeriod( DateTimeUnit dateTimeUnit )\n      */\n     public abstract int getFrequencyOrder();\n \n+    /**\n+     * Returns a string usable as the interval value in PostgreSQL queries.\n+     *\n+     * @return the SQL interval.\n+     */\n+    public abstract String getSqlInterval();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2883e99713ca3578de66ff94dbf36b6046adc9b7"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk1MjIzMw==", "bodyText": "This test is perfectly fine, but you may also consider using Junit parametrized test: https://github.com/junit-team/junit4/wiki/Parameterized-tests", "url": "https://github.com/dhis2/dhis2-core/pull/5935#discussion_r470952233", "createdAt": "2020-08-15T08:04:21Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-api/src/test/java/org/hisp/dhis/dataApproval/DataApprovalWorkflowTest.java", "diffHunk": "@@ -0,0 +1,168 @@\n+package org.hisp.dhis.dataApproval;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.dataapproval.DataApprovalLevel;\n+import org.hisp.dhis.dataapproval.DataApprovalWorkflow;\n+import org.hisp.dhis.dataset.DataSet;\n+import org.hisp.dhis.period.*;\n+import org.junit.Test;\n+\n+import java.util.List;\n+\n+import static com.google.common.collect.Sets.newHashSet;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * @author Jim Grace\n+ */\n+public class DataApprovalWorkflowTest\n+{\n+    @Test\n+    public void testGetSortedLevels()\n+    {\n+        DataApprovalLevel level1 = new DataApprovalLevel( \"level1\", 1, null );\n+        level1.setLevel( 1 );\n+\n+        DataApprovalLevel level2 = new DataApprovalLevel( \"level2\", 2, null );\n+        level2.setLevel( 2 );\n+\n+        DataApprovalLevel level3 = new DataApprovalLevel( \"level3\", 3, null );\n+        level3.setLevel( 3 );\n+\n+        DataApprovalWorkflow workflow = new DataApprovalWorkflow( \"test workflow\", new DailyPeriodType(), newHashSet(level3, level2, level1 ) );\n+\n+        List<DataApprovalLevel> levels = workflow.getSortedLevels();\n+\n+        assertEquals( 1, levels.get( 0 ).getLevel() );\n+        assertEquals( 2, levels.get( 1 ).getLevel() );\n+        assertEquals( 3, levels.get( 2 ).getLevel() );\n+    }\n+\n+    @Test\n+    public void testGetWorkflowSqlCoEnddateExtension()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2883e99713ca3578de66ff94dbf36b6046adc9b7"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk1MjQwMw==", "bodyText": "I got to trust you on this one \ud83d\ude03", "url": "https://github.com/dhis2/dhis2-core/pull/5935#discussion_r470952403", "createdAt": "2020-08-15T08:06:20Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/dataapproval/hibernate/HibernateDataApprovalStore.java", "diffHunk": "@@ -477,33 +509,56 @@ else if ( orgUnits != null && orgUnitLevel != highestUserApprovalLevel.getOrgUni\n                 highestApprovedOrgUnitJoin +\n                 \"where da.workflowid = \" + workflow.getId() + \" \" +\n                 \"and da.periodid = \" + getWorkflowPeriodId( workflow, endDate ) + \" \" +\n-                \"and da.attributeoptioncomboid = cocco.categoryoptioncomboid \" +\n+                \"and da.attributeoptioncomboid = coc.categoryoptioncomboid \" +\n                 \"and \" + highestApprovedOrgUnitCompare + userApprovalLevelRestrictions +\n             \") as highest_approved, \" +\n             readyBelowSubquery + \" as ready_below, \" +\n             approvedAboveSubquery + \" as approved_above \" +\n             \"from categoryoptioncombo coc \" +\n-            \"join categoryoptioncombos_categoryoptions cocco on cocco.categoryoptioncomboid = coc.categoryoptioncomboid \" +\n-            ( attributeCombo == null ? \"\" : \"join categorycombos_optioncombos ccoc on ccoc.categoryoptioncomboid = cocco.categoryoptioncomboid \" +\n-                \"and ccoc.categorycomboid = \" + attributeCombo.getId() + \" \" ) +\n-            \"join dataelementcategoryoption co on co.categoryoptionid = cocco.categoryoptionid \" +\n-                \"and (co.startdate is null or co.startdate <= '\" + endDate + \"') and (co.enddate is null or co.enddate >= '\" + startDate + \"') \" +\n-            \"join organisationunit o on \" + (orgUnits != null ? \"o.organisationunitid in (\" + orgUnitIds + \")\" : \"o.hierarchylevel = \" + orgUnitLevel + userOrgUnitRestrictions ) + \" \" +\n-            \"left join categoryoption_organisationunits coo on coo.categoryoptionid = co.categoryoptionid \" +\n-            \"left join organisationunit oc on oc.organisationunitid = coo.organisationunitid \" +\n-            \"where ( coo.categoryoptionid is null or \" +\n-                statementBuilder.position( \"o.uid\", \"oc.path\" ) + \" <> 0  or \" +\n-                statementBuilder.position( \"oc.uid\", \"o.path\" ) + \" <> 0 )\" +\n-            ( attributeOptionCombos == null || attributeOptionCombos.isEmpty() ? \"\" : \" and cocco.categoryoptioncomboid in (\" +\n-                StringUtils.join( IdentifiableObjectUtils.getIdentifiers( attributeOptionCombos ), \",\" ) + \") \" ) +\n-            ( isSuperUser ? \"\" :\n-                \" and ( co.publicaccess is null or left(co.publicaccess, 1) = 'r' or co.userid is null or co.userid = \" + user.getId() + \" or exists ( \" +\n-                \"select 1 from dataelementcategoryoptionusergroupaccesses couga \" +\n-                \"left join usergroupaccess uga on uga.usergroupaccessid = couga.usergroupaccessid \" +\n-                \"left join usergroupmembers ugm on ugm.usergroupid = uga.usergroupid \" +\n-                    \"where couga.categoryoptionid = cocco.categoryoptionid and ugm.userid = \" + user.getId() + \") ) \" ) +\n-                \" and exists (select 1 from organisationunit od where od.path like o.path || '%' and od.organisationunitid in \" +\n-                \"(select distinct sourceid from datasetsource dss join dataset ds on ds.datasetid = dss.datasetid where ds.workflowid = \" + workflow.getId() + \"))\";\n+            \"join organisationunit o on \" + ( orgUnits != null ? \"o.organisationunitid in (\" + orgUnitIds + \") \" : \"o.hierarchylevel = \" + orgUnitLevel + userOrgUnitRestrictions + \" \" ) +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2883e99713ca3578de66ff94dbf36b6046adc9b7"}, "originalPosition": 169}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4MzMwODY2", "url": "https://github.com/dhis2/dhis2-core/pull/5935#pullrequestreview-468330866", "createdAt": "2020-08-17T10:03:35Z", "commit": {"oid": "2883e99713ca3578de66ff94dbf36b6046adc9b7"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMDowMzozNVrOHBiYhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMDowNzoyM1rOHBigHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM3Mzk1OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if ( coEndDate != null && (earliestEndDate == null || coEndDate.before( earliestEndDate ) ) )\n          \n          \n            \n                        if ( coEndDate != null && ( earliestEndDate == null || coEndDate.before( earliestEndDate ) ) )", "url": "https://github.com/dhis2/dhis2-core/pull/5935#discussion_r471373958", "createdAt": "2020-08-17T10:03:35Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/category/CategoryOptionCombo.java", "diffHunk": "@@ -303,6 +327,43 @@ public Date getEarliestEndDate()\n         return earliestEndDate;\n     }\n \n+    // -------------------------------------------------------------------------\n+    // Supportive methods\n+    // -------------------------------------------------------------------------\n+\n+    /**\n+     * Gets a range of valid dates for this (attribute) cateogry option combo\n+     * for a data set or, if that is not present, a data element.\n+     *\n+     * @param dataSet the data set to get the range for, or\n+     * @param dataElement the data element to get the range for\n+     * @return valid date range for this (attribute) category option combo.\n+     */\n+    private DateRange getDateRange( DataSet dataSet, DataElement dataElement )\n+    {\n+        Date latestStartDate = null;\n+        Date earliestEndDate = null;\n+\n+        for ( CategoryOption co : getCategoryOptions() )\n+        {\n+            if ( co.getStartDate() != null && (latestStartDate == null || co.getStartDate().after( latestStartDate ) ) )\n+            {\n+                latestStartDate = co.getStartDate();\n+            }\n+\n+            Date coEndDate = dataSet != null\n+                ? co.getAdjustedEndDate( dataSet )\n+                : co.getAdjustedEndDate( dataElement );\n+\n+            if ( coEndDate != null && (earliestEndDate == null || coEndDate.before( earliestEndDate ) ) )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2883e99713ca3578de66ff94dbf36b6046adc9b7"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM3NDc2OA==", "bodyText": "Sounds good to me.", "url": "https://github.com/dhis2/dhis2-core/pull/5935#discussion_r471374768", "createdAt": "2020-08-17T10:05:08Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/dataset/DataSet.java", "diffHunk": "@@ -192,6 +192,12 @@\n      */\n     private int openFuturePeriods;\n \n+    /**\n+     * Number of periods to open for data capture that are after the category\n+     * option's end date.\n+     */\n+    private int openPeriodsAfterCoEndDate;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk1MTg1NA=="}, "originalCommit": {"oid": "2883e99713ca3578de66ff94dbf36b6046adc9b7"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM3NTkwMg==", "bodyText": "We have comitted to Postgres, so I think it's fine to do some postgres specific stuff in places. @luciano-fiandesio would it make more sense to make this an enum, that would contain the postgres specific value, or a utility class that converted from the enum to the postgres value? I am open for both.", "url": "https://github.com/dhis2/dhis2-core/pull/5935#discussion_r471375902", "createdAt": "2020-08-17T10:07:23Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/period/PeriodType.java", "diffHunk": "@@ -344,6 +344,13 @@ public Period toIsoPeriod( DateTimeUnit dateTimeUnit )\n      */\n     public abstract int getFrequencyOrder();\n \n+    /**\n+     * Returns a string usable as the interval value in PostgreSQL queries.\n+     *\n+     * @return the SQL interval.\n+     */\n+    public abstract String getSqlInterval();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk1MjA2OA=="}, "originalCommit": {"oid": "2883e99713ca3578de66ff94dbf36b6046adc9b7"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2515, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}