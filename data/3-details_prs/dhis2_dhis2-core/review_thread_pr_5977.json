{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxNTAyODM5", "number": 5977, "reviewThreads": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjo1Nzo0NlrOEbCh3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNDozNjozNlrOEdQH2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2Nzg4NDQ3OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/appmanager/AppManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjo1Nzo0NlrOHE0hPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzowMDoxNlrOHE0l-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxNjgyOQ==", "bodyText": "Works, but normally favorable to:\n\nuse Lists over arrays for usability reasons\nuse immutable lists, so that the list cannot be modified during runtime by other code by accident, leading to unpredictable behavior\navoid public static final in interfaces as it is already implicit\nperhaps use ImmutableSet if the order is insignificant as it provides faster lookup\n\nimport com.google.common.collect.Lists;\n//..\nImmutableList<String> BUNDLED_APPS = ImmutableList.of(\n    \"app-management\", \"cache-cleaner\" );", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r474816829", "createdAt": "2020-08-21T16:57:46Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/appmanager/AppManager.java", "diffHunk": "@@ -43,6 +43,40 @@\n {\n     String ID = AppManager.class.getName();\n \n+    public static final String[] BUNDLED_APPS = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4c83d6bffc6d71f65ff5ced30d0aae520c955c5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxODA0Mw==", "bodyText": "Nice, yeah agreed - I didn\u2019t like having to convert it to a list before doing anything anyway!", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r474818043", "createdAt": "2020-08-21T17:00:16Z", "author": {"login": "amcgee"}, "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/appmanager/AppManager.java", "diffHunk": "@@ -43,6 +43,40 @@\n {\n     String ID = AppManager.class.getName();\n \n+    public static final String[] BUNDLED_APPS = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxNjgyOQ=="}, "originalCommit": {"oid": "d4c83d6bffc6d71f65ff5ced30d0aae520c955c5"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2ODE5NzEzOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxODo0MzozNVrOHE3hEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxODo0MzozNVrOHE3hEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg2NTkzOA==", "bodyText": "Move up to class scope as static final.", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r474865938", "createdAt": "2020-08-21T18:43:35Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package org.hisp.dhis.servlet.filter;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+import lombok.extern.slf4j.Slf4j;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.context.request.ServletWebRequest;\n+import org.springframework.util.StreamUtils;\n+\n+import org.hisp.dhis.util.DateUtils;\n+import org.hisp.dhis.appmanager.App;\n+import org.hisp.dhis.appmanager.AppManager;\n+import org.hisp.dhis.appmanager.AppStatus;\n+\n+/**\n+ * @author Austin McGee <austin@dhis2.org>\n+ */\n+ @Slf4j\n+public class AppOverrideFilter\n+    implements Filter\n+{\n+    @Autowired\n+    private AppManager appManager;\n+\n+    @Autowired\n+    private ObjectMapper jsonMapper;\n+\n+    // -------------------------------------------------------------------------\n+    // Filter implementation\n+    // -------------------------------------------------------------------------\n+\n+    @Override\n+    public void init( FilterConfig config )\n+    {\n+    }\n+\n+    // From AppController.java (some duplication)\n+    private void serveInstalledAppResource( App app, String resourcePath, HttpServletRequest request, HttpServletResponse response)\n+        throws IOException {\n+        // Get page requested\n+\n+        log.debug( String.format( \"Serving app resource: '%s'\", resourcePath ) );\n+\n+        // Handling of 'manifest.webapp'\n+        if ( \"manifest.webapp\".equals( resourcePath ) )\n+        {\n+            // If request was for manifest.webapp, check for * and replace with host\n+            if ( \"*\".equals( app.getActivities().getDhis().getHref() ) )\n+            {\n+                String contextPath = \"../\";\n+                log.debug( String.format( \"Manifest context path: '%s'\", contextPath ) );\n+                app.getActivities().getDhis().setHref( contextPath );\n+            }\n+\n+            jsonMapper.writeValue( response.getOutputStream(), app );\n+        }\n+        // Any other resource\n+        else\n+        {\n+            // Retrieve file\n+            Resource resource = appManager.getAppResource( app, resourcePath );\n+\n+            if ( resource == null )\n+            {\n+                response.sendError( HttpServletResponse.SC_NOT_FOUND );\n+                return;\n+            }\n+\n+            String filename = resource.getFilename();\n+            log.debug( String.format( \"App filename: '%s'\", filename ) );\n+\n+            if ( new ServletWebRequest( request, response ).checkNotModified( resource.lastModified() ) )\n+            {\n+                response.setStatus( HttpServletResponse.SC_NOT_MODIFIED );\n+                return;\n+            }\n+\n+            String mimeType = request.getSession().getServletContext().getMimeType( filename );\n+\n+            if ( mimeType != null )\n+            {\n+                response.setContentType( mimeType );\n+            }\n+\n+            response.setContentLength( (int) resource.contentLength() );\n+            response.setHeader( \"Last-Modified\", DateUtils.getHttpDateString( new Date( resource.lastModified() ) ) );\n+            StreamUtils.copy( resource.getInputStream(), response.getOutputStream() );\n+        }\n+    }\n+\n+    @Override\n+    public void doFilter( ServletRequest req, ServletResponse res, FilterChain chain )\n+        throws IOException, ServletException {\n+        HttpServletRequest request = (HttpServletRequest) req;\n+        HttpServletResponse response = (HttpServletResponse) res;\n+        String requestURI = request.getRequestURI();\n+\n+        List<String> bundledApps = Arrays.asList(AppManager.BUNDLED_APPS);\n+        String pattern = \"^/dhis-web-(\" + String.join(\"|\", bundledApps) + \")(?:/|$)(.*)\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4c83d6bffc6d71f65ff5ced30d0aae520c955c5"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2ODIwMzMzOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-web/dhis-web-portal/src/main/webapp/WEB-INF/web.xml", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxODo0NTo0NVrOHE3k8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMDo1Mzo1MlrOHGSltg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg2NjkyOQ==", "bodyText": "Maybe use \"appOverrideFilter\" as name per convention instead of qualified class name.", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r474866929", "createdAt": "2020-08-21T18:45:45Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-web/dhis-web-portal/src/main/webapp/WEB-INF/web.xml", "diffHunk": "@@ -111,6 +111,12 @@\n     </init-param>\n   </filter>\n \n+  <filter>\n+    <filter-name>org.hisp.dhis.servlet.filter.AppOverrideFilter</filter-name>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4c83d6bffc6d71f65ff5ced30d0aae520c955c5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA3OTk4MA==", "bodyText": "@larshelge I wasn't sure about this - to use the delegated proxy filter the filter name needs to exactly match the id of the bean, which has the convention of being the full qualified class name.  Which convention should we prefer?", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r475079980", "createdAt": "2020-08-22T11:15:12Z", "author": {"login": "amcgee"}, "path": "dhis-2/dhis-web/dhis-web-portal/src/main/webapp/WEB-INF/web.xml", "diffHunk": "@@ -111,6 +111,12 @@\n     </init-param>\n   </filter>\n \n+  <filter>\n+    <filter-name>org.hisp.dhis.servlet.filter.AppOverrideFilter</filter-name>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg2NjkyOQ=="}, "originalCommit": {"oid": "d4c83d6bffc6d71f65ff5ced30d0aae520c955c5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzOTk1Ng==", "bodyText": "That's fine \ud83d\udc4d", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r475139956", "createdAt": "2020-08-22T21:27:43Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-web/dhis-web-portal/src/main/webapp/WEB-INF/web.xml", "diffHunk": "@@ -111,6 +111,12 @@\n     </init-param>\n   </filter>\n \n+  <filter>\n+    <filter-name>org.hisp.dhis.servlet.filter.AppOverrideFilter</filter-name>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg2NjkyOQ=="}, "originalCommit": {"oid": "d4c83d6bffc6d71f65ff5ced30d0aae520c955c5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyOTQzMg==", "bodyText": "@larshelge should we mention the reason for this exception to the convention in a comment so future devs don't get confused and try to change it?  Can we add comments to web.xml?", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r475529432", "createdAt": "2020-08-24T11:20:09Z", "author": {"login": "amcgee"}, "path": "dhis-2/dhis-web/dhis-web-portal/src/main/webapp/WEB-INF/web.xml", "diffHunk": "@@ -111,6 +111,12 @@\n     </init-param>\n   </filter>\n \n+  <filter>\n+    <filter-name>org.hisp.dhis.servlet.filter.AppOverrideFilter</filter-name>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg2NjkyOQ=="}, "originalCommit": {"oid": "d4c83d6bffc6d71f65ff5ced30d0aae520c955c5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIyNzM0Ng==", "bodyText": "That would be good!", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r476227346", "createdAt": "2020-08-25T07:14:38Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-web/dhis-web-portal/src/main/webapp/WEB-INF/web.xml", "diffHunk": "@@ -111,6 +111,12 @@\n     </init-param>\n   </filter>\n \n+  <filter>\n+    <filter-name>org.hisp.dhis.servlet.filter.AppOverrideFilter</filter-name>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg2NjkyOQ=="}, "originalCommit": {"oid": "d4c83d6bffc6d71f65ff5ced30d0aae520c955c5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMxMDMyOA==", "bodyText": "I took a look at some other places using DelegatingFilterProxy and followed their example - can use appOverrideFilter here if using @Component decorator instead of adding the Bean to beans.xml, so made that change here.  No comment needed.", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r476310328", "createdAt": "2020-08-25T09:27:39Z", "author": {"login": "amcgee"}, "path": "dhis-2/dhis-web/dhis-web-portal/src/main/webapp/WEB-INF/web.xml", "diffHunk": "@@ -111,6 +111,12 @@\n     </init-param>\n   </filter>\n \n+  <filter>\n+    <filter-name>org.hisp.dhis.servlet.filter.AppOverrideFilter</filter-name>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg2NjkyOQ=="}, "originalCommit": {"oid": "d4c83d6bffc6d71f65ff5ced30d0aae520c955c5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM1ODA3MA==", "bodyText": "Sounds good.", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r476358070", "createdAt": "2020-08-25T10:53:52Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-web/dhis-web-portal/src/main/webapp/WEB-INF/web.xml", "diffHunk": "@@ -111,6 +111,12 @@\n     </init-param>\n   </filter>\n \n+  <filter>\n+    <filter-name>org.hisp.dhis.servlet.filter.AppOverrideFilter</filter-name>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg2NjkyOQ=="}, "originalCommit": {"oid": "d4c83d6bffc6d71f65ff5ced30d0aae520c955c5"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MjkzNjQ5OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/appmanager/DefaultAppManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMToxNzoxN1rOHFf7uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMToxNzoxN1rOHFf7uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyODEyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if ( app == null || app.getName() == null || AppManager.BUNDLED_APPS.contains(app.getName()) ) {\n          \n          \n            \n                    if ( app == null || app.getName() == null || AppManager.BUNDLED_APPS.contains( app.getName() ) ) {", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r475528120", "createdAt": "2020-08-24T11:17:17Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/appmanager/DefaultAppManager.java", "diffHunk": "@@ -308,7 +308,10 @@ public boolean isAccessible( App app )\n     @Override\n     public boolean isAccessible( App app, User user )\n     {\n-        if ( user == null || user.getUserCredentials() == null || app == null || app.getName() == null )\n+        if ( app == null || app.getName() == null || AppManager.BUNDLED_APPS.contains(app.getName()) ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81d6ebb8e178ca82d78130dea483cf48bff3e1c7"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MjkzNzA1OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/appmanager/JCloudsAppStorageService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMToxNzozMVrOHFf8IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMToxNzozMVrOHFf8IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyODIyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        } catch (LocationManagerException e) {\n          \n          \n            \n                        } catch ( LocationManagerException e ) {", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r475528225", "createdAt": "2020-08-24T11:17:31Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/appmanager/JCloudsAppStorageService.java", "diffHunk": "@@ -429,9 +430,21 @@ public Resource getAppResource( App app, String pageName )\n \n             String filepath = configurationProvider.getProperty( ConfigurationKey.FILESTORE_CONTAINER ) + \"/\" + key;\n             filepath = filepath.replaceAll( \"//\", \"/\" );\n-            File res = locationManager.getFileForReading( filepath );\n+            File res;\n+            \n+            try {\n+                res = locationManager.getFileForReading( filepath );\n+            } catch (LocationManagerException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81d6ebb8e178ca82d78130dea483cf48bff3e1c7"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MjkzNzg4OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/appmanager/JCloudsAppStorageService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMToxNzo0OFrOHFf8ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMToxNzo0OFrOHFf8ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyODM1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            String indexPath = pageName.replaceAll(\"/+$\", \"\") + \"/index.html\";\n          \n          \n            \n                            String indexPath = pageName.replaceAll( \"/+$\", \"\" ) + \"/index.html\";", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r475528355", "createdAt": "2020-08-24T11:17:48Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/appmanager/JCloudsAppStorageService.java", "diffHunk": "@@ -429,9 +430,21 @@ public Resource getAppResource( App app, String pageName )\n \n             String filepath = configurationProvider.getProperty( ConfigurationKey.FILESTORE_CONTAINER ) + \"/\" + key;\n             filepath = filepath.replaceAll( \"//\", \"/\" );\n-            File res = locationManager.getFileForReading( filepath );\n+            File res;\n+            \n+            try {\n+                res = locationManager.getFileForReading( filepath );\n+            } catch (LocationManagerException e) {\n+                return null;\n+            }\n \n-            if ( res.exists() )\n+            if ( res.isDirectory() )\n+            {\n+                String indexPath = pageName.replaceAll(\"/+$\", \"\") + \"/index.html\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81d6ebb8e178ca82d78130dea483cf48bff3e1c7"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MjkzODQ2OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/appmanager/JCloudsAppStorageService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMToxNzo1OVrOHFf8-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMToxNzo1OVrOHFf8-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyODQ0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            log.info(\"Resource \" + pageName + \" (\" + filepath + \" is a directory, serving \" + indexPath);\n          \n          \n            \n                            log.info( \"Resource \" + pageName + \" (\" + filepath + \" is a directory, serving \" + indexPath );", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r475528442", "createdAt": "2020-08-24T11:17:59Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/appmanager/JCloudsAppStorageService.java", "diffHunk": "@@ -429,9 +430,21 @@ public Resource getAppResource( App app, String pageName )\n \n             String filepath = configurationProvider.getProperty( ConfigurationKey.FILESTORE_CONTAINER ) + \"/\" + key;\n             filepath = filepath.replaceAll( \"//\", \"/\" );\n-            File res = locationManager.getFileForReading( filepath );\n+            File res;\n+            \n+            try {\n+                res = locationManager.getFileForReading( filepath );\n+            } catch (LocationManagerException e) {\n+                return null;\n+            }\n \n-            if ( res.exists() )\n+            if ( res.isDirectory() )\n+            {\n+                String indexPath = pageName.replaceAll(\"/+$\", \"\") + \"/index.html\";\n+                log.info(\"Resource \" + pageName + \" (\" + filepath + \" is a directory, serving \" + indexPath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81d6ebb8e178ca82d78130dea483cf48bff3e1c7"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MjkzODkwOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/appmanager/JCloudsAppStorageService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMToxODowN1rOHFf9Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMToxODowN1rOHFf9Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyODUwMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            return getAppResource(app, indexPath);\n          \n          \n            \n                            return getAppResource( app, indexPath );", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r475528502", "createdAt": "2020-08-24T11:18:07Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/appmanager/JCloudsAppStorageService.java", "diffHunk": "@@ -429,9 +430,21 @@ public Resource getAppResource( App app, String pageName )\n \n             String filepath = configurationProvider.getProperty( ConfigurationKey.FILESTORE_CONTAINER ) + \"/\" + key;\n             filepath = filepath.replaceAll( \"//\", \"/\" );\n-            File res = locationManager.getFileForReading( filepath );\n+            File res;\n+            \n+            try {\n+                res = locationManager.getFileForReading( filepath );\n+            } catch (LocationManagerException e) {\n+                return null;\n+            }\n \n-            if ( res.exists() )\n+            if ( res.isDirectory() )\n+            {\n+                String indexPath = pageName.replaceAll(\"/+$\", \"\") + \"/index.html\";\n+                log.info(\"Resource \" + pageName + \" (\" + filepath + \" is a directory, serving \" + indexPath);\n+                return getAppResource(app, indexPath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81d6ebb8e178ca82d78130dea483cf48bff3e1c7"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Mjk0MDQ0OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMToxODozN1rOHFf-Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMToxODozN1rOHFf-Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyODc0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private void serveInstalledAppResource( App app, String resourcePath, HttpServletRequest request, HttpServletResponse response)\n          \n          \n            \n                private void serveInstalledAppResource( App app, String resourcePath, HttpServletRequest request, HttpServletResponse response )", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r475528743", "createdAt": "2020-08-24T11:18:37Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package org.hisp.dhis.servlet.filter;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+import lombok.extern.slf4j.Slf4j;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.context.request.ServletWebRequest;\n+import org.springframework.util.StreamUtils;\n+\n+import org.hisp.dhis.util.DateUtils;\n+import org.hisp.dhis.appmanager.App;\n+import org.hisp.dhis.appmanager.AppManager;\n+import org.hisp.dhis.appmanager.AppStatus;\n+\n+/**\n+ * @author Austin McGee <austin@dhis2.org>\n+ */\n+ @Slf4j\n+public class AppOverrideFilter\n+    implements Filter\n+{\n+    @Autowired\n+    private AppManager appManager;\n+\n+    @Autowired\n+    private ObjectMapper jsonMapper;\n+\n+    public static final String APP_PATH_PATTERN = \"^/dhis-web-(\" + String.join(\"|\", AppManager.BUNDLED_APPS) + \")/(.*)\";\n+\n+    // -------------------------------------------------------------------------\n+    // Filter implementation\n+    // -------------------------------------------------------------------------\n+\n+    @Override\n+    public void init( FilterConfig config )\n+    {\n+    }\n+\n+    // From AppController.java (some duplication)\n+    private void serveInstalledAppResource( App app, String resourcePath, HttpServletRequest request, HttpServletResponse response)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81d6ebb8e178ca82d78130dea483cf48bff3e1c7"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Mjk0MTk4OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMToxOTowNFrOHFf_Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMToxOTowNFrOHFf_Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyODk2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Pattern p = Pattern.compile(APP_PATH_PATTERN);\n          \n          \n            \n                    Pattern p = Pattern.compile( APP_PATH_PATTERN );", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r475528963", "createdAt": "2020-08-24T11:19:04Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package org.hisp.dhis.servlet.filter;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+import lombok.extern.slf4j.Slf4j;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.context.request.ServletWebRequest;\n+import org.springframework.util.StreamUtils;\n+\n+import org.hisp.dhis.util.DateUtils;\n+import org.hisp.dhis.appmanager.App;\n+import org.hisp.dhis.appmanager.AppManager;\n+import org.hisp.dhis.appmanager.AppStatus;\n+\n+/**\n+ * @author Austin McGee <austin@dhis2.org>\n+ */\n+ @Slf4j\n+public class AppOverrideFilter\n+    implements Filter\n+{\n+    @Autowired\n+    private AppManager appManager;\n+\n+    @Autowired\n+    private ObjectMapper jsonMapper;\n+\n+    public static final String APP_PATH_PATTERN = \"^/dhis-web-(\" + String.join(\"|\", AppManager.BUNDLED_APPS) + \")/(.*)\";\n+\n+    // -------------------------------------------------------------------------\n+    // Filter implementation\n+    // -------------------------------------------------------------------------\n+\n+    @Override\n+    public void init( FilterConfig config )\n+    {\n+    }\n+\n+    // From AppController.java (some duplication)\n+    private void serveInstalledAppResource( App app, String resourcePath, HttpServletRequest request, HttpServletResponse response)\n+        throws IOException {\n+        // Get page requested\n+\n+        log.debug( String.format( \"Serving app resource: '%s'\", resourcePath ) );\n+\n+        // Handling of 'manifest.webapp'\n+        if ( \"manifest.webapp\".equals( resourcePath ) )\n+        {\n+            // If request was for manifest.webapp, check for * and replace with host\n+            if ( \"*\".equals( app.getActivities().getDhis().getHref() ) )\n+            {\n+                String contextPath = \"../\";\n+                log.debug( String.format( \"Manifest context path: '%s'\", contextPath ) );\n+                app.getActivities().getDhis().setHref( contextPath );\n+            }\n+\n+            jsonMapper.writeValue( response.getOutputStream(), app );\n+        }\n+        // Any other resource\n+        else\n+        {\n+            // Retrieve file\n+            Resource resource = appManager.getAppResource( app, resourcePath );\n+\n+            if ( resource == null )\n+            {\n+                response.sendError( HttpServletResponse.SC_NOT_FOUND );\n+                return;\n+            }\n+\n+            String filename = resource.getFilename();\n+            log.debug( String.format( \"App filename: '%s'\", filename ) );\n+\n+            if ( new ServletWebRequest( request, response ).checkNotModified( resource.lastModified() ) )\n+            {\n+                response.setStatus( HttpServletResponse.SC_NOT_MODIFIED );\n+                return;\n+            }\n+\n+            String mimeType = request.getSession().getServletContext().getMimeType( filename );\n+\n+            if ( mimeType != null )\n+            {\n+                response.setContentType( mimeType );\n+            }\n+\n+            response.setContentLength( (int) resource.contentLength() );\n+            response.setHeader( \"Last-Modified\", DateUtils.getHttpDateString( new Date( resource.lastModified() ) ) );\n+            StreamUtils.copy( resource.getInputStream(), response.getOutputStream() );\n+        }\n+    }\n+\n+    @Override\n+    public void doFilter( ServletRequest req, ServletResponse res, FilterChain chain )\n+        throws IOException, ServletException {\n+        HttpServletRequest request = (HttpServletRequest) req;\n+        HttpServletResponse response = (HttpServletResponse) res;\n+        String requestURI = request.getRequestURI();\n+\n+        Pattern p = Pattern.compile(APP_PATH_PATTERN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81d6ebb8e178ca82d78130dea483cf48bff3e1c7"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Mjk0MjMzOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMToxOToxMlrOHFf_Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMToxOToxMlrOHFf_Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyOTAxOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Matcher m = p.matcher(requestURI);\n          \n          \n            \n                    Matcher m = p.matcher( requestURI );", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r475529018", "createdAt": "2020-08-24T11:19:12Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package org.hisp.dhis.servlet.filter;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+import lombok.extern.slf4j.Slf4j;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.context.request.ServletWebRequest;\n+import org.springframework.util.StreamUtils;\n+\n+import org.hisp.dhis.util.DateUtils;\n+import org.hisp.dhis.appmanager.App;\n+import org.hisp.dhis.appmanager.AppManager;\n+import org.hisp.dhis.appmanager.AppStatus;\n+\n+/**\n+ * @author Austin McGee <austin@dhis2.org>\n+ */\n+ @Slf4j\n+public class AppOverrideFilter\n+    implements Filter\n+{\n+    @Autowired\n+    private AppManager appManager;\n+\n+    @Autowired\n+    private ObjectMapper jsonMapper;\n+\n+    public static final String APP_PATH_PATTERN = \"^/dhis-web-(\" + String.join(\"|\", AppManager.BUNDLED_APPS) + \")/(.*)\";\n+\n+    // -------------------------------------------------------------------------\n+    // Filter implementation\n+    // -------------------------------------------------------------------------\n+\n+    @Override\n+    public void init( FilterConfig config )\n+    {\n+    }\n+\n+    // From AppController.java (some duplication)\n+    private void serveInstalledAppResource( App app, String resourcePath, HttpServletRequest request, HttpServletResponse response)\n+        throws IOException {\n+        // Get page requested\n+\n+        log.debug( String.format( \"Serving app resource: '%s'\", resourcePath ) );\n+\n+        // Handling of 'manifest.webapp'\n+        if ( \"manifest.webapp\".equals( resourcePath ) )\n+        {\n+            // If request was for manifest.webapp, check for * and replace with host\n+            if ( \"*\".equals( app.getActivities().getDhis().getHref() ) )\n+            {\n+                String contextPath = \"../\";\n+                log.debug( String.format( \"Manifest context path: '%s'\", contextPath ) );\n+                app.getActivities().getDhis().setHref( contextPath );\n+            }\n+\n+            jsonMapper.writeValue( response.getOutputStream(), app );\n+        }\n+        // Any other resource\n+        else\n+        {\n+            // Retrieve file\n+            Resource resource = appManager.getAppResource( app, resourcePath );\n+\n+            if ( resource == null )\n+            {\n+                response.sendError( HttpServletResponse.SC_NOT_FOUND );\n+                return;\n+            }\n+\n+            String filename = resource.getFilename();\n+            log.debug( String.format( \"App filename: '%s'\", filename ) );\n+\n+            if ( new ServletWebRequest( request, response ).checkNotModified( resource.lastModified() ) )\n+            {\n+                response.setStatus( HttpServletResponse.SC_NOT_MODIFIED );\n+                return;\n+            }\n+\n+            String mimeType = request.getSession().getServletContext().getMimeType( filename );\n+\n+            if ( mimeType != null )\n+            {\n+                response.setContentType( mimeType );\n+            }\n+\n+            response.setContentLength( (int) resource.contentLength() );\n+            response.setHeader( \"Last-Modified\", DateUtils.getHttpDateString( new Date( resource.lastModified() ) ) );\n+            StreamUtils.copy( resource.getInputStream(), response.getOutputStream() );\n+        }\n+    }\n+\n+    @Override\n+    public void doFilter( ServletRequest req, ServletResponse res, FilterChain chain )\n+        throws IOException, ServletException {\n+        HttpServletRequest request = (HttpServletRequest) req;\n+        HttpServletResponse response = (HttpServletResponse) res;\n+        String requestURI = request.getRequestURI();\n+\n+        Pattern p = Pattern.compile(APP_PATH_PATTERN);\n+        Matcher m = p.matcher(requestURI);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81d6ebb8e178ca82d78130dea483cf48bff3e1c7"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Mjk0Mjg4OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMToxOToyMVrOHFf_ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMToxOToyMVrOHFf_ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyOTA5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        String namespace = m.group(0);\n          \n          \n            \n                        String namespace = m.group( 0 );", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r475529098", "createdAt": "2020-08-24T11:19:21Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package org.hisp.dhis.servlet.filter;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+import lombok.extern.slf4j.Slf4j;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.context.request.ServletWebRequest;\n+import org.springframework.util.StreamUtils;\n+\n+import org.hisp.dhis.util.DateUtils;\n+import org.hisp.dhis.appmanager.App;\n+import org.hisp.dhis.appmanager.AppManager;\n+import org.hisp.dhis.appmanager.AppStatus;\n+\n+/**\n+ * @author Austin McGee <austin@dhis2.org>\n+ */\n+ @Slf4j\n+public class AppOverrideFilter\n+    implements Filter\n+{\n+    @Autowired\n+    private AppManager appManager;\n+\n+    @Autowired\n+    private ObjectMapper jsonMapper;\n+\n+    public static final String APP_PATH_PATTERN = \"^/dhis-web-(\" + String.join(\"|\", AppManager.BUNDLED_APPS) + \")/(.*)\";\n+\n+    // -------------------------------------------------------------------------\n+    // Filter implementation\n+    // -------------------------------------------------------------------------\n+\n+    @Override\n+    public void init( FilterConfig config )\n+    {\n+    }\n+\n+    // From AppController.java (some duplication)\n+    private void serveInstalledAppResource( App app, String resourcePath, HttpServletRequest request, HttpServletResponse response)\n+        throws IOException {\n+        // Get page requested\n+\n+        log.debug( String.format( \"Serving app resource: '%s'\", resourcePath ) );\n+\n+        // Handling of 'manifest.webapp'\n+        if ( \"manifest.webapp\".equals( resourcePath ) )\n+        {\n+            // If request was for manifest.webapp, check for * and replace with host\n+            if ( \"*\".equals( app.getActivities().getDhis().getHref() ) )\n+            {\n+                String contextPath = \"../\";\n+                log.debug( String.format( \"Manifest context path: '%s'\", contextPath ) );\n+                app.getActivities().getDhis().setHref( contextPath );\n+            }\n+\n+            jsonMapper.writeValue( response.getOutputStream(), app );\n+        }\n+        // Any other resource\n+        else\n+        {\n+            // Retrieve file\n+            Resource resource = appManager.getAppResource( app, resourcePath );\n+\n+            if ( resource == null )\n+            {\n+                response.sendError( HttpServletResponse.SC_NOT_FOUND );\n+                return;\n+            }\n+\n+            String filename = resource.getFilename();\n+            log.debug( String.format( \"App filename: '%s'\", filename ) );\n+\n+            if ( new ServletWebRequest( request, response ).checkNotModified( resource.lastModified() ) )\n+            {\n+                response.setStatus( HttpServletResponse.SC_NOT_MODIFIED );\n+                return;\n+            }\n+\n+            String mimeType = request.getSession().getServletContext().getMimeType( filename );\n+\n+            if ( mimeType != null )\n+            {\n+                response.setContentType( mimeType );\n+            }\n+\n+            response.setContentLength( (int) resource.contentLength() );\n+            response.setHeader( \"Last-Modified\", DateUtils.getHttpDateString( new Date( resource.lastModified() ) ) );\n+            StreamUtils.copy( resource.getInputStream(), response.getOutputStream() );\n+        }\n+    }\n+\n+    @Override\n+    public void doFilter( ServletRequest req, ServletResponse res, FilterChain chain )\n+        throws IOException, ServletException {\n+        HttpServletRequest request = (HttpServletRequest) req;\n+        HttpServletResponse response = (HttpServletResponse) res;\n+        String requestURI = request.getRequestURI();\n+\n+        Pattern p = Pattern.compile(APP_PATH_PATTERN);\n+        Matcher m = p.matcher(requestURI);\n+\n+        if (m.find()) {\n+            String namespace = m.group(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81d6ebb8e178ca82d78130dea483cf48bff3e1c7"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Mjk0MzE5OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMToxOToyN1rOHFf_tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMToxOToyN1rOHFf_tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyOTE0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        String appName = m.group(1);\n          \n          \n            \n                        String appName = m.group( 1 );", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r475529143", "createdAt": "2020-08-24T11:19:27Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package org.hisp.dhis.servlet.filter;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+import lombok.extern.slf4j.Slf4j;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.context.request.ServletWebRequest;\n+import org.springframework.util.StreamUtils;\n+\n+import org.hisp.dhis.util.DateUtils;\n+import org.hisp.dhis.appmanager.App;\n+import org.hisp.dhis.appmanager.AppManager;\n+import org.hisp.dhis.appmanager.AppStatus;\n+\n+/**\n+ * @author Austin McGee <austin@dhis2.org>\n+ */\n+ @Slf4j\n+public class AppOverrideFilter\n+    implements Filter\n+{\n+    @Autowired\n+    private AppManager appManager;\n+\n+    @Autowired\n+    private ObjectMapper jsonMapper;\n+\n+    public static final String APP_PATH_PATTERN = \"^/dhis-web-(\" + String.join(\"|\", AppManager.BUNDLED_APPS) + \")/(.*)\";\n+\n+    // -------------------------------------------------------------------------\n+    // Filter implementation\n+    // -------------------------------------------------------------------------\n+\n+    @Override\n+    public void init( FilterConfig config )\n+    {\n+    }\n+\n+    // From AppController.java (some duplication)\n+    private void serveInstalledAppResource( App app, String resourcePath, HttpServletRequest request, HttpServletResponse response)\n+        throws IOException {\n+        // Get page requested\n+\n+        log.debug( String.format( \"Serving app resource: '%s'\", resourcePath ) );\n+\n+        // Handling of 'manifest.webapp'\n+        if ( \"manifest.webapp\".equals( resourcePath ) )\n+        {\n+            // If request was for manifest.webapp, check for * and replace with host\n+            if ( \"*\".equals( app.getActivities().getDhis().getHref() ) )\n+            {\n+                String contextPath = \"../\";\n+                log.debug( String.format( \"Manifest context path: '%s'\", contextPath ) );\n+                app.getActivities().getDhis().setHref( contextPath );\n+            }\n+\n+            jsonMapper.writeValue( response.getOutputStream(), app );\n+        }\n+        // Any other resource\n+        else\n+        {\n+            // Retrieve file\n+            Resource resource = appManager.getAppResource( app, resourcePath );\n+\n+            if ( resource == null )\n+            {\n+                response.sendError( HttpServletResponse.SC_NOT_FOUND );\n+                return;\n+            }\n+\n+            String filename = resource.getFilename();\n+            log.debug( String.format( \"App filename: '%s'\", filename ) );\n+\n+            if ( new ServletWebRequest( request, response ).checkNotModified( resource.lastModified() ) )\n+            {\n+                response.setStatus( HttpServletResponse.SC_NOT_MODIFIED );\n+                return;\n+            }\n+\n+            String mimeType = request.getSession().getServletContext().getMimeType( filename );\n+\n+            if ( mimeType != null )\n+            {\n+                response.setContentType( mimeType );\n+            }\n+\n+            response.setContentLength( (int) resource.contentLength() );\n+            response.setHeader( \"Last-Modified\", DateUtils.getHttpDateString( new Date( resource.lastModified() ) ) );\n+            StreamUtils.copy( resource.getInputStream(), response.getOutputStream() );\n+        }\n+    }\n+\n+    @Override\n+    public void doFilter( ServletRequest req, ServletResponse res, FilterChain chain )\n+        throws IOException, ServletException {\n+        HttpServletRequest request = (HttpServletRequest) req;\n+        HttpServletResponse response = (HttpServletResponse) res;\n+        String requestURI = request.getRequestURI();\n+\n+        Pattern p = Pattern.compile(APP_PATH_PATTERN);\n+        Matcher m = p.matcher(requestURI);\n+\n+        if (m.find()) {\n+            String namespace = m.group(0);\n+            String appName = m.group(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81d6ebb8e178ca82d78130dea483cf48bff3e1c7"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Mjk0MzU0OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMToxOTozM1rOHFf_7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMToxOTozM1rOHFf_7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyOTE5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        String resourcePath = m.group(2);\n          \n          \n            \n                        String resourcePath = m.group( 2 );", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r475529198", "createdAt": "2020-08-24T11:19:33Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package org.hisp.dhis.servlet.filter;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+import lombok.extern.slf4j.Slf4j;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.context.request.ServletWebRequest;\n+import org.springframework.util.StreamUtils;\n+\n+import org.hisp.dhis.util.DateUtils;\n+import org.hisp.dhis.appmanager.App;\n+import org.hisp.dhis.appmanager.AppManager;\n+import org.hisp.dhis.appmanager.AppStatus;\n+\n+/**\n+ * @author Austin McGee <austin@dhis2.org>\n+ */\n+ @Slf4j\n+public class AppOverrideFilter\n+    implements Filter\n+{\n+    @Autowired\n+    private AppManager appManager;\n+\n+    @Autowired\n+    private ObjectMapper jsonMapper;\n+\n+    public static final String APP_PATH_PATTERN = \"^/dhis-web-(\" + String.join(\"|\", AppManager.BUNDLED_APPS) + \")/(.*)\";\n+\n+    // -------------------------------------------------------------------------\n+    // Filter implementation\n+    // -------------------------------------------------------------------------\n+\n+    @Override\n+    public void init( FilterConfig config )\n+    {\n+    }\n+\n+    // From AppController.java (some duplication)\n+    private void serveInstalledAppResource( App app, String resourcePath, HttpServletRequest request, HttpServletResponse response)\n+        throws IOException {\n+        // Get page requested\n+\n+        log.debug( String.format( \"Serving app resource: '%s'\", resourcePath ) );\n+\n+        // Handling of 'manifest.webapp'\n+        if ( \"manifest.webapp\".equals( resourcePath ) )\n+        {\n+            // If request was for manifest.webapp, check for * and replace with host\n+            if ( \"*\".equals( app.getActivities().getDhis().getHref() ) )\n+            {\n+                String contextPath = \"../\";\n+                log.debug( String.format( \"Manifest context path: '%s'\", contextPath ) );\n+                app.getActivities().getDhis().setHref( contextPath );\n+            }\n+\n+            jsonMapper.writeValue( response.getOutputStream(), app );\n+        }\n+        // Any other resource\n+        else\n+        {\n+            // Retrieve file\n+            Resource resource = appManager.getAppResource( app, resourcePath );\n+\n+            if ( resource == null )\n+            {\n+                response.sendError( HttpServletResponse.SC_NOT_FOUND );\n+                return;\n+            }\n+\n+            String filename = resource.getFilename();\n+            log.debug( String.format( \"App filename: '%s'\", filename ) );\n+\n+            if ( new ServletWebRequest( request, response ).checkNotModified( resource.lastModified() ) )\n+            {\n+                response.setStatus( HttpServletResponse.SC_NOT_MODIFIED );\n+                return;\n+            }\n+\n+            String mimeType = request.getSession().getServletContext().getMimeType( filename );\n+\n+            if ( mimeType != null )\n+            {\n+                response.setContentType( mimeType );\n+            }\n+\n+            response.setContentLength( (int) resource.contentLength() );\n+            response.setHeader( \"Last-Modified\", DateUtils.getHttpDateString( new Date( resource.lastModified() ) ) );\n+            StreamUtils.copy( resource.getInputStream(), response.getOutputStream() );\n+        }\n+    }\n+\n+    @Override\n+    public void doFilter( ServletRequest req, ServletResponse res, FilterChain chain )\n+        throws IOException, ServletException {\n+        HttpServletRequest request = (HttpServletRequest) req;\n+        HttpServletResponse response = (HttpServletResponse) res;\n+        String requestURI = request.getRequestURI();\n+\n+        Pattern p = Pattern.compile(APP_PATH_PATTERN);\n+        Matcher m = p.matcher(requestURI);\n+\n+        if (m.find()) {\n+            String namespace = m.group(0);\n+            String appName = m.group(1);\n+            String resourcePath = m.group(2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81d6ebb8e178ca82d78130dea483cf48bff3e1c7"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Mjk0MzkzOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMToxOTo0MVrOHFgAIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMToxOTo0MVrOHFgAIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyOTI0OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (m.find()) {\n          \n          \n            \n                    if ( m.find() ) {", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r475529248", "createdAt": "2020-08-24T11:19:41Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package org.hisp.dhis.servlet.filter;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+import lombok.extern.slf4j.Slf4j;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.context.request.ServletWebRequest;\n+import org.springframework.util.StreamUtils;\n+\n+import org.hisp.dhis.util.DateUtils;\n+import org.hisp.dhis.appmanager.App;\n+import org.hisp.dhis.appmanager.AppManager;\n+import org.hisp.dhis.appmanager.AppStatus;\n+\n+/**\n+ * @author Austin McGee <austin@dhis2.org>\n+ */\n+ @Slf4j\n+public class AppOverrideFilter\n+    implements Filter\n+{\n+    @Autowired\n+    private AppManager appManager;\n+\n+    @Autowired\n+    private ObjectMapper jsonMapper;\n+\n+    public static final String APP_PATH_PATTERN = \"^/dhis-web-(\" + String.join(\"|\", AppManager.BUNDLED_APPS) + \")/(.*)\";\n+\n+    // -------------------------------------------------------------------------\n+    // Filter implementation\n+    // -------------------------------------------------------------------------\n+\n+    @Override\n+    public void init( FilterConfig config )\n+    {\n+    }\n+\n+    // From AppController.java (some duplication)\n+    private void serveInstalledAppResource( App app, String resourcePath, HttpServletRequest request, HttpServletResponse response)\n+        throws IOException {\n+        // Get page requested\n+\n+        log.debug( String.format( \"Serving app resource: '%s'\", resourcePath ) );\n+\n+        // Handling of 'manifest.webapp'\n+        if ( \"manifest.webapp\".equals( resourcePath ) )\n+        {\n+            // If request was for manifest.webapp, check for * and replace with host\n+            if ( \"*\".equals( app.getActivities().getDhis().getHref() ) )\n+            {\n+                String contextPath = \"../\";\n+                log.debug( String.format( \"Manifest context path: '%s'\", contextPath ) );\n+                app.getActivities().getDhis().setHref( contextPath );\n+            }\n+\n+            jsonMapper.writeValue( response.getOutputStream(), app );\n+        }\n+        // Any other resource\n+        else\n+        {\n+            // Retrieve file\n+            Resource resource = appManager.getAppResource( app, resourcePath );\n+\n+            if ( resource == null )\n+            {\n+                response.sendError( HttpServletResponse.SC_NOT_FOUND );\n+                return;\n+            }\n+\n+            String filename = resource.getFilename();\n+            log.debug( String.format( \"App filename: '%s'\", filename ) );\n+\n+            if ( new ServletWebRequest( request, response ).checkNotModified( resource.lastModified() ) )\n+            {\n+                response.setStatus( HttpServletResponse.SC_NOT_MODIFIED );\n+                return;\n+            }\n+\n+            String mimeType = request.getSession().getServletContext().getMimeType( filename );\n+\n+            if ( mimeType != null )\n+            {\n+                response.setContentType( mimeType );\n+            }\n+\n+            response.setContentLength( (int) resource.contentLength() );\n+            response.setHeader( \"Last-Modified\", DateUtils.getHttpDateString( new Date( resource.lastModified() ) ) );\n+            StreamUtils.copy( resource.getInputStream(), response.getOutputStream() );\n+        }\n+    }\n+\n+    @Override\n+    public void doFilter( ServletRequest req, ServletResponse res, FilterChain chain )\n+        throws IOException, ServletException {\n+        HttpServletRequest request = (HttpServletRequest) req;\n+        HttpServletResponse response = (HttpServletResponse) res;\n+        String requestURI = request.getRequestURI();\n+\n+        Pattern p = Pattern.compile(APP_PATH_PATTERN);\n+        Matcher m = p.matcher(requestURI);\n+\n+        if (m.find()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81d6ebb8e178ca82d78130dea483cf48bff3e1c7"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Mjk0NDc3OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMToyMDowMFrOHFgAoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMToyMDowMFrOHFgAoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyOTM3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        log.info(\"AppOverrideFilter :: Matched for URI \" + requestURI);\n          \n          \n            \n                        log.info( \"AppOverrideFilter :: Matched for URI \" + requestURI );", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r475529376", "createdAt": "2020-08-24T11:20:00Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package org.hisp.dhis.servlet.filter;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+import lombok.extern.slf4j.Slf4j;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.context.request.ServletWebRequest;\n+import org.springframework.util.StreamUtils;\n+\n+import org.hisp.dhis.util.DateUtils;\n+import org.hisp.dhis.appmanager.App;\n+import org.hisp.dhis.appmanager.AppManager;\n+import org.hisp.dhis.appmanager.AppStatus;\n+\n+/**\n+ * @author Austin McGee <austin@dhis2.org>\n+ */\n+ @Slf4j\n+public class AppOverrideFilter\n+    implements Filter\n+{\n+    @Autowired\n+    private AppManager appManager;\n+\n+    @Autowired\n+    private ObjectMapper jsonMapper;\n+\n+    public static final String APP_PATH_PATTERN = \"^/dhis-web-(\" + String.join(\"|\", AppManager.BUNDLED_APPS) + \")/(.*)\";\n+\n+    // -------------------------------------------------------------------------\n+    // Filter implementation\n+    // -------------------------------------------------------------------------\n+\n+    @Override\n+    public void init( FilterConfig config )\n+    {\n+    }\n+\n+    // From AppController.java (some duplication)\n+    private void serveInstalledAppResource( App app, String resourcePath, HttpServletRequest request, HttpServletResponse response)\n+        throws IOException {\n+        // Get page requested\n+\n+        log.debug( String.format( \"Serving app resource: '%s'\", resourcePath ) );\n+\n+        // Handling of 'manifest.webapp'\n+        if ( \"manifest.webapp\".equals( resourcePath ) )\n+        {\n+            // If request was for manifest.webapp, check for * and replace with host\n+            if ( \"*\".equals( app.getActivities().getDhis().getHref() ) )\n+            {\n+                String contextPath = \"../\";\n+                log.debug( String.format( \"Manifest context path: '%s'\", contextPath ) );\n+                app.getActivities().getDhis().setHref( contextPath );\n+            }\n+\n+            jsonMapper.writeValue( response.getOutputStream(), app );\n+        }\n+        // Any other resource\n+        else\n+        {\n+            // Retrieve file\n+            Resource resource = appManager.getAppResource( app, resourcePath );\n+\n+            if ( resource == null )\n+            {\n+                response.sendError( HttpServletResponse.SC_NOT_FOUND );\n+                return;\n+            }\n+\n+            String filename = resource.getFilename();\n+            log.debug( String.format( \"App filename: '%s'\", filename ) );\n+\n+            if ( new ServletWebRequest( request, response ).checkNotModified( resource.lastModified() ) )\n+            {\n+                response.setStatus( HttpServletResponse.SC_NOT_MODIFIED );\n+                return;\n+            }\n+\n+            String mimeType = request.getSession().getServletContext().getMimeType( filename );\n+\n+            if ( mimeType != null )\n+            {\n+                response.setContentType( mimeType );\n+            }\n+\n+            response.setContentLength( (int) resource.contentLength() );\n+            response.setHeader( \"Last-Modified\", DateUtils.getHttpDateString( new Date( resource.lastModified() ) ) );\n+            StreamUtils.copy( resource.getInputStream(), response.getOutputStream() );\n+        }\n+    }\n+\n+    @Override\n+    public void doFilter( ServletRequest req, ServletResponse res, FilterChain chain )\n+        throws IOException, ServletException {\n+        HttpServletRequest request = (HttpServletRequest) req;\n+        HttpServletResponse response = (HttpServletResponse) res;\n+        String requestURI = request.getRequestURI();\n+\n+        Pattern p = Pattern.compile(APP_PATH_PATTERN);\n+        Matcher m = p.matcher(requestURI);\n+\n+        if (m.find()) {\n+            String namespace = m.group(0);\n+            String appName = m.group(1);\n+            String resourcePath = m.group(2);\n+\n+            log.info(\"AppOverrideFilter :: Matched for URI \" + requestURI);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81d6ebb8e178ca82d78130dea483cf48bff3e1c7"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Mjk0NTA3OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMToyMDowNlrOHFgAzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMToyMDowNlrOHFgAzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyOTQyMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        App app = appManager.getApp(appName);\n          \n          \n            \n                        App app = appManager.getApp( appName );", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r475529422", "createdAt": "2020-08-24T11:20:06Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package org.hisp.dhis.servlet.filter;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+import lombok.extern.slf4j.Slf4j;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.context.request.ServletWebRequest;\n+import org.springframework.util.StreamUtils;\n+\n+import org.hisp.dhis.util.DateUtils;\n+import org.hisp.dhis.appmanager.App;\n+import org.hisp.dhis.appmanager.AppManager;\n+import org.hisp.dhis.appmanager.AppStatus;\n+\n+/**\n+ * @author Austin McGee <austin@dhis2.org>\n+ */\n+ @Slf4j\n+public class AppOverrideFilter\n+    implements Filter\n+{\n+    @Autowired\n+    private AppManager appManager;\n+\n+    @Autowired\n+    private ObjectMapper jsonMapper;\n+\n+    public static final String APP_PATH_PATTERN = \"^/dhis-web-(\" + String.join(\"|\", AppManager.BUNDLED_APPS) + \")/(.*)\";\n+\n+    // -------------------------------------------------------------------------\n+    // Filter implementation\n+    // -------------------------------------------------------------------------\n+\n+    @Override\n+    public void init( FilterConfig config )\n+    {\n+    }\n+\n+    // From AppController.java (some duplication)\n+    private void serveInstalledAppResource( App app, String resourcePath, HttpServletRequest request, HttpServletResponse response)\n+        throws IOException {\n+        // Get page requested\n+\n+        log.debug( String.format( \"Serving app resource: '%s'\", resourcePath ) );\n+\n+        // Handling of 'manifest.webapp'\n+        if ( \"manifest.webapp\".equals( resourcePath ) )\n+        {\n+            // If request was for manifest.webapp, check for * and replace with host\n+            if ( \"*\".equals( app.getActivities().getDhis().getHref() ) )\n+            {\n+                String contextPath = \"../\";\n+                log.debug( String.format( \"Manifest context path: '%s'\", contextPath ) );\n+                app.getActivities().getDhis().setHref( contextPath );\n+            }\n+\n+            jsonMapper.writeValue( response.getOutputStream(), app );\n+        }\n+        // Any other resource\n+        else\n+        {\n+            // Retrieve file\n+            Resource resource = appManager.getAppResource( app, resourcePath );\n+\n+            if ( resource == null )\n+            {\n+                response.sendError( HttpServletResponse.SC_NOT_FOUND );\n+                return;\n+            }\n+\n+            String filename = resource.getFilename();\n+            log.debug( String.format( \"App filename: '%s'\", filename ) );\n+\n+            if ( new ServletWebRequest( request, response ).checkNotModified( resource.lastModified() ) )\n+            {\n+                response.setStatus( HttpServletResponse.SC_NOT_MODIFIED );\n+                return;\n+            }\n+\n+            String mimeType = request.getSession().getServletContext().getMimeType( filename );\n+\n+            if ( mimeType != null )\n+            {\n+                response.setContentType( mimeType );\n+            }\n+\n+            response.setContentLength( (int) resource.contentLength() );\n+            response.setHeader( \"Last-Modified\", DateUtils.getHttpDateString( new Date( resource.lastModified() ) ) );\n+            StreamUtils.copy( resource.getInputStream(), response.getOutputStream() );\n+        }\n+    }\n+\n+    @Override\n+    public void doFilter( ServletRequest req, ServletResponse res, FilterChain chain )\n+        throws IOException, ServletException {\n+        HttpServletRequest request = (HttpServletRequest) req;\n+        HttpServletResponse response = (HttpServletResponse) res;\n+        String requestURI = request.getRequestURI();\n+\n+        Pattern p = Pattern.compile(APP_PATH_PATTERN);\n+        Matcher m = p.matcher(requestURI);\n+\n+        if (m.find()) {\n+            String namespace = m.group(0);\n+            String appName = m.group(1);\n+            String resourcePath = m.group(2);\n+\n+            log.info(\"AppOverrideFilter :: Matched for URI \" + requestURI);\n+\n+            App app = appManager.getApp(appName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81d6ebb8e178ca82d78130dea483cf48bff3e1c7"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Mjk0NTU2OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMToyMDoxNVrOHFgBFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMToyMDoxNVrOHFgBFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyOTQ5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (app != null && app.getAppState() != AppStatus.DELETION_IN_PROGRESS) {\n          \n          \n            \n                        if ( app != null && app.getAppState() != AppStatus.DELETION_IN_PROGRESS ) {", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r475529495", "createdAt": "2020-08-24T11:20:15Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package org.hisp.dhis.servlet.filter;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+import lombok.extern.slf4j.Slf4j;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.context.request.ServletWebRequest;\n+import org.springframework.util.StreamUtils;\n+\n+import org.hisp.dhis.util.DateUtils;\n+import org.hisp.dhis.appmanager.App;\n+import org.hisp.dhis.appmanager.AppManager;\n+import org.hisp.dhis.appmanager.AppStatus;\n+\n+/**\n+ * @author Austin McGee <austin@dhis2.org>\n+ */\n+ @Slf4j\n+public class AppOverrideFilter\n+    implements Filter\n+{\n+    @Autowired\n+    private AppManager appManager;\n+\n+    @Autowired\n+    private ObjectMapper jsonMapper;\n+\n+    public static final String APP_PATH_PATTERN = \"^/dhis-web-(\" + String.join(\"|\", AppManager.BUNDLED_APPS) + \")/(.*)\";\n+\n+    // -------------------------------------------------------------------------\n+    // Filter implementation\n+    // -------------------------------------------------------------------------\n+\n+    @Override\n+    public void init( FilterConfig config )\n+    {\n+    }\n+\n+    // From AppController.java (some duplication)\n+    private void serveInstalledAppResource( App app, String resourcePath, HttpServletRequest request, HttpServletResponse response)\n+        throws IOException {\n+        // Get page requested\n+\n+        log.debug( String.format( \"Serving app resource: '%s'\", resourcePath ) );\n+\n+        // Handling of 'manifest.webapp'\n+        if ( \"manifest.webapp\".equals( resourcePath ) )\n+        {\n+            // If request was for manifest.webapp, check for * and replace with host\n+            if ( \"*\".equals( app.getActivities().getDhis().getHref() ) )\n+            {\n+                String contextPath = \"../\";\n+                log.debug( String.format( \"Manifest context path: '%s'\", contextPath ) );\n+                app.getActivities().getDhis().setHref( contextPath );\n+            }\n+\n+            jsonMapper.writeValue( response.getOutputStream(), app );\n+        }\n+        // Any other resource\n+        else\n+        {\n+            // Retrieve file\n+            Resource resource = appManager.getAppResource( app, resourcePath );\n+\n+            if ( resource == null )\n+            {\n+                response.sendError( HttpServletResponse.SC_NOT_FOUND );\n+                return;\n+            }\n+\n+            String filename = resource.getFilename();\n+            log.debug( String.format( \"App filename: '%s'\", filename ) );\n+\n+            if ( new ServletWebRequest( request, response ).checkNotModified( resource.lastModified() ) )\n+            {\n+                response.setStatus( HttpServletResponse.SC_NOT_MODIFIED );\n+                return;\n+            }\n+\n+            String mimeType = request.getSession().getServletContext().getMimeType( filename );\n+\n+            if ( mimeType != null )\n+            {\n+                response.setContentType( mimeType );\n+            }\n+\n+            response.setContentLength( (int) resource.contentLength() );\n+            response.setHeader( \"Last-Modified\", DateUtils.getHttpDateString( new Date( resource.lastModified() ) ) );\n+            StreamUtils.copy( resource.getInputStream(), response.getOutputStream() );\n+        }\n+    }\n+\n+    @Override\n+    public void doFilter( ServletRequest req, ServletResponse res, FilterChain chain )\n+        throws IOException, ServletException {\n+        HttpServletRequest request = (HttpServletRequest) req;\n+        HttpServletResponse response = (HttpServletResponse) res;\n+        String requestURI = request.getRequestURI();\n+\n+        Pattern p = Pattern.compile(APP_PATH_PATTERN);\n+        Matcher m = p.matcher(requestURI);\n+\n+        if (m.find()) {\n+            String namespace = m.group(0);\n+            String appName = m.group(1);\n+            String resourcePath = m.group(2);\n+\n+            log.info(\"AppOverrideFilter :: Matched for URI \" + requestURI);\n+\n+            App app = appManager.getApp(appName);\n+\n+            if (app != null && app.getAppState() != AppStatus.DELETION_IN_PROGRESS) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81d6ebb8e178ca82d78130dea483cf48bff3e1c7"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Mjk0NjA4OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMToyMDoyNlrOHFgBZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMToyMDoyNlrOHFgBZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyOTU3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            log.info(\"AppOverrideFilter :: Overridden app \" + appName + \" found, serving override\");\n          \n          \n            \n                            log.info( \"AppOverrideFilter :: Overridden app \" + appName + \" found, serving override\" );", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r475529575", "createdAt": "2020-08-24T11:20:26Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package org.hisp.dhis.servlet.filter;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+import lombok.extern.slf4j.Slf4j;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.context.request.ServletWebRequest;\n+import org.springframework.util.StreamUtils;\n+\n+import org.hisp.dhis.util.DateUtils;\n+import org.hisp.dhis.appmanager.App;\n+import org.hisp.dhis.appmanager.AppManager;\n+import org.hisp.dhis.appmanager.AppStatus;\n+\n+/**\n+ * @author Austin McGee <austin@dhis2.org>\n+ */\n+ @Slf4j\n+public class AppOverrideFilter\n+    implements Filter\n+{\n+    @Autowired\n+    private AppManager appManager;\n+\n+    @Autowired\n+    private ObjectMapper jsonMapper;\n+\n+    public static final String APP_PATH_PATTERN = \"^/dhis-web-(\" + String.join(\"|\", AppManager.BUNDLED_APPS) + \")/(.*)\";\n+\n+    // -------------------------------------------------------------------------\n+    // Filter implementation\n+    // -------------------------------------------------------------------------\n+\n+    @Override\n+    public void init( FilterConfig config )\n+    {\n+    }\n+\n+    // From AppController.java (some duplication)\n+    private void serveInstalledAppResource( App app, String resourcePath, HttpServletRequest request, HttpServletResponse response)\n+        throws IOException {\n+        // Get page requested\n+\n+        log.debug( String.format( \"Serving app resource: '%s'\", resourcePath ) );\n+\n+        // Handling of 'manifest.webapp'\n+        if ( \"manifest.webapp\".equals( resourcePath ) )\n+        {\n+            // If request was for manifest.webapp, check for * and replace with host\n+            if ( \"*\".equals( app.getActivities().getDhis().getHref() ) )\n+            {\n+                String contextPath = \"../\";\n+                log.debug( String.format( \"Manifest context path: '%s'\", contextPath ) );\n+                app.getActivities().getDhis().setHref( contextPath );\n+            }\n+\n+            jsonMapper.writeValue( response.getOutputStream(), app );\n+        }\n+        // Any other resource\n+        else\n+        {\n+            // Retrieve file\n+            Resource resource = appManager.getAppResource( app, resourcePath );\n+\n+            if ( resource == null )\n+            {\n+                response.sendError( HttpServletResponse.SC_NOT_FOUND );\n+                return;\n+            }\n+\n+            String filename = resource.getFilename();\n+            log.debug( String.format( \"App filename: '%s'\", filename ) );\n+\n+            if ( new ServletWebRequest( request, response ).checkNotModified( resource.lastModified() ) )\n+            {\n+                response.setStatus( HttpServletResponse.SC_NOT_MODIFIED );\n+                return;\n+            }\n+\n+            String mimeType = request.getSession().getServletContext().getMimeType( filename );\n+\n+            if ( mimeType != null )\n+            {\n+                response.setContentType( mimeType );\n+            }\n+\n+            response.setContentLength( (int) resource.contentLength() );\n+            response.setHeader( \"Last-Modified\", DateUtils.getHttpDateString( new Date( resource.lastModified() ) ) );\n+            StreamUtils.copy( resource.getInputStream(), response.getOutputStream() );\n+        }\n+    }\n+\n+    @Override\n+    public void doFilter( ServletRequest req, ServletResponse res, FilterChain chain )\n+        throws IOException, ServletException {\n+        HttpServletRequest request = (HttpServletRequest) req;\n+        HttpServletResponse response = (HttpServletResponse) res;\n+        String requestURI = request.getRequestURI();\n+\n+        Pattern p = Pattern.compile(APP_PATH_PATTERN);\n+        Matcher m = p.matcher(requestURI);\n+\n+        if (m.find()) {\n+            String namespace = m.group(0);\n+            String appName = m.group(1);\n+            String resourcePath = m.group(2);\n+\n+            log.info(\"AppOverrideFilter :: Matched for URI \" + requestURI);\n+\n+            App app = appManager.getApp(appName);\n+\n+            if (app != null && app.getAppState() != AppStatus.DELETION_IN_PROGRESS) {\n+                log.info(\"AppOverrideFilter :: Overridden app \" + appName + \" found, serving override\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81d6ebb8e178ca82d78130dea483cf48bff3e1c7"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Mjk0NjQ3OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMToyMDozNVrOHFgBqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMToyMDozNVrOHFgBqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyOTY0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            serveInstalledAppResource(app, resourcePath, request, response);\n          \n          \n            \n                            serveInstalledAppResource( app, resourcePath, request, response );", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r475529643", "createdAt": "2020-08-24T11:20:35Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package org.hisp.dhis.servlet.filter;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+import lombok.extern.slf4j.Slf4j;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.context.request.ServletWebRequest;\n+import org.springframework.util.StreamUtils;\n+\n+import org.hisp.dhis.util.DateUtils;\n+import org.hisp.dhis.appmanager.App;\n+import org.hisp.dhis.appmanager.AppManager;\n+import org.hisp.dhis.appmanager.AppStatus;\n+\n+/**\n+ * @author Austin McGee <austin@dhis2.org>\n+ */\n+ @Slf4j\n+public class AppOverrideFilter\n+    implements Filter\n+{\n+    @Autowired\n+    private AppManager appManager;\n+\n+    @Autowired\n+    private ObjectMapper jsonMapper;\n+\n+    public static final String APP_PATH_PATTERN = \"^/dhis-web-(\" + String.join(\"|\", AppManager.BUNDLED_APPS) + \")/(.*)\";\n+\n+    // -------------------------------------------------------------------------\n+    // Filter implementation\n+    // -------------------------------------------------------------------------\n+\n+    @Override\n+    public void init( FilterConfig config )\n+    {\n+    }\n+\n+    // From AppController.java (some duplication)\n+    private void serveInstalledAppResource( App app, String resourcePath, HttpServletRequest request, HttpServletResponse response)\n+        throws IOException {\n+        // Get page requested\n+\n+        log.debug( String.format( \"Serving app resource: '%s'\", resourcePath ) );\n+\n+        // Handling of 'manifest.webapp'\n+        if ( \"manifest.webapp\".equals( resourcePath ) )\n+        {\n+            // If request was for manifest.webapp, check for * and replace with host\n+            if ( \"*\".equals( app.getActivities().getDhis().getHref() ) )\n+            {\n+                String contextPath = \"../\";\n+                log.debug( String.format( \"Manifest context path: '%s'\", contextPath ) );\n+                app.getActivities().getDhis().setHref( contextPath );\n+            }\n+\n+            jsonMapper.writeValue( response.getOutputStream(), app );\n+        }\n+        // Any other resource\n+        else\n+        {\n+            // Retrieve file\n+            Resource resource = appManager.getAppResource( app, resourcePath );\n+\n+            if ( resource == null )\n+            {\n+                response.sendError( HttpServletResponse.SC_NOT_FOUND );\n+                return;\n+            }\n+\n+            String filename = resource.getFilename();\n+            log.debug( String.format( \"App filename: '%s'\", filename ) );\n+\n+            if ( new ServletWebRequest( request, response ).checkNotModified( resource.lastModified() ) )\n+            {\n+                response.setStatus( HttpServletResponse.SC_NOT_MODIFIED );\n+                return;\n+            }\n+\n+            String mimeType = request.getSession().getServletContext().getMimeType( filename );\n+\n+            if ( mimeType != null )\n+            {\n+                response.setContentType( mimeType );\n+            }\n+\n+            response.setContentLength( (int) resource.contentLength() );\n+            response.setHeader( \"Last-Modified\", DateUtils.getHttpDateString( new Date( resource.lastModified() ) ) );\n+            StreamUtils.copy( resource.getInputStream(), response.getOutputStream() );\n+        }\n+    }\n+\n+    @Override\n+    public void doFilter( ServletRequest req, ServletResponse res, FilterChain chain )\n+        throws IOException, ServletException {\n+        HttpServletRequest request = (HttpServletRequest) req;\n+        HttpServletResponse response = (HttpServletResponse) res;\n+        String requestURI = request.getRequestURI();\n+\n+        Pattern p = Pattern.compile(APP_PATH_PATTERN);\n+        Matcher m = p.matcher(requestURI);\n+\n+        if (m.find()) {\n+            String namespace = m.group(0);\n+            String appName = m.group(1);\n+            String resourcePath = m.group(2);\n+\n+            log.info(\"AppOverrideFilter :: Matched for URI \" + requestURI);\n+\n+            App app = appManager.getApp(appName);\n+\n+            if (app != null && app.getAppState() != AppStatus.DELETION_IN_PROGRESS) {\n+                log.info(\"AppOverrideFilter :: Overridden app \" + appName + \" found, serving override\");\n+                serveInstalledAppResource(app, resourcePath, request, response);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81d6ebb8e178ca82d78130dea483cf48bff3e1c7"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Mjk0NzMyOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMToyMDo1MlrOHFgCJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMToyMDo1MlrOHFgCJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyOTc2Ng==", "bodyText": "Comments with code", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r475529766", "createdAt": "2020-08-24T11:20:52Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package org.hisp.dhis.servlet.filter;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+import lombok.extern.slf4j.Slf4j;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.context.request.ServletWebRequest;\n+import org.springframework.util.StreamUtils;\n+\n+import org.hisp.dhis.util.DateUtils;\n+import org.hisp.dhis.appmanager.App;\n+import org.hisp.dhis.appmanager.AppManager;\n+import org.hisp.dhis.appmanager.AppStatus;\n+\n+/**\n+ * @author Austin McGee <austin@dhis2.org>\n+ */\n+ @Slf4j\n+public class AppOverrideFilter\n+    implements Filter\n+{\n+    @Autowired\n+    private AppManager appManager;\n+\n+    @Autowired\n+    private ObjectMapper jsonMapper;\n+\n+    public static final String APP_PATH_PATTERN = \"^/dhis-web-(\" + String.join(\"|\", AppManager.BUNDLED_APPS) + \")/(.*)\";\n+\n+    // -------------------------------------------------------------------------\n+    // Filter implementation\n+    // -------------------------------------------------------------------------\n+\n+    @Override\n+    public void init( FilterConfig config )\n+    {\n+    }\n+\n+    // From AppController.java (some duplication)\n+    private void serveInstalledAppResource( App app, String resourcePath, HttpServletRequest request, HttpServletResponse response)\n+        throws IOException {\n+        // Get page requested\n+\n+        log.debug( String.format( \"Serving app resource: '%s'\", resourcePath ) );\n+\n+        // Handling of 'manifest.webapp'\n+        if ( \"manifest.webapp\".equals( resourcePath ) )\n+        {\n+            // If request was for manifest.webapp, check for * and replace with host\n+            if ( \"*\".equals( app.getActivities().getDhis().getHref() ) )\n+            {\n+                String contextPath = \"../\";\n+                log.debug( String.format( \"Manifest context path: '%s'\", contextPath ) );\n+                app.getActivities().getDhis().setHref( contextPath );\n+            }\n+\n+            jsonMapper.writeValue( response.getOutputStream(), app );\n+        }\n+        // Any other resource\n+        else\n+        {\n+            // Retrieve file\n+            Resource resource = appManager.getAppResource( app, resourcePath );\n+\n+            if ( resource == null )\n+            {\n+                response.sendError( HttpServletResponse.SC_NOT_FOUND );\n+                return;\n+            }\n+\n+            String filename = resource.getFilename();\n+            log.debug( String.format( \"App filename: '%s'\", filename ) );\n+\n+            if ( new ServletWebRequest( request, response ).checkNotModified( resource.lastModified() ) )\n+            {\n+                response.setStatus( HttpServletResponse.SC_NOT_MODIFIED );\n+                return;\n+            }\n+\n+            String mimeType = request.getSession().getServletContext().getMimeType( filename );\n+\n+            if ( mimeType != null )\n+            {\n+                response.setContentType( mimeType );\n+            }\n+\n+            response.setContentLength( (int) resource.contentLength() );\n+            response.setHeader( \"Last-Modified\", DateUtils.getHttpDateString( new Date( resource.lastModified() ) ) );\n+            StreamUtils.copy( resource.getInputStream(), response.getOutputStream() );\n+        }\n+    }\n+\n+    @Override\n+    public void doFilter( ServletRequest req, ServletResponse res, FilterChain chain )\n+        throws IOException, ServletException {\n+        HttpServletRequest request = (HttpServletRequest) req;\n+        HttpServletResponse response = (HttpServletResponse) res;\n+        String requestURI = request.getRequestURI();\n+\n+        Pattern p = Pattern.compile(APP_PATH_PATTERN);\n+        Matcher m = p.matcher(requestURI);\n+\n+        if (m.find()) {\n+            String namespace = m.group(0);\n+            String appName = m.group(1);\n+            String resourcePath = m.group(2);\n+\n+            log.info(\"AppOverrideFilter :: Matched for URI \" + requestURI);\n+\n+            App app = appManager.getApp(appName);\n+\n+            if (app != null && app.getAppState() != AppStatus.DELETION_IN_PROGRESS) {\n+                log.info(\"AppOverrideFilter :: Overridden app \" + appName + \" found, serving override\");\n+                serveInstalledAppResource(app, resourcePath, request, response);\n+                // String newURI = \"/api/apps/\" + appName + requestURI.substring(namespace.length());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81d6ebb8e178ca82d78130dea483cf48bff3e1c7"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Mjk0ODAyOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMToyMTowOFrOHFgCjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMToyMTowOFrOHFgCjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyOTg3MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            log.info(\"AppOverrideFilter :: App \" + appName + \" not found, falling back to bundled app\");\n          \n          \n            \n                            log.info( \"AppOverrideFilter :: App \" + appName + \" not found, falling back to bundled app\" );", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r475529870", "createdAt": "2020-08-24T11:21:08Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package org.hisp.dhis.servlet.filter;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+import lombok.extern.slf4j.Slf4j;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.context.request.ServletWebRequest;\n+import org.springframework.util.StreamUtils;\n+\n+import org.hisp.dhis.util.DateUtils;\n+import org.hisp.dhis.appmanager.App;\n+import org.hisp.dhis.appmanager.AppManager;\n+import org.hisp.dhis.appmanager.AppStatus;\n+\n+/**\n+ * @author Austin McGee <austin@dhis2.org>\n+ */\n+ @Slf4j\n+public class AppOverrideFilter\n+    implements Filter\n+{\n+    @Autowired\n+    private AppManager appManager;\n+\n+    @Autowired\n+    private ObjectMapper jsonMapper;\n+\n+    public static final String APP_PATH_PATTERN = \"^/dhis-web-(\" + String.join(\"|\", AppManager.BUNDLED_APPS) + \")/(.*)\";\n+\n+    // -------------------------------------------------------------------------\n+    // Filter implementation\n+    // -------------------------------------------------------------------------\n+\n+    @Override\n+    public void init( FilterConfig config )\n+    {\n+    }\n+\n+    // From AppController.java (some duplication)\n+    private void serveInstalledAppResource( App app, String resourcePath, HttpServletRequest request, HttpServletResponse response)\n+        throws IOException {\n+        // Get page requested\n+\n+        log.debug( String.format( \"Serving app resource: '%s'\", resourcePath ) );\n+\n+        // Handling of 'manifest.webapp'\n+        if ( \"manifest.webapp\".equals( resourcePath ) )\n+        {\n+            // If request was for manifest.webapp, check for * and replace with host\n+            if ( \"*\".equals( app.getActivities().getDhis().getHref() ) )\n+            {\n+                String contextPath = \"../\";\n+                log.debug( String.format( \"Manifest context path: '%s'\", contextPath ) );\n+                app.getActivities().getDhis().setHref( contextPath );\n+            }\n+\n+            jsonMapper.writeValue( response.getOutputStream(), app );\n+        }\n+        // Any other resource\n+        else\n+        {\n+            // Retrieve file\n+            Resource resource = appManager.getAppResource( app, resourcePath );\n+\n+            if ( resource == null )\n+            {\n+                response.sendError( HttpServletResponse.SC_NOT_FOUND );\n+                return;\n+            }\n+\n+            String filename = resource.getFilename();\n+            log.debug( String.format( \"App filename: '%s'\", filename ) );\n+\n+            if ( new ServletWebRequest( request, response ).checkNotModified( resource.lastModified() ) )\n+            {\n+                response.setStatus( HttpServletResponse.SC_NOT_MODIFIED );\n+                return;\n+            }\n+\n+            String mimeType = request.getSession().getServletContext().getMimeType( filename );\n+\n+            if ( mimeType != null )\n+            {\n+                response.setContentType( mimeType );\n+            }\n+\n+            response.setContentLength( (int) resource.contentLength() );\n+            response.setHeader( \"Last-Modified\", DateUtils.getHttpDateString( new Date( resource.lastModified() ) ) );\n+            StreamUtils.copy( resource.getInputStream(), response.getOutputStream() );\n+        }\n+    }\n+\n+    @Override\n+    public void doFilter( ServletRequest req, ServletResponse res, FilterChain chain )\n+        throws IOException, ServletException {\n+        HttpServletRequest request = (HttpServletRequest) req;\n+        HttpServletResponse response = (HttpServletResponse) res;\n+        String requestURI = request.getRequestURI();\n+\n+        Pattern p = Pattern.compile(APP_PATH_PATTERN);\n+        Matcher m = p.matcher(requestURI);\n+\n+        if (m.find()) {\n+            String namespace = m.group(0);\n+            String appName = m.group(1);\n+            String resourcePath = m.group(2);\n+\n+            log.info(\"AppOverrideFilter :: Matched for URI \" + requestURI);\n+\n+            App app = appManager.getApp(appName);\n+\n+            if (app != null && app.getAppState() != AppStatus.DELETION_IN_PROGRESS) {\n+                log.info(\"AppOverrideFilter :: Overridden app \" + appName + \" found, serving override\");\n+                serveInstalledAppResource(app, resourcePath, request, response);\n+                // String newURI = \"/api/apps/\" + appName + requestURI.substring(namespace.length());\n+\n+                // req.getRequestDispatcher(newURI).forward(req, res);\n+                return;\n+            } else {\n+                log.info(\"AppOverrideFilter :: App \" + appName + \" not found, falling back to bundled app\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81d6ebb8e178ca82d78130dea483cf48bff3e1c7"}, "originalPosition": 166}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Mjk0ODM2OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMToyMToxNFrOHFgCww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMToyMToxNFrOHFgCww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyOTkyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    chain.doFilter(req, res);\n          \n          \n            \n                    chain.doFilter( req, res );", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r475529923", "createdAt": "2020-08-24T11:21:14Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package org.hisp.dhis.servlet.filter;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+import lombok.extern.slf4j.Slf4j;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.context.request.ServletWebRequest;\n+import org.springframework.util.StreamUtils;\n+\n+import org.hisp.dhis.util.DateUtils;\n+import org.hisp.dhis.appmanager.App;\n+import org.hisp.dhis.appmanager.AppManager;\n+import org.hisp.dhis.appmanager.AppStatus;\n+\n+/**\n+ * @author Austin McGee <austin@dhis2.org>\n+ */\n+ @Slf4j\n+public class AppOverrideFilter\n+    implements Filter\n+{\n+    @Autowired\n+    private AppManager appManager;\n+\n+    @Autowired\n+    private ObjectMapper jsonMapper;\n+\n+    public static final String APP_PATH_PATTERN = \"^/dhis-web-(\" + String.join(\"|\", AppManager.BUNDLED_APPS) + \")/(.*)\";\n+\n+    // -------------------------------------------------------------------------\n+    // Filter implementation\n+    // -------------------------------------------------------------------------\n+\n+    @Override\n+    public void init( FilterConfig config )\n+    {\n+    }\n+\n+    // From AppController.java (some duplication)\n+    private void serveInstalledAppResource( App app, String resourcePath, HttpServletRequest request, HttpServletResponse response)\n+        throws IOException {\n+        // Get page requested\n+\n+        log.debug( String.format( \"Serving app resource: '%s'\", resourcePath ) );\n+\n+        // Handling of 'manifest.webapp'\n+        if ( \"manifest.webapp\".equals( resourcePath ) )\n+        {\n+            // If request was for manifest.webapp, check for * and replace with host\n+            if ( \"*\".equals( app.getActivities().getDhis().getHref() ) )\n+            {\n+                String contextPath = \"../\";\n+                log.debug( String.format( \"Manifest context path: '%s'\", contextPath ) );\n+                app.getActivities().getDhis().setHref( contextPath );\n+            }\n+\n+            jsonMapper.writeValue( response.getOutputStream(), app );\n+        }\n+        // Any other resource\n+        else\n+        {\n+            // Retrieve file\n+            Resource resource = appManager.getAppResource( app, resourcePath );\n+\n+            if ( resource == null )\n+            {\n+                response.sendError( HttpServletResponse.SC_NOT_FOUND );\n+                return;\n+            }\n+\n+            String filename = resource.getFilename();\n+            log.debug( String.format( \"App filename: '%s'\", filename ) );\n+\n+            if ( new ServletWebRequest( request, response ).checkNotModified( resource.lastModified() ) )\n+            {\n+                response.setStatus( HttpServletResponse.SC_NOT_MODIFIED );\n+                return;\n+            }\n+\n+            String mimeType = request.getSession().getServletContext().getMimeType( filename );\n+\n+            if ( mimeType != null )\n+            {\n+                response.setContentType( mimeType );\n+            }\n+\n+            response.setContentLength( (int) resource.contentLength() );\n+            response.setHeader( \"Last-Modified\", DateUtils.getHttpDateString( new Date( resource.lastModified() ) ) );\n+            StreamUtils.copy( resource.getInputStream(), response.getOutputStream() );\n+        }\n+    }\n+\n+    @Override\n+    public void doFilter( ServletRequest req, ServletResponse res, FilterChain chain )\n+        throws IOException, ServletException {\n+        HttpServletRequest request = (HttpServletRequest) req;\n+        HttpServletResponse response = (HttpServletResponse) res;\n+        String requestURI = request.getRequestURI();\n+\n+        Pattern p = Pattern.compile(APP_PATH_PATTERN);\n+        Matcher m = p.matcher(requestURI);\n+\n+        if (m.find()) {\n+            String namespace = m.group(0);\n+            String appName = m.group(1);\n+            String resourcePath = m.group(2);\n+\n+            log.info(\"AppOverrideFilter :: Matched for URI \" + requestURI);\n+\n+            App app = appManager.getApp(appName);\n+\n+            if (app != null && app.getAppState() != AppStatus.DELETION_IN_PROGRESS) {\n+                log.info(\"AppOverrideFilter :: Overridden app \" + appName + \" found, serving override\");\n+                serveInstalledAppResource(app, resourcePath, request, response);\n+                // String newURI = \"/api/apps/\" + appName + requestURI.substring(namespace.length());\n+\n+                // req.getRequestDispatcher(newURI).forward(req, res);\n+                return;\n+            } else {\n+                log.info(\"AppOverrideFilter :: App \" + appName + \" not found, falling back to bundled app\");\n+            }\n+        }\n+\n+        chain.doFilter(req, res);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81d6ebb8e178ca82d78130dea483cf48bff3e1c7"}, "originalPosition": 170}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Mjk5OTY1OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/appmanager/AppManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTozNjo1M1rOHFghLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMTowMzoxNlrOHGS31w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUzNzcwOA==", "bodyText": "Ideally this wouldn't duplicate the app cloning list in dhis-web-apps, but I don't think it would be trivial to refactor them at the moment.  Eventually this should go away when we move to the /apps/xyz app base", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r475537708", "createdAt": "2020-08-24T11:36:53Z", "author": {"login": "amcgee"}, "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/appmanager/AppManager.java", "diffHunk": "@@ -36,13 +36,49 @@\n import java.util.Collection;\n import java.util.List;\n \n+import com.google.common.collect.ImmutableSet;\n+\n /**\n  * @author Saptarshi Purkayastha\n  */\n public interface AppManager\n {\n     String ID = AppManager.class.getName();\n \n+    ImmutableSet<String> BUNDLED_APPS = ImmutableSet.of(\n+        // Javascript apps\n+        \"app-management\",\n+        \"cache-cleaner\",\n+        \"capture\",\n+        \"dashboard\",\n+        \"data-administration\",\n+        \"data-visualizer\",\n+        \"data-quality\",\n+        \"datastore\",\n+        \"event-reports\",\n+        \"event-visualizer\",\n+        \"import-export\",\n+        \"interpretation\",\n+        \"maintenance\",\n+        \"maps\",\n+        \"menu-management\",\n+        \"messaging\",\n+        \"pivot\",\n+        \"reports\",\n+        \"scheduler\",\n+        \"settings\",\n+        \"tracker-capture\",\n+        \"translations\",\n+        \"usage-analytics\",\n+        \"user\",\n+        \"user-profile\",\n+        \n+        // Struts apps\n+        \"approval\",\n+        \"dataentry\",\n+        \"maintenance-mobile\"\n+    );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45690f03da621303a09cc548a16fdeff4ad198a5"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM2MjcxMQ==", "bodyText": "Agreed.", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r476362711", "createdAt": "2020-08-25T11:03:16Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/appmanager/AppManager.java", "diffHunk": "@@ -36,13 +36,49 @@\n import java.util.Collection;\n import java.util.List;\n \n+import com.google.common.collect.ImmutableSet;\n+\n /**\n  * @author Saptarshi Purkayastha\n  */\n public interface AppManager\n {\n     String ID = AppManager.class.getName();\n \n+    ImmutableSet<String> BUNDLED_APPS = ImmutableSet.of(\n+        // Javascript apps\n+        \"app-management\",\n+        \"cache-cleaner\",\n+        \"capture\",\n+        \"dashboard\",\n+        \"data-administration\",\n+        \"data-visualizer\",\n+        \"data-quality\",\n+        \"datastore\",\n+        \"event-reports\",\n+        \"event-visualizer\",\n+        \"import-export\",\n+        \"interpretation\",\n+        \"maintenance\",\n+        \"maps\",\n+        \"menu-management\",\n+        \"messaging\",\n+        \"pivot\",\n+        \"reports\",\n+        \"scheduler\",\n+        \"settings\",\n+        \"tracker-capture\",\n+        \"translations\",\n+        \"usage-analytics\",\n+        \"user\",\n+        \"user-profile\",\n+        \n+        // Struts apps\n+        \"approval\",\n+        \"dataentry\",\n+        \"maintenance-mobile\"\n+    );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUzNzcwOA=="}, "originalCommit": {"oid": "45690f03da621303a09cc548a16fdeff4ad198a5"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzI1Nzk0OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNzoxMzo1MVrOHGKlfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxODo0ODoxNFrOHGlRZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIyNjk0MA==", "bodyText": "Apply DHIS 2 code style.", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r476226940", "createdAt": "2020-08-25T07:13:51Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package org.hisp.dhis.servlet.filter;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+import lombok.extern.slf4j.Slf4j;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.context.request.ServletWebRequest;\n+import org.springframework.util.StreamUtils;\n+\n+import org.hisp.dhis.util.DateUtils;\n+import org.hisp.dhis.appmanager.App;\n+import org.hisp.dhis.appmanager.AppManager;\n+import org.hisp.dhis.appmanager.AppStatus;\n+\n+/**\n+ * @author Austin McGee <austin@dhis2.org>\n+ */\n+ @Slf4j\n+public class AppOverrideFilter\n+    implements Filter\n+{\n+    @Autowired\n+    private AppManager appManager;\n+\n+    @Autowired\n+    private ObjectMapper jsonMapper;\n+\n+    public static final String APP_PATH_PATTERN = \"^/dhis-web-(\" + String.join(\"|\", AppManager.BUNDLED_APPS) + \")/(.*)\";\n+\n+    // -------------------------------------------------------------------------\n+    // Filter implementation\n+    // -------------------------------------------------------------------------\n+\n+    @Override\n+    public void init( FilterConfig config )\n+    {\n+    }\n+\n+    // From AppController.java (some duplication)\n+    private void serveInstalledAppResource( App app, String resourcePath, HttpServletRequest request, HttpServletResponse response )\n+        throws IOException {\n+        // Get page requested\n+\n+        log.debug( String.format( \"Serving app resource: '%s'\", resourcePath ) );\n+\n+        // Handling of 'manifest.webapp'\n+        if ( \"manifest.webapp\".equals( resourcePath ) )\n+        {\n+            // If request was for manifest.webapp, check for * and replace with host\n+            if ( \"*\".equals( app.getActivities().getDhis().getHref() ) )\n+            {\n+                String contextPath = \"../\";\n+                log.debug( String.format( \"Manifest context path: '%s'\", contextPath ) );\n+                app.getActivities().getDhis().setHref( contextPath );\n+            }\n+\n+            jsonMapper.writeValue( response.getOutputStream(), app );\n+        }\n+        // Any other resource\n+        else\n+        {\n+            // Retrieve file\n+            Resource resource = appManager.getAppResource( app, resourcePath );\n+\n+            if ( resource == null )\n+            {\n+                response.sendError( HttpServletResponse.SC_NOT_FOUND );\n+                return;\n+            }\n+\n+            String filename = resource.getFilename();\n+            log.debug( String.format( \"App filename: '%s'\", filename ) );\n+\n+            if ( new ServletWebRequest( request, response ).checkNotModified( resource.lastModified() ) )\n+            {\n+                response.setStatus( HttpServletResponse.SC_NOT_MODIFIED );\n+                return;\n+            }\n+\n+            String mimeType = request.getSession().getServletContext().getMimeType( filename );\n+\n+            if ( mimeType != null )\n+            {\n+                response.setContentType( mimeType );\n+            }\n+\n+            response.setContentLength( (int) resource.contentLength() );\n+            response.setHeader( \"Last-Modified\", DateUtils.getHttpDateString( new Date( resource.lastModified() ) ) );\n+            StreamUtils.copy( resource.getInputStream(), response.getOutputStream() );\n+        }\n+    }\n+\n+    @Override\n+    public void doFilter( ServletRequest req, ServletResponse res, FilterChain chain )\n+        throws IOException, ServletException {\n+        HttpServletRequest request = (HttpServletRequest) req;\n+        HttpServletResponse response = (HttpServletResponse) res;\n+        String requestURI = request.getRequestURI();\n+\n+        Pattern p = Pattern.compile( APP_PATH_PATTERN );\n+        Matcher m = p.matcher( requestURI );\n+\n+        if ( m.find() ) {\n+            String namespace = m.group( 0 );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45690f03da621303a09cc548a16fdeff4ad198a5"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIzMTUyOA==", "bodyText": "Where is the code style documented?  Is there a lint tool?  @stian-sandvold made the code-style recommendation (spaces around the 0) on this line", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r476231528", "createdAt": "2020-08-25T07:22:34Z", "author": {"login": "amcgee"}, "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package org.hisp.dhis.servlet.filter;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+import lombok.extern.slf4j.Slf4j;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.context.request.ServletWebRequest;\n+import org.springframework.util.StreamUtils;\n+\n+import org.hisp.dhis.util.DateUtils;\n+import org.hisp.dhis.appmanager.App;\n+import org.hisp.dhis.appmanager.AppManager;\n+import org.hisp.dhis.appmanager.AppStatus;\n+\n+/**\n+ * @author Austin McGee <austin@dhis2.org>\n+ */\n+ @Slf4j\n+public class AppOverrideFilter\n+    implements Filter\n+{\n+    @Autowired\n+    private AppManager appManager;\n+\n+    @Autowired\n+    private ObjectMapper jsonMapper;\n+\n+    public static final String APP_PATH_PATTERN = \"^/dhis-web-(\" + String.join(\"|\", AppManager.BUNDLED_APPS) + \")/(.*)\";\n+\n+    // -------------------------------------------------------------------------\n+    // Filter implementation\n+    // -------------------------------------------------------------------------\n+\n+    @Override\n+    public void init( FilterConfig config )\n+    {\n+    }\n+\n+    // From AppController.java (some duplication)\n+    private void serveInstalledAppResource( App app, String resourcePath, HttpServletRequest request, HttpServletResponse response )\n+        throws IOException {\n+        // Get page requested\n+\n+        log.debug( String.format( \"Serving app resource: '%s'\", resourcePath ) );\n+\n+        // Handling of 'manifest.webapp'\n+        if ( \"manifest.webapp\".equals( resourcePath ) )\n+        {\n+            // If request was for manifest.webapp, check for * and replace with host\n+            if ( \"*\".equals( app.getActivities().getDhis().getHref() ) )\n+            {\n+                String contextPath = \"../\";\n+                log.debug( String.format( \"Manifest context path: '%s'\", contextPath ) );\n+                app.getActivities().getDhis().setHref( contextPath );\n+            }\n+\n+            jsonMapper.writeValue( response.getOutputStream(), app );\n+        }\n+        // Any other resource\n+        else\n+        {\n+            // Retrieve file\n+            Resource resource = appManager.getAppResource( app, resourcePath );\n+\n+            if ( resource == null )\n+            {\n+                response.sendError( HttpServletResponse.SC_NOT_FOUND );\n+                return;\n+            }\n+\n+            String filename = resource.getFilename();\n+            log.debug( String.format( \"App filename: '%s'\", filename ) );\n+\n+            if ( new ServletWebRequest( request, response ).checkNotModified( resource.lastModified() ) )\n+            {\n+                response.setStatus( HttpServletResponse.SC_NOT_MODIFIED );\n+                return;\n+            }\n+\n+            String mimeType = request.getSession().getServletContext().getMimeType( filename );\n+\n+            if ( mimeType != null )\n+            {\n+                response.setContentType( mimeType );\n+            }\n+\n+            response.setContentLength( (int) resource.contentLength() );\n+            response.setHeader( \"Last-Modified\", DateUtils.getHttpDateString( new Date( resource.lastModified() ) ) );\n+            StreamUtils.copy( resource.getInputStream(), response.getOutputStream() );\n+        }\n+    }\n+\n+    @Override\n+    public void doFilter( ServletRequest req, ServletResponse res, FilterChain chain )\n+        throws IOException, ServletException {\n+        HttpServletRequest request = (HttpServletRequest) req;\n+        HttpServletResponse response = (HttpServletResponse) res;\n+        String requestURI = request.getRequestURI();\n+\n+        Pattern p = Pattern.compile( APP_PATH_PATTERN );\n+        Matcher m = p.matcher( requestURI );\n+\n+        if ( m.find() ) {\n+            String namespace = m.group( 0 );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIyNjk0MA=="}, "originalCommit": {"oid": "45690f03da621303a09cc548a16fdeff4ad198a5"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM2NTk5OQ==", "bodyText": "You can find info here: https://github.com/dhis2/wow-backend/blob/master/guides/code_formatting.md", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r476365999", "createdAt": "2020-08-25T11:10:02Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package org.hisp.dhis.servlet.filter;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+import lombok.extern.slf4j.Slf4j;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.context.request.ServletWebRequest;\n+import org.springframework.util.StreamUtils;\n+\n+import org.hisp.dhis.util.DateUtils;\n+import org.hisp.dhis.appmanager.App;\n+import org.hisp.dhis.appmanager.AppManager;\n+import org.hisp.dhis.appmanager.AppStatus;\n+\n+/**\n+ * @author Austin McGee <austin@dhis2.org>\n+ */\n+ @Slf4j\n+public class AppOverrideFilter\n+    implements Filter\n+{\n+    @Autowired\n+    private AppManager appManager;\n+\n+    @Autowired\n+    private ObjectMapper jsonMapper;\n+\n+    public static final String APP_PATH_PATTERN = \"^/dhis-web-(\" + String.join(\"|\", AppManager.BUNDLED_APPS) + \")/(.*)\";\n+\n+    // -------------------------------------------------------------------------\n+    // Filter implementation\n+    // -------------------------------------------------------------------------\n+\n+    @Override\n+    public void init( FilterConfig config )\n+    {\n+    }\n+\n+    // From AppController.java (some duplication)\n+    private void serveInstalledAppResource( App app, String resourcePath, HttpServletRequest request, HttpServletResponse response )\n+        throws IOException {\n+        // Get page requested\n+\n+        log.debug( String.format( \"Serving app resource: '%s'\", resourcePath ) );\n+\n+        // Handling of 'manifest.webapp'\n+        if ( \"manifest.webapp\".equals( resourcePath ) )\n+        {\n+            // If request was for manifest.webapp, check for * and replace with host\n+            if ( \"*\".equals( app.getActivities().getDhis().getHref() ) )\n+            {\n+                String contextPath = \"../\";\n+                log.debug( String.format( \"Manifest context path: '%s'\", contextPath ) );\n+                app.getActivities().getDhis().setHref( contextPath );\n+            }\n+\n+            jsonMapper.writeValue( response.getOutputStream(), app );\n+        }\n+        // Any other resource\n+        else\n+        {\n+            // Retrieve file\n+            Resource resource = appManager.getAppResource( app, resourcePath );\n+\n+            if ( resource == null )\n+            {\n+                response.sendError( HttpServletResponse.SC_NOT_FOUND );\n+                return;\n+            }\n+\n+            String filename = resource.getFilename();\n+            log.debug( String.format( \"App filename: '%s'\", filename ) );\n+\n+            if ( new ServletWebRequest( request, response ).checkNotModified( resource.lastModified() ) )\n+            {\n+                response.setStatus( HttpServletResponse.SC_NOT_MODIFIED );\n+                return;\n+            }\n+\n+            String mimeType = request.getSession().getServletContext().getMimeType( filename );\n+\n+            if ( mimeType != null )\n+            {\n+                response.setContentType( mimeType );\n+            }\n+\n+            response.setContentLength( (int) resource.contentLength() );\n+            response.setHeader( \"Last-Modified\", DateUtils.getHttpDateString( new Date( resource.lastModified() ) ) );\n+            StreamUtils.copy( resource.getInputStream(), response.getOutputStream() );\n+        }\n+    }\n+\n+    @Override\n+    public void doFilter( ServletRequest req, ServletResponse res, FilterChain chain )\n+        throws IOException, ServletException {\n+        HttpServletRequest request = (HttpServletRequest) req;\n+        HttpServletResponse response = (HttpServletResponse) res;\n+        String requestURI = request.getRequestURI();\n+\n+        Pattern p = Pattern.compile( APP_PATH_PATTERN );\n+        Matcher m = p.matcher( requestURI );\n+\n+        if ( m.find() ) {\n+            String namespace = m.group( 0 );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIyNjk0MA=="}, "originalCommit": {"oid": "45690f03da621303a09cc548a16fdeff4ad198a5"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM2NjI0OQ==", "bodyText": "Here specifically, brackets go on new lines.", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r476366249", "createdAt": "2020-08-25T11:10:33Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package org.hisp.dhis.servlet.filter;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+import lombok.extern.slf4j.Slf4j;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.context.request.ServletWebRequest;\n+import org.springframework.util.StreamUtils;\n+\n+import org.hisp.dhis.util.DateUtils;\n+import org.hisp.dhis.appmanager.App;\n+import org.hisp.dhis.appmanager.AppManager;\n+import org.hisp.dhis.appmanager.AppStatus;\n+\n+/**\n+ * @author Austin McGee <austin@dhis2.org>\n+ */\n+ @Slf4j\n+public class AppOverrideFilter\n+    implements Filter\n+{\n+    @Autowired\n+    private AppManager appManager;\n+\n+    @Autowired\n+    private ObjectMapper jsonMapper;\n+\n+    public static final String APP_PATH_PATTERN = \"^/dhis-web-(\" + String.join(\"|\", AppManager.BUNDLED_APPS) + \")/(.*)\";\n+\n+    // -------------------------------------------------------------------------\n+    // Filter implementation\n+    // -------------------------------------------------------------------------\n+\n+    @Override\n+    public void init( FilterConfig config )\n+    {\n+    }\n+\n+    // From AppController.java (some duplication)\n+    private void serveInstalledAppResource( App app, String resourcePath, HttpServletRequest request, HttpServletResponse response )\n+        throws IOException {\n+        // Get page requested\n+\n+        log.debug( String.format( \"Serving app resource: '%s'\", resourcePath ) );\n+\n+        // Handling of 'manifest.webapp'\n+        if ( \"manifest.webapp\".equals( resourcePath ) )\n+        {\n+            // If request was for manifest.webapp, check for * and replace with host\n+            if ( \"*\".equals( app.getActivities().getDhis().getHref() ) )\n+            {\n+                String contextPath = \"../\";\n+                log.debug( String.format( \"Manifest context path: '%s'\", contextPath ) );\n+                app.getActivities().getDhis().setHref( contextPath );\n+            }\n+\n+            jsonMapper.writeValue( response.getOutputStream(), app );\n+        }\n+        // Any other resource\n+        else\n+        {\n+            // Retrieve file\n+            Resource resource = appManager.getAppResource( app, resourcePath );\n+\n+            if ( resource == null )\n+            {\n+                response.sendError( HttpServletResponse.SC_NOT_FOUND );\n+                return;\n+            }\n+\n+            String filename = resource.getFilename();\n+            log.debug( String.format( \"App filename: '%s'\", filename ) );\n+\n+            if ( new ServletWebRequest( request, response ).checkNotModified( resource.lastModified() ) )\n+            {\n+                response.setStatus( HttpServletResponse.SC_NOT_MODIFIED );\n+                return;\n+            }\n+\n+            String mimeType = request.getSession().getServletContext().getMimeType( filename );\n+\n+            if ( mimeType != null )\n+            {\n+                response.setContentType( mimeType );\n+            }\n+\n+            response.setContentLength( (int) resource.contentLength() );\n+            response.setHeader( \"Last-Modified\", DateUtils.getHttpDateString( new Date( resource.lastModified() ) ) );\n+            StreamUtils.copy( resource.getInputStream(), response.getOutputStream() );\n+        }\n+    }\n+\n+    @Override\n+    public void doFilter( ServletRequest req, ServletResponse res, FilterChain chain )\n+        throws IOException, ServletException {\n+        HttpServletRequest request = (HttpServletRequest) req;\n+        HttpServletResponse response = (HttpServletResponse) res;\n+        String requestURI = request.getRequestURI();\n+\n+        Pattern p = Pattern.compile( APP_PATH_PATTERN );\n+        Matcher m = p.matcher( requestURI );\n+\n+        if ( m.find() ) {\n+            String namespace = m.group( 0 );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIyNjk0MA=="}, "originalCommit": {"oid": "45690f03da621303a09cc548a16fdeff4ad198a5"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY2NDE2Ng==", "bodyText": "Applied codeformatting", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r476664166", "createdAt": "2020-08-25T18:48:14Z", "author": {"login": "amcgee"}, "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package org.hisp.dhis.servlet.filter;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+import lombok.extern.slf4j.Slf4j;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.context.request.ServletWebRequest;\n+import org.springframework.util.StreamUtils;\n+\n+import org.hisp.dhis.util.DateUtils;\n+import org.hisp.dhis.appmanager.App;\n+import org.hisp.dhis.appmanager.AppManager;\n+import org.hisp.dhis.appmanager.AppStatus;\n+\n+/**\n+ * @author Austin McGee <austin@dhis2.org>\n+ */\n+ @Slf4j\n+public class AppOverrideFilter\n+    implements Filter\n+{\n+    @Autowired\n+    private AppManager appManager;\n+\n+    @Autowired\n+    private ObjectMapper jsonMapper;\n+\n+    public static final String APP_PATH_PATTERN = \"^/dhis-web-(\" + String.join(\"|\", AppManager.BUNDLED_APPS) + \")/(.*)\";\n+\n+    // -------------------------------------------------------------------------\n+    // Filter implementation\n+    // -------------------------------------------------------------------------\n+\n+    @Override\n+    public void init( FilterConfig config )\n+    {\n+    }\n+\n+    // From AppController.java (some duplication)\n+    private void serveInstalledAppResource( App app, String resourcePath, HttpServletRequest request, HttpServletResponse response )\n+        throws IOException {\n+        // Get page requested\n+\n+        log.debug( String.format( \"Serving app resource: '%s'\", resourcePath ) );\n+\n+        // Handling of 'manifest.webapp'\n+        if ( \"manifest.webapp\".equals( resourcePath ) )\n+        {\n+            // If request was for manifest.webapp, check for * and replace with host\n+            if ( \"*\".equals( app.getActivities().getDhis().getHref() ) )\n+            {\n+                String contextPath = \"../\";\n+                log.debug( String.format( \"Manifest context path: '%s'\", contextPath ) );\n+                app.getActivities().getDhis().setHref( contextPath );\n+            }\n+\n+            jsonMapper.writeValue( response.getOutputStream(), app );\n+        }\n+        // Any other resource\n+        else\n+        {\n+            // Retrieve file\n+            Resource resource = appManager.getAppResource( app, resourcePath );\n+\n+            if ( resource == null )\n+            {\n+                response.sendError( HttpServletResponse.SC_NOT_FOUND );\n+                return;\n+            }\n+\n+            String filename = resource.getFilename();\n+            log.debug( String.format( \"App filename: '%s'\", filename ) );\n+\n+            if ( new ServletWebRequest( request, response ).checkNotModified( resource.lastModified() ) )\n+            {\n+                response.setStatus( HttpServletResponse.SC_NOT_MODIFIED );\n+                return;\n+            }\n+\n+            String mimeType = request.getSession().getServletContext().getMimeType( filename );\n+\n+            if ( mimeType != null )\n+            {\n+                response.setContentType( mimeType );\n+            }\n+\n+            response.setContentLength( (int) resource.contentLength() );\n+            response.setHeader( \"Last-Modified\", DateUtils.getHttpDateString( new Date( resource.lastModified() ) ) );\n+            StreamUtils.copy( resource.getInputStream(), response.getOutputStream() );\n+        }\n+    }\n+\n+    @Override\n+    public void doFilter( ServletRequest req, ServletResponse res, FilterChain chain )\n+        throws IOException, ServletException {\n+        HttpServletRequest request = (HttpServletRequest) req;\n+        HttpServletResponse response = (HttpServletResponse) res;\n+        String requestURI = request.getRequestURI();\n+\n+        Pattern p = Pattern.compile( APP_PATH_PATTERN );\n+        Matcher m = p.matcher( requestURI );\n+\n+        if ( m.find() ) {\n+            String namespace = m.group( 0 );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIyNjk0MA=="}, "originalCommit": {"oid": "45690f03da621303a09cc548a16fdeff4ad198a5"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3ODEzODE4OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMTowNjoyNVrOHGS90w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxODo0ODowMFrOHGlQ-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM2NDI0Mw==", "bodyText": "Perhaps some defensive null checks here to see if activities is actually defined to avoid NullPointerException, with some logging maybe.", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r476364243", "createdAt": "2020-08-25T11:06:25Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package org.hisp.dhis.servlet.filter;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+import lombok.extern.slf4j.Slf4j;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StreamUtils;\n+import org.springframework.web.context.request.ServletWebRequest;\n+\n+import org.hisp.dhis.util.DateUtils;\n+import org.hisp.dhis.appmanager.App;\n+import org.hisp.dhis.appmanager.AppManager;\n+import org.hisp.dhis.appmanager.AppStatus;\n+\n+/**\n+ * @author Austin McGee <austin@dhis2.org>\n+ */\n+ @Slf4j\n+ @Component\n+public class AppOverrideFilter\n+    implements Filter\n+{\n+    @Autowired\n+    private AppManager appManager;\n+\n+    @Autowired\n+    private ObjectMapper jsonMapper;\n+\n+    public static final String APP_PATH_PATTERN = \"^/dhis-web-(\" + String.join(\"|\", AppManager.BUNDLED_APPS) + \")/(.*)\";\n+\n+    // -------------------------------------------------------------------------\n+    // Filter implementation\n+    // -------------------------------------------------------------------------\n+\n+    @Override\n+    public void init( FilterConfig config )\n+    {\n+    }\n+\n+    // From AppController.java (some duplication)\n+    private void serveInstalledAppResource( App app, String resourcePath, HttpServletRequest request, HttpServletResponse response )\n+        throws IOException {\n+        // Get page requested\n+\n+        log.debug( String.format( \"Serving app resource: '%s'\", resourcePath ) );\n+\n+        // Handling of 'manifest.webapp'\n+        if ( \"manifest.webapp\".equals( resourcePath ) )\n+        {\n+            // If request was for manifest.webapp, check for * and replace with host\n+            if ( \"*\".equals( app.getActivities().getDhis().getHref() ) )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "983a3884a71eff0482cf6b41d50ab21ecd2cf0d7"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY2MzY3NQ==", "bodyText": "Added", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r476663675", "createdAt": "2020-08-25T18:47:21Z", "author": {"login": "amcgee"}, "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package org.hisp.dhis.servlet.filter;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+import lombok.extern.slf4j.Slf4j;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StreamUtils;\n+import org.springframework.web.context.request.ServletWebRequest;\n+\n+import org.hisp.dhis.util.DateUtils;\n+import org.hisp.dhis.appmanager.App;\n+import org.hisp.dhis.appmanager.AppManager;\n+import org.hisp.dhis.appmanager.AppStatus;\n+\n+/**\n+ * @author Austin McGee <austin@dhis2.org>\n+ */\n+ @Slf4j\n+ @Component\n+public class AppOverrideFilter\n+    implements Filter\n+{\n+    @Autowired\n+    private AppManager appManager;\n+\n+    @Autowired\n+    private ObjectMapper jsonMapper;\n+\n+    public static final String APP_PATH_PATTERN = \"^/dhis-web-(\" + String.join(\"|\", AppManager.BUNDLED_APPS) + \")/(.*)\";\n+\n+    // -------------------------------------------------------------------------\n+    // Filter implementation\n+    // -------------------------------------------------------------------------\n+\n+    @Override\n+    public void init( FilterConfig config )\n+    {\n+    }\n+\n+    // From AppController.java (some duplication)\n+    private void serveInstalledAppResource( App app, String resourcePath, HttpServletRequest request, HttpServletResponse response )\n+        throws IOException {\n+        // Get page requested\n+\n+        log.debug( String.format( \"Serving app resource: '%s'\", resourcePath ) );\n+\n+        // Handling of 'manifest.webapp'\n+        if ( \"manifest.webapp\".equals( resourcePath ) )\n+        {\n+            // If request was for manifest.webapp, check for * and replace with host\n+            if ( \"*\".equals( app.getActivities().getDhis().getHref() ) )", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM2NDI0Mw=="}, "originalCommit": {"oid": "983a3884a71eff0482cf6b41d50ab21ecd2cf0d7"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY2NDA1OQ==", "bodyText": "Also added to the existing code in AppController.java which was missing those checks (and copied here)", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r476664059", "createdAt": "2020-08-25T18:48:00Z", "author": {"login": "amcgee"}, "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package org.hisp.dhis.servlet.filter;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+import lombok.extern.slf4j.Slf4j;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StreamUtils;\n+import org.springframework.web.context.request.ServletWebRequest;\n+\n+import org.hisp.dhis.util.DateUtils;\n+import org.hisp.dhis.appmanager.App;\n+import org.hisp.dhis.appmanager.AppManager;\n+import org.hisp.dhis.appmanager.AppStatus;\n+\n+/**\n+ * @author Austin McGee <austin@dhis2.org>\n+ */\n+ @Slf4j\n+ @Component\n+public class AppOverrideFilter\n+    implements Filter\n+{\n+    @Autowired\n+    private AppManager appManager;\n+\n+    @Autowired\n+    private ObjectMapper jsonMapper;\n+\n+    public static final String APP_PATH_PATTERN = \"^/dhis-web-(\" + String.join(\"|\", AppManager.BUNDLED_APPS) + \")/(.*)\";\n+\n+    // -------------------------------------------------------------------------\n+    // Filter implementation\n+    // -------------------------------------------------------------------------\n+\n+    @Override\n+    public void init( FilterConfig config )\n+    {\n+    }\n+\n+    // From AppController.java (some duplication)\n+    private void serveInstalledAppResource( App app, String resourcePath, HttpServletRequest request, HttpServletResponse response )\n+        throws IOException {\n+        // Get page requested\n+\n+        log.debug( String.format( \"Serving app resource: '%s'\", resourcePath ) );\n+\n+        // Handling of 'manifest.webapp'\n+        if ( \"manifest.webapp\".equals( resourcePath ) )\n+        {\n+            // If request was for manifest.webapp, check for * and replace with host\n+            if ( \"*\".equals( app.getActivities().getDhis().getHref() ) )", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM2NDI0Mw=="}, "originalCommit": {"oid": "983a3884a71eff0482cf6b41d50ab21ecd2cf0d7"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4Mjk1MTYyOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/appmanager/JCloudsAppStorageService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwODo0NTo0MlrOHHCKbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwODo1NzoyOFrOHHCmZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEzNzUxOQ==", "bodyText": "Brackets on new lines.", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r477137519", "createdAt": "2020-08-26T08:45:42Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/appmanager/JCloudsAppStorageService.java", "diffHunk": "@@ -429,9 +430,21 @@ public Resource getAppResource( App app, String pageName )\n \n             String filepath = configurationProvider.getProperty( ConfigurationKey.FILESTORE_CONTAINER ) + \"/\" + key;\n             filepath = filepath.replaceAll( \"//\", \"/\" );\n-            File res = locationManager.getFileForReading( filepath );\n+            File res;\n+            \n+            try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fa1129fcf9c20dfe7f85067ddb449ee6f0a600f"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE0NDY3OA==", "bodyText": "Fixed", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r477144678", "createdAt": "2020-08-26T08:57:28Z", "author": {"login": "amcgee"}, "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/appmanager/JCloudsAppStorageService.java", "diffHunk": "@@ -429,9 +430,21 @@ public Resource getAppResource( App app, String pageName )\n \n             String filepath = configurationProvider.getProperty( ConfigurationKey.FILESTORE_CONTAINER ) + \"/\" + key;\n             filepath = filepath.replaceAll( \"//\", \"/\" );\n-            File res = locationManager.getFileForReading( filepath );\n+            File res;\n+            \n+            try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEzNzUxOQ=="}, "originalCommit": {"oid": "6fa1129fcf9c20dfe7f85067ddb449ee6f0a600f"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MTA4MzE1OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNDozNjozNlrOHITYNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNDozNjozNlrOHITYNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ2ODE0OQ==", "bodyText": "Remove commented out code.", "url": "https://github.com/dhis2/dhis2-core/pull/5977#discussion_r478468149", "createdAt": "2020-08-27T14:36:36Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/filter/AppOverrideFilter.java", "diffHunk": "@@ -0,0 +1,178 @@\n+package org.hisp.dhis.servlet.filter;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+import lombok.extern.slf4j.Slf4j;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StreamUtils;\n+import org.springframework.web.context.request.ServletWebRequest;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+\n+import org.hisp.dhis.util.DateUtils;\n+import org.hisp.dhis.appmanager.App;\n+import org.hisp.dhis.appmanager.AppManager;\n+import org.hisp.dhis.appmanager.AppStatus;\n+import org.hisp.dhis.webapi.utils.ContextUtils;\n+\n+/**\n+ * @author Austin McGee <austin@dhis2.org>\n+ */\n+ @Slf4j\n+ @Component\n+public class AppOverrideFilter\n+    extends OncePerRequestFilter\n+{\n+    @Autowired\n+    private AppManager appManager;\n+\n+    @Autowired\n+    private ObjectMapper jsonMapper;\n+\n+    public static final String APP_PATH_PATTERN = \"^/\" + AppManager.BUNDLED_APP_PREFIX + \"(\" + String.join(\"|\", AppManager.BUNDLED_APPS) + \")/(.*)\";\n+    // public static final String REDIRECT_APP_PATH_PATTERN = \"^/\" + AppController.RESOURCE_PATH + \"-(\" + String.join(\"|\", AppManager.BUNDLED_APPS) + \")/(.*)\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f80a39256916bfcb1a06f2eb2d40e25f426dc0d"}, "originalPosition": 79}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3940, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}