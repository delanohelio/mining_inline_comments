{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgxNDk1OTA1", "number": 6103, "title": "perf: [DHIS-9415] avoid querying programstageinstancecomments if not necessary", "bodyText": "This PR includes some minor refactoring to help writing a cleaner test.\n\nComments related methods extracted from JdbcEventStore into JdbcEventCommentStore\nTable programstageinstancecomments is only queried if there's at least one comment to store.", "createdAt": "2020-09-07T15:40:57Z", "url": "https://github.com/dhis2/dhis2-core/pull/6103", "merged": true, "mergeCommit": {"oid": "1775146057dbef2da11c4e554b339f150f2f4857"}, "closed": true, "closedAt": "2020-09-09T06:34:04Z", "author": {"login": "gnespolino"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdGk1ImAH2gAyNDgxNDk1OTA1OmE1YWNlZWRhODBiMDA0ZTllMmNkOWM3YWEwNDFiYWI4YzNjZmIzZGQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdHGR-RAFqTQ4NDY5ODM2Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a5aceeda80b004e9e2cd9c7aa041bab8c3cfb3dd", "author": {"user": {"login": "gnespolino", "name": "Giuseppe Nespolino"}}, "url": "https://github.com/dhis2/dhis2-core/commit/a5aceeda80b004e9e2cd9c7aa041bab8c3cfb3dd", "committedDate": "2020-09-07T15:35:24Z", "message": "perf: avoid querying programstageinstancecomments if not necessary"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzODI2Mjgw", "url": "https://github.com/dhis2/dhis2-core/pull/6103#pullrequestreview-483826280", "createdAt": "2020-09-08T06:24:59Z", "commit": {"oid": "a5aceeda80b004e9e2cd9c7aa041bab8c3cfb3dd"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNjoyNTowMFrOHOOXpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNjoyNzoxN1rOHOObMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY3NzU0MA==", "bodyText": "Is .map necessary here? Wouldn't batch.stream().filter( this:hasComments )... achieve the same?", "url": "https://github.com/dhis2/dhis2-core/pull/6103#discussion_r484677540", "createdAt": "2020-09-08T06:25:00Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventCommentStore.java", "diffHunk": "@@ -0,0 +1,199 @@\n+package org.hisp.dhis.dxf2.events.event;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.sql.PreparedStatement;\n+import java.util.List;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.trackedentitycomment.TrackedEntityComment;\n+import org.springframework.dao.DataAccessException;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.jdbc.support.GeneratedKeyHolder;\n+import org.springframework.jdbc.support.KeyHolder;\n+import org.springframework.stereotype.Repository;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * @author Giuseppe Nespolino <g.nespolino@gmail.com>\n+ */\n+@Repository\n+@RequiredArgsConstructor\n+@Slf4j\n+public class JdbcEventCommentStore\n+{\n+\n+    private final JdbcTemplate jdbcTemplate;\n+\n+    private final String INSERT_EVENT_NOTE_SQL = \"INSERT INTO TRACKEDENTITYCOMMENT (trackedentitycommentid, \" + // 0\n+        \"uid, \" + // 1\n+        \"commenttext, \" + // 2\n+        \"created, \" + // 3\n+        \"creator,\" + // 4\n+        \"lastUpdated\" + // 5\n+        \")  values ( nextval('hibernate_sequence'), ?, ?, ?, ?, ?)\";\n+\n+    private final static String INSERT_EVENT_COMMENT_LINK = \"INSERT INTO programstageinstancecomments (programstageinstanceid, \"\n+        + \"sort_order, trackedentitycommentid) values (?, ?, ?)\";\n+\n+    /**\n+     * Save all the comments ({@see TrackedEntityComment} for the list of\n+     * {@see ProgramStageInstance}\n+     *\n+     * @param batch a List of {@see ProgramStageInstance}\n+     */\n+    void saveAllComments( List<ProgramStageInstance> batch )\n+    {\n+        try\n+        {\n+            // List of PSI that has at least one non empty comment (i.e. PSO having comments\n+            // that can actually be saved)\n+            // In resulting PSI list, all comments without text are removed.\n+            List<ProgramStageInstance> programStageInstances = batch.stream()\n+                .map( this::withoutEmptyComments )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5aceeda80b004e9e2cd9c7aa041bab8c3cfb3dd"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY3ODIwNA==", "bodyText": "Is it possible to call this new store from the upstream service. This is fine, but in general, I prefer to avoid calling a dao from another dao.", "url": "https://github.com/dhis2/dhis2-core/pull/6103#discussion_r484678204", "createdAt": "2020-09-08T06:26:37Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java", "diffHunk": "@@ -247,6 +233,8 @@\n \n     private final JdbcTemplate jdbcTemplate;\n \n+    private final JdbcEventCommentStore jdbcEventCommentStore;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5aceeda80b004e9e2cd9c7aa041bab8c3cfb3dd"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY3ODQ0OQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/dhis2/dhis2-core/pull/6103#discussion_r484678449", "createdAt": "2020-09-08T06:27:17Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventSupport.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package org.hisp.dhis.dxf2.events.event;\n+\n+import lombok.experimental.UtilityClass;\n+\n+import java.sql.Timestamp;\n+import java.util.Date;\n+\n+@UtilityClass\n+class JdbcEventSupport", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5aceeda80b004e9e2cd9c7aa041bab8c3cfb3dd"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzODkzMDcy", "url": "https://github.com/dhis2/dhis2-core/pull/6103#pullrequestreview-483893072", "createdAt": "2020-09-08T08:08:22Z", "commit": {"oid": "a5aceeda80b004e9e2cd9c7aa041bab8c3cfb3dd"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwODowODoyMlrOHORlmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwODowODozMlrOHORmAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDczMDI2Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public JdbcEventStore(StatementBuilder statementBuilder, JdbcTemplate jdbcTemplate,\n          \n          \n            \n                public JdbcEventStore( StatementBuilder statementBuilder, JdbcTemplate jdbcTemplate,", "url": "https://github.com/dhis2/dhis2-core/pull/6103#discussion_r484730267", "createdAt": "2020-09-08T08:08:22Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java", "diffHunk": "@@ -260,9 +248,9 @@\n         .expireAfterWrite( 10, TimeUnit.SECONDS )\n         .build();\n \n-    public JdbcEventStore( StatementBuilder statementBuilder, JdbcTemplate jdbcTemplate,\n-        @Qualifier( \"dataValueJsonMapper\" ) ObjectMapper jsonMapper, CurrentUserService currentUserService,\n-        IdentifiableObjectManager identifiableObjectManager, Environment env )\n+    public JdbcEventStore(StatementBuilder statementBuilder, JdbcTemplate jdbcTemplate,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5aceeda80b004e9e2cd9c7aa041bab8c3cfb3dd"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDczMDM3MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                      CurrentUserService currentUserService, IdentifiableObjectManager identifiableObjectManager, Environment env)\n          \n          \n            \n                                      CurrentUserService currentUserService, IdentifiableObjectManager identifiableObjectManager, Environment env )", "url": "https://github.com/dhis2/dhis2-core/pull/6103#discussion_r484730371", "createdAt": "2020-09-08T08:08:32Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java", "diffHunk": "@@ -260,9 +248,9 @@\n         .expireAfterWrite( 10, TimeUnit.SECONDS )\n         .build();\n \n-    public JdbcEventStore( StatementBuilder statementBuilder, JdbcTemplate jdbcTemplate,\n-        @Qualifier( \"dataValueJsonMapper\" ) ObjectMapper jsonMapper, CurrentUserService currentUserService,\n-        IdentifiableObjectManager identifiableObjectManager, Environment env )\n+    public JdbcEventStore(StatementBuilder statementBuilder, JdbcTemplate jdbcTemplate,\n+                          JdbcEventCommentStore jdbcEventCommentStore, @Qualifier(\"dataValueJsonMapper\") ObjectMapper jsonMapper,\n+                          CurrentUserService currentUserService, IdentifiableObjectManager identifiableObjectManager, Environment env)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5aceeda80b004e9e2cd9c7aa041bab8c3cfb3dd"}, "originalPosition": 53}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70ab87f1eefdf429bd637189958a61686bd1d64f", "author": {"user": {"login": "gnespolino", "name": "Giuseppe Nespolino"}}, "url": "https://github.com/dhis2/dhis2-core/commit/70ab87f1eefdf429bd637189958a61686bd1d64f", "committedDate": "2020-09-08T08:40:35Z", "message": "perf: JdbcEvenCommentStore invocation moved to an upper layer (code-review)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0Njk4MzY3", "url": "https://github.com/dhis2/dhis2-core/pull/6103#pullrequestreview-484698367", "createdAt": "2020-09-09T06:33:46Z", "commit": {"oid": "70ab87f1eefdf429bd637189958a61686bd1d64f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2499, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}