{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwMjY3NzUy", "number": 6799, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNDozOToxMFrOE_Liag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNDozOToxMFrOE_Liag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0Njg0Nzc4OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/mappers/TrackedEntityAttributeMapper.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNDozOToxMFrOH8vlow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMzoxNTo1NlrOIAmPKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ1NjI5MQ==", "bodyText": "Missing @OverRide?", "url": "https://github.com/dhis2/dhis2-core/pull/6799#discussion_r533456291", "createdAt": "2020-12-01T14:39:10Z", "author": {"login": "netroms"}, "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/mappers/TrackedEntityAttributeMapper.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package org.hisp.dhis.tracker.preheat.mappers;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.trackedentity.TrackedEntityAttribute;\n+import org.mapstruct.BeanMapping;\n+import org.mapstruct.Mapper;\n+import org.mapstruct.Mapping;\n+import org.mapstruct.factory.Mappers;\n+\n+@Mapper( uses = DebugMapper.class )\n+public interface TrackedEntityAttributeMapper extends PreheatMapper<TrackedEntityAttribute>\n+{\n+    TrackedEntityAttributeMapper INSTANCE = Mappers.getMapper( TrackedEntityAttributeMapper.class );\n+\n+    @BeanMapping( ignoreByDefault = true )\n+    @Mapping( target = \"id\" )\n+    @Mapping( target = \"uid\" )\n+    @Mapping( target = \"code\" )\n+    @Mapping( target = \"confidential\" )\n+    @Mapping( target = \"unique\" )\n+    @Mapping( target = \"generated\" )\n+    @Mapping( target = \"pattern\" )\n+    @Mapping( target = \"textPattern\" )\n+    @Mapping( target = \"skipSynchronization\" )\n+    @Mapping( target = \"valueType\" )\n+    @Mapping( target = \"orgunitScope\" )\n+    TrackedEntityAttribute map( TrackedEntityAttribute trackedEntityType );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67b64360b1860dfbafaafe702875875395371e22"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM2NzY1Nw==", "bodyText": "bump @luciano-fiandesio", "url": "https://github.com/dhis2/dhis2-core/pull/6799#discussion_r537367657", "createdAt": "2020-12-07T09:49:05Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/mappers/TrackedEntityAttributeMapper.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package org.hisp.dhis.tracker.preheat.mappers;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.trackedentity.TrackedEntityAttribute;\n+import org.mapstruct.BeanMapping;\n+import org.mapstruct.Mapper;\n+import org.mapstruct.Mapping;\n+import org.mapstruct.factory.Mappers;\n+\n+@Mapper( uses = DebugMapper.class )\n+public interface TrackedEntityAttributeMapper extends PreheatMapper<TrackedEntityAttribute>\n+{\n+    TrackedEntityAttributeMapper INSTANCE = Mappers.getMapper( TrackedEntityAttributeMapper.class );\n+\n+    @BeanMapping( ignoreByDefault = true )\n+    @Mapping( target = \"id\" )\n+    @Mapping( target = \"uid\" )\n+    @Mapping( target = \"code\" )\n+    @Mapping( target = \"confidential\" )\n+    @Mapping( target = \"unique\" )\n+    @Mapping( target = \"generated\" )\n+    @Mapping( target = \"pattern\" )\n+    @Mapping( target = \"textPattern\" )\n+    @Mapping( target = \"skipSynchronization\" )\n+    @Mapping( target = \"valueType\" )\n+    @Mapping( target = \"orgunitScope\" )\n+    TrackedEntityAttribute map( TrackedEntityAttribute trackedEntityType );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ1NjI5MQ=="}, "originalCommit": {"oid": "67b64360b1860dfbafaafe702875875395371e22"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ5NzM4Ng==", "bodyText": "fixed", "url": "https://github.com/dhis2/dhis2-core/pull/6799#discussion_r537497386", "createdAt": "2020-12-07T13:15:56Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/mappers/TrackedEntityAttributeMapper.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package org.hisp.dhis.tracker.preheat.mappers;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.trackedentity.TrackedEntityAttribute;\n+import org.mapstruct.BeanMapping;\n+import org.mapstruct.Mapper;\n+import org.mapstruct.Mapping;\n+import org.mapstruct.factory.Mappers;\n+\n+@Mapper( uses = DebugMapper.class )\n+public interface TrackedEntityAttributeMapper extends PreheatMapper<TrackedEntityAttribute>\n+{\n+    TrackedEntityAttributeMapper INSTANCE = Mappers.getMapper( TrackedEntityAttributeMapper.class );\n+\n+    @BeanMapping( ignoreByDefault = true )\n+    @Mapping( target = \"id\" )\n+    @Mapping( target = \"uid\" )\n+    @Mapping( target = \"code\" )\n+    @Mapping( target = \"confidential\" )\n+    @Mapping( target = \"unique\" )\n+    @Mapping( target = \"generated\" )\n+    @Mapping( target = \"pattern\" )\n+    @Mapping( target = \"textPattern\" )\n+    @Mapping( target = \"skipSynchronization\" )\n+    @Mapping( target = \"valueType\" )\n+    @Mapping( target = \"orgunitScope\" )\n+    TrackedEntityAttribute map( TrackedEntityAttribute trackedEntityType );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ1NjI5MQ=="}, "originalCommit": {"oid": "67b64360b1860dfbafaafe702875875395371e22"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3713, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}