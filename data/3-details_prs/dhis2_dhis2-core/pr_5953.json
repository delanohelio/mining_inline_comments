{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5NjI5NDY1", "number": 5953, "title": "feat: Convert security XML config to Java annotation config", "bodyText": "Convert all .xml spring config files to Java config classes using spring @configuration instead (except Struts bean.xml config files).\nConvert web.xml files to use Java bases classes extending WebApplicationInitializer.\nRemove support for OpenID ver. 1 (this is for preparing for OIDC support later).\nMigrate some filters to use @webfilter configuration.\nUpgrade Spring, Spring Security, Struts and more depenendices to latest versions.\nAdd maven-enforcer rules to enforce better dependency controll.\nAdd exclusions for overlapping and clashing dependencies.", "createdAt": "2020-08-18T17:11:25Z", "url": "https://github.com/dhis2/dhis2-core/pull/5953", "merged": true, "mergeCommit": {"oid": "8ff0e881fed1a553755f00b7f256b5e21854f512"}, "closed": true, "closedAt": "2020-08-25T15:10:10Z", "author": {"login": "netroms"}, "timelineItems": {"totalCount": 32, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdAKMlhAH2gAyNDY5NjI5NDY1OjliMmRjZGNhZWQ4MWUxMDQzOTg2YzI0NzQxYzJkNWE4ODI4MjYwYjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdCYpUOAFqTQ3NDU3ODA3OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9b2dcdcaed81e1043986c24741c2d5a8828260b3", "author": {"user": {"login": "netroms", "name": null}}, "url": "https://github.com/dhis2/dhis2-core/commit/9b2dcdcaed81e1043986c24741c2d5a8828260b3", "committedDate": "2020-08-18T17:10:02Z", "message": "feat: Convert xml based config files to java annotation based config\n\nConvert all .xml spring config files to Java config classes using spring @Configuration instead (except Struts bean.xml config files).\nConvert web.xml files to use Java bases classes extending WebApplicationInitializer.\nRemove support for OpenID ver. 1 (this is for preparing for OIDC support later).\nMigrate some filters to use @WebFilter configuration.\nUpgrade Spring, Spring Security, Struts and more depenendices to latest versions.\nAdd maven-enforcer rules to enforce better dependency controll.\nAdd exclusions for overlapping and clashing dependencies."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e70a8b53edfdb704d9f6ea9d2497921abd812b4a", "author": {"user": {"login": "netroms", "name": null}}, "url": "https://github.com/dhis2/dhis2-core/commit/e70a8b53edfdb704d9f6ea9d2497921abd812b4a", "committedDate": "2020-08-19T08:46:54Z", "message": "feat: Convert xml based config files to java annotation based config\n\nFix broken unit tests, add missing deps. to ldap."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb96b87d894f2066b3096e7110f186f7399ccd27", "author": {"user": {"login": "netroms", "name": null}}, "url": "https://github.com/dhis2/dhis2-core/commit/fb96b87d894f2066b3096e7110f186f7399ccd27", "committedDate": "2020-08-19T12:10:15Z", "message": "feat: Convert xml based config files to java annotation based config\n\nRemove usage of DhisTest in the web layer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd16e9195f59b18cf7649048613c3a973bfff51a", "author": {"user": {"login": "netroms", "name": null}}, "url": "https://github.com/dhis2/dhis2-core/commit/bd16e9195f59b18cf7649048613c3a973bfff51a", "committedDate": "2020-08-19T16:25:50Z", "message": "feat: Convert xml based config files to java annotation based config\n\nSome doc and minor cleanup of unused code and commented code."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0744b67652dce96828d106f0256c440ca9d50992", "author": {"user": {"login": "netroms", "name": null}}, "url": "https://github.com/dhis2/dhis2-core/commit/0744b67652dce96828d106f0256c440ca9d50992", "committedDate": "2020-08-19T16:26:06Z", "message": "Merge branch 'master' of github.com:dhis2/dhis2-core into DHIS2-9150"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d86d02aa57e1115740b31527d2c6f1f1f382ba8", "author": {"user": {"login": "netroms", "name": null}}, "url": "https://github.com/dhis2/dhis2-core/commit/8d86d02aa57e1115740b31527d2c6f1f1f382ba8", "committedDate": "2020-08-21T09:16:02Z", "message": "Merge branch 'master' of github.com:dhis2/dhis2-core into DHIS2-9150"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d283c6a133c19842eb46b1de4bd0e157aaabe34d", "author": {"user": {"login": "netroms", "name": null}}, "url": "https://github.com/dhis2/dhis2-core/commit/d283c6a133c19842eb46b1de4bd0e157aaabe34d", "committedDate": "2020-08-22T08:57:50Z", "message": "feat: Convert xml based config files to java annotation based config\n\n* Fixed wrong config for opens session in view\n* Added default user startup task populator, removed old automatic accces provider system\n* Added authority provider config for struts\n* removed ununsed dep."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "219fc7154eae8cfd4cf5adf8c353dc36b18ec2c1", "author": {"user": {"login": "netroms", "name": null}}, "url": "https://github.com/dhis2/dhis2-core/commit/219fc7154eae8cfd4cf5adf8c353dc36b18ec2c1", "committedDate": "2020-08-24T03:47:38Z", "message": "Merge branch 'master' of github.com:dhis2/dhis2-core into DHIS2-9150"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29c4a7e42f889dd76104de18ad99f7d0825ca4f6", "author": {"user": {"login": "netroms", "name": null}}, "url": "https://github.com/dhis2/dhis2-core/commit/29c4a7e42f889dd76104de18ad99f7d0825ca4f6", "committedDate": "2020-08-24T05:13:53Z", "message": "feat: Convert xml based config files to java annotation based config\n\n* Downgrade Hibernate back to 5.2.17"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01c9475aa14db6e85f2cf5030f13a9900a2c2713", "author": {"user": {"login": "netroms", "name": null}}, "url": "https://github.com/dhis2/dhis2-core/commit/01c9475aa14db6e85f2cf5030f13a9900a2c2713", "committedDate": "2020-08-24T11:33:38Z", "message": "feat: Convert xml based config files to java annotation based config\n\n* Disable broken e2e test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f2c18982831d36a1f8c3d789e4e26de74acaca4", "author": {"user": {"login": "netroms", "name": null}}, "url": "https://github.com/dhis2/dhis2-core/commit/6f2c18982831d36a1f8c3d789e4e26de74acaca4", "committedDate": "2020-08-24T12:00:57Z", "message": "feat: Convert xml based config files to java annotation based config\n\n* Revert DefaultAuditObjectFactory change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e771f7bcf0c576a2adb71906d827a64aafbe80b9", "author": {"user": {"login": "netroms", "name": null}}, "url": "https://github.com/dhis2/dhis2-core/commit/e771f7bcf0c576a2adb71906d827a64aafbe80b9", "committedDate": "2020-08-24T12:31:25Z", "message": "feat: Convert xml based config files to java annotation based config\n\n* Added back custom entry point for form based entry to bypass web/form if a custom header is present."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c266323263a7d5a2974048c8490612306a3c073e", "author": {"user": {"login": "netroms", "name": null}}, "url": "https://github.com/dhis2/dhis2-core/commit/c266323263a7d5a2974048c8490612306a3c073e", "committedDate": "2020-08-25T03:57:04Z", "message": "feat: Convert xml based config files to java annotation based config\n\n* Reenable web-apps module..."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68e0effede34bfb9d88e900cad671cd912a5f084", "author": {"user": {"login": "netroms", "name": null}}, "url": "https://github.com/dhis2/dhis2-core/commit/68e0effede34bfb9d88e900cad671cd912a5f084", "committedDate": "2020-08-25T04:05:58Z", "message": "Merge branch 'master' of github.com:dhis2/dhis2-core into DHIS2-9150"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0MjkxNzMw", "url": "https://github.com/dhis2/dhis2-core/pull/5953#pullrequestreview-474291730", "createdAt": "2020-08-25T09:14:27Z", "commit": {"oid": "68e0effede34bfb9d88e900cad671cd912a5f084"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOToxNDoyN1rOHGPLgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOToyNzo0M1rOHGPrYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMwMjIwOA==", "bodyText": "Copyright", "url": "https://github.com/dhis2/dhis2-core/pull/5953#discussion_r476302208", "createdAt": "2020-08-25T09:14:27Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-web/dhis-web-api-test/src/test/java/org/hisp/dhis/webapi/MvcTestConfig.java", "diffHunk": "@@ -0,0 +1,163 @@\n+package org.hisp.dhis.webapi;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68e0effede34bfb9d88e900cad671cd912a5f084"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMwMzQ4MA==", "bodyText": "Is the parameter injection of User not supported anymore?", "url": "https://github.com/dhis2/dhis2-core/pull/5953#discussion_r476303480", "createdAt": "2020-08-25T09:16:40Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/AbstractCrudController.java", "diffHunk": "@@ -218,8 +218,10 @@\n     @RequestMapping( method = RequestMethod.GET )\n     public @ResponseBody RootNode getObjectList(\n         @RequestParam Map<String, String> rpParameters, OrderParams orderParams,\n-        HttpServletResponse response, User currentUser ) throws QueryParserException\n+        HttpServletResponse response) throws QueryParserException\n     {\n+        User currentUser = currentUserService.getCurrentUser();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68e0effede34bfb9d88e900cad671cd912a5f084"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMwNTU4Ng==", "bodyText": "Code style, use  { }", "url": "https://github.com/dhis2/dhis2-core/pull/5953#discussion_r476305586", "createdAt": "2020-08-25T09:19:57Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/mvc/CustomRequestMappingHandlerMapping.java", "diffHunk": "@@ -86,8 +86,10 @@ protected RequestMappingInfo getMappingForMethod( Method method, Class<?> handle\n                 {\n                     if ( !pattern.startsWith( version.getVersionString() ) )\n                     {\n-                        if ( pattern.startsWith( \"/\" ) ) patterns.add( \"/\" + version.getVersion() + pattern );\n-                        else patterns.add( \"/\" + version.getVersion() + \"/\" + pattern );\n+                        if ( pattern.startsWith( \"/\" ) )\n+                            patterns.add( \"/\" + version.getVersion() + pattern );\n+                        else", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68e0effede34bfb9d88e900cad671cd912a5f084"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMwNjI4OQ==", "bodyText": "No need for @Autowired if using constructor injection (since spring 4.3)", "url": "https://github.com/dhis2/dhis2-core/pull/5953#discussion_r476306289", "createdAt": "2020-08-25T09:21:02Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/oprovider/DhisOauthAuthenticationProvider.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package org.hisp.dhis.webapi.oprovider;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.lang3.SerializationUtils;\n+import org.hisp.dhis.security.SecurityService;\n+import org.hisp.dhis.security.oauth2.DefaultClientDetailsUserDetailsService;\n+import org.hisp.dhis.user.UserService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.security.authentication.BadCredentialsException;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.authentication.dao.DaoAuthenticationProvider;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.AuthenticationException;\n+import org.springframework.security.core.userdetails.UserDetails;\n+import org.springframework.security.crypto.password.NoOpPasswordEncoder;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * @author Henning H\u00e5konsen\n+ */\n+@Slf4j\n+@Component\n+public class DhisOauthAuthenticationProvider extends DaoAuthenticationProvider\n+{\n+    @Autowired\n+    private UserService userService;\n+\n+    @Autowired\n+    private SecurityService securityService;\n+\n+    @Autowired\n+    DefaultClientDetailsUserDetailsService defaultClientDetailsUserDetailsService;\n+\n+    @Autowired", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68e0effede34bfb9d88e900cad671cd912a5f084"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMwNjY1Mw==", "bodyText": "Copyright", "url": "https://github.com/dhis2/dhis2-core/pull/5953#discussion_r476306653", "createdAt": "2020-08-25T09:21:39Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/security/SecurityWebApplicationInitializer.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package org.hisp.dhis.webapi.security;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68e0effede34bfb9d88e900cad671cd912a5f084"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMwNjg0Mw==", "bodyText": "Copyright", "url": "https://github.com/dhis2/dhis2-core/pull/5953#discussion_r476306843", "createdAt": "2020-08-25T09:21:55Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/security/config/AuthenticationProviderConfig.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package org.hisp.dhis.webapi.security.config;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68e0effede34bfb9d88e900cad671cd912a5f084"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMwNzExNQ==", "bodyText": "Copyright", "url": "https://github.com/dhis2/dhis2-core/pull/5953#discussion_r476307115", "createdAt": "2020-08-25T09:22:23Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/security/config/DhisWebApiWebSecurityConfig.java", "diffHunk": "@@ -0,0 +1,256 @@\n+package org.hisp.dhis.webapi.security.config;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68e0effede34bfb9d88e900cad671cd912a5f084"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMwNzc5Nw==", "bodyText": "Copyright", "url": "https://github.com/dhis2/dhis2-core/pull/5953#discussion_r476307797", "createdAt": "2020-08-25T09:23:34Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/security/config/PasswordEncoderConfig.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package org.hisp.dhis.webapi.security.config;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68e0effede34bfb9d88e900cad671cd912a5f084"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMwNzg5Nw==", "bodyText": "Copyright", "url": "https://github.com/dhis2/dhis2-core/pull/5953#discussion_r476307897", "createdAt": "2020-08-25T09:23:47Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/security/config/WebMvcConfig.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.hisp.dhis.webapi.security.config;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68e0effede34bfb9d88e900cad671cd912a5f084"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMwODUyMw==", "bodyText": "Copyright", "url": "https://github.com/dhis2/dhis2-core/pull/5953#discussion_r476308523", "createdAt": "2020-08-25T09:24:43Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/servlet/DhisWebApiWebAppInitializer.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package org.hisp.dhis.webapi.servlet;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68e0effede34bfb9d88e900cad671cd912a5f084"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMwOTQ3MA==", "bodyText": "Copyright", "url": "https://github.com/dhis2/dhis2-core/pull/5953#discussion_r476309470", "createdAt": "2020-08-25T09:26:13Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/security/config/AuthoritiesProviderConfig.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package org.hisp.dhis.security.config;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68e0effede34bfb9d88e900cad671cd912a5f084"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMwOTc3OA==", "bodyText": "Copyright", "url": "https://github.com/dhis2/dhis2-core/pull/5953#discussion_r476309778", "createdAt": "2020-08-25T09:26:45Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/security/config/DhisWebCommonsWebSecurityConfig.java", "diffHunk": "@@ -0,0 +1,297 @@\n+package org.hisp.dhis.security.config;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68e0effede34bfb9d88e900cad671cd912a5f084"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMxMDM3MQ==", "bodyText": "Copyright", "url": "https://github.com/dhis2/dhis2-core/pull/5953#discussion_r476310371", "createdAt": "2020-08-25T09:27:43Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/servlet/DhisWebCommonsWebAppInitializer.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package org.hisp.dhis.servlet;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68e0effede34bfb9d88e900cad671cd912a5f084"}, "originalPosition": 2}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0NDMyOTU3", "url": "https://github.com/dhis2/dhis2-core/pull/5953#pullrequestreview-474432957", "createdAt": "2020-08-25T12:32:41Z", "commit": {"oid": "68e0effede34bfb9d88e900cad671cd912a5f084"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMjozMjo0MVrOHGV3HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMjozMjo0MVrOHGV3HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQxMTY3Ng==", "bodyText": "Remove?", "url": "https://github.com/dhis2/dhis2-core/pull/5953#discussion_r476411676", "createdAt": "2020-08-25T12:32:41Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/security/spring2fa/TwoFactorAuthenticationProvider.java", "diffHunk": "@@ -28,42 +28,47 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n+import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.validator.routines.LongValidator;\n import org.hisp.dhis.security.SecurityService;\n import org.hisp.dhis.security.SecurityUtils;\n import org.hisp.dhis.user.UserCredentials;\n import org.hisp.dhis.user.UserService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.security.authentication.BadCredentialsException;\n import org.springframework.security.authentication.LockedException;\n import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n import org.springframework.security.authentication.dao.DaoAuthenticationProvider;\n import org.springframework.security.core.Authentication;\n import org.springframework.security.core.AuthenticationException;\n+import org.springframework.security.core.userdetails.UserDetailsService;\n+import org.springframework.security.crypto.password.PasswordEncoder;\n import org.springframework.security.web.authentication.preauth.PreAuthenticatedCredentialsNotFoundException;\n-\n-import lombok.extern.slf4j.Slf4j;\n+import org.springframework.stereotype.Component;\n \n /**\n  * @author Henning H\u00e5konsen\n  */\n @Slf4j\n-public class TwoFactorAuthenticationProvider\n-    extends DaoAuthenticationProvider\n+@Component\n+public class TwoFactorAuthenticationProvider extends DaoAuthenticationProvider\n {\n+    @Autowired\n     private UserService userService;\n \n-    public void setUserService( UserService userService )\n-    {\n-        this.userService = userService;\n-    }\n-\n+    @Autowired\n     private SecurityService securityService;\n \n-    public void setSecurityService( SecurityService securityService )\n+    @Autowired\n+    public TwoFactorAuthenticationProvider( @Qualifier( \"userDetailsService\" ) UserDetailsService detailsService,\n+        PasswordEncoder passwordEncoder )\n     {\n-        this.securityService = securityService;\n+//        super();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68e0effede34bfb9d88e900cad671cd912a5f084"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0NDM3NDcx", "url": "https://github.com/dhis2/dhis2-core/pull/5953#pullrequestreview-474437471", "createdAt": "2020-08-25T12:38:42Z", "commit": {"oid": "68e0effede34bfb9d88e900cad671cd912a5f084"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMjozODo0MlrOHGWEvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMjozODo0MlrOHGWEvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQxNTE2Ng==", "bodyText": "Add \"private\" modifier.", "url": "https://github.com/dhis2/dhis2-core/pull/5953#discussion_r476415166", "createdAt": "2020-08-25T12:38:42Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/oprovider/DhisOauthAuthenticationProvider.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package org.hisp.dhis.webapi.oprovider;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.lang3.SerializationUtils;\n+import org.hisp.dhis.security.SecurityService;\n+import org.hisp.dhis.security.oauth2.DefaultClientDetailsUserDetailsService;\n+import org.hisp.dhis.user.UserService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.security.authentication.BadCredentialsException;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.authentication.dao.DaoAuthenticationProvider;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.AuthenticationException;\n+import org.springframework.security.core.userdetails.UserDetails;\n+import org.springframework.security.crypto.password.NoOpPasswordEncoder;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * @author Henning H\u00e5konsen\n+ */\n+@Slf4j\n+@Component\n+public class DhisOauthAuthenticationProvider extends DaoAuthenticationProvider\n+{\n+    @Autowired\n+    private UserService userService;\n+\n+    @Autowired\n+    private SecurityService securityService;\n+\n+    @Autowired\n+    DefaultClientDetailsUserDetailsService defaultClientDetailsUserDetailsService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68e0effede34bfb9d88e900cad671cd912a5f084"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0NDM3NzU0", "url": "https://github.com/dhis2/dhis2-core/pull/5953#pullrequestreview-474437754", "createdAt": "2020-08-25T12:39:03Z", "commit": {"oid": "68e0effede34bfb9d88e900cad671cd912a5f084"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMjozOTowM1rOHGWFsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMjozOTowM1rOHGWFsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQxNTQxMQ==", "bodyText": "Does two-factor still work?\nIf yes, remove commented code?", "url": "https://github.com/dhis2/dhis2-core/pull/5953#discussion_r476415411", "createdAt": "2020-08-25T12:39:03Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/oprovider/DhisOauthAuthenticationProvider.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package org.hisp.dhis.webapi.oprovider;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.lang3.SerializationUtils;\n+import org.hisp.dhis.security.SecurityService;\n+import org.hisp.dhis.security.oauth2.DefaultClientDetailsUserDetailsService;\n+import org.hisp.dhis.user.UserService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.security.authentication.BadCredentialsException;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.authentication.dao.DaoAuthenticationProvider;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.AuthenticationException;\n+import org.springframework.security.core.userdetails.UserDetails;\n+import org.springframework.security.crypto.password.NoOpPasswordEncoder;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * @author Henning H\u00e5konsen\n+ */\n+@Slf4j\n+@Component\n+public class DhisOauthAuthenticationProvider extends DaoAuthenticationProvider\n+{\n+    @Autowired\n+    private UserService userService;\n+\n+    @Autowired\n+    private SecurityService securityService;\n+\n+    @Autowired\n+    DefaultClientDetailsUserDetailsService defaultClientDetailsUserDetailsService;\n+\n+    @Autowired\n+    public DhisOauthAuthenticationProvider( @Qualifier( \"defaultClientDetailsUserDetailsService\" ) DefaultClientDetailsUserDetailsService detailsService )\n+    {\n+//        super();\n+        setUserDetailsService( detailsService );\n+        setPasswordEncoder( NoOpPasswordEncoder.getInstance() );\n+        this.defaultClientDetailsUserDetailsService = detailsService;\n+    }\n+\n+    @Override\n+    public Authentication authenticate( Authentication auth )\n+        throws AuthenticationException\n+    {\n+        log.info( String.format( \"OldOauthAuthenticationProvider Login attempt: %s\", auth.getName() ) );\n+\n+        String username = auth.getName();\n+\n+        UserDetails userCredentials = getUserDetailsService().loadUserByUsername( username );\n+\n+        if ( userCredentials == null )\n+        {\n+            throw new BadCredentialsException( \"Invalid username or password\" );\n+        }\n+\n+        // Initialize all required properties of user credentials since these will become detached\n+\n+//        userCredentials.getAllAuthorities();\n+//\n+//        // -------------------------------------------------------------------------\n+//        // Check two-factor authentication\n+//        // -------------------------------------------------------------------------\n+//\n+//        if ( userCredentials.isTwoFA() )\n+//        {\n+//            TwoFactorWebAuthenticationDetails authDetails =\n+//                (TwoFactorWebAuthenticationDetails) auth.getDetails();\n+//\n+//            // -------------------------------------------------------------------------\n+//            // Check whether account is locked due to multiple failed login attempts\n+//            // -------------------------------------------------------------------------\n+//\n+//            if ( authDetails == null )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68e0effede34bfb9d88e900cad671cd912a5f084"}, "originalPosition": 104}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0NDM4NTU5", "url": "https://github.com/dhis2/dhis2-core/pull/5953#pullrequestreview-474438559", "createdAt": "2020-08-25T12:40:06Z", "commit": {"oid": "68e0effede34bfb9d88e900cad671cd912a5f084"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMjo0MDowNlrOHGWIQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMjo0MDowNlrOHGWIQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQxNjA2NA==", "bodyText": "Handle this. Do we need it? Remove commented code if not.", "url": "https://github.com/dhis2/dhis2-core/pull/5953#discussion_r476416064", "createdAt": "2020-08-25T12:40:06Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/security/config/DhisWebApiWebSecurityConfig.java", "diffHunk": "@@ -0,0 +1,256 @@\n+package org.hisp.dhis.webapi.security.config;\n+\n+import org.hisp.dhis.security.oauth2.DefaultClientDetailsService;\n+import org.hisp.dhis.webapi.filter.CorsFilter;\n+import org.hisp.dhis.webapi.filter.CustomAuthenticationFilter;\n+import org.hisp.dhis.webapi.oprovider.DhisOauthAuthenticationProvider;\n+import org.hisp.dhis.webapi.security.DHIS2BasicAuthenticationEntryPoint;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.context.annotation.Primary;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.security.access.expression.SecurityExpressionHandler;\n+import org.springframework.security.authentication.AuthenticationManager;\n+import org.springframework.security.config.annotation.SecurityConfigurerAdapter;\n+import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\n+import org.springframework.security.config.annotation.authentication.configurers.userdetails.DaoAuthenticationConfigurer;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n+import org.springframework.security.config.http.SessionCreationPolicy;\n+import org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;\n+import org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurer;\n+import org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerEndpointsConfiguration;\n+import org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer;\n+import org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer;\n+import org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationManager;\n+import org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter;\n+import org.springframework.security.oauth2.provider.code.JdbcAuthorizationCodeServices;\n+import org.springframework.security.oauth2.provider.endpoint.FrameworkEndpointHandlerMapping;\n+import org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler;\n+import org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint;\n+import org.springframework.security.oauth2.provider.expression.OAuth2WebSecurityExpressionHandler;\n+import org.springframework.security.oauth2.provider.token.DefaultTokenServices;\n+import org.springframework.security.oauth2.provider.token.ResourceServerTokenServices;\n+import org.springframework.security.oauth2.provider.token.TokenStore;\n+import org.springframework.security.oauth2.provider.token.store.JdbcTokenStore;\n+import org.springframework.security.web.AuthenticationEntryPoint;\n+import org.springframework.security.web.DefaultSecurityFilterChain;\n+import org.springframework.security.web.FilterInvocation;\n+import org.springframework.security.web.access.AccessDeniedHandler;\n+import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\n+import org.springframework.security.web.authentication.www.BasicAuthenticationFilter;\n+\n+import javax.sql.DataSource;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Configuration\n+@Order( 1999 )\n+public class DhisWebApiWebSecurityConfig\n+{\n+    @Autowired\n+    public DataSource dataSource;\n+\n+    /**\n+     * This configuration class is responsible for setting up the OAuth2 /token endpoint and /authorize endpoint.\n+     * This config is a modification of the config that is automatically enabled by using the @EnableAuthorizationServer annotation.\n+     * The spring-security-oauth2 project is deprecated but as of now 19. August 2020 there is still no other alternative ready.\n+     * The candidate for replacing this is: https://github.com/spring-projects-experimental/spring-authorization-server\n+     */\n+    @Configuration\n+    @Order( 1001 )\n+    @Import( { AuthorizationServerEndpointsConfiguration.class, AuthorizationServerEndpointsConfiguration.class } )\n+    public class OAuth2SecurityConfig extends WebSecurityConfigurerAdapter implements AuthorizationServerConfigurer\n+    {\n+        @Autowired\n+        private AuthorizationServerEndpointsConfiguration endpoints;\n+\n+        @Autowired\n+        private DhisOauthAuthenticationProvider dhisOauthAuthenticationProvider;\n+\n+        @Override\n+        protected void configure( HttpSecurity http )\n+            throws Exception\n+        {\n+            AuthorizationServerSecurityConfigurer configurer = new AuthorizationServerSecurityConfigurer();\n+            FrameworkEndpointHandlerMapping handlerMapping = endpoints.oauth2EndpointHandlerMapping();\n+            http.setSharedObject( FrameworkEndpointHandlerMapping.class, handlerMapping );\n+\n+            configure( configurer );\n+            http.apply( configurer );\n+\n+            // This is the only endpoint we need to configure.\n+            // The /authorize endpoint is only accessible AFTER you have logged in,\n+            // you will be redirected to the form login if you try accessing it without being authenticated.\n+            String tokenEndpointPath = handlerMapping.getServletPath( \"/oauth/token\" );\n+\n+            http\n+                .authorizeRequests()\n+                .antMatchers( tokenEndpointPath ).fullyAuthenticated()\n+                .and()\n+                .requestMatchers()\n+                .antMatchers( tokenEndpointPath )\n+                .and()\n+                .sessionManagement().sessionCreationPolicy( SessionCreationPolicy.NEVER );\n+\n+            http.apply( new AuthorizationServerAuthenticationManagerConfigurer() );\n+        }\n+\n+        private class AuthorizationServerAuthenticationManagerConfigurer\n+            extends SecurityConfigurerAdapter<DefaultSecurityFilterChain, HttpSecurity>\n+        {\n+            @Override\n+            public void init( HttpSecurity builder )\n+                throws Exception\n+            {\n+                // This is a quirk to remove the default DaoAuthenticationConfigurer,\n+                // that gets automatically assigned in the AuthorizationServerSecurityConfigurer.\n+                // We only want ONE authentication provider (our own...)\n+                AuthenticationManagerBuilder authBuilder = builder\n+                    .getSharedObject( AuthenticationManagerBuilder.class );\n+                authBuilder.removeConfigurer( DaoAuthenticationConfigurer.class );\n+                authBuilder.authenticationProvider( dhisOauthAuthenticationProvider );\n+            }\n+        }\n+\n+        @Override\n+        public void configure( AuthorizationServerSecurityConfigurer security )\n+            throws Exception\n+        {\n+        }\n+\n+        @Override\n+        public void configure( ClientDetailsServiceConfigurer configurer )\n+            throws Exception\n+        {\n+        }\n+\n+        @Bean( \"authorizationCodeServices\" )\n+        public JdbcAuthorizationCodeServices jdbcAuthorizationCodeServices()\n+        {\n+            return new JdbcAuthorizationCodeServices( dataSource );\n+        }\n+\n+        @Override\n+        public void configure( final AuthorizationServerEndpointsConfigurer endpoints )\n+            throws Exception\n+        {\n+            endpoints\n+                .prefix( \"/uaa\" )\n+                .authorizationCodeServices( jdbcAuthorizationCodeServices() )\n+                .tokenStore( tokenStore() )\n+                .authenticationManager( authenticationManager() );\n+        }\n+    }\n+\n+    @Bean\n+    public TokenStore tokenStore()\n+    {\n+        return new JdbcTokenStore( dataSource );\n+    }\n+\n+    @Bean( \"tokenService1\" )\n+    @Primary\n+    public DefaultTokenServices tokenServices()\n+    {\n+        final DefaultTokenServices defaultTokenServices = new DefaultTokenServices();\n+        defaultTokenServices.setTokenStore( tokenStore() );\n+        defaultTokenServices.setSupportRefreshToken( true );\n+        return defaultTokenServices;\n+    }\n+\n+    /**\n+     * This configuration class is responsible for setting up the /api endpoints\n+     */\n+    @Configuration\n+    @Order( 1100 )\n+    public static class ApiWebSecurityConfigurationAdapter extends WebSecurityConfigurerAdapter\n+    {\n+        @Autowired\n+        @Qualifier( \"tokenService1\" )\n+        public ResourceServerTokenServices tokenServices;\n+\n+        @Autowired\n+        @Qualifier( \"defaultClientDetailsService\" )\n+        DefaultClientDetailsService clientDetailsService;\n+\n+        final private SecurityExpressionHandler<FilterInvocation> expressionHandler = new OAuth2WebSecurityExpressionHandler();\n+\n+        final private AuthenticationEntryPoint authenticationEntryPoint = new OAuth2AuthenticationEntryPoint();\n+\n+        final private AccessDeniedHandler accessDeniedHandler = new OAuth2AccessDeniedHandler();\n+\n+        final private String resourceId = \"oauth2-resource\";\n+\n+        /**\n+         * This AuthenticationManager is responsible for authorizing access, refresh and code\n+         * OAuth2 tokens from the /token and /authorize endpoints.\n+         * It is used only by the OAuth2AuthenticationProcessingFilter.\n+         */\n+        private AuthenticationManager oauthAuthenticationManager( HttpSecurity http )\n+        {\n+            OAuth2AuthenticationManager oauthAuthenticationManager = new OAuth2AuthenticationManager();\n+            oauthAuthenticationManager.setResourceId( resourceId );\n+            oauthAuthenticationManager.setTokenServices( tokenServices );\n+            oauthAuthenticationManager.setClientDetailsService( clientDetailsService );\n+\n+            return oauthAuthenticationManager;\n+        }\n+\n+        protected void configure( HttpSecurity http )\n+            throws Exception\n+        {\n+            AuthenticationManager oauthAuthenticationManager = oauthAuthenticationManager( http );\n+            OAuth2AuthenticationProcessingFilter resourcesServerFilter = new OAuth2AuthenticationProcessingFilter();\n+            resourcesServerFilter.setAuthenticationEntryPoint( authenticationEntryPoint );\n+            resourcesServerFilter.setAuthenticationManager( oauthAuthenticationManager );\n+\n+//            if (eventPublisher != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68e0effede34bfb9d88e900cad671cd912a5f084"}, "originalPosition": 212}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0NDM5NjUw", "url": "https://github.com/dhis2/dhis2-core/pull/5953#pullrequestreview-474439650", "createdAt": "2020-08-25T12:41:32Z", "commit": {"oid": "68e0effede34bfb9d88e900cad671cd912a5f084"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMjo0MTozMlrOHGWLmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMjo0MTozMlrOHGWLmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQxNjkyMw==", "bodyText": "Handle or remove commented code.", "url": "https://github.com/dhis2/dhis2-core/pull/5953#discussion_r476416923", "createdAt": "2020-08-25T12:41:32Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-web/dhis-web-api/src/main/resources/META-INF/dhis/oldservletxmlno", "diffHunk": "@@ -178,18 +178,25 @@\n     <bean class=\"org.hisp.dhis.webapi.mvc.interceptor.TranslationInterceptor\" />\n   </mvc:interceptors>\n \n-  <bean class=\"org.springframework.web.servlet.view.ContentNegotiatingViewResolver\">\n-    <property name=\"order\" value=\"1\" />\n-    <property name=\"contentNegotiationManager\" ref=\"contentNegotiationManager\" />\n+<!--  <bean class=\"org.springframework.web.servlet.view.ContentNegotiatingViewResolver\">-->\n+<!--    <property name=\"order\" value=\"1\" />-->\n+<!--    <property name=\"contentNegotiationManager\" ref=\"contentNegotiationManager\" />-->\n \n-    <property name=\"defaultViews\">\n-      <list>\n-        <bean class=\"org.hisp.dhis.webapi.view.PdfGridView\" />\n+<!--    <property name=\"defaultViews\">-->\n+<!--      <list>-->\n+<!--        <bean class=\"org.hisp.dhis.webapi.view.PdfGridView\" />-->\n \n-        <bean class=\"org.hisp.dhis.webapi.view.ExcelGridView\" />\n+<!--        <bean class=\"org.hisp.dhis.webapi.view.ExcelGridView\" />-->\n \n-        <bean class=\"org.hisp.dhis.webapi.view.CsvGridView\" />\n-      </list>\n-    </property>\n+<!--        <bean class=\"org.hisp.dhis.webapi.view.CsvGridView\" />-->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68e0effede34bfb9d88e900cad671cd912a5f084"}, "originalPosition": 98}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0NDQwOTA5", "url": "https://github.com/dhis2/dhis2-core/pull/5953#pullrequestreview-474440909", "createdAt": "2020-08-25T12:43:09Z", "commit": {"oid": "68e0effede34bfb9d88e900cad671cd912a5f084"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMjo0MzoxMFrOHGWPSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMjo0MzoxMFrOHGWPSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQxNzg2NA==", "bodyText": "Is this replaced by other config somewhere?", "url": "https://github.com/dhis2/dhis2-core/pull/5953#discussion_r476417864", "createdAt": "2020-08-25T12:43:10Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/configuration/SecureCookieConfiguration.java", "diffHunk": "@@ -1,76 +0,0 @@\n-package org.hisp.dhis.configuration;\n-\n-/*\n- * Copyright (c) 2004-2020, University of Oslo\n- * All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions are met:\n- * Redistributions of source code must retain the above copyright notice, this\n- * list of conditions and the following disclaimer.\n- *\n- * Redistributions in binary form must reproduce the above copyright notice,\n- * this list of conditions and the following disclaimer in the documentation\n- * and/or other materials provided with the distribution.\n- * Neither the name of the HISP project nor the names of its contributors may\n- * be used to endorse or promote products derived from this software without\n- * specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n- * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n- * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n- * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n- * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- */\n-\n-import javax.servlet.ServletContext;\n-import javax.servlet.ServletException;\n-\n-import lombok.extern.slf4j.Slf4j;\n-import org.hisp.dhis.external.conf.ConfigurationKey;\n-import org.hisp.dhis.external.conf.DefaultDhisConfigurationProvider;\n-import org.hisp.dhis.external.conf.DhisConfigurationProvider;\n-import org.hisp.dhis.external.location.DefaultLocationManager;\n-import org.springframework.web.WebApplicationInitializer;\n-\n-/**\n- * Configures cookies to be secure if the {@link ConfigurationKey#SERVER_HTTPS_ONLY} is enabled.\n- *\n- * @author Lars Helge Overland\n- */\n-@Slf4j\n-public class SecureCookieConfiguration", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68e0effede34bfb9d88e900cad671cd912a5f084"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0NDQzMDU3", "url": "https://github.com/dhis2/dhis2-core/pull/5953#pullrequestreview-474443057", "createdAt": "2020-08-25T12:45:52Z", "commit": {"oid": "68e0effede34bfb9d88e900cad671cd912a5f084"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMjo0NTo1MlrOHGWVsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMjo0NTo1MlrOHGWVsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQxOTUwNA==", "bodyText": "Handle commented code.", "url": "https://github.com/dhis2/dhis2-core/pull/5953#discussion_r476419504", "createdAt": "2020-08-25T12:45:52Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-web/dhis-web-uaa/pom.xml", "diffHunk": "@@ -17,16 +17,16 @@\n   </build>\n \n   <dependencies>\n-    <dependency>\n-      <groupId>org.hisp.dhis</groupId>\n-      <artifactId>dhis-web-commons</artifactId>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.hisp.dhis</groupId>\n-      <artifactId>dhis-web-commons-resources</artifactId>\n-      <type>war</type>\n-      <optional>true</optional>\n-    </dependency>\n+<!--    <dependency>-->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68e0effede34bfb9d88e900cad671cd912a5f084"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0NDQzMzM3", "url": "https://github.com/dhis2/dhis2-core/pull/5953#pullrequestreview-474443337", "createdAt": "2020-08-25T12:46:13Z", "commit": {"oid": "68e0effede34bfb9d88e900cad671cd912a5f084"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMjo0NjoxM1rOHGWWjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMjo0NjoxM1rOHGWWjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQxOTcyNg==", "bodyText": "Handle commented code.", "url": "https://github.com/dhis2/dhis2-core/pull/5953#discussion_r476419726", "createdAt": "2020-08-25T12:46:13Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-web/dhis-web-uaa/src/main/resources/META-INF/dhis/webapi-uaa.xml", "diffHunk": "@@ -10,29 +10,29 @@\n     http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd\n     http://www.springframework.org/schema/security/oauth2 https://www.springframework.org/schema/security/spring-security-oauth2.xsd\">\n \n-  <bean id=\"velocityConfig\" class=\"org.springframework.web.servlet.view.velocity.VelocityConfigurer\">\n-    <property name=\"resourceLoaderPath\" value=\"/WEB-INF/dhis-web-uaa/\" />\n-  </bean>\n+<!--  <bean id=\"velocityConfig\" class=\"org.springframework.web.servlet.view.velocity.VelocityConfigurer\">-->\n+<!--    <property name=\"resourceLoaderPath\" value=\"/WEB-INF/dhis-web-uaa/\" />-->\n+<!--  </bean>-->\n \n-  <bean id=\"viewResolver\" class=\"org.springframework.web.servlet.view.velocity.VelocityViewResolver\">\n-    <property name=\"cache\" value=\"true\" />\n-    <property name=\"prefix\" value=\"\" />\n-    <property name=\"suffix\" value=\".vm\" />\n-  </bean>\n+<!--  <bean id=\"viewResolver\" class=\"org.springframework.web.servlet.view.velocity.VelocityViewResolver\">-->\n+<!--    <property name=\"cache\" value=\"true\" />-->\n+<!--    <property name=\"prefix\" value=\"\" />-->\n+<!--    <property name=\"suffix\" value=\".vm\" />-->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68e0effede34bfb9d88e900cad671cd912a5f084"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0NDQzNzk4", "url": "https://github.com/dhis2/dhis2-core/pull/5953#pullrequestreview-474443798", "createdAt": "2020-08-25T12:46:50Z", "commit": {"oid": "68e0effede34bfb9d88e900cad671cd912a5f084"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMjo0Njo1MFrOHGWX5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMjo0Njo1MFrOHGWX5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQyMDA2OQ==", "bodyText": "Remove commented code.", "url": "https://github.com/dhis2/dhis2-core/pull/5953#discussion_r476420069", "createdAt": "2020-08-25T12:46:50Z", "author": {"login": "larshelge"}, "path": "dhis-2/pom.xml", "diffHunk": "@@ -451,18 +470,46 @@\n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-enforcer-plugin</artifactId>\n-        <version>1.4.1</version>\n+        <version>3.0.0-M3</version>\n+        <dependencies>\n+          <!-- https://mvnrepository.com/artifact/org.codehaus.mojo/extra-enforcer-rules -->\n+          <dependency>\n+            <groupId>org.codehaus.mojo</groupId>\n+            <artifactId>extra-enforcer-rules</artifactId>\n+            <version>1.3</version>\n+          </dependency>\n+\n+        </dependencies>\n         <executions>\n           <execution>\n             <id>enforce-maven</id>\n             <goals>\n               <goal>enforce</goal>\n             </goals>\n             <configuration>\n+\n               <rules>\n+<!--                <banDuplicateClasses/>-->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68e0effede34bfb9d88e900cad671cd912a5f084"}, "originalPosition": 132}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4dd494d2e93292a7a651ad4bcaf9b6c0931bf5f5", "author": {"user": {"login": "netroms", "name": null}}, "url": "https://github.com/dhis2/dhis2-core/commit/4dd494d2e93292a7a651ad4bcaf9b6c0931bf5f5", "committedDate": "2020-08-25T13:58:23Z", "message": "feat: Convert xml based config files to java annotation based config\n\n* Fix review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1f606f57b52c2c6dab63090a488a92461f25d93", "author": {"user": {"login": "netroms", "name": null}}, "url": "https://github.com/dhis2/dhis2-core/commit/c1f606f57b52c2c6dab63090a488a92461f25d93", "committedDate": "2020-08-25T14:22:12Z", "message": "feat: Convert xml based config files to java annotation based config\n\n* Add CurrentUserHandlerMethodArgumentResolver"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a8dc7fd1201ec093e801c837a85c05ce4e70e0c", "author": {"user": {"login": "netroms", "name": null}}, "url": "https://github.com/dhis2/dhis2-core/commit/7a8dc7fd1201ec093e801c837a85c05ce4e70e0c", "committedDate": "2020-08-25T14:23:58Z", "message": "Merge branch 'master' of github.com:dhis2/dhis2-core into DHIS2-9150"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0NTM3NzMz", "url": "https://github.com/dhis2/dhis2-core/pull/5953#pullrequestreview-474537733", "createdAt": "2020-08-25T14:27:25Z", "commit": {"oid": "7a8dc7fd1201ec093e801c837a85c05ce4e70e0c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNDoyNzoyNVrOHGayVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNDoyNzoyNVrOHGayVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ5MjM3NA==", "bodyText": "Handle commented code.", "url": "https://github.com/dhis2/dhis2-core/pull/5953#discussion_r476492374", "createdAt": "2020-08-25T14:27:25Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-web/dhis-web-api-test/src/test/java/org/hisp/dhis/webapi/DhisWebSpringTest.java", "diffHunk": "@@ -66,21 +69,24 @@\n \n import static org.springframework.restdocs.mockmvc.MockMvcRestDocumentation.document;\n import static org.springframework.restdocs.mockmvc.MockMvcRestDocumentation.documentationConfiguration;\n-import static org.springframework.restdocs.operation.preprocess.Preprocessors.*;\n+import static org.springframework.restdocs.operation.preprocess.Preprocessors.preprocessRequest;\n+import static org.springframework.restdocs.operation.preprocess.Preprocessors.preprocessResponse;\n+import static org.springframework.restdocs.operation.preprocess.Preprocessors.prettyPrint;\n \n /**\n  * @author Morten Olav Hansen <mortenoh@gmail.com>\n  */\n @RunWith( SpringRunner.class )\n @WebAppConfiguration\n-@ContextConfiguration(classes = WebTestConfiguration.class)\n-@ActiveProfiles(\"test-h2\")\n+@ContextConfiguration( classes = { MvcTestConfig.class, WebTestConfiguration.class } )\n+@ActiveProfiles( \"test-h2\" )\n @Transactional\n public abstract class DhisWebSpringTest\n     extends DhisConvenienceTest\n {\n-    @Autowired\n-    protected FilterChainProxy filterChainProxy;\n+    // MvcTestConfig.class,\n+//    @Autowired\n+//    protected FilterChainProxy filterChainProxy;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a8dc7fd1201ec093e801c837a85c05ce4e70e0c"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0NTM3OTQ0", "url": "https://github.com/dhis2/dhis2-core/pull/5953#pullrequestreview-474537944", "createdAt": "2020-08-25T14:27:38Z", "commit": {"oid": "7a8dc7fd1201ec093e801c837a85c05ce4e70e0c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNDoyNzozOFrOHGay5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNDoyNzozOFrOHGay5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ5MjUxOQ==", "bodyText": "Handle commented code.", "url": "https://github.com/dhis2/dhis2-core/pull/5953#discussion_r476492519", "createdAt": "2020-08-25T14:27:38Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-web/dhis-web-api-test/src/test/java/org/hisp/dhis/webapi/DhisWebSpringTest.java", "diffHunk": "@@ -102,24 +108,30 @@\n     @Rule\n     public JUnitRestDocumentation restDocumentation = new JUnitRestDocumentation( \"target/generated-snippets\" );\n \n+\n     @Before\n-    public void setup() throws Exception\n+    public void setup()\n+        throws Exception\n     {\n+\n         userService = _userService;\n         CharacterEncodingFilter characterEncodingFilter = new CharacterEncodingFilter();\n         characterEncodingFilter.setEncoding( \"UTF-8\" );\n         characterEncodingFilter.setForceEncoding( true );\n         mvc = MockMvcBuilders.webAppContextSetup( webApplicationContext )\n-            .addFilters( characterEncodingFilter, new ShallowEtagHeaderFilter(), filterChainProxy )\n+//            .addFilters( characterEncodingFilter, new ShallowEtagHeaderFilter(), filterChainProxy )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a8dc7fd1201ec093e801c837a85c05ce4e70e0c"}, "originalPosition": 66}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee23ee5d895fa1b8b744981abc6faf09202d7c81", "author": {"user": {"login": "netroms", "name": null}}, "url": "https://github.com/dhis2/dhis2-core/commit/ee23ee5d895fa1b8b744981abc6faf09202d7c81", "committedDate": "2020-08-25T14:35:55Z", "message": "feat: Convert xml based config files to java annotation based config\n\n* Remove deprecated org.olap4j.impl.ArrayMap usage"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0NTc3NDQ2", "url": "https://github.com/dhis2/dhis2-core/pull/5953#pullrequestreview-474577446", "createdAt": "2020-08-25T15:07:16Z", "commit": {"oid": "ee23ee5d895fa1b8b744981abc6faf09202d7c81"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0NTc4MDc4", "url": "https://github.com/dhis2/dhis2-core/pull/5953#pullrequestreview-474578078", "createdAt": "2020-08-25T15:07:56Z", "commit": {"oid": "ee23ee5d895fa1b8b744981abc6faf09202d7c81"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2526, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}