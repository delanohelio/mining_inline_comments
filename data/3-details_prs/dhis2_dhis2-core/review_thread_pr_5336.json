{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwNDAzMTE3", "number": 5336, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNjo1Mzo0OFrODv20xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzowMzo1N1rODv2_3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTA3OTExOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/config/ServiceConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNjo1Mzo0OFrOGChV1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNjo1Mzo0OFrOGChV1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI5NjU5Ng==", "bodyText": "Answering some of the questions here:\nActually I'm not sure either. For instance, NEW_AND_UPDATE seems to overlap 99% CREATE_AND UPDATE.", "url": "https://github.com/dhis2/dhis2-core/pull/5336#discussion_r405296596", "createdAt": "2020-04-08T06:53:48Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/config/ServiceConfig.java", "diffHunk": "@@ -217,4 +224,37 @@ public RetryTemplate retryTemplate()\n             ImportStrategy.CREATE_AND_UPDATE, CREATE_EVENTS_PREPROCESS,\n             ImportStrategy.NEW_AND_UPDATES, CREATE_EVENTS_PREPROCESS );\n     }\n+\n+    /**\n+     * Default validation chains for Tracker Import (update) events process.\n+     */\n+    private final static List<Class<? extends org.hisp.dhis.dxf2.events.event.validation.ValidationCheck>> UPDATE_EVENTS_CHECKS = Lists\n+        .newArrayList(\n+        // @formatter:off\n+            EventBasicCheck.class,\n+            ProgramStageInstanceBasicCheck.class,\n+            ProgramStageInstanceAclCheck.class,\n+            ProgramCheck.class,\n+            EventBaseCheck.class,\n+            ProgramStageInstanceAuthCheck.class,\n+            AttributeOptionComboCheck.class,\n+            EventGeometryCheck.class\n+        );\n+        // @formatter:on\n+\n+    // TODO: Ask what's the difference between the values in the Enum ImportStrategy?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ea3d8817e21edb0db0191fe014bec5d448a7e15"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTA5NjU5OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/preProcess/update/ProgramInstanceUpdatePreProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzowMDowNFrOGChgmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzowMDowNFrOGChgmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI5OTM1NA==", "bodyText": "I have created some shared super-class code to get this kind of data, we can refactor later", "url": "https://github.com/dhis2/dhis2-core/pull/5336#discussion_r405299354", "createdAt": "2020-04-08T07:00:04Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/preProcess/update/ProgramInstanceUpdatePreProcessor.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package org.hisp.dhis.dxf2.events.event.preProcess.update;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.hisp.dhis.event.EventStatus.ACTIVE;\n+import static org.hisp.dhis.event.EventStatus.COMPLETED;\n+import static org.hisp.dhis.event.EventStatus.SCHEDULE;\n+import static org.hisp.dhis.event.EventStatus.SKIPPED;\n+import static org.hisp.dhis.user.User.getSafeUsername;\n+import static org.hisp.dhis.user.UserCredentials.USERNAME_MAX_LENGTH;\n+import static org.hisp.dhis.util.DateUtils.parseDate;\n+import static org.springframework.util.StringUtils.isEmpty;\n+\n+import java.util.Date;\n+\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.event.preProcess.PreProcessor;\n+import org.hisp.dhis.dxf2.events.event.validation.ValidationContext;\n+import org.hisp.dhis.dxf2.importsummary.ImportConflict;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.util.DateUtils;\n+\n+public class ProgramInstanceUpdatePreProcessor\n+    implements\n+    PreProcessor\n+{\n+    @Override\n+    public void process( final Event event, final ValidationContext ctx )\n+    {\n+        final ProgramStageInstance programStageInstance = ctx.getProgramStageInstanceMap().get( event.getEvent() );\n+        final ImportOptions importOptions = ctx.getImportOptions();\n+        final OrganisationUnit organisationUnit = ctx.getOrganisationUnitMap().get( event.getUid() );\n+        final CategoryOptionCombo categoryOptionCombo = ctx.getCategoryOptionComboMap().get( event.getUid() );\n+\n+        Date dueDate = new Date();\n+        if ( event.getDueDate() != null )\n+        {\n+            dueDate = parseDate( event.getDueDate() );\n+        }\n+\n+        if ( event.getEventDate() != null )\n+        {\n+            programStageInstance.setExecutionDate( parseDate( event.getEventDate() ) );\n+        }\n+\n+        if ( categoryOptionCombo != null )\n+        {\n+            programStageInstance.setAttributeOptionCombo( categoryOptionCombo );\n+        }\n+\n+        final String storedBy = getValidUsername( event.getStoredBy(), null,\n+            importOptions.getUser() != null ? importOptions.getUser().getUsername() : \"[Unknown]\" );\n+\n+        final String completedBy = getValidUsername( event.getCompletedBy(), null,\n+            importOptions.getUser() != null ? importOptions.getUser().getUsername() : \"[Unknown]\" );\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ea3d8817e21edb0db0191fe014bec5d448a7e15"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTEwMzYyOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/preProcess/update/ProgramInstanceUpdatePreProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzowMjo0MlrOGChlCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzowMjo0MlrOGChlCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMwMDQ5MA==", "bodyText": "We can calculate completedBy only when is needed (if status == completed)", "url": "https://github.com/dhis2/dhis2-core/pull/5336#discussion_r405300490", "createdAt": "2020-04-08T07:02:42Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/preProcess/update/ProgramInstanceUpdatePreProcessor.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package org.hisp.dhis.dxf2.events.event.preProcess.update;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.hisp.dhis.event.EventStatus.ACTIVE;\n+import static org.hisp.dhis.event.EventStatus.COMPLETED;\n+import static org.hisp.dhis.event.EventStatus.SCHEDULE;\n+import static org.hisp.dhis.event.EventStatus.SKIPPED;\n+import static org.hisp.dhis.user.User.getSafeUsername;\n+import static org.hisp.dhis.user.UserCredentials.USERNAME_MAX_LENGTH;\n+import static org.hisp.dhis.util.DateUtils.parseDate;\n+import static org.springframework.util.StringUtils.isEmpty;\n+\n+import java.util.Date;\n+\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.event.preProcess.PreProcessor;\n+import org.hisp.dhis.dxf2.events.event.validation.ValidationContext;\n+import org.hisp.dhis.dxf2.importsummary.ImportConflict;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.util.DateUtils;\n+\n+public class ProgramInstanceUpdatePreProcessor\n+    implements\n+    PreProcessor\n+{\n+    @Override\n+    public void process( final Event event, final ValidationContext ctx )\n+    {\n+        final ProgramStageInstance programStageInstance = ctx.getProgramStageInstanceMap().get( event.getEvent() );\n+        final ImportOptions importOptions = ctx.getImportOptions();\n+        final OrganisationUnit organisationUnit = ctx.getOrganisationUnitMap().get( event.getUid() );\n+        final CategoryOptionCombo categoryOptionCombo = ctx.getCategoryOptionComboMap().get( event.getUid() );\n+\n+        Date dueDate = new Date();\n+        if ( event.getDueDate() != null )\n+        {\n+            dueDate = parseDate( event.getDueDate() );\n+        }\n+\n+        if ( event.getEventDate() != null )\n+        {\n+            programStageInstance.setExecutionDate( parseDate( event.getEventDate() ) );\n+        }\n+\n+        if ( categoryOptionCombo != null )\n+        {\n+            programStageInstance.setAttributeOptionCombo( categoryOptionCombo );\n+        }\n+\n+        final String storedBy = getValidUsername( event.getStoredBy(), null,\n+            importOptions.getUser() != null ? importOptions.getUser().getUsername() : \"[Unknown]\" );\n+\n+        final String completedBy = getValidUsername( event.getCompletedBy(), null,\n+            importOptions.getUser() != null ? importOptions.getUser().getUsername() : \"[Unknown]\" );\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ea3d8817e21edb0db0191fe014bec5d448a7e15"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTEwNzQ4OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/preProcess/update/ProgramInstanceUpdatePreProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzowMzo1N1rOGChnbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzowMzo1N1rOGChnbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMwMTEwMw==", "bodyText": "Yes exactly, I have created a shared function for this and a new Validator for the username lenght (note that this is a warning, rather than a breaking error)", "url": "https://github.com/dhis2/dhis2-core/pull/5336#discussion_r405301103", "createdAt": "2020-04-08T07:03:57Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/preProcess/update/ProgramInstanceUpdatePreProcessor.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package org.hisp.dhis.dxf2.events.event.preProcess.update;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.hisp.dhis.event.EventStatus.ACTIVE;\n+import static org.hisp.dhis.event.EventStatus.COMPLETED;\n+import static org.hisp.dhis.event.EventStatus.SCHEDULE;\n+import static org.hisp.dhis.event.EventStatus.SKIPPED;\n+import static org.hisp.dhis.user.User.getSafeUsername;\n+import static org.hisp.dhis.user.UserCredentials.USERNAME_MAX_LENGTH;\n+import static org.hisp.dhis.util.DateUtils.parseDate;\n+import static org.springframework.util.StringUtils.isEmpty;\n+\n+import java.util.Date;\n+\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.event.preProcess.PreProcessor;\n+import org.hisp.dhis.dxf2.events.event.validation.ValidationContext;\n+import org.hisp.dhis.dxf2.importsummary.ImportConflict;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.util.DateUtils;\n+\n+public class ProgramInstanceUpdatePreProcessor\n+    implements\n+    PreProcessor\n+{\n+    @Override\n+    public void process( final Event event, final ValidationContext ctx )\n+    {\n+        final ProgramStageInstance programStageInstance = ctx.getProgramStageInstanceMap().get( event.getEvent() );\n+        final ImportOptions importOptions = ctx.getImportOptions();\n+        final OrganisationUnit organisationUnit = ctx.getOrganisationUnitMap().get( event.getUid() );\n+        final CategoryOptionCombo categoryOptionCombo = ctx.getCategoryOptionComboMap().get( event.getUid() );\n+\n+        Date dueDate = new Date();\n+        if ( event.getDueDate() != null )\n+        {\n+            dueDate = parseDate( event.getDueDate() );\n+        }\n+\n+        if ( event.getEventDate() != null )\n+        {\n+            programStageInstance.setExecutionDate( parseDate( event.getEventDate() ) );\n+        }\n+\n+        if ( categoryOptionCombo != null )\n+        {\n+            programStageInstance.setAttributeOptionCombo( categoryOptionCombo );\n+        }\n+\n+        final String storedBy = getValidUsername( event.getStoredBy(), null,\n+            importOptions.getUser() != null ? importOptions.getUser().getUsername() : \"[Unknown]\" );\n+\n+        final String completedBy = getValidUsername( event.getCompletedBy(), null,\n+            importOptions.getUser() != null ? importOptions.getUser().getUsername() : \"[Unknown]\" );\n+\n+        if ( event.getStatus() == ACTIVE )\n+        {\n+            programStageInstance.setStatus( ACTIVE );\n+            programStageInstance.setCompletedBy( null );\n+            programStageInstance.setCompletedDate( null );\n+        }\n+        else if ( programStageInstance.getStatus() != event.getStatus() && event.getStatus() == COMPLETED )\n+        {\n+            programStageInstance.setCompletedBy( completedBy );\n+\n+            Date completedDate = new Date();\n+\n+            if ( event.getCompletedDate() != null )\n+            {\n+                completedDate = DateUtils.parseDate( event.getCompletedDate() );\n+            }\n+\n+            programStageInstance.setCompletedDate( completedDate );\n+            programStageInstance.setStatus( COMPLETED );\n+        }\n+        else if ( event.getStatus() == SKIPPED )\n+        {\n+            programStageInstance.setStatus( SKIPPED );\n+        }\n+        else if ( event.getStatus() == SCHEDULE )\n+        {\n+            programStageInstance.setStatus( SCHEDULE );\n+        }\n+\n+        programStageInstance.setStoredBy( storedBy );\n+        programStageInstance.setDueDate( dueDate );\n+        programStageInstance.setOrganisationUnit( organisationUnit );\n+        programStageInstance.setGeometry( event.getGeometry() );\n+\n+        if ( programStageInstance.getProgramStage().isEnableUserAssignment() )\n+        {\n+            programStageInstance.setAssignedUser( ctx.getAssignedUserMap().get( event.getUid() ) );\n+        }\n+    }\n+\n+    private String getValidUsername( final String userName, final ImportSummary importSummary,\n+        final String fallbackUsername )\n+    {\n+        String validUsername = userName;\n+\n+        if ( isEmpty( validUsername ) )\n+        {\n+            validUsername = getSafeUsername( fallbackUsername );\n+        }\n+        else if ( validUsername.length() > USERNAME_MAX_LENGTH )\n+        {\n+            if ( importSummary != null )\n+            {\n+                // TODO: luciano this should be moved to the new logic\n+                importSummary.getConflicts().add( new ImportConflict( \"Username\", validUsername + \" is more than \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ea3d8817e21edb0db0191fe014bec5d448a7e15"}, "originalPosition": 141}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3479, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}