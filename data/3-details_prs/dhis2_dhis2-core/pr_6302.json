{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1NTcxOTAz", "number": 6302, "title": "Dhis2 9667 program rule variables duplicate name", "bodyText": "", "createdAt": "2020-09-30T14:55:14Z", "url": "https://github.com/dhis2/dhis2-core/pull/6302", "merged": true, "mergeCommit": {"oid": "f267d1d60ea43d96d2d0c34a8e25847bc6a69a26"}, "closed": true, "closedAt": "2020-10-02T09:52:34Z", "author": {"login": "gnespolino"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdN73okgH2gAyNDk1NTcxOTAzOmViODRkYTZlOGNmMmM4MmRmNWFkYTJmZDc2ODIyZDM3NzAyYzRhZGM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdOiRs-gH2gAyNDk1NTcxOTAzOmJiYzA4NTY1Yzc5ZDM0OGFlY2IwMDU1MjZiNTY3M2ViN2IwZTdjZTg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "eb84da6e8cf2c82df5ada2fd76822d37702c4adc", "author": {"user": {"login": "gnespolino", "name": "Giuseppe Nespolino"}}, "url": "https://github.com/dhis2/dhis2-core/commit/eb84da6e8cf2c82df5ada2fd76822d37702c4adc", "committedDate": "2020-09-30T12:23:25Z", "message": "fix: program rule names and program rule variable names check for duplicate now does not fail on update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b5e5ca95579faca559742c39d4c6f3df749d6f8", "author": {"user": {"login": "gnespolino", "name": "Giuseppe Nespolino"}}, "url": "https://github.com/dhis2/dhis2-core/commit/7b5e5ca95579faca559742c39d4c6f3df749d6f8", "committedDate": "2020-09-30T14:52:15Z", "message": "fix: Flyway migration to normalize a situation where different rules and rule variables under the same program could have the same names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cab0c0dc8068bdd30491575b9c37782449e10b58", "author": {"user": {"login": "gnespolino", "name": "Giuseppe Nespolino"}}, "url": "https://github.com/dhis2/dhis2-core/commit/cab0c0dc8068bdd30491575b9c37782449e10b58", "committedDate": "2020-10-01T12:07:40Z", "message": "fix: Flyway migration enhancement to reduce duplicated code and generate a list of affected rules at the end of migration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47e187d4133c242a6f89496c30ecb99061f5253c", "author": {"user": {"login": "gnespolino", "name": "Giuseppe Nespolino"}}, "url": "https://github.com/dhis2/dhis2-core/commit/47e187d4133c242a6f89496c30ecb99061f5253c", "committedDate": "2020-10-01T12:17:34Z", "message": "fix: Flyway migration minor method naming fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwOTA4NzI3", "url": "https://github.com/dhis2/dhis2-core/pull/6302#pullrequestreview-500908727", "createdAt": "2020-10-02T07:22:43Z", "commit": {"oid": "47e187d4133c242a6f89496c30ecb99061f5253c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwOTI4Nzc1", "url": "https://github.com/dhis2/dhis2-core/pull/6302#pullrequestreview-500928775", "createdAt": "2020-10-02T07:57:06Z", "commit": {"oid": "47e187d4133c242a6f89496c30ecb99061f5253c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwOTIxODc1", "url": "https://github.com/dhis2/dhis2-core/pull/6302#pullrequestreview-500921875", "createdAt": "2020-10-02T07:45:49Z", "commit": {"oid": "47e187d4133c242a6f89496c30ecb99061f5253c"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNzo0Njo1NVrOHbkDvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwODozNDoyM1rOHblc4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY2NDM4Mg==", "bodyText": "extra newline", "url": "https://github.com/dhis2/dhis2-core/pull/6302#discussion_r498664382", "createdAt": "2020-10-02T07:46:55Z", "author": {"login": "ameenhere"}, "path": "dhis-2/dhis-support/dhis-support-db-migration/src/main/java/org/hisp/dhis/db/migration/v36/V2_36_1__normalize_program_rule_variable_names_for_duplicates.java", "diffHunk": "@@ -0,0 +1,218 @@\n+package org.hisp.dhis.db.migration.v36;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.hisp.dhis.db.migration.v36.V2_36_1__normalize_program_rule_variable_names_for_duplicates.ProgramRuleMigrationUtils.findAvailableName;\n+\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.BiFunction;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.flywaydb.core.api.migration.BaseJavaMigration;\n+import org.flywaydb.core.api.migration.Context;\n+\n+import lombok.SneakyThrows;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * @author Giuseppe Nespolino <g.nespolino@gmail.com>\n+ */\n+@Slf4j\n+public class V2_36_1__normalize_program_rule_variable_names_for_duplicates\n+    extends BaseJavaMigration\n+{\n+\n+    @Override\n+    public void migrate( Context context )\n+        throws Exception\n+    {\n+        Collection<String> affectedRules = getCandidates( context.getConnection() ).stream()\n+            .map( candidate -> renameOccurrencesWithSuffix( candidate, context.getConnection() ) )\n+            .collect( Collectors.toSet() )\n+            .stream()\n+            .flatMap( Collection::stream )\n+            .collect( Collectors.toSet() );\n+\n+        if ( !affectedRules.isEmpty() )\n+        {\n+            log.warn(\n+                \"The following rules have variables whose names were formerly duplicated by some other variables. \" +\n+                    \"Some of the following rules might not work as expected after this migration, please review them: \"\n+                    + affectedRules );\n+        }\n+\n+    }\n+\n+    private List<Pair<Long, String>> getCandidates( Connection connection )\n+        throws SQLException\n+    {\n+\n+        final String candidateDetectionSql = \"SELECT programid, name\" +\n+            \" FROM programrulevariable \" +\n+            \" group by programid, name \" +\n+            \" having count(*) > 1\";\n+\n+        List<Pair<Long, String>> candidates = new ArrayList<>();\n+\n+        try (final Statement stmt = connection.createStatement();\n+            final ResultSet rs = stmt.executeQuery( candidateDetectionSql ))\n+        {\n+            while ( rs.next() )\n+            {\n+                long programId = rs.getLong( \"programid\" );\n+                String programRuleVariableName = rs.getString( \"name\" );\n+\n+                candidates.add( Pair.of( programId, programRuleVariableName ) );\n+            }\n+        }\n+        return candidates;\n+    }\n+\n+    @SneakyThrows\n+    private Collection<String> renameOccurrencesWithSuffix( Pair<Long, String> candidate, Connection connection )\n+    {\n+        Long programId = candidate.getLeft();\n+        String variableName = candidate.getRight();\n+\n+        final String programRulesVariableToRenameSql = \"SELECT uid, name\" +\n+            \" FROM programrulevariable where programid = \" + programId +\n+            \" AND name like '\" + variableName + \"%'\";\n+\n+        Map<String, String> uidWithNewNames = new HashMap<>();\n+\n+        try (final Statement stmt = connection.createStatement();\n+            final ResultSet rs = stmt.executeQuery( programRulesVariableToRenameSql ))\n+        {\n+            while ( rs.next() )\n+            {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47e187d4133c242a6f89496c30ecb99061f5253c"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY2NDU2Mw==", "bodyText": "extra new line", "url": "https://github.com/dhis2/dhis2-core/pull/6302#discussion_r498664563", "createdAt": "2020-10-02T07:47:18Z", "author": {"login": "ameenhere"}, "path": "dhis-2/dhis-support/dhis-support-db-migration/src/main/java/org/hisp/dhis/db/migration/v36/V2_36_1__normalize_program_rule_variable_names_for_duplicates.java", "diffHunk": "@@ -0,0 +1,218 @@\n+package org.hisp.dhis.db.migration.v36;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.hisp.dhis.db.migration.v36.V2_36_1__normalize_program_rule_variable_names_for_duplicates.ProgramRuleMigrationUtils.findAvailableName;\n+\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.BiFunction;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.flywaydb.core.api.migration.BaseJavaMigration;\n+import org.flywaydb.core.api.migration.Context;\n+\n+import lombok.SneakyThrows;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * @author Giuseppe Nespolino <g.nespolino@gmail.com>\n+ */\n+@Slf4j\n+public class V2_36_1__normalize_program_rule_variable_names_for_duplicates\n+    extends BaseJavaMigration\n+{\n+\n+    @Override\n+    public void migrate( Context context )\n+        throws Exception\n+    {\n+        Collection<String> affectedRules = getCandidates( context.getConnection() ).stream()\n+            .map( candidate -> renameOccurrencesWithSuffix( candidate, context.getConnection() ) )\n+            .collect( Collectors.toSet() )\n+            .stream()\n+            .flatMap( Collection::stream )\n+            .collect( Collectors.toSet() );\n+\n+        if ( !affectedRules.isEmpty() )\n+        {\n+            log.warn(\n+                \"The following rules have variables whose names were formerly duplicated by some other variables. \" +\n+                    \"Some of the following rules might not work as expected after this migration, please review them: \"\n+                    + affectedRules );\n+        }\n+\n+    }\n+\n+    private List<Pair<Long, String>> getCandidates( Connection connection )\n+        throws SQLException\n+    {\n+\n+        final String candidateDetectionSql = \"SELECT programid, name\" +\n+            \" FROM programrulevariable \" +\n+            \" group by programid, name \" +\n+            \" having count(*) > 1\";\n+\n+        List<Pair<Long, String>> candidates = new ArrayList<>();\n+\n+        try (final Statement stmt = connection.createStatement();\n+            final ResultSet rs = stmt.executeQuery( candidateDetectionSql ))\n+        {\n+            while ( rs.next() )\n+            {\n+                long programId = rs.getLong( \"programid\" );\n+                String programRuleVariableName = rs.getString( \"name\" );\n+\n+                candidates.add( Pair.of( programId, programRuleVariableName ) );\n+            }\n+        }\n+        return candidates;\n+    }\n+\n+    @SneakyThrows\n+    private Collection<String> renameOccurrencesWithSuffix( Pair<Long, String> candidate, Connection connection )\n+    {\n+        Long programId = candidate.getLeft();\n+        String variableName = candidate.getRight();\n+\n+        final String programRulesVariableToRenameSql = \"SELECT uid, name\" +\n+            \" FROM programrulevariable where programid = \" + programId +\n+            \" AND name like '\" + variableName + \"%'\";\n+\n+        Map<String, String> uidWithNewNames = new HashMap<>();\n+\n+        try (final Statement stmt = connection.createStatement();\n+            final ResultSet rs = stmt.executeQuery( programRulesVariableToRenameSql ))\n+        {\n+            while ( rs.next() )\n+            {\n+\n+                uidWithNewNames.put( rs.getString( \"uid\" ), rs.getString( \"name\" ) );\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47e187d4133c242a6f89496c30ecb99061f5253c"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY4NjAyMQ==", "bodyText": "I would suggest to have some comments in different parts of this file indicating the different steps in the migrations. Like (This is just an example, you will know better)\n\nIdentifying the programrulevariable with duplicate names.\nFor each duplicate, check if there are similar/existing names already in the programrulevariable table....\n3.........and so on.\n\nJust to make it easy to understand in one reading rather than trying to go through all the streams and methods to verify what exactly is being done.\nEven a detailed javadoc for each of the methods here might also suffice.", "url": "https://github.com/dhis2/dhis2-core/pull/6302#discussion_r498686021", "createdAt": "2020-10-02T08:32:07Z", "author": {"login": "ameenhere"}, "path": "dhis-2/dhis-support/dhis-support-db-migration/src/main/java/org/hisp/dhis/db/migration/v36/V2_36_1__normalize_program_rule_variable_names_for_duplicates.java", "diffHunk": "@@ -0,0 +1,218 @@\n+package org.hisp.dhis.db.migration.v36;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.hisp.dhis.db.migration.v36.V2_36_1__normalize_program_rule_variable_names_for_duplicates.ProgramRuleMigrationUtils.findAvailableName;\n+\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.BiFunction;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.flywaydb.core.api.migration.BaseJavaMigration;\n+import org.flywaydb.core.api.migration.Context;\n+\n+import lombok.SneakyThrows;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * @author Giuseppe Nespolino <g.nespolino@gmail.com>\n+ */\n+@Slf4j\n+public class V2_36_1__normalize_program_rule_variable_names_for_duplicates\n+    extends BaseJavaMigration\n+{\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47e187d4133c242a6f89496c30ecb99061f5253c"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY4NzE1Mg==", "bodyText": "extra newline", "url": "https://github.com/dhis2/dhis2-core/pull/6302#discussion_r498687152", "createdAt": "2020-10-02T08:34:17Z", "author": {"login": "ameenhere"}, "path": "dhis-2/dhis-support/dhis-support-db-migration/src/main/java/org/hisp/dhis/db/migration/v36/V2_36_2__normalize_program_rule_names_for_duplicates.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package org.hisp.dhis.db.migration.v36;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.hisp.dhis.db.migration.v36.V2_36_1__normalize_program_rule_variable_names_for_duplicates.ProgramRuleMigrationUtils.findAvailableName;\n+import static org.hisp.dhis.db.migration.v36.V2_36_1__normalize_program_rule_variable_names_for_duplicates.ProgramRuleMigrationUtils.renameAll;\n+\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.flywaydb.core.api.migration.BaseJavaMigration;\n+import org.flywaydb.core.api.migration.Context;\n+\n+import lombok.SneakyThrows;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * @author Giuseppe Nespolino <g.nespolino@gmail.com>\n+ */\n+@Slf4j\n+public class V2_36_2__normalize_program_rule_names_for_duplicates\n+    extends BaseJavaMigration\n+{\n+\n+    @Override\n+    public void migrate( Context context )\n+        throws Exception\n+    {\n+        getCandidates( context.getConnection() )\n+            .forEach( candidate -> renameOccurrencesWithSuffix( candidate, context.getConnection() ) );\n+    }\n+\n+    private List<Pair<Long, String>> getCandidates( Connection connection )\n+        throws SQLException\n+    {\n+\n+        final String candidateDetectionSql = \"SELECT programid, name\" +\n+            \" FROM programrule \" +\n+            \" group by programid, name \" +\n+            \" having count(*) > 1\";\n+\n+        List<Pair<Long, String>> candidates = new ArrayList<>();\n+\n+        try (final Statement stmt = connection.createStatement();\n+            final ResultSet rs = stmt.executeQuery( candidateDetectionSql ))\n+        {\n+            while ( rs.next() )\n+            {\n+                candidates.add( Pair.of( rs.getLong( \"programid\" ), rs.getString( \"name\" ) ) );\n+            }\n+        }\n+        return candidates;\n+    }\n+\n+    @SneakyThrows\n+    private void renameOccurrencesWithSuffix( Pair<Long, String> candidate, Connection connection )\n+    {\n+        Long programId = candidate.getLeft();\n+        String ruleName = candidate.getRight();\n+\n+        final String programRulesToRenameSql = \"SELECT uid, name\" +\n+            \" FROM programrule where programid = \" + programId +\n+            \" AND name like '\" + ruleName + \"%'\";\n+\n+        Map<String, String> uidWithNewNames = new HashMap<>();\n+\n+        try (final Statement stmt = connection.createStatement();\n+            final ResultSet rs = stmt.executeQuery( programRulesToRenameSql ))\n+        {\n+            while ( rs.next() )\n+            {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47e187d4133c242a6f89496c30ecb99061f5253c"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY4NzIwMg==", "bodyText": "extra newline", "url": "https://github.com/dhis2/dhis2-core/pull/6302#discussion_r498687202", "createdAt": "2020-10-02T08:34:23Z", "author": {"login": "ameenhere"}, "path": "dhis-2/dhis-support/dhis-support-db-migration/src/main/java/org/hisp/dhis/db/migration/v36/V2_36_2__normalize_program_rule_names_for_duplicates.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package org.hisp.dhis.db.migration.v36;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.hisp.dhis.db.migration.v36.V2_36_1__normalize_program_rule_variable_names_for_duplicates.ProgramRuleMigrationUtils.findAvailableName;\n+import static org.hisp.dhis.db.migration.v36.V2_36_1__normalize_program_rule_variable_names_for_duplicates.ProgramRuleMigrationUtils.renameAll;\n+\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.flywaydb.core.api.migration.BaseJavaMigration;\n+import org.flywaydb.core.api.migration.Context;\n+\n+import lombok.SneakyThrows;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * @author Giuseppe Nespolino <g.nespolino@gmail.com>\n+ */\n+@Slf4j\n+public class V2_36_2__normalize_program_rule_names_for_duplicates\n+    extends BaseJavaMigration\n+{\n+\n+    @Override\n+    public void migrate( Context context )\n+        throws Exception\n+    {\n+        getCandidates( context.getConnection() )\n+            .forEach( candidate -> renameOccurrencesWithSuffix( candidate, context.getConnection() ) );\n+    }\n+\n+    private List<Pair<Long, String>> getCandidates( Connection connection )\n+        throws SQLException\n+    {\n+\n+        final String candidateDetectionSql = \"SELECT programid, name\" +\n+            \" FROM programrule \" +\n+            \" group by programid, name \" +\n+            \" having count(*) > 1\";\n+\n+        List<Pair<Long, String>> candidates = new ArrayList<>();\n+\n+        try (final Statement stmt = connection.createStatement();\n+            final ResultSet rs = stmt.executeQuery( candidateDetectionSql ))\n+        {\n+            while ( rs.next() )\n+            {\n+                candidates.add( Pair.of( rs.getLong( \"programid\" ), rs.getString( \"name\" ) ) );\n+            }\n+        }\n+        return candidates;\n+    }\n+\n+    @SneakyThrows\n+    private void renameOccurrencesWithSuffix( Pair<Long, String> candidate, Connection connection )\n+    {\n+        Long programId = candidate.getLeft();\n+        String ruleName = candidate.getRight();\n+\n+        final String programRulesToRenameSql = \"SELECT uid, name\" +\n+            \" FROM programrule where programid = \" + programId +\n+            \" AND name like '\" + ruleName + \"%'\";\n+\n+        Map<String, String> uidWithNewNames = new HashMap<>();\n+\n+        try (final Statement stmt = connection.createStatement();\n+            final ResultSet rs = stmt.executeQuery( programRulesToRenameSql ))\n+        {\n+            while ( rs.next() )\n+            {\n+\n+                uidWithNewNames.put( rs.getString( \"uid\" ), rs.getString( \"name\" ) );\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47e187d4133c242a6f89496c30ecb99061f5253c"}, "originalPosition": 108}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbc08565c79d348aecb005526b5673eb7b0e7ce8", "author": {"user": {"login": "gnespolino", "name": "Giuseppe Nespolino"}}, "url": "https://github.com/dhis2/dhis2-core/commit/bbc08565c79d348aecb005526b5673eb7b0e7ce8", "committedDate": "2020-10-02T09:08:17Z", "message": "fix: applocating Peer Review suggestions"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2416, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}