{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyMDQzMDA4", "number": 6384, "title": "fix: Respect sharing setting during event saving", "bodyText": "", "createdAt": "2020-10-13T07:01:26Z", "url": "https://github.com/dhis2/dhis2-core/pull/6384", "merged": true, "mergeCommit": {"oid": "ebc7a2aa288750cd777b3a5d757da40bc686dd83"}, "closed": true, "closedAt": "2020-10-27T11:14:38Z", "author": {"login": "abyot"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdSDCElgH2gAyNTAyMDQzMDA4OmQ2N2M2ZjFkNzc1N2Y2NzEyMTE4ZDk0ZTIwM2IxOWRkZmRiNTU0NzU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdWl1eeAH2gAyNTAyMDQzMDA4OjQ4MGM0MmU1YmRlN2VhMmU4NzZkNWM0MTRiYTE5NDM1NTAzNjQ1Mzc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d67c6f1d7757f6712118d94e203b19ddfdb55475", "author": {"user": {"login": "abyot", "name": "Abyot Asalefew Gizaw"}}, "url": "https://github.com/dhis2/dhis2-core/commit/d67c6f1d7757f6712118d94e203b19ddfdb55475", "committedDate": "2020-10-13T06:59:51Z", "message": "fix: Respect sharing setting in event saving"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3MjQ2MDQy", "url": "https://github.com/dhis2/dhis2-core/pull/6384#pullrequestreview-507246042", "createdAt": "2020-10-13T09:32:23Z", "commit": {"oid": "d67c6f1d7757f6712118d94e203b19ddfdb55475"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4MTczOTk5", "url": "https://github.com/dhis2/dhis2-core/pull/6384#pullrequestreview-508173999", "createdAt": "2020-10-14T09:43:42Z", "commit": {"oid": "d67c6f1d7757f6712118d94e203b19ddfdb55475"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwOTo0Mzo0MlrOHhK7Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwOTo1MTozMFrOHhLOXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU0NDAyMg==", "bodyText": "Can you add the new argument to the list of Javadoc arguments for the method?", "url": "https://github.com/dhis2/dhis2-core/pull/6384#discussion_r504544022", "createdAt": "2020-10-14T09:43:42Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/program/ProgramStageInstanceService.java", "diffHunk": "@@ -170,7 +170,7 @@ ProgramStageInstance createProgramStageInstance( ProgramInstance programInstance\n      * @param singleValue specifies whether the update is a single value update\r\n      */\r\n     void auditDataValuesChangesAndHandleFileDataValues( Set<EventDataValue> newDataValues, Set<EventDataValue> updatedDataValues,Set<EventDataValue> removedDataValues,\r\n-        Map<String, DataElement> dataElementsCache, ProgramStageInstance programStageInstance, boolean singleValue );\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d67c6f1d7757f6712118d94e203b19ddfdb55475"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU0NTU5NQ==", "bodyText": "minor: can you format to respect the 80 chars line length:\nSet<EventDataValue> nonAccessibleDataValues = programStageInstance.getEventDataValues().stream()\n    .filter( dv -> nonAccessibleDataElements.contains( dv.getDataElement() ) )\n    .collect( Collectors.toSet() );", "url": "https://github.com/dhis2/dhis2-core/pull/6384#discussion_r504545595", "createdAt": "2020-10-14T09:46:04Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/program/DefaultProgramStageInstanceService.java", "diffHunk": "@@ -310,7 +311,9 @@ public void auditDataValuesChangesAndHandleFileDataValues( Set<EventDataValue> n\n         }\r\n         else\r\n         {\r\n-            programStageInstance.setEventDataValues( updatedOrNewDataValues );\r\n+            Set<EventDataValue> nonAccessibleDataValues = programStageInstance.getEventDataValues().stream().filter( dv -> nonAccessibleDataElements.contains( dv.getDataElement() ) ).collect(  Collectors.toSet() );\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d67c6f1d7757f6712118d94e203b19ddfdb55475"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU0NzI2Mw==", "bodyText": "minor: can you reformat to respect 80 chars length\nprogramStageInstanceService.auditDataValuesChangesAndHandleFileDataValues( newDataValues, updatedDataValues,\n    removedDataValuesDueToEmptyValue, dataElementsCache, nonAccessibleDataElements, programStageInstance,\n    singleValue )", "url": "https://github.com/dhis2/dhis2-core/pull/6384#discussion_r504547263", "createdAt": "2020-10-14T09:48:46Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/eventdatavalue/DefaultEventDataValueService.java", "diffHunk": "@@ -116,16 +119,32 @@ public void processDataValues( ProgramStageInstance programStageInstance, Event\n             {\n                 // This can happen if a wrong data element identifier is provided\n                 importSummary.getConflicts().add( new ImportConflict( \"dataElement\", dataValue.getDataElement() + \" is not a valid data element\" ) );\n+                continue;\n             }\n-            else if ( validateDataValue( programStageInstance, importOptions.getUser(), dataElement, dataValue.getValue(), importSummary )\n-                && !importOptions.isDryRun() )\n+\n+            if ( validateDataValue( programStageInstance, importOptions.getUser(), dataElement, dataValue.getValue(), importSummary ) )\n             {\n+                accessibleDataElements.add( dataValue.getDataElement() );\n                 prepareDataValueForStorage( dataElementValueMap, dataValue, dataElement, newDataValues, updatedDataValues,\n                     removedDataValuesDueToEmptyValue, storedBy );\n             }\n+            else\n+            {\n+                nonAccessibleDataElements.add( dataValue.getDataElement() );\n+            }\n         }\n \n-        programStageInstanceService.auditDataValuesChangesAndHandleFileDataValues( newDataValues, updatedDataValues, removedDataValuesDueToEmptyValue, dataElementsCache, programStageInstance, singleValue );\n+        Set<String> checkedDataElements = Sets.union( accessibleDataElements, nonAccessibleDataElements );\n+\n+        for ( DataElement dataElement : programStageInstance.getProgramStage().getDataElements() )\n+        {\n+            if ( !checkedDataElements.contains( dataElement.getUid() ) &&  !trackerAccessManager.canWrite( importOptions.getUser(), programStageInstance, dataElement, true ).isEmpty() )\n+            {\n+                nonAccessibleDataElements.add( dataElement.getUid() );\n+            }\n+        }\n+\n+        programStageInstanceService.auditDataValuesChangesAndHandleFileDataValues( newDataValues, updatedDataValues, removedDataValuesDueToEmptyValue, dataElementsCache, nonAccessibleDataElements, programStageInstance, singleValue );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d67c6f1d7757f6712118d94e203b19ddfdb55475"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU0ODk1OQ==", "bodyText": "the call to trackerAccessManager.canWrite( importOptions.getUser(), programStageInstance, dataElement, true ) is taking place also at line 125 (inside validateDataValue). I understand that this new block of code (from line 137 to 145) is required for the auditing. Can we somehow avoid the call to this canWrite method a second time?", "url": "https://github.com/dhis2/dhis2-core/pull/6384#discussion_r504548959", "createdAt": "2020-10-14T09:51:30Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/eventdatavalue/DefaultEventDataValueService.java", "diffHunk": "@@ -116,16 +119,32 @@ public void processDataValues( ProgramStageInstance programStageInstance, Event\n             {\n                 // This can happen if a wrong data element identifier is provided\n                 importSummary.getConflicts().add( new ImportConflict( \"dataElement\", dataValue.getDataElement() + \" is not a valid data element\" ) );\n+                continue;\n             }\n-            else if ( validateDataValue( programStageInstance, importOptions.getUser(), dataElement, dataValue.getValue(), importSummary )\n-                && !importOptions.isDryRun() )\n+\n+            if ( validateDataValue( programStageInstance, importOptions.getUser(), dataElement, dataValue.getValue(), importSummary ) )\n             {\n+                accessibleDataElements.add( dataValue.getDataElement() );\n                 prepareDataValueForStorage( dataElementValueMap, dataValue, dataElement, newDataValues, updatedDataValues,\n                     removedDataValuesDueToEmptyValue, storedBy );\n             }\n+            else\n+            {\n+                nonAccessibleDataElements.add( dataValue.getDataElement() );\n+            }\n         }\n \n-        programStageInstanceService.auditDataValuesChangesAndHandleFileDataValues( newDataValues, updatedDataValues, removedDataValuesDueToEmptyValue, dataElementsCache, programStageInstance, singleValue );\n+        Set<String> checkedDataElements = Sets.union( accessibleDataElements, nonAccessibleDataElements );\n+\n+        for ( DataElement dataElement : programStageInstance.getProgramStage().getDataElements() )\n+        {\n+            if ( !checkedDataElements.contains( dataElement.getUid() ) &&  !trackerAccessManager.canWrite( importOptions.getUser(), programStageInstance, dataElement, true ).isEmpty() )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d67c6f1d7757f6712118d94e203b19ddfdb55475"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "480c42e5bde7ea2e876d5c414ba1943550364537", "author": {"user": {"login": "abyot", "name": "Abyot Asalefew Gizaw"}}, "url": "https://github.com/dhis2/dhis2-core/commit/480c42e5bde7ea2e876d5c414ba1943550364537", "committedDate": "2020-10-27T09:48:28Z", "message": "chore: Code style"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2379, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}