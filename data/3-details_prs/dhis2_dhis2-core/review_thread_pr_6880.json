{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM2MDIzOTc5", "number": 6880, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwODo1Njo0NVrOFFeOBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwODozNDowOFrOFGEbDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMjgyMzA4OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-validation/src/main/java/org/hisp/dhis/outlierdetection/Order.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwODo1Njo0NVrOIF_1iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwODo1Njo0NVrOIF_1iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE1OTY4OQ==", "bodyText": "package before license", "url": "https://github.com/dhis2/dhis2-core/pull/6880#discussion_r543159689", "createdAt": "2020-12-15T08:56:45Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-validation/src/main/java/org/hisp/dhis/outlierdetection/Order.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.outlierdetection;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77b9628c148d6f845b6c25166f495856455d7db5"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODczOTE0OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-validation/src/main/java/org/hisp/dhis/outlierdetection/OutlierDetectionMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzowNzo1OFrOIG2jBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NzozMFrOIG4WWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA1NjA2OA==", "bodyText": "mix of Integer and int ?", "url": "https://github.com/dhis2/dhis2-core/pull/6880#discussion_r544056068", "createdAt": "2020-12-16T07:07:58Z", "author": {"login": "netroms"}, "path": "dhis-2/dhis-services/dhis-service-validation/src/main/java/org/hisp/dhis/outlierdetection/OutlierDetectionMetadata.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package org.hisp.dhis.outlierdetection;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import lombok.Data;\n+\n+/**\n+ * Metadata for an outlier detection response.\n+ *\n+ * @author Lars Helge Overland\n+ */\n+@Data\n+public class OutlierDetectionMetadata\n+{\n+    @JsonProperty\n+    private OutlierDetectionAlgorithm outlierAlgorithm;\n+\n+    @JsonProperty\n+    private double threshold;\n+\n+    @JsonProperty\n+    private Order orderBy;\n+\n+    @JsonProperty\n+    private int maxResults;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d2899660545e107b9f3dde677738f1700db4cfb"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NTU5NQ==", "bodyText": "Good spot. Fixed.", "url": "https://github.com/dhis2/dhis2-core/pull/6880#discussion_r544085595", "createdAt": "2020-12-16T07:57:30Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-services/dhis-service-validation/src/main/java/org/hisp/dhis/outlierdetection/OutlierDetectionMetadata.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package org.hisp.dhis.outlierdetection;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import lombok.Data;\n+\n+/**\n+ * Metadata for an outlier detection response.\n+ *\n+ * @author Lars Helge Overland\n+ */\n+@Data\n+public class OutlierDetectionMetadata\n+{\n+    @JsonProperty\n+    private OutlierDetectionAlgorithm outlierAlgorithm;\n+\n+    @JsonProperty\n+    private double threshold;\n+\n+    @JsonProperty\n+    private Order orderBy;\n+\n+    @JsonProperty\n+    private int maxResults;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA1NjA2OA=="}, "originalCommit": {"oid": "1d2899660545e107b9f3dde677738f1700db4cfb"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODc0ODYyOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-validation/src/main/java/org/hisp/dhis/outlierdetection/OutlierDetectionRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzowOTo0OFrOIG2pXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1ODoyN1rOIG4X-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA1NzY5Mg==", "bodyText": "Better to use Lombok builder?", "url": "https://github.com/dhis2/dhis2-core/pull/6880#discussion_r544057692", "createdAt": "2020-12-16T07:09:48Z", "author": {"login": "netroms"}, "path": "dhis-2/dhis-services/dhis-service-validation/src/main/java/org/hisp/dhis/outlierdetection/OutlierDetectionRequest.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package org.hisp.dhis.outlierdetection;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.hisp.dhis.dataelement.DataElement;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import com.google.common.base.Preconditions;\n+\n+import lombok.Getter;\n+\n+/**\n+ * Encapsulation of an outlier detection request.\n+ *\n+ * @author Lars Helge Overland\n+ */\n+@Getter\n+public class OutlierDetectionRequest\n+{\n+    private List<DataElement> dataElements = new ArrayList<>();\n+\n+    private Date startDate;\n+\n+    private Date endDate;\n+\n+    private List<OrganisationUnit> orgUnits = new ArrayList<>();\n+\n+    private OrgUnitSelection orgUnitSelection;\n+\n+    private OutlierDetectionAlgorithm outlierAlgorithm = OutlierDetectionAlgorithm.Z_SCORE;\n+\n+    private double threshold;\n+\n+    private Order orderBy;\n+\n+    private int maxResults;\n+\n+    public List<Long> getDataElementIds()\n+    {\n+        return dataElements.stream()\n+            .map( DataElement::getId )\n+            .collect( Collectors.toList() );\n+    }\n+\n+    private OutlierDetectionRequest()\n+    {\n+    }\n+\n+    public static class Builder", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d2899660545e107b9f3dde677738f1700db4cfb"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NjAxMQ==", "bodyText": "Yep considered that, possibly better, but would want a bit more control over the builder for null checks, special start + end date method, etc.", "url": "https://github.com/dhis2/dhis2-core/pull/6880#discussion_r544086011", "createdAt": "2020-12-16T07:58:27Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-services/dhis-service-validation/src/main/java/org/hisp/dhis/outlierdetection/OutlierDetectionRequest.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package org.hisp.dhis.outlierdetection;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.hisp.dhis.dataelement.DataElement;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import com.google.common.base.Preconditions;\n+\n+import lombok.Getter;\n+\n+/**\n+ * Encapsulation of an outlier detection request.\n+ *\n+ * @author Lars Helge Overland\n+ */\n+@Getter\n+public class OutlierDetectionRequest\n+{\n+    private List<DataElement> dataElements = new ArrayList<>();\n+\n+    private Date startDate;\n+\n+    private Date endDate;\n+\n+    private List<OrganisationUnit> orgUnits = new ArrayList<>();\n+\n+    private OrgUnitSelection orgUnitSelection;\n+\n+    private OutlierDetectionAlgorithm outlierAlgorithm = OutlierDetectionAlgorithm.Z_SCORE;\n+\n+    private double threshold;\n+\n+    private Order orderBy;\n+\n+    private int maxResults;\n+\n+    public List<Long> getDataElementIds()\n+    {\n+        return dataElements.stream()\n+            .map( DataElement::getId )\n+            .collect( Collectors.toList() );\n+    }\n+\n+    private OutlierDetectionRequest()\n+    {\n+    }\n+\n+    public static class Builder", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA1NzY5Mg=="}, "originalCommit": {"oid": "1d2899660545e107b9f3dde677738f1700db4cfb"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxOTA4MjM4OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-validation/src/main/java/org/hisp/dhis/outlierdetection/OutlierDetectionService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwODozNDowOFrOIG5pHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwOTo0MTo0NVrOIG8aZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEwNjc4MQ==", "bodyText": "Maybe better to use a list here? List<ErrorMessage> in case there are multiple violations", "url": "https://github.com/dhis2/dhis2-core/pull/6880#discussion_r544106781", "createdAt": "2020-12-16T08:34:08Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-validation/src/main/java/org/hisp/dhis/outlierdetection/OutlierDetectionService.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package org.hisp.dhis.outlierdetection;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.common.IllegalQueryException;\n+import org.hisp.dhis.feedback.ErrorMessage;\n+\n+/**\n+ * Outlier detection service.\n+ *\n+ * @author Lars Helge Overland\n+ */\n+public interface OutlierDetectionService\n+{\n+    /**\n+     * Validates the given request.\n+     *\n+     * @param request the {@link OutlierDetectionRequest}.\n+     * @throws IllegalQueryException if request is invalid.\n+     */\n+    void validate( OutlierDetectionRequest request )\n+        throws IllegalQueryException;\n+\n+    /**\n+     * Validates the given request.\n+     *\n+     * @param request the {@link OutlierDetectionRequest}.\n+     * @return an {@link ErrorMessage} if request is invalid, or null if valid.\n+     */\n+    ErrorMessage validateForErrorMessage( OutlierDetectionRequest request );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85263236422aa1a772a2919a76d7d28954d7e26d"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE1MjE2NQ==", "bodyText": "The idea is that the API returns the first error message in a web message (standard error format). This is consistent with analytics and other APIs. Then the client must retry until there are no errors. I think we just stick with this pattern.", "url": "https://github.com/dhis2/dhis2-core/pull/6880#discussion_r544152165", "createdAt": "2020-12-16T09:41:45Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-services/dhis-service-validation/src/main/java/org/hisp/dhis/outlierdetection/OutlierDetectionService.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package org.hisp.dhis.outlierdetection;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.common.IllegalQueryException;\n+import org.hisp.dhis.feedback.ErrorMessage;\n+\n+/**\n+ * Outlier detection service.\n+ *\n+ * @author Lars Helge Overland\n+ */\n+public interface OutlierDetectionService\n+{\n+    /**\n+     * Validates the given request.\n+     *\n+     * @param request the {@link OutlierDetectionRequest}.\n+     * @throws IllegalQueryException if request is invalid.\n+     */\n+    void validate( OutlierDetectionRequest request )\n+        throws IllegalQueryException;\n+\n+    /**\n+     * Validates the given request.\n+     *\n+     * @param request the {@link OutlierDetectionRequest}.\n+     * @return an {@link ErrorMessage} if request is invalid, or null if valid.\n+     */\n+    ErrorMessage validateForErrorMessage( OutlierDetectionRequest request );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEwNjc4MQ=="}, "originalCommit": {"oid": "85263236422aa1a772a2919a76d7d28954d7e26d"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3672, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}