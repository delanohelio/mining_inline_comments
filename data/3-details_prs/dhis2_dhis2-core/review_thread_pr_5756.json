{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1NjYzODU2", "number": 5756, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNjo1NDoxNVrOEGnx1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxMToxNToxOVrOEJb9uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1Mzc4NjQ1OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-administration/src/main/java/org/hisp/dhis/maintenance/jdbc/JdbcMaintenanceStore.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNjo1NDoxNVrOGlh6yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODoyMTo1NlrOGrb4QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAwNjIxOQ==", "bodyText": "Design consideration: I wonder if we should allow sending an Audit object without the createdBy pre-populated (to avoid having to use the UserSupplier in each class that needs to send audit).\nThe AuditManager can check if the createdAt is null and use the supplier to populate.\nThe design advantage is that we remove one dependency (UserSupplier) from  classes that need to use to create an Audit object. .\nThe send method of AuditManager would contain this snippet:\nif ( StringUtils.isEmpty( audit.getCreatedBy() ) )\n{\n    audit.setCreatedBy( usernameSupplier.get() );\n}\n\n@mortenoh what do you think? (this is really a minor thing)", "url": "https://github.com/dhis2/dhis2-core/pull/5756#discussion_r442006219", "createdAt": "2020-06-18T06:54:15Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-administration/src/main/java/org/hisp/dhis/maintenance/jdbc/JdbcMaintenanceStore.java", "diffHunk": "@@ -165,6 +204,31 @@ public int deleteSoftDeletedTrackedEntityInstances()\n             \"delete from programownershiphistory where trackedentityinstanceid in \" + teiSelect,\n             \"delete from trackedentityinstance where deleted is true\" };\n \n-        return jdbcTemplate.batchUpdate( sqlStmts )[sqlStmts.length - 1];\n+        int result = jdbcTemplate.batchUpdate( sqlStmts )[sqlStmts.length - 1];\n+\n+        if ( result > 0 && deletedTeiUids.size() > 0 )\n+        {\n+            auditHardDeletedTrackedEntityInstances( deletedTeiUids );\n+        }\n+\n+        return result;\n+    }\n+\n+    private void auditHardDeletedTrackedEntityInstances( List<String> deletedTeiUids )\n+    {\n+        deletedTeiUids.forEach( teiUid -> {\n+            TrackedEntityInstance tei = new TrackedEntityInstance();\n+            tei.setUid( teiUid );\n+            tei.setDeleted( true );\n+            auditManager.send( Audit.builder()\n+                .auditType( AuditType.DELETE )\n+                .auditScope( AuditScope.TRACKER )\n+                .createdAt( LocalDateTime.now() )\n+                .createdBy( usernameSupplier.get() )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7db66b69b10d766509d77207d78f297cdd04153a"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYzNzA3OA==", "bodyText": "That makes sense for me, @vietnguyen can you have a look?", "url": "https://github.com/dhis2/dhis2-core/pull/5756#discussion_r446637078", "createdAt": "2020-06-28T11:14:01Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-administration/src/main/java/org/hisp/dhis/maintenance/jdbc/JdbcMaintenanceStore.java", "diffHunk": "@@ -165,6 +204,31 @@ public int deleteSoftDeletedTrackedEntityInstances()\n             \"delete from programownershiphistory where trackedentityinstanceid in \" + teiSelect,\n             \"delete from trackedentityinstance where deleted is true\" };\n \n-        return jdbcTemplate.batchUpdate( sqlStmts )[sqlStmts.length - 1];\n+        int result = jdbcTemplate.batchUpdate( sqlStmts )[sqlStmts.length - 1];\n+\n+        if ( result > 0 && deletedTeiUids.size() > 0 )\n+        {\n+            auditHardDeletedTrackedEntityInstances( deletedTeiUids );\n+        }\n+\n+        return result;\n+    }\n+\n+    private void auditHardDeletedTrackedEntityInstances( List<String> deletedTeiUids )\n+    {\n+        deletedTeiUids.forEach( teiUid -> {\n+            TrackedEntityInstance tei = new TrackedEntityInstance();\n+            tei.setUid( teiUid );\n+            tei.setDeleted( true );\n+            auditManager.send( Audit.builder()\n+                .auditType( AuditType.DELETE )\n+                .auditScope( AuditScope.TRACKER )\n+                .createdAt( LocalDateTime.now() )\n+                .createdBy( usernameSupplier.get() )", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAwNjIxOQ=="}, "originalCommit": {"oid": "7db66b69b10d766509d77207d78f297cdd04153a"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE5ODcyMA==", "bodyText": "Agree, fixed now", "url": "https://github.com/dhis2/dhis2-core/pull/5756#discussion_r448198720", "createdAt": "2020-07-01T08:21:56Z", "author": {"login": "vietnguyen"}, "path": "dhis-2/dhis-services/dhis-service-administration/src/main/java/org/hisp/dhis/maintenance/jdbc/JdbcMaintenanceStore.java", "diffHunk": "@@ -165,6 +204,31 @@ public int deleteSoftDeletedTrackedEntityInstances()\n             \"delete from programownershiphistory where trackedentityinstanceid in \" + teiSelect,\n             \"delete from trackedentityinstance where deleted is true\" };\n \n-        return jdbcTemplate.batchUpdate( sqlStmts )[sqlStmts.length - 1];\n+        int result = jdbcTemplate.batchUpdate( sqlStmts )[sqlStmts.length - 1];\n+\n+        if ( result > 0 && deletedTeiUids.size() > 0 )\n+        {\n+            auditHardDeletedTrackedEntityInstances( deletedTeiUids );\n+        }\n+\n+        return result;\n+    }\n+\n+    private void auditHardDeletedTrackedEntityInstances( List<String> deletedTeiUids )\n+    {\n+        deletedTeiUids.forEach( teiUid -> {\n+            TrackedEntityInstance tei = new TrackedEntityInstance();\n+            tei.setUid( teiUid );\n+            tei.setDeleted( true );\n+            auditManager.send( Audit.builder()\n+                .auditType( AuditType.DELETE )\n+                .auditScope( AuditScope.TRACKER )\n+                .createdAt( LocalDateTime.now() )\n+                .createdBy( usernameSupplier.get() )", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAwNjIxOQ=="}, "originalCommit": {"oid": "7db66b69b10d766509d77207d78f297cdd04153a"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MzMwODExOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-administration/src/test/java/org/hisp/dhis/maintenance/HardDeleteAuditTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxMToxNToxOVrOGp8krQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMjo0NjowNlrOHWrscA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYzNzIyOQ==", "bodyText": "I assume this is basically to wait for our embedded artemis to have processed the message? is there a better way here? maybe using mocking? @luciano-fiandesio", "url": "https://github.com/dhis2/dhis2-core/pull/5756#discussion_r446637229", "createdAt": "2020-06-28T11:15:19Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-administration/src/test/java/org/hisp/dhis/maintenance/HardDeleteAuditTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package org.hisp.dhis.maintenance;\n+\n+import com.google.common.collect.Sets;\n+import org.hisp.dhis.IntegrationTestBase;\n+import org.hisp.dhis.audit.Audit;\n+import org.hisp.dhis.audit.AuditQuery;\n+import org.hisp.dhis.audit.AuditService;\n+import org.hisp.dhis.audit.AuditType;\n+import org.hisp.dhis.common.IdentifiableObjectManager;\n+import org.hisp.dhis.maintenance.jdbc.JdbcMaintenanceStore;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.trackedentity.TrackedEntityAttribute;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstanceService;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.context.ActiveProfiles;\n+\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.awaitility.Awaitility.await;\n+import static org.junit.Assert.assertEquals;\n+\n+@ActiveProfiles( profiles = { \"test-audit\" } )\n+public class HardDeleteAuditTest\n+    extends IntegrationTestBase\n+{\n+    private static final int TIMEOUT = 5;\n+    @Autowired\n+    private AuditService auditService;\n+\n+    @Autowired\n+    private TrackedEntityInstanceService trackedEntityInstanceService;\n+\n+    @Autowired\n+    private IdentifiableObjectManager manager;\n+\n+    @Autowired\n+    private JdbcMaintenanceStore jdbcMaintenanceStore;\n+\n+    @Test\n+    public void testHardDeleteTei()\n+    {\n+        OrganisationUnit ou = createOrganisationUnit( 'A' );\n+        TrackedEntityAttribute attribute = createTrackedEntityAttribute( 'A' );\n+        manager.save( ou );\n+        manager.save( attribute );\n+\n+        TrackedEntityInstance tei = createTrackedEntityInstance( 'A', ou, attribute );\n+\n+        trackedEntityInstanceService.addTrackedEntityInstance( tei );\n+\n+        trackedEntityInstanceService.deleteTrackedEntityInstance( tei );\n+\n+        final AuditQuery query = AuditQuery.builder()\n+            .uid( Sets.newHashSet( tei.getUid() ) )\n+            .build();\n+\n+        await().atMost( TIMEOUT, TimeUnit.SECONDS ).until( () -> auditService.countAudits( query ) > 0 );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7db66b69b10d766509d77207d78f297cdd04153a"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzU0NjYwOA==", "bodyText": "@mortenoh I suggested @vietnguyen to use this library that is designed exactly for these kind of async tests. Since this is not an unit test, we can't really use mocks.", "url": "https://github.com/dhis2/dhis2-core/pull/5756#discussion_r493546608", "createdAt": "2020-09-23T12:46:06Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-administration/src/test/java/org/hisp/dhis/maintenance/HardDeleteAuditTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package org.hisp.dhis.maintenance;\n+\n+import com.google.common.collect.Sets;\n+import org.hisp.dhis.IntegrationTestBase;\n+import org.hisp.dhis.audit.Audit;\n+import org.hisp.dhis.audit.AuditQuery;\n+import org.hisp.dhis.audit.AuditService;\n+import org.hisp.dhis.audit.AuditType;\n+import org.hisp.dhis.common.IdentifiableObjectManager;\n+import org.hisp.dhis.maintenance.jdbc.JdbcMaintenanceStore;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.trackedentity.TrackedEntityAttribute;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstanceService;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.context.ActiveProfiles;\n+\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.awaitility.Awaitility.await;\n+import static org.junit.Assert.assertEquals;\n+\n+@ActiveProfiles( profiles = { \"test-audit\" } )\n+public class HardDeleteAuditTest\n+    extends IntegrationTestBase\n+{\n+    private static final int TIMEOUT = 5;\n+    @Autowired\n+    private AuditService auditService;\n+\n+    @Autowired\n+    private TrackedEntityInstanceService trackedEntityInstanceService;\n+\n+    @Autowired\n+    private IdentifiableObjectManager manager;\n+\n+    @Autowired\n+    private JdbcMaintenanceStore jdbcMaintenanceStore;\n+\n+    @Test\n+    public void testHardDeleteTei()\n+    {\n+        OrganisationUnit ou = createOrganisationUnit( 'A' );\n+        TrackedEntityAttribute attribute = createTrackedEntityAttribute( 'A' );\n+        manager.save( ou );\n+        manager.save( attribute );\n+\n+        TrackedEntityInstance tei = createTrackedEntityInstance( 'A', ou, attribute );\n+\n+        trackedEntityInstanceService.addTrackedEntityInstance( tei );\n+\n+        trackedEntityInstanceService.deleteTrackedEntityInstance( tei );\n+\n+        final AuditQuery query = AuditQuery.builder()\n+            .uid( Sets.newHashSet( tei.getUid() ) )\n+            .build();\n+\n+        await().atMost( TIMEOUT, TimeUnit.SECONDS ).until( () -> auditService.countAudits( query ) > 0 );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYzNzIyOQ=="}, "originalCommit": {"oid": "7db66b69b10d766509d77207d78f297cdd04153a"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3385, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}