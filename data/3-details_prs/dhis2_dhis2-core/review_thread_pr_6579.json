{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2MjgwMTM3", "number": 6579, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwOTo1MjoyMVrOE2BJ4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwOTo1MjoyMVrOE2BJ4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MDc3NDcyOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-support/dhis-support-artemis/src/main/java/org/hisp/dhis/artemis/audit/listener/AbstractHibernateListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwOTo1MjoyMVrOHunQVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwOTo1MjoyMVrOHunQVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYzOTcwMA==", "bodyText": "Double newline", "url": "https://github.com/dhis2/dhis2-core/pull/6579#discussion_r518639700", "createdAt": "2020-11-06T09:52:21Z", "author": {"login": "netroms"}, "path": "dhis-2/dhis-support/dhis-support-artemis/src/main/java/org/hisp/dhis/artemis/audit/listener/AbstractHibernateListener.java", "diffHunk": "@@ -210,32 +225,62 @@ protected Object createAuditEntry( Object entity, Object[] state, EventSource se\n                 }\n             }\n \n-            if ( value != null )\n+            if ( value == null )\n             {\n-                if ( property.isCollection() && BaseIdentifiableObject.class.isAssignableFrom( property.getItemKlass() ) )\n+                continue;\n+            }\n+\n+            else if ( property.isCollection() && BaseIdentifiableObject.class.isAssignableFrom( property.getItemKlass() ) )\n+            {\n+                objectMap.put( pName, IdentifiableObjectUtils.getUids( (Collection) value ) );\n+            }\n+            else\n+            {\n+                objectMap.put( pName, getId( value ) );\n+            }\n+        }\n+\n+        return objectMap;\n+    }\n+\n+    private Map<String, Object> handleEmbeddedObject( Schema schema, Object value, EntityPersister persister )\n+    {\n+        Map<String, Object> map = new HashMap<>();\n+\n+        Map<String, Property> properties = schema.getFieldNameMapProperties();\n+        properties.forEach( (pName, property) -> {\n+\n+            Object propertyValue =  ReflectionUtils.invokeMethod( value, property.getGetterMethod() );\n+            if ( BaseIdentifiableObject.class.isAssignableFrom( property.getItemKlass() ) )\n+            {\n+                if ( property.isCollection() )\n                 {\n-                    objectMap.put( pName, IdentifiableObjectUtils.getUids( (Collection) value ) );\n+                    map.put( pName, IdentifiableObjectUtils.getUids( (Collection) propertyValue ) );\n                 }\n                 else\n                 {\n-                    objectMap.put( pName, getId( value ) );\n+                    map.put( pName, getId( propertyValue ) );\n                 }\n             }\n-        }\n+            else\n+            {\n+                map.put( pName, propertyValue );\n+            }\n \n-        return objectMap;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92419007414a8304591d089ca2d9a6392aded749"}, "originalPosition": 101}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3758, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}