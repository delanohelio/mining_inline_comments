{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2ODQ5NTc0", "number": 5409, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNzo0MzoxMFrOD0nIEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwOTowMDoxNlrOD0pUiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDkzNTg0OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-administration/src/main/java/org/hisp/dhis/resourcetable/table/AbstractNameUniquenessAwareResourceTable.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNzo0MzoxMFrOGJoKAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNzoyMjo1NVrOGMUf1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc0ODI4OA==", "bodyText": "I suggest using Set / HashSet here, for which the contains method is a lot faster (hash/bag match vs linear search).", "url": "https://github.com/dhis2/dhis2-core/pull/5409#discussion_r412748288", "createdAt": "2020-04-22T07:43:10Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-services/dhis-service-administration/src/main/java/org/hisp/dhis/resourcetable/table/AbstractNameUniquenessAwareResourceTable.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package org.hisp.dhis.resourcetable.table;\n+\n+import static org.hisp.dhis.system.util.SqlUtils.quote;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.hisp.dhis.common.BaseDimensionalObject;\n+import org.hisp.dhis.resourcetable.ResourceTable;\n+\n+/**\n+ * This class can be extended by Resource Table generation classes that need to\n+ * generate unique colum names\n+ *\n+ */\n+public abstract class AbstractNameUniquenessAwareResourceTable<T>\n+    extends\n+    ResourceTable<T>\n+{\n+    protected List<String> uniqueColumnNames = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8b115e3241959c70af5cab55990fd7ac21ab528"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg0OTcyNg==", "bodyText": "Yes, started with a Set, but then then the code will not work anymore, since I use uniqueColumnNames.size() to calculate the suffix to add to the column name. Of course, I can switch  to Set and use an accumulator, but since the amount of data in the List is very small I don't think it'll make a difference.\nI run a small micro-benchmark test and there is basically no difference:\n@Benchmark\n@BenchmarkMode(Mode.AverageTime)\npublic void init() {\n    //System.out.println(\"hello\");\n    String categoryName = RandomStringUtils.randomAlphabetic( 50 );\n\n    final List<Category> categories = IntStream.of( 1, 2, 3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25 )\n        .mapToObj( i -> new Category( categoryName + i, DataDimensionType.ATTRIBUTE ) )\n        .peek( c -> c.setUid( CodeGenerator.generateUid() ) ).collect( Collectors.toList() );\n\n\tnew CategoryResourceTable( categories, new ArrayList<>());\n\n}\n\nUSING LIST\nRun progress: 0.00% complete, ETA 00:08:20\nFork: 1 of 5\nWarmup Iteration   1: \u2248 10\u207b\u2075 s/op\nWarmup Iteration   2: \u2248 10\u207b\u2075 s/op\nWarmup Iteration   3: \u2248 10\u207b\u2075 s/op\nWarmup Iteration   4: \u2248 10\u207b\u2075 s/op\nWarmup Iteration   5: \u2248 10\u207b\u2075 s/op\nIteration   1: \u2248 10\u207b\u2075 s/op\nIteration   2: \u2248 10\u207b\u2075 s/op\nIteration   3: \u2248 10\u207b\u2075 s/op\nIteration   4: \u2248 10\u207b\u2075 s/op\nIteration   5: \u2248 10\u207b\u2075 s/op\nRun progress: 20.00% complete, ETA 00:06:45\nFork: 2 of 5\nWarmup Iteration   1: \u2248 10\u207b\u2075 s/op\nWarmup Iteration   2: \u2248 10\u207b\u2075 s/op\nWarmup Iteration   3: \u2248 10\u207b\u2075 s/op\nWarmup Iteration   4: \u2248 10\u207b\u2075 s/op\nWarmup Iteration   5: \u2248 10\u207b\u2075 s/op\nIteration   1: \u2248 10\u207b\u2075 s/op\nIteration   2: \u2248 10\u207b\u2075 s/op\nIteration   3: \u2248 10\u207b\u2075 s/op\nIteration   4: \u2248 10\u207b\u2075 s/op\nIteration   5: \u2248 10\u207b\u2075 s/op\nRun progress: 40.00% complete, ETA 00:05:03\nFork: 3 of 5\nWarmup Iteration   1: \u2248 10\u207b\u2075 s/op\nWarmup Iteration   2: \u2248 10\u207b\u2075 s/op\nWarmup Iteration   3: \u2248 10\u207b\u2075 s/op\nWarmup Iteration   4: \u2248 10\u207b\u2075 s/op\nWarmup Iteration   5: \u2248 10\u207b\u2075 s/op\nIteration   1: \u2248 10\u207b\u2075 s/op\nIteration   2: \u2248 10\u207b\u2075 s/op\nIteration   3: \u2248 10\u207b\u2075 s/op\nIteration   4: \u2248 10\u207b\u2075 s/op\nIteration   5: \u2248 10\u207b\u2075 s/op\nRun progress: 60.00% complete, ETA 00:03:22\nFork: 4 of 5\nWarmup Iteration   1: \u2248 10\u207b\u2075 s/op\nWarmup Iteration   2: \u2248 10\u207b\u2075 s/op\nWarmup Iteration   3: \u2248 10\u207b\u2075 s/op\nWarmup Iteration   4: \u2248 10\u207b\u2075 s/op\nWarmup Iteration   5: \u2248 10\u207b\u2075 s/op\nIteration   1: \u2248 10\u207b\u2075 s/op\nIteration   2: \u2248 10\u207b\u2075 s/op\nIteration   3: \u2248 10\u207b\u2075 s/op\nIteration   4: \u2248 10\u207b\u2075 s/op\nIteration   5: \u2248 10\u207b\u2075 s/op\nRun progress: 80.00% complete, ETA 00:01:41\nFork: 5 of 5\nWarmup Iteration   1: \u2248 10\u207b\u2075 s/op\nWarmup Iteration   2: \u2248 10\u207b\u2075 s/op\nWarmup Iteration   3: \u2248 10\u207b\u2075 s/op\nWarmup Iteration   4: \u2248 10\u207b\u2075 s/op\nWarmup Iteration   5: \u2248 10\u207b\u2075 s/op\nIteration   1: \u2248 10\u207b\u2075 s/op\nIteration   2: \u2248 10\u207b\u2075 s/op\nIteration   3: \u2248 10\u207b\u2075 s/op\nIteration   4: \u2248 10\u207b\u2075 s/op\nIteration   5: \u2248 10\u207b\u2075 s/op\nResult \"org.hisp.dhis.resourcetable.table.AbstractNameUniquenessAwareResourceTablePerfTest.init\":\n\u2248 10\u207b\u2075 s/op\nRun complete. Total time: 00:08:25\nREMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on\nwhy the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial\nexperiments, perform baseline and negative tests that provide experimental control, make sure\nthe benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.\nDo not assume the numbers tell you what you want them to tell.\nBenchmark                                              Mode  Cnt   Score    Error  Units\nAbstractNameUniquenessAwareResourceTablePerfTest.init  avgt   25  \u2248 10\u207b\u2075            s/op\nUSING SET\nRun progress: 0.00% complete, ETA 00:08:20\nFork: 1 of 5\nWarmup Iteration   1: \u2248 10\u207b\u2075 s/op\nWarmup Iteration   2: \u2248 10\u207b\u2075 s/op\nWarmup Iteration   3: \u2248 10\u207b\u2075 s/op\nWarmup Iteration   4: \u2248 10\u207b\u2075 s/op\nWarmup Iteration   5: \u2248 10\u207b\u2075 s/op\nIteration   1: \u2248 10\u207b\u2075 s/op\nIteration   2: \u2248 10\u207b\u2075 s/op\nIteration   3: \u2248 10\u207b\u2075 s/op\nIteration   4: \u2248 10\u207b\u2075 s/op\nIteration   5: \u2248 10\u207b\u2075 s/op\nRun progress: 20.00% complete, ETA 00:06:45\nFork: 2 of 5\nWarmup Iteration   1: \u2248 10\u207b\u2075 s/op\nWarmup Iteration   2: \u2248 10\u207b\u2075 s/op\nWarmup Iteration   3: \u2248 10\u207b\u2075 s/op\nWarmup Iteration   4: \u2248 10\u207b\u2075 s/op\nWarmup Iteration   5: \u2248 10\u207b\u2075 s/op\nIteration   1: \u2248 10\u207b\u2075 s/op\nIteration   2: \u2248 10\u207b\u2075 s/op\nIteration   3: \u2248 10\u207b\u2075 s/op\nIteration   4: \u2248 10\u207b\u2075 s/op\nIteration   5: \u2248 10\u207b\u2075 s/op\nRun progress: 40.00% complete, ETA 00:05:03\nFork: 3 of 5\nWarmup Iteration   1: \u2248 10\u207b\u2075 s/op\nWarmup Iteration   2: \u2248 10\u207b\u2075 s/op\nWarmup Iteration   3: \u2248 10\u207b\u2075 s/op\nWarmup Iteration   4: \u2248 10\u207b\u2075 s/op\nWarmup Iteration   5: \u2248 10\u207b\u2075 s/op\nIteration   1: \u2248 10\u207b\u2075 s/op\nIteration   2: \u2248 10\u207b\u2075 s/op\nIteration   3: \u2248 10\u207b\u2075 s/op\nIteration   4: \u2248 10\u207b\u2075 s/op\nIteration   5: \u2248 10\u207b\u2075 s/op\nRun progress: 60.00% complete, ETA 00:03:22\nFork: 4 of 5\nWarmup Iteration   1: \u2248 10\u207b\u2075 s/op\nWarmup Iteration   2: \u2248 10\u207b\u2075 s/op\nWarmup Iteration   3: \u2248 10\u207b\u2075 s/op\nWarmup Iteration   4: \u2248 10\u207b\u2075 s/op\nWarmup Iteration   5: \u2248 10\u207b\u2075 s/op\nIteration   1: \u2248 10\u207b\u2075 s/op\nIteration   2: \u2248 10\u207b\u2075 s/op\nIteration   3: \u2248 10\u207b\u2075 s/op\nIteration   4: \u2248 10\u207b\u2075 s/op\nIteration   5: \u2248 10\u207b\u2075 s/op\nRun progress: 80.00% complete, ETA 00:01:41\nFork: 5 of 5\nWarmup Iteration   1: \u2248 10\u207b\u2075 s/op\nWarmup Iteration   2: \u2248 10\u207b\u2075 s/op\nWarmup Iteration   3: \u2248 10\u207b\u2075 s/op\nWarmup Iteration   4: \u2248 10\u207b\u2075 s/op\nWarmup Iteration   5: \u2248 10\u207b\u2075 s/op\nIteration   1: \u2248 10\u207b\u2075 s/op\nIteration   2: \u2248 10\u207b\u2075 s/op\nIteration   3: \u2248 10\u207b\u2075 s/op\nIteration   4: \u2248 10\u207b\u2075 s/op\nIteration   5: \u2248 10\u207b\u2075 s/op\nResult \"org.hisp.dhis.resourcetable.table.AbstractNameUniquenessAwareResourceTablePerfTest.init\":\n\u2248 10\u207b\u2075 s/op\nRun complete. Total time: 00:08:26\nREMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on\nwhy the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial\nexperiments, perform baseline and negative tests that provide experimental control, make sure\nthe benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.\nDo not assume the numbers tell you what you want them to tell.\nBenchmark                                              Mode  Cnt   Score    Error  Units\nAbstractNameUniquenessAwareResourceTablePerfTest.init  avgt   25  \u2248 10\u207b\u2075            s/op", "url": "https://github.com/dhis2/dhis2-core/pull/5409#discussion_r412849726", "createdAt": "2020-04-22T10:06:54Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-administration/src/main/java/org/hisp/dhis/resourcetable/table/AbstractNameUniquenessAwareResourceTable.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package org.hisp.dhis.resourcetable.table;\n+\n+import static org.hisp.dhis.system.util.SqlUtils.quote;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.hisp.dhis.common.BaseDimensionalObject;\n+import org.hisp.dhis.resourcetable.ResourceTable;\n+\n+/**\n+ * This class can be extended by Resource Table generation classes that need to\n+ * generate unique colum names\n+ *\n+ */\n+public abstract class AbstractNameUniquenessAwareResourceTable<T>\n+    extends\n+    ResourceTable<T>\n+{\n+    protected List<String> uniqueColumnNames = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc0ODI4OA=="}, "originalCommit": {"oid": "a8b115e3241959c70af5cab55990fd7ac21ab528"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUxOTQxMw==", "bodyText": "Ah okay, got it, didn't read carefully enough. Perhaps we can rename that collection to just columnNames then, as it does not hold the unique names but all?", "url": "https://github.com/dhis2/dhis2-core/pull/5409#discussion_r413519413", "createdAt": "2020-04-23T05:28:19Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-services/dhis-service-administration/src/main/java/org/hisp/dhis/resourcetable/table/AbstractNameUniquenessAwareResourceTable.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package org.hisp.dhis.resourcetable.table;\n+\n+import static org.hisp.dhis.system.util.SqlUtils.quote;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.hisp.dhis.common.BaseDimensionalObject;\n+import org.hisp.dhis.resourcetable.ResourceTable;\n+\n+/**\n+ * This class can be extended by Resource Table generation classes that need to\n+ * generate unique colum names\n+ *\n+ */\n+public abstract class AbstractNameUniquenessAwareResourceTable<T>\n+    extends\n+    ResourceTable<T>\n+{\n+    protected List<String> uniqueColumnNames = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc0ODI4OA=="}, "originalCommit": {"oid": "a8b115e3241959c70af5cab55990fd7ac21ab528"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU3MTkyNw==", "bodyText": "done", "url": "https://github.com/dhis2/dhis2-core/pull/5409#discussion_r415571927", "createdAt": "2020-04-27T07:22:55Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-administration/src/main/java/org/hisp/dhis/resourcetable/table/AbstractNameUniquenessAwareResourceTable.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package org.hisp.dhis.resourcetable.table;\n+\n+import static org.hisp.dhis.system.util.SqlUtils.quote;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.hisp.dhis.common.BaseDimensionalObject;\n+import org.hisp.dhis.resourcetable.ResourceTable;\n+\n+/**\n+ * This class can be extended by Resource Table generation classes that need to\n+ * generate unique colum names\n+ *\n+ */\n+public abstract class AbstractNameUniquenessAwareResourceTable<T>\n+    extends\n+    ResourceTable<T>\n+{\n+    protected List<String> uniqueColumnNames = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc0ODI4OA=="}, "originalCommit": {"oid": "a8b115e3241959c70af5cab55990fd7ac21ab528"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDkzODA2OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-administration/src/main/java/org/hisp/dhis/resourcetable/table/AbstractNameUniquenessAwareResourceTable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNzo0Mzo0M1rOGJoLYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNzo0Mzo0M1rOGJoLYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc0ODY0Mg==", "bodyText": "Add license.", "url": "https://github.com/dhis2/dhis2-core/pull/5409#discussion_r412748642", "createdAt": "2020-04-22T07:43:43Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-services/dhis-service-administration/src/main/java/org/hisp/dhis/resourcetable/table/AbstractNameUniquenessAwareResourceTable.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package org.hisp.dhis.resourcetable.table;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8b115e3241959c70af5cab55990fd7ac21ab528"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDk0Mzg1OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-administration/src/test/java/org/hisp/dhis/resourcetable/table/AbstractNameUniquenessAwareResourceTableTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNzo0NTowNFrOGJoOqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNzo0NTowNFrOGJoOqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc0OTQ4Mg==", "bodyText": "Add license.", "url": "https://github.com/dhis2/dhis2-core/pull/5409#discussion_r412749482", "createdAt": "2020-04-22T07:45:04Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-services/dhis-service-administration/src/test/java/org/hisp/dhis/resourcetable/table/AbstractNameUniquenessAwareResourceTableTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.hisp.dhis.resourcetable.table;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8b115e3241959c70af5cab55990fd7ac21ab528"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NTI5NTQ3OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-administration/src/main/java/org/hisp/dhis/resourcetable/table/AbstractNameUniquenessAwareResourceTable.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwOTowMDoxNlrOGJrgOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNjo1OTo1NVrOGMTutA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjgwMzEzMQ==", "bodyText": "I am wondering if it will be better to use a stateful utility class like UniqueNameVerifier or similar. Using the class hierarchy/subclassing for very specific stuff might be limiting/causing issues going forward.", "url": "https://github.com/dhis2/dhis2-core/pull/5409#discussion_r412803131", "createdAt": "2020-04-22T09:00:16Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-services/dhis-service-administration/src/main/java/org/hisp/dhis/resourcetable/table/AbstractNameUniquenessAwareResourceTable.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package org.hisp.dhis.resourcetable.table;\n+\n+import static org.hisp.dhis.system.util.SqlUtils.quote;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.hisp.dhis.common.BaseDimensionalObject;\n+import org.hisp.dhis.resourcetable.ResourceTable;\n+\n+/**\n+ * This class can be extended by Resource Table generation classes that need to\n+ * generate unique colum names\n+ *\n+ */\n+public abstract class AbstractNameUniquenessAwareResourceTable<T>\n+    extends", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8b115e3241959c70af5cab55990fd7ac21ab528"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjgxMzYyNQ==", "bodyText": "Yes, I initially created a small static method, but then I had to add the accumulator in each Resource class that needs uniqueness. Basically, the code could would look like:\nint count = 0;\nfor ( DataElementGroupSet groupSet : objects )\n{\n    statement += quote( ensureUnique(groupSet.getShortName(), count) ) + \" varchar(230), \";\n    statement += quote( groupSet.getUid() ) + \" character(11), \";\n    count++;\n}\n\nWith a super-class the accumulator is out of the way and the code is cleaner IMO. Report tables classes that do not need unique column names check, do not need to implement this class.", "url": "https://github.com/dhis2/dhis2-core/pull/5409#discussion_r412813625", "createdAt": "2020-04-22T09:15:09Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-administration/src/main/java/org/hisp/dhis/resourcetable/table/AbstractNameUniquenessAwareResourceTable.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package org.hisp.dhis.resourcetable.table;\n+\n+import static org.hisp.dhis.system.util.SqlUtils.quote;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.hisp.dhis.common.BaseDimensionalObject;\n+import org.hisp.dhis.resourcetable.ResourceTable;\n+\n+/**\n+ * This class can be extended by Resource Table generation classes that need to\n+ * generate unique colum names\n+ *\n+ */\n+public abstract class AbstractNameUniquenessAwareResourceTable<T>\n+    extends", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjgwMzEzMQ=="}, "originalCommit": {"oid": "a8b115e3241959c70af5cab55990fd7ac21ab528"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUyNTUxNg==", "bodyText": "Right, I meant we could something like:\nUniqueValueVerifier verifier = new UniqueValueVerifier();\n..\nverifier.unique( groupSet.getShortName() );\n\nThis class can be moved to dhis-support-system. Then it is just one more line to add (and we can remove the extends part), and we can:\n\nAvoid using the class hierarchy.\nRe-use this class everywhere (as opposed to just for these classes) as it is generic.\nTest it in isolation.\n\nBut this is not a big deal.", "url": "https://github.com/dhis2/dhis2-core/pull/5409#discussion_r413525516", "createdAt": "2020-04-23T05:45:31Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-services/dhis-service-administration/src/main/java/org/hisp/dhis/resourcetable/table/AbstractNameUniquenessAwareResourceTable.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package org.hisp.dhis.resourcetable.table;\n+\n+import static org.hisp.dhis.system.util.SqlUtils.quote;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.hisp.dhis.common.BaseDimensionalObject;\n+import org.hisp.dhis.resourcetable.ResourceTable;\n+\n+/**\n+ * This class can be extended by Resource Table generation classes that need to\n+ * generate unique colum names\n+ *\n+ */\n+public abstract class AbstractNameUniquenessAwareResourceTable<T>\n+    extends", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjgwMzEzMQ=="}, "originalCommit": {"oid": "a8b115e3241959c70af5cab55990fd7ac21ab528"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI5ODk0Nw==", "bodyText": "We could also use such a util class as part of an upgrade routine to add persisted short names to these entities.", "url": "https://github.com/dhis2/dhis2-core/pull/5409#discussion_r415298947", "createdAt": "2020-04-26T12:28:10Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-services/dhis-service-administration/src/main/java/org/hisp/dhis/resourcetable/table/AbstractNameUniquenessAwareResourceTable.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package org.hisp.dhis.resourcetable.table;\n+\n+import static org.hisp.dhis.system.util.SqlUtils.quote;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.hisp.dhis.common.BaseDimensionalObject;\n+import org.hisp.dhis.resourcetable.ResourceTable;\n+\n+/**\n+ * This class can be extended by Resource Table generation classes that need to\n+ * generate unique colum names\n+ *\n+ */\n+public abstract class AbstractNameUniquenessAwareResourceTable<T>\n+    extends", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjgwMzEzMQ=="}, "originalCommit": {"oid": "a8b115e3241959c70af5cab55990fd7ac21ab528"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU1OTM0OA==", "bodyText": "Ok, moved the logic to class.", "url": "https://github.com/dhis2/dhis2-core/pull/5409#discussion_r415559348", "createdAt": "2020-04-27T06:59:55Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-administration/src/main/java/org/hisp/dhis/resourcetable/table/AbstractNameUniquenessAwareResourceTable.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package org.hisp.dhis.resourcetable.table;\n+\n+import static org.hisp.dhis.system.util.SqlUtils.quote;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.hisp.dhis.common.BaseDimensionalObject;\n+import org.hisp.dhis.resourcetable.ResourceTable;\n+\n+/**\n+ * This class can be extended by Resource Table generation classes that need to\n+ * generate unique colum names\n+ *\n+ */\n+public abstract class AbstractNameUniquenessAwareResourceTable<T>\n+    extends", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjgwMzEzMQ=="}, "originalCommit": {"oid": "a8b115e3241959c70af5cab55990fd7ac21ab528"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3454, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}