{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5NDQxMjU5", "number": 5950, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNTowNzo0MVrOEaBYsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNTowOTozNVrOEaBb4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzIxMTM2OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerWarningReport.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNTowNzo0MVrOHDL3cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNTowNzo0MVrOHDL3cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEwMjE5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public TrackerWarningReport(Class<?> mainKlass, String warningMessage, TrackerErrorCode warningCode, int line,\n          \n          \n            \n                public TrackerWarningReport( Class<?> mainKlass, String warningMessage, TrackerErrorCode warningCode, int line,", "url": "https://github.com/dhis2/dhis2-core/pull/5950#discussion_r473102193", "createdAt": "2020-08-19T15:07:41Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerWarningReport.java", "diffHunk": "@@ -0,0 +1,193 @@\n+package org.hisp.dhis.tracker.report;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.text.DateFormat;\n+import java.text.MessageFormat;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+\n+import org.hisp.dhis.common.IdentifiableObject;\n+import org.hisp.dhis.tracker.TrackerIdScheme;\n+import org.hisp.dhis.tracker.TrackerIdentifier;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.hisp.dhis.util.ObjectUtils;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import lombok.Builder;\n+import lombok.Data;\n+\n+/**\n+ * @author Enrico Colasante\n+ */\n+@Data\n+@Builder\n+public class TrackerWarningReport\n+{\n+    @JsonProperty\n+    private final Class<?> mainKlass;\n+\n+    private final String warningMessage;\n+\n+    @JsonProperty\n+    private String mainId;\n+\n+    @JsonProperty\n+    private Class<?> warningKlass;\n+\n+    @JsonProperty\n+    private final String[] warningProperties;\n+\n+    @JsonProperty\n+    private Object value;\n+\n+    private final int lineNumber;\n+\n+    private TrackerErrorCode warningCode;\n+\n+    private Object mainObject;\n+\n+    protected int listIndex;\n+\n+    public TrackerWarningReport(Class<?> mainKlass, String warningMessage, TrackerErrorCode warningCode, int line,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b95c088121ef6601a5f4f50abc19db2345043414"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzIxMjkyOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerWarningReport.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNTowODowMFrOHDL4Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNTowODowMFrOHDL4Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEwMjQzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    public TrackerWarningReport build(TrackerBundle bundle )\n          \n          \n            \n                    public TrackerWarningReport build( TrackerBundle bundle )", "url": "https://github.com/dhis2/dhis2-core/pull/5950#discussion_r473102435", "createdAt": "2020-08-19T15:08:00Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerWarningReport.java", "diffHunk": "@@ -0,0 +1,193 @@\n+package org.hisp.dhis.tracker.report;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.text.DateFormat;\n+import java.text.MessageFormat;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+\n+import org.hisp.dhis.common.IdentifiableObject;\n+import org.hisp.dhis.tracker.TrackerIdScheme;\n+import org.hisp.dhis.tracker.TrackerIdentifier;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.hisp.dhis.util.ObjectUtils;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import lombok.Builder;\n+import lombok.Data;\n+\n+/**\n+ * @author Enrico Colasante\n+ */\n+@Data\n+@Builder\n+public class TrackerWarningReport\n+{\n+    @JsonProperty\n+    private final Class<?> mainKlass;\n+\n+    private final String warningMessage;\n+\n+    @JsonProperty\n+    private String mainId;\n+\n+    @JsonProperty\n+    private Class<?> warningKlass;\n+\n+    @JsonProperty\n+    private final String[] warningProperties;\n+\n+    @JsonProperty\n+    private Object value;\n+\n+    private final int lineNumber;\n+\n+    private TrackerErrorCode warningCode;\n+\n+    private Object mainObject;\n+\n+    protected int listIndex;\n+\n+    public TrackerWarningReport(Class<?> mainKlass, String warningMessage, TrackerErrorCode warningCode, int line,\n+                                String mainId,\n+                                Class<?> warningKlass, String[] warningProperties, Object value )\n+    {\n+        this.mainKlass = mainKlass;\n+        this.warningMessage = warningMessage;\n+        this.warningCode = warningCode;\n+\n+        this.lineNumber = line;\n+        this.mainId = mainId;\n+        this.warningKlass = warningKlass;\n+        this.warningProperties = warningProperties;\n+        this.value = value;\n+\n+    }\n+\n+    @JsonProperty\n+    public TrackerErrorCode getWarningCode()\n+    {\n+        return warningCode;\n+    }\n+\n+    @JsonProperty\n+    public String getMessage()\n+    {\n+        return warningMessage;\n+    }\n+\n+    public static class TrackerWarningReportBuilder\n+    {\n+        private final List<Object> arguments = new ArrayList<>();\n+\n+        public TrackerWarningReportBuilder addArg( Object arg )\n+        {\n+            this.arguments.add( arg );\n+            return this;\n+        }\n+\n+        public TrackerWarningReport build(TrackerBundle bundle )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b95c088121ef6601a5f4f50abc19db2345043414"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzIxNzg5OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/programrule/ProgramRuleIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNTowOToxMlrOHDL7lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNTowOToxMlrOHDL7lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEwMzI1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    programRule.getProgramRuleActions().add(programRuleActionWarning);\n          \n          \n            \n                    programRule.getProgramRuleActions().add( programRuleActionWarning );", "url": "https://github.com/dhis2/dhis2-core/pull/5950#discussion_r473103255", "createdAt": "2020-08-19T15:09:12Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/programrule/ProgramRuleIntegrationTest.java", "diffHunk": "@@ -0,0 +1,170 @@\n+package org.hisp.dhis.tracker.programrule;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.junit.Assert.*;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.hisp.dhis.IntegrationTestBase;\n+import org.hisp.dhis.common.IdentifiableObject;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.*;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.feedback.ObjectBundleValidationReport;\n+import org.hisp.dhis.importexport.ImportStrategy;\n+import org.hisp.dhis.preheat.PreheatIdentifier;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.programrule.*;\n+import org.hisp.dhis.render.RenderFormat;\n+import org.hisp.dhis.render.RenderService;\n+import org.hisp.dhis.tracker.TrackerImportParams;\n+import org.hisp.dhis.tracker.TrackerImportService;\n+import org.hisp.dhis.tracker.bundle.TrackerBundleParams;\n+import org.hisp.dhis.tracker.report.TrackerImportReport;\n+import org.hisp.dhis.tracker.report.TrackerStatus;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.user.UserService;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.ClassPathResource;\n+\n+public class ProgramRuleIntegrationTest\n+    extends IntegrationTestBase\n+{\n+    @Override\n+    public boolean emptyDatabaseAfterTest()\n+    {\n+        return true;\n+    }\n+\n+    @Autowired\n+    private TrackerImportService trackerImportService;\n+\n+    @Autowired\n+    private RenderService _renderService;\n+\n+    @Autowired\n+    private UserService _userService;\n+\n+    @Autowired\n+    private ProgramRuleService programRuleService;\n+\n+    @Autowired\n+    private ProgramRuleActionService programRuleActionService;\n+\n+    @Autowired\n+    private ObjectBundleService objectBundleService;\n+\n+    @Autowired\n+    private ObjectBundleValidationService objectBundleValidationService;\n+\n+    private User userA;\n+\n+    @Override\n+    public void setUpTest()\n+        throws Exception\n+    {\n+        renderService = _renderService;\n+        userService = _userService;\n+\n+        Map<Class<? extends IdentifiableObject>, List<IdentifiableObject>> metadata = renderService\n+            .fromMetadata( new ClassPathResource( \"tracker/simple_metadata.json\" ).getInputStream(),\n+                RenderFormat.JSON );\n+\n+        ObjectBundleParams params = new ObjectBundleParams();\n+        params.setObjectBundleMode( ObjectBundleMode.COMMIT );\n+        params.setImportStrategy( ImportStrategy.CREATE );\n+        params.setObjects( metadata );\n+\n+        ObjectBundle bundle = objectBundleService.create( params );\n+        ObjectBundleValidationReport validationReport = objectBundleValidationService.validate( bundle );\n+        assertTrue( validationReport.getErrorReports().isEmpty() );\n+\n+        objectBundleService.commit( bundle );\n+\n+        Program program = bundle.getPreheat().get( PreheatIdentifier.UID, Program.class, \"BFcipDERJnf\" );\n+\n+        ProgramRule programRule = createProgramRule( 'A', program );\n+        programRuleService.addProgramRule( programRule );\n+\n+        ProgramRuleAction programRuleActionWarning = createProgramRuleAction( 'A', programRule );\n+        programRuleActionWarning.setProgramRuleActionType( ProgramRuleActionType.SHOWWARNING );\n+        programRuleActionWarning.setContent( \"WARNING\" );\n+        programRuleActionService.addProgramRuleAction( programRuleActionWarning );\n+\n+        programRule.getProgramRuleActions().add(programRuleActionWarning);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b95c088121ef6601a5f4f50abc19db2345043414"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzIxOTU0OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/programrule/ProgramRuleIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNTowOTozNVrOHDL8oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNTowOTozNVrOHDL8oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEwMzUyMA==", "bodyText": "Check indentation here.", "url": "https://github.com/dhis2/dhis2-core/pull/5950#discussion_r473103520", "createdAt": "2020-08-19T15:09:35Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/programrule/ProgramRuleIntegrationTest.java", "diffHunk": "@@ -0,0 +1,170 @@\n+package org.hisp.dhis.tracker.programrule;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.junit.Assert.*;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.hisp.dhis.IntegrationTestBase;\n+import org.hisp.dhis.common.IdentifiableObject;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.*;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.feedback.ObjectBundleValidationReport;\n+import org.hisp.dhis.importexport.ImportStrategy;\n+import org.hisp.dhis.preheat.PreheatIdentifier;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.programrule.*;\n+import org.hisp.dhis.render.RenderFormat;\n+import org.hisp.dhis.render.RenderService;\n+import org.hisp.dhis.tracker.TrackerImportParams;\n+import org.hisp.dhis.tracker.TrackerImportService;\n+import org.hisp.dhis.tracker.bundle.TrackerBundleParams;\n+import org.hisp.dhis.tracker.report.TrackerImportReport;\n+import org.hisp.dhis.tracker.report.TrackerStatus;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.user.UserService;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.ClassPathResource;\n+\n+public class ProgramRuleIntegrationTest\n+    extends IntegrationTestBase\n+{\n+    @Override\n+    public boolean emptyDatabaseAfterTest()\n+    {\n+        return true;\n+    }\n+\n+    @Autowired\n+    private TrackerImportService trackerImportService;\n+\n+    @Autowired\n+    private RenderService _renderService;\n+\n+    @Autowired\n+    private UserService _userService;\n+\n+    @Autowired\n+    private ProgramRuleService programRuleService;\n+\n+    @Autowired\n+    private ProgramRuleActionService programRuleActionService;\n+\n+    @Autowired\n+    private ObjectBundleService objectBundleService;\n+\n+    @Autowired\n+    private ObjectBundleValidationService objectBundleValidationService;\n+\n+    private User userA;\n+\n+    @Override\n+    public void setUpTest()\n+        throws Exception\n+    {\n+        renderService = _renderService;\n+        userService = _userService;\n+\n+        Map<Class<? extends IdentifiableObject>, List<IdentifiableObject>> metadata = renderService\n+            .fromMetadata( new ClassPathResource( \"tracker/simple_metadata.json\" ).getInputStream(),\n+                RenderFormat.JSON );\n+\n+        ObjectBundleParams params = new ObjectBundleParams();\n+        params.setObjectBundleMode( ObjectBundleMode.COMMIT );\n+        params.setImportStrategy( ImportStrategy.CREATE );\n+        params.setObjects( metadata );\n+\n+        ObjectBundle bundle = objectBundleService.create( params );\n+        ObjectBundleValidationReport validationReport = objectBundleValidationService.validate( bundle );\n+        assertTrue( validationReport.getErrorReports().isEmpty() );\n+\n+        objectBundleService.commit( bundle );\n+\n+        Program program = bundle.getPreheat().get( PreheatIdentifier.UID, Program.class, \"BFcipDERJnf\" );\n+\n+        ProgramRule programRule = createProgramRule( 'A', program );\n+        programRuleService.addProgramRule( programRule );\n+\n+        ProgramRuleAction programRuleActionWarning = createProgramRuleAction( 'A', programRule );\n+        programRuleActionWarning.setProgramRuleActionType( ProgramRuleActionType.SHOWWARNING );\n+        programRuleActionWarning.setContent( \"WARNING\" );\n+        programRuleActionService.addProgramRuleAction( programRuleActionWarning );\n+\n+        programRule.getProgramRuleActions().add(programRuleActionWarning);\n+        programRuleService.updateProgramRule( programRule );\n+\n+        userA = userService.getUser( \"M5zQapPyTZI\" );\n+    }\n+\n+    @Test\n+    public void testImportSuccessWithWaringRaised() throws IOException {\n+\n+        InputStream inputStream = new ClassPathResource( \"tracker/single_tei.json\" ).getInputStream();\n+\n+        TrackerBundleParams params = renderService.fromJson( inputStream, TrackerBundleParams.class );\n+        params.setUser( userA );\n+        TrackerImportReport trackerImportTeiReport = trackerImportService.importTracker( build( params ) );\n+\n+        TrackerBundleParams enrollmentParams = renderService\n+            .fromJson( new ClassPathResource( \"tracker/single_enrollment.json\" ).getInputStream(),\n+                TrackerBundleParams.class );\n+        enrollmentParams.setUser( userA );\n+        TrackerImportReport trackerImportEnrollmentReport = trackerImportService\n+            .importTracker( build( enrollmentParams ) );\n+\n+        assertNotNull( trackerImportTeiReport );\n+        assertEquals( TrackerStatus.OK, trackerImportTeiReport.getStatus() );\n+\n+        assertNotNull( trackerImportEnrollmentReport );\n+        assertEquals( TrackerStatus.OK, trackerImportEnrollmentReport.getStatus() );\n+        assertFalse( trackerImportEnrollmentReport.getTrackerValidationReport().getWarningReports().isEmpty() );\n+    }\n+\n+    private TrackerImportParams build(TrackerBundleParams params) {\n+        return TrackerImportParams.builder()\n+                .user( params.getUser() )\n+                .importMode( params.getImportMode() )\n+                .importStrategy( params.getImportStrategy() )\n+            .skipPatternValidation( params.isSkipTextPatternValidation() )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b95c088121ef6601a5f4f50abc19db2345043414"}, "originalPosition": 158}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3927, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}