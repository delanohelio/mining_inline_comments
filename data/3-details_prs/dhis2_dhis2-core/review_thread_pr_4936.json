{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4NTc5OTI3", "number": 4936, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwODowNDoxOVrODiPD8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNDoxNjo1NVrODjU9Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MjI0OTQ2OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-schema/src/main/java/org/hisp/dhis/schema/AbstractPropertyIntrospectorService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwODowNDoxOVrOFtX5WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNDo1MDoyOFrOFuuglA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzEyMTc1Mg==", "bodyText": "Wondering it we could instead check  if property's class extends JsonBinaryType\nPeople may forget to add new JsonB type into this list.", "url": "https://github.com/dhis2/dhis2-core/pull/4936#discussion_r383121752", "createdAt": "2020-02-24T08:04:19Z", "author": {"login": "vietnguyen"}, "path": "dhis-2/dhis-services/dhis-service-schema/src/main/java/org/hisp/dhis/schema/AbstractPropertyIntrospectorService.java", "diffHunk": "@@ -85,6 +95,18 @@\n         .put( AnalyticalObject.class, BaseAnalyticalObject.class )\n         .build();\n \n+    private static final ImmutableSet<String> JSONB_TYPE_CLASSES = ImmutableSet.<String>builder()\n+        .add( JsonBinaryType.class.getName() )\n+        .add( JsonBinaryPlainStringType.class.getName() )\n+        .add( JsonDeviceRenderTypeMap.class.getName() )\n+        .add( JsonJobParametersType.class.getName() )\n+        .add( JsonListBinaryType.class.getName() )\n+        .add( JsonSetBinaryType.class.getName() )\n+        .add( JsonEventDataValueSetBinaryType.class.getName() )\n+        .add( JsonProgramRuleEvaluationEnvironmentSetBinaryType.class.getName() )\n+        .add( JsonAttributeValueBinaryType.class.getName() )\n+        .build();\n+\n     private final Map<Class<?>, Map<String, Property>> classMapCache = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a791d3f428adb6bd5fd5ae76f2656c57c5c3d6f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU0MDgyMA==", "bodyText": "I agree with you @vietnguyen . I removed my implementation from this PR, then we can re-implement with your suggestions later :)", "url": "https://github.com/dhis2/dhis2-core/pull/4936#discussion_r384540820", "createdAt": "2020-02-26T14:50:28Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-schema/src/main/java/org/hisp/dhis/schema/AbstractPropertyIntrospectorService.java", "diffHunk": "@@ -85,6 +95,18 @@\n         .put( AnalyticalObject.class, BaseAnalyticalObject.class )\n         .build();\n \n+    private static final ImmutableSet<String> JSONB_TYPE_CLASSES = ImmutableSet.<String>builder()\n+        .add( JsonBinaryType.class.getName() )\n+        .add( JsonBinaryPlainStringType.class.getName() )\n+        .add( JsonDeviceRenderTypeMap.class.getName() )\n+        .add( JsonJobParametersType.class.getName() )\n+        .add( JsonListBinaryType.class.getName() )\n+        .add( JsonSetBinaryType.class.getName() )\n+        .add( JsonEventDataValueSetBinaryType.class.getName() )\n+        .add( JsonProgramRuleEvaluationEnvironmentSetBinaryType.class.getName() )\n+        .add( JsonAttributeValueBinaryType.class.getName() )\n+        .build();\n+\n     private final Map<Class<?>, Map<String, Property>> classMapCache = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzEyMTc1Mg=="}, "originalCommit": {"oid": "1a791d3f428adb6bd5fd5ae76f2656c57c5c3d6f"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzY4NTk0OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNDowNToxMlrOFvEnpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNDowNToxMlrOFvEnpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkwMzA3OQ==", "bodyText": "What if there is no : in the string.. won't this give error? (the [1] part)", "url": "https://github.com/dhis2/dhis2-core/pull/4936#discussion_r384903079", "createdAt": "2020-02-27T04:05:12Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java", "diffHunk": "@@ -180,18 +182,61 @@ public TrackerImportParams getParamsFromMap( Map<String, List<String>> parameter\n     // Utility Methods\n     //-----------------------------------------------------------------------------------\n \n+    private TrackerIdentifierParams getTrackerIdentifiers( Map<String, List<String>> parameters )\n+    {\n+        TrackerIdScheme idScheme = getEnumWithDefault( TrackerIdScheme.class, parameters, \"idScheme\", TrackerIdScheme.UID );\n+        TrackerIdScheme orgUnitIdScheme  = getEnumWithDefault( TrackerIdScheme.class, parameters, \"orgUnitIdScheme\", idScheme );\n+        TrackerIdScheme programIdScheme  = getEnumWithDefault( TrackerIdScheme.class, parameters, \"programIdScheme\", idScheme );\n+        TrackerIdScheme programStageIdScheme  = getEnumWithDefault( TrackerIdScheme.class, parameters, \"programStageIdScheme\", idScheme );\n+        TrackerIdScheme dataElementIdScheme  = getEnumWithDefault( TrackerIdScheme.class, parameters, \"dataElementIdScheme\", idScheme );\n+\n+        return TrackerIdentifierParams.builder()\n+            .idScheme( TrackerIdentifier.builder().idScheme( idScheme ).value( getAttributeUidOrNull( parameters, \"idScheme\" ) ).build() )\n+            .orgUnitIdScheme( TrackerIdentifier.builder().idScheme( orgUnitIdScheme ).value( getAttributeUidOrNull( parameters, \"orgUnitIdScheme\" ) ).build() )\n+            .programIdScheme( TrackerIdentifier.builder().idScheme( programIdScheme ).value( getAttributeUidOrNull( parameters, \"programIdScheme\" ) ).build() )\n+            .programStageIdScheme( TrackerIdentifier.builder().idScheme( programStageIdScheme ).value( getAttributeUidOrNull( parameters, \"programStageIdScheme\" ) ).build() )\n+            .dataElementIdScheme( TrackerIdentifier.builder().idScheme( dataElementIdScheme ).value( getAttributeUidOrNull( parameters, \"dataElementIdScheme\" ) ).build() )\n+            .build();\n+    }\n+\n     private <T extends Enum<T>> T getEnumWithDefault( Class<T> enumKlass, Map<String, List<String>> parameters, String key, T defaultValue )\n     {\n         if ( parameters == null || parameters.get( key ) == null || parameters.get( key ).isEmpty() )\n         {\n             return defaultValue;\n         }\n \n+        if ( TrackerIdScheme.class.equals( enumKlass ) && IdScheme.isAttribute( parameters.get( key ).get( 0 ) ) )\n+        {\n+            return Enums.getIfPresent( enumKlass, \"ATTRIBUTE\" ).orNull();\n+        }\n+\n         String value = String.valueOf( parameters.get( key ).get( 0 ) );\n \n         return Enums.getIfPresent( enumKlass, value ).or( defaultValue );\n     }\n \n+    private String getAttributeUidOrNull(Map<String, List<String>> parameters, String key)\n+    {\n+        if ( parameters == null || parameters.get( key ) == null || parameters.get( key ).isEmpty() )\n+        {\n+            return null;\n+        }\n+\n+        if ( IdScheme.isAttribute( parameters.get( key ).get( 0 ) ) )\n+        {\n+            // Get second half of string, separated by ':'\n+            String uid = parameters.get( key ).get( 0 ).split( \":\" )[1];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b61a1f1c7f9bebd99095dfab08668b8415c08c66"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzY4ODc0OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifier.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNDowNzoyN1rOFvEpbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwODozMjoxMVrOFvJG0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkwMzUzNQ==", "bodyText": "Null should already be default for strings", "url": "https://github.com/dhis2/dhis2-core/pull/4936#discussion_r384903535", "createdAt": "2020-02-27T04:07:27Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifier.java", "diffHunk": "@@ -28,39 +28,56 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import org.hisp.dhis.attribute.AttributeValue;\n import org.hisp.dhis.common.IdentifiableObject;\n+import org.hisp.dhis.util.ObjectUtils;\n \n /**\n- * @author Morten Olav Hansen <mortenoh@gmail.com>\n+ * @author Stian Sandvold\n  */\n-public enum TrackerIdentifier\n+\n+@Data\n+@Builder\n+@NoArgsConstructor\n+@AllArgsConstructor\n+public class TrackerIdentifier\n {\n-    /**\n-     * Preheat using UID identifiers.\n-     */\n-    UID,\n+    public final static TrackerIdentifier UID = builder().idScheme( TrackerIdScheme.UID ).build();\n+\n+    public final static TrackerIdentifier CODE = builder().idScheme( TrackerIdScheme.CODE ).build();\n \n-    /**\n-     * Preheat using CODE identifiers.\n-     */\n-    CODE,\n+    public final static TrackerIdentifier AUTO = builder().idScheme( TrackerIdScheme.AUTO ).build();\n \n-    /**\n-     * Find first non-null identifier in order: UID, CODE\n-     */\n-    AUTO;\n+    @Builder.Default\n+    private TrackerIdScheme idScheme = TrackerIdScheme.UID;\n+\n+    @Builder.Default\n+    private String value = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b61a1f1c7f9bebd99095dfab08668b8415c08c66"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk3MDYwMg==", "bodyText": "Yeah, but compilation fails due to Lombok expecting a value.", "url": "https://github.com/dhis2/dhis2-core/pull/4936#discussion_r384970602", "createdAt": "2020-02-27T08:18:14Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifier.java", "diffHunk": "@@ -28,39 +28,56 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import org.hisp.dhis.attribute.AttributeValue;\n import org.hisp.dhis.common.IdentifiableObject;\n+import org.hisp.dhis.util.ObjectUtils;\n \n /**\n- * @author Morten Olav Hansen <mortenoh@gmail.com>\n+ * @author Stian Sandvold\n  */\n-public enum TrackerIdentifier\n+\n+@Data\n+@Builder\n+@NoArgsConstructor\n+@AllArgsConstructor\n+public class TrackerIdentifier\n {\n-    /**\n-     * Preheat using UID identifiers.\n-     */\n-    UID,\n+    public final static TrackerIdentifier UID = builder().idScheme( TrackerIdScheme.UID ).build();\n+\n+    public final static TrackerIdentifier CODE = builder().idScheme( TrackerIdScheme.CODE ).build();\n \n-    /**\n-     * Preheat using CODE identifiers.\n-     */\n-    CODE,\n+    public final static TrackerIdentifier AUTO = builder().idScheme( TrackerIdScheme.AUTO ).build();\n \n-    /**\n-     * Find first non-null identifier in order: UID, CODE\n-     */\n-    AUTO;\n+    @Builder.Default\n+    private TrackerIdScheme idScheme = TrackerIdScheme.UID;\n+\n+    @Builder.Default\n+    private String value = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkwMzUzNQ=="}, "originalCommit": {"oid": "b61a1f1c7f9bebd99095dfab08668b8415c08c66"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk3NjU5NQ==", "bodyText": "Oh, ok.. even without @Builder.Default ? because you dont need it unless you want to assign a default value", "url": "https://github.com/dhis2/dhis2-core/pull/4936#discussion_r384976595", "createdAt": "2020-02-27T08:32:11Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifier.java", "diffHunk": "@@ -28,39 +28,56 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import org.hisp.dhis.attribute.AttributeValue;\n import org.hisp.dhis.common.IdentifiableObject;\n+import org.hisp.dhis.util.ObjectUtils;\n \n /**\n- * @author Morten Olav Hansen <mortenoh@gmail.com>\n+ * @author Stian Sandvold\n  */\n-public enum TrackerIdentifier\n+\n+@Data\n+@Builder\n+@NoArgsConstructor\n+@AllArgsConstructor\n+public class TrackerIdentifier\n {\n-    /**\n-     * Preheat using UID identifiers.\n-     */\n-    UID,\n+    public final static TrackerIdentifier UID = builder().idScheme( TrackerIdScheme.UID ).build();\n+\n+    public final static TrackerIdentifier CODE = builder().idScheme( TrackerIdScheme.CODE ).build();\n \n-    /**\n-     * Preheat using CODE identifiers.\n-     */\n-    CODE,\n+    public final static TrackerIdentifier AUTO = builder().idScheme( TrackerIdScheme.AUTO ).build();\n \n-    /**\n-     * Find first non-null identifier in order: UID, CODE\n-     */\n-    AUTO;\n+    @Builder.Default\n+    private TrackerIdScheme idScheme = TrackerIdScheme.UID;\n+\n+    @Builder.Default\n+    private String value = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkwMzUzNQ=="}, "originalCommit": {"oid": "b61a1f1c7f9bebd99095dfab08668b8415c08c66"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzcwMTQyOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-support/dhis-support-hibernate/src/main/java/org/hisp/dhis/hibernate/HibernateGenericStore.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNDoxNjo1NVrOFvEw_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwOTowOTo1MlrOFvKL9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkwNTQ2OQ==", "bodyText": "Have you done any performance testing here? should we also look into adding jsonb indexes?", "url": "https://github.com/dhis2/dhis2-core/pull/4936#discussion_r384905469", "createdAt": "2020-02-27T04:16:55Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-support/dhis-support-hibernate/src/main/java/org/hisp/dhis/hibernate/HibernateGenericStore.java", "diffHunk": "@@ -575,6 +576,19 @@ public int getCount()\n         return objects.isEmpty() || (object != null && objects.size() == 1 && object.equals( objects.get( 0 ) ) );\r\n     }\r\n \r\n+    @Override\r\n+    public List<T> getAllByAttributeAndValues( Attribute attribute, List<String> values )\r\n+    {\r\n+        CriteriaBuilder builder = getCriteriaBuilder();\r\n+\r\n+        CriteriaQuery<T> query = builder.createQuery( getClazz() );\r\n+        Root<T> root = query.from( getClazz() );\r\n+        query.select( root );\r\n+        query.where( builder.function( FUNCTION_JSONB_EXTRACT_PATH_TEXT, String.class, root.get( \"attributeValues\" ), builder.literal( attribute.getUid() ), builder.literal( \"value\" ) ).in( values ) );\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b61a1f1c7f9bebd99095dfab08668b8415c08c66"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk2MzI1OQ==", "bodyText": "Last time I couldn't find away to add index, reasons is :\n\n\nGIN index doesn't support those functions jsonb_extract_path_text() , it only supports  jsonb operators  like @>\n\n\nCodes in HibernateGenericStore  need to be generic, so we can't use native sql with jsonb operators, must use JPA query API\n\n\nJPA  query API doesn't support jsonb operators, only postgresql built-in functions like jsonb_extract_path_text(), and it also need to be registered in DhisPostgresDialect\n\n\nregisterFunction( \"jsonb_extract_path_text\", new StandardSQLFunction(\"jsonb_extract_path_text\", StandardBasicTypes.STRING ));", "url": "https://github.com/dhis2/dhis2-core/pull/4936#discussion_r384963259", "createdAt": "2020-02-27T07:59:58Z", "author": {"login": "vietnguyen"}, "path": "dhis-2/dhis-support/dhis-support-hibernate/src/main/java/org/hisp/dhis/hibernate/HibernateGenericStore.java", "diffHunk": "@@ -575,6 +576,19 @@ public int getCount()\n         return objects.isEmpty() || (object != null && objects.size() == 1 && object.equals( objects.get( 0 ) ) );\r\n     }\r\n \r\n+    @Override\r\n+    public List<T> getAllByAttributeAndValues( Attribute attribute, List<String> values )\r\n+    {\r\n+        CriteriaBuilder builder = getCriteriaBuilder();\r\n+\r\n+        CriteriaQuery<T> query = builder.createQuery( getClazz() );\r\n+        Root<T> root = query.from( getClazz() );\r\n+        query.select( root );\r\n+        query.where( builder.function( FUNCTION_JSONB_EXTRACT_PATH_TEXT, String.class, root.get( \"attributeValues\" ), builder.literal( attribute.getUid() ), builder.literal( \"value\" ) ).in( values ) );\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkwNTQ2OQ=="}, "originalCommit": {"oid": "b61a1f1c7f9bebd99095dfab08668b8415c08c66"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk2Nzg0MQ==", "bodyText": "This is based directly on tehe same query used for attributes in generl :) I think the main performance improvement here would be indexes, which we can look into in the future. It seems like @vietnguyen has already looked into indexes, so maybe we need to wait for better support, or rethink how we query the data.", "url": "https://github.com/dhis2/dhis2-core/pull/4936#discussion_r384967841", "createdAt": "2020-02-27T08:11:24Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-support/dhis-support-hibernate/src/main/java/org/hisp/dhis/hibernate/HibernateGenericStore.java", "diffHunk": "@@ -575,6 +576,19 @@ public int getCount()\n         return objects.isEmpty() || (object != null && objects.size() == 1 && object.equals( objects.get( 0 ) ) );\r\n     }\r\n \r\n+    @Override\r\n+    public List<T> getAllByAttributeAndValues( Attribute attribute, List<String> values )\r\n+    {\r\n+        CriteriaBuilder builder = getCriteriaBuilder();\r\n+\r\n+        CriteriaQuery<T> query = builder.createQuery( getClazz() );\r\n+        Root<T> root = query.from( getClazz() );\r\n+        query.select( root );\r\n+        query.where( builder.function( FUNCTION_JSONB_EXTRACT_PATH_TEXT, String.class, root.get( \"attributeValues\" ), builder.literal( attribute.getUid() ), builder.literal( \"value\" ) ).in( values ) );\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkwNTQ2OQ=="}, "originalCommit": {"oid": "b61a1f1c7f9bebd99095dfab08668b8415c08c66"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk5NDI5NA==", "bodyText": "Ok @vietnguyen I see, we should look into it later also... PostgreSQL keeps getting updated and we might at some point be able to use it (@> is course also available as a function you can use, but i guess thats not really the problem)", "url": "https://github.com/dhis2/dhis2-core/pull/4936#discussion_r384994294", "createdAt": "2020-02-27T09:09:52Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-support/dhis-support-hibernate/src/main/java/org/hisp/dhis/hibernate/HibernateGenericStore.java", "diffHunk": "@@ -575,6 +576,19 @@ public int getCount()\n         return objects.isEmpty() || (object != null && objects.size() == 1 && object.equals( objects.get( 0 ) ) );\r\n     }\r\n \r\n+    @Override\r\n+    public List<T> getAllByAttributeAndValues( Attribute attribute, List<String> values )\r\n+    {\r\n+        CriteriaBuilder builder = getCriteriaBuilder();\r\n+\r\n+        CriteriaQuery<T> query = builder.createQuery( getClazz() );\r\n+        Root<T> root = query.from( getClazz() );\r\n+        query.select( root );\r\n+        query.where( builder.function( FUNCTION_JSONB_EXTRACT_PATH_TEXT, String.class, root.get( \"attributeValues\" ), builder.literal( attribute.getUid() ), builder.literal( \"value\" ) ).in( values ) );\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkwNTQ2OQ=="}, "originalCommit": {"oid": "b61a1f1c7f9bebd99095dfab08668b8415c08c66"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3546, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}