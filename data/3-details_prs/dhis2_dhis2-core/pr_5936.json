{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4MzE4NzI0", "number": 5936, "title": "fix: (2.34) Load TEI in TrackerCapture app trigger update query", "bodyText": "backport #5908", "createdAt": "2020-08-15T13:42:08Z", "url": "https://github.com/dhis2/dhis2-core/pull/5936", "merged": true, "mergeCommit": {"oid": "e860d1e210599586699804698d02e94413e2a944"}, "closed": true, "closedAt": "2020-08-19T07:58:48Z", "author": {"login": "vietnguyen"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc_4kgQAH2gAyNDY4MzE4NzI0OmUzNTUyODk2Nzk2MmRhN2Q0M2IzNzgzMDQ4NDRkYjg4NjQzOGM3Yzg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc_40EWAFqTQ2ODgyNTkzMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e35528967962da7d43b378304844db886438c7c8", "author": {"user": {"login": "vietnguyen", "name": "Viet Nguyen"}}, "url": "https://github.com/dhis2/dhis2-core/commit/e35528967962da7d43b378304844db886438c7c8", "committedDate": "2020-08-17T20:37:52Z", "message": "fix: Load TEI in TrackerCapture app trigger update query"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9f5150165b1d784aa644c75b6c99002d3150dc2e", "author": {"user": {"login": "vietnguyen", "name": "Viet Nguyen"}}, "url": "https://github.com/dhis2/dhis2-core/commit/9f5150165b1d784aa644c75b6c99002d3150dc2e", "committedDate": "2020-08-15T13:40:34Z", "message": "fix: Load TEI in TrackerCapture app trigger update query"}, "afterCommit": {"oid": "e35528967962da7d43b378304844db886438c7c8", "author": {"user": {"login": "vietnguyen", "name": "Viet Nguyen"}}, "url": "https://github.com/dhis2/dhis2-core/commit/e35528967962da7d43b378304844db886438c7c8", "committedDate": "2020-08-17T20:37:52Z", "message": "fix: Load TEI in TrackerCapture app trigger update query"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4ODI1OTMw", "url": "https://github.com/dhis2/dhis2-core/pull/5936#pullrequestreview-468825930", "createdAt": "2020-08-17T20:54:51Z", "commit": {"oid": "e35528967962da7d43b378304844db886438c7c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMDo1NDo1MlrOHB6ifg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMDo1NDo1MlrOHB6ifg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc2OTcyNg==", "bodyText": "In this class, only removed  @JsonDeserialize( using = ValueRenderTypeDeserialize.class )  from getRenderType() method\nnot sure why it changed the whole file", "url": "https://github.com/dhis2/dhis2-core/pull/5936#discussion_r471769726", "createdAt": "2020-08-17T20:54:52Z", "author": {"login": "vietnguyen"}, "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/program/ProgramStageDataElement.java", "diffHunk": "@@ -1,278 +1,276 @@\n-package org.hisp.dhis.program;\r\n-\r\n-/*\r\n- * Copyright (c) 2004-2020, University of Oslo\r\n- * All rights reserved.\r\n- *\r\n- * Redistribution and use in source and binary forms, with or without\r\n- * modification, are permitted provided that the following conditions are met:\r\n- * Redistributions of source code must retain the above copyright notice, this\r\n- * list of conditions and the following disclaimer.\r\n- *\r\n- * Redistributions in binary form must reproduce the above copyright notice,\r\n- * this list of conditions and the following disclaimer in the documentation\r\n- * and/or other materials provided with the distribution.\r\n- * Neither the name of the HISP project nor the names of its contributors may\r\n- * be used to endorse or promote products derived from this software without\r\n- * specific prior written permission.\r\n- *\r\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\r\n- * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n- * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n- * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\r\n- * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n- */\r\n-\r\n-import com.fasterxml.jackson.annotation.JsonProperty;\r\n-import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\r\n-import com.fasterxml.jackson.databind.annotation.JsonSerialize;\r\n-import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\r\n-import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\r\n-import org.hisp.dhis.common.BaseIdentifiableObject;\r\n-import org.hisp.dhis.common.DxfNamespaces;\r\n-import org.hisp.dhis.common.EmbeddedObject;\r\n-import org.hisp.dhis.common.adapter.DeviceRenderTypeMapSerializer;\r\n-import org.hisp.dhis.common.adapter.ValueRenderTypeDeserialize;\r\n-import org.hisp.dhis.dataelement.DataElement;\r\n-import org.hisp.dhis.render.DeviceRenderTypeMap;\r\n-import org.hisp.dhis.render.type.ValueTypeRenderingObject;\r\n-\r\n-/**\r\n- * @author Viet Nguyen\r\n- */\r\n-@JacksonXmlRootElement( localName = \"programStageDataElement\", namespace = DxfNamespaces.DXF_2_0 )\r\n-public class ProgramStageDataElement\r\n-    extends BaseIdentifiableObject implements EmbeddedObject\r\n-{\r\n-    private ProgramStage programStage;\r\n-\r\n-    private DataElement dataElement;\r\n-\r\n-    /**\r\n-     * True if this dataElement is mandatory in the dataEntryForm for this\r\n-     * programStage\r\n-     */\r\n-    private boolean compulsory = false;\r\n-\r\n-    private Boolean allowProvidedElsewhere = false;\r\n-\r\n-    private Integer sortOrder;\r\n-\r\n-    private Boolean displayInReports = false;\r\n-\r\n-    private Boolean allowFutureDate = false;\r\n-\r\n-    // Remove this in the future, will be replaced by renderType\r\n-    private Boolean renderOptionsAsRadio = false;\r\n-\r\n-    /**\r\n-     * The renderType defines how the ProgramStageSection should be rendered on the client\r\n-     */\r\n-    private DeviceRenderTypeMap<ValueTypeRenderingObject> renderType;\r\n-\r\n-    private Boolean skipSynchronization = false;\r\n-\r\n-    // -------------------------------------------------------------------------\r\n-    // Constructors\r\n-    // -------------------------------------------------------------------------\r\n-\r\n-    public ProgramStageDataElement()\r\n-    {\r\n-    }\r\n-\r\n-    public ProgramStageDataElement( ProgramStage programStage, DataElement dataElement )\r\n-    {\r\n-        this.programStage = programStage;\r\n-        this.dataElement = dataElement;\r\n-    }\r\n-\r\n-    public ProgramStageDataElement( ProgramStage programStage, DataElement dataElement, boolean compulsory )\r\n-    {\r\n-        this.programStage = programStage;\r\n-        this.dataElement = dataElement;\r\n-        this.compulsory = compulsory;\r\n-    }\r\n-\r\n-    public ProgramStageDataElement( ProgramStage programStage, DataElement dataElement, boolean compulsory,\r\n-        Integer sortOrder )\r\n-    {\r\n-        this.programStage = programStage;\r\n-        this.dataElement = dataElement;\r\n-        this.compulsory = compulsory;\r\n-        this.sortOrder = sortOrder;\r\n-    }\r\n-\r\n-    // -------------------------------------------------------------------------\r\n-    // Get and set methods\r\n-    // -------------------------------------------------------------------------\r\n-\r\n-    @JsonProperty\r\n-    @JsonSerialize( as = BaseIdentifiableObject.class )\r\n-    @JacksonXmlProperty( namespace = DxfNamespaces.DXF_2_0 )\r\n-    public ProgramStage getProgramStage()\r\n-    {\r\n-        return programStage;\r\n-    }\r\n-\r\n-    public void setProgramStage( ProgramStage programStage )\r\n-    {\r\n-        this.programStage = programStage;\r\n-    }\r\n-\r\n-    @JsonProperty\r\n-    @JsonSerialize( as = BaseIdentifiableObject.class )\r\n-    @JacksonXmlProperty( namespace = DxfNamespaces.DXF_2_0 )\r\n-    public DataElement getDataElement()\r\n-    {\r\n-        return dataElement;\r\n-    }\r\n-\r\n-    public void setDataElement( DataElement dataElement )\r\n-    {\r\n-        this.dataElement = dataElement;\r\n-    }\r\n-\r\n-    @JsonProperty\r\n-    @JacksonXmlProperty( namespace = DxfNamespaces.DXF_2_0 )\r\n-    public Boolean getAllowProvidedElsewhere()\r\n-    {\r\n-        return allowProvidedElsewhere;\r\n-    }\r\n-\r\n-    public void setAllowProvidedElsewhere( Boolean allowProvidedElsewhere )\r\n-    {\r\n-        this.allowProvidedElsewhere = allowProvidedElsewhere;\r\n-    }\r\n-\r\n-    @JsonProperty\r\n-    @JacksonXmlProperty( namespace = DxfNamespaces.DXF_2_0 )\r\n-    public boolean isCompulsory()\r\n-    {\r\n-        return compulsory;\r\n-    }\r\n-\r\n-    public void setCompulsory( boolean compulsory )\r\n-    {\r\n-        this.compulsory = compulsory;\r\n-    }\r\n-\r\n-    @JsonProperty\r\n-    @JacksonXmlProperty( namespace = DxfNamespaces.DXF_2_0 )\r\n-    public Integer getSortOrder()\r\n-    {\r\n-        return sortOrder;\r\n-    }\r\n-\r\n-    public void setSortOrder( Integer sortOrder )\r\n-    {\r\n-        this.sortOrder = sortOrder;\r\n-    }\r\n-\r\n-    @JsonProperty\r\n-    @JacksonXmlProperty( namespace = DxfNamespaces.DXF_2_0 )\r\n-    public Boolean getDisplayInReports()\r\n-    {\r\n-        return displayInReports;\r\n-    }\r\n-\r\n-    public void setDisplayInReports( Boolean displayInReports )\r\n-    {\r\n-        this.displayInReports = displayInReports;\r\n-    }\r\n-\r\n-    @JsonProperty\r\n-    @JacksonXmlProperty( namespace = DxfNamespaces.DXF_2_0 )\r\n-    public Boolean getAllowFutureDate()\r\n-    {\r\n-        return allowFutureDate;\r\n-    }\r\n-\r\n-    public void setAllowFutureDate( Boolean allowFutureDate )\r\n-    {\r\n-        this.allowFutureDate = allowFutureDate;\r\n-    }\r\n-\r\n-    @JsonProperty\r\n-    @JacksonXmlProperty( namespace = DxfNamespaces.DXF_2_0 )\r\n-    public Boolean getRenderOptionsAsRadio()\r\n-    {\r\n-        return renderOptionsAsRadio;\r\n-    }\r\n-\r\n-    public void setRenderOptionsAsRadio( Boolean renderOptionsAsRadio )\r\n-    {\r\n-        this.renderOptionsAsRadio = renderOptionsAsRadio;\r\n-    }\r\n-\r\n-    @JsonProperty\r\n-    @JacksonXmlProperty( namespace = DxfNamespaces.DXF_2_0 )\r\n-    @JsonDeserialize( using = ValueRenderTypeDeserialize.class )\r\n-    @JsonSerialize( using = DeviceRenderTypeMapSerializer.class )\r\n-    public DeviceRenderTypeMap<ValueTypeRenderingObject> getRenderType()\r\n-    {\r\n-        return renderType;\r\n-    }\r\n-\r\n-    public void setRenderType( DeviceRenderTypeMap<ValueTypeRenderingObject> renderType )\r\n-    {\r\n-        this.renderType = renderType;\r\n-    }\r\n-\r\n-    @JsonProperty\r\n-    @JacksonXmlProperty( namespace = DxfNamespaces.DXF_2_0 )\r\n-    public Boolean getSkipSynchronization()\r\n-    {\r\n-        return skipSynchronization;\r\n-    }\r\n-\r\n-    public void setSkipSynchronization( Boolean skipSynchronization )\r\n-    {\r\n-        this.skipSynchronization = skipSynchronization;\r\n-    }\r\n-\r\n-    // -------------------------------------------------------------------------\r\n-    // hashCode, equals and toString\r\n-    // -------------------------------------------------------------------------\r\n-\r\n-    @Override\r\n-    public boolean equals( Object o )\r\n-    {\r\n-        if ( this == o ) return true;\r\n-        if ( o == null || getClass() != o.getClass() ) return false;\r\n-\r\n-        ProgramStageDataElement that = (ProgramStageDataElement) o;\r\n-\r\n-        if ( dataElement != null ? !dataElement.equals( that.dataElement ) : that.dataElement != null ) return false;\r\n-        if ( programStage != null ? !programStage.equals( that.programStage ) : that.programStage != null ) return false;\r\n-\r\n-        return true;\r\n-    }\r\n-\r\n-    @Override\r\n-    public int hashCode()\r\n-    {\r\n-        int result = programStage != null ? programStage.hashCode() : 0;\r\n-        result = 31 * result + (dataElement != null ? dataElement.hashCode() : 0);\r\n-        return result;\r\n-    }\r\n-\r\n-    @Override\r\n-    public String toString()\r\n-    {\r\n-        return \"ProgramStageDataElement{\" +\r\n-            \"programStage=\" + programStage +\r\n-            \", dataElement=\" + dataElement +\r\n-            \", compulsory=\" + compulsory +\r\n-            \", allowProvidedElsewhere=\" + allowProvidedElsewhere +\r\n-            \", sortOrder=\" + sortOrder +\r\n-            \", displayInReports=\" + displayInReports +\r\n-            \", allowFutureDate=\" + allowFutureDate +\r\n-            \", renderOptionsAsRadio=\" + renderOptionsAsRadio +\r\n-            '}';\r\n-    }\r\n-}\r\n+package org.hisp.dhis.program;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n+import org.hisp.dhis.common.BaseIdentifiableObject;\n+import org.hisp.dhis.common.DxfNamespaces;\n+import org.hisp.dhis.common.EmbeddedObject;\n+import org.hisp.dhis.common.adapter.DeviceRenderTypeMapSerializer;\n+import org.hisp.dhis.dataelement.DataElement;\n+import org.hisp.dhis.render.DeviceRenderTypeMap;\n+import org.hisp.dhis.render.type.ValueTypeRenderingObject;\n+\n+/**\n+ * @author Viet Nguyen\n+ */\n+@JacksonXmlRootElement( localName = \"programStageDataElement\", namespace = DxfNamespaces.DXF_2_0 )\n+public class ProgramStageDataElement\n+    extends BaseIdentifiableObject implements EmbeddedObject\n+{\n+    private ProgramStage programStage;\n+\n+    private DataElement dataElement;\n+\n+    /**\n+     * True if this dataElement is mandatory in the dataEntryForm for this\n+     * programStage\n+     */\n+    private boolean compulsory = false;\n+\n+    private Boolean allowProvidedElsewhere = false;\n+\n+    private Integer sortOrder;\n+\n+    private Boolean displayInReports = false;\n+\n+    private Boolean allowFutureDate = false;\n+\n+    // Remove this in the future, will be replaced by renderType\n+    private Boolean renderOptionsAsRadio = false;\n+\n+    /**\n+     * The renderType defines how the ProgramStageSection should be rendered on the client\n+     */\n+    private DeviceRenderTypeMap<ValueTypeRenderingObject> renderType;\n+\n+    private Boolean skipSynchronization = false;\n+\n+    // -------------------------------------------------------------------------\n+    // Constructors\n+    // -------------------------------------------------------------------------\n+\n+    public ProgramStageDataElement()\n+    {\n+    }\n+\n+    public ProgramStageDataElement( ProgramStage programStage, DataElement dataElement )\n+    {\n+        this.programStage = programStage;\n+        this.dataElement = dataElement;\n+    }\n+\n+    public ProgramStageDataElement( ProgramStage programStage, DataElement dataElement, boolean compulsory )\n+    {\n+        this.programStage = programStage;\n+        this.dataElement = dataElement;\n+        this.compulsory = compulsory;\n+    }\n+\n+    public ProgramStageDataElement( ProgramStage programStage, DataElement dataElement, boolean compulsory,\n+        Integer sortOrder )\n+    {\n+        this.programStage = programStage;\n+        this.dataElement = dataElement;\n+        this.compulsory = compulsory;\n+        this.sortOrder = sortOrder;\n+    }\n+\n+    // -------------------------------------------------------------------------\n+    // Get and set methods\n+    // -------------------------------------------------------------------------\n+\n+    @JsonProperty\n+    @JsonSerialize( as = BaseIdentifiableObject.class )\n+    @JacksonXmlProperty( namespace = DxfNamespaces.DXF_2_0 )\n+    public ProgramStage getProgramStage()\n+    {\n+        return programStage;\n+    }\n+\n+    public void setProgramStage( ProgramStage programStage )\n+    {\n+        this.programStage = programStage;\n+    }\n+\n+    @JsonProperty\n+    @JsonSerialize( as = BaseIdentifiableObject.class )\n+    @JacksonXmlProperty( namespace = DxfNamespaces.DXF_2_0 )\n+    public DataElement getDataElement()\n+    {\n+        return dataElement;\n+    }\n+\n+    public void setDataElement( DataElement dataElement )\n+    {\n+        this.dataElement = dataElement;\n+    }\n+\n+    @JsonProperty\n+    @JacksonXmlProperty( namespace = DxfNamespaces.DXF_2_0 )\n+    public Boolean getAllowProvidedElsewhere()\n+    {\n+        return allowProvidedElsewhere;\n+    }\n+\n+    public void setAllowProvidedElsewhere( Boolean allowProvidedElsewhere )\n+    {\n+        this.allowProvidedElsewhere = allowProvidedElsewhere;\n+    }\n+\n+    @JsonProperty\n+    @JacksonXmlProperty( namespace = DxfNamespaces.DXF_2_0 )\n+    public boolean isCompulsory()\n+    {\n+        return compulsory;\n+    }\n+\n+    public void setCompulsory( boolean compulsory )\n+    {\n+        this.compulsory = compulsory;\n+    }\n+\n+    @JsonProperty\n+    @JacksonXmlProperty( namespace = DxfNamespaces.DXF_2_0 )\n+    public Integer getSortOrder()\n+    {\n+        return sortOrder;\n+    }\n+\n+    public void setSortOrder( Integer sortOrder )\n+    {\n+        this.sortOrder = sortOrder;\n+    }\n+\n+    @JsonProperty\n+    @JacksonXmlProperty( namespace = DxfNamespaces.DXF_2_0 )\n+    public Boolean getDisplayInReports()\n+    {\n+        return displayInReports;\n+    }\n+\n+    public void setDisplayInReports( Boolean displayInReports )\n+    {\n+        this.displayInReports = displayInReports;\n+    }\n+\n+    @JsonProperty\n+    @JacksonXmlProperty( namespace = DxfNamespaces.DXF_2_0 )\n+    public Boolean getAllowFutureDate()\n+    {\n+        return allowFutureDate;\n+    }\n+\n+    public void setAllowFutureDate( Boolean allowFutureDate )\n+    {\n+        this.allowFutureDate = allowFutureDate;\n+    }\n+\n+    @JsonProperty\n+    @JacksonXmlProperty( namespace = DxfNamespaces.DXF_2_0 )\n+    public Boolean getRenderOptionsAsRadio()\n+    {\n+        return renderOptionsAsRadio;\n+    }\n+\n+    public void setRenderOptionsAsRadio( Boolean renderOptionsAsRadio )\n+    {\n+        this.renderOptionsAsRadio = renderOptionsAsRadio;\n+    }\n+\n+    @JsonProperty\n+    @JacksonXmlProperty( namespace = DxfNamespaces.DXF_2_0 )\n+    @JsonSerialize( using = DeviceRenderTypeMapSerializer.class )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e35528967962da7d43b378304844db886438c7c8"}, "originalPosition": 491}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2518, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}