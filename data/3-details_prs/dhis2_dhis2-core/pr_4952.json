{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5Njc0NDE4", "number": 4952, "title": "2.33 pepfar bug validation refactor", "bodyText": "This refactor is \"born\" out of an issue discovered with Pepfar db.\nThe PreheatService has a bug which causes an entire table to be loaded in memory (via Hibernate) in order to check for uniqueness.\nThis is the code that generates the query:\nDefaultPreheatService:242 (2.33)\nfor ( Class<? extends IdentifiableObject> klass : klasses )\n{\n    Query query = Query.from( schemaService.getDynamicSchema( klass ) );\n    query.setUser( preheat.getUser() );\n    List<? extends IdentifiableObject> objects = queryService.query( query ); // monster query!\n    if ( !objects.isEmpty() )\n    {\n        uniqueCollectionMap.put( klass, new ArrayList<>( objects ) );\n    }\n}\n\nThis code preloads in memory all the values of a given class/table and pass it to the validation service.\n--\nIn this PR, I have refactored the Validation Service, with the following goals in mind:\n\nMake the validation rules more isolated and testable\nReduce the complexity of Validation Service\nReduce the amount of duplicated code\n\nThe initial problem is not yet solved, because I'm struggling to understand the requirements for uniqueness check (see class UniquenessCheck). It would be great if someone could explain how uniqueness check is supposed to work during Tracker Import.\nThis is my understanding so far:\nEach IdentifiableObject class is bound to a schema, which has unique attributes set.\nDuring import, the system must check if the objects being imported (either for insert or update) are already existing in the database - based on these unique attributes. If the object is in the database, we should skip the import and generate an error report.", "createdAt": "2020-02-25T16:07:55Z", "url": "https://github.com/dhis2/dhis2-core/pull/4952", "merged": true, "mergeCommit": {"oid": "f98099c9df6e8602f6ea580e016dd3c43cb41d11"}, "closed": true, "closedAt": "2020-03-04T07:22:09Z", "author": {"login": "luciano-fiandesio"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcH-tlBgFqTM2NDYxMTg1NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcKDtuXgH2gAyMzc5Njc0NDE4OmMyMGNmMWU5YjdlODg0YTY2YTE4YzU2OGM2NTZkYWJiZTQxYmE2ZTA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NjExODU0", "url": "https://github.com/dhis2/dhis2-core/pull/4952#pullrequestreview-364611854", "createdAt": "2020-02-26T04:07:27Z", "commit": {"oid": "706f5e2e8114ef65a29bbbbd5ab2fd8f1fb008ee"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c346476902b87567ae335875745c933c2ace61c7", "author": {"user": {"login": "luciano-fiandesio", "name": "Luciano Fiandesio"}}, "url": "https://github.com/dhis2/dhis2-core/commit/c346476902b87567ae335875745c933c2ace61c7", "committedDate": "2020-02-28T15:57:55Z", "message": "fix: fetch unique values during metadata import\n\n- DHIS2-8267\n- Introduced new component that fetches all unique attributes for a\nall Metadata objects of a given class (instead that the full object graph) during Metadata import pre-heat\n- Refactored Metadata import validation into Validation Rules, in order\nto improve testability and \"code-cleaness\""}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "706f5e2e8114ef65a29bbbbd5ab2fd8f1fb008ee", "author": {"user": {"login": "luciano-fiandesio", "name": "Luciano Fiandesio"}}, "url": "https://github.com/dhis2/dhis2-core/commit/706f5e2e8114ef65a29bbbbd5ab2fd8f1fb008ee", "committedDate": "2020-02-25T15:17:41Z", "message": "minor"}, "afterCommit": {"oid": "c346476902b87567ae335875745c933c2ace61c7", "author": {"user": {"login": "luciano-fiandesio", "name": "Luciano Fiandesio"}}, "url": "https://github.com/dhis2/dhis2-core/commit/c346476902b87567ae335875745c933c2ace61c7", "committedDate": "2020-02-28T15:57:55Z", "message": "fix: fetch unique values during metadata import\n\n- DHIS2-8267\n- Introduced new component that fetches all unique attributes for a\nall Metadata objects of a given class (instead that the full object graph) during Metadata import pre-heat\n- Refactored Metadata import validation into Validation Rules, in order\nto improve testability and \"code-cleaness\""}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85e1c5aa0bea0a92b0c347a28ef223841066fa8b", "author": {"user": {"login": "luciano-fiandesio", "name": "Luciano Fiandesio"}}, "url": "https://github.com/dhis2/dhis2-core/commit/85e1c5aa0bea0a92b0c347a28ef223841066fa8b", "committedDate": "2020-02-28T16:10:59Z", "message": "chore: fix code formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5140d85a236b4a927f99e0121b8fc0e264a537e8", "author": {"user": {"login": "luciano-fiandesio", "name": "Luciano Fiandesio"}}, "url": "https://github.com/dhis2/dhis2-core/commit/5140d85a236b4a927f99e0121b8fc0e264a537e8", "committedDate": "2020-02-28T19:26:20Z", "message": "fix: failing tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "961cf05213968cf33867682fcbfc70dfad2b57fa", "author": {"user": {"login": "luciano-fiandesio", "name": "Luciano Fiandesio"}}, "url": "https://github.com/dhis2/dhis2-core/commit/961cf05213968cf33867682fcbfc70dfad2b57fa", "committedDate": "2020-03-02T09:10:23Z", "message": "chore: sonarqube fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3ODg2Njc5", "url": "https://github.com/dhis2/dhis2-core/pull/4952#pullrequestreview-367886679", "createdAt": "2020-03-03T11:03:50Z", "commit": {"oid": "961cf05213968cf33867682fcbfc70dfad2b57fa"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMTowMzo1MFrOFxBXQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMjowODowN1rOFxDNXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk0Njg4Mg==", "bodyText": "Missing spaces in paranthesis :)", "url": "https://github.com/dhis2/dhis2-core/pull/4952#discussion_r386946882", "createdAt": "2020-03-03T11:03:50Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/metadata/objectbundle/validation/DeletionCheck.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package org.hisp.dhis.dxf2.metadata.objectbundle.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.util.List;\n+\n+import org.hisp.dhis.common.IdentifiableObject;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundle;\n+import org.hisp.dhis.feedback.ErrorCode;\n+import org.hisp.dhis.feedback.ErrorReport;\n+import org.hisp.dhis.feedback.TypeReport;\n+import org.hisp.dhis.importexport.ImportStrategy;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class DeletionCheck\n+    implements\n+    ValidationCheck\n+{\n+    @Override\n+    public TypeReport check( ObjectBundle bundle, Class<? extends IdentifiableObject> klass,\n+        List<IdentifiableObject> persistedObjects, List<IdentifiableObject> nonPersistedObjects,\n+        ImportStrategy importStrategy, ValidationContext ctx )\n+    {\n+        TypeReport typeReport = new TypeReport( klass );\n+\n+        if ( nonPersistedObjects == null || nonPersistedObjects.isEmpty() )\n+        {\n+            return typeReport;\n+        }\n+\n+        for ( IdentifiableObject identifiableObject : nonPersistedObjects )\n+        {\n+            IdentifiableObject object = bundle.getPreheat().get( bundle.getPreheatIdentifier(), identifiableObject );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "961cf05213968cf33867682fcbfc70dfad2b57fa"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk0NzM4NA==", "bodyText": "space in paranthesis :)", "url": "https://github.com/dhis2/dhis2-core/pull/4952#discussion_r386947384", "createdAt": "2020-03-03T11:04:54Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/metadata/objectbundle/validation/ReferencesCheck.java", "diffHunk": "@@ -0,0 +1,206 @@\n+package org.hisp.dhis.dxf2.metadata.objectbundle.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.hisp.dhis.common.EmbeddedObject;\n+import org.hisp.dhis.common.IdentifiableObject;\n+import org.hisp.dhis.dxf2.metadata.AtomicMode;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundle;\n+import org.hisp.dhis.feedback.ErrorCode;\n+import org.hisp.dhis.feedback.ObjectReport;\n+import org.hisp.dhis.feedback.TypeReport;\n+import org.hisp.dhis.importexport.ImportStrategy;\n+import org.hisp.dhis.period.Period;\n+import org.hisp.dhis.period.PeriodType;\n+import org.hisp.dhis.preheat.Preheat;\n+import org.hisp.dhis.preheat.PreheatErrorReport;\n+import org.hisp.dhis.preheat.PreheatIdentifier;\n+import org.hisp.dhis.schema.PropertyType;\n+import org.hisp.dhis.schema.Schema;\n+import org.hisp.dhis.system.util.ReflectionUtils;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.user.UserCredentials;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class ReferencesCheck\n+    implements\n+    ValidationCheck\n+{\n+    @Override\n+    public TypeReport check( ObjectBundle bundle, Class<? extends IdentifiableObject> klass,\n+        List<IdentifiableObject> persistedObjects, List<IdentifiableObject> nonPersistedObjects,\n+        ImportStrategy importStrategy, ValidationContext ctx )\n+    {\n+        TypeReport typeReport = new TypeReport( klass );\n+\n+        List<IdentifiableObject> objects = ValidationUtils.joinObjects( persistedObjects, nonPersistedObjects );\n+\n+        if ( objects.isEmpty() )\n+        {\n+            return typeReport;\n+        }\n+\n+        for ( IdentifiableObject object : objects )\n+        {\n+            List<PreheatErrorReport> errorReports = checkReferences( object, bundle.getPreheat(),\n+                bundle.getPreheatIdentifier(), bundle.isSkipSharing(), ctx );\n+\n+            if ( errorReports.isEmpty() )\n+                continue;\n+            \n+            if ( object != null )\n+            {\n+                ObjectReport objectReport = new ObjectReport( object, bundle );\n+                objectReport.addErrorReports( errorReports );\n+                typeReport.addObjectReport( objectReport );\n+            }\n+        }\n+\n+        if ( !typeReport.getErrorReports().isEmpty() && AtomicMode.ALL == bundle.getAtomicMode() )\n+        {\n+            typeReport.getStats().incIgnored();\n+        }\n+\n+        return typeReport;\n+    }\n+\n+    private List<PreheatErrorReport> checkReferences( IdentifiableObject object, Preheat preheat,\n+        PreheatIdentifier identifier, boolean skipSharing, ValidationContext ctx )\n+    {\n+        List<PreheatErrorReport> preheatErrorReports = new ArrayList<>();\n+\n+        if ( object == null )\n+        {\n+            return preheatErrorReports;\n+        }\n+\n+        Schema schema = ctx.getSchemaService().getDynamicSchema( object.getClass() );\n+        schema.getProperties().stream().filter( p -> p.isPersisted() && p.isOwner()\n+            && (PropertyType.REFERENCE == p.getPropertyType() || PropertyType.REFERENCE == p.getItemPropertyType()) )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "961cf05213968cf33867682fcbfc70dfad2b57fa"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk3NjkyMw==", "bodyText": "space in paranthesis :)", "url": "https://github.com/dhis2/dhis2-core/pull/4952#discussion_r386976923", "createdAt": "2020-03-03T12:07:36Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/metadata/objectbundle/validation/ValidationFactory.java", "diffHunk": "@@ -0,0 +1,187 @@\n+package org.hisp.dhis.dxf2.metadata.objectbundle.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.hisp.dhis.common.IdentifiableObject;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundle;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleHook;\n+import org.hisp.dhis.feedback.TypeReport;\n+import org.hisp.dhis.importexport.ImportStrategy;\n+import org.hisp.dhis.schema.SchemaService;\n+import org.hisp.dhis.schema.validation.SchemaValidator;\n+import org.hisp.dhis.security.acl.AclService;\n+import org.hisp.dhis.user.UserService;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Component\n+public class ValidationFactory\n+{\n+\n+    private static final Log log = LogFactory.getLog( ValidationFactory.class );\n+\n+    private final SchemaValidator schemaValidator;\n+\n+    private final SchemaService schemaService;\n+\n+    private final AclService aclService;\n+\n+    private final UserService userService;\n+\n+    private final Map<ImportStrategy, List<Class<? extends ValidationCheck>>> validatorMap;\n+\n+    private List<ObjectBundleHook> objectBundleHooks;\n+\n+\n+\n+    public ValidationFactory( SchemaValidator schemaValidator, SchemaService schemaService, AclService aclService,\n+        UserService userService, List<ObjectBundleHook> objectBundleHooks,\n+        Map<ImportStrategy, List<Class<? extends ValidationCheck>>> validatorMap )\n+    {\n+        this.schemaValidator = schemaValidator;\n+        this.schemaService = schemaService;\n+        this.aclService = aclService;\n+        this.userService = userService;\n+        this.validatorMap = validatorMap;\n+        this.objectBundleHooks = objectBundleHooks == null ? Collections.emptyList() : objectBundleHooks;\n+    }\n+\n+    /**\n+     * Run the validation checks against the bundle\n+     *\n+     * @param bundle an {@see ObjectBundle}\n+     * @param klass the Class type that is getting validated\n+     * @param persistedObjects a List of IdentifiableObject\n+     * @param nonPersistedObjects a List of IdentifiableObject\n+     *\n+     * @return a {@see TypeReport} containing the outcome of the validation\n+     */\n+    public TypeReport validateBundle( ObjectBundle bundle, Class<? extends IdentifiableObject> klass,\n+        List<IdentifiableObject> persistedObjects, List<IdentifiableObject> nonPersistedObjects)\n+    {\n+        ValidationContext ctx = getContext();\n+        TypeReport typeReport =  new ValidationRunner( validatorMap.get( bundle.getImportMode() ) ).executeValidationChain( bundle, klass,\n+            persistedObjects, nonPersistedObjects, ctx );\n+\n+        // remove from the bundle the invalid objects\n+        removeFromBundle(klass, ctx, bundle );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "961cf05213968cf33867682fcbfc70dfad2b57fa"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk3NzExOQ==", "bodyText": "space in paranthesis :)", "url": "https://github.com/dhis2/dhis2-core/pull/4952#discussion_r386977119", "createdAt": "2020-03-03T12:08:07Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/metadata/objectbundle/validation/ValidationFactory.java", "diffHunk": "@@ -0,0 +1,187 @@\n+package org.hisp.dhis.dxf2.metadata.objectbundle.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.hisp.dhis.common.IdentifiableObject;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundle;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleHook;\n+import org.hisp.dhis.feedback.TypeReport;\n+import org.hisp.dhis.importexport.ImportStrategy;\n+import org.hisp.dhis.schema.SchemaService;\n+import org.hisp.dhis.schema.validation.SchemaValidator;\n+import org.hisp.dhis.security.acl.AclService;\n+import org.hisp.dhis.user.UserService;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Component\n+public class ValidationFactory\n+{\n+\n+    private static final Log log = LogFactory.getLog( ValidationFactory.class );\n+\n+    private final SchemaValidator schemaValidator;\n+\n+    private final SchemaService schemaService;\n+\n+    private final AclService aclService;\n+\n+    private final UserService userService;\n+\n+    private final Map<ImportStrategy, List<Class<? extends ValidationCheck>>> validatorMap;\n+\n+    private List<ObjectBundleHook> objectBundleHooks;\n+\n+\n+\n+    public ValidationFactory( SchemaValidator schemaValidator, SchemaService schemaService, AclService aclService,\n+        UserService userService, List<ObjectBundleHook> objectBundleHooks,\n+        Map<ImportStrategy, List<Class<? extends ValidationCheck>>> validatorMap )\n+    {\n+        this.schemaValidator = schemaValidator;\n+        this.schemaService = schemaService;\n+        this.aclService = aclService;\n+        this.userService = userService;\n+        this.validatorMap = validatorMap;\n+        this.objectBundleHooks = objectBundleHooks == null ? Collections.emptyList() : objectBundleHooks;\n+    }\n+\n+    /**\n+     * Run the validation checks against the bundle\n+     *\n+     * @param bundle an {@see ObjectBundle}\n+     * @param klass the Class type that is getting validated\n+     * @param persistedObjects a List of IdentifiableObject\n+     * @param nonPersistedObjects a List of IdentifiableObject\n+     *\n+     * @return a {@see TypeReport} containing the outcome of the validation\n+     */\n+    public TypeReport validateBundle( ObjectBundle bundle, Class<? extends IdentifiableObject> klass,\n+        List<IdentifiableObject> persistedObjects, List<IdentifiableObject> nonPersistedObjects)\n+    {\n+        ValidationContext ctx = getContext();\n+        TypeReport typeReport =  new ValidationRunner( validatorMap.get( bundle.getImportMode() ) ).executeValidationChain( bundle, klass,\n+            persistedObjects, nonPersistedObjects, ctx );\n+\n+        // remove from the bundle the invalid objects\n+        removeFromBundle(klass, ctx, bundle );\n+\n+        return addStatistics( typeReport, bundle, persistedObjects, nonPersistedObjects );\n+    }\n+\n+    private TypeReport addStatistics( TypeReport typeReport, ObjectBundle bundle,\n+                                      List<IdentifiableObject> persistedObjects, List<IdentifiableObject> nonPersistedObjects )\n+    {\n+        if ( bundle.getImportMode().isCreateAndUpdate() )\n+        {\n+            typeReport.getStats().incCreated( nonPersistedObjects.size() );\n+            typeReport.getStats().incUpdated( persistedObjects.size() );\n+\n+        }\n+        else if ( bundle.getImportMode().isCreate() )\n+        {\n+            typeReport.getStats().incCreated( nonPersistedObjects.size() );\n+\n+        }\n+        else if ( bundle.getImportMode().isUpdate() )\n+        {\n+            typeReport.getStats().incUpdated( persistedObjects.size() );\n+\n+        }\n+        else if ( bundle.getImportMode().isDelete() )\n+        {\n+            typeReport.getStats().incDeleted( persistedObjects.size() );\n+        }\n+        return typeReport;\n+    }\n+\n+    /**\n+     *\n+     * @param klass the class of the objects to remove from bundle\n+     * @param ctx the {@see ValidationContext} containing the list of objects to remove\n+     * @param bundle the {@see ObjectBundle}\n+     */\n+    private void removeFromBundle( Class<? extends IdentifiableObject> klass, ValidationContext ctx,\n+        ObjectBundle bundle )\n+    {\n+        List<IdentifiableObject> persisted = bundle.getObjects( klass, true );\n+        persisted.removeAll( ctx.getMarkedForRemoval() );\n+\n+        List<IdentifiableObject> nonPersisted = bundle.getObjects( klass, false );\n+        nonPersisted.removeAll( ctx.getMarkedForRemoval() );\n+    }\n+\n+    private ValidationContext getContext()\n+    {\n+        return new ValidationContext( this.objectBundleHooks, this.schemaValidator, this.aclService, this.userService,\n+            this.schemaService );\n+    }\n+\n+    static class ValidationRunner\n+    {\n+\n+        private List<Class<? extends ValidationCheck>> validators;\n+\n+        public ValidationRunner( List<Class<? extends ValidationCheck>> validators )\n+        {\n+            this.validators = validators;\n+        }\n+\n+        public TypeReport executeValidationChain( ObjectBundle bundle, Class<? extends IdentifiableObject> klass,\n+            List<IdentifiableObject> persistedObjects, List<IdentifiableObject> nonPersistedObjects,\n+            ValidationContext ctx )\n+        {\n+\n+            TypeReport typeReport = new TypeReport( klass );\n+            for ( Class<? extends ValidationCheck> validator : validators )\n+            {\n+                try\n+                {\n+                    ValidationCheck validationCheck = validator.newInstance();\n+                    typeReport.merge( validationCheck.check( bundle, klass, persistedObjects, nonPersistedObjects,\n+                        bundle.getImportMode(), ctx ) );\n+                }\n+                catch ( InstantiationException | IllegalAccessException e )\n+                {\n+                    log.error(\"An error occurred during metadata import validation\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "961cf05213968cf33867682fcbfc70dfad2b57fa"}, "originalPosition": 180}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c20cf1e9b7e884a66a18c568c656dabbe41ba6e0", "author": {"user": {"login": "luciano-fiandesio", "name": "Luciano Fiandesio"}}, "url": "https://github.com/dhis2/dhis2-core/commit/c20cf1e9b7e884a66a18c568c656dabbe41ba6e0", "committedDate": "2020-03-03T15:04:59Z", "message": "chore: reformat"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2843, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}