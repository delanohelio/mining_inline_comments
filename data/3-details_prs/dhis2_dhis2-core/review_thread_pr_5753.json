{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1MDkyMzI1", "number": 5753, "reviewThreads": {"totalCount": 108, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNTowNDoxMVrOES23_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNToxMDoxMVrOES3Cew==", "hasNextPage": false, "hasPreviousPage": true}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MjA4ODkzOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNTowNDoxMVrOG4RK1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNTowNDoxMVrOG4RK1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1NDc0Mw==", "bodyText": "Unused code", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461654743", "createdAt": "2020-07-28T15:04:11Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java", "diffHunk": "@@ -468,21 +512,19 @@ private InputStream createEventJsonInputStream( String program, String programSt\n         dataValue.put( \"dataElement\", dataElement.getUid() );\n         dataValue.put( \"value\", value );\n \n-        JSONObject geometry = new JSONObject();\n-        geometry.put( \"type\", \"Point\" );\n-        JSONArray coordinates = new JSONArray();\n-        coordinates.add( \"1.33343\" );\n-        coordinates.add( \"-21.9954\" );\n-        geometry.put( \"coordinates\", coordinates );\n-        eventJsonPayload.put( \"geometry\", geometry );\n+//        JSONObject geometry = new JSONObject();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab"}, "originalPosition": 177}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MjA5MTg2OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNTowNDo1MlrOG4RMtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNTowNDo1MlrOG4RMtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1NTIyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            || (params.getCategoryOptionCombo() == null && !isSuper( user ) && !userHasAccess( rowSet )) )\n          \n          \n            \n                            || ( params.getCategoryOptionCombo() == null && !isSuper( user ) && !userHasAccess( rowSet ) ) )", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461655221", "createdAt": "2020-07-28T15:04:52Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java", "diffHunk": "@@ -163,7 +231,8 @@ public JdbcEventStore( StatementBuilder statementBuilder, @Qualifier( \"readOnlyJ\n \n         while ( rowSet.next() )\n         {\n-            if ( rowSet.getString( \"psi_uid\" ) == null || (params.getCategoryOptionCombo() == null && !isSuperUser && !userHasAccess( rowSet )) )\n+            if ( rowSet.getString( \"psi_uid\" ) == null\n+                || (params.getCategoryOptionCombo() == null && !isSuper( user ) && !userHasAccess( rowSet )) )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab"}, "originalPosition": 210}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MjA5NDkyOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNTowNToyNlrOG4ROeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNTowNToyNlrOG4ROeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1NTY3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                catch ( JsonProcessingException | SQLException e)\n          \n          \n            \n                                catch ( JsonProcessingException | SQLException e )", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461655672", "createdAt": "2020-07-28T15:05:26Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java", "diffHunk": "@@ -303,49 +373,60 @@ public JdbcEventStore( StatementBuilder statementBuilder, @Qualifier( \"readOnlyJ\n         {\n             CachingMap<String, String> dataElementUidToIdentifierCache = new CachingMap<>();\n \n-            List<Collection<DataValue>> dataValuesList = events.stream().map( Event::getDataValues ).collect( Collectors.toList() );\n+            List<Collection<DataValue>> dataValuesList = events.stream().map( Event::getDataValues )\n+                .collect( Collectors.toList() );\n             populateCache( dataElementIdScheme, dataValuesList, dataElementUidToIdentifierCache );\n             convertDataValuesIdentifiers( dataElementIdScheme, dataValuesList, dataElementUidToIdentifierCache );\n         }\n \n         if ( params.getCategoryOptionCombo() == null && !isSuper( user ) )\n         {\n-            return events.stream().filter( ev -> ev.getAttributeCategoryOptions() != null && splitToArray( ev.getAttributeCategoryOptions(), TextUtils.SEMICOLON ).size() == ev.getOptionSize() ).collect( Collectors.toList() );\n+            return events.stream().filter( ev -> ev.getAttributeCategoryOptions() != null\n+                && splitToArray( ev.getAttributeCategoryOptions(), TextUtils.SEMICOLON ).size() == ev.getOptionSize() )\n+                .collect( Collectors.toList() );\n         }\n \n         return events;\n     }\n \n-    private void validateIdentifiersPresence( SqlRowSet rowSet, IdSchemes idSchemes,\n-        boolean validateCategoryOptionCombo )\n+    public void saveEvents( List<ProgramStageInstance> events )\n     {\n-        if ( StringUtils.isEmpty( rowSet.getString( \"p_identifier\" ) ) )\n+        try\n         {\n-            throw new IllegalStateException(\n-                String.format( \"Program %s does not have a value assigned for idScheme %s\",\n-                    rowSet.getString( \"p_uid\" ), idSchemes.getProgramIdScheme().name() ) );\n+            saveAllComments( saveAllEvents( events ) );\n         }\n-\n-        if ( StringUtils.isEmpty( rowSet.getString( \"ps_identifier\" ) ) )\n+        catch ( Exception e )\n         {\n-            throw new IllegalStateException(\n-                String.format( \"ProgramStage %s does not have a value assigned for idScheme %s\",\n-                    rowSet.getString( \"ps_uid\" ), idSchemes.getProgramStageIdScheme().name() ) );\n+            log.error( \"An error occurred saving a batch\", e );\n+            throw e;\n         }\n+    }\n \n-        if ( StringUtils.isEmpty( rowSet.getString( \"ou_identifier\" ) ) )\n+    @Override\n+    public void updateEvents( List<ProgramStageInstance> programStageInstances )\n+    {\n+        try\n         {\n-            throw new IllegalStateException(\n-                String.format( \"OrgUnit %s does not have a value assigned for idScheme %s\",\n-                    rowSet.getString( \"ou_uid\" ), idSchemes.getOrgUnitIdScheme().name() ) );\n+            jdbcTemplate.batchUpdate( UPDATE_EVENT_SQL, programStageInstances, programStageInstances.size(),\n+                ( ps, programStageInstance ) -> {\n+                    try\n+                    {\n+                        bindEventParamsForUpdate( ps, programStageInstance );\n+                    }\n+                    catch ( JsonProcessingException | SQLException e)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab"}, "originalPosition": 297}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MjA5NjAxOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNTowNTo0MVrOG4RPPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNTowNTo0MVrOG4RPPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1NTg3MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            || (params.getCategoryOptionCombo() == null && !isSuper( user ) && !userHasAccess( rowSet )) )\n          \n          \n            \n                            || ( params.getCategoryOptionCombo() == null && !isSuper( user ) && !userHasAccess( rowSet ) ) )", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461655870", "createdAt": "2020-07-28T15:05:41Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java", "diffHunk": "@@ -412,7 +484,8 @@ private void validateIdentifiersPresence( SqlRowSet rowSet, IdSchemes idSchemes,\n \n         while ( rowSet.next() )\n         {\n-            if ( rowSet.getString( \"psi_uid\" ) == null || ( params.getCategoryOptionCombo() == null && !isSuperUser && !userHasAccess( rowSet ) ) )\n+            if ( rowSet.getString( \"psi_uid\" ) == null\n+                || (params.getCategoryOptionCombo() == null && !isSuper( user ) && !userHasAccess( rowSet )) )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab"}, "originalPosition": 343}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MjA5ODY2OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNTowNjoxNFrOG4RQ2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNTowNjoxNFrOG4RQ2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1NjI4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if ( (params.getCategoryOptionCombo() == null || params.getCategoryOptionCombo().isDefault())\n          \n          \n            \n                    if ( ( params.getCategoryOptionCombo() == null || params.getCategoryOptionCombo().isDefault() )", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461656281", "createdAt": "2020-07-28T15:06:14Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java", "diffHunk": "@@ -698,25 +792,29 @@ private String getEventSelectQuery( EventSearchParams params, List<OrganisationU\n \n         SqlHelper hlp = new SqlHelper();\n \n-        StringBuilder sqlBuilder = new StringBuilder().append( \"select \" + getEventSelectIdentifiersByIdScheme( params.getIdSchemes() ) + \" psi.uid as psi_uid, \"\n+        StringBuilder sqlBuilder = new StringBuilder().append( \"select \"\n+            + getEventSelectIdentifiersByIdScheme( params.getIdSchemes() ) + \" psi.uid as psi_uid, \"\n             + \"ou.uid as ou_uid, p.uid as p_uid, ps.uid as ps_uid, coc.uid as coc_uid, \"\n             + \"psi.programstageinstanceid as psi_id, psi.status as psi_status, psi.executiondate as psi_executiondate, \"\n             + \"psi.eventdatavalues as psi_eventdatavalues, psi.duedate as psi_duedate, psi.completedby as psi_completedby, psi.storedby as psi_storedby, \"\n             + \"psi.created as psi_created, psi.lastupdated as psi_lastupdated, psi.completeddate as psi_completeddate, psi.deleted as psi_deleted, \"\n             + \"ST_AsText( psi.geometry ) as psi_geometry, au.uid as user_assigned, auc.username as user_assigned_username, \"\n             + \"cocco.categoryoptionid AS cocco_categoryoptionid, deco.uid AS deco_uid, \" );\n \n-        if ( (params.getCategoryOptionCombo() == null || params.getCategoryOptionCombo().isDefault()) && !isSuper( user ) )\n+        if ( (params.getCategoryOptionCombo() == null || params.getCategoryOptionCombo().isDefault())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab"}, "originalPosition": 473}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MjEwNjMzOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNTowNzo1NFrOG4RVhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNTowNzo1NFrOG4RVhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1NzQ3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        log.error(\"An error occurred saving a TrackedEntityComment\", e);\n          \n          \n            \n                        log.error( \"An error occurred saving a TrackedEntityComment\", e );", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461657478", "createdAt": "2020-07-28T15:07:54Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java", "diffHunk": "@@ -1289,32 +1420,335 @@ private String getOrderQuery( EventSearchParams params )\n \n     private String getAttributeValueQuery()\n     {\n-        String sql = \"select pav.trackedentityinstanceid as pav_id, pav.created as pav_created, pav.lastupdated as pav_lastupdated, \"\n+        return \"select pav.trackedentityinstanceid as pav_id, pav.created as pav_created, pav.lastupdated as pav_lastupdated, \"\n             + \"pav.value as pav_value, ta.uid as ta_uid, ta.name as ta_name, ta.valuetype as ta_valuetype \"\n             + \"from trackedentityattributevalue pav \"\n             + \"inner join trackedentityattribute ta on pav.trackedentityattributeid=ta.trackedentityattributeid \";\n-\n-        return sql;\n     }\n \n     private boolean isSuper( User user )\n     {\n         return user == null || user.isSuper();\n     }\n \n+    /**\n+     * Saves a list of {@see ProgramStageInstance} using JDBC batch update.\n+     *\n+     * Note that this method is using JdbcTemplate to execute the batch operation,\n+     * therefore it's able to participate in any Spring-initiated transaction\n+     *\n+     * @param batch the list of {@see ProgramStageInstance}\n+     * @return the list of created {@see ProgramStageInstance} with primary keys\n+     *         assigned\n+     *\n+     */\n+    private List<ProgramStageInstance> saveAllEvents( List<ProgramStageInstance> batch )\n+    {\n+        JdbcUtils.batchUpdateWithKeyHolder( jdbcTemplate, INSERT_EVENT_SQL,\n+                new BatchPreparedStatementSetterWithKeyHolder<ProgramStageInstance>( batch )\n+            {\n+                @Override\n+                protected void setValues( PreparedStatement ps, ProgramStageInstance event )\n+                {\n+                    try\n+                    {\n+                        bindEventParamsForInsert( ps, event );\n+                    }\n+                    catch ( JsonProcessingException | SQLException e )\n+                    {\n+                        log.warn( \"PSI failed to persist and will be ignored. PSI UID: \" + event.getUid(),\n+                            event.getUid(), e );\n+                    }\n+                }\n+\n+                @Override\n+                protected void setPrimaryKey( Map<String, Object> primaryKey, ProgramStageInstance event )\n+                {\n+                    event.setId( (Long) primaryKey.get( \"programstageinstanceid\" ) );\n+                }\n+\n+                } );\n+\n+        /*\n+         * Extract the primary keys from the created objects\n+         */\n+        List<Long> eventIds = batch.stream().map( BaseIdentifiableObject::getId ).collect( Collectors.toList() );\n+\n+        /*\n+         * Assign the generated event PKs to the batch.\n+         *\n+         * If the generate event PKs size doesn't match the batch size, one or more PSI\n+         * were not persisted. Run an additional query to fetch the persisted PSI and\n+         * return only the PSI from the batch which are persisted.\n+         *\n+         */\n+        if ( eventIds.size() != batch.size() )\n+        {\n+            /* a Map where [key] -> PSI UID , [value] -> PSI ID */\n+            Map<String, Long> persisted = jdbcTemplate\n+                    .queryForList(\n+                            \"SELECT uid, programstageinstanceid from programstageinstance where programstageinstanceid in ( \"\n+                                    + Joiner.on( \";\" ).join( eventIds ) + \")\" )\n+                    .stream().collect(\n+                            Collectors.toMap( s -> (String) s.get( \"uid\" ), s -> (Long) s.get( \"programstageinstanceid\" ) ) );\n+\n+            // @formatter:off\n+            return batch.stream()\n+                    .filter( psi -> persisted.containsKey( psi.getUid() ) )\n+                    .peek( psi -> psi.setId( persisted.get( psi.getUid() ) ) )\n+                    .collect( Collectors.toList() );\n+            // @formatter:on\n+        }\n+        else\n+        {\n+            for ( int i = 0; i < eventIds.size(); i++ )\n+            {\n+                batch.get( i ).setId( eventIds.get( i ) );\n+            }\n+            return batch;\n+        }\n+    }\n+\n+    /**\n+     * Save all the comments ({@see TrackedEntityComment} for the list of\n+     * {@see ProgramStageInstance}\n+     * \n+     * @param batch a List of {@see ProgramStageInstance}\n+     */\n+    private void saveAllComments( List<ProgramStageInstance> batch )\n+    {\n+        try\n+        {\n+            for ( ProgramStageInstance psi : batch )\n+            {\n+                int sortOrder = 1;\n+                if ( psi.getId() > 0 )\n+                {\n+                    // if the PSI is already in the db, fetch the latest sort order for the\n+                    // notes, to avoid conflicts\n+                    sortOrder = jdbcTemplate.queryForObject(\n+                        \"select coalesce(max(sort_order) + 1, 1) from programstageinstancecomments where programstageinstanceid = \"\n+                            + psi.getId(),\n+                        Integer.class );\n+                }\n+                List<TrackedEntityComment> comments = psi.getComments();\n+\n+                for ( TrackedEntityComment comment : comments )\n+                {\n+                    if ( !StringUtils.isEmpty( comment.getCommentText() ) )\n+                    {\n+                        Long commentId = saveComment( comment );\n+                        if ( commentId != null && commentId != 0 )\n+                        {\n+                            saveCommentToEvent( psi.getId(), commentId, sortOrder );\n+                            sortOrder++;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        catch ( DataAccessException dae )\n+        {\n+            log.error( \"An error occurred saving a Program Stage Instance comment\", dae );\n+            throw dae;\n+        }\n+    }\n+\n+    private Long saveComment( TrackedEntityComment comment )\n+    {\n+        KeyHolder keyHolder = new GeneratedKeyHolder();\n+\n+        try\n+        {\n+            jdbcTemplate.update( connection -> {\n+                PreparedStatement ps = connection.prepareStatement( INSERT_EVENT_NOTE_SQL, new String[]{\"trackedentitycommentid\"} );\n+\n+                ps.setString( 1, comment.getUid() );\n+                ps.setString( 2, comment.getCommentText() );\n+                ps.setTimestamp( 3, toTimestamp( comment.getCreated() ) );\n+                ps.setString( 4, comment.getCreator() );\n+                ps.setTimestamp( 5, toTimestamp( comment.getLastUpdated() ) );\n+\n+                return ps;\n+            }, keyHolder );\n+        }\n+        catch ( DataAccessException e )\n+        {\n+            log.error(\"An error occurred saving a TrackedEntityComment\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab"}, "originalPosition": 1191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MjExNDE2OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNTowOTo0OVrOG4Rakg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNTowOTo0OVrOG4Rakg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1ODc3MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    when( workContext.getTrackedEntityInstance( event.getUid() ) ).thenReturn( Optional.of(tei) );\n          \n          \n            \n                    when( workContext.getTrackedEntityInstance( event.getUid() ) ).thenReturn( Optional.of( tei ) );", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461658770", "createdAt": "2020-07-28T15:09:49Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package org.hisp.dhis.dxf2.events.importer.shared.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.hisp.dhis.DhisConvenienceTest.createOrganisationUnit;\n+import static org.hisp.dhis.DhisConvenienceTest.createProgram;\n+import static org.hisp.dhis.DhisConvenienceTest.createTrackedEntityInstance;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.events.importer.validation.BaseValidationTest;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.hisp.dhis.program.ProgramStatus;\n+import org.hisp.dhis.program.ProgramType;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.google.common.collect.Lists;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class ProgramInstanceCheckTest extends BaseValidationTest\n+{\n+    private ProgramInstanceCheck rule;\n+\n+    private Program program;\n+\n+    @Before\n+    public void setUp()\n+    {\n+        rule = new ProgramInstanceCheck();\n+\n+        //\n+        // Program\n+        //\n+        program = createProgram( 'P' );\n+        Map<String, Program> programMap = new HashMap<>();\n+        programMap.put( program.getUid(), program );\n+\n+        when( workContext.getProgramsMap() ).thenReturn( programMap );\n+\n+    }\n+\n+    @Test\n+    public void failOnNoProgramInstanceByActiveProgramAndTei()\n+    {\n+        // Data preparation\n+\n+        //\n+        // Program Instance\n+        //\n+        when( workContext.getProgramInstanceMap() ).thenReturn( new HashMap<>() );\n+\n+        //\n+        // Tracked Entity Instance\n+        //\n+        TrackedEntityInstance tei = createTrackedEntityInstance( createOrganisationUnit( 'A' ) );\n+        when( workContext.getTrackedEntityInstance( event.getUid() ) ).thenReturn( Optional.of(tei) );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MjExNTc5OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNToxMDoxMVrOG4Rbkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNToxMDoxMVrOG4Rbkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1OTAyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    when( workContext.getTrackedEntityInstance( event.getUid() ) ).thenReturn( Optional.of(tei) );\n          \n          \n            \n                    when( workContext.getTrackedEntityInstance( event.getUid() ) ).thenReturn( Optional.of( tei ) );", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461659026", "createdAt": "2020-07-28T15:10:11Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package org.hisp.dhis.dxf2.events.importer.shared.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.hisp.dhis.DhisConvenienceTest.createOrganisationUnit;\n+import static org.hisp.dhis.DhisConvenienceTest.createProgram;\n+import static org.hisp.dhis.DhisConvenienceTest.createTrackedEntityInstance;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.events.importer.validation.BaseValidationTest;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.hisp.dhis.program.ProgramStatus;\n+import org.hisp.dhis.program.ProgramType;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.google.common.collect.Lists;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class ProgramInstanceCheckTest extends BaseValidationTest\n+{\n+    private ProgramInstanceCheck rule;\n+\n+    private Program program;\n+\n+    @Before\n+    public void setUp()\n+    {\n+        rule = new ProgramInstanceCheck();\n+\n+        //\n+        // Program\n+        //\n+        program = createProgram( 'P' );\n+        Map<String, Program> programMap = new HashMap<>();\n+        programMap.put( program.getUid(), program );\n+\n+        when( workContext.getProgramsMap() ).thenReturn( programMap );\n+\n+    }\n+\n+    @Test\n+    public void failOnNoProgramInstanceByActiveProgramAndTei()\n+    {\n+        // Data preparation\n+\n+        //\n+        // Program Instance\n+        //\n+        when( workContext.getProgramInstanceMap() ).thenReturn( new HashMap<>() );\n+\n+        //\n+        // Tracked Entity Instance\n+        //\n+        TrackedEntityInstance tei = createTrackedEntityInstance( createOrganisationUnit( 'A' ) );\n+        when( workContext.getTrackedEntityInstance( event.getUid() ) ).thenReturn( Optional.of(tei) );\n+\n+        event.setProgram( program.getUid() );\n+\n+        //\n+        // Method under test\n+        //\n+        ImportSummary summary = rule.check( new ImmutableEvent( event ), workContext );\n+        assertHasError( summary, event,\n+            \"Tracked entity instance: \" + tei.getUid() + \" is not enrolled in program: \" + program.getUid() );\n+    }\n+\n+    @Test\n+    public void failOnMultipleProgramInstanceByActiveProgramAndTei()\n+    {\n+        // Data preparation\n+\n+        //\n+        // Program Instance\n+        //\n+        when( workContext.getProgramInstanceMap() ).thenReturn( new HashMap<>() );\n+\n+        //\n+        // Tracked Entity Instance\n+        //\n+        TrackedEntityInstance tei = createTrackedEntityInstance( createOrganisationUnit( 'A' ) );\n+        when( workContext.getTrackedEntityInstance( event.getUid() ) ).thenReturn( Optional.of(tei) );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTMyNTM0OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/SupplierUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjoxMzoyNFrOGqOAiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjoxMzoyNFrOGqOAiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyMjg4OQ==", "bodyText": "Some questions:\n\nShould the parent variable actually be called child?\nThe first ou is going to have itself as parent, is this correct?\nCould it be solved using reduce stream function and avoid iterating twice?", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r446922889", "createdAt": "2020-06-29T12:13:24Z", "author": {"login": "enricocolasante"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/SupplierUtils.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class SupplierUtils {\n+\n+    static OrganisationUnit getParentHierarchy(OrganisationUnit ou, String path )\n+    {\n+        if ( path.startsWith( \"/\" ) )\n+        {\n+            path = path.substring( 1 );\n+        }\n+        List<String> list = Arrays.asList( path.split( \"/\" ) );\n+        if ( list.size() == 1 && list.get( 0 ).equals( ou.getUid() ) )\n+        {\n+            return null;\n+        }\n+        Collections.reverse( list );\n+\n+        List<OrganisationUnit> ous = list.stream().filter( uid -> !uid.equals( ou.getUid() ) ).map( ouUid -> {\n+            OrganisationUnit o = new OrganisationUnit();\n+            o.setUid( ouUid );\n+            return o;\n+        } ).collect( Collectors.toList() );\n+        OrganisationUnit parent = ous.get( 0 );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTMzNzM1OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjoxNjozMFrOGqOHlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMTo1ODoyMFrOGri2-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyNDY5Mg==", "bodyText": "Copyright after imports?", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r446924692", "createdAt": "2020-06-29T12:16:30Z", "author": {"login": "enricocolasante"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.util.List;\n+\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.context.UidGenerator;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.google.common.collect.Lists;\n+\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMxMzA4MQ==", "bodyText": "fixed", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448313081", "createdAt": "2020-07-01T11:58:20Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.util.List;\n+\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.context.UidGenerator;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.google.common.collect.Lists;\n+\n+/*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyNDY5Mg=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTM0MTg4OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjoxNzo0OVrOGqOKWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNTo0MzowM1rOGrraTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyNTQwMQ==", "bodyText": "Maybe it is not so relevant, but it could be useful an assert to check that all the UID are different", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r446925401", "createdAt": "2020-06-29T12:17:49Z", "author": {"login": "enricocolasante"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.util.List;\n+\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.context.UidGenerator;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.google.common.collect.Lists;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class UidGeneratorTest\n+{\n+    private UidGenerator subject;\n+\n+    @Before\n+    public void setUp()\n+    {\n+        subject = new UidGenerator();\n+    }\n+\n+    @Test\n+    public void verifyEventsGetUidAssigned()\n+    {\n+        Event event1 = new Event();\n+        Event event2 = new Event();\n+        Event event3 = new Event();\n+        Event event4 = new Event();\n+        event4.setEvent( \"aaaaaaa\" );\n+\n+        List<Event> events = subject.assignUidToEvents( Lists.newArrayList( event1, event2, event3, event4 ) );\n+\n+        assertThat( events, hasSize( 4 ) );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ1MzE5Nw==", "bodyText": "Fixed, added check to verify that all events have different UID", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448453197", "createdAt": "2020-07-01T15:43:03Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.util.List;\n+\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.context.UidGenerator;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.google.common.collect.Lists;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class UidGeneratorTest\n+{\n+    private UidGenerator subject;\n+\n+    @Before\n+    public void setUp()\n+    {\n+        subject = new UidGenerator();\n+    }\n+\n+    @Test\n+    public void verifyEventsGetUidAssigned()\n+    {\n+        Event event1 = new Event();\n+        Event event2 = new Event();\n+        Event event3 = new Event();\n+        Event event4 = new Event();\n+        event4.setEvent( \"aaaaaaa\" );\n+\n+        List<Event> events = subject.assignUidToEvents( Lists.newArrayList( event1, event2, event3, event4 ) );\n+\n+        assertThat( events, hasSize( 4 ) );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyNTQwMQ=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTM2NzU3OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/persistence/DefaultEventPersistenceService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjoyNDo0MFrOGqOZvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMTo1ODo1NVrOGri4IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyOTM0MQ==", "bodyText": "Unused?", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r446929341", "createdAt": "2020-06-29T12:24:40Z", "author": {"login": "enricocolasante"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/persistence/DefaultEventPersistenceService.java", "diffHunk": "@@ -0,0 +1,193 @@\n+package org.hisp.dhis.dxf2.events.event.persistence;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static java.util.Collections.singletonList;\n+import static org.apache.commons.collections4.CollectionUtils.isNotEmpty;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.hisp.dhis.common.IdentifiableObjectManager;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.event.EventStore;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.mapper.ProgramStageInstanceMapper;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.user.User;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Service\n+@Slf4j\n+public class  DefaultEventPersistenceService\n+    implements\n+    EventPersistenceService\n+{\n+    private final EventStore jdbcEventStore;\n+\n+    private final IdentifiableObjectManager manager;\n+\n+    public DefaultEventPersistenceService( EventStore jdbcEventStore, IdentifiableObjectManager manager )\n+    {\n+        checkNotNull( jdbcEventStore );\n+        checkNotNull( manager );\n+\n+        this.jdbcEventStore = jdbcEventStore;\n+        this.manager = manager;\n+    }\n+\n+    @Override\n+    @Transactional\n+    public void save( WorkContext context, List<Event> events )\n+    {\n+        /*\n+         * Save Events, Notes and Data Values\n+         */\n+        ProgramStageInstanceMapper mapper = new ProgramStageInstanceMapper( context );\n+\n+        jdbcEventStore.saveEvents( events.stream().map( mapper::map ).collect( Collectors.toList() ) );\n+\n+        updateTeis( context, events );\n+    }\n+\n+    /**\n+     * Updates the list of given events using a single transaction.\n+     *\n+     * @param context a {@see WorkContext}\n+     * @param events a List of {@see Event}\n+     */\n+\n+    @Override\n+    @Transactional\n+    public void update( final WorkContext context, final List<Event> events ) {\n+\n+        if ( isNotEmpty( events ) )\n+        {\n+            final Map<Event, ProgramStageInstance> eventProgramStageInstanceMap = convertToProgramStageInstances(\n+                new ProgramStageInstanceMapper( context ), events );\n+\n+            jdbcEventStore.updateEvents( new ArrayList<>( eventProgramStageInstanceMap.values() ) );\n+\n+            updateTeis( context, events );\n+        }\n+    }\n+    \n+    private void updateTeis( final WorkContext context, final List<Event> events )\n+    {\n+        List<String> teiUidList = new ArrayList<>();\n+\n+        if ( !context.getImportOptions().isSkipLastUpdated() )\n+        {\n+            for ( Event event : events )\n+            {\n+                final Optional<TrackedEntityInstance> trackedEntityInstance = context\n+                    .getTrackedEntityInstance( event.getUid() );\n+\n+                trackedEntityInstance.ifPresent( t -> teiUidList.add( t.getUid() ) );\n+            }\n+\n+            jdbcEventStore.updateTrackedEntityInstances( teiUidList, context.getImportOptions().getUser() );\n+\n+        }\n+    }\n+\n+    /**\n+     * Deletes the list of events using a single transaction.\n+     *\n+     * @param context a {@see WorkContext}\n+     * @param events a List of {@see Event}\n+     */\n+    @Override\n+    @Transactional\n+    public void delete( final WorkContext context, final List<Event> events )\n+    {\n+        if ( isNotEmpty( events ) )\n+        {\n+            jdbcEventStore.delete( events );\n+        }\n+    }\n+\n+    /**\n+     * Deletes the event using a single transaction.\n+     *\n+     * @param context a {@see WorkContext}\n+     * @param event the event to delete {@see Event}\n+     */\n+    @Override\n+    @Transactional\n+    public void delete( final WorkContext context, final Event event )\n+    {\n+        if ( event != null )\n+        {\n+            jdbcEventStore.delete( singletonList( event ) );\n+        }\n+    }\n+\n+    private void updateTrackedEntityInstance( final TrackedEntityInstance tei, final User user )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMxMzM3Ng==", "bodyText": "fixed, method removed", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448313376", "createdAt": "2020-07-01T11:58:55Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/persistence/DefaultEventPersistenceService.java", "diffHunk": "@@ -0,0 +1,193 @@\n+package org.hisp.dhis.dxf2.events.event.persistence;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static java.util.Collections.singletonList;\n+import static org.apache.commons.collections4.CollectionUtils.isNotEmpty;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.hisp.dhis.common.IdentifiableObjectManager;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.event.EventStore;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.mapper.ProgramStageInstanceMapper;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.user.User;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Service\n+@Slf4j\n+public class  DefaultEventPersistenceService\n+    implements\n+    EventPersistenceService\n+{\n+    private final EventStore jdbcEventStore;\n+\n+    private final IdentifiableObjectManager manager;\n+\n+    public DefaultEventPersistenceService( EventStore jdbcEventStore, IdentifiableObjectManager manager )\n+    {\n+        checkNotNull( jdbcEventStore );\n+        checkNotNull( manager );\n+\n+        this.jdbcEventStore = jdbcEventStore;\n+        this.manager = manager;\n+    }\n+\n+    @Override\n+    @Transactional\n+    public void save( WorkContext context, List<Event> events )\n+    {\n+        /*\n+         * Save Events, Notes and Data Values\n+         */\n+        ProgramStageInstanceMapper mapper = new ProgramStageInstanceMapper( context );\n+\n+        jdbcEventStore.saveEvents( events.stream().map( mapper::map ).collect( Collectors.toList() ) );\n+\n+        updateTeis( context, events );\n+    }\n+\n+    /**\n+     * Updates the list of given events using a single transaction.\n+     *\n+     * @param context a {@see WorkContext}\n+     * @param events a List of {@see Event}\n+     */\n+\n+    @Override\n+    @Transactional\n+    public void update( final WorkContext context, final List<Event> events ) {\n+\n+        if ( isNotEmpty( events ) )\n+        {\n+            final Map<Event, ProgramStageInstance> eventProgramStageInstanceMap = convertToProgramStageInstances(\n+                new ProgramStageInstanceMapper( context ), events );\n+\n+            jdbcEventStore.updateEvents( new ArrayList<>( eventProgramStageInstanceMap.values() ) );\n+\n+            updateTeis( context, events );\n+        }\n+    }\n+    \n+    private void updateTeis( final WorkContext context, final List<Event> events )\n+    {\n+        List<String> teiUidList = new ArrayList<>();\n+\n+        if ( !context.getImportOptions().isSkipLastUpdated() )\n+        {\n+            for ( Event event : events )\n+            {\n+                final Optional<TrackedEntityInstance> trackedEntityInstance = context\n+                    .getTrackedEntityInstance( event.getUid() );\n+\n+                trackedEntityInstance.ifPresent( t -> teiUidList.add( t.getUid() ) );\n+            }\n+\n+            jdbcEventStore.updateTrackedEntityInstances( teiUidList, context.getImportOptions().getUser() );\n+\n+        }\n+    }\n+\n+    /**\n+     * Deletes the list of events using a single transaction.\n+     *\n+     * @param context a {@see WorkContext}\n+     * @param events a List of {@see Event}\n+     */\n+    @Override\n+    @Transactional\n+    public void delete( final WorkContext context, final List<Event> events )\n+    {\n+        if ( isNotEmpty( events ) )\n+        {\n+            jdbcEventStore.delete( events );\n+        }\n+    }\n+\n+    /**\n+     * Deletes the event using a single transaction.\n+     *\n+     * @param context a {@see WorkContext}\n+     * @param event the event to delete {@see Event}\n+     */\n+    @Override\n+    @Transactional\n+    public void delete( final WorkContext context, final Event event )\n+    {\n+        if ( event != null )\n+        {\n+            jdbcEventStore.delete( singletonList( event ) );\n+        }\n+    }\n+\n+    private void updateTrackedEntityInstance( final TrackedEntityInstance tei, final User user )", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyOTM0MQ=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTM3NTA5OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ServiceDelegatorSupplier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjoyNjozN1rOGqOeWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMTo1OToyOFrOGri5Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzMDUyMQ==", "bodyText": "Because of line 239 in DHISFormatter.xml this annotation shouldn't be needed anymore", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r446930521", "createdAt": "2020-06-29T12:26:37Z", "author": {"login": "enricocolasante"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ServiceDelegatorSupplier.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.util.function.Supplier;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.hisp.dhis.dxf2.events.importer.ServiceDelegator;\n+import org.hisp.dhis.program.ProgramInstanceStore;\n+import org.hisp.dhis.programrule.ProgramRuleVariableService;\n+import org.hisp.dhis.trackedentity.TrackerAccessManager;\n+import org.hisp.dhis.user.CurrentUserService;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.context.ApplicationEventPublisher;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Component( \"workContextServiceDelegatorSupplier\" )\n+public class ServiceDelegatorSupplier implements Supplier<ServiceDelegator>\n+{\n+    private final ProgramInstanceStore programInstanceStore;\n+\n+    private final TrackerAccessManager trackerAccessManager;\n+\n+    private final ApplicationEventPublisher applicationEventPublisher;\n+\n+    private final ProgramRuleVariableService programRuleVariableService;\n+\n+    private final CurrentUserService currentUserService;\n+\n+    private final ObjectMapper jsonMapper;\n+\n+    private final JdbcTemplate jdbcTemplate;\n+\n+    public ServiceDelegatorSupplier( ProgramInstanceStore programInstanceStore,\n+        TrackerAccessManager trackerAccessManager, ApplicationEventPublisher applicationEventPublisher,\n+        ProgramRuleVariableService programRuleVariableService, CurrentUserService currentUserService,\n+        ObjectMapper jsonMapper,\n+        @Qualifier( \"readOnlyJdbcTemplate\" ) JdbcTemplate jdbcTemplate)\n+    {\n+        this.programInstanceStore = programInstanceStore;\n+        this.trackerAccessManager = trackerAccessManager;\n+        this.applicationEventPublisher = applicationEventPublisher;\n+        this.programRuleVariableService = programRuleVariableService;\n+        this.currentUserService = currentUserService;\n+        this.jsonMapper =jsonMapper;\n+        this.jdbcTemplate = jdbcTemplate;\n+    }\n+\n+    @Override\n+    public ServiceDelegator get()\n+    {\n+        // @formatter:off", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMxMzY4Mw==", "bodyText": "Fixed, annotation removed", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448313683", "createdAt": "2020-07-01T11:59:28Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ServiceDelegatorSupplier.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.util.function.Supplier;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.hisp.dhis.dxf2.events.importer.ServiceDelegator;\n+import org.hisp.dhis.program.ProgramInstanceStore;\n+import org.hisp.dhis.programrule.ProgramRuleVariableService;\n+import org.hisp.dhis.trackedentity.TrackerAccessManager;\n+import org.hisp.dhis.user.CurrentUserService;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.context.ApplicationEventPublisher;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Component( \"workContextServiceDelegatorSupplier\" )\n+public class ServiceDelegatorSupplier implements Supplier<ServiceDelegator>\n+{\n+    private final ProgramInstanceStore programInstanceStore;\n+\n+    private final TrackerAccessManager trackerAccessManager;\n+\n+    private final ApplicationEventPublisher applicationEventPublisher;\n+\n+    private final ProgramRuleVariableService programRuleVariableService;\n+\n+    private final CurrentUserService currentUserService;\n+\n+    private final ObjectMapper jsonMapper;\n+\n+    private final JdbcTemplate jdbcTemplate;\n+\n+    public ServiceDelegatorSupplier( ProgramInstanceStore programInstanceStore,\n+        TrackerAccessManager trackerAccessManager, ApplicationEventPublisher applicationEventPublisher,\n+        ProgramRuleVariableService programRuleVariableService, CurrentUserService currentUserService,\n+        ObjectMapper jsonMapper,\n+        @Qualifier( \"readOnlyJdbcTemplate\" ) JdbcTemplate jdbcTemplate)\n+    {\n+        this.programInstanceStore = programInstanceStore;\n+        this.trackerAccessManager = trackerAccessManager;\n+        this.applicationEventPublisher = applicationEventPublisher;\n+        this.programRuleVariableService = programRuleVariableService;\n+        this.currentUserService = currentUserService;\n+        this.jsonMapper =jsonMapper;\n+        this.jdbcTemplate = jdbcTemplate;\n+    }\n+\n+    @Override\n+    public ServiceDelegator get()\n+    {\n+        // @formatter:off", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzMDUyMQ=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTM4MzAzOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/jdbc/batchhandler/DataValueBatchHandlerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjoyODozMVrOGqOjBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMjowOToxM1rOGrjMNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzMTcxOA==", "bodyText": "FIXME here", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r446931718", "createdAt": "2020-06-29T12:28:31Z", "author": {"login": "enricocolasante"}, "path": "dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/jdbc/batchhandler/DataValueBatchHandlerTest.java", "diffHunk": "@@ -153,6 +154,7 @@ public boolean emptyDatabaseAfterTest()\n     // -------------------------------------------------------------------------\n \n     @Test\n+    @Ignore // FIXME luciano - this test fails with a sql error after upgrading H2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMxODUxOQ==", "bodyText": "This seems to be a problem with the Quick framework. The framework generates the following invalid query:\ninsert into datavalue (dataelementid,periodid,sourceid,categoryoptioncomboid,attributeoptioncomboid,value,storedby,created,lastupdated,comment,followup,deleted) values (1,1,1,1,1,'10','StoredBy','2020-07-01T14:08:26','2020-07-01T14:08:26','Comment',false,false),\n\n(note the parenthesis at the end)", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448318519", "createdAt": "2020-07-01T12:09:13Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/jdbc/batchhandler/DataValueBatchHandlerTest.java", "diffHunk": "@@ -153,6 +154,7 @@ public boolean emptyDatabaseAfterTest()\n     // -------------------------------------------------------------------------\n \n     @Test\n+    @Ignore // FIXME luciano - this test fails with a sql error after upgrading H2", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzMTcxOA=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTM5ODU2OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/EventBaseCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjozMjowNlrOGqOr8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMjoxMDo0M1rOGrjPTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzNDAwMQ==", "bodyText": "remove this return", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r446934001", "createdAt": "2020-06-29T12:32:06Z", "author": {"login": "enricocolasante"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/EventBaseCheck.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package org.hisp.dhis.dxf2.events.importer.shared.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.hisp.dhis.dxf2.importsummary.ImportStatus.ERROR;\n+import static org.hisp.dhis.program.ProgramStatus.COMPLETED;\n+import static org.hisp.dhis.security.Authorities.F_EDIT_EXPIRED;\n+import static org.hisp.dhis.util.DateUtils.dateIsValid;\n+import static org.hisp.dhis.util.DateUtils.parseDate;\n+import static org.hisp.dhis.util.DateUtils.removeTimeStamp;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.importsummary.ImportConflict;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.program.ProgramInstance;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class EventBaseCheck\n+    implements\n+    Checker\n+{\n+    @Override\n+    public ImportSummary check( ImmutableEvent event, WorkContext ctx )\n+    {\n+        ImportSummary importSummary = new ImportSummary();\n+        List<String> errors = validate( event, ctx );\n+\n+        if ( !errors.isEmpty() )\n+        {\n+            importSummary.setStatus( ERROR );\n+            importSummary.getConflicts()\n+                .addAll( errors.stream().map( s -> new ImportConflict( \"Event\", s ) ).collect( Collectors.toList() ) );\n+            importSummary.incrementIgnored();\n+\n+            return importSummary;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMxOTMwOQ==", "bodyText": "Fixed, removed return", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448319309", "createdAt": "2020-07-01T12:10:43Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/EventBaseCheck.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package org.hisp.dhis.dxf2.events.importer.shared.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.hisp.dhis.dxf2.importsummary.ImportStatus.ERROR;\n+import static org.hisp.dhis.program.ProgramStatus.COMPLETED;\n+import static org.hisp.dhis.security.Authorities.F_EDIT_EXPIRED;\n+import static org.hisp.dhis.util.DateUtils.dateIsValid;\n+import static org.hisp.dhis.util.DateUtils.parseDate;\n+import static org.hisp.dhis.util.DateUtils.removeTimeStamp;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.importsummary.ImportConflict;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.program.ProgramInstance;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class EventBaseCheck\n+    implements\n+    Checker\n+{\n+    @Override\n+    public ImportSummary check( ImmutableEvent event, WorkContext ctx )\n+    {\n+        ImportSummary importSummary = new ImportSummary();\n+        List<String> errors = validate( event, ctx );\n+\n+        if ( !errors.isEmpty() )\n+        {\n+            importSummary.setStatus( ERROR );\n+            importSummary.getConflicts()\n+                .addAll( errors.stream().map( s -> new ImportConflict( \"Event\", s ) ).collect( Collectors.toList() ) );\n+            importSummary.incrementIgnored();\n+\n+            return importSummary;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzNDAwMQ=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTczNjMzOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/PublishEventPostProcessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzo0OTo0MlrOGqR32A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNzozNzo0OVrOGsA_bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk4NjIwMA==", "bodyText": "TODO?", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r446986200", "createdAt": "2020-06-29T13:49:42Z", "author": {"login": "enricocolasante"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/PublishEventPostProcessor.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.update.postprocess;\n+\n+import org.hisp.dhis.dataelement.DataElement;\n+import org.hisp.dhis.dxf2.events.event.DataValue;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.Processor;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.programrule.engine.DataValueUpdatedEvent;\n+\n+public class PublishEventPostProcessor\n+    implements\n+    Processor\n+{\n+\n+    @Override\n+    public void process( final Event event, final WorkContext ctx )\n+    {\n+        boolean isLinkedWithRuleVariable = false;\n+\n+        for ( final DataValue dv : event.getDataValues() )\n+        {\n+            final DataElement dataElement = ctx.getDataElementMap().get( dv.getDataElement() );\n+\n+            if ( dataElement != null )\n+            {\n+                // TODO: luciano preload the value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgwNjc2NA==", "bodyText": "Yes, this has to be finalized.", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448806764", "createdAt": "2020-07-02T07:37:49Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/PublishEventPostProcessor.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.update.postprocess;\n+\n+import org.hisp.dhis.dataelement.DataElement;\n+import org.hisp.dhis.dxf2.events.event.DataValue;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.Processor;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.programrule.engine.DataValueUpdatedEvent;\n+\n+public class PublishEventPostProcessor\n+    implements\n+    Processor\n+{\n+\n+    @Override\n+    public void process( final Event event, final WorkContext ctx )\n+    {\n+        boolean isLinkedWithRuleVariable = false;\n+\n+        for ( final DataValue dv : event.getDataValues() )\n+        {\n+            final DataElement dataElement = ctx.getDataElementMap().get( dv.getDataElement() );\n+\n+            if ( dataElement != null )\n+            {\n+                // TODO: luciano preload the value", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk4NjIwMA=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTg2MDE4OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMTo1Mzo0OVrOGq4zEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMTo1Mzo0OVrOGq4zEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYyMzk1Mg==", "bodyText": "If its null, perhaps we should throw an error stating that? Other assumptions might break if we think that there should always be a program instance?", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r447623952", "createdAt": "2020-06-30T11:53:49Z", "author": {"login": "Bekkalizer"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheck.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package org.hisp.dhis.dxf2.events.importer.shared.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.hisp.dhis.dxf2.importsummary.ImportSummary.error;\n+import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.hisp.dhis.common.BaseIdentifiableObject;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.hisp.dhis.program.ProgramStatus;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class ProgramInstanceCheck implements Checker\n+{\n+    @Override\n+    public ImportSummary check( ImmutableEvent event, WorkContext ctx )\n+    {\n+        Program program = ctx.getProgramsMap().get( event.getProgram() );\n+        ProgramInstance programInstance = ctx.getProgramInstanceMap().get( event.getUid() );\n+        final Optional<TrackedEntityInstance> trackedEntityInstance = ctx.getTrackedEntityInstance( event.getUid() );\n+\n+        String teiUid = \"\";\n+        if ( trackedEntityInstance.isPresent() )\n+        {\n+            teiUid = trackedEntityInstance.get().getUid();\n+        }\n+        \n+        List<ProgramInstance> programInstances;\n+\n+        if ( programInstance == null ) // Program Instance should be NOT null, after the pre-processing stage", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjQyMTUyOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzowNToyNlrOGrRZbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMjoxMToxMlrOGrjQQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAyNjk4OA==", "bodyText": "author header", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448026988", "createdAt": "2020-06-30T23:05:26Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer;\n+\n+import java.util.List;\n+\n+import org.apache.commons.logging.Log;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+\n+import static org.apache.commons.logging.LogFactory.getLog;\n+\n+public interface EventProcessing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMxOTU1Mg==", "bodyText": "Fixed", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448319552", "createdAt": "2020-07-01T12:11:12Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer;\n+\n+import java.util.List;\n+\n+import org.apache.commons.logging.Log;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+\n+import static org.apache.commons.logging.LogFactory.getLog;\n+\n+public interface EventProcessing", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAyNjk4OA=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjQyMjI4OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzowNTo0NFrOGrRZ5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMjoxMjo1NlrOGrjTRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAyNzExMQ==", "bodyText": "No @slf4j lombok ?", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448027111", "createdAt": "2020-06-30T23:05:44Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer;\n+\n+import java.util.List;\n+\n+import org.apache.commons.logging.Log;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+\n+import static org.apache.commons.logging.LogFactory.getLog;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMyMDMyNQ==", "bodyText": "@slf4j is not available on interfaces", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448320325", "createdAt": "2020-07-01T12:12:56Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer;\n+\n+import java.util.List;\n+\n+import org.apache.commons.logging.Log;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+\n+import static org.apache.commons.logging.LogFactory.getLog;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAyNzExMQ=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjQyNzEyOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzowODowOVrOGrRc7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMjoxMzoyN1rOGrjULg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAyNzg4Ng==", "bodyText": "no need for final keyword here? its already final", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448027886", "createdAt": "2020-06-30T23:08:09Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer;\n+\n+import java.util.List;\n+\n+import org.apache.commons.logging.Log;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+\n+import static org.apache.commons.logging.LogFactory.getLog;\n+\n+public interface EventProcessing\n+{\n+    void process( final WorkContext workContext, final List<Event> events );\n+\n+    Log log = getLog( EventProcessing.class );\n+\n+    class ProcessorRunner\n+    {\n+        private final WorkContext workContext;\n+\n+        private final List<Event> events;\n+\n+        public ProcessorRunner( final WorkContext workContext, final List<Event> events )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMyMDU1OA==", "bodyText": "Fixed, removed", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448320558", "createdAt": "2020-07-01T12:13:27Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer;\n+\n+import java.util.List;\n+\n+import org.apache.commons.logging.Log;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+\n+import static org.apache.commons.logging.LogFactory.getLog;\n+\n+public interface EventProcessing\n+{\n+    void process( final WorkContext workContext, final List<Event> events );\n+\n+    Log log = getLog( EventProcessing.class );\n+\n+    class ProcessorRunner\n+    {\n+        private final WorkContext workContext;\n+\n+        private final List<Event> events;\n+\n+        public ProcessorRunner( final WorkContext workContext, final List<Event> events )", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAyNzg4Ng=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjQyODMzOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzowODo0OFrOGrRdrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwODoyNTowMlrOGsCnNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAyODA3OA==", "bodyText": "How does this bubble up to the client?", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448028078", "createdAt": "2020-06-30T23:08:48Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer;\n+\n+import java.util.List;\n+\n+import org.apache.commons.logging.Log;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+\n+import static org.apache.commons.logging.LogFactory.getLog;\n+\n+public interface EventProcessing\n+{\n+    void process( final WorkContext workContext, final List<Event> events );\n+\n+    Log log = getLog( EventProcessing.class );\n+\n+    class ProcessorRunner\n+    {\n+        private final WorkContext workContext;\n+\n+        private final List<Event> events;\n+\n+        public ProcessorRunner( final WorkContext workContext, final List<Event> events )\n+        {\n+            this.workContext = workContext;\n+            this.events = events;\n+        }\n+\n+        public void run( final List<Class<? extends Processor>> processors )\n+        {\n+            for ( final Event event : events )\n+            {\n+                for ( Class<? extends Processor> processor : processors )\n+                {\n+                    try\n+                    {\n+                        final Processor pre = processor.newInstance();\n+                        pre.process( event, workContext );\n+                    }\n+                    catch ( InstantiationException | IllegalAccessException e )\n+                    {\n+                        log.error( \"An error occurred during Event import processing\", e );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM0NjA2Mw==", "bodyText": "Good point: it does not. This would be a pretty catastrophic exception, so I guess we can abort the entire process. Thoughts @mortenoh ?", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448346063", "createdAt": "2020-07-01T13:00:50Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer;\n+\n+import java.util.List;\n+\n+import org.apache.commons.logging.Log;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+\n+import static org.apache.commons.logging.LogFactory.getLog;\n+\n+public interface EventProcessing\n+{\n+    void process( final WorkContext workContext, final List<Event> events );\n+\n+    Log log = getLog( EventProcessing.class );\n+\n+    class ProcessorRunner\n+    {\n+        private final WorkContext workContext;\n+\n+        private final List<Event> events;\n+\n+        public ProcessorRunner( final WorkContext workContext, final List<Event> events )\n+        {\n+            this.workContext = workContext;\n+            this.events = events;\n+        }\n+\n+        public void run( final List<Class<? extends Processor>> processors )\n+        {\n+            for ( final Event event : events )\n+            {\n+                for ( Class<? extends Processor> processor : processors )\n+                {\n+                    try\n+                    {\n+                        final Processor pre = processor.newInstance();\n+                        pre.process( event, workContext );\n+                    }\n+                    catch ( InstantiationException | IllegalAccessException e )\n+                    {\n+                        log.error( \"An error occurred during Event import processing\", e );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAyODA3OA=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgzMzMzNQ==", "bodyText": "We can throw an exception and catch it in CrudControllerAdvice.", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448833335", "createdAt": "2020-07-02T08:25:02Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer;\n+\n+import java.util.List;\n+\n+import org.apache.commons.logging.Log;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+\n+import static org.apache.commons.logging.LogFactory.getLog;\n+\n+public interface EventProcessing\n+{\n+    void process( final WorkContext workContext, final List<Event> events );\n+\n+    Log log = getLog( EventProcessing.class );\n+\n+    class ProcessorRunner\n+    {\n+        private final WorkContext workContext;\n+\n+        private final List<Event> events;\n+\n+        public ProcessorRunner( final WorkContext workContext, final List<Event> events )\n+        {\n+            this.workContext = workContext;\n+            this.events = events;\n+        }\n+\n+        public void run( final List<Class<? extends Processor>> processors )\n+        {\n+            for ( final Event event : events )\n+            {\n+                for ( Class<? extends Processor> processor : processors )\n+                {\n+                    try\n+                    {\n+                        final Processor pre = processor.newInstance();\n+                        pre.process( event, workContext );\n+                    }\n+                    catch ( InstantiationException | IllegalAccessException e )\n+                    {\n+                        log.error( \"An error occurred during Event import processing\", e );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAyODA3OA=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjQ1MTc1OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/DataValueAclCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzoyMDoyOFrOGrRrng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMzowMToyNlrOGrk5Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzMTY0Ng==", "bodyText": "author header", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448031646", "createdAt": "2020-06-30T23:20:28Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/DataValueAclCheck.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package org.hisp.dhis.dxf2.events.importer.insert.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.hisp.dhis.dataelement.DataElement;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.importsummary.ImportConflict;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.eventdatavalue.EventDataValue;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.trackedentity.TrackerAccessManager;\n+import org.hisp.dhis.user.User;\n+\n+public class DataValueAclCheck implements Checker", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM0NjM5OQ==", "bodyText": "Fixed", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448346399", "createdAt": "2020-07-01T13:01:26Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/DataValueAclCheck.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package org.hisp.dhis.dxf2.events.importer.insert.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.hisp.dhis.dataelement.DataElement;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.importsummary.ImportConflict;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.eventdatavalue.EventDataValue;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.trackedentity.TrackerAccessManager;\n+import org.hisp.dhis.user.User;\n+\n+public class DataValueAclCheck implements Checker", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzMTY0Ng=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjQ1NDQ1OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/BaseEventAclCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzoyMTo1NFrOGrRtOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMzowNjowOFrOGrlDoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzMjA1Ng==", "bodyText": "newline", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448032056", "createdAt": "2020-06-30T23:21:54Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/BaseEventAclCheck.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package org.hisp.dhis.dxf2.events.importer.shared.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.util.List;\n+\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.importsummary.ImportConflict;\n+import org.hisp.dhis.dxf2.importsummary.ImportStatus;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.trackedentity.TrackerAccessManager;\n+import org.hisp.dhis.user.User;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public abstract class BaseEventAclCheck implements Checker\n+{\n+    public ImportSummary check( ImmutableEvent event, WorkContext ctx )\n+    {\n+        ImportOptions importOptions = ctx.getImportOptions();\n+\n+        ProgramStageInstance programStageInstance = prepareForAclValidation( ctx, event );\n+\n+        List<String> errors = checkAcl( ctx.getServiceDelegator().getTrackerAccessManager(), importOptions.getUser(),\n+            programStageInstance );\n+\n+        final ImportSummary importSummary = new ImportSummary();\n+\n+        if ( !errors.isEmpty() )\n+        {\n+            errors.forEach( error -> importSummary.getConflicts().add( new ImportConflict( event.getUid(), error ) ) );\n+\n+            importSummary.incrementIgnored();\n+            importSummary.setStatus( ImportStatus.ERROR );\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM0OTA4OQ==", "bodyText": "Fixed", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448349089", "createdAt": "2020-07-01T13:06:08Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/BaseEventAclCheck.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package org.hisp.dhis.dxf2.events.importer.shared.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.util.List;\n+\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.importsummary.ImportConflict;\n+import org.hisp.dhis.dxf2.importsummary.ImportStatus;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.trackedentity.TrackerAccessManager;\n+import org.hisp.dhis.user.User;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public abstract class BaseEventAclCheck implements Checker\n+{\n+    public ImportSummary check( ImmutableEvent event, WorkContext ctx )\n+    {\n+        ImportOptions importOptions = ctx.getImportOptions();\n+\n+        ProgramStageInstance programStageInstance = prepareForAclValidation( ctx, event );\n+\n+        List<String> errors = checkAcl( ctx.getServiceDelegator().getTrackerAccessManager(), importOptions.getUser(),\n+            programStageInstance );\n+\n+        final ImportSummary importSummary = new ImportSummary();\n+\n+        if ( !errors.isEmpty() )\n+        {\n+            errors.forEach( error -> importSummary.getConflicts().add( new ImportConflict( event.getUid(), error ) ) );\n+\n+            importSummary.incrementIgnored();\n+            importSummary.setStatus( ImportStatus.ERROR );\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzMjA1Ng=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjQ2OTgzOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/ProgramInstancePreProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzoyOTo0NVrOGrR2dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzoyOTo0NVrOGrR2dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNDQyMA==", "bodyText": "if programInstance == null, we should just return? same test in two logic tests", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448034420", "createdAt": "2020-06-30T23:29:45Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/ProgramInstancePreProcessor.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.insert.preprocess;\n+\n+import java.sql.ResultSet;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.Processor;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.hisp.dhis.program.ProgramInstanceStore;\n+import org.hisp.dhis.program.ProgramStatus;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+\n+/**\n+ * The goal of this Pre-processor is to assign a Program Instance (Enrollment)\n+ * to the Event getting processed. If the Program Instance can not be assigned,\n+ * the Event will not pass validation.\n+ *\n+ * @author Luciano Fiandesio\n+ */\n+public class ProgramInstancePreProcessor implements Processor\n+{\n+    @Override\n+    public void process( Event event, WorkContext ctx )\n+    {\n+        ProgramInstanceStore programInstanceStore = ctx.getServiceDelegator().getProgramInstanceStore();\n+\n+        Program program = ctx.getProgramsMap().get( event.getProgram() );\n+\n+        if ( program == null )\n+        {\n+            return; // Program is a mandatory value, it will be caught by the validation\n+        }\n+\n+        ProgramInstance programInstance = ctx.getProgramInstanceMap().get( event.getUid() );\n+        final Optional<TrackedEntityInstance> trackedEntityInstance = ctx.getTrackedEntityInstance( event.getUid() );\n+\n+        if ( program.isRegistration() && programInstance == null )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjQ3MTYyOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzozMDo0MFrOGrR3lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMzowMjo0MFrOGrk8Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNDcxMQ==", "bodyText": "license order issue, should be before import", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448034711", "createdAt": "2020-06-30T23:30:40Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java", "diffHunk": "@@ -0,0 +1,154 @@\n+package org.hisp.dhis.dxf2.events.importer.insert.validation;\n+\n+import static org.hisp.dhis.DhisConvenienceTest.createOrganisationUnit;\n+import static org.hisp.dhis.DhisConvenienceTest.createProgram;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.commons.lang3.RandomUtils;\n+import org.hisp.dhis.common.CodeGenerator;\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.events.importer.validation.BaseValidationTest;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.testcontainers.shaded.org.apache.commons.lang.RandomStringUtils;\n+\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM0NzE4Ng==", "bodyText": "Fixed", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448347186", "createdAt": "2020-07-01T13:02:40Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java", "diffHunk": "@@ -0,0 +1,154 @@\n+package org.hisp.dhis.dxf2.events.importer.insert.validation;\n+\n+import static org.hisp.dhis.DhisConvenienceTest.createOrganisationUnit;\n+import static org.hisp.dhis.DhisConvenienceTest.createProgram;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.commons.lang3.RandomUtils;\n+import org.hisp.dhis.common.CodeGenerator;\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.events.importer.validation.BaseValidationTest;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.testcontainers.shaded.org.apache.commons.lang.RandomStringUtils;\n+\n+/*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNDcxMQ=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjQ3MjAyOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzozMDo0OVrOGrR3zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMzowMzoxMVrOGrk9aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNDc2NA==", "bodyText": "author header", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448034764", "createdAt": "2020-06-30T23:30:49Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java", "diffHunk": "@@ -0,0 +1,154 @@\n+package org.hisp.dhis.dxf2.events.importer.insert.validation;\n+\n+import static org.hisp.dhis.DhisConvenienceTest.createOrganisationUnit;\n+import static org.hisp.dhis.DhisConvenienceTest.createProgram;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.commons.lang3.RandomUtils;\n+import org.hisp.dhis.common.CodeGenerator;\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.events.importer.validation.BaseValidationTest;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.testcontainers.shaded.org.apache.commons.lang.RandomStringUtils;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+public class ProgramOrgUnitCheckTest extends BaseValidationTest", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM0NzQ5Ng==", "bodyText": "Fixed", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448347496", "createdAt": "2020-07-01T13:03:11Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java", "diffHunk": "@@ -0,0 +1,154 @@\n+package org.hisp.dhis.dxf2.events.importer.insert.validation;\n+\n+import static org.hisp.dhis.DhisConvenienceTest.createOrganisationUnit;\n+import static org.hisp.dhis.DhisConvenienceTest.createProgram;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.commons.lang3.RandomUtils;\n+import org.hisp.dhis.common.CodeGenerator;\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.events.importer.validation.BaseValidationTest;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.testcontainers.shaded.org.apache.commons.lang.RandomStringUtils;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+public class ProgramOrgUnitCheckTest extends BaseValidationTest", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNDc2NA=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjQ3MjY1OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzozMTowOFrOGrR4Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDoxODo1NFrOGrn8Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNDg2Mw==", "bodyText": "newline", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448034863", "createdAt": "2020-06-30T23:31:08Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java", "diffHunk": "@@ -0,0 +1,154 @@\n+package org.hisp.dhis.dxf2.events.importer.insert.validation;\n+\n+import static org.hisp.dhis.DhisConvenienceTest.createOrganisationUnit;\n+import static org.hisp.dhis.DhisConvenienceTest.createProgram;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.commons.lang3.RandomUtils;\n+import org.hisp.dhis.common.CodeGenerator;\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.events.importer.validation.BaseValidationTest;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.testcontainers.shaded.org.apache.commons.lang.RandomStringUtils;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+public class ProgramOrgUnitCheckTest extends BaseValidationTest\n+{\n+    private ProgramOrgUnitCheck rule;\n+\n+    @Before\n+    public void setUp()\n+    {\n+        rule = new ProgramOrgUnitCheck();\n+    }\n+\n+    @Test\n+    public void verifySuccessWhenProgramHasOrgUnitMatchingEventOrgUnit()\n+    {\n+        verifySuccessWhenProgramHasOrgUnitMatchingEventOrgUnit( \"ABCDE\", IdScheme.CODE );\n+        verifySuccessWhenProgramHasOrgUnitMatchingEventOrgUnit( CodeGenerator.generateUid(), IdScheme.UID );\n+        verifySuccessWhenProgramHasOrgUnitMatchingEventOrgUnit( \"100\", IdScheme.ID );\n+    }\n+\n+    private void verifySuccessWhenProgramHasOrgUnitMatchingEventOrgUnit( String orgUnitId, IdScheme scheme )\n+    {\n+        // assign a UID to the event's org unit\n+        event.setOrgUnit( orgUnitId );\n+\n+        // Prepare data\n+        Program program = createProgram( 'P' );\n+        // make sure that one of the generate Org Units, has the event's UID\n+        program.setOrganisationUnits( create( 5, event.getOrgUnit(), IdScheme.CODE ) );\n+        ProgramInstance pi = new ProgramInstance();\n+        pi.setProgram( program );\n+\n+        Map<String, ProgramInstance> programInstanceMap = new HashMap<>();\n+        programInstanceMap.put( event.getUid(), pi );\n+\n+        ImportOptions importOptions = ImportOptions.getDefaultImportOptions();\n+        importOptions.setOrgUnitIdScheme( IdScheme.CODE.name() );\n+\n+        when( workContext.getImportOptions() ).thenReturn( importOptions );\n+        when( workContext.getProgramInstanceMap() ).thenReturn( programInstanceMap );\n+\n+        // method under test\n+        ImportSummary summary = rule.check( new ImmutableEvent( event ), workContext );\n+\n+        assertNoError( summary );\n+    }\n+\n+    @Test\n+    public void failWhenProgramHasNoOrgUnitMatchingEventOrgUnit()\n+    {\n+        // assign a UID to the event's org unit\n+        event.setOrgUnit( CodeGenerator.generateUid() );\n+\n+        // Prepare data\n+        Program program = createProgram( 'P' );\n+        // make sure that one of the generate Org Units, has the event's UID\n+        program.setOrganisationUnits( create( 5, CodeGenerator.generateUid(), IdScheme.UID ) );\n+        ProgramInstance pi = new ProgramInstance();\n+        pi.setProgram( program );\n+\n+        Map<String, ProgramInstance> programInstanceMap = new HashMap<>();\n+        programInstanceMap.put( event.getUid(), pi );\n+\n+        ImportOptions importOptions = ImportOptions.getDefaultImportOptions();\n+\n+        when( workContext.getImportOptions() ).thenReturn( importOptions );\n+        when( workContext.getProgramInstanceMap() ).thenReturn( programInstanceMap );\n+\n+        // method under test\n+        ImportSummary summary = rule.check( new ImmutableEvent( event ), workContext );\n+\n+        assertHasError( summary, event, \"Program is not assigned to this organisation unit: \" + event.getOrgUnit() );\n+    }\n+\n+    private Set<OrganisationUnit> create( int size, String orgUnit, IdScheme idScheme )\n+    {\n+        Set<OrganisationUnit> result = new HashSet<>();\n+        int rnd = RandomUtils.nextInt( 1, 5 );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM5NjMzOA==", "bodyText": "Fixed", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448396338", "createdAt": "2020-07-01T14:18:54Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java", "diffHunk": "@@ -0,0 +1,154 @@\n+package org.hisp.dhis.dxf2.events.importer.insert.validation;\n+\n+import static org.hisp.dhis.DhisConvenienceTest.createOrganisationUnit;\n+import static org.hisp.dhis.DhisConvenienceTest.createProgram;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.commons.lang3.RandomUtils;\n+import org.hisp.dhis.common.CodeGenerator;\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.events.importer.validation.BaseValidationTest;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.testcontainers.shaded.org.apache.commons.lang.RandomStringUtils;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+public class ProgramOrgUnitCheckTest extends BaseValidationTest\n+{\n+    private ProgramOrgUnitCheck rule;\n+\n+    @Before\n+    public void setUp()\n+    {\n+        rule = new ProgramOrgUnitCheck();\n+    }\n+\n+    @Test\n+    public void verifySuccessWhenProgramHasOrgUnitMatchingEventOrgUnit()\n+    {\n+        verifySuccessWhenProgramHasOrgUnitMatchingEventOrgUnit( \"ABCDE\", IdScheme.CODE );\n+        verifySuccessWhenProgramHasOrgUnitMatchingEventOrgUnit( CodeGenerator.generateUid(), IdScheme.UID );\n+        verifySuccessWhenProgramHasOrgUnitMatchingEventOrgUnit( \"100\", IdScheme.ID );\n+    }\n+\n+    private void verifySuccessWhenProgramHasOrgUnitMatchingEventOrgUnit( String orgUnitId, IdScheme scheme )\n+    {\n+        // assign a UID to the event's org unit\n+        event.setOrgUnit( orgUnitId );\n+\n+        // Prepare data\n+        Program program = createProgram( 'P' );\n+        // make sure that one of the generate Org Units, has the event's UID\n+        program.setOrganisationUnits( create( 5, event.getOrgUnit(), IdScheme.CODE ) );\n+        ProgramInstance pi = new ProgramInstance();\n+        pi.setProgram( program );\n+\n+        Map<String, ProgramInstance> programInstanceMap = new HashMap<>();\n+        programInstanceMap.put( event.getUid(), pi );\n+\n+        ImportOptions importOptions = ImportOptions.getDefaultImportOptions();\n+        importOptions.setOrgUnitIdScheme( IdScheme.CODE.name() );\n+\n+        when( workContext.getImportOptions() ).thenReturn( importOptions );\n+        when( workContext.getProgramInstanceMap() ).thenReturn( programInstanceMap );\n+\n+        // method under test\n+        ImportSummary summary = rule.check( new ImmutableEvent( event ), workContext );\n+\n+        assertNoError( summary );\n+    }\n+\n+    @Test\n+    public void failWhenProgramHasNoOrgUnitMatchingEventOrgUnit()\n+    {\n+        // assign a UID to the event's org unit\n+        event.setOrgUnit( CodeGenerator.generateUid() );\n+\n+        // Prepare data\n+        Program program = createProgram( 'P' );\n+        // make sure that one of the generate Org Units, has the event's UID\n+        program.setOrganisationUnits( create( 5, CodeGenerator.generateUid(), IdScheme.UID ) );\n+        ProgramInstance pi = new ProgramInstance();\n+        pi.setProgram( program );\n+\n+        Map<String, ProgramInstance> programInstanceMap = new HashMap<>();\n+        programInstanceMap.put( event.getUid(), pi );\n+\n+        ImportOptions importOptions = ImportOptions.getDefaultImportOptions();\n+\n+        when( workContext.getImportOptions() ).thenReturn( importOptions );\n+        when( workContext.getProgramInstanceMap() ).thenReturn( programInstanceMap );\n+\n+        // method under test\n+        ImportSummary summary = rule.check( new ImmutableEvent( event ), workContext );\n+\n+        assertHasError( summary, event, \"Program is not assigned to this organisation unit: \" + event.getOrgUnit() );\n+    }\n+\n+    private Set<OrganisationUnit> create( int size, String orgUnit, IdScheme idScheme )\n+    {\n+        Set<OrganisationUnit> result = new HashSet<>();\n+        int rnd = RandomUtils.nextInt( 1, 5 );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNDg2Mw=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjQ3MzI2OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheckTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzozMToyOVrOGrR4jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDoxOToyMlrOGrn9gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNDk1OA==", "bodyText": "license order, before imports", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448034958", "createdAt": "2020-06-30T23:31:29Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheckTest.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package org.hisp.dhis.dxf2.events.importer.shared.validation;\n+\n+import static org.mockito.Mockito.when;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.hisp.dhis.category.CategoryOption;\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.common.IllegalQueryException;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.events.importer.validation.BaseValidationTest;\n+import org.hisp.dhis.util.DateUtils;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM5NjY3Mg==", "bodyText": "Fixed", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448396672", "createdAt": "2020-07-01T14:19:22Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheckTest.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package org.hisp.dhis.dxf2.events.importer.shared.validation;\n+\n+import static org.mockito.Mockito.when;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.hisp.dhis.category.CategoryOption;\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.common.IllegalQueryException;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.events.importer.validation.BaseValidationTest;\n+import org.hisp.dhis.util.DateUtils;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+/*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNDk1OA=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjQ3NDcxOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/event/mapper/RequestToSearchParamsMapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzozMjowOVrOGrR5bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDoyMDoxOFrOGroATQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNTE4Mg==", "bodyText": "newline", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448035182", "createdAt": "2020-06-30T23:32:09Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/event/mapper/RequestToSearchParamsMapper.java", "diffHunk": "@@ -0,0 +1,266 @@\n+package org.hisp.dhis.webapi.controller.event.mapper;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.common.AssignedUserSelectionMode;\n+import org.hisp.dhis.common.DimensionalObject;\n+import org.hisp.dhis.common.IdSchemes;\n+import org.hisp.dhis.common.IllegalQueryException;\n+import org.hisp.dhis.common.OrganisationUnitSelectionMode;\n+import org.hisp.dhis.common.QueryFilter;\n+import org.hisp.dhis.common.QueryItem;\n+import org.hisp.dhis.common.QueryOperator;\n+import org.hisp.dhis.dataelement.DataElement;\n+import org.hisp.dhis.dataelement.DataElementService;\n+import org.hisp.dhis.dxf2.events.event.EventSearchParams;\n+import org.hisp.dhis.event.EventStatus;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.organisationunit.OrganisationUnitService;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramService;\n+import org.hisp.dhis.program.ProgramStage;\n+import org.hisp.dhis.program.ProgramStageService;\n+import org.hisp.dhis.program.ProgramStatus;\n+import org.hisp.dhis.query.Order;\n+import org.hisp.dhis.security.acl.AclService;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstanceService;\n+import org.hisp.dhis.user.CurrentUserService;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.user.UserCredentials;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Component\n+public class RequestToSearchParamsMapper\n+{\n+    private final CurrentUserService currentUserService;\n+\n+    private final ProgramService programService;\n+\n+    private final OrganisationUnitService organisationUnitService;\n+\n+    private final ProgramStageService programStageService;\n+\n+    private final AclService aclService;\n+\n+    private final TrackedEntityInstanceService entityInstanceService;\n+\n+    private final DataElementService dataElementService;\n+\n+    public RequestToSearchParamsMapper( CurrentUserService currentUserService, ProgramService programService,\n+        OrganisationUnitService organisationUnitService, ProgramStageService programStageService, AclService aclService,\n+        TrackedEntityInstanceService entityInstanceService, DataElementService dataElementService )\n+    {\n+        checkNotNull( currentUserService );\n+        checkNotNull( programService );\n+        checkNotNull( organisationUnitService );\n+        checkNotNull( programStageService );\n+        checkNotNull( aclService );\n+        checkNotNull( entityInstanceService );\n+        checkNotNull( dataElementService );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM5NzM4OQ==", "bodyText": "I guess newline means add a new line between checkNotNull and the dependency setting. Fixed", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448397389", "createdAt": "2020-07-01T14:20:18Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/event/mapper/RequestToSearchParamsMapper.java", "diffHunk": "@@ -0,0 +1,266 @@\n+package org.hisp.dhis.webapi.controller.event.mapper;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.common.AssignedUserSelectionMode;\n+import org.hisp.dhis.common.DimensionalObject;\n+import org.hisp.dhis.common.IdSchemes;\n+import org.hisp.dhis.common.IllegalQueryException;\n+import org.hisp.dhis.common.OrganisationUnitSelectionMode;\n+import org.hisp.dhis.common.QueryFilter;\n+import org.hisp.dhis.common.QueryItem;\n+import org.hisp.dhis.common.QueryOperator;\n+import org.hisp.dhis.dataelement.DataElement;\n+import org.hisp.dhis.dataelement.DataElementService;\n+import org.hisp.dhis.dxf2.events.event.EventSearchParams;\n+import org.hisp.dhis.event.EventStatus;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.organisationunit.OrganisationUnitService;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramService;\n+import org.hisp.dhis.program.ProgramStage;\n+import org.hisp.dhis.program.ProgramStageService;\n+import org.hisp.dhis.program.ProgramStatus;\n+import org.hisp.dhis.query.Order;\n+import org.hisp.dhis.security.acl.AclService;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstanceService;\n+import org.hisp.dhis.user.CurrentUserService;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.user.UserCredentials;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Component\n+public class RequestToSearchParamsMapper\n+{\n+    private final CurrentUserService currentUserService;\n+\n+    private final ProgramService programService;\n+\n+    private final OrganisationUnitService organisationUnitService;\n+\n+    private final ProgramStageService programStageService;\n+\n+    private final AclService aclService;\n+\n+    private final TrackedEntityInstanceService entityInstanceService;\n+\n+    private final DataElementService dataElementService;\n+\n+    public RequestToSearchParamsMapper( CurrentUserService currentUserService, ProgramService programService,\n+        OrganisationUnitService organisationUnitService, ProgramStageService programStageService, AclService aclService,\n+        TrackedEntityInstanceService entityInstanceService, DataElementService dataElementService )\n+    {\n+        checkNotNull( currentUserService );\n+        checkNotNull( programService );\n+        checkNotNull( organisationUnitService );\n+        checkNotNull( programStageService );\n+        checkNotNull( aclService );\n+        checkNotNull( entityInstanceService );\n+        checkNotNull( dataElementService );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNTE4Mg=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjQ3ODgxOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzozNDoxOFrOGrR8BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDoyMDozMlrOGroA_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNTg0NA==", "bodyText": "author header", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448035844", "createdAt": "2020-06-30T23:34:18Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.update.postprocess;\n+\n+import static org.hisp.dhis.event.EventStatus.SCHEDULE;\n+\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.Processor;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.program.notification.event.ProgramStageCompletionNotificationEvent;\n+import org.hisp.dhis.programrule.engine.StageCompletionEvaluationEvent;\n+import org.hisp.dhis.programrule.engine.StageScheduledEvaluationEvent;\n+import org.springframework.context.ApplicationEventPublisher;\n+\n+public class ProgramNotificationPostProcessor", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM5NzU2NQ==", "bodyText": "Fixed", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448397565", "createdAt": "2020-07-01T14:20:32Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.update.postprocess;\n+\n+import static org.hisp.dhis.event.EventStatus.SCHEDULE;\n+\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.Processor;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.program.notification.event.ProgramStageCompletionNotificationEvent;\n+import org.hisp.dhis.programrule.engine.StageCompletionEvaluationEvent;\n+import org.hisp.dhis.programrule.engine.StageScheduledEvaluationEvent;\n+import org.springframework.context.ApplicationEventPublisher;\n+\n+public class ProgramNotificationPostProcessor", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNTg0NA=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjQ3OTU4OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzozNDozOFrOGrR8dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDoyMDo1N1rOGroCFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNTk1Nw==", "bodyText": "codestyle, too many newlines for implements and interface", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448035957", "createdAt": "2020-06-30T23:34:38Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.update.postprocess;\n+\n+import static org.hisp.dhis.event.EventStatus.SCHEDULE;\n+\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.Processor;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.program.notification.event.ProgramStageCompletionNotificationEvent;\n+import org.hisp.dhis.programrule.engine.StageCompletionEvaluationEvent;\n+import org.hisp.dhis.programrule.engine.StageScheduledEvaluationEvent;\n+import org.springframework.context.ApplicationEventPublisher;\n+\n+public class ProgramNotificationPostProcessor\n+    implements", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM5Nzg0NQ==", "bodyText": "Fixed", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448397845", "createdAt": "2020-07-01T14:20:57Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.update.postprocess;\n+\n+import static org.hisp.dhis.event.EventStatus.SCHEDULE;\n+\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.Processor;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.program.notification.event.ProgramStageCompletionNotificationEvent;\n+import org.hisp.dhis.programrule.engine.StageCompletionEvaluationEvent;\n+import org.hisp.dhis.programrule.engine.StageScheduledEvaluationEvent;\n+import org.springframework.context.ApplicationEventPublisher;\n+\n+public class ProgramNotificationPostProcessor\n+    implements", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNTk1Nw=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjQ3OTg2OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzozNDo0NVrOGrR8nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDoyMTowN1rOGroCew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNTk5OQ==", "bodyText": "remove newline", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448035999", "createdAt": "2020-06-30T23:34:45Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.update.postprocess;\n+\n+import static org.hisp.dhis.event.EventStatus.SCHEDULE;\n+\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.Processor;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.program.notification.event.ProgramStageCompletionNotificationEvent;\n+import org.hisp.dhis.programrule.engine.StageCompletionEvaluationEvent;\n+import org.hisp.dhis.programrule.engine.StageScheduledEvaluationEvent;\n+import org.springframework.context.ApplicationEventPublisher;\n+\n+public class ProgramNotificationPostProcessor\n+    implements\n+    Processor\n+{\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM5Nzk0Nw==", "bodyText": "Fixed", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448397947", "createdAt": "2020-07-01T14:21:07Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.update.postprocess;\n+\n+import static org.hisp.dhis.event.EventStatus.SCHEDULE;\n+\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.Processor;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.program.notification.event.ProgramStageCompletionNotificationEvent;\n+import org.hisp.dhis.programrule.engine.StageCompletionEvaluationEvent;\n+import org.hisp.dhis.programrule.engine.StageScheduledEvaluationEvent;\n+import org.springframework.context.ApplicationEventPublisher;\n+\n+public class ProgramNotificationPostProcessor\n+    implements\n+    Processor\n+{\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNTk5OQ=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjQ4MTg4OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzozNToyOFrOGrR9uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzozNToyOFrOGrR9uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNjI4MQ==", "bodyText": "Why not if ( ctx.getImportOptions().isSkipNotifications() ) { return }, less indentation", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448036281", "createdAt": "2020-06-30T23:35:28Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.update.postprocess;\n+\n+import static org.hisp.dhis.event.EventStatus.SCHEDULE;\n+\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.Processor;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.program.notification.event.ProgramStageCompletionNotificationEvent;\n+import org.hisp.dhis.programrule.engine.StageCompletionEvaluationEvent;\n+import org.hisp.dhis.programrule.engine.StageScheduledEvaluationEvent;\n+import org.springframework.context.ApplicationEventPublisher;\n+\n+public class ProgramNotificationPostProcessor\n+    implements\n+    Processor\n+{\n+\n+    @Override\n+    public void process( final Event event, final WorkContext ctx )\n+    {\n+        if ( !ctx.getImportOptions().isSkipNotifications() )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjQ4NDU2OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzozNjo1M1rOGrR_Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNzo0MjoyNVrOGsBI9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNjY4Ng==", "bodyText": "package before license", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448036686", "createdAt": "2020-06-30T23:36:53Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgwOTIwNg==", "bodyText": "Fixed", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448809206", "createdAt": "2020-07-02T07:42:25Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNjY4Ng=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjQ4NDk0OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzozNzowNFrOGrR_hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzozNzowNFrOGrR_hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNjc0MA==", "bodyText": "newline", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448036740", "createdAt": "2020-06-30T23:37:04Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.utils;\n+\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonObject;\n+import org.hisp.dhis.Constants;\n+\n+/**\n+ * @author Gintare Vilkelyte <vilkelyte.gintare@gmail.com>\n+ */\n+public class JsonObjectBuilder\n+{\n+    private JsonObject jsonObject;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjQ4NTU4OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzozNzoyM1rOGrR_4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNzo0NDowN1rOGsBMaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNjgzNQ==", "bodyText": "do we need to use gson here? we already depend on jackson...", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448036835", "createdAt": "2020-06-30T23:37:23Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.utils;\n+\n+import com.google.gson.JsonArray;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgxMDA4OQ==", "bodyText": "This is the API end to end project, not dhis2 \"proper\".", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448810089", "createdAt": "2020-07-02T07:44:07Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.utils;\n+\n+import com.google.gson.JsonArray;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNjgzNQ=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjQ4NjQ4OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/IdSchemeUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzozNzo0NlrOGrSAXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDoyMjo0N1rOGroG4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNjk1OQ==", "bodyText": "author header", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448036959", "createdAt": "2020-06-30T23:37:46Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/IdSchemeUtils.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.common.IdentifiableProperty;\n+\n+public class IdSchemeUtils", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM5OTA3NQ==", "bodyText": "Fixed", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448399075", "createdAt": "2020-07-01T14:22:47Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/IdSchemeUtils.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.common.IdentifiableProperty;\n+\n+public class IdSchemeUtils", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNjk1OQ=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjQ4NjczOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/IdSchemeUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzozNzo1NFrOGrSAgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDoyMzoyOFrOGroIiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNjk5NQ==", "bodyText": "newline", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448036995", "createdAt": "2020-06-30T23:37:54Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/IdSchemeUtils.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.common.IdentifiableProperty;\n+\n+public class IdSchemeUtils\n+{\n+    public static String getKey( IdScheme scheme, ResultSet rs )\n+        throws SQLException\n+    {\n+        Object id = rs.getObject( getColumnNameByScheme( scheme ) );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM5OTQ5OQ==", "bodyText": "Not sure if I need to add or remove a newline :)", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448399499", "createdAt": "2020-07-01T14:23:28Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/IdSchemeUtils.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.common.IdentifiableProperty;\n+\n+public class IdSchemeUtils\n+{\n+    public static String getKey( IdScheme scheme, ResultSet rs )\n+        throws SQLException\n+    {\n+        Object id = rs.getObject( getColumnNameByScheme( scheme ) );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNjk5NQ=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjQ4ODE2OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzozODozN1rOGrSBXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDoyNDoxOFrOGroKpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNzIxMg==", "bodyText": "package before license", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448037212", "createdAt": "2020-06-30T23:38:37Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.insert.validation;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwMDAzNg==", "bodyText": "Fixed", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448400036", "createdAt": "2020-07-01T14:24:18Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.insert.validation;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNzIxMg=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjQ4ODU5OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzozODo1MFrOGrSBkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDoyNDozM1rOGroLTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNzI2Nw==", "bodyText": "newline", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448037267", "createdAt": "2020-06-30T23:38:50Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.insert.validation;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.importsummary.ImportConflict;\n+import org.hisp.dhis.dxf2.importsummary.ImportStatus;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.trackedentity.TrackerAccessManager;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class AttributeOptionComboAclCheck\n+    implements\n+    Checker\n+{\n+    @Override\n+    public ImportSummary check(ImmutableEvent event, WorkContext ctx )\n+    {\n+        ImportSummary importSummary = new ImportSummary();\n+        TrackerAccessManager trackerAccessManager = ctx.getServiceDelegator().getTrackerAccessManager();\n+        ImportOptions importOptions = ctx.getImportOptions();\n+        CategoryOptionCombo categoryOptionCombo = ctx.getCategoryOptionComboMap().get( event.getUid() );\n+\n+        List<String> errors = trackerAccessManager.canWrite( importOptions.getUser(), categoryOptionCombo );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwMDIwNg==", "bodyText": "Fixed (I guess)", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448400206", "createdAt": "2020-07-01T14:24:33Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.insert.validation;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.importsummary.ImportConflict;\n+import org.hisp.dhis.dxf2.importsummary.ImportStatus;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.trackedentity.TrackerAccessManager;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class AttributeOptionComboAclCheck\n+    implements\n+    Checker\n+{\n+    @Override\n+    public ImportSummary check(ImmutableEvent event, WorkContext ctx )\n+    {\n+        ImportSummary importSummary = new ImportSummary();\n+        TrackerAccessManager trackerAccessManager = ctx.getServiceDelegator().getTrackerAccessManager();\n+        ImportOptions importOptions = ctx.getImportOptions();\n+        CategoryOptionCombo categoryOptionCombo = ctx.getCategoryOptionComboMap().get( event.getUid() );\n+\n+        List<String> errors = trackerAccessManager.canWrite( importOptions.getUser(), categoryOptionCombo );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNzI2Nw=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjQ5MDI1OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/OrgUnitCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzozOTozN1rOGrSCmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDoyNDo1NlrOGroMSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNzUzMQ==", "bodyText": "package before license", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448037531", "createdAt": "2020-06-30T23:39:37Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/OrgUnitCheck.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.insert.validation;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwMDQ1OQ==", "bodyText": "Fixed", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448400459", "createdAt": "2020-07-01T14:24:56Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/OrgUnitCheck.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.insert.validation;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNzUzMQ=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjQ5MTMzOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzo0MDoxMVrOGrSDOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDoyNToxNVrOGroNRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNzY5MQ==", "bodyText": "package before license", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448037691", "createdAt": "2020-06-30T23:40:11Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.update.validation;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwMDcwOA==", "bodyText": "Fixed", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448400708", "createdAt": "2020-07-01T14:25:15Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.update.validation;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNzY5MQ=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjQ5MTU3OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzo0MDoyMFrOGrSDXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDoyNTo0MFrOGroOTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNzcyNg==", "bodyText": "style :|", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448037726", "createdAt": "2020-06-30T23:40:20Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.update.validation;\n+\n+import static org.apache.commons.lang3.StringUtils.isEmpty;\n+import static org.hisp.dhis.dxf2.importsummary.ImportSummary.error;\n+import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n+\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+\n+public class EventSimpleCheck\n+    implements", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwMDk3Mg==", "bodyText": "Fixed", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448400972", "createdAt": "2020-07-01T14:25:40Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.update.validation;\n+\n+import static org.apache.commons.lang3.StringUtils.isEmpty;\n+import static org.hisp.dhis.dxf2.importsummary.ImportSummary.error;\n+import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n+\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+\n+public class EventSimpleCheck\n+    implements", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNzcyNg=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjQ5MzM2OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/PreUpdateProcessorFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzo0MToxM1rOGrSEYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDoyNjowNVrOGroPWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNzk4Nw==", "bodyText": "package before license", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448037987", "createdAt": "2020-06-30T23:41:13Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/PreUpdateProcessorFactory.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.update.preprocess;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwMTI0MA==", "bodyText": "Fixed", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448401240", "createdAt": "2020-07-01T14:26:05Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/PreUpdateProcessorFactory.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.update.preprocess;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNzk4Nw=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjQ5NTI4OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzo0MjoxM1rOGrSFhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDoyNjoyOVrOGroQdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzODI3OA==", "bodyText": "package before license", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448038278", "createdAt": "2020-06-30T23:42:13Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.update.preprocess;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwMTUyNg==", "bodyText": "Fixed", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448401526", "createdAt": "2020-07-01T14:26:29Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.update.preprocess;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzODI3OA=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjQ5NTUxOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzo0MjoxOVrOGrSFqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDoyNjo0NVrOGroRLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzODMxMw==", "bodyText": "style", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448038313", "createdAt": "2020-06-30T23:42:19Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.update.preprocess;\n+\n+import static org.hisp.dhis.organisationunit.FeatureType.NONE;\n+import static org.hisp.dhis.system.util.GeoUtils.SRID;\n+import static org.hisp.dhis.system.util.GeoUtils.getGeoJsonPoint;\n+\n+import java.io.IOException;\n+\n+import org.hisp.dhis.dxf2.events.event.Coordinate;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.Processor;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+\n+public class ProgramInstanceGeometryPreProcessor\n+    implements", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwMTcxMA==", "bodyText": "Fixed", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448401710", "createdAt": "2020-07-01T14:26:45Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.update.preprocess;\n+\n+import static org.hisp.dhis.organisationunit.FeatureType.NONE;\n+import static org.hisp.dhis.system.util.GeoUtils.SRID;\n+import static org.hisp.dhis.system.util.GeoUtils.getGeoJsonPoint;\n+\n+import java.io.IOException;\n+\n+import org.hisp.dhis.dxf2.events.event.Coordinate;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.Processor;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+\n+public class ProgramInstanceGeometryPreProcessor\n+    implements", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzODMxMw=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjQ5Nzg2OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzo0Mzo0NFrOGrSHKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDoyNzoxNVrOGroScQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzODY5Ng==", "bodyText": "package before license", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448038696", "createdAt": "2020-06-30T23:43:44Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.delete.validation;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwMjAzMw==", "bodyText": "Fixed", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448402033", "createdAt": "2020-07-01T14:27:15Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.delete.validation;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzODY5Ng=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjQ5ODE0OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzo0Mzo1NVrOGrSHWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDoyNzoyM1rOGroSzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzODc0NA==", "bodyText": "author header", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448038744", "createdAt": "2020-06-30T23:43:55Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.delete.validation;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static java.util.Collections.emptyList;\n+import static org.hisp.dhis.dxf2.events.importer.ImportStrategyUtils.isDelete;\n+import static org.hisp.dhis.importexport.ImportStrategy.DELETE;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.EventChecking;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.importexport.ImportStrategy;\n+import org.springframework.stereotype.Component;\n+\n+@Component( \"eventsDeleteValidationFactory\" )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwMjEyNA==", "bodyText": "Fixed", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448402124", "createdAt": "2020-07-01T14:27:23Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.delete.validation;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static java.util.Collections.emptyList;\n+import static org.hisp.dhis.dxf2.events.importer.ImportStrategyUtils.isDelete;\n+import static org.hisp.dhis.importexport.ImportStrategy.DELETE;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.EventChecking;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.importexport.ImportStrategy;\n+import org.springframework.stereotype.Component;\n+\n+@Component( \"eventsDeleteValidationFactory\" )", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzODc0NA=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjQ5OTY5OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/User.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzo0NDo0N1rOGrSIPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzo0NDo0N1rOGrSIPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzODk3NA==", "bodyText": "We already have this\n    public static String username( User user )\n    {\n        return username( user, \"system-process\" );\n    }\n\ncan it be used instead?", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448038974", "createdAt": "2020-06-30T23:44:47Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/User.java", "diffHunk": "@@ -414,6 +415,11 @@ public boolean isManagedBy( User user )\n         return false;\n     }\n \n+    public static String getSafeUsername( String username )\n+    {\n+        return StringUtils.isEmpty( username ) ? \"[Unknown]\" : username;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjUwMTAyOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/BatchPreparedStatementSetterWithKeyHolder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzo0NTozMlrOGrSJEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDozMjo0MFrOGrohsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzOTE4Nw==", "bodyText": "author header", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448039187", "createdAt": "2020-06-30T23:45:32Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/BatchPreparedStatementSetterWithKeyHolder.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.hisp.dhis.jdbc;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.springframework.jdbc.core.BatchPreparedStatementSetter;\n+import org.springframework.jdbc.support.KeyHolder;\n+\n+/**\n+ * A {@see BatchPreparedStatementSetter} with support for a {@see KeyHolder}\n+ * This class allows to execute a JDBC batch update operation using a\n+ * {@see JdbcTemplate} and retrieve the generated primary keys\n+ */\n+public abstract class BatchPreparedStatementSetterWithKeyHolder<T> implements BatchPreparedStatementSetter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwNTkzOA==", "bodyText": "Fixed", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448405938", "createdAt": "2020-07-01T14:32:40Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/BatchPreparedStatementSetterWithKeyHolder.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.hisp.dhis.jdbc;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.springframework.jdbc.core.BatchPreparedStatementSetter;\n+import org.springframework.jdbc.support.KeyHolder;\n+\n+/**\n+ * A {@see BatchPreparedStatementSetter} with support for a {@see KeyHolder}\n+ * This class allows to execute a JDBC batch update operation using a\n+ * {@see JdbcTemplate} and retrieve the generated primary keys\n+ */\n+public abstract class BatchPreparedStatementSetterWithKeyHolder<T> implements BatchPreparedStatementSetter", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzOTE4Nw=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjUwMTk4OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzo0NTo1OFrOGrSJoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDozMzowM1rOGroixw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzOTMyOA==", "bodyText": "package before license", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448039328", "createdAt": "2020-06-30T23:45:58Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.update.validation;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwNjIxNQ==", "bodyText": "Fixed", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448406215", "createdAt": "2020-07-01T14:33:03Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.update.validation;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzOTMyOA=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjUwMjE0OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzo0NjowNFrOGrSJtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDozMzoxOVrOGrojcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzOTM1MQ==", "bodyText": "author header", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448039351", "createdAt": "2020-06-30T23:46:04Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.update.validation;\n+\n+import static org.hisp.dhis.dxf2.importsummary.ImportSummary.error;\n+import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n+\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.importsummary.ImportConflict;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+\n+public class ProgramStageInstanceBasicCheck", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwNjM4NA==", "bodyText": "Fixed", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448406384", "createdAt": "2020-07-01T14:33:19Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.update.validation;\n+\n+import static org.hisp.dhis.dxf2.importsummary.ImportSummary.error;\n+import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n+\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.importsummary.ImportConflict;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+\n+public class ProgramStageInstanceBasicCheck", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzOTM1MQ=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjUwNDI5OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/tracker/events/EventImportTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzo0NzoxMVrOGrSK_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNzo1ODozOVrOGsBsCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzOTY3OQ==", "bodyText": "System.out.println?", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448039679", "createdAt": "2020-06-30T23:47:11Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/tracker/events/EventImportTests.java", "diffHunk": "@@ -114,11 +119,18 @@ public void eventsImportNewEventsFromFile( String fileName, String contentType )\n \n         createdEvents.addAll( importSummaries\n             .stream()\n-            .map( p -> {\n-                return p.getReference();\n-            } )\n+            .map( ImportSummary::getReference )\n             .collect( toList() ) );\n \n+        for (ImportSummary is : importSummaries) {\n+\n+            String status = is.getStatus();\n+            if (status.equals(\"ERROR\")) {\n+\n+                System.out.println(is.getDescription());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgxODE4Ng==", "bodyText": "Fixed", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448818186", "createdAt": "2020-07-02T07:58:39Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/tracker/events/EventImportTests.java", "diffHunk": "@@ -114,11 +119,18 @@ public void eventsImportNewEventsFromFile( String fileName, String contentType )\n \n         createdEvents.addAll( importSummaries\n             .stream()\n-            .map( p -> {\n-                return p.getReference();\n-            } )\n+            .map( ImportSummary::getReference )\n             .collect( toList() ) );\n \n+        for (ImportSummary is : importSummaries) {\n+\n+            String status = is.getStatus();\n+            if (status.equals(\"ERROR\")) {\n+\n+                System.out.println(is.getDescription());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzOTY3OQ=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjUwNDk4OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/preprocess/EventStoredByPreProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzo0NzozNVrOGrSLbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzo0NzozNVrOGrSLbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzOTc5MQ==", "bodyText": "newline", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448039791", "createdAt": "2020-06-30T23:47:35Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/preprocess/EventStoredByPreProcessor.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package org.hisp.dhis.dxf2.events.importer.shared.preprocess;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.util.Set;\n+\n+import org.hisp.dhis.dxf2.events.event.DataValue;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.event.EventUtils;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.Processor;\n+\n+/**\n+ * Sets the \"storedBy\" property on the event and on the event's Data Values\n+ * @author Luciano Fiandesio\n+ */\n+public class EventStoredByPreProcessor implements Processor\n+{\n+    @Override\n+    public void process( Event event, WorkContext ctx )\n+    {\n+        String storedBy = EventUtils.getValidUsername( event.getStoredBy(), ctx.getImportOptions() );\n+        event.setStoredBy( storedBy );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjUwNjM2OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramInstanceRepeatableStageCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzo0ODoyNFrOGrSMRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDozNDo0NlrOGronVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA0MDAwNQ==", "bodyText": "package before license", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448040005", "createdAt": "2020-06-30T23:48:24Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramInstanceRepeatableStageCheck.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.insert.validation;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwNzM4Mg==", "bodyText": "Fixed", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448407382", "createdAt": "2020-07-01T14:34:46Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramInstanceRepeatableStageCheck.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.insert.validation;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA0MDAwNQ=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjUwOTkxOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/Constants.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzo1MDowNlrOGrSOSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNzozNjo0OVrOGsA9cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA0MDUyMQ==", "bodyText": "package before license", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448040521", "createdAt": "2020-06-30T23:50:06Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/Constants.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgwNjI1OQ==", "bodyText": "Fixed", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448806259", "createdAt": "2020-07-02T07:36:49Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/Constants.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA0MDUyMQ=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjUxMjYxOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/mapper/ProgramStageInstanceMapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzo1MToyNFrOGrSP1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDozNTo1OVrOGroqjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA0MDkxNw==", "bodyText": "@OverRide ?", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448040917", "createdAt": "2020-06-30T23:51:24Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/mapper/ProgramStageInstanceMapper.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.hisp.dhis.dxf2.events.importer.mapper;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static java.util.Collections.emptyList;\n+import static java.util.stream.Collectors.toList;\n+import static org.apache.commons.collections4.CollectionUtils.isNotEmpty;\n+import static org.hisp.dhis.common.IdScheme.CODE;\n+import static org.hisp.dhis.common.IdScheme.UID;\n+import static org.hisp.dhis.event.EventStatus.fromInt;\n+import static org.hisp.dhis.util.DateUtils.parseDate;\n+\n+import java.util.Date;\n+import java.util.List;\n+\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.trackedentitycomment.TrackedEntityComment;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class ProgramStageInstanceMapper extends AbstractMapper<Event, ProgramStageInstance>\n+{\n+    private final ProgramStageInstanceNoteMapper noteMapper;\n+\n+    public ProgramStageInstanceMapper( WorkContext ctx )\n+    {\n+        super( ctx );\n+        noteMapper = new ProgramStageInstanceNoteMapper( ctx );\n+    }\n+\n+    public ProgramStageInstance map( Event event )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwODIwNQ==", "bodyText": "Fixed", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448408205", "createdAt": "2020-07-01T14:35:59Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/mapper/ProgramStageInstanceMapper.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.hisp.dhis.dxf2.events.importer.mapper;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static java.util.Collections.emptyList;\n+import static java.util.stream.Collectors.toList;\n+import static org.apache.commons.collections4.CollectionUtils.isNotEmpty;\n+import static org.hisp.dhis.common.IdScheme.CODE;\n+import static org.hisp.dhis.common.IdScheme.UID;\n+import static org.hisp.dhis.event.EventStatus.fromInt;\n+import static org.hisp.dhis.util.DateUtils.parseDate;\n+\n+import java.util.Date;\n+import java.util.List;\n+\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.trackedentitycomment.TrackedEntityComment;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class ProgramStageInstanceMapper extends AbstractMapper<Event, ProgramStageInstance>\n+{\n+    private final ProgramStageInstanceNoteMapper noteMapper;\n+\n+    public ProgramStageInstanceMapper( WorkContext ctx )\n+    {\n+        super( ctx );\n+        noteMapper = new ProgramStageInstanceNoteMapper( ctx );\n+    }\n+\n+    public ProgramStageInstance map( Event event )", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA0MDkxNw=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjUxMzc2OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/mapper/ProgramStageInstanceMapper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzo1MjowMFrOGrSQgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDozODowOFrOGrow6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA0MTA5MQ==", "bodyText": "No, that seems wrong.. code for tracker objects is anyways not properly implemented", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448041091", "createdAt": "2020-06-30T23:52:00Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/mapper/ProgramStageInstanceMapper.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.hisp.dhis.dxf2.events.importer.mapper;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static java.util.Collections.emptyList;\n+import static java.util.stream.Collectors.toList;\n+import static org.apache.commons.collections4.CollectionUtils.isNotEmpty;\n+import static org.hisp.dhis.common.IdScheme.CODE;\n+import static org.hisp.dhis.common.IdScheme.UID;\n+import static org.hisp.dhis.event.EventStatus.fromInt;\n+import static org.hisp.dhis.util.DateUtils.parseDate;\n+\n+import java.util.Date;\n+import java.util.List;\n+\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.trackedentitycomment.TrackedEntityComment;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class ProgramStageInstanceMapper extends AbstractMapper<Event, ProgramStageInstance>\n+{\n+    private final ProgramStageInstanceNoteMapper noteMapper;\n+\n+    public ProgramStageInstanceMapper( WorkContext ctx )\n+    {\n+        super( ctx );\n+        noteMapper = new ProgramStageInstanceNoteMapper( ctx );\n+    }\n+\n+    public ProgramStageInstance map( Event event )\n+    {\n+        ImportOptions importOptions = workContext.getImportOptions();\n+        \n+        ProgramStageInstance psi = new ProgramStageInstance();\n+        \n+        ProgramStageInstance programStageInstance = this.workContext.getProgramStageInstanceMap().get( event.getUid() );\n+        if ( programStageInstance != null )\n+        {\n+            psi.setId( programStageInstance.getId() );\n+        }\n+\n+        if ( importOptions.getIdSchemes().getProgramStageInstanceIdScheme().equals( CODE ) )\n+        {\n+            // TODO: Is this really correct?\n+            psi.setCode( event.getUid() );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwOTgzNA==", "bodyText": "Ok, this was on of the questions I asked in the open points document: https://docs.google.com/document/d/1030nAuKxMSAYopNJj569inGgcJUS3DbqNrU-ZyZgSMI/edit#heading=h.p1u0vhrtwo4q", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448409834", "createdAt": "2020-07-01T14:38:08Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/mapper/ProgramStageInstanceMapper.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.hisp.dhis.dxf2.events.importer.mapper;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static java.util.Collections.emptyList;\n+import static java.util.stream.Collectors.toList;\n+import static org.apache.commons.collections4.CollectionUtils.isNotEmpty;\n+import static org.hisp.dhis.common.IdScheme.CODE;\n+import static org.hisp.dhis.common.IdScheme.UID;\n+import static org.hisp.dhis.event.EventStatus.fromInt;\n+import static org.hisp.dhis.util.DateUtils.parseDate;\n+\n+import java.util.Date;\n+import java.util.List;\n+\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.trackedentitycomment.TrackedEntityComment;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class ProgramStageInstanceMapper extends AbstractMapper<Event, ProgramStageInstance>\n+{\n+    private final ProgramStageInstanceNoteMapper noteMapper;\n+\n+    public ProgramStageInstanceMapper( WorkContext ctx )\n+    {\n+        super( ctx );\n+        noteMapper = new ProgramStageInstanceNoteMapper( ctx );\n+    }\n+\n+    public ProgramStageInstance map( Event event )\n+    {\n+        ImportOptions importOptions = workContext.getImportOptions();\n+        \n+        ProgramStageInstance psi = new ProgramStageInstance();\n+        \n+        ProgramStageInstance programStageInstance = this.workContext.getProgramStageInstanceMap().get( event.getUid() );\n+        if ( programStageInstance != null )\n+        {\n+            psi.setId( programStageInstance.getId() );\n+        }\n+\n+        if ( importOptions.getIdSchemes().getProgramStageInstanceIdScheme().equals( CODE ) )\n+        {\n+            // TODO: Is this really correct?\n+            psi.setCode( event.getUid() );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA0MTA5MQ=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzU1ODc0OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/TrackedEntityInstanceServiceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODoyNTo0M1rOGrcBeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODoyNTo0M1rOGrcBeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIwMTA4MQ==", "bodyText": "Should this be fixed before merge?", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448201081", "createdAt": "2020-07-01T08:25:43Z", "author": {"login": "netroms"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/TrackedEntityInstanceServiceTest.java", "diffHunk": "@@ -357,6 +375,11 @@ public void testSyncTeiFutureDatesForEnrollmentAndIncident()\n \n     }\n \n+    /**\n+     * FIXME luciano: this is ignored because there is a bug in tracker, so that new events that fail", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzY1MzI1OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODo1MjowNFrOGrc9ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODo1MjowNFrOGrc9ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxNjQyNg==", "bodyText": "Not anything wrong, but maybe we could optimize this to be done in a more generalized map/streaming fashion in the future.", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448216426", "createdAt": "2020-07-01T08:52:04Z", "author": {"login": "netroms"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheck.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.insert.validation;\n+\n+import static org.hisp.dhis.dxf2.importsummary.ImportSummary.error;\n+import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n+\n+import java.util.Set;\n+\n+import org.hisp.dhis.attribute.AttributeValue;\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.program.ProgramInstance;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class ProgramOrgUnitCheck implements Checker\n+{\n+    @Override\n+    public ImportSummary check(ImmutableEvent event, WorkContext ctx )\n+    {\n+        ProgramInstance programInstance = ctx.getProgramInstanceMap().get( event.getUid() );\n+\n+        if ( programInstance != null )\n+        {\n+            final IdScheme orgUnitIdScheme = ctx.getImportOptions().getIdSchemes().getOrgUnitIdScheme();\n+\n+            OrganisationUnit orgUnit = null;\n+\n+            final Set<OrganisationUnit> organisationUnits = programInstance.getProgram().getOrganisationUnits();\n+\n+            for ( OrganisationUnit ou : organisationUnits )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzY1ODY1OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/metadata/users/UserTest.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODo1Mzo0MFrOGrdA1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNzoxNDoyNVrOGsASMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxNzMwMA==", "bodyText": "What does this + \"1?\" do?", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448217300", "createdAt": "2020-07-01T08:53:40Z", "author": {"login": "netroms"}, "path": "dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/metadata/users/UserTest.java", "diffHunk": "@@ -72,8 +72,8 @@ public void beforeEach() {\n     private Stream<Arguments> provideParams() {\n         return Stream.of( new Arguments[] {\n             Arguments.of( password, password, \"Password must not be one of the previous 24 passwords\", \"newPassword is the same as old\" ),\n-            Arguments.of( password, \"test\", \"Password must have at least 8, and at most 40 characters\", \"newPassword is too short\" ),\n-            Arguments.of( password, DataGenerator.randomString(41), \"Password must have at least 8, and at most 40 characters\", \"newPassword is too-long\" ),\n+            Arguments.of( password, \"Test1?\", \"Password must have at least 8, and at most 40 characters\", \"newPassword is too short\" ),\n+            Arguments.of( password, DataGenerator.randomString(41) + \"1?\", \"Password must have at least 8, and at most 40 characters\", \"newPassword is too-long\" ),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQxMTQyOA==", "bodyText": "Not sure, need to ask @vilkg", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448411428", "createdAt": "2020-07-01T14:40:27Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/metadata/users/UserTest.java", "diffHunk": "@@ -72,8 +72,8 @@ public void beforeEach() {\n     private Stream<Arguments> provideParams() {\n         return Stream.of( new Arguments[] {\n             Arguments.of( password, password, \"Password must not be one of the previous 24 passwords\", \"newPassword is the same as old\" ),\n-            Arguments.of( password, \"test\", \"Password must have at least 8, and at most 40 characters\", \"newPassword is too short\" ),\n-            Arguments.of( password, DataGenerator.randomString(41), \"Password must have at least 8, and at most 40 characters\", \"newPassword is too-long\" ),\n+            Arguments.of( password, \"Test1?\", \"Password must have at least 8, and at most 40 characters\", \"newPassword is too short\" ),\n+            Arguments.of( password, DataGenerator.randomString(41) + \"1?\", \"Password must have at least 8, and at most 40 characters\", \"newPassword is too-long\" ),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxNzMwMA=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU1NDQwNg==", "bodyText": "Password must have a digit and special character, so this is to ensure that all other rules are satisfied, other than the one under test.", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448554406", "createdAt": "2020-07-01T18:50:39Z", "author": {"login": "vilkg"}, "path": "dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/metadata/users/UserTest.java", "diffHunk": "@@ -72,8 +72,8 @@ public void beforeEach() {\n     private Stream<Arguments> provideParams() {\n         return Stream.of( new Arguments[] {\n             Arguments.of( password, password, \"Password must not be one of the previous 24 passwords\", \"newPassword is the same as old\" ),\n-            Arguments.of( password, \"test\", \"Password must have at least 8, and at most 40 characters\", \"newPassword is too short\" ),\n-            Arguments.of( password, DataGenerator.randomString(41), \"Password must have at least 8, and at most 40 characters\", \"newPassword is too-long\" ),\n+            Arguments.of( password, \"Test1?\", \"Password must have at least 8, and at most 40 characters\", \"newPassword is too short\" ),\n+            Arguments.of( password, DataGenerator.randomString(41) + \"1?\", \"Password must have at least 8, and at most 40 characters\", \"newPassword is too-long\" ),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxNzMwMA=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU1NTgyMg==", "bodyText": "That was for why, but i see now that you asked what it does @netroms..It appends \"1?\" to a string of length 41 \ud83d\udc4c", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448555822", "createdAt": "2020-07-01T18:53:33Z", "author": {"login": "vilkg"}, "path": "dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/metadata/users/UserTest.java", "diffHunk": "@@ -72,8 +72,8 @@ public void beforeEach() {\n     private Stream<Arguments> provideParams() {\n         return Stream.of( new Arguments[] {\n             Arguments.of( password, password, \"Password must not be one of the previous 24 passwords\", \"newPassword is the same as old\" ),\n-            Arguments.of( password, \"test\", \"Password must have at least 8, and at most 40 characters\", \"newPassword is too short\" ),\n-            Arguments.of( password, DataGenerator.randomString(41), \"Password must have at least 8, and at most 40 characters\", \"newPassword is too-long\" ),\n+            Arguments.of( password, \"Test1?\", \"Password must have at least 8, and at most 40 characters\", \"newPassword is too short\" ),\n+            Arguments.of( password, DataGenerator.randomString(41) + \"1?\", \"Password must have at least 8, and at most 40 characters\", \"newPassword is too-long\" ),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxNzMwMA=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc5NTE4NA==", "bodyText": "Thanks @vilkg", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448795184", "createdAt": "2020-07-02T07:14:25Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/metadata/users/UserTest.java", "diffHunk": "@@ -72,8 +72,8 @@ public void beforeEach() {\n     private Stream<Arguments> provideParams() {\n         return Stream.of( new Arguments[] {\n             Arguments.of( password, password, \"Password must not be one of the previous 24 passwords\", \"newPassword is the same as old\" ),\n-            Arguments.of( password, \"test\", \"Password must have at least 8, and at most 40 characters\", \"newPassword is too short\" ),\n-            Arguments.of( password, DataGenerator.randomString(41), \"Password must have at least 8, and at most 40 characters\", \"newPassword is too-long\" ),\n+            Arguments.of( password, \"Test1?\", \"Password must have at least 8, and at most 40 characters\", \"newPassword is too short\" ),\n+            Arguments.of( password, DataGenerator.randomString(41) + \"1?\", \"Password must have at least 8, and at most 40 characters\", \"newPassword is too-long\" ),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxNzMwMA=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzY2OTU3OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramStageCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODo1NjozN1rOGrdH8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDo0MDo1MFrOGro4Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxOTEyMQ==", "bodyText": "This Program instance looks unused.", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448219121", "createdAt": "2020-07-01T08:56:37Z", "author": {"login": "netroms"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramStageCheck.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.insert.validation;\n+\n+import static org.hisp.dhis.dxf2.importsummary.ImportSummary.error;\n+import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n+\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramStage;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class ProgramStageCheck implements Checker\n+{\n+    @Override\n+    public ImportSummary check(ImmutableEvent event, WorkContext ctx )\n+    {\n+        IdScheme programStageIdScheme = ctx.getImportOptions().getIdSchemes().getProgramStageIdScheme();\n+        // Get the program stage id from the event.\n+        // If the event has no program stage set, use a dummy value which will not\n+        // return any Program Stage\n+        // from the WorkContext\n+        final String programStageId = StringUtils.isEmpty( event.getProgramStage() ) ? \"-\" : event.getProgramStage();\n+\n+        Program program = ctx.getProgramsMap().get( event.getProgram() );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQxMTY3OQ==", "bodyText": "Fixed, removed", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448411679", "createdAt": "2020-07-01T14:40:50Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramStageCheck.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.insert.validation;\n+\n+import static org.hisp.dhis.dxf2.importsummary.ImportSummary.error;\n+import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n+\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramStage;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class ProgramStageCheck implements Checker\n+{\n+    @Override\n+    public ImportSummary check(ImmutableEvent event, WorkContext ctx )\n+    {\n+        IdScheme programStageIdScheme = ctx.getImportOptions().getIdSchemes().getProgramStageIdScheme();\n+        // Get the program stage id from the event.\n+        // If the event has no program stage set, use a dummy value which will not\n+        // return any Program Stage\n+        // from the WorkContext\n+        final String programStageId = StringUtils.isEmpty( event.getProgramStage() ) ? \"-\" : event.getProgramStage();\n+\n+        Program program = ctx.getProgramsMap().get( event.getProgram() );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxOTEyMQ=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzY3MjYwOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramInstanceSupplierTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODo1NzozMVrOGrdJ1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDo0MToyM1rOGro5ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxOTYwNw==", "bodyText": "Missing newline end of file", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448219607", "createdAt": "2020-07-01T08:57:31Z", "author": {"login": "netroms"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramInstanceSupplierTest.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+import java.sql.SQLException;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.hisp.dhis.common.CodeGenerator;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class ProgramInstanceSupplierTest extends AbstractSupplierTest<ProgramInstance>\n+{\n+    private ProgramInstanceSupplier subject;\n+\n+    @Mock\n+    private ProgramSupplier programSupplier;\n+\n+    @Before\n+    public void setUp()\n+    {\n+        this.subject = new ProgramInstanceSupplier( jdbcTemplate, programSupplier );\n+    }\n+\n+    @Test\n+    public void handleNullEvents()\n+    {\n+        assertNotNull( subject.get( ImportOptions.getDefaultImportOptions(), new HashMap<>(), null ) );\n+    }\n+\n+    @Override\n+    public void verifySupplier()\n+        throws SQLException\n+    {\n+        // mock resultset data\n+        when( mockResultSet.getLong( \"programinstanceid\" ) ).thenReturn( 100L );\n+        when( mockResultSet.getString( \"uid\" ) ).thenReturn( \"abcded\" );\n+        when( mockResultSet.getString( \"tei_uid\" ) ).thenReturn( \"efghil\" );\n+        when( mockResultSet.getString( \"tei_ou_uid\" ) ).thenReturn( \"ouabcde\" );\n+        when( mockResultSet.getString( \"tei_ou_path\" ) ).thenReturn( \"/ouabcde\" );\n+        when( mockResultSet.getLong( \"programid\" ) ).thenReturn( 999L );\n+\n+        // create event to import\n+        Event event = new Event();\n+        event.setUid( CodeGenerator.generateUid() );\n+        event.setEnrollment( \"abcded\" );\n+\n+        // mock resultset extraction\n+        mockResultSetExtractor( mockResultSet );\n+\n+        // create a Program for the ProgramSupplier\n+        Program program = new Program();\n+        program.setId( 999L );\n+        program.setUid( \"prabcde\" );\n+        Map<String, Program> programMap = new HashMap<>();\n+        programMap.put( \"prabcde\", program );\n+\n+        final ImportOptions defaultImportOptions = ImportOptions.getDefaultImportOptions();\n+\n+        when( programSupplier.get( defaultImportOptions, Collections.singletonList( event ) ) )\n+            .thenReturn( programMap );\n+\n+        Map<String, ProgramInstance> map = subject.get( defaultImportOptions, new HashMap<>(), Collections.singletonList( event ) );\n+\n+        ProgramInstance programInstance = map.get( event.getUid() );\n+        assertThat( programInstance, is( notNullValue() ) );\n+        assertThat( programInstance.getId(), is( 100L ) );\n+        assertThat( programInstance.getUid(), is( \"abcded\" ) );\n+        assertThat( programInstance.getEntityInstance(), is( notNullValue() ) );\n+        assertThat( programInstance.getEntityInstance().getUid(), is( \"efghil\" ) );\n+        assertThat( programInstance.getEntityInstance().getOrganisationUnit(), is( notNullValue() ) );\n+        assertThat( programInstance.getEntityInstance().getOrganisationUnit().getUid(), is( \"ouabcde\" ) );\n+        assertThat( programInstance.getProgram(), is( notNullValue() ) );\n+        assertThat( programInstance.getProgram().getUid(), is( \"prabcde\" ) );\n+    }\n+\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQxMjA2Mg==", "bodyText": "Didn't know we needed one, fixed", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448412062", "createdAt": "2020-07-01T14:41:23Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramInstanceSupplierTest.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+import java.sql.SQLException;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.hisp.dhis.common.CodeGenerator;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class ProgramInstanceSupplierTest extends AbstractSupplierTest<ProgramInstance>\n+{\n+    private ProgramInstanceSupplier subject;\n+\n+    @Mock\n+    private ProgramSupplier programSupplier;\n+\n+    @Before\n+    public void setUp()\n+    {\n+        this.subject = new ProgramInstanceSupplier( jdbcTemplate, programSupplier );\n+    }\n+\n+    @Test\n+    public void handleNullEvents()\n+    {\n+        assertNotNull( subject.get( ImportOptions.getDefaultImportOptions(), new HashMap<>(), null ) );\n+    }\n+\n+    @Override\n+    public void verifySupplier()\n+        throws SQLException\n+    {\n+        // mock resultset data\n+        when( mockResultSet.getLong( \"programinstanceid\" ) ).thenReturn( 100L );\n+        when( mockResultSet.getString( \"uid\" ) ).thenReturn( \"abcded\" );\n+        when( mockResultSet.getString( \"tei_uid\" ) ).thenReturn( \"efghil\" );\n+        when( mockResultSet.getString( \"tei_ou_uid\" ) ).thenReturn( \"ouabcde\" );\n+        when( mockResultSet.getString( \"tei_ou_path\" ) ).thenReturn( \"/ouabcde\" );\n+        when( mockResultSet.getLong( \"programid\" ) ).thenReturn( 999L );\n+\n+        // create event to import\n+        Event event = new Event();\n+        event.setUid( CodeGenerator.generateUid() );\n+        event.setEnrollment( \"abcded\" );\n+\n+        // mock resultset extraction\n+        mockResultSetExtractor( mockResultSet );\n+\n+        // create a Program for the ProgramSupplier\n+        Program program = new Program();\n+        program.setId( 999L );\n+        program.setUid( \"prabcde\" );\n+        Map<String, Program> programMap = new HashMap<>();\n+        programMap.put( \"prabcde\", program );\n+\n+        final ImportOptions defaultImportOptions = ImportOptions.getDefaultImportOptions();\n+\n+        when( programSupplier.get( defaultImportOptions, Collections.singletonList( event ) ) )\n+            .thenReturn( programMap );\n+\n+        Map<String, ProgramInstance> map = subject.get( defaultImportOptions, new HashMap<>(), Collections.singletonList( event ) );\n+\n+        ProgramInstance programInstance = map.get( event.getUid() );\n+        assertThat( programInstance, is( notNullValue() ) );\n+        assertThat( programInstance.getId(), is( 100L ) );\n+        assertThat( programInstance.getUid(), is( \"abcded\" ) );\n+        assertThat( programInstance.getEntityInstance(), is( notNullValue() ) );\n+        assertThat( programInstance.getEntityInstance().getUid(), is( \"efghil\" ) );\n+        assertThat( programInstance.getEntityInstance().getOrganisationUnit(), is( notNullValue() ) );\n+        assertThat( programInstance.getEntityInstance().getOrganisationUnit().getUid(), is( \"ouabcde\" ) );\n+        assertThat( programInstance.getProgram(), is( notNullValue() ) );\n+        assertThat( programInstance.getProgram().getUid(), is( \"prabcde\" ) );\n+    }\n+\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxOTYwNw=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzY4NjAzOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/ProgramStageInstanceAclCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOTowMToxOFrOGrdSZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNToyMzoxM1rOGrqntQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyMTc5OQ==", "bodyText": "Why is it only checking canDelete here? The name of this class looks looks very general, so does the method name. Maybe explain in doc/comment why only delete is checked.", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448221799", "createdAt": "2020-07-01T09:01:18Z", "author": {"login": "netroms"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/ProgramStageInstanceAclCheck.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.delete.validation;\n+\n+import static java.util.Collections.emptyList;\n+\n+import java.util.List;\n+\n+import org.hisp.dhis.dxf2.events.importer.shared.validation.BaseEventAclCheck;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.trackedentity.TrackerAccessManager;\n+import org.hisp.dhis.user.User;\n+\n+public class ProgramStageInstanceAclCheck extends BaseEventAclCheck\n+{\n+    @Override\n+    public List<String> checkAcl( TrackerAccessManager trackerAccessManager, User user,\n+        ProgramStageInstance programStageInstance )\n+    {\n+        if ( programStageInstance != null )\n+        {\n+            return trackerAccessManager.canDelete( user, programStageInstance, true );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ0MDI0NQ==", "bodyText": "We have ProgramStageInstanceAclCheck for delete/update/insert, it is specified in the package.", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448440245", "createdAt": "2020-07-01T15:23:13Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/ProgramStageInstanceAclCheck.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.delete.validation;\n+\n+import static java.util.Collections.emptyList;\n+\n+import java.util.List;\n+\n+import org.hisp.dhis.dxf2.events.importer.shared.validation.BaseEventAclCheck;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.trackedentity.TrackerAccessManager;\n+import org.hisp.dhis.user.User;\n+\n+public class ProgramStageInstanceAclCheck extends BaseEventAclCheck\n+{\n+    @Override\n+    public List<String> checkAcl( TrackerAccessManager trackerAccessManager, User user,\n+        ProgramStageInstance programStageInstance )\n+    {\n+        if ( programStageInstance != null )\n+        {\n+            return trackerAccessManager.canDelete( user, programStageInstance, true );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyMTc5OQ=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzY5NTE0OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AssignedUserSupplier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOTowMzo1M1rOGrdYEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNToyNDowNlrOGrqp6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyMzI0OQ==", "bodyText": "Looks like this comment means org unit -> user ?", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448223249", "createdAt": "2020-07-01T09:03:53Z", "author": {"login": "netroms"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AssignedUserSupplier.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.sql.ResultSet;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.collect.HashMultimap;\n+import com.google.common.collect.Multimap;\n+import org.apache.commons.lang3.StringUtils;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.user.User;\n+import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;\n+import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Component( \"workContextAssignedUsersSupplier\" )\n+public class AssignedUserSupplier extends AbstractSupplier<Map<String, User>>\n+{\n+    public AssignedUserSupplier( NamedParameterJdbcTemplate namedParameterJdbcTemplate )\n+    {\n+        super( namedParameterJdbcTemplate );\n+    }\n+\n+    @Override\n+    public Map<String, User> get( ImportOptions importOptions, List<Event> events )\n+    {\n+        // @formatter:off\n+        // Collect all the org unit uids to pass as SQL query argument", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ0MDgxMQ==", "bodyText": "Yes, good catch, fixed", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448440811", "createdAt": "2020-07-01T15:24:06Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AssignedUserSupplier.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.sql.ResultSet;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.collect.HashMultimap;\n+import com.google.common.collect.Multimap;\n+import org.apache.commons.lang3.StringUtils;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.user.User;\n+import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;\n+import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Component( \"workContextAssignedUsersSupplier\" )\n+public class AssignedUserSupplier extends AbstractSupplier<Map<String, User>>\n+{\n+    public AssignedUserSupplier( NamedParameterJdbcTemplate namedParameterJdbcTemplate )\n+    {\n+        super( namedParameterJdbcTemplate );\n+    }\n+\n+    @Override\n+    public Map<String, User> get( ImportOptions importOptions, List<Event> events )\n+    {\n+        // @formatter:off\n+        // Collect all the org unit uids to pass as SQL query argument", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyMzI0OQ=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzcwMTU2OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/PreInsertProcessorFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOTowNTo0MlrOGrdcEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNToyNDo1OFrOGrqsGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyNDI3Mw==", "bodyText": "Since it looks like this class is only setting the CREATE strategy maybe it should be reflected in the class name?", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448224273", "createdAt": "2020-07-01T09:05:42Z", "author": {"login": "netroms"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/PreInsertProcessorFactory.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.insert.preprocess;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.EventProcessing;\n+import org.hisp.dhis.dxf2.events.importer.ImportStrategyUtils;\n+import org.hisp.dhis.dxf2.events.importer.Processor;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.importexport.ImportStrategy;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Component( \"eventsPreInsertProcessorFactory\" )\n+public class PreInsertProcessorFactory implements EventProcessing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ0MTM3MA==", "bodyText": "Yes, the class is named PreInsertProcessFactory and it's in the insert package.", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448441370", "createdAt": "2020-07-01T15:24:58Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/PreInsertProcessorFactory.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.insert.preprocess;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.EventProcessing;\n+import org.hisp.dhis.dxf2.events.importer.ImportStrategyUtils;\n+import org.hisp.dhis.dxf2.events.importer.Processor;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.importexport.ImportStrategy;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Component( \"eventsPreInsertProcessorFactory\" )\n+public class PreInsertProcessorFactory implements EventProcessing", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyNDI3Mw=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzcwNDMyOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/CategoryOptionComboSupplierTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOTowNjozMFrOGrddxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOTowNjozMFrOGrddxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyNDcwOQ==", "bodyText": "Missing newline", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448224709", "createdAt": "2020-07-01T09:06:30Z", "author": {"login": "netroms"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/CategoryOptionComboSupplierTest.java", "diffHunk": "@@ -0,0 +1,231 @@\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static java.util.Collections.singletonList;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.junit.Assert.*;\n+import static org.mockito.ArgumentMatchers.anyList;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.hisp.dhis.category.CategoryCombo;\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.common.CodeGenerator;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.program.Program;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class CategoryOptionComboSupplierTest extends AbstractSupplierTest<CategoryOptionCombo>\n+{\n+    private CategoryOptionComboSupplier subject;\n+\n+    @Mock\n+    private ProgramSupplier programSupplier;\n+\n+    @Mock\n+    private AttributeOptionComboLoader attributeOptionComboLoader;\n+\n+    private Map<String, Program> programMap;\n+\n+    private Event event;\n+\n+    private Program program;\n+\n+    @Before\n+    public void setUp()\n+    {\n+        this.subject = new CategoryOptionComboSupplier( jdbcTemplate, programSupplier, attributeOptionComboLoader );\n+        programMap = new HashMap<>();\n+\n+        // create a Program for the ProgramSupplier\n+        program = new Program();\n+        program.setId( 999L );\n+        program.setUid( \"prabcde\" );\n+        programMap.put( \"prabcde\", program );\n+\n+        // create event to import\n+        event = new Event();\n+        event.setUid( CodeGenerator.generateUid() );\n+        event.setAttributeOptionCombo( \"aoc1234\" );\n+        event.setProgram( program.getUid() );\n+    }\n+\n+    @Test\n+    public void handleNullEvents()\n+    {\n+        assertNotNull( subject.get( ImportOptions.getDefaultImportOptions(), null ) );\n+    }\n+\n+    public void verifySupplier()\n+    {\n+        /*\n+         * Case 1: Event has 'attributeOptionCombo' value set\n+         */\n+        case1( ImportOptions.getDefaultImportOptions() );\n+\n+        /*\n+         * Case 2: Event has 'attributeOptionCombo' value set, but it's not found ->\n+         * fetch default coc\n+         */\n+        case2( ImportOptions.getDefaultImportOptions() );\n+\n+        /*\n+         * Case 3: Event has 'attributeCategoryOptions' value set\n+         */\n+        case3( ImportOptions.getDefaultImportOptions() );\n+\n+        /*\n+         * Case 4: Event has no 'attributeCategoryOptions' or 'attributeOptionCombo'\n+         * values set -> fetch default coc\n+         */\n+        case4( ImportOptions.getDefaultImportOptions() );\n+\n+        /*\n+         * Case 5: Event has both 'attributeCategoryOptions' and 'attributeOptionCombo'\n+         * values set attributeOptionCombo is used to fetch the coc\n+         */\n+        case5( ImportOptions.getDefaultImportOptions() );\n+    }\n+\n+    private void case1( ImportOptions importOptions )\n+    {\n+        when( programSupplier.get( eq( importOptions ), anyList() ) ).thenReturn( programMap );\n+\n+        CategoryOptionCombo coc = new CategoryOptionCombo();\n+        coc.setUid( event.getAttributeOptionCombo() );\n+        when( attributeOptionComboLoader.getCategoryOptionCombo(\n+            importOptions.getIdSchemes().getCategoryOptionComboIdScheme(), event.getAttributeOptionCombo() ) )\n+                .thenReturn( coc );\n+\n+        Map<String, CategoryOptionCombo> map = subject.get( importOptions, singletonList( event ) );\n+        CategoryOptionCombo categoryOptionCombo = map.get( event.getUid() );\n+        assertThat( categoryOptionCombo, is( notNullValue() ) );\n+\n+    }\n+\n+    private void case2( ImportOptions importOptions )\n+    {\n+        when( programSupplier.get( eq( importOptions ), anyList() ) ).thenReturn( programMap );\n+\n+        CategoryOptionCombo coc = new CategoryOptionCombo();\n+        coc.setUid( \"def123\" );\n+        coc.setName( \"default \" );\n+\n+        when( attributeOptionComboLoader.getCategoryOptionCombo(\n+            importOptions.getIdSchemes().getCategoryOptionComboIdScheme(), event.getAttributeOptionCombo() ) )\n+                .thenReturn( null );\n+\n+        when( attributeOptionComboLoader.getDefault() ).thenReturn( coc );\n+\n+        Map<String, CategoryOptionCombo> map = subject.get( importOptions, singletonList( event ) );\n+\n+        CategoryOptionCombo categoryOptionCombo = map.get( event.getUid() );\n+        assertThat( categoryOptionCombo, is( notNullValue() ) );\n+        assertThat( categoryOptionCombo.getName(), is( coc.getName() ) );\n+\n+    }\n+\n+    private void case3( ImportOptions importOptions )\n+    {\n+        when( programSupplier.get( eq( importOptions ), anyList() ) ).thenReturn( programMap );\n+\n+        CategoryCombo catCombo = new CategoryCombo();\n+        catCombo.setUid( CodeGenerator.generateUid() );\n+        program.setCategoryCombo( catCombo );\n+\n+        // create event to import\n+        Event event = new Event();\n+        event.setUid( CodeGenerator.generateUid() );\n+        event.setAttributeCategoryOptions( \"abcded;fghilm\" );\n+        event.setProgram( program.getUid() );\n+\n+        CategoryOptionCombo coc = new CategoryOptionCombo();\n+        coc.setUid( CodeGenerator.generateUid() );\n+        when( attributeOptionComboLoader.getAttributeOptionCombo( catCombo, event.getAttributeCategoryOptions(),\n+            event.getAttributeOptionCombo(), importOptions.getIdSchemes().getCategoryOptionComboIdScheme() ) )\n+                .thenReturn( coc );\n+\n+        Map<String, CategoryOptionCombo> map = subject.get( importOptions, singletonList( event ) );\n+        CategoryOptionCombo categoryOptionCombo = map.get( event.getUid() );\n+        assertThat( categoryOptionCombo, is( notNullValue() ) );\n+        assertThat( categoryOptionCombo.getUid(), is( coc.getUid() ) );\n+    }\n+\n+    private void case4( ImportOptions importOptions )\n+    {\n+        when( programSupplier.get( eq( importOptions ), anyList() ) ).thenReturn( programMap );\n+\n+        // create event to import\n+        Event event = new Event();\n+        event.setUid( CodeGenerator.generateUid() );\n+        event.setProgram( program.getUid() );\n+\n+        CategoryOptionCombo coc = new CategoryOptionCombo();\n+        coc.setUid( CodeGenerator.generateUid() );\n+        coc.setName( \"default \" );\n+\n+        when( attributeOptionComboLoader.getDefault() ).thenReturn( coc );\n+\n+        Map<String, CategoryOptionCombo> map = subject.get( importOptions, singletonList( event ) );\n+        CategoryOptionCombo categoryOptionCombo = map.get( event.getUid() );\n+        assertThat( categoryOptionCombo, is( notNullValue() ) );\n+        assertThat( categoryOptionCombo.getUid(), is( coc.getUid() ) );\n+    }\n+\n+    private void case5( ImportOptions importOptions )\n+    {\n+        when( programSupplier.get( eq( importOptions ), anyList() ) ).thenReturn( programMap );\n+\n+        event.setAttributeCategoryOptions( \"abcde;fghilm\" );\n+\n+        CategoryOptionCombo coc = new CategoryOptionCombo();\n+        coc.setUid( CodeGenerator.generateUid() );\n+\n+        when( attributeOptionComboLoader.getCategoryOptionCombo(\n+            importOptions.getIdSchemes().getCategoryOptionComboIdScheme(), event.getAttributeOptionCombo() ) )\n+                .thenReturn( coc );\n+\n+        Map<String, CategoryOptionCombo> map = subject.get( importOptions, singletonList( event ) );\n+\n+        CategoryOptionCombo categoryOptionCombo = map.get( event.getUid() );\n+        assertThat( categoryOptionCombo, is( notNullValue() ) );\n+        assertThat( categoryOptionCombo.getUid(), is( coc.getUid() ) );\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 231}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzcxMzAzOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/EventGeometryPreProcessorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOTowODo1NVrOGrdjNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOTowODo1NVrOGrdjNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyNjEwMA==", "bodyText": "Missing newline", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448226100", "createdAt": "2020-07-01T09:08:55Z", "author": {"login": "netroms"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/EventGeometryPreProcessorTest.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package org.hisp.dhis.dxf2.events.importer.insert.preprocess;\n+\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.assertThat;\n+\n+import java.io.IOException;\n+\n+import org.hisp.dhis.dxf2.events.event.Coordinate;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.system.util.GeoUtils;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class EventGeometryPreProcessorTest\n+{\n+    private EventGeometryPreProcessor subject;\n+\n+    @Before\n+    public void setUp()\n+    {\n+\n+        this.subject = new EventGeometryPreProcessor();\n+    }\n+\n+    @Test\n+    public void verifyEventGeometryGetCorrectSRID()\n+        throws IOException\n+    {\n+        Event event = new Event();\n+        event.setGeometry( GeoUtils.getGeoJsonPoint( 20.0, 30.0 ) );\n+        event.getGeometry().setSRID( 0 );\n+        subject.process( event, WorkContext.builder().build() );\n+\n+        assertThat( event.getGeometry().getSRID(), is( GeoUtils.SRID ) );\n+    }\n+\n+    @Test\n+    public void verifyEventWithCoordinateHasGeometrySet()\n+    {\n+        Event event = new Event();\n+        event.setCoordinate( new Coordinate( 20.0, 22.0 ) );\n+        subject.process( event, WorkContext.builder().build() );\n+\n+        assertThat( event.getGeometry().getSRID(), is( GeoUtils.SRID ) );\n+        assertThat( event.getGeometry().getCoordinate().x, is( 20.0 ) );\n+        assertThat( event.getGeometry().getCoordinate().y, is( 22.0 ) );\n+    }\n+\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzcyNzQyOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOToxMjo1M1rOGrdsJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwODoxMToyOFrOGsCJRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyODM5MQ==", "bodyText": "Looks like there is missing content here", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448228391", "createdAt": "2020-07-01T09:12:53Z", "author": {"login": "netroms"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java", "diffHunk": "@@ -863,7 +462,8 @@ public Event getEvent( ProgramStageInstance programStageInstance )\n \n     @Transactional( readOnly = true )\n     @Override\n-    public Event getEvent( ProgramStageInstance programStageInstance, boolean isSynchronizationQuery, boolean skipOwnershipCheck )\n+    public Event getEvent( ProgramStageInstance programStageInstance, boolean isSynchronizationQuery,\n+        boolean skipOwnershipCheck )\n     {\n         if ( programStageInstance == null )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 696}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ0MjM2Ng==", "bodyText": "Not sure I understand this comment? Why didn't change this function", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448442366", "createdAt": "2020-07-01T15:26:25Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java", "diffHunk": "@@ -863,7 +462,8 @@ public Event getEvent( ProgramStageInstance programStageInstance )\n \n     @Transactional( readOnly = true )\n     @Override\n-    public Event getEvent( ProgramStageInstance programStageInstance, boolean isSynchronizationQuery, boolean skipOwnershipCheck )\n+    public Event getEvent( ProgramStageInstance programStageInstance, boolean isSynchronizationQuery,\n+        boolean skipOwnershipCheck )\n     {\n         if ( programStageInstance == null )", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyODM5MQ=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 696}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgyNTY2OQ==", "bodyText": "Ok, no need to fix", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448825669", "createdAt": "2020-07-02T08:11:28Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java", "diffHunk": "@@ -863,7 +462,8 @@ public Event getEvent( ProgramStageInstance programStageInstance )\n \n     @Transactional( readOnly = true )\n     @Override\n-    public Event getEvent( ProgramStageInstance programStageInstance, boolean isSynchronizationQuery, boolean skipOwnershipCheck )\n+    public Event getEvent( ProgramStageInstance programStageInstance, boolean isSynchronizationQuery,\n+        boolean skipOwnershipCheck )\n     {\n         if ( programStageInstance == null )", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyODM5MQ=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 696}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzcyOTY1OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOToxMzozMlrOGrdtig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNToyODo0M1rOGrq1-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyODc0Ng==", "bodyText": "Commented out code?", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448228746", "createdAt": "2020-07-01T09:13:32Z", "author": {"login": "netroms"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java", "diffHunk": "@@ -999,484 +598,71 @@ public Event getEvent( ProgramStageInstance programStageInstance, boolean isSync\n \n         event.setRelationships( programStageInstance.getRelationshipItems().stream()\n             .map( ( r ) -> relationshipService.getRelationship( r.getRelationship(), RelationshipParams.FALSE, user ) )\n-            .collect( Collectors.toSet() )\n-        );\n+            .collect( Collectors.toSet() ) );\n \n         return event;\n     }\n \n-    @Transactional( readOnly = true )\n+    // -------------------------------------------------------------------------\n+    // UPDATE\n+    // -------------------------------------------------------------------------\n+\n+    @Transactional\n     @Override\n-    public EventSearchParams getFromUrl( String program, String programStage, ProgramStatus programStatus,\n-        Boolean followUp, String orgUnit, OrganisationUnitSelectionMode orgUnitSelectionMode,\n-        String trackedEntityInstance, Date startDate, Date endDate, Date dueDateStart, Date dueDateEnd,\n-        Date lastUpdatedStartDate, Date lastUpdatedEndDate, String lastUpdatedDuration, EventStatus status,\n-        CategoryOptionCombo attributeOptionCombo, IdSchemes idSchemes, Integer page, Integer pageSize,\n-        boolean totalPages, boolean skipPaging, List<Order> orders, List<String> gridOrders, boolean includeAttributes,\n-        Set<String> events, Boolean skipEventId, AssignedUserSelectionMode assignedUserSelectionMode, Set<String> assignedUsers,\n-        Set<String> filters, Set<String> dataElements, boolean includeAllDataElements, boolean includeDeleted )\n+    public ImportSummaries updateEvents( List<Event> events, ImportOptions importOptions, boolean singleValue,\n+        boolean clearSession )\n     {\n-        User user = currentUserService.getCurrentUser();\n-        UserCredentials userCredentials = user.getUserCredentials();\n-\n-        EventSearchParams params = new EventSearchParams();\n-\n-        Program pr = programService.getProgram( program );\n-\n-        if ( !StringUtils.isEmpty( program ) && pr == null )\n-        {\n-            throw new IllegalQueryException( \"Program is specified but does not exist: \" + program );\n-        }\n-\n-        ProgramStage ps = programStageService.getProgramStage( programStage );\n+        ImportSummaries importSummaries = new ImportSummaries();\n+        importOptions = updateImportOptions( importOptions );\n+        List<List<Event>> partitions = Lists.partition( events, FLUSH_FREQUENCY );\n \n-        if ( !StringUtils.isEmpty( programStage ) && ps == null )\n+        for ( List<Event> _events : partitions )\n         {\n-            throw new IllegalQueryException( \"Program stage is specified but does not exist: \" + programStage );\n-        }\n-\n-        OrganisationUnit ou = organisationUnitService.getOrganisationUnit( orgUnit );\n+            reloadUser( importOptions );\n+            // prepareCaches( importOptions.getUser(), _events );\n \n-        if ( !StringUtils.isEmpty( orgUnit ) && ou == null )\n-        {\n-            throw new IllegalQueryException( \"Org unit is specified but does not exist: \" + orgUnit );\n-        }\n+            for ( Event event : _events )\n+            {\n+                importSummaries.addImportSummary( updateEvent( event, singleValue, importOptions, true ) );\n+            }\n \n-        if ( ou != null && !organisationUnitService.isInUserHierarchy( ou ) )\n-        {\n-            if ( !userCredentials.isSuper()\n-                && !userCredentials.isAuthorized( \"F_TRACKED_ENTITY_INSTANCE_SEARCH_IN_ALL_ORGUNITS\" ) )\n+            if ( clearSession && events.size() >= FLUSH_FREQUENCY )\n             {\n-                throw new IllegalQueryException( \"User has no access to organisation unit: \" + ou.getUid() );\n+                // clearSession( importOptions.getUser() );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 798}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ0Mzg5Nw==", "bodyText": "@maikelarabori can you look at this function - we can discuss it together, I don't remember why this was commented out", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448443897", "createdAt": "2020-07-01T15:28:43Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java", "diffHunk": "@@ -999,484 +598,71 @@ public Event getEvent( ProgramStageInstance programStageInstance, boolean isSync\n \n         event.setRelationships( programStageInstance.getRelationshipItems().stream()\n             .map( ( r ) -> relationshipService.getRelationship( r.getRelationship(), RelationshipParams.FALSE, user ) )\n-            .collect( Collectors.toSet() )\n-        );\n+            .collect( Collectors.toSet() ) );\n \n         return event;\n     }\n \n-    @Transactional( readOnly = true )\n+    // -------------------------------------------------------------------------\n+    // UPDATE\n+    // -------------------------------------------------------------------------\n+\n+    @Transactional\n     @Override\n-    public EventSearchParams getFromUrl( String program, String programStage, ProgramStatus programStatus,\n-        Boolean followUp, String orgUnit, OrganisationUnitSelectionMode orgUnitSelectionMode,\n-        String trackedEntityInstance, Date startDate, Date endDate, Date dueDateStart, Date dueDateEnd,\n-        Date lastUpdatedStartDate, Date lastUpdatedEndDate, String lastUpdatedDuration, EventStatus status,\n-        CategoryOptionCombo attributeOptionCombo, IdSchemes idSchemes, Integer page, Integer pageSize,\n-        boolean totalPages, boolean skipPaging, List<Order> orders, List<String> gridOrders, boolean includeAttributes,\n-        Set<String> events, Boolean skipEventId, AssignedUserSelectionMode assignedUserSelectionMode, Set<String> assignedUsers,\n-        Set<String> filters, Set<String> dataElements, boolean includeAllDataElements, boolean includeDeleted )\n+    public ImportSummaries updateEvents( List<Event> events, ImportOptions importOptions, boolean singleValue,\n+        boolean clearSession )\n     {\n-        User user = currentUserService.getCurrentUser();\n-        UserCredentials userCredentials = user.getUserCredentials();\n-\n-        EventSearchParams params = new EventSearchParams();\n-\n-        Program pr = programService.getProgram( program );\n-\n-        if ( !StringUtils.isEmpty( program ) && pr == null )\n-        {\n-            throw new IllegalQueryException( \"Program is specified but does not exist: \" + program );\n-        }\n-\n-        ProgramStage ps = programStageService.getProgramStage( programStage );\n+        ImportSummaries importSummaries = new ImportSummaries();\n+        importOptions = updateImportOptions( importOptions );\n+        List<List<Event>> partitions = Lists.partition( events, FLUSH_FREQUENCY );\n \n-        if ( !StringUtils.isEmpty( programStage ) && ps == null )\n+        for ( List<Event> _events : partitions )\n         {\n-            throw new IllegalQueryException( \"Program stage is specified but does not exist: \" + programStage );\n-        }\n-\n-        OrganisationUnit ou = organisationUnitService.getOrganisationUnit( orgUnit );\n+            reloadUser( importOptions );\n+            // prepareCaches( importOptions.getUser(), _events );\n \n-        if ( !StringUtils.isEmpty( orgUnit ) && ou == null )\n-        {\n-            throw new IllegalQueryException( \"Org unit is specified but does not exist: \" + orgUnit );\n-        }\n+            for ( Event event : _events )\n+            {\n+                importSummaries.addImportSummary( updateEvent( event, singleValue, importOptions, true ) );\n+            }\n \n-        if ( ou != null && !organisationUnitService.isInUserHierarchy( ou ) )\n-        {\n-            if ( !userCredentials.isSuper()\n-                && !userCredentials.isAuthorized( \"F_TRACKED_ENTITY_INSTANCE_SEARCH_IN_ALL_ORGUNITS\" ) )\n+            if ( clearSession && events.size() >= FLUSH_FREQUENCY )\n             {\n-                throw new IllegalQueryException( \"User has no access to organisation unit: \" + ou.getUid() );\n+                // clearSession( importOptions.getUser() );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyODc0Ng=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 798}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzczMTU5OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOToxNDoxMVrOGrdu2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNToyOToxNVrOGrq3WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyOTA4Mg==", "bodyText": "Commented out?", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448229082", "createdAt": "2020-07-01T09:14:11Z", "author": {"login": "netroms"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java", "diffHunk": "@@ -1556,607 +743,141 @@ public ImportSummary deleteEvent( String uid )\n         {\n             ProgramStageInstance programStageInstance = programStageInstanceService.getProgramStageInstance( uid );\n \n-            List<String> errors = trackerAccessManager.canDelete( currentUserService.getCurrentUser(), programStageInstance, false );\n+            List<String> errors = trackerAccessManager.canDelete( currentUserService.getCurrentUser(),\n+                programStageInstance, false );\n \n             if ( !errors.isEmpty() )\n             {\n                 return new ImportSummary( ImportStatus.ERROR, errors.toString() ).incrementIgnored();\n             }\n \n-            programStageInstanceService.deleteProgramStageInstance( programStageInstance );\n-\n-            if ( programStageInstance.getProgramStage().getProgram().isRegistration() )\n-            {\n-                entityInstanceService.updateTrackedEntityInstance( programStageInstance.getProgramInstance().getEntityInstance() );\n-            }\n-\n-            ImportSummary importSummary = new ImportSummary( ImportStatus.SUCCESS, \"Deletion of event \" + uid + \" was successful\" ).incrementDeleted();\n-            importSummary.setReference( uid );\n-            return importSummary;\n-        }\n-        else\n-        {\n-            return new ImportSummary( ImportStatus.SUCCESS, \"Event \" + uid + \" cannot be deleted as it is not present in the system\" ).incrementIgnored();\n-        }\n-    }\n-\n-    @Transactional\n-    @Override\n-    public ImportSummaries deleteEvents( List<String> uids, boolean clearSession )\n-    {\n-        User user = currentUserService.getCurrentUser();\n-        ImportSummaries importSummaries = new ImportSummaries();\n-        int counter = 0;\n-\n-        for ( String uid : uids )\n-        {\n-            importSummaries.addImportSummary( deleteEvent( uid ) );\n-\n-            if ( clearSession && counter % FLUSH_FREQUENCY == 0 )\n-            {\n-                clearSession( user );\n-            }\n-\n-            counter++;\n-        }\n-\n-        return importSummaries;\n-    }\n-\n-    // -------------------------------------------------------------------------\n-    // HELPERS\n-    // -------------------------------------------------------------------------\n-\n-    @SuppressWarnings( \"unchecked\" )\n-    private void prepareCaches( User user, List<Event> events )\n-    {\n-        // prepare caches\n-        Collection<String> orgUnits = events.stream().map( Event::getOrgUnit ).collect( Collectors.toSet() );\n-        Collection<String> programIds = events.stream().map( Event::getProgram ).collect( Collectors.toSet() );\n-        Collection<String> eventIds = events.stream().map( Event::getEvent ).collect( Collectors.toList() );\n-        Collection<String> userIds = events.stream().map( Event::getAssignedUser ).collect( Collectors.toSet() );\n-\n-        if ( !orgUnits.isEmpty() )\n-        {\n-            Query query = Query.from( schemaService.getDynamicSchema( OrganisationUnit.class ) );\n-            query.setUser( user );\n-            query.add( Restrictions.in( \"id\", orgUnits ) );\n-            queryService.query( query ).forEach( ou -> organisationUnitCache.put( ou.getUid(), (OrganisationUnit) ou ) );\n-        }\n-\n-        if ( !programIds.isEmpty() )\n-        {\n-            Query query = Query.from( schemaService.getDynamicSchema( Program.class ) );\n-            query.setUser( user );\n-            query.add( Restrictions.in( \"id\", programIds ) );\n-\n-            List<Program> programs = (List<Program>) queryService.query( query );\n-\n-            if ( !programs.isEmpty() )\n-            {\n-                for ( Program program : programs )\n-                {\n-                    programCache.put( program.getUid(), program );\n-                    programStageCache.putAll( program.getProgramStages().stream().collect( Collectors.toMap( ProgramStage::getUid, ps -> ps ) ) );\n-\n-                    for ( ProgramStage programStage : program.getProgramStages() )\n-                    {\n-                        for ( DataElement dataElement : programStage.getDataElements() )\n-                        {\n-                            DATA_ELEM_CACHE.put( dataElement.getUid(), dataElement );\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-\n-        if ( !eventIds.isEmpty() )\n-        {\n-            eventSyncService.getEvents( (List<String>) eventIds ).forEach( psi -> programStageInstanceCache.put( psi.getUid(), psi ) );\n-\n-            manager.getObjects( TrackedEntityInstance.class, IdentifiableProperty.UID,\n-                events.stream()\n-                    .filter( event -> event.getTrackedEntityInstance() != null )\n-                    .map( Event::getTrackedEntityInstance ).collect( Collectors.toSet() ) )\n-                .forEach( tei -> trackedEntityInstanceCache.put( tei.getUid(), tei ) );\n-\n-            manager.getObjects( ProgramInstance.class, IdentifiableProperty.UID,\n-                events.stream()\n-                    .filter( event -> event.getEnrollment() != null )\n-                    .map( Event::getEnrollment ).collect( Collectors.toSet() ) )\n-                .forEach( tei -> programInstanceCache.put( tei.getUid(), tei ) );\n-        }\n-\n-        if ( !userIds.isEmpty() )\n-        {\n-            Query query = Query.from( schemaService.getDynamicSchema( User.class ) );\n-            query.setUser( user );\n-            query.add( Restrictions.in( \"id\", userIds ) );\n-            queryService.query( query ).forEach( assignedUser -> userCache.put( assignedUser.getUid(), (User) assignedUser ) );\n-        }\n-    }\n-\n-    private List<OrganisationUnit> getOrganisationUnits( EventSearchParams params )\n-    {\n-        List<OrganisationUnit> organisationUnits = new ArrayList<>();\n-\n-        OrganisationUnit orgUnit = params.getOrgUnit();\n-        OrganisationUnitSelectionMode orgUnitSelectionMode = params.getOrgUnitSelectionMode();\n-\n-        if ( params.getOrgUnit() != null )\n-        {\n-            if ( OrganisationUnitSelectionMode.DESCENDANTS.equals( orgUnitSelectionMode ) )\n-            {\n-                organisationUnits.addAll( organisationUnitService.getOrganisationUnitWithChildren( orgUnit.getUid() ) );\n-            }\n-            else if ( OrganisationUnitSelectionMode.CHILDREN.equals( orgUnitSelectionMode ) )\n-            {\n-                organisationUnits.add( orgUnit );\n-                organisationUnits.addAll( orgUnit.getChildren() );\n-            }\n-            else // SELECTED\n-            {\n-                organisationUnits.add( orgUnit );\n-            }\n-        }\n-\n-        return organisationUnits;\n-    }\n-\n-    private ImportSummary saveEvent( Program program, ProgramInstance programInstance, ProgramStage programStage,\n-        ProgramStageInstance programStageInstance, OrganisationUnit organisationUnit, Event event, User assignedUser,\n-        ImportOptions importOptions, boolean bulkSave )\n-    {\n-        Assert.notNull( program, \"Program cannot be null\" );\n-        Assert.notNull( programInstance, \"Program instance cannot be null\" );\n-        Assert.notNull( programStage, \"Program stage cannot be null\" );\n-\n-        ImportSummary importSummary = new ImportSummary( event.getEvent() );\n-        importOptions = updateImportOptions( importOptions );\n-\n-        boolean dryRun = importOptions.isDryRun();\n-\n-        List<String> errors = validateEvent( event, programInstance, importOptions );\n-\n-        if ( !errors.isEmpty() )\n-        {\n-            importSummary.setStatus( ImportStatus.ERROR );\n-            importSummary.getConflicts().addAll( errors.stream().map( s -> new ImportConflict( \"Event\", s ) ).collect( Collectors.toList() ) );\n-            importSummary.incrementIgnored();\n-\n-            return importSummary;\n-        }\n-\n-        Date executionDate = null;\n-\n-        if ( event.getEventDate() != null )\n-        {\n-            executionDate = DateUtils.parseDate( event.getEventDate() );\n-        }\n-\n-        Date dueDate = new Date();\n-\n-        if ( event.getDueDate() != null )\n-        {\n-            dueDate = DateUtils.parseDate( event.getDueDate() );\n-        }\n-\n-        User user = importOptions.getUser();\n-\n-        String storedBy = getValidUsername( event.getStoredBy(), importSummary, User.username( user, Constants.UNKNOWN ) );\n-        String completedBy = getValidUsername( event.getCompletedBy(), importSummary, User.username( user, Constants.UNKNOWN ) );\n-\n-        CategoryOptionCombo aoc;\n-\n-        if ( (event.getAttributeCategoryOptions() != null && program.getCategoryCombo() != null)\n-            || event.getAttributeOptionCombo() != null )\n-        {\n-            IdScheme idScheme = importOptions.getIdSchemes().getCategoryOptionIdScheme();\n-\n-            try\n-            {\n-                aoc = getAttributeOptionCombo( program.getCategoryCombo(), event.getAttributeCategoryOptions(),\n-                    event.getAttributeOptionCombo(), idScheme );\n-            }\n-            catch ( IllegalQueryException ex )\n-            {\n-                importSummary.getConflicts().add( new ImportConflict( ex.getMessage(), event.getAttributeCategoryOptions() ) );\n-                importSummary.setStatus( ImportStatus.ERROR );\n-                return importSummary.incrementIgnored();\n-            }\n-        }\n-        else\n-        {\n-            aoc = (CategoryOptionCombo) getDefaultObject( CategoryOptionCombo.class );\n-        }\n-\n-        if ( aoc != null && aoc.isDefault() && program.getCategoryCombo() != null && !program.getCategoryCombo().isDefault() )\n-        {\n-            importSummary.getConflicts().add( new ImportConflict( \"attributeOptionCombo\", \"Default attribute option combo is not allowed since program has non-default category combo\" ) );\n-            importSummary.setStatus( ImportStatus.ERROR );\n-            return importSummary.incrementIgnored();\n-        }\n-\n-        Date eventDate = executionDate != null ? executionDate : dueDate;\n-\n-        validateAttributeOptionComboDate( aoc, eventDate );\n-\n-        errors = trackerAccessManager.canWrite( user, aoc );\n-\n-        if ( !errors.isEmpty() )\n-        {\n-            importSummary.setStatus( ImportStatus.ERROR );\n-            importSummary.getConflicts().addAll( errors.stream().map( s -> new ImportConflict( \"CategoryOptionCombo\", s ) ).collect( Collectors.toList() ) );\n-            importSummary.incrementIgnored();\n-\n-            return importSummary;\n-        }\n-\n-        if ( !dryRun )\n-        {\n-            if ( programStageInstance == null )\n-            {\n-                programStageInstance = createProgramStageInstance( event, programStage, programInstance,\n-                    organisationUnit, dueDate, executionDate, event.getStatus().getValue(),\n-                    completedBy, storedBy, event.getEvent(), aoc, assignedUser, importOptions, importSummary );\n-\n-                if ( program.isRegistration() )\n-                {\n-                    programInstance.getProgramStageInstances().add( programStageInstance );\n-                }\n-            }\n-            else\n-            {\n-                updateProgramStageInstance( event, programStage, programInstance, organisationUnit, dueDate,\n-                    executionDate, event.getStatus().getValue(), completedBy, storedBy,\n-                    programStageInstance, aoc, assignedUser, importOptions, importSummary );\n-            }\n-\n-            if ( !importOptions.isSkipLastUpdated() )\n-            {\n-                updateTrackedEntityInstance( programStageInstance, user, bulkSave );\n-            }\n-\n-            importSummary.setReference( programStageInstance.getUid() );\n-        }\n-\n-        if ( dryRun && programStageInstance == null )\n-        {\n-\n-            log.error( \"The request is a dry run and at the same time the programStageInstance is null. This will lead to NullPointerException. Stopping it now.\" );\n-            importSummary.setStatus( ImportStatus.ERROR );\n-            importSummary.setDescription( \"The request is a dryRun. However, the provided event does not point to a valid event: \" + event.getEvent() + \". Cannot continue.\" );\n-\n-            return importSummary.setReference( event.getEvent() ).incrementIgnored();\n-        }\n-\n-        programInstanceCache.put( programInstance.getUid(), programInstance );\n-        sendProgramNotification( programStageInstance, importOptions );\n-\n-        if ( importSummary.getConflicts().size() > 0 )\n-        {\n-            importSummary.setStatus( ImportStatus.ERROR );\n-            importSummary.incrementIgnored();\n-        }\n-        else\n-        {\n-            importSummary.setStatus( ImportStatus.SUCCESS );\n-            importSummary.incrementImported();\n-        }\n-\n-        return importSummary;\n-    }\n-\n-    private void sendProgramNotification( ProgramStageInstance programStageInstance, ImportOptions importOptions )\n-    {\n-        if ( !importOptions.isSkipNotifications() )\n-        {\n-            if ( programStageInstance.isCompleted() )\n-            {\n-                eventPublisher.publishEvent( new ProgramStageCompletionNotificationEvent( this, programStageInstance.getId() ) );\n-                eventPublisher.publishEvent( new StageCompletionEvaluationEvent( this, programStageInstance.getId() ) );\n-            }\n-\n-            if ( EventStatus.SCHEDULE.equals( programStageInstance.getStatus() ) )\n-            {\n-                eventPublisher.publishEvent( new StageScheduledEvaluationEvent( this, programStageInstance.getId() ) );\n-            }\n-        }\n-    }\n-\n-    private ProgramStageInstance createProgramStageInstance( Event event, ProgramStage programStage,\n-        ProgramInstance programInstance, OrganisationUnit organisationUnit, Date dueDate, Date executionDate,\n-        int status, String completedBy, String storedBy, String programStageInstanceIdentifier,\n-        CategoryOptionCombo aoc, User assignedUser, ImportOptions importOptions, ImportSummary importSummary )\n-    {\n-        ProgramStageInstance programStageInstance = new ProgramStageInstance();\n-\n-        if ( importOptions.getIdSchemes().getProgramStageInstanceIdScheme().equals( IdScheme.UID ) )\n-        {\n-            programStageInstance\n-                .setUid( CodeGenerator.isValidUid( programStageInstanceIdentifier ) ? programStageInstanceIdentifier\n-                    : CodeGenerator.generateUid() );\n-        }\n-        else if ( importOptions.getIdSchemes().getProgramStageInstanceIdScheme().equals( IdScheme.CODE ) )\n-        {\n-            programStageInstance.setUid( CodeGenerator.generateUid() );\n-            programStageInstance.setCode( programStageInstanceIdentifier );\n-        }\n-\n-        programStageInstance.setStoredBy( storedBy );\n-\n-        updateProgramStageInstance( event, programStage, programInstance, organisationUnit, dueDate, executionDate,\n-            status, completedBy, storedBy, programStageInstance, aoc, assignedUser, importOptions, importSummary );\n-\n-        return programStageInstance;\n-    }\n-\n-    private void updateProgramStageInstance( Event event, ProgramStage programStage, ProgramInstance programInstance,\n-        OrganisationUnit organisationUnit, Date dueDate, Date executionDate, int status,\n-        String completedBy, String storedBy, ProgramStageInstance programStageInstance, CategoryOptionCombo aoc, User assignedUser,\n-        ImportOptions importOptions, ImportSummary importSummary )\n-    {\n-        programStageInstance.setProgramInstance( programInstance );\n-        programStageInstance.setProgramStage( programStage );\n-        programStageInstance.setDueDate( dueDate );\n-        programStageInstance.setExecutionDate( executionDate );\n-        programStageInstance.setOrganisationUnit( organisationUnit );\n-        programStageInstance.setAttributeOptionCombo( aoc );\n-        programStageInstance.setGeometry( event.getGeometry() );\n-\n-        if ( programStageInstance.getProgramStage().isEnableUserAssignment() )\n-        {\n-            programStageInstance.setAssignedUser( assignedUser );\n-        }\n-\n-        updateDateFields( event, programStageInstance );\n-\n-        programStageInstance.setStatus( EventStatus.fromInt( status ) );\n-\n-        saveTrackedEntityComment( programStageInstance, event, storedBy );\n-\n-        if ( programStageInstance.isCompleted() )\n-        {\n-            Date completedDate = new Date();\n-            if ( event.getCompletedDate() != null )\n-            {\n-                completedDate = DateUtils.parseDate( event.getCompletedDate() );\n-            }\n-            programStageInstance.setCompletedBy( completedBy );\n-            programStageInstance.setCompletedDate( completedDate );\n-        }\n-\n-        preheatDataElementsCache( event, importOptions );\n-\n-        if ( programStageInstance.getId() == 0 )\n-        {\n-            programStageInstance.setAutoFields();\n-            programStageInstanceService.addProgramStageInstance( programStageInstance, importOptions.getUser() );\n-\n-            eventDataValueService.processDataValues( programStageInstance, event, false, importOptions, importSummary, DATA_ELEM_CACHE );\n-            programStageInstanceService.updateProgramStageInstance( programStageInstance, importOptions.getUser() );\n-        }\n-        else\n-        {\n-            eventDataValueService.processDataValues( programStageInstance, event, false, importOptions, importSummary, DATA_ELEM_CACHE );\n-            programStageInstanceService.updateProgramStageInstance( programStageInstance, importOptions.getUser() );\n-        }\n-    }\n-\n-    private void saveTrackedEntityComment( ProgramStageInstance programStageInstance, Event event, String storedBy )\n-    {\n-        for ( Note note : event.getNotes() )\n-        {\n-            String noteUid = CodeGenerator.isValidUid( note.getNote() ) ? note.getNote() : CodeGenerator.generateUid();\n-\n-            if ( !commentService.trackedEntityCommentExists( noteUid ) && !StringUtils.isEmpty( note.getValue() ) )\n-            {\n-                TrackedEntityComment comment = new TrackedEntityComment();\n-                comment.setUid( noteUid );\n-                comment.setCommentText( note.getValue() );\n-                comment.setCreator( getValidUsername( note.getStoredBy(), null, storedBy ) );\n-\n-                Date created = DateUtils.parseDate( note.getStoredDate() );\n-                comment.setCreated( created );\n-\n-                commentService.addTrackedEntityComment( comment );\n-\n-                programStageInstance.getComments().add( comment );\n-            }\n-        }\n-    }\n-\n-    public static String getValidUsername( String userName, ImportSummary importSummary, String fallbackUsername )\n-    {\n-        if ( StringUtils.isEmpty( userName ) )\n-        {\n-            return fallbackUsername;\n-        }\n-        else if ( userName.length() > UserCredentials.USERNAME_MAX_LENGTH )\n-        {\n-            if ( importSummary != null )\n-            {\n-                importSummary.getConflicts().add( new ImportConflict( \"Username\",\n-                    userName + \" is more than \" + UserCredentials.USERNAME_MAX_LENGTH + \" characters, using current username instead\" ) );\n-            }\n-\n-            return fallbackUsername;\n-        }\n-\n-        return userName;\n-    }\n-\n-    private OrganisationUnit getOrganisationUnit( IdSchemes idSchemes, String id )\n-    {\n-        return organisationUnitCache.get( id,\n-            () -> manager.getObject( OrganisationUnit.class, idSchemes.getOrgUnitIdScheme(), id ) );\n-    }\n-\n-    private ProgramStageInstance getProgramStageInstance( String uid )\n-    {\n-        if ( uid == null )\n-        {\n-            return null;\n-        }\n-\n-        ProgramStageInstance programStageInstance = programStageInstanceCache.get( uid );\n-\n-        if ( programStageInstance == null )\n-        {\n-            programStageInstance = eventSyncService.getEvent( uid );\n-\n-            programStageInstanceCache.put( uid, programStageInstance );\n-        }\n-\n-        return programStageInstance;\n-    }\n-\n-    private ProgramInstance getProgramInstance( String uid )\n-    {\n-        if ( uid == null )\n-        {\n-            return null;\n-        }\n-\n-        ProgramInstance programInstance = programInstanceCache.get( uid );\n-\n-        if ( programInstance == null )\n-        {\n-            eventSyncService.getEnrollment( uid );\n-        }\n-\n-        return programInstance;\n-    }\n-\n-    private User getUser( String uid )\n-    {\n-        if ( uid == null )\n-        {\n-            return null;\n-        }\n-\n-        User user = userCache.get( uid );\n-\n-        if ( user == null )\n-        {\n-            user = userService.getUser( uid );\n-            userCache.put( uid, user );\n-        }\n-\n-        return user;\n-    }\n-\n-    private TrackedEntityInstance getTrackedEntityInstance( String uid )\n-    {\n-        if ( uid == null )\n-        {\n-            return null;\n-        }\n-\n-        TrackedEntityInstance tei = trackedEntityInstanceCache.get( uid );\n+            programStageInstanceService.deleteProgramStageInstance( programStageInstance );\n \n-        if ( tei == null )\n-        {\n-            tei = entityInstanceService.getTrackedEntityInstance( uid );\n+            if ( programStageInstance.getProgramStage().getProgram().isRegistration() )\n+            {\n+                entityInstanceService\n+                    .updateTrackedEntityInstance( programStageInstance.getProgramInstance().getEntityInstance() );\n+            }\n \n-            trackedEntityInstanceCache.put( uid, tei );\n+            ImportSummary importSummary = new ImportSummary( ImportStatus.SUCCESS,\n+                \"Deletion of event \" + uid + \" was successful\" ).incrementDeleted();\n+            importSummary.setReference( uid );\n+            return importSummary;\n         }\n-\n-        return tei;\n-    }\n-\n-    private Program getProgram( IdScheme idScheme, String id )\n-    {\n-        if ( id == null )\n+        else\n         {\n-            return null;\n+            return new ImportSummary( ImportStatus.SUCCESS,\n+                \"Event \" + uid + \" cannot be deleted as it is not present in the system\" ).incrementIgnored();\n         }\n+    }\n \n-        Program program = programCache.get( id );\n+    @Transactional\n+    @Override\n+    public ImportSummaries deleteEvents( List<String> uids, boolean clearSession )\n+    {\n+        ImportSummaries importSummaries = new ImportSummaries();\n+        int counter = 0;\n \n-        if ( program == null )\n+        for ( String uid : uids )\n         {\n-            program = manager.getObject( Program.class, idScheme, id );\n+            importSummaries.addImportSummary( deleteEvent( uid ) );\n \n-            if ( program != null )\n+            if ( clearSession && counter % FLUSH_FREQUENCY == 0 )\n             {\n-                programCache.put( id, program );\n-\n-                programStageCache.putAll( program.getProgramStages().stream().collect( Collectors.toMap( ProgramStage::getUid, ps -> ps ) ) );\n-\n-                cacheDataElements( program.getProgramStages() );\n+                // clearSession( user );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 1821}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ0NDI0OQ==", "bodyText": "@maikelarabori can you look at this function - we can discuss it together, I don't remember why this was commented out", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448444249", "createdAt": "2020-07-01T15:29:15Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java", "diffHunk": "@@ -1556,607 +743,141 @@ public ImportSummary deleteEvent( String uid )\n         {\n             ProgramStageInstance programStageInstance = programStageInstanceService.getProgramStageInstance( uid );\n \n-            List<String> errors = trackerAccessManager.canDelete( currentUserService.getCurrentUser(), programStageInstance, false );\n+            List<String> errors = trackerAccessManager.canDelete( currentUserService.getCurrentUser(),\n+                programStageInstance, false );\n \n             if ( !errors.isEmpty() )\n             {\n                 return new ImportSummary( ImportStatus.ERROR, errors.toString() ).incrementIgnored();\n             }\n \n-            programStageInstanceService.deleteProgramStageInstance( programStageInstance );\n-\n-            if ( programStageInstance.getProgramStage().getProgram().isRegistration() )\n-            {\n-                entityInstanceService.updateTrackedEntityInstance( programStageInstance.getProgramInstance().getEntityInstance() );\n-            }\n-\n-            ImportSummary importSummary = new ImportSummary( ImportStatus.SUCCESS, \"Deletion of event \" + uid + \" was successful\" ).incrementDeleted();\n-            importSummary.setReference( uid );\n-            return importSummary;\n-        }\n-        else\n-        {\n-            return new ImportSummary( ImportStatus.SUCCESS, \"Event \" + uid + \" cannot be deleted as it is not present in the system\" ).incrementIgnored();\n-        }\n-    }\n-\n-    @Transactional\n-    @Override\n-    public ImportSummaries deleteEvents( List<String> uids, boolean clearSession )\n-    {\n-        User user = currentUserService.getCurrentUser();\n-        ImportSummaries importSummaries = new ImportSummaries();\n-        int counter = 0;\n-\n-        for ( String uid : uids )\n-        {\n-            importSummaries.addImportSummary( deleteEvent( uid ) );\n-\n-            if ( clearSession && counter % FLUSH_FREQUENCY == 0 )\n-            {\n-                clearSession( user );\n-            }\n-\n-            counter++;\n-        }\n-\n-        return importSummaries;\n-    }\n-\n-    // -------------------------------------------------------------------------\n-    // HELPERS\n-    // -------------------------------------------------------------------------\n-\n-    @SuppressWarnings( \"unchecked\" )\n-    private void prepareCaches( User user, List<Event> events )\n-    {\n-        // prepare caches\n-        Collection<String> orgUnits = events.stream().map( Event::getOrgUnit ).collect( Collectors.toSet() );\n-        Collection<String> programIds = events.stream().map( Event::getProgram ).collect( Collectors.toSet() );\n-        Collection<String> eventIds = events.stream().map( Event::getEvent ).collect( Collectors.toList() );\n-        Collection<String> userIds = events.stream().map( Event::getAssignedUser ).collect( Collectors.toSet() );\n-\n-        if ( !orgUnits.isEmpty() )\n-        {\n-            Query query = Query.from( schemaService.getDynamicSchema( OrganisationUnit.class ) );\n-            query.setUser( user );\n-            query.add( Restrictions.in( \"id\", orgUnits ) );\n-            queryService.query( query ).forEach( ou -> organisationUnitCache.put( ou.getUid(), (OrganisationUnit) ou ) );\n-        }\n-\n-        if ( !programIds.isEmpty() )\n-        {\n-            Query query = Query.from( schemaService.getDynamicSchema( Program.class ) );\n-            query.setUser( user );\n-            query.add( Restrictions.in( \"id\", programIds ) );\n-\n-            List<Program> programs = (List<Program>) queryService.query( query );\n-\n-            if ( !programs.isEmpty() )\n-            {\n-                for ( Program program : programs )\n-                {\n-                    programCache.put( program.getUid(), program );\n-                    programStageCache.putAll( program.getProgramStages().stream().collect( Collectors.toMap( ProgramStage::getUid, ps -> ps ) ) );\n-\n-                    for ( ProgramStage programStage : program.getProgramStages() )\n-                    {\n-                        for ( DataElement dataElement : programStage.getDataElements() )\n-                        {\n-                            DATA_ELEM_CACHE.put( dataElement.getUid(), dataElement );\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-\n-        if ( !eventIds.isEmpty() )\n-        {\n-            eventSyncService.getEvents( (List<String>) eventIds ).forEach( psi -> programStageInstanceCache.put( psi.getUid(), psi ) );\n-\n-            manager.getObjects( TrackedEntityInstance.class, IdentifiableProperty.UID,\n-                events.stream()\n-                    .filter( event -> event.getTrackedEntityInstance() != null )\n-                    .map( Event::getTrackedEntityInstance ).collect( Collectors.toSet() ) )\n-                .forEach( tei -> trackedEntityInstanceCache.put( tei.getUid(), tei ) );\n-\n-            manager.getObjects( ProgramInstance.class, IdentifiableProperty.UID,\n-                events.stream()\n-                    .filter( event -> event.getEnrollment() != null )\n-                    .map( Event::getEnrollment ).collect( Collectors.toSet() ) )\n-                .forEach( tei -> programInstanceCache.put( tei.getUid(), tei ) );\n-        }\n-\n-        if ( !userIds.isEmpty() )\n-        {\n-            Query query = Query.from( schemaService.getDynamicSchema( User.class ) );\n-            query.setUser( user );\n-            query.add( Restrictions.in( \"id\", userIds ) );\n-            queryService.query( query ).forEach( assignedUser -> userCache.put( assignedUser.getUid(), (User) assignedUser ) );\n-        }\n-    }\n-\n-    private List<OrganisationUnit> getOrganisationUnits( EventSearchParams params )\n-    {\n-        List<OrganisationUnit> organisationUnits = new ArrayList<>();\n-\n-        OrganisationUnit orgUnit = params.getOrgUnit();\n-        OrganisationUnitSelectionMode orgUnitSelectionMode = params.getOrgUnitSelectionMode();\n-\n-        if ( params.getOrgUnit() != null )\n-        {\n-            if ( OrganisationUnitSelectionMode.DESCENDANTS.equals( orgUnitSelectionMode ) )\n-            {\n-                organisationUnits.addAll( organisationUnitService.getOrganisationUnitWithChildren( orgUnit.getUid() ) );\n-            }\n-            else if ( OrganisationUnitSelectionMode.CHILDREN.equals( orgUnitSelectionMode ) )\n-            {\n-                organisationUnits.add( orgUnit );\n-                organisationUnits.addAll( orgUnit.getChildren() );\n-            }\n-            else // SELECTED\n-            {\n-                organisationUnits.add( orgUnit );\n-            }\n-        }\n-\n-        return organisationUnits;\n-    }\n-\n-    private ImportSummary saveEvent( Program program, ProgramInstance programInstance, ProgramStage programStage,\n-        ProgramStageInstance programStageInstance, OrganisationUnit organisationUnit, Event event, User assignedUser,\n-        ImportOptions importOptions, boolean bulkSave )\n-    {\n-        Assert.notNull( program, \"Program cannot be null\" );\n-        Assert.notNull( programInstance, \"Program instance cannot be null\" );\n-        Assert.notNull( programStage, \"Program stage cannot be null\" );\n-\n-        ImportSummary importSummary = new ImportSummary( event.getEvent() );\n-        importOptions = updateImportOptions( importOptions );\n-\n-        boolean dryRun = importOptions.isDryRun();\n-\n-        List<String> errors = validateEvent( event, programInstance, importOptions );\n-\n-        if ( !errors.isEmpty() )\n-        {\n-            importSummary.setStatus( ImportStatus.ERROR );\n-            importSummary.getConflicts().addAll( errors.stream().map( s -> new ImportConflict( \"Event\", s ) ).collect( Collectors.toList() ) );\n-            importSummary.incrementIgnored();\n-\n-            return importSummary;\n-        }\n-\n-        Date executionDate = null;\n-\n-        if ( event.getEventDate() != null )\n-        {\n-            executionDate = DateUtils.parseDate( event.getEventDate() );\n-        }\n-\n-        Date dueDate = new Date();\n-\n-        if ( event.getDueDate() != null )\n-        {\n-            dueDate = DateUtils.parseDate( event.getDueDate() );\n-        }\n-\n-        User user = importOptions.getUser();\n-\n-        String storedBy = getValidUsername( event.getStoredBy(), importSummary, User.username( user, Constants.UNKNOWN ) );\n-        String completedBy = getValidUsername( event.getCompletedBy(), importSummary, User.username( user, Constants.UNKNOWN ) );\n-\n-        CategoryOptionCombo aoc;\n-\n-        if ( (event.getAttributeCategoryOptions() != null && program.getCategoryCombo() != null)\n-            || event.getAttributeOptionCombo() != null )\n-        {\n-            IdScheme idScheme = importOptions.getIdSchemes().getCategoryOptionIdScheme();\n-\n-            try\n-            {\n-                aoc = getAttributeOptionCombo( program.getCategoryCombo(), event.getAttributeCategoryOptions(),\n-                    event.getAttributeOptionCombo(), idScheme );\n-            }\n-            catch ( IllegalQueryException ex )\n-            {\n-                importSummary.getConflicts().add( new ImportConflict( ex.getMessage(), event.getAttributeCategoryOptions() ) );\n-                importSummary.setStatus( ImportStatus.ERROR );\n-                return importSummary.incrementIgnored();\n-            }\n-        }\n-        else\n-        {\n-            aoc = (CategoryOptionCombo) getDefaultObject( CategoryOptionCombo.class );\n-        }\n-\n-        if ( aoc != null && aoc.isDefault() && program.getCategoryCombo() != null && !program.getCategoryCombo().isDefault() )\n-        {\n-            importSummary.getConflicts().add( new ImportConflict( \"attributeOptionCombo\", \"Default attribute option combo is not allowed since program has non-default category combo\" ) );\n-            importSummary.setStatus( ImportStatus.ERROR );\n-            return importSummary.incrementIgnored();\n-        }\n-\n-        Date eventDate = executionDate != null ? executionDate : dueDate;\n-\n-        validateAttributeOptionComboDate( aoc, eventDate );\n-\n-        errors = trackerAccessManager.canWrite( user, aoc );\n-\n-        if ( !errors.isEmpty() )\n-        {\n-            importSummary.setStatus( ImportStatus.ERROR );\n-            importSummary.getConflicts().addAll( errors.stream().map( s -> new ImportConflict( \"CategoryOptionCombo\", s ) ).collect( Collectors.toList() ) );\n-            importSummary.incrementIgnored();\n-\n-            return importSummary;\n-        }\n-\n-        if ( !dryRun )\n-        {\n-            if ( programStageInstance == null )\n-            {\n-                programStageInstance = createProgramStageInstance( event, programStage, programInstance,\n-                    organisationUnit, dueDate, executionDate, event.getStatus().getValue(),\n-                    completedBy, storedBy, event.getEvent(), aoc, assignedUser, importOptions, importSummary );\n-\n-                if ( program.isRegistration() )\n-                {\n-                    programInstance.getProgramStageInstances().add( programStageInstance );\n-                }\n-            }\n-            else\n-            {\n-                updateProgramStageInstance( event, programStage, programInstance, organisationUnit, dueDate,\n-                    executionDate, event.getStatus().getValue(), completedBy, storedBy,\n-                    programStageInstance, aoc, assignedUser, importOptions, importSummary );\n-            }\n-\n-            if ( !importOptions.isSkipLastUpdated() )\n-            {\n-                updateTrackedEntityInstance( programStageInstance, user, bulkSave );\n-            }\n-\n-            importSummary.setReference( programStageInstance.getUid() );\n-        }\n-\n-        if ( dryRun && programStageInstance == null )\n-        {\n-\n-            log.error( \"The request is a dry run and at the same time the programStageInstance is null. This will lead to NullPointerException. Stopping it now.\" );\n-            importSummary.setStatus( ImportStatus.ERROR );\n-            importSummary.setDescription( \"The request is a dryRun. However, the provided event does not point to a valid event: \" + event.getEvent() + \". Cannot continue.\" );\n-\n-            return importSummary.setReference( event.getEvent() ).incrementIgnored();\n-        }\n-\n-        programInstanceCache.put( programInstance.getUid(), programInstance );\n-        sendProgramNotification( programStageInstance, importOptions );\n-\n-        if ( importSummary.getConflicts().size() > 0 )\n-        {\n-            importSummary.setStatus( ImportStatus.ERROR );\n-            importSummary.incrementIgnored();\n-        }\n-        else\n-        {\n-            importSummary.setStatus( ImportStatus.SUCCESS );\n-            importSummary.incrementImported();\n-        }\n-\n-        return importSummary;\n-    }\n-\n-    private void sendProgramNotification( ProgramStageInstance programStageInstance, ImportOptions importOptions )\n-    {\n-        if ( !importOptions.isSkipNotifications() )\n-        {\n-            if ( programStageInstance.isCompleted() )\n-            {\n-                eventPublisher.publishEvent( new ProgramStageCompletionNotificationEvent( this, programStageInstance.getId() ) );\n-                eventPublisher.publishEvent( new StageCompletionEvaluationEvent( this, programStageInstance.getId() ) );\n-            }\n-\n-            if ( EventStatus.SCHEDULE.equals( programStageInstance.getStatus() ) )\n-            {\n-                eventPublisher.publishEvent( new StageScheduledEvaluationEvent( this, programStageInstance.getId() ) );\n-            }\n-        }\n-    }\n-\n-    private ProgramStageInstance createProgramStageInstance( Event event, ProgramStage programStage,\n-        ProgramInstance programInstance, OrganisationUnit organisationUnit, Date dueDate, Date executionDate,\n-        int status, String completedBy, String storedBy, String programStageInstanceIdentifier,\n-        CategoryOptionCombo aoc, User assignedUser, ImportOptions importOptions, ImportSummary importSummary )\n-    {\n-        ProgramStageInstance programStageInstance = new ProgramStageInstance();\n-\n-        if ( importOptions.getIdSchemes().getProgramStageInstanceIdScheme().equals( IdScheme.UID ) )\n-        {\n-            programStageInstance\n-                .setUid( CodeGenerator.isValidUid( programStageInstanceIdentifier ) ? programStageInstanceIdentifier\n-                    : CodeGenerator.generateUid() );\n-        }\n-        else if ( importOptions.getIdSchemes().getProgramStageInstanceIdScheme().equals( IdScheme.CODE ) )\n-        {\n-            programStageInstance.setUid( CodeGenerator.generateUid() );\n-            programStageInstance.setCode( programStageInstanceIdentifier );\n-        }\n-\n-        programStageInstance.setStoredBy( storedBy );\n-\n-        updateProgramStageInstance( event, programStage, programInstance, organisationUnit, dueDate, executionDate,\n-            status, completedBy, storedBy, programStageInstance, aoc, assignedUser, importOptions, importSummary );\n-\n-        return programStageInstance;\n-    }\n-\n-    private void updateProgramStageInstance( Event event, ProgramStage programStage, ProgramInstance programInstance,\n-        OrganisationUnit organisationUnit, Date dueDate, Date executionDate, int status,\n-        String completedBy, String storedBy, ProgramStageInstance programStageInstance, CategoryOptionCombo aoc, User assignedUser,\n-        ImportOptions importOptions, ImportSummary importSummary )\n-    {\n-        programStageInstance.setProgramInstance( programInstance );\n-        programStageInstance.setProgramStage( programStage );\n-        programStageInstance.setDueDate( dueDate );\n-        programStageInstance.setExecutionDate( executionDate );\n-        programStageInstance.setOrganisationUnit( organisationUnit );\n-        programStageInstance.setAttributeOptionCombo( aoc );\n-        programStageInstance.setGeometry( event.getGeometry() );\n-\n-        if ( programStageInstance.getProgramStage().isEnableUserAssignment() )\n-        {\n-            programStageInstance.setAssignedUser( assignedUser );\n-        }\n-\n-        updateDateFields( event, programStageInstance );\n-\n-        programStageInstance.setStatus( EventStatus.fromInt( status ) );\n-\n-        saveTrackedEntityComment( programStageInstance, event, storedBy );\n-\n-        if ( programStageInstance.isCompleted() )\n-        {\n-            Date completedDate = new Date();\n-            if ( event.getCompletedDate() != null )\n-            {\n-                completedDate = DateUtils.parseDate( event.getCompletedDate() );\n-            }\n-            programStageInstance.setCompletedBy( completedBy );\n-            programStageInstance.setCompletedDate( completedDate );\n-        }\n-\n-        preheatDataElementsCache( event, importOptions );\n-\n-        if ( programStageInstance.getId() == 0 )\n-        {\n-            programStageInstance.setAutoFields();\n-            programStageInstanceService.addProgramStageInstance( programStageInstance, importOptions.getUser() );\n-\n-            eventDataValueService.processDataValues( programStageInstance, event, false, importOptions, importSummary, DATA_ELEM_CACHE );\n-            programStageInstanceService.updateProgramStageInstance( programStageInstance, importOptions.getUser() );\n-        }\n-        else\n-        {\n-            eventDataValueService.processDataValues( programStageInstance, event, false, importOptions, importSummary, DATA_ELEM_CACHE );\n-            programStageInstanceService.updateProgramStageInstance( programStageInstance, importOptions.getUser() );\n-        }\n-    }\n-\n-    private void saveTrackedEntityComment( ProgramStageInstance programStageInstance, Event event, String storedBy )\n-    {\n-        for ( Note note : event.getNotes() )\n-        {\n-            String noteUid = CodeGenerator.isValidUid( note.getNote() ) ? note.getNote() : CodeGenerator.generateUid();\n-\n-            if ( !commentService.trackedEntityCommentExists( noteUid ) && !StringUtils.isEmpty( note.getValue() ) )\n-            {\n-                TrackedEntityComment comment = new TrackedEntityComment();\n-                comment.setUid( noteUid );\n-                comment.setCommentText( note.getValue() );\n-                comment.setCreator( getValidUsername( note.getStoredBy(), null, storedBy ) );\n-\n-                Date created = DateUtils.parseDate( note.getStoredDate() );\n-                comment.setCreated( created );\n-\n-                commentService.addTrackedEntityComment( comment );\n-\n-                programStageInstance.getComments().add( comment );\n-            }\n-        }\n-    }\n-\n-    public static String getValidUsername( String userName, ImportSummary importSummary, String fallbackUsername )\n-    {\n-        if ( StringUtils.isEmpty( userName ) )\n-        {\n-            return fallbackUsername;\n-        }\n-        else if ( userName.length() > UserCredentials.USERNAME_MAX_LENGTH )\n-        {\n-            if ( importSummary != null )\n-            {\n-                importSummary.getConflicts().add( new ImportConflict( \"Username\",\n-                    userName + \" is more than \" + UserCredentials.USERNAME_MAX_LENGTH + \" characters, using current username instead\" ) );\n-            }\n-\n-            return fallbackUsername;\n-        }\n-\n-        return userName;\n-    }\n-\n-    private OrganisationUnit getOrganisationUnit( IdSchemes idSchemes, String id )\n-    {\n-        return organisationUnitCache.get( id,\n-            () -> manager.getObject( OrganisationUnit.class, idSchemes.getOrgUnitIdScheme(), id ) );\n-    }\n-\n-    private ProgramStageInstance getProgramStageInstance( String uid )\n-    {\n-        if ( uid == null )\n-        {\n-            return null;\n-        }\n-\n-        ProgramStageInstance programStageInstance = programStageInstanceCache.get( uid );\n-\n-        if ( programStageInstance == null )\n-        {\n-            programStageInstance = eventSyncService.getEvent( uid );\n-\n-            programStageInstanceCache.put( uid, programStageInstance );\n-        }\n-\n-        return programStageInstance;\n-    }\n-\n-    private ProgramInstance getProgramInstance( String uid )\n-    {\n-        if ( uid == null )\n-        {\n-            return null;\n-        }\n-\n-        ProgramInstance programInstance = programInstanceCache.get( uid );\n-\n-        if ( programInstance == null )\n-        {\n-            eventSyncService.getEnrollment( uid );\n-        }\n-\n-        return programInstance;\n-    }\n-\n-    private User getUser( String uid )\n-    {\n-        if ( uid == null )\n-        {\n-            return null;\n-        }\n-\n-        User user = userCache.get( uid );\n-\n-        if ( user == null )\n-        {\n-            user = userService.getUser( uid );\n-            userCache.put( uid, user );\n-        }\n-\n-        return user;\n-    }\n-\n-    private TrackedEntityInstance getTrackedEntityInstance( String uid )\n-    {\n-        if ( uid == null )\n-        {\n-            return null;\n-        }\n-\n-        TrackedEntityInstance tei = trackedEntityInstanceCache.get( uid );\n+            programStageInstanceService.deleteProgramStageInstance( programStageInstance );\n \n-        if ( tei == null )\n-        {\n-            tei = entityInstanceService.getTrackedEntityInstance( uid );\n+            if ( programStageInstance.getProgramStage().getProgram().isRegistration() )\n+            {\n+                entityInstanceService\n+                    .updateTrackedEntityInstance( programStageInstance.getProgramInstance().getEntityInstance() );\n+            }\n \n-            trackedEntityInstanceCache.put( uid, tei );\n+            ImportSummary importSummary = new ImportSummary( ImportStatus.SUCCESS,\n+                \"Deletion of event \" + uid + \" was successful\" ).incrementDeleted();\n+            importSummary.setReference( uid );\n+            return importSummary;\n         }\n-\n-        return tei;\n-    }\n-\n-    private Program getProgram( IdScheme idScheme, String id )\n-    {\n-        if ( id == null )\n+        else\n         {\n-            return null;\n+            return new ImportSummary( ImportStatus.SUCCESS,\n+                \"Event \" + uid + \" cannot be deleted as it is not present in the system\" ).incrementIgnored();\n         }\n+    }\n \n-        Program program = programCache.get( id );\n+    @Transactional\n+    @Override\n+    public ImportSummaries deleteEvents( List<String> uids, boolean clearSession )\n+    {\n+        ImportSummaries importSummaries = new ImportSummaries();\n+        int counter = 0;\n \n-        if ( program == null )\n+        for ( String uid : uids )\n         {\n-            program = manager.getObject( Program.class, idScheme, id );\n+            importSummaries.addImportSummary( deleteEvent( uid ) );\n \n-            if ( program != null )\n+            if ( clearSession && counter % FLUSH_FREQUENCY == 0 )\n             {\n-                programCache.put( id, program );\n-\n-                programStageCache.putAll( program.getProgramStages().stream().collect( Collectors.toMap( ProgramStage::getUid, ps -> ps ) ) );\n-\n-                cacheDataElements( program.getProgramStages() );\n+                // clearSession( user );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyOTA4Mg=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 1821}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzgyNzkxOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheck.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOTo0MjoxNVrOGresrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNTozMDowMVrOGrq5WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI0NDkwOA==", "bodyText": "Commented out code.", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448244908", "createdAt": "2020-07-01T09:42:15Z", "author": {"login": "netroms"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheck.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package org.hisp.dhis.dxf2.events.importer.shared.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n+import static org.hisp.dhis.util.DateUtils.getMediumDateString;\n+\n+import java.util.Date;\n+\n+import org.hisp.dhis.category.CategoryOption;\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.common.IllegalQueryException;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.util.DateUtils;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class AttributeOptionComboDateCheck implements Checker\n+{\n+    @Override\n+    public ImportSummary check( ImmutableEvent event, WorkContext ctx )\n+    {\n+        CategoryOptionCombo attributeOptionCombo = ctx.getCategoryOptionComboMap().get( event.getUid() );\n+\n+        Date executionDate = null;\n+\n+        if ( event.getEventDate() != null )\n+        {\n+            executionDate = DateUtils.parseDate( event.getEventDate() );\n+        }\n+\n+        Date dueDate = new Date();\n+\n+        if ( event.getDueDate() != null )\n+        {\n+            dueDate = DateUtils.parseDate( event.getDueDate() );\n+        }\n+\n+        Date eventDate = executionDate != null ? executionDate : dueDate;\n+\n+        if ( eventDate == null )\n+        {\n+            throw new IllegalQueryException( \"Event date can not be empty\" );\n+        }\n+\n+        for ( CategoryOption option : attributeOptionCombo.getCategoryOptions() )\n+        {\n+            if ( option.getStartDate() != null && eventDate.compareTo( option.getStartDate() ) < 0 )\n+            {\n+                // TODO: Could we replace the exception by ImportSummary error?\n+//                return error( \"Event date \" + getMediumDateString( date ) + \" is after end date \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ0NDc2MA==", "bodyText": "Yes, this is one of the open questions in the document: https://docs.google.com/document/d/1030nAuKxMSAYopNJj569inGgcJUS3DbqNrU-ZyZgSMI/edit#heading=h.p1u0vhrtwo4q", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448444760", "createdAt": "2020-07-01T15:30:01Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheck.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package org.hisp.dhis.dxf2.events.importer.shared.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n+import static org.hisp.dhis.util.DateUtils.getMediumDateString;\n+\n+import java.util.Date;\n+\n+import org.hisp.dhis.category.CategoryOption;\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.common.IllegalQueryException;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.util.DateUtils;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class AttributeOptionComboDateCheck implements Checker\n+{\n+    @Override\n+    public ImportSummary check( ImmutableEvent event, WorkContext ctx )\n+    {\n+        CategoryOptionCombo attributeOptionCombo = ctx.getCategoryOptionComboMap().get( event.getUid() );\n+\n+        Date executionDate = null;\n+\n+        if ( event.getEventDate() != null )\n+        {\n+            executionDate = DateUtils.parseDate( event.getEventDate() );\n+        }\n+\n+        Date dueDate = new Date();\n+\n+        if ( event.getDueDate() != null )\n+        {\n+            dueDate = DateUtils.parseDate( event.getDueDate() );\n+        }\n+\n+        Date eventDate = executionDate != null ? executionDate : dueDate;\n+\n+        if ( eventDate == null )\n+        {\n+            throw new IllegalQueryException( \"Event date can not be empty\" );\n+        }\n+\n+        for ( CategoryOption option : attributeOptionCombo.getCategoryOptions() )\n+        {\n+            if ( option.getStartDate() != null && eventDate.compareTo( option.getStartDate() ) < 0 )\n+            {\n+                // TODO: Could we replace the exception by ImportSummary error?\n+//                return error( \"Event date \" + getMediumDateString( date ) + \" is after end date \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI0NDkwOA=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzgyODYzOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheck.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOTo0MjoyNlrOGretGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNTozMDoxMFrOGrq5yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI0NTAxOA==", "bodyText": "Commented out code.", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448245018", "createdAt": "2020-07-01T09:42:26Z", "author": {"login": "netroms"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheck.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package org.hisp.dhis.dxf2.events.importer.shared.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n+import static org.hisp.dhis.util.DateUtils.getMediumDateString;\n+\n+import java.util.Date;\n+\n+import org.hisp.dhis.category.CategoryOption;\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.common.IllegalQueryException;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.util.DateUtils;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class AttributeOptionComboDateCheck implements Checker\n+{\n+    @Override\n+    public ImportSummary check( ImmutableEvent event, WorkContext ctx )\n+    {\n+        CategoryOptionCombo attributeOptionCombo = ctx.getCategoryOptionComboMap().get( event.getUid() );\n+\n+        Date executionDate = null;\n+\n+        if ( event.getEventDate() != null )\n+        {\n+            executionDate = DateUtils.parseDate( event.getEventDate() );\n+        }\n+\n+        Date dueDate = new Date();\n+\n+        if ( event.getDueDate() != null )\n+        {\n+            dueDate = DateUtils.parseDate( event.getDueDate() );\n+        }\n+\n+        Date eventDate = executionDate != null ? executionDate : dueDate;\n+\n+        if ( eventDate == null )\n+        {\n+            throw new IllegalQueryException( \"Event date can not be empty\" );\n+        }\n+\n+        for ( CategoryOption option : attributeOptionCombo.getCategoryOptions() )\n+        {\n+            if ( option.getStartDate() != null && eventDate.compareTo( option.getStartDate() ) < 0 )\n+            {\n+                // TODO: Could we replace the exception by ImportSummary error?\n+//                return error( \"Event date \" + getMediumDateString( date ) + \" is after end date \"\n+//                    + getMediumDateString( option.getEndDate() ) + \" for attributeOption '\" + option.getName() + \"'\" )\n+//                        .incrementIgnored();\n+                throw new IllegalQueryException( \"Event date \" + getMediumDateString( eventDate )\n+                    + \" is before start date \" + getMediumDateString( option.getStartDate() ) + \" for attributeOption '\"\n+                    + option.getName() + \"'\" );\n+            }\n+\n+            if ( option.getEndDate() != null && eventDate.compareTo( option.getEndDate() ) > 0 )\n+            {\n+                // TODO: Could we replace the exception by ImportSummary error?\n+//                return error( \"Event date \" + getMediumDateString( date ) + \" is after end date \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ0NDg3NQ==", "bodyText": "Yes, this is one of the open questions in the document: https://docs.google.com/document/d/1030nAuKxMSAYopNJj569inGgcJUS3DbqNrU-ZyZgSMI/edit#heading=h.p1u0vhrtwo4q", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448444875", "createdAt": "2020-07-01T15:30:10Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheck.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package org.hisp.dhis.dxf2.events.importer.shared.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n+import static org.hisp.dhis.util.DateUtils.getMediumDateString;\n+\n+import java.util.Date;\n+\n+import org.hisp.dhis.category.CategoryOption;\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.common.IllegalQueryException;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.util.DateUtils;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class AttributeOptionComboDateCheck implements Checker\n+{\n+    @Override\n+    public ImportSummary check( ImmutableEvent event, WorkContext ctx )\n+    {\n+        CategoryOptionCombo attributeOptionCombo = ctx.getCategoryOptionComboMap().get( event.getUid() );\n+\n+        Date executionDate = null;\n+\n+        if ( event.getEventDate() != null )\n+        {\n+            executionDate = DateUtils.parseDate( event.getEventDate() );\n+        }\n+\n+        Date dueDate = new Date();\n+\n+        if ( event.getDueDate() != null )\n+        {\n+            dueDate = DateUtils.parseDate( event.getDueDate() );\n+        }\n+\n+        Date eventDate = executionDate != null ? executionDate : dueDate;\n+\n+        if ( eventDate == null )\n+        {\n+            throw new IllegalQueryException( \"Event date can not be empty\" );\n+        }\n+\n+        for ( CategoryOption option : attributeOptionCombo.getCategoryOptions() )\n+        {\n+            if ( option.getStartDate() != null && eventDate.compareTo( option.getStartDate() ) < 0 )\n+            {\n+                // TODO: Could we replace the exception by ImportSummary error?\n+//                return error( \"Event date \" + getMediumDateString( date ) + \" is after end date \"\n+//                    + getMediumDateString( option.getEndDate() ) + \" for attributeOption '\" + option.getName() + \"'\" )\n+//                        .incrementIgnored();\n+                throw new IllegalQueryException( \"Event date \" + getMediumDateString( eventDate )\n+                    + \" is before start date \" + getMediumDateString( option.getStartDate() ) + \" for attributeOption '\"\n+                    + option.getName() + \"'\" );\n+            }\n+\n+            if ( option.getEndDate() != null && eventDate.compareTo( option.getEndDate() ) > 0 )\n+            {\n+                // TODO: Could we replace the exception by ImportSummary error?\n+//                return error( \"Event date \" + getMediumDateString( date ) + \" is after end date \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI0NTAxOA=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5Mzg5MzAzOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/common/hibernate/HibernateIdentifiableObjectStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMDowMDo1MVrOGrfWQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNTozNTo0NlrOGrrIWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI1NTU1NA==", "bodyText": "Out of curiosity, could you explain a little about this change. Since this affects a lot of stuff outside tracker also it would be interesting to know.", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448255554", "createdAt": "2020-07-01T10:00:51Z", "author": {"login": "netroms"}, "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/common/hibernate/HibernateIdentifiableObjectStore.java", "diffHunk": "@@ -269,24 +269,23 @@ public void update( T object, User user )\n     {\n         String username = user != null ? user.getUsername() : \"system-process\";\n \n-        if ( IdentifiableObject.class.isInstance( object ) )\n+        if ( object != null )\n         {\n             object.setAutoFields();\n \n-            BaseIdentifiableObject identifiableObject = object;\n-            identifiableObject.setAutoFields();\n-            identifiableObject.setLastUpdatedBy( user );\n+            object.setAutoFields();\n+            object.setLastUpdatedBy( user );\n \n-            if ( identifiableObject.getUser() == null )\n+            if ( object.getUser() == null )\n             {\n-                identifiableObject.setUser( user );\n+                object.setUser( user );\n             }\n         }\n \n         if ( !isUpdateAllowed( object, user ) )\n         {\n             AuditLogUtil.infoWrapper( log, username, object, AuditLogUtil.ACTION_UPDATE_DENIED );\n-            throw new UpdateAccessDeniedException( object.toString() );\n+            throw new UpdateAccessDeniedException( String.valueOf( object ) );\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ0ODYwMg==", "bodyText": "Sure:\n\nif ( IdentifiableObject.class.isInstance( object ) ) is replaced with object != null (because  extends BaseIdentifiableObject) so checking if isInstance is useless\nThe rest of the change is just removing the useless cast and replace with the actual function parameter (object)", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448448602", "createdAt": "2020-07-01T15:35:46Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/common/hibernate/HibernateIdentifiableObjectStore.java", "diffHunk": "@@ -269,24 +269,23 @@ public void update( T object, User user )\n     {\n         String username = user != null ? user.getUsername() : \"system-process\";\n \n-        if ( IdentifiableObject.class.isInstance( object ) )\n+        if ( object != null )\n         {\n             object.setAutoFields();\n \n-            BaseIdentifiableObject identifiableObject = object;\n-            identifiableObject.setAutoFields();\n-            identifiableObject.setLastUpdatedBy( user );\n+            object.setAutoFields();\n+            object.setLastUpdatedBy( user );\n \n-            if ( identifiableObject.getUser() == null )\n+            if ( object.getUser() == null )\n             {\n-                identifiableObject.setUser( user );\n+                object.setUser( user );\n             }\n         }\n \n         if ( !isUpdateAllowed( object, user ) )\n         {\n             AuditLogUtil.infoWrapper( log, username, object, AuditLogUtil.ACTION_UPDATE_DENIED );\n-            throw new UpdateAccessDeniedException( object.toString() );\n+            throw new UpdateAccessDeniedException( String.valueOf( object ) );\n         }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI1NTU1NA=="}, "originalCommit": {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzU0NTIzOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/organisationunit/OrganisationUnit.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwODoxODo1MFrOGsCZbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMTo1MjozNFrOGst9Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgyOTgwNw==", "bodyText": "Is this done for performance?\nWould it be faster to use Set instead of List for faster get lookups?", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448829807", "createdAt": "2020-07-02T08:18:50Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/organisationunit/OrganisationUnit.java", "diffHunk": "@@ -430,12 +431,13 @@ public boolean isDescendant( Set<OrganisationUnit> ancestors )\n         {\n             return false;\n         }\n+        List<String> ancestorsUid = ancestors.stream().map( OrganisationUnit::getUid ).collect( Collectors.toList() );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "567f633c58a080f96aecf93b2844f13350f9c834"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU0MzUwMg==", "bodyText": "True, fixed", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r449543502", "createdAt": "2020-07-03T11:52:34Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/organisationunit/OrganisationUnit.java", "diffHunk": "@@ -430,12 +431,13 @@ public boolean isDescendant( Set<OrganisationUnit> ancestors )\n         {\n             return false;\n         }\n+        List<String> ancestorsUid = ancestors.stream().map( OrganisationUnit::getUid ).collect( Collectors.toList() );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgyOTgwNw=="}, "originalCommit": {"oid": "567f633c58a080f96aecf93b2844f13350f9c834"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5Nzc0NjU3OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/Checker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwOToxMjoxOFrOGsEYxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMTo1MToxMFrOGst7PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg2MjQwNA==", "bodyText": "A little java doc would be useful here.", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448862404", "createdAt": "2020-07-02T09:12:18Z", "author": {"login": "zubaira"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/Checker.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer;\n+\n+import static org.hisp.dhis.dxf2.importsummary.ImportSummary.error;\n+import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n+\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public interface Checker", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be93f0a98f40d2f0ec13eb2f3ad519d6d0e6fa96"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU0Mjk3Mg==", "bodyText": "Very right, fixed", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r449542972", "createdAt": "2020-07-03T11:51:10Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/Checker.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer;\n+\n+import static org.hisp.dhis.dxf2.importsummary.ImportSummary.error;\n+import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n+\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public interface Checker", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg2MjQwNA=="}, "originalCommit": {"oid": "be93f0a98f40d2f0ec13eb2f3ad519d6d0e6fa96"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODY1NDgyOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/InsertValidationFactory.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMzozODoxNFrOGsNRPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDowMjozOFrOGsOTYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAwNzkzNA==", "bodyText": "not used anymore.", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r449007934", "createdAt": "2020-07-02T13:38:14Z", "author": {"login": "zubaira"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/InsertValidationFactory.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.insert.validation;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static java.util.Collections.emptyList;\n+import static org.hisp.dhis.dxf2.events.importer.ImportStrategyUtils.isInsert;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.EventChecking;\n+import org.hisp.dhis.dxf2.events.importer.ImportStrategyUtils;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be93f0a98f40d2f0ec13eb2f3ad519d6d0e6fa96"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAyMjA5Mg==", "bodyText": "hi @zubaira I'm not sure I understand this comment. What is no longer used?", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r449022092", "createdAt": "2020-07-02T13:58:30Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/InsertValidationFactory.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.insert.validation;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static java.util.Collections.emptyList;\n+import static org.hisp.dhis.dxf2.events.importer.ImportStrategyUtils.isInsert;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.EventChecking;\n+import org.hisp.dhis.dxf2.events.importer.ImportStrategyUtils;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAwNzkzNA=="}, "originalCommit": {"oid": "be93f0a98f40d2f0ec13eb2f3ad519d6d0e6fa96"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAyNDg2Nw==", "bodyText": "Sorry, @luciano-fiandesio I should have mentioned it.\nIts about unused import org.hisp.dhis.dxf2.events.importer.ImportStrategyUtils;", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r449024867", "createdAt": "2020-07-02T14:02:38Z", "author": {"login": "zubaira"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/InsertValidationFactory.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.insert.validation;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static java.util.Collections.emptyList;\n+import static org.hisp.dhis.dxf2.events.importer.ImportStrategyUtils.isInsert;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.EventChecking;\n+import org.hisp.dhis.dxf2.events.importer.ImportStrategyUtils;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAwNzkzNA=="}, "originalCommit": {"oid": "be93f0a98f40d2f0ec13eb2f3ad519d6d0e6fa96"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MzIwMTMzOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/PreInsertProcessorFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMDozNjoxNVrOG0FRdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNToyODoyM1rOG4pG5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI2NTUyNQ==", "bodyText": "package declaration normally comes before Copyright statement.", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r457265525", "createdAt": "2020-07-20T10:36:15Z", "author": {"login": "ameenhere"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/PreInsertProcessorFactory.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.insert.preprocess;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA0Njk1MA==", "bodyText": "Fixed", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r462046950", "createdAt": "2020-07-29T05:28:23Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/PreInsertProcessorFactory.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.insert.preprocess;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI2NTUyNQ=="}, "originalCommit": {"oid": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NDI4MDc5OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventChecking.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDoxMjoyOFrOG0O5gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNToyODo1MFrOG4pHZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQyMzIzNA==", "bodyText": "package declaration.", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r457423234", "createdAt": "2020-07-20T14:12:28Z", "author": {"login": "ameenhere"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventChecking.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA0NzA3Nw==", "bodyText": "Fixed", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r462047077", "createdAt": "2020-07-29T05:28:50Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventChecking.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQyMzIzNA=="}, "originalCommit": {"oid": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NDI5NjkxOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/Processor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDoxNToxN1rOG0PC8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNTozMTozNlrOG4pKVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQyNTY0OA==", "bodyText": "package declaration.", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r457425648", "createdAt": "2020-07-20T14:15:17Z", "author": {"login": "ameenhere"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/Processor.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA0NzgyOA==", "bodyText": "Fixed + Javadoc", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r462047828", "createdAt": "2020-07-29T05:31:36Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/Processor.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQyNTY0OA=="}, "originalCommit": {"oid": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NDI5OTM0OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/ServiceDelegator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDoxNTo0N1rOG0PEdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNTozMjoxMlrOG4pLDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQyNjAzNg==", "bodyText": "package declaration.", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r457426036", "createdAt": "2020-07-20T14:15:47Z", "author": {"login": "ameenhere"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/ServiceDelegator.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA0ODAxMg==", "bodyText": "Fixed", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r462048012", "createdAt": "2020-07-29T05:32:12Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/ServiceDelegator.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQyNjAzNg=="}, "originalCommit": {"oid": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NDMyMDc2OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceUpdatePreProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDoxOTozM1rOG0PRFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNTozNjo0M1rOG4pQTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQyOTI3MQ==", "bodyText": "package declaration before copyright", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r457429271", "createdAt": "2020-07-20T14:19:33Z", "author": {"login": "ameenhere"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceUpdatePreProcessor.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.update.preprocess;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA0OTM1OQ==", "bodyText": "Fixed", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r462049359", "createdAt": "2020-07-29T05:36:43Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceUpdatePreProcessor.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.update.preprocess;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQyOTI3MQ=="}, "originalCommit": {"oid": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NDMyNzc4OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventServiceFacade.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDoyMDo0MFrOG0PVAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNTozNzoxOVrOG4pRFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQzMDI3NQ==", "bodyText": "package declaration before copyright", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r457430275", "createdAt": "2020-07-20T14:20:40Z", "author": {"login": "ameenhere"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventServiceFacade.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA0OTU1OQ==", "bodyText": "Fixed", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r462049559", "createdAt": "2020-07-29T05:37:19Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventServiceFacade.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQzMDI3NQ=="}, "originalCommit": {"oid": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MTkxMzcyOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/TrackedEntityInstanceCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDozMToxMlrOG4PhSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDozMToxMlrOG4PhSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYyNzcyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public ImportSummary check(ImmutableEvent event, WorkContext ctx )\n          \n          \n            \n                public ImportSummary check( ImmutableEvent event, WorkContext ctx )", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461627720", "createdAt": "2020-07-28T14:31:12Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/TrackedEntityInstanceCheck.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.insert.validation;\n+\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.importsummary.ImportStatus;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+\n+import java.util.Optional;\n+\n+import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class TrackedEntityInstanceCheck implements Checker\n+{\n+    @Override\n+    public ImportSummary check(ImmutableEvent event, WorkContext ctx )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MTkxNzY4OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/helpers/QueryParamsBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDozMTo1OVrOG4Pjtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDozMTo1OVrOG4Pjtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYyODM0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if ( pair != null && !pair.getKey().equals( \"filter\"))\n          \n          \n            \n                    if ( pair != null && !pair.getKey().equals( \"filter\") )", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461628343", "createdAt": "2020-07-28T14:31:59Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/helpers/QueryParamsBuilder.java", "diffHunk": "@@ -54,16 +54,16 @@ public QueryParamsBuilder()\n      */\n     public QueryParamsBuilder add( String param )\n     {\n-        String[] splited = param.split( \"=\" );\n-        MutablePair pair = getByKey( splited[0] );\n+        String[] split = param.split( \"=\" );\n+        MutablePair pair = getByKey( split[0] );\n \n-        if ( pair != null )\n+        if ( pair != null && !pair.getKey().equals( \"filter\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MTkyNjg4OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDozMzo0M1rOG4PpOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNjowOTo0M1rOG4p5jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYyOTc1Mw==", "bodyText": "If I understand correctly, there shouldn't be any unpersisted changes in the session at this point? Or could there be from a previous batch of import?", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461629753", "createdAt": "2020-07-28T14:33:43Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.hibernate.SessionFactory;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.hibernate.HibernateUtils;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.user.UserCredentials;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Component\n+public class WorkContextLoader\n+{\n+    private final ProgramSupplier programSupplier;\n+\n+    private final OrganisationUnitSupplier organisationUnitSupplier;\n+\n+    private final TrackedEntityInstanceSupplier trackedEntityInstanceSupplier;\n+\n+    private final ProgramInstanceSupplier programInstanceSupplier;\n+\n+    private final ProgramStageInstanceSupplier programStageInstanceSupplier;\n+\n+    private final CategoryOptionComboSupplier categoryOptionComboSupplier;\n+\n+    private final DataElementSupplier dataElementSupplier;\n+\n+    private final NoteSupplier noteSupplier;\n+\n+    private final AssignedUserSupplier assignedUserSupplier;\n+\n+    private final ServiceDelegatorSupplier serviceDelegatorSupplier;\n+\n+    private final static UidGenerator uidGen = new UidGenerator();\n+\n+    private final SessionFactory sessionFactory;\n+\n+    public WorkContextLoader(\n+    // @formatter:off\n+        ProgramSupplier programSupplier,\n+        OrganisationUnitSupplier organisationUnitSupplier,\n+        TrackedEntityInstanceSupplier trackedEntityInstanceSupplier,\n+        ProgramInstanceSupplier programInstanceSupplier,\n+        ProgramStageInstanceSupplier programStageInstanceSupplier,\n+        CategoryOptionComboSupplier categoryOptionComboSupplier,\n+        DataElementSupplier dataElementSupplier,\n+        NoteSupplier noteSupplier,\n+        AssignedUserSupplier assignedUserSupplier,\n+        ServiceDelegatorSupplier serviceDelegatorSupplier,\n+        SessionFactory sessionFactory\n+    // @formatter:on\n+    )\n+    {\n+        this.programSupplier = programSupplier;\n+        this.organisationUnitSupplier = organisationUnitSupplier;\n+        this.trackedEntityInstanceSupplier = trackedEntityInstanceSupplier;\n+        this.programInstanceSupplier = programInstanceSupplier;\n+        this.programStageInstanceSupplier = programStageInstanceSupplier;\n+        this.categoryOptionComboSupplier = categoryOptionComboSupplier;\n+        this.dataElementSupplier = dataElementSupplier;\n+        this.noteSupplier = noteSupplier;\n+        this.assignedUserSupplier = assignedUserSupplier;\n+        this.serviceDelegatorSupplier = serviceDelegatorSupplier;\n+        this.sessionFactory = sessionFactory;\n+    }\n+\n+    @Transactional( readOnly = true )\n+    public WorkContext load( ImportOptions importOptions, List<Event> events )\n+    {\n+        sessionFactory.getCurrentSession().flush();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA1OTkxOA==", "bodyText": "Since, this code could be called during an import of Tei -> Enrollment, we need to be sure that these entities are flushed before loading the data in cache.", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r462059918", "createdAt": "2020-07-29T06:09:43Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.hibernate.SessionFactory;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.hibernate.HibernateUtils;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.user.UserCredentials;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Component\n+public class WorkContextLoader\n+{\n+    private final ProgramSupplier programSupplier;\n+\n+    private final OrganisationUnitSupplier organisationUnitSupplier;\n+\n+    private final TrackedEntityInstanceSupplier trackedEntityInstanceSupplier;\n+\n+    private final ProgramInstanceSupplier programInstanceSupplier;\n+\n+    private final ProgramStageInstanceSupplier programStageInstanceSupplier;\n+\n+    private final CategoryOptionComboSupplier categoryOptionComboSupplier;\n+\n+    private final DataElementSupplier dataElementSupplier;\n+\n+    private final NoteSupplier noteSupplier;\n+\n+    private final AssignedUserSupplier assignedUserSupplier;\n+\n+    private final ServiceDelegatorSupplier serviceDelegatorSupplier;\n+\n+    private final static UidGenerator uidGen = new UidGenerator();\n+\n+    private final SessionFactory sessionFactory;\n+\n+    public WorkContextLoader(\n+    // @formatter:off\n+        ProgramSupplier programSupplier,\n+        OrganisationUnitSupplier organisationUnitSupplier,\n+        TrackedEntityInstanceSupplier trackedEntityInstanceSupplier,\n+        ProgramInstanceSupplier programInstanceSupplier,\n+        ProgramStageInstanceSupplier programStageInstanceSupplier,\n+        CategoryOptionComboSupplier categoryOptionComboSupplier,\n+        DataElementSupplier dataElementSupplier,\n+        NoteSupplier noteSupplier,\n+        AssignedUserSupplier assignedUserSupplier,\n+        ServiceDelegatorSupplier serviceDelegatorSupplier,\n+        SessionFactory sessionFactory\n+    // @formatter:on\n+    )\n+    {\n+        this.programSupplier = programSupplier;\n+        this.organisationUnitSupplier = organisationUnitSupplier;\n+        this.trackedEntityInstanceSupplier = trackedEntityInstanceSupplier;\n+        this.programInstanceSupplier = programInstanceSupplier;\n+        this.programStageInstanceSupplier = programStageInstanceSupplier;\n+        this.categoryOptionComboSupplier = categoryOptionComboSupplier;\n+        this.dataElementSupplier = dataElementSupplier;\n+        this.noteSupplier = noteSupplier;\n+        this.assignedUserSupplier = assignedUserSupplier;\n+        this.serviceDelegatorSupplier = serviceDelegatorSupplier;\n+        this.sessionFactory = sessionFactory;\n+    }\n+\n+    @Transactional( readOnly = true )\n+    public WorkContext load( ImportOptions importOptions, List<Event> events )\n+    {\n+        sessionFactory.getCurrentSession().flush();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYyOTc1Mw=="}, "originalCommit": {"oid": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MTkyOTY4OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDozNDoxNFrOG4Pq1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDozNDoxNFrOG4Pq1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYzMDE2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        .eventDataValueMap( new EventDataValueAggregator().aggregateDataValues( events, programStageInstanceMap, localImportOptions ))\n          \n          \n            \n                        .eventDataValueMap( new EventDataValueAggregator().aggregateDataValues( events, programStageInstanceMap, localImportOptions ) )", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461630167", "createdAt": "2020-07-28T14:34:14Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.hibernate.SessionFactory;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.hibernate.HibernateUtils;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.user.UserCredentials;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Component\n+public class WorkContextLoader\n+{\n+    private final ProgramSupplier programSupplier;\n+\n+    private final OrganisationUnitSupplier organisationUnitSupplier;\n+\n+    private final TrackedEntityInstanceSupplier trackedEntityInstanceSupplier;\n+\n+    private final ProgramInstanceSupplier programInstanceSupplier;\n+\n+    private final ProgramStageInstanceSupplier programStageInstanceSupplier;\n+\n+    private final CategoryOptionComboSupplier categoryOptionComboSupplier;\n+\n+    private final DataElementSupplier dataElementSupplier;\n+\n+    private final NoteSupplier noteSupplier;\n+\n+    private final AssignedUserSupplier assignedUserSupplier;\n+\n+    private final ServiceDelegatorSupplier serviceDelegatorSupplier;\n+\n+    private final static UidGenerator uidGen = new UidGenerator();\n+\n+    private final SessionFactory sessionFactory;\n+\n+    public WorkContextLoader(\n+    // @formatter:off\n+        ProgramSupplier programSupplier,\n+        OrganisationUnitSupplier organisationUnitSupplier,\n+        TrackedEntityInstanceSupplier trackedEntityInstanceSupplier,\n+        ProgramInstanceSupplier programInstanceSupplier,\n+        ProgramStageInstanceSupplier programStageInstanceSupplier,\n+        CategoryOptionComboSupplier categoryOptionComboSupplier,\n+        DataElementSupplier dataElementSupplier,\n+        NoteSupplier noteSupplier,\n+        AssignedUserSupplier assignedUserSupplier,\n+        ServiceDelegatorSupplier serviceDelegatorSupplier,\n+        SessionFactory sessionFactory\n+    // @formatter:on\n+    )\n+    {\n+        this.programSupplier = programSupplier;\n+        this.organisationUnitSupplier = organisationUnitSupplier;\n+        this.trackedEntityInstanceSupplier = trackedEntityInstanceSupplier;\n+        this.programInstanceSupplier = programInstanceSupplier;\n+        this.programStageInstanceSupplier = programStageInstanceSupplier;\n+        this.categoryOptionComboSupplier = categoryOptionComboSupplier;\n+        this.dataElementSupplier = dataElementSupplier;\n+        this.noteSupplier = noteSupplier;\n+        this.assignedUserSupplier = assignedUserSupplier;\n+        this.serviceDelegatorSupplier = serviceDelegatorSupplier;\n+        this.sessionFactory = sessionFactory;\n+    }\n+\n+    @Transactional( readOnly = true )\n+    public WorkContext load( ImportOptions importOptions, List<Event> events )\n+    {\n+        sessionFactory.getCurrentSession().flush();\n+\n+        ImportOptions localImportOptions = importOptions;\n+        // API allows a null Import Options\n+        if ( localImportOptions == null )\n+        {\n+            localImportOptions = ImportOptions.getDefaultImportOptions();\n+        }\n+\n+        initializeUser( localImportOptions );\n+\n+        // Make sure all events have the 'uid' field populated\n+        events = uidGen.assignUidToEvents( events );\n+\n+        final Map<String, ProgramStageInstance> programStageInstanceMap = programStageInstanceSupplier\n+            .get( localImportOptions, events );\n+\n+        final Map<String, Pair<TrackedEntityInstance, Boolean>> teiMap = trackedEntityInstanceSupplier\n+            .get( localImportOptions, events );\n+\n+        return WorkContext.builder()\n+        // @formatter:off\n+            .importOptions( localImportOptions )\n+            .programsMap( programSupplier.get( localImportOptions, events ) )\n+            .programStageInstanceMap( programStageInstanceMap )\n+            .organisationUnitMap( organisationUnitSupplier.get( localImportOptions, events ) )\n+            .trackedEntityInstanceMap( teiMap )\n+            .programInstanceMap( programInstanceSupplier.get( localImportOptions, teiMap, events ) )\n+            .categoryOptionComboMap( categoryOptionComboSupplier.get( localImportOptions, events ) )\n+            .dataElementMap( dataElementSupplier.get( localImportOptions, events ) )\n+            .notesMap( noteSupplier.get( localImportOptions, events ) )\n+            .assignedUserMap( assignedUserSupplier.get( localImportOptions, events ) )\n+            .eventDataValueMap( new EventDataValueAggregator().aggregateDataValues( events, programStageInstanceMap, localImportOptions ))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MTk1ODAwOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDozOToyN1rOG4P7xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNjoxMDo1NlrOG4p7XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYzNDUwMw==", "bodyText": "What is this line for?", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461634503", "createdAt": "2020-07-28T14:39:27Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.hibernate.SessionFactory;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.hibernate.HibernateUtils;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.user.UserCredentials;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Component\n+public class WorkContextLoader\n+{\n+    private final ProgramSupplier programSupplier;\n+\n+    private final OrganisationUnitSupplier organisationUnitSupplier;\n+\n+    private final TrackedEntityInstanceSupplier trackedEntityInstanceSupplier;\n+\n+    private final ProgramInstanceSupplier programInstanceSupplier;\n+\n+    private final ProgramStageInstanceSupplier programStageInstanceSupplier;\n+\n+    private final CategoryOptionComboSupplier categoryOptionComboSupplier;\n+\n+    private final DataElementSupplier dataElementSupplier;\n+\n+    private final NoteSupplier noteSupplier;\n+\n+    private final AssignedUserSupplier assignedUserSupplier;\n+\n+    private final ServiceDelegatorSupplier serviceDelegatorSupplier;\n+\n+    private final static UidGenerator uidGen = new UidGenerator();\n+\n+    private final SessionFactory sessionFactory;\n+\n+    public WorkContextLoader(\n+    // @formatter:off\n+        ProgramSupplier programSupplier,\n+        OrganisationUnitSupplier organisationUnitSupplier,\n+        TrackedEntityInstanceSupplier trackedEntityInstanceSupplier,\n+        ProgramInstanceSupplier programInstanceSupplier,\n+        ProgramStageInstanceSupplier programStageInstanceSupplier,\n+        CategoryOptionComboSupplier categoryOptionComboSupplier,\n+        DataElementSupplier dataElementSupplier,\n+        NoteSupplier noteSupplier,\n+        AssignedUserSupplier assignedUserSupplier,\n+        ServiceDelegatorSupplier serviceDelegatorSupplier,\n+        SessionFactory sessionFactory\n+    // @formatter:on\n+    )\n+    {\n+        this.programSupplier = programSupplier;\n+        this.organisationUnitSupplier = organisationUnitSupplier;\n+        this.trackedEntityInstanceSupplier = trackedEntityInstanceSupplier;\n+        this.programInstanceSupplier = programInstanceSupplier;\n+        this.programStageInstanceSupplier = programStageInstanceSupplier;\n+        this.categoryOptionComboSupplier = categoryOptionComboSupplier;\n+        this.dataElementSupplier = dataElementSupplier;\n+        this.noteSupplier = noteSupplier;\n+        this.assignedUserSupplier = assignedUserSupplier;\n+        this.serviceDelegatorSupplier = serviceDelegatorSupplier;\n+        this.sessionFactory = sessionFactory;\n+    }\n+\n+    @Transactional( readOnly = true )\n+    public WorkContext load( ImportOptions importOptions, List<Event> events )\n+    {\n+        sessionFactory.getCurrentSession().flush();\n+\n+        ImportOptions localImportOptions = importOptions;\n+        // API allows a null Import Options\n+        if ( localImportOptions == null )\n+        {\n+            localImportOptions = ImportOptions.getDefaultImportOptions();\n+        }\n+\n+        initializeUser( localImportOptions );\n+\n+        // Make sure all events have the 'uid' field populated\n+        events = uidGen.assignUidToEvents( events );\n+\n+        final Map<String, ProgramStageInstance> programStageInstanceMap = programStageInstanceSupplier\n+            .get( localImportOptions, events );\n+\n+        final Map<String, Pair<TrackedEntityInstance, Boolean>> teiMap = trackedEntityInstanceSupplier\n+            .get( localImportOptions, events );\n+\n+        return WorkContext.builder()\n+        // @formatter:off\n+            .importOptions( localImportOptions )\n+            .programsMap( programSupplier.get( localImportOptions, events ) )\n+            .programStageInstanceMap( programStageInstanceMap )\n+            .organisationUnitMap( organisationUnitSupplier.get( localImportOptions, events ) )\n+            .trackedEntityInstanceMap( teiMap )\n+            .programInstanceMap( programInstanceSupplier.get( localImportOptions, teiMap, events ) )\n+            .categoryOptionComboMap( categoryOptionComboSupplier.get( localImportOptions, events ) )\n+            .dataElementMap( dataElementSupplier.get( localImportOptions, events ) )\n+            .notesMap( noteSupplier.get( localImportOptions, events ) )\n+            .assignedUserMap( assignedUserSupplier.get( localImportOptions, events ) )\n+            .eventDataValueMap( new EventDataValueAggregator().aggregateDataValues( events, programStageInstanceMap, localImportOptions ))\n+            .serviceDelegator( serviceDelegatorSupplier.get() )\n+            .build();\n+        // @formatter:on\n+    }\n+\n+    /**\n+     * Make sure that the {@see User} object's properties are properly initialized,\n+     * to avoid running into Hibernate-related issues during validation\n+     *\n+     * @param importOptions the {@see ImportOptions} object\n+     */\n+    private void initializeUser( ImportOptions importOptions )\n+    {\n+        if ( importOptions.getUser() == null )\n+        {\n+            final User currentUser = this.serviceDelegatorSupplier.get().getCurrentUserService().getCurrentUser();\n+\n+            //\n+            // This should never really happen!\n+            //\n+            if ( currentUser != null )\n+            {\n+                UserCredentials userCredentials = currentUser.getUserCredentials();\n+                HibernateUtils.initializeProxy( userCredentials );\n+                userCredentials.isSuper();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA2MDM0Mw==", "bodyText": "This is required to avoid an Hibernate error down the line, when we access this method over and over, but since the object is detached, we \"pre-load\" the data here.", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r462060343", "createdAt": "2020-07-29T06:10:48Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.hibernate.SessionFactory;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.hibernate.HibernateUtils;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.user.UserCredentials;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Component\n+public class WorkContextLoader\n+{\n+    private final ProgramSupplier programSupplier;\n+\n+    private final OrganisationUnitSupplier organisationUnitSupplier;\n+\n+    private final TrackedEntityInstanceSupplier trackedEntityInstanceSupplier;\n+\n+    private final ProgramInstanceSupplier programInstanceSupplier;\n+\n+    private final ProgramStageInstanceSupplier programStageInstanceSupplier;\n+\n+    private final CategoryOptionComboSupplier categoryOptionComboSupplier;\n+\n+    private final DataElementSupplier dataElementSupplier;\n+\n+    private final NoteSupplier noteSupplier;\n+\n+    private final AssignedUserSupplier assignedUserSupplier;\n+\n+    private final ServiceDelegatorSupplier serviceDelegatorSupplier;\n+\n+    private final static UidGenerator uidGen = new UidGenerator();\n+\n+    private final SessionFactory sessionFactory;\n+\n+    public WorkContextLoader(\n+    // @formatter:off\n+        ProgramSupplier programSupplier,\n+        OrganisationUnitSupplier organisationUnitSupplier,\n+        TrackedEntityInstanceSupplier trackedEntityInstanceSupplier,\n+        ProgramInstanceSupplier programInstanceSupplier,\n+        ProgramStageInstanceSupplier programStageInstanceSupplier,\n+        CategoryOptionComboSupplier categoryOptionComboSupplier,\n+        DataElementSupplier dataElementSupplier,\n+        NoteSupplier noteSupplier,\n+        AssignedUserSupplier assignedUserSupplier,\n+        ServiceDelegatorSupplier serviceDelegatorSupplier,\n+        SessionFactory sessionFactory\n+    // @formatter:on\n+    )\n+    {\n+        this.programSupplier = programSupplier;\n+        this.organisationUnitSupplier = organisationUnitSupplier;\n+        this.trackedEntityInstanceSupplier = trackedEntityInstanceSupplier;\n+        this.programInstanceSupplier = programInstanceSupplier;\n+        this.programStageInstanceSupplier = programStageInstanceSupplier;\n+        this.categoryOptionComboSupplier = categoryOptionComboSupplier;\n+        this.dataElementSupplier = dataElementSupplier;\n+        this.noteSupplier = noteSupplier;\n+        this.assignedUserSupplier = assignedUserSupplier;\n+        this.serviceDelegatorSupplier = serviceDelegatorSupplier;\n+        this.sessionFactory = sessionFactory;\n+    }\n+\n+    @Transactional( readOnly = true )\n+    public WorkContext load( ImportOptions importOptions, List<Event> events )\n+    {\n+        sessionFactory.getCurrentSession().flush();\n+\n+        ImportOptions localImportOptions = importOptions;\n+        // API allows a null Import Options\n+        if ( localImportOptions == null )\n+        {\n+            localImportOptions = ImportOptions.getDefaultImportOptions();\n+        }\n+\n+        initializeUser( localImportOptions );\n+\n+        // Make sure all events have the 'uid' field populated\n+        events = uidGen.assignUidToEvents( events );\n+\n+        final Map<String, ProgramStageInstance> programStageInstanceMap = programStageInstanceSupplier\n+            .get( localImportOptions, events );\n+\n+        final Map<String, Pair<TrackedEntityInstance, Boolean>> teiMap = trackedEntityInstanceSupplier\n+            .get( localImportOptions, events );\n+\n+        return WorkContext.builder()\n+        // @formatter:off\n+            .importOptions( localImportOptions )\n+            .programsMap( programSupplier.get( localImportOptions, events ) )\n+            .programStageInstanceMap( programStageInstanceMap )\n+            .organisationUnitMap( organisationUnitSupplier.get( localImportOptions, events ) )\n+            .trackedEntityInstanceMap( teiMap )\n+            .programInstanceMap( programInstanceSupplier.get( localImportOptions, teiMap, events ) )\n+            .categoryOptionComboMap( categoryOptionComboSupplier.get( localImportOptions, events ) )\n+            .dataElementMap( dataElementSupplier.get( localImportOptions, events ) )\n+            .notesMap( noteSupplier.get( localImportOptions, events ) )\n+            .assignedUserMap( assignedUserSupplier.get( localImportOptions, events ) )\n+            .eventDataValueMap( new EventDataValueAggregator().aggregateDataValues( events, programStageInstanceMap, localImportOptions ))\n+            .serviceDelegator( serviceDelegatorSupplier.get() )\n+            .build();\n+        // @formatter:on\n+    }\n+\n+    /**\n+     * Make sure that the {@see User} object's properties are properly initialized,\n+     * to avoid running into Hibernate-related issues during validation\n+     *\n+     * @param importOptions the {@see ImportOptions} object\n+     */\n+    private void initializeUser( ImportOptions importOptions )\n+    {\n+        if ( importOptions.getUser() == null )\n+        {\n+            final User currentUser = this.serviceDelegatorSupplier.get().getCurrentUserService().getCurrentUser();\n+\n+            //\n+            // This should never really happen!\n+            //\n+            if ( currentUser != null )\n+            {\n+                UserCredentials userCredentials = currentUser.getUserCredentials();\n+                HibernateUtils.initializeProxy( userCredentials );\n+                userCredentials.isSuper();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYzNDUwMw=="}, "originalCommit": {"oid": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA2MDM4MA==", "bodyText": "Adding comment.", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r462060380", "createdAt": "2020-07-29T06:10:56Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.hibernate.SessionFactory;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.hibernate.HibernateUtils;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.user.UserCredentials;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Component\n+public class WorkContextLoader\n+{\n+    private final ProgramSupplier programSupplier;\n+\n+    private final OrganisationUnitSupplier organisationUnitSupplier;\n+\n+    private final TrackedEntityInstanceSupplier trackedEntityInstanceSupplier;\n+\n+    private final ProgramInstanceSupplier programInstanceSupplier;\n+\n+    private final ProgramStageInstanceSupplier programStageInstanceSupplier;\n+\n+    private final CategoryOptionComboSupplier categoryOptionComboSupplier;\n+\n+    private final DataElementSupplier dataElementSupplier;\n+\n+    private final NoteSupplier noteSupplier;\n+\n+    private final AssignedUserSupplier assignedUserSupplier;\n+\n+    private final ServiceDelegatorSupplier serviceDelegatorSupplier;\n+\n+    private final static UidGenerator uidGen = new UidGenerator();\n+\n+    private final SessionFactory sessionFactory;\n+\n+    public WorkContextLoader(\n+    // @formatter:off\n+        ProgramSupplier programSupplier,\n+        OrganisationUnitSupplier organisationUnitSupplier,\n+        TrackedEntityInstanceSupplier trackedEntityInstanceSupplier,\n+        ProgramInstanceSupplier programInstanceSupplier,\n+        ProgramStageInstanceSupplier programStageInstanceSupplier,\n+        CategoryOptionComboSupplier categoryOptionComboSupplier,\n+        DataElementSupplier dataElementSupplier,\n+        NoteSupplier noteSupplier,\n+        AssignedUserSupplier assignedUserSupplier,\n+        ServiceDelegatorSupplier serviceDelegatorSupplier,\n+        SessionFactory sessionFactory\n+    // @formatter:on\n+    )\n+    {\n+        this.programSupplier = programSupplier;\n+        this.organisationUnitSupplier = organisationUnitSupplier;\n+        this.trackedEntityInstanceSupplier = trackedEntityInstanceSupplier;\n+        this.programInstanceSupplier = programInstanceSupplier;\n+        this.programStageInstanceSupplier = programStageInstanceSupplier;\n+        this.categoryOptionComboSupplier = categoryOptionComboSupplier;\n+        this.dataElementSupplier = dataElementSupplier;\n+        this.noteSupplier = noteSupplier;\n+        this.assignedUserSupplier = assignedUserSupplier;\n+        this.serviceDelegatorSupplier = serviceDelegatorSupplier;\n+        this.sessionFactory = sessionFactory;\n+    }\n+\n+    @Transactional( readOnly = true )\n+    public WorkContext load( ImportOptions importOptions, List<Event> events )\n+    {\n+        sessionFactory.getCurrentSession().flush();\n+\n+        ImportOptions localImportOptions = importOptions;\n+        // API allows a null Import Options\n+        if ( localImportOptions == null )\n+        {\n+            localImportOptions = ImportOptions.getDefaultImportOptions();\n+        }\n+\n+        initializeUser( localImportOptions );\n+\n+        // Make sure all events have the 'uid' field populated\n+        events = uidGen.assignUidToEvents( events );\n+\n+        final Map<String, ProgramStageInstance> programStageInstanceMap = programStageInstanceSupplier\n+            .get( localImportOptions, events );\n+\n+        final Map<String, Pair<TrackedEntityInstance, Boolean>> teiMap = trackedEntityInstanceSupplier\n+            .get( localImportOptions, events );\n+\n+        return WorkContext.builder()\n+        // @formatter:off\n+            .importOptions( localImportOptions )\n+            .programsMap( programSupplier.get( localImportOptions, events ) )\n+            .programStageInstanceMap( programStageInstanceMap )\n+            .organisationUnitMap( organisationUnitSupplier.get( localImportOptions, events ) )\n+            .trackedEntityInstanceMap( teiMap )\n+            .programInstanceMap( programInstanceSupplier.get( localImportOptions, teiMap, events ) )\n+            .categoryOptionComboMap( categoryOptionComboSupplier.get( localImportOptions, events ) )\n+            .dataElementMap( dataElementSupplier.get( localImportOptions, events ) )\n+            .notesMap( noteSupplier.get( localImportOptions, events ) )\n+            .assignedUserMap( assignedUserSupplier.get( localImportOptions, events ) )\n+            .eventDataValueMap( new EventDataValueAggregator().aggregateDataValues( events, programStageInstanceMap, localImportOptions ))\n+            .serviceDelegator( serviceDelegatorSupplier.get() )\n+            .build();\n+        // @formatter:on\n+    }\n+\n+    /**\n+     * Make sure that the {@see User} object's properties are properly initialized,\n+     * to avoid running into Hibernate-related issues during validation\n+     *\n+     * @param importOptions the {@see ImportOptions} object\n+     */\n+    private void initializeUser( ImportOptions importOptions )\n+    {\n+        if ( importOptions.getUser() == null )\n+        {\n+            final User currentUser = this.serviceDelegatorSupplier.get().getCurrentUserService().getCurrentUser();\n+\n+            //\n+            // This should never really happen!\n+            //\n+            if ( currentUser != null )\n+            {\n+                UserCredentials userCredentials = currentUser.getUserCredentials();\n+                HibernateUtils.initializeProxy( userCredentials );\n+                userCredentials.isSuper();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYzNDUwMw=="}, "originalCommit": {"oid": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab"}, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MTk2MTIzOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDo0MDowM1rOG4P9zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNjoxNDozNVrOG4qAcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYzNTAyMg==", "bodyText": "What is this line for? Doesnt this just return a boolean?", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461635022", "createdAt": "2020-07-28T14:40:03Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.hibernate.SessionFactory;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.hibernate.HibernateUtils;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.user.UserCredentials;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Component\n+public class WorkContextLoader\n+{\n+    private final ProgramSupplier programSupplier;\n+\n+    private final OrganisationUnitSupplier organisationUnitSupplier;\n+\n+    private final TrackedEntityInstanceSupplier trackedEntityInstanceSupplier;\n+\n+    private final ProgramInstanceSupplier programInstanceSupplier;\n+\n+    private final ProgramStageInstanceSupplier programStageInstanceSupplier;\n+\n+    private final CategoryOptionComboSupplier categoryOptionComboSupplier;\n+\n+    private final DataElementSupplier dataElementSupplier;\n+\n+    private final NoteSupplier noteSupplier;\n+\n+    private final AssignedUserSupplier assignedUserSupplier;\n+\n+    private final ServiceDelegatorSupplier serviceDelegatorSupplier;\n+\n+    private final static UidGenerator uidGen = new UidGenerator();\n+\n+    private final SessionFactory sessionFactory;\n+\n+    public WorkContextLoader(\n+    // @formatter:off\n+        ProgramSupplier programSupplier,\n+        OrganisationUnitSupplier organisationUnitSupplier,\n+        TrackedEntityInstanceSupplier trackedEntityInstanceSupplier,\n+        ProgramInstanceSupplier programInstanceSupplier,\n+        ProgramStageInstanceSupplier programStageInstanceSupplier,\n+        CategoryOptionComboSupplier categoryOptionComboSupplier,\n+        DataElementSupplier dataElementSupplier,\n+        NoteSupplier noteSupplier,\n+        AssignedUserSupplier assignedUserSupplier,\n+        ServiceDelegatorSupplier serviceDelegatorSupplier,\n+        SessionFactory sessionFactory\n+    // @formatter:on\n+    )\n+    {\n+        this.programSupplier = programSupplier;\n+        this.organisationUnitSupplier = organisationUnitSupplier;\n+        this.trackedEntityInstanceSupplier = trackedEntityInstanceSupplier;\n+        this.programInstanceSupplier = programInstanceSupplier;\n+        this.programStageInstanceSupplier = programStageInstanceSupplier;\n+        this.categoryOptionComboSupplier = categoryOptionComboSupplier;\n+        this.dataElementSupplier = dataElementSupplier;\n+        this.noteSupplier = noteSupplier;\n+        this.assignedUserSupplier = assignedUserSupplier;\n+        this.serviceDelegatorSupplier = serviceDelegatorSupplier;\n+        this.sessionFactory = sessionFactory;\n+    }\n+\n+    @Transactional( readOnly = true )\n+    public WorkContext load( ImportOptions importOptions, List<Event> events )\n+    {\n+        sessionFactory.getCurrentSession().flush();\n+\n+        ImportOptions localImportOptions = importOptions;\n+        // API allows a null Import Options\n+        if ( localImportOptions == null )\n+        {\n+            localImportOptions = ImportOptions.getDefaultImportOptions();\n+        }\n+\n+        initializeUser( localImportOptions );\n+\n+        // Make sure all events have the 'uid' field populated\n+        events = uidGen.assignUidToEvents( events );\n+\n+        final Map<String, ProgramStageInstance> programStageInstanceMap = programStageInstanceSupplier\n+            .get( localImportOptions, events );\n+\n+        final Map<String, Pair<TrackedEntityInstance, Boolean>> teiMap = trackedEntityInstanceSupplier\n+            .get( localImportOptions, events );\n+\n+        return WorkContext.builder()\n+        // @formatter:off\n+            .importOptions( localImportOptions )\n+            .programsMap( programSupplier.get( localImportOptions, events ) )\n+            .programStageInstanceMap( programStageInstanceMap )\n+            .organisationUnitMap( organisationUnitSupplier.get( localImportOptions, events ) )\n+            .trackedEntityInstanceMap( teiMap )\n+            .programInstanceMap( programInstanceSupplier.get( localImportOptions, teiMap, events ) )\n+            .categoryOptionComboMap( categoryOptionComboSupplier.get( localImportOptions, events ) )\n+            .dataElementMap( dataElementSupplier.get( localImportOptions, events ) )\n+            .notesMap( noteSupplier.get( localImportOptions, events ) )\n+            .assignedUserMap( assignedUserSupplier.get( localImportOptions, events ) )\n+            .eventDataValueMap( new EventDataValueAggregator().aggregateDataValues( events, programStageInstanceMap, localImportOptions ))\n+            .serviceDelegator( serviceDelegatorSupplier.get() )\n+            .build();\n+        // @formatter:on\n+    }\n+\n+    /**\n+     * Make sure that the {@see User} object's properties are properly initialized,\n+     * to avoid running into Hibernate-related issues during validation\n+     *\n+     * @param importOptions the {@see ImportOptions} object\n+     */\n+    private void initializeUser( ImportOptions importOptions )\n+    {\n+        if ( importOptions.getUser() == null )\n+        {\n+            final User currentUser = this.serviceDelegatorSupplier.get().getCurrentUserService().getCurrentUser();\n+\n+            //\n+            // This should never really happen!\n+            //\n+            if ( currentUser != null )\n+            {\n+                UserCredentials userCredentials = currentUser.getUserCredentials();\n+                HibernateUtils.initializeProxy( userCredentials );\n+                userCredentials.isSuper();\n+                importOptions.setUser( currentUser );\n+            }\n+        }\n+        else\n+        {\n+            final User user = importOptions.getUser();\n+            UserCredentials userCredentials = user.getUserCredentials();\n+            HibernateUtils.initializeProxy( userCredentials );\n+            userCredentials.isSuper();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA2MTY4MQ==", "bodyText": "See before.", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r462061681", "createdAt": "2020-07-29T06:14:35Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.hibernate.SessionFactory;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.hibernate.HibernateUtils;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.user.UserCredentials;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Component\n+public class WorkContextLoader\n+{\n+    private final ProgramSupplier programSupplier;\n+\n+    private final OrganisationUnitSupplier organisationUnitSupplier;\n+\n+    private final TrackedEntityInstanceSupplier trackedEntityInstanceSupplier;\n+\n+    private final ProgramInstanceSupplier programInstanceSupplier;\n+\n+    private final ProgramStageInstanceSupplier programStageInstanceSupplier;\n+\n+    private final CategoryOptionComboSupplier categoryOptionComboSupplier;\n+\n+    private final DataElementSupplier dataElementSupplier;\n+\n+    private final NoteSupplier noteSupplier;\n+\n+    private final AssignedUserSupplier assignedUserSupplier;\n+\n+    private final ServiceDelegatorSupplier serviceDelegatorSupplier;\n+\n+    private final static UidGenerator uidGen = new UidGenerator();\n+\n+    private final SessionFactory sessionFactory;\n+\n+    public WorkContextLoader(\n+    // @formatter:off\n+        ProgramSupplier programSupplier,\n+        OrganisationUnitSupplier organisationUnitSupplier,\n+        TrackedEntityInstanceSupplier trackedEntityInstanceSupplier,\n+        ProgramInstanceSupplier programInstanceSupplier,\n+        ProgramStageInstanceSupplier programStageInstanceSupplier,\n+        CategoryOptionComboSupplier categoryOptionComboSupplier,\n+        DataElementSupplier dataElementSupplier,\n+        NoteSupplier noteSupplier,\n+        AssignedUserSupplier assignedUserSupplier,\n+        ServiceDelegatorSupplier serviceDelegatorSupplier,\n+        SessionFactory sessionFactory\n+    // @formatter:on\n+    )\n+    {\n+        this.programSupplier = programSupplier;\n+        this.organisationUnitSupplier = organisationUnitSupplier;\n+        this.trackedEntityInstanceSupplier = trackedEntityInstanceSupplier;\n+        this.programInstanceSupplier = programInstanceSupplier;\n+        this.programStageInstanceSupplier = programStageInstanceSupplier;\n+        this.categoryOptionComboSupplier = categoryOptionComboSupplier;\n+        this.dataElementSupplier = dataElementSupplier;\n+        this.noteSupplier = noteSupplier;\n+        this.assignedUserSupplier = assignedUserSupplier;\n+        this.serviceDelegatorSupplier = serviceDelegatorSupplier;\n+        this.sessionFactory = sessionFactory;\n+    }\n+\n+    @Transactional( readOnly = true )\n+    public WorkContext load( ImportOptions importOptions, List<Event> events )\n+    {\n+        sessionFactory.getCurrentSession().flush();\n+\n+        ImportOptions localImportOptions = importOptions;\n+        // API allows a null Import Options\n+        if ( localImportOptions == null )\n+        {\n+            localImportOptions = ImportOptions.getDefaultImportOptions();\n+        }\n+\n+        initializeUser( localImportOptions );\n+\n+        // Make sure all events have the 'uid' field populated\n+        events = uidGen.assignUidToEvents( events );\n+\n+        final Map<String, ProgramStageInstance> programStageInstanceMap = programStageInstanceSupplier\n+            .get( localImportOptions, events );\n+\n+        final Map<String, Pair<TrackedEntityInstance, Boolean>> teiMap = trackedEntityInstanceSupplier\n+            .get( localImportOptions, events );\n+\n+        return WorkContext.builder()\n+        // @formatter:off\n+            .importOptions( localImportOptions )\n+            .programsMap( programSupplier.get( localImportOptions, events ) )\n+            .programStageInstanceMap( programStageInstanceMap )\n+            .organisationUnitMap( organisationUnitSupplier.get( localImportOptions, events ) )\n+            .trackedEntityInstanceMap( teiMap )\n+            .programInstanceMap( programInstanceSupplier.get( localImportOptions, teiMap, events ) )\n+            .categoryOptionComboMap( categoryOptionComboSupplier.get( localImportOptions, events ) )\n+            .dataElementMap( dataElementSupplier.get( localImportOptions, events ) )\n+            .notesMap( noteSupplier.get( localImportOptions, events ) )\n+            .assignedUserMap( assignedUserSupplier.get( localImportOptions, events ) )\n+            .eventDataValueMap( new EventDataValueAggregator().aggregateDataValues( events, programStageInstanceMap, localImportOptions ))\n+            .serviceDelegator( serviceDelegatorSupplier.get() )\n+            .build();\n+        // @formatter:on\n+    }\n+\n+    /**\n+     * Make sure that the {@see User} object's properties are properly initialized,\n+     * to avoid running into Hibernate-related issues during validation\n+     *\n+     * @param importOptions the {@see ImportOptions} object\n+     */\n+    private void initializeUser( ImportOptions importOptions )\n+    {\n+        if ( importOptions.getUser() == null )\n+        {\n+            final User currentUser = this.serviceDelegatorSupplier.get().getCurrentUserService().getCurrentUser();\n+\n+            //\n+            // This should never really happen!\n+            //\n+            if ( currentUser != null )\n+            {\n+                UserCredentials userCredentials = currentUser.getUserCredentials();\n+                HibernateUtils.initializeProxy( userCredentials );\n+                userCredentials.isSuper();\n+                importOptions.setUser( currentUser );\n+            }\n+        }\n+        else\n+        {\n+            final User user = importOptions.getUser();\n+            UserCredentials userCredentials = user.getUserCredentials();\n+            HibernateUtils.initializeProxy( userCredentials );\n+            userCredentials.isSuper();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYzNTAyMg=="}, "originalCommit": {"oid": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab"}, "originalPosition": 174}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MTk3NTE4OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDo0MjozN1rOG4QGHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNjoxNToyNFrOG4qBww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYzNzE1MQ==", "bodyText": "unused code.", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461637151", "createdAt": "2020-07-28T14:42:37Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.apache.commons.lang.text.StrSubstitutor;\n+import org.apache.logging.log4j.util.Strings;\n+import org.cache2k.Cache;\n+import org.cache2k.Cache2kBuilder;\n+import org.cache2k.integration.CacheLoader;\n+import org.hisp.dhis.category.CategoryCombo;\n+import org.hisp.dhis.category.CategoryOption;\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.common.IdentifiableProperty;\n+import org.hisp.dhis.common.IllegalQueryException;\n+import org.hisp.dhis.commons.util.TextUtils;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.dao.EmptyResultDataAccessException;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Component;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Component\n+public class AttributeOptionComboLoader\n+{\n+    private final JdbcTemplate jdbcTemplate;\n+\n+    private final static String KEY_SEPARATOR = \"-\";\n+\n+    public final static String SQL_GET_CATEGORYOPTIONCOMBO = \"select coc.categoryoptioncomboid, \"\n+            + \"coc.uid, coc.code, coc.ignoreapproval, coc.name, c.uid as cc_uid, c.name as cc_name, \"\n+            + \"string_agg(dec.categoryid::text, ',') as cat_ids from categoryoptioncombo coc \"\n+            + \"join categorycombos_optioncombos co on coc.categoryoptioncomboid = co.categoryoptioncomboid \"\n+            + \"join categorycombo c on co.categorycomboid = c.categorycomboid \"\n+            + \"join categorycombos_categories cc on c.categorycomboid = cc.categorycomboid \"\n+            + \"join dataelementcategory dec on cc.categoryid = dec.categoryid where coc.\"\n+            + \"${resolvedScheme} \"\n+            + \"group by coc.categoryoptioncomboid, coc.uid, coc.code, coc.ignoreapproval, coc.name, cc_uid, cc_name\";\n+\n+    public final static String SQL_GET_CATEGORYOPTIONCOMBO_BY_CATEGORYIDS = \"select * from ( \" +\n+            \"select coc.categoryoptioncomboid, \" +\n+            \"coc.uid, \" +\n+            \"coc.code, \" +\n+            \"coc.ignoreapproval, \" +\n+            \"coc.name, \" +\n+            \"c.uid as cc_uid, \" +\n+            \"c.name as cc_name,\" +\n+            \"string_agg( dec.categoryid::text, ',') as cat_ids \" +\n+            \"from categoryoptioncombo coc \" +\n+            \"join categorycombos_optioncombos co on coc.categoryoptioncomboid = co.categoryoptioncomboid \" +\n+            \"join categorycombo c on co.categorycomboid = c.categorycomboid \" +\n+            \"join categorycombos_categories cc on c.categorycomboid = cc.categorycomboid \" +\n+            \"join dataelementcategory dec on cc.categoryid = dec.categoryid \" +\n+            \"where c.${resolvedScheme} \" +\n+            \"group by coc.categoryoptioncomboid, coc.uid, coc.code, coc.ignoreapproval, coc.name, cc_uid, cc_name \" +\n+            \") as catoptcombo where \" +\n+            \"array_length(regexp_split_to_array(cat_ids, ','),1) = array_length(ARRAY[${option_ids}],1) AND \" +\n+            \"regexp_split_to_array(cat_ids, ',') @> ARRAY[${option_ids}]\";\n+\n+    public AttributeOptionComboLoader( @Qualifier( \"readOnlyJdbcTemplate\" ) JdbcTemplate jdbcTemplate )\n+    {\n+        checkNotNull( jdbcTemplate );\n+\n+        this.jdbcTemplate = jdbcTemplate;\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOptionCombo} by id, using the provided look-up\n+     * Scheme\n+     *\n+     * @param idScheme an IdScheme\n+     * @param id the actual id\n+     * @return a CategoryOptionCombo or null\n+     */\n+    public CategoryOptionCombo getCategoryOptionCombo( IdScheme idScheme, String id )\n+    {\n+        return loadCategoryOptionCombo( idScheme, id );\n+        //return this.cocCache.get( idScheme.name() + KEY_SEPARATOR + id );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA2MjAxOQ==", "bodyText": "Fixed (code removed)", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r462062019", "createdAt": "2020-07-29T06:15:24Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.apache.commons.lang.text.StrSubstitutor;\n+import org.apache.logging.log4j.util.Strings;\n+import org.cache2k.Cache;\n+import org.cache2k.Cache2kBuilder;\n+import org.cache2k.integration.CacheLoader;\n+import org.hisp.dhis.category.CategoryCombo;\n+import org.hisp.dhis.category.CategoryOption;\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.common.IdentifiableProperty;\n+import org.hisp.dhis.common.IllegalQueryException;\n+import org.hisp.dhis.commons.util.TextUtils;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.dao.EmptyResultDataAccessException;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Component;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Component\n+public class AttributeOptionComboLoader\n+{\n+    private final JdbcTemplate jdbcTemplate;\n+\n+    private final static String KEY_SEPARATOR = \"-\";\n+\n+    public final static String SQL_GET_CATEGORYOPTIONCOMBO = \"select coc.categoryoptioncomboid, \"\n+            + \"coc.uid, coc.code, coc.ignoreapproval, coc.name, c.uid as cc_uid, c.name as cc_name, \"\n+            + \"string_agg(dec.categoryid::text, ',') as cat_ids from categoryoptioncombo coc \"\n+            + \"join categorycombos_optioncombos co on coc.categoryoptioncomboid = co.categoryoptioncomboid \"\n+            + \"join categorycombo c on co.categorycomboid = c.categorycomboid \"\n+            + \"join categorycombos_categories cc on c.categorycomboid = cc.categorycomboid \"\n+            + \"join dataelementcategory dec on cc.categoryid = dec.categoryid where coc.\"\n+            + \"${resolvedScheme} \"\n+            + \"group by coc.categoryoptioncomboid, coc.uid, coc.code, coc.ignoreapproval, coc.name, cc_uid, cc_name\";\n+\n+    public final static String SQL_GET_CATEGORYOPTIONCOMBO_BY_CATEGORYIDS = \"select * from ( \" +\n+            \"select coc.categoryoptioncomboid, \" +\n+            \"coc.uid, \" +\n+            \"coc.code, \" +\n+            \"coc.ignoreapproval, \" +\n+            \"coc.name, \" +\n+            \"c.uid as cc_uid, \" +\n+            \"c.name as cc_name,\" +\n+            \"string_agg( dec.categoryid::text, ',') as cat_ids \" +\n+            \"from categoryoptioncombo coc \" +\n+            \"join categorycombos_optioncombos co on coc.categoryoptioncomboid = co.categoryoptioncomboid \" +\n+            \"join categorycombo c on co.categorycomboid = c.categorycomboid \" +\n+            \"join categorycombos_categories cc on c.categorycomboid = cc.categorycomboid \" +\n+            \"join dataelementcategory dec on cc.categoryid = dec.categoryid \" +\n+            \"where c.${resolvedScheme} \" +\n+            \"group by coc.categoryoptioncomboid, coc.uid, coc.code, coc.ignoreapproval, coc.name, cc_uid, cc_name \" +\n+            \") as catoptcombo where \" +\n+            \"array_length(regexp_split_to_array(cat_ids, ','),1) = array_length(ARRAY[${option_ids}],1) AND \" +\n+            \"regexp_split_to_array(cat_ids, ',') @> ARRAY[${option_ids}]\";\n+\n+    public AttributeOptionComboLoader( @Qualifier( \"readOnlyJdbcTemplate\" ) JdbcTemplate jdbcTemplate )\n+    {\n+        checkNotNull( jdbcTemplate );\n+\n+        this.jdbcTemplate = jdbcTemplate;\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOptionCombo} by id, using the provided look-up\n+     * Scheme\n+     *\n+     * @param idScheme an IdScheme\n+     * @param id the actual id\n+     * @return a CategoryOptionCombo or null\n+     */\n+    public CategoryOptionCombo getCategoryOptionCombo( IdScheme idScheme, String id )\n+    {\n+        return loadCategoryOptionCombo( idScheme, id );\n+        //return this.cocCache.get( idScheme.name() + KEY_SEPARATOR + id );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYzNzE1MQ=="}, "originalCommit": {"oid": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MTk3ODc1OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDo0MzoxNlrOG4QISQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDo0MzoxNlrOG4QISQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYzNzcwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return loadCategoryOption( idScheme, id);\n          \n          \n            \n                    return loadCategoryOption( idScheme, id );", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461637705", "createdAt": "2020-07-28T14:43:16Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.apache.commons.lang.text.StrSubstitutor;\n+import org.apache.logging.log4j.util.Strings;\n+import org.cache2k.Cache;\n+import org.cache2k.Cache2kBuilder;\n+import org.cache2k.integration.CacheLoader;\n+import org.hisp.dhis.category.CategoryCombo;\n+import org.hisp.dhis.category.CategoryOption;\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.common.IdentifiableProperty;\n+import org.hisp.dhis.common.IllegalQueryException;\n+import org.hisp.dhis.commons.util.TextUtils;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.dao.EmptyResultDataAccessException;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Component;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Component\n+public class AttributeOptionComboLoader\n+{\n+    private final JdbcTemplate jdbcTemplate;\n+\n+    private final static String KEY_SEPARATOR = \"-\";\n+\n+    public final static String SQL_GET_CATEGORYOPTIONCOMBO = \"select coc.categoryoptioncomboid, \"\n+            + \"coc.uid, coc.code, coc.ignoreapproval, coc.name, c.uid as cc_uid, c.name as cc_name, \"\n+            + \"string_agg(dec.categoryid::text, ',') as cat_ids from categoryoptioncombo coc \"\n+            + \"join categorycombos_optioncombos co on coc.categoryoptioncomboid = co.categoryoptioncomboid \"\n+            + \"join categorycombo c on co.categorycomboid = c.categorycomboid \"\n+            + \"join categorycombos_categories cc on c.categorycomboid = cc.categorycomboid \"\n+            + \"join dataelementcategory dec on cc.categoryid = dec.categoryid where coc.\"\n+            + \"${resolvedScheme} \"\n+            + \"group by coc.categoryoptioncomboid, coc.uid, coc.code, coc.ignoreapproval, coc.name, cc_uid, cc_name\";\n+\n+    public final static String SQL_GET_CATEGORYOPTIONCOMBO_BY_CATEGORYIDS = \"select * from ( \" +\n+            \"select coc.categoryoptioncomboid, \" +\n+            \"coc.uid, \" +\n+            \"coc.code, \" +\n+            \"coc.ignoreapproval, \" +\n+            \"coc.name, \" +\n+            \"c.uid as cc_uid, \" +\n+            \"c.name as cc_name,\" +\n+            \"string_agg( dec.categoryid::text, ',') as cat_ids \" +\n+            \"from categoryoptioncombo coc \" +\n+            \"join categorycombos_optioncombos co on coc.categoryoptioncomboid = co.categoryoptioncomboid \" +\n+            \"join categorycombo c on co.categorycomboid = c.categorycomboid \" +\n+            \"join categorycombos_categories cc on c.categorycomboid = cc.categorycomboid \" +\n+            \"join dataelementcategory dec on cc.categoryid = dec.categoryid \" +\n+            \"where c.${resolvedScheme} \" +\n+            \"group by coc.categoryoptioncomboid, coc.uid, coc.code, coc.ignoreapproval, coc.name, cc_uid, cc_name \" +\n+            \") as catoptcombo where \" +\n+            \"array_length(regexp_split_to_array(cat_ids, ','),1) = array_length(ARRAY[${option_ids}],1) AND \" +\n+            \"regexp_split_to_array(cat_ids, ',') @> ARRAY[${option_ids}]\";\n+\n+    public AttributeOptionComboLoader( @Qualifier( \"readOnlyJdbcTemplate\" ) JdbcTemplate jdbcTemplate )\n+    {\n+        checkNotNull( jdbcTemplate );\n+\n+        this.jdbcTemplate = jdbcTemplate;\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOptionCombo} by id, using the provided look-up\n+     * Scheme\n+     *\n+     * @param idScheme an IdScheme\n+     * @param id the actual id\n+     * @return a CategoryOptionCombo or null\n+     */\n+    public CategoryOptionCombo getCategoryOptionCombo( IdScheme idScheme, String id )\n+    {\n+        return loadCategoryOptionCombo( idScheme, id );\n+        //return this.cocCache.get( idScheme.name() + KEY_SEPARATOR + id );\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOptionCombo}\n+     *\n+     * @param categoryCombo a {@see CategoryCombo}\n+     * @param categoryOptions a semicolon delimited list of Category Options uid\n+     * @param attributeOptionCombo\n+     * @param idScheme the {@see IdScheme} to use to fetch the entity\n+     * @return a {@see CategoryOptionCombo}\n+     */\n+    public CategoryOptionCombo getAttributeOptionCombo( CategoryCombo categoryCombo, String categoryOptions,\n+                                                        String attributeOptionCombo, IdScheme idScheme )\n+    {\n+        final Set<String> opts = TextUtils.splitToArray( categoryOptions, TextUtils.SEMICOLON );\n+\n+        return getAttributeOptionCombo( categoryCombo, opts, attributeOptionCombo, idScheme );\n+    }\n+\n+    /**\n+     * Fetches the default {@see CategoryOptionCombo}\n+     * @return a {@see CategoryOptionCombo} or null\n+     */\n+    public CategoryOptionCombo getDefault()\n+    {\n+        return  loadCategoryOptionCombo( IdScheme.NAME, \"default\" );\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOption} by uid, using the provided look-up Scheme\n+     *\n+     * @param idScheme an IdScheme\n+     * @param id the actual id\n+     * @return a CategoryOption or null\n+     */\n+    private CategoryOption getCategoryOption( IdScheme idScheme, String id )\n+    {\n+        return loadCategoryOption( idScheme, id);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MTk5NTU1OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDo0NjoyNFrOG4QSeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDo0NzozNVrOG4QWXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0MDMxNA==", "bodyText": "If the attributeOptionCombo user supplied doesnt exists, yes we should return an error to the user.", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461640314", "createdAt": "2020-07-28T14:46:24Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.apache.commons.lang.text.StrSubstitutor;\n+import org.apache.logging.log4j.util.Strings;\n+import org.cache2k.Cache;\n+import org.cache2k.Cache2kBuilder;\n+import org.cache2k.integration.CacheLoader;\n+import org.hisp.dhis.category.CategoryCombo;\n+import org.hisp.dhis.category.CategoryOption;\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.common.IdentifiableProperty;\n+import org.hisp.dhis.common.IllegalQueryException;\n+import org.hisp.dhis.commons.util.TextUtils;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.dao.EmptyResultDataAccessException;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Component;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Component\n+public class AttributeOptionComboLoader\n+{\n+    private final JdbcTemplate jdbcTemplate;\n+\n+    private final static String KEY_SEPARATOR = \"-\";\n+\n+    public final static String SQL_GET_CATEGORYOPTIONCOMBO = \"select coc.categoryoptioncomboid, \"\n+            + \"coc.uid, coc.code, coc.ignoreapproval, coc.name, c.uid as cc_uid, c.name as cc_name, \"\n+            + \"string_agg(dec.categoryid::text, ',') as cat_ids from categoryoptioncombo coc \"\n+            + \"join categorycombos_optioncombos co on coc.categoryoptioncomboid = co.categoryoptioncomboid \"\n+            + \"join categorycombo c on co.categorycomboid = c.categorycomboid \"\n+            + \"join categorycombos_categories cc on c.categorycomboid = cc.categorycomboid \"\n+            + \"join dataelementcategory dec on cc.categoryid = dec.categoryid where coc.\"\n+            + \"${resolvedScheme} \"\n+            + \"group by coc.categoryoptioncomboid, coc.uid, coc.code, coc.ignoreapproval, coc.name, cc_uid, cc_name\";\n+\n+    public final static String SQL_GET_CATEGORYOPTIONCOMBO_BY_CATEGORYIDS = \"select * from ( \" +\n+            \"select coc.categoryoptioncomboid, \" +\n+            \"coc.uid, \" +\n+            \"coc.code, \" +\n+            \"coc.ignoreapproval, \" +\n+            \"coc.name, \" +\n+            \"c.uid as cc_uid, \" +\n+            \"c.name as cc_name,\" +\n+            \"string_agg( dec.categoryid::text, ',') as cat_ids \" +\n+            \"from categoryoptioncombo coc \" +\n+            \"join categorycombos_optioncombos co on coc.categoryoptioncomboid = co.categoryoptioncomboid \" +\n+            \"join categorycombo c on co.categorycomboid = c.categorycomboid \" +\n+            \"join categorycombos_categories cc on c.categorycomboid = cc.categorycomboid \" +\n+            \"join dataelementcategory dec on cc.categoryid = dec.categoryid \" +\n+            \"where c.${resolvedScheme} \" +\n+            \"group by coc.categoryoptioncomboid, coc.uid, coc.code, coc.ignoreapproval, coc.name, cc_uid, cc_name \" +\n+            \") as catoptcombo where \" +\n+            \"array_length(regexp_split_to_array(cat_ids, ','),1) = array_length(ARRAY[${option_ids}],1) AND \" +\n+            \"regexp_split_to_array(cat_ids, ',') @> ARRAY[${option_ids}]\";\n+\n+    public AttributeOptionComboLoader( @Qualifier( \"readOnlyJdbcTemplate\" ) JdbcTemplate jdbcTemplate )\n+    {\n+        checkNotNull( jdbcTemplate );\n+\n+        this.jdbcTemplate = jdbcTemplate;\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOptionCombo} by id, using the provided look-up\n+     * Scheme\n+     *\n+     * @param idScheme an IdScheme\n+     * @param id the actual id\n+     * @return a CategoryOptionCombo or null\n+     */\n+    public CategoryOptionCombo getCategoryOptionCombo( IdScheme idScheme, String id )\n+    {\n+        return loadCategoryOptionCombo( idScheme, id );\n+        //return this.cocCache.get( idScheme.name() + KEY_SEPARATOR + id );\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOptionCombo}\n+     *\n+     * @param categoryCombo a {@see CategoryCombo}\n+     * @param categoryOptions a semicolon delimited list of Category Options uid\n+     * @param attributeOptionCombo\n+     * @param idScheme the {@see IdScheme} to use to fetch the entity\n+     * @return a {@see CategoryOptionCombo}\n+     */\n+    public CategoryOptionCombo getAttributeOptionCombo( CategoryCombo categoryCombo, String categoryOptions,\n+                                                        String attributeOptionCombo, IdScheme idScheme )\n+    {\n+        final Set<String> opts = TextUtils.splitToArray( categoryOptions, TextUtils.SEMICOLON );\n+\n+        return getAttributeOptionCombo( categoryCombo, opts, attributeOptionCombo, idScheme );\n+    }\n+\n+    /**\n+     * Fetches the default {@see CategoryOptionCombo}\n+     * @return a {@see CategoryOptionCombo} or null\n+     */\n+    public CategoryOptionCombo getDefault()\n+    {\n+        return  loadCategoryOptionCombo( IdScheme.NAME, \"default\" );\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOption} by uid, using the provided look-up Scheme\n+     *\n+     * @param idScheme an IdScheme\n+     * @param id the actual id\n+     * @return a CategoryOption or null\n+     */\n+    private CategoryOption getCategoryOption( IdScheme idScheme, String id )\n+    {\n+        return loadCategoryOption( idScheme, id);\n+    }\n+\n+    private CategoryOptionCombo getAttributeOptionCombo( CategoryCombo categoryCombo, Set<String> opts,\n+        String attributeOptionCombo, IdScheme idScheme )\n+    {\n+        if ( categoryCombo == null )\n+        {\n+            throw new IllegalQueryException( \"Illegal category combo\" );\n+        }\n+\n+        // ---------------------------------------------------------------------\n+        // Attribute category options validation\n+        // ---------------------------------------------------------------------\n+\n+        CategoryOptionCombo attrOptCombo = null;\n+\n+        if ( opts != null )\n+        {\n+            Set<CategoryOption> categoryOptions = new HashSet<>();\n+\n+            for ( String uid : opts )\n+            {\n+                CategoryOption categoryOption = getCategoryOption( idScheme, uid );\n+\n+                if ( categoryOption == null )\n+                {\n+                    throw new IllegalQueryException( \"Illegal category option identifier: \" + uid );\n+                }\n+\n+                categoryOptions.add( categoryOption );\n+            }\n+\n+            final String id = resolveCategoryComboId( categoryCombo, idScheme );\n+\n+            attrOptCombo = getAttributeOptionCombo( idScheme, id, categoryOptions );\n+\n+            if ( attrOptCombo == null )\n+            {\n+                throw new IllegalQueryException(\n+                    \"Attribute option combo does not exist for given category combo and category options\" );\n+            }\n+        }\n+        else if ( attributeOptionCombo != null )\n+        {\n+            attrOptCombo = getCategoryOptionCombo( idScheme, attributeOptionCombo );\n+        }\n+\n+        // ---------------------------------------------------------------------\n+        // Fall back to default category option combination\n+        // ---------------------------------------------------------------------\n+\n+        if ( attrOptCombo == null )\n+        {\n+            attrOptCombo = getDefault();\n+        }\n+\n+        if ( attrOptCombo == null )\n+        {\n+            throw new IllegalQueryException( \"Default attribute option combo does not exist\" );\n+        }\n+\n+        return attrOptCombo;\n+    }\n+\n+    private String resolveCategoryComboId( CategoryCombo categoryCombo, IdScheme idScheme )\n+    {\n+        String id = null;\n+\n+        if ( idScheme.is( IdentifiableProperty.ID ) )\n+        {\n+            id = String.valueOf( categoryCombo.getId() );\n+        }\n+        else if ( idScheme.is( IdentifiableProperty.UID ) )\n+        {\n+            id = categoryCombo.getUid();\n+        }\n+        else if ( idScheme.is( IdentifiableProperty.CODE ) )\n+        {\n+            id = categoryCombo.getCode();\n+        }\n+        else if ( idScheme.is( IdentifiableProperty.NAME ) )\n+        {\n+            id = categoryCombo.getName();\n+        }\n+\n+        return id;\n+    }\n+\n+    private CategoryOptionCombo getAttributeOptionCombo( IdScheme idScheme, String categoryComboId, Set<CategoryOption> categoryOptions) {\n+\n+        final String key = \"categorycomboid\";\n+        final String categoryComboKey = resolveId( idScheme, key, categoryComboId);\n+\n+        final String optionsId = categoryOptions.stream()\n+            .map( co -> Long.toString( co.getId() ) )\n+            .map(s -> \"'\" + s + \"'\")\n+            .collect( Collectors.joining( \",\" ) );\n+\n+        // @formatter:off\n+        StrSubstitutor sub = new StrSubstitutor( ImmutableMap.<String, String>builder()\n+                .put( \"resolvedScheme\", Objects.requireNonNull( categoryComboKey ) )\n+                .put( \"option_ids\", optionsId )\n+                .build() );\n+        // @formatter:on\n+        \n+        // TODO use cache\n+        List<CategoryOptionCombo> categoryOptionCombos = jdbcTemplate\n+            .query( sub.replace( SQL_GET_CATEGORYOPTIONCOMBO_BY_CATEGORYIDS ), ( rs, i ) -> bind( key, rs ) );\n+\n+        if ( categoryOptionCombos.size() == 1 )\n+        {\n+            return categoryOptionCombos.get( 0 );\n+        }\n+        else\n+        {\n+            // TODO throw an error??", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab"}, "originalPosition": 275}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0MTMwOQ==", "bodyText": "At least this is how I understand the code here :)", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461641309", "createdAt": "2020-07-28T14:47:35Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.apache.commons.lang.text.StrSubstitutor;\n+import org.apache.logging.log4j.util.Strings;\n+import org.cache2k.Cache;\n+import org.cache2k.Cache2kBuilder;\n+import org.cache2k.integration.CacheLoader;\n+import org.hisp.dhis.category.CategoryCombo;\n+import org.hisp.dhis.category.CategoryOption;\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.common.IdentifiableProperty;\n+import org.hisp.dhis.common.IllegalQueryException;\n+import org.hisp.dhis.commons.util.TextUtils;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.dao.EmptyResultDataAccessException;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Component;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Component\n+public class AttributeOptionComboLoader\n+{\n+    private final JdbcTemplate jdbcTemplate;\n+\n+    private final static String KEY_SEPARATOR = \"-\";\n+\n+    public final static String SQL_GET_CATEGORYOPTIONCOMBO = \"select coc.categoryoptioncomboid, \"\n+            + \"coc.uid, coc.code, coc.ignoreapproval, coc.name, c.uid as cc_uid, c.name as cc_name, \"\n+            + \"string_agg(dec.categoryid::text, ',') as cat_ids from categoryoptioncombo coc \"\n+            + \"join categorycombos_optioncombos co on coc.categoryoptioncomboid = co.categoryoptioncomboid \"\n+            + \"join categorycombo c on co.categorycomboid = c.categorycomboid \"\n+            + \"join categorycombos_categories cc on c.categorycomboid = cc.categorycomboid \"\n+            + \"join dataelementcategory dec on cc.categoryid = dec.categoryid where coc.\"\n+            + \"${resolvedScheme} \"\n+            + \"group by coc.categoryoptioncomboid, coc.uid, coc.code, coc.ignoreapproval, coc.name, cc_uid, cc_name\";\n+\n+    public final static String SQL_GET_CATEGORYOPTIONCOMBO_BY_CATEGORYIDS = \"select * from ( \" +\n+            \"select coc.categoryoptioncomboid, \" +\n+            \"coc.uid, \" +\n+            \"coc.code, \" +\n+            \"coc.ignoreapproval, \" +\n+            \"coc.name, \" +\n+            \"c.uid as cc_uid, \" +\n+            \"c.name as cc_name,\" +\n+            \"string_agg( dec.categoryid::text, ',') as cat_ids \" +\n+            \"from categoryoptioncombo coc \" +\n+            \"join categorycombos_optioncombos co on coc.categoryoptioncomboid = co.categoryoptioncomboid \" +\n+            \"join categorycombo c on co.categorycomboid = c.categorycomboid \" +\n+            \"join categorycombos_categories cc on c.categorycomboid = cc.categorycomboid \" +\n+            \"join dataelementcategory dec on cc.categoryid = dec.categoryid \" +\n+            \"where c.${resolvedScheme} \" +\n+            \"group by coc.categoryoptioncomboid, coc.uid, coc.code, coc.ignoreapproval, coc.name, cc_uid, cc_name \" +\n+            \") as catoptcombo where \" +\n+            \"array_length(regexp_split_to_array(cat_ids, ','),1) = array_length(ARRAY[${option_ids}],1) AND \" +\n+            \"regexp_split_to_array(cat_ids, ',') @> ARRAY[${option_ids}]\";\n+\n+    public AttributeOptionComboLoader( @Qualifier( \"readOnlyJdbcTemplate\" ) JdbcTemplate jdbcTemplate )\n+    {\n+        checkNotNull( jdbcTemplate );\n+\n+        this.jdbcTemplate = jdbcTemplate;\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOptionCombo} by id, using the provided look-up\n+     * Scheme\n+     *\n+     * @param idScheme an IdScheme\n+     * @param id the actual id\n+     * @return a CategoryOptionCombo or null\n+     */\n+    public CategoryOptionCombo getCategoryOptionCombo( IdScheme idScheme, String id )\n+    {\n+        return loadCategoryOptionCombo( idScheme, id );\n+        //return this.cocCache.get( idScheme.name() + KEY_SEPARATOR + id );\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOptionCombo}\n+     *\n+     * @param categoryCombo a {@see CategoryCombo}\n+     * @param categoryOptions a semicolon delimited list of Category Options uid\n+     * @param attributeOptionCombo\n+     * @param idScheme the {@see IdScheme} to use to fetch the entity\n+     * @return a {@see CategoryOptionCombo}\n+     */\n+    public CategoryOptionCombo getAttributeOptionCombo( CategoryCombo categoryCombo, String categoryOptions,\n+                                                        String attributeOptionCombo, IdScheme idScheme )\n+    {\n+        final Set<String> opts = TextUtils.splitToArray( categoryOptions, TextUtils.SEMICOLON );\n+\n+        return getAttributeOptionCombo( categoryCombo, opts, attributeOptionCombo, idScheme );\n+    }\n+\n+    /**\n+     * Fetches the default {@see CategoryOptionCombo}\n+     * @return a {@see CategoryOptionCombo} or null\n+     */\n+    public CategoryOptionCombo getDefault()\n+    {\n+        return  loadCategoryOptionCombo( IdScheme.NAME, \"default\" );\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOption} by uid, using the provided look-up Scheme\n+     *\n+     * @param idScheme an IdScheme\n+     * @param id the actual id\n+     * @return a CategoryOption or null\n+     */\n+    private CategoryOption getCategoryOption( IdScheme idScheme, String id )\n+    {\n+        return loadCategoryOption( idScheme, id);\n+    }\n+\n+    private CategoryOptionCombo getAttributeOptionCombo( CategoryCombo categoryCombo, Set<String> opts,\n+        String attributeOptionCombo, IdScheme idScheme )\n+    {\n+        if ( categoryCombo == null )\n+        {\n+            throw new IllegalQueryException( \"Illegal category combo\" );\n+        }\n+\n+        // ---------------------------------------------------------------------\n+        // Attribute category options validation\n+        // ---------------------------------------------------------------------\n+\n+        CategoryOptionCombo attrOptCombo = null;\n+\n+        if ( opts != null )\n+        {\n+            Set<CategoryOption> categoryOptions = new HashSet<>();\n+\n+            for ( String uid : opts )\n+            {\n+                CategoryOption categoryOption = getCategoryOption( idScheme, uid );\n+\n+                if ( categoryOption == null )\n+                {\n+                    throw new IllegalQueryException( \"Illegal category option identifier: \" + uid );\n+                }\n+\n+                categoryOptions.add( categoryOption );\n+            }\n+\n+            final String id = resolveCategoryComboId( categoryCombo, idScheme );\n+\n+            attrOptCombo = getAttributeOptionCombo( idScheme, id, categoryOptions );\n+\n+            if ( attrOptCombo == null )\n+            {\n+                throw new IllegalQueryException(\n+                    \"Attribute option combo does not exist for given category combo and category options\" );\n+            }\n+        }\n+        else if ( attributeOptionCombo != null )\n+        {\n+            attrOptCombo = getCategoryOptionCombo( idScheme, attributeOptionCombo );\n+        }\n+\n+        // ---------------------------------------------------------------------\n+        // Fall back to default category option combination\n+        // ---------------------------------------------------------------------\n+\n+        if ( attrOptCombo == null )\n+        {\n+            attrOptCombo = getDefault();\n+        }\n+\n+        if ( attrOptCombo == null )\n+        {\n+            throw new IllegalQueryException( \"Default attribute option combo does not exist\" );\n+        }\n+\n+        return attrOptCombo;\n+    }\n+\n+    private String resolveCategoryComboId( CategoryCombo categoryCombo, IdScheme idScheme )\n+    {\n+        String id = null;\n+\n+        if ( idScheme.is( IdentifiableProperty.ID ) )\n+        {\n+            id = String.valueOf( categoryCombo.getId() );\n+        }\n+        else if ( idScheme.is( IdentifiableProperty.UID ) )\n+        {\n+            id = categoryCombo.getUid();\n+        }\n+        else if ( idScheme.is( IdentifiableProperty.CODE ) )\n+        {\n+            id = categoryCombo.getCode();\n+        }\n+        else if ( idScheme.is( IdentifiableProperty.NAME ) )\n+        {\n+            id = categoryCombo.getName();\n+        }\n+\n+        return id;\n+    }\n+\n+    private CategoryOptionCombo getAttributeOptionCombo( IdScheme idScheme, String categoryComboId, Set<CategoryOption> categoryOptions) {\n+\n+        final String key = \"categorycomboid\";\n+        final String categoryComboKey = resolveId( idScheme, key, categoryComboId);\n+\n+        final String optionsId = categoryOptions.stream()\n+            .map( co -> Long.toString( co.getId() ) )\n+            .map(s -> \"'\" + s + \"'\")\n+            .collect( Collectors.joining( \",\" ) );\n+\n+        // @formatter:off\n+        StrSubstitutor sub = new StrSubstitutor( ImmutableMap.<String, String>builder()\n+                .put( \"resolvedScheme\", Objects.requireNonNull( categoryComboKey ) )\n+                .put( \"option_ids\", optionsId )\n+                .build() );\n+        // @formatter:on\n+        \n+        // TODO use cache\n+        List<CategoryOptionCombo> categoryOptionCombos = jdbcTemplate\n+            .query( sub.replace( SQL_GET_CATEGORYOPTIONCOMBO_BY_CATEGORYIDS ), ( rs, i ) -> bind( key, rs ) );\n+\n+        if ( categoryOptionCombos.size() == 1 )\n+        {\n+            return categoryOptionCombos.get( 0 );\n+        }\n+        else\n+        {\n+            // TODO throw an error??", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0MDMxNA=="}, "originalCommit": {"oid": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab"}, "originalPosition": 275}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MTk5NzU2OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDo0Njo0N1rOG4QTwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDo0Njo0N1rOG4QTwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0MDY0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        .map(s -> \"'\" + s + \"'\")\n          \n          \n            \n                        .map( s -> \"'\" + s + \"'\" )", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461640640", "createdAt": "2020-07-28T14:46:47Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.apache.commons.lang.text.StrSubstitutor;\n+import org.apache.logging.log4j.util.Strings;\n+import org.cache2k.Cache;\n+import org.cache2k.Cache2kBuilder;\n+import org.cache2k.integration.CacheLoader;\n+import org.hisp.dhis.category.CategoryCombo;\n+import org.hisp.dhis.category.CategoryOption;\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.common.IdentifiableProperty;\n+import org.hisp.dhis.common.IllegalQueryException;\n+import org.hisp.dhis.commons.util.TextUtils;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.dao.EmptyResultDataAccessException;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Component;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Component\n+public class AttributeOptionComboLoader\n+{\n+    private final JdbcTemplate jdbcTemplate;\n+\n+    private final static String KEY_SEPARATOR = \"-\";\n+\n+    public final static String SQL_GET_CATEGORYOPTIONCOMBO = \"select coc.categoryoptioncomboid, \"\n+            + \"coc.uid, coc.code, coc.ignoreapproval, coc.name, c.uid as cc_uid, c.name as cc_name, \"\n+            + \"string_agg(dec.categoryid::text, ',') as cat_ids from categoryoptioncombo coc \"\n+            + \"join categorycombos_optioncombos co on coc.categoryoptioncomboid = co.categoryoptioncomboid \"\n+            + \"join categorycombo c on co.categorycomboid = c.categorycomboid \"\n+            + \"join categorycombos_categories cc on c.categorycomboid = cc.categorycomboid \"\n+            + \"join dataelementcategory dec on cc.categoryid = dec.categoryid where coc.\"\n+            + \"${resolvedScheme} \"\n+            + \"group by coc.categoryoptioncomboid, coc.uid, coc.code, coc.ignoreapproval, coc.name, cc_uid, cc_name\";\n+\n+    public final static String SQL_GET_CATEGORYOPTIONCOMBO_BY_CATEGORYIDS = \"select * from ( \" +\n+            \"select coc.categoryoptioncomboid, \" +\n+            \"coc.uid, \" +\n+            \"coc.code, \" +\n+            \"coc.ignoreapproval, \" +\n+            \"coc.name, \" +\n+            \"c.uid as cc_uid, \" +\n+            \"c.name as cc_name,\" +\n+            \"string_agg( dec.categoryid::text, ',') as cat_ids \" +\n+            \"from categoryoptioncombo coc \" +\n+            \"join categorycombos_optioncombos co on coc.categoryoptioncomboid = co.categoryoptioncomboid \" +\n+            \"join categorycombo c on co.categorycomboid = c.categorycomboid \" +\n+            \"join categorycombos_categories cc on c.categorycomboid = cc.categorycomboid \" +\n+            \"join dataelementcategory dec on cc.categoryid = dec.categoryid \" +\n+            \"where c.${resolvedScheme} \" +\n+            \"group by coc.categoryoptioncomboid, coc.uid, coc.code, coc.ignoreapproval, coc.name, cc_uid, cc_name \" +\n+            \") as catoptcombo where \" +\n+            \"array_length(regexp_split_to_array(cat_ids, ','),1) = array_length(ARRAY[${option_ids}],1) AND \" +\n+            \"regexp_split_to_array(cat_ids, ',') @> ARRAY[${option_ids}]\";\n+\n+    public AttributeOptionComboLoader( @Qualifier( \"readOnlyJdbcTemplate\" ) JdbcTemplate jdbcTemplate )\n+    {\n+        checkNotNull( jdbcTemplate );\n+\n+        this.jdbcTemplate = jdbcTemplate;\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOptionCombo} by id, using the provided look-up\n+     * Scheme\n+     *\n+     * @param idScheme an IdScheme\n+     * @param id the actual id\n+     * @return a CategoryOptionCombo or null\n+     */\n+    public CategoryOptionCombo getCategoryOptionCombo( IdScheme idScheme, String id )\n+    {\n+        return loadCategoryOptionCombo( idScheme, id );\n+        //return this.cocCache.get( idScheme.name() + KEY_SEPARATOR + id );\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOptionCombo}\n+     *\n+     * @param categoryCombo a {@see CategoryCombo}\n+     * @param categoryOptions a semicolon delimited list of Category Options uid\n+     * @param attributeOptionCombo\n+     * @param idScheme the {@see IdScheme} to use to fetch the entity\n+     * @return a {@see CategoryOptionCombo}\n+     */\n+    public CategoryOptionCombo getAttributeOptionCombo( CategoryCombo categoryCombo, String categoryOptions,\n+                                                        String attributeOptionCombo, IdScheme idScheme )\n+    {\n+        final Set<String> opts = TextUtils.splitToArray( categoryOptions, TextUtils.SEMICOLON );\n+\n+        return getAttributeOptionCombo( categoryCombo, opts, attributeOptionCombo, idScheme );\n+    }\n+\n+    /**\n+     * Fetches the default {@see CategoryOptionCombo}\n+     * @return a {@see CategoryOptionCombo} or null\n+     */\n+    public CategoryOptionCombo getDefault()\n+    {\n+        return  loadCategoryOptionCombo( IdScheme.NAME, \"default\" );\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOption} by uid, using the provided look-up Scheme\n+     *\n+     * @param idScheme an IdScheme\n+     * @param id the actual id\n+     * @return a CategoryOption or null\n+     */\n+    private CategoryOption getCategoryOption( IdScheme idScheme, String id )\n+    {\n+        return loadCategoryOption( idScheme, id);\n+    }\n+\n+    private CategoryOptionCombo getAttributeOptionCombo( CategoryCombo categoryCombo, Set<String> opts,\n+        String attributeOptionCombo, IdScheme idScheme )\n+    {\n+        if ( categoryCombo == null )\n+        {\n+            throw new IllegalQueryException( \"Illegal category combo\" );\n+        }\n+\n+        // ---------------------------------------------------------------------\n+        // Attribute category options validation\n+        // ---------------------------------------------------------------------\n+\n+        CategoryOptionCombo attrOptCombo = null;\n+\n+        if ( opts != null )\n+        {\n+            Set<CategoryOption> categoryOptions = new HashSet<>();\n+\n+            for ( String uid : opts )\n+            {\n+                CategoryOption categoryOption = getCategoryOption( idScheme, uid );\n+\n+                if ( categoryOption == null )\n+                {\n+                    throw new IllegalQueryException( \"Illegal category option identifier: \" + uid );\n+                }\n+\n+                categoryOptions.add( categoryOption );\n+            }\n+\n+            final String id = resolveCategoryComboId( categoryCombo, idScheme );\n+\n+            attrOptCombo = getAttributeOptionCombo( idScheme, id, categoryOptions );\n+\n+            if ( attrOptCombo == null )\n+            {\n+                throw new IllegalQueryException(\n+                    \"Attribute option combo does not exist for given category combo and category options\" );\n+            }\n+        }\n+        else if ( attributeOptionCombo != null )\n+        {\n+            attrOptCombo = getCategoryOptionCombo( idScheme, attributeOptionCombo );\n+        }\n+\n+        // ---------------------------------------------------------------------\n+        // Fall back to default category option combination\n+        // ---------------------------------------------------------------------\n+\n+        if ( attrOptCombo == null )\n+        {\n+            attrOptCombo = getDefault();\n+        }\n+\n+        if ( attrOptCombo == null )\n+        {\n+            throw new IllegalQueryException( \"Default attribute option combo does not exist\" );\n+        }\n+\n+        return attrOptCombo;\n+    }\n+\n+    private String resolveCategoryComboId( CategoryCombo categoryCombo, IdScheme idScheme )\n+    {\n+        String id = null;\n+\n+        if ( idScheme.is( IdentifiableProperty.ID ) )\n+        {\n+            id = String.valueOf( categoryCombo.getId() );\n+        }\n+        else if ( idScheme.is( IdentifiableProperty.UID ) )\n+        {\n+            id = categoryCombo.getUid();\n+        }\n+        else if ( idScheme.is( IdentifiableProperty.CODE ) )\n+        {\n+            id = categoryCombo.getCode();\n+        }\n+        else if ( idScheme.is( IdentifiableProperty.NAME ) )\n+        {\n+            id = categoryCombo.getName();\n+        }\n+\n+        return id;\n+    }\n+\n+    private CategoryOptionCombo getAttributeOptionCombo( IdScheme idScheme, String categoryComboId, Set<CategoryOption> categoryOptions) {\n+\n+        final String key = \"categorycomboid\";\n+        final String categoryComboKey = resolveId( idScheme, key, categoryComboId);\n+\n+        final String optionsId = categoryOptions.stream()\n+            .map( co -> Long.toString( co.getId() ) )\n+            .map(s -> \"'\" + s + \"'\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab"}, "originalPosition": 255}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MTk5ODcwOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDo0Njo1OVrOG4QUcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDo0Njo1OVrOG4QUcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0MDgxOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final String categoryComboKey = resolveId( idScheme, key, categoryComboId);\n          \n          \n            \n                    final String categoryComboKey = resolveId( idScheme, key, categoryComboId );", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461640818", "createdAt": "2020-07-28T14:46:59Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.apache.commons.lang.text.StrSubstitutor;\n+import org.apache.logging.log4j.util.Strings;\n+import org.cache2k.Cache;\n+import org.cache2k.Cache2kBuilder;\n+import org.cache2k.integration.CacheLoader;\n+import org.hisp.dhis.category.CategoryCombo;\n+import org.hisp.dhis.category.CategoryOption;\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.common.IdentifiableProperty;\n+import org.hisp.dhis.common.IllegalQueryException;\n+import org.hisp.dhis.commons.util.TextUtils;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.dao.EmptyResultDataAccessException;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Component;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Component\n+public class AttributeOptionComboLoader\n+{\n+    private final JdbcTemplate jdbcTemplate;\n+\n+    private final static String KEY_SEPARATOR = \"-\";\n+\n+    public final static String SQL_GET_CATEGORYOPTIONCOMBO = \"select coc.categoryoptioncomboid, \"\n+            + \"coc.uid, coc.code, coc.ignoreapproval, coc.name, c.uid as cc_uid, c.name as cc_name, \"\n+            + \"string_agg(dec.categoryid::text, ',') as cat_ids from categoryoptioncombo coc \"\n+            + \"join categorycombos_optioncombos co on coc.categoryoptioncomboid = co.categoryoptioncomboid \"\n+            + \"join categorycombo c on co.categorycomboid = c.categorycomboid \"\n+            + \"join categorycombos_categories cc on c.categorycomboid = cc.categorycomboid \"\n+            + \"join dataelementcategory dec on cc.categoryid = dec.categoryid where coc.\"\n+            + \"${resolvedScheme} \"\n+            + \"group by coc.categoryoptioncomboid, coc.uid, coc.code, coc.ignoreapproval, coc.name, cc_uid, cc_name\";\n+\n+    public final static String SQL_GET_CATEGORYOPTIONCOMBO_BY_CATEGORYIDS = \"select * from ( \" +\n+            \"select coc.categoryoptioncomboid, \" +\n+            \"coc.uid, \" +\n+            \"coc.code, \" +\n+            \"coc.ignoreapproval, \" +\n+            \"coc.name, \" +\n+            \"c.uid as cc_uid, \" +\n+            \"c.name as cc_name,\" +\n+            \"string_agg( dec.categoryid::text, ',') as cat_ids \" +\n+            \"from categoryoptioncombo coc \" +\n+            \"join categorycombos_optioncombos co on coc.categoryoptioncomboid = co.categoryoptioncomboid \" +\n+            \"join categorycombo c on co.categorycomboid = c.categorycomboid \" +\n+            \"join categorycombos_categories cc on c.categorycomboid = cc.categorycomboid \" +\n+            \"join dataelementcategory dec on cc.categoryid = dec.categoryid \" +\n+            \"where c.${resolvedScheme} \" +\n+            \"group by coc.categoryoptioncomboid, coc.uid, coc.code, coc.ignoreapproval, coc.name, cc_uid, cc_name \" +\n+            \") as catoptcombo where \" +\n+            \"array_length(regexp_split_to_array(cat_ids, ','),1) = array_length(ARRAY[${option_ids}],1) AND \" +\n+            \"regexp_split_to_array(cat_ids, ',') @> ARRAY[${option_ids}]\";\n+\n+    public AttributeOptionComboLoader( @Qualifier( \"readOnlyJdbcTemplate\" ) JdbcTemplate jdbcTemplate )\n+    {\n+        checkNotNull( jdbcTemplate );\n+\n+        this.jdbcTemplate = jdbcTemplate;\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOptionCombo} by id, using the provided look-up\n+     * Scheme\n+     *\n+     * @param idScheme an IdScheme\n+     * @param id the actual id\n+     * @return a CategoryOptionCombo or null\n+     */\n+    public CategoryOptionCombo getCategoryOptionCombo( IdScheme idScheme, String id )\n+    {\n+        return loadCategoryOptionCombo( idScheme, id );\n+        //return this.cocCache.get( idScheme.name() + KEY_SEPARATOR + id );\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOptionCombo}\n+     *\n+     * @param categoryCombo a {@see CategoryCombo}\n+     * @param categoryOptions a semicolon delimited list of Category Options uid\n+     * @param attributeOptionCombo\n+     * @param idScheme the {@see IdScheme} to use to fetch the entity\n+     * @return a {@see CategoryOptionCombo}\n+     */\n+    public CategoryOptionCombo getAttributeOptionCombo( CategoryCombo categoryCombo, String categoryOptions,\n+                                                        String attributeOptionCombo, IdScheme idScheme )\n+    {\n+        final Set<String> opts = TextUtils.splitToArray( categoryOptions, TextUtils.SEMICOLON );\n+\n+        return getAttributeOptionCombo( categoryCombo, opts, attributeOptionCombo, idScheme );\n+    }\n+\n+    /**\n+     * Fetches the default {@see CategoryOptionCombo}\n+     * @return a {@see CategoryOptionCombo} or null\n+     */\n+    public CategoryOptionCombo getDefault()\n+    {\n+        return  loadCategoryOptionCombo( IdScheme.NAME, \"default\" );\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOption} by uid, using the provided look-up Scheme\n+     *\n+     * @param idScheme an IdScheme\n+     * @param id the actual id\n+     * @return a CategoryOption or null\n+     */\n+    private CategoryOption getCategoryOption( IdScheme idScheme, String id )\n+    {\n+        return loadCategoryOption( idScheme, id);\n+    }\n+\n+    private CategoryOptionCombo getAttributeOptionCombo( CategoryCombo categoryCombo, Set<String> opts,\n+        String attributeOptionCombo, IdScheme idScheme )\n+    {\n+        if ( categoryCombo == null )\n+        {\n+            throw new IllegalQueryException( \"Illegal category combo\" );\n+        }\n+\n+        // ---------------------------------------------------------------------\n+        // Attribute category options validation\n+        // ---------------------------------------------------------------------\n+\n+        CategoryOptionCombo attrOptCombo = null;\n+\n+        if ( opts != null )\n+        {\n+            Set<CategoryOption> categoryOptions = new HashSet<>();\n+\n+            for ( String uid : opts )\n+            {\n+                CategoryOption categoryOption = getCategoryOption( idScheme, uid );\n+\n+                if ( categoryOption == null )\n+                {\n+                    throw new IllegalQueryException( \"Illegal category option identifier: \" + uid );\n+                }\n+\n+                categoryOptions.add( categoryOption );\n+            }\n+\n+            final String id = resolveCategoryComboId( categoryCombo, idScheme );\n+\n+            attrOptCombo = getAttributeOptionCombo( idScheme, id, categoryOptions );\n+\n+            if ( attrOptCombo == null )\n+            {\n+                throw new IllegalQueryException(\n+                    \"Attribute option combo does not exist for given category combo and category options\" );\n+            }\n+        }\n+        else if ( attributeOptionCombo != null )\n+        {\n+            attrOptCombo = getCategoryOptionCombo( idScheme, attributeOptionCombo );\n+        }\n+\n+        // ---------------------------------------------------------------------\n+        // Fall back to default category option combination\n+        // ---------------------------------------------------------------------\n+\n+        if ( attrOptCombo == null )\n+        {\n+            attrOptCombo = getDefault();\n+        }\n+\n+        if ( attrOptCombo == null )\n+        {\n+            throw new IllegalQueryException( \"Default attribute option combo does not exist\" );\n+        }\n+\n+        return attrOptCombo;\n+    }\n+\n+    private String resolveCategoryComboId( CategoryCombo categoryCombo, IdScheme idScheme )\n+    {\n+        String id = null;\n+\n+        if ( idScheme.is( IdentifiableProperty.ID ) )\n+        {\n+            id = String.valueOf( categoryCombo.getId() );\n+        }\n+        else if ( idScheme.is( IdentifiableProperty.UID ) )\n+        {\n+            id = categoryCombo.getUid();\n+        }\n+        else if ( idScheme.is( IdentifiableProperty.CODE ) )\n+        {\n+            id = categoryCombo.getCode();\n+        }\n+        else if ( idScheme.is( IdentifiableProperty.NAME ) )\n+        {\n+            id = categoryCombo.getName();\n+        }\n+\n+        return id;\n+    }\n+\n+    private CategoryOptionCombo getAttributeOptionCombo( IdScheme idScheme, String categoryComboId, Set<CategoryOption> categoryOptions) {\n+\n+        final String key = \"categorycomboid\";\n+        final String categoryComboKey = resolveId( idScheme, key, categoryComboId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab"}, "originalPosition": 251}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MTk5OTQzOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDo0NzowOFrOG4QU7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDo0NzowOFrOG4QU7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0MDk0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private CategoryOptionCombo getAttributeOptionCombo( IdScheme idScheme, String categoryComboId, Set<CategoryOption> categoryOptions) {\n          \n          \n            \n                private CategoryOptionCombo getAttributeOptionCombo( IdScheme idScheme, String categoryComboId, Set<CategoryOption> categoryOptions ) {", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461640941", "createdAt": "2020-07-28T14:47:08Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.apache.commons.lang.text.StrSubstitutor;\n+import org.apache.logging.log4j.util.Strings;\n+import org.cache2k.Cache;\n+import org.cache2k.Cache2kBuilder;\n+import org.cache2k.integration.CacheLoader;\n+import org.hisp.dhis.category.CategoryCombo;\n+import org.hisp.dhis.category.CategoryOption;\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.common.IdentifiableProperty;\n+import org.hisp.dhis.common.IllegalQueryException;\n+import org.hisp.dhis.commons.util.TextUtils;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.dao.EmptyResultDataAccessException;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Component;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Component\n+public class AttributeOptionComboLoader\n+{\n+    private final JdbcTemplate jdbcTemplate;\n+\n+    private final static String KEY_SEPARATOR = \"-\";\n+\n+    public final static String SQL_GET_CATEGORYOPTIONCOMBO = \"select coc.categoryoptioncomboid, \"\n+            + \"coc.uid, coc.code, coc.ignoreapproval, coc.name, c.uid as cc_uid, c.name as cc_name, \"\n+            + \"string_agg(dec.categoryid::text, ',') as cat_ids from categoryoptioncombo coc \"\n+            + \"join categorycombos_optioncombos co on coc.categoryoptioncomboid = co.categoryoptioncomboid \"\n+            + \"join categorycombo c on co.categorycomboid = c.categorycomboid \"\n+            + \"join categorycombos_categories cc on c.categorycomboid = cc.categorycomboid \"\n+            + \"join dataelementcategory dec on cc.categoryid = dec.categoryid where coc.\"\n+            + \"${resolvedScheme} \"\n+            + \"group by coc.categoryoptioncomboid, coc.uid, coc.code, coc.ignoreapproval, coc.name, cc_uid, cc_name\";\n+\n+    public final static String SQL_GET_CATEGORYOPTIONCOMBO_BY_CATEGORYIDS = \"select * from ( \" +\n+            \"select coc.categoryoptioncomboid, \" +\n+            \"coc.uid, \" +\n+            \"coc.code, \" +\n+            \"coc.ignoreapproval, \" +\n+            \"coc.name, \" +\n+            \"c.uid as cc_uid, \" +\n+            \"c.name as cc_name,\" +\n+            \"string_agg( dec.categoryid::text, ',') as cat_ids \" +\n+            \"from categoryoptioncombo coc \" +\n+            \"join categorycombos_optioncombos co on coc.categoryoptioncomboid = co.categoryoptioncomboid \" +\n+            \"join categorycombo c on co.categorycomboid = c.categorycomboid \" +\n+            \"join categorycombos_categories cc on c.categorycomboid = cc.categorycomboid \" +\n+            \"join dataelementcategory dec on cc.categoryid = dec.categoryid \" +\n+            \"where c.${resolvedScheme} \" +\n+            \"group by coc.categoryoptioncomboid, coc.uid, coc.code, coc.ignoreapproval, coc.name, cc_uid, cc_name \" +\n+            \") as catoptcombo where \" +\n+            \"array_length(regexp_split_to_array(cat_ids, ','),1) = array_length(ARRAY[${option_ids}],1) AND \" +\n+            \"regexp_split_to_array(cat_ids, ',') @> ARRAY[${option_ids}]\";\n+\n+    public AttributeOptionComboLoader( @Qualifier( \"readOnlyJdbcTemplate\" ) JdbcTemplate jdbcTemplate )\n+    {\n+        checkNotNull( jdbcTemplate );\n+\n+        this.jdbcTemplate = jdbcTemplate;\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOptionCombo} by id, using the provided look-up\n+     * Scheme\n+     *\n+     * @param idScheme an IdScheme\n+     * @param id the actual id\n+     * @return a CategoryOptionCombo or null\n+     */\n+    public CategoryOptionCombo getCategoryOptionCombo( IdScheme idScheme, String id )\n+    {\n+        return loadCategoryOptionCombo( idScheme, id );\n+        //return this.cocCache.get( idScheme.name() + KEY_SEPARATOR + id );\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOptionCombo}\n+     *\n+     * @param categoryCombo a {@see CategoryCombo}\n+     * @param categoryOptions a semicolon delimited list of Category Options uid\n+     * @param attributeOptionCombo\n+     * @param idScheme the {@see IdScheme} to use to fetch the entity\n+     * @return a {@see CategoryOptionCombo}\n+     */\n+    public CategoryOptionCombo getAttributeOptionCombo( CategoryCombo categoryCombo, String categoryOptions,\n+                                                        String attributeOptionCombo, IdScheme idScheme )\n+    {\n+        final Set<String> opts = TextUtils.splitToArray( categoryOptions, TextUtils.SEMICOLON );\n+\n+        return getAttributeOptionCombo( categoryCombo, opts, attributeOptionCombo, idScheme );\n+    }\n+\n+    /**\n+     * Fetches the default {@see CategoryOptionCombo}\n+     * @return a {@see CategoryOptionCombo} or null\n+     */\n+    public CategoryOptionCombo getDefault()\n+    {\n+        return  loadCategoryOptionCombo( IdScheme.NAME, \"default\" );\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOption} by uid, using the provided look-up Scheme\n+     *\n+     * @param idScheme an IdScheme\n+     * @param id the actual id\n+     * @return a CategoryOption or null\n+     */\n+    private CategoryOption getCategoryOption( IdScheme idScheme, String id )\n+    {\n+        return loadCategoryOption( idScheme, id);\n+    }\n+\n+    private CategoryOptionCombo getAttributeOptionCombo( CategoryCombo categoryCombo, Set<String> opts,\n+        String attributeOptionCombo, IdScheme idScheme )\n+    {\n+        if ( categoryCombo == null )\n+        {\n+            throw new IllegalQueryException( \"Illegal category combo\" );\n+        }\n+\n+        // ---------------------------------------------------------------------\n+        // Attribute category options validation\n+        // ---------------------------------------------------------------------\n+\n+        CategoryOptionCombo attrOptCombo = null;\n+\n+        if ( opts != null )\n+        {\n+            Set<CategoryOption> categoryOptions = new HashSet<>();\n+\n+            for ( String uid : opts )\n+            {\n+                CategoryOption categoryOption = getCategoryOption( idScheme, uid );\n+\n+                if ( categoryOption == null )\n+                {\n+                    throw new IllegalQueryException( \"Illegal category option identifier: \" + uid );\n+                }\n+\n+                categoryOptions.add( categoryOption );\n+            }\n+\n+            final String id = resolveCategoryComboId( categoryCombo, idScheme );\n+\n+            attrOptCombo = getAttributeOptionCombo( idScheme, id, categoryOptions );\n+\n+            if ( attrOptCombo == null )\n+            {\n+                throw new IllegalQueryException(\n+                    \"Attribute option combo does not exist for given category combo and category options\" );\n+            }\n+        }\n+        else if ( attributeOptionCombo != null )\n+        {\n+            attrOptCombo = getCategoryOptionCombo( idScheme, attributeOptionCombo );\n+        }\n+\n+        // ---------------------------------------------------------------------\n+        // Fall back to default category option combination\n+        // ---------------------------------------------------------------------\n+\n+        if ( attrOptCombo == null )\n+        {\n+            attrOptCombo = getDefault();\n+        }\n+\n+        if ( attrOptCombo == null )\n+        {\n+            throw new IllegalQueryException( \"Default attribute option combo does not exist\" );\n+        }\n+\n+        return attrOptCombo;\n+    }\n+\n+    private String resolveCategoryComboId( CategoryCombo categoryCombo, IdScheme idScheme )\n+    {\n+        String id = null;\n+\n+        if ( idScheme.is( IdentifiableProperty.ID ) )\n+        {\n+            id = String.valueOf( categoryCombo.getId() );\n+        }\n+        else if ( idScheme.is( IdentifiableProperty.UID ) )\n+        {\n+            id = categoryCombo.getUid();\n+        }\n+        else if ( idScheme.is( IdentifiableProperty.CODE ) )\n+        {\n+            id = categoryCombo.getCode();\n+        }\n+        else if ( idScheme.is( IdentifiableProperty.NAME ) )\n+        {\n+            id = categoryCombo.getName();\n+        }\n+\n+        return id;\n+    }\n+\n+    private CategoryOptionCombo getAttributeOptionCombo( IdScheme idScheme, String categoryComboId, Set<CategoryOption> categoryOptions) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab"}, "originalPosition": 248}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MjAwMzY4OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDo0Nzo1NVrOG4QXjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDo0Nzo1NVrOG4QXjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0MTYxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        .put( \"resolvedScheme\", Objects.requireNonNull(resolveId(idScheme, key, id)))\n          \n          \n            \n                        .put( \"resolvedScheme\", Objects.requireNonNull( resolveId( idScheme, key, id ) ) )", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461641615", "createdAt": "2020-07-28T14:47:55Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.apache.commons.lang.text.StrSubstitutor;\n+import org.apache.logging.log4j.util.Strings;\n+import org.cache2k.Cache;\n+import org.cache2k.Cache2kBuilder;\n+import org.cache2k.integration.CacheLoader;\n+import org.hisp.dhis.category.CategoryCombo;\n+import org.hisp.dhis.category.CategoryOption;\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.common.IdentifiableProperty;\n+import org.hisp.dhis.common.IllegalQueryException;\n+import org.hisp.dhis.commons.util.TextUtils;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.dao.EmptyResultDataAccessException;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Component;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Component\n+public class AttributeOptionComboLoader\n+{\n+    private final JdbcTemplate jdbcTemplate;\n+\n+    private final static String KEY_SEPARATOR = \"-\";\n+\n+    public final static String SQL_GET_CATEGORYOPTIONCOMBO = \"select coc.categoryoptioncomboid, \"\n+            + \"coc.uid, coc.code, coc.ignoreapproval, coc.name, c.uid as cc_uid, c.name as cc_name, \"\n+            + \"string_agg(dec.categoryid::text, ',') as cat_ids from categoryoptioncombo coc \"\n+            + \"join categorycombos_optioncombos co on coc.categoryoptioncomboid = co.categoryoptioncomboid \"\n+            + \"join categorycombo c on co.categorycomboid = c.categorycomboid \"\n+            + \"join categorycombos_categories cc on c.categorycomboid = cc.categorycomboid \"\n+            + \"join dataelementcategory dec on cc.categoryid = dec.categoryid where coc.\"\n+            + \"${resolvedScheme} \"\n+            + \"group by coc.categoryoptioncomboid, coc.uid, coc.code, coc.ignoreapproval, coc.name, cc_uid, cc_name\";\n+\n+    public final static String SQL_GET_CATEGORYOPTIONCOMBO_BY_CATEGORYIDS = \"select * from ( \" +\n+            \"select coc.categoryoptioncomboid, \" +\n+            \"coc.uid, \" +\n+            \"coc.code, \" +\n+            \"coc.ignoreapproval, \" +\n+            \"coc.name, \" +\n+            \"c.uid as cc_uid, \" +\n+            \"c.name as cc_name,\" +\n+            \"string_agg( dec.categoryid::text, ',') as cat_ids \" +\n+            \"from categoryoptioncombo coc \" +\n+            \"join categorycombos_optioncombos co on coc.categoryoptioncomboid = co.categoryoptioncomboid \" +\n+            \"join categorycombo c on co.categorycomboid = c.categorycomboid \" +\n+            \"join categorycombos_categories cc on c.categorycomboid = cc.categorycomboid \" +\n+            \"join dataelementcategory dec on cc.categoryid = dec.categoryid \" +\n+            \"where c.${resolvedScheme} \" +\n+            \"group by coc.categoryoptioncomboid, coc.uid, coc.code, coc.ignoreapproval, coc.name, cc_uid, cc_name \" +\n+            \") as catoptcombo where \" +\n+            \"array_length(regexp_split_to_array(cat_ids, ','),1) = array_length(ARRAY[${option_ids}],1) AND \" +\n+            \"regexp_split_to_array(cat_ids, ',') @> ARRAY[${option_ids}]\";\n+\n+    public AttributeOptionComboLoader( @Qualifier( \"readOnlyJdbcTemplate\" ) JdbcTemplate jdbcTemplate )\n+    {\n+        checkNotNull( jdbcTemplate );\n+\n+        this.jdbcTemplate = jdbcTemplate;\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOptionCombo} by id, using the provided look-up\n+     * Scheme\n+     *\n+     * @param idScheme an IdScheme\n+     * @param id the actual id\n+     * @return a CategoryOptionCombo or null\n+     */\n+    public CategoryOptionCombo getCategoryOptionCombo( IdScheme idScheme, String id )\n+    {\n+        return loadCategoryOptionCombo( idScheme, id );\n+        //return this.cocCache.get( idScheme.name() + KEY_SEPARATOR + id );\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOptionCombo}\n+     *\n+     * @param categoryCombo a {@see CategoryCombo}\n+     * @param categoryOptions a semicolon delimited list of Category Options uid\n+     * @param attributeOptionCombo\n+     * @param idScheme the {@see IdScheme} to use to fetch the entity\n+     * @return a {@see CategoryOptionCombo}\n+     */\n+    public CategoryOptionCombo getAttributeOptionCombo( CategoryCombo categoryCombo, String categoryOptions,\n+                                                        String attributeOptionCombo, IdScheme idScheme )\n+    {\n+        final Set<String> opts = TextUtils.splitToArray( categoryOptions, TextUtils.SEMICOLON );\n+\n+        return getAttributeOptionCombo( categoryCombo, opts, attributeOptionCombo, idScheme );\n+    }\n+\n+    /**\n+     * Fetches the default {@see CategoryOptionCombo}\n+     * @return a {@see CategoryOptionCombo} or null\n+     */\n+    public CategoryOptionCombo getDefault()\n+    {\n+        return  loadCategoryOptionCombo( IdScheme.NAME, \"default\" );\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOption} by uid, using the provided look-up Scheme\n+     *\n+     * @param idScheme an IdScheme\n+     * @param id the actual id\n+     * @return a CategoryOption or null\n+     */\n+    private CategoryOption getCategoryOption( IdScheme idScheme, String id )\n+    {\n+        return loadCategoryOption( idScheme, id);\n+    }\n+\n+    private CategoryOptionCombo getAttributeOptionCombo( CategoryCombo categoryCombo, Set<String> opts,\n+        String attributeOptionCombo, IdScheme idScheme )\n+    {\n+        if ( categoryCombo == null )\n+        {\n+            throw new IllegalQueryException( \"Illegal category combo\" );\n+        }\n+\n+        // ---------------------------------------------------------------------\n+        // Attribute category options validation\n+        // ---------------------------------------------------------------------\n+\n+        CategoryOptionCombo attrOptCombo = null;\n+\n+        if ( opts != null )\n+        {\n+            Set<CategoryOption> categoryOptions = new HashSet<>();\n+\n+            for ( String uid : opts )\n+            {\n+                CategoryOption categoryOption = getCategoryOption( idScheme, uid );\n+\n+                if ( categoryOption == null )\n+                {\n+                    throw new IllegalQueryException( \"Illegal category option identifier: \" + uid );\n+                }\n+\n+                categoryOptions.add( categoryOption );\n+            }\n+\n+            final String id = resolveCategoryComboId( categoryCombo, idScheme );\n+\n+            attrOptCombo = getAttributeOptionCombo( idScheme, id, categoryOptions );\n+\n+            if ( attrOptCombo == null )\n+            {\n+                throw new IllegalQueryException(\n+                    \"Attribute option combo does not exist for given category combo and category options\" );\n+            }\n+        }\n+        else if ( attributeOptionCombo != null )\n+        {\n+            attrOptCombo = getCategoryOptionCombo( idScheme, attributeOptionCombo );\n+        }\n+\n+        // ---------------------------------------------------------------------\n+        // Fall back to default category option combination\n+        // ---------------------------------------------------------------------\n+\n+        if ( attrOptCombo == null )\n+        {\n+            attrOptCombo = getDefault();\n+        }\n+\n+        if ( attrOptCombo == null )\n+        {\n+            throw new IllegalQueryException( \"Default attribute option combo does not exist\" );\n+        }\n+\n+        return attrOptCombo;\n+    }\n+\n+    private String resolveCategoryComboId( CategoryCombo categoryCombo, IdScheme idScheme )\n+    {\n+        String id = null;\n+\n+        if ( idScheme.is( IdentifiableProperty.ID ) )\n+        {\n+            id = String.valueOf( categoryCombo.getId() );\n+        }\n+        else if ( idScheme.is( IdentifiableProperty.UID ) )\n+        {\n+            id = categoryCombo.getUid();\n+        }\n+        else if ( idScheme.is( IdentifiableProperty.CODE ) )\n+        {\n+            id = categoryCombo.getCode();\n+        }\n+        else if ( idScheme.is( IdentifiableProperty.NAME ) )\n+        {\n+            id = categoryCombo.getName();\n+        }\n+\n+        return id;\n+    }\n+\n+    private CategoryOptionCombo getAttributeOptionCombo( IdScheme idScheme, String categoryComboId, Set<CategoryOption> categoryOptions) {\n+\n+        final String key = \"categorycomboid\";\n+        final String categoryComboKey = resolveId( idScheme, key, categoryComboId);\n+\n+        final String optionsId = categoryOptions.stream()\n+            .map( co -> Long.toString( co.getId() ) )\n+            .map(s -> \"'\" + s + \"'\")\n+            .collect( Collectors.joining( \",\" ) );\n+\n+        // @formatter:off\n+        StrSubstitutor sub = new StrSubstitutor( ImmutableMap.<String, String>builder()\n+                .put( \"resolvedScheme\", Objects.requireNonNull( categoryComboKey ) )\n+                .put( \"option_ids\", optionsId )\n+                .build() );\n+        // @formatter:on\n+        \n+        // TODO use cache\n+        List<CategoryOptionCombo> categoryOptionCombos = jdbcTemplate\n+            .query( sub.replace( SQL_GET_CATEGORYOPTIONCOMBO_BY_CATEGORYIDS ), ( rs, i ) -> bind( key, rs ) );\n+\n+        if ( categoryOptionCombos.size() == 1 )\n+        {\n+            return categoryOptionCombos.get( 0 );\n+        }\n+        else\n+        {\n+            // TODO throw an error??\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOptionCombo} by \"id\" (based on the provided IdScheme)\n+     *\n+     * The {@see CategoryOptionCombo} contains tha associated {@see CategoryCombo}\n+     * and all the associated {@see CategoryOption}\n+     *\n+     * @param idScheme a {@see IdScheme}\n+     * @param id the {@see CategoryOptionCombo} id to use\n+     * @return a {@see CategoryOptionCombo} or null\n+     */\n+    private CategoryOptionCombo loadCategoryOptionCombo( IdScheme idScheme, String id )\n+    {\n+        String key = \"categoryoptioncomboid\";\n+        // @formatter:off\n+        StrSubstitutor sub = new StrSubstitutor( ImmutableMap.<String, String>builder()\n+            .put( \"key\", key )\n+            .put( \"resolvedScheme\", Objects.requireNonNull(resolveId(idScheme, key, id)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab"}, "originalPosition": 296}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MjAxMTk2OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/DataValueCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDo0OTozNVrOG4Qcpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDo0OTozNVrOG4Qcpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0MjkxOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        || (validationStrategy == ValidationStrategy.ON_COMPLETE && event.getStatus() == EventStatus.COMPLETED);\n          \n          \n            \n                        || (validationStrategy == ValidationStrategy.ON_COMPLETE && event.getStatus() == EventStatus.COMPLETED );", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461642918", "createdAt": "2020-07-28T14:49:35Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/DataValueCheck.java", "diffHunk": "@@ -0,0 +1,204 @@\n+package org.hisp.dhis.dxf2.events.importer.shared.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.hisp.dhis.common.IdentifiableObjectUtils.getIdentifierBasedOnIdScheme;\n+import static org.hisp.dhis.dxf2.events.event.EventUtils.eventDataValuesToJson;\n+\n+import java.sql.SQLException;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.dataelement.DataElement;\n+import org.hisp.dhis.dxf2.events.event.DataValue;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.importsummary.ImportConflict;\n+import org.hisp.dhis.dxf2.importsummary.ImportStatus;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.event.EventStatus;\n+import org.hisp.dhis.eventdatavalue.EventDataValue;\n+import org.hisp.dhis.program.ProgramStage;\n+import org.hisp.dhis.program.ProgramStageDataElement;\n+import org.hisp.dhis.program.ValidationStrategy;\n+import org.hisp.dhis.security.Authorities;\n+import org.hisp.dhis.system.util.ValidationUtils;\n+import org.hisp.dhis.user.User;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class DataValueCheck implements Checker\n+{\n+    @Override\n+    public ImportSummary check( ImmutableEvent event, WorkContext ctx )\n+    {\n+        final Set<DataValue> dataValues = event.getDataValues();\n+        final ImportSummary importSummary = new ImportSummary();\n+        final User user = ctx.getImportOptions().getUser();\n+\n+        for ( DataValue dataValue : dataValues )\n+        {\n+            if ( !checkHasValidDataElement( importSummary, ctx, dataValue )\n+                || !checkSerializeToJson( importSummary, ctx, dataValue ) )\n+            {\n+                importSummary.setStatus( ImportStatus.ERROR );\n+                importSummary.setReference( event.getUid() );\n+                importSummary.incrementIgnored();\n+\n+                return importSummary;\n+            }\n+        }\n+\n+        if ( importSummary.getConflicts().isEmpty() )\n+        {\n+            if ( doValidationOfMandatoryAttributes( user ) && isValidationRequired( event, ctx ) )\n+            {\n+                validateMandatoryAttributes( importSummary, ctx, event );\n+            }\n+        }\n+\n+        if ( !importSummary.getConflicts().isEmpty() )\n+        {\n+            importSummary.setStatus( ImportStatus.ERROR );\n+            importSummary.setReference( event.getUid() );\n+            importSummary.incrementIgnored();\n+        }\n+\n+        return importSummary;\n+    }\n+\n+    public void validateMandatoryAttributes( ImportSummary importSummary, WorkContext ctx,\n+        ImmutableEvent event )\n+    {\n+        if ( StringUtils.isEmpty( event.getProgramStage() ) )\n+            return;\n+\n+        final IdScheme programStageIdScheme = ctx.getImportOptions().getIdSchemes().getProgramStageIdScheme();\n+        final IdScheme dataElementIdScheme = ctx.getImportOptions().getIdSchemes().getDataElementIdScheme();\n+        final Map<String, Set<EventDataValue>> eventDataValueMap = ctx.getEventDataValueMap();\n+\n+        ProgramStage programStage = ctx.getProgramStage( programStageIdScheme, event.getProgramStage() );\n+\n+        final Set<ProgramStageDataElement> mandatoryDataElements = programStage.getProgramStageDataElements();\n+\n+        // Data Element IDs associated to the current event\n+        Set<String> dataValues = eventDataValueMap.get( event.getUid() ).stream().map( EventDataValue::getDataElement )\n+            .collect( Collectors.toSet() );\n+\n+        for ( ProgramStageDataElement mandatoryDataElement : mandatoryDataElements )\n+        {\n+            String resolvedDataElementId = getIdentifierBasedOnIdScheme( mandatoryDataElement.getDataElement(),\n+                dataElementIdScheme );\n+            if ( !dataValues.contains( resolvedDataElementId ) )\n+            {\n+                importSummary.getConflicts()\n+                    .add( new ImportConflict( resolvedDataElementId, \"value_required_but_not_provided\" ) );\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Checks if the data value can be serialized to Json\n+     */\n+    private boolean checkSerializeToJson( ImportSummary importSummary, WorkContext ctx, DataValue dataValue )\n+    {\n+        try\n+        {\n+            eventDataValuesToJson( dataValue, ctx.getServiceDelegator().getJsonMapper() );\n+        }\n+        catch ( JsonProcessingException | SQLException e )\n+        {\n+            importSummary.getConflicts()\n+                .add( new ImportConflict( dataValue.getDataElement(), \"Invalid data value found.\" ) );\n+        }\n+        return importSummary.getConflicts().isEmpty();\n+    }\n+\n+    /**\n+     * Checks that the specified Data Element ID (uid/code/id) corresponds to an\n+     * existing Data Element\n+     *\n+     */\n+    private boolean checkHasValidDataElement( ImportSummary importSummary, WorkContext ctx, DataValue dataValue )\n+    {\n+        DataElement dataElement = ctx.getDataElementMap().get( dataValue.getDataElement() );\n+\n+        if ( dataElement == null )\n+        {\n+            // This can happen if a wrong data element identifier is provided\n+            importSummary.getConflicts().add(\n+                new ImportConflict( \"dataElement\", dataValue.getDataElement() + \" is not a valid data element\" ) );\n+        }\n+        else\n+        {\n+            final String status = ValidationUtils.dataValueIsValid( dataValue.getValue(), dataElement );\n+\n+            if ( status != null )\n+            {\n+                importSummary.getConflicts().add( new ImportConflict( dataElement.getUid(), status ) );\n+            }\n+        }\n+\n+        return importSummary.getConflicts().isEmpty();\n+    }\n+\n+    private boolean isValidationRequired( ImmutableEvent event, WorkContext ctx )\n+    {\n+        final ValidationStrategy validationStrategy = getValidationStrategy( ctx, event );\n+\n+        return validationStrategy == null || validationStrategy == ValidationStrategy.ON_UPDATE_AND_INSERT\n+            || (validationStrategy == ValidationStrategy.ON_COMPLETE && event.getStatus() == EventStatus.COMPLETED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab"}, "originalPosition": 183}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MjAxOTgwOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramStageInstanceSupplierTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDo1MDo1OVrOG4QhRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDo1MDo1OVrOG4QhRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0NDEwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.subject = new ProgramStageInstanceSupplier( jdbcTemplate, mapper, programSupplier);\n          \n          \n            \n                    this.subject = new ProgramStageInstanceSupplier( jdbcTemplate, mapper, programSupplier );", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461644103", "createdAt": "2020-07-28T14:50:59Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramStageInstanceSupplierTest.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+import java.sql.SQLException;\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import org.hisp.dhis.common.CodeGenerator;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.event.EventStatus;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.fasterxml.jackson.databind.json.JsonMapper;\n+import org.mockito.Mock;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class ProgramStageInstanceSupplierTest extends AbstractSupplierTest<ProgramStageInstance>\n+{\n+    private ProgramStageInstanceSupplier subject;\n+\n+    @Mock\n+    private ProgramSupplier programSupplier;\n+\n+    @Before\n+    public void setUp()\n+    {\n+        JsonMapper mapper = new JsonMapper();\n+        this.subject = new ProgramStageInstanceSupplier( jdbcTemplate, mapper, programSupplier);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MjAyNTI1OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/program/ProgramStageInstanceServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDo1MjowM1rOG4QknQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDo1MjowM1rOG4QknQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0NDk1Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        convertToMap(dataElementMap), programStageInstanceA, false );\n          \n          \n            \n                        convertToMap( dataElementMap ), programStageInstanceA, false );", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461644957", "createdAt": "2020-07-28T14:52:03Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/program/ProgramStageInstanceServiceTest.java", "diffHunk": "@@ -462,7 +459,7 @@ public void testEventDataValuesUpdateAndDeletion()\n \n         //Update PSI: create 0, update 3, delete 1\n         programStageInstanceService.auditDataValuesChangesAndHandleFileDataValues( Collections.emptySet(), updatedEventDataValues, Collections.singleton( eventDataValueD ),\n-            dataElementMap, programStageInstanceA, false );\n+            convertToMap(dataElementMap), programStageInstanceA, false );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MjAzMjQ0OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDo1MzozMlrOG4QpDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDo1MzozMlrOG4QpDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0NjA5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                InterruptibleBatchPreparedStatementSetter ipss = (pss instanceof InterruptibleBatchPreparedStatementSetter\n          \n          \n            \n                                InterruptibleBatchPreparedStatementSetter ipss = ( pss instanceof InterruptibleBatchPreparedStatementSetter", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461646092", "createdAt": "2020-07-28T14:53:32Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package org.hisp.dhis.jdbc;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.springframework.jdbc.core.ColumnMapRowMapper;\n+import org.springframework.jdbc.core.InterruptibleBatchPreparedStatementSetter;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.jdbc.core.ParameterDisposer;\n+import org.springframework.jdbc.core.PreparedStatementCallback;\n+import org.springframework.jdbc.core.RowMapperResultSetExtractor;\n+import org.springframework.jdbc.support.GeneratedKeyHolder;\n+import org.springframework.jdbc.support.KeyHolder;\n+\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * JDBC Utility methods\n+ */\n+public class JdbcUtils\n+{\n+    /**\n+     * Executes a JDBC batch update using the provided {@see JdbcTemplate}\n+     *\n+     * @param jdbcTemplate a JdbcTemplate\n+     * @param sql the SQL string to be executed\n+     * @param pss a {@see BatchPreparedStatementSetterWithKeyHolder} containing the binding information\n+     *\n+     * @return a int, where each element corresponds to an executed statement\n+     */\n+    public static <T> int[] batchUpdateWithKeyHolder( JdbcTemplate jdbcTemplate, final String sql,\n+        final BatchPreparedStatementSetterWithKeyHolder<T> pss )\n+    {\n+        return jdbcTemplate.execute( con -> con.prepareStatement( sql, Statement.RETURN_GENERATED_KEYS ),\n+            (PreparedStatementCallback<int[]>) ps -> {\n+                try\n+                {\n+                    int batchSize = pss.getBatchSize();\n+                    InterruptibleBatchPreparedStatementSetter ipss = (pss instanceof InterruptibleBatchPreparedStatementSetter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MjAzNDA1OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDo1Mzo0OVrOG4Qp_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDo1Mzo0OVrOG4Qp_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0NjMzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    : null);\n          \n          \n            \n                                    : null );", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461646335", "createdAt": "2020-07-28T14:53:49Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package org.hisp.dhis.jdbc;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.springframework.jdbc.core.ColumnMapRowMapper;\n+import org.springframework.jdbc.core.InterruptibleBatchPreparedStatementSetter;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.jdbc.core.ParameterDisposer;\n+import org.springframework.jdbc.core.PreparedStatementCallback;\n+import org.springframework.jdbc.core.RowMapperResultSetExtractor;\n+import org.springframework.jdbc.support.GeneratedKeyHolder;\n+import org.springframework.jdbc.support.KeyHolder;\n+\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * JDBC Utility methods\n+ */\n+public class JdbcUtils\n+{\n+    /**\n+     * Executes a JDBC batch update using the provided {@see JdbcTemplate}\n+     *\n+     * @param jdbcTemplate a JdbcTemplate\n+     * @param sql the SQL string to be executed\n+     * @param pss a {@see BatchPreparedStatementSetterWithKeyHolder} containing the binding information\n+     *\n+     * @return a int, where each element corresponds to an executed statement\n+     */\n+    public static <T> int[] batchUpdateWithKeyHolder( JdbcTemplate jdbcTemplate, final String sql,\n+        final BatchPreparedStatementSetterWithKeyHolder<T> pss )\n+    {\n+        return jdbcTemplate.execute( con -> con.prepareStatement( sql, Statement.RETURN_GENERATED_KEYS ),\n+            (PreparedStatementCallback<int[]>) ps -> {\n+                try\n+                {\n+                    int batchSize = pss.getBatchSize();\n+                    InterruptibleBatchPreparedStatementSetter ipss = (pss instanceof InterruptibleBatchPreparedStatementSetter\n+                        ? (InterruptibleBatchPreparedStatementSetter) pss\n+                        : null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MjA0MTE1OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/actions/tracker/EventActions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDo1NTowN1rOG4QuRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDo1NTowN1rOG4QuRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0NzQyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public JsonObject createEventBody(String orgUnitId, String programId, String programStageId)\n          \n          \n            \n                public JsonObject createEventBody( String orgUnitId, String programId, String programStageId )", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461647428", "createdAt": "2020-07-28T14:55:07Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/actions/tracker/EventActions.java", "diffHunk": "@@ -78,4 +80,17 @@ public void softDelete( List<String> eventIds )\n             softDelete( id );\n         }\n     }\n+\n+    public JsonObject createEventBody(String orgUnitId, String programId, String programStageId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MjA2MjY5OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDo1ODo1MFrOG4Q7BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDo1ODo1MFrOG4Q7BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1MDY5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        public Set<User> load(Long userGroupId) {\n          \n          \n            \n                        public Set<User> load( Long userGroupId ) {", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461650693", "createdAt": "2020-07-28T14:58:50Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java", "diffHunk": "@@ -0,0 +1,636 @@\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.lang.text.StrSubstitutor;\n+import org.cache2k.Cache;\n+import org.cache2k.Cache2kBuilder;\n+import org.cache2k.integration.CacheLoader;\n+import org.hisp.dhis.category.CategoryCombo;\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.common.IdSchemes;\n+import org.hisp.dhis.dataelement.DataElement;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.event.EventUtils;\n+import org.hisp.dhis.organisationunit.FeatureType;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramStage;\n+import org.hisp.dhis.program.ProgramStageDataElement;\n+import org.hisp.dhis.program.ProgramType;\n+import org.hisp.dhis.program.ValidationStrategy;\n+import org.hisp.dhis.trackedentity.TrackedEntityType;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.user.UserAccess;\n+import org.hisp.dhis.user.UserGroup;\n+import org.hisp.dhis.user.UserGroupAccess;\n+import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;\n+import org.springframework.stereotype.Component;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * This supplier builds and caches a Map of all the Programs in the system.\n+ * For each Program, the following additional data is retrieved:\n+ *\n+ *\n+ *\n+ * @formatter:off\n+ *\n+         Program\n+         +\n+         |\n+         +---+ Program Stage (List)\n+         |           |\n+         |           +---+ User Access (ACL)\n+         |           |\n+         |           +---+ User Group Access (ACL)\n+         |\n+         |\n+         +---+ Category Combo\n+         |\n+         |\n+         +---+ Tracked Entity Instance\n+         |           |\n+         |           +---+ User Access (ACL)\n+         |           |\n+         |           +---+ User Group Access (ACL)\n+         |\n+         |\n+         |\n+         +---+ Organizational Unit (List)\n+         |\n+         +---+ User Access (ACL)\n+         |\n+         +---+ User Group Access (ACL)\n+ * @formatter:on\n+ *\n+ * @author Luciano Fiandesio\n+ */\n+@Slf4j\n+@Component( \"workContextProgramsSupplier\" )\n+public class ProgramSupplier extends AbstractSupplier<Map<String, Program>>\n+{\n+    private final static String PROGRAM_CACHE_KEY = \"000P\";\n+\n+    private final ObjectMapper jsonMapper;\n+\n+    private final static String ATTRIBUTESCHEME_COL = \"attributevalues\";\n+\n+    // @formatter:off\n+    private final static String USER_ACCESS_SQL = \"select eua.${column_name}, eua.useraccessid, ua.useraccessid, ua.access, ua.userid, ui.uid \" +\n+        \"from ${table_name} eua \" +\n+        \"join useraccess ua on eua.useraccessid = ua.useraccessid \" +\n+        \"join userinfo ui on ui.userinfoid = ua.useraccessid \" +\n+        \"order by eua.${column_name}\";\n+\n+    private final static String USER_GROUP_ACCESS_SQL = \"select ega.${column_name}, ega.usergroupaccessid, u.access, u.usergroupid, ug.uid \" +\n+        \"from ${table_name} ega \" +\n+        \"join usergroupaccess u on ega.usergroupaccessid = u.usergroupaccessid \" +\n+        \"join usergroup ug on u.usergroupid = ug.usergroupid \" +\n+        \"order by ega.${column_name}\";\n+\n+    // Caches the entire Program hierarchy, including Program Stages and ACL data\n+    private final Cache<String, Map<String, Program>> programsCache = new Cache2kBuilder<String, Map<String, Program>>() {}\n+        .name( \"eventImportProgramCache\" + RandomStringUtils.randomAlphabetic(5) )\n+        .expireAfterWrite( 1, TimeUnit.MINUTES )\n+        .build();\n+\n+    // Caches the User Groups and the Users belonging to each group\n+    private final Cache<Long, Set<User>> userGroupCache = new Cache2kBuilder<Long, Set<User>>() {}\n+        .name( \"eventImportUserGroupCache\" + RandomStringUtils.randomAlphabetic(5) )\n+        .expireAfterWrite( 5, TimeUnit.MINUTES )\n+        .permitNullValues( true )\n+        .loader( new CacheLoader<Long, Set<User>>()\n+        {\n+            @Override\n+            public Set<User> load(Long userGroupId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MjA3ODA4OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNTowMTo1MFrOG4RETg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNTowMTo1MFrOG4RETg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1MzA3MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    cat1.setCategoryOptions( Lists.newArrayList(categoryOption1, categoryOption2));\n          \n          \n            \n                    cat1.setCategoryOptions( Lists.newArrayList( categoryOption1, categoryOption2 ) );", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461653070", "createdAt": "2020-07-28T15:01:50Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java", "diffHunk": "@@ -150,16 +169,32 @@ protected void setUpTest()\n \n         trackedEntityInstanceMaleA = trackedEntityInstanceService.getTrackedEntityInstance( maleA );\n \n+        CategoryOption categoryOption1 = new CategoryOption(\"male\");\n+        categoryOption1.setAutoFields();\n+        CategoryOption categoryOption2 = new CategoryOption(\"female\");\n+        categoryOption2.setAutoFields();\n+        manager.save( Lists.newArrayList( categoryOption1, categoryOption2 ) );\n+\n+        Category cat1 = new Category( \"cat1\", DataDimensionType.DISAGGREGATION );\n+        cat1.setCategoryOptions( Lists.newArrayList(categoryOption1, categoryOption2));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MjA3ODg5OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNTowMjowMlrOG4RE2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNTowMjowMlrOG4RE2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1MzIwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    CategoryOption categoryOption1 = new CategoryOption(\"male\");\n          \n          \n            \n                    CategoryOption categoryOption1 = new CategoryOption( \"male\" );", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461653208", "createdAt": "2020-07-28T15:02:02Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java", "diffHunk": "@@ -150,16 +169,32 @@ protected void setUpTest()\n \n         trackedEntityInstanceMaleA = trackedEntityInstanceService.getTrackedEntityInstance( maleA );\n \n+        CategoryOption categoryOption1 = new CategoryOption(\"male\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MjA3OTc5OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNTowMjoxNFrOG4RFaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNTowMjoxNFrOG4RFaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1MzM1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    CategoryOption categoryOption2 = new CategoryOption(\"female\");\n          \n          \n            \n                    CategoryOption categoryOption2 = new CategoryOption( \"female\" );", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461653353", "createdAt": "2020-07-28T15:02:14Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java", "diffHunk": "@@ -150,16 +169,32 @@ protected void setUpTest()\n \n         trackedEntityInstanceMaleA = trackedEntityInstanceService.getTrackedEntityInstance( maleA );\n \n+        CategoryOption categoryOption1 = new CategoryOption(\"male\");\n+        categoryOption1.setAutoFields();\n+        CategoryOption categoryOption2 = new CategoryOption(\"female\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MjA4MTM5OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNTowMjozMlrOG4RGTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNTowMjozMlrOG4RGTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1MzU4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    pi.setName(\"EventImportTestPI\");\n          \n          \n            \n                    pi.setName( \"EventImportTestPI\" );", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461653582", "createdAt": "2020-07-28T15:02:32Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java", "diffHunk": "@@ -221,10 +258,16 @@ protected void setUpTest()\n         pi.setProgram( programB );\n         pi.setStatus( ProgramStatus.ACTIVE );\n         pi.setStoredBy( \"test\" );\n+        pi.setName(\"EventImportTestPI\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MjA4Nzk0OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNTowMzo1OFrOG4RKOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNTowMzo1OFrOG4RKOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1NDU4Nw==", "bodyText": "In this case, the test doesnt not indicate it should have more than 1 enrollment, so this seems like a problem with the test.", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461654587", "createdAt": "2020-07-28T15:03:58Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java", "diffHunk": "@@ -237,7 +280,12 @@ public void testAddEventOnProgramWithoutRegistration()\n         assertEquals( ImportStatus.SUCCESS, importSummaries.getStatus() );\n     }\n \n+    /**\n+     * TODO:  LUCIANO: this test has been ignored because the Importer should not import an event linked to a Program\n+     * with 2 or more Program Instances\n+     */\n     @Test\n+    @Ignore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab"}, "originalPosition": 130}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3370, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}