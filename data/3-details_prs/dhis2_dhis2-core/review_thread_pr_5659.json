{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2NjU5OTU3", "number": 5659, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMDo0NjowMVrOECGbRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMDo0NjowMVrOECGbRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNjM3ODk0OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-analytics/src/test/java/org/hisp/dhis/analytics/orgunit/OrgUnitAnalyticsServiceTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMDo0NjowMVrOGeWWVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMjoyNzoyOVrOGeZfkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ3NjYzMA==", "bodyText": "Minor: you can also consider using the ExpectedException Rule, for asserting on exceptions, like so (or use an utility method that operates on the ExpectedException object):\nimport org.hamcrest.CoreMatchers;\nimport org.hamcrest.Matchers;\nimport org.junit.Rule;\nimport org.junit.rules.ExpectedException;\n\n@Rule\n    public ExpectedException exception = ExpectedException.none();\n\n    @Test\n    public void testValidateNoOrgUnits()\n    {\n        OrgUnitQueryParams params = new OrgUnitQueryParams.Builder()\n            .withOrgUnitGroupSets( Lists.newArrayList( createOrganisationUnitGroupSet( 'A' ) ) )\n            .build();\n\n        exception.expectMessage( \"At least one organisation unit must be specified\" );\n        exception.expect( IllegalQueryException.class );\n        exception.reportMissingExceptionWithMessage( \"Expected exception\" );\n        exception.expect( Matchers.hasProperty( \"errorCode\", CoreMatchers.is( ErrorCode.E7300 ) ) );\n\n        subject.validate( params );\n    }", "url": "https://github.com/dhis2/dhis2-core/pull/5659#discussion_r434476630", "createdAt": "2020-06-03T10:46:01Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-analytics/src/test/java/org/hisp/dhis/analytics/orgunit/OrgUnitAnalyticsServiceTest.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.analytics.orgunit;\n+\n+import static org.hisp.dhis.analytics.util.AnalyticsTestUtils.assertIllegalQueryEx;\n+\n+import org.hisp.dhis.DhisSpringTest;\n+import org.hisp.dhis.feedback.ErrorCode;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import com.google.common.collect.Lists;\n+\n+/**\n+ * @author Lars Helge Overland\n+ */\n+public class OrgUnitAnalyticsServiceTest\n+    extends DhisSpringTest\n+{\n+    @Autowired\n+    private OrgUnitAnalyticsService subject;\n+\n+    @Test\n+    public void testValidateNoOrgUnits()\n+    {\n+        OrgUnitQueryParams params = new OrgUnitQueryParams.Builder()\n+            .withOrgUnitGroupSets( Lists.newArrayList( createOrganisationUnitGroupSet( 'A' ) ) )\n+            .build();\n+\n+        assertIllegalQueryEx( p -> subject.validate( p ), params, ErrorCode.E7300 );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "846ab7405144a46d6baa01ebc13f6466380d6c09"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ5NzI2Mg==", "bodyText": "Great, I was aware of ExceptedException but not:\nexception.expect( Matchers.hasProperty( \"errorCode\", CoreMatchers.is( ErrorCode.E7300 ) ) );\nThanks!", "url": "https://github.com/dhis2/dhis2-core/pull/5659#discussion_r434497262", "createdAt": "2020-06-03T11:28:23Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-services/dhis-service-analytics/src/test/java/org/hisp/dhis/analytics/orgunit/OrgUnitAnalyticsServiceTest.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.analytics.orgunit;\n+\n+import static org.hisp.dhis.analytics.util.AnalyticsTestUtils.assertIllegalQueryEx;\n+\n+import org.hisp.dhis.DhisSpringTest;\n+import org.hisp.dhis.feedback.ErrorCode;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import com.google.common.collect.Lists;\n+\n+/**\n+ * @author Lars Helge Overland\n+ */\n+public class OrgUnitAnalyticsServiceTest\n+    extends DhisSpringTest\n+{\n+    @Autowired\n+    private OrgUnitAnalyticsService subject;\n+\n+    @Test\n+    public void testValidateNoOrgUnits()\n+    {\n+        OrgUnitQueryParams params = new OrgUnitQueryParams.Builder()\n+            .withOrgUnitGroupSets( Lists.newArrayList( createOrganisationUnitGroupSet( 'A' ) ) )\n+            .build();\n+\n+        assertIllegalQueryEx( p -> subject.validate( p ), params, ErrorCode.E7300 );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ3NjYzMA=="}, "originalCommit": {"oid": "846ab7405144a46d6baa01ebc13f6466380d6c09"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUyODE0Nw==", "bodyText": "Rewrote it now using JUnit/Hamcrest.", "url": "https://github.com/dhis2/dhis2-core/pull/5659#discussion_r434528147", "createdAt": "2020-06-03T12:27:29Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-services/dhis-service-analytics/src/test/java/org/hisp/dhis/analytics/orgunit/OrgUnitAnalyticsServiceTest.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.analytics.orgunit;\n+\n+import static org.hisp.dhis.analytics.util.AnalyticsTestUtils.assertIllegalQueryEx;\n+\n+import org.hisp.dhis.DhisSpringTest;\n+import org.hisp.dhis.feedback.ErrorCode;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import com.google.common.collect.Lists;\n+\n+/**\n+ * @author Lars Helge Overland\n+ */\n+public class OrgUnitAnalyticsServiceTest\n+    extends DhisSpringTest\n+{\n+    @Autowired\n+    private OrgUnitAnalyticsService subject;\n+\n+    @Test\n+    public void testValidateNoOrgUnits()\n+    {\n+        OrgUnitQueryParams params = new OrgUnitQueryParams.Builder()\n+            .withOrgUnitGroupSets( Lists.newArrayList( createOrganisationUnitGroupSet( 'A' ) ) )\n+            .build();\n+\n+        assertIllegalQueryEx( p -> subject.validate( p ), params, ErrorCode.E7300 );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ3NjYzMA=="}, "originalCommit": {"oid": "846ab7405144a46d6baa01ebc13f6466380d6c09"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3434, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}