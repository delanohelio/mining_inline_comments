{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3OTMwMTk3", "number": 5772, "title": "feat: Period offset for Indicator formula", "bodyText": "This feature allows to \"shift\" by period one or more elements within an Indicator formula.\nGiven the following Indicator formula:\n#{gQNFkFkObU8} + #{MaXD86iob3M}\nIt is now possible to add a periodOffset() directive, in order to calculate the value for the\nquery-specific period based on the declared periodOffset:\n(#{gQNFkFkObU8}.periodOffset(-1) + #{MaXD86iob3M}.periodOffset(-1)) - (#{gQNFkFkObU8} + #{MaXD86iob3M})\nIn the above example, assuming that the Analytics query is executed for the period Feb 2020, the results will calculate the\nvalue of gQNFkFkObU8 + MaXD86iob3M for January 2020 (offset -1) and subtract the value from February 2020.\nAnalysis document: https://docs.google.com/document/d/17hpuy0wwkabnowsRAo_R3-m5NUMOGVipyeRwj3RjXWA/edit?usp=sharing\nref: DHIS2-8758", "createdAt": "2020-06-22T13:06:27Z", "url": "https://github.com/dhis2/dhis2-core/pull/5772", "merged": true, "mergeCommit": {"oid": "2c5a6f7bbbb00d0e4ff8028fde972fd6f4413f8c"}, "closed": true, "closedAt": "2020-07-06T07:24:19Z", "author": {"login": "luciano-fiandesio"}, "timelineItems": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABctxXQ7AFqTQzNDk1NDM3Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcyMCRJAFqTQ0MjgzMDcxMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0OTU0Mzc3", "url": "https://github.com/dhis2/dhis2-core/pull/5772#pullrequestreview-434954377", "createdAt": "2020-06-22T14:03:25Z", "commit": {"oid": "d7f0a5b8f947065e9e156a3f3b0e51bf5baa8504"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDowMzoyNlrOGnCC5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDowMzoyNlrOGnCC5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU4MTE1Ng==", "bodyText": "Is this a \"transient\" property and could be made transient just to indicate that?", "url": "https://github.com/dhis2/dhis2-core/pull/5772#discussion_r443581156", "createdAt": "2020-06-22T14:03:26Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/common/BaseDimensionalItemObject.java", "diffHunk": "@@ -59,6 +59,12 @@\n      */\n     protected AggregationType aggregationType;\n \n+    /**\n+     * A value representing a period offset that can be applied to Dimensional Item\n+     * Object within a Indicator formula\n+     */\n+    protected int periodOffset = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f0a5b8f947065e9e156a3f3b0e51bf5baa8504"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0OTU0OTE1", "url": "https://github.com/dhis2/dhis2-core/pull/5772#pullrequestreview-434954915", "createdAt": "2020-06-22T14:03:58Z", "commit": {"oid": "d7f0a5b8f947065e9e156a3f3b0e51bf5baa8504"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDowMzo1OFrOGnCEVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDowMzo1OFrOGnCEVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU4MTUyNA==", "bodyText": "Add DHIS 2 code style (use new build formatting?).", "url": "https://github.com/dhis2/dhis2-core/pull/5772#discussion_r443581524", "createdAt": "2020-06-22T14:03:58Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/common/BaseDimensionalItemObject.java", "diffHunk": "@@ -161,4 +167,41 @@ public void setAggregationType( AggregationType aggregationType )\n     {\n         this.aggregationType = aggregationType;\n     }\n+\n+    @Override\n+    @JsonProperty\n+    @JacksonXmlProperty( namespace = DxfNamespaces.DXF_2_0 )\n+    public int getPeriodOffset()\n+    {\n+        return periodOffset;\n+    }\n+\n+    @Override\n+    public void resetPeriodOffset()\n+    {\n+        this.periodOffset = 0;\n+    }\n+\n+    public void setPeriodOffset(int periodOffset )\n+    {\n+        this.periodOffset = periodOffset;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f0a5b8f947065e9e156a3f3b0e51bf5baa8504"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0OTU5NzIz", "url": "https://github.com/dhis2/dhis2-core/pull/5772#pullrequestreview-434959723", "createdAt": "2020-06-22T14:09:12Z", "commit": {"oid": "d7f0a5b8f947065e9e156a3f3b0e51bf5baa8504"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDowOToxMlrOGnCSIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDowOToxMlrOGnCSIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU4NTA1OA==", "bodyText": "Could we move this method to a utility class, add Javadoc and add unit test? E.g.AnalyticsUtils.", "url": "https://github.com/dhis2/dhis2-core/pull/5772#discussion_r443585058", "createdAt": "2020-06-22T14:09:12Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-services/dhis-service-analytics/src/main/java/org/hisp/dhis/analytics/data/DefaultAnalyticsService.java", "diffHunk": "@@ -1364,9 +1372,86 @@ private void addRawData( DataQueryParams params, Grid grid )\n             .withOutputFormat( OutputFormat.ANALYTICS )\n             .withSkipMeta( true ).build();\n \n+        // each row contains: dimension uid | period | value\n         Grid grid = getAggregatedDataValueGridInternal( dataSourceParams );\n \n-        return grid.getAsMap( grid.getWidth() - 1, DimensionalObject.DIMENSION_SEP );\n+        MultiValuedMap<String, DimensionItemWithValue> result = new ArrayListValuedHashMap<>();\n+\n+        final List<DimensionalItemObject> basePeriods = params.getPeriods();\n+\n+        for ( List<Object> row : grid.getRows() )\n+        {\n+            if ( isInBasePeriod( basePeriods, (String) row.get( 1 ) ) )\n+            {\n+                // Key is composed of [uid-period]\n+                final String key = StringUtils.join(\n+                    ArrayUtils.remove( row.toArray( new Object[0] ), grid.getWidth() - 1 ),\n+                    DimensionalObject.DIMENSION_SEP );\n+\n+                final DimensionalItemObject dimensionalItemObject = findDimensionalItem( (String) row.get( 0 ), items ).get( 0 );\n+                DimensionalItemObject clone = dimensionalItemObject;\n+                if ( dimensionalItemObject.getPeriodOffset() != 0 )\n+                {\n+                    List<Object> periodOffsetRow = getPeriodOffsetRow( grid, dimensionalItemObject, (String)row.get(1), dimensionalItemObject.getPeriodOffset());\n+                    if ( periodOffsetRow != null )\n+                    {\n+                        result.put( key,\n+                            new DimensionItemWithValue( dimensionalItemObject,\n+                                (Double) periodOffsetRow.get( grid.getWidth() - 1 ) ) );\n+\n+                    } // TODO throw exception?\n+                    clone = SerializationUtils.clone( dimensionalItemObject );\n+                    clone.resetPeriodOffset();\n+                }\n+\n+                result.put( key,\n+                    new DimensionItemWithValue( clone, (Double) row.get( grid.getWidth() - 1 ) ) );\n+            }\n+        }\n+        \n+        return result;\n+    }\n+    \n+    private List<Object> getPeriodOffsetRow( Grid grid, DimensionalItemObject dimItem, String isoPeriod, int offset )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f0a5b8f947065e9e156a3f3b0e51bf5baa8504"}, "originalPosition": 139}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0OTU5ODU3", "url": "https://github.com/dhis2/dhis2-core/pull/5772#pullrequestreview-434959857", "createdAt": "2020-06-22T14:09:20Z", "commit": {"oid": "d7f0a5b8f947065e9e156a3f3b0e51bf5baa8504"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDowOToyMFrOGnCSjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDowOToyMFrOGnCSjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU4NTE2Nw==", "bodyText": "Could we move this method to a utility class, add Javadoc and add unit test? E.g.AnalyticsUtils.", "url": "https://github.com/dhis2/dhis2-core/pull/5772#discussion_r443585167", "createdAt": "2020-06-22T14:09:20Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-services/dhis-service-analytics/src/main/java/org/hisp/dhis/analytics/data/DefaultAnalyticsService.java", "diffHunk": "@@ -1364,9 +1372,86 @@ private void addRawData( DataQueryParams params, Grid grid )\n             .withOutputFormat( OutputFormat.ANALYTICS )\n             .withSkipMeta( true ).build();\n \n+        // each row contains: dimension uid | period | value\n         Grid grid = getAggregatedDataValueGridInternal( dataSourceParams );\n \n-        return grid.getAsMap( grid.getWidth() - 1, DimensionalObject.DIMENSION_SEP );\n+        MultiValuedMap<String, DimensionItemWithValue> result = new ArrayListValuedHashMap<>();\n+\n+        final List<DimensionalItemObject> basePeriods = params.getPeriods();\n+\n+        for ( List<Object> row : grid.getRows() )\n+        {\n+            if ( isInBasePeriod( basePeriods, (String) row.get( 1 ) ) )\n+            {\n+                // Key is composed of [uid-period]\n+                final String key = StringUtils.join(\n+                    ArrayUtils.remove( row.toArray( new Object[0] ), grid.getWidth() - 1 ),\n+                    DimensionalObject.DIMENSION_SEP );\n+\n+                final DimensionalItemObject dimensionalItemObject = findDimensionalItem( (String) row.get( 0 ), items ).get( 0 );\n+                DimensionalItemObject clone = dimensionalItemObject;\n+                if ( dimensionalItemObject.getPeriodOffset() != 0 )\n+                {\n+                    List<Object> periodOffsetRow = getPeriodOffsetRow( grid, dimensionalItemObject, (String)row.get(1), dimensionalItemObject.getPeriodOffset());\n+                    if ( periodOffsetRow != null )\n+                    {\n+                        result.put( key,\n+                            new DimensionItemWithValue( dimensionalItemObject,\n+                                (Double) periodOffsetRow.get( grid.getWidth() - 1 ) ) );\n+\n+                    } // TODO throw exception?\n+                    clone = SerializationUtils.clone( dimensionalItemObject );\n+                    clone.resetPeriodOffset();\n+                }\n+\n+                result.put( key,\n+                    new DimensionItemWithValue( clone, (Double) row.get( grid.getWidth() - 1 ) ) );\n+            }\n+        }\n+        \n+        return result;\n+    }\n+    \n+    private List<Object> getPeriodOffsetRow( Grid grid, DimensionalItemObject dimItem, String isoPeriod, int offset )\n+    {\n+        Period shifted = shiftPeriod( PeriodType.getPeriodFromIsoString( isoPeriod ), offset );\n+        for ( List<Object> row : grid.getRows() )\n+        {\n+            final String rowUid = (String) row.get(0);\n+            final String rowPeriod = (String) row.get( 1 );\n+            if ( rowUid.equals(dimItem.getUid()) && rowPeriod.equals( shifted.getIsoDate() ) )\n+            {\n+                return row;\n+            }\n+        }\n+        return null;\n+\n+    }\n+    \n+    private boolean isInBasePeriod( List<DimensionalItemObject> basePeriods, String period )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f0a5b8f947065e9e156a3f3b0e51bf5baa8504"}, "originalPosition": 155}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0OTYxMTI5", "url": "https://github.com/dhis2/dhis2-core/pull/5772#pullrequestreview-434961129", "createdAt": "2020-06-22T14:10:44Z", "commit": {"oid": "d7f0a5b8f947065e9e156a3f3b0e51bf5baa8504"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDoxMDo0NFrOGnCWfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDoxMDo0NFrOGnCWfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU4NjE3Mg==", "bodyText": "Could we move this method to a utility class, add Javadoc and add unit test? E.g. DimensionalObjectUtils.", "url": "https://github.com/dhis2/dhis2-core/pull/5772#discussion_r443586172", "createdAt": "2020-06-22T14:10:44Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-services/dhis-service-analytics/src/main/java/org/hisp/dhis/analytics/data/DefaultAnalyticsService.java", "diffHunk": "@@ -1364,9 +1372,86 @@ private void addRawData( DataQueryParams params, Grid grid )\n             .withOutputFormat( OutputFormat.ANALYTICS )\n             .withSkipMeta( true ).build();\n \n+        // each row contains: dimension uid | period | value\n         Grid grid = getAggregatedDataValueGridInternal( dataSourceParams );\n \n-        return grid.getAsMap( grid.getWidth() - 1, DimensionalObject.DIMENSION_SEP );\n+        MultiValuedMap<String, DimensionItemWithValue> result = new ArrayListValuedHashMap<>();\n+\n+        final List<DimensionalItemObject> basePeriods = params.getPeriods();\n+\n+        for ( List<Object> row : grid.getRows() )\n+        {\n+            if ( isInBasePeriod( basePeriods, (String) row.get( 1 ) ) )\n+            {\n+                // Key is composed of [uid-period]\n+                final String key = StringUtils.join(\n+                    ArrayUtils.remove( row.toArray( new Object[0] ), grid.getWidth() - 1 ),\n+                    DimensionalObject.DIMENSION_SEP );\n+\n+                final DimensionalItemObject dimensionalItemObject = findDimensionalItem( (String) row.get( 0 ), items ).get( 0 );\n+                DimensionalItemObject clone = dimensionalItemObject;\n+                if ( dimensionalItemObject.getPeriodOffset() != 0 )\n+                {\n+                    List<Object> periodOffsetRow = getPeriodOffsetRow( grid, dimensionalItemObject, (String)row.get(1), dimensionalItemObject.getPeriodOffset());\n+                    if ( periodOffsetRow != null )\n+                    {\n+                        result.put( key,\n+                            new DimensionItemWithValue( dimensionalItemObject,\n+                                (Double) periodOffsetRow.get( grid.getWidth() - 1 ) ) );\n+\n+                    } // TODO throw exception?\n+                    clone = SerializationUtils.clone( dimensionalItemObject );\n+                    clone.resetPeriodOffset();\n+                }\n+\n+                result.put( key,\n+                    new DimensionItemWithValue( clone, (Double) row.get( grid.getWidth() - 1 ) ) );\n+            }\n+        }\n+        \n+        return result;\n+    }\n+    \n+    private List<Object> getPeriodOffsetRow( Grid grid, DimensionalItemObject dimItem, String isoPeriod, int offset )\n+    {\n+        Period shifted = shiftPeriod( PeriodType.getPeriodFromIsoString( isoPeriod ), offset );\n+        for ( List<Object> row : grid.getRows() )\n+        {\n+            final String rowUid = (String) row.get(0);\n+            final String rowPeriod = (String) row.get( 1 );\n+            if ( rowUid.equals(dimItem.getUid()) && rowPeriod.equals( shifted.getIsoDate() ) )\n+            {\n+                return row;\n+            }\n+        }\n+        return null;\n+\n+    }\n+    \n+    private boolean isInBasePeriod( List<DimensionalItemObject> basePeriods, String period )\n+    {\n+        for ( DimensionalItemObject dimensionalItemObject : basePeriods )\n+        {\n+            Period p = (Period) dimensionalItemObject;\n+            if ( p.getIsoDate().equals( period ) )\n+            {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Filters by uid and returns one ore more {@see DimensionalItemObject} from a\n+     * List\n+     * \n+     * @param uid a uid to filter {@see DimensionalItemObject} on\n+     * @param items the filtered List\n+     * @return a List only containing the  {@see DimensionalItemObject} matching the uid\n+     */\n+    private List<DimensionalItemObject> findDimensionalItem( String uid, List<DimensionalItemObject> items )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f0a5b8f947065e9e156a3f3b0e51bf5baa8504"}, "originalPosition": 176}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0OTYxMzI4", "url": "https://github.com/dhis2/dhis2-core/pull/5772#pullrequestreview-434961328", "createdAt": "2020-06-22T14:10:56Z", "commit": {"oid": "d7f0a5b8f947065e9e156a3f3b0e51bf5baa8504"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDoxMDo1NlrOGnCXDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDoxMDo1NlrOGnCXDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU4NjMxNw==", "bodyText": "Could we move this method to a utility class, add Javadoc and add unit test? E.g. DimensionalObjectUtils.", "url": "https://github.com/dhis2/dhis2-core/pull/5772#discussion_r443586317", "createdAt": "2020-06-22T14:10:56Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-services/dhis-service-analytics/src/main/java/org/hisp/dhis/analytics/data/DefaultAnalyticsService.java", "diffHunk": "@@ -1401,6 +1486,26 @@ private void handleEmptyDimensionItemPermutations( List<List<DimensionItem>> dim\n         }\n     }\n \n+    /**\n+     * Transforms a List of {@see DimensionItemWithValue} into a Map where:\n+     * \n+     * key -> DimensionalItemObject value -> the value of the DimensionalItemObject\n+     * \n+     */\n+    private Map<DimensionalItemObject, Double> convertToDimItemValueMap(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f0a5b8f947065e9e156a3f3b0e51bf5baa8504"}, "originalPosition": 192}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0OTYyMzIx", "url": "https://github.com/dhis2/dhis2-core/pull/5772#pullrequestreview-434962321", "createdAt": "2020-06-22T14:12:01Z", "commit": {"oid": "d7f0a5b8f947065e9e156a3f3b0e51bf5baa8504"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDoxMjowMVrOGnCaAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDoxMjowMVrOGnCaAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU4NzA3Mw==", "bodyText": "Could we move this method to a utility class, add Javadoc and add unit test? E.g. PeriodOffsetUtils.", "url": "https://github.com/dhis2/dhis2-core/pull/5772#discussion_r443587073", "createdAt": "2020-06-22T14:12:01Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-services/dhis-service-analytics/src/main/java/org/hisp/dhis/analytics/data/DefaultQueryPlanner.java", "diffHunk": "@@ -302,6 +305,29 @@ else if ( !params.getFilterPeriods().isEmpty() )\n         return queries;\n     }\n \n+    private DataQueryParams removeOffsetPeriodsIfNotNeeded( DataQueryParams params )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f0a5b8f947065e9e156a3f3b0e51bf5baa8504"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0OTYyODY4", "url": "https://github.com/dhis2/dhis2-core/pull/5772#pullrequestreview-434962868", "createdAt": "2020-06-22T14:12:32Z", "commit": {"oid": "d7f0a5b8f947065e9e156a3f3b0e51bf5baa8504"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDoxMjozM1rOGnCbqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDoxMjozM1rOGnCbqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU4NzQ5Ng==", "bodyText": "Maybe rename to just DimensionItemValue.", "url": "https://github.com/dhis2/dhis2-core/pull/5772#discussion_r443587496", "createdAt": "2020-06-22T14:12:33Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-services/dhis-service-analytics/src/main/java/org/hisp/dhis/analytics/data/DimensionItemWithValue.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package org.hisp.dhis.analytics.data;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import org.hisp.dhis.common.DimensionalItemObject;\n+\n+@Getter\n+@AllArgsConstructor\n+public class DimensionItemWithValue", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f0a5b8f947065e9e156a3f3b0e51bf5baa8504"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0OTYzMjc5", "url": "https://github.com/dhis2/dhis2-core/pull/5772#pullrequestreview-434963279", "createdAt": "2020-06-22T14:13:00Z", "commit": {"oid": "d7f0a5b8f947065e9e156a3f3b0e51bf5baa8504"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDoxMzowMFrOGnCc8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDoxMzowMFrOGnCc8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU4NzgyNw==", "bodyText": "Move to package org.hisp.dhis.analytics.utils.", "url": "https://github.com/dhis2/dhis2-core/pull/5772#discussion_r443587827", "createdAt": "2020-06-22T14:13:00Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-services/dhis-service-analytics/src/main/java/org/hisp/dhis/analytics/offset/PeriodOffsetUtils.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package org.hisp.dhis.analytics.offset;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f0a5b8f947065e9e156a3f3b0e51bf5baa8504"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0OTY1OTkw", "url": "https://github.com/dhis2/dhis2-core/pull/5772#pullrequestreview-434965990", "createdAt": "2020-06-22T14:15:51Z", "commit": {"oid": "d7f0a5b8f947065e9e156a3f3b0e51bf5baa8504"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDoxNTo1MVrOGnCk-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDoxNTo1MVrOGnCk-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU4OTg4Mg==", "bodyText": "Fix or remove.", "url": "https://github.com/dhis2/dhis2-core/pull/5772#discussion_r443589882", "createdAt": "2020-06-22T14:15:51Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-services/dhis-service-analytics/src/test/java/org/hisp/dhis/analytics/data/QueryPlannerTest.java", "diffHunk": "@@ -400,28 +409,29 @@ public void testGetPermutationDimensionalItemValueMapCocDisabled()\n         Map<DimensionalItemObject, Double> ouBM2Expected = new HashMap<>();\n         ouBM2Expected.put( deACoc, 4d );\n         ouBM2Expected.put( deBCoc, 8d );\n-\n-        assertEquals( ouAM1Expected, ouAM1 );\n-        assertEquals( ouAM2Expected, ouAM2 );\n-        assertEquals( ouBM1Expected, ouBM1 );\n-        assertEquals( ouBM2Expected, ouBM2 );\n+// FIXME luciano", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f0a5b8f947065e9e156a3f3b0e51bf5baa8504"}, "originalPosition": 201}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NTg4OTIw", "url": "https://github.com/dhis2/dhis2-core/pull/5772#pullrequestreview-435588920", "createdAt": "2020-06-23T09:07:42Z", "commit": {"oid": "aaef76d086df281b484d1b32e3faf9a664c0b218"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOTowNzo0MlrOGngSuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOTowNzo0MlrOGngSuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA3NjcyOQ==", "bodyText": "This gives me a little sense of mutability issues. Perhaps one could instead close the DimensionalItemObject somehow and keep it immutable, or move mutable properties another place. I know that has drawbacks too as discussed.", "url": "https://github.com/dhis2/dhis2-core/pull/5772#discussion_r444076729", "createdAt": "2020-06-23T09:07:42Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/common/DimensionalItemObject.java", "diffHunk": "@@ -91,4 +91,18 @@\n      * should be aggregated across multiple values.\n      */\n     TotalAggregationType getTotalAggregationType();\n+\n+    /**\n+     * Gets a Period Offset: the offset can be applied within an Indicator formula\n+     * in order to \"shift\" the query period by the offset value (e.g. Jan 2020 with\n+     * offset 1 becomes Feb 2020). An offset with value 0 means no offset.\n+     * \n+     * @return an int.\n+     */\n+    int getPeriodOffset();\n+\n+    /**\n+     * Set the Period Offset to 0\n+     */\n+    void resetPeriodOffset();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aaef76d086df281b484d1b32e3faf9a664c0b218"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d04b5754ec33b24b93c9db9971d9053c389e74b8", "author": {"user": {"login": "luciano-fiandesio", "name": "Luciano Fiandesio"}}, "url": "https://github.com/dhis2/dhis2-core/commit/d04b5754ec33b24b93c9db9971d9053c389e74b8", "committedDate": "2020-07-02T08:19:03Z", "message": "feat: Period offset for Indicator formula\n\nThis feature allows to \"shift\" by period one or more elements within an Indicator formula.\n\nGiven the following Indicator formula:\n\n`#{gQNFkFkObU8} + #{MaXD86iob3M}`\n\nIt is now possible to add a `periodOffset()` directive, in order to calculate the value for the\nquery-specific period based on the declared `periodOffset`:\n\n`(#{gQNFkFkObU8}.periodOffset(-1) + #{MaXD86iob3M}.periodOffset(-1)) - (#{gQNFkFkObU8} + #{MaXD86iob3M})`\n\nIn the above example, assuming that the Analytics query is executed for the period Feb 2020, the results will calculate the\nvalue of `gQNFkFkObU8` + `MaXD86iob3M` for January 2020 (offset -1) and subtract the value from February 2020.\n\nref: DHIS2-8758"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae45732c38acdbc205345df71363b0b7228ad6f2", "author": {"user": {"login": "luciano-fiandesio", "name": "Luciano Fiandesio"}}, "url": "https://github.com/dhis2/dhis2-core/commit/ae45732c38acdbc205345df71363b0b7228ad6f2", "committedDate": "2020-07-02T08:19:03Z", "message": "refactor: moved methods to util classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05a33d2cba16e4471f454257e2bffc4beea8e123", "author": {"user": {"login": "luciano-fiandesio", "name": "Luciano Fiandesio"}}, "url": "https://github.com/dhis2/dhis2-core/commit/05a33d2cba16e4471f454257e2bffc4beea8e123", "committedDate": "2020-07-02T08:19:03Z", "message": "refactor: address code review input"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fad0b83ee258757efdec7ebf176854eaf4eabd60", "author": {"user": {"login": "luciano-fiandesio", "name": "Luciano Fiandesio"}}, "url": "https://github.com/dhis2/dhis2-core/commit/fad0b83ee258757efdec7ebf176854eaf4eabd60", "committedDate": "2020-07-02T08:19:03Z", "message": "refactor: address code review input, add test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b891add8f1466a45a7ef15c5c79e201296b4b57", "author": {"user": {"login": "luciano-fiandesio", "name": "Luciano Fiandesio"}}, "url": "https://github.com/dhis2/dhis2-core/commit/7b891add8f1466a45a7ef15c5c79e201296b4b57", "committedDate": "2020-07-02T08:19:03Z", "message": "fix: uncommented test assertions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ff10788eba102022006e1245abe5add7e20fb0e", "author": {"user": {"login": "luciano-fiandesio", "name": "Luciano Fiandesio"}}, "url": "https://github.com/dhis2/dhis2-core/commit/2ff10788eba102022006e1245abe5add7e20fb0e", "committedDate": "2020-07-02T08:19:03Z", "message": "fix: removed mutator no longer needed, fix issue with grid index"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94148cad7950a6c6b7233c0d354f899bbaeb7cb4", "author": {"user": {"login": "luciano-fiandesio", "name": "Luciano Fiandesio"}}, "url": "https://github.com/dhis2/dhis2-core/commit/94148cad7950a6c6b7233c0d354f899bbaeb7cb4", "committedDate": "2020-07-02T08:19:03Z", "message": "chore: minor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "161e4c71cc5b1e048fe160e1c7312f3f25b7eacb", "author": {"user": {"login": "luciano-fiandesio", "name": "Luciano Fiandesio"}}, "url": "https://github.com/dhis2/dhis2-core/commit/161e4c71cc5b1e048fe160e1c7312f3f25b7eacb", "committedDate": "2020-07-02T08:19:03Z", "message": "fix: Sonar warning"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d5ac523efd5870088e5f3d194cf738b96b437361", "author": {"user": {"login": "luciano-fiandesio", "name": "Luciano Fiandesio"}}, "url": "https://github.com/dhis2/dhis2-core/commit/d5ac523efd5870088e5f3d194cf738b96b437361", "committedDate": "2020-06-23T13:31:02Z", "message": "fix: Sonar warning"}, "afterCommit": {"oid": "161e4c71cc5b1e048fe160e1c7312f3f25b7eacb", "author": {"user": {"login": "luciano-fiandesio", "name": "Luciano Fiandesio"}}, "url": "https://github.com/dhis2/dhis2-core/commit/161e4c71cc5b1e048fe160e1c7312f3f25b7eacb", "committedDate": "2020-07-02T08:19:03Z", "message": "fix: Sonar warning"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNjc2OTQ2", "url": "https://github.com/dhis2/dhis2-core/pull/5772#pullrequestreview-442676946", "createdAt": "2020-07-05T13:21:35Z", "commit": {"oid": "161e4c71cc5b1e048fe160e1c7312f3f25b7eacb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQxMzoyMTozNVrOGtCUfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQxMzoyMTozNVrOGtCUfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTg3NzExOQ==", "bodyText": "Yes there is. In the builder, you can use Builder.withPeriods(..).\nSo something like:\nDataQueryParams.newBuilder( params )\n    .withPeriods( nonShiftedPeriods )\n    .build();", "url": "https://github.com/dhis2/dhis2-core/pull/5772#discussion_r449877119", "createdAt": "2020-07-05T13:21:35Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-services/dhis-service-analytics/src/main/java/org/hisp/dhis/analytics/util/PeriodOffsetUtils.java", "diffHunk": "@@ -0,0 +1,231 @@\n+package org.hisp.dhis.analytics.util;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.analytics.DataQueryParams;\n+import org.hisp.dhis.analytics.table.PartitionUtils;\n+import org.hisp.dhis.common.DimensionItemType;\n+import org.hisp.dhis.common.DimensionalItemObject;\n+import org.hisp.dhis.common.DimensionalObject;\n+import org.hisp.dhis.common.Grid;\n+import org.hisp.dhis.common.ListMap;\n+import org.hisp.dhis.period.Period;\n+import org.hisp.dhis.period.PeriodType;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.BiFunction;\n+import java.util.stream.Collectors;\n+\n+import static org.hisp.dhis.analytics.DataQueryParams.DX_INDEX;\n+import static org.hisp.dhis.common.DimensionalObject.DATA_X_DIM_ID;\n+import static org.hisp.dhis.common.DimensionalObject.PERIOD_DIM_ID;\n+\n+public class PeriodOffsetUtils\n+{\n+    /**\n+     * Creates an associative Map between Period Types (e.g. Month, Quarter, etc.)\n+     * and Periods extracted from a {@see DataQueryParams} object.\n+     * \n+     * Each map value may also contain periods that are derived from Period offsets\n+     * applied to elements from the \"data\" dimension of the {@see DataQueryParams}\n+     * The periods add because of the \"periodOffset\" directive, will have the\n+     * \"shifted\" property set to \"true\"\n+     *\n+     * @param params a DataQueryParams object\n+     */\n+    public static ListMap<String, DimensionalItemObject> getPeriodTypePeriodMap( DataQueryParams params )\n+    {\n+        if ( params == null || params.getPeriods().isEmpty() )\n+        {\n+            return new ListMap<>();\n+        }\n+\n+        ListMap<String, DimensionalItemObject> periodTypePeriodMap = PartitionUtils.getPeriodTypePeriodMap( params.getPeriods() );\n+\n+        DimensionalObject dimension = params.getDimension( DATA_X_DIM_ID );\n+        if ( dimension == null )\n+        {\n+            return periodTypePeriodMap;\n+        }\n+        List<DimensionalItemObject> items = dimension.getItems();\n+        ListMap<String, DimensionalItemObject> shiftedMap = new ListMap<>();\n+\n+        for ( DimensionalItemObject item : items )\n+        {\n+            if ( item.getPeriodOffset() != 0 )\n+            {\n+                shiftedMap.putAll( addPeriodOffset( periodTypePeriodMap, item.getPeriodOffset() ) );\n+            }\n+        }\n+\n+        Set<DimensionalItemObject> dimensionalItemObjects = shiftedMap.uniqueValues();\n+        for ( DimensionalItemObject dimensionalItemObject : dimensionalItemObjects )\n+        {\n+            Period period = (Period) dimensionalItemObject;\n+            if ( !periodTypePeriodMap.containsValue( period.getPeriodType().getName(), dimensionalItemObject ) )\n+            {\n+                periodTypePeriodMap.putValue( period.getPeriodType().getName(), dimensionalItemObject );\n+            }\n+        }\n+\n+        return periodTypePeriodMap;\n+    }\n+\n+    /**\n+     * Shifts the given Period in the past or future based on the offset value.\n+     * \n+     * Example:\n+     * \n+     * Period: 202001 , Offset: 1 -> Period: 202002\n+     * Period: 2020 , Offset: -1 -> Period: 2019\n+     * \n+     * @param period a Period\n+     * @param periodOffset a positive or negative integer\n+     * @return A Period\n+     */\n+    public static Period shiftPeriod( Period period, int periodOffset )\n+    {\n+        if ( periodOffset == 0 )\n+        {\n+            return period;\n+        }\n+\n+        PeriodType periodType = period.getPeriodType();\n+        Period p;\n+        if ( periodOffset > 0 )\n+        {\n+            p = periodType.getNextPeriod( period, periodOffset );\n+        }\n+        else\n+        {\n+            p = periodType.getPreviousPeriod( period, periodOffset );\n+        }\n+\n+        p.setShifted( true );\n+        return p;\n+    }\n+\n+    /**\n+     * Remove Periods from a {@see DataQueryParams} object if these periods have\n+     * been added because of an \"periodOffset\" directive and the DataElement have no\n+     * offset specified. This can happen in case of an Indicator, where a numerator\n+     * formula is using an offset, and the denominator formula is not.\n+     * \n+     * @param params a {@see DataQueryParams} object\n+     * @return a {@see DataQueryParams} object\n+     */\n+    public static DataQueryParams removeOffsetPeriodsIfNotNeeded( DataQueryParams params )\n+    {\n+        final List<DimensionalItemObject> dimensionalItemObjects = params.getDataElements();\n+\n+        final boolean hasOffset = dimensionalItemObjects.stream().filter( dio -> dio.getDimensionItemType() != null )\n+            .filter( dio -> dio.getDimensionItemType().equals( DimensionItemType.DATA_ELEMENT ) )\n+            .anyMatch( dio -> dio.getPeriodOffset() != 0 );\n+\n+        if ( !hasOffset )\n+        {\n+            final List<DimensionalItemObject> nonShiftedPeriods = params.getPeriods().stream()\n+                .filter( dio -> (!((Period) dio).isShifted()) ).collect( Collectors.toList() );\n+\n+            // TODO is there a better way to \"replace\" periods?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "161e4c71cc5b1e048fe160e1c7312f3f25b7eacb"}, "originalPosition": 158}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNjc3MDkx", "url": "https://github.com/dhis2/dhis2-core/pull/5772#pullrequestreview-442677091", "createdAt": "2020-07-05T13:23:36Z", "commit": {"oid": "161e4c71cc5b1e048fe160e1c7312f3f25b7eacb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQxMzoyMzozN1rOGtCVJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQxMzoyMzozN1rOGtCVJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTg3NzI4Ng==", "bodyText": "Remove //", "url": "https://github.com/dhis2/dhis2-core/pull/5772#discussion_r449877286", "createdAt": "2020-07-05T13:23:37Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-services/dhis-service-analytics/src/main/java/org/hisp/dhis/analytics/data/DefaultAnalyticsService.java", "diffHunk": "@@ -1364,9 +1372,57 @@ private void addRawData( DataQueryParams params, Grid grid )\n             .withOutputFormat( OutputFormat.ANALYTICS )\n             .withSkipMeta( true ).build();\n \n+        // Each row in the Grid contains: dimension uid | period | value\n         Grid grid = getAggregatedDataValueGridInternal( dataSourceParams );\n+        MultiValuedMap<String, DimensionItemObjectValue> result = new ArrayListValuedHashMap<>();\n+\n+        if ( grid.getRows().size() == 0 )\n+        {\n+            return result;\n+        }\n+\n+        BiFunction<Integer, Integer, Integer> replaceIndexIfMissing = (Integer index, Integer defaultIndex ) \n+                -> index == -1 ? defaultIndex : index;\n+\n+        final int dataIndex = replaceIndexIfMissing.apply( grid.getIndexOfHeader( DATA_X_DIM_ID ), 0 );\n+        final int periodIndex = replaceIndexIfMissing.apply( grid.getIndexOfHeader( PERIOD_DIM_ID ), 1 );\n+        final int valueIndex = grid.getWidth() - 1;\n+\n+        final List<DimensionalItemObject> basePeriods = params.getPeriods();\n+\n+        for ( List<Object> row : grid.getRows() )\n+        {\n+            // Check if the current row period belongs to the list of periods from the original request\n+            if ( isPeriodInPeriods( (String) row.get( periodIndex ), basePeriods ) )\n+            {\n+                // Key is composed of [uid-period]\n+                final String key = StringUtils.join(\n+                    ArrayUtils.remove( row.toArray( new Object[0] ), valueIndex ),\n+                    DimensionalObject.DIMENSION_SEP );\n+\n+                final DimensionalItemObject dimensionalItemObject = AnalyticsUtils.findDimensionalItems( (String) row.get( dataIndex ), items ).get( 0 );\n+                DimensionalItemObject clone = dimensionalItemObject;\n+                // ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "161e4c71cc5b1e048fe160e1c7312f3f25b7eacb"}, "originalPosition": 139}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNjc3MTA5", "url": "https://github.com/dhis2/dhis2-core/pull/5772#pullrequestreview-442677109", "createdAt": "2020-07-05T13:23:58Z", "commit": {"oid": "161e4c71cc5b1e048fe160e1c7312f3f25b7eacb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQxMzoyMzo1OFrOGtCVQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQxMzoyMzo1OFrOGtCVQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTg3NzMxNA==", "bodyText": "Decide on whether to throw exception.", "url": "https://github.com/dhis2/dhis2-core/pull/5772#discussion_r449877314", "createdAt": "2020-07-05T13:23:58Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-services/dhis-service-analytics/src/main/java/org/hisp/dhis/analytics/data/DefaultAnalyticsService.java", "diffHunk": "@@ -1364,9 +1372,57 @@ private void addRawData( DataQueryParams params, Grid grid )\n             .withOutputFormat( OutputFormat.ANALYTICS )\n             .withSkipMeta( true ).build();\n \n+        // Each row in the Grid contains: dimension uid | period | value\n         Grid grid = getAggregatedDataValueGridInternal( dataSourceParams );\n+        MultiValuedMap<String, DimensionItemObjectValue> result = new ArrayListValuedHashMap<>();\n+\n+        if ( grid.getRows().size() == 0 )\n+        {\n+            return result;\n+        }\n+\n+        BiFunction<Integer, Integer, Integer> replaceIndexIfMissing = (Integer index, Integer defaultIndex ) \n+                -> index == -1 ? defaultIndex : index;\n+\n+        final int dataIndex = replaceIndexIfMissing.apply( grid.getIndexOfHeader( DATA_X_DIM_ID ), 0 );\n+        final int periodIndex = replaceIndexIfMissing.apply( grid.getIndexOfHeader( PERIOD_DIM_ID ), 1 );\n+        final int valueIndex = grid.getWidth() - 1;\n+\n+        final List<DimensionalItemObject> basePeriods = params.getPeriods();\n+\n+        for ( List<Object> row : grid.getRows() )\n+        {\n+            // Check if the current row period belongs to the list of periods from the original request\n+            if ( isPeriodInPeriods( (String) row.get( periodIndex ), basePeriods ) )\n+            {\n+                // Key is composed of [uid-period]\n+                final String key = StringUtils.join(\n+                    ArrayUtils.remove( row.toArray( new Object[0] ), valueIndex ),\n+                    DimensionalObject.DIMENSION_SEP );\n+\n+                final DimensionalItemObject dimensionalItemObject = AnalyticsUtils.findDimensionalItems( (String) row.get( dataIndex ), items ).get( 0 );\n+                DimensionalItemObject clone = dimensionalItemObject;\n+                // \n+                if ( dimensionalItemObject.getPeriodOffset() != 0 )\n+                {\n+                    List<Object> periodOffsetRow = getPeriodOffsetRow( grid, dimensionalItemObject,\n+                        (String) row.get( periodIndex ), dimensionalItemObject.getPeriodOffset() );\n+                    if ( periodOffsetRow != null )\n+                    {\n+                        result.put( key,\n+                            new DimensionItemObjectValue( dimensionalItemObject,\n+                                (Double) periodOffsetRow.get( valueIndex ) ) );\n \n-        return grid.getAsMap( grid.getWidth() - 1, DimensionalObject.DIMENSION_SEP );\n+                    } // TODO throw exception?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "161e4c71cc5b1e048fe160e1c7312f3f25b7eacb"}, "originalPosition": 151}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNjc3MTM2", "url": "https://github.com/dhis2/dhis2-core/pull/5772#pullrequestreview-442677136", "createdAt": "2020-07-05T13:24:22Z", "commit": {"oid": "161e4c71cc5b1e048fe160e1c7312f3f25b7eacb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQxMzoyNDoyMlrOGtCVYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQxMzoyNDoyMlrOGtCVYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTg3NzM0NQ==", "bodyText": "Add proper Javadoc.", "url": "https://github.com/dhis2/dhis2-core/pull/5772#discussion_r449877345", "createdAt": "2020-07-05T13:24:22Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-services/dhis-service-analytics/src/main/java/org/hisp/dhis/analytics/util/PeriodOffsetUtils.java", "diffHunk": "@@ -0,0 +1,231 @@\n+package org.hisp.dhis.analytics.util;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.analytics.DataQueryParams;\n+import org.hisp.dhis.analytics.table.PartitionUtils;\n+import org.hisp.dhis.common.DimensionItemType;\n+import org.hisp.dhis.common.DimensionalItemObject;\n+import org.hisp.dhis.common.DimensionalObject;\n+import org.hisp.dhis.common.Grid;\n+import org.hisp.dhis.common.ListMap;\n+import org.hisp.dhis.period.Period;\n+import org.hisp.dhis.period.PeriodType;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.BiFunction;\n+import java.util.stream.Collectors;\n+\n+import static org.hisp.dhis.analytics.DataQueryParams.DX_INDEX;\n+import static org.hisp.dhis.common.DimensionalObject.DATA_X_DIM_ID;\n+import static org.hisp.dhis.common.DimensionalObject.PERIOD_DIM_ID;\n+\n+public class PeriodOffsetUtils\n+{\n+    /**\n+     * Creates an associative Map between Period Types (e.g. Month, Quarter, etc.)\n+     * and Periods extracted from a {@see DataQueryParams} object.\n+     * \n+     * Each map value may also contain periods that are derived from Period offsets\n+     * applied to elements from the \"data\" dimension of the {@see DataQueryParams}\n+     * The periods add because of the \"periodOffset\" directive, will have the\n+     * \"shifted\" property set to \"true\"\n+     *\n+     * @param params a DataQueryParams object\n+     */\n+    public static ListMap<String, DimensionalItemObject> getPeriodTypePeriodMap( DataQueryParams params )\n+    {\n+        if ( params == null || params.getPeriods().isEmpty() )\n+        {\n+            return new ListMap<>();\n+        }\n+\n+        ListMap<String, DimensionalItemObject> periodTypePeriodMap = PartitionUtils.getPeriodTypePeriodMap( params.getPeriods() );\n+\n+        DimensionalObject dimension = params.getDimension( DATA_X_DIM_ID );\n+        if ( dimension == null )\n+        {\n+            return periodTypePeriodMap;\n+        }\n+        List<DimensionalItemObject> items = dimension.getItems();\n+        ListMap<String, DimensionalItemObject> shiftedMap = new ListMap<>();\n+\n+        for ( DimensionalItemObject item : items )\n+        {\n+            if ( item.getPeriodOffset() != 0 )\n+            {\n+                shiftedMap.putAll( addPeriodOffset( periodTypePeriodMap, item.getPeriodOffset() ) );\n+            }\n+        }\n+\n+        Set<DimensionalItemObject> dimensionalItemObjects = shiftedMap.uniqueValues();\n+        for ( DimensionalItemObject dimensionalItemObject : dimensionalItemObjects )\n+        {\n+            Period period = (Period) dimensionalItemObject;\n+            if ( !periodTypePeriodMap.containsValue( period.getPeriodType().getName(), dimensionalItemObject ) )\n+            {\n+                periodTypePeriodMap.putValue( period.getPeriodType().getName(), dimensionalItemObject );\n+            }\n+        }\n+\n+        return periodTypePeriodMap;\n+    }\n+\n+    /**\n+     * Shifts the given Period in the past or future based on the offset value.\n+     * \n+     * Example:\n+     * \n+     * Period: 202001 , Offset: 1 -> Period: 202002\n+     * Period: 2020 , Offset: -1 -> Period: 2019\n+     * \n+     * @param period a Period\n+     * @param periodOffset a positive or negative integer\n+     * @return A Period\n+     */\n+    public static Period shiftPeriod( Period period, int periodOffset )\n+    {\n+        if ( periodOffset == 0 )\n+        {\n+            return period;\n+        }\n+\n+        PeriodType periodType = period.getPeriodType();\n+        Period p;\n+        if ( periodOffset > 0 )\n+        {\n+            p = periodType.getNextPeriod( period, periodOffset );\n+        }\n+        else\n+        {\n+            p = periodType.getPreviousPeriod( period, periodOffset );\n+        }\n+\n+        p.setShifted( true );\n+        return p;\n+    }\n+\n+    /**\n+     * Remove Periods from a {@see DataQueryParams} object if these periods have\n+     * been added because of an \"periodOffset\" directive and the DataElement have no\n+     * offset specified. This can happen in case of an Indicator, where a numerator\n+     * formula is using an offset, and the denominator formula is not.\n+     * \n+     * @param params a {@see DataQueryParams} object\n+     * @return a {@see DataQueryParams} object\n+     */\n+    public static DataQueryParams removeOffsetPeriodsIfNotNeeded( DataQueryParams params )\n+    {\n+        final List<DimensionalItemObject> dimensionalItemObjects = params.getDataElements();\n+\n+        final boolean hasOffset = dimensionalItemObjects.stream().filter( dio -> dio.getDimensionItemType() != null )\n+            .filter( dio -> dio.getDimensionItemType().equals( DimensionItemType.DATA_ELEMENT ) )\n+            .anyMatch( dio -> dio.getPeriodOffset() != 0 );\n+\n+        if ( !hasOffset )\n+        {\n+            final List<DimensionalItemObject> nonShiftedPeriods = params.getPeriods().stream()\n+                .filter( dio -> (!((Period) dio).isShifted()) ).collect( Collectors.toList() );\n+\n+            // TODO is there a better way to \"replace\" periods?\n+            final DimensionalObject periodDimension = params.getDimension( \"pe\" );\n+            periodDimension.getItems().clear();\n+            periodDimension.getItems().addAll( nonShiftedPeriods );\n+\n+            return DataQueryParams.newBuilder( params ).removeDimension( \"pe\" ).addDimension( periodDimension ).build();\n+        }\n+        return params;\n+    }\n+\n+    /**\n+     * Given a Analytics {@see Grid}, this methods tries to extract the row from the Grid that matches the given\n+     * {@see DimensionalItemObject} and offset period.\n+     * If there is no match, null is returned.\n+     *\n+     * @param grid a {@see Grid} object\n+     * @param dimItem a DimensionalItemObject object\n+     * @param isoPeriod a Period, in iso format (e.g. 202001 - for January 2020)\n+     * @param offset an offset value\n+     * @return a row from the Grid (as List of Object) or null\n+     */\n+    public static List<Object> getPeriodOffsetRow( Grid grid, DimensionalItemObject dimItem, String isoPeriod,\n+        int offset )\n+    {\n+        if ( grid == null || dimItem == null )\n+        {\n+            return null;\n+        }\n+\n+        BiFunction<Integer, Integer, Integer> replaceIndexIfMissing = (Integer index, Integer defaultIndex )\n+                -> index == -1 ? defaultIndex : index;\n+\n+        final int dataIndex = replaceIndexIfMissing.apply( grid.getIndexOfHeader( DATA_X_DIM_ID ), 0 );\n+        final int periodIndex = replaceIndexIfMissing.apply( grid.getIndexOfHeader( PERIOD_DIM_ID ), 1 );\n+\n+        Period shifted = offset != 0 ? shiftPeriod( PeriodType.getPeriodFromIsoString( isoPeriod ), offset )\n+            : PeriodType.getPeriodFromIsoString( isoPeriod );\n+        for ( List<Object> row : grid.getRows() )\n+        {\n+            final String rowUid = (String) row.get( dataIndex );\n+            final String rowPeriod = (String) row.get( periodIndex );\n+            if ( rowUid.equals( dimItem.getUid() ) && rowPeriod.equals( shifted.getIsoDate() ) )\n+            {\n+                return row;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "161e4c71cc5b1e048fe160e1c7312f3f25b7eacb"}, "originalPosition": 208}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90a7702ad744384134296e3d57f7240bc71035c5", "author": {"user": {"login": "larshelge", "name": "Lars Helge \u00d8verland"}}, "url": "https://github.com/dhis2/dhis2-core/commit/90a7702ad744384134296e3d57f7240bc71035c5", "committedDate": "2020-07-06T06:27:49Z", "message": "Adjust PeriodOffsetUtils"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20524b448e6e6c56d837d050f9ab212855acd269", "author": {"user": {"login": "larshelge", "name": "Lars Helge \u00d8verland"}}, "url": "https://github.com/dhis2/dhis2-core/commit/20524b448e6e6c56d837d050f9ab212855acd269", "committedDate": "2020-07-06T06:51:58Z", "message": "Make public constant list immutable"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyODMwNzEz", "url": "https://github.com/dhis2/dhis2-core/pull/5772#pullrequestreview-442830713", "createdAt": "2020-07-06T07:23:38Z", "commit": {"oid": "20524b448e6e6c56d837d050f9ab212855acd269"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2668, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}