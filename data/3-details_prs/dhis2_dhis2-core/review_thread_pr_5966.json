{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwMzIwMjY4", "number": 5966, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxOToyMzoyMlrOEarFfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMToxNDo1NVrOEbhUgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NDA0MzQ4OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-support/dhis-support-db-migration/src/main/java/org/hisp/dhis/db/migration/v35/V2_35_21__Generate_uid_for_sms.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxOToyMzoyMlrOHEP5jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMjoxMDoxMVrOHEqwAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIxNjg0Nw==", "bodyText": "I guess there can be a lot of SMS in a database, and this might be slow or lead to out of mem. We have a PSQL function for generating UIDs now I believe @stian-sandvold ? I would suggest we use that PSQL function instead to make this much faster and less prone to mem issues.", "url": "https://github.com/dhis2/dhis2-core/pull/5966#discussion_r474216847", "createdAt": "2020-08-20T19:23:22Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-support/dhis-support-db-migration/src/main/java/org/hisp/dhis/db/migration/v35/V2_35_21__Generate_uid_for_sms.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package org.hisp.dhis.db.migration.v35;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.flywaydb.core.api.migration.BaseJavaMigration;\n+import org.flywaydb.core.api.migration.Context;\n+import org.hisp.dhis.common.CodeGenerator;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.Statement;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class V2_35_21__Generate_uid_for_sms extends BaseJavaMigration\n+{\n+    private static final Logger log = LoggerFactory.getLogger( V2_35_21__Generate_uid_for_sms.class );\n+\n+    @Override\n+    public void migrate( Context context ) throws Exception\n+    {\n+        List<Long> incomingSmsIds = new ArrayList<>();\n+        List<Long> outboundSmsIds = new ArrayList<>();\n+\n+        try ( Statement statement = context.getConnection().createStatement(); ResultSet resultSetIncomingSms = statement.executeQuery( \"select id from incomingsms\" ) )\n+        {\n+            while ( resultSetIncomingSms.next() )\n+            {\n+                incomingSmsIds.add( resultSetIncomingSms.getLong(\"id\") );\n+            }\n+        }\n+\n+        try ( Statement statement = context.getConnection().createStatement(); ResultSet resultSetOutboundSms = statement.executeQuery( \"select id from outbound_sms\" ) )\n+        {\n+            while ( resultSetOutboundSms.next() )\n+            {\n+                outboundSmsIds.add( resultSetOutboundSms.getLong( \"id\" ) );\n+            }\n+        }\n+\n+        if ( !incomingSmsIds.isEmpty() )\n+        {\n+            for ( long id : incomingSmsIds )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc85fa3c536f3456a25625c6143953a590240f4e"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY1Njc2OQ==", "bodyText": "fixed.", "url": "https://github.com/dhis2/dhis2-core/pull/5966#discussion_r474656769", "createdAt": "2020-08-21T12:10:11Z", "author": {"login": "zubaira"}, "path": "dhis-2/dhis-support/dhis-support-db-migration/src/main/java/org/hisp/dhis/db/migration/v35/V2_35_21__Generate_uid_for_sms.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package org.hisp.dhis.db.migration.v35;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.flywaydb.core.api.migration.BaseJavaMigration;\n+import org.flywaydb.core.api.migration.Context;\n+import org.hisp.dhis.common.CodeGenerator;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.Statement;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class V2_35_21__Generate_uid_for_sms extends BaseJavaMigration\n+{\n+    private static final Logger log = LoggerFactory.getLogger( V2_35_21__Generate_uid_for_sms.class );\n+\n+    @Override\n+    public void migrate( Context context ) throws Exception\n+    {\n+        List<Long> incomingSmsIds = new ArrayList<>();\n+        List<Long> outboundSmsIds = new ArrayList<>();\n+\n+        try ( Statement statement = context.getConnection().createStatement(); ResultSet resultSetIncomingSms = statement.executeQuery( \"select id from incomingsms\" ) )\n+        {\n+            while ( resultSetIncomingSms.next() )\n+            {\n+                incomingSmsIds.add( resultSetIncomingSms.getLong(\"id\") );\n+            }\n+        }\n+\n+        try ( Statement statement = context.getConnection().createStatement(); ResultSet resultSetOutboundSms = statement.executeQuery( \"select id from outbound_sms\" ) )\n+        {\n+            while ( resultSetOutboundSms.next() )\n+            {\n+                outboundSmsIds.add( resultSetOutboundSms.getLong( \"id\" ) );\n+            }\n+        }\n+\n+        if ( !incomingSmsIds.isEmpty() )\n+        {\n+            for ( long id : incomingSmsIds )", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIxNjg0Nw=="}, "originalCommit": {"oid": "bc85fa3c536f3456a25625c6143953a590240f4e"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MjkyOTI4OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-support/dhis-support-db-migration/src/main/resources/org/hisp/dhis/db/migration/2.35/V2_35_20__Add_uid_column_in_sms_table.sql", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMToxNDo1NVrOHFf3QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMToxNToyMlrOHFf4MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyNjk3Nw==", "bodyText": "where uid is null*", "url": "https://github.com/dhis2/dhis2-core/pull/5966#discussion_r475526977", "createdAt": "2020-08-24T11:14:55Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-support/dhis-support-db-migration/src/main/resources/org/hisp/dhis/db/migration/2.35/V2_35_20__Add_uid_column_in_sms_table.sql", "diffHunk": "@@ -0,0 +1,12 @@\n+\n+-- add column uid to incomingsms and outboundsms table\n+alter table incomingsms add column if not exists \"uid\" varchar(255);\n+alter table outbound_sms add column if not exists \"uid\" varchar(255);\n+\n+-- change id column type from integer to long\n+alter table incomingsms alter column id type bigint;\n+alter table outbound_sms alter column id type bigint;\n+\n+-- update uid column with randomly generated uid values\n+update incomingsms set uid = generate_uid();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4239ca2339e8e6acb46e5674d6b8eb3faabbb8bf"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyNzIxNg==", "bodyText": "this way it can be run again without invalidating uids.", "url": "https://github.com/dhis2/dhis2-core/pull/5966#discussion_r475527216", "createdAt": "2020-08-24T11:15:22Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-support/dhis-support-db-migration/src/main/resources/org/hisp/dhis/db/migration/2.35/V2_35_20__Add_uid_column_in_sms_table.sql", "diffHunk": "@@ -0,0 +1,12 @@\n+\n+-- add column uid to incomingsms and outboundsms table\n+alter table incomingsms add column if not exists \"uid\" varchar(255);\n+alter table outbound_sms add column if not exists \"uid\" varchar(255);\n+\n+-- change id column type from integer to long\n+alter table incomingsms alter column id type bigint;\n+alter table outbound_sms alter column id type bigint;\n+\n+-- update uid column with randomly generated uid values\n+update incomingsms set uid = generate_uid();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyNjk3Nw=="}, "originalCommit": {"oid": "4239ca2339e8e6acb46e5674d6b8eb3faabbb8bf"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3934, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}