{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxNDMwMjU1", "number": 6375, "title": "fix: Log auth events for OIDC login failure and success", "bodyText": "OIDC login attempts, both successful and unsuccessful are not logged in the same way as password logins.\nSigned-off-by: Morten Svanaes msvanaes@dhis2.org", "createdAt": "2020-10-12T08:58:51Z", "url": "https://github.com/dhis2/dhis2-core/pull/6375", "merged": true, "mergeCommit": {"oid": "b64cf9cdd514d3f22d3981aefd1a939cf18b2a0f"}, "closed": true, "closedAt": "2020-10-19T09:17:10Z", "author": {"login": "netroms"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdRwGVzgH2gAyNTAxNDMwMjU1OmUxMzZmNmIzOWYyMTQ2YWNjZjllNTI1NDc0ZmQ0OThmNWVmNjY3YjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdUAl1pgFqTUxMTU2NTAyNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e136f6b39f2146accf9e525474fd498f5ef667b6", "author": {"user": {"login": "netroms", "name": null}}, "url": "https://github.com/dhis2/dhis2-core/commit/e136f6b39f2146accf9e525474fd498f5ef667b6", "committedDate": "2020-10-12T08:56:19Z", "message": "fix: Log auth events for OIDC login failure and success\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "829558e4fc43c986bf755d8a6f09b5f42d084a0f", "author": {"user": {"login": "netroms", "name": null}}, "url": "https://github.com/dhis2/dhis2-core/commit/829558e4fc43c986bf755d8a6f09b5f42d084a0f", "committedDate": "2020-10-12T08:58:59Z", "message": "fix: Log auth events for OIDC login failure and success\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2NDM3NTYw", "url": "https://github.com/dhis2/dhis2-core/pull/6375#pullrequestreview-506437560", "createdAt": "2020-10-12T09:13:30Z", "commit": {"oid": "829558e4fc43c986bf755d8a6f09b5f42d084a0f"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwOToxMzozMFrOHf2AjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwOToxNzoyMlrOHf2KQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE1Mjc4MQ==", "bodyText": "Newline", "url": "https://github.com/dhis2/dhis2-core/pull/6375#discussion_r503152781", "createdAt": "2020-10-12T09:13:30Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/security/AuthenticationLoggerListener.java", "diffHunk": "@@ -46,42 +53,75 @@\n {\n     public void onApplicationEvent( AbstractAuthenticationEvent event )\n     {\n+        if ( SessionFixationProtectionEvent.class.isAssignableFrom( event.getClass() ) ||\n+            InteractiveAuthenticationSuccessEvent.class.isAssignableFrom( event.getClass() ) )\n+        {\n+            return;\n+        }\n+\n         if ( log.isWarnEnabled() )\n         {\n-            final StringBuilder builder = new StringBuilder();\n-            builder.append( \"Authentication event \" );\n-            builder.append( ClassUtils.getShortName( event.getClass() ) );\n-            builder.append( \": \" );\n-            builder.append( event.getAuthentication().getName() );\n+            String authName = event.getAuthentication().getName();\n+            String eventClassName = \"Authentication event: \" + ClassUtils.getShortName( event.getClass() );\n \n-            Object details = event.getAuthentication().getDetails();\n+            String exceptionMessage = \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "829558e4fc43c986bf755d8a6f09b5f42d084a0f"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE1Mjg5Mg==", "bodyText": "Newline", "url": "https://github.com/dhis2/dhis2-core/pull/6375#discussion_r503152892", "createdAt": "2020-10-12T09:13:41Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/security/AuthenticationLoggerListener.java", "diffHunk": "@@ -46,42 +53,75 @@\n {\n     public void onApplicationEvent( AbstractAuthenticationEvent event )\n     {\n+        if ( SessionFixationProtectionEvent.class.isAssignableFrom( event.getClass() ) ||\n+            InteractiveAuthenticationSuccessEvent.class.isAssignableFrom( event.getClass() ) )\n+        {\n+            return;\n+        }\n+\n         if ( log.isWarnEnabled() )\n         {\n-            final StringBuilder builder = new StringBuilder();\n-            builder.append( \"Authentication event \" );\n-            builder.append( ClassUtils.getShortName( event.getClass() ) );\n-            builder.append( \": \" );\n-            builder.append( event.getAuthentication().getName() );\n+            String authName = event.getAuthentication().getName();\n+            String eventClassName = \"Authentication event: \" + ClassUtils.getShortName( event.getClass() );\n \n-            Object details = event.getAuthentication().getDetails();\n+            String exceptionMessage = \"\";\n+            if ( event instanceof AbstractAuthenticationFailureEvent )\n+            {\n+                exceptionMessage =\n+                    \"; exception: \" + ((AbstractAuthenticationFailureEvent) event).getException().getMessage();\n+            }\n+\n+            String ipAddress = \"\";\n+            String sessionId = \"\";\n \n+            Object details = event.getAuthentication().getDetails();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "829558e4fc43c986bf755d8a6f09b5f42d084a0f"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE1MzA3Nw==", "bodyText": "Newline", "url": "https://github.com/dhis2/dhis2-core/pull/6375#discussion_r503153077", "createdAt": "2020-10-12T09:14:01Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/security/AuthenticationLoggerListener.java", "diffHunk": "@@ -46,42 +53,75 @@\n {\n     public void onApplicationEvent( AbstractAuthenticationEvent event )\n     {\n+        if ( SessionFixationProtectionEvent.class.isAssignableFrom( event.getClass() ) ||\n+            InteractiveAuthenticationSuccessEvent.class.isAssignableFrom( event.getClass() ) )\n+        {\n+            return;\n+        }\n+\n         if ( log.isWarnEnabled() )\n         {\n-            final StringBuilder builder = new StringBuilder();\n-            builder.append( \"Authentication event \" );\n-            builder.append( ClassUtils.getShortName( event.getClass() ) );\n-            builder.append( \": \" );\n-            builder.append( event.getAuthentication().getName() );\n+            String authName = event.getAuthentication().getName();\n+            String eventClassName = \"Authentication event: \" + ClassUtils.getShortName( event.getClass() );\n \n-            Object details = event.getAuthentication().getDetails();\n+            String exceptionMessage = \"\";\n+            if ( event instanceof AbstractAuthenticationFailureEvent )\n+            {\n+                exceptionMessage =\n+                    \"; exception: \" + ((AbstractAuthenticationFailureEvent) event).getException().getMessage();\n+            }\n+\n+            String ipAddress = \"\";\n+            String sessionId = \"\";\n \n+            Object details = event.getAuthentication().getDetails();\n             if ( details != null &&\n                 ForwardedIpAwareWebAuthenticationDetails.class.isAssignableFrom( details.getClass() ) )\n             {\n                 ForwardedIpAwareWebAuthenticationDetails authDetails = (ForwardedIpAwareWebAuthenticationDetails) details;\n-                String ip = authDetails.getIp();\n-\n-                builder.append( \"; ip: \" );\n-                builder.append( ip );\n+                ipAddress = \"; ip: \" + authDetails.getIp();\n+                sessionId = hashSessionId( authDetails.getSessionId() );\n+            }\n+            else if ( OAuth2LoginAuthenticationToken.class.isAssignableFrom( event.getAuthentication().getClass() ) )\n+            {\n+                OAuth2LoginAuthenticationToken authenticationToken = (OAuth2LoginAuthenticationToken) event\n+                    .getAuthentication();\n \n-                String sessionId = authDetails.getSessionId();\n-                if ( sessionId != null )\n+                DhisOidcUser principal = (DhisOidcUser) authenticationToken.getPrincipal();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "829558e4fc43c986bf755d8a6f09b5f42d084a0f"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE1NTExMg==", "bodyText": "Does it make sense to cache this hasher? or even just use Hashing.sha256().hashString(sessionId, StandardCharsets.UTF_8).toString() direcly?", "url": "https://github.com/dhis2/dhis2-core/pull/6375#discussion_r503155112", "createdAt": "2020-10-12T09:17:06Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/security/AuthenticationLoggerListener.java", "diffHunk": "@@ -46,42 +53,75 @@\n {\n     public void onApplicationEvent( AbstractAuthenticationEvent event )\n     {\n+        if ( SessionFixationProtectionEvent.class.isAssignableFrom( event.getClass() ) ||\n+            InteractiveAuthenticationSuccessEvent.class.isAssignableFrom( event.getClass() ) )\n+        {\n+            return;\n+        }\n+\n         if ( log.isWarnEnabled() )\n         {\n-            final StringBuilder builder = new StringBuilder();\n-            builder.append( \"Authentication event \" );\n-            builder.append( ClassUtils.getShortName( event.getClass() ) );\n-            builder.append( \": \" );\n-            builder.append( event.getAuthentication().getName() );\n+            String authName = event.getAuthentication().getName();\n+            String eventClassName = \"Authentication event: \" + ClassUtils.getShortName( event.getClass() );\n \n-            Object details = event.getAuthentication().getDetails();\n+            String exceptionMessage = \"\";\n+            if ( event instanceof AbstractAuthenticationFailureEvent )\n+            {\n+                exceptionMessage =\n+                    \"; exception: \" + ((AbstractAuthenticationFailureEvent) event).getException().getMessage();\n+            }\n+\n+            String ipAddress = \"\";\n+            String sessionId = \"\";\n \n+            Object details = event.getAuthentication().getDetails();\n             if ( details != null &&\n                 ForwardedIpAwareWebAuthenticationDetails.class.isAssignableFrom( details.getClass() ) )\n             {\n                 ForwardedIpAwareWebAuthenticationDetails authDetails = (ForwardedIpAwareWebAuthenticationDetails) details;\n-                String ip = authDetails.getIp();\n-\n-                builder.append( \"; ip: \" );\n-                builder.append( ip );\n+                ipAddress = \"; ip: \" + authDetails.getIp();\n+                sessionId = hashSessionId( authDetails.getSessionId() );\n+            }\n+            else if ( OAuth2LoginAuthenticationToken.class.isAssignableFrom( event.getAuthentication().getClass() ) )\n+            {\n+                OAuth2LoginAuthenticationToken authenticationToken = (OAuth2LoginAuthenticationToken) event\n+                    .getAuthentication();\n \n-                String sessionId = authDetails.getSessionId();\n-                if ( sessionId != null )\n+                DhisOidcUser principal = (DhisOidcUser) authenticationToken.getPrincipal();\n+                if ( principal != null )\n                 {\n-                    HashCode hash = Hashing.sha256().newHasher().putString( sessionId, Charsets.UTF_8 ).hash();\n-                    builder.append( \" sessionId: \" );\n-                    builder.append( hash.toString() );\n+                    UserCredentials userCredentials = principal.getUserCredentials();\n+                    authName = userCredentials.getUsername();\n                 }\n \n+                WebAuthenticationDetails oauthDetails = (WebAuthenticationDetails) authenticationToken.getDetails();\n+                ipAddress = \"; ip: \" + oauthDetails.getRemoteAddress();\n+                sessionId = hashSessionId( oauthDetails.getSessionId() );\n             }\n-\n-            if ( event instanceof AbstractAuthenticationFailureEvent )\n+            else if ( OAuth2AuthenticationToken.class.isAssignableFrom( event.getSource().getClass() ) )\n             {\n-                builder.append( \"; exception: \" );\n-                builder.append( ((AbstractAuthenticationFailureEvent) event).getException().getMessage() );\n+                OAuth2AuthenticationToken authenticationToken = (OAuth2AuthenticationToken) event.getSource();\n+                DhisOidcUser principal = (DhisOidcUser) authenticationToken.getPrincipal();\n+\n+                if ( principal != null )\n+                {\n+                    UserCredentials userCredentials = principal.getUserCredentials();\n+                    authName = userCredentials.getUsername();\n+                }\n             }\n \n-            log.warn( builder.toString() );\n+            log.warn( eventClassName + \"; username: \" + authName + ipAddress + sessionId + exceptionMessage );\n         }\n     }\n+\n+    private String hashSessionId( String sessionId )\n+    {\n+        if ( sessionId == null )\n+        {\n+            return \"\";\n+        }\n+\n+        HashCode hash = Hashing.sha256().newHasher().putString( sessionId, Charsets.UTF_8 ).hash();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "829558e4fc43c986bf755d8a6f09b5f42d084a0f"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE1NTI2Nw==", "bodyText": "Newline", "url": "https://github.com/dhis2/dhis2-core/pull/6375#discussion_r503155267", "createdAt": "2020-10-12T09:17:22Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/security/config/AuthenticationListener.java", "diffHunk": "@@ -66,33 +68,67 @@\n     public void handleAuthenticationFailure( AbstractAuthenticationFailureEvent event )\n     {\n         Authentication auth = event.getAuthentication();\n+        String username = event.getAuthentication().getName();\n \n         if ( TwoFactorWebAuthenticationDetails.class.isAssignableFrom( auth.getDetails().getClass() ) )\n         {\n             TwoFactorWebAuthenticationDetails authDetails =\n-                ( TwoFactorWebAuthenticationDetails ) auth.getDetails();\n+                (TwoFactorWebAuthenticationDetails) auth.getDetails();\n \n             log.info( String.format( \"Login attempt failed for remote IP: %s\", authDetails.getIp() ) );\n         }\n \n-        securityService.registerFailedLogin( auth.getName() );\n+        if ( OAuth2LoginAuthenticationToken.class.isAssignableFrom( auth.getClass() ) )\n+        {\n+            OAuth2LoginAuthenticationToken authenticationToken = (OAuth2LoginAuthenticationToken) auth;\n+            DhisOidcUser principal = (DhisOidcUser) authenticationToken.getPrincipal();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "829558e4fc43c986bf755d8a6f09b5f42d084a0f"}, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "878cd26676ee63fe305e2b65ac45f5a598caaead", "author": {"user": {"login": "netroms", "name": null}}, "url": "https://github.com/dhis2/dhis2-core/commit/878cd26676ee63fe305e2b65ac45f5a598caaead", "committedDate": "2020-10-12T11:27:03Z", "message": "* Review fix\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16d51d4b613fa0604343303fd0f60f83593f34e9", "author": {"user": {"login": "netroms", "name": null}}, "url": "https://github.com/dhis2/dhis2-core/commit/16d51d4b613fa0604343303fd0f60f83593f34e9", "committedDate": "2020-10-12T11:54:19Z", "message": "* Review fix\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c353df0cde32c0dcf2d61bd209f2acfe3b6f9ccc", "author": {"user": {"login": "netroms", "name": null}}, "url": "https://github.com/dhis2/dhis2-core/commit/c353df0cde32c0dcf2d61bd209f2acfe3b6f9ccc", "committedDate": "2020-10-13T07:53:46Z", "message": "Merge branch 'master' of github.com:dhis2/dhis2-core into DHIS2-9760"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6f949f4b0d07bce154406b89f889a22a326e703", "author": {"user": {"login": "netroms", "name": null}}, "url": "https://github.com/dhis2/dhis2-core/commit/e6f949f4b0d07bce154406b89f889a22a326e703", "committedDate": "2020-10-13T11:37:42Z", "message": "Merge branch 'master' of github.com:dhis2/dhis2-core into DHIS2-9760"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55864fb60738398caa275e2334090a97365a6937", "author": {"user": {"login": "netroms", "name": null}}, "url": "https://github.com/dhis2/dhis2-core/commit/55864fb60738398caa275e2334090a97365a6937", "committedDate": "2020-10-13T12:47:36Z", "message": "* Add missing bean in test config\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3Njg3NjIw", "url": "https://github.com/dhis2/dhis2-core/pull/6375#pullrequestreview-507687620", "createdAt": "2020-10-13T17:47:46Z", "commit": {"oid": "55864fb60738398caa275e2334090a97365a6937"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExNTY1MDI1", "url": "https://github.com/dhis2/dhis2-core/pull/6375#pullrequestreview-511565025", "createdAt": "2020-10-19T09:17:03Z", "commit": {"oid": "55864fb60738398caa275e2334090a97365a6937"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2375, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}