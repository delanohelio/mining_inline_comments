{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1MDA1NDc3", "number": 5862, "reviewThreads": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDozNjo0OFrOFDRG2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMDo1NToyMVrOFIHVpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTcwMzMxOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/sharing/SharingService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDozNjo0OFrOIC1Jyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDozNjo0OFrOIC1Jyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgzODkyMg==", "bodyText": "Add some simple javadocs explaining the purpose of this service", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r539838922", "createdAt": "2020-12-10T04:36:48Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/sharing/SharingService.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.hisp.dhis.sharing;\n+\n+/*\n+ *\n+ *  * Copyright (c) 2004-2020, University of Oslo\n+ *  * All rights reserved.\n+ *  *\n+ *  * Redistribution and use in source and binary forms, with or without\n+ *  * modification, are permitted provided that the following conditions are met:\n+ *  * Redistributions of source code must retain the above copyright notice, this\n+ *  * list of conditions and the following disclaimer.\n+ *  *\n+ *  * Redistributions in binary form must reproduce the above copyright notice,\n+ *  * this list of conditions and the following disclaimer in the documentation\n+ *  * and/or other materials provided with the distribution.\n+ *  * Neither the name of the HISP project nor the names of its contributors may\n+ *  * be used to endorse or promote products derived from this software without\n+ *  * specific prior written permission.\n+ *  *\n+ *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ *  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ *  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ *  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ *  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ *  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ *  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ *  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ *  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ *  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\n+ */\n+\n+import org.hisp.dhis.common.IdentifiableObject;\n+import org.hisp.dhis.feedback.ObjectReport;\n+import org.hisp.dhis.user.sharing.Sharing;\n+\n+import javax.validation.constraints.NotNull;\n+\n+public interface SharingService", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba10fa5357236fb80525411b013c1b95ae8b0867"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTcwMzkxOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/CurrentUserGroupInfo.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDozNzowMVrOIC1KEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDozNzowMVrOIC1KEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgzODk5NQ==", "bodyText": "extra newline", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r539838995", "createdAt": "2020-12-10T04:37:01Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/CurrentUserGroupInfo.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package org.hisp.dhis.user;\n+\n+/*\n+ *\n+ *  * Copyright (c) 2004-2020, University of Oslo\n+ *  * All rights reserved.\n+ *  *\n+ *  * Redistribution and use in source and binary forms, with or without\n+ *  * modification, are permitted provided that the following conditions are met:\n+ *  * Redistributions of source code must retain the above copyright notice, this\n+ *  * list of conditions and the following disclaimer.\n+ *  *\n+ *  * Redistributions in binary form must reproduce the above copyright notice,\n+ *  * this list of conditions and the following disclaimer in the documentation\n+ *  * and/or other materials provided with the distribution.\n+ *  * Neither the name of the HISP project nor the names of its contributors may\n+ *  * be used to endorse or promote products derived from this software without\n+ *  * specific prior written permission.\n+ *  *\n+ *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ *  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ *  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ *  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ *  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ *  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ *  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ *  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ *  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ *  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\n+ */\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+import lombok.Setter;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * Contains minimal User info used for ACL check in {@link org.hisp.dhis.common.IdentifiableObjectStore}\n+ */\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba10fa5357236fb80525411b013c1b95ae8b0867"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTcxOTIxOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/UserGroupStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDo0MzoxMVrOIC1R5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDo0MzoxMVrOIC1R5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0MDk5Nw==", "bodyText": "Add some simple javadocs", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r539840997", "createdAt": "2020-12-10T04:43:11Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/UserGroupStore.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package org.hisp.dhis.user;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.common.IdentifiableObjectStore;\n+\n+public interface UserGroupStore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba10fa5357236fb80525411b013c1b95ae8b0867"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTcyNjE4OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/Sharing.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDo0NjoxOVrOIC1Vsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwMzozMzoxNFrOIEZ7Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0MTk3MQ==", "bodyText": "Should also be embedded object to mark it properly in the schema", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r539841971", "createdAt": "2020-12-10T04:46:19Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/Sharing.java", "diffHunk": "@@ -0,0 +1,148 @@\n+package org.hisp.dhis.user.sharing;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import org.hisp.dhis.common.DxfNamespaces;\n+import org.hisp.dhis.user.User;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+@Builder\n+@Data\n+@AllArgsConstructor\n+@NoArgsConstructor\n+@JacksonXmlRootElement( localName = \"sharing\", namespace = DxfNamespaces.DXF_2_0 )\n+public class Sharing\n+    implements Serializable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba10fa5357236fb80525411b013c1b95ae8b0867"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ4OTkzMQ==", "bodyText": "added", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r541489931", "createdAt": "2020-12-12T03:33:14Z", "author": {"login": "vietnguyen"}, "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/Sharing.java", "diffHunk": "@@ -0,0 +1,148 @@\n+package org.hisp.dhis.user.sharing;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import org.hisp.dhis.common.DxfNamespaces;\n+import org.hisp.dhis.user.User;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+@Builder\n+@Data\n+@AllArgsConstructor\n+@NoArgsConstructor\n+@JacksonXmlRootElement( localName = \"sharing\", namespace = DxfNamespaces.DXF_2_0 )\n+public class Sharing\n+    implements Serializable", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0MTk3MQ=="}, "originalCommit": {"oid": "ba10fa5357236fb80525411b013c1b95ae8b0867"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTcyNjM2OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/Sharing.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDo0NjozMFrOIC1V2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwMzozMzowMlrOIEZ62A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0MjAwOQ==", "bodyText": "license", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r539842009", "createdAt": "2020-12-10T04:46:30Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/Sharing.java", "diffHunk": "@@ -0,0 +1,148 @@\n+package org.hisp.dhis.user.sharing;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba10fa5357236fb80525411b013c1b95ae8b0867"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ4OTg4MA==", "bodyText": "added", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r541489880", "createdAt": "2020-12-12T03:33:02Z", "author": {"login": "vietnguyen"}, "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/Sharing.java", "diffHunk": "@@ -0,0 +1,148 @@\n+package org.hisp.dhis.user.sharing;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0MjAwOQ=="}, "originalCommit": {"oid": "ba10fa5357236fb80525411b013c1b95ae8b0867"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTczOTkwOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/Sharing.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDo1MjowOVrOIC1c5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDo1MjowOVrOIC1c5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0MzgxNQ==", "bodyText": "default is already false?", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r539843815", "createdAt": "2020-12-10T04:52:09Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/Sharing.java", "diffHunk": "@@ -0,0 +1,148 @@\n+package org.hisp.dhis.user.sharing;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import org.hisp.dhis.common.DxfNamespaces;\n+import org.hisp.dhis.user.User;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+@Builder\n+@Data\n+@AllArgsConstructor\n+@NoArgsConstructor\n+@JacksonXmlRootElement( localName = \"sharing\", namespace = DxfNamespaces.DXF_2_0 )\n+public class Sharing\n+    implements Serializable\n+{\n+    private static final long serialVersionUID = 6977793211734844477L;\n+\n+    public static final String DEFAULT = \"--------\";\n+\n+    @JsonProperty\n+    private String owner = null;\n+\n+    @JsonProperty(\"public\")\n+    private String publicAccess = DEFAULT;\n+\n+    @JsonProperty\n+    private boolean external = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba10fa5357236fb80525411b013c1b95ae8b0867"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTc0MDQ3OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/Sharing.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDo1MjoxOFrOIC1dLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDo1MjoxOFrOIC1dLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0Mzg4NA==", "bodyText": "default is already null?", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r539843884", "createdAt": "2020-12-10T04:52:18Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/Sharing.java", "diffHunk": "@@ -0,0 +1,148 @@\n+package org.hisp.dhis.user.sharing;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import org.hisp.dhis.common.DxfNamespaces;\n+import org.hisp.dhis.user.User;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+@Builder\n+@Data\n+@AllArgsConstructor\n+@NoArgsConstructor\n+@JacksonXmlRootElement( localName = \"sharing\", namespace = DxfNamespaces.DXF_2_0 )\n+public class Sharing\n+    implements Serializable\n+{\n+    private static final long serialVersionUID = 6977793211734844477L;\n+\n+    public static final String DEFAULT = \"--------\";\n+\n+    @JsonProperty\n+    private String owner = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba10fa5357236fb80525411b013c1b95ae8b0867"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTc0NDYwOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/Sharing.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDo1NDoyOVrOIC1fiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDo1NDoyOVrOIC1fiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0NDQ4OA==", "bodyText": "code style, { }\u00a0", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r539844488", "createdAt": "2020-12-10T04:54:29Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/Sharing.java", "diffHunk": "@@ -0,0 +1,148 @@\n+package org.hisp.dhis.user.sharing;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import org.hisp.dhis.common.DxfNamespaces;\n+import org.hisp.dhis.user.User;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+@Builder\n+@Data\n+@AllArgsConstructor\n+@NoArgsConstructor\n+@JacksonXmlRootElement( localName = \"sharing\", namespace = DxfNamespaces.DXF_2_0 )\n+public class Sharing\n+    implements Serializable\n+{\n+    private static final long serialVersionUID = 6977793211734844477L;\n+\n+    public static final String DEFAULT = \"--------\";\n+\n+    @JsonProperty\n+    private String owner = null;\n+\n+    @JsonProperty(\"public\")\n+    private String publicAccess = DEFAULT;\n+\n+    @JsonProperty\n+    private boolean external = false;\n+\n+    @JsonProperty\n+    private Map<String, UserAccess> users = new HashMap<>();\n+\n+    @JsonProperty\n+    private Map<String, UserGroupAccess> userGroups = new HashMap<>();\n+\n+    public Sharing copy()\n+    {\n+        return builder()\n+            .external( this.external )\n+            .publicAccess( this.publicAccess )\n+            .owner( this.owner )\n+            .users( new HashMap<>( users ) )\n+            .userGroups( new HashMap<>( userGroups ) ).build();\n+    }\n+\n+    public void setOwner( User user )\n+    {\n+        this.owner =  user != null ? user.getUid() : null;\n+    }\n+\n+    public void setOwner( String userId )\n+    {\n+        this.owner = userId;\n+    }\n+\n+    @JsonIgnore\n+    public User getUserOwner()\n+    {\n+        User user = new User();\n+        user.setUid( this.owner );\n+        return user;\n+    }\n+\n+    public void setUserAccesses( Set<UserAccess> userAccesses )\n+    {\n+        if ( this.users != null ) this.users.clear();\n+        else this.users = new HashMap<>();\n+\n+        userAccesses.forEach( ua -> this.addUserAccess( ua ) );\n+    }\n+\n+    public void setDtoUserAccesses( Set<org.hisp.dhis.user.UserAccess> userAccesses )\n+    {\n+        if ( this.users != null ) this.users.clear();\n+        else this.users = new HashMap<>();\n+\n+        if ( userAccesses != null && !userAccesses.isEmpty() )\n+        {\n+            userAccesses.forEach( ua ->  this.addUserAccess( new UserAccess( ua ) ) );\n+        }\n+    }\n+\n+    public void setDtoUserGroupAccesses( Set<org.hisp.dhis.user.UserGroupAccess> userGroupAccesses )\n+    {\n+        if ( this.userGroups != null ) this.userGroups.clear();\n+        else this.userGroups = new HashMap<>();\n+\n+        if ( userGroupAccesses != null && !userGroupAccesses.isEmpty() )\n+        {\n+            userGroupAccesses.forEach( uga ->  this.addUserGroupAccess( new UserGroupAccess( uga ) ) );\n+        }\n+    }\n+\n+    public void setUserGroupAccess( Set<UserGroupAccess> userGroupAccesses )\n+    {\n+        if ( this.userGroups != null ) this.userGroups.clear();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba10fa5357236fb80525411b013c1b95ae8b0867"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTc0NjczOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/UserAccess.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDo1NToxM1rOIC1gkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDo1NToxM1rOIC1gkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0NDc1NQ==", "bodyText": "should probably convert to lombok?", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r539844755", "createdAt": "2020-12-10T04:55:13Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/UserAccess.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package org.hisp.dhis.user.sharing;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n+import com.google.common.base.MoreObjects;\n+import org.hisp.dhis.common.DxfNamespaces;\n+import org.hisp.dhis.user.User;\n+\n+import java.io.Serializable;\n+import java.util.Objects;\n+\n+/**\n+ * @author Morten Olav Hansen <mortenoh@gmail.com>\n+ */\n+@JacksonXmlRootElement( localName = \"userAccess\", namespace = DxfNamespaces.DXF_2_0 )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba10fa5357236fb80525411b013c1b95ae8b0867"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTc0NzgyOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/UserGroupAccess.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDo1NTozOFrOIC1hHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDo1NTozOFrOIC1hHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0NDg5NQ==", "bodyText": "should probably convert to lombok?", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r539844895", "createdAt": "2020-12-10T04:55:38Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/UserGroupAccess.java", "diffHunk": "@@ -0,0 +1,145 @@\n+package org.hisp.dhis.user.sharing;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n+import com.google.common.base.MoreObjects;\n+import org.hisp.dhis.common.DxfNamespaces;\n+import org.hisp.dhis.user.UserGroup;\n+\n+import java.io.Serializable;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * @author Morten Olav Hansen <mortenoh@gmail.com>\n+ */\n+@JacksonXmlRootElement( localName = \"userGroupAccess\", namespace = DxfNamespaces.DXF_2_0 )\n+public class UserGroupAccess", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba10fa5357236fb80525411b013c1b95ae8b0867"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTc0ODc2OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/util/SharingUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDo1NjowN1rOIC1hrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDo1NjowN1rOIC1hrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0NTAzNg==", "bodyText": "double *", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r539845036", "createdAt": "2020-12-10T04:56:07Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/util/SharingUtils.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ *\n+ *  * Copyright (c) 2004-2020, University of Oslo", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba10fa5357236fb80525411b013c1b95ae8b0867"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTc0OTEyOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/util/SharingUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDo1NjoxNlrOIC1h3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDo1NjoxNlrOIC1h3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0NTA4NA==", "bodyText": "package on top", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r539845084", "createdAt": "2020-12-10T04:56:16Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/util/SharingUtils.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ *\n+ *  * Copyright (c) 2004-2020, University of Oslo\n+ *  * All rights reserved.\n+ *  *\n+ *  * Redistribution and use in source and binary forms, with or without\n+ *  * modification, are permitted provided that the following conditions are met:\n+ *  * Redistributions of source code must retain the above copyright notice, this\n+ *  * list of conditions and the following disclaimer.\n+ *  *\n+ *  * Redistributions in binary form must reproduce the above copyright notice,\n+ *  * this list of conditions and the following disclaimer in the documentation\n+ *  * and/or other materials provided with the distribution.\n+ *  * Neither the name of the HISP project nor the names of its contributors may\n+ *  * be used to endorse or promote products derived from this software without\n+ *  * specific prior written permission.\n+ *  *\n+ *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ *  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ *  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ *  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ *  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ *  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ *  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ *  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ *  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ *  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\n+ */\n+\n+package org.hisp.dhis.util;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba10fa5357236fb80525411b013c1b95ae8b0867"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTc2NTI0OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-acl/src/main/java/org/hisp/dhis/security/acl/DefaultAclService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNTowMjo0OFrOIC1qRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNTowMjo0OFrOIC1qRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0NzIzOA==", "bodyText": "should use resetUserAccesses?", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r539847238", "createdAt": "2020-12-10T05:02:48Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-acl/src/main/java/org/hisp/dhis/security/acl/DefaultAclService.java", "diffHunk": "@@ -427,24 +430,26 @@ public boolean canManage( User user, IdentifiableObject object )\n         }\n \n         BaseIdentifiableObject baseIdentifiableObject = (BaseIdentifiableObject) object;\n-        baseIdentifiableObject.setPublicAccess( AccessStringHelper.DEFAULT );\n-        baseIdentifiableObject.setExternalAccess( false );\n+//        baseIdentifiableObject.setPublicAccess( AccessStringHelper.DEFAULT );\n+        baseIdentifiableObject.getSharing().setPublicAccess( AccessStringHelper.DEFAULT );\n+//        baseIdentifiableObject.setExternalAccess( false );\n+        baseIdentifiableObject.getSharing().setExternal( false );\n \n-        if ( object.getUser() == null )\n+        if ( object.getSharing().getOwner() == null )\n         {\n-            baseIdentifiableObject.setUser( user );\n+            baseIdentifiableObject.getSharing().setOwner( user );\n         }\n \n         if ( canMakePublic( user, object.getClass() ) )\n         {\n             if ( defaultPublic( object.getClass() ) )\n             {\n-                baseIdentifiableObject.setPublicAccess( AccessStringHelper.READ_WRITE );\n+                baseIdentifiableObject.getSharing().setPublicAccess( AccessStringHelper.READ_WRITE );\n             }\n         }\n \n-        object.getUserAccesses().clear();\n-        object.getUserGroupAccesses().clear();\n+        object.getSharing().getUsers().clear();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba10fa5357236fb80525411b013c1b95ae8b0867"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTc2NTM5OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-acl/src/main/java/org/hisp/dhis/security/acl/DefaultAclService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNTowMjo1N1rOIC1qYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNTowMjo1N1rOIC1qYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0NzI2NA==", "bodyText": "Should use resetUserGroupAccesses?", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r539847264", "createdAt": "2020-12-10T05:02:57Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-acl/src/main/java/org/hisp/dhis/security/acl/DefaultAclService.java", "diffHunk": "@@ -427,24 +430,26 @@ public boolean canManage( User user, IdentifiableObject object )\n         }\n \n         BaseIdentifiableObject baseIdentifiableObject = (BaseIdentifiableObject) object;\n-        baseIdentifiableObject.setPublicAccess( AccessStringHelper.DEFAULT );\n-        baseIdentifiableObject.setExternalAccess( false );\n+//        baseIdentifiableObject.setPublicAccess( AccessStringHelper.DEFAULT );\n+        baseIdentifiableObject.getSharing().setPublicAccess( AccessStringHelper.DEFAULT );\n+//        baseIdentifiableObject.setExternalAccess( false );\n+        baseIdentifiableObject.getSharing().setExternal( false );\n \n-        if ( object.getUser() == null )\n+        if ( object.getSharing().getOwner() == null )\n         {\n-            baseIdentifiableObject.setUser( user );\n+            baseIdentifiableObject.getSharing().setOwner( user );\n         }\n \n         if ( canMakePublic( user, object.getClass() ) )\n         {\n             if ( defaultPublic( object.getClass() ) )\n             {\n-                baseIdentifiableObject.setPublicAccess( AccessStringHelper.READ_WRITE );\n+                baseIdentifiableObject.getSharing().setPublicAccess( AccessStringHelper.READ_WRITE );\n             }\n         }\n \n-        object.getUserAccesses().clear();\n-        object.getUserGroupAccesses().clear();\n+        object.getSharing().getUsers().clear();\n+        object.getSharing().getUserGroups().clear();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba10fa5357236fb80525411b013c1b95ae8b0867"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTc2ODIxOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-acl/src/main/java/org/hisp/dhis/security/acl/DefaultAclService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNTowNDoxNFrOIC1r8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNTowNDoxNFrOIC1r8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0NzY2NA==", "bodyText": "Would it make sense to move this validation logic to Sharing? sharing.validate() could return a list of ErrorReport", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r539847664", "createdAt": "2020-12-10T05:04:14Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-acl/src/main/java/org/hisp/dhis/security/acl/DefaultAclService.java", "diffHunk": "@@ -474,7 +478,7 @@ public boolean canManage( User user, IdentifiableObject object )\n             return errorReports;\n         }\n \n-        if ( !AccessStringHelper.isValid( object.getPublicAccess() ) )\n+        if ( !AccessStringHelper.isValid( object.getSharing().getPublicAccess() ) )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba10fa5357236fb80525411b013c1b95ae8b0867"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTgwODI3OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/sharing/DefaultSharingService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNToyMToyNlrOIC2BVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNToyMToyNlrOIC2BVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg1MzE0Mw==", "bodyText": "double *", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r539853143", "createdAt": "2020-12-10T05:21:26Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/sharing/DefaultSharingService.java", "diffHunk": "@@ -0,0 +1,280 @@\n+package org.hisp.dhis.sharing;\n+\n+/*\n+ *\n+ *  * Copyright (c) 2004-2020, University of Oslo", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba10fa5357236fb80525411b013c1b95ae8b0867"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTg0OTcyOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/user/UserGroupPopulator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNTozODowMFrOIC2Xhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwMzozNzozNFrOIEZ9lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg1ODgyMg==", "bodyText": "license", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r539858822", "createdAt": "2020-12-10T05:38:00Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/user/UserGroupPopulator.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package org.hisp.dhis.user;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba10fa5357236fb80525411b013c1b95ae8b0867"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ5MDU4Mw==", "bodyText": "this class is deleted", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r541490583", "createdAt": "2020-12-12T03:37:34Z", "author": {"login": "vietnguyen"}, "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/user/UserGroupPopulator.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package org.hisp.dhis.user;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg1ODgyMg=="}, "originalCommit": {"oid": "ba10fa5357236fb80525411b013c1b95ae8b0867"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTg1MTIxOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/user/UserGroupPopulator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNTozODo0MlrOIC2YVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwMzoyOToxNFrOIEZ4kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg1OTAzMQ==", "bodyText": "Is this class needed? seems the only function is commented out", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r539859031", "createdAt": "2020-12-10T05:38:42Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/user/UserGroupPopulator.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package org.hisp.dhis.user;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.hisp.dhis.common.IdentifiableObjectStore;\n+import org.hisp.dhis.security.acl.AclService;\n+import org.hisp.dhis.system.startup.TransactionContextStartupRoutine;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.List;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+@Slf4j\n+public class UserGroupPopulator", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba10fa5357236fb80525411b013c1b95ae8b0867"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ4OTI5Nw==", "bodyText": "removed", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r541489297", "createdAt": "2020-12-12T03:29:14Z", "author": {"login": "vietnguyen"}, "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/user/UserGroupPopulator.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package org.hisp.dhis.user;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.hisp.dhis.common.IdentifiableObjectStore;\n+import org.hisp.dhis.security.acl.AclService;\n+import org.hisp.dhis.system.startup.TransactionContextStartupRoutine;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.List;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+@Slf4j\n+public class UserGroupPopulator", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg1OTAzMQ=="}, "originalCommit": {"oid": "ba10fa5357236fb80525411b013c1b95ae8b0867"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTg1MTY3OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/user/hibernate/HibernateUserGroupStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNTozODo1OFrOIC2YoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNTozODo1OFrOIC2YoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg1OTEwNQ==", "bodyText": "double * and extra newline in top", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r539859105", "createdAt": "2020-12-10T05:38:58Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/user/hibernate/HibernateUserGroupStore.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package org.hisp.dhis.user.hibernate;\n+\n+/*\n+ *\n+ *  * Copyright (c) 2004-2020, University of Oslo", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba10fa5357236fb80525411b013c1b95ae8b0867"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNTk3NzgxOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/common/BaseIdentifiableObject.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNjozODowNFrOIJNv8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNjozODowNFrOIJNv8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzMzM2Mw==", "bodyText": "newline", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r546533363", "createdAt": "2020-12-21T06:38:04Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/common/BaseIdentifiableObject.java", "diffHunk": "@@ -449,52 +463,58 @@ public void setUser( User user )\n     @PropertyRange( min = 8, max = 8 )\n     public String getPublicAccess()\n     {\n-        return publicAccess;\n+        return getSharing().getPublicAccess();\n     }\n \n     public void setPublicAccess( String publicAccess )\n     {\n-        this.publicAccess = publicAccess;\n+        getSharing().setPublicAccess( publicAccess );\n     }\n \n     @Override\n     @JsonProperty\n     @JacksonXmlProperty( namespace = DxfNamespaces.DXF_2_0 )\n     public boolean getExternalAccess()\n     {\n-        return externalAccess;\n+        if ( sharing == null )\n+        {\n+            sharing = new Sharing();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24cd20ec504ce0a7f86d2acbd33df5a8bd53ddf4"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNTk4MDExOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/sharing/SharingService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNjozOToxNFrOIJNxOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNjozOToxNFrOIJNxOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzMzY4OQ==", "bodyText": "javadocs", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r546533689", "createdAt": "2020-12-21T06:39:14Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/sharing/SharingService.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package org.hisp.dhis.sharing;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.common.IdentifiableObject;\n+import org.hisp.dhis.feedback.ObjectReport;\n+import org.hisp.dhis.user.sharing.Sharing;\n+\n+/**\n+ * Contains functions for managing {@link Sharing}\n+ */\n+public interface SharingService\n+{\n+    <T extends IdentifiableObject> ObjectReport saveSharing( Class<T> entityClass, T entity, Sharing sharing );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24cd20ec504ce0a7f86d2acbd33df5a8bd53ddf4"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNTk4MjQzOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/Sharing.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNjo0MDozMlrOIJNymA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNjo0MDozMlrOIJNymA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzNDA0MA==", "bodyText": "code style", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r546534040", "createdAt": "2020-12-21T06:40:32Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/Sharing.java", "diffHunk": "@@ -0,0 +1,195 @@\n+package org.hisp.dhis.user.sharing;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import org.apache.commons.collections.MapUtils;\n+import org.hisp.dhis.common.DxfNamespaces;\n+import org.hisp.dhis.common.EmbeddedObject;\n+import org.hisp.dhis.user.User;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+@Builder\n+@Data\n+@AllArgsConstructor\n+@NoArgsConstructor\n+@JacksonXmlRootElement( localName = \"sharing\", namespace = DxfNamespaces.DXF_2_0 )\n+public class Sharing\n+    implements Serializable, EmbeddedObject\n+{\n+    private static final long serialVersionUID = 6977793211734844477L;\n+\n+    /**\n+     * Uid of the User who owns the object\n+     */\n+    @JsonProperty\n+    private String owner;\n+\n+    @JsonProperty(\"public\")\n+    private String publicAccess = null;\n+\n+    @JsonProperty\n+    private boolean external;\n+\n+    /**\n+     * Map of UserAccess. Key is User uid\n+     */\n+    @JsonProperty\n+    private Map<String, UserAccess> users = new HashMap<>();\n+\n+    /**\n+     * Map of UserGroupAccess. Key is UserGroup uid\n+     */\n+    @JsonProperty\n+    private Map<String, UserGroupAccess> userGroups = new HashMap<>();\n+\n+    public void setOwner( User user )\n+    {\n+        this.owner =  user != null ? user.getUid() : null;\n+    }\n+\n+    public void setOwner( String userId )\n+    {\n+        this.owner = userId;\n+    }\n+\n+    @JsonIgnore\n+    public User getUserOwner()\n+    {\n+        User user = new User();\n+        user.setUid( this.owner );\n+        return user;\n+    }\n+\n+    public void setUserAccesses( Set<UserAccess> userAccesses )\n+    {\n+        if ( this.users != null ) this.users.clear();\n+        else this.users = new HashMap<>();\n+\n+        userAccesses.forEach( ua -> this.addUserAccess( ua ) );\n+    }\n+\n+    public void setDtoUserAccesses( Set<org.hisp.dhis.user.UserAccess> userAccesses )\n+    {\n+        if ( this.users != null ) this.users.clear();\n+        else this.users = new HashMap<>();\n+\n+        if ( userAccesses != null && !userAccesses.isEmpty() )\n+        {\n+            userAccesses.forEach( ua ->  this.addUserAccess( new UserAccess( ua ) ) );\n+        }\n+    }\n+\n+    public void setDtoUserGroupAccesses( Set<org.hisp.dhis.user.UserGroupAccess> userGroupAccesses )\n+    {\n+        if ( this.userGroups != null )\n+        {\n+            this.userGroups.clear();\n+        }\n+\n+        else this.userGroups = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24cd20ec504ce0a7f86d2acbd33df5a8bd53ddf4"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNTk4MjY3OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/Sharing.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNjo0MDo0MlrOIJNyuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNjo0MDo0MlrOIJNyuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzNDA3Mw==", "bodyText": "codestyle on both lines, {}", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r546534073", "createdAt": "2020-12-21T06:40:42Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/Sharing.java", "diffHunk": "@@ -0,0 +1,195 @@\n+package org.hisp.dhis.user.sharing;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import org.apache.commons.collections.MapUtils;\n+import org.hisp.dhis.common.DxfNamespaces;\n+import org.hisp.dhis.common.EmbeddedObject;\n+import org.hisp.dhis.user.User;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+@Builder\n+@Data\n+@AllArgsConstructor\n+@NoArgsConstructor\n+@JacksonXmlRootElement( localName = \"sharing\", namespace = DxfNamespaces.DXF_2_0 )\n+public class Sharing\n+    implements Serializable, EmbeddedObject\n+{\n+    private static final long serialVersionUID = 6977793211734844477L;\n+\n+    /**\n+     * Uid of the User who owns the object\n+     */\n+    @JsonProperty\n+    private String owner;\n+\n+    @JsonProperty(\"public\")\n+    private String publicAccess = null;\n+\n+    @JsonProperty\n+    private boolean external;\n+\n+    /**\n+     * Map of UserAccess. Key is User uid\n+     */\n+    @JsonProperty\n+    private Map<String, UserAccess> users = new HashMap<>();\n+\n+    /**\n+     * Map of UserGroupAccess. Key is UserGroup uid\n+     */\n+    @JsonProperty\n+    private Map<String, UserGroupAccess> userGroups = new HashMap<>();\n+\n+    public void setOwner( User user )\n+    {\n+        this.owner =  user != null ? user.getUid() : null;\n+    }\n+\n+    public void setOwner( String userId )\n+    {\n+        this.owner = userId;\n+    }\n+\n+    @JsonIgnore\n+    public User getUserOwner()\n+    {\n+        User user = new User();\n+        user.setUid( this.owner );\n+        return user;\n+    }\n+\n+    public void setUserAccesses( Set<UserAccess> userAccesses )\n+    {\n+        if ( this.users != null ) this.users.clear();\n+        else this.users = new HashMap<>();\n+\n+        userAccesses.forEach( ua -> this.addUserAccess( ua ) );\n+    }\n+\n+    public void setDtoUserAccesses( Set<org.hisp.dhis.user.UserAccess> userAccesses )\n+    {\n+        if ( this.users != null ) this.users.clear();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24cd20ec504ce0a7f86d2acbd33df5a8bd53ddf4"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNTk4NDQ2OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/util/SharingUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNjo0MTozOVrOIJNzsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNjo0MTozOVrOIJNzsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzNDMyMA==", "bodyText": "author", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r546534320", "createdAt": "2020-12-21T06:41:39Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/util/SharingUtils.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package org.hisp.dhis.util;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.apache.commons.collections.MapUtils;\n+import org.hisp.dhis.common.IdentifiableObject;\n+import org.hisp.dhis.user.UserGroupAccess;\n+import org.hisp.dhis.user.sharing.Sharing;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+public class SharingUtils", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24cd20ec504ce0a7f86d2acbd33df5a8bd53ddf4"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNTk4NTI1OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/util/SharingUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNjo0MjowM1rOIJN0JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNjo0MjowM1rOIJN0JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzNDQzNw==", "bodyText": "newline", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r546534437", "createdAt": "2020-12-21T06:42:03Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/util/SharingUtils.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package org.hisp.dhis.util;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.apache.commons.collections.MapUtils;\n+import org.hisp.dhis.common.IdentifiableObject;\n+import org.hisp.dhis.user.UserGroupAccess;\n+import org.hisp.dhis.user.sharing.Sharing;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+public class SharingUtils\n+{\n+    public static final Set<UserGroupAccess> getDtoUserGroupAccesses( Sharing sharing )\n+    {\n+        return !MapUtils.isEmpty( sharing.getUserGroups() ) ? sharing.getUserGroups().values()\n+            .stream().map( uag -> uag.toDtoObject() ).collect( Collectors.toSet() ) : new HashSet<>();\n+    }\n+\n+    public static final  Set<org.hisp.dhis.user.UserAccess> getDtoUserAccess( Sharing sharing )\n+    {\n+        return !MapUtils.isEmpty( sharing.getUsers() ) ? sharing.getUsers().values()\n+            .stream().map( ua -> ua.toDtoObject() ).collect( Collectors.toSet() ) : new HashSet<>();\n+    }\n+\n+    public static final Sharing generateSharingFromIdentifiableObject( IdentifiableObject object )\n+    {\n+        Sharing sharing = new Sharing();\n+        sharing.setOwner( object.getUser() );\n+        sharing.setExternal( object.getExternalAccess() );\n+        sharing.setPublicAccess( object.getPublicAccess() );\n+        sharing.setDtoUserGroupAccesses( object.getUserGroupAccesses() );\n+        sharing.setDtoUserAccesses( object.getUserAccesses() );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24cd20ec504ce0a7f86d2acbd33df5a8bd53ddf4"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjAwMDIyOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/common/hibernate/HibernateIdentifiableObjectStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNjo0OToxMVrOIJN8ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMDowNzowNVrOIJ1kAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzNjU0OA==", "bodyText": "why are we returning null here?", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r546536548", "createdAt": "2020-12-21T06:49:11Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/common/hibernate/HibernateIdentifiableObjectStore.java", "diffHunk": "@@ -995,182 +944,38 @@ public Date getLastUpdated()\n         return getList( builder, parameters );\n     }\n \n-    //----------------------------------------------------------------------------------------------------------------\n-    // Supportive methods\n-    //----------------------------------------------------------------------------------------------------------------\n-\n-    /**\n-     * Creates a criteria with sharing restrictions relative to the given\n-     * user and access string.\n-     */\n-    @Override\n-    public final Criteria getSharingCriteria()\n-    {\n-        return getExecutableCriteria( getSharingDetachedCriteria( currentUserService.getCurrentUserInfo(), AclService.LIKE_READ_METADATA ) );\n-    }\n-\n-    /**\n-     * Creates a detached criteria with data sharing restrictions relative to the\n-     * given user and access string.\n-     *\n-     * @param user the user.\n-     * @param access the access string.\n-     * @return a DetachedCriteria.\n-     */\n-    private DetachedCriteria getDataSharingDetachedCriteria( UserInfo user, String access )\n-    {\n-        DetachedCriteria criteria = DetachedCriteria.forClass( getClazz(), \"c\" );\n-\n-        if ( user == null || !dataSharingEnabled( user ) )\n-        {\n-            return criteria;\n-        }\n-\n-        Assert.notNull( user, \"User argument can't be null.\" );\n-\n-        Disjunction disjunction = Restrictions.disjunction();\n-\n-        disjunction.add( Restrictions.like( \"c.publicAccess\", access ) );\n-        disjunction.add( Restrictions.isNull( \"c.publicAccess\" ) );\n-\n-        DetachedCriteria userGroupDetachedCriteria = DetachedCriteria.forClass( getClazz(), \"ugdc\" );\n-        userGroupDetachedCriteria.createCriteria( \"ugdc.userGroupAccesses\", \"uga\" );\n-        userGroupDetachedCriteria.createCriteria( \"uga.userGroup\", \"ug\" );\n-        userGroupDetachedCriteria.createCriteria( \"ug.members\", \"ugm\" );\n-\n-        userGroupDetachedCriteria.add( Restrictions.eqProperty( \"ugdc.id\", \"c.id\" ) );\n-        userGroupDetachedCriteria.add( Restrictions.eq( \"ugm.id\", user.getId() ) );\n-        userGroupDetachedCriteria.add( Restrictions.like( \"uga.access\", access ) );\n-\n-        userGroupDetachedCriteria.setProjection( Property.forName( \"uga.id\" ) );\n-\n-        disjunction.add( Subqueries.exists( userGroupDetachedCriteria ) );\n-\n-        DetachedCriteria userDetachedCriteria = DetachedCriteria.forClass( getClazz(), \"udc\" );\n-        userDetachedCriteria.createCriteria( \"udc.userAccesses\", \"ua\" );\n-        userDetachedCriteria.createCriteria( \"ua.user\", \"u\" );\n-\n-        userDetachedCriteria.add( Restrictions.eqProperty( \"udc.id\", \"c.id\" ) );\n-        userDetachedCriteria.add( Restrictions.eq( \"u.id\", user.getId() ) );\n-        userDetachedCriteria.add( Restrictions.like( \"ua.access\", access ) );\n-\n-        userDetachedCriteria.setProjection( Property.forName( \"ua.id\" ) );\n-\n-        disjunction.add( Subqueries.exists( userDetachedCriteria ) );\n-\n-        criteria.add( disjunction );\n-\n-        return criteria;\n-    }\n-\n-    /**\n-     * Creates a detached criteria with sharing restrictions relative to the given\n-     * user and access string.\n-     *\n-     * @param user   the user.\n-     * @param access the access string.\n-     * @return a DetachedCriteria.\n-     */\n-    private DetachedCriteria getSharingDetachedCriteria( UserInfo user, String access )\n-    {\n-        DetachedCriteria criteria = DetachedCriteria.forClass( getClazz(), \"c\" );\n-\n-        preProcessDetachedCriteria( criteria );\n-\n-        if ( !sharingEnabled( user ) || user == null )\n-        {\n-            return criteria;\n-        }\n-\n-        Assert.notNull( user, \"User argument can't be null.\" );\n-\n-        Disjunction disjunction = Restrictions.disjunction();\n-\n-        disjunction.add( Restrictions.like( \"c.publicAccess\", access ) );\n-        disjunction.add( Restrictions.isNull( \"c.publicAccess\" ) );\n-        disjunction.add( Restrictions.isNull( \"c.user.id\" ) );\n-        disjunction.add( Restrictions.eq( \"c.user.id\", user.getId() ) );\n-\n-        DetachedCriteria userGroupDetachedCriteria = DetachedCriteria.forClass( getClazz(), \"ugdc\" );\n-        userGroupDetachedCriteria.createCriteria( \"ugdc.userGroupAccesses\", \"uga\" );\n-        userGroupDetachedCriteria.createCriteria( \"uga.userGroup\", \"ug\" );\n-        userGroupDetachedCriteria.createCriteria( \"ug.members\", \"ugm\" );\n-\n-        userGroupDetachedCriteria.add( Restrictions.eqProperty( \"ugdc.id\", \"c.id\" ) );\n-        userGroupDetachedCriteria.add( Restrictions.eq( \"ugm.id\", user.getId() ) );\n-        userGroupDetachedCriteria.add( Restrictions.like( \"uga.access\", access ) );\n-\n-        userGroupDetachedCriteria.setProjection( Property.forName( \"uga.id\" ) );\n-\n-        disjunction.add( Subqueries.exists( userGroupDetachedCriteria ) );\n-\n-        DetachedCriteria userDetachedCriteria = DetachedCriteria.forClass( getClazz(), \"udc\" );\n-        userDetachedCriteria.createCriteria( \"udc.userAccesses\", \"ua\" );\n-        userDetachedCriteria.createCriteria( \"ua.user\", \"u\" );\n-\n-        userDetachedCriteria.add( Restrictions.eqProperty( \"udc.id\", \"c.id\" ) );\n-        userDetachedCriteria.add( Restrictions.eq( \"u.id\", user.getId() ) );\n-        userDetachedCriteria.add( Restrictions.like( \"ua.access\", access ) );\n-\n-        userDetachedCriteria.setProjection( Property.forName( \"ua.id\" ) );\n-\n-        disjunction.add( Subqueries.exists( userDetachedCriteria ) );\n-\n-        criteria.add( disjunction );\n-\n-        return criteria;\n-    }\n-\n     // ----------------------------------------------------------------------\n     // JPA support methods\n     // ----------------------------------------------------------------------\n \n     @Override\n     public final List<Function<Root<T>, Predicate>> getDataSharingPredicates( CriteriaBuilder builder )\n     {\n-        return getDataSharingPredicates( builder, currentUserService.getCurrentUserInfo(), AclService.LIKE_READ_DATA );\n+        return getDataSharingPredicates( builder, currentUserService.getCurrentUserInfo(), currentUserService.getCurrentUserGroupsInfo(), AclService.LIKE_READ_DATA );\n     }\n \n     @Override\n-    public List<Function<Root<T>, Predicate>> getDataSharingPredicates( CriteriaBuilder builder, UserInfo user )\n+    public List<Function<Root<T>, Predicate>> getDataSharingPredicates( CriteriaBuilder builder, User user )\n     {\n         return getDataSharingPredicates( builder, user, AclService.LIKE_READ_DATA );\n     }\n \n     @Override\n-    public List<Function<Root<T>, Predicate>> getDataSharingPredicates( CriteriaBuilder builder, User user )\n+    public List<Function<Root<T>, Predicate>> getDataSharingPredicates( CriteriaBuilder builder, UserInfo userInfo )\n     {\n-        return getDataSharingPredicates( builder, UserInfo.fromUser( user ), AclService.LIKE_READ_DATA );\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24cd20ec504ce0a7f86d2acbd33df5a8bd53ddf4"}, "originalPosition": 337}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE4NTY2NQ==", "bodyText": "forgot to add the code back after debug. fixed now", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r547185665", "createdAt": "2020-12-22T10:07:05Z", "author": {"login": "vietnguyen"}, "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/common/hibernate/HibernateIdentifiableObjectStore.java", "diffHunk": "@@ -995,182 +944,38 @@ public Date getLastUpdated()\n         return getList( builder, parameters );\n     }\n \n-    //----------------------------------------------------------------------------------------------------------------\n-    // Supportive methods\n-    //----------------------------------------------------------------------------------------------------------------\n-\n-    /**\n-     * Creates a criteria with sharing restrictions relative to the given\n-     * user and access string.\n-     */\n-    @Override\n-    public final Criteria getSharingCriteria()\n-    {\n-        return getExecutableCriteria( getSharingDetachedCriteria( currentUserService.getCurrentUserInfo(), AclService.LIKE_READ_METADATA ) );\n-    }\n-\n-    /**\n-     * Creates a detached criteria with data sharing restrictions relative to the\n-     * given user and access string.\n-     *\n-     * @param user the user.\n-     * @param access the access string.\n-     * @return a DetachedCriteria.\n-     */\n-    private DetachedCriteria getDataSharingDetachedCriteria( UserInfo user, String access )\n-    {\n-        DetachedCriteria criteria = DetachedCriteria.forClass( getClazz(), \"c\" );\n-\n-        if ( user == null || !dataSharingEnabled( user ) )\n-        {\n-            return criteria;\n-        }\n-\n-        Assert.notNull( user, \"User argument can't be null.\" );\n-\n-        Disjunction disjunction = Restrictions.disjunction();\n-\n-        disjunction.add( Restrictions.like( \"c.publicAccess\", access ) );\n-        disjunction.add( Restrictions.isNull( \"c.publicAccess\" ) );\n-\n-        DetachedCriteria userGroupDetachedCriteria = DetachedCriteria.forClass( getClazz(), \"ugdc\" );\n-        userGroupDetachedCriteria.createCriteria( \"ugdc.userGroupAccesses\", \"uga\" );\n-        userGroupDetachedCriteria.createCriteria( \"uga.userGroup\", \"ug\" );\n-        userGroupDetachedCriteria.createCriteria( \"ug.members\", \"ugm\" );\n-\n-        userGroupDetachedCriteria.add( Restrictions.eqProperty( \"ugdc.id\", \"c.id\" ) );\n-        userGroupDetachedCriteria.add( Restrictions.eq( \"ugm.id\", user.getId() ) );\n-        userGroupDetachedCriteria.add( Restrictions.like( \"uga.access\", access ) );\n-\n-        userGroupDetachedCriteria.setProjection( Property.forName( \"uga.id\" ) );\n-\n-        disjunction.add( Subqueries.exists( userGroupDetachedCriteria ) );\n-\n-        DetachedCriteria userDetachedCriteria = DetachedCriteria.forClass( getClazz(), \"udc\" );\n-        userDetachedCriteria.createCriteria( \"udc.userAccesses\", \"ua\" );\n-        userDetachedCriteria.createCriteria( \"ua.user\", \"u\" );\n-\n-        userDetachedCriteria.add( Restrictions.eqProperty( \"udc.id\", \"c.id\" ) );\n-        userDetachedCriteria.add( Restrictions.eq( \"u.id\", user.getId() ) );\n-        userDetachedCriteria.add( Restrictions.like( \"ua.access\", access ) );\n-\n-        userDetachedCriteria.setProjection( Property.forName( \"ua.id\" ) );\n-\n-        disjunction.add( Subqueries.exists( userDetachedCriteria ) );\n-\n-        criteria.add( disjunction );\n-\n-        return criteria;\n-    }\n-\n-    /**\n-     * Creates a detached criteria with sharing restrictions relative to the given\n-     * user and access string.\n-     *\n-     * @param user   the user.\n-     * @param access the access string.\n-     * @return a DetachedCriteria.\n-     */\n-    private DetachedCriteria getSharingDetachedCriteria( UserInfo user, String access )\n-    {\n-        DetachedCriteria criteria = DetachedCriteria.forClass( getClazz(), \"c\" );\n-\n-        preProcessDetachedCriteria( criteria );\n-\n-        if ( !sharingEnabled( user ) || user == null )\n-        {\n-            return criteria;\n-        }\n-\n-        Assert.notNull( user, \"User argument can't be null.\" );\n-\n-        Disjunction disjunction = Restrictions.disjunction();\n-\n-        disjunction.add( Restrictions.like( \"c.publicAccess\", access ) );\n-        disjunction.add( Restrictions.isNull( \"c.publicAccess\" ) );\n-        disjunction.add( Restrictions.isNull( \"c.user.id\" ) );\n-        disjunction.add( Restrictions.eq( \"c.user.id\", user.getId() ) );\n-\n-        DetachedCriteria userGroupDetachedCriteria = DetachedCriteria.forClass( getClazz(), \"ugdc\" );\n-        userGroupDetachedCriteria.createCriteria( \"ugdc.userGroupAccesses\", \"uga\" );\n-        userGroupDetachedCriteria.createCriteria( \"uga.userGroup\", \"ug\" );\n-        userGroupDetachedCriteria.createCriteria( \"ug.members\", \"ugm\" );\n-\n-        userGroupDetachedCriteria.add( Restrictions.eqProperty( \"ugdc.id\", \"c.id\" ) );\n-        userGroupDetachedCriteria.add( Restrictions.eq( \"ugm.id\", user.getId() ) );\n-        userGroupDetachedCriteria.add( Restrictions.like( \"uga.access\", access ) );\n-\n-        userGroupDetachedCriteria.setProjection( Property.forName( \"uga.id\" ) );\n-\n-        disjunction.add( Subqueries.exists( userGroupDetachedCriteria ) );\n-\n-        DetachedCriteria userDetachedCriteria = DetachedCriteria.forClass( getClazz(), \"udc\" );\n-        userDetachedCriteria.createCriteria( \"udc.userAccesses\", \"ua\" );\n-        userDetachedCriteria.createCriteria( \"ua.user\", \"u\" );\n-\n-        userDetachedCriteria.add( Restrictions.eqProperty( \"udc.id\", \"c.id\" ) );\n-        userDetachedCriteria.add( Restrictions.eq( \"u.id\", user.getId() ) );\n-        userDetachedCriteria.add( Restrictions.like( \"ua.access\", access ) );\n-\n-        userDetachedCriteria.setProjection( Property.forName( \"ua.id\" ) );\n-\n-        disjunction.add( Subqueries.exists( userDetachedCriteria ) );\n-\n-        criteria.add( disjunction );\n-\n-        return criteria;\n-    }\n-\n     // ----------------------------------------------------------------------\n     // JPA support methods\n     // ----------------------------------------------------------------------\n \n     @Override\n     public final List<Function<Root<T>, Predicate>> getDataSharingPredicates( CriteriaBuilder builder )\n     {\n-        return getDataSharingPredicates( builder, currentUserService.getCurrentUserInfo(), AclService.LIKE_READ_DATA );\n+        return getDataSharingPredicates( builder, currentUserService.getCurrentUserInfo(), currentUserService.getCurrentUserGroupsInfo(), AclService.LIKE_READ_DATA );\n     }\n \n     @Override\n-    public List<Function<Root<T>, Predicate>> getDataSharingPredicates( CriteriaBuilder builder, UserInfo user )\n+    public List<Function<Root<T>, Predicate>> getDataSharingPredicates( CriteriaBuilder builder, User user )\n     {\n         return getDataSharingPredicates( builder, user, AclService.LIKE_READ_DATA );\n     }\n \n     @Override\n-    public List<Function<Root<T>, Predicate>> getDataSharingPredicates( CriteriaBuilder builder, User user )\n+    public List<Function<Root<T>, Predicate>> getDataSharingPredicates( CriteriaBuilder builder, UserInfo userInfo )\n     {\n-        return getDataSharingPredicates( builder, UserInfo.fromUser( user ), AclService.LIKE_READ_DATA );\n+        return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzNjU0OA=="}, "originalCommit": {"oid": "24cd20ec504ce0a7f86d2acbd33df5a8bd53ddf4"}, "originalPosition": 337}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDM4Nzk4OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/common/HibernateIdentifiableObjectStoreTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMDoxMjoxMlrOIJ1t8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMDoxMjoxMlrOIJ1t8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE4ODIxMQ==", "bodyText": "Missing author", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r547188211", "createdAt": "2020-12-22T10:12:12Z", "author": {"login": "netroms"}, "path": "dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/common/HibernateIdentifiableObjectStoreTest.java", "diffHunk": "@@ -0,0 +1,236 @@\n+package org.hisp.dhis.common;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import com.google.common.collect.Sets;\n+import org.hisp.dhis.TransactionalIntegrationTestBase;\n+import org.hisp.dhis.category.CategoryOption;\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.dataelement.DataElement;\n+import org.hisp.dhis.dataelement.DataElementStore;\n+import org.hisp.dhis.datavalue.AggregateAccessManager;\n+import org.hisp.dhis.datavalue.DataValue;\n+import org.hisp.dhis.datavalue.DataValueStore;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.period.MonthlyPeriodType;\n+import org.hisp.dhis.period.Period;\n+import org.hisp.dhis.period.PeriodType;\n+import org.hisp.dhis.security.acl.AccessStringHelper;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.user.UserGroup;\n+import org.hisp.dhis.user.UserService;\n+import org.hisp.dhis.user.sharing.Sharing;\n+import org.hisp.dhis.user.sharing.UserAccess;\n+import org.hisp.dhis.user.sharing.UserGroupAccess;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9eb11cced0b776902ce88b89ba0fbcd469ff8db4"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDQ0OTk4OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-acl/src/main/java/org/hisp/dhis/security/acl/DefaultAclService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMDozMDozN1rOIJ2SPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMDozMDozN1rOIJ2SPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE5NzUwMg==", "bodyText": "Is this code nullpointer vulnerable? Is sharing not null, or can it be null?", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r547197502", "createdAt": "2020-12-22T10:30:37Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-services/dhis-service-acl/src/main/java/org/hisp/dhis/security/acl/DefaultAclService.java", "diffHunk": "@@ -644,30 +646,35 @@ private boolean checkSharingAccess( User user, IdentifiableObject object )\n      */\n     private boolean checkSharingPermission( User user, IdentifiableObject object, Permission permission )\n     {\n-        if ( AccessStringHelper.isEnabled( object.getPublicAccess(), permission ) )\n+        if ( AccessStringHelper.isEnabled( object.getSharing().getPublicAccess(), permission ) )\n         {\n             return true;\n         }\n \n-        for ( UserGroupAccess userGroupAccess : object.getUserGroupAccesses() )\n+        if ( object.getSharing().getUserGroups() != null && !CollectionUtils.isEmpty( user.getGroups() ) )\n         {\n-            // Check if user is allowed to read this object through group access\n-\n-            if ( AccessStringHelper.isEnabled( userGroupAccess.getAccess(), permission )\n-                    && userGroupAccess.userGroupContainsUser( user ) )\n+            for ( UserGroupAccess userGroupAccess : object.getSharing().getUserGroups().values() )\n             {\n-                return true;\n+                // Check if user is allowed to read this object through group access\n+                if ( AccessStringHelper.isEnabled( userGroupAccess.getAccess(), permission )\n+                    && checkUserGroupAccess( user.getGroups(), userGroupAccess.getId() ) )\n+                {\n+                    return true;\n+                }\n             }\n         }\n \n-        for ( UserAccess userAccess : object.getUserAccesses() )\n+        if ( object.getSharing().getUsers() != null )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5030988f43d976dc07235a08cc89f6e9250239dd"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDQ2NTU1OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/patch/DefaultPatchService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMDozNToxOVrOIJ2buA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMDozNToxOVrOIJ2buA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE5OTkyOA==", "bodyText": "Extra newline", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r547199928", "createdAt": "2020-12-22T10:35:19Z", "author": {"login": "netroms"}, "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/patch/DefaultPatchService.java", "diffHunk": "@@ -407,7 +408,9 @@ private void applyMutation( Mutation mutation, Property property, Object target\n                     Schema schema = schemaService.getDynamicSchema( property.getItemKlass() );\n \n                     Query query = Query.from( schema );\n-                    query.add( Restrictions.eq( \"id\", object ) ); // optimize by using .in(..) query\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5030988f43d976dc07235a08cc89f6e9250239dd"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDQ5OTM0OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/preheat/PreheatServiceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMDo0NTozMlrOIJ2vMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMDo0NTozMlrOIJ2vMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIwNDkxNQ==", "bodyText": "Fix todo?", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r547204915", "createdAt": "2020-12-22T10:45:32Z", "author": {"login": "netroms"}, "path": "dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/preheat/PreheatServiceTest.java", "diffHunk": "@@ -543,9 +555,10 @@ public void testPreheatReferenceConnectAUTO()\n         assertContains(members, \"DataElementB\", \"DataElementCodeB\");\n         assertContains(members, \"DataElementC\", \"DataElementCodeC\");\n \n-        assertEquals( \"FirstNameA\", dataElementGroup.getUser().getFirstName() );\n-        assertEquals( \"SurnameA\", dataElementGroup.getUser().getSurname() );\n-        assertEquals( \"UserCodeA\", dataElementGroup.getUser().getCode() );\n+        // TODO Fix this", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5030988f43d976dc07235a08cc89f6e9250239dd"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDUxOTU5OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-validation/src/test/java/org/hisp/dhis/validation/ValidationResultStoreTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMDo1MTozMFrOIJ26yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMDo1MTozMFrOIJ26yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIwNzg4Mg==", "bodyText": "Commented lines", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r547207882", "createdAt": "2020-12-22T10:51:30Z", "author": {"login": "netroms"}, "path": "dhis-2/dhis-services/dhis-service-validation/src/test/java/org/hisp/dhis/validation/ValidationResultStoreTest.java", "diffHunk": "@@ -191,8 +194,10 @@ private CurrentUserService getMockCurrentUserService( String userName, boolean s\n \n     private void setPrivateAccess( BaseIdentifiableObject object, UserGroup... userGroups )\n     {\n-        object.setPublicAccess( ACCESS_NONE );\n-        object.setUser( userZ ); // Needed for sharing to work\n+//        object.setPublicAccess( ACCESS_NONE );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5030988f43d976dc07235a08cc89f6e9250239dd"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDUyOTU2OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/AbstractCrudController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMDo1NDo0NFrOIJ3Aow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMDo1NDo0NFrOIJ3Aow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIwOTM3OQ==", "bodyText": "Commented line", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r547209379", "createdAt": "2020-12-22T10:54:44Z", "author": {"login": "netroms"}, "path": "dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/AbstractCrudController.java", "diffHunk": "@@ -274,6 +281,8 @@\n \n         handleAttributeValues( entities, fields );\n \n+//        handleSharingAttributes( entities, fields );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5030988f43d976dc07235a08cc89f6e9250239dd"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDUyOTc5OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/AbstractCrudController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMDo1NDo1MVrOIJ3Ayg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMDo1NDo1MVrOIJ3Ayg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIwOTQxOA==", "bodyText": "Commented line", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r547209418", "createdAt": "2020-12-22T10:54:51Z", "author": {"login": "netroms"}, "path": "dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/AbstractCrudController.java", "diffHunk": "@@ -547,6 +556,8 @@ private RootNode getObjectInternal( String uid, Map<String, String> parameters,\n \n         handleAttributeValues( entities, fields );\n \n+//        handleSharingAttributes( entities, fields );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5030988f43d976dc07235a08cc89f6e9250239dd"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDUzMTU2OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/AbstractCrudController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMDo1NToyMVrOIJ3B1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMDo1NToyMVrOIJ3B1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIwOTY4NA==", "bodyText": "Commented block", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r547209684", "createdAt": "2020-12-22T10:55:21Z", "author": {"login": "netroms"}, "path": "dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/AbstractCrudController.java", "diffHunk": "@@ -1314,6 +1359,23 @@ protected void handleAttributeValues( List<T> entityList, List<String> fields )\n         }\n     }\n \n+//    protected void handleSharingAttributes(  List<T> entityList, List<String> fields )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5030988f43d976dc07235a08cc89f6e9250239dd"}, "originalPosition": 127}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3963, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}