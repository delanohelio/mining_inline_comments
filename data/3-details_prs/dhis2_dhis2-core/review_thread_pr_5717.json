{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyNTU2NTUy", "number": 5717, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNzoyMjo0OFrOEEkhEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNzoyMjo0OFrOEEkhEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMjI4MDQ5OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/attribute/AttributeValueDeletionHandler.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNzoyMjo0OFrOGiRgnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNDoxOTo1OVrOGiflrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU5MTY0NA==", "bodyText": "Can we do a count or an exists method and use that instead @vietnguyen ? Getting all attribute values into memory is expensive and might lead to out-of-mem, and unnecessary when we just want to check whether at least one exists.", "url": "https://github.com/dhis2/dhis2-core/pull/5717#discussion_r438591644", "createdAt": "2020-06-11T07:22:48Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/attribute/AttributeValueDeletionHandler.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package org.hisp.dhis.attribute;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import com.google.common.collect.Lists;\n+import org.hisp.dhis.common.IdentifiableObject;\n+import org.hisp.dhis.common.IdentifiableObjectManager;\n+import org.hisp.dhis.system.deletion.DeletionHandler;\n+import org.springframework.stereotype.Component;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+@Component( \"org.hisp.dhis.attribute.AttributeValueDeletionHandler\" )\n+public class AttributeValueDeletionHandler\n+    extends DeletionHandler\n+{\n+    private final IdentifiableObjectManager identifiableObjectManager;\n+\n+    private String supportedClassName;\n+\n+    public AttributeValueDeletionHandler( IdentifiableObjectManager identifiableObjectManager )\n+    {\n+        checkNotNull( identifiableObjectManager );\n+\n+        this.identifiableObjectManager = identifiableObjectManager;\n+    }\n+\n+    // -------------------------------------------------------------------------\n+    // DeletionHandler implementation\n+    // -------------------------------------------------------------------------\n+\n+    @Override\n+    public String getClassName()\n+    {\n+        return supportedClassName  + \".\" +  AttributeValue.class.getSimpleName();\n+    }\n+\n+    @Override\n+    public String allowDeleteAttribute( Attribute attribute )\n+    {\n+        for (  Class<? extends IdentifiableObject> supportedClass : attribute.getSupportedClasses() )\n+        {\n+            if ( identifiableObjectManager.getAllValuesByAttributes( supportedClass, Lists.newArrayList( attribute ) ).size() > 0 )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69122c2d2c91b73d8e6858408cc191b592c78a2c"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY0ODYwMw==", "bodyText": "@larshelge  just added the function countAllValuesByAttributes() in HibernateGenericStore to solve this", "url": "https://github.com/dhis2/dhis2-core/pull/5717#discussion_r438648603", "createdAt": "2020-06-11T09:09:36Z", "author": {"login": "vietnguyen"}, "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/attribute/AttributeValueDeletionHandler.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package org.hisp.dhis.attribute;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import com.google.common.collect.Lists;\n+import org.hisp.dhis.common.IdentifiableObject;\n+import org.hisp.dhis.common.IdentifiableObjectManager;\n+import org.hisp.dhis.system.deletion.DeletionHandler;\n+import org.springframework.stereotype.Component;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+@Component( \"org.hisp.dhis.attribute.AttributeValueDeletionHandler\" )\n+public class AttributeValueDeletionHandler\n+    extends DeletionHandler\n+{\n+    private final IdentifiableObjectManager identifiableObjectManager;\n+\n+    private String supportedClassName;\n+\n+    public AttributeValueDeletionHandler( IdentifiableObjectManager identifiableObjectManager )\n+    {\n+        checkNotNull( identifiableObjectManager );\n+\n+        this.identifiableObjectManager = identifiableObjectManager;\n+    }\n+\n+    // -------------------------------------------------------------------------\n+    // DeletionHandler implementation\n+    // -------------------------------------------------------------------------\n+\n+    @Override\n+    public String getClassName()\n+    {\n+        return supportedClassName  + \".\" +  AttributeValue.class.getSimpleName();\n+    }\n+\n+    @Override\n+    public String allowDeleteAttribute( Attribute attribute )\n+    {\n+        for (  Class<? extends IdentifiableObject> supportedClass : attribute.getSupportedClasses() )\n+        {\n+            if ( identifiableObjectManager.getAllValuesByAttributes( supportedClass, Lists.newArrayList( attribute ) ).size() > 0 )", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU5MTY0NA=="}, "originalCommit": {"oid": "69122c2d2c91b73d8e6858408cc191b592c78a2c"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgyMjMxOA==", "bodyText": "Very good Viet, thanks. The code looks great. Approved it.", "url": "https://github.com/dhis2/dhis2-core/pull/5717#discussion_r438822318", "createdAt": "2020-06-11T14:19:59Z", "author": {"login": "larshelge"}, "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/attribute/AttributeValueDeletionHandler.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package org.hisp.dhis.attribute;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import com.google.common.collect.Lists;\n+import org.hisp.dhis.common.IdentifiableObject;\n+import org.hisp.dhis.common.IdentifiableObjectManager;\n+import org.hisp.dhis.system.deletion.DeletionHandler;\n+import org.springframework.stereotype.Component;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+@Component( \"org.hisp.dhis.attribute.AttributeValueDeletionHandler\" )\n+public class AttributeValueDeletionHandler\n+    extends DeletionHandler\n+{\n+    private final IdentifiableObjectManager identifiableObjectManager;\n+\n+    private String supportedClassName;\n+\n+    public AttributeValueDeletionHandler( IdentifiableObjectManager identifiableObjectManager )\n+    {\n+        checkNotNull( identifiableObjectManager );\n+\n+        this.identifiableObjectManager = identifiableObjectManager;\n+    }\n+\n+    // -------------------------------------------------------------------------\n+    // DeletionHandler implementation\n+    // -------------------------------------------------------------------------\n+\n+    @Override\n+    public String getClassName()\n+    {\n+        return supportedClassName  + \".\" +  AttributeValue.class.getSimpleName();\n+    }\n+\n+    @Override\n+    public String allowDeleteAttribute( Attribute attribute )\n+    {\n+        for (  Class<? extends IdentifiableObject> supportedClass : attribute.getSupportedClasses() )\n+        {\n+            if ( identifiableObjectManager.getAllValuesByAttributes( supportedClass, Lists.newArrayList( attribute ) ).size() > 0 )", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU5MTY0NA=="}, "originalCommit": {"oid": "69122c2d2c91b73d8e6858408cc191b592c78a2c"}, "originalPosition": 69}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3362, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}