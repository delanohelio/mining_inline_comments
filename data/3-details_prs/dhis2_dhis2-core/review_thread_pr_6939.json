{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyMDkwODQz", "number": 6939, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMjo1NjoxNFrOFHpdHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNjo1OToxMVrOFIOpnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNTYzNTUwOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/preheat/Preheat.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMjo1NjoxNFrOIJKz_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMjo1NjoxNFrOIJKz_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4NTI0Ng==", "bodyText": "codestyle {\u00a0}", "url": "https://github.com/dhis2/dhis2-core/pull/6939#discussion_r546485246", "createdAt": "2020-12-21T02:56:14Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/preheat/Preheat.java", "diffHunk": "@@ -268,14 +274,17 @@ public boolean isEmpty( PreheatIdentifier identifier, Class<? extends Identifiab\n     {\n         if ( object == null ) return this;\n \n-        Class<? extends IdentifiableObject> klass = (Class<? extends IdentifiableObject>) getRealClass( object.getClass() );\n+        Class<? extends IdentifiableObject> realClass = HibernateProxyUtils.getRealClass( object );\n \n         if ( PreheatIdentifier.UID == identifier || PreheatIdentifier.AUTO == identifier )\n         {\n-            if ( !map.containsKey( PreheatIdentifier.UID ) ) map.put( PreheatIdentifier.UID, new HashMap<>() );\n-            if ( !map.get( PreheatIdentifier.UID ).containsKey( klass ) ) map.get( PreheatIdentifier.UID ).put( klass, new HashMap<>() );\n+            if ( !map.containsKey( PreheatIdentifier.UID ) )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93256e73eade1bfc48ff0f9dbab2485a8ca973f9"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNTYzNTc5OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/preheat/Preheat.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMjo1NjoyNVrOIJK0Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMjo1NjoyNVrOIJK0Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4NTI4Nw==", "bodyText": "codestyle { }", "url": "https://github.com/dhis2/dhis2-core/pull/6939#discussion_r546485287", "createdAt": "2020-12-21T02:56:25Z", "author": {"login": "mortenoh"}, "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/preheat/Preheat.java", "diffHunk": "@@ -268,14 +274,17 @@ public boolean isEmpty( PreheatIdentifier identifier, Class<? extends Identifiab\n     {\n         if ( object == null ) return this;\n \n-        Class<? extends IdentifiableObject> klass = (Class<? extends IdentifiableObject>) getRealClass( object.getClass() );\n+        Class<? extends IdentifiableObject> realClass = HibernateProxyUtils.getRealClass( object );\n \n         if ( PreheatIdentifier.UID == identifier || PreheatIdentifier.AUTO == identifier )\n         {\n-            if ( !map.containsKey( PreheatIdentifier.UID ) ) map.put( PreheatIdentifier.UID, new HashMap<>() );\n-            if ( !map.get( PreheatIdentifier.UID ).containsKey( klass ) ) map.get( PreheatIdentifier.UID ).put( klass, new HashMap<>() );\n+            if ( !map.containsKey( PreheatIdentifier.UID ) )\n+                map.put( PreheatIdentifier.UID, new HashMap<>() );\n+\n+            if ( !map.get( PreheatIdentifier.UID ).containsKey( realClass ) )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93256e73eade1bfc48ff0f9dbab2485a8ca973f9"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTcyOTU5OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/hibernate/HibernateProxyUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNjo1OToxMVrOIKCEtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNjo1OToxMVrOIKCEtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM5MDY0NA==", "bodyText": "remove commented code", "url": "https://github.com/dhis2/dhis2-core/pull/6939#discussion_r547390644", "createdAt": "2020-12-22T16:59:11Z", "author": {"login": "vietnguyen"}, "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/hibernate/HibernateProxyUtils.java", "diffHunk": "@@ -31,74 +31,95 @@\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.google.common.base.Preconditions;\n import org.hibernate.Hibernate;\n-import org.hibernate.collection.internal.PersistentSet;\n import org.hibernate.collection.spi.PersistentCollection;\n import org.hibernate.proxy.HibernateProxy;\n-import org.hibernate.proxy.pojo.javassist.SerializableProxy;\n-import org.hisp.dhis.commons.util.DebugUtils;\n+import org.hibernate.proxy.HibernateProxyHelper;\n \n import java.beans.IntrospectionException;\n import java.beans.PropertyDescriptor;\n import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n import java.lang.reflect.Field;\n import java.lang.reflect.InvocationTargetException;\n import java.util.Arrays;\n import java.util.Collection;\n-import java.util.LinkedHashSet;\n import java.util.List;\n-import java.util.Map;\n+import java.util.Objects;\n import java.util.stream.Collectors;\n \n /**\n- * @author Morten Olav Hansen <mortenoh@gmail.com>\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n  */\n-public class HibernateUtils\n+public class HibernateProxyUtils\n {\n+    private HibernateProxyUtils()\n+    {\n+        throw new IllegalStateException(\"Utility class\");\n+    }\n+\n     public static boolean isProxy( Object object )\n     {\n-        return ( ( object instanceof HibernateProxy ) || ( object instanceof PersistentCollection ) );\n+        return ((object instanceof HibernateProxy) || (object instanceof PersistentCollection));\n     }\n \n-    /**\n-     * If object is proxy, get unwrapped non-proxy object.\n-     *\n-     * @param proxy Object to check and unwrap\n-     * @return Unwrapped object if proxyied, if not just returns same object\n-     */\n-    @SuppressWarnings( \"unchecked\" )\n-    public static <T> T unwrap( T proxy )\n+\n+    @SuppressWarnings( { \"rawtypes\" } )\n+    public static Class getRealClass( Object o )\n     {\n-        if ( !isProxy( proxy ) )\n+        Objects.requireNonNull( o );\n+\n+        if ( o instanceof Class )\n         {\n-            return proxy;\n+            throw new IllegalArgumentException( \"Input can't be of type Class!\" );\n         }\n \n-        Hibernate.initialize( proxy );\n-\n-        if ( HibernateProxy.class.isInstance( proxy ) )\n+        if ( isProxy( o ) )\n         {\n-            Object result = ((HibernateProxy) proxy).writeReplace();\n-\n-            if ( !SerializableProxy.class.isInstance( result ) )\n-            {\n-                return (T) result;\n-            }\n+            return HibernateProxyHelper.getClassWithoutInitializingProxy( o );\n         }\n-\n-        if ( PersistentCollection.class.isInstance( proxy ) )\n+        else\n         {\n-            PersistentCollection persistentCollection = (PersistentCollection) proxy;\n-\n-            if ( PersistentSet.class.isInstance( persistentCollection ) )\n-            {\n-                Map<?, ?> map = (Map<?, ?>) persistentCollection.getStoredSnapshot();\n-                return (T) new LinkedHashSet<>( map.keySet() );\n-            }\n-\n-            return (T) persistentCollection.getStoredSnapshot();\n+            return o.getClass();\n         }\n+    }\n \n-        return proxy;\n+    @SuppressWarnings( { \"unchecked\" } )\n+    public static <T> T unwrap( T proxy )\n+    {\n+        return (T) Hibernate.unproxy( proxy );\n+//\n+//        if ( !isProxy( proxy ) )\n+//        {\n+//            return proxy;\n+//        }\n+//\n+//        Hibernate.initialize( proxy );\n+//\n+//        if ( HibernateProxy.class.isInstance( proxy ) )\n+//        {\n+//            Object result = ((HibernateProxy) proxy).writeReplace();\n+//\n+//            if ( !SerializableProxy.class.isInstance( result ) )\n+//            {\n+//                return (T) result;\n+//            }\n+//        }\n+//\n+//        if ( PersistentCollection.class.isInstance( proxy ) )\n+//        {\n+//            PersistentCollection persistentCollection = (PersistentCollection) proxy;\n+//\n+//            if ( PersistentSet.class.isInstance( persistentCollection ) )\n+//            {\n+//                Map<?, ?> map = (Map<?, ?>) persistentCollection.getStoredSnapshot();\n+//                return (T) new LinkedHashSet<>( map.keySet() );\n+//            }\n+//\n+//            return (T) persistentCollection.getStoredSnapshot();\n+//        }\n+//\n+//        return proxy;\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d50a1ae92e948fe6df3bab1a8b749c89963d957"}, "originalPosition": 132}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3700, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}