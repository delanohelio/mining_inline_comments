{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0MzQzNjA3", "number": 5015, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwODo1MDo1NlrODmM1XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwODo1NDo1MlrODmM5ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzgyNzQ5OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/preheat/SchemaToDataFetcherTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwODo1MDo1NlrOFzexSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMDoxODoxOVrOFzhcIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUyNTgzNQ==", "bodyText": "Several codestyle issues in this file ( paranthesis missing spaces )", "url": "https://github.com/dhis2/dhis2-core/pull/5015#discussion_r389525835", "createdAt": "2020-03-09T08:50:56Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/preheat/SchemaToDataFetcherTest.java", "diffHunk": "@@ -0,0 +1,277 @@\n+package org.hisp.dhis.preheat;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static java.util.stream.Collectors.toList;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.hasProperty;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+import org.hamcrest.collection.IsIterableContainingInAnyOrder;\n+import org.hibernate.Session;\n+import org.hibernate.SessionFactory;\n+import org.hibernate.query.Query;\n+import org.hisp.dhis.DhisConvenienceTest;\n+import org.hisp.dhis.common.IdentifiableObject;\n+import org.hisp.dhis.dataelement.DataElement;\n+import org.hisp.dhis.schema.Property;\n+import org.hisp.dhis.schema.Schema;\n+import org.hisp.dhis.sms.command.SMSCommand;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n+\n+import com.google.common.collect.Lists;\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@SuppressWarnings(\"unchecked\")\n+public class SchemaToDataFetcherTest extends DhisConvenienceTest\n+{\n+    private SchemaToDataFetcher subject;\n+\n+    @Mock\n+    private SessionFactory sessionFactory;\n+\n+    @Mock\n+    private Session session;\n+    \n+    @Mock\n+    private Query query;\n+    \n+    @Rule\n+    public MockitoRule mockitoRule = MockitoJUnit.rule();\n+\n+\n+    @Before\n+    public void setUp()\n+    {\n+        when( sessionFactory.getCurrentSession() ).thenReturn( session );\n+        subject = new SchemaToDataFetcher( sessionFactory );\n+    }\n+    \n+    @Test\n+    public void verifyInput()\n+    {\n+        assertThat(subject.fetch( null ), hasSize(0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45ee88cb7fb088f06b03bf5af3dd1e589900c0f8"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU2OTU3MQ==", "bodyText": "Fixed", "url": "https://github.com/dhis2/dhis2-core/pull/5015#discussion_r389569571", "createdAt": "2020-03-09T10:18:19Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/preheat/SchemaToDataFetcherTest.java", "diffHunk": "@@ -0,0 +1,277 @@\n+package org.hisp.dhis.preheat;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static java.util.stream.Collectors.toList;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.hasProperty;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+import org.hamcrest.collection.IsIterableContainingInAnyOrder;\n+import org.hibernate.Session;\n+import org.hibernate.SessionFactory;\n+import org.hibernate.query.Query;\n+import org.hisp.dhis.DhisConvenienceTest;\n+import org.hisp.dhis.common.IdentifiableObject;\n+import org.hisp.dhis.dataelement.DataElement;\n+import org.hisp.dhis.schema.Property;\n+import org.hisp.dhis.schema.Schema;\n+import org.hisp.dhis.sms.command.SMSCommand;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n+\n+import com.google.common.collect.Lists;\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@SuppressWarnings(\"unchecked\")\n+public class SchemaToDataFetcherTest extends DhisConvenienceTest\n+{\n+    private SchemaToDataFetcher subject;\n+\n+    @Mock\n+    private SessionFactory sessionFactory;\n+\n+    @Mock\n+    private Session session;\n+    \n+    @Mock\n+    private Query query;\n+    \n+    @Rule\n+    public MockitoRule mockitoRule = MockitoJUnit.rule();\n+\n+\n+    @Before\n+    public void setUp()\n+    {\n+        when( sessionFactory.getCurrentSession() ).thenReturn( session );\n+        subject = new SchemaToDataFetcher( sessionFactory );\n+    }\n+    \n+    @Test\n+    public void verifyInput()\n+    {\n+        assertThat(subject.fetch( null ), hasSize(0));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUyNTgzNQ=="}, "originalCommit": {"oid": "45ee88cb7fb088f06b03bf5af3dd1e589900c0f8"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzgzNzU0OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/metadata/objectbundle/validation/SecurityCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwODo1NDoyNlrOFze3ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwODo1NDoyNlrOFze3ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUyNzM5Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                ValidationUtils.addObjectReport( errorReport, typeReport, object, bundle);\n          \n          \n            \n                                ValidationUtils.addObjectReport( errorReport, typeReport, object, bundle );", "url": "https://github.com/dhis2/dhis2-core/pull/5015#discussion_r389527396", "createdAt": "2020-03-09T08:54:26Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/metadata/objectbundle/validation/SecurityCheck.java", "diffHunk": "@@ -0,0 +1,168 @@\n+package org.hisp.dhis.dxf2.metadata.objectbundle.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.hisp.dhis.dxf2.metadata.objectbundle.validation.ValidationUtils.addObjectReports;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import org.hisp.dhis.common.IdentifiableObject;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundle;\n+import org.hisp.dhis.feedback.ErrorCode;\n+import org.hisp.dhis.feedback.ErrorReport;\n+import org.hisp.dhis.feedback.TypeReport;\n+import org.hisp.dhis.importexport.ImportStrategy;\n+import org.hisp.dhis.preheat.PreheatIdentifier;\n+import org.hisp.dhis.user.User;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class SecurityCheck\n+    implements\n+    ValidationCheck\n+{\n+    @Override\n+    public TypeReport check( ObjectBundle bundle, Class<? extends IdentifiableObject> klass,\n+        List<IdentifiableObject> persistedObjects, List<IdentifiableObject> nonPersistedObjects,\n+        ImportStrategy importStrategy, ValidationContext context )\n+    {\n+\n+        if ( importStrategy.isCreateAndUpdate() )\n+        {\n+            TypeReport report = runValidationCheck( bundle, klass, persistedObjects, ImportStrategy.UPDATE, context );\n+            report.merge( runValidationCheck( bundle, klass, nonPersistedObjects, ImportStrategy.CREATE, context ) );\n+            return report;\n+        }\n+        else if ( importStrategy.isCreate() )\n+        {\n+            return runValidationCheck( bundle, klass, nonPersistedObjects, ImportStrategy.CREATE, context );\n+        }\n+        else if ( importStrategy.isUpdate() )\n+        {\n+            return runValidationCheck( bundle, klass, persistedObjects, ImportStrategy.UPDATE, context );\n+        }\n+        else\n+        {\n+            return new TypeReport( klass );\n+        }\n+\n+    }\n+\n+    private TypeReport runValidationCheck( ObjectBundle bundle, Class<? extends IdentifiableObject> klass,\n+        List<IdentifiableObject> objects, ImportStrategy importMode, ValidationContext ctx )\n+    {\n+\n+        TypeReport typeReport = new TypeReport( klass );\n+\n+        if ( objects == null || objects.isEmpty() )\n+        {\n+            return typeReport;\n+        }\n+\n+        Iterator<IdentifiableObject> iterator = objects.iterator();\n+        PreheatIdentifier identifier = bundle.getPreheatIdentifier();\n+\n+        while ( iterator.hasNext() )\n+        {\n+            IdentifiableObject object = iterator.next();\n+\n+            if ( importMode.isCreate() )\n+            {\n+                if ( !ctx.getAclService().canCreate( bundle.getUser(), klass ) )\n+                {\n+                    ErrorReport errorReport = new ErrorReport( klass, ErrorCode.E3000,\n+                        identifier.getIdentifiersWithName( bundle.getUser() ),\n+                        identifier.getIdentifiersWithName( object ) );\n+\n+                    ValidationUtils.addObjectReport( errorReport, typeReport, object, bundle);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45ee88cb7fb088f06b03bf5af3dd1e589900c0f8"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzgzODI4OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/metadata/objectbundle/validation/SecurityCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwODo1NDo0MlrOFze34A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwODo1NDo0MlrOFze34A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUyNzUyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    ValidationUtils.addObjectReport( errorReport, typeReport, object, bundle);\n          \n          \n            \n                                    ValidationUtils.addObjectReport( errorReport, typeReport, object, bundle );", "url": "https://github.com/dhis2/dhis2-core/pull/5015#discussion_r389527520", "createdAt": "2020-03-09T08:54:42Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/metadata/objectbundle/validation/SecurityCheck.java", "diffHunk": "@@ -0,0 +1,168 @@\n+package org.hisp.dhis.dxf2.metadata.objectbundle.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.hisp.dhis.dxf2.metadata.objectbundle.validation.ValidationUtils.addObjectReports;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import org.hisp.dhis.common.IdentifiableObject;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundle;\n+import org.hisp.dhis.feedback.ErrorCode;\n+import org.hisp.dhis.feedback.ErrorReport;\n+import org.hisp.dhis.feedback.TypeReport;\n+import org.hisp.dhis.importexport.ImportStrategy;\n+import org.hisp.dhis.preheat.PreheatIdentifier;\n+import org.hisp.dhis.user.User;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class SecurityCheck\n+    implements\n+    ValidationCheck\n+{\n+    @Override\n+    public TypeReport check( ObjectBundle bundle, Class<? extends IdentifiableObject> klass,\n+        List<IdentifiableObject> persistedObjects, List<IdentifiableObject> nonPersistedObjects,\n+        ImportStrategy importStrategy, ValidationContext context )\n+    {\n+\n+        if ( importStrategy.isCreateAndUpdate() )\n+        {\n+            TypeReport report = runValidationCheck( bundle, klass, persistedObjects, ImportStrategy.UPDATE, context );\n+            report.merge( runValidationCheck( bundle, klass, nonPersistedObjects, ImportStrategy.CREATE, context ) );\n+            return report;\n+        }\n+        else if ( importStrategy.isCreate() )\n+        {\n+            return runValidationCheck( bundle, klass, nonPersistedObjects, ImportStrategy.CREATE, context );\n+        }\n+        else if ( importStrategy.isUpdate() )\n+        {\n+            return runValidationCheck( bundle, klass, persistedObjects, ImportStrategy.UPDATE, context );\n+        }\n+        else\n+        {\n+            return new TypeReport( klass );\n+        }\n+\n+    }\n+\n+    private TypeReport runValidationCheck( ObjectBundle bundle, Class<? extends IdentifiableObject> klass,\n+        List<IdentifiableObject> objects, ImportStrategy importMode, ValidationContext ctx )\n+    {\n+\n+        TypeReport typeReport = new TypeReport( klass );\n+\n+        if ( objects == null || objects.isEmpty() )\n+        {\n+            return typeReport;\n+        }\n+\n+        Iterator<IdentifiableObject> iterator = objects.iterator();\n+        PreheatIdentifier identifier = bundle.getPreheatIdentifier();\n+\n+        while ( iterator.hasNext() )\n+        {\n+            IdentifiableObject object = iterator.next();\n+\n+            if ( importMode.isCreate() )\n+            {\n+                if ( !ctx.getAclService().canCreate( bundle.getUser(), klass ) )\n+                {\n+                    ErrorReport errorReport = new ErrorReport( klass, ErrorCode.E3000,\n+                        identifier.getIdentifiersWithName( bundle.getUser() ),\n+                        identifier.getIdentifiersWithName( object ) );\n+\n+                    ValidationUtils.addObjectReport( errorReport, typeReport, object, bundle);\n+                    ctx.markForRemoval( object );\n+                    continue;\n+                }\n+            }\n+            else\n+            {\n+                IdentifiableObject persistedObject = bundle.getPreheat().get( bundle.getPreheatIdentifier(), object );\n+\n+                if ( importMode.isUpdate() )\n+                {\n+                    if ( !ctx.getAclService().canUpdate( bundle.getUser(), persistedObject ) )\n+                    {\n+                        ErrorReport errorReport = new ErrorReport( klass, ErrorCode.E3001,\n+                            identifier.getIdentifiersWithName( bundle.getUser() ),\n+                            identifier.getIdentifiersWithName( object ) );\n+\n+                        ValidationUtils.addObjectReport( errorReport, typeReport, object, bundle);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45ee88cb7fb088f06b03bf5af3dd1e589900c0f8"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzgzODc1OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/metadata/objectbundle/validation/SecurityCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwODo1NDo1MlrOFze4LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwODo1NDo1MlrOFze4LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUyNzU5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    ValidationUtils.addObjectReport( errorReport, typeReport, object, bundle);\n          \n          \n            \n                                    ValidationUtils.addObjectReport( errorReport, typeReport, object, bundle );", "url": "https://github.com/dhis2/dhis2-core/pull/5015#discussion_r389527597", "createdAt": "2020-03-09T08:54:52Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/metadata/objectbundle/validation/SecurityCheck.java", "diffHunk": "@@ -0,0 +1,168 @@\n+package org.hisp.dhis.dxf2.metadata.objectbundle.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.hisp.dhis.dxf2.metadata.objectbundle.validation.ValidationUtils.addObjectReports;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import org.hisp.dhis.common.IdentifiableObject;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundle;\n+import org.hisp.dhis.feedback.ErrorCode;\n+import org.hisp.dhis.feedback.ErrorReport;\n+import org.hisp.dhis.feedback.TypeReport;\n+import org.hisp.dhis.importexport.ImportStrategy;\n+import org.hisp.dhis.preheat.PreheatIdentifier;\n+import org.hisp.dhis.user.User;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class SecurityCheck\n+    implements\n+    ValidationCheck\n+{\n+    @Override\n+    public TypeReport check( ObjectBundle bundle, Class<? extends IdentifiableObject> klass,\n+        List<IdentifiableObject> persistedObjects, List<IdentifiableObject> nonPersistedObjects,\n+        ImportStrategy importStrategy, ValidationContext context )\n+    {\n+\n+        if ( importStrategy.isCreateAndUpdate() )\n+        {\n+            TypeReport report = runValidationCheck( bundle, klass, persistedObjects, ImportStrategy.UPDATE, context );\n+            report.merge( runValidationCheck( bundle, klass, nonPersistedObjects, ImportStrategy.CREATE, context ) );\n+            return report;\n+        }\n+        else if ( importStrategy.isCreate() )\n+        {\n+            return runValidationCheck( bundle, klass, nonPersistedObjects, ImportStrategy.CREATE, context );\n+        }\n+        else if ( importStrategy.isUpdate() )\n+        {\n+            return runValidationCheck( bundle, klass, persistedObjects, ImportStrategy.UPDATE, context );\n+        }\n+        else\n+        {\n+            return new TypeReport( klass );\n+        }\n+\n+    }\n+\n+    private TypeReport runValidationCheck( ObjectBundle bundle, Class<? extends IdentifiableObject> klass,\n+        List<IdentifiableObject> objects, ImportStrategy importMode, ValidationContext ctx )\n+    {\n+\n+        TypeReport typeReport = new TypeReport( klass );\n+\n+        if ( objects == null || objects.isEmpty() )\n+        {\n+            return typeReport;\n+        }\n+\n+        Iterator<IdentifiableObject> iterator = objects.iterator();\n+        PreheatIdentifier identifier = bundle.getPreheatIdentifier();\n+\n+        while ( iterator.hasNext() )\n+        {\n+            IdentifiableObject object = iterator.next();\n+\n+            if ( importMode.isCreate() )\n+            {\n+                if ( !ctx.getAclService().canCreate( bundle.getUser(), klass ) )\n+                {\n+                    ErrorReport errorReport = new ErrorReport( klass, ErrorCode.E3000,\n+                        identifier.getIdentifiersWithName( bundle.getUser() ),\n+                        identifier.getIdentifiersWithName( object ) );\n+\n+                    ValidationUtils.addObjectReport( errorReport, typeReport, object, bundle);\n+                    ctx.markForRemoval( object );\n+                    continue;\n+                }\n+            }\n+            else\n+            {\n+                IdentifiableObject persistedObject = bundle.getPreheat().get( bundle.getPreheatIdentifier(), object );\n+\n+                if ( importMode.isUpdate() )\n+                {\n+                    if ( !ctx.getAclService().canUpdate( bundle.getUser(), persistedObject ) )\n+                    {\n+                        ErrorReport errorReport = new ErrorReport( klass, ErrorCode.E3001,\n+                            identifier.getIdentifiersWithName( bundle.getUser() ),\n+                            identifier.getIdentifiersWithName( object ) );\n+\n+                        ValidationUtils.addObjectReport( errorReport, typeReport, object, bundle);\n+                        ctx.markForRemoval( object );\n+                        continue;\n+                    }\n+                }\n+                else if ( importMode.isDelete() )\n+                {\n+                    if ( !ctx.getAclService().canDelete( bundle.getUser(), persistedObject ) )\n+                    {\n+                        ErrorReport errorReport = new ErrorReport( klass, ErrorCode.E3002,\n+                            identifier.getIdentifiersWithName( bundle.getUser() ),\n+                            identifier.getIdentifiersWithName( object ) );\n+\n+                        ValidationUtils.addObjectReport( errorReport, typeReport, object, bundle);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45ee88cb7fb088f06b03bf5af3dd1e589900c0f8"}, "originalPosition": 135}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3521, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}