{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4MTY5NjUx", "number": 4913, "title": "chore: (2.34) Refactor overall synchronization implementation", "bodyText": "Clean code\nMake code simpler and more consistent\nIntroduce JobParameters for DataSynchronizationJob\n\nDHIS2-6062", "createdAt": "2020-02-21T08:44:25Z", "url": "https://github.com/dhis2/dhis2-core/pull/4913", "merged": true, "mergeCommit": {"oid": "ef939a8e51bdbf02b2717be0d60ec7b804489958"}, "closed": true, "closedAt": "2020-02-28T14:40:18Z", "author": {"login": "huzvak"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcGbqCjgH2gAyMzc4MTY5NjUxOmZmNzkyNzMxY2UwMzI4YjU4MjAyODA2MTAzMzdmN2M5NzI4MWE5ZGU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcIw8JcgFqTM2NjQ0MjYyNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ff792731ce0328b5820280610337f7c97281a9de", "author": {"user": null}, "url": "https://github.com/dhis2/dhis2-core/commit/ff792731ce0328b5820280610337f7c97281a9de", "committedDate": "2020-02-21T08:42:59Z", "message": "chore: (2.34) Refactor overall synchronization implementation\n\n- Clean code\n- Make code simpler and more consistent\n- Introduce JobParameters for DataSynchronizationJob\n\nDHIS2-6062"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyNDc2NTcy", "url": "https://github.com/dhis2/dhis2-core/pull/4913#pullrequestreview-362476572", "createdAt": "2020-02-21T08:51:45Z", "commit": {"oid": "ff792731ce0328b5820280610337f7c97281a9de"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwODo1MTo0NVrOFsvl3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwODo1NDowMFrOFsvpfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ2MTQwNw==", "bodyText": "This class is fairly complex and, as far as I can see, there is no test coverage.", "url": "https://github.com/dhis2/dhis2-core/pull/4913#discussion_r382461407", "createdAt": "2020-02-21T08:51:45Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/sync/CompleteDataSetRegistrationSynchronization.java", "diffHunk": "@@ -27,83 +27,121 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-import lombok.extern.slf4j.Slf4j;\n-import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n-import org.hisp.dhis.dxf2.synch.SynchronizationManager;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.util.Date;\n+\n+import org.hisp.dhis.common.IdSchemes;\n+import org.hisp.dhis.dataset.CompleteDataSetRegistrationService;\n+import org.hisp.dhis.dxf2.dataset.CompleteDataSetRegistrationExchangeService;\n import org.hisp.dhis.setting.SettingKey;\n import org.hisp.dhis.setting.SystemSettingManager;\n import org.hisp.dhis.system.util.Clock;\n+import org.hisp.dhis.system.util.CodecUtils;\n+import org.springframework.http.MediaType;\n import org.springframework.stereotype.Component;\n+import org.springframework.web.client.RequestCallback;\n import org.springframework.web.client.RestTemplate;\n \n-import java.util.Date;\n-\n-import static com.google.common.base.Preconditions.checkNotNull;\n+import lombok.extern.slf4j.Slf4j;\n \n /**\n- * @author David Katuscak\n+ * @author David Katuscak <katuscak.d@gmail.com>\n  */\n @Slf4j\n @Component\n-public class CompleteDataSetRegistrationSynchronization", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff792731ce0328b5820280610337f7c97281a9de"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ2MTgwOA==", "bodyText": "This private initialization may be hard to unit test, especially because static calls are used (SyncUtils.getLastSyncSuccess(..))", "url": "https://github.com/dhis2/dhis2-core/pull/4913#discussion_r382461808", "createdAt": "2020-02-21T08:52:43Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/sync/CompleteDataSetRegistrationSynchronization.java", "diffHunk": "@@ -27,83 +27,121 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-import lombok.extern.slf4j.Slf4j;\n-import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n-import org.hisp.dhis.dxf2.synch.SynchronizationManager;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.util.Date;\n+\n+import org.hisp.dhis.common.IdSchemes;\n+import org.hisp.dhis.dataset.CompleteDataSetRegistrationService;\n+import org.hisp.dhis.dxf2.dataset.CompleteDataSetRegistrationExchangeService;\n import org.hisp.dhis.setting.SettingKey;\n import org.hisp.dhis.setting.SystemSettingManager;\n import org.hisp.dhis.system.util.Clock;\n+import org.hisp.dhis.system.util.CodecUtils;\n+import org.springframework.http.MediaType;\n import org.springframework.stereotype.Component;\n+import org.springframework.web.client.RequestCallback;\n import org.springframework.web.client.RestTemplate;\n \n-import java.util.Date;\n-\n-import static com.google.common.base.Preconditions.checkNotNull;\n+import lombok.extern.slf4j.Slf4j;\n \n /**\n- * @author David Katuscak\n+ * @author David Katuscak <katuscak.d@gmail.com>\n  */\n @Slf4j\n @Component\n-public class CompleteDataSetRegistrationSynchronization\n+public class CompleteDataSetRegistrationSynchronization extends DataSynchronizationWithoutPaging\n {\n-    private final SynchronizationManager synchronizationManager;\n-\n     private final SystemSettingManager systemSettingManager;\n-\n     private final RestTemplate restTemplate;\n+    private final CompleteDataSetRegistrationService completeDataSetRegistrationService;\n+    private final CompleteDataSetRegistrationExchangeService completeDataSetRegistrationExchangeService;\n+\n+    private Date lastUpdatedAfter;\n \n-    public CompleteDataSetRegistrationSynchronization( SynchronizationManager synchronizationManager,\n-        SystemSettingManager systemSettingManager, RestTemplate restTemplate )\n+    public CompleteDataSetRegistrationSynchronization( SystemSettingManager systemSettingManager,\n+        RestTemplate restTemplate, CompleteDataSetRegistrationService completeDataSetRegistrationService,\n+        CompleteDataSetRegistrationExchangeService completeDataSetRegistrationExchangeService )\n     {\n-        checkNotNull( synchronizationManager );\n         checkNotNull( systemSettingManager );\n         checkNotNull( restTemplate );\n+        checkNotNull( completeDataSetRegistrationService );\n+        checkNotNull( completeDataSetRegistrationExchangeService );\n \n-        this.synchronizationManager = synchronizationManager;\n         this.systemSettingManager = systemSettingManager;\n         this.restTemplate = restTemplate;\n+        this.completeDataSetRegistrationService = completeDataSetRegistrationService;\n+        this.completeDataSetRegistrationExchangeService = completeDataSetRegistrationExchangeService;\n     }\n \n-    public SynchronizationResult syncCompleteDataSetRegistrationData()\n+    @Override\n+    public SynchronizationResult synchronizeData()\n     {\n         if ( !SyncUtils.testServerAvailability( systemSettingManager, restTemplate ).isAvailable() )\n         {\n             return SynchronizationResult.newFailureResultWithMessage(\n-                \"Complete data set registration synchronization failed. Remote \" +\n-                    \"server is unavailable.\" );\n+                \"Complete data set registration synchronization failed. Remote server is unavailable.\" );\n         }\n-        final Clock clock = new Clock( log ).startClock()\n-            .logTime( \"Starting Complete data set registration synchronization job.\" );\n-\n-        // ---------------------------------------------------------------------\n-        // Set time for last success to start of process to make data saved\n-        // subsequently part of next synch process without being ignored\n-        // ---------------------------------------------------------------------\n-        ImportSummary importSummary;\n-        try\n-        {\n-            importSummary = synchronizationManager.executeCompleteDataSetRegistrationPush();\n-            if ( SyncUtils\n-                .checkSummaryStatus( importSummary, SyncEndpoint.COMPLETE_DATA_SET_REGISTRATIONS ) )\n-            {\n-                String resultMsg = \"Complete data set registration synchronization job is done. It took \";\n-                clock.logTime( \"SUCCESS! \" + resultMsg );\n-                SyncUtils.setLastSyncSuccess( systemSettingManager,\n-                    SettingKey.LAST_SUCCESSFUL_COMPLETE_DATA_SET_REGISTRATION_SYNC,\n-                    new Date( clock.getStartTime() ) );\n-                return SynchronizationResult\n-                    .newSuccessResultWithMessage( resultMsg + clock.getTime() + \" ms.\" );\n-            }\n \n+        initializeSyncVariables();\n+\n+        if ( objectsToSynchronize == 0 )\n+        {\n+            SyncUtils.setLastSyncSuccess( systemSettingManager,\n+                SettingKey.LAST_SUCCESSFUL_COMPLETE_DATA_SET_REGISTRATION_SYNC, new Date( clock.getStartTime() ) );\n+            log.info( \"Skipping completeness synchronization, no new or updated data\" );\n+            return SynchronizationResult.newSuccessResultWithMessage( \"Skipping completeness synchronization, no new or updated data\" );\n         }\n-        catch ( Exception ex )\n+\n+        if ( sendSyncRequest() )\n         {\n-            log.error(\n-                \"Exception happened while trying complete data set registration push \" + ex.getMessage(),\n-                ex );\n+            String resultMsg = \"Complete data set registration synchronization is done. It took \";\n+            clock.logTime( \"SUCCESS! \" + resultMsg );\n+            SyncUtils.setLastSyncSuccess( systemSettingManager,\n+                SettingKey.LAST_SUCCESSFUL_COMPLETE_DATA_SET_REGISTRATION_SYNC,\n+                new Date( clock.getStartTime() ) );\n+\n+            return SynchronizationResult.newSuccessResultWithMessage( resultMsg + clock.getTime() + \" ms.\" );\n         }\n+\n         return SynchronizationResult\n             .newFailureResultWithMessage( \"Complete data set registration synchronization failed.\" );\n     }\n+\n+    private void initializeSyncVariables()\n+    {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff792731ce0328b5820280610337f7c97281a9de"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ2MjMzNA==", "bodyText": "No test coverage for this class, as far as I can see", "url": "https://github.com/dhis2/dhis2-core/pull/4913#discussion_r382462334", "createdAt": "2020-02-21T08:54:00Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/sync/EventSynchronization.java", "diffHunk": "@@ -42,18 +49,14 @@\n import org.springframework.stereotype.Component;\n import org.springframework.web.client.RequestCallback;\n import org.springframework.web.client.RestTemplate;\n-import java.util.Date;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n-import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import lombok.extern.slf4j.Slf4j;\n /**\n  * @author David Katuscak <katuscak.d@gmail.com>\n  */\n @Slf4j\n @Component\n-public class EventSynchronization extends DataSynchronization\n+public class EventSynchronization extends DataSynchronizationWithPaging", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff792731ce0328b5820280610337f7c97281a9de"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyNjMwNDEx", "url": "https://github.com/dhis2/dhis2-core/pull/4913#pullrequestreview-362630411", "createdAt": "2020-02-21T13:34:03Z", "commit": {"oid": "ff792731ce0328b5820280610337f7c97281a9de"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMzozNDowNFrOFs3ALA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMzozNDowNFrOFs3ALA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU4MjgyOA==", "bodyText": "System.out to be removed or changed to Log", "url": "https://github.com/dhis2/dhis2-core/pull/4913#discussion_r382582828", "createdAt": "2020-02-21T13:34:04Z", "author": {"login": "enricocolasante"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/synch/DataSynchronizationJob.java", "diffHunk": "@@ -67,46 +83,24 @@ public JobType getJobType()\n     @Override\n     public void execute( JobConfiguration jobConfiguration )\n     {\n-        try\n-        {\n-            synchronizationManager.executeDataValuePush();\n-        }\n-        catch ( RuntimeException ex )\n-        {\n-            notifier.notify( jobConfiguration, \"Data value sync failed: \" + ex.getMessage() );\n-        }\n-        catch ( WebMessageParseException e )\n-        {\n-            log.error(\"Error while executing data value sync task. \"+ e.getMessage(), e );\n-        }\n+        DataSynchronizationJobParameters jobParameters =\n+            (DataSynchronizationJobParameters) jobConfiguration.getJobParameters();\n+        System.out.println( \"Page size: \" + jobParameters.getPageSize() );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff792731ce0328b5820280610337f7c97281a9de"}, "originalPosition": 79}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyNjM0NjQ0", "url": "https://github.com/dhis2/dhis2-core/pull/4913#pullrequestreview-362634644", "createdAt": "2020-02-21T13:41:08Z", "commit": {"oid": "ff792731ce0328b5820280610337f7c97281a9de"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMzo0MTowOFrOFs3Meg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMzo0MTowOFrOFs3Meg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU4NTk3OA==", "bodyText": "Is this abstract class still needed at all?\nIt seems to me that having an abstract class just with fields reduce a lot the readability of the code.", "url": "https://github.com/dhis2/dhis2-core/pull/4913#discussion_r382585978", "createdAt": "2020-02-21T13:41:08Z", "author": {"login": "enricocolasante"}, "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/sync/DataSynchronization.java", "diffHunk": "@@ -37,22 +37,7 @@\n public abstract class DataSynchronization\n {\n     protected boolean syncResult = false;\n-    protected int pages;\n     protected Clock clock;\n     protected int objectsToSynchronize;\n     protected SystemInstance instance;\n-\n-    public abstract SynchronizationResult synchronizeData( final int pageSize );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff792731ce0328b5820280610337f7c97281a9de"}, "originalPosition": 9}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c18a52c1881349478c7b349d2a2de18587a543b", "author": {"user": null}, "url": "https://github.com/dhis2/dhis2-core/commit/6c18a52c1881349478c7b349d2a2de18587a543b", "committedDate": "2020-02-28T08:19:24Z", "message": "chore: (2.35) Code cleanup\n\nDHIS2-6062"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a36034066d1707289fb55ecb5cb8a6de609517a", "author": {"user": null}, "url": "https://github.com/dhis2/dhis2-core/commit/2a36034066d1707289fb55ecb5cb8a6de609517a", "committedDate": "2020-02-28T08:19:53Z", "message": "test: (2.35) Unit tests\n\nDHIS2-6062"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2NDM5MTcy", "url": "https://github.com/dhis2/dhis2-core/pull/4913#pullrequestreview-366439172", "createdAt": "2020-02-28T14:33:46Z", "commit": {"oid": "2a36034066d1707289fb55ecb5cb8a6de609517a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2NDQyNjI1", "url": "https://github.com/dhis2/dhis2-core/pull/4913#pullrequestreview-366442625", "createdAt": "2020-02-28T14:38:37Z", "commit": {"oid": "2a36034066d1707289fb55ecb5cb8a6de609517a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2835, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}