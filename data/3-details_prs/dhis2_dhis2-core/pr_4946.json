{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5MzkzMzE5", "number": 4946, "title": "feat: Support file resource in TEAV", "bodyText": "DHIS2-8357", "createdAt": "2020-02-25T06:36:10Z", "url": "https://github.com/dhis2/dhis2-core/pull/4946", "merged": true, "mergeCommit": {"oid": "ea409426202aeaf2aaa76f6dce14af4cf5c9697d"}, "closed": true, "closedAt": "2020-02-25T10:17:36Z", "author": {"login": "mortenoh"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcHsPEXAH2gAyMzc5MzkzMzE5Ojk5MTUwY2FkZmEwMDEzMjhlN2I3NTBlZDdjNWQyNmUzODM4ZDlkOWI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcHvZlTAH2gAyMzc5MzkzMzE5OjRiZDcyMjNkNGIwMThiZTBlZjkzZDgyOWE0MGViNTllMTFmYmM0YTk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "99150cadfa001328e7b750ed7c5d26e3838d9d9b", "author": {"user": {"login": "mortenoh", "name": "Morten Hansen"}}, "url": "https://github.com/dhis2/dhis2-core/commit/99150cadfa001328e7b750ed7c5d26e3838d9d9b", "committedDate": "2020-02-25T06:35:50Z", "message": "feat: Support file resource in TEAV"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1303395b1b019005b903677c832340f33941256", "author": {"user": {"login": "mortenoh", "name": "Morten Hansen"}}, "url": "https://github.com/dhis2/dhis2-core/commit/c1303395b1b019005b903677c832340f33941256", "committedDate": "2020-02-25T09:07:22Z", "message": "fix: set assigned = false for fileResouces when deleting TEAV"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MDE0MDQ2", "url": "https://github.com/dhis2/dhis2-core/pull/4946#pullrequestreview-364014046", "createdAt": "2020-02-25T10:05:22Z", "commit": {"oid": "c1303395b1b019005b903677c832340f33941256"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMDowNToyMlrOFt_6TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMDowNToyMlrOFt_6TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc3NzM1Nw==", "bodyText": "minor: you can create a function here where you pass the attributes:\nprivate void collectResouceId(List<Attributes> attributes, List<String> fileResourceIds) {\nattributes..forEach( at -> {\n                if ( fileResourceAttributes.contains( at.getAttribute() ) && !StringUtils.isEmpty( at.getValue() ) )\n                {\n                    fileResourceIds.add( at.getValue() );\n                }\n}", "url": "https://github.com/dhis2/dhis2-core/pull/4946#discussion_r383777357", "createdAt": "2020-02-25T10:05:22Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/hooks/FileResourceTrackerPreheatHook.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package org.hisp.dhis.tracker.preheat.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.common.BaseIdentifiableObject;\n+import org.hisp.dhis.common.ValueType;\n+import org.hisp.dhis.fileresource.FileResource;\n+import org.hisp.dhis.fileresource.FileResourceService;\n+import org.hisp.dhis.trackedentity.TrackedEntityAttribute;\n+import org.hisp.dhis.tracker.preheat.TrackerPreheat;\n+import org.hisp.dhis.tracker.preheat.TrackerPreheatHook;\n+import org.hisp.dhis.tracker.preheat.TrackerPreheatParams;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StringUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * @author Morten Olav Hansen <mortenoh@gmail.com>\n+ */\n+@Component\n+public class FileResourceTrackerPreheatHook\n+    implements TrackerPreheatHook\n+{\n+    private final FileResourceService fileResourceService;\n+\n+    public FileResourceTrackerPreheatHook( FileResourceService fileResourceService )\n+    {\n+        this.fileResourceService = fileResourceService;\n+    }\n+\n+    @Override\n+    public void preheat( TrackerPreheatParams params, TrackerPreheat preheat )\n+    {\n+        List<TrackedEntityAttribute> attributes = preheat.getAll( params.getIdentifier(), TrackedEntityAttribute.class );\n+\n+        List<String> fileResourceAttributes = attributes.stream()\n+            .filter( at -> at.getValueType() == ValueType.FILE_RESOURCE )\n+            .map( BaseIdentifiableObject::getUid )\n+            .collect( Collectors.toList() );\n+\n+        List<String> fileResourceIds = new ArrayList<>();\n+\n+        params.getTrackedEntities().forEach( te -> {\n+            te.getAttributes().forEach( at -> {\n+                if ( fileResourceAttributes.contains( at.getAttribute() ) && !StringUtils.isEmpty( at.getValue() ) )\n+                {\n+                    fileResourceIds.add( at.getValue() );\n+                }\n+            } );\n+        } );\n+\n+        params.getEnrollments().forEach( en -> {\n+            en.getAttributes().forEach( at -> {\n+                if ( fileResourceAttributes.contains( at.getAttribute() ) && !StringUtils.isEmpty( at.getValue() ) )\n+                {\n+                    fileResourceIds.add( at.getValue() );\n+                }\n+            } );\n+        } );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1303395b1b019005b903677c832340f33941256"}, "originalPosition": 88}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MDE0MTcx", "url": "https://github.com/dhis2/dhis2-core/pull/4946#pullrequestreview-364014171", "createdAt": "2020-02-25T10:05:34Z", "commit": {"oid": "c1303395b1b019005b903677c832340f33941256"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4bd7223d4b018be0ef93d829a40eb59e11fbc4a9", "author": {"user": {"login": "mortenoh", "name": "Morten Hansen"}}, "url": "https://github.com/dhis2/dhis2-core/commit/4bd7223d4b018be0ef93d829a40eb59e11fbc4a9", "committedDate": "2020-02-25T10:17:02Z", "message": "refactor: split out handling of fileResourceId collection"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2840, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}