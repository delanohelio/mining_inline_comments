{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIxNjE4MjU2", "number": 6683, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMjoyNTozM1rOE5dSeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMjozMDo0NFrOE5dfMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4Njg0MTUyOnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/RelationshipsValidationHook.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMjoyNTozM1rOHz7lXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMzowMjowM1rOHz9vxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIxNTY0Nw==", "bodyText": "Here we use \"get\"+\"From\"/\"To\", while further down we just use \"relationshipType\", maybe we should omit the \"get\" part? Looks better in my opinion:\nrelationship.from, relationship.to, relationship.relationshiptype", "url": "https://github.com/dhis2/dhis2-core/pull/6683#discussion_r524215647", "createdAt": "2020-11-16T12:25:33Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/RelationshipsValidationHook.java", "diffHunk": "@@ -89,37 +87,57 @@ public void validateRelationship( ValidationErrorReporter reporter, Relationship\n             return;\n         }\n \n-        validateRelationshipType( reporter, relationship, bundle.getPreheat() );\n-        validateAutoRelationship( reporter, relationship );\n-        validateBidirectionalDuplicatedRelationships( reporter, bundle, relationship );\n+        boolean isValid = validateMandatoryData( reporter, relationship,\n+            bundle.getPreheat().getAll( TrackerIdScheme.UID, RelationshipType.class ) );\n+\n+        // No need to check additional data if there are missing information on the\n+        // Relationship\n+        if ( isValid )\n+        {\n+            validateRelationshipConstraint( reporter, relationship, bundle );\n+\n+            validateAutoRelationship( reporter, relationship );\n+\n+            // validateReferences( reporter, bundle, relationship); // TODO Enrico\n+        }\n+\n     }\n \n-    private void validateBidirectionalDuplicatedRelationships( ValidationErrorReporter reporter, TrackerBundle bundle,\n-        Relationship relationship )\n+    private void validateRelationshipConstraint( ValidationErrorReporter reporter, Relationship relationship,\n+        TrackerBundle bundle )\n     {\n-        List<Pair<RelationshipItem, RelationshipItem>> relationships =\n-            bundle.getRelationships()\n-                .stream()\n-                .map( r -> new ImmutablePair<>( r.getFrom(), r.getTo() ) )\n-                .collect( Collectors.toList() );\n+        getRelationshipType( bundle.getPreheat().getAll( TrackerIdScheme.UID, RelationshipType.class ),\n+            relationship.getRelationshipType() ).ifPresent( relationshipType -> {\n+\n+                validateRelationshipConstraint( \"from\", relationship.getFrom(), relationshipType.getFromConstraint() )\n+                    .forEach( reporter::addError );\n+                validateRelationshipConstraint( \"to\", relationship.getTo(), relationshipType.getToConstraint() )\n+                    .forEach( reporter::addError );\n \n-        List<ImmutablePair<RelationshipItem, RelationshipItem>> bidirectionalRelationship = Lists\n-            .newArrayList( relationship )\n-            .stream()\n-            .filter( Relationship::isBidirectional )\n-            .map( r -> new ImmutablePair<>( r.getTo(), r.getFrom() ) )\n-            .collect( Collectors.toList() );\n+            } );\n+    }\n \n-        relationships.addAll( bidirectionalRelationship );\n+    private boolean validateMandatoryData( ValidationErrorReporter reporter, Relationship relationship,\n+        List<RelationshipType> relationshipsTypes )\n+    {\n+        addErrorIfNull( relationship.getFrom(), reporter, E4007, \"relationship.getFrom\" );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7998fc91636b2383831507741c75ad36e173db75"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI1MTA3OQ==", "bodyText": "Fixed, the argument was actually ignored. The error message is shown in the PR commit message.", "url": "https://github.com/dhis2/dhis2-core/pull/6683#discussion_r524251079", "createdAt": "2020-11-16T13:02:03Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/RelationshipsValidationHook.java", "diffHunk": "@@ -89,37 +87,57 @@ public void validateRelationship( ValidationErrorReporter reporter, Relationship\n             return;\n         }\n \n-        validateRelationshipType( reporter, relationship, bundle.getPreheat() );\n-        validateAutoRelationship( reporter, relationship );\n-        validateBidirectionalDuplicatedRelationships( reporter, bundle, relationship );\n+        boolean isValid = validateMandatoryData( reporter, relationship,\n+            bundle.getPreheat().getAll( TrackerIdScheme.UID, RelationshipType.class ) );\n+\n+        // No need to check additional data if there are missing information on the\n+        // Relationship\n+        if ( isValid )\n+        {\n+            validateRelationshipConstraint( reporter, relationship, bundle );\n+\n+            validateAutoRelationship( reporter, relationship );\n+\n+            // validateReferences( reporter, bundle, relationship); // TODO Enrico\n+        }\n+\n     }\n \n-    private void validateBidirectionalDuplicatedRelationships( ValidationErrorReporter reporter, TrackerBundle bundle,\n-        Relationship relationship )\n+    private void validateRelationshipConstraint( ValidationErrorReporter reporter, Relationship relationship,\n+        TrackerBundle bundle )\n     {\n-        List<Pair<RelationshipItem, RelationshipItem>> relationships =\n-            bundle.getRelationships()\n-                .stream()\n-                .map( r -> new ImmutablePair<>( r.getFrom(), r.getTo() ) )\n-                .collect( Collectors.toList() );\n+        getRelationshipType( bundle.getPreheat().getAll( TrackerIdScheme.UID, RelationshipType.class ),\n+            relationship.getRelationshipType() ).ifPresent( relationshipType -> {\n+\n+                validateRelationshipConstraint( \"from\", relationship.getFrom(), relationshipType.getFromConstraint() )\n+                    .forEach( reporter::addError );\n+                validateRelationshipConstraint( \"to\", relationship.getTo(), relationshipType.getToConstraint() )\n+                    .forEach( reporter::addError );\n \n-        List<ImmutablePair<RelationshipItem, RelationshipItem>> bidirectionalRelationship = Lists\n-            .newArrayList( relationship )\n-            .stream()\n-            .filter( Relationship::isBidirectional )\n-            .map( r -> new ImmutablePair<>( r.getTo(), r.getFrom() ) )\n-            .collect( Collectors.toList() );\n+            } );\n+    }\n \n-        relationships.addAll( bidirectionalRelationship );\n+    private boolean validateMandatoryData( ValidationErrorReporter reporter, Relationship relationship,\n+        List<RelationshipType> relationshipsTypes )\n+    {\n+        addErrorIfNull( relationship.getFrom(), reporter, E4007, \"relationship.getFrom\" );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIxNTY0Nw=="}, "originalCommit": {"oid": "7998fc91636b2383831507741c75ad36e173db75"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4Njg2NDg4OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/RelationshipsValidationHook.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMjoyOToyMVrOHz702g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMzowNDo1MlrOHz91nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIxOTYxMA==", "bodyText": "This is just a note, more than feedback:\nI was thinking we have to validate that wrong values are not inserted as well (IE. tei inserted, when constraint is EVENT).\nHowever, we actually ignore other values when comitting, so I say we don't add that validation, unless you think it makes sense to report sending too much data (wrong data is already covered, assuming wrong data = wrong constraint type)", "url": "https://github.com/dhis2/dhis2-core/pull/6683#discussion_r524219610", "createdAt": "2020-11-16T12:29:21Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/RelationshipsValidationHook.java", "diffHunk": "@@ -130,128 +148,58 @@ private void validateAutoRelationship( ValidationErrorReporter reporter, Relatio\n         }\n     }\n \n-    private void validateRelationshipType( ValidationErrorReporter reporter,\n-        Relationship relationship, TrackerPreheat preheat )\n+    private String relationshipItemValueType( RelationshipItem item )\n     {\n-        List<RelationshipType> relationshipsTypes = preheat.getAll( TrackerIdScheme.UID, RelationshipType.class );\n-        Optional<RelationshipType> optionalRelationshipType = relationshipsTypes.stream()\n-            .filter( type -> type.getUid().equals( relationship.getRelationshipType() ) ).findFirst();\n-\n-        if ( !optionalRelationshipType.isPresent() )\n-        {\n-            addError( reporter, E4004, RELATIONSHIP_TYPE );\n-            return;\n-        }\n-\n-        if ( relationship.getFrom() == null )\n+        if ( StringUtils.isNotEmpty( item.getTrackedEntity() ) )\n         {\n-            addError( reporter, E4004, \"relationship.getFrom\" );\n+            return TRACKED_ENTITY;\n         }\n-        else\n-        {\n-            optionalRelationshipType\n-                .ifPresent( relationshipType -> validateRelationshipConstraint( relationship.getFrom(),\n-                    relationshipType.getFromConstraint() )\n-                        .stream()\n-                        .forEach( reporter::addError ) );\n-        }\n-\n-        if ( relationship.getTo() == null )\n+        else if ( StringUtils.isNotEmpty( item.getEnrollment() ) )\n         {\n-            addError( reporter, E4004, \"relationship.getTo\" );\n+            return ENROLLMENT;\n         }\n-        else\n+        else if ( StringUtils.isNotEmpty( item.getEvent() ) )\n         {\n-            if ( optionalRelationshipType.isPresent() )\n-            {\n-                validateRelationshipConstraint( relationship.getTo(),\n-                    optionalRelationshipType.get().getToConstraint() )\n-                    .stream()\n-                    .forEach( reporter::addError );\n-                ;\n-            }\n+            return EVENT;\n         }\n-\n+        return null;\n     }\n \n-    private List<TrackerErrorReport.TrackerErrorReportBuilder> validateRelationshipConstraint( RelationshipItem item,\n-        RelationshipConstraint relationshipType )\n+    private List<TrackerErrorReport.TrackerErrorReportBuilder> validateRelationshipConstraint( String relSide,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7998fc91636b2383831507741c75ad36e173db75"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI1MjU3NQ==", "bodyText": "@stian-sandvold Ah, I didn't know. I'll ping you so we can discuss.", "url": "https://github.com/dhis2/dhis2-core/pull/6683#discussion_r524252575", "createdAt": "2020-11-16T13:04:52Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/RelationshipsValidationHook.java", "diffHunk": "@@ -130,128 +148,58 @@ private void validateAutoRelationship( ValidationErrorReporter reporter, Relatio\n         }\n     }\n \n-    private void validateRelationshipType( ValidationErrorReporter reporter,\n-        Relationship relationship, TrackerPreheat preheat )\n+    private String relationshipItemValueType( RelationshipItem item )\n     {\n-        List<RelationshipType> relationshipsTypes = preheat.getAll( TrackerIdScheme.UID, RelationshipType.class );\n-        Optional<RelationshipType> optionalRelationshipType = relationshipsTypes.stream()\n-            .filter( type -> type.getUid().equals( relationship.getRelationshipType() ) ).findFirst();\n-\n-        if ( !optionalRelationshipType.isPresent() )\n-        {\n-            addError( reporter, E4004, RELATIONSHIP_TYPE );\n-            return;\n-        }\n-\n-        if ( relationship.getFrom() == null )\n+        if ( StringUtils.isNotEmpty( item.getTrackedEntity() ) )\n         {\n-            addError( reporter, E4004, \"relationship.getFrom\" );\n+            return TRACKED_ENTITY;\n         }\n-        else\n-        {\n-            optionalRelationshipType\n-                .ifPresent( relationshipType -> validateRelationshipConstraint( relationship.getFrom(),\n-                    relationshipType.getFromConstraint() )\n-                        .stream()\n-                        .forEach( reporter::addError ) );\n-        }\n-\n-        if ( relationship.getTo() == null )\n+        else if ( StringUtils.isNotEmpty( item.getEnrollment() ) )\n         {\n-            addError( reporter, E4004, \"relationship.getTo\" );\n+            return ENROLLMENT;\n         }\n-        else\n+        else if ( StringUtils.isNotEmpty( item.getEvent() ) )\n         {\n-            if ( optionalRelationshipType.isPresent() )\n-            {\n-                validateRelationshipConstraint( relationship.getTo(),\n-                    optionalRelationshipType.get().getToConstraint() )\n-                    .stream()\n-                    .forEach( reporter::addError );\n-                ;\n-            }\n+            return EVENT;\n         }\n-\n+        return null;\n     }\n \n-    private List<TrackerErrorReport.TrackerErrorReportBuilder> validateRelationshipConstraint( RelationshipItem item,\n-        RelationshipConstraint relationshipType )\n+    private List<TrackerErrorReport.TrackerErrorReportBuilder> validateRelationshipConstraint( String relSide,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIxOTYxMA=="}, "originalCommit": {"oid": "7998fc91636b2383831507741c75ad36e173db75"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4Njg3NDA4OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMjozMDo0NFrOHz76zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMzowNToyMlrOHz92sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIyMTEzNQ==", "bodyText": "Could not find RelationShipType: {0}.\"  -> can you change to relationshipType?", "url": "https://github.com/dhis2/dhis2-core/pull/6683#discussion_r524221135", "createdAt": "2020-11-16T12:30:44Z", "author": {"login": "vilkg"}, "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java", "diffHunk": "@@ -145,11 +145,14 @@\n     E4000( \"Relationship: `{0}` cannot link to itself\" ),\n     E4001( \"Property `{0}` can not be set when property `{1}` is `{2}`. \" ),\n     E4002( \"Property `{0}` must be set when property `{1}` is `{2}`. \" ),\n-    E4003( \"There are duplicated relationships. \" ),\n-    E4004( \"Missing required property: 'relationshipType'.\" ),\n+    E4003( \"There are duplicated relationships.\" ),\n+    E4004( \"Missing required relationship property: 'relationshipType'.\" ),\n     E4005( \"RelationShip: `{0}`, do not exist.\" ),\n     E4006( \"Could not find RelationShipType: `{0}`.\"  ),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7998fc91636b2383831507741c75ad36e173db75"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIyNTk4MQ==", "bodyText": "\ud83d\udea2", "url": "https://github.com/dhis2/dhis2-core/pull/6683#discussion_r524225981", "createdAt": "2020-11-16T12:35:22Z", "author": {"login": "stian-sandvold"}, "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java", "diffHunk": "@@ -145,11 +145,14 @@\n     E4000( \"Relationship: `{0}` cannot link to itself\" ),\n     E4001( \"Property `{0}` can not be set when property `{1}` is `{2}`. \" ),\n     E4002( \"Property `{0}` must be set when property `{1}` is `{2}`. \" ),\n-    E4003( \"There are duplicated relationships. \" ),\n-    E4004( \"Missing required property: 'relationshipType'.\" ),\n+    E4003( \"There are duplicated relationships.\" ),\n+    E4004( \"Missing required relationship property: 'relationshipType'.\" ),\n     E4005( \"RelationShip: `{0}`, do not exist.\" ),\n     E4006( \"Could not find RelationShipType: `{0}`.\"  ),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIyMTEzNQ=="}, "originalCommit": {"oid": "7998fc91636b2383831507741c75ad36e173db75"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI1Mjg0OA==", "bodyText": ":) gone", "url": "https://github.com/dhis2/dhis2-core/pull/6683#discussion_r524252848", "createdAt": "2020-11-16T13:05:22Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java", "diffHunk": "@@ -145,11 +145,14 @@\n     E4000( \"Relationship: `{0}` cannot link to itself\" ),\n     E4001( \"Property `{0}` can not be set when property `{1}` is `{2}`. \" ),\n     E4002( \"Property `{0}` must be set when property `{1}` is `{2}`. \" ),\n-    E4003( \"There are duplicated relationships. \" ),\n-    E4004( \"Missing required property: 'relationshipType'.\" ),\n+    E4003( \"There are duplicated relationships.\" ),\n+    E4004( \"Missing required relationship property: 'relationshipType'.\" ),\n     E4005( \"RelationShip: `{0}`, do not exist.\" ),\n     E4006( \"Could not find RelationShipType: `{0}`.\"  ),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIyMTEzNQ=="}, "originalCommit": {"oid": "7998fc91636b2383831507741c75ad36e173db75"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3728, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}