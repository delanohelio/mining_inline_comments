{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxMDQzOTE4", "number": 5794, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMDo0NjoxNFrOEToJDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMTowODo0NlrOETojbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDE2MDc2OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/schema/PropertyTransformer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMDo0NjoxNFrOG5d3sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMDo0NjoxNFrOG5d3sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkxMTQxMQ==", "bodyText": "Would be good to have Javadocs here", "url": "https://github.com/dhis2/dhis2-core/pull/5794#discussion_r462911411", "createdAt": "2020-07-30T10:46:14Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/schema/PropertyTransformer.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package org.hisp.dhis.schema;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+/**\n+ * @author Morten Olav Hansen <mortenoh@gmail.com>\n+ */\n+@FunctionalInterface", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69329de64cb7c6dbc10b0dac80a6642adfc28663"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDIyODI5OnYy", "diffSide": "RIGHT", "path": "dhis-2/dhis-services/dhis-service-node/src/main/java/org/hisp/dhis/fieldfilter/DefaultFieldFilterService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMTowODo0NlrOG5ehQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMTowODo0NlrOG5ehQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkyMjA1MA==", "bodyText": "Consider using a \"caching\" layer here to avoid using reflection, which in this specific case could happen quite often, since the User is often part of payloads.", "url": "https://github.com/dhis2/dhis2-core/pull/5794#discussion_r462922050", "createdAt": "2020-07-30T11:08:46Z", "author": {"login": "luciano-fiandesio"}, "path": "dhis-2/dhis-services/dhis-service-node/src/main/java/org/hisp/dhis/fieldfilter/DefaultFieldFilterService.java", "diffHunk": "@@ -277,7 +285,36 @@ private AbstractNode buildNode( FieldMap fieldMap, Class<?> klass, Object object\n             Object returnValue = ReflectionUtils.invokeMethod( object, property.getGetterMethod() );\n             Class<?> propertyClass = property.getKlass();\n             Schema propertySchema = schemaService.getDynamicSchema( propertyClass );\n-            if ( returnValue != null && propertySchema.getProperties().isEmpty() && !property.isCollection() && property.getKlass().isInterface() && !property.isIdentifiableObject() )\n+\n+            if ( property.hasPropertyTransformer() )\n+            {\n+                PropertyTransformer propertyTransformer;\n+\n+                try\n+                {\n+                    propertyTransformer = property.getPropertyTransformer().newInstance();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69329de64cb7c6dbc10b0dac80a6642adfc28663"}, "originalPosition": 93}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3986, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}