{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2MTA3Nzg0", "number": 266, "title": "[OC-737] Add an object entity in the user service", "bodyText": "Please can you review this pull request ?\nThank you.", "createdAt": "2020-04-20T14:43:30Z", "url": "https://github.com/opfab/operatorfabric-core/pull/266", "merged": true, "mergeCommit": {"oid": "2d38cd0011cc5af45844d5f118e3ce7357fb8e0f"}, "closed": true, "closedAt": "2020-04-21T15:11:19Z", "author": {"login": "vlo-rte"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZgIuigH2gAyNDA2MTA3Nzg0OmUzNjI2MWY1ZjA5MWI0OTlkN2U4ZGJkZjNjODc1Yzc5MDQzZDBjNzI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcZ1K-sgFqTM5NzQyOTg4OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e36261f5f091b499d7e8dbdf3c875c79043d0c72", "author": {"user": null}, "url": "https://github.com/opfab/operatorfabric-core/commit/e36261f5f091b499d7e8dbdf3c875c79043d0c72", "committedDate": "2020-04-20T14:40:41Z", "message": "[OC-737] Add an object entity in the user service"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "544da399957dc8b11209f7df90c04ac22db81ab5", "author": {"user": {"login": "rlg-pro", "name": null}}, "url": "https://github.com/opfab/operatorfabric-core/commit/544da399957dc8b11209f7df90c04ac22db81ab5", "committedDate": "2020-04-21T08:33:13Z", "message": "Merge branch 'master' into OC-737"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3MjM2MjI3", "url": "https://github.com/opfab/operatorfabric-core/pull/266#pullrequestreview-397236227", "createdAt": "2020-04-21T11:25:44Z", "commit": {"oid": "544da399957dc8b11209f7df90c04ac22db81ab5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMToyNTo0NFrOGJAoPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMToyNTo0NFrOGJAoPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEwMDY2OA==", "bodyText": "It could may be possible to use peek\u00a0method to putt all the actions perform upon the userData to update into one place and then collect it in a list in order to save it ? it would be more compact and more functional.", "url": "https://github.com/opfab/operatorfabric-core/pull/266#discussion_r412100668", "createdAt": "2020-04-21T11:25:44Z", "author": {"login": "rlg-pro"}, "path": "services/core/users/src/main/java/org/lfenergy/operatorfabric/users/controllers/EntitiesController.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/* Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ *\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+\n+\n+package org.lfenergy.operatorfabric.users.controllers;\n+\n+import org.lfenergy.operatorfabric.springtools.configuration.oauth.UpdatedUserEvent;\n+import org.lfenergy.operatorfabric.springtools.error.model.ApiError;\n+import org.lfenergy.operatorfabric.springtools.error.model.ApiErrorException;\n+import org.lfenergy.operatorfabric.users.model.Entity;\n+import org.lfenergy.operatorfabric.users.model.EntityData;\n+import org.lfenergy.operatorfabric.users.model.UserData;\n+import org.lfenergy.operatorfabric.users.repositories.EntityRepository;\n+import org.lfenergy.operatorfabric.users.repositories.UserRepository;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.cloud.bus.ServiceMatcher;\n+import org.springframework.context.ApplicationEventPublisher;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+\n+/**\n+ * GroupsController, documented at {@link EntitiesApi}\n+ *\n+ */\n+@RestController\n+@RequestMapping(\"/entities\")\n+public class EntitiesController implements EntitiesApi {\n+\n+    public static final String ENTITY_NOT_FOUND_MSG = \"Entity %s not found\";\n+    public static final String USER_NOT_FOUND_MSG = \"User %s not found\";\n+    public static final String BAD_USER_LIST_MSG = \"Bad user list : user %s not found\";\n+    public static final String NO_MATCHING_ENTITY_ID_MSG = \"Payload Entity id does not match URL Entity id\";\n+    @Autowired\n+    private EntityRepository entityRepository;\n+    @Autowired\n+    private UserRepository userRepository;\n+\n+    /* These are Spring Cloud Bus beans used to fire an event (UpdatedUserEvent) every time a user is modified.\n+    *  Other services handle this event by clearing their user cache for the given user. See issue #64*/\n+    @Autowired\n+    private ServiceMatcher busServiceMatcher;\n+    @Autowired\n+    private ApplicationEventPublisher publisher;\n+\n+    @Override\n+    public Void addEntityUsers(HttpServletRequest request, HttpServletResponse response, String id, List<String> users) throws Exception {\n+\n+        //Only existing entities can be updated\n+        findEntityOrThrow(id);\n+\n+        //Retrieve users from repository for users list, throwing an error if a login is not found\n+        List<UserData> foundUsers = retrieveUsers(users);\n+\n+        for (UserData userData : foundUsers) {\n+            userData.addEntity(id);\n+            publisher.publishEvent(new UpdatedUserEvent(this, busServiceMatcher.getServiceId(), userData.getLogin()));\n+        }\n+        userRepository.saveAll(foundUsers);\n+        return null;\n+\n+    }\n+\n+    @Override\n+    public Entity createEntity(HttpServletRequest request, HttpServletResponse response, Entity entity) throws Exception {\n+        if(entityRepository.findById(entity.getId()).orElse(null) == null){\n+            response.addHeader(\"Location\", request.getContextPath() + \"/entities/\" + entity.getId());\n+            response.setStatus(201);\n+        }\n+        return entityRepository.save((EntityData) entity);\n+    }\n+\n+    @Override\n+    public Void deleteEntityUsers(HttpServletRequest request, HttpServletResponse response, String id) throws Exception {\n+\n+        //Only existing entities can be updated\n+         findEntityOrThrow(id);\n+\n+        //Retrieve users from repository for users list, throwing an error if a login is not found\n+        List<UserData> foundUsers = userRepository.findByEntitiesContaining(id);\n+\n+        if(foundUsers!=null) {\n+            for (UserData userData : foundUsers) {\n+                userData.deleteEntity(id);\n+                publisher.publishEvent(new UpdatedUserEvent(this, busServiceMatcher.getServiceId(), userData.getLogin()));\n+            }\n+            userRepository.saveAll(foundUsers);\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public Void deleteEntityUser(HttpServletRequest request, HttpServletResponse response, String id, String login) throws Exception {\n+\n+        //Only existing entities can be updated\n+        findEntityOrThrow(id);\n+\n+        //Retrieve users from repository for users list, throwing an error if a login is not found\n+        UserData foundUser = userRepository.findById(login).orElseThrow(()->new ApiErrorException(\n+                ApiError.builder()\n+                        .status(HttpStatus.NOT_FOUND)\n+                        .message(String.format(USER_NOT_FOUND_MSG, login))\n+                        .build()\n+        ));\n+\n+        if(foundUser!=null) {\n+                foundUser.deleteEntity(id);\n+                publisher.publishEvent(new UpdatedUserEvent(this, busServiceMatcher.getServiceId(), foundUser.getLogin()));\n+            userRepository.save(foundUser);\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public List<? extends Entity> fetchEntities(HttpServletRequest request, HttpServletResponse response) throws Exception {\n+        return entityRepository.findAll();\n+    }\n+\n+    @Override\n+    public Entity fetchEntity(HttpServletRequest request, HttpServletResponse response, String id) throws Exception {\n+        return entityRepository.findById(id).orElseThrow(\n+           ()-> new ApiErrorException(\n+              ApiError.builder()\n+                 .status(HttpStatus.NOT_FOUND)\n+                 .message(String.format(ENTITY_NOT_FOUND_MSG, id))\n+                 .build()\n+           )\n+        );\n+    }\n+\n+    @Override\n+    public Entity updateEntity(HttpServletRequest request, HttpServletResponse response, String id, Entity entity) throws Exception {\n+        //id from entity body parameter should match id path parameter\n+        if(!entity.getId().equals(id)){\n+            throw new ApiErrorException(\n+                    ApiError.builder()\n+                            .status(HttpStatus.BAD_REQUEST)\n+                            .message(NO_MATCHING_ENTITY_ID_MSG)\n+                            .build());\n+        } else {\n+            return createEntity(request, response, entity);\n+        }\n+\n+    }\n+\n+    @Override\n+    public Void updateEntityUsers(HttpServletRequest request, HttpServletResponse response, String id, List<String> users) throws Exception {\n+\n+        //Only existing entities can be updated\n+        findEntityOrThrow(id);\n+\n+        List<UserData> formerlyBelongs = userRepository.findByEntitiesContaining(id);\n+        List<String> newUsersInEntity = new ArrayList<>(users);\n+\n+        //Make sure the intended updated users list only contains logins existing in the repository, throwing an error if this is not the case\n+        retrieveUsers(users);\n+\n+        List<UserData> toUpdate = new ArrayList<>();\n+        formerlyBelongs.stream()\n+           .filter(u->!users.contains(u.getLogin()))\n+           .forEach(u-> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "544da399957dc8b11209f7df90c04ac22db81ab5"}, "originalPosition": 171}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f7ffb73954e4be5254fcbc78142f5ba77bf0ac6", "author": {"user": null}, "url": "https://github.com/opfab/operatorfabric-core/commit/7f7ffb73954e4be5254fcbc78142f5ba77bf0ac6", "committedDate": "2020-04-21T14:06:35Z", "message": "[OC-737] update from code review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3NDI5ODg4", "url": "https://github.com/opfab/operatorfabric-core/pull/266#pullrequestreview-397429888", "createdAt": "2020-04-21T15:11:09Z", "commit": {"oid": "7f7ffb73954e4be5254fcbc78142f5ba77bf0ac6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1310, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}