{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIxODQyMjcx", "number": 840, "title": "Support ES 7.10.0", "bodyText": "By submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-11-16T18:15:46Z", "url": "https://github.com/opensearch-project/security/pull/840", "merged": true, "mergeCommit": {"oid": "aebd4d685a1f4eb968147ba1c8048b64240566d6"}, "closed": true, "closedAt": "2020-11-30T19:53:41Z", "author": {"login": "vrozov"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABddJDcogH2gAyNTIxODQyMjcxOjc5YzIyOGIwMzA1ODhlYzZkMjc4OWM3NjYyNzcxNTg2ZGRiYzY1ZTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdhqf1LgFqTU0MTIyMzU4MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "79c228b030588ec6d2789c7662771586ddbc65e4", "author": {"user": {"login": "vrozov", "name": "Vlad Rozov"}}, "url": "https://github.com/opensearch-project/security/commit/79c228b030588ec6d2789c7662771586ddbc65e4", "committedDate": "2020-11-16T18:13:57Z", "message": "Support ES 7.10.0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da7c7b981538d776433cf8651d4d2ed930822fc1", "author": {"user": {"login": "vrozov", "name": "Vlad Rozov"}}, "url": "https://github.com/opensearch-project/security/commit/da7c7b981538d776433cf8651d4d2ed930822fc1", "committedDate": "2020-11-24T07:43:56Z", "message": "Fix masked aggregations"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "da7c7b981538d776433cf8651d4d2ed930822fc1", "author": {"user": {"login": "vrozov", "name": "Vlad Rozov"}}, "url": "https://github.com/opensearch-project/security/commit/da7c7b981538d776433cf8651d4d2ed930822fc1", "committedDate": "2020-11-24T07:43:56Z", "message": "Fix masked aggregations"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4MDgzMTAz", "url": "https://github.com/opensearch-project/security/pull/840#pullrequestreview-538083103", "createdAt": "2020-11-25T01:05:30Z", "commit": {"oid": "da7c7b981538d776433cf8651d4d2ed930822fc1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwMTowNTozMFrOH5fN9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwMTowNTozMFrOH5fN9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA0MjM1OA==", "bodyText": "nit: Would \"bInterClusterRequest\" be a better name given that it's being used in the conditions of IF statements and that \"isInterClusterRequest\" has been occupied by the method name?", "url": "https://github.com/opensearch-project/security/pull/840#discussion_r530042358", "createdAt": "2020-11-25T01:05:30Z", "author": {"login": "cliu123"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -541,56 +541,63 @@ public Weight doCache(Weight weight, QueryCachingPolicy policy) {\n             indexModule.addSearchOperationListener(new SearchOperationListener() {\n \n                 @Override\n-                public void onNewContext(SearchContext context) {\n-\n+                public void onPreQueryPhase(SearchContext context) {\n                     if(advancedModulesEnabled) {\n                         dlsFlsValve.handleSearchContext(context, threadPool, namedXContentRegistry);\n                     }\n                 }\n \n                 @Override\n-                public void onNewScrollContext(SearchContext context) {\n-\n-                    final ScrollContext scrollContext = context.scrollContext();\n+                public void onNewReaderContext(ReaderContext readerContext) {\n+                    final boolean interClusterRequest = HeaderHelper.isInterClusterRequest(threadPool.getThreadContext());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da7c7b981538d776433cf8651d4d2ed930822fc1"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4MDg1MDY1", "url": "https://github.com/opensearch-project/security/pull/840#pullrequestreview-538085065", "createdAt": "2020-11-25T01:11:34Z", "commit": {"oid": "da7c7b981538d776433cf8651d4d2ed930822fc1"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4MDc5Njc3", "url": "https://github.com/opensearch-project/security/pull/840#pullrequestreview-538079677", "createdAt": "2020-11-25T00:55:38Z", "commit": {"oid": "da7c7b981538d776433cf8651d4d2ed930822fc1"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwMDo1NTozOVrOH5fCnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwMTowODo1NFrOH5fRzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAzOTQ1Mg==", "bodyText": "minor: Wrong user in reader context.", "url": "https://github.com/opensearch-project/security/pull/840#discussion_r530039452", "createdAt": "2020-11-25T00:55:39Z", "author": {"login": "debjanibnrj"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -541,56 +541,63 @@ public Weight doCache(Weight weight, QueryCachingPolicy policy) {\n             indexModule.addSearchOperationListener(new SearchOperationListener() {\n \n                 @Override\n-                public void onNewContext(SearchContext context) {\n-\n+                public void onPreQueryPhase(SearchContext context) {\n                     if(advancedModulesEnabled) {\n                         dlsFlsValve.handleSearchContext(context, threadPool, namedXContentRegistry);\n                     }\n                 }\n \n                 @Override\n-                public void onNewScrollContext(SearchContext context) {\n-\n-                    final ScrollContext scrollContext = context.scrollContext();\n+                public void onNewReaderContext(ReaderContext readerContext) {\n+                    final boolean interClusterRequest = HeaderHelper.isInterClusterRequest(threadPool.getThreadContext());\n+                    if (Origin.LOCAL.toString().equals(threadPool.getThreadContext().getTransient(ConfigConstants.OPENDISTRO_SECURITY_ORIGIN))\n+                            && (interClusterRequest || HeaderHelper.isDirectRequest(threadPool.getThreadContext()))\n \n-                    if(scrollContext != null) {\n-\n-                        final boolean interClusterRequest = HeaderHelper.isInterClusterRequest(threadPool.getThreadContext());\n-                        if(Origin.LOCAL.toString().equals(threadPool.getThreadContext().getTransient(ConfigConstants.OPENDISTRO_SECURITY_ORIGIN))\n-                                && (interClusterRequest || HeaderHelper.isDirectRequest(threadPool.getThreadContext()))\n+                    ) {\n+                        readerContext.putInContext(\"_opendistro_security_scroll_auth_local\", Boolean.TRUE);\n+                    } else {\n+                        readerContext.putInContext(\"_opendistro_security_scroll_auth\", threadPool.getThreadContext()\n+                                .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER));\n+                    }\n+                }\n \n-                        ){\n-                            scrollContext.putInContext(\"_opendistro_security_scroll_auth_local\", Boolean.TRUE);\n+                @Override\n+                public void onNewScrollContext(ReaderContext readerContext) {\n+                    final boolean interClusterRequest = HeaderHelper.isInterClusterRequest(threadPool.getThreadContext());\n+                    if (Origin.LOCAL.toString().equals(threadPool.getThreadContext().getTransient(ConfigConstants.OPENDISTRO_SECURITY_ORIGIN))\n+                            && (interClusterRequest || HeaderHelper.isDirectRequest(threadPool.getThreadContext()))\n \n-                        } else {\n-                            scrollContext.putInContext(\"_opendistro_security_scroll_auth\", threadPool.getThreadContext()\n-                                    .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER));\n-                        }\n+                    ) {\n+                        readerContext.putInContext(\"_opendistro_security_scroll_auth_local\", Boolean.TRUE);\n+                    } else {\n+                        readerContext.putInContext(\"_opendistro_security_scroll_auth\", threadPool.getThreadContext()\n+                                .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER));\n                     }\n                 }\n \n                 @Override\n-                public void validateSearchContext(SearchContext context, TransportRequest transportRequest) {\n-\n-                    final ScrollContext scrollContext = context.scrollContext();\n-                    if(scrollContext != null) {\n-                        final Object _isLocal = scrollContext.getFromContext(\"_opendistro_security_scroll_auth_local\");\n-                        final Object _user = scrollContext.getFromContext(\"_opendistro_security_scroll_auth\");\n-                        if(_user != null && (_user instanceof User)) {\n-                            final User scrollUser = (User) _user;\n-                            final User currentUser = threadPool.getThreadContext()\n-                                    .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n-                            if(!scrollUser.equals(currentUser)) {\n-                                auditLog.logMissingPrivileges(SearchScrollAction.NAME, transportRequest, context.getTask());\n-                                log.error(\"Wrong user {} in scroll context, expected {}\", scrollUser, currentUser);\n-                                throw new ElasticsearchSecurityException(\"Wrong user in scroll context\", RestStatus.FORBIDDEN);\n-                            }\n-                        } else if(_isLocal != Boolean.TRUE) {\n-                            auditLog.logMissingPrivileges(SearchScrollAction.NAME, transportRequest, context.getTask());\n-                            throw new ElasticsearchSecurityException(\"No user in scroll context\", RestStatus.FORBIDDEN);\n+                public void validateReaderContext(ReaderContext readerContext, TransportRequest transportRequest) {\n+                    final Object _isLocal = readerContext.getFromContext(\"_opendistro_security_scroll_auth_local\");\n+                    final Object _user = readerContext.getFromContext(\"_opendistro_security_scroll_auth\");\n+                    if (_user != null && (_user instanceof User)) {\n+                        final User scrollUser = (User) _user;\n+                        final User currentUser = threadPool.getThreadContext()\n+                                .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n+                        if (!scrollUser.equals(currentUser)) {\n+                            auditLog.logMissingPrivileges(SearchScrollAction.NAME, transportRequest, null);\n+                            log.error(\"Wrong user {} in scroll context, expected {}\", scrollUser, currentUser);\n+                            throw new ElasticsearchSecurityException(\"Wrong user in scroll context\", RestStatus.FORBIDDEN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da7c7b981538d776433cf8651d4d2ed930822fc1"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA0MzM0MA==", "bodyText": "Curious what is going on here, can you possibly elaborate why we are aggregated query results here?", "url": "https://github.com/opensearch-project/security/pull/840#discussion_r530043340", "createdAt": "2020-11-25T01:08:54Z", "author": {"login": "debjanibnrj"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/DlsFlsValveImpl.java", "diffHunk": "@@ -140,4 +157,136 @@ public void handleSearchContext(SearchContext context, ThreadPool threadPool, Na\n \n     }\n \n+    @Override\n+    public void onQueryPhase(SearchContext searchContext, long tookInNanos) {\n+        QuerySearchResult queryResult = searchContext.queryResult();\n+        if (queryResult == null) {\n+            return;\n+        }\n+\n+        DelayableWriteable<InternalAggregations> aggregationsDelayedWritable = queryResult.aggregations();\n+        if (aggregationsDelayedWritable == null) {\n+            return;\n+        }\n+\n+        InternalAggregations aggregations = aggregationsDelayedWritable.expand();\n+        if (aggregations == null) {\n+            return;\n+        }\n+\n+        if (areBucketKeysDistinct(aggregations)) {\n+            return;\n+        }\n+\n+        log.debug(\"Found buckets with equal keys. Merging these buckets: {}\", aggregations);\n+\n+        // TODO check order\n+\n+        queryResult.aggregations(InternalAggregations.from(StreamSupport.stream(aggregations.spliterator(), false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da7c7b981538d776433cf8651d4d2ed930822fc1"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4MDg3ODkz", "url": "https://github.com/opensearch-project/security/pull/840#pullrequestreview-538087893", "createdAt": "2020-11-25T01:19:16Z", "commit": {"oid": "da7c7b981538d776433cf8651d4d2ed930822fc1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwMToxOToxN1rOH5felA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwMToxOToxN1rOH5felA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA0NjYxMg==", "bodyText": "No user in reader context.", "url": "https://github.com/opensearch-project/security/pull/840#discussion_r530046612", "createdAt": "2020-11-25T01:19:17Z", "author": {"login": "cliu123"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -541,56 +541,63 @@ public Weight doCache(Weight weight, QueryCachingPolicy policy) {\n             indexModule.addSearchOperationListener(new SearchOperationListener() {\n \n                 @Override\n-                public void onNewContext(SearchContext context) {\n-\n+                public void onPreQueryPhase(SearchContext context) {\n                     if(advancedModulesEnabled) {\n                         dlsFlsValve.handleSearchContext(context, threadPool, namedXContentRegistry);\n                     }\n                 }\n \n                 @Override\n-                public void onNewScrollContext(SearchContext context) {\n-\n-                    final ScrollContext scrollContext = context.scrollContext();\n+                public void onNewReaderContext(ReaderContext readerContext) {\n+                    final boolean interClusterRequest = HeaderHelper.isInterClusterRequest(threadPool.getThreadContext());\n+                    if (Origin.LOCAL.toString().equals(threadPool.getThreadContext().getTransient(ConfigConstants.OPENDISTRO_SECURITY_ORIGIN))\n+                            && (interClusterRequest || HeaderHelper.isDirectRequest(threadPool.getThreadContext()))\n \n-                    if(scrollContext != null) {\n-\n-                        final boolean interClusterRequest = HeaderHelper.isInterClusterRequest(threadPool.getThreadContext());\n-                        if(Origin.LOCAL.toString().equals(threadPool.getThreadContext().getTransient(ConfigConstants.OPENDISTRO_SECURITY_ORIGIN))\n-                                && (interClusterRequest || HeaderHelper.isDirectRequest(threadPool.getThreadContext()))\n+                    ) {\n+                        readerContext.putInContext(\"_opendistro_security_scroll_auth_local\", Boolean.TRUE);\n+                    } else {\n+                        readerContext.putInContext(\"_opendistro_security_scroll_auth\", threadPool.getThreadContext()\n+                                .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER));\n+                    }\n+                }\n \n-                        ){\n-                            scrollContext.putInContext(\"_opendistro_security_scroll_auth_local\", Boolean.TRUE);\n+                @Override\n+                public void onNewScrollContext(ReaderContext readerContext) {\n+                    final boolean interClusterRequest = HeaderHelper.isInterClusterRequest(threadPool.getThreadContext());\n+                    if (Origin.LOCAL.toString().equals(threadPool.getThreadContext().getTransient(ConfigConstants.OPENDISTRO_SECURITY_ORIGIN))\n+                            && (interClusterRequest || HeaderHelper.isDirectRequest(threadPool.getThreadContext()))\n \n-                        } else {\n-                            scrollContext.putInContext(\"_opendistro_security_scroll_auth\", threadPool.getThreadContext()\n-                                    .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER));\n-                        }\n+                    ) {\n+                        readerContext.putInContext(\"_opendistro_security_scroll_auth_local\", Boolean.TRUE);\n+                    } else {\n+                        readerContext.putInContext(\"_opendistro_security_scroll_auth\", threadPool.getThreadContext()\n+                                .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER));\n                     }\n                 }\n \n                 @Override\n-                public void validateSearchContext(SearchContext context, TransportRequest transportRequest) {\n-\n-                    final ScrollContext scrollContext = context.scrollContext();\n-                    if(scrollContext != null) {\n-                        final Object _isLocal = scrollContext.getFromContext(\"_opendistro_security_scroll_auth_local\");\n-                        final Object _user = scrollContext.getFromContext(\"_opendistro_security_scroll_auth\");\n-                        if(_user != null && (_user instanceof User)) {\n-                            final User scrollUser = (User) _user;\n-                            final User currentUser = threadPool.getThreadContext()\n-                                    .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n-                            if(!scrollUser.equals(currentUser)) {\n-                                auditLog.logMissingPrivileges(SearchScrollAction.NAME, transportRequest, context.getTask());\n-                                log.error(\"Wrong user {} in scroll context, expected {}\", scrollUser, currentUser);\n-                                throw new ElasticsearchSecurityException(\"Wrong user in scroll context\", RestStatus.FORBIDDEN);\n-                            }\n-                        } else if(_isLocal != Boolean.TRUE) {\n-                            auditLog.logMissingPrivileges(SearchScrollAction.NAME, transportRequest, context.getTask());\n-                            throw new ElasticsearchSecurityException(\"No user in scroll context\", RestStatus.FORBIDDEN);\n+                public void validateReaderContext(ReaderContext readerContext, TransportRequest transportRequest) {\n+                    final Object _isLocal = readerContext.getFromContext(\"_opendistro_security_scroll_auth_local\");\n+                    final Object _user = readerContext.getFromContext(\"_opendistro_security_scroll_auth\");\n+                    if (_user != null && (_user instanceof User)) {\n+                        final User scrollUser = (User) _user;\n+                        final User currentUser = threadPool.getThreadContext()\n+                                .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n+                        if (!scrollUser.equals(currentUser)) {\n+                            auditLog.logMissingPrivileges(SearchScrollAction.NAME, transportRequest, null);\n+                            log.error(\"Wrong user {} in scroll context, expected {}\", scrollUser, currentUser);\n+                            throw new ElasticsearchSecurityException(\"Wrong user in scroll context\", RestStatus.FORBIDDEN);\n                         }\n+                    } else if (_isLocal != Boolean.TRUE) {\n+                        auditLog.logMissingPrivileges(SearchScrollAction.NAME, transportRequest, null);\n+                        throw new ElasticsearchSecurityException(\"No user in scroll context\", RestStatus.FORBIDDEN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da7c7b981538d776433cf8651d4d2ed930822fc1"}, "originalPosition": 96}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a28c6fd46701474c1dc51992c59517e5960bebf0", "author": {"user": {"login": "vrozov", "name": "Vlad Rozov"}}, "url": "https://github.com/opensearch-project/security/commit/a28c6fd46701474c1dc51992c59517e5960bebf0", "committedDate": "2020-11-25T05:45:43Z", "message": "Code review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4ODYyNjc5", "url": "https://github.com/opensearch-project/security/pull/840#pullrequestreview-538862679", "createdAt": "2020-11-25T21:42:19Z", "commit": {"oid": "a28c6fd46701474c1dc51992c59517e5960bebf0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMTo0MjoxOVrOH6EtGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMTo0MjoxOVrOH6EtGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY1NjUzNg==", "bodyText": "should it be scroll context or reader context?", "url": "https://github.com/opensearch-project/security/pull/840#discussion_r530656536", "createdAt": "2020-11-25T21:42:19Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -577,20 +578,22 @@ public void onNewScrollContext(ReaderContext readerContext) {\n \n                 @Override\n                 public void validateReaderContext(ReaderContext readerContext, TransportRequest transportRequest) {\n-                    final Object _isLocal = readerContext.getFromContext(\"_opendistro_security_scroll_auth_local\");\n-                    final Object _user = readerContext.getFromContext(\"_opendistro_security_scroll_auth\");\n-                    if (_user != null && (_user instanceof User)) {\n-                        final User scrollUser = (User) _user;\n-                        final User currentUser = threadPool.getThreadContext()\n-                                .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n-                        if (!scrollUser.equals(currentUser)) {\n+                    if (transportRequest instanceof InternalScrollSearchRequest) {\n+                        final Object _isLocal = readerContext.getFromContext(\"_opendistro_security_scroll_auth_local\");\n+                        final Object _user = readerContext.getFromContext(\"_opendistro_security_scroll_auth\");\n+                        if (_user != null && (_user instanceof User)) {\n+                            final User scrollUser = (User) _user;\n+                            final User currentUser = threadPool.getThreadContext()\n+                                    .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n+                            if (!scrollUser.equals(currentUser)) {\n+                                auditLog.logMissingPrivileges(SearchScrollAction.NAME, transportRequest, null);\n+                                log.error(\"Wrong user {} in reader context, expected {}\", scrollUser, currentUser);\n+                                throw new ElasticsearchSecurityException(\"Wrong user in reader context\", RestStatus.FORBIDDEN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a28c6fd46701474c1dc51992c59517e5960bebf0"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7c9fc31ae17e30f4a33a4f934dbd365af6945d3", "author": {"user": {"login": "vrozov", "name": "Vlad Rozov"}}, "url": "https://github.com/opensearch-project/security/commit/b7c9fc31ae17e30f4a33a4f934dbd365af6945d3", "committedDate": "2020-11-28T05:31:09Z", "message": "Fix aggregation ordered by a masked key"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwODcyNjc3", "url": "https://github.com/opensearch-project/security/pull/840#pullrequestreview-540872677", "createdAt": "2020-11-30T12:43:33Z", "commit": {"oid": "b7c9fc31ae17e30f4a33a4f934dbd365af6945d3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMjo0MzozM1rOH75b6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMjo0MzozM1rOH75b6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU2OTA2NQ==", "bodyText": "Note: This is relatively hot code, it will be called for each query on each shard. The complexity of evalMap grows with the complexity of configurations. For complex configurations, evalMap might thus add some overhead to each query. Thus, it might be a good idea to have some load tests for these changes.", "url": "https://github.com/opensearch-project/security/pull/840#discussion_r532569065", "createdAt": "2020-11-30T12:43:33Z", "author": {"login": "nibix"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -541,53 +542,70 @@ public Weight doCache(Weight weight, QueryCachingPolicy policy) {\n             indexModule.addSearchOperationListener(new SearchOperationListener() {\n \n                 @Override\n-                public void onNewContext(SearchContext context) {\n-\n+                public void onPreQueryPhase(SearchContext context) {\n                     if(advancedModulesEnabled) {\n                         dlsFlsValve.handleSearchContext(context, threadPool, namedXContentRegistry);\n                     }\n                 }\n \n                 @Override\n-                public void onNewScrollContext(SearchContext context) {\n-\n-                    final ScrollContext scrollContext = context.scrollContext();\n+                public void onNewReaderContext(ReaderContext readerContext) {\n+                    final boolean interClusterRequest = HeaderHelper.isInterClusterRequest(threadPool.getThreadContext());\n+                    if (Origin.LOCAL.toString().equals(threadPool.getThreadContext().getTransient(ConfigConstants.OPENDISTRO_SECURITY_ORIGIN))\n+                            && (interClusterRequest || HeaderHelper.isDirectRequest(threadPool.getThreadContext()))\n \n-                    if(scrollContext != null) {\n-\n-                        final boolean interClusterRequest = HeaderHelper.isInterClusterRequest(threadPool.getThreadContext());\n-                        if(Origin.LOCAL.toString().equals(threadPool.getThreadContext().getTransient(ConfigConstants.OPENDISTRO_SECURITY_ORIGIN))\n-                                && (interClusterRequest || HeaderHelper.isDirectRequest(threadPool.getThreadContext()))\n+                    ) {\n+                        readerContext.putInContext(\"_opendistro_security_scroll_auth_local\", Boolean.TRUE);\n+                    } else {\n+                        readerContext.putInContext(\"_opendistro_security_scroll_auth\", threadPool.getThreadContext()\n+                                .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER));\n+                    }\n+                }\n \n-                        ){\n-                            scrollContext.putInContext(\"_opendistro_security_scroll_auth_local\", Boolean.TRUE);\n+                @Override\n+                public void onNewScrollContext(ReaderContext readerContext) {\n+                    final boolean interClusterRequest = HeaderHelper.isInterClusterRequest(threadPool.getThreadContext());\n+                    if (Origin.LOCAL.toString().equals(threadPool.getThreadContext().getTransient(ConfigConstants.OPENDISTRO_SECURITY_ORIGIN))\n+                            && (interClusterRequest || HeaderHelper.isDirectRequest(threadPool.getThreadContext()))\n \n-                        } else {\n-                            scrollContext.putInContext(\"_opendistro_security_scroll_auth\", threadPool.getThreadContext()\n-                                    .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER));\n-                        }\n+                    ) {\n+                        readerContext.putInContext(\"_opendistro_security_scroll_auth_local\", Boolean.TRUE);\n+                    } else {\n+                        readerContext.putInContext(\"_opendistro_security_scroll_auth\", threadPool.getThreadContext()\n+                                .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER));\n                     }\n                 }\n \n                 @Override\n-                public void validateSearchContext(SearchContext context, TransportRequest transportRequest) {\n-\n-                    final ScrollContext scrollContext = context.scrollContext();\n-                    if(scrollContext != null) {\n-                        final Object _isLocal = scrollContext.getFromContext(\"_opendistro_security_scroll_auth_local\");\n-                        final Object _user = scrollContext.getFromContext(\"_opendistro_security_scroll_auth\");\n-                        if(_user != null && (_user instanceof User)) {\n+                public void validateReaderContext(ReaderContext readerContext, TransportRequest transportRequest) {\n+                    if (transportRequest instanceof InternalScrollSearchRequest) {\n+                        final Object _isLocal = readerContext.getFromContext(\"_opendistro_security_scroll_auth_local\");\n+                        final Object _user = readerContext.getFromContext(\"_opendistro_security_scroll_auth\");\n+                        if (_user != null && (_user instanceof User)) {\n                             final User scrollUser = (User) _user;\n                             final User currentUser = threadPool.getThreadContext()\n                                     .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n-                            if(!scrollUser.equals(currentUser)) {\n-                                auditLog.logMissingPrivileges(SearchScrollAction.NAME, transportRequest, context.getTask());\n-                                log.error(\"Wrong user {} in scroll context, expected {}\", scrollUser, currentUser);\n-                                throw new ElasticsearchSecurityException(\"Wrong user in scroll context\", RestStatus.FORBIDDEN);\n+                            if (!scrollUser.equals(currentUser)) {\n+                                auditLog.logMissingPrivileges(SearchScrollAction.NAME, transportRequest, null);\n+                                log.error(\"Wrong user {} in reader context, expected {}\", scrollUser, currentUser);\n+                                throw new ElasticsearchSecurityException(\"Wrong user in reader context\", RestStatus.FORBIDDEN);\n                             }\n-                        } else if(_isLocal != Boolean.TRUE) {\n-                            auditLog.logMissingPrivileges(SearchScrollAction.NAME, transportRequest, context.getTask());\n-                            throw new ElasticsearchSecurityException(\"No user in scroll context\", RestStatus.FORBIDDEN);\n+                        } else if (_isLocal != Boolean.TRUE) {\n+                            auditLog.logMissingPrivileges(SearchScrollAction.NAME, transportRequest, null);\n+                            throw new ElasticsearchSecurityException(\"No user in reader context\", RestStatus.FORBIDDEN);\n+                        }\n+                    }\n+                }\n+\n+                @Override\n+                public void onQueryPhase(SearchContext searchContext, long tookInNanos) {\n+                    final Map<String, Set<String>> maskedFieldsMap = (Map<String, Set<String>>) HeaderHelper.deserializeSafeFromHeader(threadPool.getThreadContext(),\n+                            ConfigConstants.OPENDISTRO_SECURITY_MASKED_FIELD_HEADER);\n+                    final String maskedEval = OpenDistroSecurityUtils.evalMap(maskedFieldsMap, indexModule.getIndex().getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7c9fc31ae17e30f4a33a4f934dbd365af6945d3"}, "originalPosition": 103}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10d47c09844a40e550e4746f18c85100876d3215", "author": {"user": {"login": "vrozov", "name": "Vlad Rozov"}}, "url": "https://github.com/opensearch-project/security/commit/10d47c09844a40e550e4746f18c85100876d3215", "committedDate": "2020-11-30T17:16:53Z", "message": "Evaluate maskedFieldsMap only for term queries"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxMjA2MDk4", "url": "https://github.com/opensearch-project/security/pull/840#pullrequestreview-541206098", "createdAt": "2020-11-30T19:03:35Z", "commit": {"oid": "10d47c09844a40e550e4746f18c85100876d3215"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxMjIzNTgw", "url": "https://github.com/opensearch-project/security/pull/840#pullrequestreview-541223580", "createdAt": "2020-11-30T19:27:31Z", "commit": {"oid": "10d47c09844a40e550e4746f18c85100876d3215"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2664, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}