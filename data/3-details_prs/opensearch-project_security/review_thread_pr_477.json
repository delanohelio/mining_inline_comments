{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0NzUzMzkz", "number": 477, "reviewThreads": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMDozNzo0NFrOEAuE9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwMDo1MjowNlrOEBjwaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTkwMzkwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/dlic/auth/http/saml/SamlDOMMetadataResolver.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMDozNzo0NFrOGcLNeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMDo1MzoyMVrOGcru3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE5Njk4Ng==", "bodyText": "Does this ID needs to be different every time it is initialized?", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r432196986", "createdAt": "2020-05-29T00:37:44Z", "author": {"login": "palashhedau"}, "path": "src/main/java/com/amazon/dlic/auth/http/saml/SamlDOMMetadataResolver.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.amazon.dlic.auth.http.saml;\n+\n+import net.shibboleth.utilities.java.support.component.ComponentInitializationException;\n+import net.shibboleth.utilities.java.support.xml.BasicParserPool;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.Settings;\n+import org.opensaml.saml.metadata.resolver.impl.DOMMetadataResolver;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+public class SamlDOMMetadataResolver extends DOMMetadataResolver {\n+    protected final static Logger log = LogManager.getLogger(SamlDOMMetadataResolver.class);\n+\n+    private static int componentIdCounter = 0;\n+\n+    public SamlDOMMetadataResolver(Settings settings) throws Exception {\n+        super(getMetadataDOM(settings));\n+        setId(HTTPSamlAuthenticator.class.getName() + \"_\" + (++componentIdCounter));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47ccdeb0f43eb6198e2f30d6ede03d598ac58ec1"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU0ODI1Ng==", "bodyText": "Was following the format of https://github.com/opendistro-for-elasticsearch/security/blob/master/src/main/java/com/amazon/dlic/auth/http/saml/SamlHTTPMetadataResolver.java#L40", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r432548256", "createdAt": "2020-05-29T15:04:18Z", "author": {"login": "debjanibnrj"}, "path": "src/main/java/com/amazon/dlic/auth/http/saml/SamlDOMMetadataResolver.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.amazon.dlic.auth.http.saml;\n+\n+import net.shibboleth.utilities.java.support.component.ComponentInitializationException;\n+import net.shibboleth.utilities.java.support.xml.BasicParserPool;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.Settings;\n+import org.opensaml.saml.metadata.resolver.impl.DOMMetadataResolver;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+public class SamlDOMMetadataResolver extends DOMMetadataResolver {\n+    protected final static Logger log = LogManager.getLogger(SamlDOMMetadataResolver.class);\n+\n+    private static int componentIdCounter = 0;\n+\n+    public SamlDOMMetadataResolver(Settings settings) throws Exception {\n+        super(getMetadataDOM(settings));\n+        setId(HTTPSamlAuthenticator.class.getName() + \"_\" + (++componentIdCounter));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE5Njk4Ng=="}, "originalCommit": {"oid": "47ccdeb0f43eb6198e2f30d6ede03d598ac58ec1"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcyOTgyMA==", "bodyText": "Consider moving common initialization to createMetadataResolver()", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r432729820", "createdAt": "2020-05-29T20:53:21Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/dlic/auth/http/saml/SamlDOMMetadataResolver.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.amazon.dlic.auth.http.saml;\n+\n+import net.shibboleth.utilities.java.support.component.ComponentInitializationException;\n+import net.shibboleth.utilities.java.support.xml.BasicParserPool;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.Settings;\n+import org.opensaml.saml.metadata.resolver.impl.DOMMetadataResolver;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+public class SamlDOMMetadataResolver extends DOMMetadataResolver {\n+    protected final static Logger log = LogManager.getLogger(SamlDOMMetadataResolver.class);\n+\n+    private static int componentIdCounter = 0;\n+\n+    public SamlDOMMetadataResolver(Settings settings) throws Exception {\n+        super(getMetadataDOM(settings));\n+        setId(HTTPSamlAuthenticator.class.getName() + \"_\" + (++componentIdCounter));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE5Njk4Ng=="}, "originalCommit": {"oid": "47ccdeb0f43eb6198e2f30d6ede03d598ac58ec1"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTkyNjE2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMDo1MToyN1rOGcLbMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMDo1MToyN1rOGcLbMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIwMDQ5Nw==", "bodyText": "nit: indentation", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r432200497", "createdAt": "2020-05-29T00:51:27Z", "author": {"login": "palashhedau"}, "path": "src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java", "diffHunk": "@@ -104,11 +107,11 @@ public HTTPSamlAuthenticator(final Settings settings, final Path configPath) {\n                 throw new Exception(\"kibana_url is unconfigured\");\n             }\n \n-            if (idpMetadataUrl == null && idpMetadataFile == null) {\n-                throw new Exception(\"idp.metadata_url and idp.metadata_file are unconfigured\");\n+            if (idpMetadataUrl == null && idpMetadataFile == null && idpMetadataBody == null) {\n+                throw new Exception(\"idp.metadata_url, idp.metadata_file and idpMetadataBody are unconfigured\");\n             }\n \n-            this.metadataResolver = createMetadataResolver(settings, configPath);\n+             this.metadataResolver = createMetadataResolver(settings, configPath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47ccdeb0f43eb6198e2f30d6ede03d598ac58ec1"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTkyOTIxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/dlic/auth/http/saml/SamlDOMMetadataResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMDo1MzoyNVrOGcLdIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMDo1MzoyNVrOGcLdIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIwMDk5NA==", "bodyText": "twice \"e\" while logging?", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r432200994", "createdAt": "2020-05-29T00:53:25Z", "author": {"login": "palashhedau"}, "path": "src/main/java/com/amazon/dlic/auth/http/saml/SamlDOMMetadataResolver.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.amazon.dlic.auth.http.saml;\n+\n+import net.shibboleth.utilities.java.support.component.ComponentInitializationException;\n+import net.shibboleth.utilities.java.support.xml.BasicParserPool;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.Settings;\n+import org.opensaml.saml.metadata.resolver.impl.DOMMetadataResolver;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+public class SamlDOMMetadataResolver extends DOMMetadataResolver {\n+    protected final static Logger log = LogManager.getLogger(SamlDOMMetadataResolver.class);\n+\n+    private static int componentIdCounter = 0;\n+\n+    public SamlDOMMetadataResolver(Settings settings) throws Exception {\n+        super(getMetadataDOM(settings));\n+        setId(HTTPSamlAuthenticator.class.getName() + \"_\" + (++componentIdCounter));\n+        setRequireValidMetadata(true);\n+        setFailFastInitialization(false);\n+        BasicParserPool basicParserPool = new BasicParserPool();\n+        basicParserPool.initialize();\n+        setParserPool(basicParserPool);\n+    }\n+\n+    private static Element getMetadataDOM(Settings settings) throws Exception {\n+        String xmlString = settings.get(\"idp.metadata_body\", null);\n+\n+        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n+        factory.setNamespaceAware(true);\n+\n+        //API to obtain DOM Document instance\n+        DocumentBuilder builder = null;\n+        try\n+        {\n+            builder = factory.newDocumentBuilder();\n+            Document doc = builder.parse(new InputSource(new StringReader(xmlString)));\n+            return doc.getDocumentElement();\n+        } catch (Exception e)\n+        {\n+            log.error(\"Error while parsing SAML Metadata Body \"+ e, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47ccdeb0f43eb6198e2f30d6ede03d598ac58ec1"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTkzMTUxOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticatorTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMDo1NTowOFrOGcLewA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQyMDoxNzozM1rOGc1JXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIwMTQwOA==", "bodyText": "not sure we are adding roles. Will have to confirm", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r432201408", "createdAt": "2020-05-29T00:55:08Z", "author": {"login": "palashhedau"}, "path": "src/test/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticatorTest.java", "diffHunk": "@@ -151,6 +152,63 @@ public void basicTest() throws Exception {\n         Assert.assertEquals(\"horst\", jwt.getClaim(\"sub\"));\n     }\n \n+    @Test\n+    public void testMetadataBody() throws Exception {\n+        mockSamlIdpServer.setSignResponses(true);\n+        mockSamlIdpServer.loadSigningKeys(\"saml/kirk-keystore.jks\", \"kirk\");\n+        mockSamlIdpServer.setAuthenticateUser(\"horst\");\n+        mockSamlIdpServer.setEndpointQueryString(null);\n+\n+        // Note: We need to replace endpoint with mockSamlIdpServer endpoint\n+        final String metadataBody = FileHelper.loadFile(\"saml/metadata.xml\")\n+                                        .replaceAll(\"http://localhost:33667/\", mockSamlIdpServer.getMetadataUri());\n+\n+        Settings settings = Settings.builder().put(\"idp.metadata_body\", metadataBody)\n+            .put(\"kibana_url\", \"http://wherever\")\n+            .put(\"idp.entity_id\", mockSamlIdpServer.getIdpEntityId())\n+            .put(\"exchange_key\", \"abc\").put(\"roles_key\", \"roles\").put(\"path.home\", \".\").build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47ccdeb0f43eb6198e2f30d6ede03d598ac58ec1"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg4NDA2MQ==", "bodyText": "Was following the same Settings as other tests in this file -\nhttps://github.com/opendistro-for-elasticsearch/security/blob/master/src/test/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticatorTest.java#L125-L127", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r432884061", "createdAt": "2020-05-30T20:17:33Z", "author": {"login": "debjanibnrj"}, "path": "src/test/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticatorTest.java", "diffHunk": "@@ -151,6 +152,63 @@ public void basicTest() throws Exception {\n         Assert.assertEquals(\"horst\", jwt.getClaim(\"sub\"));\n     }\n \n+    @Test\n+    public void testMetadataBody() throws Exception {\n+        mockSamlIdpServer.setSignResponses(true);\n+        mockSamlIdpServer.loadSigningKeys(\"saml/kirk-keystore.jks\", \"kirk\");\n+        mockSamlIdpServer.setAuthenticateUser(\"horst\");\n+        mockSamlIdpServer.setEndpointQueryString(null);\n+\n+        // Note: We need to replace endpoint with mockSamlIdpServer endpoint\n+        final String metadataBody = FileHelper.loadFile(\"saml/metadata.xml\")\n+                                        .replaceAll(\"http://localhost:33667/\", mockSamlIdpServer.getMetadataUri());\n+\n+        Settings settings = Settings.builder().put(\"idp.metadata_body\", metadataBody)\n+            .put(\"kibana_url\", \"http://wherever\")\n+            .put(\"idp.entity_id\", mockSamlIdpServer.getIdpEntityId())\n+            .put(\"exchange_key\", \"abc\").put(\"roles_key\", \"roles\").put(\"path.home\", \".\").build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIwMTQwOA=="}, "originalCommit": {"oid": "47ccdeb0f43eb6198e2f30d6ede03d598ac58ec1"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTA0MTA2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxOTo1MzowMlrOGcqLIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQyMDoxNDo1NFrOGc1H5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcwNDI4OA==", "bodyText": "avoid throwing Exception, it should be either checked or run-time (preferred) Exception.", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r432704288", "createdAt": "2020-05-29T19:53:02Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java", "diffHunk": "@@ -76,7 +78,7 @@\n     private HTTPJwtAuthenticator httpJwtAuthenticator;\n     private Settings jwtSettings;\n \n-    public HTTPSamlAuthenticator(final Settings settings, final Path configPath) {\n+    public HTTPSamlAuthenticator(final Settings settings, final Path configPath) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47ccdeb0f43eb6198e2f30d6ede03d598ac58ec1"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg4MzY4NA==", "bodyText": "I would prefer some exception/error to be thrown if the XML entered by the user is invalid. If I make this a checked/runtime exception I don't want it to silently fail.", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r432883684", "createdAt": "2020-05-30T20:14:54Z", "author": {"login": "debjanibnrj"}, "path": "src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java", "diffHunk": "@@ -76,7 +78,7 @@\n     private HTTPJwtAuthenticator httpJwtAuthenticator;\n     private Settings jwtSettings;\n \n-    public HTTPSamlAuthenticator(final Settings settings, final Path configPath) {\n+    public HTTPSamlAuthenticator(final Settings settings, final Path configPath) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcwNDI4OA=="}, "originalCommit": {"oid": "47ccdeb0f43eb6198e2f30d6ede03d598ac58ec1"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTA1MjEwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxOTo1Njo1N1rOGcqSFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxOTo1Njo1N1rOGcqSFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcwNjA3MA==", "bodyText": "Consider \"One of idp.metadata_url, idp.metadata_file or idp.metadata_body must be configured\".", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r432706070", "createdAt": "2020-05-29T19:56:57Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java", "diffHunk": "@@ -104,11 +107,11 @@ public HTTPSamlAuthenticator(final Settings settings, final Path configPath) {\n                 throw new Exception(\"kibana_url is unconfigured\");\n             }\n \n-            if (idpMetadataUrl == null && idpMetadataFile == null) {\n-                throw new Exception(\"idp.metadata_url and idp.metadata_file are unconfigured\");\n+            if (idpMetadataUrl == null && idpMetadataFile == null && idpMetadataBody == null) {\n+                throw new Exception(\"idp.metadata_url, idp.metadata_file and idpMetadataBody are unconfigured\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47ccdeb0f43eb6198e2f30d6ede03d598ac58ec1"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTEzNzM4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMDoyOToyMFrOGcrIYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMDoyOToyMFrOGcrIYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcxOTk2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (idpMetadataUrl != null) {\n          \n          \n            \n                    final String idpMetadataBody = settings.get(\"idp.metadata_body\");\n          \n          \n            \n                    if (idpMetadataUrl != null) {\n          \n          \n            \n                        metadataResolver = new SamlHTTPMetadataResolver(idpMetadataUrl, settings, configPath);", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r432719968", "createdAt": "2020-05-29T20:29:20Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java", "diffHunk": "@@ -275,14 +278,16 @@ public Void run() throws InitializationException {\n         }\n     }\n \n-    private AbstractReloadingMetadataResolver createMetadataResolver(final Settings settings, final Path configPath)\n+    private AbstractBatchMetadataResolver createMetadataResolver(final Settings settings, final Path configPath)\n             throws Exception {\n-        final AbstractReloadingMetadataResolver metadataResolver;\n+        final AbstractBatchMetadataResolver metadataResolver;\n \n         if (idpMetadataUrl != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47ccdeb0f43eb6198e2f30d6ede03d598ac58ec1"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTE0MzM0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMDozMTo0M1rOGcrMMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMDozMTo0M1rOGcrMMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcyMDk0Nw==", "bodyText": "Similar\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } else if (idpMetadataFile != null) {\n          \n          \n            \n                    } else {\n          \n          \n            \n                        final String idpMetadataFile = settings.get(\"idp.metadata_file\");\n          \n          \n            \n                        if (idpMetadataFile != null) {\n          \n          \n            \n                            metadataResolver = new SamlFilesystemMetadataResolver(idpMetadataFile, settings, configPath);", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r432720947", "createdAt": "2020-05-29T20:31:43Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java", "diffHunk": "@@ -275,14 +278,16 @@ public Void run() throws InitializationException {\n         }\n     }\n \n-    private AbstractReloadingMetadataResolver createMetadataResolver(final Settings settings, final Path configPath)\n+    private AbstractBatchMetadataResolver createMetadataResolver(final Settings settings, final Path configPath)\n             throws Exception {\n-        final AbstractReloadingMetadataResolver metadataResolver;\n+        final AbstractBatchMetadataResolver metadataResolver;\n \n         if (idpMetadataUrl != null) {\n             metadataResolver = new SamlHTTPMetadataResolver(settings, configPath);\n-        } else {\n+        } else if (idpMetadataFile != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47ccdeb0f43eb6198e2f30d6ede03d598ac58ec1"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTE1MDc4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMDozNDozNFrOGcrQvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMDozNDozNFrOGcrQvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcyMjEwOA==", "bodyText": "Move check here:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    }\n          \n          \n            \n                    } else {\n          \n          \n            \n                       throw new RuntimeException(\"One of 'idp.metadata_url', 'idp.metadata_file' or 'idp.metadata_body' must be configured\");", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r432722108", "createdAt": "2020-05-29T20:34:34Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java", "diffHunk": "@@ -275,14 +278,16 @@ public Void run() throws InitializationException {\n         }\n     }\n \n-    private AbstractReloadingMetadataResolver createMetadataResolver(final Settings settings, final Path configPath)\n+    private AbstractBatchMetadataResolver createMetadataResolver(final Settings settings, final Path configPath)\n             throws Exception {\n-        final AbstractReloadingMetadataResolver metadataResolver;\n+        final AbstractBatchMetadataResolver metadataResolver;\n \n         if (idpMetadataUrl != null) {\n             metadataResolver = new SamlHTTPMetadataResolver(settings, configPath);\n-        } else {\n+        } else if (idpMetadataFile != null) {\n             metadataResolver = new SamlFilesystemMetadataResolver(settings, configPath);\n+        } else {\n+            metadataResolver = new SamlDOMMetadataResolver(settings);\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47ccdeb0f43eb6198e2f30d6ede03d598ac58ec1"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTE3MzgxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/dlic/auth/http/saml/SamlDOMMetadataResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMDo0MzoxM1rOGcre3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMDo0MzoxM1rOGcre3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcyNTcyNQ==", "bodyText": "remove unused imports", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r432725725", "createdAt": "2020-05-29T20:43:13Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/dlic/auth/http/saml/SamlDOMMetadataResolver.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.amazon.dlic.auth.http.saml;\n+\n+import net.shibboleth.utilities.java.support.component.ComponentInitializationException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47ccdeb0f43eb6198e2f30d6ede03d598ac58ec1"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTE3NzI3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/dlic/auth/http/saml/SamlDOMMetadataResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMDo0NDozOFrOGcrhNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMDo0NDozOFrOGcrhNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcyNjMyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected final static Logger log = LogManager.getLogger(SamlDOMMetadataResolver.class);\n          \n          \n            \n                private static final Logger log = LogManager.getLogger(SamlDOMMetadataResolver.class);", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r432726324", "createdAt": "2020-05-29T20:44:38Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/dlic/auth/http/saml/SamlDOMMetadataResolver.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.amazon.dlic.auth.http.saml;\n+\n+import net.shibboleth.utilities.java.support.component.ComponentInitializationException;\n+import net.shibboleth.utilities.java.support.xml.BasicParserPool;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.Settings;\n+import org.opensaml.saml.metadata.resolver.impl.DOMMetadataResolver;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+public class SamlDOMMetadataResolver extends DOMMetadataResolver {\n+    protected final static Logger log = LogManager.getLogger(SamlDOMMetadataResolver.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47ccdeb0f43eb6198e2f30d6ede03d598ac58ec1"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTIwMTU5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/dlic/auth/http/saml/SamlDOMMetadataResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMDo1NDowNlrOGcrwCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMDo1NDowNlrOGcrwCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjczMDEyMw==", "bodyText": "nit: no new line.", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r432730123", "createdAt": "2020-05-29T20:54:06Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/dlic/auth/http/saml/SamlDOMMetadataResolver.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.amazon.dlic.auth.http.saml;\n+\n+import net.shibboleth.utilities.java.support.component.ComponentInitializationException;\n+import net.shibboleth.utilities.java.support.xml.BasicParserPool;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.Settings;\n+import org.opensaml.saml.metadata.resolver.impl.DOMMetadataResolver;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+public class SamlDOMMetadataResolver extends DOMMetadataResolver {\n+    protected final static Logger log = LogManager.getLogger(SamlDOMMetadataResolver.class);\n+\n+    private static int componentIdCounter = 0;\n+\n+    public SamlDOMMetadataResolver(Settings settings) throws Exception {\n+        super(getMetadataDOM(settings));\n+        setId(HTTPSamlAuthenticator.class.getName() + \"_\" + (++componentIdCounter));\n+        setRequireValidMetadata(true);\n+        setFailFastInitialization(false);\n+        BasicParserPool basicParserPool = new BasicParserPool();\n+        basicParserPool.initialize();\n+        setParserPool(basicParserPool);\n+    }\n+\n+    private static Element getMetadataDOM(Settings settings) throws Exception {\n+        String xmlString = settings.get(\"idp.metadata_body\", null);\n+\n+        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n+        factory.setNamespaceAware(true);\n+\n+        //API to obtain DOM Document instance\n+        DocumentBuilder builder = null;\n+        try\n+        {\n+            builder = factory.newDocumentBuilder();\n+            Document doc = builder.parse(new InputSource(new StringReader(xmlString)));\n+            return doc.getDocumentElement();\n+        } catch (Exception e)\n+        {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47ccdeb0f43eb6198e2f30d6ede03d598ac58ec1"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTIwMjk3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/dlic/auth/http/saml/SamlDOMMetadataResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMDo1NDozN1rOGcrw6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMDo1NDozN1rOGcrw6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjczMDM0Ng==", "bodyText": "Use smart logging.", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r432730346", "createdAt": "2020-05-29T20:54:37Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/dlic/auth/http/saml/SamlDOMMetadataResolver.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.amazon.dlic.auth.http.saml;\n+\n+import net.shibboleth.utilities.java.support.component.ComponentInitializationException;\n+import net.shibboleth.utilities.java.support.xml.BasicParserPool;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.Settings;\n+import org.opensaml.saml.metadata.resolver.impl.DOMMetadataResolver;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+public class SamlDOMMetadataResolver extends DOMMetadataResolver {\n+    protected final static Logger log = LogManager.getLogger(SamlDOMMetadataResolver.class);\n+\n+    private static int componentIdCounter = 0;\n+\n+    public SamlDOMMetadataResolver(Settings settings) throws Exception {\n+        super(getMetadataDOM(settings));\n+        setId(HTTPSamlAuthenticator.class.getName() + \"_\" + (++componentIdCounter));\n+        setRequireValidMetadata(true);\n+        setFailFastInitialization(false);\n+        BasicParserPool basicParserPool = new BasicParserPool();\n+        basicParserPool.initialize();\n+        setParserPool(basicParserPool);\n+    }\n+\n+    private static Element getMetadataDOM(Settings settings) throws Exception {\n+        String xmlString = settings.get(\"idp.metadata_body\", null);\n+\n+        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n+        factory.setNamespaceAware(true);\n+\n+        //API to obtain DOM Document instance\n+        DocumentBuilder builder = null;\n+        try\n+        {\n+            builder = factory.newDocumentBuilder();\n+            Document doc = builder.parse(new InputSource(new StringReader(xmlString)));\n+            return doc.getDocumentElement();\n+        } catch (Exception e)\n+        {\n+            log.error(\"Error while parsing SAML Metadata Body \"+ e, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47ccdeb0f43eb6198e2f30d6ede03d598ac58ec1"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NjQxODk4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwMjozMjozNFrOGc2VsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwMjozMjozNFrOGc2VsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkwMzYwMA==", "bodyText": "Any initialization specific to SamlHTTPMetadataResolver will be better to keep inside SamlHTTPMetadataResolver constructor.", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r432903600", "createdAt": "2020-05-31T02:32:34Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java", "diffHunk": "@@ -275,14 +269,26 @@ public Void run() throws InitializationException {\n         }\n     }\n \n-    private AbstractReloadingMetadataResolver createMetadataResolver(final Settings settings, final Path configPath)\n+    private AbstractBatchMetadataResolver createMetadataResolver(final Settings settings, final Path configPath)\n             throws Exception {\n-        final AbstractReloadingMetadataResolver metadataResolver;\n+        final AbstractBatchMetadataResolver metadataResolver;\n+        final String idpMetadataUrl = settings.get(\"idp.metadata_url\");\n+        final String idpMetadataFile = settings.get(\"idp.metadata_file\");\n+        final String idpMetadataBody = settings.get(\"idp.metadata_body\");\n \n         if (idpMetadataUrl != null) {\n-            metadataResolver = new SamlHTTPMetadataResolver(settings, configPath);\n+            metadataResolver = new SamlHTTPMetadataResolver(idpMetadataUrl, settings, configPath);\n+            ((SamlHTTPMetadataResolver)metadataResolver).setMinRefreshDelay(settings.getAsLong(\"idp.min_refresh_delay\", 60L * 1000L));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NjQxOTkzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwMjozNTozN1rOGc2WMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwMjozNTozN1rOGc2WMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkwMzczMA==", "bodyText": "If you initialize idpMetadataUrl, idpMetadataFile and idpMetadataBody outside of if block, use else if. I used else in the suggestion to initialize idpMetadataFile.", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r432903730", "createdAt": "2020-05-31T02:35:37Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java", "diffHunk": "@@ -275,14 +269,26 @@ public Void run() throws InitializationException {\n         }\n     }\n \n-    private AbstractReloadingMetadataResolver createMetadataResolver(final Settings settings, final Path configPath)\n+    private AbstractBatchMetadataResolver createMetadataResolver(final Settings settings, final Path configPath)\n             throws Exception {\n-        final AbstractReloadingMetadataResolver metadataResolver;\n+        final AbstractBatchMetadataResolver metadataResolver;\n+        final String idpMetadataUrl = settings.get(\"idp.metadata_url\");\n+        final String idpMetadataFile = settings.get(\"idp.metadata_file\");\n+        final String idpMetadataBody = settings.get(\"idp.metadata_body\");\n \n         if (idpMetadataUrl != null) {\n-            metadataResolver = new SamlHTTPMetadataResolver(settings, configPath);\n+            metadataResolver = new SamlHTTPMetadataResolver(idpMetadataUrl, settings, configPath);\n+            ((SamlHTTPMetadataResolver)metadataResolver).setMinRefreshDelay(settings.getAsLong(\"idp.min_refresh_delay\", 60L * 1000L));\n+            ((SamlHTTPMetadataResolver)metadataResolver).setMaxRefreshDelay(settings.getAsLong(\"idp.max_refresh_delay\", 14400000L));\n+            ((SamlHTTPMetadataResolver)metadataResolver).setRefreshDelayFactor(settings.getAsFloat(\"idp.refresh_delay_factor\", 0.75f));\n         } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5Njg4MTQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxNzoxNToyMFrOGc6KpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxNzoxNToyMFrOGc6KpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk2NjMwOQ==", "bodyText": "nit: RuntimeException does not need to be declared", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r432966309", "createdAt": "2020-05-31T17:15:20Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java", "diffHunk": "@@ -75,16 +74,15 @@\n     private AuthTokenProcessorHandler authTokenProcessorHandler;\n     private HTTPJwtAuthenticator httpJwtAuthenticator;\n     private Settings jwtSettings;\n+    private static int resolverIdCounter = 0;\n \n-    public HTTPSamlAuthenticator(final Settings settings, final Path configPath) {\n+    public HTTPSamlAuthenticator(final Settings settings, final Path configPath) throws RuntimeException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5208805ab9960fd09a524284ef3c4c9c77257080"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NjkwNTkxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxNzo1NzoxOVrOGc6XUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMTozMToyNlrOGda2ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk2OTU1NQ==", "bodyText": "Note that, for example AbstractHTTPJwtAuthenticator, does not raise exception in case it is misconfigured similar to how HTTPSamlAuthenticator behaved. It will be good to revisit the behavior and make it consistent as part of a follow up PR.", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r432969555", "createdAt": "2020-05-31T17:57:19Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java", "diffHunk": "@@ -127,6 +121,7 @@ public HTTPSamlAuthenticator(final Settings settings, final Path configPath) {\n \n         } catch (Exception e) {\n             log.error(\"Error creating HTTPSamlAuthenticator: \" + e + \". SAML authentication will not work\", e);\n+            throw new RuntimeException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5208805ab9960fd09a524284ef3c4c9c77257080"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUwMTc5Ng==", "bodyText": "That makes sense, created https://github.com/opendistro-for-elasticsearch/security/issues/482 to follow up", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r433501796", "createdAt": "2020-06-01T21:31:26Z", "author": {"login": "debjanibnrj"}, "path": "src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java", "diffHunk": "@@ -127,6 +121,7 @@ public HTTPSamlAuthenticator(final Settings settings, final Path configPath) {\n \n         } catch (Exception e) {\n             log.error(\"Error creating HTTPSamlAuthenticator: \" + e + \". SAML authentication will not work\", e);\n+            throw new RuntimeException(e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk2OTU1NQ=="}, "originalCommit": {"oid": "5208805ab9960fd09a524284ef3c4c9c77257080"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NjkwNjg0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxNzo1OTowMFrOGc6Xzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxNzo1OTowMFrOGc6Xzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk2OTY3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private AbstractBatchMetadataResolver createMetadataResolver(final Settings settings, final Path configPath)\n          \n          \n            \n                private MetadataResolver createMetadataResolver(final Settings settings, final Path configPath)", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r432969678", "createdAt": "2020-05-31T17:59:00Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java", "diffHunk": "@@ -275,14 +269,21 @@ public Void run() throws InitializationException {\n         }\n     }\n \n-    private AbstractReloadingMetadataResolver createMetadataResolver(final Settings settings, final Path configPath)\n+    private AbstractBatchMetadataResolver createMetadataResolver(final Settings settings, final Path configPath)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5208805ab9960fd09a524284ef3c4c9c77257080"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NjkwNzEzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxNzo1OTozNFrOGc6X8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxNzo1OTozNFrOGc6X8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk2OTcxNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final AbstractBatchMetadataResolver metadataResolver;\n          \n          \n            \n                    final AbstractMetadataResolver metadataResolver;", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r432969714", "createdAt": "2020-05-31T17:59:34Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java", "diffHunk": "@@ -275,14 +269,21 @@ public Void run() throws InitializationException {\n         }\n     }\n \n-    private AbstractReloadingMetadataResolver createMetadataResolver(final Settings settings, final Path configPath)\n+    private AbstractBatchMetadataResolver createMetadataResolver(final Settings settings, final Path configPath)\n             throws Exception {\n-        final AbstractReloadingMetadataResolver metadataResolver;\n+        final AbstractBatchMetadataResolver metadataResolver;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5208805ab9960fd09a524284ef3c4c9c77257080"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NjkwOTg0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxODowNDozOVrOGc6ZWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxODowNDozOVrOGc6ZWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk3MDA3NQ==", "bodyText": "Use DOMMetadataResolver:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        metadataResolver = new SamlDOMMetadataResolver(idpMetadataBody);\n          \n          \n            \n                        metadataResolver = new DOMMetadataResolver(getMetadataDOM(idpMetadataBody));", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r432970075", "createdAt": "2020-05-31T18:04:39Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java", "diffHunk": "@@ -275,14 +269,21 @@ public Void run() throws InitializationException {\n         }\n     }\n \n-    private AbstractReloadingMetadataResolver createMetadataResolver(final Settings settings, final Path configPath)\n+    private AbstractBatchMetadataResolver createMetadataResolver(final Settings settings, final Path configPath)\n             throws Exception {\n-        final AbstractReloadingMetadataResolver metadataResolver;\n+        final AbstractBatchMetadataResolver metadataResolver;\n \n+        final String idpMetadataUrl = settings.get(\"idp.metadata_url\");\n+        final String idpMetadataFile = settings.get(\"idp.metadata_file\");\n+        final String idpMetadataBody = settings.get(\"idp.metadata_body\");\n         if (idpMetadataUrl != null) {\n-            metadataResolver = new SamlHTTPMetadataResolver(settings, configPath);\n+            metadataResolver = new SamlHTTPMetadataResolver(idpMetadataUrl, settings, configPath);\n+        } else if (idpMetadataFile != null) {\n+            metadataResolver = new SamlFilesystemMetadataResolver(idpMetadataFile, settings, configPath);\n+        } else if (idpMetadataBody != null) {\n+            metadataResolver = new SamlDOMMetadataResolver(idpMetadataBody);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5208805ab9960fd09a524284ef3c4c9c77257080"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NjkxMTU0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxODowNzoyN1rOGc6aOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxODowNzoyN1rOGc6aOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk3MDI5Ng==", "bodyText": "Is it necessary to run this code with elevated privileges? Can it be limited to metadataResolver.initialize();?", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r432970296", "createdAt": "2020-05-31T18:07:27Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java", "diffHunk": "@@ -295,6 +296,12 @@ private AbstractReloadingMetadataResolver createMetadataResolver(final Settings\n             AccessController.doPrivileged(new PrivilegedExceptionAction<Void>() {\n                 @Override\n                 public Void run() throws ComponentInitializationException {\n+                    metadataResolver.setId(HTTPSamlAuthenticator.class.getName() + \"_\" + (++resolverIdCounter));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5208805ab9960fd09a524284ef3c4c9c77257080"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NjkxMzc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/dlic/auth/http/saml/SamlDOMMetadataResolver.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxODoxMDo1OFrOGc6bVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxOTo0MTowOFrOGc62jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk3MDU4Mw==", "bodyText": "Move this method to HTTPSamlAuthenticator, declare it to throw ParserConfigurationException, SAXException, IOException and delete SamlDOMMetadataResolver class.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static Element getMetadataDOM(final String xmlString) throws Exception {\n          \n          \n            \n                private static Element getMetadataDOM(final String xmlString) throws ParserConfigurationException, SAXException, IOException {\n          \n          \n            \n                    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n          \n          \n            \n                    factory.setNamespaceAware(true);\n          \n          \n            \n            \n          \n          \n            \n                    DocumentBuilder builder = factory.newDocumentBuilder();\n          \n          \n            \n                    try {\n          \n          \n            \n                        Document doc = builder.parse(new InputSource(new StringReader(xmlString)));\n          \n          \n            \n                        return doc.getDocumentElement();\n          \n          \n            \n                    } catch (SAXException e) {\n          \n          \n            \n                        log.error(\"Error while parsing SAML Metadata Body {}\", xmlString, e);\n          \n          \n            \n                        throw e;\n          \n          \n            \n                    }\n          \n          \n            \n                }", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r432970583", "createdAt": "2020-05-31T18:10:58Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/dlic/auth/http/saml/SamlDOMMetadataResolver.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *  You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.dlic.auth.http.saml;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.opensaml.saml.metadata.resolver.impl.DOMMetadataResolver;\n+\n+import java.io.StringReader;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.xml.sax.InputSource;\n+\n+public class SamlDOMMetadataResolver extends DOMMetadataResolver {\n+    private final static Logger log = LogManager.getLogger(SamlDOMMetadataResolver.class);\n+\n+    public SamlDOMMetadataResolver(final String idpMetadataBody) throws Exception {\n+        super(getMetadataDOM(idpMetadataBody));\n+    }\n+\n+    private static Element getMetadataDOM(final String xmlString) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5208805ab9960fd09a524284ef3c4c9c77257080"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk3Mjk4MA==", "bodyText": "Any advantage of adding the logic in HTTPSamlAuthenticator vs a class. Thought of using a class as it would be consistent with the other Resolvers", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r432972980", "createdAt": "2020-05-31T18:42:15Z", "author": {"login": "debjanibnrj"}, "path": "src/main/java/com/amazon/dlic/auth/http/saml/SamlDOMMetadataResolver.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *  You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.dlic.auth.http.saml;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.opensaml.saml.metadata.resolver.impl.DOMMetadataResolver;\n+\n+import java.io.StringReader;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.xml.sax.InputSource;\n+\n+public class SamlDOMMetadataResolver extends DOMMetadataResolver {\n+    private final static Logger log = LogManager.getLogger(SamlDOMMetadataResolver.class);\n+\n+    public SamlDOMMetadataResolver(final String idpMetadataBody) throws Exception {\n+        super(getMetadataDOM(idpMetadataBody));\n+    }\n+\n+    private static Element getMetadataDOM(final String xmlString) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk3MDU4Mw=="}, "originalCommit": {"oid": "5208805ab9960fd09a524284ef3c4c9c77257080"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk3NzU0OA==", "bodyText": "There is no difference in functionality between SamlDOMMetadataResolver and its base class, so introduction of SamlDOMMetadataResolver is not necessary, compared to other MetadataResolver classes that implement fetchMetadata().", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r432977548", "createdAt": "2020-05-31T19:41:08Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/dlic/auth/http/saml/SamlDOMMetadataResolver.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *  You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.dlic.auth.http.saml;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.opensaml.saml.metadata.resolver.impl.DOMMetadataResolver;\n+\n+import java.io.StringReader;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.xml.sax.InputSource;\n+\n+public class SamlDOMMetadataResolver extends DOMMetadataResolver {\n+    private final static Logger log = LogManager.getLogger(SamlDOMMetadataResolver.class);\n+\n+    public SamlDOMMetadataResolver(final String idpMetadataBody) throws Exception {\n+        super(getMetadataDOM(idpMetadataBody));\n+    }\n+\n+    private static Element getMetadataDOM(final String xmlString) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk3MDU4Mw=="}, "originalCommit": {"oid": "5208805ab9960fd09a524284ef3c4c9c77257080"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NjkxNTIxOnYy", "diffSide": "RIGHT", "path": "src/test/resources/saml/metadata.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxODoxMzozOFrOGc6cFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxODoxMzozOFrOGc6cFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk3MDc3Mg==", "bodyText": "nit: add new line.", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r432970772", "createdAt": "2020-05-31T18:13:38Z", "author": {"login": "vrozov"}, "path": "src/test/resources/saml/metadata.xml", "diffHunk": "@@ -0,0 +1,34 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<md:EntityDescriptor xmlns:md=\"urn:oasis:names:tc:SAML:2.0:metadata\" entityID=\"http://test.entity\">\n+    <md:IDPSSODescriptor WantAuthnRequestsSigned=\"false\" protocolSupportEnumeration=\"urn:oasis:names:tc:SAML:2.0:protocol\">\n+        <md:KeyDescriptor use=\"signing\">\n+            <ds:KeyInfo xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\">\n+                <ds:X509Data>\n+                    <ds:X509Certificate>MIIEQDCCAyigAwIBAgIBCDANBgkqhkiG9w0BAQsFADCBlTETMBEGCgmSJomT8ixkARkWA2NvbTEX\n+                        MBUGCgmSJomT8ixkARkWB2V4YW1wbGUxGTAXBgNVBAoMEEV4YW1wbGUgQ29tIEluYy4xJDAiBgNV\n+                        BAsMG0V4YW1wbGUgQ29tIEluYy4gU2lnbmluZyBDQTEkMCIGA1UEAwwbRXhhbXBsZSBDb20gSW5j\n+                        LiBTaWduaW5nIENBMB4XDTE4MDUwNTE0MzcxNloXDTI4MDUwMjE0MzcxNlowTTELMAkGA1UEBhMC\n+                        REUxDTALBgNVBAcTBFRlc3QxDzANBgNVBAoTBmNsaWVudDEPMA0GA1UECxMGY2xpZW50MQ0wCwYD\n+                        VQQDEwRraXJrMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAt7iBnBLbkmCKMEkc9meR\n+                        sLmtrYeKKbkPL/CNogjP5fhIH5vSWd2+vSzgENAXtaHkhLrDiqi6vnny+r0KaluCsuYGZkisMMcP\n+                        ku3sODGtHakuWts4YYLqHtZWvsR4F8ioHJ1E+gdG+ACjdf4MvWR+MkG5tswceqwfltpZti0xzUOT\n+                        CowFdtZ6NaCoWPMgmg85T3hjWGe7SSSIgJDAWpJAETCb4RIKrSS26dlESdgU6zj4QowEV+/gKdLK\n+                        O9pVo5mOKKuDNYLMzN6m1Q7abUQFeTAgIq6MX9YSJ40Qj7fWWq2OB/hJNTHN9LfTra9/ZMKPt5ec\n+                        yBCTRpr+KmXlMEg+BwIDAQABo4HhMIHeMA4GA1UdDwEB/wQEAwIFoDAJBgNVHRMEAjAAMB0GA1Ud\n+                        JQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAdBgNVHQ4EFgQUOXz2tftJLgWX+hwbtJmItC0nJ8cw\n+                        HwYDVR0jBBgwFoAUlHfikzELP7bny+WOakSkxOMEweAwYgYDVR0fBFswWTBXoFWgU4ZRaHR0cHM6\n+                        Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2Zsb3JhZ3VubmNvbS91bml0dGVzdC1hc3NldHMv\n+                        bWFzdGVyL3Jldm9rZWQuY3JsMA0GCSqGSIb3DQEBCwUAA4IBAQAORNkM6q4j1ELFStU3CVI0AJIe\n+                        pZQ4JoBPLOUNK0tvnnzRuTEM57kaydg2PmbG1YUY6XS3S/IFyUZic95rPMxUUL8gGGCs1lJLq3i9\n+                        Kt7aN0oyrnL00N2h8EDgi1WFjTYF0l/L52zKrxIOc7fAo1M0HLOHiPUq21A6hCrSVsBOeXB8GBgp\n+                        KIqMLtx0wYDIwK3ItadGZ8B/rwH8rimMZHSSXvjd2RUQtaEHw5yj7zSE+0CogoMWuBjiSWl5WzQ0\n+                        RWHnYQVunzuCnMZVRTk04yO4L2ctPWqlRVUlXM7Ay/YZiBL/k1uu28QVRcP1XzH63XE4MAQMcShv\n+                        TbAZAoSWAJkV</ds:X509Certificate>\n+                </ds:X509Data>\n+            </ds:KeyInfo>\n+        </md:KeyDescriptor>\n+        <md:SingleLogoutService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"http://localhost:33667/saml/slo\" />\n+        <md:NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified</md:NameIDFormat>\n+        <md:SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"http://localhost:33667/saml/sso\" />\n+    </md:IDPSSODescriptor>\n+</md:EntityDescriptor>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5208805ab9960fd09a524284ef3c4c9c77257080"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMDU0Njc1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMzoyMzoxOVrOGddKQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMzo1NjoyOVrOGdduWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUzOTY1MA==", "bodyText": "Do we need to create DocumentBuilderFactory everytime getMetadataDOM is called ?", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r433539650", "createdAt": "2020-06-01T23:23:19Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java", "diffHunk": "@@ -400,6 +419,21 @@ private String getSamlRequestQueryStringSignature(String samlRequestQueryString)\n         }\n     }\n \n+    private static Element getMetadataDOM(final String xmlString) throws IOException, SAXException, ParserConfigurationException {\n+        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU0NzAyOQ==", "bodyText": "We don't need a new DocumentBuilderFactory, but getMetadataDOM will be call only if user wants to use metadata_body to configure SAML auth. This will happen only on initializing/updating securityconfig which I don't think will happen very frequently.", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r433547029", "createdAt": "2020-06-01T23:50:02Z", "author": {"login": "debjanibnrj"}, "path": "src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java", "diffHunk": "@@ -400,6 +419,21 @@ private String getSamlRequestQueryStringSignature(String samlRequestQueryString)\n         }\n     }\n \n+    private static Element getMetadataDOM(final String xmlString) throws IOException, SAXException, ParserConfigurationException {\n+        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUzOTY1MA=="}, "originalCommit": null, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU0ODg5MQ==", "bodyText": "Okay. We can move DocumentBuilderFactory and setNamespaceAware to a static initializer ?", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r433548891", "createdAt": "2020-06-01T23:56:29Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java", "diffHunk": "@@ -400,6 +419,21 @@ private String getSamlRequestQueryStringSignature(String samlRequestQueryString)\n         }\n     }\n \n+    private static Element getMetadataDOM(final String xmlString) throws IOException, SAXException, ParserConfigurationException {\n+        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUzOTY1MA=="}, "originalCommit": null, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMDU0OTg4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMzoyNTowM1rOGddMKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNTo0MDo1N1rOGdix3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU0MDEzOA==", "bodyText": "What is the purpose of resolverIdCounter ? If the intent is creating a new id we can use uuid ?", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r433540138", "createdAt": "2020-06-01T23:25:03Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java", "diffHunk": "@@ -275,16 +280,30 @@ public Void run() throws InitializationException {\n         }\n     }\n \n-    private AbstractReloadingMetadataResolver createMetadataResolver(final Settings settings, final Path configPath)\n+    private MetadataResolver createMetadataResolver(final Settings settings, final Path configPath)\n             throws Exception {\n-        final AbstractReloadingMetadataResolver metadataResolver;\n+        final AbstractMetadataResolver metadataResolver;\n \n+        final String idpMetadataUrl = settings.get(\"idp.metadata_url\");\n+        final String idpMetadataFile = settings.get(\"idp.metadata_file\");\n+        final String idpMetadataBody = settings.get(\"idp.metadata_body\");\n         if (idpMetadataUrl != null) {\n-            metadataResolver = new SamlHTTPMetadataResolver(settings, configPath);\n+            metadataResolver = new SamlHTTPMetadataResolver(idpMetadataUrl, settings, configPath);\n+        } else if (idpMetadataFile != null) {\n+            metadataResolver = new SamlFilesystemMetadataResolver(idpMetadataFile, settings, configPath);\n+        } else if (idpMetadataBody != null) {\n+            metadataResolver = new DOMMetadataResolver(getMetadataDOM(idpMetadataBody));\n         } else {\n-            metadataResolver = new SamlFilesystemMetadataResolver(settings, configPath);\n+            throw new Exception(\"One of idp.metadata_url, idp.metadata_file or idp.metadata_body must be configured\");\n         }\n \n+        metadataResolver.setId(HTTPSamlAuthenticator.class.getName() + \"_\" + (++resolverIdCounter));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU0ODc3MA==", "bodyText": "I based this of the previous implementation - https://github.com/opendistro-for-elasticsearch/security/blob/167acc0769397b765fa52fd68a4d555524915deb/src/main/java/com/amazon/dlic/auth/http/saml/SamlHTTPMetadataResolver.java#L40.\nAny reason for preferring UUID?", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r433548770", "createdAt": "2020-06-01T23:55:57Z", "author": {"login": "debjanibnrj"}, "path": "src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java", "diffHunk": "@@ -275,16 +280,30 @@ public Void run() throws InitializationException {\n         }\n     }\n \n-    private AbstractReloadingMetadataResolver createMetadataResolver(final Settings settings, final Path configPath)\n+    private MetadataResolver createMetadataResolver(final Settings settings, final Path configPath)\n             throws Exception {\n-        final AbstractReloadingMetadataResolver metadataResolver;\n+        final AbstractMetadataResolver metadataResolver;\n \n+        final String idpMetadataUrl = settings.get(\"idp.metadata_url\");\n+        final String idpMetadataFile = settings.get(\"idp.metadata_file\");\n+        final String idpMetadataBody = settings.get(\"idp.metadata_body\");\n         if (idpMetadataUrl != null) {\n-            metadataResolver = new SamlHTTPMetadataResolver(settings, configPath);\n+            metadataResolver = new SamlHTTPMetadataResolver(idpMetadataUrl, settings, configPath);\n+        } else if (idpMetadataFile != null) {\n+            metadataResolver = new SamlFilesystemMetadataResolver(idpMetadataFile, settings, configPath);\n+        } else if (idpMetadataBody != null) {\n+            metadataResolver = new DOMMetadataResolver(getMetadataDOM(idpMetadataBody));\n         } else {\n-            metadataResolver = new SamlFilesystemMetadataResolver(settings, configPath);\n+            throw new Exception(\"One of idp.metadata_url, idp.metadata_file or idp.metadata_body must be configured\");\n         }\n \n+        metadataResolver.setId(HTTPSamlAuthenticator.class.getName() + \"_\" + (++resolverIdCounter));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU0MDEzOA=="}, "originalCommit": null, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU1MjAxMA==", "bodyText": "Just curious about the role of resolverIdCounter.\nIf this id is passed as output or having a distributed nature from different nodes then uuid is preferred to avoid conflicts.", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r433552010", "createdAt": "2020-06-02T00:07:38Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java", "diffHunk": "@@ -275,16 +280,30 @@ public Void run() throws InitializationException {\n         }\n     }\n \n-    private AbstractReloadingMetadataResolver createMetadataResolver(final Settings settings, final Path configPath)\n+    private MetadataResolver createMetadataResolver(final Settings settings, final Path configPath)\n             throws Exception {\n-        final AbstractReloadingMetadataResolver metadataResolver;\n+        final AbstractMetadataResolver metadataResolver;\n \n+        final String idpMetadataUrl = settings.get(\"idp.metadata_url\");\n+        final String idpMetadataFile = settings.get(\"idp.metadata_file\");\n+        final String idpMetadataBody = settings.get(\"idp.metadata_body\");\n         if (idpMetadataUrl != null) {\n-            metadataResolver = new SamlHTTPMetadataResolver(settings, configPath);\n+            metadataResolver = new SamlHTTPMetadataResolver(idpMetadataUrl, settings, configPath);\n+        } else if (idpMetadataFile != null) {\n+            metadataResolver = new SamlFilesystemMetadataResolver(idpMetadataFile, settings, configPath);\n+        } else if (idpMetadataBody != null) {\n+            metadataResolver = new DOMMetadataResolver(getMetadataDOM(idpMetadataBody));\n         } else {\n-            metadataResolver = new SamlFilesystemMetadataResolver(settings, configPath);\n+            throw new Exception(\"One of idp.metadata_url, idp.metadata_file or idp.metadata_body must be configured\");\n         }\n \n+        metadataResolver.setId(HTTPSamlAuthenticator.class.getName() + \"_\" + (++resolverIdCounter));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU0MDEzOA=="}, "originalCommit": null, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU2MjA3NA==", "bodyText": "My guess is that id is used in logging only to identify the resolver, so usage of uuid will be less preferable over the counter.", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r433562074", "createdAt": "2020-06-02T00:46:42Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java", "diffHunk": "@@ -275,16 +280,30 @@ public Void run() throws InitializationException {\n         }\n     }\n \n-    private AbstractReloadingMetadataResolver createMetadataResolver(final Settings settings, final Path configPath)\n+    private MetadataResolver createMetadataResolver(final Settings settings, final Path configPath)\n             throws Exception {\n-        final AbstractReloadingMetadataResolver metadataResolver;\n+        final AbstractMetadataResolver metadataResolver;\n \n+        final String idpMetadataUrl = settings.get(\"idp.metadata_url\");\n+        final String idpMetadataFile = settings.get(\"idp.metadata_file\");\n+        final String idpMetadataBody = settings.get(\"idp.metadata_body\");\n         if (idpMetadataUrl != null) {\n-            metadataResolver = new SamlHTTPMetadataResolver(settings, configPath);\n+            metadataResolver = new SamlHTTPMetadataResolver(idpMetadataUrl, settings, configPath);\n+        } else if (idpMetadataFile != null) {\n+            metadataResolver = new SamlFilesystemMetadataResolver(idpMetadataFile, settings, configPath);\n+        } else if (idpMetadataBody != null) {\n+            metadataResolver = new DOMMetadataResolver(getMetadataDOM(idpMetadataBody));\n         } else {\n-            metadataResolver = new SamlFilesystemMetadataResolver(settings, configPath);\n+            throw new Exception(\"One of idp.metadata_url, idp.metadata_file or idp.metadata_body must be configured\");\n         }\n \n+        metadataResolver.setId(HTTPSamlAuthenticator.class.getName() + \"_\" + (++resolverIdCounter));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU0MDEzOA=="}, "originalCommit": null, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYyMDI2Ng==", "bodyText": "Okay. I assumed setId would be used for other purposes. If it's only used in logging, don't know how useful the number would be to identify it.\nI see its the current implementation", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r433620266", "createdAt": "2020-06-02T04:58:14Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java", "diffHunk": "@@ -275,16 +280,30 @@ public Void run() throws InitializationException {\n         }\n     }\n \n-    private AbstractReloadingMetadataResolver createMetadataResolver(final Settings settings, final Path configPath)\n+    private MetadataResolver createMetadataResolver(final Settings settings, final Path configPath)\n             throws Exception {\n-        final AbstractReloadingMetadataResolver metadataResolver;\n+        final AbstractMetadataResolver metadataResolver;\n \n+        final String idpMetadataUrl = settings.get(\"idp.metadata_url\");\n+        final String idpMetadataFile = settings.get(\"idp.metadata_file\");\n+        final String idpMetadataBody = settings.get(\"idp.metadata_body\");\n         if (idpMetadataUrl != null) {\n-            metadataResolver = new SamlHTTPMetadataResolver(settings, configPath);\n+            metadataResolver = new SamlHTTPMetadataResolver(idpMetadataUrl, settings, configPath);\n+        } else if (idpMetadataFile != null) {\n+            metadataResolver = new SamlFilesystemMetadataResolver(idpMetadataFile, settings, configPath);\n+        } else if (idpMetadataBody != null) {\n+            metadataResolver = new DOMMetadataResolver(getMetadataDOM(idpMetadataBody));\n         } else {\n-            metadataResolver = new SamlFilesystemMetadataResolver(settings, configPath);\n+            throw new Exception(\"One of idp.metadata_url, idp.metadata_file or idp.metadata_body must be configured\");\n         }\n \n+        metadataResolver.setId(HTTPSamlAuthenticator.class.getName() + \"_\" + (++resolverIdCounter));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU0MDEzOA=="}, "originalCommit": null, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYzMTcxMA==", "bodyText": "I guess instead of a counter we may add id spec as an optional field to the SAML authenticator setting to be provided by an admin, so admin can more easily identify  authenticator metadata resolver.", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r433631710", "createdAt": "2020-06-02T05:40:57Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java", "diffHunk": "@@ -275,16 +280,30 @@ public Void run() throws InitializationException {\n         }\n     }\n \n-    private AbstractReloadingMetadataResolver createMetadataResolver(final Settings settings, final Path configPath)\n+    private MetadataResolver createMetadataResolver(final Settings settings, final Path configPath)\n             throws Exception {\n-        final AbstractReloadingMetadataResolver metadataResolver;\n+        final AbstractMetadataResolver metadataResolver;\n \n+        final String idpMetadataUrl = settings.get(\"idp.metadata_url\");\n+        final String idpMetadataFile = settings.get(\"idp.metadata_file\");\n+        final String idpMetadataBody = settings.get(\"idp.metadata_body\");\n         if (idpMetadataUrl != null) {\n-            metadataResolver = new SamlHTTPMetadataResolver(settings, configPath);\n+            metadataResolver = new SamlHTTPMetadataResolver(idpMetadataUrl, settings, configPath);\n+        } else if (idpMetadataFile != null) {\n+            metadataResolver = new SamlFilesystemMetadataResolver(idpMetadataFile, settings, configPath);\n+        } else if (idpMetadataBody != null) {\n+            metadataResolver = new DOMMetadataResolver(getMetadataDOM(idpMetadataBody));\n         } else {\n-            metadataResolver = new SamlFilesystemMetadataResolver(settings, configPath);\n+            throw new Exception(\"One of idp.metadata_url, idp.metadata_file or idp.metadata_body must be configured\");\n         }\n \n+        metadataResolver.setId(HTTPSamlAuthenticator.class.getName() + \"_\" + (++resolverIdCounter));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU0MDEzOA=="}, "originalCommit": null, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMDY5ODY3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwMDo1MjowNlrOGdem0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwMDo1MjowNlrOGdem0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU2MzM0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        log.error(\"Error while parsing SAML Metadata Body \", e);\n          \n          \n            \n                        log.error(\"Error while parsing SAML Metadata Body {}\", xmlString, e);", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r433563344", "createdAt": "2020-06-02T00:52:06Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java", "diffHunk": "@@ -400,6 +419,21 @@ private String getSamlRequestQueryStringSignature(String samlRequestQueryString)\n         }\n     }\n \n+    private static Element getMetadataDOM(final String xmlString) throws IOException, SAXException, ParserConfigurationException {\n+        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n+        factory.setNamespaceAware(true);\n+\n+        DocumentBuilder builder = null;\n+        try {\n+            builder = factory.newDocumentBuilder();\n+            Document doc = builder.parse(new InputSource(new StringReader(xmlString)));\n+            return doc.getDocumentElement();\n+        } catch (Exception e) {\n+            log.error(\"Error while parsing SAML Metadata Body \", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 137}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2455, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}