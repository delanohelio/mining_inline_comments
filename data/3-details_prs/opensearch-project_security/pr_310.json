{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyMzgzOTQx", "number": 310, "title": "Refactor Resolved class, drop unused fields and simplify logic", "bodyText": "Issue #, if available:\nDescription of changes:\nRefactoring and micro-optimizations part of:\nhttps://github.com/opendistro-for-elasticsearch/security/pull/258\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-03-23T13:26:33Z", "url": "https://github.com/opensearch-project/security/pull/310", "merged": true, "mergeCommit": {"oid": "e9f3dd83bf96083439a33b25b458c23fdcdadda7"}, "closed": true, "closedAt": "2020-03-31T18:45:23Z", "author": {"login": "DmitryOlshansky"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQeTQFgH2gAyMzkyMzgzOTQxOmU1MGJkM2JhZTYyN2VkMjk5NzJjYzYyNjdhYjEwNTBjNzhjNjNmZDk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcTHgWlgFqTM4NTAwMTAwNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e50bd3bae627ed29972cc6267ab1050c78c63fd9", "author": {"user": null}, "url": "https://github.com/opensearch-project/security/commit/e50bd3bae627ed29972cc6267ab1050c78c63fd9", "committedDate": "2020-03-23T13:27:03Z", "message": "Refactor Resolved class, drop unused fields and simplify logic"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "e50bd3bae627ed29972cc6267ab1050c78c63fd9", "author": {"user": null}, "url": "https://github.com/opensearch-project/security/commit/e50bd3bae627ed29972cc6267ab1050c78c63fd9", "committedDate": "2020-03-23T13:27:03Z", "message": "Refactor Resolved class, drop unused fields and simplify logic"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMzY2Mjc3", "url": "https://github.com/opensearch-project/security/pull/310#pullrequestreview-383366277", "createdAt": "2020-03-29T02:15:54Z", "commit": {"oid": "e50bd3bae627ed29972cc6267ab1050c78c63fd9"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNDU0ODIx", "url": "https://github.com/opensearch-project/security/pull/310#pullrequestreview-383454821", "createdAt": "2020-03-29T20:59:07Z", "commit": {"oid": "e50bd3bae627ed29972cc6267ab1050c78c63fd9"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQyMDo1OTowN1rOF9VGGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQyMTo0MDowOFrOF9VYKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1MzA4Mg==", "bodyText": "nit: for consistency with isLocalAll and else cases postpone return till the end.", "url": "https://github.com/opensearch-project/security/pull/310#discussion_r399853082", "createdAt": "2020-03-29T20:59:07Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/resolver/IndexResolverReplacer.java", "diffHunk": "@@ -209,48 +209,41 @@ private Resolved resolveIndexPatterns(final IndicesOptions indicesOptions, final\n         }\n \n         final Set<String> matchingAliases;\n-        final Set<String> matchingIndices;\n         final Set<String> matchingAllIndices;\n \n         if (isLocalAll(requestedPatterns0)) {\n             if (log.isTraceEnabled()) {\n                 log.trace(Arrays.toString(requestedPatterns0) + \" is an LOCAL ALL pattern\");\n             }\n             matchingAliases = Resolved.All_SET;\n-            matchingIndices = Resolved.All_SET;\n             matchingAllIndices = Resolved.All_SET;\n \n         } else if (!remoteIndices.isEmpty() && localRequestedPatterns.isEmpty()) {\n             if (log.isTraceEnabled()) {\n                 log.trace(Arrays.toString(requestedPatterns0) + \" is an LOCAL EMPTY request\");\n             }\n-            return new Resolved.Builder().addOriginalRequested(Arrays.asList(requestedPatterns0)).addRemoteIndices(remoteIndices).build();\n+            return new Resolved(Collections.emptySet(), Collections.emptySet(), Collections.emptySet(), Sets.newHashSet(requestedPatterns0), remoteIndices);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e50bd3bae627ed29972cc6267ab1050c78c63fd9"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1MzE0NA==", "bodyText": "nit: final (only for consistency with codestyle).", "url": "https://github.com/opensearch-project/security/pull/310#discussion_r399853144", "createdAt": "2020-03-29T20:59:43Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/resolver/IndexResolverReplacer.java", "diffHunk": "@@ -209,48 +209,41 @@ private Resolved resolveIndexPatterns(final IndicesOptions indicesOptions, final\n         }\n \n         final Set<String> matchingAliases;\n-        final Set<String> matchingIndices;\n         final Set<String> matchingAllIndices;\n \n         if (isLocalAll(requestedPatterns0)) {\n             if (log.isTraceEnabled()) {\n                 log.trace(Arrays.toString(requestedPatterns0) + \" is an LOCAL ALL pattern\");\n             }\n             matchingAliases = Resolved.All_SET;\n-            matchingIndices = Resolved.All_SET;\n             matchingAllIndices = Resolved.All_SET;\n \n         } else if (!remoteIndices.isEmpty() && localRequestedPatterns.isEmpty()) {\n             if (log.isTraceEnabled()) {\n                 log.trace(Arrays.toString(requestedPatterns0) + \" is an LOCAL EMPTY request\");\n             }\n-            return new Resolved.Builder().addOriginalRequested(Arrays.asList(requestedPatterns0)).addRemoteIndices(remoteIndices).build();\n+            return new Resolved(Collections.emptySet(), Collections.emptySet(), Collections.emptySet(), Sets.newHashSet(requestedPatterns0), remoteIndices);\n         }\n \n         else {\n \n             ClusterState state = clusterService.state();\n-\n+            Set<String> dateResolvedLocalRequestedPatterns = localRequestedPatterns", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e50bd3bae627ed29972cc6267ab1050c78c63fd9"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1NDY2OA==", "bodyText": "nit: declaring matchingAllIndices final does not add any value and makes _indices necessary. Drop final from matchingAliases and matchingAllIndices and remove _indices local variable.", "url": "https://github.com/opensearch-project/security/pull/310#discussion_r399854668", "createdAt": "2020-03-29T21:12:32Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/resolver/IndexResolverReplacer.java", "diffHunk": "@@ -209,48 +209,41 @@ private Resolved resolveIndexPatterns(final IndicesOptions indicesOptions, final\n         }\n \n         final Set<String> matchingAliases;\n-        final Set<String> matchingIndices;\n         final Set<String> matchingAllIndices;\n \n         if (isLocalAll(requestedPatterns0)) {\n             if (log.isTraceEnabled()) {\n                 log.trace(Arrays.toString(requestedPatterns0) + \" is an LOCAL ALL pattern\");\n             }\n             matchingAliases = Resolved.All_SET;\n-            matchingIndices = Resolved.All_SET;\n             matchingAllIndices = Resolved.All_SET;\n \n         } else if (!remoteIndices.isEmpty() && localRequestedPatterns.isEmpty()) {\n             if (log.isTraceEnabled()) {\n                 log.trace(Arrays.toString(requestedPatterns0) + \" is an LOCAL EMPTY request\");\n             }\n-            return new Resolved.Builder().addOriginalRequested(Arrays.asList(requestedPatterns0)).addRemoteIndices(remoteIndices).build();\n+            return new Resolved(Collections.emptySet(), Collections.emptySet(), Collections.emptySet(), Sets.newHashSet(requestedPatterns0), remoteIndices);\n         }\n \n         else {\n \n             ClusterState state = clusterService.state();\n-\n+            Set<String> dateResolvedLocalRequestedPatterns = localRequestedPatterns\n+                            .stream()\n+                            .map(resolver::resolveDateMathExpression)\n+                            .collect(Collectors.toSet());\n+            //fill matchingAliases\n             final SortedMap<String, AliasOrIndex> lookup = state.metaData().getAliasAndIndexLookup();\n-            final Set<String> aliases = lookup.entrySet().stream().filter(e -> e.getValue().isAlias()).map(e -> e.getKey())\n+            matchingAliases = lookup.entrySet()\n+                    .stream()\n+                    .filter(e -> e.getValue().isAlias())\n+                    .map(Map.Entry::getKey)\n+                    .filter(alias -> WildcardMatcher.matchAny(dateResolvedLocalRequestedPatterns, alias))\n                     .collect(Collectors.toSet());\n \n-            matchingAliases = new HashSet<>(localRequestedPatterns.size() * 10);\n-            matchingIndices = new HashSet<>(localRequestedPatterns.size() * 10);\n-            matchingAllIndices = new HashSet<>(localRequestedPatterns.size() * 10);\n-\n-            //fill matchingAliases\n-            for (String localRequestedPattern : localRequestedPatterns) {\n-                final String requestedPattern = resolver.resolveDateMathExpression(localRequestedPattern);\n-                final List<String> _aliases = WildcardMatcher.getMatchAny(requestedPattern, aliases);\n-                matchingAliases.addAll(_aliases);\n-            }\n-\n-\n-            List<String> _indices;\n+            Set<String> _indices;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e50bd3bae627ed29972cc6267ab1050c78c63fd9"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1NDg5NQ==", "bodyText": "nit: prefer new HashSet<>(Arrays.asList()). Sets.newHashSet() is likely to be removed or deprecated in Guava.", "url": "https://github.com/opensearch-project/security/pull/310#discussion_r399854895", "createdAt": "2020-03-29T21:14:04Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/resolver/IndexResolverReplacer.java", "diffHunk": "@@ -259,36 +252,13 @@ private Resolved resolveIndexPatterns(final IndicesOptions indicesOptions, final\n                     log.debug(\"No such indices for pattern {}, use raw value\", localRequestedPatterns);\n                 }\n \n-                _indices = new ArrayList<>(localRequestedPatterns.size());\n-\n-                for (String requestedPattern : localRequestedPatterns) {\n-                    _indices.add(resolver.resolveDateMathExpression(requestedPattern));\n-                }\n-\n+                _indices = dateResolvedLocalRequestedPatterns;\n             }\n \n-            final List<String> _aliases = WildcardMatcher.getMatchAny(localRequestedPatterns.toArray(new String[0]), aliases);\n-\n-            matchingAllIndices.addAll(_indices);\n-\n-            if (_aliases.isEmpty()) {\n-                matchingIndices.addAll(_indices); //date math resolved?\n-            } else {\n-\n-                if (!_indices.isEmpty()) {\n-\n-                    for (String al : _aliases) {\n-                        Set<String> doubleIndices = lookup.get(al).getIndices().stream().map(a -> a.getIndex().getName()).collect(Collectors.toSet());\n-                        _indices.removeAll(doubleIndices);\n-                    }\n-\n-                    matchingIndices.addAll(_indices);\n-                }\n-            }\n+            matchingAllIndices = _indices;\n         }\n \n-        return new Resolved.Builder(matchingAliases, matchingIndices, matchingAllIndices, null, requestedPatterns0, remoteIndices)\n-                /*.addTypes(resolveTypes(request))*/.build();\n+        return new Resolved(matchingAliases, matchingAllIndices, Collections.emptySet(), Sets.newHashSet(requestedPatterns0), remoteIndices);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e50bd3bae627ed29972cc6267ab1050c78c63fd9"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1NTExNg==", "bodyText": "nit: order is not important, use Map<>.", "url": "https://github.com/opensearch-project/security/pull/310#discussion_r399855116", "createdAt": "2020-03-29T21:16:35Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/resolver/IndexResolverReplacer.java", "diffHunk": "@@ -209,48 +209,41 @@ private Resolved resolveIndexPatterns(final IndicesOptions indicesOptions, final\n         }\n \n         final Set<String> matchingAliases;\n-        final Set<String> matchingIndices;\n         final Set<String> matchingAllIndices;\n \n         if (isLocalAll(requestedPatterns0)) {\n             if (log.isTraceEnabled()) {\n                 log.trace(Arrays.toString(requestedPatterns0) + \" is an LOCAL ALL pattern\");\n             }\n             matchingAliases = Resolved.All_SET;\n-            matchingIndices = Resolved.All_SET;\n             matchingAllIndices = Resolved.All_SET;\n \n         } else if (!remoteIndices.isEmpty() && localRequestedPatterns.isEmpty()) {\n             if (log.isTraceEnabled()) {\n                 log.trace(Arrays.toString(requestedPatterns0) + \" is an LOCAL EMPTY request\");\n             }\n-            return new Resolved.Builder().addOriginalRequested(Arrays.asList(requestedPatterns0)).addRemoteIndices(remoteIndices).build();\n+            return new Resolved(Collections.emptySet(), Collections.emptySet(), Collections.emptySet(), Sets.newHashSet(requestedPatterns0), remoteIndices);\n         }\n \n         else {\n \n             ClusterState state = clusterService.state();\n-\n+            Set<String> dateResolvedLocalRequestedPatterns = localRequestedPatterns\n+                            .stream()\n+                            .map(resolver::resolveDateMathExpression)\n+                            .collect(Collectors.toSet());\n+            //fill matchingAliases\n             final SortedMap<String, AliasOrIndex> lookup = state.metaData().getAliasAndIndexLookup();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e50bd3bae627ed29972cc6267ab1050c78c63fd9"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1NzcwNA==", "bodyText": "Hardcode type to ImmutableSet.of(\"*\");", "url": "https://github.com/opensearch-project/security/pull/310#discussion_r399857704", "createdAt": "2020-03-29T21:40:08Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/resolver/IndexResolverReplacer.java", "diffHunk": "@@ -359,26 +329,24 @@ public Resolved resolveRequest(final Object request) {\n          */\n         private static final Set<String> All_SET = Collections.singleton(\"*\");\n         private static final long serialVersionUID = 1L;\n-        public final static Resolved _LOCAL_ALL = new Resolved(All_SET, All_SET, All_SET, All_SET, Collections.emptySet(), Collections.emptySet());\n+        public final static Resolved _LOCAL_ALL = new Resolved(All_SET, All_SET, All_SET, Collections.emptySet(), Collections.emptySet());\n         private final Set<String> aliases;\n-        private final Set<String> indices;\n         private final Set<String> allIndices;\n         private final Set<String> types;\n \n         private final Set<String> originalRequested;\n         private final Set<String> remoteIndices;\n \n-        private Resolved(final Set<String> aliases, final Set<String> indices, final Set<String> allIndices,\n+        private Resolved(final Set<String> aliases, final Set<String> allIndices,\n                          final Set<String> types, final Set<String> originalRequested, final Set<String> remoteIndices) {\n             super();\n             this.aliases = aliases;\n-            this.indices = indices;\n             this.allIndices = allIndices;\n             this.types = types;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e50bd3bae627ed29972cc6267ab1050c78c63fd9"}, "originalPosition": 123}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aea48689d43a41cbd8cf282be4ddfe218a4fa0fb", "author": {"user": {"login": "DmitryOlshansky", "name": "Dmitry Olshansky"}}, "url": "https://github.com/opensearch-project/security/commit/aea48689d43a41cbd8cf282be4ddfe218a4fa0fb", "committedDate": "2020-03-30T11:09:36Z", "message": "Address review comments, hardcode types to ImmutableSet.of(\"*\")"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "aea48689d43a41cbd8cf282be4ddfe218a4fa0fb", "author": {"user": {"login": "DmitryOlshansky", "name": "Dmitry Olshansky"}}, "url": "https://github.com/opensearch-project/security/commit/aea48689d43a41cbd8cf282be4ddfe218a4fa0fb", "committedDate": "2020-03-30T11:09:36Z", "message": "Address review comments, hardcode types to ImmutableSet.of(\"*\")"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzOTYyNTg5", "url": "https://github.com/opensearch-project/security/pull/310#pullrequestreview-383962589", "createdAt": "2020-03-30T15:18:33Z", "commit": {"oid": "aea48689d43a41cbd8cf282be4ddfe218a4fa0fb"}, "state": "DISMISSED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNToxODozM1rOF9u6Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjowODozMVrOF9xOfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI3NjAwNg==", "bodyText": "Please move next to com.google.common.collect.Sets import.", "url": "https://github.com/opensearch-project/security/pull/310#discussion_r400276006", "createdAt": "2020-03-30T15:18:33Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/resolver/IndexResolverReplacer.java", "diffHunk": "@@ -32,23 +32,21 @@\n \n import java.io.IOException;\n import java.io.Serializable;\n-import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.Collections;\n-import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n import java.util.ListIterator;\n import java.util.Map;\n import java.util.Set;\n-import java.util.SortedMap;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.regex.PatternSyntaxException;\n import java.util.stream.Collectors;\n \n+import com.google.common.collect.ImmutableSet;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aea48689d43a41cbd8cf282be4ddfe218a4fa0fb"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI5OTQxMg==", "bodyText": "nit: newHashSet -> new HashSet<>()", "url": "https://github.com/opensearch-project/security/pull/310#discussion_r400299412", "createdAt": "2020-03-30T15:48:58Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/resolver/IndexResolverReplacer.java", "diffHunk": "@@ -209,86 +207,53 @@ private Resolved resolveIndexPatterns(final IndicesOptions indicesOptions, final\n         }\n \n         final Set<String> matchingAliases;\n-        final Set<String> matchingIndices;\n-        final Set<String> matchingAllIndices;\n+        Set<String> matchingAllIndices;\n \n         if (isLocalAll(requestedPatterns0)) {\n             if (log.isTraceEnabled()) {\n                 log.trace(Arrays.toString(requestedPatterns0) + \" is an LOCAL ALL pattern\");\n             }\n             matchingAliases = Resolved.All_SET;\n-            matchingIndices = Resolved.All_SET;\n             matchingAllIndices = Resolved.All_SET;\n \n         } else if (!remoteIndices.isEmpty() && localRequestedPatterns.isEmpty()) {\n             if (log.isTraceEnabled()) {\n                 log.trace(Arrays.toString(requestedPatterns0) + \" is an LOCAL EMPTY request\");\n             }\n-            return new Resolved.Builder().addOriginalRequested(Arrays.asList(requestedPatterns0)).addRemoteIndices(remoteIndices).build();\n+            matchingAllIndices = Collections.emptySet();\n+            matchingAliases = Collections.emptySet();\n         }\n \n         else {\n-\n-            ClusterState state = clusterService.state();\n-\n-            final SortedMap<String, AliasOrIndex> lookup = state.metaData().getAliasAndIndexLookup();\n-            final Set<String> aliases = lookup.entrySet().stream().filter(e -> e.getValue().isAlias()).map(e -> e.getKey())\n-                    .collect(Collectors.toSet());\n-\n-            matchingAliases = new HashSet<>(localRequestedPatterns.size() * 10);\n-            matchingIndices = new HashSet<>(localRequestedPatterns.size() * 10);\n-            matchingAllIndices = new HashSet<>(localRequestedPatterns.size() * 10);\n-\n+            final ClusterState state = clusterService.state();\n+            final Set<String> dateResolvedLocalRequestedPatterns = localRequestedPatterns\n+                            .stream()\n+                            .map(resolver::resolveDateMathExpression)\n+                            .collect(Collectors.toSet());\n             //fill matchingAliases\n-            for (String localRequestedPattern : localRequestedPatterns) {\n-                final String requestedPattern = resolver.resolveDateMathExpression(localRequestedPattern);\n-                final List<String> _aliases = WildcardMatcher.getMatchAny(requestedPattern, aliases);\n-                matchingAliases.addAll(_aliases);\n-            }\n-\n+            final Map<String, AliasOrIndex> lookup = state.metaData().getAliasAndIndexLookup();\n+            matchingAliases = lookup.entrySet()\n+                    .stream()\n+                    .filter(e -> e.getValue().isAlias())\n+                    .map(Map.Entry::getKey)\n+                    .filter(alias -> WildcardMatcher.matchAny(dateResolvedLocalRequestedPatterns, alias))\n+                    .collect(Collectors.toSet());\n \n-            List<String> _indices;\n             try {\n-                _indices = new ArrayList<>(\n-                        Arrays.asList(resolver.concreteIndexNames(state, indicesOptions, localRequestedPatterns.toArray(new String[0]))));\n+                matchingAllIndices = Sets.newHashSet(resolver.concreteIndexNames(state, indicesOptions, localRequestedPatterns.toArray(new String[0])));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aea48689d43a41cbd8cf282be4ddfe218a4fa0fb"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwOTc1Nw==", "bodyText": "nit: make type static and remove from equals() and hashCode()", "url": "https://github.com/opensearch-project/security/pull/310#discussion_r400309757", "createdAt": "2020-03-30T16:02:44Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/resolver/IndexResolverReplacer.java", "diffHunk": "@@ -359,48 +324,35 @@ public Resolved resolveRequest(final Object request) {\n          */\n         private static final Set<String> All_SET = Collections.singleton(\"*\");\n         private static final long serialVersionUID = 1L;\n-        public final static Resolved _LOCAL_ALL = new Resolved(All_SET, All_SET, All_SET, All_SET, Collections.emptySet(), Collections.emptySet());\n+        public final static Resolved _LOCAL_ALL = new Resolved(All_SET, All_SET, All_SET, Collections.emptySet());\n         private final Set<String> aliases;\n-        private final Set<String> indices;\n         private final Set<String> allIndices;\n-        private final Set<String> types;\n+        private final Set<String> types = ImmutableSet.of(\"*\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aea48689d43a41cbd8cf282be4ddfe218a4fa0fb"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMxMzk4MA==", "bodyText": "super() is redundant", "url": "https://github.com/opensearch-project/security/pull/310#discussion_r400313980", "createdAt": "2020-03-30T16:08:31Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/resolver/IndexResolverReplacer.java", "diffHunk": "@@ -359,48 +324,35 @@ public Resolved resolveRequest(final Object request) {\n          */\n         private static final Set<String> All_SET = Collections.singleton(\"*\");\n         private static final long serialVersionUID = 1L;\n-        public final static Resolved _LOCAL_ALL = new Resolved(All_SET, All_SET, All_SET, All_SET, Collections.emptySet(), Collections.emptySet());\n+        public final static Resolved _LOCAL_ALL = new Resolved(All_SET, All_SET, All_SET, Collections.emptySet());\n         private final Set<String> aliases;\n-        private final Set<String> indices;\n         private final Set<String> allIndices;\n-        private final Set<String> types;\n+        private final Set<String> types = ImmutableSet.of(\"*\");\n \n         private final Set<String> originalRequested;\n         private final Set<String> remoteIndices;\n \n-        private Resolved(final Set<String> aliases, final Set<String> indices, final Set<String> allIndices,\n-                         final Set<String> types, final Set<String> originalRequested, final Set<String> remoteIndices) {\n+        private Resolved(final Set<String> aliases, final Set<String> allIndices,\n+                         final Set<String> originalRequested, final Set<String> remoteIndices) {\n             super();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aea48689d43a41cbd8cf282be4ddfe218a4fa0fb"}, "originalPosition": 150}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "834fb37c36e41ba40c5be50342faaaa155de9466", "author": {"user": {"login": "DmitryOlshansky", "name": "Dmitry Olshansky"}}, "url": "https://github.com/opensearch-project/security/commit/834fb37c36e41ba40c5be50342faaaa155de9466", "committedDate": "2020-03-30T18:18:03Z", "message": "Another refactoring pass for IndexResolverReplacer"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "834fb37c36e41ba40c5be50342faaaa155de9466", "author": {"user": {"login": "DmitryOlshansky", "name": "Dmitry Olshansky"}}, "url": "https://github.com/opensearch-project/security/commit/834fb37c36e41ba40c5be50342faaaa155de9466", "committedDate": "2020-03-30T18:18:03Z", "message": "Another refactoring pass for IndexResolverReplacer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42297e61159eabe7b35f903935ea9ac5a38de146", "author": {"user": {"login": "DmitryOlshansky", "name": "Dmitry Olshansky"}}, "url": "https://github.com/opensearch-project/security/commit/42297e61159eabe7b35f903935ea9ac5a38de146", "committedDate": "2020-03-31T08:07:55Z", "message": "Remove types from hashCode/equals/serde for Resolved class"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "42297e61159eabe7b35f903935ea9ac5a38de146", "author": {"user": {"login": "DmitryOlshansky", "name": "Dmitry Olshansky"}}, "url": "https://github.com/opensearch-project/security/commit/42297e61159eabe7b35f903935ea9ac5a38de146", "committedDate": "2020-03-31T08:07:55Z", "message": "Remove types from hashCode/equals/serde for Resolved class"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0ODI5OTkw", "url": "https://github.com/opensearch-project/security/pull/310#pullrequestreview-384829990", "createdAt": "2020-03-31T15:07:45Z", "commit": {"oid": "42297e61159eabe7b35f903935ea9ac5a38de146"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1MDAxMDA3", "url": "https://github.com/opensearch-project/security/pull/310#pullrequestreview-385001007", "createdAt": "2020-03-31T18:35:19Z", "commit": {"oid": "42297e61159eabe7b35f903935ea9ac5a38de146"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3038, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}