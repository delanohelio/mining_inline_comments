{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxOTk5MDI0", "number": 765, "title": "When replacing .kibana index with multi-tenant index, create index with alias if one already does not exist", "bodyText": "Description of changes: Create explicit CreateIndexRequest if index or alias does not exist instead of relying on auto index create ES functionality.\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-10-13T05:45:17Z", "url": "https://github.com/opensearch-project/security/pull/765", "merged": true, "mergeCommit": {"oid": "62469e9a757ec55efc3f777b09336339c99ad428"}, "closed": true, "closedAt": "2020-10-23T19:03:15Z", "author": {"login": "vrozov"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdSOB9agFqTUwNzc3NDY0NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdVasHpAFqTUxNTg5OTY2Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3Nzc0NjQ0", "url": "https://github.com/opensearch-project/security/pull/765#pullrequestreview-507774644", "createdAt": "2020-10-13T19:48:41Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxOTo0ODo0MVrOHg2y7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxOTo0ODo0MVrOHg2y7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIxNDI1NA==", "bodyText": "Just out of curiosity, does CreateIndexReqeust come to here at all? I tried doing same thing, but it didn't work.", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r504214254", "createdAt": "2020-10-13T19:48:41Z", "author": {"login": "cliu123"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/PrivilegesInterceptorImpl.java", "diffHunk": "@@ -192,7 +230,7 @@ private void replaceIndex(final ActionRequest request, final String oldIndexName\n \n         // CreateIndexRequest\n         if (request instanceof CreateIndexRequest) {\n-            ((CreateIndexRequest) request).index(newIndexName);\n+            ((CreateIndexRequest) request).index(newIndexName + \"_0\").alias(new Alias(newIndexName));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 82}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3ODQ5MTky", "url": "https://github.com/opensearch-project/security/pull/765#pullrequestreview-507849192", "createdAt": "2020-10-13T21:41:04Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMTo0MTowNFrOHg6gYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMTo0MTowNFrOHg6gYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI3NTA0MQ==", "bodyText": "This looks interesting. Before this change, does the logic not even check whether the index exists before starting indexing? Looks like a bug to me if there really isn't this check existing. Have we not faced any problems because of this at all?", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r504275041", "createdAt": "2020-10-13T21:41:04Z", "author": {"login": "cliu123"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/PrivilegesInterceptorImpl.java", "diffHunk": "@@ -203,6 +241,7 @@ private void replaceIndex(final ActionRequest request, final String oldIndexName\n                 }\n \n                 if (ar instanceof IndexRequest) {\n+                    createIndexAndAliasIfAbsent(newIndexName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 90}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3ODY5MDI5", "url": "https://github.com/opensearch-project/security/pull/765#pullrequestreview-507869029", "createdAt": "2020-10-13T22:20:37Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMjoyMDozN1rOHg7hig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMjo0MTowMVrOHg7_GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI5MTcyMg==", "bodyText": "Is there need to set this as auto expand? This index is created for every user and may flood with replicas based on the number of nodes and users in the system.", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r504291722", "createdAt": "2020-10-13T22:20:37Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/PrivilegesInterceptorImpl.java", "diffHunk": "@@ -49,10 +54,16 @@\n import com.amazon.opendistroforelasticsearch.security.securityconf.DynamicConfigModel;\n import com.amazon.opendistroforelasticsearch.security.user.User;\n \n+import com.google.common.collect.ImmutableMap;\n+\n public class PrivilegesInterceptorImpl extends PrivilegesInterceptor {\n \n     private static final String USER_TENANT = \"__user__\";\n     private static final String EMPTY_STRING = \"\";\n+    private static final Map<String, Object> KIBANA_INDEX_SETTINGS = ImmutableMap.of(\n+            IndexMetadata.SETTING_NUMBER_OF_SHARDS, 1,\n+            IndexMetadata.SETTING_AUTO_EXPAND_REPLICAS, \"0-all\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI5MjIzNg==", "bodyText": "Why _0 suffix?", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r504292236", "createdAt": "2020-10-13T22:21:57Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/PrivilegesInterceptorImpl.java", "diffHunk": "@@ -173,6 +184,33 @@ public Boolean replaceKibanaIndex(final ActionRequest request, final String acti\n         return null;\n     }\n \n+    private boolean createIndexAndAliasIfAbsent(final String name) {\n+        final IndexAbstraction indexAbstraction = clusterService.state().getMetadata().getIndicesLookup().get(name);\n+        if (indexAbstraction != null) {\n+            log.debug(\"{} {} already exists\", indexAbstraction.getType(), indexAbstraction.getName());\n+            return false;\n+        }\n+        final CreateIndexRequest createIndexRequest = new CreateIndexRequest(name + \"_0\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI5OTI4OA==", "bodyText": "nit: avoid duplication and factor out error message.", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r504299288", "createdAt": "2020-10-13T22:41:01Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/PrivilegesInterceptorImpl.java", "diffHunk": "@@ -173,6 +184,33 @@ public Boolean replaceKibanaIndex(final ActionRequest request, final String acti\n         return null;\n     }\n \n+    private boolean createIndexAndAliasIfAbsent(final String name) {\n+        final IndexAbstraction indexAbstraction = clusterService.state().getMetadata().getIndicesLookup().get(name);\n+        if (indexAbstraction != null) {\n+            log.debug(\"{} {} already exists\", indexAbstraction.getType(), indexAbstraction.getName());\n+            return false;\n+        }\n+        final CreateIndexRequest createIndexRequest = new CreateIndexRequest(name + \"_0\")\n+                .settings(KIBANA_INDEX_SETTINGS)\n+                .alias(new Alias(name));\n+        try {\n+            final boolean acknowledged = client.admin()\n+                    .indices()\n+                    .create(createIndexRequest)\n+                    .actionGet()\n+                    .isAcknowledged();\n+            if (acknowledged) {\n+                log.info(\"Created new index {} with aliases {}\", createIndexRequest.index(), createIndexRequest.aliases());\n+                return true;\n+            }\n+        } catch (ResourceAlreadyExistsException resourceAlreadyExistsException) {\n+            log.warn(\"Index {} or aliases {} already exist\", createIndexRequest.index(), createIndexRequest.aliases());\n+            return false;\n+        }\n+        log.warn(\"Request to create new index {} with aliases {} was not acknowledged\", createIndexRequest.index(), createIndexRequest.aliases());\n+        throw new ElasticsearchException(\"Request to create new index {} with aliases {} was not acknowledged\", createIndexRequest.index(), createIndexRequest.aliases());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 71}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd94e5f93445a5b25196d7ce7387f503a628b7cd", "author": {"user": {"login": "vrozov", "name": "Vlad Rozov"}}, "url": "https://github.com/opensearch-project/security/commit/dd94e5f93445a5b25196d7ce7387f503a628b7cd", "committedDate": "2020-10-17T01:08:44Z", "message": "When replacing .kibana index with multi-tenant index, create index with alias if one already does not exist"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "dd94e5f93445a5b25196d7ce7387f503a628b7cd", "author": {"user": {"login": "vrozov", "name": "Vlad Rozov"}}, "url": "https://github.com/opensearch-project/security/commit/dd94e5f93445a5b25196d7ce7387f503a628b7cd", "committedDate": "2020-10-17T01:08:44Z", "message": "When replacing .kibana index with multi-tenant index, create index with alias if one already does not exist"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExOTczNDky", "url": "https://github.com/opensearch-project/security/pull/765#pullrequestreview-511973492", "createdAt": "2020-10-19T17:02:54Z", "commit": {"oid": "dd94e5f93445a5b25196d7ce7387f503a628b7cd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNzowMjo1NFrOHkYdYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNzowMjo1NFrOHkYdYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkxMTUyMA==", "bodyText": "Will this always be CreateIndexRequest when reached here? What about bulk request?", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r507911520", "createdAt": "2020-10-19T17:02:54Z", "author": {"login": "palashhedau"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/filter/OpenDistroSecurityFilter.java", "diffHunk": "@@ -283,7 +293,30 @@ public int order() {\n                 if(!dlsFlsValve.invoke(request, listener, pres.getAllowedFlsFields(), pres.getMaskedFields(), pres.getQueries())) {\n                     return;\n                 }\n-                chain.proceed(task, action, request, listener);\n+                final CreateIndexRequest createIndexRequest = pres.getRequest();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd94e5f93445a5b25196d7ce7387f503a628b7cd"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExOTkwNzk5", "url": "https://github.com/opensearch-project/security/pull/765#pullrequestreview-511990799", "createdAt": "2020-10-19T17:25:10Z", "commit": {"oid": "dd94e5f93445a5b25196d7ce7387f503a628b7cd"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNzoyNToxMVrOHkZRNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNzoyNzo1N1rOHkZX_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyNDc5MQ==", "bodyText": "All the request will be treated as CreateIndexRequest?", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r507924791", "createdAt": "2020-10-19T17:25:11Z", "author": {"login": "palashhedau"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/PrivilegesInterceptorImpl.java", "diffHunk": "@@ -170,18 +179,30 @@ public Boolean replaceKibanaIndex(final ActionRequest request, final String acti\n \n         }\n \n+        return CONTINUE_EVALUATION_REPLACE_RESULT;\n+    }\n+\n+    private CreateIndexRequest checkAndCreateRequestIfAbsent(final String name) {\n+        final IndexAbstraction indexAbstraction = clusterService.state().getMetadata().getIndicesLookup().get(name);\n+        if (indexAbstraction == null) {\n+            return new CreateIndexRequest(name + \"_1\")\n+                    .settings(KIBANA_INDEX_SETTINGS)\n+                    .alias(new Alias(name));\n+        }\n+        log.debug(\"{} {} already exists\", indexAbstraction.getType(), indexAbstraction.getName());\n         return null;\n     }\n \n-    private void replaceIndex(final ActionRequest request, final String oldIndexName, final String newIndexName, final String action) {\n+    private CreateIndexRequest replaceIndex(final ActionRequest request, final String oldIndexName, final String newIndexName, final String action) {\n         boolean kibOk = false;\n+        CreateIndexRequest createIndexRequest = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd94e5f93445a5b25196d7ce7387f503a628b7cd"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyNjUyNA==", "bodyText": "Who sets this?", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r507926524", "createdAt": "2020-10-19T17:27:57Z", "author": {"login": "palashhedau"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/privileges/PrivilegesEvaluatorResponse.java", "diffHunk": "@@ -41,6 +43,7 @@\n     Map<String,Set<String>> maskedFields;\n     Map<String,Set<String>> queries;\n     PrivilegesEvaluatorResponseState state = PrivilegesEvaluatorResponseState.PENDING;\n+    CreateIndexRequest request;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd94e5f93445a5b25196d7ce7387f503a628b7cd"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMjUwNDA3", "url": "https://github.com/opensearch-project/security/pull/765#pullrequestreview-512250407", "createdAt": "2020-10-20T00:32:45Z", "commit": {"oid": "dd94e5f93445a5b25196d7ce7387f503a628b7cd"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMDozMjo0NlrOHkmViw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNDozNDo0MFrOHlZ54Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEzODg5MQ==", "bodyText": "Can we use some opposite wording for \"was not acknowledged\".\nMaybe something like: \"Request to create a new index {} with aliases {} has failed.\" or \"was rejected.\"", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r508138891", "createdAt": "2020-10-20T00:32:46Z", "author": {"login": "dinusX"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/filter/OpenDistroSecurityFilter.java", "diffHunk": "@@ -92,6 +98,8 @@\n \n public class OpenDistroSecurityFilter implements ActionFilter {\n \n+    private static final String CREATE_INDEX_ERROR_MSG = \"Request to create new index {} with aliases {} was not acknowledged\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd94e5f93445a5b25196d7ce7387f503a628b7cd"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0MzY2OA==", "bodyText": "Is there any risk in using \"startsWith(..)\".\nCan this allow me to create indices with the same prefix as the .kibana+tenant index, even if I don't have write permissions ?\nShould we replace this with 2 equals: one for index name and another for name + \"_1\".\nOr we can even check if request has any aliases with the same name?", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r508143668", "createdAt": "2020-10-20T00:49:47Z", "author": {"login": "dinusX"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/PrivilegesInterceptorImpl.java", "diffHunk": "@@ -132,13 +141,13 @@ public Boolean replaceKibanaIndex(final ActionRequest request, final String acti\n         }\n \n         //request not made by the kibana server and user index is the only index/alias involved\n-        if (!user.getName().equals(kibanaserverUsername) && requestedResolved.getAllIndices().size() == 1\n-                && requestedResolved.getAllIndices().contains(toUserIndexName(kibanaIndexName, requestedTenant))) {\n-\n-            if (isTenantAllowed(request, action, user, tenants, requestedTenant)) {\n-                return Boolean.FALSE;\n+        if (!user.getName().equals(kibanaserverUsername)) {\n+            final Set<String> indices = requestedResolved.getAllIndices();\n+            final String tenantIndexName = toUserIndexName(kibanaIndexName, requestedTenant);\n+            if (indices.size() == 1 && indices.iterator().next().startsWith(tenantIndexName) &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd94e5f93445a5b25196d7ce7387f503a628b7cd"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0NDY1OA==", "bodyText": "Can you return here \"null\" explicitly, even if the createIndexRequest is also null.\nThis will make easier to understand the code behavior.", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r508144658", "createdAt": "2020-10-20T00:53:41Z", "author": {"login": "dinusX"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/PrivilegesInterceptorImpl.java", "diffHunk": "@@ -170,18 +179,30 @@ public Boolean replaceKibanaIndex(final ActionRequest request, final String acti\n \n         }\n \n+        return CONTINUE_EVALUATION_REPLACE_RESULT;\n+    }\n+\n+    private CreateIndexRequest checkAndCreateRequestIfAbsent(final String name) {\n+        final IndexAbstraction indexAbstraction = clusterService.state().getMetadata().getIndicesLookup().get(name);\n+        if (indexAbstraction == null) {\n+            return new CreateIndexRequest(name + \"_1\")\n+                    .settings(KIBANA_INDEX_SETTINGS)\n+                    .alias(new Alias(name));\n+        }\n+        log.debug(\"{} {} already exists\", indexAbstraction.getType(), indexAbstraction.getName());\n         return null;\n     }\n \n-    private void replaceIndex(final ActionRequest request, final String oldIndexName, final String newIndexName, final String action) {\n+    private CreateIndexRequest replaceIndex(final ActionRequest request, final String oldIndexName, final String newIndexName, final String action) {\n         boolean kibOk = false;\n+        CreateIndexRequest createIndexRequest = null;\n \n         if (log.isDebugEnabled()) {\n             log.debug(\"{} index will be replaced with {} in this {} request\", oldIndexName, newIndexName, request.getClass().getName());\n         }\n \n         if (request instanceof GetFieldMappingsIndexRequest || request instanceof GetFieldMappingsRequest) {\n-            return;\n+            return createIndexRequest;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd94e5f93445a5b25196d7ce7387f503a628b7cd"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0NDcwMw==", "bodyText": "Would be great to add a comment explaining this line.", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r508144703", "createdAt": "2020-10-20T00:53:53Z", "author": {"login": "dinusX"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/PrivilegesInterceptorImpl.java", "diffHunk": "@@ -192,7 +213,7 @@ private void replaceIndex(final ActionRequest request, final String oldIndexName\n \n         // CreateIndexRequest\n         if (request instanceof CreateIndexRequest) {\n-            ((CreateIndexRequest) request).index(newIndexName);\n+            ((CreateIndexRequest) request).index(newIndexName + \"_1\").alias(new Alias(newIndexName));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd94e5f93445a5b25196d7ce7387f503a628b7cd"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODkzMDM4Ng==", "bodyText": "Is there any way to avoid failures during concurrent create index requests.\nFor example if another Node was also trying to create the same index in parallel and succeeded first, can we detect this here from error and continue with operation instead of failing ?", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r508930386", "createdAt": "2020-10-21T01:10:41Z", "author": {"login": "dinusX"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/filter/OpenDistroSecurityFilter.java", "diffHunk": "@@ -283,7 +293,30 @@ public int order() {\n                 if(!dlsFlsValve.invoke(request, listener, pres.getAllowedFlsFields(), pres.getMaskedFields(), pres.getQueries())) {\n                     return;\n                 }\n-                chain.proceed(task, action, request, listener);\n+                final CreateIndexRequest createIndexRequest = pres.getRequest();\n+                if (createIndexRequest == null) {\n+                    chain.proceed(task, action, request, listener);\n+                } else {\n+                    client.admin().indices().create(createIndexRequest, new ActionListener<CreateIndexResponse>() {\n+                        @Override\n+                        public void onResponse(CreateIndexResponse createIndexResponse) {\n+                            log.debug(\"CreateIndexRequest {}, CreateIndexResponse {}\", createIndexRequest, createIndexResponse);\n+                            if (createIndexResponse.isAcknowledged()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd94e5f93445a5b25196d7ce7387f503a628b7cd"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk4Mjg2Mw==", "bodyText": "Not sure how often there might be bulk requests, but do you think that it's worth to add some optimization here, and generate the object only once for the first Index Request (in case if there are N write requests to the same kibana+tenant index).", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r508982863", "createdAt": "2020-10-21T04:31:05Z", "author": {"login": "dinusX"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/PrivilegesInterceptorImpl.java", "diffHunk": "@@ -203,6 +224,7 @@ private void replaceIndex(final ActionRequest request, final String oldIndexName\n                 }\n \n                 if (ar instanceof IndexRequest) {\n+                    createIndexRequest = checkAndCreateRequestIfAbsent(newIndexName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd94e5f93445a5b25196d7ce7387f503a628b7cd"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk4Mzc3Nw==", "bodyText": "Was not able to add comment to the below code (see below 3 lines).\nShould we create the kibana+tenant index for UpdateRequest as well?", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r508983777", "createdAt": "2020-10-21T04:34:40Z", "author": {"login": "dinusX"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/PrivilegesInterceptorImpl.java", "diffHunk": "@@ -203,6 +224,7 @@ private void replaceIndex(final ActionRequest request, final String oldIndexName\n                 }\n \n                 if (ar instanceof IndexRequest) {\n+                    createIndexRequest = checkAndCreateRequestIfAbsent(newIndexName);\n                     ((IndexRequest) ar).index(newIndexName);\n                 }\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd94e5f93445a5b25196d7ce7387f503a628b7cd"}, "originalPosition": 158}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzMzM0MDM1", "url": "https://github.com/opensearch-project/security/pull/765#pullrequestreview-513334035", "createdAt": "2020-10-21T06:11:49Z", "commit": {"oid": "dd94e5f93445a5b25196d7ce7387f503a628b7cd"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNjoxMTo1MFrOHlbrlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNjozNDowM1rOHlcN2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAxMjg4Nw==", "bodyText": "Can any suffix like \"security\" be used? My understanding is that migrated index will the number suffix added.", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r509012887", "createdAt": "2020-10-21T06:11:50Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/PrivilegesInterceptorImpl.java", "diffHunk": "@@ -170,18 +179,30 @@ public Boolean replaceKibanaIndex(final ActionRequest request, final String acti\n \n         }\n \n+        return CONTINUE_EVALUATION_REPLACE_RESULT;\n+    }\n+\n+    private CreateIndexRequest checkAndCreateRequestIfAbsent(final String name) {\n+        final IndexAbstraction indexAbstraction = clusterService.state().getMetadata().getIndicesLookup().get(name);\n+        if (indexAbstraction == null) {\n+            return new CreateIndexRequest(name + \"_1\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd94e5f93445a5b25196d7ce7387f503a628b7cd"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAxMzY0Ng==", "bodyText": "Can we rename this to just \"createIndexRequestIfAbsent\" ? not clear from the name what the check is", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r509013646", "createdAt": "2020-10-21T06:13:59Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/PrivilegesInterceptorImpl.java", "diffHunk": "@@ -170,18 +179,30 @@ public Boolean replaceKibanaIndex(final ActionRequest request, final String acti\n \n         }\n \n+        return CONTINUE_EVALUATION_REPLACE_RESULT;\n+    }\n+\n+    private CreateIndexRequest checkAndCreateRequestIfAbsent(final String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd94e5f93445a5b25196d7ce7387f503a628b7cd"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAxNDg1NA==", "bodyText": "Can the suffix logic be consolidated into a separate function to avoid missing any logic in the future. I see \"_1\" used in the subsequent create index logic too.", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r509014854", "createdAt": "2020-10-21T06:16:58Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/PrivilegesInterceptorImpl.java", "diffHunk": "@@ -170,18 +179,30 @@ public Boolean replaceKibanaIndex(final ActionRequest request, final String acti\n \n         }\n \n+        return CONTINUE_EVALUATION_REPLACE_RESULT;\n+    }\n+\n+    private CreateIndexRequest checkAndCreateRequestIfAbsent(final String name) {\n+        final IndexAbstraction indexAbstraction = clusterService.state().getMetadata().getIndicesLookup().get(name);\n+        if (indexAbstraction == null) {\n+            return new CreateIndexRequest(name + \"_1\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAxMjg4Nw=="}, "originalCommit": {"oid": "dd94e5f93445a5b25196d7ce7387f503a628b7cd"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAxOTc0Nw==", "bodyText": "Why are these requests done differently ?\ncreateIndexRequest = checkAndCreateRequestIfAbsent(newIndexName);\nand\n((CreateIndexRequest) request).index(newIndexName + \"_1\").alias(new Alias(newIndexName));", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r509019747", "createdAt": "2020-10-21T06:29:28Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/PrivilegesInterceptorImpl.java", "diffHunk": "@@ -203,6 +224,7 @@ private void replaceIndex(final ActionRequest request, final String oldIndexName\n                 }\n \n                 if (ar instanceof IndexRequest) {\n+                    createIndexRequest = checkAndCreateRequestIfAbsent(newIndexName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd94e5f93445a5b25196d7ce7387f503a628b7cd"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAyMTY1Nw==", "bodyText": "Is it possible to factor out to separate function for replacing kibana index to avoid duplication ?", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r509021657", "createdAt": "2020-10-21T06:34:03Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/privileges/PrivilegesEvaluator.java", "diffHunk": "@@ -338,19 +337,19 @@ public PrivilegesEvaluatorResponse evaluate(final User user, String action0, fin\n \n         if(privilegesInterceptor.getClass() != PrivilegesInterceptor.class) {\n \n-            final Boolean replaceResult = privilegesInterceptor.replaceKibanaIndex(request, action0, user, dcm, requestedResolved, mapTenants(user, mappedRoles));\n+            final PrivilegesInterceptor.ReplaceResult replaceResult = privilegesInterceptor.replaceKibanaIndex(request, action0, user, dcm, requestedResolved, mapTenants(user, mappedRoles));\n \n             if(log.isDebugEnabled()) {\n                 log.debug(\"Result from privileges interceptor: {}\", replaceResult);\n             }\n \n-            if (replaceResult == Boolean.TRUE) {\n-                auditLog.logMissingPrivileges(action0, request, task);\n-                return presponse;\n-            }\n-\n-            if (replaceResult == Boolean.FALSE) {\n-                presponse.allowed = true;\n+            if (!replaceResult.continueEvaluation) {\n+                if (replaceResult.accessDenied) {\n+                    auditLog.logMissingPrivileges(action0, request, task);\n+                } else {\n+                    presponse.allowed = true;\n+                    presponse.request = replaceResult.createIndexRequest;\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd94e5f93445a5b25196d7ce7387f503a628b7cd"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzNzM0MzA2", "url": "https://github.com/opensearch-project/security/pull/765#pullrequestreview-513734306", "createdAt": "2020-10-21T14:13:46Z", "commit": {"oid": "dd94e5f93445a5b25196d7ce7387f503a628b7cd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNDoxMzo0NlrOHluo9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNDoxMzo0NlrOHluo9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMyMzUxMA==", "bodyText": "Is this a normal setting for the Kibana index?", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r509323510", "createdAt": "2020-10-21T14:13:46Z", "author": {"login": "nibix"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/PrivilegesInterceptorImpl.java", "diffHunk": "@@ -49,10 +53,15 @@\n import com.amazon.opendistroforelasticsearch.security.securityconf.DynamicConfigModel;\n import com.amazon.opendistroforelasticsearch.security.user.User;\n \n+import com.google.common.collect.ImmutableMap;\n+\n public class PrivilegesInterceptorImpl extends PrivilegesInterceptor {\n \n     private static final String USER_TENANT = \"__user__\";\n     private static final String EMPTY_STRING = \"\";\n+    private static final Map<String, Object> KIBANA_INDEX_SETTINGS = ImmutableMap.of(\n+            IndexMetadata.SETTING_NUMBER_OF_SHARDS, 1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd94e5f93445a5b25196d7ce7387f503a628b7cd"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzNzM4MTQw", "url": "https://github.com/opensearch-project/security/pull/765#pullrequestreview-513738140", "createdAt": "2020-10-21T14:17:02Z", "commit": {"oid": "dd94e5f93445a5b25196d7ce7387f503a628b7cd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNDoxNzowM1rOHlu0eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNDoxNzowM1rOHlu0eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMyNjQ1OA==", "bodyText": "This (in combination with the code executing the CreateIndexRequest inside OpenDistroSecurityFilter) might suffer from concurrency problems if several index requests are done in quick succession. Possibly one should give ResourceAlreadyExistsException a special treatment when handling errors.\nAlso, is it safe to have a CreateIndexRequest directly followed by an IndexRequest? I am a bit worried that this might be unreliable in high-load situations. So, extensive testing might be sensible here.", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r509326458", "createdAt": "2020-10-21T14:17:03Z", "author": {"login": "nibix"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/PrivilegesInterceptorImpl.java", "diffHunk": "@@ -170,18 +179,30 @@ public Boolean replaceKibanaIndex(final ActionRequest request, final String acti\n \n         }\n \n+        return CONTINUE_EVALUATION_REPLACE_RESULT;\n+    }\n+\n+    private CreateIndexRequest checkAndCreateRequestIfAbsent(final String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd94e5f93445a5b25196d7ce7387f503a628b7cd"}, "originalPosition": 116}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzNzQ2MzUw", "url": "https://github.com/opensearch-project/security/pull/765#pullrequestreview-513746350", "createdAt": "2020-10-21T14:24:14Z", "commit": {"oid": "dd94e5f93445a5b25196d7ce7387f503a628b7cd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNDoyNDoxNFrOHlvM_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNDoyNDoxNFrOHlvM_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMzMjczMg==", "bodyText": "Style: This is somewhat a breach of separation of concerns. This might lead to confusion (as illustrated by the existing comments) and hard to understand logic. One should try to concentrate the logic in PrivilegesInterceptorImpl. I can think of two alternatives:\n\nProvide a generic callback instead of the CreateIndexRequest\nDynamically extend the ActionFilterChain. This would however probably require extension of a couple of method interfaces.", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r509332732", "createdAt": "2020-10-21T14:24:14Z", "author": {"login": "nibix"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/filter/OpenDistroSecurityFilter.java", "diffHunk": "@@ -283,7 +293,30 @@ public int order() {\n                 if(!dlsFlsValve.invoke(request, listener, pres.getAllowedFlsFields(), pres.getMaskedFields(), pres.getQueries())) {\n                     return;\n                 }\n-                chain.proceed(task, action, request, listener);\n+                final CreateIndexRequest createIndexRequest = pres.getRequest();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd94e5f93445a5b25196d7ce7387f503a628b7cd"}, "originalPosition": 57}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2ce08f5cdf920f0dece6ace053bb8f91f53ba1b", "author": {"user": {"login": "vrozov", "name": "Vlad Rozov"}}, "url": "https://github.com/opensearch-project/security/commit/a2ce08f5cdf920f0dece6ace053bb8f91f53ba1b", "committedDate": "2020-10-22T06:01:29Z", "message": "Code review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1MTE2MTI3", "url": "https://github.com/opensearch-project/security/pull/765#pullrequestreview-515116127", "createdAt": "2020-10-22T21:02:11Z", "commit": {"oid": "a2ce08f5cdf920f0dece6ace053bb8f91f53ba1b"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMTowMjoxMVrOHmzsnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMTowMzoyNFrOHmzvDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ1NDk0Mw==", "bodyText": "Does the original \".kibana_1\" index have a similar setting ? If not, should we use the same settings as original kibana index ?", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r510454943", "createdAt": "2020-10-22T21:02:11Z", "author": {"login": "dinusX"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/PrivilegesInterceptorImpl.java", "diffHunk": "@@ -49,10 +55,17 @@\n import com.amazon.opendistroforelasticsearch.security.securityconf.DynamicConfigModel;\n import com.amazon.opendistroforelasticsearch.security.user.User;\n \n+import com.google.common.collect.ImmutableMap;\n+\n public class PrivilegesInterceptorImpl extends PrivilegesInterceptor {\n \n     private static final String USER_TENANT = \"__user__\";\n     private static final String EMPTY_STRING = \"\";\n+    private static final String SUFFIX = \"_1\";\n+    private static final Map<String, Object> KIBANA_INDEX_SETTINGS = ImmutableMap.of(\n+            IndexMetadata.SETTING_NUMBER_OF_SHARDS, 1,\n+            IndexMetadata.SETTING_AUTO_EXPAND_REPLICAS, \"0-1\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ce08f5cdf920f0dece6ace053bb8f91f53ba1b"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ1NTE2MQ==", "bodyText": "Can we rename this to something more clear, like \"KIBANA_INDEX_SUFFIX\"", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r510455161", "createdAt": "2020-10-22T21:02:37Z", "author": {"login": "dinusX"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/PrivilegesInterceptorImpl.java", "diffHunk": "@@ -49,10 +55,17 @@\n import com.amazon.opendistroforelasticsearch.security.securityconf.DynamicConfigModel;\n import com.amazon.opendistroforelasticsearch.security.user.User;\n \n+import com.google.common.collect.ImmutableMap;\n+\n public class PrivilegesInterceptorImpl extends PrivilegesInterceptor {\n \n     private static final String USER_TENANT = \"__user__\";\n     private static final String EMPTY_STRING = \"\";\n+    private static final String SUFFIX = \"_1\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ce08f5cdf920f0dece6ace053bb8f91f53ba1b"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ1NTU2Ng==", "bodyText": "Should we add a null check for \"aliases\" ?", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r510455566", "createdAt": "2020-10-22T21:03:24Z", "author": {"login": "dinusX"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/filter/OpenDistroSecurityFilter.java", "diffHunk": "@@ -138,6 +149,10 @@ public int order() {\n             apply0(task, action, request, listener, chain);\n         }\n     }\n+\n+    private static Set<String> alias2Name(Set<Alias> aliases) {\n+        return aliases.stream().map(a -> a.name()).collect(ImmutableSet.toImmutableSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ce08f5cdf920f0dece6ace053bb8f91f53ba1b"}, "originalPosition": 55}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0687e3deabf68b20a2cf733d0156120b25efae6", "author": {"user": {"login": "vrozov", "name": "Vlad Rozov"}}, "url": "https://github.com/opensearch-project/security/commit/a0687e3deabf68b20a2cf733d0156120b25efae6", "committedDate": "2020-10-22T23:20:40Z", "message": "Code review and unit tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1MjU4MjA4", "url": "https://github.com/opensearch-project/security/pull/765#pullrequestreview-515258208", "createdAt": "2020-10-23T03:51:09Z", "commit": {"oid": "a0687e3deabf68b20a2cf733d0156120b25efae6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1ODk2MDc2", "url": "https://github.com/opensearch-project/security/pull/765#pullrequestreview-515896076", "createdAt": "2020-10-23T18:09:56Z", "commit": {"oid": "a0687e3deabf68b20a2cf733d0156120b25efae6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxODowOTo1NlrOHnYV5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxODowOTo1NlrOHnYV5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA1NTMzMg==", "bodyText": "Should we add a test for kibana tenant index ending with a large number ?", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r511055332", "createdAt": "2020-10-23T18:09:56Z", "author": {"login": "sujithvm"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/multitenancy/test/MultitenancyTests.java", "diffHunk": "@@ -243,11 +249,12 @@ public void testMtMulti() throws Exception {\n             Map indexSettings = new HashMap();\n             indexSettings.put(\"number_of_shards\", 1);\n             indexSettings.put(\"number_of_replicas\", 0);\n-            tc.admin().indices().create(new CreateIndexRequest(\".kibana_92668751_admin\")\n-                .settings(indexSettings))\n+            tc.admin().indices().create(new CreateIndexRequest(kibanaIndex)\n+                .settings(indexSettings)\n+                .alias(new Alias(\".kibana_92668751_admin\")))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0687e3deabf68b20a2cf733d0156120b25efae6"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1ODk5NjY2", "url": "https://github.com/opensearch-project/security/pull/765#pullrequestreview-515899666", "createdAt": "2020-10-23T18:15:22Z", "commit": {"oid": "a0687e3deabf68b20a2cf733d0156120b25efae6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2778, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}