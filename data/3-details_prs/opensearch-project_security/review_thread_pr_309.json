{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyMzMwMjA1", "number": 309, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwMzowMDozN1rODr6GAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNjowNjo0MFrODsIX8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MzY3MTY5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/resolver/IndexResolverReplacer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwMzowMDozN1rOF8hmLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDo0MToyMlrOF80Lmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAwOTMyNA==", "bodyText": "The only comment that is related to new variable name. Not very intuitive.\nI was thinking initially to renamed it to \"isSearchOrFieldsCapabilitiesRequest\", but Vlad suggested a better one \"enableCrossClusterResolution\", since this variable is basically indicating if we need to do cross-cluster resolution based on type of the request.", "url": "https://github.com/opensearch-project/security/pull/309#discussion_r399009324", "createdAt": "2020-03-27T03:00:37Z", "author": {"login": "dinusX"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/resolver/IndexResolverReplacer.java", "diffHunk": "@@ -161,7 +159,7 @@ private static final boolean isLocalAll(final String... requestedPatterns) {\n         return false;\n     }\n \n-    private Resolved resolveIndexPatterns(final IndicesOptions indicesOptions, final Object request, final String... requestedPatterns0) {\n+    private Resolved resolveIndexPatterns(final IndicesOptions indicesOptions, final boolean isSearchOrFieldsCapabilities, final String... requestedPatterns0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28735a232083be890efd184e2373c0b35f90664d"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMxMzgxOA==", "bodyText": "Done, sounds  better for sure", "url": "https://github.com/opensearch-project/security/pull/309#discussion_r399313818", "createdAt": "2020-03-27T14:41:22Z", "author": {"login": "DmitryOlshansky"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/resolver/IndexResolverReplacer.java", "diffHunk": "@@ -161,7 +159,7 @@ private static final boolean isLocalAll(final String... requestedPatterns) {\n         return false;\n     }\n \n-    private Resolved resolveIndexPatterns(final IndicesOptions indicesOptions, final Object request, final String... requestedPatterns0) {\n+    private Resolved resolveIndexPatterns(final IndicesOptions indicesOptions, final boolean isSearchOrFieldsCapabilities, final String... requestedPatterns0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAwOTMyNA=="}, "originalCommit": {"oid": "28735a232083be890efd184e2373c0b35f90664d"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTgzNTI2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/resolver/IndexResolverReplacer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNToyNjoyMFrOF82Lmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNTo1NzoyNFrOF83gwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM0NjU4Nw==", "bodyText": "Either inline or rename to enableCrossClusterResolution.", "url": "https://github.com/opensearch-project/security/pull/309#discussion_r399346587", "createdAt": "2020-03-27T15:26:20Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/resolver/IndexResolverReplacer.java", "diffHunk": "@@ -316,28 +313,59 @@ public boolean replace(final TransportRequest request, boolean retainMode, Strin\n         }, false);\n     }\n \n+    private static final class IndexResolveKey {\n+        private final IndicesOptions opts;\n+        private final boolean enableCrossClusterResolution;\n+        private final String[] original;\n+        public IndexResolveKey(IndicesOptions opts, boolean isSearchOrFieldCapabilities, String[] original) {\n+            this.opts = opts;\n+            this.enableCrossClusterResolution = isSearchOrFieldCapabilities;\n+            this.original = original;\n+        }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (this == o) return true;\n+            if (o == null || getClass() != o.getClass()) return false;\n+            IndexResolveKey that = (IndexResolveKey) o;\n+            return enableCrossClusterResolution == that.enableCrossClusterResolution &&\n+                    opts.equals(that.opts) &&\n+                    Arrays.equals(original, that.original);\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return Boolean.hashCode(enableCrossClusterResolution) + 31 * opts.hashCode() + 127*Arrays.hashCode(original);\n+        }\n+    }\n+\n     public Resolved resolveRequest(final Object request) {\n         if(log.isDebugEnabled()) {\n             log.debug(\"Resolve aliases, indices and types from {}\", request.getClass().getSimpleName());\n         }\n \n         final Resolved.Builder resolvedBuilder = new Resolved.Builder();\n         final AtomicBoolean isIndicesRequest = new AtomicBoolean();\n-        getOrReplaceAllIndices(request, new IndicesProvider() {\n-\n-            @Override\n-            public String[] provide(String[] original, Object localRequest, boolean supportsReplace) {\n-                final IndicesOptions indicesOptions = indicesOptionsFrom(localRequest);\n-                final Resolved iResolved = resolveIndexPatterns(indicesOptions, localRequest, original);\n+        // set of previously resolved index requests to avoid resolving\n+        // the same index more than once while processing bulk requests\n+        final Set<IndexResolveKey> alreadyResolved = new HashSet<>();\n+\n+        getOrReplaceAllIndices(request, (original, localRequest, supportsReplace) -> {\n+            final IndicesOptions indicesOptions = indicesOptionsFrom(localRequest);\n+            final boolean isSearchOrFieldCapabilities = localRequest instanceof FieldCapabilitiesRequest || localRequest instanceof SearchRequest;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM2ODM4NQ==", "bodyText": "Yeah, missed that one - fixed!", "url": "https://github.com/opensearch-project/security/pull/309#discussion_r399368385", "createdAt": "2020-03-27T15:57:24Z", "author": {"login": "DmitryOlshansky"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/resolver/IndexResolverReplacer.java", "diffHunk": "@@ -316,28 +313,59 @@ public boolean replace(final TransportRequest request, boolean retainMode, Strin\n         }, false);\n     }\n \n+    private static final class IndexResolveKey {\n+        private final IndicesOptions opts;\n+        private final boolean enableCrossClusterResolution;\n+        private final String[] original;\n+        public IndexResolveKey(IndicesOptions opts, boolean isSearchOrFieldCapabilities, String[] original) {\n+            this.opts = opts;\n+            this.enableCrossClusterResolution = isSearchOrFieldCapabilities;\n+            this.original = original;\n+        }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (this == o) return true;\n+            if (o == null || getClass() != o.getClass()) return false;\n+            IndexResolveKey that = (IndexResolveKey) o;\n+            return enableCrossClusterResolution == that.enableCrossClusterResolution &&\n+                    opts.equals(that.opts) &&\n+                    Arrays.equals(original, that.original);\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return Boolean.hashCode(enableCrossClusterResolution) + 31 * opts.hashCode() + 127*Arrays.hashCode(original);\n+        }\n+    }\n+\n     public Resolved resolveRequest(final Object request) {\n         if(log.isDebugEnabled()) {\n             log.debug(\"Resolve aliases, indices and types from {}\", request.getClass().getSimpleName());\n         }\n \n         final Resolved.Builder resolvedBuilder = new Resolved.Builder();\n         final AtomicBoolean isIndicesRequest = new AtomicBoolean();\n-        getOrReplaceAllIndices(request, new IndicesProvider() {\n-\n-            @Override\n-            public String[] provide(String[] original, Object localRequest, boolean supportsReplace) {\n-                final IndicesOptions indicesOptions = indicesOptionsFrom(localRequest);\n-                final Resolved iResolved = resolveIndexPatterns(indicesOptions, localRequest, original);\n+        // set of previously resolved index requests to avoid resolving\n+        // the same index more than once while processing bulk requests\n+        final Set<IndexResolveKey> alreadyResolved = new HashSet<>();\n+\n+        getOrReplaceAllIndices(request, (original, localRequest, supportsReplace) -> {\n+            final IndicesOptions indicesOptions = indicesOptionsFrom(localRequest);\n+            final boolean isSearchOrFieldCapabilities = localRequest instanceof FieldCapabilitiesRequest || localRequest instanceof SearchRequest;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM0NjU4Nw=="}, "originalCommit": null, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NjAxMTM4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/resolver/IndexResolverReplacer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNjowNjo0MFrOF835dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNjoyMzowMlrOF84kVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM3NDcxMQ==", "bodyText": "one more occurrence :)", "url": "https://github.com/opensearch-project/security/pull/309#discussion_r399374711", "createdAt": "2020-03-27T16:06:40Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/resolver/IndexResolverReplacer.java", "diffHunk": "@@ -316,28 +313,59 @@ public boolean replace(final TransportRequest request, boolean retainMode, Strin\n         }, false);\n     }\n \n+    private static final class IndexResolveKey {\n+        private final IndicesOptions opts;\n+        private final boolean enableCrossClusterResolution;\n+        private final String[] original;\n+        public IndexResolveKey(IndicesOptions opts, boolean isSearchOrFieldCapabilities, String[] original) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM4NTY4Ng==", "bodyText": "renaming is hard ;)\nDone", "url": "https://github.com/opensearch-project/security/pull/309#discussion_r399385686", "createdAt": "2020-03-27T16:23:02Z", "author": {"login": "DmitryOlshansky"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/resolver/IndexResolverReplacer.java", "diffHunk": "@@ -316,28 +313,59 @@ public boolean replace(final TransportRequest request, boolean retainMode, Strin\n         }, false);\n     }\n \n+    private static final class IndexResolveKey {\n+        private final IndicesOptions opts;\n+        private final boolean enableCrossClusterResolution;\n+        private final String[] original;\n+        public IndexResolveKey(IndicesOptions opts, boolean isSearchOrFieldCapabilities, String[] original) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM3NDcxMQ=="}, "originalCommit": null, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2550, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}