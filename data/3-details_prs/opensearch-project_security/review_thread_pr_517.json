{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4ODcyMjc3", "number": 517, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMzoxNDoxNVrOEJSe4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMzoxNDoxNVrOEJSe4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTc1NDU3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/ConfigurationRepository.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMzoxNDoxNVrOGpxBIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwNjozNDoxNlrOGpzvig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0NzkwNw==", "bodyText": "Is this try necessary?", "url": "https://github.com/opensearch-project/security/pull/517#discussion_r446447907", "createdAt": "2020-06-26T23:14:15Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/ConfigurationRepository.java", "diffHunk": "@@ -126,30 +128,36 @@ public void run() {\n                                 final ThreadContext threadContext = threadPool.getThreadContext();\n                                 try(StoredContext ctx = threadContext.stashContext()) {\n                                     threadContext.putHeader(ConfigConstants.OPENDISTRO_SECURITY_CONF_REQUEST_HEADER, \"true\");\n-                                    LOGGER.info(\"Will create {} index so we can apply default config\", opendistrosecurityIndex);\n-\n-                                    Map<String, Object> indexSettings = new HashMap<>();\n-                                    indexSettings.put(\"index.number_of_shards\", 1);\n-                                    indexSettings.put(\"index.auto_expand_replicas\", \"0-all\");\n-\n-                                    boolean ok = client.admin().indices().create(new CreateIndexRequest(opendistrosecurityIndex)\n-                                            .settings(indexSettings))\n-                                            .actionGet().isAcknowledged();\n-                                    LOGGER.info(\"Index {} created?: {}\", opendistrosecurityIndex, ok);\n-                                    if(ok) {\n-                                        ConfigHelper.uploadFile(client, cd+\"config.yml\", opendistrosecurityIndex, CType.CONFIG, DEFAULT_CONFIG_VERSION);\n-                                        ConfigHelper.uploadFile(client, cd+\"roles.yml\", opendistrosecurityIndex, CType.ROLES, DEFAULT_CONFIG_VERSION);\n-                                        ConfigHelper.uploadFile(client, cd+\"roles_mapping.yml\", opendistrosecurityIndex, CType.ROLESMAPPING, DEFAULT_CONFIG_VERSION);\n-                                        ConfigHelper.uploadFile(client, cd+\"internal_users.yml\", opendistrosecurityIndex, CType.INTERNALUSERS, DEFAULT_CONFIG_VERSION);\n-                                        ConfigHelper.uploadFile(client, cd+\"action_groups.yml\", opendistrosecurityIndex, CType.ACTIONGROUPS, DEFAULT_CONFIG_VERSION);\n-                                        if(DEFAULT_CONFIG_VERSION == 2) {\n-                                            ConfigHelper.uploadFile(client, cd+\"tenants.yml\", opendistrosecurityIndex, CType.TENANTS, DEFAULT_CONFIG_VERSION);\n+\n+                                    try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ1NzkzNQ==", "bodyText": "I have put this try because it enables you to perform load other configs (audit.yml) or perform activities within the stored context block.", "url": "https://github.com/opensearch-project/security/pull/517#discussion_r446457935", "createdAt": "2020-06-27T00:11:15Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/ConfigurationRepository.java", "diffHunk": "@@ -126,30 +128,36 @@ public void run() {\n                                 final ThreadContext threadContext = threadPool.getThreadContext();\n                                 try(StoredContext ctx = threadContext.stashContext()) {\n                                     threadContext.putHeader(ConfigConstants.OPENDISTRO_SECURITY_CONF_REQUEST_HEADER, \"true\");\n-                                    LOGGER.info(\"Will create {} index so we can apply default config\", opendistrosecurityIndex);\n-\n-                                    Map<String, Object> indexSettings = new HashMap<>();\n-                                    indexSettings.put(\"index.number_of_shards\", 1);\n-                                    indexSettings.put(\"index.auto_expand_replicas\", \"0-all\");\n-\n-                                    boolean ok = client.admin().indices().create(new CreateIndexRequest(opendistrosecurityIndex)\n-                                            .settings(indexSettings))\n-                                            .actionGet().isAcknowledged();\n-                                    LOGGER.info(\"Index {} created?: {}\", opendistrosecurityIndex, ok);\n-                                    if(ok) {\n-                                        ConfigHelper.uploadFile(client, cd+\"config.yml\", opendistrosecurityIndex, CType.CONFIG, DEFAULT_CONFIG_VERSION);\n-                                        ConfigHelper.uploadFile(client, cd+\"roles.yml\", opendistrosecurityIndex, CType.ROLES, DEFAULT_CONFIG_VERSION);\n-                                        ConfigHelper.uploadFile(client, cd+\"roles_mapping.yml\", opendistrosecurityIndex, CType.ROLESMAPPING, DEFAULT_CONFIG_VERSION);\n-                                        ConfigHelper.uploadFile(client, cd+\"internal_users.yml\", opendistrosecurityIndex, CType.INTERNALUSERS, DEFAULT_CONFIG_VERSION);\n-                                        ConfigHelper.uploadFile(client, cd+\"action_groups.yml\", opendistrosecurityIndex, CType.ACTIONGROUPS, DEFAULT_CONFIG_VERSION);\n-                                        if(DEFAULT_CONFIG_VERSION == 2) {\n-                                            ConfigHelper.uploadFile(client, cd+\"tenants.yml\", opendistrosecurityIndex, CType.TENANTS, DEFAULT_CONFIG_VERSION);\n+\n+                                    try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0NzkwNw=="}, "originalCommit": null, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ5MjU1NA==", "bodyText": "nit: introduce a new method that creates index and returns true if index was created and false otherwise.", "url": "https://github.com/opensearch-project/security/pull/517#discussion_r446492554", "createdAt": "2020-06-27T06:34:16Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/ConfigurationRepository.java", "diffHunk": "@@ -126,30 +128,36 @@ public void run() {\n                                 final ThreadContext threadContext = threadPool.getThreadContext();\n                                 try(StoredContext ctx = threadContext.stashContext()) {\n                                     threadContext.putHeader(ConfigConstants.OPENDISTRO_SECURITY_CONF_REQUEST_HEADER, \"true\");\n-                                    LOGGER.info(\"Will create {} index so we can apply default config\", opendistrosecurityIndex);\n-\n-                                    Map<String, Object> indexSettings = new HashMap<>();\n-                                    indexSettings.put(\"index.number_of_shards\", 1);\n-                                    indexSettings.put(\"index.auto_expand_replicas\", \"0-all\");\n-\n-                                    boolean ok = client.admin().indices().create(new CreateIndexRequest(opendistrosecurityIndex)\n-                                            .settings(indexSettings))\n-                                            .actionGet().isAcknowledged();\n-                                    LOGGER.info(\"Index {} created?: {}\", opendistrosecurityIndex, ok);\n-                                    if(ok) {\n-                                        ConfigHelper.uploadFile(client, cd+\"config.yml\", opendistrosecurityIndex, CType.CONFIG, DEFAULT_CONFIG_VERSION);\n-                                        ConfigHelper.uploadFile(client, cd+\"roles.yml\", opendistrosecurityIndex, CType.ROLES, DEFAULT_CONFIG_VERSION);\n-                                        ConfigHelper.uploadFile(client, cd+\"roles_mapping.yml\", opendistrosecurityIndex, CType.ROLESMAPPING, DEFAULT_CONFIG_VERSION);\n-                                        ConfigHelper.uploadFile(client, cd+\"internal_users.yml\", opendistrosecurityIndex, CType.INTERNALUSERS, DEFAULT_CONFIG_VERSION);\n-                                        ConfigHelper.uploadFile(client, cd+\"action_groups.yml\", opendistrosecurityIndex, CType.ACTIONGROUPS, DEFAULT_CONFIG_VERSION);\n-                                        if(DEFAULT_CONFIG_VERSION == 2) {\n-                                            ConfigHelper.uploadFile(client, cd+\"tenants.yml\", opendistrosecurityIndex, CType.TENANTS, DEFAULT_CONFIG_VERSION);\n+\n+                                    try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0NzkwNw=="}, "originalCommit": null, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2333, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}