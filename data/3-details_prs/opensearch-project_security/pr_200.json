{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyMzk2NTM1", "number": 200, "title": "Add Account API to enable users to change their own password", "bodyText": "Add new REST endpoint _opendistro/_security/api/account.\n\nGET request to get basic information of the signed-in user\n\nSample request:\nGET _opendistro/_security/api/account\n\nSample response:\n{\n    \"user_name\" : \"test\",\n    \"is_reserved\" : false,\n    \"is_hidden\" : false,\n    \"is_internal_user\" : true,\n    \"user_requested_tenant\" : \"__user__\",\n    \"backend_roles\" : [ ],\n    \"custom_attribute_names\" : [ ],\n    \"tenants\" : {\n    \"test\" : true\n    },\n    \"roles\" : [\n    \"own_index\"\n    ]\n}\n\n\nPUT request to update the credentials of the user.\n\nSample request:\nPUT _opendistro/_security/api/account\n{\n    \"current_password\" : \"old-pass\",\n    \"password\" : \"new-pass\"\n}\nSample response:\n{\n    \"status\": \"OK\",\n    \"message\":\"'test' updated.\"\n}\n\nSupporting PR in security-kibana-plugin: https://github.com/opendistro-for-elasticsearch/security-kibana-plugin/pull/126", "createdAt": "2020-01-14T01:09:57Z", "url": "https://github.com/opensearch-project/security/pull/200", "merged": true, "mergeCommit": {"oid": "9528e739d5242fd11334202576a61fc747529509"}, "closed": true, "closedAt": "2020-01-24T02:54:04Z", "author": {"login": "sujithvm"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb8tYxLAFqTM0NjMxOTIzNw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb9Vb-GAFqTM0NzcyMzc3Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2MzE5MjM3", "url": "https://github.com/opensearch-project/security/pull/200#pullrequestreview-346319237", "createdAt": "2020-01-22T02:48:23Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMjo0ODoyM1rOFgPMWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMzozMDowMlrOFgPrVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0NzY3NQ==", "bodyText": "what isReserved() will return if user is not an internal user ?", "url": "https://github.com/opensearch-project/security/pull/200#discussion_r369347675", "createdAt": "2020-01-22T02:48:23Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/AccountApiAction.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *  You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.dlic.rest.api;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.AuditLog;\n+import com.amazon.opendistroforelasticsearch.security.configuration.AdminDNs;\n+import com.amazon.opendistroforelasticsearch.security.configuration.ConfigurationRepository;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.AbstractConfigurationValidator;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.AccountValidator;\n+import com.amazon.opendistroforelasticsearch.security.privileges.PrivilegesEvaluator;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.Hashed;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.CType;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.SecurityDynamicConfiguration;\n+import com.amazon.opendistroforelasticsearch.security.ssl.transport.PrincipalExtractor;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.amazon.opendistroforelasticsearch.security.support.SecurityJsonNode;\n+import com.amazon.opendistroforelasticsearch.security.user.User;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import org.bouncycastle.crypto.generators.OpenBSDBCrypt;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.transport.TransportAddress;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestChannel;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.threadpool.ThreadPool;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Set;\n+\n+public class AccountApiAction extends InternalUsersApiAction {\n+\n+    private static final String RESOURCE_NAME = \"account\";\n+    private final PrivilegesEvaluator privilegesEvaluator;\n+    private final ThreadContext threadContext;\n+\n+    public AccountApiAction(Settings settings,\n+                            Path configPath,\n+                            RestController controller,\n+                            Client client,\n+                            AdminDNs adminDNs,\n+                            ConfigurationRepository cl,\n+                            ClusterService cs,\n+                            PrincipalExtractor principalExtractor,\n+                            PrivilegesEvaluator privilegesEvaluator,\n+                            ThreadPool threadPool,\n+                            AuditLog auditLog) {\n+        super(settings, configPath, controller, client, adminDNs, cl, cs, principalExtractor, privilegesEvaluator, threadPool, auditLog);\n+        this.privilegesEvaluator = privilegesEvaluator;\n+        this.threadContext = threadPool.getThreadContext();\n+    }\n+\n+    @Override\n+    protected void registerHandlers(RestController controller) {\n+        controller.registerHandler(RestRequest.Method.GET, \"/_opendistro/_security/api/account\", this);\n+        controller.registerHandler(RestRequest.Method.PUT, \"/_opendistro/_security/api/account\", this);\n+    }\n+\n+    @Override\n+    protected void handleGet(RestChannel channel, RestRequest request, Client client, final JsonNode content) throws IOException {\n+        final XContentBuilder builder = channel.newBuilder();\n+        BytesRestResponse response;\n+\n+        try {\n+            builder.startObject();\n+            final User user = threadContext.getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n+            if (user != null) {\n+                final TransportAddress remoteAddress = threadContext.getTransient(ConfigConstants.OPENDISTRO_SECURITY_REMOTE_ADDRESS);\n+                final Set<String> securityRoles = privilegesEvaluator.mapRoles(user, remoteAddress);\n+                final SecurityDynamicConfiguration<?> configuration = load(getConfigName(), false);\n+\n+                builder.field(\"user_name\", user.getName())\n+                        .field(\"is_reserved\", isReserved(configuration, user.getName()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0ODU4Nw==", "bodyText": "we should check this as first condition for put request. If not internal user, no need to check isHidden or isReserved", "url": "https://github.com/opensearch-project/security/pull/200#discussion_r369348587", "createdAt": "2020-01-22T02:53:05Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/AccountApiAction.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *  You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.dlic.rest.api;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.AuditLog;\n+import com.amazon.opendistroforelasticsearch.security.configuration.AdminDNs;\n+import com.amazon.opendistroforelasticsearch.security.configuration.ConfigurationRepository;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.AbstractConfigurationValidator;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.AccountValidator;\n+import com.amazon.opendistroforelasticsearch.security.privileges.PrivilegesEvaluator;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.Hashed;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.CType;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.SecurityDynamicConfiguration;\n+import com.amazon.opendistroforelasticsearch.security.ssl.transport.PrincipalExtractor;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.amazon.opendistroforelasticsearch.security.support.SecurityJsonNode;\n+import com.amazon.opendistroforelasticsearch.security.user.User;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import org.bouncycastle.crypto.generators.OpenBSDBCrypt;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.transport.TransportAddress;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestChannel;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.threadpool.ThreadPool;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Set;\n+\n+public class AccountApiAction extends InternalUsersApiAction {\n+\n+    private static final String RESOURCE_NAME = \"account\";\n+    private final PrivilegesEvaluator privilegesEvaluator;\n+    private final ThreadContext threadContext;\n+\n+    public AccountApiAction(Settings settings,\n+                            Path configPath,\n+                            RestController controller,\n+                            Client client,\n+                            AdminDNs adminDNs,\n+                            ConfigurationRepository cl,\n+                            ClusterService cs,\n+                            PrincipalExtractor principalExtractor,\n+                            PrivilegesEvaluator privilegesEvaluator,\n+                            ThreadPool threadPool,\n+                            AuditLog auditLog) {\n+        super(settings, configPath, controller, client, adminDNs, cl, cs, principalExtractor, privilegesEvaluator, threadPool, auditLog);\n+        this.privilegesEvaluator = privilegesEvaluator;\n+        this.threadContext = threadPool.getThreadContext();\n+    }\n+\n+    @Override\n+    protected void registerHandlers(RestController controller) {\n+        controller.registerHandler(RestRequest.Method.GET, \"/_opendistro/_security/api/account\", this);\n+        controller.registerHandler(RestRequest.Method.PUT, \"/_opendistro/_security/api/account\", this);\n+    }\n+\n+    @Override\n+    protected void handleGet(RestChannel channel, RestRequest request, Client client, final JsonNode content) throws IOException {\n+        final XContentBuilder builder = channel.newBuilder();\n+        BytesRestResponse response;\n+\n+        try {\n+            builder.startObject();\n+            final User user = threadContext.getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n+            if (user != null) {\n+                final TransportAddress remoteAddress = threadContext.getTransient(ConfigConstants.OPENDISTRO_SECURITY_REMOTE_ADDRESS);\n+                final Set<String> securityRoles = privilegesEvaluator.mapRoles(user, remoteAddress);\n+                final SecurityDynamicConfiguration<?> configuration = load(getConfigName(), false);\n+\n+                builder.field(\"user_name\", user.getName())\n+                        .field(\"is_reserved\", isReserved(configuration, user.getName()))\n+                        .field(\"is_internal_user\", configuration.exists(user.getName()))\n+                        .field(\"user_requested_tenant\", user.getRequestedTenant())\n+                        .field(\"backend_roles\", user.getRoles())\n+                        .field(\"custom_attribute_names\", user.getCustomAttributesMap().keySet())\n+                        .field(\"tenants\", privilegesEvaluator.mapTenants(user, securityRoles))\n+                        .field(\"roles\", securityRoles);\n+            }\n+            builder.endObject();\n+\n+            response = new BytesRestResponse(RestStatus.OK, builder);\n+        } catch (final Exception exception) {\n+            log.error(exception.toString(), exception);\n+\n+            builder.startObject()\n+                    .field(\"error\", exception.toString())\n+                    .endObject();\n+\n+            response = new BytesRestResponse(RestStatus.INTERNAL_SERVER_ERROR, builder);\n+        }\n+        channel.sendResponse(response);\n+    }\n+\n+    @Override\n+    protected void handlePut(RestChannel channel, final RestRequest request, final Client client, final JsonNode content) throws IOException {\n+        final User user = threadContext.getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n+        final String username = user.getName();\n+        final SecurityDynamicConfiguration<?> internalUser = load(CType.INTERNALUSERS, false);\n+\n+        if (isHidden(internalUser, username)) {\n+            forbidden(channel, \"Resource '\" + username + \"' is not available.\");\n+            return;\n+        }\n+\n+        if (isReserved(internalUser, username)) {\n+            forbidden(channel, \"Resource '\" + username + \"' is read-only.\");\n+            return;\n+        }\n+\n+        if (!internalUser.exists(username)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0OTM1MA==", "bodyText": "why do we need currentPasswordHash?", "url": "https://github.com/opensearch-project/security/pull/200#discussion_r369349350", "createdAt": "2020-01-22T02:56:35Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/AccountApiAction.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *  You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.dlic.rest.api;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.AuditLog;\n+import com.amazon.opendistroforelasticsearch.security.configuration.AdminDNs;\n+import com.amazon.opendistroforelasticsearch.security.configuration.ConfigurationRepository;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.AbstractConfigurationValidator;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.AccountValidator;\n+import com.amazon.opendistroforelasticsearch.security.privileges.PrivilegesEvaluator;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.Hashed;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.CType;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.SecurityDynamicConfiguration;\n+import com.amazon.opendistroforelasticsearch.security.ssl.transport.PrincipalExtractor;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.amazon.opendistroforelasticsearch.security.support.SecurityJsonNode;\n+import com.amazon.opendistroforelasticsearch.security.user.User;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import org.bouncycastle.crypto.generators.OpenBSDBCrypt;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.transport.TransportAddress;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestChannel;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.threadpool.ThreadPool;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Set;\n+\n+public class AccountApiAction extends InternalUsersApiAction {\n+\n+    private static final String RESOURCE_NAME = \"account\";\n+    private final PrivilegesEvaluator privilegesEvaluator;\n+    private final ThreadContext threadContext;\n+\n+    public AccountApiAction(Settings settings,\n+                            Path configPath,\n+                            RestController controller,\n+                            Client client,\n+                            AdminDNs adminDNs,\n+                            ConfigurationRepository cl,\n+                            ClusterService cs,\n+                            PrincipalExtractor principalExtractor,\n+                            PrivilegesEvaluator privilegesEvaluator,\n+                            ThreadPool threadPool,\n+                            AuditLog auditLog) {\n+        super(settings, configPath, controller, client, adminDNs, cl, cs, principalExtractor, privilegesEvaluator, threadPool, auditLog);\n+        this.privilegesEvaluator = privilegesEvaluator;\n+        this.threadContext = threadPool.getThreadContext();\n+    }\n+\n+    @Override\n+    protected void registerHandlers(RestController controller) {\n+        controller.registerHandler(RestRequest.Method.GET, \"/_opendistro/_security/api/account\", this);\n+        controller.registerHandler(RestRequest.Method.PUT, \"/_opendistro/_security/api/account\", this);\n+    }\n+\n+    @Override\n+    protected void handleGet(RestChannel channel, RestRequest request, Client client, final JsonNode content) throws IOException {\n+        final XContentBuilder builder = channel.newBuilder();\n+        BytesRestResponse response;\n+\n+        try {\n+            builder.startObject();\n+            final User user = threadContext.getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n+            if (user != null) {\n+                final TransportAddress remoteAddress = threadContext.getTransient(ConfigConstants.OPENDISTRO_SECURITY_REMOTE_ADDRESS);\n+                final Set<String> securityRoles = privilegesEvaluator.mapRoles(user, remoteAddress);\n+                final SecurityDynamicConfiguration<?> configuration = load(getConfigName(), false);\n+\n+                builder.field(\"user_name\", user.getName())\n+                        .field(\"is_reserved\", isReserved(configuration, user.getName()))\n+                        .field(\"is_internal_user\", configuration.exists(user.getName()))\n+                        .field(\"user_requested_tenant\", user.getRequestedTenant())\n+                        .field(\"backend_roles\", user.getRoles())\n+                        .field(\"custom_attribute_names\", user.getCustomAttributesMap().keySet())\n+                        .field(\"tenants\", privilegesEvaluator.mapTenants(user, securityRoles))\n+                        .field(\"roles\", securityRoles);\n+            }\n+            builder.endObject();\n+\n+            response = new BytesRestResponse(RestStatus.OK, builder);\n+        } catch (final Exception exception) {\n+            log.error(exception.toString(), exception);\n+\n+            builder.startObject()\n+                    .field(\"error\", exception.toString())\n+                    .endObject();\n+\n+            response = new BytesRestResponse(RestStatus.INTERNAL_SERVER_ERROR, builder);\n+        }\n+        channel.sendResponse(response);\n+    }\n+\n+    @Override\n+    protected void handlePut(RestChannel channel, final RestRequest request, final Client client, final JsonNode content) throws IOException {\n+        final User user = threadContext.getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n+        final String username = user.getName();\n+        final SecurityDynamicConfiguration<?> internalUser = load(CType.INTERNALUSERS, false);\n+\n+        if (isHidden(internalUser, username)) {\n+            forbidden(channel, \"Resource '\" + username + \"' is not available.\");\n+            return;\n+        }\n+\n+        if (isReserved(internalUser, username)) {\n+            forbidden(channel, \"Resource '\" + username + \"' is read-only.\");\n+            return;\n+        }\n+\n+        if (!internalUser.exists(username)) {\n+            notFound(channel, \"Could not find user.\");\n+            return;\n+        }\n+\n+        final SecurityJsonNode securityJsonNode = new SecurityJsonNode(content);\n+        final String currentPassword = securityJsonNode.get(\"current_password\").asString();\n+        final String currentPasswordHash = hash(currentPassword.toCharArray());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM1Mzg0OQ==", "bodyText": "minor: indentation", "url": "https://github.com/opensearch-project/security/pull/200#discussion_r369353849", "createdAt": "2020-01-22T03:20:29Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/OpenDistroSecurityRestApiActions.java", "diffHunk": "@@ -49,6 +49,7 @@\n \t    handlers.add(new PermissionsInfoAction(settings, configPath, controller, client, adminDns, cr, cs, principalExtractor, evaluator, threadPool, auditLog));\n \t    handlers.add(new AuthTokenProcessorAction(settings, configPath, controller, client, adminDns, cr, cs, principalExtractor, evaluator, threadPool, auditLog));\n \t    handlers.add(new TenantsApiAction(settings, configPath, controller, client, adminDns, cr, cs, principalExtractor, evaluator, threadPool, auditLog));\n-\t    return Collections.unmodifiableCollection(handlers);\n+\t\thandlers.add(new AccountApiAction(settings, configPath, controller, client, adminDns, cr, cs, principalExtractor, evaluator, threadPool, auditLog));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM1NTM1Ng==", "bodyText": "why we are returning null?  Can you add comments for this?\nI guess we are checking if user has an access to Account endpoint. And each user will have an access irrespective of type of permission they have.", "url": "https://github.com/opensearch-project/security/pull/200#discussion_r369355356", "createdAt": "2020-01-22T03:28:39Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/RestApiPrivilegesEvaluator.java", "diffHunk": "@@ -216,6 +216,10 @@ public String checkAccessPermissions(RestRequest request, Endpoint endpoint) thr\n \t\t\tlogger.debug(\"Checking admin access for endpoint {}, path {} and method {}\", endpoint.name(),  request.path(), request.method().name());\n \t\t}\n \n+\t\tif (endpoint == Endpoint.ACCOUNT) {\n+\t\t\treturn null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM1NTYwNg==", "bodyText": "add copy right information and appropriate comments explaining what class or method is doing.", "url": "https://github.com/opensearch-project/security/pull/200#discussion_r369355606", "createdAt": "2020-01-22T03:30:02Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/validation/AccountValidator.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package com.amazon.opendistroforelasticsearch.security.dlic.rest.validation;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2OTI5ODMx", "url": "https://github.com/opensearch-project/security/pull/200#pullrequestreview-346929831", "createdAt": "2020-01-22T21:53:23Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMTo1MzoyM1rOFgsS8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMTo1Mzo0NlrOFgsTog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyNDQ5Ng==", "bodyText": "let's create abstract method in base class and override it in all child classes as discussed.", "url": "https://github.com/opensearch-project/security/pull/200#discussion_r369824496", "createdAt": "2020-01-22T21:53:23Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/InternalUsersApiAction.java", "diffHunk": "@@ -60,7 +60,10 @@ public InternalUsersApiAction(final Settings settings, final Path configPath, fi\n             ThreadPool threadPool, AuditLog auditLog) {\n         super(settings, configPath, controller, client, adminDNs, cl, cs, principalExtractor, evaluator, threadPool,\n                 auditLog);\n+        registerHandlers(controller);\n+    }\n \n+    protected void registerHandlers(RestController controller) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyNDY3NA==", "bodyText": "we don't need current password hash for validating current password.", "url": "https://github.com/opensearch-project/security/pull/200#discussion_r369824674", "createdAt": "2020-01-22T21:53:46Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/AccountApiAction.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *  You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.dlic.rest.api;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.AuditLog;\n+import com.amazon.opendistroforelasticsearch.security.configuration.AdminDNs;\n+import com.amazon.opendistroforelasticsearch.security.configuration.ConfigurationRepository;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.AbstractConfigurationValidator;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.AccountValidator;\n+import com.amazon.opendistroforelasticsearch.security.privileges.PrivilegesEvaluator;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.Hashed;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.CType;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.SecurityDynamicConfiguration;\n+import com.amazon.opendistroforelasticsearch.security.ssl.transport.PrincipalExtractor;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.amazon.opendistroforelasticsearch.security.support.SecurityJsonNode;\n+import com.amazon.opendistroforelasticsearch.security.user.User;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import org.bouncycastle.crypto.generators.OpenBSDBCrypt;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.transport.TransportAddress;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestChannel;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.threadpool.ThreadPool;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Set;\n+\n+public class AccountApiAction extends InternalUsersApiAction {\n+\n+    private static final String RESOURCE_NAME = \"account\";\n+    private final PrivilegesEvaluator privilegesEvaluator;\n+    private final ThreadContext threadContext;\n+\n+    public AccountApiAction(Settings settings,\n+                            Path configPath,\n+                            RestController controller,\n+                            Client client,\n+                            AdminDNs adminDNs,\n+                            ConfigurationRepository cl,\n+                            ClusterService cs,\n+                            PrincipalExtractor principalExtractor,\n+                            PrivilegesEvaluator privilegesEvaluator,\n+                            ThreadPool threadPool,\n+                            AuditLog auditLog) {\n+        super(settings, configPath, controller, client, adminDNs, cl, cs, principalExtractor, privilegesEvaluator, threadPool, auditLog);\n+        this.privilegesEvaluator = privilegesEvaluator;\n+        this.threadContext = threadPool.getThreadContext();\n+    }\n+\n+    @Override\n+    protected void registerHandlers(RestController controller) {\n+        controller.registerHandler(RestRequest.Method.GET, \"/_opendistro/_security/api/account\", this);\n+        controller.registerHandler(RestRequest.Method.PUT, \"/_opendistro/_security/api/account\", this);\n+    }\n+\n+    @Override\n+    protected void handleGet(RestChannel channel, RestRequest request, Client client, final JsonNode content) throws IOException {\n+        final XContentBuilder builder = channel.newBuilder();\n+        BytesRestResponse response;\n+\n+        try {\n+            builder.startObject();\n+            final User user = threadContext.getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n+            if (user != null) {\n+                final TransportAddress remoteAddress = threadContext.getTransient(ConfigConstants.OPENDISTRO_SECURITY_REMOTE_ADDRESS);\n+                final Set<String> securityRoles = privilegesEvaluator.mapRoles(user, remoteAddress);\n+                final SecurityDynamicConfiguration<?> configuration = load(getConfigName(), false);\n+\n+                builder.field(\"user_name\", user.getName())\n+                        .field(\"is_reserved\", isReserved(configuration, user.getName()))\n+                        .field(\"is_internal_user\", configuration.exists(user.getName()))\n+                        .field(\"user_requested_tenant\", user.getRequestedTenant())\n+                        .field(\"backend_roles\", user.getRoles())\n+                        .field(\"custom_attribute_names\", user.getCustomAttributesMap().keySet())\n+                        .field(\"tenants\", privilegesEvaluator.mapTenants(user, securityRoles))\n+                        .field(\"roles\", securityRoles);\n+            }\n+            builder.endObject();\n+\n+            response = new BytesRestResponse(RestStatus.OK, builder);\n+        } catch (final Exception exception) {\n+            log.error(exception.toString(), exception);\n+\n+            builder.startObject()\n+                    .field(\"error\", exception.toString())\n+                    .endObject();\n+\n+            response = new BytesRestResponse(RestStatus.INTERNAL_SERVER_ERROR, builder);\n+        }\n+        channel.sendResponse(response);\n+    }\n+\n+    @Override\n+    protected void handlePut(RestChannel channel, final RestRequest request, final Client client, final JsonNode content) throws IOException {\n+        final User user = threadContext.getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n+        final String username = user.getName();\n+        final SecurityDynamicConfiguration<?> internalUser = load(CType.INTERNALUSERS, false);\n+\n+        if (isHidden(internalUser, username)) {\n+            forbidden(channel, \"Resource '\" + username + \"' is not available.\");\n+            return;\n+        }\n+\n+        if (isReserved(internalUser, username)) {\n+            forbidden(channel, \"Resource '\" + username + \"' is read-only.\");\n+            return;\n+        }\n+\n+        if (!internalUser.exists(username)) {\n+            notFound(channel, \"Could not find user.\");\n+            return;\n+        }\n+\n+        final SecurityJsonNode securityJsonNode = new SecurityJsonNode(content);\n+        final String currentPassword = securityJsonNode.get(\"current_password\").asString();\n+        final String currentPasswordHash = hash(currentPassword.toCharArray());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0OTM1MA=="}, "originalCommit": null, "originalPosition": 140}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0080a2d0ef663eeadfdba36d231875812211fa8", "author": {"user": {"login": "sujithvm", "name": "Sujith Vadakkepat"}}, "url": "https://github.com/opensearch-project/security/commit/a0080a2d0ef663eeadfdba36d231875812211fa8", "committedDate": "2020-01-24T01:31:31Z", "message": "Add Account API to enable users to change their own password"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3NzA4NTk2", "url": "https://github.com/opensearch-project/security/pull/200#pullrequestreview-347708596", "createdAt": "2020-01-24T01:18:50Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3NzIzNzcz", "url": "https://github.com/opensearch-project/security/pull/200#pullrequestreview-347723773", "createdAt": "2020-01-24T02:22:52Z", "commit": {"oid": "a0080a2d0ef663eeadfdba36d231875812211fa8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2981, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}