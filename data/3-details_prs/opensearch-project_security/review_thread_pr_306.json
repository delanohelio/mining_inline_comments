{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxNzY4MTEw", "number": 306, "reviewThreads": {"totalCount": 45, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjo0NTo0NlrODq_69A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMzowMzoxMlrODv0Kxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDE0MDY4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjo0NTo0NlrOF7F5Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjo0NTo0NlrOF7F5Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwNjkxNQ==", "bodyText": "Consider isRestApiAuditEnabled.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r397506915", "createdAt": "2020-03-24T22:45:46Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,195 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean restAuditingEnabled;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDE0Njk5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjo0ODowMlrOF7F8-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMTozNzoxNFrOF7JNSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwNzgzMw==", "bodyText": "Set?", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r397507833", "createdAt": "2020-03-24T22:48:02Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,195 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean restAuditingEnabled;\n+    private final boolean transportAuditingEnabled;\n+    private final boolean resolveBulkRequests;\n+    private final boolean logRequestBody;\n+    private final boolean resolveIndices;\n+    private final boolean excludeSensitiveHeaders;\n+    private final List<String> ignoredAuditUsers;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUzODk3Mw==", "bodyText": "Ignore users accepts pattern which may cause an issue with ordering and pattern matching.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r397538973", "createdAt": "2020-03-25T00:18:19Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,195 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean restAuditingEnabled;\n+    private final boolean transportAuditingEnabled;\n+    private final boolean resolveBulkRequests;\n+    private final boolean logRequestBody;\n+    private final boolean resolveIndices;\n+    private final boolean excludeSensitiveHeaders;\n+    private final List<String> ignoredAuditUsers;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwNzgzMw=="}, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0MTQzNA==", "bodyText": "If an order is important (I don't think it is, as it is not \"match first\" or \"match last\"), use Set that preserves order (LinkedHashSet) as the implementation.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r397541434", "createdAt": "2020-03-25T00:26:37Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,195 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean restAuditingEnabled;\n+    private final boolean transportAuditingEnabled;\n+    private final boolean resolveBulkRequests;\n+    private final boolean logRequestBody;\n+    private final boolean resolveIndices;\n+    private final boolean excludeSensitiveHeaders;\n+    private final List<String> ignoredAuditUsers;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwNzgzMw=="}, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0Njc2MQ==", "bodyText": "This would propagate passing a higher level structure LinkedHashSet. We can't simply use Set type because it ll be important for consumers to know the underlying implementation that the set is ordered.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r397546761", "createdAt": "2020-03-25T00:45:48Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,195 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean restAuditingEnabled;\n+    private final boolean transportAuditingEnabled;\n+    private final boolean resolveBulkRequests;\n+    private final boolean logRequestBody;\n+    private final boolean resolveIndices;\n+    private final boolean excludeSensitiveHeaders;\n+    private final List<String> ignoredAuditUsers;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwNzgzMw=="}, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2MTE2Mg==", "bodyText": "I looked into the current usage and don't think ordering matters so I ll move to Set with HashSet implementation", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r397561162", "createdAt": "2020-03-25T01:37:14Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,195 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean restAuditingEnabled;\n+    private final boolean transportAuditingEnabled;\n+    private final boolean resolveBulkRequests;\n+    private final boolean logRequestBody;\n+    private final boolean resolveIndices;\n+    private final boolean excludeSensitiveHeaders;\n+    private final List<String> ignoredAuditUsers;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwNzgzMw=="}, "originalCommit": null, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDE5NzYwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMzowODozOVrOF7Gbag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMDozMTo0N1rOF7IF6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNTYyNg==", "bodyText": "I'd recommend using Builder pattern here as AuditConfig constructor takes a large number of arguments with the same type.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r397515626", "createdAt": "2020-03-24T23:08:39Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,195 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean restAuditingEnabled;\n+    private final boolean transportAuditingEnabled;\n+    private final boolean resolveBulkRequests;\n+    private final boolean logRequestBody;\n+    private final boolean resolveIndices;\n+    private final boolean excludeSensitiveHeaders;\n+    private final List<String> ignoredAuditUsers;\n+    private final List<String> ignoredComplianceUsersForRead;\n+    private final List<String> ignoredComplianceUsersForWrite;\n+    private final List<String> ignoreAuditRequests;\n+    private final EnumSet<AuditCategory> disabledRestCategories;\n+    private final EnumSet<AuditCategory> disabledTransportCategories;\n+    private final String opendistrosecurityIndex;\n+\n+    public AuditConfig(final boolean restAuditingEnabled,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0MTQ0Ng==", "bodyText": "I did think about this but I don't see any places where config params will be set independently. Maybe when we need it, we can have it", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r397541446", "createdAt": "2020-03-25T00:26:40Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,195 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean restAuditingEnabled;\n+    private final boolean transportAuditingEnabled;\n+    private final boolean resolveBulkRequests;\n+    private final boolean logRequestBody;\n+    private final boolean resolveIndices;\n+    private final boolean excludeSensitiveHeaders;\n+    private final List<String> ignoredAuditUsers;\n+    private final List<String> ignoredComplianceUsersForRead;\n+    private final List<String> ignoredComplianceUsersForWrite;\n+    private final List<String> ignoreAuditRequests;\n+    private final EnumSet<AuditCategory> disabledRestCategories;\n+    private final EnumSet<AuditCategory> disabledTransportCategories;\n+    private final String opendistrosecurityIndex;\n+\n+    public AuditConfig(final boolean restAuditingEnabled,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNTYyNg=="}, "originalCommit": null, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0Mjg4OQ==", "bodyText": "If you don't want to introduce Builder now (I am OK with that), make the constructor private.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r397542889", "createdAt": "2020-03-25T00:31:47Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,195 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean restAuditingEnabled;\n+    private final boolean transportAuditingEnabled;\n+    private final boolean resolveBulkRequests;\n+    private final boolean logRequestBody;\n+    private final boolean resolveIndices;\n+    private final boolean excludeSensitiveHeaders;\n+    private final List<String> ignoredAuditUsers;\n+    private final List<String> ignoredComplianceUsersForRead;\n+    private final List<String> ignoredComplianceUsersForWrite;\n+    private final List<String> ignoreAuditRequests;\n+    private final EnumSet<AuditCategory> disabledRestCategories;\n+    private final EnumSet<AuditCategory> disabledTransportCategories;\n+    private final String opendistrosecurityIndex;\n+\n+    public AuditConfig(final boolean restAuditingEnabled,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNTYyNg=="}, "originalCommit": null, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDIxOTg2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMzoxODoxMFrOF7GokQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMDozOTowN1rOF7IN_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxODk5Mw==", "bodyText": "do not use this. Usually, log is a class variable, not an instance variable.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r397518993", "createdAt": "2020-03-24T23:18:10Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "diffHunk": "@@ -118,77 +100,12 @@\n     protected AbstractAuditLog(Settings settings, final ThreadPool threadPool, final IndexNameExpressionResolver resolver, final ClusterService clusterService) {\n         super();\n         this.threadPool = threadPool;\n-\n         this.settings = settings;\n         this.resolver = resolver;\n         this.clusterService = clusterService;\n+        this.auditConfig = AuditConfig.getConfig(settings);\n \n-        this.opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n-\n-        resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n-\n-        restAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n-        transportAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n-\n-        disabledRestCategories = AuditCategory.parse(getConfigList(\n-                settings,\n-                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES,\n-                DEFAULT_DISABLED_CATEGORIES));\n-\n-        disabledTransportCategories = AuditCategory.parse(getConfigList(\n-                settings,\n-                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES,\n-                DEFAULT_DISABLED_CATEGORIES));\n-\n-        logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n-        resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n-\n-        ignoredAuditUsers = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredAuditUsers.size() == 1 && \"NONE\".equals(ignoredAuditUsers.get(0))) {\n-            ignoredAuditUsers.clear();\n-        }\n-\n-        if (ignoredAuditUsers.size() > 0) {\n-            log.info(\"Configured Users to ignore: {}\", ignoredAuditUsers);\n-        }\n-\n-        ignoredComplianceUsersForRead = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredComplianceUsersForRead.size() == 1 && \"NONE\".equals(ignoredComplianceUsersForRead.get(0))) {\n-            ignoredComplianceUsersForRead.clear();\n-        }\n-\n-        if (ignoredComplianceUsersForRead.size() > 0) {\n-            log.info(\"Configured Users to ignore for read compliance events: {}\", ignoredComplianceUsersForRead);\n-        }\n-\n-        ignoredComplianceUsersForWrite = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredComplianceUsersForWrite.size() == 1 && \"NONE\".equals(ignoredComplianceUsersForWrite.get(0))) {\n-            ignoredComplianceUsersForWrite.clear();\n-        }\n-\n-        if (ignoredComplianceUsersForWrite.size() > 0) {\n-            log.info(\"Configured Users to ignore for write compliance events: {}\", ignoredComplianceUsersForWrite);\n-        }\n-\n-        ignoreAuditRequests = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS, Collections.emptyList());\n-        if (ignoreAuditRequests.size() > 0) {\n-            log.info(\"Configured Requests to ignore: {}\", ignoreAuditRequests);\n-        }\n-\n-        this.excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n-    }\n-\n-    private static List<String> getConfigList(final Settings settings,\n-                                              final String key,\n-                                              final List<String> defaultList) {\n-        List<String> list = settings.getAsList(key, defaultList);\n-        if (list.size() == 1 && \"NONE\".equals(list.get(0))) {\n-            return Collections.emptyList();\n-        }\n-        return list;\n+        this.log.info(\"Configured audit settings: {}\", auditConfig.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUzNjA2NQ==", "bodyText": "Will make logger a class static", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r397536065", "createdAt": "2020-03-25T00:08:58Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "diffHunk": "@@ -118,77 +100,12 @@\n     protected AbstractAuditLog(Settings settings, final ThreadPool threadPool, final IndexNameExpressionResolver resolver, final ClusterService clusterService) {\n         super();\n         this.threadPool = threadPool;\n-\n         this.settings = settings;\n         this.resolver = resolver;\n         this.clusterService = clusterService;\n+        this.auditConfig = AuditConfig.getConfig(settings);\n \n-        this.opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n-\n-        resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n-\n-        restAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n-        transportAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n-\n-        disabledRestCategories = AuditCategory.parse(getConfigList(\n-                settings,\n-                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES,\n-                DEFAULT_DISABLED_CATEGORIES));\n-\n-        disabledTransportCategories = AuditCategory.parse(getConfigList(\n-                settings,\n-                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES,\n-                DEFAULT_DISABLED_CATEGORIES));\n-\n-        logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n-        resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n-\n-        ignoredAuditUsers = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredAuditUsers.size() == 1 && \"NONE\".equals(ignoredAuditUsers.get(0))) {\n-            ignoredAuditUsers.clear();\n-        }\n-\n-        if (ignoredAuditUsers.size() > 0) {\n-            log.info(\"Configured Users to ignore: {}\", ignoredAuditUsers);\n-        }\n-\n-        ignoredComplianceUsersForRead = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredComplianceUsersForRead.size() == 1 && \"NONE\".equals(ignoredComplianceUsersForRead.get(0))) {\n-            ignoredComplianceUsersForRead.clear();\n-        }\n-\n-        if (ignoredComplianceUsersForRead.size() > 0) {\n-            log.info(\"Configured Users to ignore for read compliance events: {}\", ignoredComplianceUsersForRead);\n-        }\n-\n-        ignoredComplianceUsersForWrite = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredComplianceUsersForWrite.size() == 1 && \"NONE\".equals(ignoredComplianceUsersForWrite.get(0))) {\n-            ignoredComplianceUsersForWrite.clear();\n-        }\n-\n-        if (ignoredComplianceUsersForWrite.size() > 0) {\n-            log.info(\"Configured Users to ignore for write compliance events: {}\", ignoredComplianceUsersForWrite);\n-        }\n-\n-        ignoreAuditRequests = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS, Collections.emptyList());\n-        if (ignoreAuditRequests.size() > 0) {\n-            log.info(\"Configured Requests to ignore: {}\", ignoreAuditRequests);\n-        }\n-\n-        this.excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n-    }\n-\n-    private static List<String> getConfigList(final Settings settings,\n-                                              final String key,\n-                                              final List<String> defaultList) {\n-        List<String> list = settings.getAsList(key, defaultList);\n-        if (list.size() == 1 && \"NONE\".equals(list.get(0))) {\n-            return Collections.emptyList();\n-        }\n-        return list;\n+        this.log.info(\"Configured audit settings: {}\", auditConfig.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxODk5Mw=="}, "originalCommit": null, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0MDcyNg==", "bodyText": "Since log is used in subclasses. Will not make it static as it needs reference to class.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r397540726", "createdAt": "2020-03-25T00:24:05Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "diffHunk": "@@ -118,77 +100,12 @@\n     protected AbstractAuditLog(Settings settings, final ThreadPool threadPool, final IndexNameExpressionResolver resolver, final ClusterService clusterService) {\n         super();\n         this.threadPool = threadPool;\n-\n         this.settings = settings;\n         this.resolver = resolver;\n         this.clusterService = clusterService;\n+        this.auditConfig = AuditConfig.getConfig(settings);\n \n-        this.opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n-\n-        resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n-\n-        restAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n-        transportAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n-\n-        disabledRestCategories = AuditCategory.parse(getConfigList(\n-                settings,\n-                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES,\n-                DEFAULT_DISABLED_CATEGORIES));\n-\n-        disabledTransportCategories = AuditCategory.parse(getConfigList(\n-                settings,\n-                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES,\n-                DEFAULT_DISABLED_CATEGORIES));\n-\n-        logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n-        resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n-\n-        ignoredAuditUsers = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredAuditUsers.size() == 1 && \"NONE\".equals(ignoredAuditUsers.get(0))) {\n-            ignoredAuditUsers.clear();\n-        }\n-\n-        if (ignoredAuditUsers.size() > 0) {\n-            log.info(\"Configured Users to ignore: {}\", ignoredAuditUsers);\n-        }\n-\n-        ignoredComplianceUsersForRead = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredComplianceUsersForRead.size() == 1 && \"NONE\".equals(ignoredComplianceUsersForRead.get(0))) {\n-            ignoredComplianceUsersForRead.clear();\n-        }\n-\n-        if (ignoredComplianceUsersForRead.size() > 0) {\n-            log.info(\"Configured Users to ignore for read compliance events: {}\", ignoredComplianceUsersForRead);\n-        }\n-\n-        ignoredComplianceUsersForWrite = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredComplianceUsersForWrite.size() == 1 && \"NONE\".equals(ignoredComplianceUsersForWrite.get(0))) {\n-            ignoredComplianceUsersForWrite.clear();\n-        }\n-\n-        if (ignoredComplianceUsersForWrite.size() > 0) {\n-            log.info(\"Configured Users to ignore for write compliance events: {}\", ignoredComplianceUsersForWrite);\n-        }\n-\n-        ignoreAuditRequests = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS, Collections.emptyList());\n-        if (ignoreAuditRequests.size() > 0) {\n-            log.info(\"Configured Requests to ignore: {}\", ignoreAuditRequests);\n-        }\n-\n-        this.excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n-    }\n-\n-    private static List<String> getConfigList(final Settings settings,\n-                                              final String key,\n-                                              final List<String> defaultList) {\n-        List<String> list = settings.getAsList(key, defaultList);\n-        if (list.size() == 1 && \"NONE\".equals(list.get(0))) {\n-            return Collections.emptyList();\n-        }\n-        return list;\n+        this.log.info(\"Configured audit settings: {}\", auditConfig.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxODk5Mw=="}, "originalCommit": null, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0NDk1OQ==", "bodyText": "Please don't use this, so that if later log is changed to a class variable, it won't be necessary to introduce change here.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r397544959", "createdAt": "2020-03-25T00:39:07Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "diffHunk": "@@ -118,77 +100,12 @@\n     protected AbstractAuditLog(Settings settings, final ThreadPool threadPool, final IndexNameExpressionResolver resolver, final ClusterService clusterService) {\n         super();\n         this.threadPool = threadPool;\n-\n         this.settings = settings;\n         this.resolver = resolver;\n         this.clusterService = clusterService;\n+        this.auditConfig = AuditConfig.getConfig(settings);\n \n-        this.opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n-\n-        resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n-\n-        restAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n-        transportAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n-\n-        disabledRestCategories = AuditCategory.parse(getConfigList(\n-                settings,\n-                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES,\n-                DEFAULT_DISABLED_CATEGORIES));\n-\n-        disabledTransportCategories = AuditCategory.parse(getConfigList(\n-                settings,\n-                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES,\n-                DEFAULT_DISABLED_CATEGORIES));\n-\n-        logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n-        resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n-\n-        ignoredAuditUsers = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredAuditUsers.size() == 1 && \"NONE\".equals(ignoredAuditUsers.get(0))) {\n-            ignoredAuditUsers.clear();\n-        }\n-\n-        if (ignoredAuditUsers.size() > 0) {\n-            log.info(\"Configured Users to ignore: {}\", ignoredAuditUsers);\n-        }\n-\n-        ignoredComplianceUsersForRead = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredComplianceUsersForRead.size() == 1 && \"NONE\".equals(ignoredComplianceUsersForRead.get(0))) {\n-            ignoredComplianceUsersForRead.clear();\n-        }\n-\n-        if (ignoredComplianceUsersForRead.size() > 0) {\n-            log.info(\"Configured Users to ignore for read compliance events: {}\", ignoredComplianceUsersForRead);\n-        }\n-\n-        ignoredComplianceUsersForWrite = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredComplianceUsersForWrite.size() == 1 && \"NONE\".equals(ignoredComplianceUsersForWrite.get(0))) {\n-            ignoredComplianceUsersForWrite.clear();\n-        }\n-\n-        if (ignoredComplianceUsersForWrite.size() > 0) {\n-            log.info(\"Configured Users to ignore for write compliance events: {}\", ignoredComplianceUsersForWrite);\n-        }\n-\n-        ignoreAuditRequests = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS, Collections.emptyList());\n-        if (ignoreAuditRequests.size() > 0) {\n-            log.info(\"Configured Requests to ignore: {}\", ignoreAuditRequests);\n-        }\n-\n-        this.excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n-    }\n-\n-    private static List<String> getConfigList(final Settings settings,\n-                                              final String key,\n-                                              final List<String> defaultList) {\n-        List<String> list = settings.getAsList(key, defaultList);\n-        if (list.size() == 1 && \"NONE\".equals(list.get(0))) {\n-            return Collections.emptyList();\n-        }\n-        return list;\n+        this.log.info(\"Configured audit settings: {}\", auditConfig.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxODk5Mw=="}, "originalCommit": null, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDIyNDY2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMzoyMDoxN1rOF7GrZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMzoyMDoxN1rOF7GrZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxOTcxOA==", "bodyText": "Add new line.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r397519718", "createdAt": "2020-03-24T23:20:17Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,195 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean restAuditingEnabled;\n+    private final boolean transportAuditingEnabled;\n+    private final boolean resolveBulkRequests;\n+    private final boolean logRequestBody;\n+    private final boolean resolveIndices;\n+    private final boolean excludeSensitiveHeaders;\n+    private final List<String> ignoredAuditUsers;\n+    private final List<String> ignoredComplianceUsersForRead;\n+    private final List<String> ignoredComplianceUsersForWrite;\n+    private final List<String> ignoreAuditRequests;\n+    private final EnumSet<AuditCategory> disabledRestCategories;\n+    private final EnumSet<AuditCategory> disabledTransportCategories;\n+    private final String opendistrosecurityIndex;\n+\n+    public AuditConfig(final boolean restAuditingEnabled,\n+                       final boolean transportAuditingEnabled,\n+                       final boolean resolveBulkRequests,\n+                       final boolean logRequestBody,\n+                       final boolean resolveIndices,\n+                       final boolean excludeSensitiveHeaders,\n+                       final List<String> ignoredAuditUsers,\n+                       final List<String> ignoredComplianceUsersForRead,\n+                       final List<String> ignoredComplianceUsersForWrite,\n+                       final List<String> ignoredAuditRequests,\n+                       final EnumSet<AuditCategory> disabledRestCategories,\n+                       final EnumSet<AuditCategory> disabledTransportCategories,\n+                       final String opendistrosecurityIndex) {\n+        this.restAuditingEnabled = restAuditingEnabled;\n+        this.transportAuditingEnabled = transportAuditingEnabled;\n+        this.resolveBulkRequests = resolveBulkRequests;\n+        this.logRequestBody = logRequestBody;\n+        this.resolveIndices = resolveIndices;\n+        this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+        this.ignoredAuditUsers = ignoredAuditUsers;\n+        this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+        this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+        this.ignoreAuditRequests = ignoredAuditRequests;\n+        this.disabledRestCategories = disabledRestCategories;\n+        this.disabledTransportCategories = disabledTransportCategories;\n+        this.opendistrosecurityIndex = opendistrosecurityIndex;\n+    }\n+\n+    public static AuditConfig getConfig(Settings settings) {\n+        final boolean restAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n+        final boolean transportAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n+        final boolean resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n+        final boolean logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n+        final boolean resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n+        final boolean excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+\n+        final List<String> ignoredAuditUsers = getConfigList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS);\n+\n+        final List<String> ignoredComplianceUsersForRead = getConfigList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS);\n+\n+        final List<String> ignoredComplianceUsersForWrite = getConfigList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS);\n+\n+        final List<String> ignoreAuditRequests = getConfigList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS,\n+                Collections.emptyList());\n+\n+        final EnumSet<AuditCategory> disabledRestCategories = AuditCategory.parse(getConfigList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES));\n+\n+        final EnumSet<AuditCategory> disabledTransportCategories = AuditCategory.parse(getConfigList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES));\n+\n+        final String opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n+\n+        return new AuditConfig(restAuditingEnabled,\n+                transportAuditingEnabled,\n+                resolveBulkRequests,\n+                logRequestBody,\n+                resolveIndices,\n+                excludeSensitiveHeaders,\n+                ignoredAuditUsers,\n+                ignoredComplianceUsersForRead,\n+                ignoredComplianceUsersForWrite,\n+                ignoreAuditRequests,\n+                disabledRestCategories,\n+                disabledTransportCategories,\n+                opendistrosecurityIndex);\n+    }\n+\n+    private static List<String> getConfigList(final Settings settings,\n+                                              final String key,\n+                                              final List<String> defaultList) {\n+        List<String> list = settings.getAsList(key, defaultList);\n+        if (list.size() == 1 && \"NONE\".equals(list.get(0))) {\n+            return Collections.emptyList();\n+        }\n+        return list;\n+    }\n+\n+    public boolean isRestAuditingEnabled() {\n+        return restAuditingEnabled;\n+    }\n+\n+    public boolean isTransportAuditingEnabled() {\n+        return transportAuditingEnabled;\n+    }\n+\n+    public boolean shouldResolveBulkRequests() {\n+        return resolveBulkRequests;\n+    }\n+\n+    public boolean shouldLogRequestBody() {\n+        return logRequestBody;\n+    }\n+\n+    public boolean shouldResolveIndices() {\n+        return resolveIndices;\n+    }\n+\n+    public boolean shouldExcludeSensitiveHeaders() {\n+        return excludeSensitiveHeaders;\n+    }\n+\n+    public List<String> getIgnoredAuditUsers() {\n+        return ignoredAuditUsers;\n+    }\n+\n+    public List<String> getIgnoredComplianceUsersForRead() {\n+        return ignoredComplianceUsersForRead;\n+    }\n+\n+    public List<String> getIgnoredComplianceUsersForWrite() {\n+        return ignoredComplianceUsersForWrite;\n+    }\n+\n+    public List<String> getIgnoredAuditRequests() {\n+        return ignoreAuditRequests;\n+    }\n+\n+    public EnumSet<AuditCategory> getDisabledRestCategories() {\n+        return disabledRestCategories;\n+    }\n+\n+    public EnumSet<AuditCategory> getDisabledTransportCategories() {\n+        return disabledTransportCategories;\n+    }\n+\n+    public String getOpendistrosecurityIndex() {\n+        return opendistrosecurityIndex;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"AuditConfig{\" +\n+                \"restAuditingEnabled=\" + restAuditingEnabled +\n+                \", transportAuditingEnabled=\" + transportAuditingEnabled +\n+                \", resolveBulkRequests=\" + resolveBulkRequests +\n+                \", logRequestBody=\" + logRequestBody +\n+                \", resolveIndices=\" + resolveIndices +\n+                \", excludeSensitiveHeaders=\" + excludeSensitiveHeaders +\n+                \", ignoredAuditUsers=\" + ignoredAuditUsers +\n+                \", ignoredComplianceUsersForRead=\" + ignoredComplianceUsersForRead +\n+                \", ignoredComplianceUsersForWrite=\" + ignoredComplianceUsersForWrite +\n+                \", ignoreAuditRequests=\" + ignoreAuditRequests +\n+                \", disabledRestCategories=\" + disabledRestCategories +\n+                \", disabledTransportCategories=\" + disabledTransportCategories +\n+                \", opendistrosecurityIndex='\" + opendistrosecurityIndex + '\\'' +\n+                '}';\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 195}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDI0MzUyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMzoyODoyNlrOF7G2hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMzoyODoyNlrOF7G2hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUyMjU2Ng==", "bodyText": "I guess it should be protected to be consistent with other member variables.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r397522566", "createdAt": "2020-03-24T23:28:26Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "diffHunk": "@@ -81,32 +80,15 @@\n \n public abstract class AbstractAuditLog implements AuditLog {\n \n-    private static final List<String> DEFAULT_DISABLED_CATEGORIES = Arrays.asList(AuditCategory.AUTHENTICATED.toString(), AuditCategory.GRANTED_PRIVILEGES.toString());\n-\n     protected final Logger log = LogManager.getLogger(this.getClass());\n     protected final ThreadPool threadPool;\n     protected final IndexNameExpressionResolver resolver;\n     protected final ClusterService clusterService;\n     protected final Settings settings;\n-    protected final boolean restAuditingEnabled;\n-    protected final boolean transportAuditingEnabled;\n-    protected final boolean resolveBulkRequests;\n-\n-    protected final boolean logRequestBody;\n-    protected final boolean resolveIndices;\n-\n-    private List<String> ignoredAuditUsers;\n-    private List<String> ignoredComplianceUsersForRead;\n-    private List<String> ignoredComplianceUsersForWrite;\n-    private final List<String> ignoreAuditRequests;\n-    private final EnumSet<AuditCategory> disabledRestCategories;\n-    private final EnumSet<AuditCategory> disabledTransportCategories;\n-    private final List<String> defaultIgnoredUsers = Arrays.asList(\"kibanaserver\");\n-    private final boolean excludeSensitiveHeaders;\n-\n-    private final String opendistrosecurityIndex;\n-    private static final List<String> writeClasses = new ArrayList<>();\n \n+    private final AuditConfig auditConfig;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDI1NDQ4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMzozMjo1N1rOF7G9BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMzozMjo1N1rOF7G9BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUyNDIyOA==", "bodyText": "IMO, isEmpty() will be better", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r397524228", "createdAt": "2020-03-24T23:32:57Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "diffHunk": "@@ -737,6 +654,7 @@ private boolean checkTransportFilter(final AuditCategory category, final String\n             return false;\n         }\n \n+        final Collection<String>ignoredAuditUsers = auditConfig.getIgnoredAuditUsers();\n         if (ignoredAuditUsers.size() > 0 && WildcardMatcher.matchAny(ignoredAuditUsers, effectiveUser)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 335}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MjYzNjk2OnYy", "diffSide": "LEFT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxOTo1MTo0NFrOF8X33A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxOTo1MTo0NFrOF8X33A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg1MDAxMg==", "bodyText": "Logging entire configuration when configured. Hence removed these info logs.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r398850012", "createdAt": "2020-03-26T19:51:44Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "diffHunk": "@@ -118,81 +99,12 @@\n     protected AbstractAuditLog(Settings settings, final ThreadPool threadPool, final IndexNameExpressionResolver resolver, final ClusterService clusterService) {\n         super();\n         this.threadPool = threadPool;\n-\n         this.settings = settings;\n         this.resolver = resolver;\n         this.clusterService = clusterService;\n+        this.auditConfig = AuditConfig.getConfig(settings);\n \n-        this.opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n-\n-        resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n-\n-        restAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n-        transportAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n-\n-        final List<String> disabledRestCategoriesList = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES, DEFAULT_DISABLED_CATEGORIES);\n-\n-        if (disabledRestCategoriesList.isEmpty() || (disabledRestCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledRestCategoriesList.get(0)))) {\n-            disabledRestCategories = EnumSet.noneOf(AuditCategory.class);\n-        } else {\n-            disabledRestCategories = AuditCategory.parse(disabledRestCategoriesList);\n-        }\n-\n-        if (!disabledRestCategories.isEmpty()) {\n-            log.info(\"Configured categories on rest layer to ignore: {}\", disabledRestCategories);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MzIzNDg2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMzowNzoxOVrOF8dosg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwMzozNTo1NVrOF8iFKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk0NDQzNA==", "bodyText": "introduce helper function", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r398944434", "createdAt": "2020-03-26T23:07:19Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean isRestApiAuditEnabled;\n+    private final boolean isTransportAuditEnabled;\n+    private final boolean resolveBulkRequests;\n+    private final boolean logRequestBody;\n+    private final boolean resolveIndices;\n+    private final boolean excludeSensitiveHeaders;\n+    private final Set<String> ignoredAuditUsers;\n+    private final Set<String> ignoredComplianceUsersForRead;\n+    private final Set<String> ignoredComplianceUsersForWrite;\n+    private final Set<String> ignoreAuditRequests;\n+    private final EnumSet<AuditCategory> disabledRestCategories;\n+    private final EnumSet<AuditCategory> disabledTransportCategories;\n+    private final String opendistrosecurityIndex;\n+\n+    private AuditConfig(final boolean isRestApiAuditEnabled,\n+                        final boolean isTransportAuditEnabled,\n+                        final boolean resolveBulkRequests,\n+                        final boolean logRequestBody,\n+                        final boolean resolveIndices,\n+                        final boolean excludeSensitiveHeaders,\n+                        final Set<String> ignoredAuditUsers,\n+                        final Set<String> ignoredComplianceUsersForRead,\n+                        final Set<String> ignoredComplianceUsersForWrite,\n+                        final Set<String> ignoredAuditRequests,\n+                        final EnumSet<AuditCategory> disabledRestCategories,\n+                        final EnumSet<AuditCategory> disabledTransportCategories,\n+                        final String opendistrosecurityIndex) {\n+        this.isRestApiAuditEnabled = isRestApiAuditEnabled;\n+        this.isTransportAuditEnabled = isTransportAuditEnabled;\n+        this.resolveBulkRequests = resolveBulkRequests;\n+        this.logRequestBody = logRequestBody;\n+        this.resolveIndices = resolveIndices;\n+        this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+        this.ignoredAuditUsers = ignoredAuditUsers;\n+        this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+        this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+        this.ignoreAuditRequests = ignoredAuditRequests;\n+        this.disabledRestCategories = disabledRestCategories;\n+        this.disabledTransportCategories = disabledTransportCategories;\n+        this.opendistrosecurityIndex = opendistrosecurityIndex;\n+    }\n+\n+    public static AuditConfig getConfig(Settings settings) {\n+        final boolean isRestApiAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n+        final boolean isTransportAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n+        final boolean resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n+        final boolean logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n+        final boolean resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n+        final boolean excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+        final String opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n+\n+        final EnumSet<AuditCategory> disabledRestCategories;\n+        final List<String> disabledRestCategoriesList = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES, DEFAULT_DISABLED_CATEGORIES);\n+        if (disabledRestCategoriesList.isEmpty() || (disabledRestCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledRestCategoriesList.get(0)))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAwNDc4Ng==", "bodyText": "I would appreciate if you could help design this helper function. Previously I had\nprivate static List<String> getSettingAsList(final Settings settings, final String key, final List<String> defaultList) {\n        final List<String> list = settings.getAsList(key, defaultList);\n        if (list.size() == 1 && \"NONE\".equals(list.get(0))) {\n            return Collections.emptyList();\n        }\n        return list;\n    }\n\nLooks like other params consider only \"NONE\" as implicitly empty (none, None are not considered). Do you want to retain this behavior or clear it in #325", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r399004786", "createdAt": "2020-03-27T02:44:25Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean isRestApiAuditEnabled;\n+    private final boolean isTransportAuditEnabled;\n+    private final boolean resolveBulkRequests;\n+    private final boolean logRequestBody;\n+    private final boolean resolveIndices;\n+    private final boolean excludeSensitiveHeaders;\n+    private final Set<String> ignoredAuditUsers;\n+    private final Set<String> ignoredComplianceUsersForRead;\n+    private final Set<String> ignoredComplianceUsersForWrite;\n+    private final Set<String> ignoreAuditRequests;\n+    private final EnumSet<AuditCategory> disabledRestCategories;\n+    private final EnumSet<AuditCategory> disabledTransportCategories;\n+    private final String opendistrosecurityIndex;\n+\n+    private AuditConfig(final boolean isRestApiAuditEnabled,\n+                        final boolean isTransportAuditEnabled,\n+                        final boolean resolveBulkRequests,\n+                        final boolean logRequestBody,\n+                        final boolean resolveIndices,\n+                        final boolean excludeSensitiveHeaders,\n+                        final Set<String> ignoredAuditUsers,\n+                        final Set<String> ignoredComplianceUsersForRead,\n+                        final Set<String> ignoredComplianceUsersForWrite,\n+                        final Set<String> ignoredAuditRequests,\n+                        final EnumSet<AuditCategory> disabledRestCategories,\n+                        final EnumSet<AuditCategory> disabledTransportCategories,\n+                        final String opendistrosecurityIndex) {\n+        this.isRestApiAuditEnabled = isRestApiAuditEnabled;\n+        this.isTransportAuditEnabled = isTransportAuditEnabled;\n+        this.resolveBulkRequests = resolveBulkRequests;\n+        this.logRequestBody = logRequestBody;\n+        this.resolveIndices = resolveIndices;\n+        this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+        this.ignoredAuditUsers = ignoredAuditUsers;\n+        this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+        this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+        this.ignoreAuditRequests = ignoredAuditRequests;\n+        this.disabledRestCategories = disabledRestCategories;\n+        this.disabledTransportCategories = disabledTransportCategories;\n+        this.opendistrosecurityIndex = opendistrosecurityIndex;\n+    }\n+\n+    public static AuditConfig getConfig(Settings settings) {\n+        final boolean isRestApiAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n+        final boolean isTransportAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n+        final boolean resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n+        final boolean logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n+        final boolean resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n+        final boolean excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+        final String opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n+\n+        final EnumSet<AuditCategory> disabledRestCategories;\n+        final List<String> disabledRestCategoriesList = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES, DEFAULT_DISABLED_CATEGORIES);\n+        if (disabledRestCategoriesList.isEmpty() || (disabledRestCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledRestCategoriesList.get(0)))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk0NDQzNA=="}, "originalCommit": null, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAxNTIyMg==", "bodyText": "One way is to pass a flag whether \"NONE\" is case sensitive or not. Assuming that \"NONE\" will be deprecated soon, I suggest retaining the current behavior.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r399015222", "createdAt": "2020-03-27T03:26:51Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean isRestApiAuditEnabled;\n+    private final boolean isTransportAuditEnabled;\n+    private final boolean resolveBulkRequests;\n+    private final boolean logRequestBody;\n+    private final boolean resolveIndices;\n+    private final boolean excludeSensitiveHeaders;\n+    private final Set<String> ignoredAuditUsers;\n+    private final Set<String> ignoredComplianceUsersForRead;\n+    private final Set<String> ignoredComplianceUsersForWrite;\n+    private final Set<String> ignoreAuditRequests;\n+    private final EnumSet<AuditCategory> disabledRestCategories;\n+    private final EnumSet<AuditCategory> disabledTransportCategories;\n+    private final String opendistrosecurityIndex;\n+\n+    private AuditConfig(final boolean isRestApiAuditEnabled,\n+                        final boolean isTransportAuditEnabled,\n+                        final boolean resolveBulkRequests,\n+                        final boolean logRequestBody,\n+                        final boolean resolveIndices,\n+                        final boolean excludeSensitiveHeaders,\n+                        final Set<String> ignoredAuditUsers,\n+                        final Set<String> ignoredComplianceUsersForRead,\n+                        final Set<String> ignoredComplianceUsersForWrite,\n+                        final Set<String> ignoredAuditRequests,\n+                        final EnumSet<AuditCategory> disabledRestCategories,\n+                        final EnumSet<AuditCategory> disabledTransportCategories,\n+                        final String opendistrosecurityIndex) {\n+        this.isRestApiAuditEnabled = isRestApiAuditEnabled;\n+        this.isTransportAuditEnabled = isTransportAuditEnabled;\n+        this.resolveBulkRequests = resolveBulkRequests;\n+        this.logRequestBody = logRequestBody;\n+        this.resolveIndices = resolveIndices;\n+        this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+        this.ignoredAuditUsers = ignoredAuditUsers;\n+        this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+        this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+        this.ignoreAuditRequests = ignoredAuditRequests;\n+        this.disabledRestCategories = disabledRestCategories;\n+        this.disabledTransportCategories = disabledTransportCategories;\n+        this.opendistrosecurityIndex = opendistrosecurityIndex;\n+    }\n+\n+    public static AuditConfig getConfig(Settings settings) {\n+        final boolean isRestApiAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n+        final boolean isTransportAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n+        final boolean resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n+        final boolean logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n+        final boolean resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n+        final boolean excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+        final String opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n+\n+        final EnumSet<AuditCategory> disabledRestCategories;\n+        final List<String> disabledRestCategoriesList = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES, DEFAULT_DISABLED_CATEGORIES);\n+        if (disabledRestCategoriesList.isEmpty() || (disabledRestCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledRestCategoriesList.get(0)))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk0NDQzNA=="}, "originalCommit": null, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAxNzI1Ng==", "bodyText": "Alright!\nSadly, I feel case in-sensitive handling of none was accidental in categories because of making it uppercase for enums and now have to deal with this complexity.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r399017256", "createdAt": "2020-03-27T03:35:55Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean isRestApiAuditEnabled;\n+    private final boolean isTransportAuditEnabled;\n+    private final boolean resolveBulkRequests;\n+    private final boolean logRequestBody;\n+    private final boolean resolveIndices;\n+    private final boolean excludeSensitiveHeaders;\n+    private final Set<String> ignoredAuditUsers;\n+    private final Set<String> ignoredComplianceUsersForRead;\n+    private final Set<String> ignoredComplianceUsersForWrite;\n+    private final Set<String> ignoreAuditRequests;\n+    private final EnumSet<AuditCategory> disabledRestCategories;\n+    private final EnumSet<AuditCategory> disabledTransportCategories;\n+    private final String opendistrosecurityIndex;\n+\n+    private AuditConfig(final boolean isRestApiAuditEnabled,\n+                        final boolean isTransportAuditEnabled,\n+                        final boolean resolveBulkRequests,\n+                        final boolean logRequestBody,\n+                        final boolean resolveIndices,\n+                        final boolean excludeSensitiveHeaders,\n+                        final Set<String> ignoredAuditUsers,\n+                        final Set<String> ignoredComplianceUsersForRead,\n+                        final Set<String> ignoredComplianceUsersForWrite,\n+                        final Set<String> ignoredAuditRequests,\n+                        final EnumSet<AuditCategory> disabledRestCategories,\n+                        final EnumSet<AuditCategory> disabledTransportCategories,\n+                        final String opendistrosecurityIndex) {\n+        this.isRestApiAuditEnabled = isRestApiAuditEnabled;\n+        this.isTransportAuditEnabled = isTransportAuditEnabled;\n+        this.resolveBulkRequests = resolveBulkRequests;\n+        this.logRequestBody = logRequestBody;\n+        this.resolveIndices = resolveIndices;\n+        this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+        this.ignoredAuditUsers = ignoredAuditUsers;\n+        this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+        this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+        this.ignoreAuditRequests = ignoredAuditRequests;\n+        this.disabledRestCategories = disabledRestCategories;\n+        this.disabledTransportCategories = disabledTransportCategories;\n+        this.opendistrosecurityIndex = opendistrosecurityIndex;\n+    }\n+\n+    public static AuditConfig getConfig(Settings settings) {\n+        final boolean isRestApiAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n+        final boolean isTransportAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n+        final boolean resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n+        final boolean logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n+        final boolean resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n+        final boolean excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+        final String opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n+\n+        final EnumSet<AuditCategory> disabledRestCategories;\n+        final List<String> disabledRestCategoriesList = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES, DEFAULT_DISABLED_CATEGORIES);\n+        if (disabledRestCategoriesList.isEmpty() || (disabledRestCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledRestCategoriesList.get(0)))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk0NDQzNA=="}, "originalCommit": null, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MzIzNzY1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMzowODo0NlrOF8dqaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwMjozMDo1M1rOF8hHDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk0NDg3Mw==", "bodyText": "There is no need to create new ArrayList.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r398944873", "createdAt": "2020-03-26T23:08:46Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean isRestApiAuditEnabled;\n+    private final boolean isTransportAuditEnabled;\n+    private final boolean resolveBulkRequests;\n+    private final boolean logRequestBody;\n+    private final boolean resolveIndices;\n+    private final boolean excludeSensitiveHeaders;\n+    private final Set<String> ignoredAuditUsers;\n+    private final Set<String> ignoredComplianceUsersForRead;\n+    private final Set<String> ignoredComplianceUsersForWrite;\n+    private final Set<String> ignoreAuditRequests;\n+    private final EnumSet<AuditCategory> disabledRestCategories;\n+    private final EnumSet<AuditCategory> disabledTransportCategories;\n+    private final String opendistrosecurityIndex;\n+\n+    private AuditConfig(final boolean isRestApiAuditEnabled,\n+                        final boolean isTransportAuditEnabled,\n+                        final boolean resolveBulkRequests,\n+                        final boolean logRequestBody,\n+                        final boolean resolveIndices,\n+                        final boolean excludeSensitiveHeaders,\n+                        final Set<String> ignoredAuditUsers,\n+                        final Set<String> ignoredComplianceUsersForRead,\n+                        final Set<String> ignoredComplianceUsersForWrite,\n+                        final Set<String> ignoredAuditRequests,\n+                        final EnumSet<AuditCategory> disabledRestCategories,\n+                        final EnumSet<AuditCategory> disabledTransportCategories,\n+                        final String opendistrosecurityIndex) {\n+        this.isRestApiAuditEnabled = isRestApiAuditEnabled;\n+        this.isTransportAuditEnabled = isTransportAuditEnabled;\n+        this.resolveBulkRequests = resolveBulkRequests;\n+        this.logRequestBody = logRequestBody;\n+        this.resolveIndices = resolveIndices;\n+        this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+        this.ignoredAuditUsers = ignoredAuditUsers;\n+        this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+        this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+        this.ignoreAuditRequests = ignoredAuditRequests;\n+        this.disabledRestCategories = disabledRestCategories;\n+        this.disabledTransportCategories = disabledTransportCategories;\n+        this.opendistrosecurityIndex = opendistrosecurityIndex;\n+    }\n+\n+    public static AuditConfig getConfig(Settings settings) {\n+        final boolean isRestApiAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n+        final boolean isTransportAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n+        final boolean resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n+        final boolean logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n+        final boolean resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n+        final boolean excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+        final String opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n+\n+        final EnumSet<AuditCategory> disabledRestCategories;\n+        final List<String> disabledRestCategoriesList = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES, DEFAULT_DISABLED_CATEGORIES);\n+        if (disabledRestCategoriesList.isEmpty() || (disabledRestCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledRestCategoriesList.get(0)))) {\n+            disabledRestCategories = EnumSet.noneOf(AuditCategory.class);\n+        } else {\n+            disabledRestCategories = AuditCategory.parse(disabledRestCategoriesList);\n+        }\n+\n+        final EnumSet<AuditCategory> disabledTransportCategories;\n+        final List<String> disabledTransportCategoriesList = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES, DEFAULT_DISABLED_CATEGORIES);\n+        if (disabledTransportCategoriesList.isEmpty() || (disabledTransportCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledTransportCategoriesList.get(0)))) {\n+            disabledTransportCategories = EnumSet.noneOf(AuditCategory.class);\n+        } else {\n+            disabledTransportCategories = AuditCategory.parse(disabledTransportCategoriesList);\n+        }\n+\n+        final List<String> ignoredAuditUsers = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS, DEFAULT_IGNORED_USERS));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk5NjI4OA==", "bodyText": "Won't this have a side-effect clearing the function unless getAsList returns a new list always?", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r398996288", "createdAt": "2020-03-27T02:10:12Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean isRestApiAuditEnabled;\n+    private final boolean isTransportAuditEnabled;\n+    private final boolean resolveBulkRequests;\n+    private final boolean logRequestBody;\n+    private final boolean resolveIndices;\n+    private final boolean excludeSensitiveHeaders;\n+    private final Set<String> ignoredAuditUsers;\n+    private final Set<String> ignoredComplianceUsersForRead;\n+    private final Set<String> ignoredComplianceUsersForWrite;\n+    private final Set<String> ignoreAuditRequests;\n+    private final EnumSet<AuditCategory> disabledRestCategories;\n+    private final EnumSet<AuditCategory> disabledTransportCategories;\n+    private final String opendistrosecurityIndex;\n+\n+    private AuditConfig(final boolean isRestApiAuditEnabled,\n+                        final boolean isTransportAuditEnabled,\n+                        final boolean resolveBulkRequests,\n+                        final boolean logRequestBody,\n+                        final boolean resolveIndices,\n+                        final boolean excludeSensitiveHeaders,\n+                        final Set<String> ignoredAuditUsers,\n+                        final Set<String> ignoredComplianceUsersForRead,\n+                        final Set<String> ignoredComplianceUsersForWrite,\n+                        final Set<String> ignoredAuditRequests,\n+                        final EnumSet<AuditCategory> disabledRestCategories,\n+                        final EnumSet<AuditCategory> disabledTransportCategories,\n+                        final String opendistrosecurityIndex) {\n+        this.isRestApiAuditEnabled = isRestApiAuditEnabled;\n+        this.isTransportAuditEnabled = isTransportAuditEnabled;\n+        this.resolveBulkRequests = resolveBulkRequests;\n+        this.logRequestBody = logRequestBody;\n+        this.resolveIndices = resolveIndices;\n+        this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+        this.ignoredAuditUsers = ignoredAuditUsers;\n+        this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+        this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+        this.ignoreAuditRequests = ignoredAuditRequests;\n+        this.disabledRestCategories = disabledRestCategories;\n+        this.disabledTransportCategories = disabledTransportCategories;\n+        this.opendistrosecurityIndex = opendistrosecurityIndex;\n+    }\n+\n+    public static AuditConfig getConfig(Settings settings) {\n+        final boolean isRestApiAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n+        final boolean isTransportAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n+        final boolean resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n+        final boolean logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n+        final boolean resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n+        final boolean excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+        final String opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n+\n+        final EnumSet<AuditCategory> disabledRestCategories;\n+        final List<String> disabledRestCategoriesList = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES, DEFAULT_DISABLED_CATEGORIES);\n+        if (disabledRestCategoriesList.isEmpty() || (disabledRestCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledRestCategoriesList.get(0)))) {\n+            disabledRestCategories = EnumSet.noneOf(AuditCategory.class);\n+        } else {\n+            disabledRestCategories = AuditCategory.parse(disabledRestCategoriesList);\n+        }\n+\n+        final EnumSet<AuditCategory> disabledTransportCategories;\n+        final List<String> disabledTransportCategoriesList = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES, DEFAULT_DISABLED_CATEGORIES);\n+        if (disabledTransportCategoriesList.isEmpty() || (disabledTransportCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledTransportCategoriesList.get(0)))) {\n+            disabledTransportCategories = EnumSet.noneOf(AuditCategory.class);\n+        } else {\n+            disabledTransportCategories = AuditCategory.parse(disabledTransportCategoriesList);\n+        }\n+\n+        final List<String> ignoredAuditUsers = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS, DEFAULT_IGNORED_USERS));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk0NDg3Mw=="}, "originalCommit": null, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAwMTM1Nw==", "bodyText": "There is no need to clear the original collection, use an empty collection.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r399001357", "createdAt": "2020-03-27T02:30:53Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean isRestApiAuditEnabled;\n+    private final boolean isTransportAuditEnabled;\n+    private final boolean resolveBulkRequests;\n+    private final boolean logRequestBody;\n+    private final boolean resolveIndices;\n+    private final boolean excludeSensitiveHeaders;\n+    private final Set<String> ignoredAuditUsers;\n+    private final Set<String> ignoredComplianceUsersForRead;\n+    private final Set<String> ignoredComplianceUsersForWrite;\n+    private final Set<String> ignoreAuditRequests;\n+    private final EnumSet<AuditCategory> disabledRestCategories;\n+    private final EnumSet<AuditCategory> disabledTransportCategories;\n+    private final String opendistrosecurityIndex;\n+\n+    private AuditConfig(final boolean isRestApiAuditEnabled,\n+                        final boolean isTransportAuditEnabled,\n+                        final boolean resolveBulkRequests,\n+                        final boolean logRequestBody,\n+                        final boolean resolveIndices,\n+                        final boolean excludeSensitiveHeaders,\n+                        final Set<String> ignoredAuditUsers,\n+                        final Set<String> ignoredComplianceUsersForRead,\n+                        final Set<String> ignoredComplianceUsersForWrite,\n+                        final Set<String> ignoredAuditRequests,\n+                        final EnumSet<AuditCategory> disabledRestCategories,\n+                        final EnumSet<AuditCategory> disabledTransportCategories,\n+                        final String opendistrosecurityIndex) {\n+        this.isRestApiAuditEnabled = isRestApiAuditEnabled;\n+        this.isTransportAuditEnabled = isTransportAuditEnabled;\n+        this.resolveBulkRequests = resolveBulkRequests;\n+        this.logRequestBody = logRequestBody;\n+        this.resolveIndices = resolveIndices;\n+        this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+        this.ignoredAuditUsers = ignoredAuditUsers;\n+        this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+        this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+        this.ignoreAuditRequests = ignoredAuditRequests;\n+        this.disabledRestCategories = disabledRestCategories;\n+        this.disabledTransportCategories = disabledTransportCategories;\n+        this.opendistrosecurityIndex = opendistrosecurityIndex;\n+    }\n+\n+    public static AuditConfig getConfig(Settings settings) {\n+        final boolean isRestApiAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n+        final boolean isTransportAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n+        final boolean resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n+        final boolean logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n+        final boolean resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n+        final boolean excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+        final String opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n+\n+        final EnumSet<AuditCategory> disabledRestCategories;\n+        final List<String> disabledRestCategoriesList = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES, DEFAULT_DISABLED_CATEGORIES);\n+        if (disabledRestCategoriesList.isEmpty() || (disabledRestCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledRestCategoriesList.get(0)))) {\n+            disabledRestCategories = EnumSet.noneOf(AuditCategory.class);\n+        } else {\n+            disabledRestCategories = AuditCategory.parse(disabledRestCategoriesList);\n+        }\n+\n+        final EnumSet<AuditCategory> disabledTransportCategories;\n+        final List<String> disabledTransportCategoriesList = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES, DEFAULT_DISABLED_CATEGORIES);\n+        if (disabledTransportCategoriesList.isEmpty() || (disabledTransportCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledTransportCategoriesList.get(0)))) {\n+            disabledTransportCategories = EnumSet.noneOf(AuditCategory.class);\n+        } else {\n+            disabledTransportCategories = AuditCategory.parse(disabledTransportCategoriesList);\n+        }\n+\n+        final List<String> ignoredAuditUsers = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS, DEFAULT_IGNORED_USERS));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk0NDg3Mw=="}, "originalCommit": null, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MzI3MTExOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMzoyMzowN1rOF8d9MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNDozNjo0MlrOF8i55A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk0OTY4MA==", "bodyText": "auditConfig.toString() will translate to an extremely long string that will be hard to digest.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r398949680", "createdAt": "2020-03-26T23:23:07Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "diffHunk": "@@ -118,81 +99,12 @@\n     protected AbstractAuditLog(Settings settings, final ThreadPool threadPool, final IndexNameExpressionResolver resolver, final ClusterService clusterService) {\n         super();\n         this.threadPool = threadPool;\n-\n         this.settings = settings;\n         this.resolver = resolver;\n         this.clusterService = clusterService;\n+        this.auditConfig = AuditConfig.getConfig(settings);\n \n-        this.opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n-\n-        resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n-\n-        restAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n-        transportAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n-\n-        final List<String> disabledRestCategoriesList = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES, DEFAULT_DISABLED_CATEGORIES);\n-\n-        if (disabledRestCategoriesList.isEmpty() || (disabledRestCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledRestCategoriesList.get(0)))) {\n-            disabledRestCategories = EnumSet.noneOf(AuditCategory.class);\n-        } else {\n-            disabledRestCategories = AuditCategory.parse(disabledRestCategoriesList);\n-        }\n-\n-        if (!disabledRestCategories.isEmpty()) {\n-            log.info(\"Configured categories on rest layer to ignore: {}\", disabledRestCategories);\n-        }\n-\n-        final List<String> disabledTransportCategoriesList = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES, DEFAULT_DISABLED_CATEGORIES);\n-\n-        if (disabledTransportCategoriesList.isEmpty() || (disabledTransportCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledTransportCategoriesList.get(0)))) {\n-            disabledTransportCategories = EnumSet.noneOf(AuditCategory.class);\n-        } else {\n-            disabledTransportCategories = AuditCategory.parse(disabledTransportCategoriesList);\n-        }\n-\n-        if (!disabledTransportCategories.isEmpty()) {\n-            log.info(\"Configured categories on transport layer to ignore: {}\", disabledTransportCategories);\n-        }\n-\n-        logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n-        resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n-\n-        ignoredAuditUsers = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredAuditUsers.size() == 1 && \"NONE\".equals(ignoredAuditUsers.get(0))) {\n-            ignoredAuditUsers.clear();\n-        }\n-\n-        if (ignoredAuditUsers.size() > 0) {\n-            log.info(\"Configured Users to ignore: {}\", ignoredAuditUsers);\n-        }\n-\n-        ignoredComplianceUsersForRead = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredComplianceUsersForRead.size() == 1 && \"NONE\".equals(ignoredComplianceUsersForRead.get(0))) {\n-            ignoredComplianceUsersForRead.clear();\n-        }\n-\n-        if (ignoredComplianceUsersForRead.size() > 0) {\n-            log.info(\"Configured Users to ignore for read compliance events: {}\", ignoredComplianceUsersForRead);\n-        }\n-\n-        ignoredComplianceUsersForWrite = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredComplianceUsersForWrite.size() == 1 && \"NONE\".equals(ignoredComplianceUsersForWrite.get(0))) {\n-            ignoredComplianceUsersForWrite.clear();\n-        }\n-\n-        if (ignoredComplianceUsersForWrite.size() > 0) {\n-            log.info(\"Configured Users to ignore for write compliance events: {}\", ignoredComplianceUsersForWrite);\n-        }\n-\n-        ignoreAuditRequests = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS, Collections.emptyList());\n-        if (ignoreAuditRequests.size() > 0) {\n-            log.info(\"Configured Requests to ignore: {}\", ignoreAuditRequests);\n-        }\n-\n-        this.excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+        log.info(\"Configured audit settings: {}\", auditConfig.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk5Nzc1NQ==", "bodyText": "What would you suggest?", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r398997755", "createdAt": "2020-03-27T02:16:19Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "diffHunk": "@@ -118,81 +99,12 @@\n     protected AbstractAuditLog(Settings settings, final ThreadPool threadPool, final IndexNameExpressionResolver resolver, final ClusterService clusterService) {\n         super();\n         this.threadPool = threadPool;\n-\n         this.settings = settings;\n         this.resolver = resolver;\n         this.clusterService = clusterService;\n+        this.auditConfig = AuditConfig.getConfig(settings);\n \n-        this.opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n-\n-        resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n-\n-        restAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n-        transportAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n-\n-        final List<String> disabledRestCategoriesList = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES, DEFAULT_DISABLED_CATEGORIES);\n-\n-        if (disabledRestCategoriesList.isEmpty() || (disabledRestCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledRestCategoriesList.get(0)))) {\n-            disabledRestCategories = EnumSet.noneOf(AuditCategory.class);\n-        } else {\n-            disabledRestCategories = AuditCategory.parse(disabledRestCategoriesList);\n-        }\n-\n-        if (!disabledRestCategories.isEmpty()) {\n-            log.info(\"Configured categories on rest layer to ignore: {}\", disabledRestCategories);\n-        }\n-\n-        final List<String> disabledTransportCategoriesList = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES, DEFAULT_DISABLED_CATEGORIES);\n-\n-        if (disabledTransportCategoriesList.isEmpty() || (disabledTransportCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledTransportCategoriesList.get(0)))) {\n-            disabledTransportCategories = EnumSet.noneOf(AuditCategory.class);\n-        } else {\n-            disabledTransportCategories = AuditCategory.parse(disabledTransportCategoriesList);\n-        }\n-\n-        if (!disabledTransportCategories.isEmpty()) {\n-            log.info(\"Configured categories on transport layer to ignore: {}\", disabledTransportCategories);\n-        }\n-\n-        logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n-        resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n-\n-        ignoredAuditUsers = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredAuditUsers.size() == 1 && \"NONE\".equals(ignoredAuditUsers.get(0))) {\n-            ignoredAuditUsers.clear();\n-        }\n-\n-        if (ignoredAuditUsers.size() > 0) {\n-            log.info(\"Configured Users to ignore: {}\", ignoredAuditUsers);\n-        }\n-\n-        ignoredComplianceUsersForRead = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredComplianceUsersForRead.size() == 1 && \"NONE\".equals(ignoredComplianceUsersForRead.get(0))) {\n-            ignoredComplianceUsersForRead.clear();\n-        }\n-\n-        if (ignoredComplianceUsersForRead.size() > 0) {\n-            log.info(\"Configured Users to ignore for read compliance events: {}\", ignoredComplianceUsersForRead);\n-        }\n-\n-        ignoredComplianceUsersForWrite = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredComplianceUsersForWrite.size() == 1 && \"NONE\".equals(ignoredComplianceUsersForWrite.get(0))) {\n-            ignoredComplianceUsersForWrite.clear();\n-        }\n-\n-        if (ignoredComplianceUsersForWrite.size() > 0) {\n-            log.info(\"Configured Users to ignore for write compliance events: {}\", ignoredComplianceUsersForWrite);\n-        }\n-\n-        ignoreAuditRequests = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS, Collections.emptyList());\n-        if (ignoreAuditRequests.size() > 0) {\n-            log.info(\"Configured Requests to ignore: {}\", ignoreAuditRequests);\n-        }\n-\n-        this.excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+        log.info(\"Configured audit settings: {}\", auditConfig.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk0OTY4MA=="}, "originalCommit": null, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAxMjM3Ng==", "bodyText": "I guess it will be good to log (one settings per log entry) only those settings that are different from the default, especially for boolean flags.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r399012376", "createdAt": "2020-03-27T03:14:14Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "diffHunk": "@@ -118,81 +99,12 @@\n     protected AbstractAuditLog(Settings settings, final ThreadPool threadPool, final IndexNameExpressionResolver resolver, final ClusterService clusterService) {\n         super();\n         this.threadPool = threadPool;\n-\n         this.settings = settings;\n         this.resolver = resolver;\n         this.clusterService = clusterService;\n+        this.auditConfig = AuditConfig.getConfig(settings);\n \n-        this.opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n-\n-        resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n-\n-        restAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n-        transportAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n-\n-        final List<String> disabledRestCategoriesList = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES, DEFAULT_DISABLED_CATEGORIES);\n-\n-        if (disabledRestCategoriesList.isEmpty() || (disabledRestCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledRestCategoriesList.get(0)))) {\n-            disabledRestCategories = EnumSet.noneOf(AuditCategory.class);\n-        } else {\n-            disabledRestCategories = AuditCategory.parse(disabledRestCategoriesList);\n-        }\n-\n-        if (!disabledRestCategories.isEmpty()) {\n-            log.info(\"Configured categories on rest layer to ignore: {}\", disabledRestCategories);\n-        }\n-\n-        final List<String> disabledTransportCategoriesList = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES, DEFAULT_DISABLED_CATEGORIES);\n-\n-        if (disabledTransportCategoriesList.isEmpty() || (disabledTransportCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledTransportCategoriesList.get(0)))) {\n-            disabledTransportCategories = EnumSet.noneOf(AuditCategory.class);\n-        } else {\n-            disabledTransportCategories = AuditCategory.parse(disabledTransportCategoriesList);\n-        }\n-\n-        if (!disabledTransportCategories.isEmpty()) {\n-            log.info(\"Configured categories on transport layer to ignore: {}\", disabledTransportCategories);\n-        }\n-\n-        logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n-        resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n-\n-        ignoredAuditUsers = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredAuditUsers.size() == 1 && \"NONE\".equals(ignoredAuditUsers.get(0))) {\n-            ignoredAuditUsers.clear();\n-        }\n-\n-        if (ignoredAuditUsers.size() > 0) {\n-            log.info(\"Configured Users to ignore: {}\", ignoredAuditUsers);\n-        }\n-\n-        ignoredComplianceUsersForRead = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredComplianceUsersForRead.size() == 1 && \"NONE\".equals(ignoredComplianceUsersForRead.get(0))) {\n-            ignoredComplianceUsersForRead.clear();\n-        }\n-\n-        if (ignoredComplianceUsersForRead.size() > 0) {\n-            log.info(\"Configured Users to ignore for read compliance events: {}\", ignoredComplianceUsersForRead);\n-        }\n-\n-        ignoredComplianceUsersForWrite = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredComplianceUsersForWrite.size() == 1 && \"NONE\".equals(ignoredComplianceUsersForWrite.get(0))) {\n-            ignoredComplianceUsersForWrite.clear();\n-        }\n-\n-        if (ignoredComplianceUsersForWrite.size() > 0) {\n-            log.info(\"Configured Users to ignore for write compliance events: {}\", ignoredComplianceUsersForWrite);\n-        }\n-\n-        ignoreAuditRequests = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS, Collections.emptyList());\n-        if (ignoreAuditRequests.size() > 0) {\n-            log.info(\"Configured Requests to ignore: {}\", ignoreAuditRequests);\n-        }\n-\n-        this.excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+        log.info(\"Configured audit settings: {}\", auditConfig.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk0OTY4MA=="}, "originalCommit": null, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAxNTQ2Mg==", "bodyText": "Original logging was done only for lists and not for boolean. So I thought, it ll be better to log all.\nWhat do you think of prettifying toString() to something more descriptive ?", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r399015462", "createdAt": "2020-03-27T03:28:01Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "diffHunk": "@@ -118,81 +99,12 @@\n     protected AbstractAuditLog(Settings settings, final ThreadPool threadPool, final IndexNameExpressionResolver resolver, final ClusterService clusterService) {\n         super();\n         this.threadPool = threadPool;\n-\n         this.settings = settings;\n         this.resolver = resolver;\n         this.clusterService = clusterService;\n+        this.auditConfig = AuditConfig.getConfig(settings);\n \n-        this.opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n-\n-        resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n-\n-        restAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n-        transportAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n-\n-        final List<String> disabledRestCategoriesList = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES, DEFAULT_DISABLED_CATEGORIES);\n-\n-        if (disabledRestCategoriesList.isEmpty() || (disabledRestCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledRestCategoriesList.get(0)))) {\n-            disabledRestCategories = EnumSet.noneOf(AuditCategory.class);\n-        } else {\n-            disabledRestCategories = AuditCategory.parse(disabledRestCategoriesList);\n-        }\n-\n-        if (!disabledRestCategories.isEmpty()) {\n-            log.info(\"Configured categories on rest layer to ignore: {}\", disabledRestCategories);\n-        }\n-\n-        final List<String> disabledTransportCategoriesList = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES, DEFAULT_DISABLED_CATEGORIES);\n-\n-        if (disabledTransportCategoriesList.isEmpty() || (disabledTransportCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledTransportCategoriesList.get(0)))) {\n-            disabledTransportCategories = EnumSet.noneOf(AuditCategory.class);\n-        } else {\n-            disabledTransportCategories = AuditCategory.parse(disabledTransportCategoriesList);\n-        }\n-\n-        if (!disabledTransportCategories.isEmpty()) {\n-            log.info(\"Configured categories on transport layer to ignore: {}\", disabledTransportCategories);\n-        }\n-\n-        logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n-        resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n-\n-        ignoredAuditUsers = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredAuditUsers.size() == 1 && \"NONE\".equals(ignoredAuditUsers.get(0))) {\n-            ignoredAuditUsers.clear();\n-        }\n-\n-        if (ignoredAuditUsers.size() > 0) {\n-            log.info(\"Configured Users to ignore: {}\", ignoredAuditUsers);\n-        }\n-\n-        ignoredComplianceUsersForRead = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredComplianceUsersForRead.size() == 1 && \"NONE\".equals(ignoredComplianceUsersForRead.get(0))) {\n-            ignoredComplianceUsersForRead.clear();\n-        }\n-\n-        if (ignoredComplianceUsersForRead.size() > 0) {\n-            log.info(\"Configured Users to ignore for read compliance events: {}\", ignoredComplianceUsersForRead);\n-        }\n-\n-        ignoredComplianceUsersForWrite = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredComplianceUsersForWrite.size() == 1 && \"NONE\".equals(ignoredComplianceUsersForWrite.get(0))) {\n-            ignoredComplianceUsersForWrite.clear();\n-        }\n-\n-        if (ignoredComplianceUsersForWrite.size() > 0) {\n-            log.info(\"Configured Users to ignore for write compliance events: {}\", ignoredComplianceUsersForWrite);\n-        }\n-\n-        ignoreAuditRequests = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS, Collections.emptyList());\n-        if (ignoreAuditRequests.size() > 0) {\n-            log.info(\"Configured Requests to ignore: {}\", ignoreAuditRequests);\n-        }\n-\n-        this.excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+        log.info(\"Configured audit settings: {}\", auditConfig.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk0OTY4MA=="}, "originalCommit": null, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAzMDc1Ng==", "bodyText": "It is an option but it will most likely mess up Intellij debugger. I'd recommend avoiding toString().", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r399030756", "createdAt": "2020-03-27T04:36:42Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "diffHunk": "@@ -118,81 +99,12 @@\n     protected AbstractAuditLog(Settings settings, final ThreadPool threadPool, final IndexNameExpressionResolver resolver, final ClusterService clusterService) {\n         super();\n         this.threadPool = threadPool;\n-\n         this.settings = settings;\n         this.resolver = resolver;\n         this.clusterService = clusterService;\n+        this.auditConfig = AuditConfig.getConfig(settings);\n \n-        this.opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n-\n-        resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n-\n-        restAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n-        transportAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n-\n-        final List<String> disabledRestCategoriesList = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES, DEFAULT_DISABLED_CATEGORIES);\n-\n-        if (disabledRestCategoriesList.isEmpty() || (disabledRestCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledRestCategoriesList.get(0)))) {\n-            disabledRestCategories = EnumSet.noneOf(AuditCategory.class);\n-        } else {\n-            disabledRestCategories = AuditCategory.parse(disabledRestCategoriesList);\n-        }\n-\n-        if (!disabledRestCategories.isEmpty()) {\n-            log.info(\"Configured categories on rest layer to ignore: {}\", disabledRestCategories);\n-        }\n-\n-        final List<String> disabledTransportCategoriesList = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES, DEFAULT_DISABLED_CATEGORIES);\n-\n-        if (disabledTransportCategoriesList.isEmpty() || (disabledTransportCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledTransportCategoriesList.get(0)))) {\n-            disabledTransportCategories = EnumSet.noneOf(AuditCategory.class);\n-        } else {\n-            disabledTransportCategories = AuditCategory.parse(disabledTransportCategoriesList);\n-        }\n-\n-        if (!disabledTransportCategories.isEmpty()) {\n-            log.info(\"Configured categories on transport layer to ignore: {}\", disabledTransportCategories);\n-        }\n-\n-        logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n-        resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n-\n-        ignoredAuditUsers = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredAuditUsers.size() == 1 && \"NONE\".equals(ignoredAuditUsers.get(0))) {\n-            ignoredAuditUsers.clear();\n-        }\n-\n-        if (ignoredAuditUsers.size() > 0) {\n-            log.info(\"Configured Users to ignore: {}\", ignoredAuditUsers);\n-        }\n-\n-        ignoredComplianceUsersForRead = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredComplianceUsersForRead.size() == 1 && \"NONE\".equals(ignoredComplianceUsersForRead.get(0))) {\n-            ignoredComplianceUsersForRead.clear();\n-        }\n-\n-        if (ignoredComplianceUsersForRead.size() > 0) {\n-            log.info(\"Configured Users to ignore for read compliance events: {}\", ignoredComplianceUsersForRead);\n-        }\n-\n-        ignoredComplianceUsersForWrite = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredComplianceUsersForWrite.size() == 1 && \"NONE\".equals(ignoredComplianceUsersForWrite.get(0))) {\n-            ignoredComplianceUsersForWrite.clear();\n-        }\n-\n-        if (ignoredComplianceUsersForWrite.size() > 0) {\n-            log.info(\"Configured Users to ignore for write compliance events: {}\", ignoredComplianceUsersForWrite);\n-        }\n-\n-        ignoreAuditRequests = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS, Collections.emptyList());\n-        if (ignoreAuditRequests.size() > 0) {\n-            log.info(\"Configured Requests to ignore: {}\", ignoreAuditRequests);\n-        }\n-\n-        this.excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+        log.info(\"Configured audit settings: {}\", auditConfig.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk0OTY4MA=="}, "originalCommit": null, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MzI4MDAyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMzoyNjo0N1rOF8eCRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMzoyNjo0N1rOF8eCRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1MDk4Mw==", "bodyText": "Add new line", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r398950983", "createdAt": "2020-03-26T23:26:47Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "diffHunk": "@@ -869,4 +788,4 @@ private boolean checkRestFilter(final AuditCategory category, final String effec\n \n \n     protected abstract void save(final AuditMessage msg);\n-}\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 522}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MzMwNzc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMzozOTo0M1rOF8eSSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMzozOTo0M1rOF8eSSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1NTA4MA==", "bodyText": "ImmutableSet.copyOf()? Consider moving Collection->Set (or ImmutableSet) converstion to AuditConfig constructor.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r398955080", "createdAt": "2020-03-26T23:39:43Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean isRestApiAuditEnabled;\n+    private final boolean isTransportAuditEnabled;\n+    private final boolean resolveBulkRequests;\n+    private final boolean logRequestBody;\n+    private final boolean resolveIndices;\n+    private final boolean excludeSensitiveHeaders;\n+    private final Set<String> ignoredAuditUsers;\n+    private final Set<String> ignoredComplianceUsersForRead;\n+    private final Set<String> ignoredComplianceUsersForWrite;\n+    private final Set<String> ignoreAuditRequests;\n+    private final EnumSet<AuditCategory> disabledRestCategories;\n+    private final EnumSet<AuditCategory> disabledTransportCategories;\n+    private final String opendistrosecurityIndex;\n+\n+    private AuditConfig(final boolean isRestApiAuditEnabled,\n+                        final boolean isTransportAuditEnabled,\n+                        final boolean resolveBulkRequests,\n+                        final boolean logRequestBody,\n+                        final boolean resolveIndices,\n+                        final boolean excludeSensitiveHeaders,\n+                        final Set<String> ignoredAuditUsers,\n+                        final Set<String> ignoredComplianceUsersForRead,\n+                        final Set<String> ignoredComplianceUsersForWrite,\n+                        final Set<String> ignoredAuditRequests,\n+                        final EnumSet<AuditCategory> disabledRestCategories,\n+                        final EnumSet<AuditCategory> disabledTransportCategories,\n+                        final String opendistrosecurityIndex) {\n+        this.isRestApiAuditEnabled = isRestApiAuditEnabled;\n+        this.isTransportAuditEnabled = isTransportAuditEnabled;\n+        this.resolveBulkRequests = resolveBulkRequests;\n+        this.logRequestBody = logRequestBody;\n+        this.resolveIndices = resolveIndices;\n+        this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+        this.ignoredAuditUsers = ignoredAuditUsers;\n+        this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+        this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+        this.ignoreAuditRequests = ignoredAuditRequests;\n+        this.disabledRestCategories = disabledRestCategories;\n+        this.disabledTransportCategories = disabledTransportCategories;\n+        this.opendistrosecurityIndex = opendistrosecurityIndex;\n+    }\n+\n+    public static AuditConfig getConfig(Settings settings) {\n+        final boolean isRestApiAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n+        final boolean isTransportAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n+        final boolean resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n+        final boolean logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n+        final boolean resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n+        final boolean excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+        final String opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n+\n+        final EnumSet<AuditCategory> disabledRestCategories;\n+        final List<String> disabledRestCategoriesList = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES, DEFAULT_DISABLED_CATEGORIES);\n+        if (disabledRestCategoriesList.isEmpty() || (disabledRestCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledRestCategoriesList.get(0)))) {\n+            disabledRestCategories = EnumSet.noneOf(AuditCategory.class);\n+        } else {\n+            disabledRestCategories = AuditCategory.parse(disabledRestCategoriesList);\n+        }\n+\n+        final EnumSet<AuditCategory> disabledTransportCategories;\n+        final List<String> disabledTransportCategoriesList = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES, DEFAULT_DISABLED_CATEGORIES);\n+        if (disabledTransportCategoriesList.isEmpty() || (disabledTransportCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledTransportCategoriesList.get(0)))) {\n+            disabledTransportCategories = EnumSet.noneOf(AuditCategory.class);\n+        } else {\n+            disabledTransportCategories = AuditCategory.parse(disabledTransportCategoriesList);\n+        }\n+\n+        final List<String> ignoredAuditUsers = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS, DEFAULT_IGNORED_USERS));\n+        if (ignoredAuditUsers.size() == 1 && \"NONE\".equals(ignoredAuditUsers.get(0))) {\n+            ignoredAuditUsers.clear();\n+        }\n+\n+        final List<String> ignoredComplianceUsersForRead = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS, DEFAULT_IGNORED_USERS));\n+        if (ignoredComplianceUsersForRead.size() == 1 && \"NONE\".equals(ignoredComplianceUsersForRead.get(0))) {\n+            ignoredComplianceUsersForRead.clear();\n+        }\n+\n+        final List<String> ignoredComplianceUsersForWrite = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS, DEFAULT_IGNORED_USERS));\n+        if (ignoredComplianceUsersForWrite.size() == 1 && \"NONE\".equals(ignoredComplianceUsersForWrite.get(0))) {\n+            ignoredComplianceUsersForWrite.clear();\n+        }\n+\n+        final List<String> ignoreAuditRequests = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS, Collections.emptyList());\n+\n+        return new AuditConfig(isRestApiAuditEnabled,\n+                isTransportAuditEnabled,\n+                resolveBulkRequests,\n+                logRequestBody,\n+                resolveIndices,\n+                excludeSensitiveHeaders,\n+                new HashSet<>(ignoredAuditUsers),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MzMzMTU3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMzo1MToxOFrOF8egyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwMzoyNDo0MFrOF8h7MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1ODc5NA==", "bodyText": "May this set contain \"NONE\"? Should \"NONE\" be handled in the constructor?", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r398958794", "createdAt": "2020-03-26T23:51:18Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean isRestApiAuditEnabled;\n+    private final boolean isTransportAuditEnabled;\n+    private final boolean resolveBulkRequests;\n+    private final boolean logRequestBody;\n+    private final boolean resolveIndices;\n+    private final boolean excludeSensitiveHeaders;\n+    private final Set<String> ignoredAuditUsers;\n+    private final Set<String> ignoredComplianceUsersForRead;\n+    private final Set<String> ignoredComplianceUsersForWrite;\n+    private final Set<String> ignoreAuditRequests;\n+    private final EnumSet<AuditCategory> disabledRestCategories;\n+    private final EnumSet<AuditCategory> disabledTransportCategories;\n+    private final String opendistrosecurityIndex;\n+\n+    private AuditConfig(final boolean isRestApiAuditEnabled,\n+                        final boolean isTransportAuditEnabled,\n+                        final boolean resolveBulkRequests,\n+                        final boolean logRequestBody,\n+                        final boolean resolveIndices,\n+                        final boolean excludeSensitiveHeaders,\n+                        final Set<String> ignoredAuditUsers,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAwODA1Ng==", "bodyText": "I feel whoever is calling the constructor should deal with that. In this case, getConfig(settings). What if \"NONE\" is one of the users? It would be wrong to handle this in constructor. What are your thoughts?", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r399008056", "createdAt": "2020-03-27T02:56:33Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean isRestApiAuditEnabled;\n+    private final boolean isTransportAuditEnabled;\n+    private final boolean resolveBulkRequests;\n+    private final boolean logRequestBody;\n+    private final boolean resolveIndices;\n+    private final boolean excludeSensitiveHeaders;\n+    private final Set<String> ignoredAuditUsers;\n+    private final Set<String> ignoredComplianceUsersForRead;\n+    private final Set<String> ignoredComplianceUsersForWrite;\n+    private final Set<String> ignoreAuditRequests;\n+    private final EnumSet<AuditCategory> disabledRestCategories;\n+    private final EnumSet<AuditCategory> disabledTransportCategories;\n+    private final String opendistrosecurityIndex;\n+\n+    private AuditConfig(final boolean isRestApiAuditEnabled,\n+                        final boolean isTransportAuditEnabled,\n+                        final boolean resolveBulkRequests,\n+                        final boolean logRequestBody,\n+                        final boolean resolveIndices,\n+                        final boolean excludeSensitiveHeaders,\n+                        final Set<String> ignoredAuditUsers,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1ODc5NA=="}, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAxNDcwNA==", "bodyText": "OK, let's assume that \"NONE\" is a valid input in the constructor and it means an empty list only in settings.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r399014704", "createdAt": "2020-03-27T03:24:40Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean isRestApiAuditEnabled;\n+    private final boolean isTransportAuditEnabled;\n+    private final boolean resolveBulkRequests;\n+    private final boolean logRequestBody;\n+    private final boolean resolveIndices;\n+    private final boolean excludeSensitiveHeaders;\n+    private final Set<String> ignoredAuditUsers;\n+    private final Set<String> ignoredComplianceUsersForRead;\n+    private final Set<String> ignoredComplianceUsersForWrite;\n+    private final Set<String> ignoreAuditRequests;\n+    private final EnumSet<AuditCategory> disabledRestCategories;\n+    private final EnumSet<AuditCategory> disabledTransportCategories;\n+    private final String opendistrosecurityIndex;\n+\n+    private AuditConfig(final boolean isRestApiAuditEnabled,\n+                        final boolean isTransportAuditEnabled,\n+                        final boolean resolveBulkRequests,\n+                        final boolean logRequestBody,\n+                        final boolean resolveIndices,\n+                        final boolean excludeSensitiveHeaders,\n+                        final Set<String> ignoredAuditUsers,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1ODc5NA=="}, "originalCommit": null, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MzM5MDE3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwMDoyMDoyM1rOF8fDXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwMjoyMToxNlrOF8g9rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk2NzY0Nw==", "bodyText": "If auditConfig is final and immutable (all fields are also final) how it can be reloaded dynamically?", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r398967647", "createdAt": "2020-03-27T00:20:23Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "diffHunk": "@@ -80,33 +79,15 @@\n import com.google.common.io.BaseEncoding;\n \n public abstract class AbstractAuditLog implements AuditLog {\n+    protected final Logger log = LogManager.getLogger(this.getClass());\n \n-    private static final List<String> DEFAULT_DISABLED_CATEGORIES = Arrays.asList(AuditCategory.AUTHENTICATED.toString(), AuditCategory.GRANTED_PRIVILEGES.toString());\n+    private final ThreadPool threadPool;\n+    private final IndexNameExpressionResolver resolver;\n+    private final ClusterService clusterService;\n+    private final Settings settings;\n+    private final AuditConfig auditConfig;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk5ODk1OA==", "bodyText": "Yes this needs to be non-final when reloaded dynamically. I thought of doing it in #319 when the change is actually getting merged. Till then we don't need it. I feel having rigidity helps in making refactors less error-prone. Thats why I put this as final. What do you think?", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r398998958", "createdAt": "2020-03-27T02:21:16Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "diffHunk": "@@ -80,33 +79,15 @@\n import com.google.common.io.BaseEncoding;\n \n public abstract class AbstractAuditLog implements AuditLog {\n+    protected final Logger log = LogManager.getLogger(this.getClass());\n \n-    private static final List<String> DEFAULT_DISABLED_CATEGORIES = Arrays.asList(AuditCategory.AUTHENTICATED.toString(), AuditCategory.GRANTED_PRIVILEGES.toString());\n+    private final ThreadPool threadPool;\n+    private final IndexNameExpressionResolver resolver;\n+    private final ClusterService clusterService;\n+    private final Settings settings;\n+    private final AuditConfig auditConfig;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk2NzY0Nw=="}, "originalCommit": null, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MzQwMTYzOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfigTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwMDoyNjoyM1rOF8fJ3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwMDoyNjoyM1rOF8fJ3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk2OTMxMA==", "bodyText": "Use EMPTY_SETTINGS.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r398969310", "createdAt": "2020-03-27T00:26:23Z", "author": {"login": "vrozov"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfigTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.elasticsearch.common.settings.Settings;\n+import org.hamcrest.Matcher;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import static com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory.*;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.*;\n+\n+public class AuditConfigTest {\n+\n+    @Test\n+    public void testDefault() {\n+        // arrange\n+        final Settings settings = Settings.builder().build();\n+        final Set<String> defaultIgnoredUser = Collections.singleton(\"kibanaserver\");\n+        final EnumSet<AuditCategory> defaultDisabledCategories = EnumSet.of(AUTHENTICATED, GRANTED_PRIVILEGES);\n+        // act\n+        final AuditConfig auditConfig = AuditConfig.getConfig(settings);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTg5NTk3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNTo0MDoxMVrOF82xjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNTo0MDoxMVrOF82xjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM1NjMwMg==", "bodyText": "nit: consider\nif (list.size() == 1 && \"NONE\".equals(ignoreCaseForNone? list.get(0).toUpperCase() : list.get(0)))", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r399356302", "createdAt": "2020-03-27T15:40:11Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,206 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableSet;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean isRestApiAuditEnabled;\n+    private final boolean isTransportAuditEnabled;\n+    private final boolean resolveBulkRequests;\n+    private final boolean logRequestBody;\n+    private final boolean resolveIndices;\n+    private final boolean excludeSensitiveHeaders;\n+    private final Set<String> ignoredAuditUsers;\n+    private final Set<String> ignoredComplianceUsersForRead;\n+    private final Set<String> ignoredComplianceUsersForWrite;\n+    private final Set<String> ignoreAuditRequests;\n+    private final EnumSet<AuditCategory> disabledRestCategories;\n+    private final EnumSet<AuditCategory> disabledTransportCategories;\n+    private final String opendistrosecurityIndex;\n+\n+    private AuditConfig(final boolean isRestApiAuditEnabled,\n+                        final boolean isTransportAuditEnabled,\n+                        final boolean resolveBulkRequests,\n+                        final boolean logRequestBody,\n+                        final boolean resolveIndices,\n+                        final boolean excludeSensitiveHeaders,\n+                        final Set<String> ignoredAuditUsers,\n+                        final Set<String> ignoredComplianceUsersForRead,\n+                        final Set<String> ignoredComplianceUsersForWrite,\n+                        final Set<String> ignoredAuditRequests,\n+                        final EnumSet<AuditCategory> disabledRestCategories,\n+                        final EnumSet<AuditCategory> disabledTransportCategories,\n+                        final String opendistrosecurityIndex) {\n+        this.isRestApiAuditEnabled = isRestApiAuditEnabled;\n+        this.isTransportAuditEnabled = isTransportAuditEnabled;\n+        this.resolveBulkRequests = resolveBulkRequests;\n+        this.logRequestBody = logRequestBody;\n+        this.resolveIndices = resolveIndices;\n+        this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+        this.ignoredAuditUsers = ignoredAuditUsers;\n+        this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+        this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+        this.ignoreAuditRequests = ignoredAuditRequests;\n+        this.disabledRestCategories = disabledRestCategories;\n+        this.disabledTransportCategories = disabledTransportCategories;\n+        this.opendistrosecurityIndex = opendistrosecurityIndex;\n+    }\n+\n+    public static AuditConfig getConfig(Settings settings) {\n+        final boolean isRestApiAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n+        final boolean isTransportAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n+        final boolean resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n+        final boolean logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n+        final boolean resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n+        final boolean excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+        final String opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n+\n+        final EnumSet<AuditCategory> disabledRestCategories = AuditCategory.parse(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES,\n+                true));\n+\n+        final EnumSet<AuditCategory> disabledTransportCategories = AuditCategory.parse(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES,\n+                true));\n+\n+        final Set<String> ignoredAuditUsers = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoredComplianceUsersForRead = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoredComplianceUsersForWrite = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoreAuditRequests = ImmutableSet.copyOf(settings.getAsList(\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS,\n+                Collections.emptyList()));\n+\n+        return new AuditConfig(isRestApiAuditEnabled,\n+                isTransportAuditEnabled,\n+                resolveBulkRequests,\n+                logRequestBody,\n+                resolveIndices,\n+                excludeSensitiveHeaders,\n+                ignoredAuditUsers,\n+                ignoredComplianceUsersForRead,\n+                ignoredComplianceUsersForWrite,\n+                ignoreAuditRequests,\n+                disabledRestCategories,\n+                disabledTransportCategories,\n+                opendistrosecurityIndex);\n+    }\n+\n+    private static List<String> getSettingAsList(final Settings settings, final String key, final List<String> defaultList, final boolean ignoreCaseForNone) {\n+        final List<String> list = settings.getAsList(key, defaultList);\n+        if (list.size() == 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTkyNjU2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNTo0NzowN1rOF83EmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNTo0NzowN1rOF83EmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM2MTE3Nw==", "bodyText": "Consider renaming getConfig() to from().", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r399361177", "createdAt": "2020-03-27T15:47:07Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,206 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableSet;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean isRestApiAuditEnabled;\n+    private final boolean isTransportAuditEnabled;\n+    private final boolean resolveBulkRequests;\n+    private final boolean logRequestBody;\n+    private final boolean resolveIndices;\n+    private final boolean excludeSensitiveHeaders;\n+    private final Set<String> ignoredAuditUsers;\n+    private final Set<String> ignoredComplianceUsersForRead;\n+    private final Set<String> ignoredComplianceUsersForWrite;\n+    private final Set<String> ignoreAuditRequests;\n+    private final EnumSet<AuditCategory> disabledRestCategories;\n+    private final EnumSet<AuditCategory> disabledTransportCategories;\n+    private final String opendistrosecurityIndex;\n+\n+    private AuditConfig(final boolean isRestApiAuditEnabled,\n+                        final boolean isTransportAuditEnabled,\n+                        final boolean resolveBulkRequests,\n+                        final boolean logRequestBody,\n+                        final boolean resolveIndices,\n+                        final boolean excludeSensitiveHeaders,\n+                        final Set<String> ignoredAuditUsers,\n+                        final Set<String> ignoredComplianceUsersForRead,\n+                        final Set<String> ignoredComplianceUsersForWrite,\n+                        final Set<String> ignoredAuditRequests,\n+                        final EnumSet<AuditCategory> disabledRestCategories,\n+                        final EnumSet<AuditCategory> disabledTransportCategories,\n+                        final String opendistrosecurityIndex) {\n+        this.isRestApiAuditEnabled = isRestApiAuditEnabled;\n+        this.isTransportAuditEnabled = isTransportAuditEnabled;\n+        this.resolveBulkRequests = resolveBulkRequests;\n+        this.logRequestBody = logRequestBody;\n+        this.resolveIndices = resolveIndices;\n+        this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+        this.ignoredAuditUsers = ignoredAuditUsers;\n+        this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+        this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+        this.ignoreAuditRequests = ignoredAuditRequests;\n+        this.disabledRestCategories = disabledRestCategories;\n+        this.disabledTransportCategories = disabledTransportCategories;\n+        this.opendistrosecurityIndex = opendistrosecurityIndex;\n+    }\n+\n+    public static AuditConfig getConfig(Settings settings) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTk0Mjc5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNTo1MDo0MlrOF83OwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNTo1MDo0MlrOF83OwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM2Mzc3Nw==", "bodyText": "Consider\nlog.info(\"Auditing on REST API is {}\", auditConfig.isRestApiAuditEnabled()? \"enabled\" : \"disabled\");", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r399363777", "createdAt": "2020-03-27T15:50:42Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "diffHunk": "@@ -118,81 +99,18 @@\n     protected AbstractAuditLog(Settings settings, final ThreadPool threadPool, final IndexNameExpressionResolver resolver, final ClusterService clusterService) {\n         super();\n         this.threadPool = threadPool;\n-\n         this.settings = settings;\n         this.resolver = resolver;\n         this.clusterService = clusterService;\n-\n-        this.opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n-\n-        resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n-\n-        restAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n-        transportAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n-\n-        final List<String> disabledRestCategoriesList = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES, DEFAULT_DISABLED_CATEGORIES);\n-\n-        if (disabledRestCategoriesList.isEmpty() || (disabledRestCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledRestCategoriesList.get(0)))) {\n-            disabledRestCategories = EnumSet.noneOf(AuditCategory.class);\n-        } else {\n-            disabledRestCategories = AuditCategory.parse(disabledRestCategoriesList);\n-        }\n-\n-        if (!disabledRestCategories.isEmpty()) {\n-            log.info(\"Configured categories on rest layer to ignore: {}\", disabledRestCategories);\n-        }\n-\n-        final List<String> disabledTransportCategoriesList = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES, DEFAULT_DISABLED_CATEGORIES);\n-\n-        if (disabledTransportCategoriesList.isEmpty() || (disabledTransportCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledTransportCategoriesList.get(0)))) {\n-            disabledTransportCategories = EnumSet.noneOf(AuditCategory.class);\n-        } else {\n-            disabledTransportCategories = AuditCategory.parse(disabledTransportCategoriesList);\n-        }\n-\n-        if (!disabledTransportCategories.isEmpty()) {\n-            log.info(\"Configured categories on transport layer to ignore: {}\", disabledTransportCategories);\n-        }\n-\n-        logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n-        resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n-\n-        ignoredAuditUsers = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredAuditUsers.size() == 1 && \"NONE\".equals(ignoredAuditUsers.get(0))) {\n-            ignoredAuditUsers.clear();\n-        }\n-\n-        if (ignoredAuditUsers.size() > 0) {\n-            log.info(\"Configured Users to ignore: {}\", ignoredAuditUsers);\n-        }\n-\n-        ignoredComplianceUsersForRead = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredComplianceUsersForRead.size() == 1 && \"NONE\".equals(ignoredComplianceUsersForRead.get(0))) {\n-            ignoredComplianceUsersForRead.clear();\n-        }\n-\n-        if (ignoredComplianceUsersForRead.size() > 0) {\n-            log.info(\"Configured Users to ignore for read compliance events: {}\", ignoredComplianceUsersForRead);\n-        }\n-\n-        ignoredComplianceUsersForWrite = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredComplianceUsersForWrite.size() == 1 && \"NONE\".equals(ignoredComplianceUsersForWrite.get(0))) {\n-            ignoredComplianceUsersForWrite.clear();\n-        }\n-\n-        if (ignoredComplianceUsersForWrite.size() > 0) {\n-            log.info(\"Configured Users to ignore for write compliance events: {}\", ignoredComplianceUsersForWrite);\n-        }\n-\n-        ignoreAuditRequests = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS, Collections.emptyList());\n-        if (ignoreAuditRequests.size() > 0) {\n-            log.info(\"Configured Requests to ignore: {}\", ignoreAuditRequests);\n-        }\n-\n-        this.excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+        this.auditConfig = AuditConfig.getConfig(settings);\n+\n+        log.info(\"Configured audit setting for auditing on rest layer : {}\", auditConfig.isRestApiAuditEnabled());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTk0Njk0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNTo1MTo0MFrOF83RUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxODozNTo1NlrOF89efA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM2NDQzMw==", "bodyText": "remove this line", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r399364433", "createdAt": "2020-03-27T15:51:40Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "diffHunk": "@@ -118,81 +99,18 @@\n     protected AbstractAuditLog(Settings settings, final ThreadPool threadPool, final IndexNameExpressionResolver resolver, final ClusterService clusterService) {\n         super();\n         this.threadPool = threadPool;\n-\n         this.settings = settings;\n         this.resolver = resolver;\n         this.clusterService = clusterService;\n-\n-        this.opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n-\n-        resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n-\n-        restAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n-        transportAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n-\n-        final List<String> disabledRestCategoriesList = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES, DEFAULT_DISABLED_CATEGORIES);\n-\n-        if (disabledRestCategoriesList.isEmpty() || (disabledRestCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledRestCategoriesList.get(0)))) {\n-            disabledRestCategories = EnumSet.noneOf(AuditCategory.class);\n-        } else {\n-            disabledRestCategories = AuditCategory.parse(disabledRestCategoriesList);\n-        }\n-\n-        if (!disabledRestCategories.isEmpty()) {\n-            log.info(\"Configured categories on rest layer to ignore: {}\", disabledRestCategories);\n-        }\n-\n-        final List<String> disabledTransportCategoriesList = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES, DEFAULT_DISABLED_CATEGORIES);\n-\n-        if (disabledTransportCategoriesList.isEmpty() || (disabledTransportCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledTransportCategoriesList.get(0)))) {\n-            disabledTransportCategories = EnumSet.noneOf(AuditCategory.class);\n-        } else {\n-            disabledTransportCategories = AuditCategory.parse(disabledTransportCategoriesList);\n-        }\n-\n-        if (!disabledTransportCategories.isEmpty()) {\n-            log.info(\"Configured categories on transport layer to ignore: {}\", disabledTransportCategories);\n-        }\n-\n-        logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n-        resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n-\n-        ignoredAuditUsers = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredAuditUsers.size() == 1 && \"NONE\".equals(ignoredAuditUsers.get(0))) {\n-            ignoredAuditUsers.clear();\n-        }\n-\n-        if (ignoredAuditUsers.size() > 0) {\n-            log.info(\"Configured Users to ignore: {}\", ignoredAuditUsers);\n-        }\n-\n-        ignoredComplianceUsersForRead = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredComplianceUsersForRead.size() == 1 && \"NONE\".equals(ignoredComplianceUsersForRead.get(0))) {\n-            ignoredComplianceUsersForRead.clear();\n-        }\n-\n-        if (ignoredComplianceUsersForRead.size() > 0) {\n-            log.info(\"Configured Users to ignore for read compliance events: {}\", ignoredComplianceUsersForRead);\n-        }\n-\n-        ignoredComplianceUsersForWrite = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredComplianceUsersForWrite.size() == 1 && \"NONE\".equals(ignoredComplianceUsersForWrite.get(0))) {\n-            ignoredComplianceUsersForWrite.clear();\n-        }\n-\n-        if (ignoredComplianceUsersForWrite.size() > 0) {\n-            log.info(\"Configured Users to ignore for write compliance events: {}\", ignoredComplianceUsersForWrite);\n-        }\n-\n-        ignoreAuditRequests = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS, Collections.emptyList());\n-        if (ignoreAuditRequests.size() > 0) {\n-            log.info(\"Configured Requests to ignore: {}\", ignoreAuditRequests);\n-        }\n-\n-        this.excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+        this.auditConfig = AuditConfig.getConfig(settings);\n+\n+        log.info(\"Configured audit setting for auditing on rest layer : {}\", auditConfig.isRestApiAuditEnabled());\n+        log.info(\"Configured audit setting for auditing on transport layer : {}\", auditConfig.isTransportApiAuditEnabled());\n+        log.info(\"Configured audit setting to log request body : {}\", auditConfig.shouldLogRequestBody());\n+        log.info(\"Configured audit setting to resolve bulk requests : {}\", auditConfig.shouldResolveBulkRequests());\n+        log.info(\"Configured audit setting to resolve indices : {}\", auditConfig.shouldResolveIndices());\n+        log.info(\"Configured audit setting to exclude sensitive headers : {}\", auditConfig.shouldExcludeSensitiveHeaders());\n+        log.info(\"All configured audit settings : {}\", auditConfig.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQxODkxMA==", "bodyText": "I would have personally preferred this to see all configured settings.\nWhy are you suggesting to remove this ?", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r399418910", "createdAt": "2020-03-27T17:14:19Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "diffHunk": "@@ -118,81 +99,18 @@\n     protected AbstractAuditLog(Settings settings, final ThreadPool threadPool, final IndexNameExpressionResolver resolver, final ClusterService clusterService) {\n         super();\n         this.threadPool = threadPool;\n-\n         this.settings = settings;\n         this.resolver = resolver;\n         this.clusterService = clusterService;\n-\n-        this.opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n-\n-        resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n-\n-        restAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n-        transportAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n-\n-        final List<String> disabledRestCategoriesList = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES, DEFAULT_DISABLED_CATEGORIES);\n-\n-        if (disabledRestCategoriesList.isEmpty() || (disabledRestCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledRestCategoriesList.get(0)))) {\n-            disabledRestCategories = EnumSet.noneOf(AuditCategory.class);\n-        } else {\n-            disabledRestCategories = AuditCategory.parse(disabledRestCategoriesList);\n-        }\n-\n-        if (!disabledRestCategories.isEmpty()) {\n-            log.info(\"Configured categories on rest layer to ignore: {}\", disabledRestCategories);\n-        }\n-\n-        final List<String> disabledTransportCategoriesList = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES, DEFAULT_DISABLED_CATEGORIES);\n-\n-        if (disabledTransportCategoriesList.isEmpty() || (disabledTransportCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledTransportCategoriesList.get(0)))) {\n-            disabledTransportCategories = EnumSet.noneOf(AuditCategory.class);\n-        } else {\n-            disabledTransportCategories = AuditCategory.parse(disabledTransportCategoriesList);\n-        }\n-\n-        if (!disabledTransportCategories.isEmpty()) {\n-            log.info(\"Configured categories on transport layer to ignore: {}\", disabledTransportCategories);\n-        }\n-\n-        logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n-        resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n-\n-        ignoredAuditUsers = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredAuditUsers.size() == 1 && \"NONE\".equals(ignoredAuditUsers.get(0))) {\n-            ignoredAuditUsers.clear();\n-        }\n-\n-        if (ignoredAuditUsers.size() > 0) {\n-            log.info(\"Configured Users to ignore: {}\", ignoredAuditUsers);\n-        }\n-\n-        ignoredComplianceUsersForRead = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredComplianceUsersForRead.size() == 1 && \"NONE\".equals(ignoredComplianceUsersForRead.get(0))) {\n-            ignoredComplianceUsersForRead.clear();\n-        }\n-\n-        if (ignoredComplianceUsersForRead.size() > 0) {\n-            log.info(\"Configured Users to ignore for read compliance events: {}\", ignoredComplianceUsersForRead);\n-        }\n-\n-        ignoredComplianceUsersForWrite = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredComplianceUsersForWrite.size() == 1 && \"NONE\".equals(ignoredComplianceUsersForWrite.get(0))) {\n-            ignoredComplianceUsersForWrite.clear();\n-        }\n-\n-        if (ignoredComplianceUsersForWrite.size() > 0) {\n-            log.info(\"Configured Users to ignore for write compliance events: {}\", ignoredComplianceUsersForWrite);\n-        }\n-\n-        ignoreAuditRequests = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS, Collections.emptyList());\n-        if (ignoreAuditRequests.size() > 0) {\n-            log.info(\"Configured Requests to ignore: {}\", ignoreAuditRequests);\n-        }\n-\n-        this.excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+        this.auditConfig = AuditConfig.getConfig(settings);\n+\n+        log.info(\"Configured audit setting for auditing on rest layer : {}\", auditConfig.isRestApiAuditEnabled());\n+        log.info(\"Configured audit setting for auditing on transport layer : {}\", auditConfig.isTransportApiAuditEnabled());\n+        log.info(\"Configured audit setting to log request body : {}\", auditConfig.shouldLogRequestBody());\n+        log.info(\"Configured audit setting to resolve bulk requests : {}\", auditConfig.shouldResolveBulkRequests());\n+        log.info(\"Configured audit setting to resolve indices : {}\", auditConfig.shouldResolveIndices());\n+        log.info(\"Configured audit setting to exclude sensitive headers : {}\", auditConfig.shouldExcludeSensitiveHeaders());\n+        log.info(\"All configured audit settings : {}\", auditConfig.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM2NDQzMw=="}, "originalCommit": null, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ2NjEwOA==", "bodyText": "Is it redundant?", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r399466108", "createdAt": "2020-03-27T18:35:56Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "diffHunk": "@@ -118,81 +99,18 @@\n     protected AbstractAuditLog(Settings settings, final ThreadPool threadPool, final IndexNameExpressionResolver resolver, final ClusterService clusterService) {\n         super();\n         this.threadPool = threadPool;\n-\n         this.settings = settings;\n         this.resolver = resolver;\n         this.clusterService = clusterService;\n-\n-        this.opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n-\n-        resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n-\n-        restAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n-        transportAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n-\n-        final List<String> disabledRestCategoriesList = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES, DEFAULT_DISABLED_CATEGORIES);\n-\n-        if (disabledRestCategoriesList.isEmpty() || (disabledRestCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledRestCategoriesList.get(0)))) {\n-            disabledRestCategories = EnumSet.noneOf(AuditCategory.class);\n-        } else {\n-            disabledRestCategories = AuditCategory.parse(disabledRestCategoriesList);\n-        }\n-\n-        if (!disabledRestCategories.isEmpty()) {\n-            log.info(\"Configured categories on rest layer to ignore: {}\", disabledRestCategories);\n-        }\n-\n-        final List<String> disabledTransportCategoriesList = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES, DEFAULT_DISABLED_CATEGORIES);\n-\n-        if (disabledTransportCategoriesList.isEmpty() || (disabledTransportCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledTransportCategoriesList.get(0)))) {\n-            disabledTransportCategories = EnumSet.noneOf(AuditCategory.class);\n-        } else {\n-            disabledTransportCategories = AuditCategory.parse(disabledTransportCategoriesList);\n-        }\n-\n-        if (!disabledTransportCategories.isEmpty()) {\n-            log.info(\"Configured categories on transport layer to ignore: {}\", disabledTransportCategories);\n-        }\n-\n-        logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n-        resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n-\n-        ignoredAuditUsers = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredAuditUsers.size() == 1 && \"NONE\".equals(ignoredAuditUsers.get(0))) {\n-            ignoredAuditUsers.clear();\n-        }\n-\n-        if (ignoredAuditUsers.size() > 0) {\n-            log.info(\"Configured Users to ignore: {}\", ignoredAuditUsers);\n-        }\n-\n-        ignoredComplianceUsersForRead = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredComplianceUsersForRead.size() == 1 && \"NONE\".equals(ignoredComplianceUsersForRead.get(0))) {\n-            ignoredComplianceUsersForRead.clear();\n-        }\n-\n-        if (ignoredComplianceUsersForRead.size() > 0) {\n-            log.info(\"Configured Users to ignore for read compliance events: {}\", ignoredComplianceUsersForRead);\n-        }\n-\n-        ignoredComplianceUsersForWrite = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredComplianceUsersForWrite.size() == 1 && \"NONE\".equals(ignoredComplianceUsersForWrite.get(0))) {\n-            ignoredComplianceUsersForWrite.clear();\n-        }\n-\n-        if (ignoredComplianceUsersForWrite.size() > 0) {\n-            log.info(\"Configured Users to ignore for write compliance events: {}\", ignoredComplianceUsersForWrite);\n-        }\n-\n-        ignoreAuditRequests = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS, Collections.emptyList());\n-        if (ignoreAuditRequests.size() > 0) {\n-            log.info(\"Configured Requests to ignore: {}\", ignoreAuditRequests);\n-        }\n-\n-        this.excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+        this.auditConfig = AuditConfig.getConfig(settings);\n+\n+        log.info(\"Configured audit setting for auditing on rest layer : {}\", auditConfig.isRestApiAuditEnabled());\n+        log.info(\"Configured audit setting for auditing on transport layer : {}\", auditConfig.isTransportApiAuditEnabled());\n+        log.info(\"Configured audit setting to log request body : {}\", auditConfig.shouldLogRequestBody());\n+        log.info(\"Configured audit setting to resolve bulk requests : {}\", auditConfig.shouldResolveBulkRequests());\n+        log.info(\"Configured audit setting to resolve indices : {}\", auditConfig.shouldResolveIndices());\n+        log.info(\"Configured audit setting to exclude sensitive headers : {}\", auditConfig.shouldExcludeSensitiveHeaders());\n+        log.info(\"All configured audit settings : {}\", auditConfig.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM2NDQzMw=="}, "originalCommit": null, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTk1NjA2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNTo1Mzo0NVrOF83XCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxODo0MToyMVrOF89pyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM2NTg5OA==", "bodyText": "Instead of toString() I recommend delegating logging to AuditConfig class itself: public void log(Logger log).", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r399365898", "createdAt": "2020-03-27T15:53:45Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,206 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableSet;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean isRestApiAuditEnabled;\n+    private final boolean isTransportAuditEnabled;\n+    private final boolean resolveBulkRequests;\n+    private final boolean logRequestBody;\n+    private final boolean resolveIndices;\n+    private final boolean excludeSensitiveHeaders;\n+    private final Set<String> ignoredAuditUsers;\n+    private final Set<String> ignoredComplianceUsersForRead;\n+    private final Set<String> ignoredComplianceUsersForWrite;\n+    private final Set<String> ignoreAuditRequests;\n+    private final EnumSet<AuditCategory> disabledRestCategories;\n+    private final EnumSet<AuditCategory> disabledTransportCategories;\n+    private final String opendistrosecurityIndex;\n+\n+    private AuditConfig(final boolean isRestApiAuditEnabled,\n+                        final boolean isTransportAuditEnabled,\n+                        final boolean resolveBulkRequests,\n+                        final boolean logRequestBody,\n+                        final boolean resolveIndices,\n+                        final boolean excludeSensitiveHeaders,\n+                        final Set<String> ignoredAuditUsers,\n+                        final Set<String> ignoredComplianceUsersForRead,\n+                        final Set<String> ignoredComplianceUsersForWrite,\n+                        final Set<String> ignoredAuditRequests,\n+                        final EnumSet<AuditCategory> disabledRestCategories,\n+                        final EnumSet<AuditCategory> disabledTransportCategories,\n+                        final String opendistrosecurityIndex) {\n+        this.isRestApiAuditEnabled = isRestApiAuditEnabled;\n+        this.isTransportAuditEnabled = isTransportAuditEnabled;\n+        this.resolveBulkRequests = resolveBulkRequests;\n+        this.logRequestBody = logRequestBody;\n+        this.resolveIndices = resolveIndices;\n+        this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+        this.ignoredAuditUsers = ignoredAuditUsers;\n+        this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+        this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+        this.ignoreAuditRequests = ignoredAuditRequests;\n+        this.disabledRestCategories = disabledRestCategories;\n+        this.disabledTransportCategories = disabledTransportCategories;\n+        this.opendistrosecurityIndex = opendistrosecurityIndex;\n+    }\n+\n+    public static AuditConfig getConfig(Settings settings) {\n+        final boolean isRestApiAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n+        final boolean isTransportAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n+        final boolean resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n+        final boolean logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n+        final boolean resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n+        final boolean excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+        final String opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n+\n+        final EnumSet<AuditCategory> disabledRestCategories = AuditCategory.parse(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES,\n+                true));\n+\n+        final EnumSet<AuditCategory> disabledTransportCategories = AuditCategory.parse(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES,\n+                true));\n+\n+        final Set<String> ignoredAuditUsers = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoredComplianceUsersForRead = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoredComplianceUsersForWrite = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoreAuditRequests = ImmutableSet.copyOf(settings.getAsList(\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS,\n+                Collections.emptyList()));\n+\n+        return new AuditConfig(isRestApiAuditEnabled,\n+                isTransportAuditEnabled,\n+                resolveBulkRequests,\n+                logRequestBody,\n+                resolveIndices,\n+                excludeSensitiveHeaders,\n+                ignoredAuditUsers,\n+                ignoredComplianceUsersForRead,\n+                ignoredComplianceUsersForWrite,\n+                ignoreAuditRequests,\n+                disabledRestCategories,\n+                disabledTransportCategories,\n+                opendistrosecurityIndex);\n+    }\n+\n+    private static List<String> getSettingAsList(final Settings settings, final String key, final List<String> defaultList, final boolean ignoreCaseForNone) {\n+        final List<String> list = settings.getAsList(key, defaultList);\n+        if (list.size() == 1) {\n+            final String elem = list.get(0);\n+            final String none = \"NONE\";\n+\n+            if (ignoreCaseForNone && none.equalsIgnoreCase(elem)) {\n+                return Collections.emptyList();\n+            }\n+            if (!ignoreCaseForNone && none.equals(elem)) {\n+                return Collections.emptyList();\n+            }\n+        }\n+        return list;\n+    }\n+\n+    public boolean isRestApiAuditEnabled() {\n+        return isRestApiAuditEnabled;\n+    }\n+\n+    public boolean isTransportApiAuditEnabled() {\n+        return isTransportAuditEnabled;\n+    }\n+\n+    public boolean shouldResolveBulkRequests() {\n+        return resolveBulkRequests;\n+    }\n+\n+    public boolean shouldLogRequestBody() {\n+        return logRequestBody;\n+    }\n+\n+    public boolean shouldResolveIndices() {\n+        return resolveIndices;\n+    }\n+\n+    public boolean shouldExcludeSensitiveHeaders() {\n+        return excludeSensitiveHeaders;\n+    }\n+\n+    public Set<String> getIgnoredAuditUsers() {\n+        return ignoredAuditUsers;\n+    }\n+\n+    public Set<String> getIgnoredComplianceUsersForRead() {\n+        return ignoredComplianceUsersForRead;\n+    }\n+\n+    public Set<String> getIgnoredComplianceUsersForWrite() {\n+        return ignoredComplianceUsersForWrite;\n+    }\n+\n+    public Set<String> getIgnoredAuditRequests() {\n+        return ignoreAuditRequests;\n+    }\n+\n+    public EnumSet<AuditCategory> getDisabledRestCategories() {\n+        return disabledRestCategories;\n+    }\n+\n+    public EnumSet<AuditCategory> getDisabledTransportCategories() {\n+        return disabledTransportCategories;\n+    }\n+\n+    public String getOpendistrosecurityIndex() {\n+        return opendistrosecurityIndex;\n+    }\n+\n+    @Override\n+    public String toString() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQyOTM2Mg==", "bodyText": "Maybe make a new issue to add this pattern to other classes as well?\nI feel the correct way of doing this is make a new interface Loggable for log and then implement it. Also should be able to configure the log level.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r399429362", "createdAt": "2020-03-27T17:31:38Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,206 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableSet;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean isRestApiAuditEnabled;\n+    private final boolean isTransportAuditEnabled;\n+    private final boolean resolveBulkRequests;\n+    private final boolean logRequestBody;\n+    private final boolean resolveIndices;\n+    private final boolean excludeSensitiveHeaders;\n+    private final Set<String> ignoredAuditUsers;\n+    private final Set<String> ignoredComplianceUsersForRead;\n+    private final Set<String> ignoredComplianceUsersForWrite;\n+    private final Set<String> ignoreAuditRequests;\n+    private final EnumSet<AuditCategory> disabledRestCategories;\n+    private final EnumSet<AuditCategory> disabledTransportCategories;\n+    private final String opendistrosecurityIndex;\n+\n+    private AuditConfig(final boolean isRestApiAuditEnabled,\n+                        final boolean isTransportAuditEnabled,\n+                        final boolean resolveBulkRequests,\n+                        final boolean logRequestBody,\n+                        final boolean resolveIndices,\n+                        final boolean excludeSensitiveHeaders,\n+                        final Set<String> ignoredAuditUsers,\n+                        final Set<String> ignoredComplianceUsersForRead,\n+                        final Set<String> ignoredComplianceUsersForWrite,\n+                        final Set<String> ignoredAuditRequests,\n+                        final EnumSet<AuditCategory> disabledRestCategories,\n+                        final EnumSet<AuditCategory> disabledTransportCategories,\n+                        final String opendistrosecurityIndex) {\n+        this.isRestApiAuditEnabled = isRestApiAuditEnabled;\n+        this.isTransportAuditEnabled = isTransportAuditEnabled;\n+        this.resolveBulkRequests = resolveBulkRequests;\n+        this.logRequestBody = logRequestBody;\n+        this.resolveIndices = resolveIndices;\n+        this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+        this.ignoredAuditUsers = ignoredAuditUsers;\n+        this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+        this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+        this.ignoreAuditRequests = ignoredAuditRequests;\n+        this.disabledRestCategories = disabledRestCategories;\n+        this.disabledTransportCategories = disabledTransportCategories;\n+        this.opendistrosecurityIndex = opendistrosecurityIndex;\n+    }\n+\n+    public static AuditConfig getConfig(Settings settings) {\n+        final boolean isRestApiAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n+        final boolean isTransportAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n+        final boolean resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n+        final boolean logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n+        final boolean resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n+        final boolean excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+        final String opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n+\n+        final EnumSet<AuditCategory> disabledRestCategories = AuditCategory.parse(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES,\n+                true));\n+\n+        final EnumSet<AuditCategory> disabledTransportCategories = AuditCategory.parse(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES,\n+                true));\n+\n+        final Set<String> ignoredAuditUsers = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoredComplianceUsersForRead = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoredComplianceUsersForWrite = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoreAuditRequests = ImmutableSet.copyOf(settings.getAsList(\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS,\n+                Collections.emptyList()));\n+\n+        return new AuditConfig(isRestApiAuditEnabled,\n+                isTransportAuditEnabled,\n+                resolveBulkRequests,\n+                logRequestBody,\n+                resolveIndices,\n+                excludeSensitiveHeaders,\n+                ignoredAuditUsers,\n+                ignoredComplianceUsersForRead,\n+                ignoredComplianceUsersForWrite,\n+                ignoreAuditRequests,\n+                disabledRestCategories,\n+                disabledTransportCategories,\n+                opendistrosecurityIndex);\n+    }\n+\n+    private static List<String> getSettingAsList(final Settings settings, final String key, final List<String> defaultList, final boolean ignoreCaseForNone) {\n+        final List<String> list = settings.getAsList(key, defaultList);\n+        if (list.size() == 1) {\n+            final String elem = list.get(0);\n+            final String none = \"NONE\";\n+\n+            if (ignoreCaseForNone && none.equalsIgnoreCase(elem)) {\n+                return Collections.emptyList();\n+            }\n+            if (!ignoreCaseForNone && none.equals(elem)) {\n+                return Collections.emptyList();\n+            }\n+        }\n+        return list;\n+    }\n+\n+    public boolean isRestApiAuditEnabled() {\n+        return isRestApiAuditEnabled;\n+    }\n+\n+    public boolean isTransportApiAuditEnabled() {\n+        return isTransportAuditEnabled;\n+    }\n+\n+    public boolean shouldResolveBulkRequests() {\n+        return resolveBulkRequests;\n+    }\n+\n+    public boolean shouldLogRequestBody() {\n+        return logRequestBody;\n+    }\n+\n+    public boolean shouldResolveIndices() {\n+        return resolveIndices;\n+    }\n+\n+    public boolean shouldExcludeSensitiveHeaders() {\n+        return excludeSensitiveHeaders;\n+    }\n+\n+    public Set<String> getIgnoredAuditUsers() {\n+        return ignoredAuditUsers;\n+    }\n+\n+    public Set<String> getIgnoredComplianceUsersForRead() {\n+        return ignoredComplianceUsersForRead;\n+    }\n+\n+    public Set<String> getIgnoredComplianceUsersForWrite() {\n+        return ignoredComplianceUsersForWrite;\n+    }\n+\n+    public Set<String> getIgnoredAuditRequests() {\n+        return ignoreAuditRequests;\n+    }\n+\n+    public EnumSet<AuditCategory> getDisabledRestCategories() {\n+        return disabledRestCategories;\n+    }\n+\n+    public EnumSet<AuditCategory> getDisabledTransportCategories() {\n+        return disabledTransportCategories;\n+    }\n+\n+    public String getOpendistrosecurityIndex() {\n+        return opendistrosecurityIndex;\n+    }\n+\n+    @Override\n+    public String toString() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM2NTg5OA=="}, "originalCommit": null, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ2OTAwMQ==", "bodyText": "I don't see a use case for Loggable interface. I think that INFO is the most appropriate level for logging AuditConfig. For now, I would not extend the pattern to other classes.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r399469001", "createdAt": "2020-03-27T18:41:21Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,206 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableSet;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean isRestApiAuditEnabled;\n+    private final boolean isTransportAuditEnabled;\n+    private final boolean resolveBulkRequests;\n+    private final boolean logRequestBody;\n+    private final boolean resolveIndices;\n+    private final boolean excludeSensitiveHeaders;\n+    private final Set<String> ignoredAuditUsers;\n+    private final Set<String> ignoredComplianceUsersForRead;\n+    private final Set<String> ignoredComplianceUsersForWrite;\n+    private final Set<String> ignoreAuditRequests;\n+    private final EnumSet<AuditCategory> disabledRestCategories;\n+    private final EnumSet<AuditCategory> disabledTransportCategories;\n+    private final String opendistrosecurityIndex;\n+\n+    private AuditConfig(final boolean isRestApiAuditEnabled,\n+                        final boolean isTransportAuditEnabled,\n+                        final boolean resolveBulkRequests,\n+                        final boolean logRequestBody,\n+                        final boolean resolveIndices,\n+                        final boolean excludeSensitiveHeaders,\n+                        final Set<String> ignoredAuditUsers,\n+                        final Set<String> ignoredComplianceUsersForRead,\n+                        final Set<String> ignoredComplianceUsersForWrite,\n+                        final Set<String> ignoredAuditRequests,\n+                        final EnumSet<AuditCategory> disabledRestCategories,\n+                        final EnumSet<AuditCategory> disabledTransportCategories,\n+                        final String opendistrosecurityIndex) {\n+        this.isRestApiAuditEnabled = isRestApiAuditEnabled;\n+        this.isTransportAuditEnabled = isTransportAuditEnabled;\n+        this.resolveBulkRequests = resolveBulkRequests;\n+        this.logRequestBody = logRequestBody;\n+        this.resolveIndices = resolveIndices;\n+        this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+        this.ignoredAuditUsers = ignoredAuditUsers;\n+        this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+        this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+        this.ignoreAuditRequests = ignoredAuditRequests;\n+        this.disabledRestCategories = disabledRestCategories;\n+        this.disabledTransportCategories = disabledTransportCategories;\n+        this.opendistrosecurityIndex = opendistrosecurityIndex;\n+    }\n+\n+    public static AuditConfig getConfig(Settings settings) {\n+        final boolean isRestApiAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n+        final boolean isTransportAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n+        final boolean resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n+        final boolean logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n+        final boolean resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n+        final boolean excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+        final String opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n+\n+        final EnumSet<AuditCategory> disabledRestCategories = AuditCategory.parse(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES,\n+                true));\n+\n+        final EnumSet<AuditCategory> disabledTransportCategories = AuditCategory.parse(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES,\n+                true));\n+\n+        final Set<String> ignoredAuditUsers = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoredComplianceUsersForRead = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoredComplianceUsersForWrite = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoreAuditRequests = ImmutableSet.copyOf(settings.getAsList(\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS,\n+                Collections.emptyList()));\n+\n+        return new AuditConfig(isRestApiAuditEnabled,\n+                isTransportAuditEnabled,\n+                resolveBulkRequests,\n+                logRequestBody,\n+                resolveIndices,\n+                excludeSensitiveHeaders,\n+                ignoredAuditUsers,\n+                ignoredComplianceUsersForRead,\n+                ignoredComplianceUsersForWrite,\n+                ignoreAuditRequests,\n+                disabledRestCategories,\n+                disabledTransportCategories,\n+                opendistrosecurityIndex);\n+    }\n+\n+    private static List<String> getSettingAsList(final Settings settings, final String key, final List<String> defaultList, final boolean ignoreCaseForNone) {\n+        final List<String> list = settings.getAsList(key, defaultList);\n+        if (list.size() == 1) {\n+            final String elem = list.get(0);\n+            final String none = \"NONE\";\n+\n+            if (ignoreCaseForNone && none.equalsIgnoreCase(elem)) {\n+                return Collections.emptyList();\n+            }\n+            if (!ignoreCaseForNone && none.equals(elem)) {\n+                return Collections.emptyList();\n+            }\n+        }\n+        return list;\n+    }\n+\n+    public boolean isRestApiAuditEnabled() {\n+        return isRestApiAuditEnabled;\n+    }\n+\n+    public boolean isTransportApiAuditEnabled() {\n+        return isTransportAuditEnabled;\n+    }\n+\n+    public boolean shouldResolveBulkRequests() {\n+        return resolveBulkRequests;\n+    }\n+\n+    public boolean shouldLogRequestBody() {\n+        return logRequestBody;\n+    }\n+\n+    public boolean shouldResolveIndices() {\n+        return resolveIndices;\n+    }\n+\n+    public boolean shouldExcludeSensitiveHeaders() {\n+        return excludeSensitiveHeaders;\n+    }\n+\n+    public Set<String> getIgnoredAuditUsers() {\n+        return ignoredAuditUsers;\n+    }\n+\n+    public Set<String> getIgnoredComplianceUsersForRead() {\n+        return ignoredComplianceUsersForRead;\n+    }\n+\n+    public Set<String> getIgnoredComplianceUsersForWrite() {\n+        return ignoredComplianceUsersForWrite;\n+    }\n+\n+    public Set<String> getIgnoredAuditRequests() {\n+        return ignoreAuditRequests;\n+    }\n+\n+    public EnumSet<AuditCategory> getDisabledRestCategories() {\n+        return disabledRestCategories;\n+    }\n+\n+    public EnumSet<AuditCategory> getDisabledTransportCategories() {\n+        return disabledTransportCategories;\n+    }\n+\n+    public String getOpendistrosecurityIndex() {\n+        return opendistrosecurityIndex;\n+    }\n+\n+    @Override\n+    public String toString() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM2NTg5OA=="}, "originalCommit": null, "originalPosition": 189}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTk3NTE5OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfigTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNTo1ODoxNVrOF83jKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNTo1ODoxNVrOF83jKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM2OTAwMw==", "bodyText": "Please also add test for empty.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r399369003", "createdAt": "2020-03-27T15:58:15Z", "author": {"login": "vrozov"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfigTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableSet;\n+import org.elasticsearch.common.settings.Settings;\n+import org.junit.Test;\n+\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.Set;\n+\n+import static com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory.*;\n+import static org.junit.Assert.*;\n+\n+public class AuditConfigTest {\n+\n+    @Test\n+    public void testDefault() {\n+        // arrange\n+        final Set<String> defaultIgnoredUser = Collections.singleton(\"kibanaserver\");\n+        final EnumSet<AuditCategory> defaultDisabledCategories = EnumSet.of(AUTHENTICATED, GRANTED_PRIVILEGES);\n+        // act\n+        final AuditConfig auditConfig = AuditConfig.getConfig(Settings.EMPTY);\n+        // assert\n+        assertTrue(auditConfig.isRestApiAuditEnabled());\n+        assertTrue(auditConfig.isTransportApiAuditEnabled());\n+        assertTrue(auditConfig.shouldLogRequestBody());\n+        assertTrue(auditConfig.shouldResolveIndices());\n+        assertFalse(auditConfig.shouldResolveBulkRequests());\n+        assertTrue(auditConfig.shouldExcludeSensitiveHeaders());\n+        assertTrue(auditConfig.getIgnoredAuditRequests().isEmpty());\n+        assertEquals(auditConfig.getIgnoredAuditUsers(), defaultIgnoredUser);\n+        assertEquals(auditConfig.getIgnoredComplianceUsersForRead(), defaultIgnoredUser);\n+        assertEquals(auditConfig.getIgnoredComplianceUsersForWrite(), defaultIgnoredUser);\n+        assertEquals(auditConfig.getDisabledRestCategories(), defaultDisabledCategories);\n+        assertEquals(auditConfig.getDisabledTransportCategories(), defaultDisabledCategories);\n+        assertEquals(\".opendistro_security\", auditConfig.getOpendistrosecurityIndex());\n+    }\n+\n+    @Test\n+    public void testConfig() {\n+        // arrange\n+        final Settings settings = Settings.builder()\n+                .put(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, false)\n+                .put(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, false)\n+                .put(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, true)\n+                .put(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, false)\n+                .put(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, false)\n+                .put(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, false)\n+                .put(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, \"test-index\")\n+                .putList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS, \"test-request\")\n+                .putList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS, \"test-user\")\n+                .putList(ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS,\n+                        \"test-user-1\", \"test-user-2\")\n+                .putList(ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS,\n+                        \"test-user-3\", \"test-user-4\")\n+                .putList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES,\n+                        BAD_HEADERS.toString(), SSL_EXCEPTION.toString())\n+                .putList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES,\n+                        FAILED_LOGIN.toString(), MISSING_PRIVILEGES.toString())\n+                .build();\n+        // act\n+        final AuditConfig auditConfig = AuditConfig.getConfig(settings);\n+        // assert\n+        assertFalse(auditConfig.isRestApiAuditEnabled());\n+        assertFalse(auditConfig.isTransportApiAuditEnabled());\n+        assertFalse(auditConfig.shouldLogRequestBody());\n+        assertFalse(auditConfig.shouldResolveIndices());\n+        assertTrue(auditConfig.shouldResolveBulkRequests());\n+        assertFalse(auditConfig.shouldExcludeSensitiveHeaders());\n+        assertEquals(auditConfig.getIgnoredAuditUsers(), Collections.singleton(\"test-user\"));\n+        assertEquals(auditConfig.getIgnoredAuditRequests(), Collections.singleton(\"test-request\"));\n+        assertEquals(auditConfig.getIgnoredComplianceUsersForRead(), ImmutableSet.of(\"test-user-1\", \"test-user-2\"));\n+        assertEquals(auditConfig.getIgnoredComplianceUsersForWrite(), ImmutableSet.of(\"test-user-3\", \"test-user-4\"));\n+        assertEquals(auditConfig.getDisabledRestCategories(), EnumSet.of(BAD_HEADERS, SSL_EXCEPTION));\n+        assertEquals(auditConfig.getDisabledTransportCategories(), EnumSet.of(FAILED_LOGIN, MISSING_PRIVILEGES));\n+        assertEquals(\"test-index\", auditConfig.getOpendistrosecurityIndex());\n+    }\n+\n+    @Test\n+    public void testNone() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NjYxNjM1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxODo0ODoxMVrOF894Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxODo0ODoxMVrOF894Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ3MjcyMw==", "bodyText": "Please apply the same pattern: \"Auditing of request body is {}\"...", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r399472723", "createdAt": "2020-03-27T18:48:11Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "diffHunk": "@@ -118,81 +99,18 @@\n     protected AbstractAuditLog(Settings settings, final ThreadPool threadPool, final IndexNameExpressionResolver resolver, final ClusterService clusterService) {\n         super();\n         this.threadPool = threadPool;\n-\n         this.settings = settings;\n         this.resolver = resolver;\n         this.clusterService = clusterService;\n+        this.auditConfig = AuditConfig.from(settings);\n \n-        this.opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n-\n-        resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n-\n-        restAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n-        transportAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n-\n-        final List<String> disabledRestCategoriesList = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES, DEFAULT_DISABLED_CATEGORIES);\n-\n-        if (disabledRestCategoriesList.isEmpty() || (disabledRestCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledRestCategoriesList.get(0)))) {\n-            disabledRestCategories = EnumSet.noneOf(AuditCategory.class);\n-        } else {\n-            disabledRestCategories = AuditCategory.parse(disabledRestCategoriesList);\n-        }\n-\n-        if (!disabledRestCategories.isEmpty()) {\n-            log.info(\"Configured categories on rest layer to ignore: {}\", disabledRestCategories);\n-        }\n-\n-        final List<String> disabledTransportCategoriesList = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES, DEFAULT_DISABLED_CATEGORIES);\n-\n-        if (disabledTransportCategoriesList.isEmpty() || (disabledTransportCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledTransportCategoriesList.get(0)))) {\n-            disabledTransportCategories = EnumSet.noneOf(AuditCategory.class);\n-        } else {\n-            disabledTransportCategories = AuditCategory.parse(disabledTransportCategoriesList);\n-        }\n-\n-        if (!disabledTransportCategories.isEmpty()) {\n-            log.info(\"Configured categories on transport layer to ignore: {}\", disabledTransportCategories);\n-        }\n-\n-        logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n-        resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n-\n-        ignoredAuditUsers = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredAuditUsers.size() == 1 && \"NONE\".equals(ignoredAuditUsers.get(0))) {\n-            ignoredAuditUsers.clear();\n-        }\n-\n-        if (ignoredAuditUsers.size() > 0) {\n-            log.info(\"Configured Users to ignore: {}\", ignoredAuditUsers);\n-        }\n-\n-        ignoredComplianceUsersForRead = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredComplianceUsersForRead.size() == 1 && \"NONE\".equals(ignoredComplianceUsersForRead.get(0))) {\n-            ignoredComplianceUsersForRead.clear();\n-        }\n-\n-        if (ignoredComplianceUsersForRead.size() > 0) {\n-            log.info(\"Configured Users to ignore for read compliance events: {}\", ignoredComplianceUsersForRead);\n-        }\n+        log.info(\"Auditing on REST API is {}\", auditConfig.isRestApiAuditEnabled() ? \"enabled\" : \"disabled\");\n+        log.info(\"Auditing on Transport API is {}\", auditConfig.isTransportApiAuditEnabled() ? \"enabled\" : \"disabled\");\n+        log.info(\"Configured audit setting to log request body : {}\", auditConfig.shouldLogRequestBody());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NjY1MDEzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxODo1ODoxNFrOF8-Mrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxOToyMDowMVrOF8-45A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ3NzkzNQ==", "bodyText": "Consider adding excluded REST API audit categories here in case auditConfig.isRestApiAuditEnabled() is true. The same for Transport API. I don't see them being logged.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r399477935", "createdAt": "2020-03-27T18:58:14Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "diffHunk": "@@ -118,81 +99,18 @@\n     protected AbstractAuditLog(Settings settings, final ThreadPool threadPool, final IndexNameExpressionResolver resolver, final ClusterService clusterService) {\n         super();\n         this.threadPool = threadPool;\n-\n         this.settings = settings;\n         this.resolver = resolver;\n         this.clusterService = clusterService;\n+        this.auditConfig = AuditConfig.from(settings);\n \n-        this.opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n-\n-        resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n-\n-        restAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n-        transportAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n-\n-        final List<String> disabledRestCategoriesList = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES, DEFAULT_DISABLED_CATEGORIES);\n-\n-        if (disabledRestCategoriesList.isEmpty() || (disabledRestCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledRestCategoriesList.get(0)))) {\n-            disabledRestCategories = EnumSet.noneOf(AuditCategory.class);\n-        } else {\n-            disabledRestCategories = AuditCategory.parse(disabledRestCategoriesList);\n-        }\n-\n-        if (!disabledRestCategories.isEmpty()) {\n-            log.info(\"Configured categories on rest layer to ignore: {}\", disabledRestCategories);\n-        }\n-\n-        final List<String> disabledTransportCategoriesList = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES, DEFAULT_DISABLED_CATEGORIES);\n-\n-        if (disabledTransportCategoriesList.isEmpty() || (disabledTransportCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledTransportCategoriesList.get(0)))) {\n-            disabledTransportCategories = EnumSet.noneOf(AuditCategory.class);\n-        } else {\n-            disabledTransportCategories = AuditCategory.parse(disabledTransportCategoriesList);\n-        }\n-\n-        if (!disabledTransportCategories.isEmpty()) {\n-            log.info(\"Configured categories on transport layer to ignore: {}\", disabledTransportCategories);\n-        }\n-\n-        logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n-        resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n-\n-        ignoredAuditUsers = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredAuditUsers.size() == 1 && \"NONE\".equals(ignoredAuditUsers.get(0))) {\n-            ignoredAuditUsers.clear();\n-        }\n-\n-        if (ignoredAuditUsers.size() > 0) {\n-            log.info(\"Configured Users to ignore: {}\", ignoredAuditUsers);\n-        }\n-\n-        ignoredComplianceUsersForRead = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredComplianceUsersForRead.size() == 1 && \"NONE\".equals(ignoredComplianceUsersForRead.get(0))) {\n-            ignoredComplianceUsersForRead.clear();\n-        }\n-\n-        if (ignoredComplianceUsersForRead.size() > 0) {\n-            log.info(\"Configured Users to ignore for read compliance events: {}\", ignoredComplianceUsersForRead);\n-        }\n+        log.info(\"Auditing on REST API is {}\", auditConfig.isRestApiAuditEnabled() ? \"enabled\" : \"disabled\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ4MDM5Nw==", "bodyText": "This was supposed to be done via bulk logging of toString()", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r399480397", "createdAt": "2020-03-27T19:03:06Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "diffHunk": "@@ -118,81 +99,18 @@\n     protected AbstractAuditLog(Settings settings, final ThreadPool threadPool, final IndexNameExpressionResolver resolver, final ClusterService clusterService) {\n         super();\n         this.threadPool = threadPool;\n-\n         this.settings = settings;\n         this.resolver = resolver;\n         this.clusterService = clusterService;\n+        this.auditConfig = AuditConfig.from(settings);\n \n-        this.opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n-\n-        resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n-\n-        restAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n-        transportAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n-\n-        final List<String> disabledRestCategoriesList = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES, DEFAULT_DISABLED_CATEGORIES);\n-\n-        if (disabledRestCategoriesList.isEmpty() || (disabledRestCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledRestCategoriesList.get(0)))) {\n-            disabledRestCategories = EnumSet.noneOf(AuditCategory.class);\n-        } else {\n-            disabledRestCategories = AuditCategory.parse(disabledRestCategoriesList);\n-        }\n-\n-        if (!disabledRestCategories.isEmpty()) {\n-            log.info(\"Configured categories on rest layer to ignore: {}\", disabledRestCategories);\n-        }\n-\n-        final List<String> disabledTransportCategoriesList = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES, DEFAULT_DISABLED_CATEGORIES);\n-\n-        if (disabledTransportCategoriesList.isEmpty() || (disabledTransportCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledTransportCategoriesList.get(0)))) {\n-            disabledTransportCategories = EnumSet.noneOf(AuditCategory.class);\n-        } else {\n-            disabledTransportCategories = AuditCategory.parse(disabledTransportCategoriesList);\n-        }\n-\n-        if (!disabledTransportCategories.isEmpty()) {\n-            log.info(\"Configured categories on transport layer to ignore: {}\", disabledTransportCategories);\n-        }\n-\n-        logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n-        resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n-\n-        ignoredAuditUsers = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredAuditUsers.size() == 1 && \"NONE\".equals(ignoredAuditUsers.get(0))) {\n-            ignoredAuditUsers.clear();\n-        }\n-\n-        if (ignoredAuditUsers.size() > 0) {\n-            log.info(\"Configured Users to ignore: {}\", ignoredAuditUsers);\n-        }\n-\n-        ignoredComplianceUsersForRead = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredComplianceUsersForRead.size() == 1 && \"NONE\".equals(ignoredComplianceUsersForRead.get(0))) {\n-            ignoredComplianceUsersForRead.clear();\n-        }\n-\n-        if (ignoredComplianceUsersForRead.size() > 0) {\n-            log.info(\"Configured Users to ignore for read compliance events: {}\", ignoredComplianceUsersForRead);\n-        }\n+        log.info(\"Auditing on REST API is {}\", auditConfig.isRestApiAuditEnabled() ? \"enabled\" : \"disabled\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ3NzkzNQ=="}, "originalCommit": null, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ4OTI1Mg==", "bodyText": "I will log every param.\nEven is rest or transport api is disabled some categories are excluded. https://github.com/opendistro-for-elasticsearch/security/blob/master/src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java#L718", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r399489252", "createdAt": "2020-03-27T19:20:01Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "diffHunk": "@@ -118,81 +99,18 @@\n     protected AbstractAuditLog(Settings settings, final ThreadPool threadPool, final IndexNameExpressionResolver resolver, final ClusterService clusterService) {\n         super();\n         this.threadPool = threadPool;\n-\n         this.settings = settings;\n         this.resolver = resolver;\n         this.clusterService = clusterService;\n+        this.auditConfig = AuditConfig.from(settings);\n \n-        this.opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n-\n-        resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n-\n-        restAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n-        transportAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n-\n-        final List<String> disabledRestCategoriesList = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES, DEFAULT_DISABLED_CATEGORIES);\n-\n-        if (disabledRestCategoriesList.isEmpty() || (disabledRestCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledRestCategoriesList.get(0)))) {\n-            disabledRestCategories = EnumSet.noneOf(AuditCategory.class);\n-        } else {\n-            disabledRestCategories = AuditCategory.parse(disabledRestCategoriesList);\n-        }\n-\n-        if (!disabledRestCategories.isEmpty()) {\n-            log.info(\"Configured categories on rest layer to ignore: {}\", disabledRestCategories);\n-        }\n-\n-        final List<String> disabledTransportCategoriesList = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES, DEFAULT_DISABLED_CATEGORIES);\n-\n-        if (disabledTransportCategoriesList.isEmpty() || (disabledTransportCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledTransportCategoriesList.get(0)))) {\n-            disabledTransportCategories = EnumSet.noneOf(AuditCategory.class);\n-        } else {\n-            disabledTransportCategories = AuditCategory.parse(disabledTransportCategoriesList);\n-        }\n-\n-        if (!disabledTransportCategories.isEmpty()) {\n-            log.info(\"Configured categories on transport layer to ignore: {}\", disabledTransportCategories);\n-        }\n-\n-        logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n-        resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n-\n-        ignoredAuditUsers = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredAuditUsers.size() == 1 && \"NONE\".equals(ignoredAuditUsers.get(0))) {\n-            ignoredAuditUsers.clear();\n-        }\n-\n-        if (ignoredAuditUsers.size() > 0) {\n-            log.info(\"Configured Users to ignore: {}\", ignoredAuditUsers);\n-        }\n-\n-        ignoredComplianceUsersForRead = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredComplianceUsersForRead.size() == 1 && \"NONE\".equals(ignoredComplianceUsersForRead.get(0))) {\n-            ignoredComplianceUsersForRead.clear();\n-        }\n-\n-        if (ignoredComplianceUsersForRead.size() > 0) {\n-            log.info(\"Configured Users to ignore for read compliance events: {}\", ignoredComplianceUsersForRead);\n-        }\n+        log.info(\"Auditing on REST API is {}\", auditConfig.isRestApiAuditEnabled() ? \"enabled\" : \"disabled\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ3NzkzNQ=="}, "originalCommit": null, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3Njk1NjM4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMDo0MDo0MFrOF9BLJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMDo0MDo0MFrOF9BLJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUyNjY5Mg==", "bodyText": "nit: \"Bulk requests resolution is {} (enabled/disabled) during request auditing.\"", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r399526692", "createdAt": "2020-03-27T20:40:40Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean isRestApiAuditEnabled;\n+    private final boolean isTransportApiAuditEnabled;\n+    private final boolean resolveBulkRequests;\n+    private final boolean logRequestBody;\n+    private final boolean resolveIndices;\n+    private final boolean excludeSensitiveHeaders;\n+    private final Set<String> ignoredAuditUsers;\n+    private final Set<String> ignoredComplianceUsersForRead;\n+    private final Set<String> ignoredComplianceUsersForWrite;\n+    private final Set<String> ignoreAuditRequests;\n+    private final EnumSet<AuditCategory> disabledRestCategories;\n+    private final EnumSet<AuditCategory> disabledTransportCategories;\n+    private final String opendistrosecurityIndex;\n+\n+    private AuditConfig(final boolean isRestApiAuditEnabled,\n+                        final boolean isTransportApiAuditEnabled,\n+                        final boolean resolveBulkRequests,\n+                        final boolean logRequestBody,\n+                        final boolean resolveIndices,\n+                        final boolean excludeSensitiveHeaders,\n+                        final Set<String> ignoredAuditUsers,\n+                        final Set<String> ignoredComplianceUsersForRead,\n+                        final Set<String> ignoredComplianceUsersForWrite,\n+                        final Set<String> ignoredAuditRequests,\n+                        final EnumSet<AuditCategory> disabledRestCategories,\n+                        final EnumSet<AuditCategory> disabledTransportCategories,\n+                        final String opendistrosecurityIndex) {\n+        this.isRestApiAuditEnabled = isRestApiAuditEnabled;\n+        this.isTransportApiAuditEnabled = isTransportApiAuditEnabled;\n+        this.resolveBulkRequests = resolveBulkRequests;\n+        this.logRequestBody = logRequestBody;\n+        this.resolveIndices = resolveIndices;\n+        this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+        this.ignoredAuditUsers = ignoredAuditUsers;\n+        this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+        this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+        this.ignoreAuditRequests = ignoredAuditRequests;\n+        this.disabledRestCategories = disabledRestCategories;\n+        this.disabledTransportCategories = disabledTransportCategories;\n+        this.opendistrosecurityIndex = opendistrosecurityIndex;\n+    }\n+\n+    public static AuditConfig from(Settings settings) {\n+        final boolean isRestApiAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n+        final boolean isTransportAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n+        final boolean resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n+        final boolean logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n+        final boolean resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n+        final boolean excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+        final String opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n+\n+        final EnumSet<AuditCategory> disabledRestCategories = AuditCategory.parse(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES,\n+                true));\n+\n+        final EnumSet<AuditCategory> disabledTransportCategories = AuditCategory.parse(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES,\n+                true));\n+\n+        final Set<String> ignoredAuditUsers = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoredComplianceUsersForRead = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoredComplianceUsersForWrite = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoreAuditRequests = ImmutableSet.copyOf(settings.getAsList(\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS,\n+                Collections.emptyList()));\n+\n+        return new AuditConfig(isRestApiAuditEnabled,\n+                isTransportAuditEnabled,\n+                resolveBulkRequests,\n+                logRequestBody,\n+                resolveIndices,\n+                excludeSensitiveHeaders,\n+                ignoredAuditUsers,\n+                ignoredComplianceUsersForRead,\n+                ignoredComplianceUsersForWrite,\n+                ignoreAuditRequests,\n+                disabledRestCategories,\n+                disabledTransportCategories,\n+                opendistrosecurityIndex);\n+    }\n+\n+    private static List<String> getSettingAsList(final Settings settings, final String key, final List<String> defaultList, final boolean ignoreCaseForNone) {\n+        final List<String> list = settings.getAsList(key, defaultList);\n+        if (list.size() == 1 && \"NONE\".equals(ignoreCaseForNone? list.get(0).toUpperCase() : list.get(0))) {\n+            return Collections.emptyList();\n+        }\n+        return list;\n+    }\n+\n+    public boolean isRestApiAuditEnabled() {\n+        return isRestApiAuditEnabled;\n+    }\n+\n+    public boolean isTransportApiAuditEnabled() {\n+        return isTransportApiAuditEnabled;\n+    }\n+\n+    public boolean shouldResolveBulkRequests() {\n+        return resolveBulkRequests;\n+    }\n+\n+    public boolean shouldLogRequestBody() {\n+        return logRequestBody;\n+    }\n+\n+    public boolean shouldResolveIndices() {\n+        return resolveIndices;\n+    }\n+\n+    public boolean shouldExcludeSensitiveHeaders() {\n+        return excludeSensitiveHeaders;\n+    }\n+\n+    public Set<String> getIgnoredAuditUsers() {\n+        return ignoredAuditUsers;\n+    }\n+\n+    public Set<String> getIgnoredComplianceUsersForRead() {\n+        return ignoredComplianceUsersForRead;\n+    }\n+\n+    public Set<String> getIgnoredComplianceUsersForWrite() {\n+        return ignoredComplianceUsersForWrite;\n+    }\n+\n+    public Set<String> getIgnoredAuditRequests() {\n+        return ignoreAuditRequests;\n+    }\n+\n+    public EnumSet<AuditCategory> getDisabledRestCategories() {\n+        return disabledRestCategories;\n+    }\n+\n+    public EnumSet<AuditCategory> getDisabledTransportCategories() {\n+        return disabledTransportCategories;\n+    }\n+\n+    public String getOpendistrosecurityIndex() {\n+        return opendistrosecurityIndex;\n+    }\n+\n+    public void log(Logger logger) {\n+        logger.info(\"Auditing on REST API is {}\", isRestApiAuditEnabled ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing on Transport API is {}\", isTransportApiAuditEnabled ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing of request body is {}\", logRequestBody ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing should {} resolve bulk requests\", resolveBulkRequests ? \"\" : \"not\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 185}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3Njk2Njc3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMDo0NDoyNFrOF9BR0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMDo0NDoyNFrOF9BR0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUyODQwMw==", "bodyText": "nit: \"Sensitive headers auditing is {} (enabled/disabled).\"", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r399528403", "createdAt": "2020-03-27T20:44:24Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean isRestApiAuditEnabled;\n+    private final boolean isTransportApiAuditEnabled;\n+    private final boolean resolveBulkRequests;\n+    private final boolean logRequestBody;\n+    private final boolean resolveIndices;\n+    private final boolean excludeSensitiveHeaders;\n+    private final Set<String> ignoredAuditUsers;\n+    private final Set<String> ignoredComplianceUsersForRead;\n+    private final Set<String> ignoredComplianceUsersForWrite;\n+    private final Set<String> ignoreAuditRequests;\n+    private final EnumSet<AuditCategory> disabledRestCategories;\n+    private final EnumSet<AuditCategory> disabledTransportCategories;\n+    private final String opendistrosecurityIndex;\n+\n+    private AuditConfig(final boolean isRestApiAuditEnabled,\n+                        final boolean isTransportApiAuditEnabled,\n+                        final boolean resolveBulkRequests,\n+                        final boolean logRequestBody,\n+                        final boolean resolveIndices,\n+                        final boolean excludeSensitiveHeaders,\n+                        final Set<String> ignoredAuditUsers,\n+                        final Set<String> ignoredComplianceUsersForRead,\n+                        final Set<String> ignoredComplianceUsersForWrite,\n+                        final Set<String> ignoredAuditRequests,\n+                        final EnumSet<AuditCategory> disabledRestCategories,\n+                        final EnumSet<AuditCategory> disabledTransportCategories,\n+                        final String opendistrosecurityIndex) {\n+        this.isRestApiAuditEnabled = isRestApiAuditEnabled;\n+        this.isTransportApiAuditEnabled = isTransportApiAuditEnabled;\n+        this.resolveBulkRequests = resolveBulkRequests;\n+        this.logRequestBody = logRequestBody;\n+        this.resolveIndices = resolveIndices;\n+        this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+        this.ignoredAuditUsers = ignoredAuditUsers;\n+        this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+        this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+        this.ignoreAuditRequests = ignoredAuditRequests;\n+        this.disabledRestCategories = disabledRestCategories;\n+        this.disabledTransportCategories = disabledTransportCategories;\n+        this.opendistrosecurityIndex = opendistrosecurityIndex;\n+    }\n+\n+    public static AuditConfig from(Settings settings) {\n+        final boolean isRestApiAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n+        final boolean isTransportAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n+        final boolean resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n+        final boolean logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n+        final boolean resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n+        final boolean excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+        final String opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n+\n+        final EnumSet<AuditCategory> disabledRestCategories = AuditCategory.parse(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES,\n+                true));\n+\n+        final EnumSet<AuditCategory> disabledTransportCategories = AuditCategory.parse(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES,\n+                true));\n+\n+        final Set<String> ignoredAuditUsers = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoredComplianceUsersForRead = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoredComplianceUsersForWrite = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoreAuditRequests = ImmutableSet.copyOf(settings.getAsList(\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS,\n+                Collections.emptyList()));\n+\n+        return new AuditConfig(isRestApiAuditEnabled,\n+                isTransportAuditEnabled,\n+                resolveBulkRequests,\n+                logRequestBody,\n+                resolveIndices,\n+                excludeSensitiveHeaders,\n+                ignoredAuditUsers,\n+                ignoredComplianceUsersForRead,\n+                ignoredComplianceUsersForWrite,\n+                ignoreAuditRequests,\n+                disabledRestCategories,\n+                disabledTransportCategories,\n+                opendistrosecurityIndex);\n+    }\n+\n+    private static List<String> getSettingAsList(final Settings settings, final String key, final List<String> defaultList, final boolean ignoreCaseForNone) {\n+        final List<String> list = settings.getAsList(key, defaultList);\n+        if (list.size() == 1 && \"NONE\".equals(ignoreCaseForNone? list.get(0).toUpperCase() : list.get(0))) {\n+            return Collections.emptyList();\n+        }\n+        return list;\n+    }\n+\n+    public boolean isRestApiAuditEnabled() {\n+        return isRestApiAuditEnabled;\n+    }\n+\n+    public boolean isTransportApiAuditEnabled() {\n+        return isTransportApiAuditEnabled;\n+    }\n+\n+    public boolean shouldResolveBulkRequests() {\n+        return resolveBulkRequests;\n+    }\n+\n+    public boolean shouldLogRequestBody() {\n+        return logRequestBody;\n+    }\n+\n+    public boolean shouldResolveIndices() {\n+        return resolveIndices;\n+    }\n+\n+    public boolean shouldExcludeSensitiveHeaders() {\n+        return excludeSensitiveHeaders;\n+    }\n+\n+    public Set<String> getIgnoredAuditUsers() {\n+        return ignoredAuditUsers;\n+    }\n+\n+    public Set<String> getIgnoredComplianceUsersForRead() {\n+        return ignoredComplianceUsersForRead;\n+    }\n+\n+    public Set<String> getIgnoredComplianceUsersForWrite() {\n+        return ignoredComplianceUsersForWrite;\n+    }\n+\n+    public Set<String> getIgnoredAuditRequests() {\n+        return ignoreAuditRequests;\n+    }\n+\n+    public EnumSet<AuditCategory> getDisabledRestCategories() {\n+        return disabledRestCategories;\n+    }\n+\n+    public EnumSet<AuditCategory> getDisabledTransportCategories() {\n+        return disabledTransportCategories;\n+    }\n+\n+    public String getOpendistrosecurityIndex() {\n+        return opendistrosecurityIndex;\n+    }\n+\n+    public void log(Logger logger) {\n+        logger.info(\"Auditing on REST API is {}\", isRestApiAuditEnabled ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing on Transport API is {}\", isTransportApiAuditEnabled ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing of request body is {}\", logRequestBody ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing should {} resolve bulk requests\", resolveBulkRequests ? \"\" : \"not\");\n+        logger.info(\"Auditing should {} resolve indices\", resolveBulkRequests ? \"\" : \"not\");\n+        logger.info(\"Auditing should {} exclude sensitive headers\", excludeSensitiveHeaders ? \"\" : \"not\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 187}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3Njk2OTkzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMDo0NTozNVrOF9BT7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMDo0NTozNVrOF9BT7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUyODk0Mw==", "bodyText": "nit: \"Auditing requests from {} users is disabled.\" (check if it is not empty?)", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r399528943", "createdAt": "2020-03-27T20:45:35Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean isRestApiAuditEnabled;\n+    private final boolean isTransportApiAuditEnabled;\n+    private final boolean resolveBulkRequests;\n+    private final boolean logRequestBody;\n+    private final boolean resolveIndices;\n+    private final boolean excludeSensitiveHeaders;\n+    private final Set<String> ignoredAuditUsers;\n+    private final Set<String> ignoredComplianceUsersForRead;\n+    private final Set<String> ignoredComplianceUsersForWrite;\n+    private final Set<String> ignoreAuditRequests;\n+    private final EnumSet<AuditCategory> disabledRestCategories;\n+    private final EnumSet<AuditCategory> disabledTransportCategories;\n+    private final String opendistrosecurityIndex;\n+\n+    private AuditConfig(final boolean isRestApiAuditEnabled,\n+                        final boolean isTransportApiAuditEnabled,\n+                        final boolean resolveBulkRequests,\n+                        final boolean logRequestBody,\n+                        final boolean resolveIndices,\n+                        final boolean excludeSensitiveHeaders,\n+                        final Set<String> ignoredAuditUsers,\n+                        final Set<String> ignoredComplianceUsersForRead,\n+                        final Set<String> ignoredComplianceUsersForWrite,\n+                        final Set<String> ignoredAuditRequests,\n+                        final EnumSet<AuditCategory> disabledRestCategories,\n+                        final EnumSet<AuditCategory> disabledTransportCategories,\n+                        final String opendistrosecurityIndex) {\n+        this.isRestApiAuditEnabled = isRestApiAuditEnabled;\n+        this.isTransportApiAuditEnabled = isTransportApiAuditEnabled;\n+        this.resolveBulkRequests = resolveBulkRequests;\n+        this.logRequestBody = logRequestBody;\n+        this.resolveIndices = resolveIndices;\n+        this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+        this.ignoredAuditUsers = ignoredAuditUsers;\n+        this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+        this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+        this.ignoreAuditRequests = ignoredAuditRequests;\n+        this.disabledRestCategories = disabledRestCategories;\n+        this.disabledTransportCategories = disabledTransportCategories;\n+        this.opendistrosecurityIndex = opendistrosecurityIndex;\n+    }\n+\n+    public static AuditConfig from(Settings settings) {\n+        final boolean isRestApiAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n+        final boolean isTransportAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n+        final boolean resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n+        final boolean logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n+        final boolean resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n+        final boolean excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+        final String opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n+\n+        final EnumSet<AuditCategory> disabledRestCategories = AuditCategory.parse(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES,\n+                true));\n+\n+        final EnumSet<AuditCategory> disabledTransportCategories = AuditCategory.parse(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES,\n+                true));\n+\n+        final Set<String> ignoredAuditUsers = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoredComplianceUsersForRead = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoredComplianceUsersForWrite = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoreAuditRequests = ImmutableSet.copyOf(settings.getAsList(\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS,\n+                Collections.emptyList()));\n+\n+        return new AuditConfig(isRestApiAuditEnabled,\n+                isTransportAuditEnabled,\n+                resolveBulkRequests,\n+                logRequestBody,\n+                resolveIndices,\n+                excludeSensitiveHeaders,\n+                ignoredAuditUsers,\n+                ignoredComplianceUsersForRead,\n+                ignoredComplianceUsersForWrite,\n+                ignoreAuditRequests,\n+                disabledRestCategories,\n+                disabledTransportCategories,\n+                opendistrosecurityIndex);\n+    }\n+\n+    private static List<String> getSettingAsList(final Settings settings, final String key, final List<String> defaultList, final boolean ignoreCaseForNone) {\n+        final List<String> list = settings.getAsList(key, defaultList);\n+        if (list.size() == 1 && \"NONE\".equals(ignoreCaseForNone? list.get(0).toUpperCase() : list.get(0))) {\n+            return Collections.emptyList();\n+        }\n+        return list;\n+    }\n+\n+    public boolean isRestApiAuditEnabled() {\n+        return isRestApiAuditEnabled;\n+    }\n+\n+    public boolean isTransportApiAuditEnabled() {\n+        return isTransportApiAuditEnabled;\n+    }\n+\n+    public boolean shouldResolveBulkRequests() {\n+        return resolveBulkRequests;\n+    }\n+\n+    public boolean shouldLogRequestBody() {\n+        return logRequestBody;\n+    }\n+\n+    public boolean shouldResolveIndices() {\n+        return resolveIndices;\n+    }\n+\n+    public boolean shouldExcludeSensitiveHeaders() {\n+        return excludeSensitiveHeaders;\n+    }\n+\n+    public Set<String> getIgnoredAuditUsers() {\n+        return ignoredAuditUsers;\n+    }\n+\n+    public Set<String> getIgnoredComplianceUsersForRead() {\n+        return ignoredComplianceUsersForRead;\n+    }\n+\n+    public Set<String> getIgnoredComplianceUsersForWrite() {\n+        return ignoredComplianceUsersForWrite;\n+    }\n+\n+    public Set<String> getIgnoredAuditRequests() {\n+        return ignoreAuditRequests;\n+    }\n+\n+    public EnumSet<AuditCategory> getDisabledRestCategories() {\n+        return disabledRestCategories;\n+    }\n+\n+    public EnumSet<AuditCategory> getDisabledTransportCategories() {\n+        return disabledTransportCategories;\n+    }\n+\n+    public String getOpendistrosecurityIndex() {\n+        return opendistrosecurityIndex;\n+    }\n+\n+    public void log(Logger logger) {\n+        logger.info(\"Auditing on REST API is {}\", isRestApiAuditEnabled ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing on Transport API is {}\", isTransportApiAuditEnabled ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing of request body is {}\", logRequestBody ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing should {} resolve bulk requests\", resolveBulkRequests ? \"\" : \"not\");\n+        logger.info(\"Auditing should {} resolve indices\", resolveBulkRequests ? \"\" : \"not\");\n+        logger.info(\"Auditing should {} exclude sensitive headers\", excludeSensitiveHeaders ? \"\" : \"not\");\n+        logger.info(\"Auditing will ignore users {}\", ignoredAuditUsers);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 188}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3Njk3NjYzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMDo0ODoxMlrOF9BYIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMDo0ODoxMlrOF9BYIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUzMDAxOA==", "bodyText": "nit: \"Compliance read operation requests auditing from {} users is disabled.\" (check if it is not empty)", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r399530018", "createdAt": "2020-03-27T20:48:12Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean isRestApiAuditEnabled;\n+    private final boolean isTransportApiAuditEnabled;\n+    private final boolean resolveBulkRequests;\n+    private final boolean logRequestBody;\n+    private final boolean resolveIndices;\n+    private final boolean excludeSensitiveHeaders;\n+    private final Set<String> ignoredAuditUsers;\n+    private final Set<String> ignoredComplianceUsersForRead;\n+    private final Set<String> ignoredComplianceUsersForWrite;\n+    private final Set<String> ignoreAuditRequests;\n+    private final EnumSet<AuditCategory> disabledRestCategories;\n+    private final EnumSet<AuditCategory> disabledTransportCategories;\n+    private final String opendistrosecurityIndex;\n+\n+    private AuditConfig(final boolean isRestApiAuditEnabled,\n+                        final boolean isTransportApiAuditEnabled,\n+                        final boolean resolveBulkRequests,\n+                        final boolean logRequestBody,\n+                        final boolean resolveIndices,\n+                        final boolean excludeSensitiveHeaders,\n+                        final Set<String> ignoredAuditUsers,\n+                        final Set<String> ignoredComplianceUsersForRead,\n+                        final Set<String> ignoredComplianceUsersForWrite,\n+                        final Set<String> ignoredAuditRequests,\n+                        final EnumSet<AuditCategory> disabledRestCategories,\n+                        final EnumSet<AuditCategory> disabledTransportCategories,\n+                        final String opendistrosecurityIndex) {\n+        this.isRestApiAuditEnabled = isRestApiAuditEnabled;\n+        this.isTransportApiAuditEnabled = isTransportApiAuditEnabled;\n+        this.resolveBulkRequests = resolveBulkRequests;\n+        this.logRequestBody = logRequestBody;\n+        this.resolveIndices = resolveIndices;\n+        this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+        this.ignoredAuditUsers = ignoredAuditUsers;\n+        this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+        this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+        this.ignoreAuditRequests = ignoredAuditRequests;\n+        this.disabledRestCategories = disabledRestCategories;\n+        this.disabledTransportCategories = disabledTransportCategories;\n+        this.opendistrosecurityIndex = opendistrosecurityIndex;\n+    }\n+\n+    public static AuditConfig from(Settings settings) {\n+        final boolean isRestApiAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n+        final boolean isTransportAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n+        final boolean resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n+        final boolean logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n+        final boolean resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n+        final boolean excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+        final String opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n+\n+        final EnumSet<AuditCategory> disabledRestCategories = AuditCategory.parse(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES,\n+                true));\n+\n+        final EnumSet<AuditCategory> disabledTransportCategories = AuditCategory.parse(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES,\n+                true));\n+\n+        final Set<String> ignoredAuditUsers = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoredComplianceUsersForRead = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoredComplianceUsersForWrite = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoreAuditRequests = ImmutableSet.copyOf(settings.getAsList(\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS,\n+                Collections.emptyList()));\n+\n+        return new AuditConfig(isRestApiAuditEnabled,\n+                isTransportAuditEnabled,\n+                resolveBulkRequests,\n+                logRequestBody,\n+                resolveIndices,\n+                excludeSensitiveHeaders,\n+                ignoredAuditUsers,\n+                ignoredComplianceUsersForRead,\n+                ignoredComplianceUsersForWrite,\n+                ignoreAuditRequests,\n+                disabledRestCategories,\n+                disabledTransportCategories,\n+                opendistrosecurityIndex);\n+    }\n+\n+    private static List<String> getSettingAsList(final Settings settings, final String key, final List<String> defaultList, final boolean ignoreCaseForNone) {\n+        final List<String> list = settings.getAsList(key, defaultList);\n+        if (list.size() == 1 && \"NONE\".equals(ignoreCaseForNone? list.get(0).toUpperCase() : list.get(0))) {\n+            return Collections.emptyList();\n+        }\n+        return list;\n+    }\n+\n+    public boolean isRestApiAuditEnabled() {\n+        return isRestApiAuditEnabled;\n+    }\n+\n+    public boolean isTransportApiAuditEnabled() {\n+        return isTransportApiAuditEnabled;\n+    }\n+\n+    public boolean shouldResolveBulkRequests() {\n+        return resolveBulkRequests;\n+    }\n+\n+    public boolean shouldLogRequestBody() {\n+        return logRequestBody;\n+    }\n+\n+    public boolean shouldResolveIndices() {\n+        return resolveIndices;\n+    }\n+\n+    public boolean shouldExcludeSensitiveHeaders() {\n+        return excludeSensitiveHeaders;\n+    }\n+\n+    public Set<String> getIgnoredAuditUsers() {\n+        return ignoredAuditUsers;\n+    }\n+\n+    public Set<String> getIgnoredComplianceUsersForRead() {\n+        return ignoredComplianceUsersForRead;\n+    }\n+\n+    public Set<String> getIgnoredComplianceUsersForWrite() {\n+        return ignoredComplianceUsersForWrite;\n+    }\n+\n+    public Set<String> getIgnoredAuditRequests() {\n+        return ignoreAuditRequests;\n+    }\n+\n+    public EnumSet<AuditCategory> getDisabledRestCategories() {\n+        return disabledRestCategories;\n+    }\n+\n+    public EnumSet<AuditCategory> getDisabledTransportCategories() {\n+        return disabledTransportCategories;\n+    }\n+\n+    public String getOpendistrosecurityIndex() {\n+        return opendistrosecurityIndex;\n+    }\n+\n+    public void log(Logger logger) {\n+        logger.info(\"Auditing on REST API is {}\", isRestApiAuditEnabled ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing on Transport API is {}\", isTransportApiAuditEnabled ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing of request body is {}\", logRequestBody ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing should {} resolve bulk requests\", resolveBulkRequests ? \"\" : \"not\");\n+        logger.info(\"Auditing should {} resolve indices\", resolveBulkRequests ? \"\" : \"not\");\n+        logger.info(\"Auditing should {} exclude sensitive headers\", excludeSensitiveHeaders ? \"\" : \"not\");\n+        logger.info(\"Auditing will ignore users {}\", ignoredAuditUsers);\n+        logger.info(\"Auditing of compliance read operation will ignore users {}\", ignoredComplianceUsersForRead);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 189}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3Njk3ODI0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMDo0ODo0M1rOF9BZGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMDo0ODo0M1rOF9BZGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUzMDI2Ng==", "bodyText": "nit: Same as read.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r399530266", "createdAt": "2020-03-27T20:48:43Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean isRestApiAuditEnabled;\n+    private final boolean isTransportApiAuditEnabled;\n+    private final boolean resolveBulkRequests;\n+    private final boolean logRequestBody;\n+    private final boolean resolveIndices;\n+    private final boolean excludeSensitiveHeaders;\n+    private final Set<String> ignoredAuditUsers;\n+    private final Set<String> ignoredComplianceUsersForRead;\n+    private final Set<String> ignoredComplianceUsersForWrite;\n+    private final Set<String> ignoreAuditRequests;\n+    private final EnumSet<AuditCategory> disabledRestCategories;\n+    private final EnumSet<AuditCategory> disabledTransportCategories;\n+    private final String opendistrosecurityIndex;\n+\n+    private AuditConfig(final boolean isRestApiAuditEnabled,\n+                        final boolean isTransportApiAuditEnabled,\n+                        final boolean resolveBulkRequests,\n+                        final boolean logRequestBody,\n+                        final boolean resolveIndices,\n+                        final boolean excludeSensitiveHeaders,\n+                        final Set<String> ignoredAuditUsers,\n+                        final Set<String> ignoredComplianceUsersForRead,\n+                        final Set<String> ignoredComplianceUsersForWrite,\n+                        final Set<String> ignoredAuditRequests,\n+                        final EnumSet<AuditCategory> disabledRestCategories,\n+                        final EnumSet<AuditCategory> disabledTransportCategories,\n+                        final String opendistrosecurityIndex) {\n+        this.isRestApiAuditEnabled = isRestApiAuditEnabled;\n+        this.isTransportApiAuditEnabled = isTransportApiAuditEnabled;\n+        this.resolveBulkRequests = resolveBulkRequests;\n+        this.logRequestBody = logRequestBody;\n+        this.resolveIndices = resolveIndices;\n+        this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+        this.ignoredAuditUsers = ignoredAuditUsers;\n+        this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+        this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+        this.ignoreAuditRequests = ignoredAuditRequests;\n+        this.disabledRestCategories = disabledRestCategories;\n+        this.disabledTransportCategories = disabledTransportCategories;\n+        this.opendistrosecurityIndex = opendistrosecurityIndex;\n+    }\n+\n+    public static AuditConfig from(Settings settings) {\n+        final boolean isRestApiAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n+        final boolean isTransportAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n+        final boolean resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n+        final boolean logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n+        final boolean resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n+        final boolean excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+        final String opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n+\n+        final EnumSet<AuditCategory> disabledRestCategories = AuditCategory.parse(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES,\n+                true));\n+\n+        final EnumSet<AuditCategory> disabledTransportCategories = AuditCategory.parse(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES,\n+                true));\n+\n+        final Set<String> ignoredAuditUsers = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoredComplianceUsersForRead = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoredComplianceUsersForWrite = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoreAuditRequests = ImmutableSet.copyOf(settings.getAsList(\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS,\n+                Collections.emptyList()));\n+\n+        return new AuditConfig(isRestApiAuditEnabled,\n+                isTransportAuditEnabled,\n+                resolveBulkRequests,\n+                logRequestBody,\n+                resolveIndices,\n+                excludeSensitiveHeaders,\n+                ignoredAuditUsers,\n+                ignoredComplianceUsersForRead,\n+                ignoredComplianceUsersForWrite,\n+                ignoreAuditRequests,\n+                disabledRestCategories,\n+                disabledTransportCategories,\n+                opendistrosecurityIndex);\n+    }\n+\n+    private static List<String> getSettingAsList(final Settings settings, final String key, final List<String> defaultList, final boolean ignoreCaseForNone) {\n+        final List<String> list = settings.getAsList(key, defaultList);\n+        if (list.size() == 1 && \"NONE\".equals(ignoreCaseForNone? list.get(0).toUpperCase() : list.get(0))) {\n+            return Collections.emptyList();\n+        }\n+        return list;\n+    }\n+\n+    public boolean isRestApiAuditEnabled() {\n+        return isRestApiAuditEnabled;\n+    }\n+\n+    public boolean isTransportApiAuditEnabled() {\n+        return isTransportApiAuditEnabled;\n+    }\n+\n+    public boolean shouldResolveBulkRequests() {\n+        return resolveBulkRequests;\n+    }\n+\n+    public boolean shouldLogRequestBody() {\n+        return logRequestBody;\n+    }\n+\n+    public boolean shouldResolveIndices() {\n+        return resolveIndices;\n+    }\n+\n+    public boolean shouldExcludeSensitiveHeaders() {\n+        return excludeSensitiveHeaders;\n+    }\n+\n+    public Set<String> getIgnoredAuditUsers() {\n+        return ignoredAuditUsers;\n+    }\n+\n+    public Set<String> getIgnoredComplianceUsersForRead() {\n+        return ignoredComplianceUsersForRead;\n+    }\n+\n+    public Set<String> getIgnoredComplianceUsersForWrite() {\n+        return ignoredComplianceUsersForWrite;\n+    }\n+\n+    public Set<String> getIgnoredAuditRequests() {\n+        return ignoreAuditRequests;\n+    }\n+\n+    public EnumSet<AuditCategory> getDisabledRestCategories() {\n+        return disabledRestCategories;\n+    }\n+\n+    public EnumSet<AuditCategory> getDisabledTransportCategories() {\n+        return disabledTransportCategories;\n+    }\n+\n+    public String getOpendistrosecurityIndex() {\n+        return opendistrosecurityIndex;\n+    }\n+\n+    public void log(Logger logger) {\n+        logger.info(\"Auditing on REST API is {}\", isRestApiAuditEnabled ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing on Transport API is {}\", isTransportApiAuditEnabled ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing of request body is {}\", logRequestBody ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing should {} resolve bulk requests\", resolveBulkRequests ? \"\" : \"not\");\n+        logger.info(\"Auditing should {} resolve indices\", resolveBulkRequests ? \"\" : \"not\");\n+        logger.info(\"Auditing should {} exclude sensitive headers\", excludeSensitiveHeaders ? \"\" : \"not\");\n+        logger.info(\"Auditing will ignore users {}\", ignoredAuditUsers);\n+        logger.info(\"Auditing of compliance read operation will ignore users {}\", ignoredComplianceUsersForRead);\n+        logger.info(\"Auditing of compliance write operation will ignore users {}\", ignoredComplianceUsersForWrite);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 190}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3Njk4OTc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMDo1MzowMVrOF9BgkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMDo1MzowMVrOF9BgkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUzMjE3Nw==", "bodyText": "nit: Move it next to REST API log entry. \"{} are excluded from REST API auditing.\" (check if it is not empty)", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r399532177", "createdAt": "2020-03-27T20:53:01Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean isRestApiAuditEnabled;\n+    private final boolean isTransportApiAuditEnabled;\n+    private final boolean resolveBulkRequests;\n+    private final boolean logRequestBody;\n+    private final boolean resolveIndices;\n+    private final boolean excludeSensitiveHeaders;\n+    private final Set<String> ignoredAuditUsers;\n+    private final Set<String> ignoredComplianceUsersForRead;\n+    private final Set<String> ignoredComplianceUsersForWrite;\n+    private final Set<String> ignoreAuditRequests;\n+    private final EnumSet<AuditCategory> disabledRestCategories;\n+    private final EnumSet<AuditCategory> disabledTransportCategories;\n+    private final String opendistrosecurityIndex;\n+\n+    private AuditConfig(final boolean isRestApiAuditEnabled,\n+                        final boolean isTransportApiAuditEnabled,\n+                        final boolean resolveBulkRequests,\n+                        final boolean logRequestBody,\n+                        final boolean resolveIndices,\n+                        final boolean excludeSensitiveHeaders,\n+                        final Set<String> ignoredAuditUsers,\n+                        final Set<String> ignoredComplianceUsersForRead,\n+                        final Set<String> ignoredComplianceUsersForWrite,\n+                        final Set<String> ignoredAuditRequests,\n+                        final EnumSet<AuditCategory> disabledRestCategories,\n+                        final EnumSet<AuditCategory> disabledTransportCategories,\n+                        final String opendistrosecurityIndex) {\n+        this.isRestApiAuditEnabled = isRestApiAuditEnabled;\n+        this.isTransportApiAuditEnabled = isTransportApiAuditEnabled;\n+        this.resolveBulkRequests = resolveBulkRequests;\n+        this.logRequestBody = logRequestBody;\n+        this.resolveIndices = resolveIndices;\n+        this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+        this.ignoredAuditUsers = ignoredAuditUsers;\n+        this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+        this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+        this.ignoreAuditRequests = ignoredAuditRequests;\n+        this.disabledRestCategories = disabledRestCategories;\n+        this.disabledTransportCategories = disabledTransportCategories;\n+        this.opendistrosecurityIndex = opendistrosecurityIndex;\n+    }\n+\n+    public static AuditConfig from(Settings settings) {\n+        final boolean isRestApiAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n+        final boolean isTransportAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n+        final boolean resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n+        final boolean logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n+        final boolean resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n+        final boolean excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+        final String opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n+\n+        final EnumSet<AuditCategory> disabledRestCategories = AuditCategory.parse(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES,\n+                true));\n+\n+        final EnumSet<AuditCategory> disabledTransportCategories = AuditCategory.parse(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES,\n+                true));\n+\n+        final Set<String> ignoredAuditUsers = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoredComplianceUsersForRead = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoredComplianceUsersForWrite = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoreAuditRequests = ImmutableSet.copyOf(settings.getAsList(\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS,\n+                Collections.emptyList()));\n+\n+        return new AuditConfig(isRestApiAuditEnabled,\n+                isTransportAuditEnabled,\n+                resolveBulkRequests,\n+                logRequestBody,\n+                resolveIndices,\n+                excludeSensitiveHeaders,\n+                ignoredAuditUsers,\n+                ignoredComplianceUsersForRead,\n+                ignoredComplianceUsersForWrite,\n+                ignoreAuditRequests,\n+                disabledRestCategories,\n+                disabledTransportCategories,\n+                opendistrosecurityIndex);\n+    }\n+\n+    private static List<String> getSettingAsList(final Settings settings, final String key, final List<String> defaultList, final boolean ignoreCaseForNone) {\n+        final List<String> list = settings.getAsList(key, defaultList);\n+        if (list.size() == 1 && \"NONE\".equals(ignoreCaseForNone? list.get(0).toUpperCase() : list.get(0))) {\n+            return Collections.emptyList();\n+        }\n+        return list;\n+    }\n+\n+    public boolean isRestApiAuditEnabled() {\n+        return isRestApiAuditEnabled;\n+    }\n+\n+    public boolean isTransportApiAuditEnabled() {\n+        return isTransportApiAuditEnabled;\n+    }\n+\n+    public boolean shouldResolveBulkRequests() {\n+        return resolveBulkRequests;\n+    }\n+\n+    public boolean shouldLogRequestBody() {\n+        return logRequestBody;\n+    }\n+\n+    public boolean shouldResolveIndices() {\n+        return resolveIndices;\n+    }\n+\n+    public boolean shouldExcludeSensitiveHeaders() {\n+        return excludeSensitiveHeaders;\n+    }\n+\n+    public Set<String> getIgnoredAuditUsers() {\n+        return ignoredAuditUsers;\n+    }\n+\n+    public Set<String> getIgnoredComplianceUsersForRead() {\n+        return ignoredComplianceUsersForRead;\n+    }\n+\n+    public Set<String> getIgnoredComplianceUsersForWrite() {\n+        return ignoredComplianceUsersForWrite;\n+    }\n+\n+    public Set<String> getIgnoredAuditRequests() {\n+        return ignoreAuditRequests;\n+    }\n+\n+    public EnumSet<AuditCategory> getDisabledRestCategories() {\n+        return disabledRestCategories;\n+    }\n+\n+    public EnumSet<AuditCategory> getDisabledTransportCategories() {\n+        return disabledTransportCategories;\n+    }\n+\n+    public String getOpendistrosecurityIndex() {\n+        return opendistrosecurityIndex;\n+    }\n+\n+    public void log(Logger logger) {\n+        logger.info(\"Auditing on REST API is {}\", isRestApiAuditEnabled ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing on Transport API is {}\", isTransportApiAuditEnabled ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing of request body is {}\", logRequestBody ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing should {} resolve bulk requests\", resolveBulkRequests ? \"\" : \"not\");\n+        logger.info(\"Auditing should {} resolve indices\", resolveBulkRequests ? \"\" : \"not\");\n+        logger.info(\"Auditing should {} exclude sensitive headers\", excludeSensitiveHeaders ? \"\" : \"not\");\n+        logger.info(\"Auditing will ignore users {}\", ignoredAuditUsers);\n+        logger.info(\"Auditing of compliance read operation will ignore users {}\", ignoredComplianceUsersForRead);\n+        logger.info(\"Auditing of compliance write operation will ignore users {}\", ignoredComplianceUsersForWrite);\n+        logger.info(\"Auditing has disabled rest categories {}\", disabledRestCategories);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3Njk5MDM4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMDo1MzoxN1rOF9Bg-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMDo1MzoxN1rOF9Bg-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUzMjI4MA==", "bodyText": "nit: Same as REST API.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r399532280", "createdAt": "2020-03-27T20:53:17Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean isRestApiAuditEnabled;\n+    private final boolean isTransportApiAuditEnabled;\n+    private final boolean resolveBulkRequests;\n+    private final boolean logRequestBody;\n+    private final boolean resolveIndices;\n+    private final boolean excludeSensitiveHeaders;\n+    private final Set<String> ignoredAuditUsers;\n+    private final Set<String> ignoredComplianceUsersForRead;\n+    private final Set<String> ignoredComplianceUsersForWrite;\n+    private final Set<String> ignoreAuditRequests;\n+    private final EnumSet<AuditCategory> disabledRestCategories;\n+    private final EnumSet<AuditCategory> disabledTransportCategories;\n+    private final String opendistrosecurityIndex;\n+\n+    private AuditConfig(final boolean isRestApiAuditEnabled,\n+                        final boolean isTransportApiAuditEnabled,\n+                        final boolean resolveBulkRequests,\n+                        final boolean logRequestBody,\n+                        final boolean resolveIndices,\n+                        final boolean excludeSensitiveHeaders,\n+                        final Set<String> ignoredAuditUsers,\n+                        final Set<String> ignoredComplianceUsersForRead,\n+                        final Set<String> ignoredComplianceUsersForWrite,\n+                        final Set<String> ignoredAuditRequests,\n+                        final EnumSet<AuditCategory> disabledRestCategories,\n+                        final EnumSet<AuditCategory> disabledTransportCategories,\n+                        final String opendistrosecurityIndex) {\n+        this.isRestApiAuditEnabled = isRestApiAuditEnabled;\n+        this.isTransportApiAuditEnabled = isTransportApiAuditEnabled;\n+        this.resolveBulkRequests = resolveBulkRequests;\n+        this.logRequestBody = logRequestBody;\n+        this.resolveIndices = resolveIndices;\n+        this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+        this.ignoredAuditUsers = ignoredAuditUsers;\n+        this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+        this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+        this.ignoreAuditRequests = ignoredAuditRequests;\n+        this.disabledRestCategories = disabledRestCategories;\n+        this.disabledTransportCategories = disabledTransportCategories;\n+        this.opendistrosecurityIndex = opendistrosecurityIndex;\n+    }\n+\n+    public static AuditConfig from(Settings settings) {\n+        final boolean isRestApiAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n+        final boolean isTransportAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n+        final boolean resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n+        final boolean logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n+        final boolean resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n+        final boolean excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+        final String opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n+\n+        final EnumSet<AuditCategory> disabledRestCategories = AuditCategory.parse(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES,\n+                true));\n+\n+        final EnumSet<AuditCategory> disabledTransportCategories = AuditCategory.parse(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES,\n+                true));\n+\n+        final Set<String> ignoredAuditUsers = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoredComplianceUsersForRead = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoredComplianceUsersForWrite = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoreAuditRequests = ImmutableSet.copyOf(settings.getAsList(\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS,\n+                Collections.emptyList()));\n+\n+        return new AuditConfig(isRestApiAuditEnabled,\n+                isTransportAuditEnabled,\n+                resolveBulkRequests,\n+                logRequestBody,\n+                resolveIndices,\n+                excludeSensitiveHeaders,\n+                ignoredAuditUsers,\n+                ignoredComplianceUsersForRead,\n+                ignoredComplianceUsersForWrite,\n+                ignoreAuditRequests,\n+                disabledRestCategories,\n+                disabledTransportCategories,\n+                opendistrosecurityIndex);\n+    }\n+\n+    private static List<String> getSettingAsList(final Settings settings, final String key, final List<String> defaultList, final boolean ignoreCaseForNone) {\n+        final List<String> list = settings.getAsList(key, defaultList);\n+        if (list.size() == 1 && \"NONE\".equals(ignoreCaseForNone? list.get(0).toUpperCase() : list.get(0))) {\n+            return Collections.emptyList();\n+        }\n+        return list;\n+    }\n+\n+    public boolean isRestApiAuditEnabled() {\n+        return isRestApiAuditEnabled;\n+    }\n+\n+    public boolean isTransportApiAuditEnabled() {\n+        return isTransportApiAuditEnabled;\n+    }\n+\n+    public boolean shouldResolveBulkRequests() {\n+        return resolveBulkRequests;\n+    }\n+\n+    public boolean shouldLogRequestBody() {\n+        return logRequestBody;\n+    }\n+\n+    public boolean shouldResolveIndices() {\n+        return resolveIndices;\n+    }\n+\n+    public boolean shouldExcludeSensitiveHeaders() {\n+        return excludeSensitiveHeaders;\n+    }\n+\n+    public Set<String> getIgnoredAuditUsers() {\n+        return ignoredAuditUsers;\n+    }\n+\n+    public Set<String> getIgnoredComplianceUsersForRead() {\n+        return ignoredComplianceUsersForRead;\n+    }\n+\n+    public Set<String> getIgnoredComplianceUsersForWrite() {\n+        return ignoredComplianceUsersForWrite;\n+    }\n+\n+    public Set<String> getIgnoredAuditRequests() {\n+        return ignoreAuditRequests;\n+    }\n+\n+    public EnumSet<AuditCategory> getDisabledRestCategories() {\n+        return disabledRestCategories;\n+    }\n+\n+    public EnumSet<AuditCategory> getDisabledTransportCategories() {\n+        return disabledTransportCategories;\n+    }\n+\n+    public String getOpendistrosecurityIndex() {\n+        return opendistrosecurityIndex;\n+    }\n+\n+    public void log(Logger logger) {\n+        logger.info(\"Auditing on REST API is {}\", isRestApiAuditEnabled ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing on Transport API is {}\", isTransportApiAuditEnabled ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing of request body is {}\", logRequestBody ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing should {} resolve bulk requests\", resolveBulkRequests ? \"\" : \"not\");\n+        logger.info(\"Auditing should {} resolve indices\", resolveBulkRequests ? \"\" : \"not\");\n+        logger.info(\"Auditing should {} exclude sensitive headers\", excludeSensitiveHeaders ? \"\" : \"not\");\n+        logger.info(\"Auditing will ignore users {}\", ignoredAuditUsers);\n+        logger.info(\"Auditing of compliance read operation will ignore users {}\", ignoredComplianceUsersForRead);\n+        logger.info(\"Auditing of compliance write operation will ignore users {}\", ignoredComplianceUsersForWrite);\n+        logger.info(\"Auditing has disabled rest categories {}\", disabledRestCategories);\n+        logger.info(\"Auditing has disabled transport categories {}\", disabledTransportCategories);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 192}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NzAwNTg3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMDo1ODo1MlrOF9BqUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMDo1ODo1MlrOF9BqUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUzNDY3Mw==", "bodyText": "nit: \"Open distro auditing uses {} index(alias?) to write auditing events.\"", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r399534673", "createdAt": "2020-03-27T20:58:52Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean isRestApiAuditEnabled;\n+    private final boolean isTransportApiAuditEnabled;\n+    private final boolean resolveBulkRequests;\n+    private final boolean logRequestBody;\n+    private final boolean resolveIndices;\n+    private final boolean excludeSensitiveHeaders;\n+    private final Set<String> ignoredAuditUsers;\n+    private final Set<String> ignoredComplianceUsersForRead;\n+    private final Set<String> ignoredComplianceUsersForWrite;\n+    private final Set<String> ignoreAuditRequests;\n+    private final EnumSet<AuditCategory> disabledRestCategories;\n+    private final EnumSet<AuditCategory> disabledTransportCategories;\n+    private final String opendistrosecurityIndex;\n+\n+    private AuditConfig(final boolean isRestApiAuditEnabled,\n+                        final boolean isTransportApiAuditEnabled,\n+                        final boolean resolveBulkRequests,\n+                        final boolean logRequestBody,\n+                        final boolean resolveIndices,\n+                        final boolean excludeSensitiveHeaders,\n+                        final Set<String> ignoredAuditUsers,\n+                        final Set<String> ignoredComplianceUsersForRead,\n+                        final Set<String> ignoredComplianceUsersForWrite,\n+                        final Set<String> ignoredAuditRequests,\n+                        final EnumSet<AuditCategory> disabledRestCategories,\n+                        final EnumSet<AuditCategory> disabledTransportCategories,\n+                        final String opendistrosecurityIndex) {\n+        this.isRestApiAuditEnabled = isRestApiAuditEnabled;\n+        this.isTransportApiAuditEnabled = isTransportApiAuditEnabled;\n+        this.resolveBulkRequests = resolveBulkRequests;\n+        this.logRequestBody = logRequestBody;\n+        this.resolveIndices = resolveIndices;\n+        this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+        this.ignoredAuditUsers = ignoredAuditUsers;\n+        this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+        this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+        this.ignoreAuditRequests = ignoredAuditRequests;\n+        this.disabledRestCategories = disabledRestCategories;\n+        this.disabledTransportCategories = disabledTransportCategories;\n+        this.opendistrosecurityIndex = opendistrosecurityIndex;\n+    }\n+\n+    public static AuditConfig from(Settings settings) {\n+        final boolean isRestApiAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n+        final boolean isTransportAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n+        final boolean resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n+        final boolean logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n+        final boolean resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n+        final boolean excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+        final String opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n+\n+        final EnumSet<AuditCategory> disabledRestCategories = AuditCategory.parse(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES,\n+                true));\n+\n+        final EnumSet<AuditCategory> disabledTransportCategories = AuditCategory.parse(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES,\n+                true));\n+\n+        final Set<String> ignoredAuditUsers = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoredComplianceUsersForRead = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoredComplianceUsersForWrite = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoreAuditRequests = ImmutableSet.copyOf(settings.getAsList(\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS,\n+                Collections.emptyList()));\n+\n+        return new AuditConfig(isRestApiAuditEnabled,\n+                isTransportAuditEnabled,\n+                resolveBulkRequests,\n+                logRequestBody,\n+                resolveIndices,\n+                excludeSensitiveHeaders,\n+                ignoredAuditUsers,\n+                ignoredComplianceUsersForRead,\n+                ignoredComplianceUsersForWrite,\n+                ignoreAuditRequests,\n+                disabledRestCategories,\n+                disabledTransportCategories,\n+                opendistrosecurityIndex);\n+    }\n+\n+    private static List<String> getSettingAsList(final Settings settings, final String key, final List<String> defaultList, final boolean ignoreCaseForNone) {\n+        final List<String> list = settings.getAsList(key, defaultList);\n+        if (list.size() == 1 && \"NONE\".equals(ignoreCaseForNone? list.get(0).toUpperCase() : list.get(0))) {\n+            return Collections.emptyList();\n+        }\n+        return list;\n+    }\n+\n+    public boolean isRestApiAuditEnabled() {\n+        return isRestApiAuditEnabled;\n+    }\n+\n+    public boolean isTransportApiAuditEnabled() {\n+        return isTransportApiAuditEnabled;\n+    }\n+\n+    public boolean shouldResolveBulkRequests() {\n+        return resolveBulkRequests;\n+    }\n+\n+    public boolean shouldLogRequestBody() {\n+        return logRequestBody;\n+    }\n+\n+    public boolean shouldResolveIndices() {\n+        return resolveIndices;\n+    }\n+\n+    public boolean shouldExcludeSensitiveHeaders() {\n+        return excludeSensitiveHeaders;\n+    }\n+\n+    public Set<String> getIgnoredAuditUsers() {\n+        return ignoredAuditUsers;\n+    }\n+\n+    public Set<String> getIgnoredComplianceUsersForRead() {\n+        return ignoredComplianceUsersForRead;\n+    }\n+\n+    public Set<String> getIgnoredComplianceUsersForWrite() {\n+        return ignoredComplianceUsersForWrite;\n+    }\n+\n+    public Set<String> getIgnoredAuditRequests() {\n+        return ignoreAuditRequests;\n+    }\n+\n+    public EnumSet<AuditCategory> getDisabledRestCategories() {\n+        return disabledRestCategories;\n+    }\n+\n+    public EnumSet<AuditCategory> getDisabledTransportCategories() {\n+        return disabledTransportCategories;\n+    }\n+\n+    public String getOpendistrosecurityIndex() {\n+        return opendistrosecurityIndex;\n+    }\n+\n+    public void log(Logger logger) {\n+        logger.info(\"Auditing on REST API is {}\", isRestApiAuditEnabled ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing on Transport API is {}\", isTransportApiAuditEnabled ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing of request body is {}\", logRequestBody ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing should {} resolve bulk requests\", resolveBulkRequests ? \"\" : \"not\");\n+        logger.info(\"Auditing should {} resolve indices\", resolveBulkRequests ? \"\" : \"not\");\n+        logger.info(\"Auditing should {} exclude sensitive headers\", excludeSensitiveHeaders ? \"\" : \"not\");\n+        logger.info(\"Auditing will ignore users {}\", ignoredAuditUsers);\n+        logger.info(\"Auditing of compliance read operation will ignore users {}\", ignoredComplianceUsersForRead);\n+        logger.info(\"Auditing of compliance write operation will ignore users {}\", ignoredComplianceUsersForWrite);\n+        logger.info(\"Auditing has disabled rest categories {}\", disabledRestCategories);\n+        logger.info(\"Auditing has disabled transport categories {}\", disabledTransportCategories);\n+        logger.info(\"Auditing is configured to use opendistro security index {}\", opendistrosecurityIndex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 193}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NzAzNDM5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMTowOToxNVrOF9B7fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMjoyMDowMlrOF9DcvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUzOTA3MQ==", "bodyText": "Sorry if I missed that rename in the prior reviews. Can you please rename it back to log as other classes mostly use log for the Logger.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r399539071", "createdAt": "2020-03-27T21:09:15Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "diffHunk": "@@ -80,33 +79,15 @@\n import com.google.common.io.BaseEncoding;\n \n public abstract class AbstractAuditLog implements AuditLog {\n+    protected final Logger logger = LogManager.getLogger(this.getClass());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU0NDU5Nw==", "bodyText": "logger seems more appropriate than log", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r399544597", "createdAt": "2020-03-27T21:23:22Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "diffHunk": "@@ -80,33 +79,15 @@\n import com.google.common.io.BaseEncoding;\n \n public abstract class AbstractAuditLog implements AuditLog {\n+    protected final Logger logger = LogManager.getLogger(this.getClass());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUzOTA3MQ=="}, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU2Mzk2NQ==", "bodyText": "I don't have a strong preference of log over logger, just want to be consistent. For me, both log and logger are fine.\nAs the majority of other classes use log and the change is not part of AuditConfig refactoring, let's keep it as log in this PR/commit.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r399563965", "createdAt": "2020-03-27T22:20:02Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "diffHunk": "@@ -80,33 +79,15 @@\n import com.google.common.io.BaseEncoding;\n \n public abstract class AbstractAuditLog implements AuditLog {\n+    protected final Logger logger = LogManager.getLogger(this.getClass());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUzOTA3MQ=="}, "originalCommit": null, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NzIwNjc1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMjoyNzoyMlrOF9DlFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMjozNjowM1rOF9Du2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU2NjEwMg==", "bodyText": "My bad for not being clear. I was not sure if opendistrosecurityIndex can be an alias instead of an index, so I put \"alias?\". If it can be an alias, please use \"index or alias\", otherwise just \"index\".", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r399566102", "createdAt": "2020-03-27T22:27:22Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean isRestApiAuditEnabled;\n+    private final boolean isTransportApiAuditEnabled;\n+    private final boolean resolveBulkRequests;\n+    private final boolean logRequestBody;\n+    private final boolean resolveIndices;\n+    private final boolean excludeSensitiveHeaders;\n+    private final Set<String> ignoredAuditUsers;\n+    private final Set<String> ignoredComplianceUsersForRead;\n+    private final Set<String> ignoredComplianceUsersForWrite;\n+    private final Set<String> ignoreAuditRequests;\n+    private final EnumSet<AuditCategory> disabledRestCategories;\n+    private final EnumSet<AuditCategory> disabledTransportCategories;\n+    private final String opendistrosecurityIndex;\n+\n+    private AuditConfig(final boolean isRestApiAuditEnabled,\n+                        final boolean isTransportApiAuditEnabled,\n+                        final boolean resolveBulkRequests,\n+                        final boolean logRequestBody,\n+                        final boolean resolveIndices,\n+                        final boolean excludeSensitiveHeaders,\n+                        final Set<String> ignoredAuditUsers,\n+                        final Set<String> ignoredComplianceUsersForRead,\n+                        final Set<String> ignoredComplianceUsersForWrite,\n+                        final Set<String> ignoredAuditRequests,\n+                        final EnumSet<AuditCategory> disabledRestCategories,\n+                        final EnumSet<AuditCategory> disabledTransportCategories,\n+                        final String opendistrosecurityIndex) {\n+        this.isRestApiAuditEnabled = isRestApiAuditEnabled;\n+        this.isTransportApiAuditEnabled = isTransportApiAuditEnabled;\n+        this.resolveBulkRequests = resolveBulkRequests;\n+        this.logRequestBody = logRequestBody;\n+        this.resolveIndices = resolveIndices;\n+        this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+        this.ignoredAuditUsers = ignoredAuditUsers;\n+        this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+        this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+        this.ignoreAuditRequests = ignoredAuditRequests;\n+        this.disabledRestCategories = disabledRestCategories;\n+        this.disabledTransportCategories = disabledTransportCategories;\n+        this.opendistrosecurityIndex = opendistrosecurityIndex;\n+    }\n+\n+    public static AuditConfig from(Settings settings) {\n+        final boolean isRestApiAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n+        final boolean isTransportAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n+        final boolean resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n+        final boolean logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n+        final boolean resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n+        final boolean excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+        final String opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n+\n+        final EnumSet<AuditCategory> disabledRestCategories = AuditCategory.parse(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES,\n+                true));\n+\n+        final EnumSet<AuditCategory> disabledTransportCategories = AuditCategory.parse(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES,\n+                true));\n+\n+        final Set<String> ignoredAuditUsers = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoredComplianceUsersForRead = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoredComplianceUsersForWrite = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoreAuditRequests = ImmutableSet.copyOf(settings.getAsList(\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS,\n+                Collections.emptyList()));\n+\n+        return new AuditConfig(isRestApiAuditEnabled,\n+                isTransportAuditEnabled,\n+                resolveBulkRequests,\n+                logRequestBody,\n+                resolveIndices,\n+                excludeSensitiveHeaders,\n+                ignoredAuditUsers,\n+                ignoredComplianceUsersForRead,\n+                ignoredComplianceUsersForWrite,\n+                ignoreAuditRequests,\n+                disabledRestCategories,\n+                disabledTransportCategories,\n+                opendistrosecurityIndex);\n+    }\n+\n+    private static List<String> getSettingAsList(final Settings settings, final String key, final List<String> defaultList, final boolean ignoreCaseForNone) {\n+        final List<String> list = settings.getAsList(key, defaultList);\n+        if (list.size() == 1 && \"NONE\".equals(ignoreCaseForNone? list.get(0).toUpperCase() : list.get(0))) {\n+            return Collections.emptyList();\n+        }\n+        return list;\n+    }\n+\n+    public boolean isRestApiAuditEnabled() {\n+        return isRestApiAuditEnabled;\n+    }\n+\n+    public boolean isTransportApiAuditEnabled() {\n+        return isTransportApiAuditEnabled;\n+    }\n+\n+    public boolean shouldResolveBulkRequests() {\n+        return resolveBulkRequests;\n+    }\n+\n+    public boolean shouldLogRequestBody() {\n+        return logRequestBody;\n+    }\n+\n+    public boolean shouldResolveIndices() {\n+        return resolveIndices;\n+    }\n+\n+    public boolean shouldExcludeSensitiveHeaders() {\n+        return excludeSensitiveHeaders;\n+    }\n+\n+    public Set<String> getIgnoredAuditUsers() {\n+        return ignoredAuditUsers;\n+    }\n+\n+    public Set<String> getIgnoredComplianceUsersForRead() {\n+        return ignoredComplianceUsersForRead;\n+    }\n+\n+    public Set<String> getIgnoredComplianceUsersForWrite() {\n+        return ignoredComplianceUsersForWrite;\n+    }\n+\n+    public Set<String> getIgnoredAuditRequests() {\n+        return ignoreAuditRequests;\n+    }\n+\n+    public EnumSet<AuditCategory> getDisabledRestCategories() {\n+        return disabledRestCategories;\n+    }\n+\n+    public EnumSet<AuditCategory> getDisabledTransportCategories() {\n+        return disabledTransportCategories;\n+    }\n+\n+    public String getOpendistrosecurityIndex() {\n+        return opendistrosecurityIndex;\n+    }\n+\n+    public void log(Logger logger) {\n+        logger.info(\"Auditing on REST API is {}.\", isRestApiAuditEnabled ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing on Transport API is {}.\", isTransportApiAuditEnabled ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing of request body is {}.\", logRequestBody ? \"enabled\" : \"disabled\");\n+        logger.info(\"Bulk requests resolution is {} during request auditing.\", resolveBulkRequests ? \"enabled\" : \"disabled\");\n+        logger.info(\"Index resolution is {} during request auditing.\", resolveIndices ? \"enabled\" : \"disabled\");\n+        logger.info(\"Sensitive headers auditing is {}.\", excludeSensitiveHeaders ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing requests from {} users is disabled.\", ignoredAuditUsers);\n+        logger.info(\"Compliance read operation requests auditing from {} users is disabled.\", ignoredComplianceUsersForRead);\n+        logger.info(\"Compliance write operation requests auditing from {} users is disabled.\", ignoredComplianceUsersForWrite);\n+        logger.info(\"{} are excluded from REST API auditing.\", disabledRestCategories);\n+        logger.info(\"{} are excluded from Transport API auditing.\", disabledTransportCategories);\n+        logger.info(\"Open distro auditing uses {} index(alias?) to write auditing events.\", opendistrosecurityIndex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 193}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU2ODYwMg==", "bodyText": "It uses that index to monitor change events for internal configuration.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r399568602", "createdAt": "2020-03-27T22:36:03Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean isRestApiAuditEnabled;\n+    private final boolean isTransportApiAuditEnabled;\n+    private final boolean resolveBulkRequests;\n+    private final boolean logRequestBody;\n+    private final boolean resolveIndices;\n+    private final boolean excludeSensitiveHeaders;\n+    private final Set<String> ignoredAuditUsers;\n+    private final Set<String> ignoredComplianceUsersForRead;\n+    private final Set<String> ignoredComplianceUsersForWrite;\n+    private final Set<String> ignoreAuditRequests;\n+    private final EnumSet<AuditCategory> disabledRestCategories;\n+    private final EnumSet<AuditCategory> disabledTransportCategories;\n+    private final String opendistrosecurityIndex;\n+\n+    private AuditConfig(final boolean isRestApiAuditEnabled,\n+                        final boolean isTransportApiAuditEnabled,\n+                        final boolean resolveBulkRequests,\n+                        final boolean logRequestBody,\n+                        final boolean resolveIndices,\n+                        final boolean excludeSensitiveHeaders,\n+                        final Set<String> ignoredAuditUsers,\n+                        final Set<String> ignoredComplianceUsersForRead,\n+                        final Set<String> ignoredComplianceUsersForWrite,\n+                        final Set<String> ignoredAuditRequests,\n+                        final EnumSet<AuditCategory> disabledRestCategories,\n+                        final EnumSet<AuditCategory> disabledTransportCategories,\n+                        final String opendistrosecurityIndex) {\n+        this.isRestApiAuditEnabled = isRestApiAuditEnabled;\n+        this.isTransportApiAuditEnabled = isTransportApiAuditEnabled;\n+        this.resolveBulkRequests = resolveBulkRequests;\n+        this.logRequestBody = logRequestBody;\n+        this.resolveIndices = resolveIndices;\n+        this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+        this.ignoredAuditUsers = ignoredAuditUsers;\n+        this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+        this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+        this.ignoreAuditRequests = ignoredAuditRequests;\n+        this.disabledRestCategories = disabledRestCategories;\n+        this.disabledTransportCategories = disabledTransportCategories;\n+        this.opendistrosecurityIndex = opendistrosecurityIndex;\n+    }\n+\n+    public static AuditConfig from(Settings settings) {\n+        final boolean isRestApiAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n+        final boolean isTransportAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n+        final boolean resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n+        final boolean logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n+        final boolean resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n+        final boolean excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+        final String opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n+\n+        final EnumSet<AuditCategory> disabledRestCategories = AuditCategory.parse(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES,\n+                true));\n+\n+        final EnumSet<AuditCategory> disabledTransportCategories = AuditCategory.parse(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES,\n+                true));\n+\n+        final Set<String> ignoredAuditUsers = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoredComplianceUsersForRead = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoredComplianceUsersForWrite = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoreAuditRequests = ImmutableSet.copyOf(settings.getAsList(\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS,\n+                Collections.emptyList()));\n+\n+        return new AuditConfig(isRestApiAuditEnabled,\n+                isTransportAuditEnabled,\n+                resolveBulkRequests,\n+                logRequestBody,\n+                resolveIndices,\n+                excludeSensitiveHeaders,\n+                ignoredAuditUsers,\n+                ignoredComplianceUsersForRead,\n+                ignoredComplianceUsersForWrite,\n+                ignoreAuditRequests,\n+                disabledRestCategories,\n+                disabledTransportCategories,\n+                opendistrosecurityIndex);\n+    }\n+\n+    private static List<String> getSettingAsList(final Settings settings, final String key, final List<String> defaultList, final boolean ignoreCaseForNone) {\n+        final List<String> list = settings.getAsList(key, defaultList);\n+        if (list.size() == 1 && \"NONE\".equals(ignoreCaseForNone? list.get(0).toUpperCase() : list.get(0))) {\n+            return Collections.emptyList();\n+        }\n+        return list;\n+    }\n+\n+    public boolean isRestApiAuditEnabled() {\n+        return isRestApiAuditEnabled;\n+    }\n+\n+    public boolean isTransportApiAuditEnabled() {\n+        return isTransportApiAuditEnabled;\n+    }\n+\n+    public boolean shouldResolveBulkRequests() {\n+        return resolveBulkRequests;\n+    }\n+\n+    public boolean shouldLogRequestBody() {\n+        return logRequestBody;\n+    }\n+\n+    public boolean shouldResolveIndices() {\n+        return resolveIndices;\n+    }\n+\n+    public boolean shouldExcludeSensitiveHeaders() {\n+        return excludeSensitiveHeaders;\n+    }\n+\n+    public Set<String> getIgnoredAuditUsers() {\n+        return ignoredAuditUsers;\n+    }\n+\n+    public Set<String> getIgnoredComplianceUsersForRead() {\n+        return ignoredComplianceUsersForRead;\n+    }\n+\n+    public Set<String> getIgnoredComplianceUsersForWrite() {\n+        return ignoredComplianceUsersForWrite;\n+    }\n+\n+    public Set<String> getIgnoredAuditRequests() {\n+        return ignoreAuditRequests;\n+    }\n+\n+    public EnumSet<AuditCategory> getDisabledRestCategories() {\n+        return disabledRestCategories;\n+    }\n+\n+    public EnumSet<AuditCategory> getDisabledTransportCategories() {\n+        return disabledTransportCategories;\n+    }\n+\n+    public String getOpendistrosecurityIndex() {\n+        return opendistrosecurityIndex;\n+    }\n+\n+    public void log(Logger logger) {\n+        logger.info(\"Auditing on REST API is {}.\", isRestApiAuditEnabled ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing on Transport API is {}.\", isTransportApiAuditEnabled ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing of request body is {}.\", logRequestBody ? \"enabled\" : \"disabled\");\n+        logger.info(\"Bulk requests resolution is {} during request auditing.\", resolveBulkRequests ? \"enabled\" : \"disabled\");\n+        logger.info(\"Index resolution is {} during request auditing.\", resolveIndices ? \"enabled\" : \"disabled\");\n+        logger.info(\"Sensitive headers auditing is {}.\", excludeSensitiveHeaders ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing requests from {} users is disabled.\", ignoredAuditUsers);\n+        logger.info(\"Compliance read operation requests auditing from {} users is disabled.\", ignoredComplianceUsersForRead);\n+        logger.info(\"Compliance write operation requests auditing from {} users is disabled.\", ignoredComplianceUsersForWrite);\n+        logger.info(\"{} are excluded from REST API auditing.\", disabledRestCategories);\n+        logger.info(\"{} are excluded from Transport API auditing.\", disabledTransportCategories);\n+        logger.info(\"Open distro auditing uses {} index(alias?) to write auditing events.\", opendistrosecurityIndex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU2NjEwMg=="}, "originalCommit": null, "originalPosition": 193}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzM2MDA2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxOTo1ODo0NFrOF959Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxOTo1ODo0NFrOF959Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1NzAwNw==", "bodyText": "Assuming that you will make another round of changes, can you move this to line 175?", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r400457007", "createdAt": "2020-03-30T19:58:44Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,204 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean isRestApiAuditEnabled;\n+    private final boolean isTransportApiAuditEnabled;\n+    private final boolean resolveBulkRequests;\n+    private final boolean logRequestBody;\n+    private final boolean resolveIndices;\n+    private final boolean excludeSensitiveHeaders;\n+    private final Set<String> ignoredAuditUsers;\n+    private final Set<String> ignoredComplianceUsersForRead;\n+    private final Set<String> ignoredComplianceUsersForWrite;\n+    private final Set<String> ignoreAuditRequests;\n+    private final EnumSet<AuditCategory> disabledRestCategories;\n+    private final EnumSet<AuditCategory> disabledTransportCategories;\n+\n+    private AuditConfig(final boolean isRestApiAuditEnabled,\n+                        final boolean isTransportApiAuditEnabled,\n+                        final boolean resolveBulkRequests,\n+                        final boolean logRequestBody,\n+                        final boolean resolveIndices,\n+                        final boolean excludeSensitiveHeaders,\n+                        final Set<String> ignoredAuditUsers,\n+                        final Set<String> ignoredComplianceUsersForRead,\n+                        final Set<String> ignoredComplianceUsersForWrite,\n+                        final Set<String> ignoredAuditRequests,\n+                        final EnumSet<AuditCategory> disabledRestCategories,\n+                        final EnumSet<AuditCategory> disabledTransportCategories) {\n+        this.isRestApiAuditEnabled = isRestApiAuditEnabled;\n+        this.isTransportApiAuditEnabled = isTransportApiAuditEnabled;\n+        this.resolveBulkRequests = resolveBulkRequests;\n+        this.logRequestBody = logRequestBody;\n+        this.resolveIndices = resolveIndices;\n+        this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+        this.ignoredAuditUsers = ignoredAuditUsers;\n+        this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+        this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+        this.ignoreAuditRequests = ignoredAuditRequests;\n+        this.disabledRestCategories = disabledRestCategories;\n+        this.disabledTransportCategories = disabledTransportCategories;\n+    }\n+\n+    public static AuditConfig from(Settings settings) {\n+        final boolean isRestApiAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n+        final boolean isTransportAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n+        final boolean resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n+        final boolean logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n+        final boolean resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n+        final boolean excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+        final String opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n+\n+        final EnumSet<AuditCategory> disabledRestCategories = AuditCategory.parse(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES,\n+                true));\n+\n+        final EnumSet<AuditCategory> disabledTransportCategories = AuditCategory.parse(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES,\n+                true));\n+\n+        final Set<String> ignoredAuditUsers = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoredComplianceUsersForRead = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoredComplianceUsersForWrite = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoreAuditRequests = ImmutableSet.copyOf(settings.getAsList(\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS,\n+                Collections.emptyList()));\n+\n+        return new AuditConfig(isRestApiAuditEnabled,\n+                isTransportAuditEnabled,\n+                resolveBulkRequests,\n+                logRequestBody,\n+                resolveIndices,\n+                excludeSensitiveHeaders,\n+                ignoredAuditUsers,\n+                ignoredComplianceUsersForRead,\n+                ignoredComplianceUsersForWrite,\n+                ignoreAuditRequests,\n+                disabledRestCategories,\n+                disabledTransportCategories);\n+    }\n+\n+    private static List<String> getSettingAsList(final Settings settings, final String key, final List<String> defaultList, final boolean ignoreCaseForNone) {\n+        final List<String> list = settings.getAsList(key, defaultList);\n+        if (list.size() == 1 && \"NONE\".equals(ignoreCaseForNone? list.get(0).toUpperCase() : list.get(0))) {\n+            return Collections.emptyList();\n+        }\n+        return list;\n+    }\n+\n+    public boolean isRestApiAuditEnabled() {\n+        return isRestApiAuditEnabled;\n+    }\n+\n+    public boolean isTransportApiAuditEnabled() {\n+        return isTransportApiAuditEnabled;\n+    }\n+\n+    public boolean shouldResolveBulkRequests() {\n+        return resolveBulkRequests;\n+    }\n+\n+    public boolean shouldLogRequestBody() {\n+        return logRequestBody;\n+    }\n+\n+    public boolean shouldResolveIndices() {\n+        return resolveIndices;\n+    }\n+\n+    public boolean shouldExcludeSensitiveHeaders() {\n+        return excludeSensitiveHeaders;\n+    }\n+\n+    public Set<String> getIgnoredAuditUsers() {\n+        return ignoredAuditUsers;\n+    }\n+\n+    public Set<String> getIgnoredComplianceUsersForRead() {\n+        return ignoredComplianceUsersForRead;\n+    }\n+\n+    public Set<String> getIgnoredComplianceUsersForWrite() {\n+        return ignoredComplianceUsersForWrite;\n+    }\n+\n+    public Set<String> getIgnoredAuditRequests() {\n+        return ignoreAuditRequests;\n+    }\n+\n+    public EnumSet<AuditCategory> getDisabledRestCategories() {\n+        return disabledRestCategories;\n+    }\n+\n+    public EnumSet<AuditCategory> getDisabledTransportCategories() {\n+        return disabledTransportCategories;\n+    }\n+\n+    public void log(Logger logger) {\n+        logger.info(\"Auditing on REST API is {}.\", isRestApiAuditEnabled ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing on Transport API is {}.\", isTransportApiAuditEnabled ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing of request body is {}.\", logRequestBody ? \"enabled\" : \"disabled\");\n+        logger.info(\"Bulk requests resolution is {} during request auditing.\", resolveBulkRequests ? \"enabled\" : \"disabled\");\n+        logger.info(\"Index resolution is {} during request auditing.\", resolveIndices ? \"enabled\" : \"disabled\");\n+        logger.info(\"Sensitive headers auditing is {}.\", excludeSensitiveHeaders ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing requests from {} users is disabled.\", ignoredAuditUsers);\n+        logger.info(\"Compliance read operation requests auditing from {} users is disabled.\", ignoredComplianceUsersForRead);\n+        logger.info(\"Compliance write operation requests auditing from {} users is disabled.\", ignoredComplianceUsersForWrite);\n+        logger.info(\"{} are excluded from REST API auditing.\", disabledRestCategories);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 183}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzM2MjcwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxOTo1OToyOFrOF95-zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxOTo1OToyOFrOF95-zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1NzQyMQ==", "bodyText": "and this one to line 176.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r400457421", "createdAt": "2020-03-30T19:59:28Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,204 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean isRestApiAuditEnabled;\n+    private final boolean isTransportApiAuditEnabled;\n+    private final boolean resolveBulkRequests;\n+    private final boolean logRequestBody;\n+    private final boolean resolveIndices;\n+    private final boolean excludeSensitiveHeaders;\n+    private final Set<String> ignoredAuditUsers;\n+    private final Set<String> ignoredComplianceUsersForRead;\n+    private final Set<String> ignoredComplianceUsersForWrite;\n+    private final Set<String> ignoreAuditRequests;\n+    private final EnumSet<AuditCategory> disabledRestCategories;\n+    private final EnumSet<AuditCategory> disabledTransportCategories;\n+\n+    private AuditConfig(final boolean isRestApiAuditEnabled,\n+                        final boolean isTransportApiAuditEnabled,\n+                        final boolean resolveBulkRequests,\n+                        final boolean logRequestBody,\n+                        final boolean resolveIndices,\n+                        final boolean excludeSensitiveHeaders,\n+                        final Set<String> ignoredAuditUsers,\n+                        final Set<String> ignoredComplianceUsersForRead,\n+                        final Set<String> ignoredComplianceUsersForWrite,\n+                        final Set<String> ignoredAuditRequests,\n+                        final EnumSet<AuditCategory> disabledRestCategories,\n+                        final EnumSet<AuditCategory> disabledTransportCategories) {\n+        this.isRestApiAuditEnabled = isRestApiAuditEnabled;\n+        this.isTransportApiAuditEnabled = isTransportApiAuditEnabled;\n+        this.resolveBulkRequests = resolveBulkRequests;\n+        this.logRequestBody = logRequestBody;\n+        this.resolveIndices = resolveIndices;\n+        this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+        this.ignoredAuditUsers = ignoredAuditUsers;\n+        this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+        this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+        this.ignoreAuditRequests = ignoredAuditRequests;\n+        this.disabledRestCategories = disabledRestCategories;\n+        this.disabledTransportCategories = disabledTransportCategories;\n+    }\n+\n+    public static AuditConfig from(Settings settings) {\n+        final boolean isRestApiAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n+        final boolean isTransportAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n+        final boolean resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n+        final boolean logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n+        final boolean resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n+        final boolean excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+        final String opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n+\n+        final EnumSet<AuditCategory> disabledRestCategories = AuditCategory.parse(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES,\n+                true));\n+\n+        final EnumSet<AuditCategory> disabledTransportCategories = AuditCategory.parse(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES,\n+                true));\n+\n+        final Set<String> ignoredAuditUsers = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoredComplianceUsersForRead = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoredComplianceUsersForWrite = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoreAuditRequests = ImmutableSet.copyOf(settings.getAsList(\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS,\n+                Collections.emptyList()));\n+\n+        return new AuditConfig(isRestApiAuditEnabled,\n+                isTransportAuditEnabled,\n+                resolveBulkRequests,\n+                logRequestBody,\n+                resolveIndices,\n+                excludeSensitiveHeaders,\n+                ignoredAuditUsers,\n+                ignoredComplianceUsersForRead,\n+                ignoredComplianceUsersForWrite,\n+                ignoreAuditRequests,\n+                disabledRestCategories,\n+                disabledTransportCategories);\n+    }\n+\n+    private static List<String> getSettingAsList(final Settings settings, final String key, final List<String> defaultList, final boolean ignoreCaseForNone) {\n+        final List<String> list = settings.getAsList(key, defaultList);\n+        if (list.size() == 1 && \"NONE\".equals(ignoreCaseForNone? list.get(0).toUpperCase() : list.get(0))) {\n+            return Collections.emptyList();\n+        }\n+        return list;\n+    }\n+\n+    public boolean isRestApiAuditEnabled() {\n+        return isRestApiAuditEnabled;\n+    }\n+\n+    public boolean isTransportApiAuditEnabled() {\n+        return isTransportApiAuditEnabled;\n+    }\n+\n+    public boolean shouldResolveBulkRequests() {\n+        return resolveBulkRequests;\n+    }\n+\n+    public boolean shouldLogRequestBody() {\n+        return logRequestBody;\n+    }\n+\n+    public boolean shouldResolveIndices() {\n+        return resolveIndices;\n+    }\n+\n+    public boolean shouldExcludeSensitiveHeaders() {\n+        return excludeSensitiveHeaders;\n+    }\n+\n+    public Set<String> getIgnoredAuditUsers() {\n+        return ignoredAuditUsers;\n+    }\n+\n+    public Set<String> getIgnoredComplianceUsersForRead() {\n+        return ignoredComplianceUsersForRead;\n+    }\n+\n+    public Set<String> getIgnoredComplianceUsersForWrite() {\n+        return ignoredComplianceUsersForWrite;\n+    }\n+\n+    public Set<String> getIgnoredAuditRequests() {\n+        return ignoreAuditRequests;\n+    }\n+\n+    public EnumSet<AuditCategory> getDisabledRestCategories() {\n+        return disabledRestCategories;\n+    }\n+\n+    public EnumSet<AuditCategory> getDisabledTransportCategories() {\n+        return disabledTransportCategories;\n+    }\n+\n+    public void log(Logger logger) {\n+        logger.info(\"Auditing on REST API is {}.\", isRestApiAuditEnabled ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing on Transport API is {}.\", isTransportApiAuditEnabled ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing of request body is {}.\", logRequestBody ? \"enabled\" : \"disabled\");\n+        logger.info(\"Bulk requests resolution is {} during request auditing.\", resolveBulkRequests ? \"enabled\" : \"disabled\");\n+        logger.info(\"Index resolution is {} during request auditing.\", resolveIndices ? \"enabled\" : \"disabled\");\n+        logger.info(\"Sensitive headers auditing is {}.\", excludeSensitiveHeaders ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing requests from {} users is disabled.\", ignoredAuditUsers);\n+        logger.info(\"Compliance read operation requests auditing from {} users is disabled.\", ignoredComplianceUsersForRead);\n+        logger.info(\"Compliance write operation requests auditing from {} users is disabled.\", ignoredComplianceUsersForWrite);\n+        logger.info(\"{} are excluded from REST API auditing.\", disabledRestCategories);\n+        logger.info(\"{} are excluded from Transport API auditing.\", disabledTransportCategories);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 184}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMzA2NTQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxNzo1MDoxNVrOGAzf_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxNzo1MDoxNVrOGAzf_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ5Njk1OQ==", "bodyText": "opendistrosecurityIndex is not used.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r403496959", "createdAt": "2020-04-04T17:50:15Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,206 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {\n+    public static class Filter {\n+        private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+        private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+                Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                        AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+        private final boolean isRestApiAuditEnabled;\n+        private final boolean isTransportApiAuditEnabled;\n+        private final boolean resolveBulkRequests;\n+        private final boolean logRequestBody;\n+        private final boolean resolveIndices;\n+        private final boolean excludeSensitiveHeaders;\n+        private final Set<String> ignoredAuditUsers;\n+        private final Set<String> ignoredComplianceUsersForRead;\n+        private final Set<String> ignoredComplianceUsersForWrite;\n+        private final Set<String> ignoreAuditRequests;\n+        private final EnumSet<AuditCategory> disabledRestCategories;\n+        private final EnumSet<AuditCategory> disabledTransportCategories;\n+\n+        private Filter(final boolean isRestApiAuditEnabled,\n+                       final boolean isTransportApiAuditEnabled,\n+                       final boolean resolveBulkRequests,\n+                       final boolean logRequestBody,\n+                       final boolean resolveIndices,\n+                       final boolean excludeSensitiveHeaders,\n+                       final Set<String> ignoredAuditUsers,\n+                       final Set<String> ignoredComplianceUsersForRead,\n+                       final Set<String> ignoredComplianceUsersForWrite,\n+                       final Set<String> ignoredAuditRequests,\n+                       final EnumSet<AuditCategory> disabledRestCategories,\n+                       final EnumSet<AuditCategory> disabledTransportCategories) {\n+            this.isRestApiAuditEnabled = isRestApiAuditEnabled;\n+            this.isTransportApiAuditEnabled = isTransportApiAuditEnabled;\n+            this.resolveBulkRequests = resolveBulkRequests;\n+            this.logRequestBody = logRequestBody;\n+            this.resolveIndices = resolveIndices;\n+            this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+            this.ignoredAuditUsers = ignoredAuditUsers;\n+            this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+            this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+            this.ignoreAuditRequests = ignoredAuditRequests;\n+            this.disabledRestCategories = disabledRestCategories;\n+            this.disabledTransportCategories = disabledTransportCategories;\n+        }\n+\n+        public static Filter from(Settings settings) {\n+            final boolean isRestApiAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n+            final boolean isTransportAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n+            final boolean resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n+            final boolean logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n+            final boolean resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n+            final boolean excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+            final String opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02410371433a36a60a8ab3bcfce60ee1cf515cee"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDI5Njk1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMzo0ODoxM1rOGCaIaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMzo0ODoxM1rOGCaIaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE3ODQ3NQ==", "bodyText": "[suggestion]: we might consider including Lombok as a dependency in the future as it will simplify adding constructors, setters, getters and builders. Created issue https://github.com/opendistro-for-elasticsearch/security/issues/363", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r405178475", "createdAt": "2020-04-07T23:48:13Z", "author": {"login": "debjanibnrj"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,205 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {\n+    public static class Filter {\n+        private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+        private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+                Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                        AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+        private final boolean isRestApiAuditEnabled;\n+        private final boolean isTransportApiAuditEnabled;\n+        private final boolean resolveBulkRequests;\n+        private final boolean logRequestBody;\n+        private final boolean resolveIndices;\n+        private final boolean excludeSensitiveHeaders;\n+        private final Set<String> ignoredAuditUsers;\n+        private final Set<String> ignoredComplianceUsersForRead;\n+        private final Set<String> ignoredComplianceUsersForWrite;\n+        private final Set<String> ignoreAuditRequests;\n+        private final EnumSet<AuditCategory> disabledRestCategories;\n+        private final EnumSet<AuditCategory> disabledTransportCategories;\n+\n+        private Filter(final boolean isRestApiAuditEnabled,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83bdfb791bb857530d27e3db0347129973f8d9ff"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDMwMzg2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMzo1MTozNlrOGCaMhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMDoyMzo0OFrOGCax8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE3OTUyNQ==", "bodyText": "just curious, why does this flag default to false and the others to true?", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r405179525", "createdAt": "2020-04-07T23:51:36Z", "author": {"login": "debjanibnrj"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,205 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {\n+    public static class Filter {\n+        private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+        private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+                Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                        AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+        private final boolean isRestApiAuditEnabled;\n+        private final boolean isTransportApiAuditEnabled;\n+        private final boolean resolveBulkRequests;\n+        private final boolean logRequestBody;\n+        private final boolean resolveIndices;\n+        private final boolean excludeSensitiveHeaders;\n+        private final Set<String> ignoredAuditUsers;\n+        private final Set<String> ignoredComplianceUsersForRead;\n+        private final Set<String> ignoredComplianceUsersForWrite;\n+        private final Set<String> ignoreAuditRequests;\n+        private final EnumSet<AuditCategory> disabledRestCategories;\n+        private final EnumSet<AuditCategory> disabledTransportCategories;\n+\n+        private Filter(final boolean isRestApiAuditEnabled,\n+                       final boolean isTransportApiAuditEnabled,\n+                       final boolean resolveBulkRequests,\n+                       final boolean logRequestBody,\n+                       final boolean resolveIndices,\n+                       final boolean excludeSensitiveHeaders,\n+                       final Set<String> ignoredAuditUsers,\n+                       final Set<String> ignoredComplianceUsersForRead,\n+                       final Set<String> ignoredComplianceUsersForWrite,\n+                       final Set<String> ignoredAuditRequests,\n+                       final EnumSet<AuditCategory> disabledRestCategories,\n+                       final EnumSet<AuditCategory> disabledTransportCategories) {\n+            this.isRestApiAuditEnabled = isRestApiAuditEnabled;\n+            this.isTransportApiAuditEnabled = isTransportApiAuditEnabled;\n+            this.resolveBulkRequests = resolveBulkRequests;\n+            this.logRequestBody = logRequestBody;\n+            this.resolveIndices = resolveIndices;\n+            this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+            this.ignoredAuditUsers = ignoredAuditUsers;\n+            this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+            this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+            this.ignoreAuditRequests = ignoredAuditRequests;\n+            this.disabledRestCategories = disabledRestCategories;\n+            this.disabledTransportCategories = disabledTransportCategories;\n+        }\n+\n+        public static Filter from(Settings settings) {\n+            final boolean isRestApiAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n+            final boolean isTransportAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n+            final boolean resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83bdfb791bb857530d27e3db0347129973f8d9ff"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4OTEwNg==", "bodyText": "Retained the existing default.\nResolving bulk requests results in additional computation hence user must intentionally set to true.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r405189106", "createdAt": "2020-04-08T00:23:48Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,205 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {\n+    public static class Filter {\n+        private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+        private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+                Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                        AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+        private final boolean isRestApiAuditEnabled;\n+        private final boolean isTransportApiAuditEnabled;\n+        private final boolean resolveBulkRequests;\n+        private final boolean logRequestBody;\n+        private final boolean resolveIndices;\n+        private final boolean excludeSensitiveHeaders;\n+        private final Set<String> ignoredAuditUsers;\n+        private final Set<String> ignoredComplianceUsersForRead;\n+        private final Set<String> ignoredComplianceUsersForWrite;\n+        private final Set<String> ignoreAuditRequests;\n+        private final EnumSet<AuditCategory> disabledRestCategories;\n+        private final EnumSet<AuditCategory> disabledTransportCategories;\n+\n+        private Filter(final boolean isRestApiAuditEnabled,\n+                       final boolean isTransportApiAuditEnabled,\n+                       final boolean resolveBulkRequests,\n+                       final boolean logRequestBody,\n+                       final boolean resolveIndices,\n+                       final boolean excludeSensitiveHeaders,\n+                       final Set<String> ignoredAuditUsers,\n+                       final Set<String> ignoredComplianceUsersForRead,\n+                       final Set<String> ignoredComplianceUsersForWrite,\n+                       final Set<String> ignoredAuditRequests,\n+                       final EnumSet<AuditCategory> disabledRestCategories,\n+                       final EnumSet<AuditCategory> disabledTransportCategories) {\n+            this.isRestApiAuditEnabled = isRestApiAuditEnabled;\n+            this.isTransportApiAuditEnabled = isTransportApiAuditEnabled;\n+            this.resolveBulkRequests = resolveBulkRequests;\n+            this.logRequestBody = logRequestBody;\n+            this.resolveIndices = resolveIndices;\n+            this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+            this.ignoredAuditUsers = ignoredAuditUsers;\n+            this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+            this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+            this.ignoreAuditRequests = ignoredAuditRequests;\n+            this.disabledRestCategories = disabledRestCategories;\n+            this.disabledTransportCategories = disabledTransportCategories;\n+        }\n+\n+        public static Filter from(Settings settings) {\n+            final boolean isRestApiAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n+            final boolean isTransportAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n+            final boolean resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE3OTUyNQ=="}, "originalCommit": {"oid": "83bdfb791bb857530d27e3db0347129973f8d9ff"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDMxMDI1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMzo1NDo0N1rOGCaQdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMDo1Nzo1OVrOGCbW3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4MDUzNQ==", "bodyText": "Would be useful to provide doc comments for classes in the future.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r405180535", "createdAt": "2020-04-07T23:54:47Z", "author": {"login": "debjanibnrj"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,205 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83bdfb791bb857530d27e3db0347129973f8d9ff"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5ODU1Nw==", "bodyText": "Add private constructor for AuditConfig to avoid class misuse. It is a container for other classes inside AuditConfig.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r405198557", "createdAt": "2020-04-08T00:57:59Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,205 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4MDUzNQ=="}, "originalCommit": {"oid": "83bdfb791bb857530d27e3db0347129973f8d9ff"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDMxMzQxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMzo1NjozNVrOGCaSiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMToyNDo0NFrOGCbyYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4MTA2Nw==", "bodyText": "I see us using this function and then converting the output to a set. Any reason why we don't return a Set by default.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r405181067", "createdAt": "2020-04-07T23:56:35Z", "author": {"login": "debjanibnrj"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,205 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {\n+    public static class Filter {\n+        private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+        private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+                Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                        AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+        private final boolean isRestApiAuditEnabled;\n+        private final boolean isTransportApiAuditEnabled;\n+        private final boolean resolveBulkRequests;\n+        private final boolean logRequestBody;\n+        private final boolean resolveIndices;\n+        private final boolean excludeSensitiveHeaders;\n+        private final Set<String> ignoredAuditUsers;\n+        private final Set<String> ignoredComplianceUsersForRead;\n+        private final Set<String> ignoredComplianceUsersForWrite;\n+        private final Set<String> ignoreAuditRequests;\n+        private final EnumSet<AuditCategory> disabledRestCategories;\n+        private final EnumSet<AuditCategory> disabledTransportCategories;\n+\n+        private Filter(final boolean isRestApiAuditEnabled,\n+                       final boolean isTransportApiAuditEnabled,\n+                       final boolean resolveBulkRequests,\n+                       final boolean logRequestBody,\n+                       final boolean resolveIndices,\n+                       final boolean excludeSensitiveHeaders,\n+                       final Set<String> ignoredAuditUsers,\n+                       final Set<String> ignoredComplianceUsersForRead,\n+                       final Set<String> ignoredComplianceUsersForWrite,\n+                       final Set<String> ignoredAuditRequests,\n+                       final EnumSet<AuditCategory> disabledRestCategories,\n+                       final EnumSet<AuditCategory> disabledTransportCategories) {\n+            this.isRestApiAuditEnabled = isRestApiAuditEnabled;\n+            this.isTransportApiAuditEnabled = isTransportApiAuditEnabled;\n+            this.resolveBulkRequests = resolveBulkRequests;\n+            this.logRequestBody = logRequestBody;\n+            this.resolveIndices = resolveIndices;\n+            this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+            this.ignoredAuditUsers = ignoredAuditUsers;\n+            this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+            this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+            this.ignoreAuditRequests = ignoredAuditRequests;\n+            this.disabledRestCategories = disabledRestCategories;\n+            this.disabledTransportCategories = disabledTransportCategories;\n+        }\n+\n+        public static Filter from(Settings settings) {\n+            final boolean isRestApiAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n+            final boolean isTransportAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n+            final boolean resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n+            final boolean logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n+            final boolean resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n+            final boolean excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+\n+            final EnumSet<AuditCategory> disabledRestCategories = AuditCategory.parse(getSettingAsList(\n+                    settings,\n+                    ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES,\n+                    DEFAULT_DISABLED_CATEGORIES,\n+                    true));\n+\n+            final EnumSet<AuditCategory> disabledTransportCategories = AuditCategory.parse(getSettingAsList(\n+                    settings,\n+                    ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES,\n+                    DEFAULT_DISABLED_CATEGORIES,\n+                    true));\n+\n+            final Set<String> ignoredAuditUsers = ImmutableSet.copyOf(getSettingAsList(\n+                    settings,\n+                    ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS,\n+                    DEFAULT_IGNORED_USERS,\n+                    false));\n+\n+            final Set<String> ignoredComplianceUsersForRead = ImmutableSet.copyOf(getSettingAsList(\n+                    settings,\n+                    ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS,\n+                    DEFAULT_IGNORED_USERS,\n+                    false));\n+\n+            final Set<String> ignoredComplianceUsersForWrite = ImmutableSet.copyOf(getSettingAsList(\n+                    settings,\n+                    ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS,\n+                    DEFAULT_IGNORED_USERS,\n+                    false));\n+\n+            final Set<String> ignoreAuditRequests = ImmutableSet.copyOf(settings.getAsList(\n+                    ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS,\n+                    Collections.emptyList()));\n+\n+            return new Filter(isRestApiAuditEnabled,\n+                    isTransportAuditEnabled,\n+                    resolveBulkRequests,\n+                    logRequestBody,\n+                    resolveIndices,\n+                    excludeSensitiveHeaders,\n+                    ignoredAuditUsers,\n+                    ignoredComplianceUsersForRead,\n+                    ignoredComplianceUsersForWrite,\n+                    ignoreAuditRequests,\n+                    disabledRestCategories,\n+                    disabledTransportCategories);\n+        }\n+\n+        private static List<String> getSettingAsList(final Settings settings, final String key, final List<String> defaultList, final boolean ignoreCaseForNone) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83bdfb791bb857530d27e3db0347129973f8d9ff"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5Mjk2Mg==", "bodyText": "Sounds good!", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r405192962", "createdAt": "2020-04-08T00:37:25Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,205 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {\n+    public static class Filter {\n+        private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+        private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+                Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                        AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+        private final boolean isRestApiAuditEnabled;\n+        private final boolean isTransportApiAuditEnabled;\n+        private final boolean resolveBulkRequests;\n+        private final boolean logRequestBody;\n+        private final boolean resolveIndices;\n+        private final boolean excludeSensitiveHeaders;\n+        private final Set<String> ignoredAuditUsers;\n+        private final Set<String> ignoredComplianceUsersForRead;\n+        private final Set<String> ignoredComplianceUsersForWrite;\n+        private final Set<String> ignoreAuditRequests;\n+        private final EnumSet<AuditCategory> disabledRestCategories;\n+        private final EnumSet<AuditCategory> disabledTransportCategories;\n+\n+        private Filter(final boolean isRestApiAuditEnabled,\n+                       final boolean isTransportApiAuditEnabled,\n+                       final boolean resolveBulkRequests,\n+                       final boolean logRequestBody,\n+                       final boolean resolveIndices,\n+                       final boolean excludeSensitiveHeaders,\n+                       final Set<String> ignoredAuditUsers,\n+                       final Set<String> ignoredComplianceUsersForRead,\n+                       final Set<String> ignoredComplianceUsersForWrite,\n+                       final Set<String> ignoredAuditRequests,\n+                       final EnumSet<AuditCategory> disabledRestCategories,\n+                       final EnumSet<AuditCategory> disabledTransportCategories) {\n+            this.isRestApiAuditEnabled = isRestApiAuditEnabled;\n+            this.isTransportApiAuditEnabled = isTransportApiAuditEnabled;\n+            this.resolveBulkRequests = resolveBulkRequests;\n+            this.logRequestBody = logRequestBody;\n+            this.resolveIndices = resolveIndices;\n+            this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+            this.ignoredAuditUsers = ignoredAuditUsers;\n+            this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+            this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+            this.ignoreAuditRequests = ignoredAuditRequests;\n+            this.disabledRestCategories = disabledRestCategories;\n+            this.disabledTransportCategories = disabledTransportCategories;\n+        }\n+\n+        public static Filter from(Settings settings) {\n+            final boolean isRestApiAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n+            final boolean isTransportAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n+            final boolean resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n+            final boolean logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n+            final boolean resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n+            final boolean excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+\n+            final EnumSet<AuditCategory> disabledRestCategories = AuditCategory.parse(getSettingAsList(\n+                    settings,\n+                    ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES,\n+                    DEFAULT_DISABLED_CATEGORIES,\n+                    true));\n+\n+            final EnumSet<AuditCategory> disabledTransportCategories = AuditCategory.parse(getSettingAsList(\n+                    settings,\n+                    ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES,\n+                    DEFAULT_DISABLED_CATEGORIES,\n+                    true));\n+\n+            final Set<String> ignoredAuditUsers = ImmutableSet.copyOf(getSettingAsList(\n+                    settings,\n+                    ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS,\n+                    DEFAULT_IGNORED_USERS,\n+                    false));\n+\n+            final Set<String> ignoredComplianceUsersForRead = ImmutableSet.copyOf(getSettingAsList(\n+                    settings,\n+                    ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS,\n+                    DEFAULT_IGNORED_USERS,\n+                    false));\n+\n+            final Set<String> ignoredComplianceUsersForWrite = ImmutableSet.copyOf(getSettingAsList(\n+                    settings,\n+                    ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS,\n+                    DEFAULT_IGNORED_USERS,\n+                    false));\n+\n+            final Set<String> ignoreAuditRequests = ImmutableSet.copyOf(settings.getAsList(\n+                    ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS,\n+                    Collections.emptyList()));\n+\n+            return new Filter(isRestApiAuditEnabled,\n+                    isTransportAuditEnabled,\n+                    resolveBulkRequests,\n+                    logRequestBody,\n+                    resolveIndices,\n+                    excludeSensitiveHeaders,\n+                    ignoredAuditUsers,\n+                    ignoredComplianceUsersForRead,\n+                    ignoredComplianceUsersForWrite,\n+                    ignoreAuditRequests,\n+                    disabledRestCategories,\n+                    disabledTransportCategories);\n+        }\n+\n+        private static List<String> getSettingAsList(final Settings settings, final String key, final List<String> defaultList, final boolean ignoreCaseForNone) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4MTA2Nw=="}, "originalCommit": {"oid": "83bdfb791bb857530d27e3db0347129973f8d9ff"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIwNTYwMg==", "bodyText": "Converting the output to a set has an additional cost when it is passed to AuditCategory.parse() as it will be constructing a different set and checking for uniqueness again (not a big deal).", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r405205602", "createdAt": "2020-04-08T01:24:44Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,205 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {\n+    public static class Filter {\n+        private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+        private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+                Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                        AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+        private final boolean isRestApiAuditEnabled;\n+        private final boolean isTransportApiAuditEnabled;\n+        private final boolean resolveBulkRequests;\n+        private final boolean logRequestBody;\n+        private final boolean resolveIndices;\n+        private final boolean excludeSensitiveHeaders;\n+        private final Set<String> ignoredAuditUsers;\n+        private final Set<String> ignoredComplianceUsersForRead;\n+        private final Set<String> ignoredComplianceUsersForWrite;\n+        private final Set<String> ignoreAuditRequests;\n+        private final EnumSet<AuditCategory> disabledRestCategories;\n+        private final EnumSet<AuditCategory> disabledTransportCategories;\n+\n+        private Filter(final boolean isRestApiAuditEnabled,\n+                       final boolean isTransportApiAuditEnabled,\n+                       final boolean resolveBulkRequests,\n+                       final boolean logRequestBody,\n+                       final boolean resolveIndices,\n+                       final boolean excludeSensitiveHeaders,\n+                       final Set<String> ignoredAuditUsers,\n+                       final Set<String> ignoredComplianceUsersForRead,\n+                       final Set<String> ignoredComplianceUsersForWrite,\n+                       final Set<String> ignoredAuditRequests,\n+                       final EnumSet<AuditCategory> disabledRestCategories,\n+                       final EnumSet<AuditCategory> disabledTransportCategories) {\n+            this.isRestApiAuditEnabled = isRestApiAuditEnabled;\n+            this.isTransportApiAuditEnabled = isTransportApiAuditEnabled;\n+            this.resolveBulkRequests = resolveBulkRequests;\n+            this.logRequestBody = logRequestBody;\n+            this.resolveIndices = resolveIndices;\n+            this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+            this.ignoredAuditUsers = ignoredAuditUsers;\n+            this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+            this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+            this.ignoreAuditRequests = ignoredAuditRequests;\n+            this.disabledRestCategories = disabledRestCategories;\n+            this.disabledTransportCategories = disabledTransportCategories;\n+        }\n+\n+        public static Filter from(Settings settings) {\n+            final boolean isRestApiAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n+            final boolean isTransportAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n+            final boolean resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n+            final boolean logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n+            final boolean resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n+            final boolean excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+\n+            final EnumSet<AuditCategory> disabledRestCategories = AuditCategory.parse(getSettingAsList(\n+                    settings,\n+                    ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES,\n+                    DEFAULT_DISABLED_CATEGORIES,\n+                    true));\n+\n+            final EnumSet<AuditCategory> disabledTransportCategories = AuditCategory.parse(getSettingAsList(\n+                    settings,\n+                    ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES,\n+                    DEFAULT_DISABLED_CATEGORIES,\n+                    true));\n+\n+            final Set<String> ignoredAuditUsers = ImmutableSet.copyOf(getSettingAsList(\n+                    settings,\n+                    ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS,\n+                    DEFAULT_IGNORED_USERS,\n+                    false));\n+\n+            final Set<String> ignoredComplianceUsersForRead = ImmutableSet.copyOf(getSettingAsList(\n+                    settings,\n+                    ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS,\n+                    DEFAULT_IGNORED_USERS,\n+                    false));\n+\n+            final Set<String> ignoredComplianceUsersForWrite = ImmutableSet.copyOf(getSettingAsList(\n+                    settings,\n+                    ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS,\n+                    DEFAULT_IGNORED_USERS,\n+                    false));\n+\n+            final Set<String> ignoreAuditRequests = ImmutableSet.copyOf(settings.getAsList(\n+                    ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS,\n+                    Collections.emptyList()));\n+\n+            return new Filter(isRestApiAuditEnabled,\n+                    isTransportAuditEnabled,\n+                    resolveBulkRequests,\n+                    logRequestBody,\n+                    resolveIndices,\n+                    excludeSensitiveHeaders,\n+                    ignoredAuditUsers,\n+                    ignoredComplianceUsersForRead,\n+                    ignoredComplianceUsersForWrite,\n+                    ignoreAuditRequests,\n+                    disabledRestCategories,\n+                    disabledTransportCategories);\n+        }\n+\n+        private static List<String> getSettingAsList(final Settings settings, final String key, final List<String> defaultList, final boolean ignoreCaseForNone) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4MTA2Nw=="}, "originalCommit": {"oid": "83bdfb791bb857530d27e3db0347129973f8d9ff"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDMxOTkzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "isResolved": false, "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMzo1OToyOFrOGCaWOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMjo0NToxNFrOGCdFCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4MjAxMA==", "bodyText": "nit: maybe rename this to logger. auditConfigFilter.log(log) was a little difficult for me to understand", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r405182010", "createdAt": "2020-04-07T23:59:28Z", "author": {"login": "debjanibnrj"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "diffHunk": "@@ -80,33 +79,16 @@\n import com.google.common.io.BaseEncoding;\n \n public abstract class AbstractAuditLog implements AuditLog {\n-\n-    private static final List<String> DEFAULT_DISABLED_CATEGORIES = Arrays.asList(AuditCategory.AUTHENTICATED.toString(), AuditCategory.GRANTED_PRIVILEGES.toString());\n-\n     protected final Logger log = LogManager.getLogger(this.getClass());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83bdfb791bb857530d27e3db0347129973f8d9ff"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MDM2MA==", "bodyText": "I had renamed this to logger. @vrozov wanted it renamed back to log", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r405190360", "createdAt": "2020-04-08T00:28:04Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "diffHunk": "@@ -80,33 +79,16 @@\n import com.google.common.io.BaseEncoding;\n \n public abstract class AbstractAuditLog implements AuditLog {\n-\n-    private static final List<String> DEFAULT_DISABLED_CATEGORIES = Arrays.asList(AuditCategory.AUTHENTICATED.toString(), AuditCategory.GRANTED_PRIVILEGES.toString());\n-\n     protected final Logger log = LogManager.getLogger(this.getClass());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4MjAxMA=="}, "originalCommit": {"oid": "83bdfb791bb857530d27e3db0347129973f8d9ff"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5OTM1Nw==", "bodyText": "@debjanibnrj It is more consistent with how Logger is named in other places and avoids unnecessary diffs.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r405199357", "createdAt": "2020-04-08T01:00:59Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "diffHunk": "@@ -80,33 +79,16 @@\n import com.google.common.io.BaseEncoding;\n \n public abstract class AbstractAuditLog implements AuditLog {\n-\n-    private static final List<String> DEFAULT_DISABLED_CATEGORIES = Arrays.asList(AuditCategory.AUTHENTICATED.toString(), AuditCategory.GRANTED_PRIVILEGES.toString());\n-\n     protected final Logger log = LogManager.getLogger(this.getClass());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4MjAxMA=="}, "originalCommit": {"oid": "83bdfb791bb857530d27e3db0347129973f8d9ff"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIwMTUxMg==", "bodyText": "@vrozov Fair point with reducing diffs but auditConfigFilter.log(log) would be confusing to anyone especially because this is around audit \"logging\"", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r405201512", "createdAt": "2020-04-08T01:09:25Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "diffHunk": "@@ -80,33 +79,16 @@\n import com.google.common.io.BaseEncoding;\n \n public abstract class AbstractAuditLog implements AuditLog {\n-\n-    private static final List<String> DEFAULT_DISABLED_CATEGORIES = Arrays.asList(AuditCategory.AUTHENTICATED.toString(), AuditCategory.GRANTED_PRIVILEGES.toString());\n-\n     protected final Logger log = LogManager.getLogger(this.getClass());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4MjAxMA=="}, "originalCommit": {"oid": "83bdfb791bb857530d27e3db0347129973f8d9ff"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIwNzI2Ng==", "bodyText": "IMO, it is a problem with method name, not Logger name. Rename AuditConfig.Filter.log().", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r405207266", "createdAt": "2020-04-08T01:30:58Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "diffHunk": "@@ -80,33 +79,16 @@\n import com.google.common.io.BaseEncoding;\n \n public abstract class AbstractAuditLog implements AuditLog {\n-\n-    private static final List<String> DEFAULT_DISABLED_CATEGORIES = Arrays.asList(AuditCategory.AUTHENTICATED.toString(), AuditCategory.GRANTED_PRIVILEGES.toString());\n-\n     protected final Logger log = LogManager.getLogger(this.getClass());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4MjAxMA=="}, "originalCommit": {"oid": "83bdfb791bb857530d27e3db0347129973f8d9ff"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIwODM0Mw==", "bodyText": "It is not a static function if thats what you mean.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r405208343", "createdAt": "2020-04-08T01:35:03Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "diffHunk": "@@ -80,33 +79,16 @@\n import com.google.common.io.BaseEncoding;\n \n public abstract class AbstractAuditLog implements AuditLog {\n-\n-    private static final List<String> DEFAULT_DISABLED_CATEGORIES = Arrays.asList(AuditCategory.AUTHENTICATED.toString(), AuditCategory.GRANTED_PRIVILEGES.toString());\n-\n     protected final Logger log = LogManager.getLogger(this.getClass());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4MjAxMA=="}, "originalCommit": {"oid": "83bdfb791bb857530d27e3db0347129973f8d9ff"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIxMDMyNQ==", "bodyText": "I mean that the minor readability problem is caused by AuditConfig.Filter class method name log(). It is not important whether it is static or not.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r405210325", "createdAt": "2020-04-08T01:43:05Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "diffHunk": "@@ -80,33 +79,16 @@\n import com.google.common.io.BaseEncoding;\n \n public abstract class AbstractAuditLog implements AuditLog {\n-\n-    private static final List<String> DEFAULT_DISABLED_CATEGORIES = Arrays.asList(AuditCategory.AUTHENTICATED.toString(), AuditCategory.GRANTED_PRIVILEGES.toString());\n-\n     protected final Logger log = LogManager.getLogger(this.getClass());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4MjAxMA=="}, "originalCommit": {"oid": "83bdfb791bb857530d27e3db0347129973f8d9ff"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIxMjYyMQ==", "bodyText": "If you want it renamed to something specific I will rename as you had previously suggested to use log() otherwise let's leave this. I m fine with this.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r405212621", "createdAt": "2020-04-08T01:51:37Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "diffHunk": "@@ -80,33 +79,16 @@\n import com.google.common.io.BaseEncoding;\n \n public abstract class AbstractAuditLog implements AuditLog {\n-\n-    private static final List<String> DEFAULT_DISABLED_CATEGORIES = Arrays.asList(AuditCategory.AUTHENTICATED.toString(), AuditCategory.GRANTED_PRIVILEGES.toString());\n-\n     protected final Logger log = LogManager.getLogger(this.getClass());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4MjAxMA=="}, "originalCommit": {"oid": "83bdfb791bb857530d27e3db0347129973f8d9ff"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIxNTg4NA==", "bodyText": "I am fine the current function name or with a different function name if you want to add readability. I strongly prefer log not to be renamed to logger.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r405215884", "createdAt": "2020-04-08T02:03:46Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "diffHunk": "@@ -80,33 +79,16 @@\n import com.google.common.io.BaseEncoding;\n \n public abstract class AbstractAuditLog implements AuditLog {\n-\n-    private static final List<String> DEFAULT_DISABLED_CATEGORIES = Arrays.asList(AuditCategory.AUTHENTICATED.toString(), AuditCategory.GRANTED_PRIVILEGES.toString());\n-\n     protected final Logger log = LogManager.getLogger(this.getClass());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4MjAxMA=="}, "originalCommit": {"oid": "83bdfb791bb857530d27e3db0347129973f8d9ff"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIyNjc2Mg==", "bodyText": "@vrozov Can you approve this PR in that case ?", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r405226762", "createdAt": "2020-04-08T02:45:14Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "diffHunk": "@@ -80,33 +79,16 @@\n import com.google.common.io.BaseEncoding;\n \n public abstract class AbstractAuditLog implements AuditLog {\n-\n-    private static final List<String> DEFAULT_DISABLED_CATEGORIES = Arrays.asList(AuditCategory.AUTHENTICATED.toString(), AuditCategory.GRANTED_PRIVILEGES.toString());\n-\n     protected final Logger log = LogManager.getLogger(this.getClass());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4MjAxMA=="}, "originalCommit": {"oid": "83bdfb791bb857530d27e3db0347129973f8d9ff"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDMyODE0OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfigFilterTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMDowMzo0MlrOGCabHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMDo0ODoyM1rOGCbMeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4MzI2MA==", "bodyText": "wildcard imports are generally considered bad practice.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r405183260", "createdAt": "2020-04-08T00:03:42Z", "author": {"login": "debjanibnrj"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfigFilterTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableSet;\n+import org.elasticsearch.common.settings.Settings;\n+import org.junit.Test;\n+\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.Set;\n+\n+import static com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83bdfb791bb857530d27e3db0347129973f8d9ff"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MTc3NQ==", "bodyText": "I assumed it is generally fine to have wildcard imports for constants/values.\nRemoving this would add 10 other import lines.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r405191775", "createdAt": "2020-04-08T00:32:42Z", "author": {"login": "sujithvm"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfigFilterTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableSet;\n+import org.elasticsearch.common.settings.Settings;\n+import org.junit.Test;\n+\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.Set;\n+\n+import static com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4MzI2MA=="}, "originalCommit": {"oid": "83bdfb791bb857530d27e3db0347129973f8d9ff"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MjcwMQ==", "bodyText": "Seeing as your using most audit categories for the tests this is a fair point. For import static org.junit.Assert.*; it may be better to specify the specific imports.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r405192701", "createdAt": "2020-04-08T00:36:19Z", "author": {"login": "debjanibnrj"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfigFilterTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableSet;\n+import org.elasticsearch.common.settings.Settings;\n+import org.junit.Test;\n+\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.Set;\n+\n+import static com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4MzI2MA=="}, "originalCommit": {"oid": "83bdfb791bb857530d27e3db0347129973f8d9ff"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5NTg5Ng==", "bodyText": "Should probably write a checkstyle rule for this", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r405195896", "createdAt": "2020-04-08T00:48:23Z", "author": {"login": "sujithvm"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfigFilterTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableSet;\n+import org.elasticsearch.common.settings.Settings;\n+import org.junit.Test;\n+\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.Set;\n+\n+import static com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4MzI2MA=="}, "originalCommit": {"oid": "83bdfb791bb857530d27e3db0347129973f8d9ff"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDYyNzUyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMjo1Mjo1NlrOGCdMtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMzoxNzoyMVrOGCdkVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIyODcyNg==", "bodyText": "Consider  moving this method to AuditConfig from AuditConfig.Filter", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r405228726", "createdAt": "2020-04-08T02:52:56Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,268 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * Class represents configuration for audit logging.\n+ */\n+public class AuditConfig {\n+\n+    private AuditConfig() { }\n+\n+    /**\n+     * Filter represents set of filtering configuration settings for audit logging.\n+     * Audit logger will use these settings to determine what audit logs are to be generated.\n+     */\n+    public static class Filter {\n+        private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+        private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+                Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                        AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+        private final boolean isRestApiAuditEnabled;\n+        private final boolean isTransportApiAuditEnabled;\n+        private final boolean resolveBulkRequests;\n+        private final boolean logRequestBody;\n+        private final boolean resolveIndices;\n+        private final boolean excludeSensitiveHeaders;\n+        private final Set<String> ignoredAuditUsers;\n+        private final Set<String> ignoredComplianceUsersForRead;\n+        private final Set<String> ignoredComplianceUsersForWrite;\n+        private final Set<String> ignoreAuditRequests;\n+        private final EnumSet<AuditCategory> disabledRestCategories;\n+        private final EnumSet<AuditCategory> disabledTransportCategories;\n+\n+        private Filter(final boolean isRestApiAuditEnabled,\n+                       final boolean isTransportApiAuditEnabled,\n+                       final boolean resolveBulkRequests,\n+                       final boolean logRequestBody,\n+                       final boolean resolveIndices,\n+                       final boolean excludeSensitiveHeaders,\n+                       final Set<String> ignoredAuditUsers,\n+                       final Set<String> ignoredComplianceUsersForRead,\n+                       final Set<String> ignoredComplianceUsersForWrite,\n+                       final Set<String> ignoredAuditRequests,\n+                       final EnumSet<AuditCategory> disabledRestCategories,\n+                       final EnumSet<AuditCategory> disabledTransportCategories) {\n+            this.isRestApiAuditEnabled = isRestApiAuditEnabled;\n+            this.isTransportApiAuditEnabled = isTransportApiAuditEnabled;\n+            this.resolveBulkRequests = resolveBulkRequests;\n+            this.logRequestBody = logRequestBody;\n+            this.resolveIndices = resolveIndices;\n+            this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+            this.ignoredAuditUsers = ignoredAuditUsers;\n+            this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+            this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+            this.ignoreAuditRequests = ignoredAuditRequests;\n+            this.disabledRestCategories = disabledRestCategories;\n+            this.disabledTransportCategories = disabledTransportCategories;\n+        }\n+\n+        /**\n+         * Generate audit logging configuration from settings defined in elasticsearch.yml\n+         * @param settings settings\n+         * @return audit configuration filter\n+         */\n+        public static Filter from(Settings settings) {\n+            final boolean isRestApiAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n+            final boolean isTransportAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n+            final boolean resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n+            final boolean logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n+            final boolean resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n+            final boolean excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+\n+            final EnumSet<AuditCategory> disabledRestCategories = AuditCategory.parse(getSettingAsSet(\n+                    settings,\n+                    ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES,\n+                    DEFAULT_DISABLED_CATEGORIES,\n+                    true));\n+\n+            final EnumSet<AuditCategory> disabledTransportCategories = AuditCategory.parse(getSettingAsSet(\n+                    settings,\n+                    ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES,\n+                    DEFAULT_DISABLED_CATEGORIES,\n+                    true));\n+\n+            final Set<String> ignoredAuditUsers = getSettingAsSet(\n+                    settings,\n+                    ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS,\n+                    DEFAULT_IGNORED_USERS,\n+                    false);\n+\n+            final Set<String> ignoredComplianceUsersForRead = getSettingAsSet(\n+                    settings,\n+                    ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS,\n+                    DEFAULT_IGNORED_USERS,\n+                    false);\n+\n+            final Set<String> ignoredComplianceUsersForWrite = getSettingAsSet(\n+                    settings,\n+                    ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS,\n+                    DEFAULT_IGNORED_USERS,\n+                    false);\n+\n+            final Set<String> ignoreAuditRequests = ImmutableSet.copyOf(settings.getAsList(\n+                    ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS,\n+                    Collections.emptyList()));\n+\n+            return new Filter(isRestApiAuditEnabled,\n+                    isTransportAuditEnabled,\n+                    resolveBulkRequests,\n+                    logRequestBody,\n+                    resolveIndices,\n+                    excludeSensitiveHeaders,\n+                    ignoredAuditUsers,\n+                    ignoredComplianceUsersForRead,\n+                    ignoredComplianceUsersForWrite,\n+                    ignoreAuditRequests,\n+                    disabledRestCategories,\n+                    disabledTransportCategories);\n+        }\n+\n+        private static Set<String> getSettingAsSet(final Settings settings, final String key, final List<String> defaultList, final boolean ignoreCaseForNone) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60cf91df686ae5833494df60776862df078fad1a"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIzNDc3Mg==", "bodyText": "Will move it when needed as this has more restricted scope as NONE handling is not used everywhere as theres plans to deprecate it.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r405234772", "createdAt": "2020-04-08T03:17:21Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,268 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * Class represents configuration for audit logging.\n+ */\n+public class AuditConfig {\n+\n+    private AuditConfig() { }\n+\n+    /**\n+     * Filter represents set of filtering configuration settings for audit logging.\n+     * Audit logger will use these settings to determine what audit logs are to be generated.\n+     */\n+    public static class Filter {\n+        private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+        private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+                Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                        AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+        private final boolean isRestApiAuditEnabled;\n+        private final boolean isTransportApiAuditEnabled;\n+        private final boolean resolveBulkRequests;\n+        private final boolean logRequestBody;\n+        private final boolean resolveIndices;\n+        private final boolean excludeSensitiveHeaders;\n+        private final Set<String> ignoredAuditUsers;\n+        private final Set<String> ignoredComplianceUsersForRead;\n+        private final Set<String> ignoredComplianceUsersForWrite;\n+        private final Set<String> ignoreAuditRequests;\n+        private final EnumSet<AuditCategory> disabledRestCategories;\n+        private final EnumSet<AuditCategory> disabledTransportCategories;\n+\n+        private Filter(final boolean isRestApiAuditEnabled,\n+                       final boolean isTransportApiAuditEnabled,\n+                       final boolean resolveBulkRequests,\n+                       final boolean logRequestBody,\n+                       final boolean resolveIndices,\n+                       final boolean excludeSensitiveHeaders,\n+                       final Set<String> ignoredAuditUsers,\n+                       final Set<String> ignoredComplianceUsersForRead,\n+                       final Set<String> ignoredComplianceUsersForWrite,\n+                       final Set<String> ignoredAuditRequests,\n+                       final EnumSet<AuditCategory> disabledRestCategories,\n+                       final EnumSet<AuditCategory> disabledTransportCategories) {\n+            this.isRestApiAuditEnabled = isRestApiAuditEnabled;\n+            this.isTransportApiAuditEnabled = isTransportApiAuditEnabled;\n+            this.resolveBulkRequests = resolveBulkRequests;\n+            this.logRequestBody = logRequestBody;\n+            this.resolveIndices = resolveIndices;\n+            this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+            this.ignoredAuditUsers = ignoredAuditUsers;\n+            this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+            this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+            this.ignoreAuditRequests = ignoredAuditRequests;\n+            this.disabledRestCategories = disabledRestCategories;\n+            this.disabledTransportCategories = disabledTransportCategories;\n+        }\n+\n+        /**\n+         * Generate audit logging configuration from settings defined in elasticsearch.yml\n+         * @param settings settings\n+         * @return audit configuration filter\n+         */\n+        public static Filter from(Settings settings) {\n+            final boolean isRestApiAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n+            final boolean isTransportAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n+            final boolean resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n+            final boolean logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n+            final boolean resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n+            final boolean excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+\n+            final EnumSet<AuditCategory> disabledRestCategories = AuditCategory.parse(getSettingAsSet(\n+                    settings,\n+                    ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES,\n+                    DEFAULT_DISABLED_CATEGORIES,\n+                    true));\n+\n+            final EnumSet<AuditCategory> disabledTransportCategories = AuditCategory.parse(getSettingAsSet(\n+                    settings,\n+                    ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES,\n+                    DEFAULT_DISABLED_CATEGORIES,\n+                    true));\n+\n+            final Set<String> ignoredAuditUsers = getSettingAsSet(\n+                    settings,\n+                    ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS,\n+                    DEFAULT_IGNORED_USERS,\n+                    false);\n+\n+            final Set<String> ignoredComplianceUsersForRead = getSettingAsSet(\n+                    settings,\n+                    ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS,\n+                    DEFAULT_IGNORED_USERS,\n+                    false);\n+\n+            final Set<String> ignoredComplianceUsersForWrite = getSettingAsSet(\n+                    settings,\n+                    ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS,\n+                    DEFAULT_IGNORED_USERS,\n+                    false);\n+\n+            final Set<String> ignoreAuditRequests = ImmutableSet.copyOf(settings.getAsList(\n+                    ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS,\n+                    Collections.emptyList()));\n+\n+            return new Filter(isRestApiAuditEnabled,\n+                    isTransportAuditEnabled,\n+                    resolveBulkRequests,\n+                    logRequestBody,\n+                    resolveIndices,\n+                    excludeSensitiveHeaders,\n+                    ignoredAuditUsers,\n+                    ignoredComplianceUsersForRead,\n+                    ignoredComplianceUsersForWrite,\n+                    ignoreAuditRequests,\n+                    disabledRestCategories,\n+                    disabledTransportCategories);\n+        }\n+\n+        private static Set<String> getSettingAsSet(final Settings settings, final String key, final List<String> defaultList, final boolean ignoreCaseForNone) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIyODcyNg=="}, "originalCommit": {"oid": "60cf91df686ae5833494df60776862df078fad1a"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDY0MzkxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMzowMzoxMlrOGCdWug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMzoxNzozNlrOGCdknQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIzMTI5MA==", "bodyText": "In case conversion to Set is done inside this function, it is better to add isEmpty() check here. I am not 100% convinced that it is necessary to convert to Set from List here as it is not always necessary and in the future there may be different requirements for case-sensitivity of the returned Set.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r405231290", "createdAt": "2020-04-08T03:03:12Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,268 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * Class represents configuration for audit logging.\n+ */\n+public class AuditConfig {\n+\n+    private AuditConfig() { }\n+\n+    /**\n+     * Filter represents set of filtering configuration settings for audit logging.\n+     * Audit logger will use these settings to determine what audit logs are to be generated.\n+     */\n+    public static class Filter {\n+        private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+        private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+                Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                        AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+        private final boolean isRestApiAuditEnabled;\n+        private final boolean isTransportApiAuditEnabled;\n+        private final boolean resolveBulkRequests;\n+        private final boolean logRequestBody;\n+        private final boolean resolveIndices;\n+        private final boolean excludeSensitiveHeaders;\n+        private final Set<String> ignoredAuditUsers;\n+        private final Set<String> ignoredComplianceUsersForRead;\n+        private final Set<String> ignoredComplianceUsersForWrite;\n+        private final Set<String> ignoreAuditRequests;\n+        private final EnumSet<AuditCategory> disabledRestCategories;\n+        private final EnumSet<AuditCategory> disabledTransportCategories;\n+\n+        private Filter(final boolean isRestApiAuditEnabled,\n+                       final boolean isTransportApiAuditEnabled,\n+                       final boolean resolveBulkRequests,\n+                       final boolean logRequestBody,\n+                       final boolean resolveIndices,\n+                       final boolean excludeSensitiveHeaders,\n+                       final Set<String> ignoredAuditUsers,\n+                       final Set<String> ignoredComplianceUsersForRead,\n+                       final Set<String> ignoredComplianceUsersForWrite,\n+                       final Set<String> ignoredAuditRequests,\n+                       final EnumSet<AuditCategory> disabledRestCategories,\n+                       final EnumSet<AuditCategory> disabledTransportCategories) {\n+            this.isRestApiAuditEnabled = isRestApiAuditEnabled;\n+            this.isTransportApiAuditEnabled = isTransportApiAuditEnabled;\n+            this.resolveBulkRequests = resolveBulkRequests;\n+            this.logRequestBody = logRequestBody;\n+            this.resolveIndices = resolveIndices;\n+            this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+            this.ignoredAuditUsers = ignoredAuditUsers;\n+            this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+            this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+            this.ignoreAuditRequests = ignoredAuditRequests;\n+            this.disabledRestCategories = disabledRestCategories;\n+            this.disabledTransportCategories = disabledTransportCategories;\n+        }\n+\n+        /**\n+         * Generate audit logging configuration from settings defined in elasticsearch.yml\n+         * @param settings settings\n+         * @return audit configuration filter\n+         */\n+        public static Filter from(Settings settings) {\n+            final boolean isRestApiAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n+            final boolean isTransportAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n+            final boolean resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n+            final boolean logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n+            final boolean resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n+            final boolean excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+\n+            final EnumSet<AuditCategory> disabledRestCategories = AuditCategory.parse(getSettingAsSet(\n+                    settings,\n+                    ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES,\n+                    DEFAULT_DISABLED_CATEGORIES,\n+                    true));\n+\n+            final EnumSet<AuditCategory> disabledTransportCategories = AuditCategory.parse(getSettingAsSet(\n+                    settings,\n+                    ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES,\n+                    DEFAULT_DISABLED_CATEGORIES,\n+                    true));\n+\n+            final Set<String> ignoredAuditUsers = getSettingAsSet(\n+                    settings,\n+                    ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS,\n+                    DEFAULT_IGNORED_USERS,\n+                    false);\n+\n+            final Set<String> ignoredComplianceUsersForRead = getSettingAsSet(\n+                    settings,\n+                    ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS,\n+                    DEFAULT_IGNORED_USERS,\n+                    false);\n+\n+            final Set<String> ignoredComplianceUsersForWrite = getSettingAsSet(\n+                    settings,\n+                    ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS,\n+                    DEFAULT_IGNORED_USERS,\n+                    false);\n+\n+            final Set<String> ignoreAuditRequests = ImmutableSet.copyOf(settings.getAsList(\n+                    ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS,\n+                    Collections.emptyList()));\n+\n+            return new Filter(isRestApiAuditEnabled,\n+                    isTransportAuditEnabled,\n+                    resolveBulkRequests,\n+                    logRequestBody,\n+                    resolveIndices,\n+                    excludeSensitiveHeaders,\n+                    ignoredAuditUsers,\n+                    ignoredComplianceUsersForRead,\n+                    ignoredComplianceUsersForWrite,\n+                    ignoreAuditRequests,\n+                    disabledRestCategories,\n+                    disabledTransportCategories);\n+        }\n+\n+        private static Set<String> getSettingAsSet(final Settings settings, final String key, final List<String> defaultList, final boolean ignoreCaseForNone) {\n+            final List<String> list = settings.getAsList(key, defaultList);\n+            if (list.size() == 1 && \"NONE\".equals(ignoreCaseForNone? list.get(0).toUpperCase() : list.get(0))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60cf91df686ae5833494df60776862df078fad1a"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIzNDg0NQ==", "bodyText": "Will change it when needed in the future.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r405234845", "createdAt": "2020-04-08T03:17:36Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,268 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * Class represents configuration for audit logging.\n+ */\n+public class AuditConfig {\n+\n+    private AuditConfig() { }\n+\n+    /**\n+     * Filter represents set of filtering configuration settings for audit logging.\n+     * Audit logger will use these settings to determine what audit logs are to be generated.\n+     */\n+    public static class Filter {\n+        private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+        private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+                Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                        AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+        private final boolean isRestApiAuditEnabled;\n+        private final boolean isTransportApiAuditEnabled;\n+        private final boolean resolveBulkRequests;\n+        private final boolean logRequestBody;\n+        private final boolean resolveIndices;\n+        private final boolean excludeSensitiveHeaders;\n+        private final Set<String> ignoredAuditUsers;\n+        private final Set<String> ignoredComplianceUsersForRead;\n+        private final Set<String> ignoredComplianceUsersForWrite;\n+        private final Set<String> ignoreAuditRequests;\n+        private final EnumSet<AuditCategory> disabledRestCategories;\n+        private final EnumSet<AuditCategory> disabledTransportCategories;\n+\n+        private Filter(final boolean isRestApiAuditEnabled,\n+                       final boolean isTransportApiAuditEnabled,\n+                       final boolean resolveBulkRequests,\n+                       final boolean logRequestBody,\n+                       final boolean resolveIndices,\n+                       final boolean excludeSensitiveHeaders,\n+                       final Set<String> ignoredAuditUsers,\n+                       final Set<String> ignoredComplianceUsersForRead,\n+                       final Set<String> ignoredComplianceUsersForWrite,\n+                       final Set<String> ignoredAuditRequests,\n+                       final EnumSet<AuditCategory> disabledRestCategories,\n+                       final EnumSet<AuditCategory> disabledTransportCategories) {\n+            this.isRestApiAuditEnabled = isRestApiAuditEnabled;\n+            this.isTransportApiAuditEnabled = isTransportApiAuditEnabled;\n+            this.resolveBulkRequests = resolveBulkRequests;\n+            this.logRequestBody = logRequestBody;\n+            this.resolveIndices = resolveIndices;\n+            this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+            this.ignoredAuditUsers = ignoredAuditUsers;\n+            this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+            this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+            this.ignoreAuditRequests = ignoredAuditRequests;\n+            this.disabledRestCategories = disabledRestCategories;\n+            this.disabledTransportCategories = disabledTransportCategories;\n+        }\n+\n+        /**\n+         * Generate audit logging configuration from settings defined in elasticsearch.yml\n+         * @param settings settings\n+         * @return audit configuration filter\n+         */\n+        public static Filter from(Settings settings) {\n+            final boolean isRestApiAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n+            final boolean isTransportAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n+            final boolean resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n+            final boolean logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n+            final boolean resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n+            final boolean excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+\n+            final EnumSet<AuditCategory> disabledRestCategories = AuditCategory.parse(getSettingAsSet(\n+                    settings,\n+                    ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES,\n+                    DEFAULT_DISABLED_CATEGORIES,\n+                    true));\n+\n+            final EnumSet<AuditCategory> disabledTransportCategories = AuditCategory.parse(getSettingAsSet(\n+                    settings,\n+                    ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES,\n+                    DEFAULT_DISABLED_CATEGORIES,\n+                    true));\n+\n+            final Set<String> ignoredAuditUsers = getSettingAsSet(\n+                    settings,\n+                    ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS,\n+                    DEFAULT_IGNORED_USERS,\n+                    false);\n+\n+            final Set<String> ignoredComplianceUsersForRead = getSettingAsSet(\n+                    settings,\n+                    ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS,\n+                    DEFAULT_IGNORED_USERS,\n+                    false);\n+\n+            final Set<String> ignoredComplianceUsersForWrite = getSettingAsSet(\n+                    settings,\n+                    ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS,\n+                    DEFAULT_IGNORED_USERS,\n+                    false);\n+\n+            final Set<String> ignoreAuditRequests = ImmutableSet.copyOf(settings.getAsList(\n+                    ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS,\n+                    Collections.emptyList()));\n+\n+            return new Filter(isRestApiAuditEnabled,\n+                    isTransportAuditEnabled,\n+                    resolveBulkRequests,\n+                    logRequestBody,\n+                    resolveIndices,\n+                    excludeSensitiveHeaders,\n+                    ignoredAuditUsers,\n+                    ignoredComplianceUsersForRead,\n+                    ignoredComplianceUsersForWrite,\n+                    ignoreAuditRequests,\n+                    disabledRestCategories,\n+                    disabledTransportCategories);\n+        }\n+\n+        private static Set<String> getSettingAsSet(final Settings settings, final String key, final List<String> defaultList, final boolean ignoreCaseForNone) {\n+            final List<String> list = settings.getAsList(key, defaultList);\n+            if (list.size() == 1 && \"NONE\".equals(ignoreCaseForNone? list.get(0).toUpperCase() : list.get(0))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIzMTI5MA=="}, "originalCommit": {"oid": "60cf91df686ae5833494df60776862df078fad1a"}, "originalPosition": 134}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2548, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}