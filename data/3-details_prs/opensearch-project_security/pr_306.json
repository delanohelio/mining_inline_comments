{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxNzY4MTEw", "number": 306, "title": "AuditLog: Refactor to audit config", "bodyText": "Fixes #312\nNo new functionality added.", "createdAt": "2020-03-20T22:38:25Z", "url": "https://github.com/opensearch-project/security/pull/306", "merged": true, "mergeCommit": {"oid": "707e66115e903d2d1c4bec94fb3695e8caa4b5f8"}, "closed": true, "closedAt": "2020-04-08T18:51:29Z", "author": {"login": "sujithvm"}, "timelineItems": {"totalCount": 35, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQ7mtYgFqTM4MDc0OTcyMA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcVrTgdgFqTM5MDE4MTE5MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNzQ5NzIw", "url": "https://github.com/opensearch-project/security/pull/306#pullrequestreview-380749720", "createdAt": "2020-03-24T22:45:46Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjo0NTo0NlrOF7F5Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMzozMjo1N1rOF7G9BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwNjkxNQ==", "bodyText": "Consider isRestApiAuditEnabled.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r397506915", "createdAt": "2020-03-24T22:45:46Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,195 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean restAuditingEnabled;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwNzgzMw==", "bodyText": "Set?", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r397507833", "createdAt": "2020-03-24T22:48:02Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,195 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean restAuditingEnabled;\n+    private final boolean transportAuditingEnabled;\n+    private final boolean resolveBulkRequests;\n+    private final boolean logRequestBody;\n+    private final boolean resolveIndices;\n+    private final boolean excludeSensitiveHeaders;\n+    private final List<String> ignoredAuditUsers;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNTYyNg==", "bodyText": "I'd recommend using Builder pattern here as AuditConfig constructor takes a large number of arguments with the same type.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r397515626", "createdAt": "2020-03-24T23:08:39Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,195 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean restAuditingEnabled;\n+    private final boolean transportAuditingEnabled;\n+    private final boolean resolveBulkRequests;\n+    private final boolean logRequestBody;\n+    private final boolean resolveIndices;\n+    private final boolean excludeSensitiveHeaders;\n+    private final List<String> ignoredAuditUsers;\n+    private final List<String> ignoredComplianceUsersForRead;\n+    private final List<String> ignoredComplianceUsersForWrite;\n+    private final List<String> ignoreAuditRequests;\n+    private final EnumSet<AuditCategory> disabledRestCategories;\n+    private final EnumSet<AuditCategory> disabledTransportCategories;\n+    private final String opendistrosecurityIndex;\n+\n+    public AuditConfig(final boolean restAuditingEnabled,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxODk5Mw==", "bodyText": "do not use this. Usually, log is a class variable, not an instance variable.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r397518993", "createdAt": "2020-03-24T23:18:10Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "diffHunk": "@@ -118,77 +100,12 @@\n     protected AbstractAuditLog(Settings settings, final ThreadPool threadPool, final IndexNameExpressionResolver resolver, final ClusterService clusterService) {\n         super();\n         this.threadPool = threadPool;\n-\n         this.settings = settings;\n         this.resolver = resolver;\n         this.clusterService = clusterService;\n+        this.auditConfig = AuditConfig.getConfig(settings);\n \n-        this.opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n-\n-        resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n-\n-        restAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n-        transportAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n-\n-        disabledRestCategories = AuditCategory.parse(getConfigList(\n-                settings,\n-                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES,\n-                DEFAULT_DISABLED_CATEGORIES));\n-\n-        disabledTransportCategories = AuditCategory.parse(getConfigList(\n-                settings,\n-                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES,\n-                DEFAULT_DISABLED_CATEGORIES));\n-\n-        logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n-        resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n-\n-        ignoredAuditUsers = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredAuditUsers.size() == 1 && \"NONE\".equals(ignoredAuditUsers.get(0))) {\n-            ignoredAuditUsers.clear();\n-        }\n-\n-        if (ignoredAuditUsers.size() > 0) {\n-            log.info(\"Configured Users to ignore: {}\", ignoredAuditUsers);\n-        }\n-\n-        ignoredComplianceUsersForRead = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredComplianceUsersForRead.size() == 1 && \"NONE\".equals(ignoredComplianceUsersForRead.get(0))) {\n-            ignoredComplianceUsersForRead.clear();\n-        }\n-\n-        if (ignoredComplianceUsersForRead.size() > 0) {\n-            log.info(\"Configured Users to ignore for read compliance events: {}\", ignoredComplianceUsersForRead);\n-        }\n-\n-        ignoredComplianceUsersForWrite = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredComplianceUsersForWrite.size() == 1 && \"NONE\".equals(ignoredComplianceUsersForWrite.get(0))) {\n-            ignoredComplianceUsersForWrite.clear();\n-        }\n-\n-        if (ignoredComplianceUsersForWrite.size() > 0) {\n-            log.info(\"Configured Users to ignore for write compliance events: {}\", ignoredComplianceUsersForWrite);\n-        }\n-\n-        ignoreAuditRequests = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS, Collections.emptyList());\n-        if (ignoreAuditRequests.size() > 0) {\n-            log.info(\"Configured Requests to ignore: {}\", ignoreAuditRequests);\n-        }\n-\n-        this.excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n-    }\n-\n-    private static List<String> getConfigList(final Settings settings,\n-                                              final String key,\n-                                              final List<String> defaultList) {\n-        List<String> list = settings.getAsList(key, defaultList);\n-        if (list.size() == 1 && \"NONE\".equals(list.get(0))) {\n-            return Collections.emptyList();\n-        }\n-        return list;\n+        this.log.info(\"Configured audit settings: {}\", auditConfig.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxOTcxOA==", "bodyText": "Add new line.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r397519718", "createdAt": "2020-03-24T23:20:17Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,195 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean restAuditingEnabled;\n+    private final boolean transportAuditingEnabled;\n+    private final boolean resolveBulkRequests;\n+    private final boolean logRequestBody;\n+    private final boolean resolveIndices;\n+    private final boolean excludeSensitiveHeaders;\n+    private final List<String> ignoredAuditUsers;\n+    private final List<String> ignoredComplianceUsersForRead;\n+    private final List<String> ignoredComplianceUsersForWrite;\n+    private final List<String> ignoreAuditRequests;\n+    private final EnumSet<AuditCategory> disabledRestCategories;\n+    private final EnumSet<AuditCategory> disabledTransportCategories;\n+    private final String opendistrosecurityIndex;\n+\n+    public AuditConfig(final boolean restAuditingEnabled,\n+                       final boolean transportAuditingEnabled,\n+                       final boolean resolveBulkRequests,\n+                       final boolean logRequestBody,\n+                       final boolean resolveIndices,\n+                       final boolean excludeSensitiveHeaders,\n+                       final List<String> ignoredAuditUsers,\n+                       final List<String> ignoredComplianceUsersForRead,\n+                       final List<String> ignoredComplianceUsersForWrite,\n+                       final List<String> ignoredAuditRequests,\n+                       final EnumSet<AuditCategory> disabledRestCategories,\n+                       final EnumSet<AuditCategory> disabledTransportCategories,\n+                       final String opendistrosecurityIndex) {\n+        this.restAuditingEnabled = restAuditingEnabled;\n+        this.transportAuditingEnabled = transportAuditingEnabled;\n+        this.resolveBulkRequests = resolveBulkRequests;\n+        this.logRequestBody = logRequestBody;\n+        this.resolveIndices = resolveIndices;\n+        this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+        this.ignoredAuditUsers = ignoredAuditUsers;\n+        this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+        this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+        this.ignoreAuditRequests = ignoredAuditRequests;\n+        this.disabledRestCategories = disabledRestCategories;\n+        this.disabledTransportCategories = disabledTransportCategories;\n+        this.opendistrosecurityIndex = opendistrosecurityIndex;\n+    }\n+\n+    public static AuditConfig getConfig(Settings settings) {\n+        final boolean restAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n+        final boolean transportAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n+        final boolean resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n+        final boolean logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n+        final boolean resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n+        final boolean excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+\n+        final List<String> ignoredAuditUsers = getConfigList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS);\n+\n+        final List<String> ignoredComplianceUsersForRead = getConfigList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS);\n+\n+        final List<String> ignoredComplianceUsersForWrite = getConfigList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS);\n+\n+        final List<String> ignoreAuditRequests = getConfigList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS,\n+                Collections.emptyList());\n+\n+        final EnumSet<AuditCategory> disabledRestCategories = AuditCategory.parse(getConfigList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES));\n+\n+        final EnumSet<AuditCategory> disabledTransportCategories = AuditCategory.parse(getConfigList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES));\n+\n+        final String opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n+\n+        return new AuditConfig(restAuditingEnabled,\n+                transportAuditingEnabled,\n+                resolveBulkRequests,\n+                logRequestBody,\n+                resolveIndices,\n+                excludeSensitiveHeaders,\n+                ignoredAuditUsers,\n+                ignoredComplianceUsersForRead,\n+                ignoredComplianceUsersForWrite,\n+                ignoreAuditRequests,\n+                disabledRestCategories,\n+                disabledTransportCategories,\n+                opendistrosecurityIndex);\n+    }\n+\n+    private static List<String> getConfigList(final Settings settings,\n+                                              final String key,\n+                                              final List<String> defaultList) {\n+        List<String> list = settings.getAsList(key, defaultList);\n+        if (list.size() == 1 && \"NONE\".equals(list.get(0))) {\n+            return Collections.emptyList();\n+        }\n+        return list;\n+    }\n+\n+    public boolean isRestAuditingEnabled() {\n+        return restAuditingEnabled;\n+    }\n+\n+    public boolean isTransportAuditingEnabled() {\n+        return transportAuditingEnabled;\n+    }\n+\n+    public boolean shouldResolveBulkRequests() {\n+        return resolveBulkRequests;\n+    }\n+\n+    public boolean shouldLogRequestBody() {\n+        return logRequestBody;\n+    }\n+\n+    public boolean shouldResolveIndices() {\n+        return resolveIndices;\n+    }\n+\n+    public boolean shouldExcludeSensitiveHeaders() {\n+        return excludeSensitiveHeaders;\n+    }\n+\n+    public List<String> getIgnoredAuditUsers() {\n+        return ignoredAuditUsers;\n+    }\n+\n+    public List<String> getIgnoredComplianceUsersForRead() {\n+        return ignoredComplianceUsersForRead;\n+    }\n+\n+    public List<String> getIgnoredComplianceUsersForWrite() {\n+        return ignoredComplianceUsersForWrite;\n+    }\n+\n+    public List<String> getIgnoredAuditRequests() {\n+        return ignoreAuditRequests;\n+    }\n+\n+    public EnumSet<AuditCategory> getDisabledRestCategories() {\n+        return disabledRestCategories;\n+    }\n+\n+    public EnumSet<AuditCategory> getDisabledTransportCategories() {\n+        return disabledTransportCategories;\n+    }\n+\n+    public String getOpendistrosecurityIndex() {\n+        return opendistrosecurityIndex;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"AuditConfig{\" +\n+                \"restAuditingEnabled=\" + restAuditingEnabled +\n+                \", transportAuditingEnabled=\" + transportAuditingEnabled +\n+                \", resolveBulkRequests=\" + resolveBulkRequests +\n+                \", logRequestBody=\" + logRequestBody +\n+                \", resolveIndices=\" + resolveIndices +\n+                \", excludeSensitiveHeaders=\" + excludeSensitiveHeaders +\n+                \", ignoredAuditUsers=\" + ignoredAuditUsers +\n+                \", ignoredComplianceUsersForRead=\" + ignoredComplianceUsersForRead +\n+                \", ignoredComplianceUsersForWrite=\" + ignoredComplianceUsersForWrite +\n+                \", ignoreAuditRequests=\" + ignoreAuditRequests +\n+                \", disabledRestCategories=\" + disabledRestCategories +\n+                \", disabledTransportCategories=\" + disabledTransportCategories +\n+                \", opendistrosecurityIndex='\" + opendistrosecurityIndex + '\\'' +\n+                '}';\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 195}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUyMjU2Ng==", "bodyText": "I guess it should be protected to be consistent with other member variables.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r397522566", "createdAt": "2020-03-24T23:28:26Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "diffHunk": "@@ -81,32 +80,15 @@\n \n public abstract class AbstractAuditLog implements AuditLog {\n \n-    private static final List<String> DEFAULT_DISABLED_CATEGORIES = Arrays.asList(AuditCategory.AUTHENTICATED.toString(), AuditCategory.GRANTED_PRIVILEGES.toString());\n-\n     protected final Logger log = LogManager.getLogger(this.getClass());\n     protected final ThreadPool threadPool;\n     protected final IndexNameExpressionResolver resolver;\n     protected final ClusterService clusterService;\n     protected final Settings settings;\n-    protected final boolean restAuditingEnabled;\n-    protected final boolean transportAuditingEnabled;\n-    protected final boolean resolveBulkRequests;\n-\n-    protected final boolean logRequestBody;\n-    protected final boolean resolveIndices;\n-\n-    private List<String> ignoredAuditUsers;\n-    private List<String> ignoredComplianceUsersForRead;\n-    private List<String> ignoredComplianceUsersForWrite;\n-    private final List<String> ignoreAuditRequests;\n-    private final EnumSet<AuditCategory> disabledRestCategories;\n-    private final EnumSet<AuditCategory> disabledTransportCategories;\n-    private final List<String> defaultIgnoredUsers = Arrays.asList(\"kibanaserver\");\n-    private final boolean excludeSensitiveHeaders;\n-\n-    private final String opendistrosecurityIndex;\n-    private static final List<String> writeClasses = new ArrayList<>();\n \n+    private final AuditConfig auditConfig;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUyNDIyOA==", "bodyText": "IMO, isEmpty() will be better", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r397524228", "createdAt": "2020-03-24T23:32:57Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "diffHunk": "@@ -737,6 +654,7 @@ private boolean checkTransportFilter(final AuditCategory category, final String\n             return false;\n         }\n \n+        final Collection<String>ignoredAuditUsers = auditConfig.getIgnoredAuditUsers();\n         if (ignoredAuditUsers.size() > 0 && WildcardMatcher.matchAny(ignoredAuditUsers, effectiveUser)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 335}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxMjUzNTE1", "url": "https://github.com/opensearch-project/security/pull/306#pullrequestreview-381253515", "createdAt": "2020-03-25T15:19:41Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyMzYzNzA4", "url": "https://github.com/opensearch-project/security/pull/306#pullrequestreview-382363708", "createdAt": "2020-03-26T19:51:44Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxOTo1MTo0NFrOF8X33A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxOTo1MTo0NFrOF8X33A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg1MDAxMg==", "bodyText": "Logging entire configuration when configured. Hence removed these info logs.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r398850012", "createdAt": "2020-03-26T19:51:44Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "diffHunk": "@@ -118,81 +99,12 @@\n     protected AbstractAuditLog(Settings settings, final ThreadPool threadPool, final IndexNameExpressionResolver resolver, final ClusterService clusterService) {\n         super();\n         this.threadPool = threadPool;\n-\n         this.settings = settings;\n         this.resolver = resolver;\n         this.clusterService = clusterService;\n+        this.auditConfig = AuditConfig.getConfig(settings);\n \n-        this.opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n-\n-        resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n-\n-        restAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n-        transportAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n-\n-        final List<String> disabledRestCategoriesList = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES, DEFAULT_DISABLED_CATEGORIES);\n-\n-        if (disabledRestCategoriesList.isEmpty() || (disabledRestCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledRestCategoriesList.get(0)))) {\n-            disabledRestCategories = EnumSet.noneOf(AuditCategory.class);\n-        } else {\n-            disabledRestCategories = AuditCategory.parse(disabledRestCategoriesList);\n-        }\n-\n-        if (!disabledRestCategories.isEmpty()) {\n-            log.info(\"Configured categories on rest layer to ignore: {}\", disabledRestCategories);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 85}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyNDgwODc2", "url": "https://github.com/opensearch-project/security/pull/306#pullrequestreview-382480876", "createdAt": "2020-03-26T23:07:19Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMzowNzoxOVrOF8dosg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwMDoyNjoyM1rOF8fJ3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk0NDQzNA==", "bodyText": "introduce helper function", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r398944434", "createdAt": "2020-03-26T23:07:19Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean isRestApiAuditEnabled;\n+    private final boolean isTransportAuditEnabled;\n+    private final boolean resolveBulkRequests;\n+    private final boolean logRequestBody;\n+    private final boolean resolveIndices;\n+    private final boolean excludeSensitiveHeaders;\n+    private final Set<String> ignoredAuditUsers;\n+    private final Set<String> ignoredComplianceUsersForRead;\n+    private final Set<String> ignoredComplianceUsersForWrite;\n+    private final Set<String> ignoreAuditRequests;\n+    private final EnumSet<AuditCategory> disabledRestCategories;\n+    private final EnumSet<AuditCategory> disabledTransportCategories;\n+    private final String opendistrosecurityIndex;\n+\n+    private AuditConfig(final boolean isRestApiAuditEnabled,\n+                        final boolean isTransportAuditEnabled,\n+                        final boolean resolveBulkRequests,\n+                        final boolean logRequestBody,\n+                        final boolean resolveIndices,\n+                        final boolean excludeSensitiveHeaders,\n+                        final Set<String> ignoredAuditUsers,\n+                        final Set<String> ignoredComplianceUsersForRead,\n+                        final Set<String> ignoredComplianceUsersForWrite,\n+                        final Set<String> ignoredAuditRequests,\n+                        final EnumSet<AuditCategory> disabledRestCategories,\n+                        final EnumSet<AuditCategory> disabledTransportCategories,\n+                        final String opendistrosecurityIndex) {\n+        this.isRestApiAuditEnabled = isRestApiAuditEnabled;\n+        this.isTransportAuditEnabled = isTransportAuditEnabled;\n+        this.resolveBulkRequests = resolveBulkRequests;\n+        this.logRequestBody = logRequestBody;\n+        this.resolveIndices = resolveIndices;\n+        this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+        this.ignoredAuditUsers = ignoredAuditUsers;\n+        this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+        this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+        this.ignoreAuditRequests = ignoredAuditRequests;\n+        this.disabledRestCategories = disabledRestCategories;\n+        this.disabledTransportCategories = disabledTransportCategories;\n+        this.opendistrosecurityIndex = opendistrosecurityIndex;\n+    }\n+\n+    public static AuditConfig getConfig(Settings settings) {\n+        final boolean isRestApiAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n+        final boolean isTransportAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n+        final boolean resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n+        final boolean logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n+        final boolean resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n+        final boolean excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+        final String opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n+\n+        final EnumSet<AuditCategory> disabledRestCategories;\n+        final List<String> disabledRestCategoriesList = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES, DEFAULT_DISABLED_CATEGORIES);\n+        if (disabledRestCategoriesList.isEmpty() || (disabledRestCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledRestCategoriesList.get(0)))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk0NDg3Mw==", "bodyText": "There is no need to create new ArrayList.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r398944873", "createdAt": "2020-03-26T23:08:46Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean isRestApiAuditEnabled;\n+    private final boolean isTransportAuditEnabled;\n+    private final boolean resolveBulkRequests;\n+    private final boolean logRequestBody;\n+    private final boolean resolveIndices;\n+    private final boolean excludeSensitiveHeaders;\n+    private final Set<String> ignoredAuditUsers;\n+    private final Set<String> ignoredComplianceUsersForRead;\n+    private final Set<String> ignoredComplianceUsersForWrite;\n+    private final Set<String> ignoreAuditRequests;\n+    private final EnumSet<AuditCategory> disabledRestCategories;\n+    private final EnumSet<AuditCategory> disabledTransportCategories;\n+    private final String opendistrosecurityIndex;\n+\n+    private AuditConfig(final boolean isRestApiAuditEnabled,\n+                        final boolean isTransportAuditEnabled,\n+                        final boolean resolveBulkRequests,\n+                        final boolean logRequestBody,\n+                        final boolean resolveIndices,\n+                        final boolean excludeSensitiveHeaders,\n+                        final Set<String> ignoredAuditUsers,\n+                        final Set<String> ignoredComplianceUsersForRead,\n+                        final Set<String> ignoredComplianceUsersForWrite,\n+                        final Set<String> ignoredAuditRequests,\n+                        final EnumSet<AuditCategory> disabledRestCategories,\n+                        final EnumSet<AuditCategory> disabledTransportCategories,\n+                        final String opendistrosecurityIndex) {\n+        this.isRestApiAuditEnabled = isRestApiAuditEnabled;\n+        this.isTransportAuditEnabled = isTransportAuditEnabled;\n+        this.resolveBulkRequests = resolveBulkRequests;\n+        this.logRequestBody = logRequestBody;\n+        this.resolveIndices = resolveIndices;\n+        this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+        this.ignoredAuditUsers = ignoredAuditUsers;\n+        this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+        this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+        this.ignoreAuditRequests = ignoredAuditRequests;\n+        this.disabledRestCategories = disabledRestCategories;\n+        this.disabledTransportCategories = disabledTransportCategories;\n+        this.opendistrosecurityIndex = opendistrosecurityIndex;\n+    }\n+\n+    public static AuditConfig getConfig(Settings settings) {\n+        final boolean isRestApiAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n+        final boolean isTransportAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n+        final boolean resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n+        final boolean logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n+        final boolean resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n+        final boolean excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+        final String opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n+\n+        final EnumSet<AuditCategory> disabledRestCategories;\n+        final List<String> disabledRestCategoriesList = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES, DEFAULT_DISABLED_CATEGORIES);\n+        if (disabledRestCategoriesList.isEmpty() || (disabledRestCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledRestCategoriesList.get(0)))) {\n+            disabledRestCategories = EnumSet.noneOf(AuditCategory.class);\n+        } else {\n+            disabledRestCategories = AuditCategory.parse(disabledRestCategoriesList);\n+        }\n+\n+        final EnumSet<AuditCategory> disabledTransportCategories;\n+        final List<String> disabledTransportCategoriesList = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES, DEFAULT_DISABLED_CATEGORIES);\n+        if (disabledTransportCategoriesList.isEmpty() || (disabledTransportCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledTransportCategoriesList.get(0)))) {\n+            disabledTransportCategories = EnumSet.noneOf(AuditCategory.class);\n+        } else {\n+            disabledTransportCategories = AuditCategory.parse(disabledTransportCategoriesList);\n+        }\n+\n+        final List<String> ignoredAuditUsers = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS, DEFAULT_IGNORED_USERS));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk0OTY4MA==", "bodyText": "auditConfig.toString() will translate to an extremely long string that will be hard to digest.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r398949680", "createdAt": "2020-03-26T23:23:07Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "diffHunk": "@@ -118,81 +99,12 @@\n     protected AbstractAuditLog(Settings settings, final ThreadPool threadPool, final IndexNameExpressionResolver resolver, final ClusterService clusterService) {\n         super();\n         this.threadPool = threadPool;\n-\n         this.settings = settings;\n         this.resolver = resolver;\n         this.clusterService = clusterService;\n+        this.auditConfig = AuditConfig.getConfig(settings);\n \n-        this.opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n-\n-        resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n-\n-        restAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n-        transportAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n-\n-        final List<String> disabledRestCategoriesList = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES, DEFAULT_DISABLED_CATEGORIES);\n-\n-        if (disabledRestCategoriesList.isEmpty() || (disabledRestCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledRestCategoriesList.get(0)))) {\n-            disabledRestCategories = EnumSet.noneOf(AuditCategory.class);\n-        } else {\n-            disabledRestCategories = AuditCategory.parse(disabledRestCategoriesList);\n-        }\n-\n-        if (!disabledRestCategories.isEmpty()) {\n-            log.info(\"Configured categories on rest layer to ignore: {}\", disabledRestCategories);\n-        }\n-\n-        final List<String> disabledTransportCategoriesList = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES, DEFAULT_DISABLED_CATEGORIES);\n-\n-        if (disabledTransportCategoriesList.isEmpty() || (disabledTransportCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledTransportCategoriesList.get(0)))) {\n-            disabledTransportCategories = EnumSet.noneOf(AuditCategory.class);\n-        } else {\n-            disabledTransportCategories = AuditCategory.parse(disabledTransportCategoriesList);\n-        }\n-\n-        if (!disabledTransportCategories.isEmpty()) {\n-            log.info(\"Configured categories on transport layer to ignore: {}\", disabledTransportCategories);\n-        }\n-\n-        logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n-        resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n-\n-        ignoredAuditUsers = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredAuditUsers.size() == 1 && \"NONE\".equals(ignoredAuditUsers.get(0))) {\n-            ignoredAuditUsers.clear();\n-        }\n-\n-        if (ignoredAuditUsers.size() > 0) {\n-            log.info(\"Configured Users to ignore: {}\", ignoredAuditUsers);\n-        }\n-\n-        ignoredComplianceUsersForRead = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredComplianceUsersForRead.size() == 1 && \"NONE\".equals(ignoredComplianceUsersForRead.get(0))) {\n-            ignoredComplianceUsersForRead.clear();\n-        }\n-\n-        if (ignoredComplianceUsersForRead.size() > 0) {\n-            log.info(\"Configured Users to ignore for read compliance events: {}\", ignoredComplianceUsersForRead);\n-        }\n-\n-        ignoredComplianceUsersForWrite = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredComplianceUsersForWrite.size() == 1 && \"NONE\".equals(ignoredComplianceUsersForWrite.get(0))) {\n-            ignoredComplianceUsersForWrite.clear();\n-        }\n-\n-        if (ignoredComplianceUsersForWrite.size() > 0) {\n-            log.info(\"Configured Users to ignore for write compliance events: {}\", ignoredComplianceUsersForWrite);\n-        }\n-\n-        ignoreAuditRequests = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS, Collections.emptyList());\n-        if (ignoreAuditRequests.size() > 0) {\n-            log.info(\"Configured Requests to ignore: {}\", ignoreAuditRequests);\n-        }\n-\n-        this.excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+        log.info(\"Configured audit settings: {}\", auditConfig.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1MDk4Mw==", "bodyText": "Add new line", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r398950983", "createdAt": "2020-03-26T23:26:47Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "diffHunk": "@@ -869,4 +788,4 @@ private boolean checkRestFilter(final AuditCategory category, final String effec\n \n \n     protected abstract void save(final AuditMessage msg);\n-}\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 522}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1NTA4MA==", "bodyText": "ImmutableSet.copyOf()? Consider moving Collection->Set (or ImmutableSet) converstion to AuditConfig constructor.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r398955080", "createdAt": "2020-03-26T23:39:43Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean isRestApiAuditEnabled;\n+    private final boolean isTransportAuditEnabled;\n+    private final boolean resolveBulkRequests;\n+    private final boolean logRequestBody;\n+    private final boolean resolveIndices;\n+    private final boolean excludeSensitiveHeaders;\n+    private final Set<String> ignoredAuditUsers;\n+    private final Set<String> ignoredComplianceUsersForRead;\n+    private final Set<String> ignoredComplianceUsersForWrite;\n+    private final Set<String> ignoreAuditRequests;\n+    private final EnumSet<AuditCategory> disabledRestCategories;\n+    private final EnumSet<AuditCategory> disabledTransportCategories;\n+    private final String opendistrosecurityIndex;\n+\n+    private AuditConfig(final boolean isRestApiAuditEnabled,\n+                        final boolean isTransportAuditEnabled,\n+                        final boolean resolveBulkRequests,\n+                        final boolean logRequestBody,\n+                        final boolean resolveIndices,\n+                        final boolean excludeSensitiveHeaders,\n+                        final Set<String> ignoredAuditUsers,\n+                        final Set<String> ignoredComplianceUsersForRead,\n+                        final Set<String> ignoredComplianceUsersForWrite,\n+                        final Set<String> ignoredAuditRequests,\n+                        final EnumSet<AuditCategory> disabledRestCategories,\n+                        final EnumSet<AuditCategory> disabledTransportCategories,\n+                        final String opendistrosecurityIndex) {\n+        this.isRestApiAuditEnabled = isRestApiAuditEnabled;\n+        this.isTransportAuditEnabled = isTransportAuditEnabled;\n+        this.resolveBulkRequests = resolveBulkRequests;\n+        this.logRequestBody = logRequestBody;\n+        this.resolveIndices = resolveIndices;\n+        this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+        this.ignoredAuditUsers = ignoredAuditUsers;\n+        this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+        this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+        this.ignoreAuditRequests = ignoredAuditRequests;\n+        this.disabledRestCategories = disabledRestCategories;\n+        this.disabledTransportCategories = disabledTransportCategories;\n+        this.opendistrosecurityIndex = opendistrosecurityIndex;\n+    }\n+\n+    public static AuditConfig getConfig(Settings settings) {\n+        final boolean isRestApiAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n+        final boolean isTransportAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n+        final boolean resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n+        final boolean logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n+        final boolean resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n+        final boolean excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+        final String opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n+\n+        final EnumSet<AuditCategory> disabledRestCategories;\n+        final List<String> disabledRestCategoriesList = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES, DEFAULT_DISABLED_CATEGORIES);\n+        if (disabledRestCategoriesList.isEmpty() || (disabledRestCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledRestCategoriesList.get(0)))) {\n+            disabledRestCategories = EnumSet.noneOf(AuditCategory.class);\n+        } else {\n+            disabledRestCategories = AuditCategory.parse(disabledRestCategoriesList);\n+        }\n+\n+        final EnumSet<AuditCategory> disabledTransportCategories;\n+        final List<String> disabledTransportCategoriesList = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES, DEFAULT_DISABLED_CATEGORIES);\n+        if (disabledTransportCategoriesList.isEmpty() || (disabledTransportCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledTransportCategoriesList.get(0)))) {\n+            disabledTransportCategories = EnumSet.noneOf(AuditCategory.class);\n+        } else {\n+            disabledTransportCategories = AuditCategory.parse(disabledTransportCategoriesList);\n+        }\n+\n+        final List<String> ignoredAuditUsers = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS, DEFAULT_IGNORED_USERS));\n+        if (ignoredAuditUsers.size() == 1 && \"NONE\".equals(ignoredAuditUsers.get(0))) {\n+            ignoredAuditUsers.clear();\n+        }\n+\n+        final List<String> ignoredComplianceUsersForRead = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS, DEFAULT_IGNORED_USERS));\n+        if (ignoredComplianceUsersForRead.size() == 1 && \"NONE\".equals(ignoredComplianceUsersForRead.get(0))) {\n+            ignoredComplianceUsersForRead.clear();\n+        }\n+\n+        final List<String> ignoredComplianceUsersForWrite = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS, DEFAULT_IGNORED_USERS));\n+        if (ignoredComplianceUsersForWrite.size() == 1 && \"NONE\".equals(ignoredComplianceUsersForWrite.get(0))) {\n+            ignoredComplianceUsersForWrite.clear();\n+        }\n+\n+        final List<String> ignoreAuditRequests = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS, Collections.emptyList());\n+\n+        return new AuditConfig(isRestApiAuditEnabled,\n+                isTransportAuditEnabled,\n+                resolveBulkRequests,\n+                logRequestBody,\n+                resolveIndices,\n+                excludeSensitiveHeaders,\n+                new HashSet<>(ignoredAuditUsers),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1ODc5NA==", "bodyText": "May this set contain \"NONE\"? Should \"NONE\" be handled in the constructor?", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r398958794", "createdAt": "2020-03-26T23:51:18Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean isRestApiAuditEnabled;\n+    private final boolean isTransportAuditEnabled;\n+    private final boolean resolveBulkRequests;\n+    private final boolean logRequestBody;\n+    private final boolean resolveIndices;\n+    private final boolean excludeSensitiveHeaders;\n+    private final Set<String> ignoredAuditUsers;\n+    private final Set<String> ignoredComplianceUsersForRead;\n+    private final Set<String> ignoredComplianceUsersForWrite;\n+    private final Set<String> ignoreAuditRequests;\n+    private final EnumSet<AuditCategory> disabledRestCategories;\n+    private final EnumSet<AuditCategory> disabledTransportCategories;\n+    private final String opendistrosecurityIndex;\n+\n+    private AuditConfig(final boolean isRestApiAuditEnabled,\n+                        final boolean isTransportAuditEnabled,\n+                        final boolean resolveBulkRequests,\n+                        final boolean logRequestBody,\n+                        final boolean resolveIndices,\n+                        final boolean excludeSensitiveHeaders,\n+                        final Set<String> ignoredAuditUsers,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk2NzY0Nw==", "bodyText": "If auditConfig is final and immutable (all fields are also final) how it can be reloaded dynamically?", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r398967647", "createdAt": "2020-03-27T00:20:23Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "diffHunk": "@@ -80,33 +79,15 @@\n import com.google.common.io.BaseEncoding;\n \n public abstract class AbstractAuditLog implements AuditLog {\n+    protected final Logger log = LogManager.getLogger(this.getClass());\n \n-    private static final List<String> DEFAULT_DISABLED_CATEGORIES = Arrays.asList(AuditCategory.AUTHENTICATED.toString(), AuditCategory.GRANTED_PRIVILEGES.toString());\n+    private final ThreadPool threadPool;\n+    private final IndexNameExpressionResolver resolver;\n+    private final ClusterService clusterService;\n+    private final Settings settings;\n+    private final AuditConfig auditConfig;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk2OTMxMA==", "bodyText": "Use EMPTY_SETTINGS.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r398969310", "createdAt": "2020-03-27T00:26:23Z", "author": {"login": "vrozov"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfigTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.elasticsearch.common.settings.Settings;\n+import org.hamcrest.Matcher;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import static com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory.*;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.*;\n+\n+public class AuditConfigTest {\n+\n+    @Test\n+    public void testDefault() {\n+        // arrange\n+        final Settings settings = Settings.builder().build();\n+        final Set<String> defaultIgnoredUser = Collections.singleton(\"kibanaserver\");\n+        final EnumSet<AuditCategory> defaultDisabledCategories = EnumSet.of(AUTHENTICATED, GRANTED_PRIVILEGES);\n+        // act\n+        final AuditConfig auditConfig = AuditConfig.getConfig(settings);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyOTczMjA4", "url": "https://github.com/opensearch-project/security/pull/306#pullrequestreview-382973208", "createdAt": "2020-03-27T15:40:10Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNTo0MDoxMVrOF82xjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNTo1ODoxNVrOF83jKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM1NjMwMg==", "bodyText": "nit: consider\nif (list.size() == 1 && \"NONE\".equals(ignoreCaseForNone? list.get(0).toUpperCase() : list.get(0)))", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r399356302", "createdAt": "2020-03-27T15:40:11Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,206 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableSet;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean isRestApiAuditEnabled;\n+    private final boolean isTransportAuditEnabled;\n+    private final boolean resolveBulkRequests;\n+    private final boolean logRequestBody;\n+    private final boolean resolveIndices;\n+    private final boolean excludeSensitiveHeaders;\n+    private final Set<String> ignoredAuditUsers;\n+    private final Set<String> ignoredComplianceUsersForRead;\n+    private final Set<String> ignoredComplianceUsersForWrite;\n+    private final Set<String> ignoreAuditRequests;\n+    private final EnumSet<AuditCategory> disabledRestCategories;\n+    private final EnumSet<AuditCategory> disabledTransportCategories;\n+    private final String opendistrosecurityIndex;\n+\n+    private AuditConfig(final boolean isRestApiAuditEnabled,\n+                        final boolean isTransportAuditEnabled,\n+                        final boolean resolveBulkRequests,\n+                        final boolean logRequestBody,\n+                        final boolean resolveIndices,\n+                        final boolean excludeSensitiveHeaders,\n+                        final Set<String> ignoredAuditUsers,\n+                        final Set<String> ignoredComplianceUsersForRead,\n+                        final Set<String> ignoredComplianceUsersForWrite,\n+                        final Set<String> ignoredAuditRequests,\n+                        final EnumSet<AuditCategory> disabledRestCategories,\n+                        final EnumSet<AuditCategory> disabledTransportCategories,\n+                        final String opendistrosecurityIndex) {\n+        this.isRestApiAuditEnabled = isRestApiAuditEnabled;\n+        this.isTransportAuditEnabled = isTransportAuditEnabled;\n+        this.resolveBulkRequests = resolveBulkRequests;\n+        this.logRequestBody = logRequestBody;\n+        this.resolveIndices = resolveIndices;\n+        this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+        this.ignoredAuditUsers = ignoredAuditUsers;\n+        this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+        this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+        this.ignoreAuditRequests = ignoredAuditRequests;\n+        this.disabledRestCategories = disabledRestCategories;\n+        this.disabledTransportCategories = disabledTransportCategories;\n+        this.opendistrosecurityIndex = opendistrosecurityIndex;\n+    }\n+\n+    public static AuditConfig getConfig(Settings settings) {\n+        final boolean isRestApiAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n+        final boolean isTransportAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n+        final boolean resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n+        final boolean logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n+        final boolean resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n+        final boolean excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+        final String opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n+\n+        final EnumSet<AuditCategory> disabledRestCategories = AuditCategory.parse(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES,\n+                true));\n+\n+        final EnumSet<AuditCategory> disabledTransportCategories = AuditCategory.parse(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES,\n+                true));\n+\n+        final Set<String> ignoredAuditUsers = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoredComplianceUsersForRead = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoredComplianceUsersForWrite = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoreAuditRequests = ImmutableSet.copyOf(settings.getAsList(\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS,\n+                Collections.emptyList()));\n+\n+        return new AuditConfig(isRestApiAuditEnabled,\n+                isTransportAuditEnabled,\n+                resolveBulkRequests,\n+                logRequestBody,\n+                resolveIndices,\n+                excludeSensitiveHeaders,\n+                ignoredAuditUsers,\n+                ignoredComplianceUsersForRead,\n+                ignoredComplianceUsersForWrite,\n+                ignoreAuditRequests,\n+                disabledRestCategories,\n+                disabledTransportCategories,\n+                opendistrosecurityIndex);\n+    }\n+\n+    private static List<String> getSettingAsList(final Settings settings, final String key, final List<String> defaultList, final boolean ignoreCaseForNone) {\n+        final List<String> list = settings.getAsList(key, defaultList);\n+        if (list.size() == 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM2MTE3Nw==", "bodyText": "Consider renaming getConfig() to from().", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r399361177", "createdAt": "2020-03-27T15:47:07Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,206 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableSet;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean isRestApiAuditEnabled;\n+    private final boolean isTransportAuditEnabled;\n+    private final boolean resolveBulkRequests;\n+    private final boolean logRequestBody;\n+    private final boolean resolveIndices;\n+    private final boolean excludeSensitiveHeaders;\n+    private final Set<String> ignoredAuditUsers;\n+    private final Set<String> ignoredComplianceUsersForRead;\n+    private final Set<String> ignoredComplianceUsersForWrite;\n+    private final Set<String> ignoreAuditRequests;\n+    private final EnumSet<AuditCategory> disabledRestCategories;\n+    private final EnumSet<AuditCategory> disabledTransportCategories;\n+    private final String opendistrosecurityIndex;\n+\n+    private AuditConfig(final boolean isRestApiAuditEnabled,\n+                        final boolean isTransportAuditEnabled,\n+                        final boolean resolveBulkRequests,\n+                        final boolean logRequestBody,\n+                        final boolean resolveIndices,\n+                        final boolean excludeSensitiveHeaders,\n+                        final Set<String> ignoredAuditUsers,\n+                        final Set<String> ignoredComplianceUsersForRead,\n+                        final Set<String> ignoredComplianceUsersForWrite,\n+                        final Set<String> ignoredAuditRequests,\n+                        final EnumSet<AuditCategory> disabledRestCategories,\n+                        final EnumSet<AuditCategory> disabledTransportCategories,\n+                        final String opendistrosecurityIndex) {\n+        this.isRestApiAuditEnabled = isRestApiAuditEnabled;\n+        this.isTransportAuditEnabled = isTransportAuditEnabled;\n+        this.resolveBulkRequests = resolveBulkRequests;\n+        this.logRequestBody = logRequestBody;\n+        this.resolveIndices = resolveIndices;\n+        this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+        this.ignoredAuditUsers = ignoredAuditUsers;\n+        this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+        this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+        this.ignoreAuditRequests = ignoredAuditRequests;\n+        this.disabledRestCategories = disabledRestCategories;\n+        this.disabledTransportCategories = disabledTransportCategories;\n+        this.opendistrosecurityIndex = opendistrosecurityIndex;\n+    }\n+\n+    public static AuditConfig getConfig(Settings settings) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM2Mzc3Nw==", "bodyText": "Consider\nlog.info(\"Auditing on REST API is {}\", auditConfig.isRestApiAuditEnabled()? \"enabled\" : \"disabled\");", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r399363777", "createdAt": "2020-03-27T15:50:42Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "diffHunk": "@@ -118,81 +99,18 @@\n     protected AbstractAuditLog(Settings settings, final ThreadPool threadPool, final IndexNameExpressionResolver resolver, final ClusterService clusterService) {\n         super();\n         this.threadPool = threadPool;\n-\n         this.settings = settings;\n         this.resolver = resolver;\n         this.clusterService = clusterService;\n-\n-        this.opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n-\n-        resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n-\n-        restAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n-        transportAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n-\n-        final List<String> disabledRestCategoriesList = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES, DEFAULT_DISABLED_CATEGORIES);\n-\n-        if (disabledRestCategoriesList.isEmpty() || (disabledRestCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledRestCategoriesList.get(0)))) {\n-            disabledRestCategories = EnumSet.noneOf(AuditCategory.class);\n-        } else {\n-            disabledRestCategories = AuditCategory.parse(disabledRestCategoriesList);\n-        }\n-\n-        if (!disabledRestCategories.isEmpty()) {\n-            log.info(\"Configured categories on rest layer to ignore: {}\", disabledRestCategories);\n-        }\n-\n-        final List<String> disabledTransportCategoriesList = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES, DEFAULT_DISABLED_CATEGORIES);\n-\n-        if (disabledTransportCategoriesList.isEmpty() || (disabledTransportCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledTransportCategoriesList.get(0)))) {\n-            disabledTransportCategories = EnumSet.noneOf(AuditCategory.class);\n-        } else {\n-            disabledTransportCategories = AuditCategory.parse(disabledTransportCategoriesList);\n-        }\n-\n-        if (!disabledTransportCategories.isEmpty()) {\n-            log.info(\"Configured categories on transport layer to ignore: {}\", disabledTransportCategories);\n-        }\n-\n-        logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n-        resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n-\n-        ignoredAuditUsers = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredAuditUsers.size() == 1 && \"NONE\".equals(ignoredAuditUsers.get(0))) {\n-            ignoredAuditUsers.clear();\n-        }\n-\n-        if (ignoredAuditUsers.size() > 0) {\n-            log.info(\"Configured Users to ignore: {}\", ignoredAuditUsers);\n-        }\n-\n-        ignoredComplianceUsersForRead = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredComplianceUsersForRead.size() == 1 && \"NONE\".equals(ignoredComplianceUsersForRead.get(0))) {\n-            ignoredComplianceUsersForRead.clear();\n-        }\n-\n-        if (ignoredComplianceUsersForRead.size() > 0) {\n-            log.info(\"Configured Users to ignore for read compliance events: {}\", ignoredComplianceUsersForRead);\n-        }\n-\n-        ignoredComplianceUsersForWrite = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredComplianceUsersForWrite.size() == 1 && \"NONE\".equals(ignoredComplianceUsersForWrite.get(0))) {\n-            ignoredComplianceUsersForWrite.clear();\n-        }\n-\n-        if (ignoredComplianceUsersForWrite.size() > 0) {\n-            log.info(\"Configured Users to ignore for write compliance events: {}\", ignoredComplianceUsersForWrite);\n-        }\n-\n-        ignoreAuditRequests = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS, Collections.emptyList());\n-        if (ignoreAuditRequests.size() > 0) {\n-            log.info(\"Configured Requests to ignore: {}\", ignoreAuditRequests);\n-        }\n-\n-        this.excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+        this.auditConfig = AuditConfig.getConfig(settings);\n+\n+        log.info(\"Configured audit setting for auditing on rest layer : {}\", auditConfig.isRestApiAuditEnabled());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM2NDQzMw==", "bodyText": "remove this line", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r399364433", "createdAt": "2020-03-27T15:51:40Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "diffHunk": "@@ -118,81 +99,18 @@\n     protected AbstractAuditLog(Settings settings, final ThreadPool threadPool, final IndexNameExpressionResolver resolver, final ClusterService clusterService) {\n         super();\n         this.threadPool = threadPool;\n-\n         this.settings = settings;\n         this.resolver = resolver;\n         this.clusterService = clusterService;\n-\n-        this.opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n-\n-        resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n-\n-        restAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n-        transportAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n-\n-        final List<String> disabledRestCategoriesList = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES, DEFAULT_DISABLED_CATEGORIES);\n-\n-        if (disabledRestCategoriesList.isEmpty() || (disabledRestCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledRestCategoriesList.get(0)))) {\n-            disabledRestCategories = EnumSet.noneOf(AuditCategory.class);\n-        } else {\n-            disabledRestCategories = AuditCategory.parse(disabledRestCategoriesList);\n-        }\n-\n-        if (!disabledRestCategories.isEmpty()) {\n-            log.info(\"Configured categories on rest layer to ignore: {}\", disabledRestCategories);\n-        }\n-\n-        final List<String> disabledTransportCategoriesList = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES, DEFAULT_DISABLED_CATEGORIES);\n-\n-        if (disabledTransportCategoriesList.isEmpty() || (disabledTransportCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledTransportCategoriesList.get(0)))) {\n-            disabledTransportCategories = EnumSet.noneOf(AuditCategory.class);\n-        } else {\n-            disabledTransportCategories = AuditCategory.parse(disabledTransportCategoriesList);\n-        }\n-\n-        if (!disabledTransportCategories.isEmpty()) {\n-            log.info(\"Configured categories on transport layer to ignore: {}\", disabledTransportCategories);\n-        }\n-\n-        logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n-        resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n-\n-        ignoredAuditUsers = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredAuditUsers.size() == 1 && \"NONE\".equals(ignoredAuditUsers.get(0))) {\n-            ignoredAuditUsers.clear();\n-        }\n-\n-        if (ignoredAuditUsers.size() > 0) {\n-            log.info(\"Configured Users to ignore: {}\", ignoredAuditUsers);\n-        }\n-\n-        ignoredComplianceUsersForRead = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredComplianceUsersForRead.size() == 1 && \"NONE\".equals(ignoredComplianceUsersForRead.get(0))) {\n-            ignoredComplianceUsersForRead.clear();\n-        }\n-\n-        if (ignoredComplianceUsersForRead.size() > 0) {\n-            log.info(\"Configured Users to ignore for read compliance events: {}\", ignoredComplianceUsersForRead);\n-        }\n-\n-        ignoredComplianceUsersForWrite = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredComplianceUsersForWrite.size() == 1 && \"NONE\".equals(ignoredComplianceUsersForWrite.get(0))) {\n-            ignoredComplianceUsersForWrite.clear();\n-        }\n-\n-        if (ignoredComplianceUsersForWrite.size() > 0) {\n-            log.info(\"Configured Users to ignore for write compliance events: {}\", ignoredComplianceUsersForWrite);\n-        }\n-\n-        ignoreAuditRequests = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS, Collections.emptyList());\n-        if (ignoreAuditRequests.size() > 0) {\n-            log.info(\"Configured Requests to ignore: {}\", ignoreAuditRequests);\n-        }\n-\n-        this.excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+        this.auditConfig = AuditConfig.getConfig(settings);\n+\n+        log.info(\"Configured audit setting for auditing on rest layer : {}\", auditConfig.isRestApiAuditEnabled());\n+        log.info(\"Configured audit setting for auditing on transport layer : {}\", auditConfig.isTransportApiAuditEnabled());\n+        log.info(\"Configured audit setting to log request body : {}\", auditConfig.shouldLogRequestBody());\n+        log.info(\"Configured audit setting to resolve bulk requests : {}\", auditConfig.shouldResolveBulkRequests());\n+        log.info(\"Configured audit setting to resolve indices : {}\", auditConfig.shouldResolveIndices());\n+        log.info(\"Configured audit setting to exclude sensitive headers : {}\", auditConfig.shouldExcludeSensitiveHeaders());\n+        log.info(\"All configured audit settings : {}\", auditConfig.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM2NTg5OA==", "bodyText": "Instead of toString() I recommend delegating logging to AuditConfig class itself: public void log(Logger log).", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r399365898", "createdAt": "2020-03-27T15:53:45Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,206 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableSet;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean isRestApiAuditEnabled;\n+    private final boolean isTransportAuditEnabled;\n+    private final boolean resolveBulkRequests;\n+    private final boolean logRequestBody;\n+    private final boolean resolveIndices;\n+    private final boolean excludeSensitiveHeaders;\n+    private final Set<String> ignoredAuditUsers;\n+    private final Set<String> ignoredComplianceUsersForRead;\n+    private final Set<String> ignoredComplianceUsersForWrite;\n+    private final Set<String> ignoreAuditRequests;\n+    private final EnumSet<AuditCategory> disabledRestCategories;\n+    private final EnumSet<AuditCategory> disabledTransportCategories;\n+    private final String opendistrosecurityIndex;\n+\n+    private AuditConfig(final boolean isRestApiAuditEnabled,\n+                        final boolean isTransportAuditEnabled,\n+                        final boolean resolveBulkRequests,\n+                        final boolean logRequestBody,\n+                        final boolean resolveIndices,\n+                        final boolean excludeSensitiveHeaders,\n+                        final Set<String> ignoredAuditUsers,\n+                        final Set<String> ignoredComplianceUsersForRead,\n+                        final Set<String> ignoredComplianceUsersForWrite,\n+                        final Set<String> ignoredAuditRequests,\n+                        final EnumSet<AuditCategory> disabledRestCategories,\n+                        final EnumSet<AuditCategory> disabledTransportCategories,\n+                        final String opendistrosecurityIndex) {\n+        this.isRestApiAuditEnabled = isRestApiAuditEnabled;\n+        this.isTransportAuditEnabled = isTransportAuditEnabled;\n+        this.resolveBulkRequests = resolveBulkRequests;\n+        this.logRequestBody = logRequestBody;\n+        this.resolveIndices = resolveIndices;\n+        this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+        this.ignoredAuditUsers = ignoredAuditUsers;\n+        this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+        this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+        this.ignoreAuditRequests = ignoredAuditRequests;\n+        this.disabledRestCategories = disabledRestCategories;\n+        this.disabledTransportCategories = disabledTransportCategories;\n+        this.opendistrosecurityIndex = opendistrosecurityIndex;\n+    }\n+\n+    public static AuditConfig getConfig(Settings settings) {\n+        final boolean isRestApiAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n+        final boolean isTransportAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n+        final boolean resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n+        final boolean logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n+        final boolean resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n+        final boolean excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+        final String opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n+\n+        final EnumSet<AuditCategory> disabledRestCategories = AuditCategory.parse(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES,\n+                true));\n+\n+        final EnumSet<AuditCategory> disabledTransportCategories = AuditCategory.parse(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES,\n+                true));\n+\n+        final Set<String> ignoredAuditUsers = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoredComplianceUsersForRead = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoredComplianceUsersForWrite = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoreAuditRequests = ImmutableSet.copyOf(settings.getAsList(\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS,\n+                Collections.emptyList()));\n+\n+        return new AuditConfig(isRestApiAuditEnabled,\n+                isTransportAuditEnabled,\n+                resolveBulkRequests,\n+                logRequestBody,\n+                resolveIndices,\n+                excludeSensitiveHeaders,\n+                ignoredAuditUsers,\n+                ignoredComplianceUsersForRead,\n+                ignoredComplianceUsersForWrite,\n+                ignoreAuditRequests,\n+                disabledRestCategories,\n+                disabledTransportCategories,\n+                opendistrosecurityIndex);\n+    }\n+\n+    private static List<String> getSettingAsList(final Settings settings, final String key, final List<String> defaultList, final boolean ignoreCaseForNone) {\n+        final List<String> list = settings.getAsList(key, defaultList);\n+        if (list.size() == 1) {\n+            final String elem = list.get(0);\n+            final String none = \"NONE\";\n+\n+            if (ignoreCaseForNone && none.equalsIgnoreCase(elem)) {\n+                return Collections.emptyList();\n+            }\n+            if (!ignoreCaseForNone && none.equals(elem)) {\n+                return Collections.emptyList();\n+            }\n+        }\n+        return list;\n+    }\n+\n+    public boolean isRestApiAuditEnabled() {\n+        return isRestApiAuditEnabled;\n+    }\n+\n+    public boolean isTransportApiAuditEnabled() {\n+        return isTransportAuditEnabled;\n+    }\n+\n+    public boolean shouldResolveBulkRequests() {\n+        return resolveBulkRequests;\n+    }\n+\n+    public boolean shouldLogRequestBody() {\n+        return logRequestBody;\n+    }\n+\n+    public boolean shouldResolveIndices() {\n+        return resolveIndices;\n+    }\n+\n+    public boolean shouldExcludeSensitiveHeaders() {\n+        return excludeSensitiveHeaders;\n+    }\n+\n+    public Set<String> getIgnoredAuditUsers() {\n+        return ignoredAuditUsers;\n+    }\n+\n+    public Set<String> getIgnoredComplianceUsersForRead() {\n+        return ignoredComplianceUsersForRead;\n+    }\n+\n+    public Set<String> getIgnoredComplianceUsersForWrite() {\n+        return ignoredComplianceUsersForWrite;\n+    }\n+\n+    public Set<String> getIgnoredAuditRequests() {\n+        return ignoreAuditRequests;\n+    }\n+\n+    public EnumSet<AuditCategory> getDisabledRestCategories() {\n+        return disabledRestCategories;\n+    }\n+\n+    public EnumSet<AuditCategory> getDisabledTransportCategories() {\n+        return disabledTransportCategories;\n+    }\n+\n+    public String getOpendistrosecurityIndex() {\n+        return opendistrosecurityIndex;\n+    }\n+\n+    @Override\n+    public String toString() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM2OTAwMw==", "bodyText": "Please also add test for empty.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r399369003", "createdAt": "2020-03-27T15:58:15Z", "author": {"login": "vrozov"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfigTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableSet;\n+import org.elasticsearch.common.settings.Settings;\n+import org.junit.Test;\n+\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.Set;\n+\n+import static com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory.*;\n+import static org.junit.Assert.*;\n+\n+public class AuditConfigTest {\n+\n+    @Test\n+    public void testDefault() {\n+        // arrange\n+        final Set<String> defaultIgnoredUser = Collections.singleton(\"kibanaserver\");\n+        final EnumSet<AuditCategory> defaultDisabledCategories = EnumSet.of(AUTHENTICATED, GRANTED_PRIVILEGES);\n+        // act\n+        final AuditConfig auditConfig = AuditConfig.getConfig(Settings.EMPTY);\n+        // assert\n+        assertTrue(auditConfig.isRestApiAuditEnabled());\n+        assertTrue(auditConfig.isTransportApiAuditEnabled());\n+        assertTrue(auditConfig.shouldLogRequestBody());\n+        assertTrue(auditConfig.shouldResolveIndices());\n+        assertFalse(auditConfig.shouldResolveBulkRequests());\n+        assertTrue(auditConfig.shouldExcludeSensitiveHeaders());\n+        assertTrue(auditConfig.getIgnoredAuditRequests().isEmpty());\n+        assertEquals(auditConfig.getIgnoredAuditUsers(), defaultIgnoredUser);\n+        assertEquals(auditConfig.getIgnoredComplianceUsersForRead(), defaultIgnoredUser);\n+        assertEquals(auditConfig.getIgnoredComplianceUsersForWrite(), defaultIgnoredUser);\n+        assertEquals(auditConfig.getDisabledRestCategories(), defaultDisabledCategories);\n+        assertEquals(auditConfig.getDisabledTransportCategories(), defaultDisabledCategories);\n+        assertEquals(\".opendistro_security\", auditConfig.getOpendistrosecurityIndex());\n+    }\n+\n+    @Test\n+    public void testConfig() {\n+        // arrange\n+        final Settings settings = Settings.builder()\n+                .put(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, false)\n+                .put(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, false)\n+                .put(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, true)\n+                .put(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, false)\n+                .put(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, false)\n+                .put(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, false)\n+                .put(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, \"test-index\")\n+                .putList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS, \"test-request\")\n+                .putList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS, \"test-user\")\n+                .putList(ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS,\n+                        \"test-user-1\", \"test-user-2\")\n+                .putList(ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS,\n+                        \"test-user-3\", \"test-user-4\")\n+                .putList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES,\n+                        BAD_HEADERS.toString(), SSL_EXCEPTION.toString())\n+                .putList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES,\n+                        FAILED_LOGIN.toString(), MISSING_PRIVILEGES.toString())\n+                .build();\n+        // act\n+        final AuditConfig auditConfig = AuditConfig.getConfig(settings);\n+        // assert\n+        assertFalse(auditConfig.isRestApiAuditEnabled());\n+        assertFalse(auditConfig.isTransportApiAuditEnabled());\n+        assertFalse(auditConfig.shouldLogRequestBody());\n+        assertFalse(auditConfig.shouldResolveIndices());\n+        assertTrue(auditConfig.shouldResolveBulkRequests());\n+        assertFalse(auditConfig.shouldExcludeSensitiveHeaders());\n+        assertEquals(auditConfig.getIgnoredAuditUsers(), Collections.singleton(\"test-user\"));\n+        assertEquals(auditConfig.getIgnoredAuditRequests(), Collections.singleton(\"test-request\"));\n+        assertEquals(auditConfig.getIgnoredComplianceUsersForRead(), ImmutableSet.of(\"test-user-1\", \"test-user-2\"));\n+        assertEquals(auditConfig.getIgnoredComplianceUsersForWrite(), ImmutableSet.of(\"test-user-3\", \"test-user-4\"));\n+        assertEquals(auditConfig.getDisabledRestCategories(), EnumSet.of(BAD_HEADERS, SSL_EXCEPTION));\n+        assertEquals(auditConfig.getDisabledTransportCategories(), EnumSet.of(FAILED_LOGIN, MISSING_PRIVILEGES));\n+        assertEquals(\"test-index\", auditConfig.getOpendistrosecurityIndex());\n+    }\n+\n+    @Test\n+    public void testNone() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 82}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMTE4NjAy", "url": "https://github.com/opensearch-project/security/pull/306#pullrequestreview-383118602", "createdAt": "2020-03-27T18:48:11Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxODo0ODoxMVrOF894Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxODo0ODoxMVrOF894Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ3MjcyMw==", "bodyText": "Please apply the same pattern: \"Auditing of request body is {}\"...", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r399472723", "createdAt": "2020-03-27T18:48:11Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "diffHunk": "@@ -118,81 +99,18 @@\n     protected AbstractAuditLog(Settings settings, final ThreadPool threadPool, final IndexNameExpressionResolver resolver, final ClusterService clusterService) {\n         super();\n         this.threadPool = threadPool;\n-\n         this.settings = settings;\n         this.resolver = resolver;\n         this.clusterService = clusterService;\n+        this.auditConfig = AuditConfig.from(settings);\n \n-        this.opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n-\n-        resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n-\n-        restAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n-        transportAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n-\n-        final List<String> disabledRestCategoriesList = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES, DEFAULT_DISABLED_CATEGORIES);\n-\n-        if (disabledRestCategoriesList.isEmpty() || (disabledRestCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledRestCategoriesList.get(0)))) {\n-            disabledRestCategories = EnumSet.noneOf(AuditCategory.class);\n-        } else {\n-            disabledRestCategories = AuditCategory.parse(disabledRestCategoriesList);\n-        }\n-\n-        if (!disabledRestCategories.isEmpty()) {\n-            log.info(\"Configured categories on rest layer to ignore: {}\", disabledRestCategories);\n-        }\n-\n-        final List<String> disabledTransportCategoriesList = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES, DEFAULT_DISABLED_CATEGORIES);\n-\n-        if (disabledTransportCategoriesList.isEmpty() || (disabledTransportCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledTransportCategoriesList.get(0)))) {\n-            disabledTransportCategories = EnumSet.noneOf(AuditCategory.class);\n-        } else {\n-            disabledTransportCategories = AuditCategory.parse(disabledTransportCategoriesList);\n-        }\n-\n-        if (!disabledTransportCategories.isEmpty()) {\n-            log.info(\"Configured categories on transport layer to ignore: {}\", disabledTransportCategories);\n-        }\n-\n-        logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n-        resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n-\n-        ignoredAuditUsers = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredAuditUsers.size() == 1 && \"NONE\".equals(ignoredAuditUsers.get(0))) {\n-            ignoredAuditUsers.clear();\n-        }\n-\n-        if (ignoredAuditUsers.size() > 0) {\n-            log.info(\"Configured Users to ignore: {}\", ignoredAuditUsers);\n-        }\n-\n-        ignoredComplianceUsersForRead = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredComplianceUsersForRead.size() == 1 && \"NONE\".equals(ignoredComplianceUsersForRead.get(0))) {\n-            ignoredComplianceUsersForRead.clear();\n-        }\n-\n-        if (ignoredComplianceUsersForRead.size() > 0) {\n-            log.info(\"Configured Users to ignore for read compliance events: {}\", ignoredComplianceUsersForRead);\n-        }\n+        log.info(\"Auditing on REST API is {}\", auditConfig.isRestApiAuditEnabled() ? \"enabled\" : \"disabled\");\n+        log.info(\"Auditing on Transport API is {}\", auditConfig.isTransportApiAuditEnabled() ? \"enabled\" : \"disabled\");\n+        log.info(\"Configured audit setting to log request body : {}\", auditConfig.shouldLogRequestBody());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 124}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMTI1MDI5", "url": "https://github.com/opensearch-project/security/pull/306#pullrequestreview-383125029", "createdAt": "2020-03-27T18:58:14Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxODo1ODoxNFrOF8-Mrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxODo1ODoxNFrOF8-Mrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ3NzkzNQ==", "bodyText": "Consider adding excluded REST API audit categories here in case auditConfig.isRestApiAuditEnabled() is true. The same for Transport API. I don't see them being logged.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r399477935", "createdAt": "2020-03-27T18:58:14Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "diffHunk": "@@ -118,81 +99,18 @@\n     protected AbstractAuditLog(Settings settings, final ThreadPool threadPool, final IndexNameExpressionResolver resolver, final ClusterService clusterService) {\n         super();\n         this.threadPool = threadPool;\n-\n         this.settings = settings;\n         this.resolver = resolver;\n         this.clusterService = clusterService;\n+        this.auditConfig = AuditConfig.from(settings);\n \n-        this.opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n-\n-        resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n-\n-        restAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n-        transportAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n-\n-        final List<String> disabledRestCategoriesList = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES, DEFAULT_DISABLED_CATEGORIES);\n-\n-        if (disabledRestCategoriesList.isEmpty() || (disabledRestCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledRestCategoriesList.get(0)))) {\n-            disabledRestCategories = EnumSet.noneOf(AuditCategory.class);\n-        } else {\n-            disabledRestCategories = AuditCategory.parse(disabledRestCategoriesList);\n-        }\n-\n-        if (!disabledRestCategories.isEmpty()) {\n-            log.info(\"Configured categories on rest layer to ignore: {}\", disabledRestCategories);\n-        }\n-\n-        final List<String> disabledTransportCategoriesList = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES, DEFAULT_DISABLED_CATEGORIES);\n-\n-        if (disabledTransportCategoriesList.isEmpty() || (disabledTransportCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledTransportCategoriesList.get(0)))) {\n-            disabledTransportCategories = EnumSet.noneOf(AuditCategory.class);\n-        } else {\n-            disabledTransportCategories = AuditCategory.parse(disabledTransportCategoriesList);\n-        }\n-\n-        if (!disabledTransportCategories.isEmpty()) {\n-            log.info(\"Configured categories on transport layer to ignore: {}\", disabledTransportCategories);\n-        }\n-\n-        logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n-        resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n-\n-        ignoredAuditUsers = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredAuditUsers.size() == 1 && \"NONE\".equals(ignoredAuditUsers.get(0))) {\n-            ignoredAuditUsers.clear();\n-        }\n-\n-        if (ignoredAuditUsers.size() > 0) {\n-            log.info(\"Configured Users to ignore: {}\", ignoredAuditUsers);\n-        }\n-\n-        ignoredComplianceUsersForRead = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS, defaultIgnoredUsers));\n-\n-        if(ignoredComplianceUsersForRead.size() == 1 && \"NONE\".equals(ignoredComplianceUsersForRead.get(0))) {\n-            ignoredComplianceUsersForRead.clear();\n-        }\n-\n-        if (ignoredComplianceUsersForRead.size() > 0) {\n-            log.info(\"Configured Users to ignore for read compliance events: {}\", ignoredComplianceUsersForRead);\n-        }\n+        log.info(\"Auditing on REST API is {}\", auditConfig.isRestApiAuditEnabled() ? \"enabled\" : \"disabled\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 122}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMTg1NTc2", "url": "https://github.com/opensearch-project/security/pull/306#pullrequestreview-383185576", "createdAt": "2020-03-27T20:40:40Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMDo0MDo0MFrOF9BLJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMTowOToxNVrOF9B7fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUyNjY5Mg==", "bodyText": "nit: \"Bulk requests resolution is {} (enabled/disabled) during request auditing.\"", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r399526692", "createdAt": "2020-03-27T20:40:40Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean isRestApiAuditEnabled;\n+    private final boolean isTransportApiAuditEnabled;\n+    private final boolean resolveBulkRequests;\n+    private final boolean logRequestBody;\n+    private final boolean resolveIndices;\n+    private final boolean excludeSensitiveHeaders;\n+    private final Set<String> ignoredAuditUsers;\n+    private final Set<String> ignoredComplianceUsersForRead;\n+    private final Set<String> ignoredComplianceUsersForWrite;\n+    private final Set<String> ignoreAuditRequests;\n+    private final EnumSet<AuditCategory> disabledRestCategories;\n+    private final EnumSet<AuditCategory> disabledTransportCategories;\n+    private final String opendistrosecurityIndex;\n+\n+    private AuditConfig(final boolean isRestApiAuditEnabled,\n+                        final boolean isTransportApiAuditEnabled,\n+                        final boolean resolveBulkRequests,\n+                        final boolean logRequestBody,\n+                        final boolean resolveIndices,\n+                        final boolean excludeSensitiveHeaders,\n+                        final Set<String> ignoredAuditUsers,\n+                        final Set<String> ignoredComplianceUsersForRead,\n+                        final Set<String> ignoredComplianceUsersForWrite,\n+                        final Set<String> ignoredAuditRequests,\n+                        final EnumSet<AuditCategory> disabledRestCategories,\n+                        final EnumSet<AuditCategory> disabledTransportCategories,\n+                        final String opendistrosecurityIndex) {\n+        this.isRestApiAuditEnabled = isRestApiAuditEnabled;\n+        this.isTransportApiAuditEnabled = isTransportApiAuditEnabled;\n+        this.resolveBulkRequests = resolveBulkRequests;\n+        this.logRequestBody = logRequestBody;\n+        this.resolveIndices = resolveIndices;\n+        this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+        this.ignoredAuditUsers = ignoredAuditUsers;\n+        this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+        this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+        this.ignoreAuditRequests = ignoredAuditRequests;\n+        this.disabledRestCategories = disabledRestCategories;\n+        this.disabledTransportCategories = disabledTransportCategories;\n+        this.opendistrosecurityIndex = opendistrosecurityIndex;\n+    }\n+\n+    public static AuditConfig from(Settings settings) {\n+        final boolean isRestApiAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n+        final boolean isTransportAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n+        final boolean resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n+        final boolean logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n+        final boolean resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n+        final boolean excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+        final String opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n+\n+        final EnumSet<AuditCategory> disabledRestCategories = AuditCategory.parse(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES,\n+                true));\n+\n+        final EnumSet<AuditCategory> disabledTransportCategories = AuditCategory.parse(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES,\n+                true));\n+\n+        final Set<String> ignoredAuditUsers = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoredComplianceUsersForRead = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoredComplianceUsersForWrite = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoreAuditRequests = ImmutableSet.copyOf(settings.getAsList(\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS,\n+                Collections.emptyList()));\n+\n+        return new AuditConfig(isRestApiAuditEnabled,\n+                isTransportAuditEnabled,\n+                resolveBulkRequests,\n+                logRequestBody,\n+                resolveIndices,\n+                excludeSensitiveHeaders,\n+                ignoredAuditUsers,\n+                ignoredComplianceUsersForRead,\n+                ignoredComplianceUsersForWrite,\n+                ignoreAuditRequests,\n+                disabledRestCategories,\n+                disabledTransportCategories,\n+                opendistrosecurityIndex);\n+    }\n+\n+    private static List<String> getSettingAsList(final Settings settings, final String key, final List<String> defaultList, final boolean ignoreCaseForNone) {\n+        final List<String> list = settings.getAsList(key, defaultList);\n+        if (list.size() == 1 && \"NONE\".equals(ignoreCaseForNone? list.get(0).toUpperCase() : list.get(0))) {\n+            return Collections.emptyList();\n+        }\n+        return list;\n+    }\n+\n+    public boolean isRestApiAuditEnabled() {\n+        return isRestApiAuditEnabled;\n+    }\n+\n+    public boolean isTransportApiAuditEnabled() {\n+        return isTransportApiAuditEnabled;\n+    }\n+\n+    public boolean shouldResolveBulkRequests() {\n+        return resolveBulkRequests;\n+    }\n+\n+    public boolean shouldLogRequestBody() {\n+        return logRequestBody;\n+    }\n+\n+    public boolean shouldResolveIndices() {\n+        return resolveIndices;\n+    }\n+\n+    public boolean shouldExcludeSensitiveHeaders() {\n+        return excludeSensitiveHeaders;\n+    }\n+\n+    public Set<String> getIgnoredAuditUsers() {\n+        return ignoredAuditUsers;\n+    }\n+\n+    public Set<String> getIgnoredComplianceUsersForRead() {\n+        return ignoredComplianceUsersForRead;\n+    }\n+\n+    public Set<String> getIgnoredComplianceUsersForWrite() {\n+        return ignoredComplianceUsersForWrite;\n+    }\n+\n+    public Set<String> getIgnoredAuditRequests() {\n+        return ignoreAuditRequests;\n+    }\n+\n+    public EnumSet<AuditCategory> getDisabledRestCategories() {\n+        return disabledRestCategories;\n+    }\n+\n+    public EnumSet<AuditCategory> getDisabledTransportCategories() {\n+        return disabledTransportCategories;\n+    }\n+\n+    public String getOpendistrosecurityIndex() {\n+        return opendistrosecurityIndex;\n+    }\n+\n+    public void log(Logger logger) {\n+        logger.info(\"Auditing on REST API is {}\", isRestApiAuditEnabled ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing on Transport API is {}\", isTransportApiAuditEnabled ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing of request body is {}\", logRequestBody ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing should {} resolve bulk requests\", resolveBulkRequests ? \"\" : \"not\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUyODQwMw==", "bodyText": "nit: \"Sensitive headers auditing is {} (enabled/disabled).\"", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r399528403", "createdAt": "2020-03-27T20:44:24Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean isRestApiAuditEnabled;\n+    private final boolean isTransportApiAuditEnabled;\n+    private final boolean resolveBulkRequests;\n+    private final boolean logRequestBody;\n+    private final boolean resolveIndices;\n+    private final boolean excludeSensitiveHeaders;\n+    private final Set<String> ignoredAuditUsers;\n+    private final Set<String> ignoredComplianceUsersForRead;\n+    private final Set<String> ignoredComplianceUsersForWrite;\n+    private final Set<String> ignoreAuditRequests;\n+    private final EnumSet<AuditCategory> disabledRestCategories;\n+    private final EnumSet<AuditCategory> disabledTransportCategories;\n+    private final String opendistrosecurityIndex;\n+\n+    private AuditConfig(final boolean isRestApiAuditEnabled,\n+                        final boolean isTransportApiAuditEnabled,\n+                        final boolean resolveBulkRequests,\n+                        final boolean logRequestBody,\n+                        final boolean resolveIndices,\n+                        final boolean excludeSensitiveHeaders,\n+                        final Set<String> ignoredAuditUsers,\n+                        final Set<String> ignoredComplianceUsersForRead,\n+                        final Set<String> ignoredComplianceUsersForWrite,\n+                        final Set<String> ignoredAuditRequests,\n+                        final EnumSet<AuditCategory> disabledRestCategories,\n+                        final EnumSet<AuditCategory> disabledTransportCategories,\n+                        final String opendistrosecurityIndex) {\n+        this.isRestApiAuditEnabled = isRestApiAuditEnabled;\n+        this.isTransportApiAuditEnabled = isTransportApiAuditEnabled;\n+        this.resolveBulkRequests = resolveBulkRequests;\n+        this.logRequestBody = logRequestBody;\n+        this.resolveIndices = resolveIndices;\n+        this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+        this.ignoredAuditUsers = ignoredAuditUsers;\n+        this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+        this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+        this.ignoreAuditRequests = ignoredAuditRequests;\n+        this.disabledRestCategories = disabledRestCategories;\n+        this.disabledTransportCategories = disabledTransportCategories;\n+        this.opendistrosecurityIndex = opendistrosecurityIndex;\n+    }\n+\n+    public static AuditConfig from(Settings settings) {\n+        final boolean isRestApiAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n+        final boolean isTransportAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n+        final boolean resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n+        final boolean logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n+        final boolean resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n+        final boolean excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+        final String opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n+\n+        final EnumSet<AuditCategory> disabledRestCategories = AuditCategory.parse(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES,\n+                true));\n+\n+        final EnumSet<AuditCategory> disabledTransportCategories = AuditCategory.parse(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES,\n+                true));\n+\n+        final Set<String> ignoredAuditUsers = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoredComplianceUsersForRead = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoredComplianceUsersForWrite = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoreAuditRequests = ImmutableSet.copyOf(settings.getAsList(\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS,\n+                Collections.emptyList()));\n+\n+        return new AuditConfig(isRestApiAuditEnabled,\n+                isTransportAuditEnabled,\n+                resolveBulkRequests,\n+                logRequestBody,\n+                resolveIndices,\n+                excludeSensitiveHeaders,\n+                ignoredAuditUsers,\n+                ignoredComplianceUsersForRead,\n+                ignoredComplianceUsersForWrite,\n+                ignoreAuditRequests,\n+                disabledRestCategories,\n+                disabledTransportCategories,\n+                opendistrosecurityIndex);\n+    }\n+\n+    private static List<String> getSettingAsList(final Settings settings, final String key, final List<String> defaultList, final boolean ignoreCaseForNone) {\n+        final List<String> list = settings.getAsList(key, defaultList);\n+        if (list.size() == 1 && \"NONE\".equals(ignoreCaseForNone? list.get(0).toUpperCase() : list.get(0))) {\n+            return Collections.emptyList();\n+        }\n+        return list;\n+    }\n+\n+    public boolean isRestApiAuditEnabled() {\n+        return isRestApiAuditEnabled;\n+    }\n+\n+    public boolean isTransportApiAuditEnabled() {\n+        return isTransportApiAuditEnabled;\n+    }\n+\n+    public boolean shouldResolveBulkRequests() {\n+        return resolveBulkRequests;\n+    }\n+\n+    public boolean shouldLogRequestBody() {\n+        return logRequestBody;\n+    }\n+\n+    public boolean shouldResolveIndices() {\n+        return resolveIndices;\n+    }\n+\n+    public boolean shouldExcludeSensitiveHeaders() {\n+        return excludeSensitiveHeaders;\n+    }\n+\n+    public Set<String> getIgnoredAuditUsers() {\n+        return ignoredAuditUsers;\n+    }\n+\n+    public Set<String> getIgnoredComplianceUsersForRead() {\n+        return ignoredComplianceUsersForRead;\n+    }\n+\n+    public Set<String> getIgnoredComplianceUsersForWrite() {\n+        return ignoredComplianceUsersForWrite;\n+    }\n+\n+    public Set<String> getIgnoredAuditRequests() {\n+        return ignoreAuditRequests;\n+    }\n+\n+    public EnumSet<AuditCategory> getDisabledRestCategories() {\n+        return disabledRestCategories;\n+    }\n+\n+    public EnumSet<AuditCategory> getDisabledTransportCategories() {\n+        return disabledTransportCategories;\n+    }\n+\n+    public String getOpendistrosecurityIndex() {\n+        return opendistrosecurityIndex;\n+    }\n+\n+    public void log(Logger logger) {\n+        logger.info(\"Auditing on REST API is {}\", isRestApiAuditEnabled ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing on Transport API is {}\", isTransportApiAuditEnabled ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing of request body is {}\", logRequestBody ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing should {} resolve bulk requests\", resolveBulkRequests ? \"\" : \"not\");\n+        logger.info(\"Auditing should {} resolve indices\", resolveBulkRequests ? \"\" : \"not\");\n+        logger.info(\"Auditing should {} exclude sensitive headers\", excludeSensitiveHeaders ? \"\" : \"not\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUyODk0Mw==", "bodyText": "nit: \"Auditing requests from {} users is disabled.\" (check if it is not empty?)", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r399528943", "createdAt": "2020-03-27T20:45:35Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean isRestApiAuditEnabled;\n+    private final boolean isTransportApiAuditEnabled;\n+    private final boolean resolveBulkRequests;\n+    private final boolean logRequestBody;\n+    private final boolean resolveIndices;\n+    private final boolean excludeSensitiveHeaders;\n+    private final Set<String> ignoredAuditUsers;\n+    private final Set<String> ignoredComplianceUsersForRead;\n+    private final Set<String> ignoredComplianceUsersForWrite;\n+    private final Set<String> ignoreAuditRequests;\n+    private final EnumSet<AuditCategory> disabledRestCategories;\n+    private final EnumSet<AuditCategory> disabledTransportCategories;\n+    private final String opendistrosecurityIndex;\n+\n+    private AuditConfig(final boolean isRestApiAuditEnabled,\n+                        final boolean isTransportApiAuditEnabled,\n+                        final boolean resolveBulkRequests,\n+                        final boolean logRequestBody,\n+                        final boolean resolveIndices,\n+                        final boolean excludeSensitiveHeaders,\n+                        final Set<String> ignoredAuditUsers,\n+                        final Set<String> ignoredComplianceUsersForRead,\n+                        final Set<String> ignoredComplianceUsersForWrite,\n+                        final Set<String> ignoredAuditRequests,\n+                        final EnumSet<AuditCategory> disabledRestCategories,\n+                        final EnumSet<AuditCategory> disabledTransportCategories,\n+                        final String opendistrosecurityIndex) {\n+        this.isRestApiAuditEnabled = isRestApiAuditEnabled;\n+        this.isTransportApiAuditEnabled = isTransportApiAuditEnabled;\n+        this.resolveBulkRequests = resolveBulkRequests;\n+        this.logRequestBody = logRequestBody;\n+        this.resolveIndices = resolveIndices;\n+        this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+        this.ignoredAuditUsers = ignoredAuditUsers;\n+        this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+        this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+        this.ignoreAuditRequests = ignoredAuditRequests;\n+        this.disabledRestCategories = disabledRestCategories;\n+        this.disabledTransportCategories = disabledTransportCategories;\n+        this.opendistrosecurityIndex = opendistrosecurityIndex;\n+    }\n+\n+    public static AuditConfig from(Settings settings) {\n+        final boolean isRestApiAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n+        final boolean isTransportAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n+        final boolean resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n+        final boolean logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n+        final boolean resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n+        final boolean excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+        final String opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n+\n+        final EnumSet<AuditCategory> disabledRestCategories = AuditCategory.parse(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES,\n+                true));\n+\n+        final EnumSet<AuditCategory> disabledTransportCategories = AuditCategory.parse(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES,\n+                true));\n+\n+        final Set<String> ignoredAuditUsers = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoredComplianceUsersForRead = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoredComplianceUsersForWrite = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoreAuditRequests = ImmutableSet.copyOf(settings.getAsList(\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS,\n+                Collections.emptyList()));\n+\n+        return new AuditConfig(isRestApiAuditEnabled,\n+                isTransportAuditEnabled,\n+                resolveBulkRequests,\n+                logRequestBody,\n+                resolveIndices,\n+                excludeSensitiveHeaders,\n+                ignoredAuditUsers,\n+                ignoredComplianceUsersForRead,\n+                ignoredComplianceUsersForWrite,\n+                ignoreAuditRequests,\n+                disabledRestCategories,\n+                disabledTransportCategories,\n+                opendistrosecurityIndex);\n+    }\n+\n+    private static List<String> getSettingAsList(final Settings settings, final String key, final List<String> defaultList, final boolean ignoreCaseForNone) {\n+        final List<String> list = settings.getAsList(key, defaultList);\n+        if (list.size() == 1 && \"NONE\".equals(ignoreCaseForNone? list.get(0).toUpperCase() : list.get(0))) {\n+            return Collections.emptyList();\n+        }\n+        return list;\n+    }\n+\n+    public boolean isRestApiAuditEnabled() {\n+        return isRestApiAuditEnabled;\n+    }\n+\n+    public boolean isTransportApiAuditEnabled() {\n+        return isTransportApiAuditEnabled;\n+    }\n+\n+    public boolean shouldResolveBulkRequests() {\n+        return resolveBulkRequests;\n+    }\n+\n+    public boolean shouldLogRequestBody() {\n+        return logRequestBody;\n+    }\n+\n+    public boolean shouldResolveIndices() {\n+        return resolveIndices;\n+    }\n+\n+    public boolean shouldExcludeSensitiveHeaders() {\n+        return excludeSensitiveHeaders;\n+    }\n+\n+    public Set<String> getIgnoredAuditUsers() {\n+        return ignoredAuditUsers;\n+    }\n+\n+    public Set<String> getIgnoredComplianceUsersForRead() {\n+        return ignoredComplianceUsersForRead;\n+    }\n+\n+    public Set<String> getIgnoredComplianceUsersForWrite() {\n+        return ignoredComplianceUsersForWrite;\n+    }\n+\n+    public Set<String> getIgnoredAuditRequests() {\n+        return ignoreAuditRequests;\n+    }\n+\n+    public EnumSet<AuditCategory> getDisabledRestCategories() {\n+        return disabledRestCategories;\n+    }\n+\n+    public EnumSet<AuditCategory> getDisabledTransportCategories() {\n+        return disabledTransportCategories;\n+    }\n+\n+    public String getOpendistrosecurityIndex() {\n+        return opendistrosecurityIndex;\n+    }\n+\n+    public void log(Logger logger) {\n+        logger.info(\"Auditing on REST API is {}\", isRestApiAuditEnabled ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing on Transport API is {}\", isTransportApiAuditEnabled ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing of request body is {}\", logRequestBody ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing should {} resolve bulk requests\", resolveBulkRequests ? \"\" : \"not\");\n+        logger.info(\"Auditing should {} resolve indices\", resolveBulkRequests ? \"\" : \"not\");\n+        logger.info(\"Auditing should {} exclude sensitive headers\", excludeSensitiveHeaders ? \"\" : \"not\");\n+        logger.info(\"Auditing will ignore users {}\", ignoredAuditUsers);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUzMDAxOA==", "bodyText": "nit: \"Compliance read operation requests auditing from {} users is disabled.\" (check if it is not empty)", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r399530018", "createdAt": "2020-03-27T20:48:12Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean isRestApiAuditEnabled;\n+    private final boolean isTransportApiAuditEnabled;\n+    private final boolean resolveBulkRequests;\n+    private final boolean logRequestBody;\n+    private final boolean resolveIndices;\n+    private final boolean excludeSensitiveHeaders;\n+    private final Set<String> ignoredAuditUsers;\n+    private final Set<String> ignoredComplianceUsersForRead;\n+    private final Set<String> ignoredComplianceUsersForWrite;\n+    private final Set<String> ignoreAuditRequests;\n+    private final EnumSet<AuditCategory> disabledRestCategories;\n+    private final EnumSet<AuditCategory> disabledTransportCategories;\n+    private final String opendistrosecurityIndex;\n+\n+    private AuditConfig(final boolean isRestApiAuditEnabled,\n+                        final boolean isTransportApiAuditEnabled,\n+                        final boolean resolveBulkRequests,\n+                        final boolean logRequestBody,\n+                        final boolean resolveIndices,\n+                        final boolean excludeSensitiveHeaders,\n+                        final Set<String> ignoredAuditUsers,\n+                        final Set<String> ignoredComplianceUsersForRead,\n+                        final Set<String> ignoredComplianceUsersForWrite,\n+                        final Set<String> ignoredAuditRequests,\n+                        final EnumSet<AuditCategory> disabledRestCategories,\n+                        final EnumSet<AuditCategory> disabledTransportCategories,\n+                        final String opendistrosecurityIndex) {\n+        this.isRestApiAuditEnabled = isRestApiAuditEnabled;\n+        this.isTransportApiAuditEnabled = isTransportApiAuditEnabled;\n+        this.resolveBulkRequests = resolveBulkRequests;\n+        this.logRequestBody = logRequestBody;\n+        this.resolveIndices = resolveIndices;\n+        this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+        this.ignoredAuditUsers = ignoredAuditUsers;\n+        this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+        this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+        this.ignoreAuditRequests = ignoredAuditRequests;\n+        this.disabledRestCategories = disabledRestCategories;\n+        this.disabledTransportCategories = disabledTransportCategories;\n+        this.opendistrosecurityIndex = opendistrosecurityIndex;\n+    }\n+\n+    public static AuditConfig from(Settings settings) {\n+        final boolean isRestApiAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n+        final boolean isTransportAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n+        final boolean resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n+        final boolean logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n+        final boolean resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n+        final boolean excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+        final String opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n+\n+        final EnumSet<AuditCategory> disabledRestCategories = AuditCategory.parse(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES,\n+                true));\n+\n+        final EnumSet<AuditCategory> disabledTransportCategories = AuditCategory.parse(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES,\n+                true));\n+\n+        final Set<String> ignoredAuditUsers = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoredComplianceUsersForRead = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoredComplianceUsersForWrite = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoreAuditRequests = ImmutableSet.copyOf(settings.getAsList(\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS,\n+                Collections.emptyList()));\n+\n+        return new AuditConfig(isRestApiAuditEnabled,\n+                isTransportAuditEnabled,\n+                resolveBulkRequests,\n+                logRequestBody,\n+                resolveIndices,\n+                excludeSensitiveHeaders,\n+                ignoredAuditUsers,\n+                ignoredComplianceUsersForRead,\n+                ignoredComplianceUsersForWrite,\n+                ignoreAuditRequests,\n+                disabledRestCategories,\n+                disabledTransportCategories,\n+                opendistrosecurityIndex);\n+    }\n+\n+    private static List<String> getSettingAsList(final Settings settings, final String key, final List<String> defaultList, final boolean ignoreCaseForNone) {\n+        final List<String> list = settings.getAsList(key, defaultList);\n+        if (list.size() == 1 && \"NONE\".equals(ignoreCaseForNone? list.get(0).toUpperCase() : list.get(0))) {\n+            return Collections.emptyList();\n+        }\n+        return list;\n+    }\n+\n+    public boolean isRestApiAuditEnabled() {\n+        return isRestApiAuditEnabled;\n+    }\n+\n+    public boolean isTransportApiAuditEnabled() {\n+        return isTransportApiAuditEnabled;\n+    }\n+\n+    public boolean shouldResolveBulkRequests() {\n+        return resolveBulkRequests;\n+    }\n+\n+    public boolean shouldLogRequestBody() {\n+        return logRequestBody;\n+    }\n+\n+    public boolean shouldResolveIndices() {\n+        return resolveIndices;\n+    }\n+\n+    public boolean shouldExcludeSensitiveHeaders() {\n+        return excludeSensitiveHeaders;\n+    }\n+\n+    public Set<String> getIgnoredAuditUsers() {\n+        return ignoredAuditUsers;\n+    }\n+\n+    public Set<String> getIgnoredComplianceUsersForRead() {\n+        return ignoredComplianceUsersForRead;\n+    }\n+\n+    public Set<String> getIgnoredComplianceUsersForWrite() {\n+        return ignoredComplianceUsersForWrite;\n+    }\n+\n+    public Set<String> getIgnoredAuditRequests() {\n+        return ignoreAuditRequests;\n+    }\n+\n+    public EnumSet<AuditCategory> getDisabledRestCategories() {\n+        return disabledRestCategories;\n+    }\n+\n+    public EnumSet<AuditCategory> getDisabledTransportCategories() {\n+        return disabledTransportCategories;\n+    }\n+\n+    public String getOpendistrosecurityIndex() {\n+        return opendistrosecurityIndex;\n+    }\n+\n+    public void log(Logger logger) {\n+        logger.info(\"Auditing on REST API is {}\", isRestApiAuditEnabled ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing on Transport API is {}\", isTransportApiAuditEnabled ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing of request body is {}\", logRequestBody ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing should {} resolve bulk requests\", resolveBulkRequests ? \"\" : \"not\");\n+        logger.info(\"Auditing should {} resolve indices\", resolveBulkRequests ? \"\" : \"not\");\n+        logger.info(\"Auditing should {} exclude sensitive headers\", excludeSensitiveHeaders ? \"\" : \"not\");\n+        logger.info(\"Auditing will ignore users {}\", ignoredAuditUsers);\n+        logger.info(\"Auditing of compliance read operation will ignore users {}\", ignoredComplianceUsersForRead);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUzMDI2Ng==", "bodyText": "nit: Same as read.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r399530266", "createdAt": "2020-03-27T20:48:43Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean isRestApiAuditEnabled;\n+    private final boolean isTransportApiAuditEnabled;\n+    private final boolean resolveBulkRequests;\n+    private final boolean logRequestBody;\n+    private final boolean resolveIndices;\n+    private final boolean excludeSensitiveHeaders;\n+    private final Set<String> ignoredAuditUsers;\n+    private final Set<String> ignoredComplianceUsersForRead;\n+    private final Set<String> ignoredComplianceUsersForWrite;\n+    private final Set<String> ignoreAuditRequests;\n+    private final EnumSet<AuditCategory> disabledRestCategories;\n+    private final EnumSet<AuditCategory> disabledTransportCategories;\n+    private final String opendistrosecurityIndex;\n+\n+    private AuditConfig(final boolean isRestApiAuditEnabled,\n+                        final boolean isTransportApiAuditEnabled,\n+                        final boolean resolveBulkRequests,\n+                        final boolean logRequestBody,\n+                        final boolean resolveIndices,\n+                        final boolean excludeSensitiveHeaders,\n+                        final Set<String> ignoredAuditUsers,\n+                        final Set<String> ignoredComplianceUsersForRead,\n+                        final Set<String> ignoredComplianceUsersForWrite,\n+                        final Set<String> ignoredAuditRequests,\n+                        final EnumSet<AuditCategory> disabledRestCategories,\n+                        final EnumSet<AuditCategory> disabledTransportCategories,\n+                        final String opendistrosecurityIndex) {\n+        this.isRestApiAuditEnabled = isRestApiAuditEnabled;\n+        this.isTransportApiAuditEnabled = isTransportApiAuditEnabled;\n+        this.resolveBulkRequests = resolveBulkRequests;\n+        this.logRequestBody = logRequestBody;\n+        this.resolveIndices = resolveIndices;\n+        this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+        this.ignoredAuditUsers = ignoredAuditUsers;\n+        this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+        this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+        this.ignoreAuditRequests = ignoredAuditRequests;\n+        this.disabledRestCategories = disabledRestCategories;\n+        this.disabledTransportCategories = disabledTransportCategories;\n+        this.opendistrosecurityIndex = opendistrosecurityIndex;\n+    }\n+\n+    public static AuditConfig from(Settings settings) {\n+        final boolean isRestApiAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n+        final boolean isTransportAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n+        final boolean resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n+        final boolean logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n+        final boolean resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n+        final boolean excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+        final String opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n+\n+        final EnumSet<AuditCategory> disabledRestCategories = AuditCategory.parse(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES,\n+                true));\n+\n+        final EnumSet<AuditCategory> disabledTransportCategories = AuditCategory.parse(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES,\n+                true));\n+\n+        final Set<String> ignoredAuditUsers = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoredComplianceUsersForRead = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoredComplianceUsersForWrite = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoreAuditRequests = ImmutableSet.copyOf(settings.getAsList(\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS,\n+                Collections.emptyList()));\n+\n+        return new AuditConfig(isRestApiAuditEnabled,\n+                isTransportAuditEnabled,\n+                resolveBulkRequests,\n+                logRequestBody,\n+                resolveIndices,\n+                excludeSensitiveHeaders,\n+                ignoredAuditUsers,\n+                ignoredComplianceUsersForRead,\n+                ignoredComplianceUsersForWrite,\n+                ignoreAuditRequests,\n+                disabledRestCategories,\n+                disabledTransportCategories,\n+                opendistrosecurityIndex);\n+    }\n+\n+    private static List<String> getSettingAsList(final Settings settings, final String key, final List<String> defaultList, final boolean ignoreCaseForNone) {\n+        final List<String> list = settings.getAsList(key, defaultList);\n+        if (list.size() == 1 && \"NONE\".equals(ignoreCaseForNone? list.get(0).toUpperCase() : list.get(0))) {\n+            return Collections.emptyList();\n+        }\n+        return list;\n+    }\n+\n+    public boolean isRestApiAuditEnabled() {\n+        return isRestApiAuditEnabled;\n+    }\n+\n+    public boolean isTransportApiAuditEnabled() {\n+        return isTransportApiAuditEnabled;\n+    }\n+\n+    public boolean shouldResolveBulkRequests() {\n+        return resolveBulkRequests;\n+    }\n+\n+    public boolean shouldLogRequestBody() {\n+        return logRequestBody;\n+    }\n+\n+    public boolean shouldResolveIndices() {\n+        return resolveIndices;\n+    }\n+\n+    public boolean shouldExcludeSensitiveHeaders() {\n+        return excludeSensitiveHeaders;\n+    }\n+\n+    public Set<String> getIgnoredAuditUsers() {\n+        return ignoredAuditUsers;\n+    }\n+\n+    public Set<String> getIgnoredComplianceUsersForRead() {\n+        return ignoredComplianceUsersForRead;\n+    }\n+\n+    public Set<String> getIgnoredComplianceUsersForWrite() {\n+        return ignoredComplianceUsersForWrite;\n+    }\n+\n+    public Set<String> getIgnoredAuditRequests() {\n+        return ignoreAuditRequests;\n+    }\n+\n+    public EnumSet<AuditCategory> getDisabledRestCategories() {\n+        return disabledRestCategories;\n+    }\n+\n+    public EnumSet<AuditCategory> getDisabledTransportCategories() {\n+        return disabledTransportCategories;\n+    }\n+\n+    public String getOpendistrosecurityIndex() {\n+        return opendistrosecurityIndex;\n+    }\n+\n+    public void log(Logger logger) {\n+        logger.info(\"Auditing on REST API is {}\", isRestApiAuditEnabled ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing on Transport API is {}\", isTransportApiAuditEnabled ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing of request body is {}\", logRequestBody ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing should {} resolve bulk requests\", resolveBulkRequests ? \"\" : \"not\");\n+        logger.info(\"Auditing should {} resolve indices\", resolveBulkRequests ? \"\" : \"not\");\n+        logger.info(\"Auditing should {} exclude sensitive headers\", excludeSensitiveHeaders ? \"\" : \"not\");\n+        logger.info(\"Auditing will ignore users {}\", ignoredAuditUsers);\n+        logger.info(\"Auditing of compliance read operation will ignore users {}\", ignoredComplianceUsersForRead);\n+        logger.info(\"Auditing of compliance write operation will ignore users {}\", ignoredComplianceUsersForWrite);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUzMjE3Nw==", "bodyText": "nit: Move it next to REST API log entry. \"{} are excluded from REST API auditing.\" (check if it is not empty)", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r399532177", "createdAt": "2020-03-27T20:53:01Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean isRestApiAuditEnabled;\n+    private final boolean isTransportApiAuditEnabled;\n+    private final boolean resolveBulkRequests;\n+    private final boolean logRequestBody;\n+    private final boolean resolveIndices;\n+    private final boolean excludeSensitiveHeaders;\n+    private final Set<String> ignoredAuditUsers;\n+    private final Set<String> ignoredComplianceUsersForRead;\n+    private final Set<String> ignoredComplianceUsersForWrite;\n+    private final Set<String> ignoreAuditRequests;\n+    private final EnumSet<AuditCategory> disabledRestCategories;\n+    private final EnumSet<AuditCategory> disabledTransportCategories;\n+    private final String opendistrosecurityIndex;\n+\n+    private AuditConfig(final boolean isRestApiAuditEnabled,\n+                        final boolean isTransportApiAuditEnabled,\n+                        final boolean resolveBulkRequests,\n+                        final boolean logRequestBody,\n+                        final boolean resolveIndices,\n+                        final boolean excludeSensitiveHeaders,\n+                        final Set<String> ignoredAuditUsers,\n+                        final Set<String> ignoredComplianceUsersForRead,\n+                        final Set<String> ignoredComplianceUsersForWrite,\n+                        final Set<String> ignoredAuditRequests,\n+                        final EnumSet<AuditCategory> disabledRestCategories,\n+                        final EnumSet<AuditCategory> disabledTransportCategories,\n+                        final String opendistrosecurityIndex) {\n+        this.isRestApiAuditEnabled = isRestApiAuditEnabled;\n+        this.isTransportApiAuditEnabled = isTransportApiAuditEnabled;\n+        this.resolveBulkRequests = resolveBulkRequests;\n+        this.logRequestBody = logRequestBody;\n+        this.resolveIndices = resolveIndices;\n+        this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+        this.ignoredAuditUsers = ignoredAuditUsers;\n+        this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+        this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+        this.ignoreAuditRequests = ignoredAuditRequests;\n+        this.disabledRestCategories = disabledRestCategories;\n+        this.disabledTransportCategories = disabledTransportCategories;\n+        this.opendistrosecurityIndex = opendistrosecurityIndex;\n+    }\n+\n+    public static AuditConfig from(Settings settings) {\n+        final boolean isRestApiAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n+        final boolean isTransportAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n+        final boolean resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n+        final boolean logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n+        final boolean resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n+        final boolean excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+        final String opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n+\n+        final EnumSet<AuditCategory> disabledRestCategories = AuditCategory.parse(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES,\n+                true));\n+\n+        final EnumSet<AuditCategory> disabledTransportCategories = AuditCategory.parse(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES,\n+                true));\n+\n+        final Set<String> ignoredAuditUsers = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoredComplianceUsersForRead = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoredComplianceUsersForWrite = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoreAuditRequests = ImmutableSet.copyOf(settings.getAsList(\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS,\n+                Collections.emptyList()));\n+\n+        return new AuditConfig(isRestApiAuditEnabled,\n+                isTransportAuditEnabled,\n+                resolveBulkRequests,\n+                logRequestBody,\n+                resolveIndices,\n+                excludeSensitiveHeaders,\n+                ignoredAuditUsers,\n+                ignoredComplianceUsersForRead,\n+                ignoredComplianceUsersForWrite,\n+                ignoreAuditRequests,\n+                disabledRestCategories,\n+                disabledTransportCategories,\n+                opendistrosecurityIndex);\n+    }\n+\n+    private static List<String> getSettingAsList(final Settings settings, final String key, final List<String> defaultList, final boolean ignoreCaseForNone) {\n+        final List<String> list = settings.getAsList(key, defaultList);\n+        if (list.size() == 1 && \"NONE\".equals(ignoreCaseForNone? list.get(0).toUpperCase() : list.get(0))) {\n+            return Collections.emptyList();\n+        }\n+        return list;\n+    }\n+\n+    public boolean isRestApiAuditEnabled() {\n+        return isRestApiAuditEnabled;\n+    }\n+\n+    public boolean isTransportApiAuditEnabled() {\n+        return isTransportApiAuditEnabled;\n+    }\n+\n+    public boolean shouldResolveBulkRequests() {\n+        return resolveBulkRequests;\n+    }\n+\n+    public boolean shouldLogRequestBody() {\n+        return logRequestBody;\n+    }\n+\n+    public boolean shouldResolveIndices() {\n+        return resolveIndices;\n+    }\n+\n+    public boolean shouldExcludeSensitiveHeaders() {\n+        return excludeSensitiveHeaders;\n+    }\n+\n+    public Set<String> getIgnoredAuditUsers() {\n+        return ignoredAuditUsers;\n+    }\n+\n+    public Set<String> getIgnoredComplianceUsersForRead() {\n+        return ignoredComplianceUsersForRead;\n+    }\n+\n+    public Set<String> getIgnoredComplianceUsersForWrite() {\n+        return ignoredComplianceUsersForWrite;\n+    }\n+\n+    public Set<String> getIgnoredAuditRequests() {\n+        return ignoreAuditRequests;\n+    }\n+\n+    public EnumSet<AuditCategory> getDisabledRestCategories() {\n+        return disabledRestCategories;\n+    }\n+\n+    public EnumSet<AuditCategory> getDisabledTransportCategories() {\n+        return disabledTransportCategories;\n+    }\n+\n+    public String getOpendistrosecurityIndex() {\n+        return opendistrosecurityIndex;\n+    }\n+\n+    public void log(Logger logger) {\n+        logger.info(\"Auditing on REST API is {}\", isRestApiAuditEnabled ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing on Transport API is {}\", isTransportApiAuditEnabled ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing of request body is {}\", logRequestBody ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing should {} resolve bulk requests\", resolveBulkRequests ? \"\" : \"not\");\n+        logger.info(\"Auditing should {} resolve indices\", resolveBulkRequests ? \"\" : \"not\");\n+        logger.info(\"Auditing should {} exclude sensitive headers\", excludeSensitiveHeaders ? \"\" : \"not\");\n+        logger.info(\"Auditing will ignore users {}\", ignoredAuditUsers);\n+        logger.info(\"Auditing of compliance read operation will ignore users {}\", ignoredComplianceUsersForRead);\n+        logger.info(\"Auditing of compliance write operation will ignore users {}\", ignoredComplianceUsersForWrite);\n+        logger.info(\"Auditing has disabled rest categories {}\", disabledRestCategories);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUzMjI4MA==", "bodyText": "nit: Same as REST API.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r399532280", "createdAt": "2020-03-27T20:53:17Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean isRestApiAuditEnabled;\n+    private final boolean isTransportApiAuditEnabled;\n+    private final boolean resolveBulkRequests;\n+    private final boolean logRequestBody;\n+    private final boolean resolveIndices;\n+    private final boolean excludeSensitiveHeaders;\n+    private final Set<String> ignoredAuditUsers;\n+    private final Set<String> ignoredComplianceUsersForRead;\n+    private final Set<String> ignoredComplianceUsersForWrite;\n+    private final Set<String> ignoreAuditRequests;\n+    private final EnumSet<AuditCategory> disabledRestCategories;\n+    private final EnumSet<AuditCategory> disabledTransportCategories;\n+    private final String opendistrosecurityIndex;\n+\n+    private AuditConfig(final boolean isRestApiAuditEnabled,\n+                        final boolean isTransportApiAuditEnabled,\n+                        final boolean resolveBulkRequests,\n+                        final boolean logRequestBody,\n+                        final boolean resolveIndices,\n+                        final boolean excludeSensitiveHeaders,\n+                        final Set<String> ignoredAuditUsers,\n+                        final Set<String> ignoredComplianceUsersForRead,\n+                        final Set<String> ignoredComplianceUsersForWrite,\n+                        final Set<String> ignoredAuditRequests,\n+                        final EnumSet<AuditCategory> disabledRestCategories,\n+                        final EnumSet<AuditCategory> disabledTransportCategories,\n+                        final String opendistrosecurityIndex) {\n+        this.isRestApiAuditEnabled = isRestApiAuditEnabled;\n+        this.isTransportApiAuditEnabled = isTransportApiAuditEnabled;\n+        this.resolveBulkRequests = resolveBulkRequests;\n+        this.logRequestBody = logRequestBody;\n+        this.resolveIndices = resolveIndices;\n+        this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+        this.ignoredAuditUsers = ignoredAuditUsers;\n+        this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+        this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+        this.ignoreAuditRequests = ignoredAuditRequests;\n+        this.disabledRestCategories = disabledRestCategories;\n+        this.disabledTransportCategories = disabledTransportCategories;\n+        this.opendistrosecurityIndex = opendistrosecurityIndex;\n+    }\n+\n+    public static AuditConfig from(Settings settings) {\n+        final boolean isRestApiAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n+        final boolean isTransportAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n+        final boolean resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n+        final boolean logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n+        final boolean resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n+        final boolean excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+        final String opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n+\n+        final EnumSet<AuditCategory> disabledRestCategories = AuditCategory.parse(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES,\n+                true));\n+\n+        final EnumSet<AuditCategory> disabledTransportCategories = AuditCategory.parse(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES,\n+                true));\n+\n+        final Set<String> ignoredAuditUsers = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoredComplianceUsersForRead = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoredComplianceUsersForWrite = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoreAuditRequests = ImmutableSet.copyOf(settings.getAsList(\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS,\n+                Collections.emptyList()));\n+\n+        return new AuditConfig(isRestApiAuditEnabled,\n+                isTransportAuditEnabled,\n+                resolveBulkRequests,\n+                logRequestBody,\n+                resolveIndices,\n+                excludeSensitiveHeaders,\n+                ignoredAuditUsers,\n+                ignoredComplianceUsersForRead,\n+                ignoredComplianceUsersForWrite,\n+                ignoreAuditRequests,\n+                disabledRestCategories,\n+                disabledTransportCategories,\n+                opendistrosecurityIndex);\n+    }\n+\n+    private static List<String> getSettingAsList(final Settings settings, final String key, final List<String> defaultList, final boolean ignoreCaseForNone) {\n+        final List<String> list = settings.getAsList(key, defaultList);\n+        if (list.size() == 1 && \"NONE\".equals(ignoreCaseForNone? list.get(0).toUpperCase() : list.get(0))) {\n+            return Collections.emptyList();\n+        }\n+        return list;\n+    }\n+\n+    public boolean isRestApiAuditEnabled() {\n+        return isRestApiAuditEnabled;\n+    }\n+\n+    public boolean isTransportApiAuditEnabled() {\n+        return isTransportApiAuditEnabled;\n+    }\n+\n+    public boolean shouldResolveBulkRequests() {\n+        return resolveBulkRequests;\n+    }\n+\n+    public boolean shouldLogRequestBody() {\n+        return logRequestBody;\n+    }\n+\n+    public boolean shouldResolveIndices() {\n+        return resolveIndices;\n+    }\n+\n+    public boolean shouldExcludeSensitiveHeaders() {\n+        return excludeSensitiveHeaders;\n+    }\n+\n+    public Set<String> getIgnoredAuditUsers() {\n+        return ignoredAuditUsers;\n+    }\n+\n+    public Set<String> getIgnoredComplianceUsersForRead() {\n+        return ignoredComplianceUsersForRead;\n+    }\n+\n+    public Set<String> getIgnoredComplianceUsersForWrite() {\n+        return ignoredComplianceUsersForWrite;\n+    }\n+\n+    public Set<String> getIgnoredAuditRequests() {\n+        return ignoreAuditRequests;\n+    }\n+\n+    public EnumSet<AuditCategory> getDisabledRestCategories() {\n+        return disabledRestCategories;\n+    }\n+\n+    public EnumSet<AuditCategory> getDisabledTransportCategories() {\n+        return disabledTransportCategories;\n+    }\n+\n+    public String getOpendistrosecurityIndex() {\n+        return opendistrosecurityIndex;\n+    }\n+\n+    public void log(Logger logger) {\n+        logger.info(\"Auditing on REST API is {}\", isRestApiAuditEnabled ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing on Transport API is {}\", isTransportApiAuditEnabled ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing of request body is {}\", logRequestBody ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing should {} resolve bulk requests\", resolveBulkRequests ? \"\" : \"not\");\n+        logger.info(\"Auditing should {} resolve indices\", resolveBulkRequests ? \"\" : \"not\");\n+        logger.info(\"Auditing should {} exclude sensitive headers\", excludeSensitiveHeaders ? \"\" : \"not\");\n+        logger.info(\"Auditing will ignore users {}\", ignoredAuditUsers);\n+        logger.info(\"Auditing of compliance read operation will ignore users {}\", ignoredComplianceUsersForRead);\n+        logger.info(\"Auditing of compliance write operation will ignore users {}\", ignoredComplianceUsersForWrite);\n+        logger.info(\"Auditing has disabled rest categories {}\", disabledRestCategories);\n+        logger.info(\"Auditing has disabled transport categories {}\", disabledTransportCategories);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 192}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUzNDY3Mw==", "bodyText": "nit: \"Open distro auditing uses {} index(alias?) to write auditing events.\"", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r399534673", "createdAt": "2020-03-27T20:58:52Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean isRestApiAuditEnabled;\n+    private final boolean isTransportApiAuditEnabled;\n+    private final boolean resolveBulkRequests;\n+    private final boolean logRequestBody;\n+    private final boolean resolveIndices;\n+    private final boolean excludeSensitiveHeaders;\n+    private final Set<String> ignoredAuditUsers;\n+    private final Set<String> ignoredComplianceUsersForRead;\n+    private final Set<String> ignoredComplianceUsersForWrite;\n+    private final Set<String> ignoreAuditRequests;\n+    private final EnumSet<AuditCategory> disabledRestCategories;\n+    private final EnumSet<AuditCategory> disabledTransportCategories;\n+    private final String opendistrosecurityIndex;\n+\n+    private AuditConfig(final boolean isRestApiAuditEnabled,\n+                        final boolean isTransportApiAuditEnabled,\n+                        final boolean resolveBulkRequests,\n+                        final boolean logRequestBody,\n+                        final boolean resolveIndices,\n+                        final boolean excludeSensitiveHeaders,\n+                        final Set<String> ignoredAuditUsers,\n+                        final Set<String> ignoredComplianceUsersForRead,\n+                        final Set<String> ignoredComplianceUsersForWrite,\n+                        final Set<String> ignoredAuditRequests,\n+                        final EnumSet<AuditCategory> disabledRestCategories,\n+                        final EnumSet<AuditCategory> disabledTransportCategories,\n+                        final String opendistrosecurityIndex) {\n+        this.isRestApiAuditEnabled = isRestApiAuditEnabled;\n+        this.isTransportApiAuditEnabled = isTransportApiAuditEnabled;\n+        this.resolveBulkRequests = resolveBulkRequests;\n+        this.logRequestBody = logRequestBody;\n+        this.resolveIndices = resolveIndices;\n+        this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+        this.ignoredAuditUsers = ignoredAuditUsers;\n+        this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+        this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+        this.ignoreAuditRequests = ignoredAuditRequests;\n+        this.disabledRestCategories = disabledRestCategories;\n+        this.disabledTransportCategories = disabledTransportCategories;\n+        this.opendistrosecurityIndex = opendistrosecurityIndex;\n+    }\n+\n+    public static AuditConfig from(Settings settings) {\n+        final boolean isRestApiAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n+        final boolean isTransportAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n+        final boolean resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n+        final boolean logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n+        final boolean resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n+        final boolean excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+        final String opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n+\n+        final EnumSet<AuditCategory> disabledRestCategories = AuditCategory.parse(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES,\n+                true));\n+\n+        final EnumSet<AuditCategory> disabledTransportCategories = AuditCategory.parse(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES,\n+                true));\n+\n+        final Set<String> ignoredAuditUsers = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoredComplianceUsersForRead = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoredComplianceUsersForWrite = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoreAuditRequests = ImmutableSet.copyOf(settings.getAsList(\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS,\n+                Collections.emptyList()));\n+\n+        return new AuditConfig(isRestApiAuditEnabled,\n+                isTransportAuditEnabled,\n+                resolveBulkRequests,\n+                logRequestBody,\n+                resolveIndices,\n+                excludeSensitiveHeaders,\n+                ignoredAuditUsers,\n+                ignoredComplianceUsersForRead,\n+                ignoredComplianceUsersForWrite,\n+                ignoreAuditRequests,\n+                disabledRestCategories,\n+                disabledTransportCategories,\n+                opendistrosecurityIndex);\n+    }\n+\n+    private static List<String> getSettingAsList(final Settings settings, final String key, final List<String> defaultList, final boolean ignoreCaseForNone) {\n+        final List<String> list = settings.getAsList(key, defaultList);\n+        if (list.size() == 1 && \"NONE\".equals(ignoreCaseForNone? list.get(0).toUpperCase() : list.get(0))) {\n+            return Collections.emptyList();\n+        }\n+        return list;\n+    }\n+\n+    public boolean isRestApiAuditEnabled() {\n+        return isRestApiAuditEnabled;\n+    }\n+\n+    public boolean isTransportApiAuditEnabled() {\n+        return isTransportApiAuditEnabled;\n+    }\n+\n+    public boolean shouldResolveBulkRequests() {\n+        return resolveBulkRequests;\n+    }\n+\n+    public boolean shouldLogRequestBody() {\n+        return logRequestBody;\n+    }\n+\n+    public boolean shouldResolveIndices() {\n+        return resolveIndices;\n+    }\n+\n+    public boolean shouldExcludeSensitiveHeaders() {\n+        return excludeSensitiveHeaders;\n+    }\n+\n+    public Set<String> getIgnoredAuditUsers() {\n+        return ignoredAuditUsers;\n+    }\n+\n+    public Set<String> getIgnoredComplianceUsersForRead() {\n+        return ignoredComplianceUsersForRead;\n+    }\n+\n+    public Set<String> getIgnoredComplianceUsersForWrite() {\n+        return ignoredComplianceUsersForWrite;\n+    }\n+\n+    public Set<String> getIgnoredAuditRequests() {\n+        return ignoreAuditRequests;\n+    }\n+\n+    public EnumSet<AuditCategory> getDisabledRestCategories() {\n+        return disabledRestCategories;\n+    }\n+\n+    public EnumSet<AuditCategory> getDisabledTransportCategories() {\n+        return disabledTransportCategories;\n+    }\n+\n+    public String getOpendistrosecurityIndex() {\n+        return opendistrosecurityIndex;\n+    }\n+\n+    public void log(Logger logger) {\n+        logger.info(\"Auditing on REST API is {}\", isRestApiAuditEnabled ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing on Transport API is {}\", isTransportApiAuditEnabled ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing of request body is {}\", logRequestBody ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing should {} resolve bulk requests\", resolveBulkRequests ? \"\" : \"not\");\n+        logger.info(\"Auditing should {} resolve indices\", resolveBulkRequests ? \"\" : \"not\");\n+        logger.info(\"Auditing should {} exclude sensitive headers\", excludeSensitiveHeaders ? \"\" : \"not\");\n+        logger.info(\"Auditing will ignore users {}\", ignoredAuditUsers);\n+        logger.info(\"Auditing of compliance read operation will ignore users {}\", ignoredComplianceUsersForRead);\n+        logger.info(\"Auditing of compliance write operation will ignore users {}\", ignoredComplianceUsersForWrite);\n+        logger.info(\"Auditing has disabled rest categories {}\", disabledRestCategories);\n+        logger.info(\"Auditing has disabled transport categories {}\", disabledTransportCategories);\n+        logger.info(\"Auditing is configured to use opendistro security index {}\", opendistrosecurityIndex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 193}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUzOTA3MQ==", "bodyText": "Sorry if I missed that rename in the prior reviews. Can you please rename it back to log as other classes mostly use log for the Logger.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r399539071", "createdAt": "2020-03-27T21:09:15Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "diffHunk": "@@ -80,33 +79,15 @@\n import com.google.common.io.BaseEncoding;\n \n public abstract class AbstractAuditLog implements AuditLog {\n+    protected final Logger logger = LogManager.getLogger(this.getClass());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMjMzOTE4", "url": "https://github.com/opensearch-project/security/pull/306#pullrequestreview-383233918", "createdAt": "2020-03-27T22:27:22Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMjoyNzoyMlrOF9DlFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMjoyNzoyMlrOF9DlFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU2NjEwMg==", "bodyText": "My bad for not being clear. I was not sure if opendistrosecurityIndex can be an alias instead of an index, so I put \"alias?\". If it can be an alias, please use \"index or alias\", otherwise just \"index\".", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r399566102", "createdAt": "2020-03-27T22:27:22Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean isRestApiAuditEnabled;\n+    private final boolean isTransportApiAuditEnabled;\n+    private final boolean resolveBulkRequests;\n+    private final boolean logRequestBody;\n+    private final boolean resolveIndices;\n+    private final boolean excludeSensitiveHeaders;\n+    private final Set<String> ignoredAuditUsers;\n+    private final Set<String> ignoredComplianceUsersForRead;\n+    private final Set<String> ignoredComplianceUsersForWrite;\n+    private final Set<String> ignoreAuditRequests;\n+    private final EnumSet<AuditCategory> disabledRestCategories;\n+    private final EnumSet<AuditCategory> disabledTransportCategories;\n+    private final String opendistrosecurityIndex;\n+\n+    private AuditConfig(final boolean isRestApiAuditEnabled,\n+                        final boolean isTransportApiAuditEnabled,\n+                        final boolean resolveBulkRequests,\n+                        final boolean logRequestBody,\n+                        final boolean resolveIndices,\n+                        final boolean excludeSensitiveHeaders,\n+                        final Set<String> ignoredAuditUsers,\n+                        final Set<String> ignoredComplianceUsersForRead,\n+                        final Set<String> ignoredComplianceUsersForWrite,\n+                        final Set<String> ignoredAuditRequests,\n+                        final EnumSet<AuditCategory> disabledRestCategories,\n+                        final EnumSet<AuditCategory> disabledTransportCategories,\n+                        final String opendistrosecurityIndex) {\n+        this.isRestApiAuditEnabled = isRestApiAuditEnabled;\n+        this.isTransportApiAuditEnabled = isTransportApiAuditEnabled;\n+        this.resolveBulkRequests = resolveBulkRequests;\n+        this.logRequestBody = logRequestBody;\n+        this.resolveIndices = resolveIndices;\n+        this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+        this.ignoredAuditUsers = ignoredAuditUsers;\n+        this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+        this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+        this.ignoreAuditRequests = ignoredAuditRequests;\n+        this.disabledRestCategories = disabledRestCategories;\n+        this.disabledTransportCategories = disabledTransportCategories;\n+        this.opendistrosecurityIndex = opendistrosecurityIndex;\n+    }\n+\n+    public static AuditConfig from(Settings settings) {\n+        final boolean isRestApiAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n+        final boolean isTransportAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n+        final boolean resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n+        final boolean logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n+        final boolean resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n+        final boolean excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+        final String opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n+\n+        final EnumSet<AuditCategory> disabledRestCategories = AuditCategory.parse(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES,\n+                true));\n+\n+        final EnumSet<AuditCategory> disabledTransportCategories = AuditCategory.parse(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES,\n+                true));\n+\n+        final Set<String> ignoredAuditUsers = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoredComplianceUsersForRead = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoredComplianceUsersForWrite = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoreAuditRequests = ImmutableSet.copyOf(settings.getAsList(\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS,\n+                Collections.emptyList()));\n+\n+        return new AuditConfig(isRestApiAuditEnabled,\n+                isTransportAuditEnabled,\n+                resolveBulkRequests,\n+                logRequestBody,\n+                resolveIndices,\n+                excludeSensitiveHeaders,\n+                ignoredAuditUsers,\n+                ignoredComplianceUsersForRead,\n+                ignoredComplianceUsersForWrite,\n+                ignoreAuditRequests,\n+                disabledRestCategories,\n+                disabledTransportCategories,\n+                opendistrosecurityIndex);\n+    }\n+\n+    private static List<String> getSettingAsList(final Settings settings, final String key, final List<String> defaultList, final boolean ignoreCaseForNone) {\n+        final List<String> list = settings.getAsList(key, defaultList);\n+        if (list.size() == 1 && \"NONE\".equals(ignoreCaseForNone? list.get(0).toUpperCase() : list.get(0))) {\n+            return Collections.emptyList();\n+        }\n+        return list;\n+    }\n+\n+    public boolean isRestApiAuditEnabled() {\n+        return isRestApiAuditEnabled;\n+    }\n+\n+    public boolean isTransportApiAuditEnabled() {\n+        return isTransportApiAuditEnabled;\n+    }\n+\n+    public boolean shouldResolveBulkRequests() {\n+        return resolveBulkRequests;\n+    }\n+\n+    public boolean shouldLogRequestBody() {\n+        return logRequestBody;\n+    }\n+\n+    public boolean shouldResolveIndices() {\n+        return resolveIndices;\n+    }\n+\n+    public boolean shouldExcludeSensitiveHeaders() {\n+        return excludeSensitiveHeaders;\n+    }\n+\n+    public Set<String> getIgnoredAuditUsers() {\n+        return ignoredAuditUsers;\n+    }\n+\n+    public Set<String> getIgnoredComplianceUsersForRead() {\n+        return ignoredComplianceUsersForRead;\n+    }\n+\n+    public Set<String> getIgnoredComplianceUsersForWrite() {\n+        return ignoredComplianceUsersForWrite;\n+    }\n+\n+    public Set<String> getIgnoredAuditRequests() {\n+        return ignoreAuditRequests;\n+    }\n+\n+    public EnumSet<AuditCategory> getDisabledRestCategories() {\n+        return disabledRestCategories;\n+    }\n+\n+    public EnumSet<AuditCategory> getDisabledTransportCategories() {\n+        return disabledTransportCategories;\n+    }\n+\n+    public String getOpendistrosecurityIndex() {\n+        return opendistrosecurityIndex;\n+    }\n+\n+    public void log(Logger logger) {\n+        logger.info(\"Auditing on REST API is {}.\", isRestApiAuditEnabled ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing on Transport API is {}.\", isTransportApiAuditEnabled ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing of request body is {}.\", logRequestBody ? \"enabled\" : \"disabled\");\n+        logger.info(\"Bulk requests resolution is {} during request auditing.\", resolveBulkRequests ? \"enabled\" : \"disabled\");\n+        logger.info(\"Index resolution is {} during request auditing.\", resolveIndices ? \"enabled\" : \"disabled\");\n+        logger.info(\"Sensitive headers auditing is {}.\", excludeSensitiveHeaders ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing requests from {} users is disabled.\", ignoredAuditUsers);\n+        logger.info(\"Compliance read operation requests auditing from {} users is disabled.\", ignoredComplianceUsersForRead);\n+        logger.info(\"Compliance write operation requests auditing from {} users is disabled.\", ignoredComplianceUsersForWrite);\n+        logger.info(\"{} are excluded from REST API auditing.\", disabledRestCategories);\n+        logger.info(\"{} are excluded from Transport API auditing.\", disabledTransportCategories);\n+        logger.info(\"Open distro auditing uses {} index(alias?) to write auditing events.\", opendistrosecurityIndex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 193}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMjQ4NTM2", "url": "https://github.com/opensearch-project/security/pull/306#pullrequestreview-383248536", "createdAt": "2020-03-27T23:18:37Z", "commit": null, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0MTg0MTcz", "url": "https://github.com/opensearch-project/security/pull/306#pullrequestreview-384184173", "createdAt": "2020-03-30T19:58:44Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxOTo1ODo0NFrOF959Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxOTo1OToyOFrOF95-zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1NzAwNw==", "bodyText": "Assuming that you will make another round of changes, can you move this to line 175?", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r400457007", "createdAt": "2020-03-30T19:58:44Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,204 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean isRestApiAuditEnabled;\n+    private final boolean isTransportApiAuditEnabled;\n+    private final boolean resolveBulkRequests;\n+    private final boolean logRequestBody;\n+    private final boolean resolveIndices;\n+    private final boolean excludeSensitiveHeaders;\n+    private final Set<String> ignoredAuditUsers;\n+    private final Set<String> ignoredComplianceUsersForRead;\n+    private final Set<String> ignoredComplianceUsersForWrite;\n+    private final Set<String> ignoreAuditRequests;\n+    private final EnumSet<AuditCategory> disabledRestCategories;\n+    private final EnumSet<AuditCategory> disabledTransportCategories;\n+\n+    private AuditConfig(final boolean isRestApiAuditEnabled,\n+                        final boolean isTransportApiAuditEnabled,\n+                        final boolean resolveBulkRequests,\n+                        final boolean logRequestBody,\n+                        final boolean resolveIndices,\n+                        final boolean excludeSensitiveHeaders,\n+                        final Set<String> ignoredAuditUsers,\n+                        final Set<String> ignoredComplianceUsersForRead,\n+                        final Set<String> ignoredComplianceUsersForWrite,\n+                        final Set<String> ignoredAuditRequests,\n+                        final EnumSet<AuditCategory> disabledRestCategories,\n+                        final EnumSet<AuditCategory> disabledTransportCategories) {\n+        this.isRestApiAuditEnabled = isRestApiAuditEnabled;\n+        this.isTransportApiAuditEnabled = isTransportApiAuditEnabled;\n+        this.resolveBulkRequests = resolveBulkRequests;\n+        this.logRequestBody = logRequestBody;\n+        this.resolveIndices = resolveIndices;\n+        this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+        this.ignoredAuditUsers = ignoredAuditUsers;\n+        this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+        this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+        this.ignoreAuditRequests = ignoredAuditRequests;\n+        this.disabledRestCategories = disabledRestCategories;\n+        this.disabledTransportCategories = disabledTransportCategories;\n+    }\n+\n+    public static AuditConfig from(Settings settings) {\n+        final boolean isRestApiAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n+        final boolean isTransportAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n+        final boolean resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n+        final boolean logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n+        final boolean resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n+        final boolean excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+        final String opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n+\n+        final EnumSet<AuditCategory> disabledRestCategories = AuditCategory.parse(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES,\n+                true));\n+\n+        final EnumSet<AuditCategory> disabledTransportCategories = AuditCategory.parse(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES,\n+                true));\n+\n+        final Set<String> ignoredAuditUsers = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoredComplianceUsersForRead = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoredComplianceUsersForWrite = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoreAuditRequests = ImmutableSet.copyOf(settings.getAsList(\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS,\n+                Collections.emptyList()));\n+\n+        return new AuditConfig(isRestApiAuditEnabled,\n+                isTransportAuditEnabled,\n+                resolveBulkRequests,\n+                logRequestBody,\n+                resolveIndices,\n+                excludeSensitiveHeaders,\n+                ignoredAuditUsers,\n+                ignoredComplianceUsersForRead,\n+                ignoredComplianceUsersForWrite,\n+                ignoreAuditRequests,\n+                disabledRestCategories,\n+                disabledTransportCategories);\n+    }\n+\n+    private static List<String> getSettingAsList(final Settings settings, final String key, final List<String> defaultList, final boolean ignoreCaseForNone) {\n+        final List<String> list = settings.getAsList(key, defaultList);\n+        if (list.size() == 1 && \"NONE\".equals(ignoreCaseForNone? list.get(0).toUpperCase() : list.get(0))) {\n+            return Collections.emptyList();\n+        }\n+        return list;\n+    }\n+\n+    public boolean isRestApiAuditEnabled() {\n+        return isRestApiAuditEnabled;\n+    }\n+\n+    public boolean isTransportApiAuditEnabled() {\n+        return isTransportApiAuditEnabled;\n+    }\n+\n+    public boolean shouldResolveBulkRequests() {\n+        return resolveBulkRequests;\n+    }\n+\n+    public boolean shouldLogRequestBody() {\n+        return logRequestBody;\n+    }\n+\n+    public boolean shouldResolveIndices() {\n+        return resolveIndices;\n+    }\n+\n+    public boolean shouldExcludeSensitiveHeaders() {\n+        return excludeSensitiveHeaders;\n+    }\n+\n+    public Set<String> getIgnoredAuditUsers() {\n+        return ignoredAuditUsers;\n+    }\n+\n+    public Set<String> getIgnoredComplianceUsersForRead() {\n+        return ignoredComplianceUsersForRead;\n+    }\n+\n+    public Set<String> getIgnoredComplianceUsersForWrite() {\n+        return ignoredComplianceUsersForWrite;\n+    }\n+\n+    public Set<String> getIgnoredAuditRequests() {\n+        return ignoreAuditRequests;\n+    }\n+\n+    public EnumSet<AuditCategory> getDisabledRestCategories() {\n+        return disabledRestCategories;\n+    }\n+\n+    public EnumSet<AuditCategory> getDisabledTransportCategories() {\n+        return disabledTransportCategories;\n+    }\n+\n+    public void log(Logger logger) {\n+        logger.info(\"Auditing on REST API is {}.\", isRestApiAuditEnabled ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing on Transport API is {}.\", isTransportApiAuditEnabled ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing of request body is {}.\", logRequestBody ? \"enabled\" : \"disabled\");\n+        logger.info(\"Bulk requests resolution is {} during request auditing.\", resolveBulkRequests ? \"enabled\" : \"disabled\");\n+        logger.info(\"Index resolution is {} during request auditing.\", resolveIndices ? \"enabled\" : \"disabled\");\n+        logger.info(\"Sensitive headers auditing is {}.\", excludeSensitiveHeaders ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing requests from {} users is disabled.\", ignoredAuditUsers);\n+        logger.info(\"Compliance read operation requests auditing from {} users is disabled.\", ignoredComplianceUsersForRead);\n+        logger.info(\"Compliance write operation requests auditing from {} users is disabled.\", ignoredComplianceUsersForWrite);\n+        logger.info(\"{} are excluded from REST API auditing.\", disabledRestCategories);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1NzQyMQ==", "bodyText": "and this one to line 176.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r400457421", "createdAt": "2020-03-30T19:59:28Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,204 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {\n+    private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+    private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+            Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                    AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+    private final boolean isRestApiAuditEnabled;\n+    private final boolean isTransportApiAuditEnabled;\n+    private final boolean resolveBulkRequests;\n+    private final boolean logRequestBody;\n+    private final boolean resolveIndices;\n+    private final boolean excludeSensitiveHeaders;\n+    private final Set<String> ignoredAuditUsers;\n+    private final Set<String> ignoredComplianceUsersForRead;\n+    private final Set<String> ignoredComplianceUsersForWrite;\n+    private final Set<String> ignoreAuditRequests;\n+    private final EnumSet<AuditCategory> disabledRestCategories;\n+    private final EnumSet<AuditCategory> disabledTransportCategories;\n+\n+    private AuditConfig(final boolean isRestApiAuditEnabled,\n+                        final boolean isTransportApiAuditEnabled,\n+                        final boolean resolveBulkRequests,\n+                        final boolean logRequestBody,\n+                        final boolean resolveIndices,\n+                        final boolean excludeSensitiveHeaders,\n+                        final Set<String> ignoredAuditUsers,\n+                        final Set<String> ignoredComplianceUsersForRead,\n+                        final Set<String> ignoredComplianceUsersForWrite,\n+                        final Set<String> ignoredAuditRequests,\n+                        final EnumSet<AuditCategory> disabledRestCategories,\n+                        final EnumSet<AuditCategory> disabledTransportCategories) {\n+        this.isRestApiAuditEnabled = isRestApiAuditEnabled;\n+        this.isTransportApiAuditEnabled = isTransportApiAuditEnabled;\n+        this.resolveBulkRequests = resolveBulkRequests;\n+        this.logRequestBody = logRequestBody;\n+        this.resolveIndices = resolveIndices;\n+        this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+        this.ignoredAuditUsers = ignoredAuditUsers;\n+        this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+        this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+        this.ignoreAuditRequests = ignoredAuditRequests;\n+        this.disabledRestCategories = disabledRestCategories;\n+        this.disabledTransportCategories = disabledTransportCategories;\n+    }\n+\n+    public static AuditConfig from(Settings settings) {\n+        final boolean isRestApiAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n+        final boolean isTransportAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n+        final boolean resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n+        final boolean logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n+        final boolean resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n+        final boolean excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+        final String opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);\n+\n+        final EnumSet<AuditCategory> disabledRestCategories = AuditCategory.parse(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES,\n+                true));\n+\n+        final EnumSet<AuditCategory> disabledTransportCategories = AuditCategory.parse(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES,\n+                DEFAULT_DISABLED_CATEGORIES,\n+                true));\n+\n+        final Set<String> ignoredAuditUsers = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoredComplianceUsersForRead = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoredComplianceUsersForWrite = ImmutableSet.copyOf(getSettingAsList(\n+                settings,\n+                ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS,\n+                DEFAULT_IGNORED_USERS,\n+                false));\n+\n+        final Set<String> ignoreAuditRequests = ImmutableSet.copyOf(settings.getAsList(\n+                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS,\n+                Collections.emptyList()));\n+\n+        return new AuditConfig(isRestApiAuditEnabled,\n+                isTransportAuditEnabled,\n+                resolveBulkRequests,\n+                logRequestBody,\n+                resolveIndices,\n+                excludeSensitiveHeaders,\n+                ignoredAuditUsers,\n+                ignoredComplianceUsersForRead,\n+                ignoredComplianceUsersForWrite,\n+                ignoreAuditRequests,\n+                disabledRestCategories,\n+                disabledTransportCategories);\n+    }\n+\n+    private static List<String> getSettingAsList(final Settings settings, final String key, final List<String> defaultList, final boolean ignoreCaseForNone) {\n+        final List<String> list = settings.getAsList(key, defaultList);\n+        if (list.size() == 1 && \"NONE\".equals(ignoreCaseForNone? list.get(0).toUpperCase() : list.get(0))) {\n+            return Collections.emptyList();\n+        }\n+        return list;\n+    }\n+\n+    public boolean isRestApiAuditEnabled() {\n+        return isRestApiAuditEnabled;\n+    }\n+\n+    public boolean isTransportApiAuditEnabled() {\n+        return isTransportApiAuditEnabled;\n+    }\n+\n+    public boolean shouldResolveBulkRequests() {\n+        return resolveBulkRequests;\n+    }\n+\n+    public boolean shouldLogRequestBody() {\n+        return logRequestBody;\n+    }\n+\n+    public boolean shouldResolveIndices() {\n+        return resolveIndices;\n+    }\n+\n+    public boolean shouldExcludeSensitiveHeaders() {\n+        return excludeSensitiveHeaders;\n+    }\n+\n+    public Set<String> getIgnoredAuditUsers() {\n+        return ignoredAuditUsers;\n+    }\n+\n+    public Set<String> getIgnoredComplianceUsersForRead() {\n+        return ignoredComplianceUsersForRead;\n+    }\n+\n+    public Set<String> getIgnoredComplianceUsersForWrite() {\n+        return ignoredComplianceUsersForWrite;\n+    }\n+\n+    public Set<String> getIgnoredAuditRequests() {\n+        return ignoreAuditRequests;\n+    }\n+\n+    public EnumSet<AuditCategory> getDisabledRestCategories() {\n+        return disabledRestCategories;\n+    }\n+\n+    public EnumSet<AuditCategory> getDisabledTransportCategories() {\n+        return disabledTransportCategories;\n+    }\n+\n+    public void log(Logger logger) {\n+        logger.info(\"Auditing on REST API is {}.\", isRestApiAuditEnabled ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing on Transport API is {}.\", isTransportApiAuditEnabled ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing of request body is {}.\", logRequestBody ? \"enabled\" : \"disabled\");\n+        logger.info(\"Bulk requests resolution is {} during request auditing.\", resolveBulkRequests ? \"enabled\" : \"disabled\");\n+        logger.info(\"Index resolution is {} during request auditing.\", resolveIndices ? \"enabled\" : \"disabled\");\n+        logger.info(\"Sensitive headers auditing is {}.\", excludeSensitiveHeaders ? \"enabled\" : \"disabled\");\n+        logger.info(\"Auditing requests from {} users is disabled.\", ignoredAuditUsers);\n+        logger.info(\"Compliance read operation requests auditing from {} users is disabled.\", ignoredComplianceUsersForRead);\n+        logger.info(\"Compliance write operation requests auditing from {} users is disabled.\", ignoredComplianceUsersForWrite);\n+        logger.info(\"{} are excluded from REST API auditing.\", disabledRestCategories);\n+        logger.info(\"{} are excluded from Transport API auditing.\", disabledTransportCategories);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 184}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8445d07d4757a95e162790d280afff7edd2b8db1", "author": {"user": {"login": "sujithvm", "name": "Sujith Vadakkepat"}}, "url": "https://github.com/opensearch-project/security/commit/8445d07d4757a95e162790d280afff7edd2b8db1", "committedDate": "2020-04-04T01:31:05Z", "message": "Refactor to use audit config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65a7534165c71427f4853ba747eb5136ef533b07", "author": {"user": {"login": "sujithvm", "name": "Sujith Vadakkepat"}}, "url": "https://github.com/opensearch-project/security/commit/65a7534165c71427f4853ba747eb5136ef533b07", "committedDate": "2020-04-04T01:31:05Z", "message": "Address code reviews"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44fd98532ba47d8221242f4eb7e03a567d5ea104", "author": {"user": {"login": "sujithvm", "name": "Sujith Vadakkepat"}}, "url": "https://github.com/opensearch-project/security/commit/44fd98532ba47d8221242f4eb7e03a567d5ea104", "committedDate": "2020-04-04T01:31:05Z", "message": "Address code reviews"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4c7bcad42812940bfe5f9f78a5da894e5e84e8b", "author": {"user": {"login": "sujithvm", "name": "Sujith Vadakkepat"}}, "url": "https://github.com/opensearch-project/security/commit/b4c7bcad42812940bfe5f9f78a5da894e5e84e8b", "committedDate": "2020-04-04T01:31:05Z", "message": "Remove unnecessary imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a83821cb3897e65df124e7503128b84fe21e565", "author": {"user": {"login": "sujithvm", "name": "Sujith Vadakkepat"}}, "url": "https://github.com/opensearch-project/security/commit/8a83821cb3897e65df124e7503128b84fe21e565", "committedDate": "2020-04-04T01:31:05Z", "message": "Address code reviews"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbe7c2da641319c79eb92a1104a43413c3c4a0ea", "author": {"user": {"login": "sujithvm", "name": "Sujith Vadakkepat"}}, "url": "https://github.com/opensearch-project/security/commit/bbe7c2da641319c79eb92a1104a43413c3c4a0ea", "committedDate": "2020-04-04T01:31:05Z", "message": "Address code reviews"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c59f64160f37b13c91e86735f789248b2a19edc", "author": {"user": {"login": "sujithvm", "name": "Sujith Vadakkepat"}}, "url": "https://github.com/opensearch-project/security/commit/8c59f64160f37b13c91e86735f789248b2a19edc", "committedDate": "2020-04-04T01:31:05Z", "message": "Address code reviews"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8aebeb4a35f9e3c1ab9022c888e33f5a63a9f851", "author": {"user": {"login": "sujithvm", "name": "Sujith Vadakkepat"}}, "url": "https://github.com/opensearch-project/security/commit/8aebeb4a35f9e3c1ab9022c888e33f5a63a9f851", "committedDate": "2020-04-04T01:31:05Z", "message": "Change grammar of logs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "343a56ad406831b92b6a6693f976d6bef2cf7f37", "author": {"user": {"login": "sujithvm", "name": "Sujith Vadakkepat"}}, "url": "https://github.com/opensearch-project/security/commit/343a56ad406831b92b6a6693f976d6bef2cf7f37", "committedDate": "2020-04-04T01:31:05Z", "message": "Revert back to log"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "505a2495ee2b30f18e4a68d0bef49b646ed396bd", "author": {"user": {"login": "sujithvm", "name": "Sujith Vadakkepat"}}, "url": "https://github.com/opensearch-project/security/commit/505a2495ee2b30f18e4a68d0bef49b646ed396bd", "committedDate": "2020-04-04T01:31:05Z", "message": "Update log statement for open distro security index"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8080e0db8af98567582bb0f19cba8bc1be33c25a", "author": {"user": {"login": "sujithvm", "name": "Sujith Vadakkepat"}}, "url": "https://github.com/opensearch-project/security/commit/8080e0db8af98567582bb0f19cba8bc1be33c25a", "committedDate": "2020-04-04T01:31:05Z", "message": "Remove opendistro index from audit log config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "779ffa856dc6717f69378cc6609d4a91846475e9", "author": {"user": {"login": "sujithvm", "name": "Sujith Vadakkepat"}}, "url": "https://github.com/opensearch-project/security/commit/779ffa856dc6717f69378cc6609d4a91846475e9", "committedDate": "2020-04-04T01:31:05Z", "message": "Update tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ccb2a49090c10944e063acc5c96840c91a4c3f4", "author": {"user": {"login": "sujithvm", "name": "Sujith Vadakkepat"}}, "url": "https://github.com/opensearch-project/security/commit/9ccb2a49090c10944e063acc5c96840c91a4c3f4", "committedDate": "2020-04-04T01:31:05Z", "message": "move log messages"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02410371433a36a60a8ab3bcfce60ee1cf515cee", "author": {"user": {"login": "sujithvm", "name": "Sujith Vadakkepat"}}, "url": "https://github.com/opensearch-project/security/commit/02410371433a36a60a8ab3bcfce60ee1cf515cee", "committedDate": "2020-04-04T01:31:05Z", "message": "Move audit config to inner class AuditConfig.Filter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NzIwMDc0", "url": "https://github.com/opensearch-project/security/pull/306#pullrequestreview-387720074", "createdAt": "2020-04-04T17:50:15Z", "commit": {"oid": "02410371433a36a60a8ab3bcfce60ee1cf515cee"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxNzo1MDoxNVrOGAzf_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxNzo1MDoxNVrOGAzf_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ5Njk1OQ==", "bodyText": "opendistrosecurityIndex is not used.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r403496959", "createdAt": "2020-04-04T17:50:15Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,206 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {\n+    public static class Filter {\n+        private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+        private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+                Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                        AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+        private final boolean isRestApiAuditEnabled;\n+        private final boolean isTransportApiAuditEnabled;\n+        private final boolean resolveBulkRequests;\n+        private final boolean logRequestBody;\n+        private final boolean resolveIndices;\n+        private final boolean excludeSensitiveHeaders;\n+        private final Set<String> ignoredAuditUsers;\n+        private final Set<String> ignoredComplianceUsersForRead;\n+        private final Set<String> ignoredComplianceUsersForWrite;\n+        private final Set<String> ignoreAuditRequests;\n+        private final EnumSet<AuditCategory> disabledRestCategories;\n+        private final EnumSet<AuditCategory> disabledTransportCategories;\n+\n+        private Filter(final boolean isRestApiAuditEnabled,\n+                       final boolean isTransportApiAuditEnabled,\n+                       final boolean resolveBulkRequests,\n+                       final boolean logRequestBody,\n+                       final boolean resolveIndices,\n+                       final boolean excludeSensitiveHeaders,\n+                       final Set<String> ignoredAuditUsers,\n+                       final Set<String> ignoredComplianceUsersForRead,\n+                       final Set<String> ignoredComplianceUsersForWrite,\n+                       final Set<String> ignoredAuditRequests,\n+                       final EnumSet<AuditCategory> disabledRestCategories,\n+                       final EnumSet<AuditCategory> disabledTransportCategories) {\n+            this.isRestApiAuditEnabled = isRestApiAuditEnabled;\n+            this.isTransportApiAuditEnabled = isTransportApiAuditEnabled;\n+            this.resolveBulkRequests = resolveBulkRequests;\n+            this.logRequestBody = logRequestBody;\n+            this.resolveIndices = resolveIndices;\n+            this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+            this.ignoredAuditUsers = ignoredAuditUsers;\n+            this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+            this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+            this.ignoreAuditRequests = ignoredAuditRequests;\n+            this.disabledRestCategories = disabledRestCategories;\n+            this.disabledTransportCategories = disabledTransportCategories;\n+        }\n+\n+        public static Filter from(Settings settings) {\n+            final boolean isRestApiAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n+            final boolean isTransportAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n+            final boolean resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n+            final boolean logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n+            final boolean resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n+            final boolean excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+            final String opendistrosecurityIndex = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CONFIG_INDEX_NAME, ConfigConstants.OPENDISTRO_SECURITY_DEFAULT_CONFIG_INDEX);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02410371433a36a60a8ab3bcfce60ee1cf515cee"}, "originalPosition": 68}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83bdfb791bb857530d27e3db0347129973f8d9ff", "author": {"user": {"login": "sujithvm", "name": "Sujith Vadakkepat"}}, "url": "https://github.com/opensearch-project/security/commit/83bdfb791bb857530d27e3db0347129973f8d9ff", "committedDate": "2020-04-05T01:10:27Z", "message": "Remove unused opendistro security index"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3Nzc3MTc1", "url": "https://github.com/opensearch-project/security/pull/306#pullrequestreview-387777175", "createdAt": "2020-04-05T03:06:47Z", "commit": {"oid": "83bdfb791bb857530d27e3db0347129973f8d9ff"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NTY1MzU5", "url": "https://github.com/opensearch-project/security/pull/306#pullrequestreview-389565359", "createdAt": "2020-04-07T23:48:13Z", "commit": {"oid": "83bdfb791bb857530d27e3db0347129973f8d9ff"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMzo0ODoxM1rOGCaIaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMDowMzo0MlrOGCabHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE3ODQ3NQ==", "bodyText": "[suggestion]: we might consider including Lombok as a dependency in the future as it will simplify adding constructors, setters, getters and builders. Created issue https://github.com/opendistro-for-elasticsearch/security/issues/363", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r405178475", "createdAt": "2020-04-07T23:48:13Z", "author": {"login": "debjanibnrj"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,205 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {\n+    public static class Filter {\n+        private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+        private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+                Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                        AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+        private final boolean isRestApiAuditEnabled;\n+        private final boolean isTransportApiAuditEnabled;\n+        private final boolean resolveBulkRequests;\n+        private final boolean logRequestBody;\n+        private final boolean resolveIndices;\n+        private final boolean excludeSensitiveHeaders;\n+        private final Set<String> ignoredAuditUsers;\n+        private final Set<String> ignoredComplianceUsersForRead;\n+        private final Set<String> ignoredComplianceUsersForWrite;\n+        private final Set<String> ignoreAuditRequests;\n+        private final EnumSet<AuditCategory> disabledRestCategories;\n+        private final EnumSet<AuditCategory> disabledTransportCategories;\n+\n+        private Filter(final boolean isRestApiAuditEnabled,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83bdfb791bb857530d27e3db0347129973f8d9ff"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE3OTUyNQ==", "bodyText": "just curious, why does this flag default to false and the others to true?", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r405179525", "createdAt": "2020-04-07T23:51:36Z", "author": {"login": "debjanibnrj"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,205 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {\n+    public static class Filter {\n+        private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+        private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+                Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                        AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+        private final boolean isRestApiAuditEnabled;\n+        private final boolean isTransportApiAuditEnabled;\n+        private final boolean resolveBulkRequests;\n+        private final boolean logRequestBody;\n+        private final boolean resolveIndices;\n+        private final boolean excludeSensitiveHeaders;\n+        private final Set<String> ignoredAuditUsers;\n+        private final Set<String> ignoredComplianceUsersForRead;\n+        private final Set<String> ignoredComplianceUsersForWrite;\n+        private final Set<String> ignoreAuditRequests;\n+        private final EnumSet<AuditCategory> disabledRestCategories;\n+        private final EnumSet<AuditCategory> disabledTransportCategories;\n+\n+        private Filter(final boolean isRestApiAuditEnabled,\n+                       final boolean isTransportApiAuditEnabled,\n+                       final boolean resolveBulkRequests,\n+                       final boolean logRequestBody,\n+                       final boolean resolveIndices,\n+                       final boolean excludeSensitiveHeaders,\n+                       final Set<String> ignoredAuditUsers,\n+                       final Set<String> ignoredComplianceUsersForRead,\n+                       final Set<String> ignoredComplianceUsersForWrite,\n+                       final Set<String> ignoredAuditRequests,\n+                       final EnumSet<AuditCategory> disabledRestCategories,\n+                       final EnumSet<AuditCategory> disabledTransportCategories) {\n+            this.isRestApiAuditEnabled = isRestApiAuditEnabled;\n+            this.isTransportApiAuditEnabled = isTransportApiAuditEnabled;\n+            this.resolveBulkRequests = resolveBulkRequests;\n+            this.logRequestBody = logRequestBody;\n+            this.resolveIndices = resolveIndices;\n+            this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+            this.ignoredAuditUsers = ignoredAuditUsers;\n+            this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+            this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+            this.ignoreAuditRequests = ignoredAuditRequests;\n+            this.disabledRestCategories = disabledRestCategories;\n+            this.disabledTransportCategories = disabledTransportCategories;\n+        }\n+\n+        public static Filter from(Settings settings) {\n+            final boolean isRestApiAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n+            final boolean isTransportAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n+            final boolean resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83bdfb791bb857530d27e3db0347129973f8d9ff"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4MDUzNQ==", "bodyText": "Would be useful to provide doc comments for classes in the future.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r405180535", "createdAt": "2020-04-07T23:54:47Z", "author": {"login": "debjanibnrj"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,205 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83bdfb791bb857530d27e3db0347129973f8d9ff"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4MTA2Nw==", "bodyText": "I see us using this function and then converting the output to a set. Any reason why we don't return a Set by default.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r405181067", "createdAt": "2020-04-07T23:56:35Z", "author": {"login": "debjanibnrj"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,205 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AuditConfig {\n+    public static class Filter {\n+        private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+        private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+                Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                        AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+        private final boolean isRestApiAuditEnabled;\n+        private final boolean isTransportApiAuditEnabled;\n+        private final boolean resolveBulkRequests;\n+        private final boolean logRequestBody;\n+        private final boolean resolveIndices;\n+        private final boolean excludeSensitiveHeaders;\n+        private final Set<String> ignoredAuditUsers;\n+        private final Set<String> ignoredComplianceUsersForRead;\n+        private final Set<String> ignoredComplianceUsersForWrite;\n+        private final Set<String> ignoreAuditRequests;\n+        private final EnumSet<AuditCategory> disabledRestCategories;\n+        private final EnumSet<AuditCategory> disabledTransportCategories;\n+\n+        private Filter(final boolean isRestApiAuditEnabled,\n+                       final boolean isTransportApiAuditEnabled,\n+                       final boolean resolveBulkRequests,\n+                       final boolean logRequestBody,\n+                       final boolean resolveIndices,\n+                       final boolean excludeSensitiveHeaders,\n+                       final Set<String> ignoredAuditUsers,\n+                       final Set<String> ignoredComplianceUsersForRead,\n+                       final Set<String> ignoredComplianceUsersForWrite,\n+                       final Set<String> ignoredAuditRequests,\n+                       final EnumSet<AuditCategory> disabledRestCategories,\n+                       final EnumSet<AuditCategory> disabledTransportCategories) {\n+            this.isRestApiAuditEnabled = isRestApiAuditEnabled;\n+            this.isTransportApiAuditEnabled = isTransportApiAuditEnabled;\n+            this.resolveBulkRequests = resolveBulkRequests;\n+            this.logRequestBody = logRequestBody;\n+            this.resolveIndices = resolveIndices;\n+            this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+            this.ignoredAuditUsers = ignoredAuditUsers;\n+            this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+            this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+            this.ignoreAuditRequests = ignoredAuditRequests;\n+            this.disabledRestCategories = disabledRestCategories;\n+            this.disabledTransportCategories = disabledTransportCategories;\n+        }\n+\n+        public static Filter from(Settings settings) {\n+            final boolean isRestApiAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n+            final boolean isTransportAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n+            final boolean resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n+            final boolean logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n+            final boolean resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n+            final boolean excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+\n+            final EnumSet<AuditCategory> disabledRestCategories = AuditCategory.parse(getSettingAsList(\n+                    settings,\n+                    ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES,\n+                    DEFAULT_DISABLED_CATEGORIES,\n+                    true));\n+\n+            final EnumSet<AuditCategory> disabledTransportCategories = AuditCategory.parse(getSettingAsList(\n+                    settings,\n+                    ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES,\n+                    DEFAULT_DISABLED_CATEGORIES,\n+                    true));\n+\n+            final Set<String> ignoredAuditUsers = ImmutableSet.copyOf(getSettingAsList(\n+                    settings,\n+                    ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS,\n+                    DEFAULT_IGNORED_USERS,\n+                    false));\n+\n+            final Set<String> ignoredComplianceUsersForRead = ImmutableSet.copyOf(getSettingAsList(\n+                    settings,\n+                    ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS,\n+                    DEFAULT_IGNORED_USERS,\n+                    false));\n+\n+            final Set<String> ignoredComplianceUsersForWrite = ImmutableSet.copyOf(getSettingAsList(\n+                    settings,\n+                    ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS,\n+                    DEFAULT_IGNORED_USERS,\n+                    false));\n+\n+            final Set<String> ignoreAuditRequests = ImmutableSet.copyOf(settings.getAsList(\n+                    ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS,\n+                    Collections.emptyList()));\n+\n+            return new Filter(isRestApiAuditEnabled,\n+                    isTransportAuditEnabled,\n+                    resolveBulkRequests,\n+                    logRequestBody,\n+                    resolveIndices,\n+                    excludeSensitiveHeaders,\n+                    ignoredAuditUsers,\n+                    ignoredComplianceUsersForRead,\n+                    ignoredComplianceUsersForWrite,\n+                    ignoreAuditRequests,\n+                    disabledRestCategories,\n+                    disabledTransportCategories);\n+        }\n+\n+        private static List<String> getSettingAsList(final Settings settings, final String key, final List<String> defaultList, final boolean ignoreCaseForNone) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83bdfb791bb857530d27e3db0347129973f8d9ff"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4MjAxMA==", "bodyText": "nit: maybe rename this to logger. auditConfigFilter.log(log) was a little difficult for me to understand", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r405182010", "createdAt": "2020-04-07T23:59:28Z", "author": {"login": "debjanibnrj"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "diffHunk": "@@ -80,33 +79,16 @@\n import com.google.common.io.BaseEncoding;\n \n public abstract class AbstractAuditLog implements AuditLog {\n-\n-    private static final List<String> DEFAULT_DISABLED_CATEGORIES = Arrays.asList(AuditCategory.AUTHENTICATED.toString(), AuditCategory.GRANTED_PRIVILEGES.toString());\n-\n     protected final Logger log = LogManager.getLogger(this.getClass());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83bdfb791bb857530d27e3db0347129973f8d9ff"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4MzI2MA==", "bodyText": "wildcard imports are generally considered bad practice.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r405183260", "createdAt": "2020-04-08T00:03:42Z", "author": {"login": "debjanibnrj"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfigFilterTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableSet;\n+import org.elasticsearch.common.settings.Settings;\n+import org.junit.Test;\n+\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.Set;\n+\n+import static com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83bdfb791bb857530d27e3db0347129973f8d9ff"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "442470f798c725832252b72cd41069d850cf5a20", "author": {"user": {"login": "sujithvm", "name": "Sujith Vadakkepat"}}, "url": "https://github.com/opensearch-project/security/commit/442470f798c725832252b72cd41069d850cf5a20", "committedDate": "2020-04-08T00:49:18Z", "message": "Address code reviews"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9fee10cde967b2cf3c942abb25614e94de2972c1", "author": {"user": {"login": "sujithvm", "name": "Sujith Vadakkepat"}}, "url": "https://github.com/opensearch-project/security/commit/9fee10cde967b2cf3c942abb25614e94de2972c1", "committedDate": "2020-04-08T01:00:54Z", "message": "More specific imports"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NTkwMDMz", "url": "https://github.com/opensearch-project/security/pull/306#pullrequestreview-389590033", "createdAt": "2020-04-08T01:08:11Z", "commit": {"oid": "9fee10cde967b2cf3c942abb25614e94de2972c1"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60cf91df686ae5833494df60776862df078fad1a", "author": {"user": {"login": "sujithvm", "name": "Sujith Vadakkepat"}}, "url": "https://github.com/opensearch-project/security/commit/60cf91df686ae5833494df60776862df078fad1a", "committedDate": "2020-04-08T01:24:57Z", "message": "Add private constructor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NjIwMTI2", "url": "https://github.com/opensearch-project/security/pull/306#pullrequestreview-389620126", "createdAt": "2020-04-08T02:52:56Z", "commit": {"oid": "60cf91df686ae5833494df60776862df078fad1a"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMjo1Mjo1NlrOGCdMtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMzowMzoxMlrOGCdWug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIyODcyNg==", "bodyText": "Consider  moving this method to AuditConfig from AuditConfig.Filter", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r405228726", "createdAt": "2020-04-08T02:52:56Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,268 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * Class represents configuration for audit logging.\n+ */\n+public class AuditConfig {\n+\n+    private AuditConfig() { }\n+\n+    /**\n+     * Filter represents set of filtering configuration settings for audit logging.\n+     * Audit logger will use these settings to determine what audit logs are to be generated.\n+     */\n+    public static class Filter {\n+        private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+        private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+                Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                        AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+        private final boolean isRestApiAuditEnabled;\n+        private final boolean isTransportApiAuditEnabled;\n+        private final boolean resolveBulkRequests;\n+        private final boolean logRequestBody;\n+        private final boolean resolveIndices;\n+        private final boolean excludeSensitiveHeaders;\n+        private final Set<String> ignoredAuditUsers;\n+        private final Set<String> ignoredComplianceUsersForRead;\n+        private final Set<String> ignoredComplianceUsersForWrite;\n+        private final Set<String> ignoreAuditRequests;\n+        private final EnumSet<AuditCategory> disabledRestCategories;\n+        private final EnumSet<AuditCategory> disabledTransportCategories;\n+\n+        private Filter(final boolean isRestApiAuditEnabled,\n+                       final boolean isTransportApiAuditEnabled,\n+                       final boolean resolveBulkRequests,\n+                       final boolean logRequestBody,\n+                       final boolean resolveIndices,\n+                       final boolean excludeSensitiveHeaders,\n+                       final Set<String> ignoredAuditUsers,\n+                       final Set<String> ignoredComplianceUsersForRead,\n+                       final Set<String> ignoredComplianceUsersForWrite,\n+                       final Set<String> ignoredAuditRequests,\n+                       final EnumSet<AuditCategory> disabledRestCategories,\n+                       final EnumSet<AuditCategory> disabledTransportCategories) {\n+            this.isRestApiAuditEnabled = isRestApiAuditEnabled;\n+            this.isTransportApiAuditEnabled = isTransportApiAuditEnabled;\n+            this.resolveBulkRequests = resolveBulkRequests;\n+            this.logRequestBody = logRequestBody;\n+            this.resolveIndices = resolveIndices;\n+            this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+            this.ignoredAuditUsers = ignoredAuditUsers;\n+            this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+            this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+            this.ignoreAuditRequests = ignoredAuditRequests;\n+            this.disabledRestCategories = disabledRestCategories;\n+            this.disabledTransportCategories = disabledTransportCategories;\n+        }\n+\n+        /**\n+         * Generate audit logging configuration from settings defined in elasticsearch.yml\n+         * @param settings settings\n+         * @return audit configuration filter\n+         */\n+        public static Filter from(Settings settings) {\n+            final boolean isRestApiAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n+            final boolean isTransportAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n+            final boolean resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n+            final boolean logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n+            final boolean resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n+            final boolean excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+\n+            final EnumSet<AuditCategory> disabledRestCategories = AuditCategory.parse(getSettingAsSet(\n+                    settings,\n+                    ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES,\n+                    DEFAULT_DISABLED_CATEGORIES,\n+                    true));\n+\n+            final EnumSet<AuditCategory> disabledTransportCategories = AuditCategory.parse(getSettingAsSet(\n+                    settings,\n+                    ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES,\n+                    DEFAULT_DISABLED_CATEGORIES,\n+                    true));\n+\n+            final Set<String> ignoredAuditUsers = getSettingAsSet(\n+                    settings,\n+                    ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS,\n+                    DEFAULT_IGNORED_USERS,\n+                    false);\n+\n+            final Set<String> ignoredComplianceUsersForRead = getSettingAsSet(\n+                    settings,\n+                    ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS,\n+                    DEFAULT_IGNORED_USERS,\n+                    false);\n+\n+            final Set<String> ignoredComplianceUsersForWrite = getSettingAsSet(\n+                    settings,\n+                    ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS,\n+                    DEFAULT_IGNORED_USERS,\n+                    false);\n+\n+            final Set<String> ignoreAuditRequests = ImmutableSet.copyOf(settings.getAsList(\n+                    ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS,\n+                    Collections.emptyList()));\n+\n+            return new Filter(isRestApiAuditEnabled,\n+                    isTransportAuditEnabled,\n+                    resolveBulkRequests,\n+                    logRequestBody,\n+                    resolveIndices,\n+                    excludeSensitiveHeaders,\n+                    ignoredAuditUsers,\n+                    ignoredComplianceUsersForRead,\n+                    ignoredComplianceUsersForWrite,\n+                    ignoreAuditRequests,\n+                    disabledRestCategories,\n+                    disabledTransportCategories);\n+        }\n+\n+        private static Set<String> getSettingAsSet(final Settings settings, final String key, final List<String> defaultList, final boolean ignoreCaseForNone) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60cf91df686ae5833494df60776862df078fad1a"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIzMTI5MA==", "bodyText": "In case conversion to Set is done inside this function, it is better to add isEmpty() check here. I am not 100% convinced that it is necessary to convert to Set from List here as it is not always necessary and in the future there may be different requirements for case-sensitivity of the returned Set.", "url": "https://github.com/opensearch-project/security/pull/306#discussion_r405231290", "createdAt": "2020-04-08T03:03:12Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -0,0 +1,268 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * Class represents configuration for audit logging.\n+ */\n+public class AuditConfig {\n+\n+    private AuditConfig() { }\n+\n+    /**\n+     * Filter represents set of filtering configuration settings for audit logging.\n+     * Audit logger will use these settings to determine what audit logs are to be generated.\n+     */\n+    public static class Filter {\n+        private static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n+        private static final List<String> DEFAULT_DISABLED_CATEGORIES =\n+                Arrays.asList(AuditCategory.AUTHENTICATED.toString(),\n+                        AuditCategory.GRANTED_PRIVILEGES.toString());\n+\n+        private final boolean isRestApiAuditEnabled;\n+        private final boolean isTransportApiAuditEnabled;\n+        private final boolean resolveBulkRequests;\n+        private final boolean logRequestBody;\n+        private final boolean resolveIndices;\n+        private final boolean excludeSensitiveHeaders;\n+        private final Set<String> ignoredAuditUsers;\n+        private final Set<String> ignoredComplianceUsersForRead;\n+        private final Set<String> ignoredComplianceUsersForWrite;\n+        private final Set<String> ignoreAuditRequests;\n+        private final EnumSet<AuditCategory> disabledRestCategories;\n+        private final EnumSet<AuditCategory> disabledTransportCategories;\n+\n+        private Filter(final boolean isRestApiAuditEnabled,\n+                       final boolean isTransportApiAuditEnabled,\n+                       final boolean resolveBulkRequests,\n+                       final boolean logRequestBody,\n+                       final boolean resolveIndices,\n+                       final boolean excludeSensitiveHeaders,\n+                       final Set<String> ignoredAuditUsers,\n+                       final Set<String> ignoredComplianceUsersForRead,\n+                       final Set<String> ignoredComplianceUsersForWrite,\n+                       final Set<String> ignoredAuditRequests,\n+                       final EnumSet<AuditCategory> disabledRestCategories,\n+                       final EnumSet<AuditCategory> disabledTransportCategories) {\n+            this.isRestApiAuditEnabled = isRestApiAuditEnabled;\n+            this.isTransportApiAuditEnabled = isTransportApiAuditEnabled;\n+            this.resolveBulkRequests = resolveBulkRequests;\n+            this.logRequestBody = logRequestBody;\n+            this.resolveIndices = resolveIndices;\n+            this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+            this.ignoredAuditUsers = ignoredAuditUsers;\n+            this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+            this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+            this.ignoreAuditRequests = ignoredAuditRequests;\n+            this.disabledRestCategories = disabledRestCategories;\n+            this.disabledTransportCategories = disabledTransportCategories;\n+        }\n+\n+        /**\n+         * Generate audit logging configuration from settings defined in elasticsearch.yml\n+         * @param settings settings\n+         * @return audit configuration filter\n+         */\n+        public static Filter from(Settings settings) {\n+            final boolean isRestApiAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n+            final boolean isTransportAuditEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n+            final boolean resolveBulkRequests = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false);\n+            final boolean logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n+            final boolean resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n+            final boolean excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+\n+            final EnumSet<AuditCategory> disabledRestCategories = AuditCategory.parse(getSettingAsSet(\n+                    settings,\n+                    ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES,\n+                    DEFAULT_DISABLED_CATEGORIES,\n+                    true));\n+\n+            final EnumSet<AuditCategory> disabledTransportCategories = AuditCategory.parse(getSettingAsSet(\n+                    settings,\n+                    ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES,\n+                    DEFAULT_DISABLED_CATEGORIES,\n+                    true));\n+\n+            final Set<String> ignoredAuditUsers = getSettingAsSet(\n+                    settings,\n+                    ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_USERS,\n+                    DEFAULT_IGNORED_USERS,\n+                    false);\n+\n+            final Set<String> ignoredComplianceUsersForRead = getSettingAsSet(\n+                    settings,\n+                    ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_READ_IGNORE_USERS,\n+                    DEFAULT_IGNORED_USERS,\n+                    false);\n+\n+            final Set<String> ignoredComplianceUsersForWrite = getSettingAsSet(\n+                    settings,\n+                    ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_IGNORE_USERS,\n+                    DEFAULT_IGNORED_USERS,\n+                    false);\n+\n+            final Set<String> ignoreAuditRequests = ImmutableSet.copyOf(settings.getAsList(\n+                    ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS,\n+                    Collections.emptyList()));\n+\n+            return new Filter(isRestApiAuditEnabled,\n+                    isTransportAuditEnabled,\n+                    resolveBulkRequests,\n+                    logRequestBody,\n+                    resolveIndices,\n+                    excludeSensitiveHeaders,\n+                    ignoredAuditUsers,\n+                    ignoredComplianceUsersForRead,\n+                    ignoredComplianceUsersForWrite,\n+                    ignoreAuditRequests,\n+                    disabledRestCategories,\n+                    disabledTransportCategories);\n+        }\n+\n+        private static Set<String> getSettingAsSet(final Settings settings, final String key, final List<String> defaultList, final boolean ignoreCaseForNone) {\n+            final List<String> list = settings.getAsList(key, defaultList);\n+            if (list.size() == 1 && \"NONE\".equals(ignoreCaseForNone? list.get(0).toUpperCase() : list.get(0))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60cf91df686ae5833494df60776862df078fad1a"}, "originalPosition": 134}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwMTgxMTkx", "url": "https://github.com/opensearch-project/security/pull/306#pullrequestreview-390181191", "createdAt": "2020-04-08T17:25:43Z", "commit": {"oid": "60cf91df686ae5833494df60776862df078fad1a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3031, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}