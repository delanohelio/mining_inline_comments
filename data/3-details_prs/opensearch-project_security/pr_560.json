{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4NjcwMzM0", "number": 560, "title": "Add ability for plugins to inject roles", "bodyText": "Issue #, if available:\nopendistro-for-elasticsearch/alerting#215\nDescription of changes:\nThis is used to inject opendistro-roles into the request when there is no user involved, like periodic plugin background jobs. The roles injection is done using thread-context at transport layer only. You can't inject roles using REST api. Using this we can enforce fine-grained-access-control for the transport layer calls plugins make.\nFormat for the injected string: user_name|role_1,role_2.  User name is ignored. And roles are opendistro-roles.\nthreadContext.putTransient(\"opendistro_security_injected_roles\", \"bones|role_1,role_2\"); The request will be evaluated using role1 and role2.  These changes are similar to User injection functionality.\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-07-14T06:15:18Z", "url": "https://github.com/opensearch-project/security/pull/560", "merged": true, "mergeCommit": {"oid": "6304e7875ba7dc24ffcb0fe89a875a56cb6cc853"}, "closed": true, "closedAt": "2020-08-06T19:57:54Z", "author": {"login": "skkosuri-amzn"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc0vtQjgH2gAyNDQ4NjcwMzM0OmI3OTQ0ZWJiNmE0ZWI0ZDRiNWNmODM1NGE4MDk1MDU3ZTY3YmI1YTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc8Uup-AFqTQ2MjgwMjUyMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b7944ebb6a4eb4d4b5cf8354a8095057e67bb5a8", "author": {"user": {"login": "skkosuri-amzn", "name": "Sriram"}}, "url": "https://github.com/opensearch-project/security/commit/b7944ebb6a4eb4d4b5cf8354a8095057e67bb5a8", "committedDate": "2020-07-14T06:05:07Z", "message": "Add ability for plugins to inject roles"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MjU0Mjkz", "url": "https://github.com/opensearch-project/security/pull/560#pullrequestreview-455254293", "createdAt": "2020-07-25T02:31:55Z", "commit": {"oid": "b7944ebb6a4eb4d4b5cf8354a8095057e67bb5a8"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwMjozMTo1NlrOG3Bv-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwMzoxMzoxNVrOG3B9Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM1MzUyOA==", "bodyText": "Please follow the common format for other settings (opendistro_security.enable_inject_roles)", "url": "https://github.com/opensearch-project/security/pull/560#discussion_r460353528", "createdAt": "2020-07-25T02:31:56Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/support/ConfigConstants.java", "diffHunk": "@@ -100,7 +100,10 @@\n     public static final String OPENDISTRO_SECURITY_USER_HEADER = OPENDISTRO_SECURITY_CONFIG_PREFIX+\"user_header\";\n \n     public static final String OPENDISTRO_SECURITY_INJECTED_USER = \"injected_user\";\n-    \n+\n+    public static final String OPENDISTRO_SECURITY_INJECTED_ROLES_ENABLED = \"opendistro_security_injected_roles_enabled\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7944ebb6a4eb4d4b5cf8354a8095057e67bb5a8"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM1Mzc3Ng==", "bodyText": "What is the risk of enabling role injection by default? If there is no risk, why is it necessary to introduce enable settings?", "url": "https://github.com/opensearch-project/security/pull/560#discussion_r460353776", "createdAt": "2020-07-25T02:35:03Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -961,6 +961,7 @@ public Settings additionalSettings() {\n             settings.add(Setting.boolSetting(ConfigConstants.OPENDISTRO_SECURITY_UNSUPPORTED_LOAD_STATIC_RESOURCES, true, Property.NodeScope, Property.Filtered));\n             settings.add(Setting.boolSetting(ConfigConstants.OPENDISTRO_SECURITY_SSL_CERT_RELOAD_ENABLED, false, Property.NodeScope, Property.Filtered));\n             settings.add(Setting.boolSetting(ConfigConstants.OPENDISTRO_SECURITY_UNSUPPORTED_ACCEPT_INVALID_CONFIG, false, Property.NodeScope, Property.Filtered));\n+            settings.add(Setting.boolSetting(ConfigConstants.OPENDISTRO_SECURITY_INJECTED_ROLES_ENABLED, true, Property.NodeScope, Property.Filtered));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7944ebb6a4eb4d4b5cf8354a8095057e67bb5a8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM1NDAxNA==", "bodyText": "Split into the constructor that initializes threadContext and enabled members and public boolean injectUserAndRoles() method.", "url": "https://github.com/opensearch-project/security/pull/560#discussion_r460354014", "createdAt": "2020-07-25T02:37:43Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auth/RolesInjector.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.auth;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.amazon.opendistroforelasticsearch.security.user.User;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.transport.TransportAddress;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+\n+import java.net.InetAddress;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * This is used to inject opendistro-roles into the request when there is no user involved, like periodic plugin\n+ * background jobs. The roles injection is done using thread-context at transport layer only. You can't inject\n+ * roles using REST api. Using this we can enforce fine-grained-access-control for the transport layer calls plugins make.\n+ *\n+ * Format for the injected string: user_name|role_1,role_2\n+ * User name is ignored. And roles are opendistro-roles.\n+ */\n+\n+final public class RolesInjector {\n+    protected final Logger log = LogManager.getLogger(RolesInjector.class);\n+    private final boolean enabled;\n+    private User user = null;\n+    private Set<String> roles = null;\n+    private final ThreadContext threadContext;\n+\n+    public RolesInjector(final Settings settings, final ThreadContext ctx) {\n+        this.threadContext = ctx;\n+        this.enabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_INJECTED_ROLES_ENABLED, true);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7944ebb6a4eb4d4b5cf8354a8095057e67bb5a8"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM1NDAzMQ==", "bodyText": "nit: new line", "url": "https://github.com/opensearch-project/security/pull/560#discussion_r460354031", "createdAt": "2020-07-25T02:38:05Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auth/RolesInjector.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.auth;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.amazon.opendistroforelasticsearch.security.user.User;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.transport.TransportAddress;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+\n+import java.net.InetAddress;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * This is used to inject opendistro-roles into the request when there is no user involved, like periodic plugin\n+ * background jobs. The roles injection is done using thread-context at transport layer only. You can't inject\n+ * roles using REST api. Using this we can enforce fine-grained-access-control for the transport layer calls plugins make.\n+ *\n+ * Format for the injected string: user_name|role_1,role_2\n+ * User name is ignored. And roles are opendistro-roles.\n+ */\n+\n+final public class RolesInjector {\n+    protected final Logger log = LogManager.getLogger(RolesInjector.class);\n+    private final boolean enabled;\n+    private User user = null;\n+    private Set<String> roles = null;\n+    private final ThreadContext threadContext;\n+\n+    public RolesInjector(final Settings settings, final ThreadContext ctx) {\n+        this.threadContext = ctx;\n+        this.enabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_INJECTED_ROLES_ENABLED, true);\n+\n+        parseInjectedStr(ctx.getTransient(ConfigConstants.OPENDISTRO_SECURITY_INJECTED_ROLES));\n+        if(log.isDebugEnabled()){\n+            log.debug(\"Injected role str: \"+ ctx.getTransient(ConfigConstants.OPENDISTRO_SECURITY_INJECTED_ROLES));\n+        }\n+        addRemoteAddr(threadContext);\n+    }\n+\n+    private void addRemoteAddr(ThreadContext threadContext) {\n+        if(threadContext.getTransient(ConfigConstants.OPENDISTRO_SECURITY_REMOTE_ADDRESS) != null)\n+            return;\n+\n+        threadContext.putTransient(ConfigConstants.OPENDISTRO_SECURITY_REMOTE_ADDRESS,\n+                new TransportAddress(InetAddress.getLoopbackAddress(), 9300));\n+    }\n+\n+    /*\n+     * Input string format: user|role_1,role2\n+     */\n+    private void parseInjectedStr(final String injectedStr) {\n+        if (Strings.isNullOrEmpty(injectedStr))\n+            return;\n+\n+        String[] strs = injectedStr.split(\"\\\\|\");\n+        if (strs.length == 0) {\n+            log.error(\"Roles injected string malformed, could not extract parts. User string was '{}.'\" +\n+                    \" Roles injection failed.\", injectedStr);\n+            return;\n+        }\n+        if (Strings.isNullOrEmpty(strs[0])) {\n+            log.error(\"Username must not be null, injected string was '{}.' Roles injection failed.\", injectedStr);\n+            return;\n+        }\n+        this.user = new User(strs[0]);\n+        this.roles = new HashSet<>();\n+        if (Strings.isNullOrEmpty(strs[1])) {\n+            log.error(\"Roles must not be null, injected string was '{}.' Roles injection failed.\", injectedStr);\n+            return;\n+        }\n+        roles.addAll(Arrays.asList(strs[1].split(\",\")));\n+    }\n+\n+    public boolean isRoleInjected() {\n+        return enabled && (user != null) && (roles.size() > 0);\n+    }\n+\n+    public final Set<String> getInjectedRoles() {\n+        return roles;\n+    }\n+\n+    public final User getUser() {\n+        return user;\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7944ebb6a4eb4d4b5cf8354a8095057e67bb5a8"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM1NDEwNw==", "bodyText": "construct RolesInjector here (see the other comment regarding splitting the constructor).", "url": "https://github.com/opensearch-project/security/pull/560#discussion_r460354107", "createdAt": "2020-07-25T02:39:09Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/filter/OpenDistroSecurityFilter.java", "diffHunk": "@@ -103,6 +105,7 @@\n     public OpenDistroSecurityFilter(final Settings settings, final PrivilegesEvaluator evalp, final AdminDNs adminDns,\n             DlsFlsRequestValve dlsFlsValve, AuditLog auditLog, ThreadPool threadPool, ClusterService cs,\n             final CompatConfig compatConfig, final IndexResolverReplacer indexResolverReplacer) {\n+        this.settings = settings;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7944ebb6a4eb4d4b5cf8354a8095057e67bb5a8"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM1NTc3Nw==", "bodyText": "instead of rolesInjector pass mapedRoles or null.", "url": "https://github.com/opensearch-project/security/pull/560#discussion_r460355777", "createdAt": "2020-07-25T02:58:51Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/filter/OpenDistroSecurityFilter.java", "diffHunk": "@@ -264,7 +270,7 @@ public int order() {\n                 log.trace(\"Evaluate permissions for user: {}\", user.getName());\n             }\n \n-            final PrivilegesEvaluatorResponse pres = eval.evaluate(user, action, request, task);\n+            final PrivilegesEvaluatorResponse pres = eval.evaluate(user, action, request, task, rolesInjector);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7944ebb6a4eb4d4b5cf8354a8095057e67bb5a8"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM1NTgxMA==", "bodyText": "nit: new line", "url": "https://github.com/opensearch-project/security/pull/560#discussion_r460355810", "createdAt": "2020-07-25T02:59:14Z", "author": {"login": "vrozov"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/RolesInjectorIntegTest.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security;\n+\n+import com.amazon.opendistroforelasticsearch.security.test.DynamicSecurityConfig;\n+import com.amazon.opendistroforelasticsearch.security.test.SingleClusterTest;\n+import com.amazon.opendistroforelasticsearch.security.test.plugin.RolesInjectorPlugin;\n+import org.elasticsearch.ElasticsearchSecurityException;\n+import org.elasticsearch.action.admin.cluster.health.ClusterHealthRequest;\n+import org.elasticsearch.action.admin.indices.create.CreateIndexRequest;\n+import org.elasticsearch.action.admin.indices.create.CreateIndexResponse;\n+import org.elasticsearch.action.admin.indices.exists.indices.IndicesExistsRequest;\n+import org.elasticsearch.action.admin.indices.exists.indices.IndicesExistsResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.health.ClusterHealthStatus;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.node.Node;\n+import org.elasticsearch.node.PluginAwareNode;\n+import org.elasticsearch.transport.Netty4Plugin;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+\n+public class RolesInjectorIntegTest extends SingleClusterTest {\n+\n+    //Wait for the security plugin to load roles.\n+    private void waitForInit(Client client) throws Exception {\n+        try {\n+            client.admin().cluster().health(new ClusterHealthRequest()).actionGet();\n+        } catch (ElasticsearchSecurityException ex) {\n+            if (ex.getMessage().contains(\"Open Distro Security not initialized\")) {\n+                Thread.sleep(1000);\n+                waitForInit(client);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testRolesInject() throws Exception {\n+        setup(Settings.EMPTY, new DynamicSecurityConfig()\n+                        .setSecurityRoles(\"roles.yml\")\n+                        .setConfig(\"config_transport_username.yml\")\n+                , Settings.EMPTY);\n+\n+        Assert.assertEquals(clusterInfo.numNodes, clusterHelper.nodeClient().admin().cluster().health(\n+                new ClusterHealthRequest().waitForGreenStatus()).actionGet().getNumberOfNodes());\n+        Assert.assertEquals(ClusterHealthStatus.GREEN, clusterHelper.nodeClient().admin().cluster().\n+                health(new ClusterHealthRequest().waitForGreenStatus()).actionGet().getStatus());\n+\n+        final Settings tcSettings = Settings.builder()\n+                .put(minimumSecuritySettings(Settings.EMPTY).get(0))\n+                .put(\"cluster.name\", clusterInfo.clustername)\n+                .put(\"node.data\", false)\n+                .put(\"node.master\", false)\n+                .put(\"node.ingest\", false)\n+                .put(\"path.data\", \"./target/data/\" + clusterInfo.clustername + \"/cert/data\")\n+                .put(\"path.logs\", \"./target/data/\" + clusterInfo.clustername + \"/cert/logs\")\n+                .put(\"path.home\", \"./target\")\n+                .put(\"node.name\", \"testclient\")\n+                .put(\"discovery.initial_state_timeout\", \"8s\")\n+                .put(\"opendistro_security_injected_roles_enabled\", \"true\")\n+                .put(\"opendistro_security.allow_default_init_securityindex\", \"true\")\n+                .putList(\"discovery.zen.ping.unicast.hosts\", clusterInfo.nodeHost + \":\" + clusterInfo.nodePort)\n+                .build();\n+\n+        //1. Without roles injection.\n+        try (Node node = new PluginAwareNode(false, tcSettings, Netty4Plugin.class,\n+                OpenDistroSecurityPlugin.class, RolesInjectorPlugin.class).start()) {\n+\n+            CreateIndexResponse cir = node.client().admin().indices().create(new CreateIndexRequest(\"captain-logs-1\")).actionGet();\n+            Assert.assertTrue(cir.isAcknowledged());\n+            IndicesExistsResponse ier = node.client().admin().indices().exists(new IndicesExistsRequest(\"captain-logs-1\")).actionGet();\n+            Assert.assertTrue(ier.isExists());\n+        }\n+\n+        //2. With invalid roles, must throw security exception.\n+        RolesInjectorPlugin.injectedRoles = \"invalid_user|invalid_role\";\n+        Exception exception = null;\n+        try (Node node = new PluginAwareNode(false, tcSettings, Netty4Plugin.class, OpenDistroSecurityPlugin.class, RolesInjectorPlugin.class).start()) {\n+            waitForInit(node.client());\n+            CreateIndexResponse cir = node.client().admin().indices().create(new CreateIndexRequest(\"captain-logs-2\")).actionGet();\n+            Assert.assertTrue(cir.isAcknowledged());\n+        } catch (ElasticsearchSecurityException ex) {\n+            exception = ex;\n+            log.warn(ex);\n+        }\n+        Assert.assertNotNull(exception);\n+        Assert.assertTrue(exception.getMessage().contains(\"indices:admin/create\"));\n+\n+        //3. With valid roles - which has permission to create index.\n+        RolesInjectorPlugin.injectedRoles = \"invalid_user|opendistro_security_all_access\";\n+        try (Node node = new PluginAwareNode(false, tcSettings, Netty4Plugin.class, OpenDistroSecurityPlugin.class, RolesInjectorPlugin.class).start()) {\n+            waitForInit(node.client());\n+\n+            CreateIndexResponse cir = node.client().admin().indices().create(new CreateIndexRequest(\"captain-logs-3\")).actionGet();\n+            Assert.assertTrue(cir.isAcknowledged());\n+\n+            IndicesExistsResponse ier = node.client().admin().indices().exists(new IndicesExistsRequest(\"captain-logs-3\")).actionGet();\n+            Assert.assertTrue(ier.isExists());\n+        }\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7944ebb6a4eb4d4b5cf8354a8095057e67bb5a8"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM1NjMyNw==", "bodyText": "put user to thread context and remove getUser()", "url": "https://github.com/opensearch-project/security/pull/560#discussion_r460356327", "createdAt": "2020-07-25T03:05:27Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auth/RolesInjector.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.auth;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.amazon.opendistroforelasticsearch.security.user.User;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.transport.TransportAddress;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+\n+import java.net.InetAddress;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * This is used to inject opendistro-roles into the request when there is no user involved, like periodic plugin\n+ * background jobs. The roles injection is done using thread-context at transport layer only. You can't inject\n+ * roles using REST api. Using this we can enforce fine-grained-access-control for the transport layer calls plugins make.\n+ *\n+ * Format for the injected string: user_name|role_1,role_2\n+ * User name is ignored. And roles are opendistro-roles.\n+ */\n+\n+final public class RolesInjector {\n+    protected final Logger log = LogManager.getLogger(RolesInjector.class);\n+    private final boolean enabled;\n+    private User user = null;\n+    private Set<String> roles = null;\n+    private final ThreadContext threadContext;\n+\n+    public RolesInjector(final Settings settings, final ThreadContext ctx) {\n+        this.threadContext = ctx;\n+        this.enabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_INJECTED_ROLES_ENABLED, true);\n+\n+        parseInjectedStr(ctx.getTransient(ConfigConstants.OPENDISTRO_SECURITY_INJECTED_ROLES));\n+        if(log.isDebugEnabled()){\n+            log.debug(\"Injected role str: \"+ ctx.getTransient(ConfigConstants.OPENDISTRO_SECURITY_INJECTED_ROLES));\n+        }\n+        addRemoteAddr(threadContext);\n+    }\n+\n+    private void addRemoteAddr(ThreadContext threadContext) {\n+        if(threadContext.getTransient(ConfigConstants.OPENDISTRO_SECURITY_REMOTE_ADDRESS) != null)\n+            return;\n+\n+        threadContext.putTransient(ConfigConstants.OPENDISTRO_SECURITY_REMOTE_ADDRESS,\n+                new TransportAddress(InetAddress.getLoopbackAddress(), 9300));\n+    }\n+\n+    /*\n+     * Input string format: user|role_1,role2\n+     */\n+    private void parseInjectedStr(final String injectedStr) {\n+        if (Strings.isNullOrEmpty(injectedStr))\n+            return;\n+\n+        String[] strs = injectedStr.split(\"\\\\|\");\n+        if (strs.length == 0) {\n+            log.error(\"Roles injected string malformed, could not extract parts. User string was '{}.'\" +\n+                    \" Roles injection failed.\", injectedStr);\n+            return;\n+        }\n+        if (Strings.isNullOrEmpty(strs[0])) {\n+            log.error(\"Username must not be null, injected string was '{}.' Roles injection failed.\", injectedStr);\n+            return;\n+        }\n+        this.user = new User(strs[0]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7944ebb6a4eb4d4b5cf8354a8095057e67bb5a8"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM1Njk0Ng==", "bodyText": "move to RolesInjectorIntegTest", "url": "https://github.com/opensearch-project/security/pull/560#discussion_r460356946", "createdAt": "2020-07-25T03:13:15Z", "author": {"login": "vrozov"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/test/plugin/RolesInjectorPlugin.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+*   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+*\n+*   Licensed under the Apache License, Version 2.0 (the \"License\").\n+*   You may not use this file except in compliance with the License.\n+*   A copy of the License is located at\n+*\n+*       http://www.apache.org/licenses/LICENSE-2.0\n+*\n+*   or in the \"license\" file accompanying this file. This file is distributed\n+*   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+*   express or implied. See the License for the specific language governing\n+*   permissions and limitations under the License.\n+*/\n+\n+package com.amazon.opendistroforelasticsearch.security.test.plugin;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.io.stream.NamedWriteableRegistry;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.env.Environment;\n+import org.elasticsearch.env.NodeEnvironment;\n+import org.elasticsearch.plugins.ActionPlugin;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.repositories.RepositoriesService;\n+import org.elasticsearch.script.ScriptService;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.elasticsearch.watcher.ResourceWatcherService;\n+\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.function.Supplier;\n+\n+public class RolesInjectorPlugin extends Plugin implements ActionPlugin {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7944ebb6a4eb4d4b5cf8354a8095057e67bb5a8"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9c0a0f5e0f50252819e63a591a35c98df9abc17", "author": {"user": {"login": "skkosuri-amzn", "name": "Sriram"}}, "url": "https://github.com/opensearch-project/security/commit/e9c0a0f5e0f50252819e63a591a35c98df9abc17", "committedDate": "2020-07-29T05:42:02Z", "message": "Removed OPENDISTRO_SECURITY_INJECTED_ROLES_ENABLED, its enabled all the time.With that Settings are not required, removed.Refactored RolesInjector.java. Moved RolesInjectorPlugin class to the RolesInjectorPlugin. Added exception message for roles injection missing permissions."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4NjQxNzk5", "url": "https://github.com/opensearch-project/security/pull/560#pullrequestreview-458641799", "createdAt": "2020-07-30T18:11:47Z", "commit": {"oid": "e9c0a0f5e0f50252819e63a591a35c98df9abc17"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODoxMTo0N1rOG5uWJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODozNjowM1rOG5vJiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE4MTM0OQ==", "bodyText": "Use smart logging. Log after checking for null.", "url": "https://github.com/opensearch-project/security/pull/560#discussion_r463181349", "createdAt": "2020-07-30T18:11:47Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auth/RolesInjector.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.auth;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.amazon.opendistroforelasticsearch.security.user.User;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.transport.TransportAddress;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+\n+import java.net.InetAddress;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * This is used to inject opendistro-roles into the request when there is no user involved, like periodic plugin\n+ * background jobs. The roles injection is done using thread-context at transport layer only. You can't inject\n+ * roles using REST api. Using this we can enforce fine-grained-access-control for the transport layer calls plugins make.\n+ *\n+ * Format for the injected string: user_name|role_1,role_2\n+ * User name is ignored. And roles are opendistro-roles.\n+ */\n+final public class RolesInjector {\n+    protected final Logger log = LogManager.getLogger(RolesInjector.class);\n+\n+    public RolesInjector() {\n+        //empty\n+    }\n+\n+    public Set<String> injectUserAndRoles(final ThreadContext ctx) {\n+\n+        if(log.isDebugEnabled()){\n+            log.debug(\"Injected role str: \"+ ctx.getTransient(ConfigConstants.OPENDISTRO_SECURITY_INJECTED_ROLES));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9c0a0f5e0f50252819e63a591a35c98df9abc17"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE4MjA2OA==", "bodyText": "Empty string should probably be considered the way as malformed, only check for null is necessary.", "url": "https://github.com/opensearch-project/security/pull/560#discussion_r463182068", "createdAt": "2020-07-30T18:13:16Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auth/RolesInjector.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.auth;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.amazon.opendistroforelasticsearch.security.user.User;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.transport.TransportAddress;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+\n+import java.net.InetAddress;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * This is used to inject opendistro-roles into the request when there is no user involved, like periodic plugin\n+ * background jobs. The roles injection is done using thread-context at transport layer only. You can't inject\n+ * roles using REST api. Using this we can enforce fine-grained-access-control for the transport layer calls plugins make.\n+ *\n+ * Format for the injected string: user_name|role_1,role_2\n+ * User name is ignored. And roles are opendistro-roles.\n+ */\n+final public class RolesInjector {\n+    protected final Logger log = LogManager.getLogger(RolesInjector.class);\n+\n+    public RolesInjector() {\n+        //empty\n+    }\n+\n+    public Set<String> injectUserAndRoles(final ThreadContext ctx) {\n+\n+        if(log.isDebugEnabled()){\n+            log.debug(\"Injected role str: \"+ ctx.getTransient(ConfigConstants.OPENDISTRO_SECURITY_INJECTED_ROLES));\n+        }\n+        String injectedStr = ctx.getTransient(ConfigConstants.OPENDISTRO_SECURITY_INJECTED_ROLES);\n+        if (Strings.isNullOrEmpty(injectedStr)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9c0a0f5e0f50252819e63a591a35c98df9abc17"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE4MzA1MA==", "bodyText": "rename to injectedUserAndRoles", "url": "https://github.com/opensearch-project/security/pull/560#discussion_r463183050", "createdAt": "2020-07-30T18:14:55Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auth/RolesInjector.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.auth;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.amazon.opendistroforelasticsearch.security.user.User;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.transport.TransportAddress;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+\n+import java.net.InetAddress;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * This is used to inject opendistro-roles into the request when there is no user involved, like periodic plugin\n+ * background jobs. The roles injection is done using thread-context at transport layer only. You can't inject\n+ * roles using REST api. Using this we can enforce fine-grained-access-control for the transport layer calls plugins make.\n+ *\n+ * Format for the injected string: user_name|role_1,role_2\n+ * User name is ignored. And roles are opendistro-roles.\n+ */\n+final public class RolesInjector {\n+    protected final Logger log = LogManager.getLogger(RolesInjector.class);\n+\n+    public RolesInjector() {\n+        //empty\n+    }\n+\n+    public Set<String> injectUserAndRoles(final ThreadContext ctx) {\n+\n+        if(log.isDebugEnabled()){\n+            log.debug(\"Injected role str: \"+ ctx.getTransient(ConfigConstants.OPENDISTRO_SECURITY_INJECTED_ROLES));\n+        }\n+        String injectedStr = ctx.getTransient(ConfigConstants.OPENDISTRO_SECURITY_INJECTED_ROLES);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9c0a0f5e0f50252819e63a591a35c98df9abc17"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE4NDE0MA==", "bodyText": "Can the string be parsed once?", "url": "https://github.com/opensearch-project/security/pull/560#discussion_r463184140", "createdAt": "2020-07-30T18:16:55Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auth/RolesInjector.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.auth;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.amazon.opendistroforelasticsearch.security.user.User;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.transport.TransportAddress;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+\n+import java.net.InetAddress;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * This is used to inject opendistro-roles into the request when there is no user involved, like periodic plugin\n+ * background jobs. The roles injection is done using thread-context at transport layer only. You can't inject\n+ * roles using REST api. Using this we can enforce fine-grained-access-control for the transport layer calls plugins make.\n+ *\n+ * Format for the injected string: user_name|role_1,role_2\n+ * User name is ignored. And roles are opendistro-roles.\n+ */\n+final public class RolesInjector {\n+    protected final Logger log = LogManager.getLogger(RolesInjector.class);\n+\n+    public RolesInjector() {\n+        //empty\n+    }\n+\n+    public Set<String> injectUserAndRoles(final ThreadContext ctx) {\n+\n+        if(log.isDebugEnabled()){\n+            log.debug(\"Injected role str: \"+ ctx.getTransient(ConfigConstants.OPENDISTRO_SECURITY_INJECTED_ROLES));\n+        }\n+        String injectedStr = ctx.getTransient(ConfigConstants.OPENDISTRO_SECURITY_INJECTED_ROLES);\n+        if (Strings.isNullOrEmpty(injectedStr)) {\n+            return null;\n+        }\n+        User user = parseUser(injectedStr);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9c0a0f5e0f50252819e63a591a35c98df9abc17"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5Mjg1NQ==", "bodyText": "Use ImmutableSet.copyOf().", "url": "https://github.com/opensearch-project/security/pull/560#discussion_r463192855", "createdAt": "2020-07-30T18:32:54Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auth/RolesInjector.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.auth;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.amazon.opendistroforelasticsearch.security.user.User;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.transport.TransportAddress;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+\n+import java.net.InetAddress;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * This is used to inject opendistro-roles into the request when there is no user involved, like periodic plugin\n+ * background jobs. The roles injection is done using thread-context at transport layer only. You can't inject\n+ * roles using REST api. Using this we can enforce fine-grained-access-control for the transport layer calls plugins make.\n+ *\n+ * Format for the injected string: user_name|role_1,role_2\n+ * User name is ignored. And roles are opendistro-roles.\n+ */\n+final public class RolesInjector {\n+    protected final Logger log = LogManager.getLogger(RolesInjector.class);\n+\n+    public RolesInjector() {\n+        //empty\n+    }\n+\n+    public Set<String> injectUserAndRoles(final ThreadContext ctx) {\n+\n+        if(log.isDebugEnabled()){\n+            log.debug(\"Injected role str: \"+ ctx.getTransient(ConfigConstants.OPENDISTRO_SECURITY_INJECTED_ROLES));\n+        }\n+        String injectedStr = ctx.getTransient(ConfigConstants.OPENDISTRO_SECURITY_INJECTED_ROLES);\n+        if (Strings.isNullOrEmpty(injectedStr)) {\n+            return null;\n+        }\n+        User user = parseUser(injectedStr);\n+        Set<String> roles = parseRoles(injectedStr);\n+        if(user != null && roles != null) {\n+            addRemoteAddr(ctx);\n+            addUser(user, ctx);\n+        }\n+        return roles;\n+    }\n+\n+    private void addRemoteAddr(final ThreadContext threadContext) {\n+        if(threadContext.getTransient(ConfigConstants.OPENDISTRO_SECURITY_REMOTE_ADDRESS) != null)\n+            return;\n+\n+        threadContext.putTransient(ConfigConstants.OPENDISTRO_SECURITY_REMOTE_ADDRESS,\n+                new TransportAddress(InetAddress.getLoopbackAddress(), 9300));\n+    }\n+\n+    private void addUser(final User user, final ThreadContext threadContext) {\n+        if(threadContext.getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER) != null)\n+            return;\n+\n+        threadContext.putTransient(ConfigConstants.OPENDISTRO_SECURITY_USER, user);\n+    }\n+\n+    /*\n+     * Input string format: user|role_1,role2\n+     */\n+    private User parseUser(final String injectedStr) {\n+        String[] strs = injectedStr.split(\"\\\\|\");\n+        if (strs.length == 0) {\n+            log.error(\"Roles injected string malformed, could not extract parts. User string was '{}.'\" +\n+                    \" Roles injection failed.\", injectedStr);\n+            return null;\n+        }\n+        if (Strings.isNullOrEmpty(strs[0].trim())) {\n+            log.error(\"Username must not be null, injected string was '{}.' Roles injection failed.\", injectedStr);\n+            return null;\n+        }\n+        return new User(strs[0]);\n+    }\n+\n+    /*\n+     * Input string format: user|role_1,role2\n+     */\n+    private Set<String> parseRoles(final String injectedStr) {\n+        String[] strs = injectedStr.split(\"\\\\|\");\n+        if (strs.length == 1) {\n+            log.error(\"Roles injected string malformed, could not extract parts. User string was '{}.'\" +\n+                    \" Roles injection failed.\", injectedStr);\n+            return null;\n+        }\n+        if (Strings.isNullOrEmpty(strs[1].trim())) {\n+            log.error(\"Roles must not be null, injected string was '{}.' Roles injection failed.\", injectedStr);\n+            return null;\n+        }\n+        return new HashSet<>(Arrays.asList(strs[1].split(\",\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9c0a0f5e0f50252819e63a591a35c98df9abc17"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5NDUwNw==", "bodyText": "What if it is not a default port? Is it necessary to set remote address when roles are injected?", "url": "https://github.com/opensearch-project/security/pull/560#discussion_r463194507", "createdAt": "2020-07-30T18:36:03Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auth/RolesInjector.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.auth;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.amazon.opendistroforelasticsearch.security.user.User;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.transport.TransportAddress;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+\n+import java.net.InetAddress;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * This is used to inject opendistro-roles into the request when there is no user involved, like periodic plugin\n+ * background jobs. The roles injection is done using thread-context at transport layer only. You can't inject\n+ * roles using REST api. Using this we can enforce fine-grained-access-control for the transport layer calls plugins make.\n+ *\n+ * Format for the injected string: user_name|role_1,role_2\n+ * User name is ignored. And roles are opendistro-roles.\n+ */\n+final public class RolesInjector {\n+    protected final Logger log = LogManager.getLogger(RolesInjector.class);\n+\n+    public RolesInjector() {\n+        //empty\n+    }\n+\n+    public Set<String> injectUserAndRoles(final ThreadContext ctx) {\n+\n+        if(log.isDebugEnabled()){\n+            log.debug(\"Injected role str: \"+ ctx.getTransient(ConfigConstants.OPENDISTRO_SECURITY_INJECTED_ROLES));\n+        }\n+        String injectedStr = ctx.getTransient(ConfigConstants.OPENDISTRO_SECURITY_INJECTED_ROLES);\n+        if (Strings.isNullOrEmpty(injectedStr)) {\n+            return null;\n+        }\n+        User user = parseUser(injectedStr);\n+        Set<String> roles = parseRoles(injectedStr);\n+        if(user != null && roles != null) {\n+            addRemoteAddr(ctx);\n+            addUser(user, ctx);\n+        }\n+        return roles;\n+    }\n+\n+    private void addRemoteAddr(final ThreadContext threadContext) {\n+        if(threadContext.getTransient(ConfigConstants.OPENDISTRO_SECURITY_REMOTE_ADDRESS) != null)\n+            return;\n+\n+        threadContext.putTransient(ConfigConstants.OPENDISTRO_SECURITY_REMOTE_ADDRESS,\n+                new TransportAddress(InetAddress.getLoopbackAddress(), 9300));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9c0a0f5e0f50252819e63a591a35c98df9abc17"}, "originalPosition": 69}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "e9c0a0f5e0f50252819e63a591a35c98df9abc17", "author": {"user": {"login": "skkosuri-amzn", "name": "Sriram"}}, "url": "https://github.com/opensearch-project/security/commit/e9c0a0f5e0f50252819e63a591a35c98df9abc17", "committedDate": "2020-07-29T05:42:02Z", "message": "Removed OPENDISTRO_SECURITY_INJECTED_ROLES_ENABLED, its enabled all the time.With that Settings are not required, removed.Refactored RolesInjector.java. Moved RolesInjectorPlugin class to the RolesInjectorPlugin. Added exception message for roles injection missing permissions."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "e9c0a0f5e0f50252819e63a591a35c98df9abc17", "author": {"user": {"login": "skkosuri-amzn", "name": "Sriram"}}, "url": "https://github.com/opensearch-project/security/commit/e9c0a0f5e0f50252819e63a591a35c98df9abc17", "committedDate": "2020-07-29T05:42:02Z", "message": "Removed OPENDISTRO_SECURITY_INJECTED_ROLES_ENABLED, its enabled all the time.With that Settings are not required, removed.Refactored RolesInjector.java. Moved RolesInjectorPlugin class to the RolesInjectorPlugin. Added exception message for roles injection missing permissions."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31b265c8d5272333c16aeed1fa6968bf693fc2bb", "author": {"user": {"login": "skkosuri-amzn", "name": "Sriram"}}, "url": "https://github.com/opensearch-project/security/commit/31b265c8d5272333c16aeed1fa6968bf693fc2bb", "committedDate": "2020-08-05T15:11:54Z", "message": "merge from master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a96cb704f2cca8bd6ca935efc1ae936b9487a47", "author": {"user": {"login": "skkosuri-amzn", "name": "Sriram"}}, "url": "https://github.com/opensearch-project/security/commit/2a96cb704f2cca8bd6ca935efc1ae936b9487a47", "committedDate": "2020-08-05T15:22:14Z", "message": "refactor and removed remote-addr"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyNjk2MTgz", "url": "https://github.com/opensearch-project/security/pull/560#pullrequestreview-462696183", "createdAt": "2020-08-06T16:49:40Z", "commit": {"oid": "2a96cb704f2cca8bd6ca935efc1ae936b9487a47"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNjo0OTo0MVrOG871jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNzoyOTo0MVrOG89XVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU0ODEwOQ==", "bodyText": "nit: please use smart logging:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        log.debug(\"Injected roles: \"+ injectedUserAndRoles);\n          \n          \n            \n                        log.debug(\"Injected roles: {}\", injectedUserAndRoles);", "url": "https://github.com/opensearch-project/security/pull/560#discussion_r466548109", "createdAt": "2020-08-06T16:49:41Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auth/RolesInjector.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.auth;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.amazon.opendistroforelasticsearch.security.user.User;\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * This is used to inject opendistro-roles into the request when there is no user involved, like periodic plugin\n+ * background jobs. The roles injection is done using thread-context at transport layer only. You can't inject\n+ * roles using REST api. Using this we can enforce fine-grained-access-control for the transport layer calls plugins make.\n+ *\n+ * Format for the injected string: user_name|role_1,role_2\n+ * User name is ignored. And roles are opendistro-roles.\n+ */\n+final public class RolesInjector {\n+    protected final Logger log = LogManager.getLogger(RolesInjector.class);\n+\n+    public RolesInjector() {\n+        //empty\n+    }\n+\n+    public Set<String> injectUserAndRoles(final ThreadContext ctx) {\n+        final String injectedUserAndRoles = ctx.getTransient(ConfigConstants.OPENDISTRO_SECURITY_INJECTED_ROLES);\n+        if (injectedUserAndRoles == null) {\n+            return null;\n+        }\n+\n+        if(log.isDebugEnabled()){\n+            log.debug(\"Injected roles: \"+ injectedUserAndRoles);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a96cb704f2cca8bd6ca935efc1ae936b9487a47"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU0ODM3Mw==", "bodyText": "nit: the check is not necessary with smart logging.", "url": "https://github.com/opensearch-project/security/pull/560#discussion_r466548373", "createdAt": "2020-08-06T16:50:04Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auth/RolesInjector.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.auth;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.amazon.opendistroforelasticsearch.security.user.User;\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * This is used to inject opendistro-roles into the request when there is no user involved, like periodic plugin\n+ * background jobs. The roles injection is done using thread-context at transport layer only. You can't inject\n+ * roles using REST api. Using this we can enforce fine-grained-access-control for the transport layer calls plugins make.\n+ *\n+ * Format for the injected string: user_name|role_1,role_2\n+ * User name is ignored. And roles are opendistro-roles.\n+ */\n+final public class RolesInjector {\n+    protected final Logger log = LogManager.getLogger(RolesInjector.class);\n+\n+    public RolesInjector() {\n+        //empty\n+    }\n+\n+    public Set<String> injectUserAndRoles(final ThreadContext ctx) {\n+        final String injectedUserAndRoles = ctx.getTransient(ConfigConstants.OPENDISTRO_SECURITY_INJECTED_ROLES);\n+        if (injectedUserAndRoles == null) {\n+            return null;\n+        }\n+\n+        if(log.isDebugEnabled()){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a96cb704f2cca8bd6ca935efc1ae936b9487a47"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU3MTI0Ng==", "bodyText": "nit: trim() does not return null.", "url": "https://github.com/opensearch-project/security/pull/560#discussion_r466571246", "createdAt": "2020-08-06T17:26:22Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auth/RolesInjector.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.auth;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.amazon.opendistroforelasticsearch.security.user.User;\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * This is used to inject opendistro-roles into the request when there is no user involved, like periodic plugin\n+ * background jobs. The roles injection is done using thread-context at transport layer only. You can't inject\n+ * roles using REST api. Using this we can enforce fine-grained-access-control for the transport layer calls plugins make.\n+ *\n+ * Format for the injected string: user_name|role_1,role_2\n+ * User name is ignored. And roles are opendistro-roles.\n+ */\n+final public class RolesInjector {\n+    protected final Logger log = LogManager.getLogger(RolesInjector.class);\n+\n+    public RolesInjector() {\n+        //empty\n+    }\n+\n+    public Set<String> injectUserAndRoles(final ThreadContext ctx) {\n+        final String injectedUserAndRoles = ctx.getTransient(ConfigConstants.OPENDISTRO_SECURITY_INJECTED_ROLES);\n+        if (injectedUserAndRoles == null) {\n+            return null;\n+        }\n+\n+        if(log.isDebugEnabled()){\n+            log.debug(\"Injected roles: \"+ injectedUserAndRoles);\n+        }\n+\n+        String[] strs = injectedUserAndRoles.split(\"\\\\|\");\n+        if (strs.length == 0) {\n+            log.error(\"Roles injected string malformed, could not extract parts. User string was '{}.'\" +\n+                    \" Roles injection failed.\", injectedUserAndRoles);\n+            return null;\n+        }\n+        if (Strings.isNullOrEmpty(strs[0].trim())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a96cb704f2cca8bd6ca935efc1ae936b9487a47"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU3MjE5NA==", "bodyText": "nit: trim extra space in the error message.", "url": "https://github.com/opensearch-project/security/pull/560#discussion_r466572194", "createdAt": "2020-08-06T17:28:01Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/filter/OpenDistroSecurityFilter.java", "diffHunk": "@@ -281,8 +285,11 @@ public int order() {\n                 return;\n             } else {\n                 auditLog.logMissingPrivileges(action, request, task);\n-                log.debug(\"no permissions for {}\", pres.getMissingPrivileges());\n-                listener.onFailure(new ElasticsearchSecurityException(\"no permissions for \" + pres.getMissingPrivileges()+ \" and \"+user, RestStatus.FORBIDDEN));\n+                String err = (injectedRoles == null) ?\n+                        String.format(\"no permissions for %s and %s\" , pres.getMissingPrivileges(), user) :\n+                        String.format(\"no permissions for %s and associated roles %s \", pres.getMissingPrivileges(), injectedRoles);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a96cb704f2cca8bd6ca935efc1ae936b9487a47"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU3MzE0Mw==", "bodyText": "nit: add \"|\" use case.", "url": "https://github.com/opensearch-project/security/pull/560#discussion_r466573143", "createdAt": "2020-08-06T17:29:41Z", "author": {"login": "vrozov"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/auth/RolesInjectorTest.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.auth;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.amazon.opendistroforelasticsearch.security.user.User;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Set;\n+\n+import static com.amazon.opendistroforelasticsearch.security.support.ConfigConstants.OPENDISTRO_SECURITY_INJECTED_ROLES;\n+import static org.junit.Assert.assertEquals;\n+\n+\n+public class RolesInjectorTest {\n+\n+    @Test\n+    public void testNotInjected() {\n+        ThreadContext threadContext = new ThreadContext(Settings.EMPTY);\n+        RolesInjector rolesInjector = new RolesInjector();\n+        Set<String> roles = rolesInjector.injectUserAndRoles(threadContext);\n+        assertEquals(null, roles);\n+        User user = threadContext.getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n+        assertEquals(null, user);\n+    }\n+\n+    @Test\n+    public void testInjected() {\n+        ThreadContext threadContext = new ThreadContext(Settings.EMPTY);\n+        threadContext.putTransient(OPENDISTRO_SECURITY_INJECTED_ROLES, \"user1|role_1,role_2\");\n+\n+        RolesInjector rolesInjector = new RolesInjector();\n+        Set<String> roles = rolesInjector.injectUserAndRoles(threadContext);\n+\n+        User user = threadContext.getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n+        assertEquals(\"user1\", user.getName());\n+        assertEquals(0, user.getRoles().size());\n+        assertEquals(2, roles.size());\n+        assertEquals(true, roles.contains(\"role_1\"));\n+        assertEquals(true, roles.contains(\"role_2\"));\n+    }\n+\n+    @Test\n+    public void testCorruptedInjection() {\n+        List<String> corruptedStrs = Arrays.asList(\n+                \"invalid\",\n+                \"role_1,role_2\",\n+                \" | \",\n+                \"  \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a96cb704f2cca8bd6ca935efc1ae936b9487a47"}, "originalPosition": 66}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45da444dc52cef62e6edcc7649fdabaea8684cc9", "author": {"user": {"login": "skkosuri-amzn", "name": "Sriram"}}, "url": "https://github.com/opensearch-project/security/commit/45da444dc52cef62e6edcc7649fdabaea8684cc9", "committedDate": "2020-08-06T18:08:19Z", "message": "minor changes and cleanup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyNzY1ODc3", "url": "https://github.com/opensearch-project/security/pull/560#pullrequestreview-462765877", "createdAt": "2020-08-06T18:16:50Z", "commit": {"oid": "45da444dc52cef62e6edcc7649fdabaea8684cc9"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODoxNjo1MVrOG8-_BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODoxODozNFrOG8_Cmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU5OTY4NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Set<String> roles = new HashSet<>(ImmutableSet.copyOf(strs[1].split(\",\")));\n          \n          \n            \n                    Set<String> roles = ImmutableSet.copyOf(strs[1].split(\",\"));", "url": "https://github.com/opensearch-project/security/pull/560#discussion_r466599684", "createdAt": "2020-08-06T18:16:51Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auth/RolesInjector.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.auth;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.amazon.opendistroforelasticsearch.security.user.User;\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * This is used to inject opendistro-roles into the request when there is no user involved, like periodic plugin\n+ * background jobs. The roles injection is done using thread-context at transport layer only. You can't inject\n+ * roles using REST api. Using this we can enforce fine-grained-access-control for the transport layer calls plugins make.\n+ *\n+ * Format for the injected string: user_name|role_1,role_2\n+ * User name is ignored. And roles are opendistro-roles.\n+ */\n+final public class RolesInjector {\n+    protected final Logger log = LogManager.getLogger(RolesInjector.class);\n+\n+    public RolesInjector() {\n+        //empty\n+    }\n+\n+    public Set<String> injectUserAndRoles(final ThreadContext ctx) {\n+        final String injectedUserAndRoles = ctx.getTransient(ConfigConstants.OPENDISTRO_SECURITY_INJECTED_ROLES);\n+        if (injectedUserAndRoles == null) {\n+            return null;\n+        }\n+        log.debug(\"Injected roles: {}\", injectedUserAndRoles);\n+\n+        String[] strs = injectedUserAndRoles.split(\"\\\\|\");\n+        if (strs.length == 0) {\n+            log.error(\"Roles injected string malformed, could not extract parts. User string was '{}.'\" +\n+                    \" Roles injection failed.\", injectedUserAndRoles);\n+            return null;\n+        }\n+\n+        if (StringUtils.isEmpty(StringUtils.trim(strs[0]))) {\n+            log.error(\"Username must not be null, injected string was '{}.' Roles injection failed.\", injectedUserAndRoles);\n+            return null;\n+        }\n+        User user = new User(strs[0]);\n+\n+        if (strs.length < 2 || StringUtils.isEmpty(StringUtils.trim(strs[0]))) {\n+            log.error(\"Roles must not be null, injected string was '{}.' Roles injection failed.\", injectedUserAndRoles);\n+            return null;\n+        }\n+        Set<String> roles = new HashSet<>(ImmutableSet.copyOf(strs[1].split(\",\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45da444dc52cef62e6edcc7649fdabaea8684cc9"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwMDQwMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        log.error(\"Username must not be null, injected string was '{}.' Roles injection failed.\", injectedUserAndRoles);\n          \n          \n            \n                        log.error(\"Username must be provided, injected string was '{}.' Roles injection failed.\", injectedUserAndRoles);", "url": "https://github.com/opensearch-project/security/pull/560#discussion_r466600403", "createdAt": "2020-08-06T18:18:18Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auth/RolesInjector.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.auth;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.amazon.opendistroforelasticsearch.security.user.User;\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * This is used to inject opendistro-roles into the request when there is no user involved, like periodic plugin\n+ * background jobs. The roles injection is done using thread-context at transport layer only. You can't inject\n+ * roles using REST api. Using this we can enforce fine-grained-access-control for the transport layer calls plugins make.\n+ *\n+ * Format for the injected string: user_name|role_1,role_2\n+ * User name is ignored. And roles are opendistro-roles.\n+ */\n+final public class RolesInjector {\n+    protected final Logger log = LogManager.getLogger(RolesInjector.class);\n+\n+    public RolesInjector() {\n+        //empty\n+    }\n+\n+    public Set<String> injectUserAndRoles(final ThreadContext ctx) {\n+        final String injectedUserAndRoles = ctx.getTransient(ConfigConstants.OPENDISTRO_SECURITY_INJECTED_ROLES);\n+        if (injectedUserAndRoles == null) {\n+            return null;\n+        }\n+        log.debug(\"Injected roles: {}\", injectedUserAndRoles);\n+\n+        String[] strs = injectedUserAndRoles.split(\"\\\\|\");\n+        if (strs.length == 0) {\n+            log.error(\"Roles injected string malformed, could not extract parts. User string was '{}.'\" +\n+                    \" Roles injection failed.\", injectedUserAndRoles);\n+            return null;\n+        }\n+\n+        if (StringUtils.isEmpty(StringUtils.trim(strs[0]))) {\n+            log.error(\"Username must not be null, injected string was '{}.' Roles injection failed.\", injectedUserAndRoles);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45da444dc52cef62e6edcc7649fdabaea8684cc9"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwMDYwMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        log.error(\"Roles must not be null, injected string was '{}.' Roles injection failed.\", injectedUserAndRoles);\n          \n          \n            \n                        log.error(\"Roles must be provided, injected string was '{}.' Roles injection failed.\", injectedUserAndRoles);", "url": "https://github.com/opensearch-project/security/pull/560#discussion_r466600602", "createdAt": "2020-08-06T18:18:34Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auth/RolesInjector.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.auth;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.amazon.opendistroforelasticsearch.security.user.User;\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * This is used to inject opendistro-roles into the request when there is no user involved, like periodic plugin\n+ * background jobs. The roles injection is done using thread-context at transport layer only. You can't inject\n+ * roles using REST api. Using this we can enforce fine-grained-access-control for the transport layer calls plugins make.\n+ *\n+ * Format for the injected string: user_name|role_1,role_2\n+ * User name is ignored. And roles are opendistro-roles.\n+ */\n+final public class RolesInjector {\n+    protected final Logger log = LogManager.getLogger(RolesInjector.class);\n+\n+    public RolesInjector() {\n+        //empty\n+    }\n+\n+    public Set<String> injectUserAndRoles(final ThreadContext ctx) {\n+        final String injectedUserAndRoles = ctx.getTransient(ConfigConstants.OPENDISTRO_SECURITY_INJECTED_ROLES);\n+        if (injectedUserAndRoles == null) {\n+            return null;\n+        }\n+        log.debug(\"Injected roles: {}\", injectedUserAndRoles);\n+\n+        String[] strs = injectedUserAndRoles.split(\"\\\\|\");\n+        if (strs.length == 0) {\n+            log.error(\"Roles injected string malformed, could not extract parts. User string was '{}.'\" +\n+                    \" Roles injection failed.\", injectedUserAndRoles);\n+            return null;\n+        }\n+\n+        if (StringUtils.isEmpty(StringUtils.trim(strs[0]))) {\n+            log.error(\"Username must not be null, injected string was '{}.' Roles injection failed.\", injectedUserAndRoles);\n+            return null;\n+        }\n+        User user = new User(strs[0]);\n+\n+        if (strs.length < 2 || StringUtils.isEmpty(StringUtils.trim(strs[0]))) {\n+            log.error(\"Roles must not be null, injected string was '{}.' Roles injection failed.\", injectedUserAndRoles);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45da444dc52cef62e6edcc7649fdabaea8684cc9"}, "originalPosition": 66}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "295ee18063a8f014096d250728373c466da3d122", "author": {"user": {"login": "skkosuri-amzn", "name": "Sriram"}}, "url": "https://github.com/opensearch-project/security/commit/295ee18063a8f014096d250728373c466da3d122", "committedDate": "2020-08-06T18:24:15Z", "message": "minor changes and cleanup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyNzc3MTE1", "url": "https://github.com/opensearch-project/security/pull/560#pullrequestreview-462777115", "createdAt": "2020-08-06T18:33:21Z", "commit": {"oid": "295ee18063a8f014096d250728373c466da3d122"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyNzk2Mzky", "url": "https://github.com/opensearch-project/security/pull/560#pullrequestreview-462796392", "createdAt": "2020-08-06T19:01:25Z", "commit": {"oid": "295ee18063a8f014096d250728373c466da3d122"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxOTowMToyNVrOG9AcHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxOTowMToyNVrOG9AcHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYyMzUxOQ==", "bodyText": "nit: This can be injected via constructor ? or the class function can be made static as it has no state (other than logger) ?", "url": "https://github.com/opensearch-project/security/pull/560#discussion_r466623519", "createdAt": "2020-08-06T19:01:25Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/filter/OpenDistroSecurityFilter.java", "diffHunk": "@@ -112,6 +114,7 @@ public OpenDistroSecurityFilter(final Settings settings, final PrivilegesEvaluat\n         this.compatConfig = compatConfig;\n         this.indexResolverReplacer = indexResolverReplacer;\n         this.immutableIndicesMatcher = WildcardMatcher.from(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_IMMUTABLE_INDICES, Collections.emptyList()));\n+        this.rolesInjector = new RolesInjector();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "295ee18063a8f014096d250728373c466da3d122"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyODAyNTIw", "url": "https://github.com/opensearch-project/security/pull/560#pullrequestreview-462802520", "createdAt": "2020-08-06T19:10:36Z", "commit": {"oid": "295ee18063a8f014096d250728373c466da3d122"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2828, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}