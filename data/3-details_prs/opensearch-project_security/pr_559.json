{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4Mzg5MTQ5", "number": 559, "title": "Implement ability to configure readonly fields for audit configuration", "bodyText": "Issue #, if available:\nDescription of changes:\n\nAbility to configure readonly configs. This is provided in elasticsearch.yml. Customer must provide Jackson based path (if incorrect will fail on startup)\nAudit GET request returns \"_readonly\" field containing the configured readonly properties.\nPUT/PATCH requests 409 (conflict) if readonly params are updated in the request. Performs Jackson JSON checking to verify if fields are updated.\nSuper-admin can update/bypass the readonly fields\nChanged the underlying type of disabled categories from EnumSet to ImmutableSet so that ordering of arrays for JSON is maintained for comparison of fields during readonly check.\n\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-07-13T17:23:26Z", "url": "https://github.com/opensearch-project/security/pull/559", "merged": true, "mergeCommit": {"oid": "67fe5d2b28b28d28987830d4aa734c113c3425cd"}, "closed": true, "closedAt": "2020-07-20T23:39:00Z", "author": {"login": "sujithvm"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc0uqHrgFqTQ0Nzc2OTU0OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc26RxhAFqTQ1MjAyNzU2Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NzY5NTQ5", "url": "https://github.com/opensearch-project/security/pull/559#pullrequestreview-447769549", "createdAt": "2020-07-14T04:03:38Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNDowMzozOFrOGxDNgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNDo0ODoyM1rOGxD7vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA4NjAxNg==", "bodyText": "Can we generate this list dynamically instead of hard-coding it?\nThis is not flexible long-term in case if we add new configs.", "url": "https://github.com/opensearch-project/security/pull/559#discussion_r454086016", "createdAt": "2020-07-14T04:03:38Z", "author": {"login": "dinusX"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -383,4 +383,16 @@ public String toString() {\n                 .filter(settings::hasValue)\n                 .collect(Collectors.toSet());\n     }\n+\n+    public static final ImmutableSet<String> FIELD_PATHS = ImmutableSet.of(\n+            \"/enable\",\n+            \"/audit/enable_rest\", \"/audit/disabled_rest_categories\",\n+            \"/audit/enable_transport\", \"/audit/disabled_transport_categories\",\n+            \"/audit/resolve_bulk_requests\", \"/audit/log_request_body\", \"/audit/resolve_indices\", \"/audit/exclude_sensitive_headers\",\n+            \"/audit/ignore_users\", \"/audit/ignore_requests\",\n+            \"/compliance/enabled\",\n+            \"/compliance/external_config\", \"/compliance/internal_config\",\n+            \"/compliance/read_metadata_only\", \"/compliance/read_watched_fields\", \"/compliance/read_ignore_users\",\n+            \"/compliance/write_metadata_only\", \"/compliance/write_log_diffs\", \"/compliance/write_watched_indices\", \"/compliance/write_ignore_users\"\n+    );", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA4ODk3MQ==", "bodyText": "Should we fail or ignore with a message in case the path does not exist ?\nIn the future if you remove one of the existing paths, it might cause ES to not start anymore if this setting was not updated.", "url": "https://github.com/opensearch-project/security/pull/559#discussion_r454088971", "createdAt": "2020-07-14T04:15:12Z", "author": {"login": "dinusX"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -881,8 +881,12 @@ public Settings additionalSettings() {\n             settings.add(Setting.listSetting(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS, Collections.emptyList(), Function.identity(), Property.NodeScope)); //not filtered here\n             settings.add(Setting.boolSetting(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false, Property.NodeScope, Property.Filtered));\n             settings.add(Setting.boolSetting(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true, Property.NodeScope, Property.Filtered));\n-    \n-            \n+            settings.add(Setting.listSetting(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_READONLY_FIELDS, Collections.emptyList(), Function.identity(), (list) -> {\n+                if (!AuditConfig.FIELD_PATHS.containsAll(list)) {\n+                    throw new IllegalArgumentException(\"Invalid resource paths for read-only configs passed.\");\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA4OTU4NA==", "bodyText": "Can this by any chance override the existing list from the configuration?", "url": "https://github.com/opensearch-project/security/pull/559#discussion_r454089584", "createdAt": "2020-07-14T04:17:23Z", "author": {"login": "dinusX"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/AuditApiAction.java", "diffHunk": "@@ -153,6 +160,21 @@ protected void handlePut(final RestChannel channel, final RestRequest request, f\n         super.handlePut(channel, request, client, content);\n     }\n \n+    @Override\n+    protected void handleGet(final RestChannel channel, RestRequest request, Client client, final JsonNode content) {\n+        final SecurityDynamicConfiguration<?> configuration = load(getConfigName(), true);\n+        filter(configuration);\n+\n+        final String resourcename = getResourceName();\n+        if (!configuration.exists(resourcename)) {\n+            notFound(channel, \"Resource '\" + resourcename + \"' not found.\");\n+            return;\n+        }\n+\n+        configuration.putCObject(READONLY_FIELD, readonlyFields);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA5MDg2NQ==", "bodyText": "Let's use \"read-only\" (with dash) in all the messages for consistency.", "url": "https://github.com/opensearch-project/security/pull/559#discussion_r454090865", "createdAt": "2020-07-14T04:22:30Z", "author": {"login": "dinusX"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/PatchableResourceApiAction.java", "diffHunk": "@@ -143,6 +143,11 @@ private void handleSinglePatch(RestChannel channel, RestRequest request, Client\n             }\n         }\n \n+        if (isReadonlyFieldUpdated(existingResourceAsJsonNode, patchedResourceAsJsonNode)) {\n+            request.params().clear();\n+            conflict(channel, \"Attempted to update readonly property.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA5MzQxMA==", "bodyText": "Should we similarly test with admin certificate in the additional Patch methods ?", "url": "https://github.com/opensearch-project/security/pull/559#discussion_r454093410", "createdAt": "2020-07-14T04:32:00Z", "author": {"login": "dinusX"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/AuditApiActionTest.java", "diffHunk": "@@ -52,6 +69,177 @@ public void testInvalidPath() throws Exception {\n         assertEquals(HttpStatus.SC_METHOD_NOT_ALLOWED, response.getStatusCode());\n     }\n \n+    @Test\n+    public void testInvalidSetting() throws Exception {\n+        thrown.expect(IllegalArgumentException.class);\n+        thrown.expectMessage(\"Invalid resource paths for read-only configs passed.\");\n+\n+        final Settings settings = Settings.builder()\n+                .putList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_READONLY_FIELDS, \"/test\")\n+                .build();\n+        setupWithRestRoles(settings);\n+    }\n+\n+    @Test\n+    public void testDisabledCategoryOrder() throws Exception {\n+        setup();\n+\n+        final List<String> testCategories = ImmutableList.of(\"SSL_EXCEPTION\", \"AUTHENTICATED\", \"BAD_HEADERS\");\n+        final AuditConfig auditConfig = new AuditConfig(true, AuditConfig.Filter.from(\n+                ImmutableMap.of(\"disabled_rest_categories\", testCategories)\n+        ), ComplianceConfig.DEFAULT);\n+        final ObjectNode json = DefaultObjectMapper.objectMapper.valueToTree(auditConfig);\n+\n+        testPutRequest(json, HttpStatus.SC_OK, true);\n+        RestHelper.HttpResponse response = rh.executeGetRequest(ENDPOINT, adminCredsHeader);\n+        List<String> actual = Streams.stream(readTree(response.getBody()).at(\"/config/audit/disabled_rest_categories\").iterator())\n+                .map(JsonNode::textValue)\n+                .collect(Collectors.toList());\n+        assertEquals(testCategories, actual);\n+    }\n+\n+    @Test\n+    public void testReadonlyApi() throws Exception {\n+        final List<String> readonlyFields = ImmutableList.of(\"/audit/enable_rest\", \"/audit/disabled_rest_categories\", \"/audit/ignore_requests\", \"/compliance/read_watched_fields\");\n+\n+        final Settings settings = Settings.builder()\n+                .putList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_READONLY_FIELDS, readonlyFields)\n+                .build();\n+        setupWithRestRoles(settings);\n+        final ObjectMapper objectMapper = DefaultObjectMapper.objectMapper;\n+\n+        // test get\n+        RestHelper.HttpResponse response = rh.executeGetRequest(ENDPOINT, adminCredsHeader);\n+        assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n+        List<String> actual = Streams.stream(readTree(response.getBody()).get(\"_readonly\").iterator())\n+                .map(JsonNode::textValue)\n+                .collect(Collectors.toList());\n+        assertEquals(readonlyFields, actual);\n+\n+        // test config\n+        final AuditConfig auditConfig = AuditConfig.from(Settings.EMPTY);\n+\n+        // reset\n+        ObjectNode json = objectMapper.valueToTree(auditConfig);\n+        testPutRequest(json, HttpStatus.SC_OK, true);\n+        // change enable_rest readonly property\n+        testReadonlyBoolean(json, \"/audit\", \"enable_rest\");\n+\n+        // reset\n+        json = objectMapper.valueToTree(auditConfig);\n+        testPutRequest(json, HttpStatus.SC_OK, true);\n+        // change disabled_rest_categories readonly property\n+        testReadonlyCategories(json, \"/audit\", \"disabled_rest_categories\");\n+\n+        // reset\n+        json = objectMapper.valueToTree(auditConfig);\n+        testPutRequest(json, HttpStatus.SC_OK, true);\n+        // change ignore_requests readonly property\n+        testReadonlyList(json, \"/audit\", \"ignore_requests\");\n+\n+        // reset\n+        json = objectMapper.valueToTree(auditConfig);\n+        testPutRequest(json, HttpStatus.SC_OK, true);\n+        // change ignore_requests readonly property\n+        testReadonlyMap(json, \"/compliance\", \"read_watched_fields\");\n+    }\n+\n+    private void testPutRequest(final JsonNode json, final int expectedStatus, final boolean sendAdminCertificate, final Header... header) throws Exception {\n+        rh.sendAdminCertificate = sendAdminCertificate;\n+        RestHelper.HttpResponse response = rh.executePutRequest(CONFIG_ENDPOINT, writeValueAsString(json, false), header);\n+        assertEquals(expectedStatus, response.getStatusCode());\n+    }\n+\n+    private void testReadonlyBoolean(final ObjectNode json, final String config, final String resource) throws Exception {\n+        final String resourcePath = \"/config\" + config + \"/\" + resource;\n+        ((ObjectNode)json.at(config)).put(resource, true);\n+        testPutRequest(json, HttpStatus.SC_OK, true);\n+        ((ObjectNode)json.at(config)).put(resource, false);\n+        testPutRequest(json, HttpStatus.SC_CONFLICT, false, adminCredsHeader);\n+        testBooleanPatch(resourcePath, false, HttpStatus.SC_CONFLICT, adminCredsHeader);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA5NDY3NA==", "bodyText": "You can rewrite this method to reuse your new method \"testBooleanPatch\"", "url": "https://github.com/opensearch-project/security/pull/559#discussion_r454094674", "createdAt": "2020-07-14T04:36:43Z", "author": {"login": "dinusX"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/AuditApiActionTest.java", "diffHunk": "@@ -176,13 +359,21 @@ private void testPatchAction(final int expectedStatus, final Header... headers)\n         testBoolean(\"/config/compliance/external_config\", expectedStatus, headers);\n         testBoolean(\"/config/compliance/read_metadata_only\", expectedStatus, headers);\n         testList(\"/config/compliance/read_ignore_users\", ImmutableList.of(\"test-user-1\"), expectedStatus, headers);\n-        testMap(\"/config/compliance/read_watched_fields\", ImmutableMap.of(\"test-index-1\", Collections.singleton(\"test-field\")), expectedStatus, headers);\n+        testMap(\"/config/compliance/read_watched_fields\", ImmutableMap.of(\"test-index-1\", Collections.singletonList(\"test-field\")), expectedStatus, headers);\n         testBoolean(\"/config/compliance/write_metadata_only\", expectedStatus, headers);\n         testBoolean(\"/config/compliance/write_log_diffs\", expectedStatus, headers);\n         testList(\"/config/compliance/write_ignore_users\", ImmutableList.of(\"test-user-1\"), expectedStatus, headers);\n         testList(\"/config/compliance/write_watched_indices\", ImmutableList.of(\"test-index-1\"), expectedStatus, headers);\n     }\n \n+    private void testBooleanPatch(final String patchResource, final boolean value, final int expected, final Header... headers) throws Exception {\n+        RestHelper.HttpResponse response = rh.executePatchRequest(ENDPOINT, \"[{\\\"op\\\": \\\"add\\\",\\\"path\\\": \\\"\" + patchResource + \"\\\",\\\"value\\\": \" + value + \"}]\", headers);\n+        assertEquals(expected, response.getStatusCode());\n+        if (expected == HttpStatus.SC_OK) {\n+            assertTrue(readTree(rh.executeGetRequest(ENDPOINT, headers).getBody()).at(patchResource).asBoolean());\n+        }\n+    }\n+\n     private void testBoolean(final String patchResource, final int expected, final Header... headers) throws Exception {\n         // make true", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 259}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA5Nzg1NA==", "bodyText": "Should this be \"enable_rest\" or \"enable_rest_categories\" ?", "url": "https://github.com/opensearch-project/security/pull/559#discussion_r454097854", "createdAt": "2020-07-14T04:48:23Z", "author": {"login": "dinusX"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -383,4 +383,16 @@ public String toString() {\n                 .filter(settings::hasValue)\n                 .collect(Collectors.toSet());\n     }\n+\n+    public static final ImmutableSet<String> FIELD_PATHS = ImmutableSet.of(\n+            \"/enable\",\n+            \"/audit/enable_rest\", \"/audit/disabled_rest_categories\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMDAxNzU4", "url": "https://github.com/opensearch-project/security/pull/559#pullrequestreview-450001758", "createdAt": "2020-07-16T16:10:58Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNjoxMDo1OFrOGyyL4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNjoxMDo1OFrOGyyL4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkwNDIyNA==", "bodyText": "Use Sets.union().", "url": "https://github.com/opensearch-project/security/pull/559#discussion_r455904224", "createdAt": "2020-07-16T16:10:58Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -385,4 +384,11 @@ public String toString() {\n                 .filter(settings::hasValue)\n                 .collect(Collectors.toSet());\n     }\n+\n+    public static final Set<String> FIELD_PATHS = Stream.of(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 101}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMDY2OTA5", "url": "https://github.com/opensearch-project/security/pull/559#pullrequestreview-450066909", "createdAt": "2020-07-16T17:33:44Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNzozMzo0NFrOGy1UHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNzozMzo0NFrOGy1UHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk1NTQ4Ng==", "bodyText": "Which order is important here and why? Should not natural order be sufficient?", "url": "https://github.com/opensearch-project/security/pull/559#discussion_r455955486", "createdAt": "2020-07-16T17:33:44Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AuditCategory.java", "diffHunk": "@@ -22,19 +23,18 @@\n     COMPLIANCE_INTERNAL_CONFIG_READ,\n     COMPLIANCE_INTERNAL_CONFIG_WRITE;\n \n-    public static EnumSet<AuditCategory> parse(final Collection<String> categories) {\n-        EnumSet<AuditCategory> set = EnumSet.noneOf(AuditCategory.class);\n+    public static Set<AuditCategory> parse(final Collection<String> categories) {\n         if (categories.isEmpty())\n-            return set;\n+            return Collections.emptySet();\n \n         return categories\n                 .stream()\n                 .map(String::toUpperCase)\n                 .map(AuditCategory::valueOf)\n-                .collect(Collectors.toCollection(() -> set));\n+                .collect(ImmutableSet.toImmutableSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwOTU4ODQz", "url": "https://github.com/opensearch-project/security/pull/559#pullrequestreview-450958843", "createdAt": "2020-07-17T21:08:59Z", "commit": null, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwOTY3MDQ5", "url": "https://github.com/opensearch-project/security/pull/559#pullrequestreview-450967049", "createdAt": "2020-07-17T21:29:22Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMToyOToyMlrOGzhrvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMToyOToyMlrOGzhrvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY4MjQzMA==", "bodyText": "Had to resort to updating the test file in test resources as the resource file could not be injected into AuditApiAction for testing.\nIn tearDown clearing it.\nAttempted to change via Reflection to inject another value for the STATIC_RESOURCE but making tests to be unstable", "url": "https://github.com/opensearch-project/security/pull/559#discussion_r456682430", "createdAt": "2020-07-17T21:29:22Z", "author": {"login": "sujithvm"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/AuditApiActionTest.java", "diffHunk": "@@ -52,6 +81,177 @@ public void testInvalidPath() throws Exception {\n         assertEquals(HttpStatus.SC_METHOD_NOT_ALLOWED, response.getStatusCode());\n     }\n \n+    @Test\n+    public void testDisabledCategoryOrder() throws Exception {\n+        setup();\n+\n+        final List<String> testCategories = ImmutableList.of(\"SSL_EXCEPTION\", \"AUTHENTICATED\", \"BAD_HEADERS\");\n+        final AuditConfig auditConfig = new AuditConfig(true, AuditConfig.Filter.from(\n+                ImmutableMap.of(\"disabled_rest_categories\", testCategories)\n+        ), ComplianceConfig.DEFAULT);\n+        final ObjectNode json = DefaultObjectMapper.objectMapper.valueToTree(auditConfig);\n+\n+        testPutRequest(json, HttpStatus.SC_OK, true);\n+        RestHelper.HttpResponse response = rh.executeGetRequest(ENDPOINT, adminCredsHeader);\n+        List<String> actual = Streams.stream(readTree(response.getBody()).at(\"/config/audit/disabled_rest_categories\").iterator())\n+                .map(JsonNode::textValue)\n+                .collect(Collectors.toList());\n+        assertEquals(testCategories, actual);\n+    }\n+\n+    @Test\n+    public void testReadonlyApi() throws Exception {\n+        final List<String> readonlyFields = ImmutableList.of(\"/audit/enable_rest\", \"/audit/disabled_rest_categories\", \"/audit/ignore_requests\", \"/compliance/read_watched_fields\");\n+        updateStaticResourceReadonly(readonlyFields);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 88}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxMDA4NTcz", "url": "https://github.com/opensearch-project/security/pull/559#pullrequestreview-451008573", "createdAt": "2020-07-17T23:58:42Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMzo1ODo0MlrOGzj9Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMzo1ODo0MlrOGzj9Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcxOTY1OQ==", "bodyText": "Delegate conversion from JSON to isReadonlyFieldUpdated(), otherwise that conversion impacts all API actions even one that blindly return false.", "url": "https://github.com/opensearch-project/security/pull/559#discussion_r456719659", "createdAt": "2020-07-17T23:58:42Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/AbstractApiAction.java", "diffHunk": "@@ -201,6 +202,11 @@ protected void handlePut(final RestChannel channel, final RestRequest request, f\n \t\t\treturn;\n \t\t}\n \n+\t\tif (isReadonlyFieldUpdated(Utils.convertJsonToJackson(existingConfiguration, false).get(getResourceName()), content)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxMDA5OTE3", "url": "https://github.com/opensearch-project/security/pull/559#pullrequestreview-451009917", "createdAt": "2020-07-18T00:05:19Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQwMDowNToxOVrOGzkCVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQwMDowNToxOVrOGzkCVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcyMDk4Mg==", "bodyText": "reuse AuditConfig.Filter.FIELDS and ComplianceConfig.FIELDS.", "url": "https://github.com/opensearch-project/security/pull/559#discussion_r456720982", "createdAt": "2020-07-18T00:05:19Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -385,4 +383,10 @@ public String toString() {\n                 .filter(settings::hasValue)\n                 .collect(Collectors.toSet());\n     }\n+\n+    public static final Set<String> FIELD_PATHS = Sets.union(\n+            DefaultObjectMapper.getFields(AuditConfig.class, \"/\"),\n+            Sets.union(\n+                    DefaultObjectMapper.getFields(AuditConfig.Filter.class, \"/audit/\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 102}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxMDkwMjMw", "url": "https://github.com/opensearch-project/security/pull/559#pullrequestreview-451090230", "createdAt": "2020-07-19T00:37:33Z", "commit": null, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQwMDozODo1OVrOGzrdww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQwMDozODo1OVrOGzrdww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg0MjY5MQ==", "bodyText": "nit: IllegalArgumentException does not seem to be a good match", "url": "https://github.com/opensearch-project/security/pull/559#discussion_r456842691", "createdAt": "2020-07-19T00:38:59Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/AuditApiAction.java", "diffHunk": "@@ -126,6 +139,16 @@ public AuditApiAction(final Settings settings,\n         super(settings, configPath, controller, client, adminDNs, cl, cs, principalExtractor, privilegesEvaluator, threadPool, auditLog);\n         this.privilegesEvaluator = privilegesEvaluator;\n         this.threadContext = threadPool.getThreadContext();\n+        try {\n+            this.readonlyFields = DefaultObjectMapper.YAML_MAPPER\n+                    .readValue(this.getClass().getResourceAsStream(STATIC_RESOURCE), new TypeReference<Map<String, List<String>>>() {})\n+                    .get(READONLY_FIELD);\n+            if (!AuditConfig.FIELD_PATHS.containsAll(this.readonlyFields)) {\n+                throw new IllegalArgumentException(\"Invalid read-only field paths provided in file \" + STATIC_RESOURCE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de3976276b9eb7aaedecde00c6d9016a6b4e041e", "author": {"user": {"login": "sujithvm", "name": "Sujith Vadakkepat"}}, "url": "https://github.com/opensearch-project/security/commit/de3976276b9eb7aaedecde00c6d9016a6b4e041e", "committedDate": "2020-07-20T22:09:39Z", "message": "Implement ability to configure readonly fields for audit configuration"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMDI2MjQ1", "url": "https://github.com/opensearch-project/security/pull/559#pullrequestreview-452026245", "createdAt": "2020-07-20T23:27:57Z", "commit": {"oid": "de3976276b9eb7aaedecde00c6d9016a6b4e041e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMDI3NTY3", "url": "https://github.com/opensearch-project/security/pull/559#pullrequestreview-452027567", "createdAt": "2020-07-20T23:31:54Z", "commit": {"oid": "de3976276b9eb7aaedecde00c6d9016a6b4e041e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2822, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}