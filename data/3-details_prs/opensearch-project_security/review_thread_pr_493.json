{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4MDQxMTAz", "number": 493, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNjozNjoyN1rOEDBcaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMjo0ODozMFrOE8fwqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjA0ODQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/DefaultOpenDistroSecurityKeyStore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNjozNjoyN1rOGf1gLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNjozNjoyN1rOGf1gLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAzNTYyOA==", "bodyText": "Currently the changes made are only for PEM certs. Since we support jks certs as well, we will probably need to extend these changes to include JKS certs (link)", "url": "https://github.com/opensearch-project/security/pull/493#discussion_r436035628", "createdAt": "2020-06-05T16:36:27Z", "author": {"login": "debjanibnrj"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/DefaultOpenDistroSecurityKeyStore.java", "diffHunk": "@@ -17,6 +17,7 @@\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjA1MzM4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/DefaultOpenDistroSecurityKeyStore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNjozODoxNlrOGf1jgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNjozODoxNlrOGf1jgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAzNjQ4MA==", "bodyText": "Slight confused by mixedKeyUsageEnabled. Does that mean the cert has both clientAuth and serverAuth?", "url": "https://github.com/opensearch-project/security/pull/493#discussion_r436036480", "createdAt": "2020-06-05T16:38:16Z", "author": {"login": "debjanibnrj"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/DefaultOpenDistroSecurityKeyStore.java", "diffHunk": "@@ -346,26 +347,46 @@ public void initTransportSSLConfig() {\n                     \"Error while initializing transport SSL layer: \" + e.toString(), e);\n             }\n         } else if (rawPemCertFilePath != null) {\n-\n-            final String pemCertFilePath = resolve(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_PEMCERT_FILEPATH,\n-                true);\n-            final String pemKey = resolve(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_PEMKEY_FILEPATH, true);\n-            final String trustedCas = resolve(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_PEMTRUSTEDCAS_FILEPATH,\n-                true);\n+            SSLCertificateProps sslCertProps = new SSLCertificateProps(\n+                resolve(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_PEMCERT_FILEPATH, true),\n+                resolve(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_PEMKEY_FILEPATH, true),\n+                resolve(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_PEMTRUSTEDCAS_FILEPATH, true),\n+                settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_PEMKEY_PASSWORD)\n+            );\n+\n+            final boolean mixedKeyUsageEnabled = settings.getAsBoolean(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_MIXED_KEY_USAGE_ENABLED,\n+                SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_MIXED_KEY_USAGE_ENABLED_DEFAULT);\n+            // certificate allows clientAuth and serverAuth, use same cert\n+            SSLCertificateProps sslServerCertProps = sslCertProps;\n+            if (!mixedKeyUsageEnabled) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjA2Mzc3OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/test/AbstractSecurityUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNjo0MTozN1rOGf1p_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNjo0MTozN1rOGf1p_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAzODE0MQ==", "bodyText": "Why update this from true to false? It is set to false by default so that custom transport settings are used.", "url": "https://github.com/opensearch-project/security/pull/493#discussion_r436038141", "createdAt": "2020-06-05T16:41:37Z", "author": {"login": "debjanibnrj"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/test/AbstractSecurityUnitTest.java", "diffHunk": "@@ -258,7 +258,7 @@ protected NodeSettingsSupplier minimumSecuritySettingsSslOnly(Settings other) {\n         return new NodeSettingsSupplier() {\n             @Override\n             public Settings get(int i) {\n-                return minimumSecuritySettingsBuilder(i, true, false).put(other).build();\n+                return minimumSecuritySettingsBuilder(i, true, true).put(other).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjA5NjQxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/util/SSLConfigConstants.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNjo1MjoxOVrOGf1_Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNjo1MjoxOVrOGf1_Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA0MzUzNQ==", "bodyText": "It might be easier to create a separate list of settings for client certs so that when users configure using separate client and server certs they can specify it like this in elasticsearch.yml-\nopendistro_security.ssl.transport.mixed_key_usage_enabled: false\nopendistro_security.ssl.transport.server.pemkey_filepath: \"server-key.pem\"\nopendistro_security.ssl.transport.server.pemcert_filepath: \"server.pem\"\nopendistro_security.ssl.transport.server.pemtrustedcas_filepath: \"root-ca.pem\"\nopendistro_security.ssl.transport.client.pemkey_filepath: \"server-key.pem\"\nopendistro_security.ssl.transport.client.pemcert_filepath: \"server.pem\"\nopendistro_security.ssl.transport.client.pemtrustedcas_filepath: \"root-ca.pem\"\n\nIf they are using a certificate with both clientAuth and serverAuth, they default back to how it is right now -\nopendistro_security.ssl.transport.mixed_key_usage_enabled: false\nopendistro_security.ssl.transport.pemkey_filepath: \"node-key.pem\"\nopendistro_security.ssl.transport.pemcert_filepath: \"node.pem\"\nopendistro_security.ssl.transport.pemtrustedcas_filepath: \"root-ca.pem\"", "url": "https://github.com/opensearch-project/security/pull/493#discussion_r436043535", "createdAt": "2020-06-05T16:52:19Z", "author": {"login": "debjanibnrj"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/util/SSLConfigConstants.java", "diffHunk": "@@ -53,6 +53,12 @@\n     public static final String OPENDISTRO_SECURITY_SSL_TRANSPORT_PEMKEY_PASSWORD = \"opendistro_security.ssl.transport.pemkey_password\";\n     public static final String OPENDISTRO_SECURITY_SSL_TRANSPORT_PEMCERT_FILEPATH = \"opendistro_security.ssl.transport.pemcert_filepath\";\n     public static final String OPENDISTRO_SECURITY_SSL_TRANSPORT_PEMTRUSTEDCAS_FILEPATH = \"opendistro_security.ssl.transport.pemtrustedcas_filepath\";\n+    public static final String OPENDISTRO_SECURITY_SSL_TRANSPORT_MIXED_KEY_USAGE_ENABLED = \"opendistro_security.ssl.transport.mixed_key_usage_enabled\";\n+    public static final boolean OPENDISTRO_SECURITY_SSL_TRANSPORT_MIXED_KEY_USAGE_ENABLED_DEFAULT = true;\n+    public static final String OPENDISTRO_SECURITY_SSL_TRANSPORT_SERVER_PEMKEY_FILEPATH = \"opendistro_security.ssl.transport.server.pemkey_filepath\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjE2MDIxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/OpenDistroSecuritySSLPlugin.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNzoxNDowMlrOGf2ocw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNzoxNDowMlrOGf2ocw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA1NDEzMQ==", "bodyText": "it may be good to disable these settings if mixedKeyUsage is false. Eg -\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    settings.add(Setting.boolSetting(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_MIXED_KEY_USAGE_ENABLED, SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_MIXED_KEY_USAGE_ENABLED_DEFAULT, Property.NodeScope, Property.Filtered));\n          \n          \n            \n                if (!isMixedKeyUsageAllowed(settings)) {\n          \n          \n            \n                      settings.add(Setting.simpleString(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_SERVER_PEMCERT_FILEPATH, Property.NodeScope, Property.Filtered));\n          \n          \n            \n                      settings.add(Setting.simpleString(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_SERVER_PEMKEY_FILEPATH, Property.NodeScope, Property.Filtered));\n          \n          \n            \n                      settings.add(Setting.simpleString(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_SERVER_PEMKEY_PASSWORD, Property.NodeScope, Property.Filtered));\n          \n          \n            \n                      settings.add(Setting.simpleString(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_SERVER_PEMTRUSTEDCAS_FILEPATH, Property.NodeScope, Property.Filtered));\n          \n          \n            \n                    }\n          \n      \n    \n    \n  \n\nYou can create a helper function like -\n    private static boolean isMixedKeyUsageAllowed(final Settings settings) {\n        return settings.getAsBoolean(SSLConfigConstants. OPENDISTRO_SECURITY_SSL_TRANSPORT_MIXED_KEY_USAGE_ENABLED, false);\n    }", "url": "https://github.com/opensearch-project/security/pull/493#discussion_r436054131", "createdAt": "2020-06-05T17:14:02Z", "author": {"login": "debjanibnrj"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/OpenDistroSecuritySSLPlugin.java", "diffHunk": "@@ -329,6 +329,12 @@ public Object run() {\n         settings.add(Setting.simpleString(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_PEMKEY_PASSWORD, Property.NodeScope, Property.Filtered));\n         settings.add(Setting.simpleString(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_PEMTRUSTEDCAS_FILEPATH, Property.NodeScope, Property.Filtered));\n \n+        settings.add(Setting.boolSetting(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_MIXED_KEY_USAGE_ENABLED, SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_MIXED_KEY_USAGE_ENABLED_DEFAULT, Property.NodeScope, Property.Filtered));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NDE5MDkzOnYy", "diffSide": "RIGHT", "path": "src/test/resources/ssl/extended_key_usage/README.txt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMzowNDowN1rOHgP5DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMzowNDowN1rOHgP5DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3Njg0NQ==", "bodyText": "Thanks for adding this!", "url": "https://github.com/opensearch-project/security/pull/493#discussion_r503576845", "createdAt": "2020-10-12T23:04:07Z", "author": {"login": "nicot"}, "path": "src/test/resources/ssl/extended_key_usage/README.txt", "diffHunk": "@@ -0,0 +1,22 @@\n+# Commands to generate certs in this folder", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MzA3NjM4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/DefaultOpenDistroSecurityKeyStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMjoxODo0M1rOHmItpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMjoxODo0M1rOHmItpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc1MDY5Mw==", "bodyText": "Avoid wildcard imports.", "url": "https://github.com/opensearch-project/security/pull/493#discussion_r509750693", "createdAt": "2020-10-21T22:18:43Z", "author": {"login": "debjanibnrj"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/DefaultOpenDistroSecurityKeyStore.java", "diffHunk": "@@ -17,7 +17,7 @@\n \n package com.amazon.opendistroforelasticsearch.security.ssl;\n \n-import com.amazon.opendistroforelasticsearch.security.support.PemKeyReader;\n+import com.amazon.opendistroforelasticsearch.security.ssl.util.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NjUzMTA0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/OpenDistroSecuritySSLPlugin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNjoxOToxNFrOHmpxCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNjoxOToxNFrOHmpxCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI5MjIzNQ==", "bodyText": "If extendedKeyUsage is enabled then existing settings like SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_PEMCERT_FILEPATH will not be relevant. Can we add those to an else block?", "url": "https://github.com/opensearch-project/security/pull/493#discussion_r510292235", "createdAt": "2020-10-22T16:19:14Z", "author": {"login": "debjanibnrj"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/OpenDistroSecuritySSLPlugin.java", "diffHunk": "@@ -346,6 +350,24 @@ public Object run() {\n         settings.add(Setting.simpleString(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_PEMKEY_PASSWORD, Property.NodeScope, Property.Filtered));\n         settings.add(Setting.simpleString(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_PEMTRUSTEDCAS_FILEPATH, Property.NodeScope, Property.Filtered));\n \n+        settings.add(Setting.boolSetting(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_EXTENDED_KEY_USAGE_ENABLED, SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_EXTENDED_KEY_USAGE_ENABLED_DEFAULT, Property.NodeScope, Property.Filtered));\n+        if(extendedKeyUsageEnabled) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NjgxMDU2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/DefaultOpenDistroSecurityKeyStore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNzoyOTo0OFrOHmsfOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNzoyOTo0OFrOHmsfOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDMzNjgyNQ==", "bodyText": "Why add || extendedKeyUsageEnabled here?", "url": "https://github.com/opensearch-project/security/pull/493#discussion_r510336825", "createdAt": "2020-10-22T17:29:48Z", "author": {"login": "debjanibnrj"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/DefaultOpenDistroSecurityKeyStore.java", "diffHunk": "@@ -293,92 +283,121 @@ public void initTransportSSLConfig() {\n             final String truststorePassword = settings.get(\n                 SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_TRUSTSTORE_PASSWORD,\n                 SSLConfigConstants.DEFAULT_STORE_PASSWORD);\n-            final String truststoreAlias = settings\n-                .get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_TRUSTSTORE_ALIAS, null);\n-\n-            try {\n-\n-                final KeyStore ks = KeyStore.getInstance(keystoreType);\n-                ks.load(new FileInputStream(new File(keystoreFilePath)),\n-                    (keystorePassword == null || keystorePassword.length() == 0) ? null\n-                        : keystorePassword.toCharArray());\n \n-                final X509Certificate[] transportKeystoreCert = SSLCertificateHelper.exportServerCertChain(ks,\n-                    keystoreAlias);\n-                final PrivateKey transportKeystoreKey = SSLCertificateHelper.exportDecryptedKey(ks, keystoreAlias,\n-                    (keyPassword == null || keyPassword.length() == 0) ? null\n-                        : keyPassword.toCharArray());\n+            KeystoreProps keystoreProps = new KeystoreProps(\n+                keystoreFilePath, keystoreType, keystorePassword);\n \n-                if (transportKeystoreKey == null) {\n-                    throw new ElasticsearchException(\n-                        \"No key found in \" + keystoreFilePath + \" with alias \" + keystoreAlias);\n-                }\n-\n-                if (transportKeystoreCert == null || transportKeystoreCert.length == 0) {\n-                    throw new ElasticsearchException(\n-                        \"No certificates found in \" + keystoreFilePath + \" with alias \" + keystoreAlias);\n-                }\n-\n-                final KeyStore ts = KeyStore.getInstance(truststoreType);\n-                ts.load(new FileInputStream(new File(truststoreFilePath)),\n-                    (truststorePassword == null || truststorePassword.length() == 0) ? null\n-                        : truststorePassword.toCharArray());\n-\n-                final X509Certificate[] trustedTransportCertificates = SSLCertificateHelper\n-                    .exportRootCertificates(ts, truststoreAlias);\n+            KeystoreProps truststoreProps = new KeystoreProps(\n+                truststoreFilePath, truststoreType, truststorePassword);\n+            try {\n+                CertFromKeystore certFromKeystore;\n+                CertFromTruststore certFromTruststore;\n+                if (extendedKeyUsageEnabled) {\n+                    final String truststoreServerAlias = settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_SERVER_TRUSTSTORE_ALIAS,\n+                            null);\n+                    final String truststoreClientAlias = settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_CLIENT_TRUSTSTORE_ALIAS,\n+                            null);\n+                    final String keystoreServerAlias = settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_SERVER_KEYSTORE_ALIAS,\n+                            null);\n+                    final String keystoreClientAlias = settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_CLIENT_KEYSTORE_ALIAS,\n+                            null);\n+                    final String serverKeyPassword = settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_SERVER_KEYSTORE_KEYPASSWORD,\n+                            keystorePassword);\n+                    final String clientKeyPassword = settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_CLIENT_KEYSTORE_KEYPASSWORD,\n+                            keystorePassword);\n+\n+                    if (keystoreServerAlias == null || keystoreClientAlias == null || truststoreServerAlias == null || truststoreClientAlias == null)\n+                    {\n+                        throw new ElasticsearchException(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_SERVER_KEYSTORE_ALIAS + \", \"\n+                                + SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_CLIENT_KEYSTORE_ALIAS + \", \"\n+                                + SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_SERVER_TRUSTSTORE_ALIAS + \", \"\n+                                + SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_CLIENT_TRUSTSTORE_ALIAS\n+                                + \" must be set when \"\n+                                + SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_EXTENDED_KEY_USAGE_ENABLED + \" is true.\");\n+                    }\n \n-                if (trustedTransportCertificates == null || trustedTransportCertificates.length == 0) {\n-                    throw new ElasticsearchException(\"No truststore configured for server\");\n+                    certFromKeystore = new CertFromKeystore(\n+                            keystoreProps, keystoreServerAlias, keystoreClientAlias, serverKeyPassword, clientKeyPassword);\n+                    certFromTruststore = new CertFromTruststore(\n+                            truststoreProps, truststoreServerAlias, truststoreClientAlias);\n+                } else {\n+                    final String truststoreAlias = settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_TRUSTSTORE_ALIAS,\n+                            null);\n+                    final String keystoreAlias = settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_KEYSTORE_ALIAS,\n+                            null);\n+                    final String keyPassword = settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_KEYSTORE_KEYPASSWORD,\n+                            keystorePassword);\n+\n+                    certFromKeystore = new CertFromKeystore(keystoreProps, keystoreAlias, keyPassword);\n+                    certFromTruststore = new CertFromTruststore(truststoreProps, truststoreAlias);\n                 }\n \n-                validateNewCerts(transportCerts, transportKeystoreCert);\n-                transportServerSslContext = buildSSLServerContext(transportKeystoreKey, transportKeystoreCert,\n-                    trustedTransportCertificates, getEnabledSSLCiphers(this.sslTransportServerProvider, false),\n+                validateNewCerts(transportCerts, certFromKeystore.getCerts());\n+                transportServerSslContext = buildSSLServerContext(\n+                    certFromKeystore.getServerKey(), certFromKeystore.getServerCert(),\n+                    certFromTruststore.getServerTrustedCerts(), getEnabledSSLCiphers(this.sslTransportServerProvider, false),\n                     this.sslTransportServerProvider, ClientAuth.REQUIRE);\n-                transportClientSslContext = buildSSLClientContext(transportKeystoreKey, transportKeystoreCert,\n-                    trustedTransportCertificates, getEnabledSSLCiphers(sslTransportClientProvider, false),\n+                transportClientSslContext = buildSSLClientContext(\n+                    certFromKeystore.getClientKey(), certFromKeystore.getClientCert(),\n+                    certFromTruststore.getClientTrustedCerts(), getEnabledSSLCiphers(sslTransportClientProvider, false),\n                     sslTransportClientProvider);\n-                setTransportSSLCerts(transportKeystoreCert);\n-\n+                setTransportSSLCerts(certFromKeystore.getCerts());\n             } catch (final Exception e) {\n                 logExplanation(e);\n                 throw new ElasticsearchSecurityException(\n-                    \"Error while initializing transport SSL layer: \" + e.toString(), e);\n+                        \"Error while initializing transport SSL layer from PEM: \" + e.toString(), e);\n             }\n-        } else if (rawPemCertFilePath != null) {\n-\n-            final String pemCertFilePath = resolve(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_PEMCERT_FILEPATH,\n-                true);\n-            final String pemKey = resolve(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_PEMKEY_FILEPATH, true);\n-            final String trustedCas = resolve(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_PEMTRUSTEDCAS_FILEPATH,\n-                true);\n \n+        } else if (rawPemCertFilePath != null || extendedKeyUsageEnabled) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 175}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NjgzNjcwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/DefaultOpenDistroSecurityKeyStore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNzozNjozNFrOHmsvVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNzozNjozNFrOHmsvVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM0MDk0OA==", "bodyText": "Thanks for refactoring these into classes. Much cleaner approach. \ud83d\udc4d", "url": "https://github.com/opensearch-project/security/pull/493#discussion_r510340948", "createdAt": "2020-10-22T17:36:34Z", "author": {"login": "debjanibnrj"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/DefaultOpenDistroSecurityKeyStore.java", "diffHunk": "@@ -293,92 +283,121 @@ public void initTransportSSLConfig() {\n             final String truststorePassword = settings.get(\n                 SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_TRUSTSTORE_PASSWORD,\n                 SSLConfigConstants.DEFAULT_STORE_PASSWORD);\n-            final String truststoreAlias = settings\n-                .get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_TRUSTSTORE_ALIAS, null);\n-\n-            try {\n-\n-                final KeyStore ks = KeyStore.getInstance(keystoreType);\n-                ks.load(new FileInputStream(new File(keystoreFilePath)),\n-                    (keystorePassword == null || keystorePassword.length() == 0) ? null\n-                        : keystorePassword.toCharArray());\n \n-                final X509Certificate[] transportKeystoreCert = SSLCertificateHelper.exportServerCertChain(ks,\n-                    keystoreAlias);\n-                final PrivateKey transportKeystoreKey = SSLCertificateHelper.exportDecryptedKey(ks, keystoreAlias,\n-                    (keyPassword == null || keyPassword.length() == 0) ? null\n-                        : keyPassword.toCharArray());\n+            KeystoreProps keystoreProps = new KeystoreProps(\n+                keystoreFilePath, keystoreType, keystorePassword);\n \n-                if (transportKeystoreKey == null) {\n-                    throw new ElasticsearchException(\n-                        \"No key found in \" + keystoreFilePath + \" with alias \" + keystoreAlias);\n-                }\n-\n-                if (transportKeystoreCert == null || transportKeystoreCert.length == 0) {\n-                    throw new ElasticsearchException(\n-                        \"No certificates found in \" + keystoreFilePath + \" with alias \" + keystoreAlias);\n-                }\n-\n-                final KeyStore ts = KeyStore.getInstance(truststoreType);\n-                ts.load(new FileInputStream(new File(truststoreFilePath)),\n-                    (truststorePassword == null || truststorePassword.length() == 0) ? null\n-                        : truststorePassword.toCharArray());\n-\n-                final X509Certificate[] trustedTransportCertificates = SSLCertificateHelper\n-                    .exportRootCertificates(ts, truststoreAlias);\n+            KeystoreProps truststoreProps = new KeystoreProps(\n+                truststoreFilePath, truststoreType, truststorePassword);\n+            try {\n+                CertFromKeystore certFromKeystore;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5Njg0NDI1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/DefaultOpenDistroSecurityKeyStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNzozODo0MVrOHms0Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMjoxMzowMVrOH3ifxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM0MjIxOQ==", "bodyText": "Curious what the CertFromTrustore.Empty() does here?", "url": "https://github.com/opensearch-project/security/pull/493#discussion_r510342219", "createdAt": "2020-10-22T17:38:41Z", "author": {"login": "debjanibnrj"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/DefaultOpenDistroSecurityKeyStore.java", "diffHunk": "@@ -427,30 +446,12 @@ public void initHttpSSLConfig() {\n \n             try {\n \n-                final KeyStore ks = KeyStore.getInstance(keystoreType);\n-                try (FileInputStream fin = new FileInputStream(new File(keystoreFilePath))) {\n-                    ks.load(fin, (keystorePassword == null || keystorePassword.length() == 0) ? null\n-                        : keystorePassword.toCharArray());\n-                }\n+                KeystoreProps keystoreProps = new KeystoreProps(\n+                        keystoreFilePath, keystoreType, keystorePassword);\n \n-                final X509Certificate[] httpKeystoreCert = SSLCertificateHelper.exportServerCertChain(ks,\n-                    keystoreAlias);\n-                final PrivateKey httpKeystoreKey = SSLCertificateHelper.exportDecryptedKey(ks, keystoreAlias,\n-                    (keyPassword == null || keyPassword.length() == 0) ? null\n-                        : keyPassword.toCharArray());\n-\n-                if (httpKeystoreKey == null) {\n-                    throw new ElasticsearchException(\n-                        \"No key found in \" + keystoreFilePath + \" with alias \" + keystoreAlias);\n-                }\n-\n-                if (httpKeystoreCert == null || httpKeystoreCert.length == 0) {\n-                    throw new ElasticsearchException(\n-                        \"No certificates found in \" + keystoreFilePath + \" with alias \" + keystoreAlias);\n-                }\n-\n-                X509Certificate[] trustedHTTPCertificates = null;\n+                CertFromKeystore certFromKeystore = new CertFromKeystore(keystoreProps, keystoreAlias, keyPassword);\n \n+                CertFromTruststore certFromTruststore = CertFromTruststore.Empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 277}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk5ODkxOA==", "bodyText": "this is just a way to say that all properties of certFromTruststore are null.\nI could have initialed certFromTruststore to null, but then I'd need another if check when buildSSLServerContext below. Instead I just call certFromTruststore.getServerTrustedCerts() that can return null.\nPrevious code relies on the fact that trustedHTTPCertificates can be null.", "url": "https://github.com/opensearch-project/security/pull/493#discussion_r527998918", "createdAt": "2020-11-20T22:13:01Z", "author": {"login": "lavacat"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/DefaultOpenDistroSecurityKeyStore.java", "diffHunk": "@@ -427,30 +446,12 @@ public void initHttpSSLConfig() {\n \n             try {\n \n-                final KeyStore ks = KeyStore.getInstance(keystoreType);\n-                try (FileInputStream fin = new FileInputStream(new File(keystoreFilePath))) {\n-                    ks.load(fin, (keystorePassword == null || keystorePassword.length() == 0) ? null\n-                        : keystorePassword.toCharArray());\n-                }\n+                KeystoreProps keystoreProps = new KeystoreProps(\n+                        keystoreFilePath, keystoreType, keystorePassword);\n \n-                final X509Certificate[] httpKeystoreCert = SSLCertificateHelper.exportServerCertChain(ks,\n-                    keystoreAlias);\n-                final PrivateKey httpKeystoreKey = SSLCertificateHelper.exportDecryptedKey(ks, keystoreAlias,\n-                    (keyPassword == null || keyPassword.length() == 0) ? null\n-                        : keyPassword.toCharArray());\n-\n-                if (httpKeystoreKey == null) {\n-                    throw new ElasticsearchException(\n-                        \"No key found in \" + keystoreFilePath + \" with alias \" + keystoreAlias);\n-                }\n-\n-                if (httpKeystoreCert == null || httpKeystoreCert.length == 0) {\n-                    throw new ElasticsearchException(\n-                        \"No certificates found in \" + keystoreFilePath + \" with alias \" + keystoreAlias);\n-                }\n-\n-                X509Certificate[] trustedHTTPCertificates = null;\n+                CertFromKeystore certFromKeystore = new CertFromKeystore(keystoreProps, keystoreAlias, keyPassword);\n \n+                CertFromTruststore certFromTruststore = CertFromTruststore.Empty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM0MjIxOQ=="}, "originalCommit": null, "originalPosition": 277}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NjkzMTc1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/OpenDistroSecuritySSLPlugin.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxODowMjoxNFrOHmtrZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMjowNDo1MFrOH3iS0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM1NjMyNQ==", "bodyText": "Just for my knowledge, is it ever possible for Http Certs to use different client and server certs?", "url": "https://github.com/opensearch-project/security/pull/493#discussion_r510356325", "createdAt": "2020-10-22T18:02:14Z", "author": {"login": "debjanibnrj"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/OpenDistroSecuritySSLPlugin.java", "diffHunk": "@@ -346,6 +350,24 @@ public Object run() {\n         settings.add(Setting.simpleString(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_PEMKEY_PASSWORD, Property.NodeScope, Property.Filtered));\n         settings.add(Setting.simpleString(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_PEMTRUSTEDCAS_FILEPATH, Property.NodeScope, Property.Filtered));\n \n+        settings.add(Setting.boolSetting(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_EXTENDED_KEY_USAGE_ENABLED, SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_EXTENDED_KEY_USAGE_ENABLED_DEFAULT, Property.NodeScope, Property.Filtered));\n+        if(extendedKeyUsageEnabled) {\n+            settings.add(Setting.simpleString(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_SERVER_KEYSTORE_ALIAS, Property.NodeScope, Property.Filtered));\n+            settings.add(Setting.simpleString(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_CLIENT_KEYSTORE_ALIAS, Property.NodeScope, Property.Filtered));\n+            settings.add(Setting.simpleString(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_SERVER_TRUSTSTORE_ALIAS, Property.NodeScope, Property.Filtered));\n+            settings.add(Setting.simpleString(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_CLIENT_TRUSTSTORE_ALIAS, Property.NodeScope, Property.Filtered));\n+            settings.add(Setting.simpleString(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_SERVER_KEYSTORE_KEYPASSWORD, Property.NodeScope, Property.Filtered));\n+            settings.add(Setting.simpleString(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_CLIENT_KEYSTORE_KEYPASSWORD, Property.NodeScope, Property.Filtered));\n+\n+            settings.add(Setting.simpleString(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_SERVER_PEMCERT_FILEPATH, Property.NodeScope, Property.Filtered));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk5NTYwMQ==", "bodyText": "If I understand your question correctly, the answer is no.\nWe only buildSSLServerContext in initHttpSSLConfig, so if users want to use different client/server certs they can provide their server cert using current config options.", "url": "https://github.com/opensearch-project/security/pull/493#discussion_r527995601", "createdAt": "2020-11-20T22:04:50Z", "author": {"login": "lavacat"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/OpenDistroSecuritySSLPlugin.java", "diffHunk": "@@ -346,6 +350,24 @@ public Object run() {\n         settings.add(Setting.simpleString(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_PEMKEY_PASSWORD, Property.NodeScope, Property.Filtered));\n         settings.add(Setting.simpleString(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_PEMTRUSTEDCAS_FILEPATH, Property.NodeScope, Property.Filtered));\n \n+        settings.add(Setting.boolSetting(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_EXTENDED_KEY_USAGE_ENABLED, SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_EXTENDED_KEY_USAGE_ENABLED_DEFAULT, Property.NodeScope, Property.Filtered));\n+        if(extendedKeyUsageEnabled) {\n+            settings.add(Setting.simpleString(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_SERVER_KEYSTORE_ALIAS, Property.NodeScope, Property.Filtered));\n+            settings.add(Setting.simpleString(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_CLIENT_KEYSTORE_ALIAS, Property.NodeScope, Property.Filtered));\n+            settings.add(Setting.simpleString(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_SERVER_TRUSTSTORE_ALIAS, Property.NodeScope, Property.Filtered));\n+            settings.add(Setting.simpleString(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_CLIENT_TRUSTSTORE_ALIAS, Property.NodeScope, Property.Filtered));\n+            settings.add(Setting.simpleString(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_SERVER_KEYSTORE_KEYPASSWORD, Property.NodeScope, Property.Filtered));\n+            settings.add(Setting.simpleString(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_CLIENT_KEYSTORE_KEYPASSWORD, Property.NodeScope, Property.Filtered));\n+\n+            settings.add(Setting.simpleString(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_SERVER_PEMCERT_FILEPATH, Property.NodeScope, Property.Filtered));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM1NjMyNQ=="}, "originalCommit": null, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NjkzNDIxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/util/CertFromKeystore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxODowMjo1OVrOHmts8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxODowMjo1OVrOHmts8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM1NjcyMw==", "bodyText": "avoid wildcard imports", "url": "https://github.com/opensearch-project/security/pull/493#discussion_r510356723", "createdAt": "2020-10-22T18:02:59Z", "author": {"login": "debjanibnrj"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/util/CertFromKeystore.java", "diffHunk": "@@ -0,0 +1,113 @@\n+package com.amazon.opendistroforelasticsearch.security.ssl.util;\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.elasticsearch.ElasticsearchException;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.security.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NjkzNTAyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/util/CertFromKeystore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxODowMzoxMFrOHmttYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxODowMzoxMFrOHmttYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM1NjgzMg==", "bodyText": "nit: double ;", "url": "https://github.com/opensearch-project/security/pull/493#discussion_r510356832", "createdAt": "2020-10-22T18:03:10Z", "author": {"login": "debjanibnrj"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/util/CertFromKeystore.java", "diffHunk": "@@ -0,0 +1,113 @@\n+package com.amazon.opendistroforelasticsearch.security.ssl.util;\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.elasticsearch.ElasticsearchException;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.security.*;\n+import java.security.cert.CertificateException;\n+import java.security.cert.X509Certificate;\n+\n+public class CertFromKeystore {\n+\n+    private final KeystoreProps keystoreProps;\n+    private final String serverKeystoreAlias;\n+    private final String clientKeystoreAlias;\n+\n+    private PrivateKey serverKey;\n+    private X509Certificate[] serverCert;\n+    private final char[] serverKeyPassword;\n+\n+    private PrivateKey clientKey;\n+    private X509Certificate[] clientCert;\n+    private final char[] clientKeyPassword;\n+\n+    private X509Certificate[] loadedCerts;\n+\n+    public CertFromKeystore(KeystoreProps keystoreProps, String keystoreAlias, String keyPassword) throws CertificateException, NoSuchAlgorithmException, KeyStoreException, IOException, UnrecoverableKeyException {\n+        this.keystoreProps = keystoreProps;\n+        final KeyStore ks = keystoreProps.loadKeystore();;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjk5ODE2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/DefaultOpenDistroSecurityKeyStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxODowMDoxMVrOH4ZOrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNjoxNjozM1rOH5kmMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg5NTY2MA==", "bodyText": "nit: these are not PEM certificates.", "url": "https://github.com/opensearch-project/security/pull/493#discussion_r528895660", "createdAt": "2020-11-23T18:00:11Z", "author": {"login": "debjanibnrj"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/DefaultOpenDistroSecurityKeyStore.java", "diffHunk": "@@ -293,107 +294,135 @@ public void initTransportSSLConfig() {\n             final String truststorePassword = settings.get(\n                 SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_TRUSTSTORE_PASSWORD,\n                 SSLConfigConstants.DEFAULT_STORE_PASSWORD);\n-            final String truststoreAlias = settings\n-                .get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_TRUSTSTORE_ALIAS, null);\n-\n-            try {\n-\n-                final KeyStore ks = KeyStore.getInstance(keystoreType);\n-                ks.load(new FileInputStream(new File(keystoreFilePath)),\n-                    (keystorePassword == null || keystorePassword.length() == 0) ? null\n-                        : keystorePassword.toCharArray());\n-\n-                final X509Certificate[] transportKeystoreCert = SSLCertificateHelper.exportServerCertChain(ks,\n-                    keystoreAlias);\n-                final PrivateKey transportKeystoreKey = SSLCertificateHelper.exportDecryptedKey(ks, keystoreAlias,\n-                    (keyPassword == null || keyPassword.length() == 0) ? null\n-                        : keyPassword.toCharArray());\n \n-                if (transportKeystoreKey == null) {\n-                    throw new ElasticsearchException(\n-                        \"No key found in \" + keystoreFilePath + \" with alias \" + keystoreAlias);\n-                }\n-\n-                if (transportKeystoreCert == null || transportKeystoreCert.length == 0) {\n-                    throw new ElasticsearchException(\n-                        \"No certificates found in \" + keystoreFilePath + \" with alias \" + keystoreAlias);\n-                }\n+            KeystoreProps keystoreProps = new KeystoreProps(\n+                keystoreFilePath, keystoreType, keystorePassword);\n \n-                final KeyStore ts = KeyStore.getInstance(truststoreType);\n-                ts.load(new FileInputStream(new File(truststoreFilePath)),\n-                    (truststorePassword == null || truststorePassword.length() == 0) ? null\n-                        : truststorePassword.toCharArray());\n-\n-                final X509Certificate[] trustedTransportCertificates = SSLCertificateHelper\n-                    .exportRootCertificates(ts, truststoreAlias);\n+            KeystoreProps truststoreProps = new KeystoreProps(\n+                truststoreFilePath, truststoreType, truststorePassword);\n+            try {\n+                CertFromKeystore certFromKeystore;\n+                CertFromTruststore certFromTruststore;\n+                if (extendedKeyUsageEnabled) {\n+                    final String truststoreServerAlias = settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_SERVER_TRUSTSTORE_ALIAS,\n+                            null);\n+                    final String truststoreClientAlias = settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_CLIENT_TRUSTSTORE_ALIAS,\n+                            null);\n+                    final String keystoreServerAlias = settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_SERVER_KEYSTORE_ALIAS,\n+                            null);\n+                    final String keystoreClientAlias = settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_CLIENT_KEYSTORE_ALIAS,\n+                            null);\n+                    final String serverKeyPassword = settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_SERVER_KEYSTORE_KEYPASSWORD,\n+                            keystorePassword);\n+                    final String clientKeyPassword = settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_CLIENT_KEYSTORE_KEYPASSWORD,\n+                            keystorePassword);\n+\n+                    if (keystoreServerAlias == null || keystoreClientAlias == null || truststoreServerAlias == null || truststoreClientAlias == null)\n+                    {\n+                        throw new ElasticsearchException(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_SERVER_KEYSTORE_ALIAS + \", \"\n+                                + SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_CLIENT_KEYSTORE_ALIAS + \", \"\n+                                + SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_SERVER_TRUSTSTORE_ALIAS + \", \"\n+                                + SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_CLIENT_TRUSTSTORE_ALIAS\n+                                + \" must be set when \"\n+                                + SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_EXTENDED_KEY_USAGE_ENABLED + \" is true.\");\n+                    }\n \n-                if (trustedTransportCertificates == null || trustedTransportCertificates.length == 0) {\n-                    throw new ElasticsearchException(\"No truststore configured for server\");\n+                    certFromKeystore = new CertFromKeystore(\n+                            keystoreProps, keystoreServerAlias, keystoreClientAlias, serverKeyPassword, clientKeyPassword);\n+                    certFromTruststore = new CertFromTruststore(\n+                            truststoreProps, truststoreServerAlias, truststoreClientAlias);\n+                } else {\n+                    final String truststoreAlias = settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_TRUSTSTORE_ALIAS,\n+                            null);\n+                    final String keystoreAlias = settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_KEYSTORE_ALIAS,\n+                            null);\n+                    final String keyPassword = settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_KEYSTORE_KEYPASSWORD,\n+                            keystorePassword);\n+\n+                    certFromKeystore = new CertFromKeystore(keystoreProps, keystoreAlias, keyPassword);\n+                    certFromTruststore = new CertFromTruststore(truststoreProps, truststoreAlias);\n                 }\n \n-                validateNewCerts(transportCerts, transportKeystoreCert);\n-                transportServerSslContext = buildSSLServerContext(transportKeystoreKey, transportKeystoreCert,\n-                    trustedTransportCertificates, getEnabledSSLCiphers(this.sslTransportServerProvider, false),\n+                validateNewCerts(transportCerts, certFromKeystore.getCerts());\n+                transportServerSslContext = buildSSLServerContext(\n+                    certFromKeystore.getServerKey(), certFromKeystore.getServerCert(),\n+                    certFromTruststore.getServerTrustedCerts(), getEnabledSSLCiphers(this.sslTransportServerProvider, false),\n                     this.sslTransportServerProvider, ClientAuth.REQUIRE);\n-                transportClientSslContext = buildSSLClientContext(transportKeystoreKey, transportKeystoreCert,\n-                    trustedTransportCertificates, getEnabledSSLCiphers(sslTransportClientProvider, false),\n+                transportClientSslContext = buildSSLClientContext(\n+                    certFromKeystore.getClientKey(), certFromKeystore.getClientCert(),\n+                    certFromTruststore.getClientTrustedCerts(), getEnabledSSLCiphers(sslTransportClientProvider, false),\n                     sslTransportClientProvider);\n-                setTransportSSLCerts(transportKeystoreCert);\n-\n+                setTransportSSLCerts(certFromKeystore.getCerts());\n             } catch (final Exception e) {\n                 logExplanation(e);\n                 throw new ElasticsearchSecurityException(\n-                    \"Error while initializing transport SSL layer: \" + e.toString(), e);\n+                        \"Error while initializing transport SSL layer from PEM: \" + e.toString(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 194}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDEzMDQ4MQ==", "bodyText": "thanks for noticing, reverted back", "url": "https://github.com/opensearch-project/security/pull/493#discussion_r530130481", "createdAt": "2020-11-25T06:16:33Z", "author": {"login": "lavacat"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/DefaultOpenDistroSecurityKeyStore.java", "diffHunk": "@@ -293,107 +294,135 @@ public void initTransportSSLConfig() {\n             final String truststorePassword = settings.get(\n                 SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_TRUSTSTORE_PASSWORD,\n                 SSLConfigConstants.DEFAULT_STORE_PASSWORD);\n-            final String truststoreAlias = settings\n-                .get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_TRUSTSTORE_ALIAS, null);\n-\n-            try {\n-\n-                final KeyStore ks = KeyStore.getInstance(keystoreType);\n-                ks.load(new FileInputStream(new File(keystoreFilePath)),\n-                    (keystorePassword == null || keystorePassword.length() == 0) ? null\n-                        : keystorePassword.toCharArray());\n-\n-                final X509Certificate[] transportKeystoreCert = SSLCertificateHelper.exportServerCertChain(ks,\n-                    keystoreAlias);\n-                final PrivateKey transportKeystoreKey = SSLCertificateHelper.exportDecryptedKey(ks, keystoreAlias,\n-                    (keyPassword == null || keyPassword.length() == 0) ? null\n-                        : keyPassword.toCharArray());\n \n-                if (transportKeystoreKey == null) {\n-                    throw new ElasticsearchException(\n-                        \"No key found in \" + keystoreFilePath + \" with alias \" + keystoreAlias);\n-                }\n-\n-                if (transportKeystoreCert == null || transportKeystoreCert.length == 0) {\n-                    throw new ElasticsearchException(\n-                        \"No certificates found in \" + keystoreFilePath + \" with alias \" + keystoreAlias);\n-                }\n+            KeystoreProps keystoreProps = new KeystoreProps(\n+                keystoreFilePath, keystoreType, keystorePassword);\n \n-                final KeyStore ts = KeyStore.getInstance(truststoreType);\n-                ts.load(new FileInputStream(new File(truststoreFilePath)),\n-                    (truststorePassword == null || truststorePassword.length() == 0) ? null\n-                        : truststorePassword.toCharArray());\n-\n-                final X509Certificate[] trustedTransportCertificates = SSLCertificateHelper\n-                    .exportRootCertificates(ts, truststoreAlias);\n+            KeystoreProps truststoreProps = new KeystoreProps(\n+                truststoreFilePath, truststoreType, truststorePassword);\n+            try {\n+                CertFromKeystore certFromKeystore;\n+                CertFromTruststore certFromTruststore;\n+                if (extendedKeyUsageEnabled) {\n+                    final String truststoreServerAlias = settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_SERVER_TRUSTSTORE_ALIAS,\n+                            null);\n+                    final String truststoreClientAlias = settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_CLIENT_TRUSTSTORE_ALIAS,\n+                            null);\n+                    final String keystoreServerAlias = settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_SERVER_KEYSTORE_ALIAS,\n+                            null);\n+                    final String keystoreClientAlias = settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_CLIENT_KEYSTORE_ALIAS,\n+                            null);\n+                    final String serverKeyPassword = settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_SERVER_KEYSTORE_KEYPASSWORD,\n+                            keystorePassword);\n+                    final String clientKeyPassword = settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_CLIENT_KEYSTORE_KEYPASSWORD,\n+                            keystorePassword);\n+\n+                    if (keystoreServerAlias == null || keystoreClientAlias == null || truststoreServerAlias == null || truststoreClientAlias == null)\n+                    {\n+                        throw new ElasticsearchException(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_SERVER_KEYSTORE_ALIAS + \", \"\n+                                + SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_CLIENT_KEYSTORE_ALIAS + \", \"\n+                                + SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_SERVER_TRUSTSTORE_ALIAS + \", \"\n+                                + SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_CLIENT_TRUSTSTORE_ALIAS\n+                                + \" must be set when \"\n+                                + SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_EXTENDED_KEY_USAGE_ENABLED + \" is true.\");\n+                    }\n \n-                if (trustedTransportCertificates == null || trustedTransportCertificates.length == 0) {\n-                    throw new ElasticsearchException(\"No truststore configured for server\");\n+                    certFromKeystore = new CertFromKeystore(\n+                            keystoreProps, keystoreServerAlias, keystoreClientAlias, serverKeyPassword, clientKeyPassword);\n+                    certFromTruststore = new CertFromTruststore(\n+                            truststoreProps, truststoreServerAlias, truststoreClientAlias);\n+                } else {\n+                    final String truststoreAlias = settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_TRUSTSTORE_ALIAS,\n+                            null);\n+                    final String keystoreAlias = settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_KEYSTORE_ALIAS,\n+                            null);\n+                    final String keyPassword = settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_KEYSTORE_KEYPASSWORD,\n+                            keystorePassword);\n+\n+                    certFromKeystore = new CertFromKeystore(keystoreProps, keystoreAlias, keyPassword);\n+                    certFromTruststore = new CertFromTruststore(truststoreProps, truststoreAlias);\n                 }\n \n-                validateNewCerts(transportCerts, transportKeystoreCert);\n-                transportServerSslContext = buildSSLServerContext(transportKeystoreKey, transportKeystoreCert,\n-                    trustedTransportCertificates, getEnabledSSLCiphers(this.sslTransportServerProvider, false),\n+                validateNewCerts(transportCerts, certFromKeystore.getCerts());\n+                transportServerSslContext = buildSSLServerContext(\n+                    certFromKeystore.getServerKey(), certFromKeystore.getServerCert(),\n+                    certFromTruststore.getServerTrustedCerts(), getEnabledSSLCiphers(this.sslTransportServerProvider, false),\n                     this.sslTransportServerProvider, ClientAuth.REQUIRE);\n-                transportClientSslContext = buildSSLClientContext(transportKeystoreKey, transportKeystoreCert,\n-                    trustedTransportCertificates, getEnabledSSLCiphers(sslTransportClientProvider, false),\n+                transportClientSslContext = buildSSLClientContext(\n+                    certFromKeystore.getClientKey(), certFromKeystore.getClientCert(),\n+                    certFromTruststore.getClientTrustedCerts(), getEnabledSSLCiphers(sslTransportClientProvider, false),\n                     sslTransportClientProvider);\n-                setTransportSSLCerts(transportKeystoreCert);\n-\n+                setTransportSSLCerts(certFromKeystore.getCerts());\n             } catch (final Exception e) {\n                 logExplanation(e);\n                 throw new ElasticsearchSecurityException(\n-                    \"Error while initializing transport SSL layer: \" + e.toString(), e);\n+                        \"Error while initializing transport SSL layer from PEM: \" + e.toString(), e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg5NTY2MA=="}, "originalCommit": null, "originalPosition": 194}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODQzMTAwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/DefaultOpenDistroSecurityKeyStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMTo0OTowOVrOH4mwpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMTo0OTowOVrOH4mwpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTExNzM0OQ==", "bodyText": "Both arguments are currently for SERVER cert file path. It should be server and client both.\n          throw new ElasticsearchException(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_KEYSTORE_FILEPATH + \" or \"+ SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_SERVER_PEMCERT_FILEPATH + \" and \" + SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_CLIENT_PEMCERT_FILEPATH + \" must be set if transport ssl is requested.\");", "url": "https://github.com/opensearch-project/security/pull/493#discussion_r529117349", "createdAt": "2020-11-24T01:49:09Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/DefaultOpenDistroSecurityKeyStore.java", "diffHunk": "@@ -293,107 +294,135 @@ public void initTransportSSLConfig() {\n             final String truststorePassword = settings.get(\n                 SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_TRUSTSTORE_PASSWORD,\n                 SSLConfigConstants.DEFAULT_STORE_PASSWORD);\n-            final String truststoreAlias = settings\n-                .get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_TRUSTSTORE_ALIAS, null);\n-\n-            try {\n-\n-                final KeyStore ks = KeyStore.getInstance(keystoreType);\n-                ks.load(new FileInputStream(new File(keystoreFilePath)),\n-                    (keystorePassword == null || keystorePassword.length() == 0) ? null\n-                        : keystorePassword.toCharArray());\n-\n-                final X509Certificate[] transportKeystoreCert = SSLCertificateHelper.exportServerCertChain(ks,\n-                    keystoreAlias);\n-                final PrivateKey transportKeystoreKey = SSLCertificateHelper.exportDecryptedKey(ks, keystoreAlias,\n-                    (keyPassword == null || keyPassword.length() == 0) ? null\n-                        : keyPassword.toCharArray());\n \n-                if (transportKeystoreKey == null) {\n-                    throw new ElasticsearchException(\n-                        \"No key found in \" + keystoreFilePath + \" with alias \" + keystoreAlias);\n-                }\n-\n-                if (transportKeystoreCert == null || transportKeystoreCert.length == 0) {\n-                    throw new ElasticsearchException(\n-                        \"No certificates found in \" + keystoreFilePath + \" with alias \" + keystoreAlias);\n-                }\n+            KeystoreProps keystoreProps = new KeystoreProps(\n+                keystoreFilePath, keystoreType, keystorePassword);\n \n-                final KeyStore ts = KeyStore.getInstance(truststoreType);\n-                ts.load(new FileInputStream(new File(truststoreFilePath)),\n-                    (truststorePassword == null || truststorePassword.length() == 0) ? null\n-                        : truststorePassword.toCharArray());\n-\n-                final X509Certificate[] trustedTransportCertificates = SSLCertificateHelper\n-                    .exportRootCertificates(ts, truststoreAlias);\n+            KeystoreProps truststoreProps = new KeystoreProps(\n+                truststoreFilePath, truststoreType, truststorePassword);\n+            try {\n+                CertFromKeystore certFromKeystore;\n+                CertFromTruststore certFromTruststore;\n+                if (extendedKeyUsageEnabled) {\n+                    final String truststoreServerAlias = settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_SERVER_TRUSTSTORE_ALIAS,\n+                            null);\n+                    final String truststoreClientAlias = settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_CLIENT_TRUSTSTORE_ALIAS,\n+                            null);\n+                    final String keystoreServerAlias = settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_SERVER_KEYSTORE_ALIAS,\n+                            null);\n+                    final String keystoreClientAlias = settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_CLIENT_KEYSTORE_ALIAS,\n+                            null);\n+                    final String serverKeyPassword = settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_SERVER_KEYSTORE_KEYPASSWORD,\n+                            keystorePassword);\n+                    final String clientKeyPassword = settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_CLIENT_KEYSTORE_KEYPASSWORD,\n+                            keystorePassword);\n+\n+                    if (keystoreServerAlias == null || keystoreClientAlias == null || truststoreServerAlias == null || truststoreClientAlias == null)\n+                    {\n+                        throw new ElasticsearchException(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_SERVER_KEYSTORE_ALIAS + \", \"\n+                                + SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_CLIENT_KEYSTORE_ALIAS + \", \"\n+                                + SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_SERVER_TRUSTSTORE_ALIAS + \", \"\n+                                + SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_CLIENT_TRUSTSTORE_ALIAS\n+                                + \" must be set when \"\n+                                + SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_EXTENDED_KEY_USAGE_ENABLED + \" is true.\");\n+                    }\n \n-                if (trustedTransportCertificates == null || trustedTransportCertificates.length == 0) {\n-                    throw new ElasticsearchException(\"No truststore configured for server\");\n+                    certFromKeystore = new CertFromKeystore(\n+                            keystoreProps, keystoreServerAlias, keystoreClientAlias, serverKeyPassword, clientKeyPassword);\n+                    certFromTruststore = new CertFromTruststore(\n+                            truststoreProps, truststoreServerAlias, truststoreClientAlias);\n+                } else {\n+                    final String truststoreAlias = settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_TRUSTSTORE_ALIAS,\n+                            null);\n+                    final String keystoreAlias = settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_KEYSTORE_ALIAS,\n+                            null);\n+                    final String keyPassword = settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_KEYSTORE_KEYPASSWORD,\n+                            keystorePassword);\n+\n+                    certFromKeystore = new CertFromKeystore(keystoreProps, keystoreAlias, keyPassword);\n+                    certFromTruststore = new CertFromTruststore(truststoreProps, truststoreAlias);\n                 }\n \n-                validateNewCerts(transportCerts, transportKeystoreCert);\n-                transportServerSslContext = buildSSLServerContext(transportKeystoreKey, transportKeystoreCert,\n-                    trustedTransportCertificates, getEnabledSSLCiphers(this.sslTransportServerProvider, false),\n+                validateNewCerts(transportCerts, certFromKeystore.getCerts());\n+                transportServerSslContext = buildSSLServerContext(\n+                    certFromKeystore.getServerKey(), certFromKeystore.getServerCert(),\n+                    certFromTruststore.getServerTrustedCerts(), getEnabledSSLCiphers(this.sslTransportServerProvider, false),\n                     this.sslTransportServerProvider, ClientAuth.REQUIRE);\n-                transportClientSslContext = buildSSLClientContext(transportKeystoreKey, transportKeystoreCert,\n-                    trustedTransportCertificates, getEnabledSSLCiphers(sslTransportClientProvider, false),\n+                transportClientSslContext = buildSSLClientContext(\n+                    certFromKeystore.getClientKey(), certFromKeystore.getClientCert(),\n+                    certFromTruststore.getClientTrustedCerts(), getEnabledSSLCiphers(sslTransportClientProvider, false),\n                     sslTransportClientProvider);\n-                setTransportSSLCerts(transportKeystoreCert);\n-\n+                setTransportSSLCerts(certFromKeystore.getCerts());\n             } catch (final Exception e) {\n                 logExplanation(e);\n                 throw new ElasticsearchSecurityException(\n-                    \"Error while initializing transport SSL layer: \" + e.toString(), e);\n+                        \"Error while initializing transport SSL layer from PEM: \" + e.toString(), e);\n             }\n-        } else if (rawPemCertFilePath != null) {\n-\n-            final String pemCertFilePath = resolve(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_PEMCERT_FILEPATH,\n-                true);\n-            final String pemKey = resolve(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_PEMKEY_FILEPATH, true);\n-            final String trustedCas = resolve(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_PEMTRUSTEDCAS_FILEPATH,\n-                true);\n \n+        } else if (useRawFiles) {\n             try {\n-                final File pemKeyFile = new File(pemKey);\n-                final File pemCertFile = new File(pemCertFilePath);\n-                final File trustedCasFile = new File(trustedCas);\n-                final X509Certificate[] transportKeystoreCerts = new X509Certificate[]{ PemKeyReader.loadCertificateFromFile(pemCertFilePath) };\n-\n-                validateNewCerts(transportCerts, transportKeystoreCerts);\n-                transportServerSslContext = buildSSLServerContext(pemKeyFile, pemCertFile, trustedCasFile,\n-                    settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_PEMKEY_PASSWORD),\n-                    getEnabledSSLCiphers(this.sslTransportServerProvider, false),\n-                    this.sslTransportServerProvider, ClientAuth.REQUIRE);\n-                transportClientSslContext = buildSSLClientContext(pemKeyFile, pemCertFile, trustedCasFile,\n-                    settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_PEMKEY_PASSWORD),\n-                    getEnabledSSLCiphers(sslTransportClientProvider, false), sslTransportClientProvider);\n-                setTransportSSLCerts(transportKeystoreCerts);\n+                CertFromFile certFromFile;\n+                if (extendedKeyUsageEnabled) {\n+                    CertFileProps clientCertProps = new CertFileProps(\n+                            resolve(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_CLIENT_PEMCERT_FILEPATH, true),\n+                            resolve(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_CLIENT_PEMKEY_FILEPATH, true),\n+                            resolve(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_CLIENT_PEMTRUSTEDCAS_FILEPATH, true),\n+                            settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_CLIENT_PEMKEY_PASSWORD)\n+                    );\n+\n+                    CertFileProps serverCertProps = new CertFileProps(\n+                            resolve(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_SERVER_PEMCERT_FILEPATH, true),\n+                            resolve(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_SERVER_PEMKEY_FILEPATH, true),\n+                            resolve(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_SERVER_PEMTRUSTEDCAS_FILEPATH, true),\n+                            settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_SERVER_PEMKEY_PASSWORD)\n+                    );\n+\n+                    certFromFile = new CertFromFile(clientCertProps, serverCertProps);\n+                } else {\n+                    CertFileProps certProps = new CertFileProps(\n+                            resolve(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_PEMCERT_FILEPATH, true),\n+                            resolve(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_PEMKEY_FILEPATH, true),\n+                            resolve(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_PEMTRUSTEDCAS_FILEPATH, true),\n+                            settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_PEMKEY_PASSWORD)\n+                    );\n+                    certFromFile = new CertFromFile(certProps);\n+                }\n+\n+                validateNewCerts(transportCerts, certFromFile.getCerts());\n+                transportServerSslContext = buildSSLServerContext(\n+                        certFromFile.getServerPemKey(), certFromFile.getServerPemCert(), certFromFile.getServerTrustedCas(),\n+                        certFromFile.getServerPemKeyPassword(),\n+                        getEnabledSSLCiphers(this.sslTransportServerProvider, false),\n+                        this.sslTransportServerProvider, ClientAuth.REQUIRE);\n+                transportClientSslContext = buildSSLClientContext(\n+                        certFromFile.getClientPemKey(), certFromFile.getClientPemCert(), certFromFile.getClientTrustedCas(),\n+                        certFromFile.getClientPemKeyPassword(),\n+                        getEnabledSSLCiphers(sslTransportClientProvider, false), sslTransportClientProvider);\n+                setTransportSSLCerts(certFromFile.getCerts());\n \n             } catch (final Exception e) {\n                 logExplanation(e);\n                 throw new ElasticsearchSecurityException(\n-                    \"Error while initializing transport SSL layer from PEM: \" + e.toString(), e);\n+                        \"Error while initializing transport SSL layer from PEM: \" + e.toString(), e);\n             }\n-\n         } else {\n             throw new ElasticsearchException(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_KEYSTORE_FILEPATH + \" or \"\n-                + SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_PEMKEY_FILEPATH\n-                + \" must be set if transport ssl is requested.\");\n+                    + SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_SERVER_PEMCERT_FILEPATH + \" or \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 270}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODQ2MDQ4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/DefaultOpenDistroSecurityKeyStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMTo1NDo0MVrOH4nFgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMTo1NDo0MVrOH4nFgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTEyMjY4OQ==", "bodyText": "should we also check if CLIENT_PEMCERT_FILEPATH is present along with SERVER_PEMCERT_FILEPATH with 'AND' operation?\nBy checking both server and client, we do not set useRawFiles flag if one of is missing and throw exception in else part below on l:409\nfinal boolean useRawFiles = settings.hasValue(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_PEMCERT_FILEPATH) ||\n            (settings.hasValue(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_SERVER_PEMCERT_FILEPATH) && settings.hasValue(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_CLIENT_PEMCERT_FILEPATH));", "url": "https://github.com/opensearch-project/security/pull/493#discussion_r529122689", "createdAt": "2020-11-24T01:54:41Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/DefaultOpenDistroSecurityKeyStore.java", "diffHunk": "@@ -258,12 +259,19 @@ private void initSSLConfig() {\n      * Initializes certs used for node to node communication\n      */\n     public void initTransportSSLConfig() {\n-        final String rawKeyStoreFilePath = settings\n-            .get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_KEYSTORE_FILEPATH, null);\n-        final String rawPemCertFilePath = settings\n-            .get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_PEMCERT_FILEPATH, null);\n+        // when extendedKeyUsageEnabled and we use keyStore, client/server certs will be in the\n+        // same keyStore file\n+        // when extendedKeyUsageEnabled and we use rawFiles, client/server certs will be in\n+        // different files\n+        // That's why useRawFiles checks for extra location\n+        final boolean useKeyStore = settings.hasValue(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_KEYSTORE_FILEPATH);\n+        final boolean useRawFiles = settings.hasValue(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_PEMCERT_FILEPATH) ||\n+            settings.hasValue(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_SERVER_PEMCERT_FILEPATH);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODUyMzEwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/DefaultOpenDistroSecurityKeyStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMjowNjoyMFrOH4nwNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNjoyNToxOFrOH57EbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTEzMzYyMw==", "bodyText": "should we also check truststoreAlias and keystoreAlias for non-null and throw exception if anyone of it was set to null?", "url": "https://github.com/opensearch-project/security/pull/493#discussion_r529133623", "createdAt": "2020-11-24T02:06:20Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/DefaultOpenDistroSecurityKeyStore.java", "diffHunk": "@@ -293,107 +294,135 @@ public void initTransportSSLConfig() {\n             final String truststorePassword = settings.get(\n                 SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_TRUSTSTORE_PASSWORD,\n                 SSLConfigConstants.DEFAULT_STORE_PASSWORD);\n-            final String truststoreAlias = settings\n-                .get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_TRUSTSTORE_ALIAS, null);\n-\n-            try {\n-\n-                final KeyStore ks = KeyStore.getInstance(keystoreType);\n-                ks.load(new FileInputStream(new File(keystoreFilePath)),\n-                    (keystorePassword == null || keystorePassword.length() == 0) ? null\n-                        : keystorePassword.toCharArray());\n-\n-                final X509Certificate[] transportKeystoreCert = SSLCertificateHelper.exportServerCertChain(ks,\n-                    keystoreAlias);\n-                final PrivateKey transportKeystoreKey = SSLCertificateHelper.exportDecryptedKey(ks, keystoreAlias,\n-                    (keyPassword == null || keyPassword.length() == 0) ? null\n-                        : keyPassword.toCharArray());\n \n-                if (transportKeystoreKey == null) {\n-                    throw new ElasticsearchException(\n-                        \"No key found in \" + keystoreFilePath + \" with alias \" + keystoreAlias);\n-                }\n-\n-                if (transportKeystoreCert == null || transportKeystoreCert.length == 0) {\n-                    throw new ElasticsearchException(\n-                        \"No certificates found in \" + keystoreFilePath + \" with alias \" + keystoreAlias);\n-                }\n+            KeystoreProps keystoreProps = new KeystoreProps(\n+                keystoreFilePath, keystoreType, keystorePassword);\n \n-                final KeyStore ts = KeyStore.getInstance(truststoreType);\n-                ts.load(new FileInputStream(new File(truststoreFilePath)),\n-                    (truststorePassword == null || truststorePassword.length() == 0) ? null\n-                        : truststorePassword.toCharArray());\n-\n-                final X509Certificate[] trustedTransportCertificates = SSLCertificateHelper\n-                    .exportRootCertificates(ts, truststoreAlias);\n+            KeystoreProps truststoreProps = new KeystoreProps(\n+                truststoreFilePath, truststoreType, truststorePassword);\n+            try {\n+                CertFromKeystore certFromKeystore;\n+                CertFromTruststore certFromTruststore;\n+                if (extendedKeyUsageEnabled) {\n+                    final String truststoreServerAlias = settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_SERVER_TRUSTSTORE_ALIAS,\n+                            null);\n+                    final String truststoreClientAlias = settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_CLIENT_TRUSTSTORE_ALIAS,\n+                            null);\n+                    final String keystoreServerAlias = settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_SERVER_KEYSTORE_ALIAS,\n+                            null);\n+                    final String keystoreClientAlias = settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_CLIENT_KEYSTORE_ALIAS,\n+                            null);\n+                    final String serverKeyPassword = settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_SERVER_KEYSTORE_KEYPASSWORD,\n+                            keystorePassword);\n+                    final String clientKeyPassword = settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_CLIENT_KEYSTORE_KEYPASSWORD,\n+                            keystorePassword);\n+\n+                    if (keystoreServerAlias == null || keystoreClientAlias == null || truststoreServerAlias == null || truststoreClientAlias == null)\n+                    {\n+                        throw new ElasticsearchException(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_SERVER_KEYSTORE_ALIAS + \", \"\n+                                + SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_CLIENT_KEYSTORE_ALIAS + \", \"\n+                                + SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_SERVER_TRUSTSTORE_ALIAS + \", \"\n+                                + SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_CLIENT_TRUSTSTORE_ALIAS\n+                                + \" must be set when \"\n+                                + SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_EXTENDED_KEY_USAGE_ENABLED + \" is true.\");\n+                    }\n \n-                if (trustedTransportCertificates == null || trustedTransportCertificates.length == 0) {\n-                    throw new ElasticsearchException(\"No truststore configured for server\");\n+                    certFromKeystore = new CertFromKeystore(\n+                            keystoreProps, keystoreServerAlias, keystoreClientAlias, serverKeyPassword, clientKeyPassword);\n+                    certFromTruststore = new CertFromTruststore(\n+                            truststoreProps, truststoreServerAlias, truststoreClientAlias);\n+                } else {\n+                    final String truststoreAlias = settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_TRUSTSTORE_ALIAS,\n+                            null);\n+                    final String keystoreAlias = settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_KEYSTORE_ALIAS,\n+                            null);\n+                    final String keyPassword = settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_KEYSTORE_KEYPASSWORD,\n+                            keystorePassword);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ5ODY2OQ==", "bodyText": "If the alias isn't provided SSLCertificateHelper.exportServerCertChain will take the first one. I've made it required for extended key usage because server/client alias should be different at least for keystore.\nMade a comment and added a test", "url": "https://github.com/opensearch-project/security/pull/493#discussion_r530498669", "createdAt": "2020-11-25T16:25:18Z", "author": {"login": "lavacat"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/DefaultOpenDistroSecurityKeyStore.java", "diffHunk": "@@ -293,107 +294,135 @@ public void initTransportSSLConfig() {\n             final String truststorePassword = settings.get(\n                 SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_TRUSTSTORE_PASSWORD,\n                 SSLConfigConstants.DEFAULT_STORE_PASSWORD);\n-            final String truststoreAlias = settings\n-                .get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_TRUSTSTORE_ALIAS, null);\n-\n-            try {\n-\n-                final KeyStore ks = KeyStore.getInstance(keystoreType);\n-                ks.load(new FileInputStream(new File(keystoreFilePath)),\n-                    (keystorePassword == null || keystorePassword.length() == 0) ? null\n-                        : keystorePassword.toCharArray());\n-\n-                final X509Certificate[] transportKeystoreCert = SSLCertificateHelper.exportServerCertChain(ks,\n-                    keystoreAlias);\n-                final PrivateKey transportKeystoreKey = SSLCertificateHelper.exportDecryptedKey(ks, keystoreAlias,\n-                    (keyPassword == null || keyPassword.length() == 0) ? null\n-                        : keyPassword.toCharArray());\n \n-                if (transportKeystoreKey == null) {\n-                    throw new ElasticsearchException(\n-                        \"No key found in \" + keystoreFilePath + \" with alias \" + keystoreAlias);\n-                }\n-\n-                if (transportKeystoreCert == null || transportKeystoreCert.length == 0) {\n-                    throw new ElasticsearchException(\n-                        \"No certificates found in \" + keystoreFilePath + \" with alias \" + keystoreAlias);\n-                }\n+            KeystoreProps keystoreProps = new KeystoreProps(\n+                keystoreFilePath, keystoreType, keystorePassword);\n \n-                final KeyStore ts = KeyStore.getInstance(truststoreType);\n-                ts.load(new FileInputStream(new File(truststoreFilePath)),\n-                    (truststorePassword == null || truststorePassword.length() == 0) ? null\n-                        : truststorePassword.toCharArray());\n-\n-                final X509Certificate[] trustedTransportCertificates = SSLCertificateHelper\n-                    .exportRootCertificates(ts, truststoreAlias);\n+            KeystoreProps truststoreProps = new KeystoreProps(\n+                truststoreFilePath, truststoreType, truststorePassword);\n+            try {\n+                CertFromKeystore certFromKeystore;\n+                CertFromTruststore certFromTruststore;\n+                if (extendedKeyUsageEnabled) {\n+                    final String truststoreServerAlias = settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_SERVER_TRUSTSTORE_ALIAS,\n+                            null);\n+                    final String truststoreClientAlias = settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_CLIENT_TRUSTSTORE_ALIAS,\n+                            null);\n+                    final String keystoreServerAlias = settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_SERVER_KEYSTORE_ALIAS,\n+                            null);\n+                    final String keystoreClientAlias = settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_CLIENT_KEYSTORE_ALIAS,\n+                            null);\n+                    final String serverKeyPassword = settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_SERVER_KEYSTORE_KEYPASSWORD,\n+                            keystorePassword);\n+                    final String clientKeyPassword = settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_CLIENT_KEYSTORE_KEYPASSWORD,\n+                            keystorePassword);\n+\n+                    if (keystoreServerAlias == null || keystoreClientAlias == null || truststoreServerAlias == null || truststoreClientAlias == null)\n+                    {\n+                        throw new ElasticsearchException(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_SERVER_KEYSTORE_ALIAS + \", \"\n+                                + SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_CLIENT_KEYSTORE_ALIAS + \", \"\n+                                + SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_SERVER_TRUSTSTORE_ALIAS + \", \"\n+                                + SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_CLIENT_TRUSTSTORE_ALIAS\n+                                + \" must be set when \"\n+                                + SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_EXTENDED_KEY_USAGE_ENABLED + \" is true.\");\n+                    }\n \n-                if (trustedTransportCertificates == null || trustedTransportCertificates.length == 0) {\n-                    throw new ElasticsearchException(\"No truststore configured for server\");\n+                    certFromKeystore = new CertFromKeystore(\n+                            keystoreProps, keystoreServerAlias, keystoreClientAlias, serverKeyPassword, clientKeyPassword);\n+                    certFromTruststore = new CertFromTruststore(\n+                            truststoreProps, truststoreServerAlias, truststoreClientAlias);\n+                } else {\n+                    final String truststoreAlias = settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_TRUSTSTORE_ALIAS,\n+                            null);\n+                    final String keystoreAlias = settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_KEYSTORE_ALIAS,\n+                            null);\n+                    final String keyPassword = settings.get(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_KEYSTORE_KEYPASSWORD,\n+                            keystorePassword);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTEzMzYyMw=="}, "originalCommit": null, "originalPosition": 168}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODcwMzc5OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/ssl/util/CertFromFileTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMjo0ODozMFrOH4puNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMjo0ODozMFrOH4puNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE2NTg3OQ==", "bodyText": "Can you also add one negative test to verify if extended key is enabled but either server/client cert file or both are missing ?", "url": "https://github.com/opensearch-project/security/pull/493#discussion_r529165879", "createdAt": "2020-11-24T02:48:30Z", "author": {"login": "hardik-k-shah"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/ssl/util/CertFromFileTests.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package com.amazon.opendistroforelasticsearch.security.ssl.util;\n+\n+import com.amazon.opendistroforelasticsearch.security.test.helper.file.FileHelper;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class CertFromFileTests {\n+\n+    @Test\n+    public void testLoadSameCertForClientServerUsage() throws Exception {\n+      CertFileProps certProps = new CertFileProps(\n+          FileHelper.getAbsoluteFilePathFromClassPath(\"ssl/node-0.crt.pem\").toString(),\n+          FileHelper.getAbsoluteFilePathFromClassPath(\"ssl/node-0.key.pem\").toString(),\n+          FileHelper.getAbsoluteFilePathFromClassPath(\"ssl/root-ca.pem\").toString(),\n+          null);\n+\n+      CertFromFile cert = new CertFromFile(certProps);\n+\n+      Assert.assertEquals(1, cert.getCerts().length);\n+      Assert.assertNotNull(cert.getClientPemCert());\n+      Assert.assertNotNull(cert.getClientPemKey());\n+      Assert.assertNotNull(cert.getClientTrustedCas());\n+    }\n+\n+  @Test\n+  public void testLoadCertWithoutCA() throws Exception {\n+    CertFileProps certProps = new CertFileProps(\n+        FileHelper.getAbsoluteFilePathFromClassPath(\"ssl/node-0.crt.pem\").toString(),\n+        FileHelper.getAbsoluteFilePathFromClassPath(\"ssl/node-0.key.pem\").toString(),\n+        null,\n+        null);\n+\n+    CertFromFile cert = new CertFromFile(certProps);\n+\n+    Assert.assertNull(cert.getClientTrustedCas());\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2475, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}