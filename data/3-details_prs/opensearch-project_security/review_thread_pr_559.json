{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4Mzg5MTQ5", "number": 559, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNDowMzozOFrOEOF4xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQwMDozODo1OVrOEPzX7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMjExOTc1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNDowMzozOFrOGxDNgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNTo1MjoxOVrOGxaEIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA4NjAxNg==", "bodyText": "Can we generate this list dynamically instead of hard-coding it?\nThis is not flexible long-term in case if we add new configs.", "url": "https://github.com/opensearch-project/security/pull/559#discussion_r454086016", "createdAt": "2020-07-14T04:03:38Z", "author": {"login": "dinusX"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -383,4 +383,16 @@ public String toString() {\n                 .filter(settings::hasValue)\n                 .collect(Collectors.toSet());\n     }\n+\n+    public static final ImmutableSet<String> FIELD_PATHS = ImmutableSet.of(\n+            \"/enable\",\n+            \"/audit/enable_rest\", \"/audit/disabled_rest_categories\",\n+            \"/audit/enable_transport\", \"/audit/disabled_transport_categories\",\n+            \"/audit/resolve_bulk_requests\", \"/audit/log_request_body\", \"/audit/resolve_indices\", \"/audit/exclude_sensitive_headers\",\n+            \"/audit/ignore_users\", \"/audit/ignore_requests\",\n+            \"/compliance/enabled\",\n+            \"/compliance/external_config\", \"/compliance/internal_config\",\n+            \"/compliance/read_metadata_only\", \"/compliance/read_watched_fields\", \"/compliance/read_ignore_users\",\n+            \"/compliance/write_metadata_only\", \"/compliance/write_log_diffs\", \"/compliance/write_watched_indices\", \"/compliance/write_ignore_users\"\n+    );", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ2MDQ1MQ==", "bodyText": "Done. Using Jackson to find all the properties of a given class.", "url": "https://github.com/opensearch-project/security/pull/559#discussion_r454460451", "createdAt": "2020-07-14T15:52:19Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -383,4 +383,16 @@ public String toString() {\n                 .filter(settings::hasValue)\n                 .collect(Collectors.toSet());\n     }\n+\n+    public static final ImmutableSet<String> FIELD_PATHS = ImmutableSet.of(\n+            \"/enable\",\n+            \"/audit/enable_rest\", \"/audit/disabled_rest_categories\",\n+            \"/audit/enable_transport\", \"/audit/disabled_transport_categories\",\n+            \"/audit/resolve_bulk_requests\", \"/audit/log_request_body\", \"/audit/resolve_indices\", \"/audit/exclude_sensitive_headers\",\n+            \"/audit/ignore_users\", \"/audit/ignore_requests\",\n+            \"/compliance/enabled\",\n+            \"/compliance/external_config\", \"/compliance/internal_config\",\n+            \"/compliance/read_metadata_only\", \"/compliance/read_watched_fields\", \"/compliance/read_ignore_users\",\n+            \"/compliance/write_metadata_only\", \"/compliance/write_log_diffs\", \"/compliance/write_watched_indices\", \"/compliance/write_ignore_users\"\n+    );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA4NjAxNg=="}, "originalCommit": null, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMjEzOTM0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNDoxNToxMlrOGxDZCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNToyNjoxOVrOGxY8UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA4ODk3MQ==", "bodyText": "Should we fail or ignore with a message in case the path does not exist ?\nIn the future if you remove one of the existing paths, it might cause ES to not start anymore if this setting was not updated.", "url": "https://github.com/opensearch-project/security/pull/559#discussion_r454088971", "createdAt": "2020-07-14T04:15:12Z", "author": {"login": "dinusX"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -881,8 +881,12 @@ public Settings additionalSettings() {\n             settings.add(Setting.listSetting(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS, Collections.emptyList(), Function.identity(), Property.NodeScope)); //not filtered here\n             settings.add(Setting.boolSetting(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false, Property.NodeScope, Property.Filtered));\n             settings.add(Setting.boolSetting(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true, Property.NodeScope, Property.Filtered));\n-    \n-            \n+            settings.add(Setting.listSetting(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_READONLY_FIELDS, Collections.emptyList(), Function.identity(), (list) -> {\n+                if (!AuditConfig.FIELD_PATHS.containsAll(list)) {\n+                    throw new IllegalArgumentException(\"Invalid resource paths for read-only configs passed.\");\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ0MjA2NA==", "bodyText": "I think it is better to fail.\nThe fields are updated to dynamically fetch all valid fields now. If customer has configured something wrong, then customers may ignore message and wonder why it is not working correctly.\nIf some path is completely removed in the future, then it will force user to migrate which is desirable IMO.\nAny thoughts ?", "url": "https://github.com/opensearch-project/security/pull/559#discussion_r454442064", "createdAt": "2020-07-14T15:26:19Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -881,8 +881,12 @@ public Settings additionalSettings() {\n             settings.add(Setting.listSetting(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS, Collections.emptyList(), Function.identity(), Property.NodeScope)); //not filtered here\n             settings.add(Setting.boolSetting(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false, Property.NodeScope, Property.Filtered));\n             settings.add(Setting.boolSetting(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true, Property.NodeScope, Property.Filtered));\n-    \n-            \n+            settings.add(Setting.listSetting(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_READONLY_FIELDS, Collections.emptyList(), Function.identity(), (list) -> {\n+                if (!AuditConfig.FIELD_PATHS.containsAll(list)) {\n+                    throw new IllegalArgumentException(\"Invalid resource paths for read-only configs passed.\");\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA4ODk3MQ=="}, "originalCommit": null, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMjE0MzY5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/AuditApiAction.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNDoxNzoyM1rOGxDbcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQwMTozNzoyM1rOGzky0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA4OTU4NA==", "bodyText": "Can this by any chance override the existing list from the configuration?", "url": "https://github.com/opensearch-project/security/pull/559#discussion_r454089584", "createdAt": "2020-07-14T04:17:23Z", "author": {"login": "dinusX"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/AuditApiAction.java", "diffHunk": "@@ -153,6 +160,21 @@ protected void handlePut(final RestChannel channel, final RestRequest request, f\n         super.handlePut(channel, request, client, content);\n     }\n \n+    @Override\n+    protected void handleGet(final RestChannel channel, RestRequest request, Client client, final JsonNode content) {\n+        final SecurityDynamicConfiguration<?> configuration = load(getConfigName(), true);\n+        filter(configuration);\n+\n+        final String resourcename = getResourceName();\n+        if (!configuration.exists(resourcename)) {\n+            notFound(channel, \"Resource '\" + resourcename + \"' not found.\");\n+            return;\n+        }\n+\n+        configuration.putCObject(READONLY_FIELD, readonlyFields);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQzNDI0Mg==", "bodyText": "No. This will not override existing list in configuration. This is not stored in the index. Just added in the GET response. load(getConfigName(), true) will return a new object with configuration from index.", "url": "https://github.com/opensearch-project/security/pull/559#discussion_r454434242", "createdAt": "2020-07-14T15:15:40Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/AuditApiAction.java", "diffHunk": "@@ -153,6 +160,21 @@ protected void handlePut(final RestChannel channel, final RestRequest request, f\n         super.handlePut(channel, request, client, content);\n     }\n \n+    @Override\n+    protected void handleGet(final RestChannel channel, RestRequest request, Client client, final JsonNode content) {\n+        final SecurityDynamicConfiguration<?> configuration = load(getConfigName(), true);\n+        filter(configuration);\n+\n+        final String resourcename = getResourceName();\n+        if (!configuration.exists(resourcename)) {\n+            notFound(channel, \"Resource '\" + resourcename + \"' not found.\");\n+            return;\n+        }\n+\n+        configuration.putCObject(READONLY_FIELD, readonlyFields);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA4OTU4NA=="}, "originalCommit": null, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk0NjY3MA==", "bodyText": "Can it be part of the index? Why is it part of elasticsearch.yml?", "url": "https://github.com/opensearch-project/security/pull/559#discussion_r455946670", "createdAt": "2020-07-16T17:19:00Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/AuditApiAction.java", "diffHunk": "@@ -153,6 +160,21 @@ protected void handlePut(final RestChannel channel, final RestRequest request, f\n         super.handlePut(channel, request, client, content);\n     }\n \n+    @Override\n+    protected void handleGet(final RestChannel channel, RestRequest request, Client client, final JsonNode content) {\n+        final SecurityDynamicConfiguration<?> configuration = load(getConfigName(), true);\n+        filter(configuration);\n+\n+        final String resourcename = getResourceName();\n+        if (!configuration.exists(resourcename)) {\n+            notFound(channel, \"Resource '\" + resourcename + \"' not found.\");\n+            return;\n+        }\n+\n+        configuration.putCObject(READONLY_FIELD, readonlyFields);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA4OTU4NA=="}, "originalCommit": null, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk4Mjc2Mg==", "bodyText": "Mainly because of the following reasons:\n\nConfigs need same types for keys. Cannot have different implementing classes for keys in a configuration. For eg: internalusers all the keys are of same implementing type.\nAdmins also cannot change the readonly properties. Super-admin can bypass them. Not likely these settings are going to be changed often once deployed.\nConsidered storing in \"_meta\" of the document but we currently do expose APIs to update them. If at all user, user wants to change the readonly fields, then using super-admin we must replace the entire document after fetching the current configuration instead of updating in elasticsearch.yml (and doing a rolling restart).\n_meta is not available in 6.x versions.\n\nLet me know your thoughts", "url": "https://github.com/opensearch-project/security/pull/559#discussion_r455982762", "createdAt": "2020-07-16T18:19:05Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/AuditApiAction.java", "diffHunk": "@@ -153,6 +160,21 @@ protected void handlePut(final RestChannel channel, final RestRequest request, f\n         super.handlePut(channel, request, client, content);\n     }\n \n+    @Override\n+    protected void handleGet(final RestChannel channel, RestRequest request, Client client, final JsonNode content) {\n+        final SecurityDynamicConfiguration<?> configuration = load(getConfigName(), true);\n+        filter(configuration);\n+\n+        final String resourcename = getResourceName();\n+        if (!configuration.exists(resourcename)) {\n+            notFound(channel, \"Resource '\" + resourcename + \"' not found.\");\n+            return;\n+        }\n+\n+        configuration.putCObject(READONLY_FIELD, readonlyFields);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA4OTU4NA=="}, "originalCommit": null, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjczMzM5Mg==", "bodyText": "Storing it in static_audit.yml resource file", "url": "https://github.com/opensearch-project/security/pull/559#discussion_r456733392", "createdAt": "2020-07-18T01:37:23Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/AuditApiAction.java", "diffHunk": "@@ -153,6 +160,21 @@ protected void handlePut(final RestChannel channel, final RestRequest request, f\n         super.handlePut(channel, request, client, content);\n     }\n \n+    @Override\n+    protected void handleGet(final RestChannel channel, RestRequest request, Client client, final JsonNode content) {\n+        final SecurityDynamicConfiguration<?> configuration = load(getConfigName(), true);\n+        filter(configuration);\n+\n+        final String resourcename = getResourceName();\n+        if (!configuration.exists(resourcename)) {\n+            notFound(channel, \"Resource '\" + resourcename + \"' not found.\");\n+            return;\n+        }\n+\n+        configuration.putCObject(READONLY_FIELD, readonlyFields);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA4OTU4NA=="}, "originalCommit": null, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMjE1Mjk0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/PatchableResourceApiAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNDoyMjozMFrOGxDgcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNDoyMjozMFrOGxDgcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA5MDg2NQ==", "bodyText": "Let's use \"read-only\" (with dash) in all the messages for consistency.", "url": "https://github.com/opensearch-project/security/pull/559#discussion_r454090865", "createdAt": "2020-07-14T04:22:30Z", "author": {"login": "dinusX"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/PatchableResourceApiAction.java", "diffHunk": "@@ -143,6 +143,11 @@ private void handleSinglePatch(RestChannel channel, RestRequest request, Client\n             }\n         }\n \n+        if (isReadonlyFieldUpdated(existingResourceAsJsonNode, patchedResourceAsJsonNode)) {\n+            request.params().clear();\n+            conflict(channel, \"Attempted to update readonly property.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMjE3MDYyOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/AuditApiActionTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNDozMjowMFrOGxDqYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNToxNDoyMlrOGxYaOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA5MzQxMA==", "bodyText": "Should we similarly test with admin certificate in the additional Patch methods ?", "url": "https://github.com/opensearch-project/security/pull/559#discussion_r454093410", "createdAt": "2020-07-14T04:32:00Z", "author": {"login": "dinusX"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/AuditApiActionTest.java", "diffHunk": "@@ -52,6 +69,177 @@ public void testInvalidPath() throws Exception {\n         assertEquals(HttpStatus.SC_METHOD_NOT_ALLOWED, response.getStatusCode());\n     }\n \n+    @Test\n+    public void testInvalidSetting() throws Exception {\n+        thrown.expect(IllegalArgumentException.class);\n+        thrown.expectMessage(\"Invalid resource paths for read-only configs passed.\");\n+\n+        final Settings settings = Settings.builder()\n+                .putList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_READONLY_FIELDS, \"/test\")\n+                .build();\n+        setupWithRestRoles(settings);\n+    }\n+\n+    @Test\n+    public void testDisabledCategoryOrder() throws Exception {\n+        setup();\n+\n+        final List<String> testCategories = ImmutableList.of(\"SSL_EXCEPTION\", \"AUTHENTICATED\", \"BAD_HEADERS\");\n+        final AuditConfig auditConfig = new AuditConfig(true, AuditConfig.Filter.from(\n+                ImmutableMap.of(\"disabled_rest_categories\", testCategories)\n+        ), ComplianceConfig.DEFAULT);\n+        final ObjectNode json = DefaultObjectMapper.objectMapper.valueToTree(auditConfig);\n+\n+        testPutRequest(json, HttpStatus.SC_OK, true);\n+        RestHelper.HttpResponse response = rh.executeGetRequest(ENDPOINT, adminCredsHeader);\n+        List<String> actual = Streams.stream(readTree(response.getBody()).at(\"/config/audit/disabled_rest_categories\").iterator())\n+                .map(JsonNode::textValue)\n+                .collect(Collectors.toList());\n+        assertEquals(testCategories, actual);\n+    }\n+\n+    @Test\n+    public void testReadonlyApi() throws Exception {\n+        final List<String> readonlyFields = ImmutableList.of(\"/audit/enable_rest\", \"/audit/disabled_rest_categories\", \"/audit/ignore_requests\", \"/compliance/read_watched_fields\");\n+\n+        final Settings settings = Settings.builder()\n+                .putList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_READONLY_FIELDS, readonlyFields)\n+                .build();\n+        setupWithRestRoles(settings);\n+        final ObjectMapper objectMapper = DefaultObjectMapper.objectMapper;\n+\n+        // test get\n+        RestHelper.HttpResponse response = rh.executeGetRequest(ENDPOINT, adminCredsHeader);\n+        assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n+        List<String> actual = Streams.stream(readTree(response.getBody()).get(\"_readonly\").iterator())\n+                .map(JsonNode::textValue)\n+                .collect(Collectors.toList());\n+        assertEquals(readonlyFields, actual);\n+\n+        // test config\n+        final AuditConfig auditConfig = AuditConfig.from(Settings.EMPTY);\n+\n+        // reset\n+        ObjectNode json = objectMapper.valueToTree(auditConfig);\n+        testPutRequest(json, HttpStatus.SC_OK, true);\n+        // change enable_rest readonly property\n+        testReadonlyBoolean(json, \"/audit\", \"enable_rest\");\n+\n+        // reset\n+        json = objectMapper.valueToTree(auditConfig);\n+        testPutRequest(json, HttpStatus.SC_OK, true);\n+        // change disabled_rest_categories readonly property\n+        testReadonlyCategories(json, \"/audit\", \"disabled_rest_categories\");\n+\n+        // reset\n+        json = objectMapper.valueToTree(auditConfig);\n+        testPutRequest(json, HttpStatus.SC_OK, true);\n+        // change ignore_requests readonly property\n+        testReadonlyList(json, \"/audit\", \"ignore_requests\");\n+\n+        // reset\n+        json = objectMapper.valueToTree(auditConfig);\n+        testPutRequest(json, HttpStatus.SC_OK, true);\n+        // change ignore_requests readonly property\n+        testReadonlyMap(json, \"/compliance\", \"read_watched_fields\");\n+    }\n+\n+    private void testPutRequest(final JsonNode json, final int expectedStatus, final boolean sendAdminCertificate, final Header... header) throws Exception {\n+        rh.sendAdminCertificate = sendAdminCertificate;\n+        RestHelper.HttpResponse response = rh.executePutRequest(CONFIG_ENDPOINT, writeValueAsString(json, false), header);\n+        assertEquals(expectedStatus, response.getStatusCode());\n+    }\n+\n+    private void testReadonlyBoolean(final ObjectNode json, final String config, final String resource) throws Exception {\n+        final String resourcePath = \"/config\" + config + \"/\" + resource;\n+        ((ObjectNode)json.at(config)).put(resource, true);\n+        testPutRequest(json, HttpStatus.SC_OK, true);\n+        ((ObjectNode)json.at(config)).put(resource, false);\n+        testPutRequest(json, HttpStatus.SC_CONFLICT, false, adminCredsHeader);\n+        testBooleanPatch(resourcePath, false, HttpStatus.SC_CONFLICT, adminCredsHeader);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQzMzMzNw==", "bodyText": "I have added on line 146 to test all actions as super-admin which includes Patch methods", "url": "https://github.com/opensearch-project/security/pull/559#discussion_r454433337", "createdAt": "2020-07-14T15:14:22Z", "author": {"login": "sujithvm"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/AuditApiActionTest.java", "diffHunk": "@@ -52,6 +69,177 @@ public void testInvalidPath() throws Exception {\n         assertEquals(HttpStatus.SC_METHOD_NOT_ALLOWED, response.getStatusCode());\n     }\n \n+    @Test\n+    public void testInvalidSetting() throws Exception {\n+        thrown.expect(IllegalArgumentException.class);\n+        thrown.expectMessage(\"Invalid resource paths for read-only configs passed.\");\n+\n+        final Settings settings = Settings.builder()\n+                .putList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_READONLY_FIELDS, \"/test\")\n+                .build();\n+        setupWithRestRoles(settings);\n+    }\n+\n+    @Test\n+    public void testDisabledCategoryOrder() throws Exception {\n+        setup();\n+\n+        final List<String> testCategories = ImmutableList.of(\"SSL_EXCEPTION\", \"AUTHENTICATED\", \"BAD_HEADERS\");\n+        final AuditConfig auditConfig = new AuditConfig(true, AuditConfig.Filter.from(\n+                ImmutableMap.of(\"disabled_rest_categories\", testCategories)\n+        ), ComplianceConfig.DEFAULT);\n+        final ObjectNode json = DefaultObjectMapper.objectMapper.valueToTree(auditConfig);\n+\n+        testPutRequest(json, HttpStatus.SC_OK, true);\n+        RestHelper.HttpResponse response = rh.executeGetRequest(ENDPOINT, adminCredsHeader);\n+        List<String> actual = Streams.stream(readTree(response.getBody()).at(\"/config/audit/disabled_rest_categories\").iterator())\n+                .map(JsonNode::textValue)\n+                .collect(Collectors.toList());\n+        assertEquals(testCategories, actual);\n+    }\n+\n+    @Test\n+    public void testReadonlyApi() throws Exception {\n+        final List<String> readonlyFields = ImmutableList.of(\"/audit/enable_rest\", \"/audit/disabled_rest_categories\", \"/audit/ignore_requests\", \"/compliance/read_watched_fields\");\n+\n+        final Settings settings = Settings.builder()\n+                .putList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_READONLY_FIELDS, readonlyFields)\n+                .build();\n+        setupWithRestRoles(settings);\n+        final ObjectMapper objectMapper = DefaultObjectMapper.objectMapper;\n+\n+        // test get\n+        RestHelper.HttpResponse response = rh.executeGetRequest(ENDPOINT, adminCredsHeader);\n+        assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n+        List<String> actual = Streams.stream(readTree(response.getBody()).get(\"_readonly\").iterator())\n+                .map(JsonNode::textValue)\n+                .collect(Collectors.toList());\n+        assertEquals(readonlyFields, actual);\n+\n+        // test config\n+        final AuditConfig auditConfig = AuditConfig.from(Settings.EMPTY);\n+\n+        // reset\n+        ObjectNode json = objectMapper.valueToTree(auditConfig);\n+        testPutRequest(json, HttpStatus.SC_OK, true);\n+        // change enable_rest readonly property\n+        testReadonlyBoolean(json, \"/audit\", \"enable_rest\");\n+\n+        // reset\n+        json = objectMapper.valueToTree(auditConfig);\n+        testPutRequest(json, HttpStatus.SC_OK, true);\n+        // change disabled_rest_categories readonly property\n+        testReadonlyCategories(json, \"/audit\", \"disabled_rest_categories\");\n+\n+        // reset\n+        json = objectMapper.valueToTree(auditConfig);\n+        testPutRequest(json, HttpStatus.SC_OK, true);\n+        // change ignore_requests readonly property\n+        testReadonlyList(json, \"/audit\", \"ignore_requests\");\n+\n+        // reset\n+        json = objectMapper.valueToTree(auditConfig);\n+        testPutRequest(json, HttpStatus.SC_OK, true);\n+        // change ignore_requests readonly property\n+        testReadonlyMap(json, \"/compliance\", \"read_watched_fields\");\n+    }\n+\n+    private void testPutRequest(final JsonNode json, final int expectedStatus, final boolean sendAdminCertificate, final Header... header) throws Exception {\n+        rh.sendAdminCertificate = sendAdminCertificate;\n+        RestHelper.HttpResponse response = rh.executePutRequest(CONFIG_ENDPOINT, writeValueAsString(json, false), header);\n+        assertEquals(expectedStatus, response.getStatusCode());\n+    }\n+\n+    private void testReadonlyBoolean(final ObjectNode json, final String config, final String resource) throws Exception {\n+        final String resourcePath = \"/config\" + config + \"/\" + resource;\n+        ((ObjectNode)json.at(config)).put(resource, true);\n+        testPutRequest(json, HttpStatus.SC_OK, true);\n+        ((ObjectNode)json.at(config)).put(resource, false);\n+        testPutRequest(json, HttpStatus.SC_CONFLICT, false, adminCredsHeader);\n+        testBooleanPatch(resourcePath, false, HttpStatus.SC_CONFLICT, adminCredsHeader);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA5MzQxMA=="}, "originalCommit": null, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMjE3OTQ1OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/AuditApiActionTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNDozNjo0M1rOGxDvUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNDozNjo0M1rOGxDvUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA5NDY3NA==", "bodyText": "You can rewrite this method to reuse your new method \"testBooleanPatch\"", "url": "https://github.com/opensearch-project/security/pull/559#discussion_r454094674", "createdAt": "2020-07-14T04:36:43Z", "author": {"login": "dinusX"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/AuditApiActionTest.java", "diffHunk": "@@ -176,13 +359,21 @@ private void testPatchAction(final int expectedStatus, final Header... headers)\n         testBoolean(\"/config/compliance/external_config\", expectedStatus, headers);\n         testBoolean(\"/config/compliance/read_metadata_only\", expectedStatus, headers);\n         testList(\"/config/compliance/read_ignore_users\", ImmutableList.of(\"test-user-1\"), expectedStatus, headers);\n-        testMap(\"/config/compliance/read_watched_fields\", ImmutableMap.of(\"test-index-1\", Collections.singleton(\"test-field\")), expectedStatus, headers);\n+        testMap(\"/config/compliance/read_watched_fields\", ImmutableMap.of(\"test-index-1\", Collections.singletonList(\"test-field\")), expectedStatus, headers);\n         testBoolean(\"/config/compliance/write_metadata_only\", expectedStatus, headers);\n         testBoolean(\"/config/compliance/write_log_diffs\", expectedStatus, headers);\n         testList(\"/config/compliance/write_ignore_users\", ImmutableList.of(\"test-user-1\"), expectedStatus, headers);\n         testList(\"/config/compliance/write_watched_indices\", ImmutableList.of(\"test-index-1\"), expectedStatus, headers);\n     }\n \n+    private void testBooleanPatch(final String patchResource, final boolean value, final int expected, final Header... headers) throws Exception {\n+        RestHelper.HttpResponse response = rh.executePatchRequest(ENDPOINT, \"[{\\\"op\\\": \\\"add\\\",\\\"path\\\": \\\"\" + patchResource + \"\\\",\\\"value\\\": \" + value + \"}]\", headers);\n+        assertEquals(expected, response.getStatusCode());\n+        if (expected == HttpStatus.SC_OK) {\n+            assertTrue(readTree(rh.executeGetRequest(ENDPOINT, headers).getBody()).at(patchResource).asBoolean());\n+        }\n+    }\n+\n     private void testBoolean(final String patchResource, final int expected, final Header... headers) throws Exception {\n         // make true", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 259}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMjIwMTQ1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNDo0ODoyM1rOGxD7vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNTo1MTo1MVrOGxaDFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA5Nzg1NA==", "bodyText": "Should this be \"enable_rest\" or \"enable_rest_categories\" ?", "url": "https://github.com/opensearch-project/security/pull/559#discussion_r454097854", "createdAt": "2020-07-14T04:48:23Z", "author": {"login": "dinusX"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -383,4 +383,16 @@ public String toString() {\n                 .filter(settings::hasValue)\n                 .collect(Collectors.toSet());\n     }\n+\n+    public static final ImmutableSet<String> FIELD_PATHS = ImmutableSet.of(\n+            \"/enable\",\n+            \"/audit/enable_rest\", \"/audit/disabled_rest_categories\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ2MDE4MA==", "bodyText": "It is disabled_rest_categories as it blacklists categories ignored. This field is now dynamically fetched via Jackson properties of that class.", "url": "https://github.com/opensearch-project/security/pull/559#discussion_r454460180", "createdAt": "2020-07-14T15:51:51Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -383,4 +383,16 @@ public String toString() {\n                 .filter(settings::hasValue)\n                 .collect(Collectors.toSet());\n     }\n+\n+    public static final ImmutableSet<String> FIELD_PATHS = ImmutableSet.of(\n+            \"/enable\",\n+            \"/audit/enable_rest\", \"/audit/disabled_rest_categories\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA5Nzg1NA=="}, "originalCommit": null, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0Mzc0OTMxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNjoxMDo1OFrOGyyL4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNjoxMDo1OFrOGyyL4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkwNDIyNA==", "bodyText": "Use Sets.union().", "url": "https://github.com/opensearch-project/security/pull/559#discussion_r455904224", "createdAt": "2020-07-16T16:10:58Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -385,4 +384,11 @@ public String toString() {\n                 .filter(settings::hasValue)\n                 .collect(Collectors.toSet());\n     }\n+\n+    public static final Set<String> FIELD_PATHS = Stream.of(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NDA2OTEzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AuditCategory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNzozMzo0NFrOGy1UHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNzo0MDowNFrOGy1iUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk1NTQ4Ng==", "bodyText": "Which order is important here and why? Should not natural order be sufficient?", "url": "https://github.com/opensearch-project/security/pull/559#discussion_r455955486", "createdAt": "2020-07-16T17:33:44Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AuditCategory.java", "diffHunk": "@@ -22,19 +23,18 @@\n     COMPLIANCE_INTERNAL_CONFIG_READ,\n     COMPLIANCE_INTERNAL_CONFIG_WRITE;\n \n-    public static EnumSet<AuditCategory> parse(final Collection<String> categories) {\n-        EnumSet<AuditCategory> set = EnumSet.noneOf(AuditCategory.class);\n+    public static Set<AuditCategory> parse(final Collection<String> categories) {\n         if (categories.isEmpty())\n-            return set;\n+            return Collections.emptySet();\n \n         return categories\n                 .stream()\n                 .map(String::toUpperCase)\n                 .map(AuditCategory::valueOf)\n-                .collect(Collectors.toCollection(() -> set));\n+                .collect(ImmutableSet.toImmutableSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk1OTEyMg==", "bodyText": "If the entries are passed as array, then the enum set reorders based on the order of elements defined within EnumSet.\nFor eg: [\"AUTHENTICATED\", \"GRANTED_PRIVILEGES\"] gets reordered as [\"GRANTED_PRIVILEGES\", \"AUTHENTICATED\"] as GRANTED_PRIVILEGES comes before AUTHENTICATED in EnumSet ordering.\nThis breaks if the same put request is called twice because to compare two JSON arrays are equal, the order must be same too. Also in the UI, the elements gets reordered on refetching. To avoid this, using ImmutableSet so that ordering remains the same as the way user enters them.", "url": "https://github.com/opensearch-project/security/pull/559#discussion_r455959122", "createdAt": "2020-07-16T17:40:04Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AuditCategory.java", "diffHunk": "@@ -22,19 +23,18 @@\n     COMPLIANCE_INTERNAL_CONFIG_READ,\n     COMPLIANCE_INTERNAL_CONFIG_WRITE;\n \n-    public static EnumSet<AuditCategory> parse(final Collection<String> categories) {\n-        EnumSet<AuditCategory> set = EnumSet.noneOf(AuditCategory.class);\n+    public static Set<AuditCategory> parse(final Collection<String> categories) {\n         if (categories.isEmpty())\n-            return set;\n+            return Collections.emptySet();\n \n         return categories\n                 .stream()\n                 .map(String::toUpperCase)\n                 .map(AuditCategory::valueOf)\n-                .collect(Collectors.toCollection(() -> set));\n+                .collect(ImmutableSet.toImmutableSet());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk1NTQ4Ng=="}, "originalCommit": null, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODc3NjkyOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/AuditApiActionTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMToyOToyMlrOGzhrvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMToyOToyMlrOGzhrvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY4MjQzMA==", "bodyText": "Had to resort to updating the test file in test resources as the resource file could not be injected into AuditApiAction for testing.\nIn tearDown clearing it.\nAttempted to change via Reflection to inject another value for the STATIC_RESOURCE but making tests to be unstable", "url": "https://github.com/opensearch-project/security/pull/559#discussion_r456682430", "createdAt": "2020-07-17T21:29:22Z", "author": {"login": "sujithvm"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/AuditApiActionTest.java", "diffHunk": "@@ -52,6 +81,177 @@ public void testInvalidPath() throws Exception {\n         assertEquals(HttpStatus.SC_METHOD_NOT_ALLOWED, response.getStatusCode());\n     }\n \n+    @Test\n+    public void testDisabledCategoryOrder() throws Exception {\n+        setup();\n+\n+        final List<String> testCategories = ImmutableList.of(\"SSL_EXCEPTION\", \"AUTHENTICATED\", \"BAD_HEADERS\");\n+        final AuditConfig auditConfig = new AuditConfig(true, AuditConfig.Filter.from(\n+                ImmutableMap.of(\"disabled_rest_categories\", testCategories)\n+        ), ComplianceConfig.DEFAULT);\n+        final ObjectNode json = DefaultObjectMapper.objectMapper.valueToTree(auditConfig);\n+\n+        testPutRequest(json, HttpStatus.SC_OK, true);\n+        RestHelper.HttpResponse response = rh.executeGetRequest(ENDPOINT, adminCredsHeader);\n+        List<String> actual = Streams.stream(readTree(response.getBody()).at(\"/config/audit/disabled_rest_categories\").iterator())\n+                .map(JsonNode::textValue)\n+                .collect(Collectors.toList());\n+        assertEquals(testCategories, actual);\n+    }\n+\n+    @Test\n+    public void testReadonlyApi() throws Exception {\n+        final List<String> readonlyFields = ImmutableList.of(\"/audit/enable_rest\", \"/audit/disabled_rest_categories\", \"/audit/ignore_requests\", \"/compliance/read_watched_fields\");\n+        updateStaticResourceReadonly(readonlyFields);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0OTAzMTg3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/AbstractApiAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMzo1ODo0MlrOGzj9Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMzo1ODo0MlrOGzj9Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcxOTY1OQ==", "bodyText": "Delegate conversion from JSON to isReadonlyFieldUpdated(), otherwise that conversion impacts all API actions even one that blindly return false.", "url": "https://github.com/opensearch-project/security/pull/559#discussion_r456719659", "createdAt": "2020-07-17T23:58:42Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/AbstractApiAction.java", "diffHunk": "@@ -201,6 +202,11 @@ protected void handlePut(final RestChannel channel, final RestRequest request, f\n \t\t\treturn;\n \t\t}\n \n+\t\tif (isReadonlyFieldUpdated(Utils.convertJsonToJackson(existingConfiguration, false).get(getResourceName()), content)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0OTA0MTYzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQwMDowNToxOVrOGzkCVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQwMTozMTozNVrOGzkwjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcyMDk4Mg==", "bodyText": "reuse AuditConfig.Filter.FIELDS and ComplianceConfig.FIELDS.", "url": "https://github.com/opensearch-project/security/pull/559#discussion_r456720982", "createdAt": "2020-07-18T00:05:19Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -385,4 +383,10 @@ public String toString() {\n                 .filter(settings::hasValue)\n                 .collect(Collectors.toSet());\n     }\n+\n+    public static final Set<String> FIELD_PATHS = Sets.union(\n+            DefaultObjectMapper.getFields(AuditConfig.class, \"/\"),\n+            Sets.union(\n+                    DefaultObjectMapper.getFields(AuditConfig.Filter.class, \"/audit/\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcyNTkwNg==", "bodyText": "A prefix path needs to be added to represent the resource path hence did not reuse", "url": "https://github.com/opensearch-project/security/pull/559#discussion_r456725906", "createdAt": "2020-07-18T00:36:34Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -385,4 +383,10 @@ public String toString() {\n                 .filter(settings::hasValue)\n                 .collect(Collectors.toSet());\n     }\n+\n+    public static final Set<String> FIELD_PATHS = Sets.union(\n+            DefaultObjectMapper.getFields(AuditConfig.class, \"/\"),\n+            Sets.union(\n+                    DefaultObjectMapper.getFields(AuditConfig.Filter.class, \"/audit/\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcyMDk4Mg=="}, "originalCommit": null, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjczMjgxNQ==", "bodyText": "Done", "url": "https://github.com/opensearch-project/security/pull/559#discussion_r456732815", "createdAt": "2020-07-18T01:31:35Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -385,4 +383,10 @@ public String toString() {\n                 .filter(settings::hasValue)\n                 .collect(Collectors.toSet());\n     }\n+\n+    public static final Set<String> FIELD_PATHS = Sets.union(\n+            DefaultObjectMapper.getFields(AuditConfig.class, \"/\"),\n+            Sets.union(\n+                    DefaultObjectMapper.getFields(AuditConfig.Filter.class, \"/audit/\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcyMDk4Mg=="}, "originalCommit": null, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MDA1ODA2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/AuditApiAction.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQwMDozODo1OVrOGzrdww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjo0ODowNVrOG0h5Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg0MjY5MQ==", "bodyText": "nit: IllegalArgumentException does not seem to be a good match", "url": "https://github.com/opensearch-project/security/pull/559#discussion_r456842691", "createdAt": "2020-07-19T00:38:59Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/AuditApiAction.java", "diffHunk": "@@ -126,6 +139,16 @@ public AuditApiAction(final Settings settings,\n         super(settings, configPath, controller, client, adminDNs, cl, cs, principalExtractor, privilegesEvaluator, threadPool, auditLog);\n         this.privilegesEvaluator = privilegesEvaluator;\n         this.threadContext = threadPool.getThreadContext();\n+        try {\n+            this.readonlyFields = DefaultObjectMapper.YAML_MAPPER\n+                    .readValue(this.getClass().getResourceAsStream(STATIC_RESOURCE), new TypeReference<Map<String, List<String>>>() {})\n+                    .get(READONLY_FIELD);\n+            if (!AuditConfig.FIELD_PATHS.containsAll(this.readonlyFields)) {\n+                throw new IllegalArgumentException(\"Invalid read-only field paths provided in file \" + STATIC_RESOURCE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU4MTM5OA==", "bodyText": "What would you suggest? Is it fine to throw the same StaticResourceException ?", "url": "https://github.com/opensearch-project/security/pull/559#discussion_r457581398", "createdAt": "2020-07-20T17:39:49Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/AuditApiAction.java", "diffHunk": "@@ -126,6 +139,16 @@ public AuditApiAction(final Settings settings,\n         super(settings, configPath, controller, client, adminDNs, cl, cs, principalExtractor, privilegesEvaluator, threadPool, auditLog);\n         this.privilegesEvaluator = privilegesEvaluator;\n         this.threadContext = threadPool.getThreadContext();\n+        try {\n+            this.readonlyFields = DefaultObjectMapper.YAML_MAPPER\n+                    .readValue(this.getClass().getResourceAsStream(STATIC_RESOURCE), new TypeReference<Map<String, List<String>>>() {})\n+                    .get(READONLY_FIELD);\n+            if (!AuditConfig.FIELD_PATHS.containsAll(this.readonlyFields)) {\n+                throw new IllegalArgumentException(\"Invalid read-only field paths provided in file \" + STATIC_RESOURCE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg0MjY5MQ=="}, "originalCommit": null, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczNDQwNw==", "bodyText": "Throwing StaticResourceException", "url": "https://github.com/opensearch-project/security/pull/559#discussion_r457734407", "createdAt": "2020-07-20T22:48:05Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/AuditApiAction.java", "diffHunk": "@@ -126,6 +139,16 @@ public AuditApiAction(final Settings settings,\n         super(settings, configPath, controller, client, adminDNs, cl, cs, principalExtractor, privilegesEvaluator, threadPool, auditLog);\n         this.privilegesEvaluator = privilegesEvaluator;\n         this.threadContext = threadPool.getThreadContext();\n+        try {\n+            this.readonlyFields = DefaultObjectMapper.YAML_MAPPER\n+                    .readValue(this.getClass().getResourceAsStream(STATIC_RESOURCE), new TypeReference<Map<String, List<String>>>() {})\n+                    .get(READONLY_FIELD);\n+            if (!AuditConfig.FIELD_PATHS.containsAll(this.readonlyFields)) {\n+                throw new IllegalArgumentException(\"Invalid read-only field paths provided in file \" + STATIC_RESOURCE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg0MjY5MQ=="}, "originalCommit": null, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2360, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}