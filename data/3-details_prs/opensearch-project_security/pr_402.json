{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3NDY5Mjky", "number": 402, "title": "Implement put if absent behavior for security config", "bodyText": "Use case: If you want to include new config file (say audit.yml for audit logging configuration) to a cluster (which already contains opendistro index), then it loads new config file to an existing index.\nCurrent behavior:\n\nIf opendistro index does not exist (run CreateIndexRequest)\n\nCreate a new index\nLoad the security config files\n\n\nif opendistro index exists (run CreateIndexRequest)\n\nthrow exception and skips trying to load any security config files\n\n\n\nProposed behavior:\n\ncheck if opendistro index exists (run GetIndexRequest)\nif does not exist, create index using CreateIndexRequest\ntry to load any security config into the index using IndexRequest with optype set to Create for put if absent behavior\nif doc already exists (throw VersionConflictEngineException) do nothing as config is already loaded.\n\nThis behavior is good if we are trying to populate new config into the index instead of skipping attempt to load them.\nPut if absent behavior:\nhttps://www.elastic.co/guide/en/elasticsearch/reference/current/docs-index_.html#docs-index-api-query-params\nError is thrown when doc with same id and index is provided when opType is set to CREATE\nhttps://www.elastic.co/guide/en/elasticsearch/client/java-rest/master/java-rest-high-document-index.html#java-rest-high-document-index-response", "createdAt": "2020-04-22T18:42:47Z", "url": "https://github.com/opensearch-project/security/pull/402", "merged": true, "mergeCommit": {"oid": "5e4561df610528e7963b349fdab328dd883efe77"}, "closed": true, "closedAt": "2020-06-23T23:45:16Z", "author": {"login": "sujithvm"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcaNjGWgFqTM5ODUxNDI0NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcuOQ71AFqTQzNjIzMjAwNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NTE0MjQ0", "url": "https://github.com/opensearch-project/security/pull/402#pullrequestreview-398514244", "createdAt": "2020-04-22T19:35:13Z", "commit": null, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMjE5ODUz", "url": "https://github.com/opensearch-project/security/pull/402#pullrequestreview-400219853", "createdAt": "2020-04-24T19:36:29Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOTozNjozMFrOGLmX9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOTozNjozMFrOGLmX9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgxNjI0NA==", "bodyText": "This code will be executed every time you restart an instance, which means that it will always override the existing config with default values, which is not what we want.\nWhy not use instead some API to update the config values ?", "url": "https://github.com/opensearch-project/security/pull/402#discussion_r414816244", "createdAt": "2020-04-24T19:36:30Z", "author": {"login": "dinusX"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/ConfigurationRepository.java", "diffHunk": "@@ -130,11 +131,21 @@ public void run() {\n                                     indexSettings.put(\"index.number_of_shards\", 1);\n                                     indexSettings.put(\"index.auto_expand_replicas\", \"0-all\");\n \n-                                    boolean ok = client.admin().indices().create(new CreateIndexRequest(opendistrosecurityIndex)\n-                                            .settings(indexSettings))\n-                                            .actionGet().isAcknowledged();\n-                                    LOGGER.info(\"Index {} created?: {}\", opendistrosecurityIndex, ok);\n-                                    if(ok) {\n+                                    boolean existsOrCreated = client.admin().indices()\n+                                            .exists(new IndicesExistsRequest(opendistrosecurityIndex))\n+                                            .actionGet().isExists();\n+\n+                                    if (existsOrCreated) {\n+                                        LOGGER.info(\"Security index {} exists.\", opendistrosecurityIndex);\n+                                    } else {\n+                                        LOGGER.info(\"Security index {} does not exist. Attempting to create new index.\", opendistrosecurityIndex);\n+                                        existsOrCreated = client.admin().indices().create(new CreateIndexRequest(opendistrosecurityIndex)\n+                                                .settings(indexSettings))\n+                                                .actionGet().isAcknowledged();\n+                                        LOGGER.info(\"Index {} created?: {}\", opendistrosecurityIndex, existsOrCreated);\n+                                    }\n+\n+                                    if (existsOrCreated) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMjM4Njk4", "url": "https://github.com/opensearch-project/security/pull/402#pullrequestreview-400238698", "createdAt": "2020-04-24T20:08:52Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyMzAxNzE4", "url": "https://github.com/opensearch-project/security/pull/402#pullrequestreview-402301718", "createdAt": "2020-04-29T00:28:40Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzOTIwMzMw", "url": "https://github.com/opensearch-project/security/pull/402#pullrequestreview-403920330", "createdAt": "2020-04-30T22:27:35Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMjoyNzozNlrOGO8gPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMjoyNzozNlrOGO8gPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMyNDU0MQ==", "bodyText": "What is the benefit of checking if the index already exists? Now there will be possibly two requests instead of one when one seems to provide exactly the same functionality. The create request should not be much more heavyweight compared to the does exist request to try to avoid it.", "url": "https://github.com/opensearch-project/security/pull/402#discussion_r418324541", "createdAt": "2020-04-30T22:27:36Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/ConfigurationRepository.java", "diffHunk": "@@ -130,11 +131,21 @@ public void run() {\n                                     indexSettings.put(\"index.number_of_shards\", 1);\n                                     indexSettings.put(\"index.auto_expand_replicas\", \"0-all\");\n \n-                                    boolean ok = client.admin().indices().create(new CreateIndexRequest(opendistrosecurityIndex)\n-                                            .settings(indexSettings))\n-                                            .actionGet().isAcknowledged();\n-                                    LOGGER.info(\"Index {} created?: {}\", opendistrosecurityIndex, ok);\n-                                    if(ok) {\n+                                    boolean existsOrCreated = client.admin().indices()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzOTI2Mzc5", "url": "https://github.com/opensearch-project/security/pull/402#pullrequestreview-403926379", "createdAt": "2020-04-30T22:41:44Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMjo0MTo0NFrOGO80TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMjo0MTo0NFrOGO80TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMyOTY3Nw==", "bodyText": "Is there a way to get an error message with the details of why the index can't be created? There is no yet attempt to \"use\" the index, is the error message should be \"Failed to create {} index\"?", "url": "https://github.com/opensearch-project/security/pull/402#discussion_r418329677", "createdAt": "2020-04-30T22:41:44Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/ConfigurationRepository.java", "diffHunk": "@@ -147,7 +158,7 @@ public void run() {\n                                         ConfigHelper.uploadFile(client, cd+\"nodes_dn.yml\", opendistrosecurityIndex, CType.NODESDN, DEFAULT_CONFIG_VERSION, populateEmptyIfFileMissing);\n                                         LOGGER.info(\"Default config applied\");\n                                     } else {\n-                                        LOGGER.error(\"Can not create {} index\", opendistrosecurityIndex);\n+                                        LOGGER.error(\"Can not use or create {} index\", opendistrosecurityIndex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzOTM4ODU3", "url": "https://github.com/opensearch-project/security/pull/402#pullrequestreview-403938857", "createdAt": "2020-04-30T23:13:28Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMzoxMzoyOFrOGO9dbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMzoxMzoyOFrOGO9dbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM0MDIwNg==", "bodyText": "IMO, the warning level is not appropriate as it is not a misconfiguration or something went wrong. On a multi-node cluster, only one node will update the index, all other nodes are supposed to fail and would log the warning message.", "url": "https://github.com/opensearch-project/security/pull/402#discussion_r418340206", "createdAt": "2020-04-30T23:13:28Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/support/ConfigHelper.java", "diffHunk": "@@ -71,13 +73,16 @@ public static void uploadFile(Client tc, String filepath, String index, CType cT\n         try (Reader reader = createFileOrStringReader(cType, configVersion, filepath, populateEmptyIfFileMissing)) {\n \n             final String res = tc\n-                    .index(new IndexRequest(index).type(configVersion==1?\"security\":\"_doc\").id(cType.toLCString()).setRefreshPolicy(RefreshPolicy.IMMEDIATE)\n+                    .index(new IndexRequest(index).type(configVersion==1?\"security\":\"_doc\").id(cType.toLCString()).opType(DocWriteRequest.OpType.CREATE).setRefreshPolicy(RefreshPolicy.IMMEDIATE)\n                             .source(cType.toLCString(), readXContent(reader, XContentType.YAML))).actionGet().getId();\n \n             if (!cType.toLCString().equals(res)) {\n                 throw new Exception(\"   FAIL: Configuration for '\" + cType.toLCString()\n                         + \"' failed for unknown reasons. Pls. consult logfile of elasticsearch\");\n             }\n+            LOGGER.info(\"Doc '{}' with version {} is updated.\", cType, configVersion);\n+        } catch (VersionConflictEngineException versionConflictEngineException) {\n+            LOGGER.warn(\"Doc with id {} in index {} already exists. Doing nothing.\", cType.toLCString(), index);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyODUwOTYz", "url": "https://github.com/opensearch-project/security/pull/402#pullrequestreview-432850963", "createdAt": "2020-06-17T23:52:26Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMzo1MjoyN1rOGlbFKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMzo1MjoyN1rOGlbFKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg5NDE4NQ==", "bodyText": "Do we need to add audit.yml here?\nor it is cover in separate PR?", "url": "https://github.com/opensearch-project/security/pull/402#discussion_r441894185", "createdAt": "2020-06-17T23:52:27Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/ConfigurationRepository.java", "diffHunk": "@@ -136,27 +133,30 @@ public void run() {\n                                             .settings(indexSettings))\n                                             .actionGet().isAcknowledged();\n                                     LOGGER.info(\"Index {} created?: {}\", opendistrosecurityIndex, ok);\n-                                    if(ok) {\n-                                        ConfigHelper.uploadFile(client, cd+\"config.yml\", opendistrosecurityIndex, CType.CONFIG, DEFAULT_CONFIG_VERSION);\n-                                        ConfigHelper.uploadFile(client, cd+\"roles.yml\", opendistrosecurityIndex, CType.ROLES, DEFAULT_CONFIG_VERSION);\n-                                        ConfigHelper.uploadFile(client, cd+\"roles_mapping.yml\", opendistrosecurityIndex, CType.ROLESMAPPING, DEFAULT_CONFIG_VERSION);\n-                                        ConfigHelper.uploadFile(client, cd+\"internal_users.yml\", opendistrosecurityIndex, CType.INTERNALUSERS, DEFAULT_CONFIG_VERSION);\n-                                        ConfigHelper.uploadFile(client, cd+\"action_groups.yml\", opendistrosecurityIndex, CType.ACTIONGROUPS, DEFAULT_CONFIG_VERSION);\n-                                        if(DEFAULT_CONFIG_VERSION == 2) {\n-                                            ConfigHelper.uploadFile(client, cd+\"tenants.yml\", opendistrosecurityIndex, CType.TENANTS, DEFAULT_CONFIG_VERSION);\n-                                        }\n-                                        final boolean populateEmptyIfFileMissing = true;\n-                                        ConfigHelper.uploadFile(client, cd+\"nodes_dn.yml\", opendistrosecurityIndex, CType.NODESDN, DEFAULT_CONFIG_VERSION, populateEmptyIfFileMissing);\n-                                        LOGGER.info(\"Default config applied\");\n-                                    } else {\n-                                        LOGGER.error(\"Can not create {} index\", opendistrosecurityIndex);\n-                                    }\n+                                } catch (Exception e) {\n+                                    LOGGER.error(\"Can not create {} index\", opendistrosecurityIndex, e);\n+                                }\n+                            }\n+\n+                            if (createConfigIfAbsent.get()) {\n+                                try {\n+                                    String lookupDir = System.getProperty(\"security.default_init.dir\");\n+                                    final String cd = lookupDir != null ? (lookupDir + \"/\") : new Environment(settings, configPath).pluginsFile().toAbsolutePath().toString() + \"/opendistro_security/securityconfig/\";\n+\n+                                    ConfigHelper.uploadFile(client, cd + \"config.yml\", opendistrosecurityIndex, CType.CONFIG, DEFAULT_CONFIG_VERSION);\n+                                    ConfigHelper.uploadFile(client, cd + \"roles.yml\", opendistrosecurityIndex, CType.ROLES, DEFAULT_CONFIG_VERSION);\n+                                    ConfigHelper.uploadFile(client, cd + \"roles_mapping.yml\", opendistrosecurityIndex, CType.ROLESMAPPING, DEFAULT_CONFIG_VERSION);\n+                                    ConfigHelper.uploadFile(client, cd + \"internal_users.yml\", opendistrosecurityIndex, CType.INTERNALUSERS, DEFAULT_CONFIG_VERSION);\n+                                    ConfigHelper.uploadFile(client, cd + \"action_groups.yml\", opendistrosecurityIndex, CType.ACTIONGROUPS, DEFAULT_CONFIG_VERSION);\n+                                    ConfigHelper.uploadFile(client, cd + \"tenants.yml\", opendistrosecurityIndex, CType.TENANTS, DEFAULT_CONFIG_VERSION);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyODUxNTg5", "url": "https://github.com/opensearch-project/security/pull/402#pullrequestreview-432851589", "createdAt": "2020-06-17T23:54:15Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMzo1NDoxNVrOGlbHNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMzo1NDoxNVrOGlbHNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg5NDcwOQ==", "bodyText": "why are we moving to client.admin() from clusterService.state().metaData().hasConcreteIndex(opendistrosecurityIndex)", "url": "https://github.com/opensearch-project/security/pull/402#discussion_r441894709", "createdAt": "2020-06-17T23:54:15Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/ConfigurationRepository.java", "diffHunk": "@@ -213,19 +213,27 @@ public void run() {\n \n     }\n \n-    public void initOnNodeStart() {\n+    private boolean indexExists(String index) {\n+        GetIndexResponse getIndexResponse = client.admin().indices()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 105}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyODY3NjIz", "url": "https://github.com/opensearch-project/security/pull/402#pullrequestreview-432867623", "createdAt": "2020-06-18T00:46:31Z", "commit": null, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1Mzk4NjAw", "url": "https://github.com/opensearch-project/security/pull/402#pullrequestreview-435398600", "createdAt": "2020-06-23T02:33:56Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwMjozMzo1NlrOGnXL8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwMzowNDoyN1rOGnXpyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkyNzUzOQ==", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import org.elasticsearch.action.DocWriteRequest;\n          \n          \n            \n            import org.elasticsearch.action.DocWriteRequest.OpType;\n          \n      \n    \n    \n  \n\nor\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import org.elasticsearch.action.DocWriteRequest;\n          \n          \n            \n            import static org.elasticsearch.action.DocWriteRequest.OpType.CREATE;", "url": "https://github.com/opensearch-project/security/pull/402#discussion_r443927539", "createdAt": "2020-06-23T02:33:56Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/support/ConfigHelper.java", "diffHunk": "@@ -39,6 +39,7 @@\n import com.amazon.opendistroforelasticsearch.security.securityconf.impl.Meta;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.DocWriteRequest;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkyOTA2OA==", "bodyText": "nit: introduce local variable IndexRequest indexRequest = ...", "url": "https://github.com/opensearch-project/security/pull/402#discussion_r443929068", "createdAt": "2020-06-23T02:40:00Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/support/ConfigHelper.java", "diffHunk": "@@ -64,22 +66,26 @@ public static void uploadFile(Client tc, String filepath, String index, CType cT\n     }\n \n     public static void uploadFile(Client tc, String filepath, String index, CType cType, int configVersion, boolean populateEmptyIfFileMissing) throws Exception {\n-        LOGGER.info(\"Will update '\" + cType + \"' with \" + filepath + \" and populate it with empty doc if file missing and populateEmptyIfFileMissing=\" + populateEmptyIfFileMissing);\n+        final String configType = cType.toLCString();\n+        LOGGER.info(\"Will update '\" + configType + \"' with \" + filepath + \" and populate it with empty doc if file missing and populateEmptyIfFileMissing=\" + populateEmptyIfFileMissing);\n \n         if (!populateEmptyIfFileMissing) {\n             ConfigHelper.fromYamlFile(filepath, cType, configVersion, 0, 0);\n         }\n-        \n+\n         try (Reader reader = createFileOrStringReader(cType, configVersion, filepath, populateEmptyIfFileMissing)) {\n \n             final String res = tc\n-                    .index(new IndexRequest(index).type(configVersion==1?\"security\":\"_doc\").id(cType.toLCString()).setRefreshPolicy(RefreshPolicy.IMMEDIATE)\n+                    .index(new IndexRequest(index).type(configVersion==1?\"security\":\"_doc\").id(configType).opType(DocWriteRequest.OpType.CREATE).setRefreshPolicy(RefreshPolicy.IMMEDIATE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkzMjIxMQ==", "bodyText": "cType.toLCString() -> configType", "url": "https://github.com/opensearch-project/security/pull/402#discussion_r443932211", "createdAt": "2020-06-23T02:52:19Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/support/ConfigHelper.java", "diffHunk": "@@ -64,22 +66,26 @@ public static void uploadFile(Client tc, String filepath, String index, CType cT\n     }\n \n     public static void uploadFile(Client tc, String filepath, String index, CType cType, int configVersion, boolean populateEmptyIfFileMissing) throws Exception {\n-        LOGGER.info(\"Will update '\" + cType + \"' with \" + filepath + \" and populate it with empty doc if file missing and populateEmptyIfFileMissing=\" + populateEmptyIfFileMissing);\n+        final String configType = cType.toLCString();\n+        LOGGER.info(\"Will update '\" + configType + \"' with \" + filepath + \" and populate it with empty doc if file missing and populateEmptyIfFileMissing=\" + populateEmptyIfFileMissing);\n \n         if (!populateEmptyIfFileMissing) {\n             ConfigHelper.fromYamlFile(filepath, cType, configVersion, 0, 0);\n         }\n-        \n+\n         try (Reader reader = createFileOrStringReader(cType, configVersion, filepath, populateEmptyIfFileMissing)) {\n \n             final String res = tc\n-                    .index(new IndexRequest(index).type(configVersion==1?\"security\":\"_doc\").id(cType.toLCString()).setRefreshPolicy(RefreshPolicy.IMMEDIATE)\n+                    .index(new IndexRequest(index).type(configVersion==1?\"security\":\"_doc\").id(configType).opType(DocWriteRequest.OpType.CREATE).setRefreshPolicy(RefreshPolicy.IMMEDIATE)\n                             .source(cType.toLCString(), readXContent(reader, XContentType.YAML))).actionGet().getId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkzNTE3OA==", "bodyText": "nit: \"Index {} already contains doc with id {}, skipping update.\"", "url": "https://github.com/opensearch-project/security/pull/402#discussion_r443935178", "createdAt": "2020-06-23T03:04:27Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/support/ConfigHelper.java", "diffHunk": "@@ -64,22 +66,26 @@ public static void uploadFile(Client tc, String filepath, String index, CType cT\n     }\n \n     public static void uploadFile(Client tc, String filepath, String index, CType cType, int configVersion, boolean populateEmptyIfFileMissing) throws Exception {\n-        LOGGER.info(\"Will update '\" + cType + \"' with \" + filepath + \" and populate it with empty doc if file missing and populateEmptyIfFileMissing=\" + populateEmptyIfFileMissing);\n+        final String configType = cType.toLCString();\n+        LOGGER.info(\"Will update '\" + configType + \"' with \" + filepath + \" and populate it with empty doc if file missing and populateEmptyIfFileMissing=\" + populateEmptyIfFileMissing);\n \n         if (!populateEmptyIfFileMissing) {\n             ConfigHelper.fromYamlFile(filepath, cType, configVersion, 0, 0);\n         }\n-        \n+\n         try (Reader reader = createFileOrStringReader(cType, configVersion, filepath, populateEmptyIfFileMissing)) {\n \n             final String res = tc\n-                    .index(new IndexRequest(index).type(configVersion==1?\"security\":\"_doc\").id(cType.toLCString()).setRefreshPolicy(RefreshPolicy.IMMEDIATE)\n+                    .index(new IndexRequest(index).type(configVersion==1?\"security\":\"_doc\").id(configType).opType(DocWriteRequest.OpType.CREATE).setRefreshPolicy(RefreshPolicy.IMMEDIATE)\n                             .source(cType.toLCString(), readXContent(reader, XContentType.YAML))).actionGet().getId();\n \n-            if (!cType.toLCString().equals(res)) {\n-                throw new Exception(\"   FAIL: Configuration for '\" + cType.toLCString()\n+            if (!configType.equals(res)) {\n+                throw new Exception(\"   FAIL: Configuration for '\" + configType\n                         + \"' failed for unknown reasons. Pls. consult logfile of elasticsearch\");\n             }\n+            LOGGER.info(\"Doc with id '{}' and version {} is updated in {} index.\", configType, configVersion, index);\n+        } catch (VersionConflictEngineException versionConflictEngineException) {\n+            LOGGER.info(\"Doc with id '{}' already exists in {} index. Doing nothing.\", configType, index);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff103ac7fa6b02a1ba39ff12278b381642918282", "author": {"user": {"login": "sujithvm", "name": "Sujith Vadakkepat"}}, "url": "https://github.com/opensearch-project/security/commit/ff103ac7fa6b02a1ba39ff12278b381642918282", "committedDate": "2020-06-23T06:18:59Z", "message": "Put if absent for documents in the security index"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2MTc3Nzky", "url": "https://github.com/opensearch-project/security/pull/402#pullrequestreview-436177792", "createdAt": "2020-06-23T21:39:44Z", "commit": {"oid": "ff103ac7fa6b02a1ba39ff12278b381642918282"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2MjMyMDA1", "url": "https://github.com/opensearch-project/security/pull/402#pullrequestreview-436232005", "createdAt": "2020-06-23T23:43:46Z", "commit": {"oid": "ff103ac7fa6b02a1ba39ff12278b381642918282"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2883, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}