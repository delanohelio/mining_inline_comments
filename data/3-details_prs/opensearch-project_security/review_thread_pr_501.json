{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzMjgzMTkz", "number": 501, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMDo0NTo1NVrOEE1__Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMDozNjowOVrOEI96gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNTE0NDkzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/dlic/auth/http/jwt/HTTPJwtAuthenticator.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMDo0NTo1NVrOGiuL9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMzoxNjo1MVrOGkwUvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA2MTQ5Mg==", "bodyText": "Instead of skipping basic Auth headers, can we skip any non \"bearer\" headers ?", "url": "https://github.com/opensearch-project/security/pull/501#discussion_r439061492", "createdAt": "2020-06-11T20:45:55Z", "author": {"login": "dinusX"}, "path": "src/main/java/com/amazon/dlic/auth/http/jwt/HTTPJwtAuthenticator.java", "diffHunk": "@@ -51,9 +53,12 @@\n \n     protected final Logger log = LogManager.getLogger(this.getClass());\n \n+    private static final Pattern BASIC = Pattern.compile(\"^\\\\s*Basic\\\\s.*\", Pattern.CASE_INSENSITIVE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b5e39130eba95f2f87d7f7cf2796ba166e59609"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEwNTY5Mg==", "bodyText": "It sounds that \"Bearer\" scheme is optional. Please see HTTPJwtAuthenticatorTest.testNonBearer() that test that HTTPJwtAuthenticator can accept JWT in Authorization header without Bearer.", "url": "https://github.com/opensearch-project/security/pull/501#discussion_r439105692", "createdAt": "2020-06-11T22:28:45Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/dlic/auth/http/jwt/HTTPJwtAuthenticator.java", "diffHunk": "@@ -51,9 +53,12 @@\n \n     protected final Logger log = LogManager.getLogger(this.getClass());\n \n+    private static final Pattern BASIC = Pattern.compile(\"^\\\\s*Basic\\\\s.*\", Pattern.CASE_INSENSITIVE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA2MTQ5Mg=="}, "originalCommit": {"oid": "1b5e39130eba95f2f87d7f7cf2796ba166e59609"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEwMDU2OQ==", "bodyText": "I see.\nWould be great if you can add a unit-test for this use-case.\nIn addition to this, there might be other \"Authorization\" headers that needs to be checked similarly as \"Basic\".\nI would prefer also to discuss this internally if we should push this change, because usually this issue is happening when users configure incorrectly the order of authentication configurations.", "url": "https://github.com/opensearch-project/security/pull/501#discussion_r441100569", "createdAt": "2020-06-16T19:46:09Z", "author": {"login": "dinusX"}, "path": "src/main/java/com/amazon/dlic/auth/http/jwt/HTTPJwtAuthenticator.java", "diffHunk": "@@ -51,9 +53,12 @@\n \n     protected final Logger log = LogManager.getLogger(this.getClass());\n \n+    private static final Pattern BASIC = Pattern.compile(\"^\\\\s*Basic\\\\s.*\", Pattern.CASE_INSENSITIVE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA2MTQ5Mg=="}, "originalCommit": {"oid": "1b5e39130eba95f2f87d7f7cf2796ba166e59609"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE5MzY2Mg==", "bodyText": "In addition to this, there might be other \"Authorization\" headers that needs to be checked similarly as \"Basic\".\n\nCan be addressed in a follow up PR if necessary.\n\nI would prefer also to discuss this internally if we should push this change, because usually this issue is happening when users configure incorrectly the order of authentication configurations.\n\nActually it is the correct order. Putting Basic authenticator in front will cause No 'Basic Authorization' header, send 401 and 'WWW-Authenticate Basic' warning message even when a valid JWT token is present and inability to login with JWT. Please see HTTPHelper", "url": "https://github.com/opensearch-project/security/pull/501#discussion_r441193662", "createdAt": "2020-06-16T23:16:51Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/dlic/auth/http/jwt/HTTPJwtAuthenticator.java", "diffHunk": "@@ -51,9 +53,12 @@\n \n     protected final Logger log = LogManager.getLogger(this.getClass());\n \n+    private static final Pattern BASIC = Pattern.compile(\"^\\\\s*Basic\\\\s.*\", Pattern.CASE_INSENSITIVE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA2MTQ5Mg=="}, "originalCommit": {"oid": "1b5e39130eba95f2f87d7f7cf2796ba166e59609"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODE0MzQ0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/dlic/auth/http/jwt/AbstractHTTPJwtAuthenticator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxOTo0Mzo0NFrOGkqj9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMDo0NzoxNFrOGkx3Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA5OTI1NQ==", "bodyText": "According to the specifications the token will always start with \"Basic \". I don't think we should allow spaces before.\nhttps://tools.ietf.org/html/rfc2617#page-5", "url": "https://github.com/opensearch-project/security/pull/501#discussion_r441099255", "createdAt": "2020-06-16T19:43:44Z", "author": {"login": "dinusX"}, "path": "src/main/java/com/amazon/dlic/auth/http/jwt/AbstractHTTPJwtAuthenticator.java", "diffHunk": "@@ -46,17 +48,20 @@\n     private final static Logger log = LogManager.getLogger(AbstractHTTPJwtAuthenticator.class);\n \n     private static final String BEARER = \"bearer \";\n+    private static final Pattern BASIC = Pattern.compile(\"^\\\\s*Basic\\\\s.*\", Pattern.CASE_INSENSITIVE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1342b68df46e612351f0bbd80eb8a1376277e893"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxODg0Mg==", "bodyText": "As we don't need to ensure that it is a valid \"Basic\" authentication scheme here, but only need to filter out invalid JWT tokens to avoid JWT validation warnings, it is OK to allow spaces before \"Basic\" to be consistent with trim() used in HttpHelper.java", "url": "https://github.com/opensearch-project/security/pull/501#discussion_r441218842", "createdAt": "2020-06-17T00:47:14Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/dlic/auth/http/jwt/AbstractHTTPJwtAuthenticator.java", "diffHunk": "@@ -46,17 +48,20 @@\n     private final static Logger log = LogManager.getLogger(AbstractHTTPJwtAuthenticator.class);\n \n     private static final String BEARER = \"bearer \";\n+    private static final Pattern BASIC = Pattern.compile(\"^\\\\s*Basic\\\\s.*\", Pattern.CASE_INSENSITIVE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA5OTI1NQ=="}, "originalCommit": {"oid": "1342b68df46e612351f0bbd80eb8a1376277e893"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3ODM4NDY1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/dlic/auth/http/jwt/AbstractHTTPJwtAuthenticator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMDozNjowOVrOGpQLZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMDo1MTo0NFrOGpQaIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkwOTg2MA==", "bodyText": "Factor out BASIC pattern as it is re-used ?", "url": "https://github.com/opensearch-project/security/pull/501#discussion_r445909860", "createdAt": "2020-06-26T00:36:09Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/dlic/auth/http/jwt/AbstractHTTPJwtAuthenticator.java", "diffHunk": "@@ -46,17 +48,20 @@\n     private final static Logger log = LogManager.getLogger(AbstractHTTPJwtAuthenticator.class);\n \n     private static final String BEARER = \"bearer \";\n+    private static final Pattern BASIC = Pattern.compile(\"^\\\\s*Basic\\\\s.*\", Pattern.CASE_INSENSITIVE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0efaf3bf26c4798ef11a18c57f155b70cf60526e"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkxMDAzNA==", "bodyText": "Out of scope for PR but any reason why HTTPJwtAuthenticator\ndoes not inherit from AbstractHTTPJwtAuthenticator ?", "url": "https://github.com/opensearch-project/security/pull/501#discussion_r445910034", "createdAt": "2020-06-26T00:36:57Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/dlic/auth/http/jwt/AbstractHTTPJwtAuthenticator.java", "diffHunk": "@@ -46,17 +48,20 @@\n     private final static Logger log = LogManager.getLogger(AbstractHTTPJwtAuthenticator.class);\n \n     private static final String BEARER = \"bearer \";\n+    private static final Pattern BASIC = Pattern.compile(\"^\\\\s*Basic\\\\s.*\", Pattern.CASE_INSENSITIVE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkwOTg2MA=="}, "originalCommit": {"oid": "0efaf3bf26c4798ef11a18c57f155b70cf60526e"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkxMzYzNQ==", "bodyText": "I don't see any good reason, will be good to cleanup this in a follow up PR.", "url": "https://github.com/opensearch-project/security/pull/501#discussion_r445913635", "createdAt": "2020-06-26T00:51:44Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/dlic/auth/http/jwt/AbstractHTTPJwtAuthenticator.java", "diffHunk": "@@ -46,17 +48,20 @@\n     private final static Logger log = LogManager.getLogger(AbstractHTTPJwtAuthenticator.class);\n \n     private static final String BEARER = \"bearer \";\n+    private static final Pattern BASIC = Pattern.compile(\"^\\\\s*Basic\\\\s.*\", Pattern.CASE_INSENSITIVE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkwOTg2MA=="}, "originalCommit": {"oid": "0efaf3bf26c4798ef11a18c57f155b70cf60526e"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2485, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}