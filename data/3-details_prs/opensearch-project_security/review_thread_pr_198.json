{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxNTcxNDAx", "number": 198, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMjo0MTowNVrODj_zEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMDowNDoxNFrODm1hQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDcyMDE2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/ConfigModelV7.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMjo0MTowNVrOFwHM9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMjo0MTowNVrOFwHM9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk5Mzk3Mw==", "bodyText": "can we rename it to resolvedRequestedIndices? (as these are indices requested from user.) It will help code more readable down into method where we added lot more complexity.", "url": "https://github.com/opensearch-project/security/pull/198#discussion_r385993973", "createdAt": "2020-02-29T02:41:05Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/ConfigModelV7.java", "diffHunk": "@@ -936,38 +936,30 @@ private static String toQuotedCommaSeparatedString(final Set<String> roles) {\n         }));\n     }\n \n-    private static boolean impliesTypePerm(Set<IndexPattern> ipatterns, Resolved resolved, User user, String[] actions,\n-            IndexNameExpressionResolver resolver, ClusterService cs) {\n-        Set<String> matchingIndex = new HashSet<>(resolved.getAllIndices());\n-\n-        for (String in : resolved.getAllIndices()) {\n-            //find index patterns who are matching\n-            Set<String> matchingActions = new HashSet<>(Arrays.asList(actions));\n-            //Set<String> matchingTypes = new HashSet<>(resolved.getTypes(-));\n-            for (IndexPattern p : ipatterns) {\n-                if (WildcardMatcher.matchAny(p.getResolvedIndexPattern(user, resolver, cs), in)) {\n-                    //per resolved index per pattern\n-                    //for (String t : resolved.getTypes(-)) {\n-                        //for (TypePerm tp : p.typePerms) {\n-                            //if (WildcardMatcher.match(tp.typePattern, t)) {\n-                                //matchingTypes.remove(t);\n-                                for (String a : Arrays.asList(actions)) {\n-                                    if (WildcardMatcher.matchAny(p.perms, a)) {\n-                                        matchingActions.remove(a);\n-                                    }\n-                                }\n-                            //}\n-                        //}\n-                    //}\n-                }\n-            }\n-\n-            if (matchingActions.isEmpty() /*&& matchingTypes.isEmpty()*/) {\n-                matchingIndex.remove(in);\n-            }\n+    static final class ResolvedIndexPattern{\n+        public String[] pattern;\n+        public Set<String> perms;\n+        public ResolvedIndexPattern(String[] pattern, Set<String> perms) {\n+            this.pattern = pattern;\n+            this.perms = perms;\n         }\n+    }\n \n-        return matchingIndex.isEmpty();\n+    private static boolean impliesTypePerm(Set<IndexPattern> ipatterns, Resolved resolved, User user, String[] actions,\n+                                           IndexNameExpressionResolver resolver, ClusterService cs) {\n+        Set<String> resolvedIndices = resolved.getAllIndices();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23adcbc01bee07da3fc8c19ebb58f7b94dbbf29a"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDcyMDg1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/ConfigModelV7.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMjo0MjozNVrOFwHNXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMjo0MjozNVrOFwHNXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk5NDA3Nw==", "bodyText": "Can we rename actions to requestedActions? (As these are actions requested by user and not coming from roles definition) It will help understanding code better.", "url": "https://github.com/opensearch-project/security/pull/198#discussion_r385994077", "createdAt": "2020-02-29T02:42:35Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/ConfigModelV7.java", "diffHunk": "@@ -936,38 +936,30 @@ private static String toQuotedCommaSeparatedString(final Set<String> roles) {\n         }));\n     }\n \n-    private static boolean impliesTypePerm(Set<IndexPattern> ipatterns, Resolved resolved, User user, String[] actions,\n-            IndexNameExpressionResolver resolver, ClusterService cs) {\n-        Set<String> matchingIndex = new HashSet<>(resolved.getAllIndices());\n-\n-        for (String in : resolved.getAllIndices()) {\n-            //find index patterns who are matching\n-            Set<String> matchingActions = new HashSet<>(Arrays.asList(actions));\n-            //Set<String> matchingTypes = new HashSet<>(resolved.getTypes(-));\n-            for (IndexPattern p : ipatterns) {\n-                if (WildcardMatcher.matchAny(p.getResolvedIndexPattern(user, resolver, cs), in)) {\n-                    //per resolved index per pattern\n-                    //for (String t : resolved.getTypes(-)) {\n-                        //for (TypePerm tp : p.typePerms) {\n-                            //if (WildcardMatcher.match(tp.typePattern, t)) {\n-                                //matchingTypes.remove(t);\n-                                for (String a : Arrays.asList(actions)) {\n-                                    if (WildcardMatcher.matchAny(p.perms, a)) {\n-                                        matchingActions.remove(a);\n-                                    }\n-                                }\n-                            //}\n-                        //}\n-                    //}\n-                }\n-            }\n-\n-            if (matchingActions.isEmpty() /*&& matchingTypes.isEmpty()*/) {\n-                matchingIndex.remove(in);\n-            }\n+    static final class ResolvedIndexPattern{\n+        public String[] pattern;\n+        public Set<String> perms;\n+        public ResolvedIndexPattern(String[] pattern, Set<String> perms) {\n+            this.pattern = pattern;\n+            this.perms = perms;\n         }\n+    }\n \n-        return matchingIndex.isEmpty();\n+    private static boolean impliesTypePerm(Set<IndexPattern> ipatterns, Resolved resolved, User user, String[] actions,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23adcbc01bee07da3fc8c19ebb58f7b94dbbf29a"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDcyMTYyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/ConfigModelV7.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMjo0Mzo1OFrOFwHNxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxMzoyODo0NFrOFwOLog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk5NDE4Mw==", "bodyText": "Can we rename it ResolvedIndexPattern to indexPatternsAndPermissions ? (as it has patterns and permissions)", "url": "https://github.com/opensearch-project/security/pull/198#discussion_r385994183", "createdAt": "2020-02-29T02:43:58Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/ConfigModelV7.java", "diffHunk": "@@ -936,38 +936,30 @@ private static String toQuotedCommaSeparatedString(final Set<String> roles) {\n         }));\n     }\n \n-    private static boolean impliesTypePerm(Set<IndexPattern> ipatterns, Resolved resolved, User user, String[] actions,\n-            IndexNameExpressionResolver resolver, ClusterService cs) {\n-        Set<String> matchingIndex = new HashSet<>(resolved.getAllIndices());\n-\n-        for (String in : resolved.getAllIndices()) {\n-            //find index patterns who are matching\n-            Set<String> matchingActions = new HashSet<>(Arrays.asList(actions));\n-            //Set<String> matchingTypes = new HashSet<>(resolved.getTypes(-));\n-            for (IndexPattern p : ipatterns) {\n-                if (WildcardMatcher.matchAny(p.getResolvedIndexPattern(user, resolver, cs), in)) {\n-                    //per resolved index per pattern\n-                    //for (String t : resolved.getTypes(-)) {\n-                        //for (TypePerm tp : p.typePerms) {\n-                            //if (WildcardMatcher.match(tp.typePattern, t)) {\n-                                //matchingTypes.remove(t);\n-                                for (String a : Arrays.asList(actions)) {\n-                                    if (WildcardMatcher.matchAny(p.perms, a)) {\n-                                        matchingActions.remove(a);\n-                                    }\n-                                }\n-                            //}\n-                        //}\n-                    //}\n-                }\n-            }\n-\n-            if (matchingActions.isEmpty() /*&& matchingTypes.isEmpty()*/) {\n-                matchingIndex.remove(in);\n-            }\n+    static final class ResolvedIndexPattern{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23adcbc01bee07da3fc8c19ebb58f7b94dbbf29a"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEwODMyMg==", "bodyText": "starting with lowercase? Or did you mean IndexPatternsAndPermissions ?", "url": "https://github.com/opensearch-project/security/pull/198#discussion_r386108322", "createdAt": "2020-03-01T13:28:44Z", "author": {"login": "DmitryOlshansky"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/ConfigModelV7.java", "diffHunk": "@@ -936,38 +936,30 @@ private static String toQuotedCommaSeparatedString(final Set<String> roles) {\n         }));\n     }\n \n-    private static boolean impliesTypePerm(Set<IndexPattern> ipatterns, Resolved resolved, User user, String[] actions,\n-            IndexNameExpressionResolver resolver, ClusterService cs) {\n-        Set<String> matchingIndex = new HashSet<>(resolved.getAllIndices());\n-\n-        for (String in : resolved.getAllIndices()) {\n-            //find index patterns who are matching\n-            Set<String> matchingActions = new HashSet<>(Arrays.asList(actions));\n-            //Set<String> matchingTypes = new HashSet<>(resolved.getTypes(-));\n-            for (IndexPattern p : ipatterns) {\n-                if (WildcardMatcher.matchAny(p.getResolvedIndexPattern(user, resolver, cs), in)) {\n-                    //per resolved index per pattern\n-                    //for (String t : resolved.getTypes(-)) {\n-                        //for (TypePerm tp : p.typePerms) {\n-                            //if (WildcardMatcher.match(tp.typePattern, t)) {\n-                                //matchingTypes.remove(t);\n-                                for (String a : Arrays.asList(actions)) {\n-                                    if (WildcardMatcher.matchAny(p.perms, a)) {\n-                                        matchingActions.remove(a);\n-                                    }\n-                                }\n-                            //}\n-                        //}\n-                    //}\n-                }\n-            }\n-\n-            if (matchingActions.isEmpty() /*&& matchingTypes.isEmpty()*/) {\n-                matchingIndex.remove(in);\n-            }\n+    static final class ResolvedIndexPattern{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk5NDE4Mw=="}, "originalCommit": {"oid": "23adcbc01bee07da3fc8c19ebb58f7b94dbbf29a"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDcyMzYzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/ConfigModelV7.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMjo0ODowNVrOFwHO3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMjo0ODowNVrOFwHO3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk5NDQ2Mg==", "bodyText": "Can we rename resolvedIndexPatterns to indexPatternsAndPermsFromRole? (as these are resolved index patterns and permissions from role)", "url": "https://github.com/opensearch-project/security/pull/198#discussion_r385994462", "createdAt": "2020-02-29T02:48:05Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/ConfigModelV7.java", "diffHunk": "@@ -936,38 +936,30 @@ private static String toQuotedCommaSeparatedString(final Set<String> roles) {\n         }));\n     }\n \n-    private static boolean impliesTypePerm(Set<IndexPattern> ipatterns, Resolved resolved, User user, String[] actions,\n-            IndexNameExpressionResolver resolver, ClusterService cs) {\n-        Set<String> matchingIndex = new HashSet<>(resolved.getAllIndices());\n-\n-        for (String in : resolved.getAllIndices()) {\n-            //find index patterns who are matching\n-            Set<String> matchingActions = new HashSet<>(Arrays.asList(actions));\n-            //Set<String> matchingTypes = new HashSet<>(resolved.getTypes(-));\n-            for (IndexPattern p : ipatterns) {\n-                if (WildcardMatcher.matchAny(p.getResolvedIndexPattern(user, resolver, cs), in)) {\n-                    //per resolved index per pattern\n-                    //for (String t : resolved.getTypes(-)) {\n-                        //for (TypePerm tp : p.typePerms) {\n-                            //if (WildcardMatcher.match(tp.typePattern, t)) {\n-                                //matchingTypes.remove(t);\n-                                for (String a : Arrays.asList(actions)) {\n-                                    if (WildcardMatcher.matchAny(p.perms, a)) {\n-                                        matchingActions.remove(a);\n-                                    }\n-                                }\n-                            //}\n-                        //}\n-                    //}\n-                }\n-            }\n-\n-            if (matchingActions.isEmpty() /*&& matchingTypes.isEmpty()*/) {\n-                matchingIndex.remove(in);\n-            }\n+    static final class ResolvedIndexPattern{\n+        public String[] pattern;\n+        public Set<String> perms;\n+        public ResolvedIndexPattern(String[] pattern, Set<String> perms) {\n+            this.pattern = pattern;\n+            this.perms = perms;\n         }\n+    }\n \n-        return matchingIndex.isEmpty();\n+    private static boolean impliesTypePerm(Set<IndexPattern> ipatterns, Resolved resolved, User user, String[] actions,\n+                                           IndexNameExpressionResolver resolver, ClusterService cs) {\n+        Set<String> resolvedIndices = resolved.getAllIndices();\n+        List<ResolvedIndexPattern> resolvedIndexPatterns = ipatterns", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23adcbc01bee07da3fc8c19ebb58f7b94dbbf29a"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDM3ODg3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/ConfigModelV7.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxOToyOTozMFrOF0d4Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxMDo0MToxMVrOF2Y5yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU1OTc4Nw==", "bodyText": "nit: declare class private", "url": "https://github.com/opensearch-project/security/pull/198#discussion_r390559787", "createdAt": "2020-03-10T19:29:30Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/ConfigModelV7.java", "diffHunk": "@@ -936,38 +935,30 @@ private static String toQuotedCommaSeparatedString(final Set<String> roles) {\n         }));\n     }\n \n-    private static boolean impliesTypePerm(Set<IndexPattern> ipatterns, Resolved resolved, User user, String[] actions,\n-            IndexNameExpressionResolver resolver, ClusterService cs) {\n-        Set<String> matchingIndex = new HashSet<>(resolved.getAllIndices());\n-\n-        for (String in : resolved.getAllIndices()) {\n-            //find index patterns who are matching\n-            Set<String> matchingActions = new HashSet<>(Arrays.asList(actions));\n-            //Set<String> matchingTypes = new HashSet<>(resolved.getTypes(-));\n-            for (IndexPattern p : ipatterns) {\n-                if (WildcardMatcher.matchAny(p.getResolvedIndexPattern(user, resolver, cs), in)) {\n-                    //per resolved index per pattern\n-                    //for (String t : resolved.getTypes(-)) {\n-                        //for (TypePerm tp : p.typePerms) {\n-                            //if (WildcardMatcher.match(tp.typePattern, t)) {\n-                                //matchingTypes.remove(t);\n-                                for (String a : Arrays.asList(actions)) {\n-                                    if (WildcardMatcher.matchAny(p.perms, a)) {\n-                                        matchingActions.remove(a);\n-                                    }\n-                                }\n-                            //}\n-                        //}\n-                    //}\n-                }\n-            }\n-\n-            if (matchingActions.isEmpty() /*&& matchingTypes.isEmpty()*/) {\n-                matchingIndex.remove(in);\n-            }\n+    static final class IndexPatternsAndPermissions {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "980ca990ff184b30655cf02aecc25901b4551257"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3NTQzNQ==", "bodyText": "Also covered", "url": "https://github.com/opensearch-project/security/pull/198#discussion_r392575435", "createdAt": "2020-03-14T10:41:11Z", "author": {"login": "DmitryOlshansky"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/ConfigModelV7.java", "diffHunk": "@@ -936,38 +935,30 @@ private static String toQuotedCommaSeparatedString(final Set<String> roles) {\n         }));\n     }\n \n-    private static boolean impliesTypePerm(Set<IndexPattern> ipatterns, Resolved resolved, User user, String[] actions,\n-            IndexNameExpressionResolver resolver, ClusterService cs) {\n-        Set<String> matchingIndex = new HashSet<>(resolved.getAllIndices());\n-\n-        for (String in : resolved.getAllIndices()) {\n-            //find index patterns who are matching\n-            Set<String> matchingActions = new HashSet<>(Arrays.asList(actions));\n-            //Set<String> matchingTypes = new HashSet<>(resolved.getTypes(-));\n-            for (IndexPattern p : ipatterns) {\n-                if (WildcardMatcher.matchAny(p.getResolvedIndexPattern(user, resolver, cs), in)) {\n-                    //per resolved index per pattern\n-                    //for (String t : resolved.getTypes(-)) {\n-                        //for (TypePerm tp : p.typePerms) {\n-                            //if (WildcardMatcher.match(tp.typePattern, t)) {\n-                                //matchingTypes.remove(t);\n-                                for (String a : Arrays.asList(actions)) {\n-                                    if (WildcardMatcher.matchAny(p.perms, a)) {\n-                                        matchingActions.remove(a);\n-                                    }\n-                                }\n-                            //}\n-                        //}\n-                    //}\n-                }\n-            }\n-\n-            if (matchingActions.isEmpty() /*&& matchingTypes.isEmpty()*/) {\n-                matchingIndex.remove(in);\n-            }\n+    static final class IndexPatternsAndPermissions {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU1OTc4Nw=="}, "originalCommit": {"oid": "980ca990ff184b30655cf02aecc25901b4551257"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDM4NTk2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/ConfigModelV7.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxOTozMTo0NFrOF0d8mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxMDo0MDowMlrOF2Y5fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU2MDkyMA==", "bodyText": "Declare both pattern and perms as private and final. Introduce public boolean matches(String index, String action).", "url": "https://github.com/opensearch-project/security/pull/198#discussion_r390560920", "createdAt": "2020-03-10T19:31:44Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/ConfigModelV7.java", "diffHunk": "@@ -936,38 +935,30 @@ private static String toQuotedCommaSeparatedString(final Set<String> roles) {\n         }));\n     }\n \n-    private static boolean impliesTypePerm(Set<IndexPattern> ipatterns, Resolved resolved, User user, String[] actions,\n-            IndexNameExpressionResolver resolver, ClusterService cs) {\n-        Set<String> matchingIndex = new HashSet<>(resolved.getAllIndices());\n-\n-        for (String in : resolved.getAllIndices()) {\n-            //find index patterns who are matching\n-            Set<String> matchingActions = new HashSet<>(Arrays.asList(actions));\n-            //Set<String> matchingTypes = new HashSet<>(resolved.getTypes(-));\n-            for (IndexPattern p : ipatterns) {\n-                if (WildcardMatcher.matchAny(p.getResolvedIndexPattern(user, resolver, cs), in)) {\n-                    //per resolved index per pattern\n-                    //for (String t : resolved.getTypes(-)) {\n-                        //for (TypePerm tp : p.typePerms) {\n-                            //if (WildcardMatcher.match(tp.typePattern, t)) {\n-                                //matchingTypes.remove(t);\n-                                for (String a : Arrays.asList(actions)) {\n-                                    if (WildcardMatcher.matchAny(p.perms, a)) {\n-                                        matchingActions.remove(a);\n-                                    }\n-                                }\n-                            //}\n-                        //}\n-                    //}\n-                }\n-            }\n-\n-            if (matchingActions.isEmpty() /*&& matchingTypes.isEmpty()*/) {\n-                matchingIndex.remove(in);\n-            }\n+    static final class IndexPatternsAndPermissions {\n+        public String[] pattern;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "980ca990ff184b30655cf02aecc25901b4551257"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3NTM1OA==", "bodyText": "Done", "url": "https://github.com/opensearch-project/security/pull/198#discussion_r392575358", "createdAt": "2020-03-14T10:40:02Z", "author": {"login": "DmitryOlshansky"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/ConfigModelV7.java", "diffHunk": "@@ -936,38 +935,30 @@ private static String toQuotedCommaSeparatedString(final Set<String> roles) {\n         }));\n     }\n \n-    private static boolean impliesTypePerm(Set<IndexPattern> ipatterns, Resolved resolved, User user, String[] actions,\n-            IndexNameExpressionResolver resolver, ClusterService cs) {\n-        Set<String> matchingIndex = new HashSet<>(resolved.getAllIndices());\n-\n-        for (String in : resolved.getAllIndices()) {\n-            //find index patterns who are matching\n-            Set<String> matchingActions = new HashSet<>(Arrays.asList(actions));\n-            //Set<String> matchingTypes = new HashSet<>(resolved.getTypes(-));\n-            for (IndexPattern p : ipatterns) {\n-                if (WildcardMatcher.matchAny(p.getResolvedIndexPattern(user, resolver, cs), in)) {\n-                    //per resolved index per pattern\n-                    //for (String t : resolved.getTypes(-)) {\n-                        //for (TypePerm tp : p.typePerms) {\n-                            //if (WildcardMatcher.match(tp.typePattern, t)) {\n-                                //matchingTypes.remove(t);\n-                                for (String a : Arrays.asList(actions)) {\n-                                    if (WildcardMatcher.matchAny(p.perms, a)) {\n-                                        matchingActions.remove(a);\n-                                    }\n-                                }\n-                            //}\n-                        //}\n-                    //}\n-                }\n-            }\n-\n-            if (matchingActions.isEmpty() /*&& matchingTypes.isEmpty()*/) {\n-                matchingIndex.remove(in);\n-            }\n+    static final class IndexPatternsAndPermissions {\n+        public String[] pattern;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU2MDkyMA=="}, "originalCommit": {"oid": "980ca990ff184b30655cf02aecc25901b4551257"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDQ2OTYxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/ConfigModelV7.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxOTo1NzoyNlrOF0exMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxMDo0MTowMVrOF2Y5xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU3NDM4Ng==", "bodyText": "consider using IndexPatternsAndPermissions[] instead of List<> and collect toArray().", "url": "https://github.com/opensearch-project/security/pull/198#discussion_r390574386", "createdAt": "2020-03-10T19:57:26Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/ConfigModelV7.java", "diffHunk": "@@ -936,38 +935,30 @@ private static String toQuotedCommaSeparatedString(final Set<String> roles) {\n         }));\n     }\n \n-    private static boolean impliesTypePerm(Set<IndexPattern> ipatterns, Resolved resolved, User user, String[] actions,\n-            IndexNameExpressionResolver resolver, ClusterService cs) {\n-        Set<String> matchingIndex = new HashSet<>(resolved.getAllIndices());\n-\n-        for (String in : resolved.getAllIndices()) {\n-            //find index patterns who are matching\n-            Set<String> matchingActions = new HashSet<>(Arrays.asList(actions));\n-            //Set<String> matchingTypes = new HashSet<>(resolved.getTypes(-));\n-            for (IndexPattern p : ipatterns) {\n-                if (WildcardMatcher.matchAny(p.getResolvedIndexPattern(user, resolver, cs), in)) {\n-                    //per resolved index per pattern\n-                    //for (String t : resolved.getTypes(-)) {\n-                        //for (TypePerm tp : p.typePerms) {\n-                            //if (WildcardMatcher.match(tp.typePattern, t)) {\n-                                //matchingTypes.remove(t);\n-                                for (String a : Arrays.asList(actions)) {\n-                                    if (WildcardMatcher.matchAny(p.perms, a)) {\n-                                        matchingActions.remove(a);\n-                                    }\n-                                }\n-                            //}\n-                        //}\n-                    //}\n-                }\n-            }\n-\n-            if (matchingActions.isEmpty() /*&& matchingTypes.isEmpty()*/) {\n-                matchingIndex.remove(in);\n-            }\n+    static final class IndexPatternsAndPermissions {\n+        public String[] pattern;\n+        public Set<String> perms;\n+        public IndexPatternsAndPermissions(String[] pattern, Set<String> perms) {\n+            this.pattern = pattern;\n+            this.perms = perms;\n         }\n+    }\n \n-        return matchingIndex.isEmpty();\n+    private static boolean impliesTypePerm(Set<IndexPattern> ipatterns, Resolved resolved, User user, String[] requestedActions,\n+                                           IndexNameExpressionResolver resolver, ClusterService cs) {\n+        Set<String> resolvedRequestedIndices = resolved.getAllIndices();\n+        List<IndexPatternsAndPermissions> indexPatternsAndPermissions = ipatterns", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "980ca990ff184b30655cf02aecc25901b4551257"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3NTQyOQ==", "bodyText": "Done", "url": "https://github.com/opensearch-project/security/pull/198#discussion_r392575429", "createdAt": "2020-03-14T10:41:01Z", "author": {"login": "DmitryOlshansky"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/ConfigModelV7.java", "diffHunk": "@@ -936,38 +935,30 @@ private static String toQuotedCommaSeparatedString(final Set<String> roles) {\n         }));\n     }\n \n-    private static boolean impliesTypePerm(Set<IndexPattern> ipatterns, Resolved resolved, User user, String[] actions,\n-            IndexNameExpressionResolver resolver, ClusterService cs) {\n-        Set<String> matchingIndex = new HashSet<>(resolved.getAllIndices());\n-\n-        for (String in : resolved.getAllIndices()) {\n-            //find index patterns who are matching\n-            Set<String> matchingActions = new HashSet<>(Arrays.asList(actions));\n-            //Set<String> matchingTypes = new HashSet<>(resolved.getTypes(-));\n-            for (IndexPattern p : ipatterns) {\n-                if (WildcardMatcher.matchAny(p.getResolvedIndexPattern(user, resolver, cs), in)) {\n-                    //per resolved index per pattern\n-                    //for (String t : resolved.getTypes(-)) {\n-                        //for (TypePerm tp : p.typePerms) {\n-                            //if (WildcardMatcher.match(tp.typePattern, t)) {\n-                                //matchingTypes.remove(t);\n-                                for (String a : Arrays.asList(actions)) {\n-                                    if (WildcardMatcher.matchAny(p.perms, a)) {\n-                                        matchingActions.remove(a);\n-                                    }\n-                                }\n-                            //}\n-                        //}\n-                    //}\n-                }\n-            }\n-\n-            if (matchingActions.isEmpty() /*&& matchingTypes.isEmpty()*/) {\n-                matchingIndex.remove(in);\n-            }\n+    static final class IndexPatternsAndPermissions {\n+        public String[] pattern;\n+        public Set<String> perms;\n+        public IndexPatternsAndPermissions(String[] pattern, Set<String> perms) {\n+            this.pattern = pattern;\n+            this.perms = perms;\n         }\n+    }\n \n-        return matchingIndex.isEmpty();\n+    private static boolean impliesTypePerm(Set<IndexPattern> ipatterns, Resolved resolved, User user, String[] requestedActions,\n+                                           IndexNameExpressionResolver resolver, ClusterService cs) {\n+        Set<String> resolvedRequestedIndices = resolved.getAllIndices();\n+        List<IndexPatternsAndPermissions> indexPatternsAndPermissions = ipatterns", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU3NDM4Ng=="}, "originalCommit": {"oid": "980ca990ff184b30655cf02aecc25901b4551257"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDQ5MzQ2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/ConfigModelV7.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMDowNDoxNFrOF0fABw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxMDo0MDo0MFrOF2Y5rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU3ODE4Mw==", "bodyText": "rename rip to indexPatternsAndPermissions (or less preferable ipap).", "url": "https://github.com/opensearch-project/security/pull/198#discussion_r390578183", "createdAt": "2020-03-10T20:04:14Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/ConfigModelV7.java", "diffHunk": "@@ -936,38 +935,30 @@ private static String toQuotedCommaSeparatedString(final Set<String> roles) {\n         }));\n     }\n \n-    private static boolean impliesTypePerm(Set<IndexPattern> ipatterns, Resolved resolved, User user, String[] actions,\n-            IndexNameExpressionResolver resolver, ClusterService cs) {\n-        Set<String> matchingIndex = new HashSet<>(resolved.getAllIndices());\n-\n-        for (String in : resolved.getAllIndices()) {\n-            //find index patterns who are matching\n-            Set<String> matchingActions = new HashSet<>(Arrays.asList(actions));\n-            //Set<String> matchingTypes = new HashSet<>(resolved.getTypes(-));\n-            for (IndexPattern p : ipatterns) {\n-                if (WildcardMatcher.matchAny(p.getResolvedIndexPattern(user, resolver, cs), in)) {\n-                    //per resolved index per pattern\n-                    //for (String t : resolved.getTypes(-)) {\n-                        //for (TypePerm tp : p.typePerms) {\n-                            //if (WildcardMatcher.match(tp.typePattern, t)) {\n-                                //matchingTypes.remove(t);\n-                                for (String a : Arrays.asList(actions)) {\n-                                    if (WildcardMatcher.matchAny(p.perms, a)) {\n-                                        matchingActions.remove(a);\n-                                    }\n-                                }\n-                            //}\n-                        //}\n-                    //}\n-                }\n-            }\n-\n-            if (matchingActions.isEmpty() /*&& matchingTypes.isEmpty()*/) {\n-                matchingIndex.remove(in);\n-            }\n+    static final class IndexPatternsAndPermissions {\n+        public String[] pattern;\n+        public Set<String> perms;\n+        public IndexPatternsAndPermissions(String[] pattern, Set<String> perms) {\n+            this.pattern = pattern;\n+            this.perms = perms;\n         }\n+    }\n \n-        return matchingIndex.isEmpty();\n+    private static boolean impliesTypePerm(Set<IndexPattern> ipatterns, Resolved resolved, User user, String[] requestedActions,\n+                                           IndexNameExpressionResolver resolver, ClusterService cs) {\n+        Set<String> resolvedRequestedIndices = resolved.getAllIndices();\n+        List<IndexPatternsAndPermissions> indexPatternsAndPermissions = ipatterns\n+                .stream()\n+                .map(p -> new IndexPatternsAndPermissions(p.getResolvedIndexPattern(user, resolver, cs), p.perms))\n+                .collect(Collectors.toList());\n+        return resolvedRequestedIndices\n+                .stream()\n+                .allMatch(index ->\n+                        Arrays.stream(requestedActions).allMatch(action -> indexPatternsAndPermissions\n+                                .stream()\n+                                .anyMatch(rip -> WildcardMatcher.matchAny(rip.pattern, index) && WildcardMatcher.matchAny(rip.perms, action))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "980ca990ff184b30655cf02aecc25901b4551257"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3NTQwNQ==", "bodyText": "used ipap as the scope is 3 lines and I believe in short names for short scopes.", "url": "https://github.com/opensearch-project/security/pull/198#discussion_r392575405", "createdAt": "2020-03-14T10:40:40Z", "author": {"login": "DmitryOlshansky"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/ConfigModelV7.java", "diffHunk": "@@ -936,38 +935,30 @@ private static String toQuotedCommaSeparatedString(final Set<String> roles) {\n         }));\n     }\n \n-    private static boolean impliesTypePerm(Set<IndexPattern> ipatterns, Resolved resolved, User user, String[] actions,\n-            IndexNameExpressionResolver resolver, ClusterService cs) {\n-        Set<String> matchingIndex = new HashSet<>(resolved.getAllIndices());\n-\n-        for (String in : resolved.getAllIndices()) {\n-            //find index patterns who are matching\n-            Set<String> matchingActions = new HashSet<>(Arrays.asList(actions));\n-            //Set<String> matchingTypes = new HashSet<>(resolved.getTypes(-));\n-            for (IndexPattern p : ipatterns) {\n-                if (WildcardMatcher.matchAny(p.getResolvedIndexPattern(user, resolver, cs), in)) {\n-                    //per resolved index per pattern\n-                    //for (String t : resolved.getTypes(-)) {\n-                        //for (TypePerm tp : p.typePerms) {\n-                            //if (WildcardMatcher.match(tp.typePattern, t)) {\n-                                //matchingTypes.remove(t);\n-                                for (String a : Arrays.asList(actions)) {\n-                                    if (WildcardMatcher.matchAny(p.perms, a)) {\n-                                        matchingActions.remove(a);\n-                                    }\n-                                }\n-                            //}\n-                        //}\n-                    //}\n-                }\n-            }\n-\n-            if (matchingActions.isEmpty() /*&& matchingTypes.isEmpty()*/) {\n-                matchingIndex.remove(in);\n-            }\n+    static final class IndexPatternsAndPermissions {\n+        public String[] pattern;\n+        public Set<String> perms;\n+        public IndexPatternsAndPermissions(String[] pattern, Set<String> perms) {\n+            this.pattern = pattern;\n+            this.perms = perms;\n         }\n+    }\n \n-        return matchingIndex.isEmpty();\n+    private static boolean impliesTypePerm(Set<IndexPattern> ipatterns, Resolved resolved, User user, String[] requestedActions,\n+                                           IndexNameExpressionResolver resolver, ClusterService cs) {\n+        Set<String> resolvedRequestedIndices = resolved.getAllIndices();\n+        List<IndexPatternsAndPermissions> indexPatternsAndPermissions = ipatterns\n+                .stream()\n+                .map(p -> new IndexPatternsAndPermissions(p.getResolvedIndexPattern(user, resolver, cs), p.perms))\n+                .collect(Collectors.toList());\n+        return resolvedRequestedIndices\n+                .stream()\n+                .allMatch(index ->\n+                        Arrays.stream(requestedActions).allMatch(action -> indexPatternsAndPermissions\n+                                .stream()\n+                                .anyMatch(rip -> WildcardMatcher.matchAny(rip.pattern, index) && WildcardMatcher.matchAny(rip.perms, action))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU3ODE4Mw=="}, "originalCommit": {"oid": "980ca990ff184b30655cf02aecc25901b4551257"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2509, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}