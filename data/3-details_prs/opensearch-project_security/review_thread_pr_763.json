{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxMTc3Njc5", "number": 763, "reviewThreads": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMDoxNTozNFrOEs98ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMDoxODozNFrOE8YX3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTg3Njg1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auth/BackendRegistry.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMDoxNTozNFrOHgflKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNzoyNjoxOVrOHrDwRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgzMzg5Ng==", "bodyText": "Why do we need to populate both?", "url": "https://github.com/opensearch-project/security/pull/763#discussion_r503833896", "createdAt": "2020-10-13T10:15:34Z", "author": {"login": "krishna-ggk"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auth/BackendRegistry.java", "diffHunk": "@@ -494,7 +500,9 @@ public boolean authenticate(final RestRequest request, final RestChannel channel\n \n         if(authenticated) {\n             final User impersonatedUser = impersonate(request, authenticatedUser);\n-            threadContext.putTransient(ConfigConstants.OPENDISTRO_SECURITY_USER, impersonatedUser==null?authenticatedUser:impersonatedUser);\n+            final User loggedInUser = impersonatedUser==null?authenticatedUser:impersonatedUser;\n+            threadContext.putTransient(ConfigConstants.OPENDISTRO_SECURITY_USER, loggedInUser);\n+            threadContext.putTransient(ConfigConstants.OPENDISTRO_SECURITY_USER_STRING, loggedInUser.getUserString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYyMTU4Mw==", "bodyText": "This is just to get the user details out to the plugins apart from security (by directly not taking dependency on security plugin). Set only for the REST requests after auth.", "url": "https://github.com/opensearch-project/security/pull/763#discussion_r507621583", "createdAt": "2020-10-19T09:57:37Z", "author": {"login": "saikaranam-amazon"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auth/BackendRegistry.java", "diffHunk": "@@ -494,7 +500,9 @@ public boolean authenticate(final RestRequest request, final RestChannel channel\n \n         if(authenticated) {\n             final User impersonatedUser = impersonate(request, authenticatedUser);\n-            threadContext.putTransient(ConfigConstants.OPENDISTRO_SECURITY_USER, impersonatedUser==null?authenticatedUser:impersonatedUser);\n+            final User loggedInUser = impersonatedUser==null?authenticatedUser:impersonatedUser;\n+            threadContext.putTransient(ConfigConstants.OPENDISTRO_SECURITY_USER, loggedInUser);\n+            threadContext.putTransient(ConfigConstants.OPENDISTRO_SECURITY_USER_STRING, loggedInUser.getUserString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgzMzg5Ng=="}, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTczMjY1Ng==", "bodyText": "How is it related to user injection for transport requests?", "url": "https://github.com/opensearch-project/security/pull/763#discussion_r511732656", "createdAt": "2020-10-26T05:56:59Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auth/BackendRegistry.java", "diffHunk": "@@ -494,7 +500,9 @@ public boolean authenticate(final RestRequest request, final RestChannel channel\n \n         if(authenticated) {\n             final User impersonatedUser = impersonate(request, authenticatedUser);\n-            threadContext.putTransient(ConfigConstants.OPENDISTRO_SECURITY_USER, impersonatedUser==null?authenticatedUser:impersonatedUser);\n+            final User loggedInUser = impersonatedUser==null?authenticatedUser:impersonatedUser;\n+            threadContext.putTransient(ConfigConstants.OPENDISTRO_SECURITY_USER, loggedInUser);\n+            threadContext.putTransient(ConfigConstants.OPENDISTRO_SECURITY_USER_STRING, loggedInUser.getUserString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgzMzg5Ng=="}, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjUzMDkzNw==", "bodyText": "This gets the user details and plugins can use this to inject via transport.", "url": "https://github.com/opensearch-project/security/pull/763#discussion_r512530937", "createdAt": "2020-10-27T09:22:35Z", "author": {"login": "saikaranam-amazon"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auth/BackendRegistry.java", "diffHunk": "@@ -494,7 +500,9 @@ public boolean authenticate(final RestRequest request, final RestChannel channel\n \n         if(authenticated) {\n             final User impersonatedUser = impersonate(request, authenticatedUser);\n-            threadContext.putTransient(ConfigConstants.OPENDISTRO_SECURITY_USER, impersonatedUser==null?authenticatedUser:impersonatedUser);\n+            final User loggedInUser = impersonatedUser==null?authenticatedUser:impersonatedUser;\n+            threadContext.putTransient(ConfigConstants.OPENDISTRO_SECURITY_USER, loggedInUser);\n+            threadContext.putTransient(ConfigConstants.OPENDISTRO_SECURITY_USER_STRING, loggedInUser.getUserString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgzMzg5Ng=="}, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE1MDEyNQ==", "bodyText": "Please split into 2 PRs. This is not a requirement for user injection into transport.", "url": "https://github.com/opensearch-project/security/pull/763#discussion_r513150125", "createdAt": "2020-10-28T02:57:49Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auth/BackendRegistry.java", "diffHunk": "@@ -494,7 +500,9 @@ public boolean authenticate(final RestRequest request, final RestChannel channel\n \n         if(authenticated) {\n             final User impersonatedUser = impersonate(request, authenticatedUser);\n-            threadContext.putTransient(ConfigConstants.OPENDISTRO_SECURITY_USER, impersonatedUser==null?authenticatedUser:impersonatedUser);\n+            final User loggedInUser = impersonatedUser==null?authenticatedUser:impersonatedUser;\n+            threadContext.putTransient(ConfigConstants.OPENDISTRO_SECURITY_USER, loggedInUser);\n+            threadContext.putTransient(ConfigConstants.OPENDISTRO_SECURITY_USER_STRING, loggedInUser.getUserString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgzMzg5Ng=="}, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkxMjMyNQ==", "bodyText": "Done. Removed this part in the current PR", "url": "https://github.com/opensearch-project/security/pull/763#discussion_r514912325", "createdAt": "2020-10-30T07:26:19Z", "author": {"login": "saikaranam-amazon"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auth/BackendRegistry.java", "diffHunk": "@@ -494,7 +500,9 @@ public boolean authenticate(final RestRequest request, final RestChannel channel\n \n         if(authenticated) {\n             final User impersonatedUser = impersonate(request, authenticatedUser);\n-            threadContext.putTransient(ConfigConstants.OPENDISTRO_SECURITY_USER, impersonatedUser==null?authenticatedUser:impersonatedUser);\n+            final User loggedInUser = impersonatedUser==null?authenticatedUser:impersonatedUser;\n+            threadContext.putTransient(ConfigConstants.OPENDISTRO_SECURITY_USER, loggedInUser);\n+            threadContext.putTransient(ConfigConstants.OPENDISTRO_SECURITY_USER_STRING, loggedInUser.getUserString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgzMzg5Ng=="}, "originalCommit": null, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTkwODQ4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auth/UserInjector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMDoyMzo1N1rOHgf4HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwOTo1OToyMFrOHkG0wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgzODc0OQ==", "bodyText": "The volume of transport requests is quite high when compared to rest requests. Would this have any negative impact on audit log volume?\nAlso is there a chance that could result in repeated injections? (REST injects and the corresponding transport request also results in injection)", "url": "https://github.com/opensearch-project/security/pull/763#discussion_r503838749", "createdAt": "2020-10-13T10:23:57Z", "author": {"login": "krishna-ggk"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auth/UserInjector.java", "diffHunk": "@@ -153,4 +164,17 @@ boolean injectUser(RestRequest request) {\n         return true;\n \n     }\n+\n+    User injectUser(TransportRequest transportRequest, Task task, String action) {\n+        String injectedUserString = threadPool.getThreadContext().getHeader(ConfigConstants.OPENDISTRO_SECURITY_INJECTED_USER_HEADER);\n+        User user = getUser(injectedUserString);\n+        if(user == null) {\n+            return null;\n+        }\n+        auditLog.logSucceededLogin(user.getName(), true, null, transportRequest, action, task);\n+        if (log.isTraceEnabled()) {\n+            log.trace(\"Injected user object:{} \", user.toString());\n+        }\n+        return user;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYyMjU5NA==", "bodyText": "This should be the first transport request and after this it should not trigger multiple injections.", "url": "https://github.com/opensearch-project/security/pull/763#discussion_r507622594", "createdAt": "2020-10-19T09:59:20Z", "author": {"login": "saikaranam-amazon"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auth/UserInjector.java", "diffHunk": "@@ -153,4 +164,17 @@ boolean injectUser(RestRequest request) {\n         return true;\n \n     }\n+\n+    User injectUser(TransportRequest transportRequest, Task task, String action) {\n+        String injectedUserString = threadPool.getThreadContext().getHeader(ConfigConstants.OPENDISTRO_SECURITY_INJECTED_USER_HEADER);\n+        User user = getUser(injectedUserString);\n+        if(user == null) {\n+            return null;\n+        }\n+        auditLog.logSucceededLogin(user.getName(), true, null, transportRequest, action, task);\n+        if (log.isTraceEnabled()) {\n+            log.trace(\"Injected user object:{} \", user.toString());\n+        }\n+        return user;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgzODc0OQ=="}, "originalCommit": null, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTkxOTI1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/transport/OpenDistroSecurityInterceptor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMDoyNjo1M1rOHgf-uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwOTo1NDo1MVrOHkGpsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg0MDQ0MQ==", "bodyText": "Is there a need to pass both users?\nWhat would user0 be in case of injection?", "url": "https://github.com/opensearch-project/security/pull/763#discussion_r503840441", "createdAt": "2020-10-13T10:26:53Z", "author": {"login": "krishna-ggk"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/transport/OpenDistroSecurityInterceptor.java", "diffHunk": "@@ -117,6 +118,7 @@ public OpenDistroSecurityInterceptor(final Settings settings,\n \n         final Map<String, String> origHeaders0 = getThreadContext().getHeaders();\n         final User user0 = getThreadContext().getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n+        final String injectedUserString = getThreadContext().getTransient(ConfigConstants.OPENDISTRO_SECURITY_INJECTED_USER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYxOTc2Mg==", "bodyText": "Only one user will be part of the request - user0 will take precedence if both the user0 and injectedUserString are present.", "url": "https://github.com/opensearch-project/security/pull/763#discussion_r507619762", "createdAt": "2020-10-19T09:54:51Z", "author": {"login": "saikaranam-amazon"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/transport/OpenDistroSecurityInterceptor.java", "diffHunk": "@@ -117,6 +118,7 @@ public OpenDistroSecurityInterceptor(final Settings settings,\n \n         final Map<String, String> origHeaders0 = getThreadContext().getHeaders();\n         final User user0 = getThreadContext().getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n+        final String injectedUserString = getThreadContext().getTransient(ConfigConstants.OPENDISTRO_SECURITY_INJECTED_USER);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg0MDQ0MQ=="}, "originalCommit": null, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjA2OTU1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auth/UserInjector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNToyNzo1MFrOHoBRtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNzoyNjo1OFrOHrDxHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcyNjAwNw==", "bodyText": "Introduce private static InjectedUser class that extends User. Add TransportAddress as member of InjectedUser. Add setTransportAddress(String ipandport) to InjectedUser. Rename getUser() to getInjectedUser() and change return type from User to InjectedUser.", "url": "https://github.com/opensearch-project/security/pull/763#discussion_r511726007", "createdAt": "2020-10-26T05:27:50Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auth/UserInjector.java", "diffHunk": "@@ -66,33 +68,30 @@\n \n     }\n \n-    boolean injectUser(RestRequest request) {\n-\n+    private User getUser(String injectedUserString) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkxMjU0Mg==", "bodyText": "Defined InjectedUser class for injected user usecase", "url": "https://github.com/opensearch-project/security/pull/763#discussion_r514912542", "createdAt": "2020-10-30T07:26:58Z", "author": {"login": "saikaranam-amazon"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auth/UserInjector.java", "diffHunk": "@@ -66,33 +68,30 @@\n \n     }\n \n-    boolean injectUser(RestRequest request) {\n-\n+    private User getUser(String injectedUserString) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcyNjAwNw=="}, "originalCommit": null, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjExMzQ3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auth/BackendRegistry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNTo1NjowMVrOHoBqsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNzoyNzowOVrOHrDxUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTczMjQwMQ==", "bodyText": "Move audit logging here.", "url": "https://github.com/opensearch-project/security/pull/763#discussion_r511732401", "createdAt": "2020-10-26T05:56:01Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auth/BackendRegistry.java", "diffHunk": "@@ -241,6 +241,12 @@ public User authenticate(final TransportRequest request, final String sslPrincip\n     \t      return null;\n     \t  }\n \n+        User injectedUser = userInjector.injectUser(request, task, action);\n+\n+        if(injectedUser != null) {\n+            return injectedUser;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkxMjU5Mw==", "bodyText": "Done", "url": "https://github.com/opensearch-project/security/pull/763#discussion_r514912593", "createdAt": "2020-10-30T07:27:09Z", "author": {"login": "saikaranam-amazon"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auth/BackendRegistry.java", "diffHunk": "@@ -241,6 +241,12 @@ public User authenticate(final TransportRequest request, final String sslPrincip\n     \t      return null;\n     \t  }\n \n+        User injectedUser = userInjector.injectUser(request, task, action);\n+\n+        if(injectedUser != null) {\n+            return injectedUser;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTczMjQwMQ=="}, "originalCommit": null, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjEzMzA2OnYy", "diffSide": "RIGHT", "path": "src/test/resources/roles_mapping.yml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNjowNzo1M1rOHoB11g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNzoyNzoxN1rOHrDxgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTczNTI1NA==", "bodyText": "Please introduce new role (avoid modifying existing one).", "url": "https://github.com/opensearch-project/security/pull/763#discussion_r511735254", "createdAt": "2020-10-26T06:07:53Z", "author": {"login": "vrozov"}, "path": "src/test/resources/roles_mapping.yml", "diffHunk": "@@ -279,7 +279,7 @@ opendistro_security_kibana_server:\n opendistro_security_all_access:\n   reserved: false\n   hidden: false\n-  backend_roles: []\n+  backend_roles: [\"injecttest\"]", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkxMjY0Mg==", "bodyText": "Added another mapping file", "url": "https://github.com/opensearch-project/security/pull/763#discussion_r514912642", "createdAt": "2020-10-30T07:27:17Z", "author": {"login": "saikaranam-amazon"}, "path": "src/test/resources/roles_mapping.yml", "diffHunk": "@@ -279,7 +279,7 @@ opendistro_security_kibana_server:\n opendistro_security_all_access:\n   reserved: false\n   hidden: false\n-  backend_roles: []\n+  backend_roles: [\"injecttest\"]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTczNTI1NA=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzA1NzEyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auth/UserInjector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNjoxMjozNVrOHvgJIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMjoyMDoyMVrOHwaAKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU3MTc0Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public class InjectedUser {\n          \n          \n            \n                public class InjectedUser extends User {", "url": "https://github.com/opensearch-project/security/pull/763#discussion_r519571747", "createdAt": "2020-11-09T06:12:35Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auth/UserInjector.java", "diffHunk": "@@ -66,10 +68,34 @@\n \n     }\n \n-    boolean injectUser(RestRequest request) {\n+    public class InjectedUser {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUxOTcyMg==", "bodyText": "Done", "url": "https://github.com/opensearch-project/security/pull/763#discussion_r520519722", "createdAt": "2020-11-10T12:20:21Z", "author": {"login": "saikaranam-amazon"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auth/UserInjector.java", "diffHunk": "@@ -66,10 +68,34 @@\n \n     }\n \n-    boolean injectUser(RestRequest request) {\n+    public class InjectedUser {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU3MTc0Nw=="}, "originalCommit": null, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzA5MzUxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/support/ConfigConstants.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNjozMjo0MFrOHvgemQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMjoyMDowOFrOHwZ_wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU3NzI0MQ==", "bodyText": "Is it used?", "url": "https://github.com/opensearch-project/security/pull/763#discussion_r519577241", "createdAt": "2020-11-09T06:32:40Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/support/ConfigConstants.java", "diffHunk": "@@ -98,10 +98,12 @@\n \n     public static final String OPENDISTRO_SECURITY_USER = OPENDISTRO_SECURITY_CONFIG_PREFIX+\"user\";\n     public static final String OPENDISTRO_SECURITY_USER_HEADER = OPENDISTRO_SECURITY_CONFIG_PREFIX+\"user_header\";\n+    public static final String OPENDISTRO_SECURITY_USER_STRING = OPENDISTRO_SECURITY_CONFIG_PREFIX + \"user_string\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUxOTYxNg==", "bodyText": "Removed. Will be part of separate CR if user_roles string can't be reused", "url": "https://github.com/opensearch-project/security/pull/763#discussion_r520519616", "createdAt": "2020-11-10T12:20:08Z", "author": {"login": "saikaranam-amazon"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/support/ConfigConstants.java", "diffHunk": "@@ -98,10 +98,12 @@\n \n     public static final String OPENDISTRO_SECURITY_USER = OPENDISTRO_SECURITY_CONFIG_PREFIX+\"user\";\n     public static final String OPENDISTRO_SECURITY_USER_HEADER = OPENDISTRO_SECURITY_CONFIG_PREFIX+\"user_header\";\n+    public static final String OPENDISTRO_SECURITY_USER_STRING = OPENDISTRO_SECURITY_CONFIG_PREFIX + \"user_string\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU3NzI0MQ=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NTkwMTM2OnYy", "diffSide": "RIGHT", "path": "src/test/resources/roles_transport_inject_user.yml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMzo1OTo1MVrOHw0USA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMzo1OTo1MVrOHw0USA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk1MDg1Ng==", "bodyText": "Could you add an empty line at the end of the file?", "url": "https://github.com/opensearch-project/security/pull/763#discussion_r520950856", "createdAt": "2020-11-10T23:59:51Z", "author": {"login": "cliu123"}, "path": "src/test/resources/roles_transport_inject_user.yml", "diffHunk": "@@ -0,0 +1,13 @@\n+---\n+_meta:\n+  type: \"rolesmapping\"\n+  config_version: 2\n+opendistro_security_all_access:\n+  reserved: false\n+  hidden: false\n+  backend_roles: [\"injecttest\"]\n+  hosts: []\n+  users:\n+    - \"nagilum\"\n+  and_backend_roles: []\n+  description: \"Migrated from v6\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NjIzOTc3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/transport/OpenDistroSecurityRequestHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMTo0NDozOVrOHw3rNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMTo0NDozOVrOHw3rNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTAwNTg3Ng==", "bodyText": "Should this be removed if not needed?", "url": "https://github.com/opensearch-project/security/pull/763#discussion_r521005876", "createdAt": "2020-11-11T01:44:39Z", "author": {"login": "cliu123"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/transport/OpenDistroSecurityRequestHandler.java", "diffHunk": "@@ -145,8 +145,15 @@ protected void messageReceivedDecorate(final T request, final TransportRequestHa\n             //bypass non-netty requests\n             if(channelType.equals(\"direct\")) {\n                 final String userHeader = getThreadContext().getHeader(ConfigConstants.OPENDISTRO_SECURITY_USER_HEADER);\n+                final String injectedUserHeader = getThreadContext().getHeader(ConfigConstants.OPENDISTRO_SECURITY_INJECTED_USER_HEADER);\n \n-                if(!Strings.isNullOrEmpty(userHeader)) {\n+                if(Strings.isNullOrEmpty(userHeader)) {\n+                    //user can be null when a node client wants connect\n+                    //getThreadContext().putTransient(ConfigConstants.OPENDISTRO_SECURITY_USER, User.OPENDISTRO_SECURITY_INTERNAL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NjI0NzYwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/transport/OpenDistroSecurityRequestHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMTo0NjozOVrOHw3wuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMzoxODoyMlrOHw79bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTAwNzI4OQ==", "bodyText": "Should this be removed if not needed?", "url": "https://github.com/opensearch-project/security/pull/763#discussion_r521007289", "createdAt": "2020-11-11T01:46:39Z", "author": {"login": "cliu123"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/transport/OpenDistroSecurityRequestHandler.java", "diffHunk": "@@ -202,10 +209,14 @@ protected void messageReceivedDecorate(final T request, final TransportRequestHa\n                         || HeaderHelper.isTrustedClusterRequest(getThreadContext())) {\n \n                     final String userHeader = getThreadContext().getHeader(ConfigConstants.OPENDISTRO_SECURITY_USER_HEADER);\n+                    final String injectedUserHeader = getThreadContext().getHeader(ConfigConstants.OPENDISTRO_SECURITY_INJECTED_USER_HEADER);\n \n                     if(Strings.isNullOrEmpty(userHeader)) {\n                         //user can be null when a node client wants connect\n                         //getThreadContext().putTransient(ConfigConstants.OPENDISTRO_SECURITY_USER, User.OPENDISTRO_SECURITY_INTERNAL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA3NjA3Ng==", "bodyText": "Seems to be from past PR. Removed either way.", "url": "https://github.com/opensearch-project/security/pull/763#discussion_r521076076", "createdAt": "2020-11-11T03:18:22Z", "author": {"login": "saikaranam-amazon"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/transport/OpenDistroSecurityRequestHandler.java", "diffHunk": "@@ -202,10 +209,14 @@ protected void messageReceivedDecorate(final T request, final TransportRequestHa\n                         || HeaderHelper.isTrustedClusterRequest(getThreadContext())) {\n \n                     final String userHeader = getThreadContext().getHeader(ConfigConstants.OPENDISTRO_SECURITY_USER_HEADER);\n+                    final String injectedUserHeader = getThreadContext().getHeader(ConfigConstants.OPENDISTRO_SECURITY_INJECTED_USER_HEADER);\n \n                     if(Strings.isNullOrEmpty(userHeader)) {\n                         //user can be null when a node client wants connect\n                         //getThreadContext().putTransient(ConfigConstants.OPENDISTRO_SECURITY_USER, User.OPENDISTRO_SECURITY_INTERNAL);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTAwNzI4OQ=="}, "originalCommit": null, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2Njg2ODA5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auth/UserInjector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNDo0NjozNVrOHw-Fjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMzozNTo1NFrOHxNZjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTExMDkyNg==", "bodyText": "Is it necessary to have separate getter and setter for InetAddress and port? Should it be sufficient to provide getter for TransportAddress and setter that takes String and parses it?", "url": "https://github.com/opensearch-project/security/pull/763#discussion_r521110926", "createdAt": "2020-11-11T04:46:35Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auth/UserInjector.java", "diffHunk": "@@ -66,10 +66,34 @@\n \n     }\n \n-    boolean injectUser(RestRequest request) {\n+    public static class InjectedUser extends User {\n+        private InetAddress inetAddress;\n+        private int port = -1;\n+\n+        public InjectedUser(String name) {\n+            super(name);\n+        }\n+\n+        public InetAddress getInetAddress() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM2MTgwNA==", "bodyText": "Marked transport as transient for serialization.", "url": "https://github.com/opensearch-project/security/pull/763#discussion_r521361804", "createdAt": "2020-11-11T13:35:54Z", "author": {"login": "saikaranam-amazon"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auth/UserInjector.java", "diffHunk": "@@ -66,10 +66,34 @@\n \n     }\n \n-    boolean injectUser(RestRequest request) {\n+    public static class InjectedUser extends User {\n+        private InetAddress inetAddress;\n+        private int port = -1;\n+\n+        public InjectedUser(String name) {\n+            super(name);\n+        }\n+\n+        public InetAddress getInetAddress() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTExMDkyNg=="}, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2Njg3MTI4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auth/UserInjector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNDo0ODo1NFrOHw-HpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNDo0ODo1NFrOHw-HpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTExMTQ2MA==", "bodyText": "Please remove extra lines", "url": "https://github.com/opensearch-project/security/pull/763#discussion_r521111460", "createdAt": "2020-11-11T04:48:54Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auth/UserInjector.java", "diffHunk": "@@ -127,30 +151,50 @@ boolean injectUser(RestRequest request) {\n             String[] ipAndPort = parts[2].split(\":\");\n             if (ipAndPort.length != 2) {\n                 log.error(\"Remote address must have format ip:port, was: {}. User injection failed.\", parts[2]);\n-                return false;\n-            } else {\n-                try {\n-                    InetAddress iAdress = InetAddress.getByName(ipAndPort[0]);\n-                    int port = Integer.parseInt(ipAndPort[1]);\n-                    threadPool.getThreadContext().putTransient(ConfigConstants.OPENDISTRO_SECURITY_REMOTE_ADDRESS, new TransportAddress(iAdress, port));\n-                } catch (UnknownHostException | NumberFormatException e) {\n-                    log.error(\"Cannot parse remote IP or port: {}, user injection failed.\", parts[2], e);\n-                    return false;\n-                }\n+                return null;\n+            }\n+            try {\n+                InetAddress iAdress = InetAddress.getByName(ipAndPort[0]);\n+                int port = Integer.parseInt(ipAndPort[1]);\n+                injectedUser.setInetAddress(iAdress);\n+                injectedUser.setPort(port);\n+            } catch (UnknownHostException | NumberFormatException e) {\n+                log.error(\"Cannot parse remote IP or port: {}, user injection failed.\", parts[2], e);\n+                return null;\n             }\n-        } else {\n-            threadPool.getThreadContext().putTransient(ConfigConstants.OPENDISTRO_SECURITY_REMOTE_ADDRESS, xffResolver.resolve(request));\n         }\n \n         // mark user injected for proper admin handling\n-        user.setInjected(true);\n+        injectedUser.setInjected(true);\n \n-        threadPool.getThreadContext().putTransient(ConfigConstants.OPENDISTRO_SECURITY_USER, user);\n-        auditLog.logSucceededLogin(parts[0], true, null, request);\n         if (log.isTraceEnabled()) {\n-            log.trace(\"Injected user object:{} \", user.toString());\n+            log.trace(\"Injected user object:{} \", injectedUser.toString());\n+        }\n+\n+        return injectedUser;\n+    }\n+\n+\n+    boolean injectUser(RestRequest request) {\n+        InjectedUser injectedUser = getInjectedUser();\n+        if(injectedUser == null) {\n+            return false;\n         }\n-        return true;\n \n+        // Set remote address into the thread context\n+        if (injectedUser.getInetAddress() != null && injectedUser.getPort() != -1) {\n+            TransportAddress transportAddress = new TransportAddress(injectedUser.getInetAddress(), injectedUser.getPort());\n+            threadPool.getThreadContext().putTransient(ConfigConstants.OPENDISTRO_SECURITY_REMOTE_ADDRESS, transportAddress);\n+        } else {\n+            threadPool.getThreadContext().putTransient(ConfigConstants.OPENDISTRO_SECURITY_REMOTE_ADDRESS, xffResolver.resolve(request));\n+        }\n+\n+        threadPool.getThreadContext().putTransient(ConfigConstants.OPENDISTRO_SECURITY_USER, injectedUser);\n+        auditLog.logSucceededLogin(injectedUser.getName(), true, null, request);\n+\n+        return true;\n     }\n }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2Njg3NTkxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/support/Base64Helper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNDo1MTo0NFrOHw-KcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNDo1MTo0NFrOHw-KcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTExMjE3Nw==", "bodyText": "Consider moving User.class from SAFE_CLASSES to SAFE_ASSIGNABLE_FROM_CLASSES.", "url": "https://github.com/opensearch-project/security/pull/763#discussion_r521112177", "createdAt": "2020-11-11T04:51:44Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/support/Base64Helper.java", "diffHunk": "@@ -77,6 +78,7 @@\n         InetSocketAddress.class,\n         Pattern.class,\n         User.class,\n+        UserInjector.InjectedUser.class,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NjkzNDYzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/filter/OpenDistroSecurityFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNToyNTo1OFrOHw-sOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMzozNToxNVrOHxNYDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEyMDgyNg==", "bodyText": "Is this flag necessary? User already has a flag whether it is injected or not.", "url": "https://github.com/opensearch-project/security/pull/763#discussion_r521120826", "createdAt": "2020-11-11T05:25:58Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/filter/OpenDistroSecurityFilter.java", "diffHunk": "@@ -169,7 +171,19 @@ public int order() {\n                 attachSourceFieldContext(request);\n             }\n             final Set<String> injectedRoles = rolesInjector.injectUserAndRoles(threadContext);\n+            boolean isInjectedUser = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM2MTQyMw==", "bodyText": "We want to have to privileges check for the local and after injected user is set. For the rest of the cases, it should go with the normal flow.", "url": "https://github.com/opensearch-project/security/pull/763#discussion_r521361423", "createdAt": "2020-11-11T13:35:15Z", "author": {"login": "saikaranam-amazon"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/filter/OpenDistroSecurityFilter.java", "diffHunk": "@@ -169,7 +171,19 @@ public int order() {\n                 attachSourceFieldContext(request);\n             }\n             final Set<String> injectedRoles = rolesInjector.injectUserAndRoles(threadContext);\n+            boolean isInjectedUser = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEyMDgyNg=="}, "originalCommit": null, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NjkzNzU3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/filter/OpenDistroSecurityFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNToyNzo1N1rOHw-uEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNToyNzo1N1rOHw-uEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEyMTI5OA==", "bodyText": "There is call to threadContext.getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER), please reuse User user.", "url": "https://github.com/opensearch-project/security/pull/763#discussion_r521121298", "createdAt": "2020-11-11T05:27:57Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/filter/OpenDistroSecurityFilter.java", "diffHunk": "@@ -169,7 +171,19 @@ public int order() {\n                 attachSourceFieldContext(request);\n             }\n             final Set<String> injectedRoles = rolesInjector.injectUserAndRoles(threadContext);\n+            boolean isInjectedUser = false;\n+            if(threadContext.getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER) == null", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NjgzMDk4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/filter/OpenDistroSecurityFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwNjoxNDo0NVrOHydjaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNjoxOTo1OVrOH1151w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjY3NTA1MQ==", "bodyText": "authenticate() may return principal instead of ConfigConstants.OPENDISTRO_SECURITY_INJECTED_USER. Is it expected? If yes, why is it necessary to inject principal? Also in this case please rename injectedUser to reflect that it can be SSL principal user. Also rename isInjectedUser to canSkipPrivilegesEvaluation or enforcePrivilegesEvaluation.", "url": "https://github.com/opensearch-project/security/pull/763#discussion_r522675051", "createdAt": "2020-11-13T06:14:45Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/filter/OpenDistroSecurityFilter.java", "diffHunk": "@@ -169,7 +171,18 @@ public int order() {\n                 attachSourceFieldContext(request);\n             }\n             final Set<String> injectedRoles = rolesInjector.injectUserAndRoles(threadContext);\n-            final User user = threadContext.getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n+            boolean isInjectedUser = false;\n+            User user = threadContext.getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n+            if(user == null && threadContext.getTransient(ConfigConstants.OPENDISTRO_SECURITY_INJECTED_USER) != null) {\n+                String principal = threadContext.getTransient(ConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_PRINCIPAL);\n+                User injectedUser = backendRegistry.authenticate(request, principal, task, action);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjIxOTczNQ==", "bodyText": "Made necessary changes\n\nDidn't pass principal as only user injection is needed here.\nRenamed the variable to enforcePrivilegesEvaluation", "url": "https://github.com/opensearch-project/security/pull/763#discussion_r526219735", "createdAt": "2020-11-18T16:19:59Z", "author": {"login": "saikaranam-amazon"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/filter/OpenDistroSecurityFilter.java", "diffHunk": "@@ -169,7 +171,18 @@ public int order() {\n                 attachSourceFieldContext(request);\n             }\n             final Set<String> injectedRoles = rolesInjector.injectUserAndRoles(threadContext);\n-            final User user = threadContext.getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n+            boolean isInjectedUser = false;\n+            User user = threadContext.getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n+            if(user == null && threadContext.getTransient(ConfigConstants.OPENDISTRO_SECURITY_INJECTED_USER) != null) {\n+                String principal = threadContext.getTransient(ConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_PRINCIPAL);\n+                User injectedUser = backendRegistry.authenticate(request, principal, task, action);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjY3NTA1MQ=="}, "originalCommit": null, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NjkyNTUwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/support/Base64Helper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwNjo0NjozM1rOHyegXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNjowMzo0NlrOH11INQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjY5MDY1NQ==", "bodyText": "User is assignable from UserInjector.InjectedUser, so both User and UserInjector.InjectedUser should be serializable.", "url": "https://github.com/opensearch-project/security/pull/763#discussion_r522690655", "createdAt": "2020-11-13T06:46:33Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/support/Base64Helper.java", "diffHunk": "@@ -76,7 +77,7 @@\n         SocketAddress.class,\n         InetSocketAddress.class,\n         Pattern.class,\n-        User.class,\n+        UserInjector.InjectedUser.class,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjIwNzAyOQ==", "bodyText": "User is moved to SAFE_ASSIGNABLE_FROM_CLASSES", "url": "https://github.com/opensearch-project/security/pull/763#discussion_r526207029", "createdAt": "2020-11-18T16:03:46Z", "author": {"login": "saikaranam-amazon"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/support/Base64Helper.java", "diffHunk": "@@ -76,7 +77,7 @@\n         SocketAddress.class,\n         InetSocketAddress.class,\n         Pattern.class,\n-        User.class,\n+        UserInjector.InjectedUser.class,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjY5MDY1NQ=="}, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NjkzMTIwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/user/User.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwNjo0NzozOFrOHyekKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwNjo0NzozOFrOHyekKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjY5MTYyNw==", "bodyText": "Undo.", "url": "https://github.com/opensearch-project/security/pull/763#discussion_r522691627", "createdAt": "2020-11-13T06:47:38Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/user/User.java", "diffHunk": "@@ -32,6 +32,7 @@\n \n import java.io.IOException;\n import java.io.Serializable;\n+import java.net.InetAddress;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NjkzMjA4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/user/User.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwNjo0Nzo1MFrOHyek0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwNjo0Nzo1MFrOHyek0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjY5MTc5Mw==", "bodyText": "Undo", "url": "https://github.com/opensearch-project/security/pull/763#discussion_r522691793", "createdAt": "2020-11-13T06:47:50Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/user/User.java", "diffHunk": "@@ -267,4 +268,5 @@ public final void addOpenDistroSecurityRoles(final Collection<String> securityRo\n     public final String getUserRolesString() {\n         return name + \"|\" + String.join(\",\", getRoles()) + \"|\" + String.join(\",\", getOpenDistroSecurityRoles());\n     }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3Njk0MTc0OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/TransportUserInjectorIntegTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwNjo1MDowMlrOHyerrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwNjo1MDowMlrOHyerrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjY5MzU0OA==", "bodyText": "Add test cases with user injection disabled.", "url": "https://github.com/opensearch-project/security/pull/763#discussion_r522693548", "createdAt": "2020-11-13T06:50:02Z", "author": {"login": "vrozov"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/TransportUserInjectorIntegTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package com.amazon.opendistroforelasticsearch.security;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.amazon.opendistroforelasticsearch.security.test.DynamicSecurityConfig;\n+import com.amazon.opendistroforelasticsearch.security.test.SingleClusterTest;\n+import org.elasticsearch.ElasticsearchSecurityException;\n+import org.elasticsearch.action.admin.cluster.health.ClusterHealthRequest;\n+import org.elasticsearch.action.admin.indices.create.CreateIndexRequest;\n+import org.elasticsearch.action.admin.indices.create.CreateIndexResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.io.stream.NamedWriteableRegistry;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.env.Environment;\n+import org.elasticsearch.env.NodeEnvironment;\n+import org.elasticsearch.node.Node;\n+import org.elasticsearch.node.PluginAwareNode;\n+import org.elasticsearch.plugins.ActionPlugin;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.repositories.RepositoriesService;\n+import org.elasticsearch.script.ScriptService;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.elasticsearch.transport.Netty4Plugin;\n+import org.elasticsearch.watcher.ResourceWatcherService;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.function.Supplier;\n+\n+public class TransportUserInjectorIntegTest extends SingleClusterTest {\n+\n+    public static class UserInjectorPlugin extends Plugin implements ActionPlugin {\n+        Settings settings;\n+        public static String injectedUser = null;\n+\n+        public UserInjectorPlugin(final Settings settings, final Path configPath) {\n+            this.settings = settings;\n+        }\n+\n+        @Override\n+        public Collection<Object> createComponents(Client client, ClusterService clusterService, ThreadPool threadPool,\n+                                                   ResourceWatcherService resourceWatcherService, ScriptService scriptService,\n+                                                   NamedXContentRegistry xContentRegistry, Environment environment,\n+                                                   NodeEnvironment nodeEnvironment, NamedWriteableRegistry namedWriteableRegistry,\n+                                                   IndexNameExpressionResolver indexNameExpressionResolver,\n+                                                   Supplier<RepositoriesService> repositoriesServiceSupplier) {\n+            if(injectedUser != null)\n+                threadPool.getThreadContext().putTransient(ConfigConstants.OPENDISTRO_SECURITY_INJECTED_USER, injectedUser);\n+            return new ArrayList<>();\n+        }\n+    }\n+\n+    //Wait for the security plugin to load roles.\n+    private void waitForInit(Client client) throws Exception {\n+        try {\n+            client.admin().cluster().health(new ClusterHealthRequest()).actionGet();\n+        } catch (ElasticsearchSecurityException ex) {\n+            if(ex.getMessage().contains(\"Open Distro Security not initialized\")) {\n+                Thread.sleep(500);\n+                waitForInit(client);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testOpendistroSecurityUserInjection() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwOTYxNjIyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/filter/OpenDistroSecurityFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNzoxMDozM1rOH3YkNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNzoxMDozM1rOH3YkNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzgzNjIxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if(user == null && threadContext.getTransient(ConfigConstants.OPENDISTRO_SECURITY_INJECTED_USER) != null) {\n          \n          \n            \n                        if(user == null) {\n          \n      \n    \n    \n  \n\nWill it be better to rely on backendRegistry.authenticate(request, null, task, action);?", "url": "https://github.com/opensearch-project/security/pull/763#discussion_r527836215", "createdAt": "2020-11-20T17:10:33Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/filter/OpenDistroSecurityFilter.java", "diffHunk": "@@ -169,7 +171,17 @@ public int order() {\n                 attachSourceFieldContext(request);\n             }\n             final Set<String> injectedRoles = rolesInjector.injectUserAndRoles(threadContext);\n-            final User user = threadContext.getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n+            boolean enforcePrivilegesEvaluation = false;\n+            User user = threadContext.getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n+            if(user == null && threadContext.getTransient(ConfigConstants.OPENDISTRO_SECURITY_INJECTED_USER) != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwOTYzODY5OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/TransportUserInjectorIntegTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNzoxNjowNFrOH3YxTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNzoxNjowNFrOH3YxTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzgzOTU2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Assert.assertTrue(cir.isAcknowledged());\n          \n          \n            \n                        Assert.fail(\"Expecting exception\");", "url": "https://github.com/opensearch-project/security/pull/763#discussion_r527839565", "createdAt": "2020-11-20T17:16:04Z", "author": {"login": "vrozov"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/TransportUserInjectorIntegTest.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package com.amazon.opendistroforelasticsearch.security;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.amazon.opendistroforelasticsearch.security.test.DynamicSecurityConfig;\n+import com.amazon.opendistroforelasticsearch.security.test.SingleClusterTest;\n+import org.elasticsearch.ElasticsearchSecurityException;\n+import org.elasticsearch.action.admin.cluster.health.ClusterHealthRequest;\n+import org.elasticsearch.action.admin.indices.create.CreateIndexRequest;\n+import org.elasticsearch.action.admin.indices.create.CreateIndexResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.io.stream.NamedWriteableRegistry;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.env.Environment;\n+import org.elasticsearch.env.NodeEnvironment;\n+import org.elasticsearch.node.Node;\n+import org.elasticsearch.node.PluginAwareNode;\n+import org.elasticsearch.plugins.ActionPlugin;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.repositories.RepositoriesService;\n+import org.elasticsearch.script.ScriptService;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.elasticsearch.transport.Netty4Plugin;\n+import org.elasticsearch.watcher.ResourceWatcherService;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.function.Supplier;\n+\n+public class TransportUserInjectorIntegTest extends SingleClusterTest {\n+\n+    public static class UserInjectorPlugin extends Plugin implements ActionPlugin {\n+        Settings settings;\n+        public static String injectedUser = null;\n+\n+        public UserInjectorPlugin(final Settings settings, final Path configPath) {\n+            this.settings = settings;\n+        }\n+\n+        @Override\n+        public Collection<Object> createComponents(Client client, ClusterService clusterService, ThreadPool threadPool,\n+                                                   ResourceWatcherService resourceWatcherService, ScriptService scriptService,\n+                                                   NamedXContentRegistry xContentRegistry, Environment environment,\n+                                                   NodeEnvironment nodeEnvironment, NamedWriteableRegistry namedWriteableRegistry,\n+                                                   IndexNameExpressionResolver indexNameExpressionResolver,\n+                                                   Supplier<RepositoriesService> repositoriesServiceSupplier) {\n+            if(injectedUser != null)\n+                threadPool.getThreadContext().putTransient(ConfigConstants.OPENDISTRO_SECURITY_INJECTED_USER, injectedUser);\n+            return new ArrayList<>();\n+        }\n+    }\n+\n+    //Wait for the security plugin to load roles.\n+    private void waitForInit(Client client) throws Exception {\n+        try {\n+            client.admin().cluster().health(new ClusterHealthRequest()).actionGet();\n+        } catch (ElasticsearchSecurityException ex) {\n+            if(ex.getMessage().contains(\"Open Distro Security not initialized\")) {\n+                Thread.sleep(500);\n+                waitForInit(client);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testOpendistroSecurityUserInjection() throws Exception {\n+        final Settings clusterNodeSettings = Settings.builder()\n+                .put(ConfigConstants.OPENDISTRO_SECURITY_UNSUPPORTED_INJECT_USER_ENABLED, true)\n+                .build();\n+        setup(clusterNodeSettings, new DynamicSecurityConfig().setSecurityRolesMapping(\"roles_transport_inject_user.yml\"), Settings.EMPTY);\n+        final Settings tcSettings = Settings.builder()\n+                .put(minimumSecuritySettings(Settings.EMPTY).get(0))\n+                .put(\"cluster.name\", clusterInfo.clustername)\n+                .put(\"node.data\", false)\n+                .put(\"node.master\", false)\n+                .put(\"node.ingest\", false)\n+                .put(\"path.data\", \"./target/data/\" + clusterInfo.clustername + \"/cert/data\")\n+                .put(\"path.logs\", \"./target/data/\" + clusterInfo.clustername + \"/cert/logs\")\n+                .put(\"path.home\", \"./target\")\n+                .put(\"node.name\", \"testclient\")\n+                .put(\"discovery.initial_state_timeout\", \"8s\")\n+                .put(\"opendistro_security.allow_default_init_securityindex\", \"true\")\n+                .put(ConfigConstants.OPENDISTRO_SECURITY_UNSUPPORTED_INJECT_USER_ENABLED, true)\n+                .putList(\"discovery.zen.ping.unicast.hosts\", clusterInfo.nodeHost + \":\" + clusterInfo.nodePort)\n+                .build();\n+\n+\n+        // 1. without user injection\n+        try (Node node = new PluginAwareNode(false, tcSettings, Netty4Plugin.class,\n+                OpenDistroSecurityPlugin.class, UserInjectorPlugin.class).start()) {\n+            waitForInit(node.client());\n+            CreateIndexResponse cir = node.client().admin().indices().create(new CreateIndexRequest(\"captain-logs-1\")).actionGet();\n+            Assert.assertTrue(cir.isAcknowledged());\n+        }\n+\n+\n+        // 2. with invalid backend roles\n+        UserInjectorPlugin.injectedUser = \"ttt|kkk\";\n+        Exception exception = null;\n+        try (Node node = new PluginAwareNode(false, tcSettings, Netty4Plugin.class,\n+                OpenDistroSecurityPlugin.class, UserInjectorPlugin.class).start()) {\n+            waitForInit(node.client());\n+            CreateIndexResponse cir = node.client().admin().indices().create(new CreateIndexRequest(\"captain-logs-2\")).actionGet();\n+            Assert.assertTrue(cir.isAcknowledged());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwOTY0NDQ2OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/TransportUserInjectorIntegTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNzoxNzozOFrOH3Y06Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNzoxNzozOFrOH3Y06Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzg0MDQ4OQ==", "bodyText": "Move that assert inside catch.", "url": "https://github.com/opensearch-project/security/pull/763#discussion_r527840489", "createdAt": "2020-11-20T17:17:38Z", "author": {"login": "vrozov"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/TransportUserInjectorIntegTest.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package com.amazon.opendistroforelasticsearch.security;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.amazon.opendistroforelasticsearch.security.test.DynamicSecurityConfig;\n+import com.amazon.opendistroforelasticsearch.security.test.SingleClusterTest;\n+import org.elasticsearch.ElasticsearchSecurityException;\n+import org.elasticsearch.action.admin.cluster.health.ClusterHealthRequest;\n+import org.elasticsearch.action.admin.indices.create.CreateIndexRequest;\n+import org.elasticsearch.action.admin.indices.create.CreateIndexResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.io.stream.NamedWriteableRegistry;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.env.Environment;\n+import org.elasticsearch.env.NodeEnvironment;\n+import org.elasticsearch.node.Node;\n+import org.elasticsearch.node.PluginAwareNode;\n+import org.elasticsearch.plugins.ActionPlugin;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.repositories.RepositoriesService;\n+import org.elasticsearch.script.ScriptService;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.elasticsearch.transport.Netty4Plugin;\n+import org.elasticsearch.watcher.ResourceWatcherService;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.function.Supplier;\n+\n+public class TransportUserInjectorIntegTest extends SingleClusterTest {\n+\n+    public static class UserInjectorPlugin extends Plugin implements ActionPlugin {\n+        Settings settings;\n+        public static String injectedUser = null;\n+\n+        public UserInjectorPlugin(final Settings settings, final Path configPath) {\n+            this.settings = settings;\n+        }\n+\n+        @Override\n+        public Collection<Object> createComponents(Client client, ClusterService clusterService, ThreadPool threadPool,\n+                                                   ResourceWatcherService resourceWatcherService, ScriptService scriptService,\n+                                                   NamedXContentRegistry xContentRegistry, Environment environment,\n+                                                   NodeEnvironment nodeEnvironment, NamedWriteableRegistry namedWriteableRegistry,\n+                                                   IndexNameExpressionResolver indexNameExpressionResolver,\n+                                                   Supplier<RepositoriesService> repositoriesServiceSupplier) {\n+            if(injectedUser != null)\n+                threadPool.getThreadContext().putTransient(ConfigConstants.OPENDISTRO_SECURITY_INJECTED_USER, injectedUser);\n+            return new ArrayList<>();\n+        }\n+    }\n+\n+    //Wait for the security plugin to load roles.\n+    private void waitForInit(Client client) throws Exception {\n+        try {\n+            client.admin().cluster().health(new ClusterHealthRequest()).actionGet();\n+        } catch (ElasticsearchSecurityException ex) {\n+            if(ex.getMessage().contains(\"Open Distro Security not initialized\")) {\n+                Thread.sleep(500);\n+                waitForInit(client);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testOpendistroSecurityUserInjection() throws Exception {\n+        final Settings clusterNodeSettings = Settings.builder()\n+                .put(ConfigConstants.OPENDISTRO_SECURITY_UNSUPPORTED_INJECT_USER_ENABLED, true)\n+                .build();\n+        setup(clusterNodeSettings, new DynamicSecurityConfig().setSecurityRolesMapping(\"roles_transport_inject_user.yml\"), Settings.EMPTY);\n+        final Settings tcSettings = Settings.builder()\n+                .put(minimumSecuritySettings(Settings.EMPTY).get(0))\n+                .put(\"cluster.name\", clusterInfo.clustername)\n+                .put(\"node.data\", false)\n+                .put(\"node.master\", false)\n+                .put(\"node.ingest\", false)\n+                .put(\"path.data\", \"./target/data/\" + clusterInfo.clustername + \"/cert/data\")\n+                .put(\"path.logs\", \"./target/data/\" + clusterInfo.clustername + \"/cert/logs\")\n+                .put(\"path.home\", \"./target\")\n+                .put(\"node.name\", \"testclient\")\n+                .put(\"discovery.initial_state_timeout\", \"8s\")\n+                .put(\"opendistro_security.allow_default_init_securityindex\", \"true\")\n+                .put(ConfigConstants.OPENDISTRO_SECURITY_UNSUPPORTED_INJECT_USER_ENABLED, true)\n+                .putList(\"discovery.zen.ping.unicast.hosts\", clusterInfo.nodeHost + \":\" + clusterInfo.nodePort)\n+                .build();\n+\n+\n+        // 1. without user injection\n+        try (Node node = new PluginAwareNode(false, tcSettings, Netty4Plugin.class,\n+                OpenDistroSecurityPlugin.class, UserInjectorPlugin.class).start()) {\n+            waitForInit(node.client());\n+            CreateIndexResponse cir = node.client().admin().indices().create(new CreateIndexRequest(\"captain-logs-1\")).actionGet();\n+            Assert.assertTrue(cir.isAcknowledged());\n+        }\n+\n+\n+        // 2. with invalid backend roles\n+        UserInjectorPlugin.injectedUser = \"ttt|kkk\";\n+        Exception exception = null;\n+        try (Node node = new PluginAwareNode(false, tcSettings, Netty4Plugin.class,\n+                OpenDistroSecurityPlugin.class, UserInjectorPlugin.class).start()) {\n+            waitForInit(node.client());\n+            CreateIndexResponse cir = node.client().admin().indices().create(new CreateIndexRequest(\"captain-logs-2\")).actionGet();\n+            Assert.assertTrue(cir.isAcknowledged());\n+        } catch (ElasticsearchSecurityException ex) {\n+            exception = ex;\n+            log.warn(ex);\n+        }\n+        Assert.assertNotNull(exception);\n+        Assert.assertTrue(exception.getMessage().contains(\"indices:admin/create\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwOTc0NzI2OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/TransportUserInjectorIntegTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNzozNTozMlrOH3ZvAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNzozNTozMlrOH3ZvAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzg1NTM2MA==", "bodyText": "Can you add comment that the request is expected to succeed as user injection is disabled.", "url": "https://github.com/opensearch-project/security/pull/763#discussion_r527855360", "createdAt": "2020-11-20T17:35:32Z", "author": {"login": "vrozov"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/TransportUserInjectorIntegTest.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package com.amazon.opendistroforelasticsearch.security;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.amazon.opendistroforelasticsearch.security.test.DynamicSecurityConfig;\n+import com.amazon.opendistroforelasticsearch.security.test.SingleClusterTest;\n+import org.elasticsearch.ElasticsearchSecurityException;\n+import org.elasticsearch.action.admin.cluster.health.ClusterHealthRequest;\n+import org.elasticsearch.action.admin.indices.create.CreateIndexRequest;\n+import org.elasticsearch.action.admin.indices.create.CreateIndexResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.io.stream.NamedWriteableRegistry;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.env.Environment;\n+import org.elasticsearch.env.NodeEnvironment;\n+import org.elasticsearch.node.Node;\n+import org.elasticsearch.node.PluginAwareNode;\n+import org.elasticsearch.plugins.ActionPlugin;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.repositories.RepositoriesService;\n+import org.elasticsearch.script.ScriptService;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.elasticsearch.transport.Netty4Plugin;\n+import org.elasticsearch.watcher.ResourceWatcherService;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.function.Supplier;\n+\n+public class TransportUserInjectorIntegTest extends SingleClusterTest {\n+\n+    public static class UserInjectorPlugin extends Plugin implements ActionPlugin {\n+        Settings settings;\n+        public static String injectedUser = null;\n+\n+        public UserInjectorPlugin(final Settings settings, final Path configPath) {\n+            this.settings = settings;\n+        }\n+\n+        @Override\n+        public Collection<Object> createComponents(Client client, ClusterService clusterService, ThreadPool threadPool,\n+                                                   ResourceWatcherService resourceWatcherService, ScriptService scriptService,\n+                                                   NamedXContentRegistry xContentRegistry, Environment environment,\n+                                                   NodeEnvironment nodeEnvironment, NamedWriteableRegistry namedWriteableRegistry,\n+                                                   IndexNameExpressionResolver indexNameExpressionResolver,\n+                                                   Supplier<RepositoriesService> repositoriesServiceSupplier) {\n+            if(injectedUser != null)\n+                threadPool.getThreadContext().putTransient(ConfigConstants.OPENDISTRO_SECURITY_INJECTED_USER, injectedUser);\n+            return new ArrayList<>();\n+        }\n+    }\n+\n+    //Wait for the security plugin to load roles.\n+    private void waitForInit(Client client) throws Exception {\n+        try {\n+            client.admin().cluster().health(new ClusterHealthRequest()).actionGet();\n+        } catch (ElasticsearchSecurityException ex) {\n+            if(ex.getMessage().contains(\"Open Distro Security not initialized\")) {\n+                Thread.sleep(500);\n+                waitForInit(client);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testOpendistroSecurityUserInjection() throws Exception {\n+        final Settings clusterNodeSettings = Settings.builder()\n+                .put(ConfigConstants.OPENDISTRO_SECURITY_UNSUPPORTED_INJECT_USER_ENABLED, true)\n+                .build();\n+        setup(clusterNodeSettings, new DynamicSecurityConfig().setSecurityRolesMapping(\"roles_transport_inject_user.yml\"), Settings.EMPTY);\n+        final Settings tcSettings = Settings.builder()\n+                .put(minimumSecuritySettings(Settings.EMPTY).get(0))\n+                .put(\"cluster.name\", clusterInfo.clustername)\n+                .put(\"node.data\", false)\n+                .put(\"node.master\", false)\n+                .put(\"node.ingest\", false)\n+                .put(\"path.data\", \"./target/data/\" + clusterInfo.clustername + \"/cert/data\")\n+                .put(\"path.logs\", \"./target/data/\" + clusterInfo.clustername + \"/cert/logs\")\n+                .put(\"path.home\", \"./target\")\n+                .put(\"node.name\", \"testclient\")\n+                .put(\"discovery.initial_state_timeout\", \"8s\")\n+                .put(\"opendistro_security.allow_default_init_securityindex\", \"true\")\n+                .put(ConfigConstants.OPENDISTRO_SECURITY_UNSUPPORTED_INJECT_USER_ENABLED, true)\n+                .putList(\"discovery.zen.ping.unicast.hosts\", clusterInfo.nodeHost + \":\" + clusterInfo.nodePort)\n+                .build();\n+\n+\n+        // 1. without user injection\n+        try (Node node = new PluginAwareNode(false, tcSettings, Netty4Plugin.class,\n+                OpenDistroSecurityPlugin.class, UserInjectorPlugin.class).start()) {\n+            waitForInit(node.client());\n+            CreateIndexResponse cir = node.client().admin().indices().create(new CreateIndexRequest(\"captain-logs-1\")).actionGet();\n+            Assert.assertTrue(cir.isAcknowledged());\n+        }\n+\n+\n+        // 2. with invalid backend roles\n+        UserInjectorPlugin.injectedUser = \"ttt|kkk\";\n+        Exception exception = null;\n+        try (Node node = new PluginAwareNode(false, tcSettings, Netty4Plugin.class,\n+                OpenDistroSecurityPlugin.class, UserInjectorPlugin.class).start()) {\n+            waitForInit(node.client());\n+            CreateIndexResponse cir = node.client().admin().indices().create(new CreateIndexRequest(\"captain-logs-2\")).actionGet();\n+            Assert.assertTrue(cir.isAcknowledged());\n+        } catch (ElasticsearchSecurityException ex) {\n+            exception = ex;\n+            log.warn(ex);\n+        }\n+        Assert.assertNotNull(exception);\n+        Assert.assertTrue(exception.getMessage().contains(\"indices:admin/create\"));\n+\n+        // 3. with valid backend roles for injected user\n+        UserInjectorPlugin.injectedUser = \"injectedadmin|injecttest\";\n+        try (Node node = new PluginAwareNode(false, tcSettings, Netty4Plugin.class,\n+                OpenDistroSecurityPlugin.class, UserInjectorPlugin.class).start()) {\n+            waitForInit(node.client());\n+            CreateIndexResponse cir = node.client().admin().indices().create(new CreateIndexRequest(\"captain-logs-2\")).actionGet();\n+            Assert.assertTrue(cir.isAcknowledged());\n+        }\n+    }\n+\n+    @Test\n+    public void testOpendistroSecurityUserInjectionWithConfigDisabled() throws Exception {\n+        final Settings clusterNodeSettings = Settings.builder()\n+                .put(ConfigConstants.OPENDISTRO_SECURITY_UNSUPPORTED_INJECT_USER_ENABLED, false)\n+                .build();\n+        setup(clusterNodeSettings, new DynamicSecurityConfig().setSecurityRolesMapping(\"roles_transport_inject_user.yml\"), Settings.EMPTY);\n+        final Settings tcSettings = Settings.builder()\n+                .put(minimumSecuritySettings(Settings.EMPTY).get(0))\n+                .put(\"cluster.name\", clusterInfo.clustername)\n+                .put(\"node.data\", false)\n+                .put(\"node.master\", false)\n+                .put(\"node.ingest\", false)\n+                .put(\"path.data\", \"./target/data/\" + clusterInfo.clustername + \"/cert/data\")\n+                .put(\"path.logs\", \"./target/data/\" + clusterInfo.clustername + \"/cert/logs\")\n+                .put(\"path.home\", \"./target\")\n+                .put(\"node.name\", \"testclient\")\n+                .put(\"discovery.initial_state_timeout\", \"8s\")\n+                .put(\"opendistro_security.allow_default_init_securityindex\", \"true\")\n+                .put(ConfigConstants.OPENDISTRO_SECURITY_UNSUPPORTED_INJECT_USER_ENABLED, false)\n+                .putList(\"discovery.zen.ping.unicast.hosts\", clusterInfo.nodeHost + \":\" + clusterInfo.nodePort)\n+                .build();\n+\n+        // 1. without user injection\n+        try (Node node = new PluginAwareNode(false, tcSettings, Netty4Plugin.class,\n+                OpenDistroSecurityPlugin.class, UserInjectorPlugin.class).start()) {\n+            waitForInit(node.client());\n+            CreateIndexResponse cir = node.client().admin().indices().create(new CreateIndexRequest(\"captain-logs-1\")).actionGet();\n+            Assert.assertTrue(cir.isAcknowledged());\n+        }\n+        \n+        // with invalid backend roles\n+        UserInjectorPlugin.injectedUser = \"ttt|kkk\";\n+        try (Node node = new PluginAwareNode(false, tcSettings, Netty4Plugin.class,\n+                OpenDistroSecurityPlugin.class, UserInjectorPlugin.class).start()) {\n+            waitForInit(node.client());\n+            CreateIndexResponse cir = node.client().admin().indices().create(new CreateIndexRequest(\"captain-logs-2\")).actionGet();\n+            Assert.assertTrue(cir.isAcknowledged());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzQ5MzQzOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/TransportUserInjectorIntegTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMDoxODozNFrOH4d3DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMDoxODozNFrOH4d3DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk3MTUzMg==", "bodyText": "Add Assert.fail() after the call to ensure that exception is raised.", "url": "https://github.com/opensearch-project/security/pull/763#discussion_r528971532", "createdAt": "2020-11-23T20:18:34Z", "author": {"login": "vrozov"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/TransportUserInjectorIntegTest.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package com.amazon.opendistroforelasticsearch.security;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.amazon.opendistroforelasticsearch.security.test.DynamicSecurityConfig;\n+import com.amazon.opendistroforelasticsearch.security.test.SingleClusterTest;\n+import org.elasticsearch.ElasticsearchSecurityException;\n+import org.elasticsearch.action.admin.cluster.health.ClusterHealthRequest;\n+import org.elasticsearch.action.admin.indices.create.CreateIndexRequest;\n+import org.elasticsearch.action.admin.indices.create.CreateIndexResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.io.stream.NamedWriteableRegistry;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.env.Environment;\n+import org.elasticsearch.env.NodeEnvironment;\n+import org.elasticsearch.node.Node;\n+import org.elasticsearch.node.PluginAwareNode;\n+import org.elasticsearch.plugins.ActionPlugin;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.repositories.RepositoriesService;\n+import org.elasticsearch.script.ScriptService;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.elasticsearch.transport.Netty4Plugin;\n+import org.elasticsearch.watcher.ResourceWatcherService;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.function.Supplier;\n+\n+public class TransportUserInjectorIntegTest extends SingleClusterTest {\n+\n+    public static class UserInjectorPlugin extends Plugin implements ActionPlugin {\n+        Settings settings;\n+        public static String injectedUser = null;\n+\n+        public UserInjectorPlugin(final Settings settings, final Path configPath) {\n+            this.settings = settings;\n+        }\n+\n+        @Override\n+        public Collection<Object> createComponents(Client client, ClusterService clusterService, ThreadPool threadPool,\n+                                                   ResourceWatcherService resourceWatcherService, ScriptService scriptService,\n+                                                   NamedXContentRegistry xContentRegistry, Environment environment,\n+                                                   NodeEnvironment nodeEnvironment, NamedWriteableRegistry namedWriteableRegistry,\n+                                                   IndexNameExpressionResolver indexNameExpressionResolver,\n+                                                   Supplier<RepositoriesService> repositoriesServiceSupplier) {\n+            if(injectedUser != null)\n+                threadPool.getThreadContext().putTransient(ConfigConstants.OPENDISTRO_SECURITY_INJECTED_USER, injectedUser);\n+            return new ArrayList<>();\n+        }\n+    }\n+\n+    //Wait for the security plugin to load roles.\n+    private void waitForInit(Client client) throws Exception {\n+        try {\n+            client.admin().cluster().health(new ClusterHealthRequest()).actionGet();\n+        } catch (ElasticsearchSecurityException ex) {\n+            if(ex.getMessage().contains(\"Open Distro Security not initialized\")) {\n+                Thread.sleep(500);\n+                waitForInit(client);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testOpendistroSecurityUserInjection() throws Exception {\n+        final Settings clusterNodeSettings = Settings.builder()\n+                .put(ConfigConstants.OPENDISTRO_SECURITY_UNSUPPORTED_INJECT_USER_ENABLED, true)\n+                .build();\n+        setup(clusterNodeSettings, new DynamicSecurityConfig().setSecurityRolesMapping(\"roles_transport_inject_user.yml\"), Settings.EMPTY);\n+        final Settings tcSettings = Settings.builder()\n+                .put(minimumSecuritySettings(Settings.EMPTY).get(0))\n+                .put(\"cluster.name\", clusterInfo.clustername)\n+                .put(\"node.data\", false)\n+                .put(\"node.master\", false)\n+                .put(\"node.ingest\", false)\n+                .put(\"path.data\", \"./target/data/\" + clusterInfo.clustername + \"/cert/data\")\n+                .put(\"path.logs\", \"./target/data/\" + clusterInfo.clustername + \"/cert/logs\")\n+                .put(\"path.home\", \"./target\")\n+                .put(\"node.name\", \"testclient\")\n+                .put(\"discovery.initial_state_timeout\", \"8s\")\n+                .put(\"opendistro_security.allow_default_init_securityindex\", \"true\")\n+                .put(ConfigConstants.OPENDISTRO_SECURITY_UNSUPPORTED_INJECT_USER_ENABLED, true)\n+                .putList(\"discovery.zen.ping.unicast.hosts\", clusterInfo.nodeHost + \":\" + clusterInfo.nodePort)\n+                .build();\n+\n+\n+        // 1. without user injection\n+        try (Node node = new PluginAwareNode(false, tcSettings, Netty4Plugin.class,\n+                OpenDistroSecurityPlugin.class, UserInjectorPlugin.class).start()) {\n+            waitForInit(node.client());\n+            CreateIndexResponse cir = node.client().admin().indices().create(new CreateIndexRequest(\"captain-logs-1\")).actionGet();\n+            Assert.assertTrue(cir.isAcknowledged());\n+        }\n+\n+\n+        // 2. with invalid backend roles\n+        UserInjectorPlugin.injectedUser = \"ttt|kkk\";\n+        Exception exception = null;\n+        try (Node node = new PluginAwareNode(false, tcSettings, Netty4Plugin.class,\n+                OpenDistroSecurityPlugin.class, UserInjectorPlugin.class).start()) {\n+            waitForInit(node.client());\n+            CreateIndexResponse cir = node.client().admin().indices().create(new CreateIndexRequest(\"captain-logs-2\")).actionGet();\n+        } catch (ElasticsearchSecurityException ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 109}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2318, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}