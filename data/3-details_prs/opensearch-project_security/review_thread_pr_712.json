{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzODIzODAw", "number": 712, "reviewThreads": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwNTo1MTo0M1rOElLS6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMjo1OToyMFrOEuRfrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NDE3ODMzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwNTo1MTo0M1rOHUhSVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwODo0MjozOVrOHXQDog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI3ODkzNQ==", "bodyText": "Please avoid wildcard imports and changes to import order", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r491278935", "createdAt": "2020-09-19T05:51:43Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -50,11 +50,13 @@\n import com.amazon.opendistroforelasticsearch.security.auditlog.NullAuditLog;\n import com.amazon.opendistroforelasticsearch.security.configuration.OpenDistroSecurityFlsDlsIndexSearcherWrapper;\n import com.amazon.opendistroforelasticsearch.security.configuration.Salt;\n+import com.amazon.opendistroforelasticsearch.security.rest.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE0MjM3MA==", "bodyText": "fixed", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r494142370", "createdAt": "2020-09-24T08:42:39Z", "author": {"login": "sachetalva"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -50,11 +50,13 @@\n import com.amazon.opendistroforelasticsearch.security.auditlog.NullAuditLog;\n import com.amazon.opendistroforelasticsearch.security.configuration.OpenDistroSecurityFlsDlsIndexSearcherWrapper;\n import com.amazon.opendistroforelasticsearch.security.configuration.Salt;\n+import com.amazon.opendistroforelasticsearch.security.rest.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI3ODkzNQ=="}, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NDE4NDczOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwNTo1NDo1MVrOHUhWfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMzo0Mjo1MlrOHXEtwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI3OTk5Ng==", "bodyText": "Why it does not apply to not sslOnly?", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r491279996", "createdAt": "2020-09-19T05:54:51Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -451,6 +448,10 @@ private boolean checkFilePermissions(final Path p) {\n \n             handlers.addAll(super.getRestHandlers(settings, restController, clusterSettings, indexScopedSettings, settingsFilter, indexNameExpressionResolver, nodesInCluster));\n \n+            if(sslOnly){\n+                handlers.add(new SSLDualModeAction(settings, clusterSettings));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTk3MzQwMA==", "bodyText": "Currently SSLDualMode code changes are to support eit migration only when sslOnly mode is enabled, this code will be revisited when support for migration with fgac is enabled.", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r491973400", "createdAt": "2020-09-21T11:38:03Z", "author": {"login": "sachetalva"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -451,6 +448,10 @@ private boolean checkFilePermissions(final Path p) {\n \n             handlers.addAll(super.getRestHandlers(settings, restController, clusterSettings, indexScopedSettings, settingsFilter, indexNameExpressionResolver, nodesInCluster));\n \n+            if(sslOnly){\n+                handlers.add(new SSLDualModeAction(settings, clusterSettings));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI3OTk5Ng=="}, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIyNjQ2OQ==", "bodyText": "For ODFE contribution it will be better not to limit this to sslOnly unless there are other reasons.", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r492226469", "createdAt": "2020-09-21T17:25:14Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -451,6 +448,10 @@ private boolean checkFilePermissions(final Path p) {\n \n             handlers.addAll(super.getRestHandlers(settings, restController, clusterSettings, indexScopedSettings, settingsFilter, indexNameExpressionResolver, nodesInCluster));\n \n+            if(sslOnly){\n+                handlers.add(new SSLDualModeAction(settings, clusterSettings));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI3OTk5Ng=="}, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQxNDM0MQ==", "bodyText": "I agree here. We should support SSLDualMode for both SSLOnly and  not SSLOnly (fullSecurity) mode for ODFE benefits.", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r492414341", "createdAt": "2020-09-22T00:13:56Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -451,6 +448,10 @@ private boolean checkFilePermissions(final Path p) {\n \n             handlers.addAll(super.getRestHandlers(settings, restController, clusterSettings, indexScopedSettings, settingsFilter, indexNameExpressionResolver, nodesInCluster));\n \n+            if(sslOnly){\n+                handlers.add(new SSLDualModeAction(settings, clusterSettings));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI3OTk5Ng=="}, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjgzNjkyOQ==", "bodyText": "Adding dual mode to FGAC does not add benefit to user as of now. Idea is to ensure customer can update their existing cluster to enable security plugin. If we provide dual mode for FGAC we need to provide migration path for FGAC else customer wont be able to use it with FGAC, like sachet mentioned adding support to migrate existing ES cluster to FGAC + EIT enabled is planned for next iteration (few months from now)", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r492836929", "createdAt": "2020-09-22T15:36:41Z", "author": {"login": "vengadanathan-s"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -451,6 +448,10 @@ private boolean checkFilePermissions(final Path p) {\n \n             handlers.addAll(super.getRestHandlers(settings, restController, clusterSettings, indexScopedSettings, settingsFilter, indexNameExpressionResolver, nodesInCluster));\n \n+            if(sslOnly){\n+                handlers.add(new SSLDualModeAction(settings, clusterSettings));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI3OTk5Ng=="}, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk1NjU0NQ==", "bodyText": "Currently, ODFE plugin has following mode\n\nCompletely Disable  --> Security plugin is completely disable\nSSL Only. --> Only node to node encryption\nFull mode  --> All functionality (including Basic auth, RBAC, DLS/FLS, SAML, LDAP, Multi-tenancy etc.. )\n\nSo we should support for NoTLS to TLS path for both above options 2 and 3.\nAdditionally, we are also testing disabling TLS as configuration option for Full mode. Means ODFE users can configure ODFE clusters with all security features described in option-3 with TLS disabled.  So supporting  Dual mode will help for ODFE community to move their self-managed clusters from TLS Disable to enable without downtime.", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r493956545", "createdAt": "2020-09-23T23:42:52Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -451,6 +448,10 @@ private boolean checkFilePermissions(final Path p) {\n \n             handlers.addAll(super.getRestHandlers(settings, restController, clusterSettings, indexScopedSettings, settingsFilter, indexNameExpressionResolver, nodesInCluster));\n \n+            if(sslOnly){\n+                handlers.add(new SSLDualModeAction(settings, clusterSettings));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI3OTk5Ng=="}, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NDE4ODMyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwNTo1NjozOFrOHUhZHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwODo0MzoxN1rOHXQFHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI4MDY2OQ==", "bodyText": "There is already check for sslOnly, use else", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r491280669", "createdAt": "2020-09-19T05:56:38Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -451,6 +448,10 @@ private boolean checkFilePermissions(final Path p) {\n \n             handlers.addAll(super.getRestHandlers(settings, restController, clusterSettings, indexScopedSettings, settingsFilter, indexNameExpressionResolver, nodesInCluster));\n \n+            if(sslOnly){\n+                handlers.add(new SSLDualModeAction(settings, clusterSettings));\n+            }\n+\n             if(!sslOnly) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE0Mjc1MQ==", "bodyText": "moving this to else", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r494142751", "createdAt": "2020-09-24T08:43:17Z", "author": {"login": "sachetalva"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -451,6 +448,10 @@ private boolean checkFilePermissions(final Path p) {\n \n             handlers.addAll(super.getRestHandlers(settings, restController, clusterSettings, indexScopedSettings, settingsFilter, indexNameExpressionResolver, nodesInCluster));\n \n+            if(sslOnly){\n+                handlers.add(new SSLDualModeAction(settings, clusterSettings));\n+            }\n+\n             if(!sslOnly) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI4MDY2OQ=="}, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NDE4OTIzOnYy", "diffSide": "LEFT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwNTo1Njo1N1rOHUhZwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwODo0MzoyNlrOHXQFiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI4MDgzMg==", "bodyText": "avoid format only changes", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r491280832", "createdAt": "2020-09-19T05:56:57Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -616,7 +617,6 @@ public void validateSearchContext(SearchContext context, TransportRequest transp\n     @Override\n     public List<TransportInterceptor> getTransportInterceptors(NamedWriteableRegistry namedWriteableRegistry, ThreadContext threadContext) {\n         List<TransportInterceptor> interceptors = new ArrayList<TransportInterceptor>(1);\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE0Mjg1Nw==", "bodyText": "fixed", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r494142857", "createdAt": "2020-09-24T08:43:26Z", "author": {"login": "sachetalva"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -616,7 +617,6 @@ public void validateSearchContext(SearchContext context, TransportRequest transp\n     @Override\n     public List<TransportInterceptor> getTransportInterceptors(NamedWriteableRegistry namedWriteableRegistry, ThreadContext threadContext) {\n         List<TransportInterceptor> interceptors = new ArrayList<TransportInterceptor>(1);\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI4MDgzMg=="}, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NDIwNjY2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroPortUnificationHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwNjowNTo1OVrOHUhlTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwNjowNTo1OVrOHUhlTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI4Mzc4OA==", "bodyText": "Remove Portions, Amazon has full copyright on this file (and all other new files)", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r491283788", "createdAt": "2020-09-19T06:05:59Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroPortUnificationHandler.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Portions Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NDIwNzMyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroPortUnificationHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwNjowNjoyMVrOHUhltQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwNjowNjoyMVrOHUhltQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI4Mzg5Mw==", "bodyText": "Declare static before not static.", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r491283893", "createdAt": "2020-09-19T06:06:21Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroPortUnificationHandler.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Portions Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+package com.amazon.opendistroforelasticsearch.security.ssl.transport;\n+\n+\n+import com.amazon.opendistroforelasticsearch.security.ssl.OpenDistroSecurityKeyStore;\n+import com.amazon.opendistroforelasticsearch.security.ssl.util.SSLConnectionTestUtil;\n+import com.amazon.opendistroforelasticsearch.security.ssl.util.SSLUtil;\n+import com.google.common.annotations.VisibleForTesting;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.ChannelFutureListener;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.handler.codec.ByteToMessageDecoder;\n+import io.netty.handler.ssl.SslHandler;\n+import java.nio.charset.StandardCharsets;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import javax.net.ssl.SSLException;\n+import java.util.List;\n+\n+/**\n+ * Modifies the current pipeline dynamically to enable TLS\n+ */\n+public class OpenDistroPortUnificationHandler extends ByteToMessageDecoder {\n+\n+    private final OpenDistroSecurityKeyStore odsks;\n+    private static final Logger logger = LogManager.getLogger(OpenDistroPortUnificationHandler.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NDIwODQzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroPortUnificationHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwNjowNjo1N1rOHUhmcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwNjowNjo1N1rOHUhmcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI4NDA4MA==", "bodyText": "use different from odsks name.", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r491284080", "createdAt": "2020-09-19T06:06:57Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroPortUnificationHandler.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Portions Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+package com.amazon.opendistroforelasticsearch.security.ssl.transport;\n+\n+\n+import com.amazon.opendistroforelasticsearch.security.ssl.OpenDistroSecurityKeyStore;\n+import com.amazon.opendistroforelasticsearch.security.ssl.util.SSLConnectionTestUtil;\n+import com.amazon.opendistroforelasticsearch.security.ssl.util.SSLUtil;\n+import com.google.common.annotations.VisibleForTesting;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.ChannelFutureListener;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.handler.codec.ByteToMessageDecoder;\n+import io.netty.handler.ssl.SslHandler;\n+import java.nio.charset.StandardCharsets;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import javax.net.ssl.SSLException;\n+import java.util.List;\n+\n+/**\n+ * Modifies the current pipeline dynamically to enable TLS\n+ */\n+public class OpenDistroPortUnificationHandler extends ByteToMessageDecoder {\n+\n+    private final OpenDistroSecurityKeyStore odsks;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NDIwOTA2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroPortUnificationHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwNjowNzoyMVrOHUhm3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwNjowNzoyMVrOHUhm3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI4NDE4OA==", "bodyText": "both should be final", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r491284188", "createdAt": "2020-09-19T06:07:21Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroPortUnificationHandler.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Portions Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+package com.amazon.opendistroforelasticsearch.security.ssl.transport;\n+\n+\n+import com.amazon.opendistroforelasticsearch.security.ssl.OpenDistroSecurityKeyStore;\n+import com.amazon.opendistroforelasticsearch.security.ssl.util.SSLConnectionTestUtil;\n+import com.amazon.opendistroforelasticsearch.security.ssl.util.SSLUtil;\n+import com.google.common.annotations.VisibleForTesting;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.ChannelFutureListener;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.handler.codec.ByteToMessageDecoder;\n+import io.netty.handler.ssl.SslHandler;\n+import java.nio.charset.StandardCharsets;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import javax.net.ssl.SSLException;\n+import java.util.List;\n+\n+/**\n+ * Modifies the current pipeline dynamically to enable TLS\n+ */\n+public class OpenDistroPortUnificationHandler extends ByteToMessageDecoder {\n+\n+    private final OpenDistroSecurityKeyStore odsks;\n+    private static final Logger logger = LogManager.getLogger(OpenDistroPortUnificationHandler.class);\n+\n+    private SslHandler providedSSLHandler;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NzU4ODQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroSSLDualModeConfig.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNTowMDowMFrOHVAusA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwODo0NTozNVrOHXQKlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc5NDA5Ng==", "bodyText": "IMO, this class should not be a singleton.", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r491794096", "createdAt": "2020-09-21T05:00:00Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroSSLDualModeConfig.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Portions Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.ssl.transport;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.annotations.VisibleForTesting;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+\n+public class OpenDistroSSLDualModeConfig {\n+\n+    public static final Setting<Boolean> SSL_DUAL_MODE_SETTING = Setting.boolSetting(ConfigConstants.OPENDISTRO_SECURITY_SSL_DUAL_MODE_ENABLED,\n+            true, Setting.Property.NodeScope, Setting.Property.Dynamic, Setting.Property.Filtered);\n+\n+    private static final Logger logger = LogManager.getLogger(OpenDistroSSLDualModeConfig.class);\n+\n+    private static OpenDistroSSLDualModeConfig INSTANCE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjExODk3Mg==", "bodyText": "We determine the SSL_DUAL_MODE setting value based on a combination of the value from elasticsearch.yml file and corresponding cluster setting value. The object provides access to the value of SSL Dual mode config, which once set can only be modified via the cluster setting. The object is used during the setup of new connections in the transport server and transport client code to check the dual mode setting.\nFor this use case the class was designed as a singleton since we want to object to be created only once and used multiple times. If class is not singleton we would need to pass the created object to all places it is being used in.", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r492118972", "createdAt": "2020-09-21T14:59:35Z", "author": {"login": "sachetalva"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroSSLDualModeConfig.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Portions Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.ssl.transport;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.annotations.VisibleForTesting;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+\n+public class OpenDistroSSLDualModeConfig {\n+\n+    public static final Setting<Boolean> SSL_DUAL_MODE_SETTING = Setting.boolSetting(ConfigConstants.OPENDISTRO_SECURITY_SSL_DUAL_MODE_ENABLED,\n+            true, Setting.Property.NodeScope, Setting.Property.Dynamic, Setting.Property.Filtered);\n+\n+    private static final Logger logger = LogManager.getLogger(OpenDistroSSLDualModeConfig.class);\n+\n+    private static OpenDistroSSLDualModeConfig INSTANCE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc5NDA5Ng=="}, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIyNzcwNg==", "bodyText": "Create instance in the plugin class and pass it around if necessary.", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r492227706", "createdAt": "2020-09-21T17:27:22Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroSSLDualModeConfig.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Portions Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.ssl.transport;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.annotations.VisibleForTesting;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+\n+public class OpenDistroSSLDualModeConfig {\n+\n+    public static final Setting<Boolean> SSL_DUAL_MODE_SETTING = Setting.boolSetting(ConfigConstants.OPENDISTRO_SECURITY_SSL_DUAL_MODE_ENABLED,\n+            true, Setting.Property.NodeScope, Setting.Property.Dynamic, Setting.Property.Filtered);\n+\n+    private static final Logger logger = LogManager.getLogger(OpenDistroSSLDualModeConfig.class);\n+\n+    private static OpenDistroSSLDualModeConfig INSTANCE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc5NDA5Ng=="}, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE0NDE0OQ==", "bodyText": "changing code to create the object in plugin class and passing it to others instead of making OpenDistroSSLDualModeConfig a Singleton", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r494144149", "createdAt": "2020-09-24T08:45:35Z", "author": {"login": "sachetalva"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroSSLDualModeConfig.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Portions Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.ssl.transport;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.annotations.VisibleForTesting;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+\n+public class OpenDistroSSLDualModeConfig {\n+\n+    public static final Setting<Boolean> SSL_DUAL_MODE_SETTING = Setting.boolSetting(ConfigConstants.OPENDISTRO_SECURITY_SSL_DUAL_MODE_ENABLED,\n+            true, Setting.Property.NodeScope, Setting.Property.Dynamic, Setting.Property.Filtered);\n+\n+    private static final Logger logger = LogManager.getLogger(OpenDistroSSLDualModeConfig.class);\n+\n+    private static OpenDistroSSLDualModeConfig INSTANCE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc5NDA5Ng=="}, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NzU5MTU3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroSSLDualModeConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNTowMjozMVrOHVAwdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwODo0NzozM1rOHXQPwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc5NDU0OA==", "bodyText": "avoid \"enabled is true\" or \"enabled is false\". Change to \"... is enabled\" or \"... is disabled\"", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r491794548", "createdAt": "2020-09-21T05:02:31Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroSSLDualModeConfig.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Portions Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.ssl.transport;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.annotations.VisibleForTesting;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+\n+public class OpenDistroSSLDualModeConfig {\n+\n+    public static final Setting<Boolean> SSL_DUAL_MODE_SETTING = Setting.boolSetting(ConfigConstants.OPENDISTRO_SECURITY_SSL_DUAL_MODE_ENABLED,\n+            true, Setting.Property.NodeScope, Setting.Property.Dynamic, Setting.Property.Filtered);\n+\n+    private static final Logger logger = LogManager.getLogger(OpenDistroSSLDualModeConfig.class);\n+\n+    private static OpenDistroSSLDualModeConfig INSTANCE;\n+    private final boolean isSSLOnly;\n+    private volatile boolean dualModeEnabled;\n+\n+    private OpenDistroSSLDualModeConfig(final ClusterSettings clusterSettings, final Settings settings) {\n+        // currently dual mode can be enabled only when SSLOnly is enabled. This stance can change in future.\n+        isSSLOnly = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_SSL_ONLY, false);\n+        dualModeEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_SSL_DUAL_MODE_ENABLED,\n+                false);\n+        logger.info(\"SSL set dual mode status enabled is {}\", isDualModeEnabled());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE0NTQ3NA==", "bodyText": "done", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r494145474", "createdAt": "2020-09-24T08:47:33Z", "author": {"login": "sachetalva"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroSSLDualModeConfig.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Portions Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.ssl.transport;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.annotations.VisibleForTesting;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+\n+public class OpenDistroSSLDualModeConfig {\n+\n+    public static final Setting<Boolean> SSL_DUAL_MODE_SETTING = Setting.boolSetting(ConfigConstants.OPENDISTRO_SECURITY_SSL_DUAL_MODE_ENABLED,\n+            true, Setting.Property.NodeScope, Setting.Property.Dynamic, Setting.Property.Filtered);\n+\n+    private static final Logger logger = LogManager.getLogger(OpenDistroSSLDualModeConfig.class);\n+\n+    private static OpenDistroSSLDualModeConfig INSTANCE;\n+    private final boolean isSSLOnly;\n+    private volatile boolean dualModeEnabled;\n+\n+    private OpenDistroSSLDualModeConfig(final ClusterSettings clusterSettings, final Settings settings) {\n+        // currently dual mode can be enabled only when SSLOnly is enabled. This stance can change in future.\n+        isSSLOnly = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_SSL_ONLY, false);\n+        dualModeEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_SSL_DUAL_MODE_ENABLED,\n+                false);\n+        logger.info(\"SSL set dual mode status enabled is {}\", isDualModeEnabled());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc5NDU0OA=="}, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MTc1NTM1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/rest/SSLDualModeAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMjowNTozMFrOHVoHYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMjowNTozMFrOHVoHYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQzOTM5Mw==", "bodyText": "Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n(\"Portions\" not needed)", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r492439393", "createdAt": "2020-09-22T02:05:30Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/rest/SSLDualModeAction.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Portions Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MTc3NjU3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/rest/SSLDualModeAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMjoyMDozOFrOHVoTEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwODo1MTozNlrOHXQZ6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ0MjM4Ng==", "bodyText": "we should explicitly check \"_disable\" otherwise any random string will disable dual mode. like \"/_opendistro/_security/ssl_dual_mode/xyz --> will disable dual mode)\nand we should handle any other random string and throw error/ not supported.", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r492442386", "createdAt": "2020-09-22T02:20:38Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/rest/SSLDualModeAction.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Portions Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+package com.amazon.opendistroforelasticsearch.security.rest;\n+\n+import com.amazon.opendistroforelasticsearch.security.ssl.transport.OpenDistroSSLDualModeConfig;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.admin.cluster.settings.ClusterUpdateSettingsRequest;\n+import org.elasticsearch.action.admin.cluster.settings.ClusterUpdateSettingsResponse;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.rest.*;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+import static org.elasticsearch.rest.RestRequest.Method.PUT;\n+\n+public class SSLDualModeAction extends BaseRestHandler {\n+\n+    private static final String RESPONSE_ENABLED_FIELD = \"enabled\";\n+    private static final String RESPONSE_ERROR_FIELD = \"error\";\n+\n+    private ClusterSettings clusterSettings;\n+    private Settings settings;\n+\n+    private static final Logger logger = LogManager.getLogger(SSLDualModeAction.class);\n+\n+    private static final List<Route> routes = ImmutableList.of(\n+            // gets the current status of ssl dual mode\n+            new Route(GET, \"/_opendistro/_security/ssl_dual_mode\"),\n+            // disables ssl dual mode\n+            new Route(PUT, \"/_opendistro/_security/ssl_dual_mode/_disable\"),\n+            // enables ssl dual mode\n+            new Route(PUT, \"/_opendistro/_security/ssl_dual_mode/_enable\")\n+    );\n+\n+    public SSLDualModeAction(final Settings settings, final ClusterSettings clusterSettings) {\n+        this.settings = settings;\n+        this.clusterSettings = clusterSettings;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"ssl_dual_mode\";\n+    }\n+\n+    @Override\n+    public List<Route> routes() {\n+        return routes;\n+    }\n+\n+    @Override\n+    protected RestChannelConsumer prepareRequest(RestRequest request, NodeClient client) throws IOException {\n+        return new RestChannelConsumer() {\n+            @Override\n+            public void accept(RestChannel restChannel) throws Exception {\n+\n+                switch (request.method()) {\n+                    case GET:\n+                        boolean dualModeEnabled = OpenDistroSSLDualModeConfig.getInstance().isDualModeEnabled();\n+                        BytesRestResponse response = getDualModeResponse(restChannel, dualModeEnabled);\n+                        restChannel.sendResponse(response);\n+                        break;\n+                    case PUT:\n+                        try {\n+                            final boolean enableDualMode;\n+                            if (request.path().endsWith(\"_enable\")) {\n+                                enableDualMode = true;\n+                            } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE0ODA3Mg==", "bodyText": "Adding an explicit check for \"_disable\" / \"_enable\" and failing if it does not match either of the strings.", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r494148072", "createdAt": "2020-09-24T08:51:36Z", "author": {"login": "sachetalva"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/rest/SSLDualModeAction.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Portions Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+package com.amazon.opendistroforelasticsearch.security.rest;\n+\n+import com.amazon.opendistroforelasticsearch.security.ssl.transport.OpenDistroSSLDualModeConfig;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.admin.cluster.settings.ClusterUpdateSettingsRequest;\n+import org.elasticsearch.action.admin.cluster.settings.ClusterUpdateSettingsResponse;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.rest.*;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+import static org.elasticsearch.rest.RestRequest.Method.PUT;\n+\n+public class SSLDualModeAction extends BaseRestHandler {\n+\n+    private static final String RESPONSE_ENABLED_FIELD = \"enabled\";\n+    private static final String RESPONSE_ERROR_FIELD = \"error\";\n+\n+    private ClusterSettings clusterSettings;\n+    private Settings settings;\n+\n+    private static final Logger logger = LogManager.getLogger(SSLDualModeAction.class);\n+\n+    private static final List<Route> routes = ImmutableList.of(\n+            // gets the current status of ssl dual mode\n+            new Route(GET, \"/_opendistro/_security/ssl_dual_mode\"),\n+            // disables ssl dual mode\n+            new Route(PUT, \"/_opendistro/_security/ssl_dual_mode/_disable\"),\n+            // enables ssl dual mode\n+            new Route(PUT, \"/_opendistro/_security/ssl_dual_mode/_enable\")\n+    );\n+\n+    public SSLDualModeAction(final Settings settings, final ClusterSettings clusterSettings) {\n+        this.settings = settings;\n+        this.clusterSettings = clusterSettings;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"ssl_dual_mode\";\n+    }\n+\n+    @Override\n+    public List<Route> routes() {\n+        return routes;\n+    }\n+\n+    @Override\n+    protected RestChannelConsumer prepareRequest(RestRequest request, NodeClient client) throws IOException {\n+        return new RestChannelConsumer() {\n+            @Override\n+            public void accept(RestChannel restChannel) throws Exception {\n+\n+                switch (request.method()) {\n+                    case GET:\n+                        boolean dualModeEnabled = OpenDistroSSLDualModeConfig.getInstance().isDualModeEnabled();\n+                        BytesRestResponse response = getDualModeResponse(restChannel, dualModeEnabled);\n+                        restChannel.sendResponse(response);\n+                        break;\n+                    case PUT:\n+                        try {\n+                            final boolean enableDualMode;\n+                            if (request.path().endsWith(\"_enable\")) {\n+                                enableDualMode = true;\n+                            } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ0MjM4Ng=="}, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MTgxNjU2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroPortUnificationHandler.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMjo1MDowNFrOHVopQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNDo1MTo1M1rOHfNP3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ0ODA2NA==", "bodyText": "Are we never expecting message less than 6 bytes?  how did we ensure that message will always be 6+ bytes?", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r492448064", "createdAt": "2020-09-22T02:50:04Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroPortUnificationHandler.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Portions Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+package com.amazon.opendistroforelasticsearch.security.ssl.transport;\n+\n+\n+import com.amazon.opendistroforelasticsearch.security.ssl.OpenDistroSecurityKeyStore;\n+import com.amazon.opendistroforelasticsearch.security.ssl.util.SSLConnectionTestUtil;\n+import com.amazon.opendistroforelasticsearch.security.ssl.util.SSLUtil;\n+import com.google.common.annotations.VisibleForTesting;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.ChannelFutureListener;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.handler.codec.ByteToMessageDecoder;\n+import io.netty.handler.ssl.SslHandler;\n+import java.nio.charset.StandardCharsets;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import javax.net.ssl.SSLException;\n+import java.util.List;\n+\n+/**\n+ * Modifies the current pipeline dynamically to enable TLS\n+ */\n+public class OpenDistroPortUnificationHandler extends ByteToMessageDecoder {\n+\n+    private final OpenDistroSecurityKeyStore odsks;\n+    private static final Logger logger = LogManager.getLogger(OpenDistroPortUnificationHandler.class);\n+\n+    private SslHandler providedSSLHandler;\n+    private SSLUtil sslUtils;\n+\n+    public OpenDistroPortUnificationHandler(OpenDistroSecurityKeyStore odsks, SSLUtil sslUtils) {\n+        this(odsks, null, sslUtils);\n+    }\n+\n+    @VisibleForTesting\n+    protected OpenDistroPortUnificationHandler(OpenDistroSecurityKeyStore odsks, SslHandler providedSSLHandler,\n+                                               SSLUtil sslUtils) {\n+        this.odsks = odsks;\n+        this.providedSSLHandler = providedSSLHandler;\n+        this.sslUtils = sslUtils;\n+    }\n+\n+    @Override\n+    protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {\n+        // Will use the first six bytes to detect a protocol.\n+        if (in.readableBytes() < 6) {\n+            return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjgzNTM0Mg==", "bodyText": "It is ensured by ES. Minimum payload size for ES transport protocol is 6 bytes. i.e ES Handshake for ex is the most smallest message(6 bytes) that can be sent.", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r492835342", "createdAt": "2020-09-22T15:34:35Z", "author": {"login": "vengadanathan-s"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroPortUnificationHandler.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Portions Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+package com.amazon.opendistroforelasticsearch.security.ssl.transport;\n+\n+\n+import com.amazon.opendistroforelasticsearch.security.ssl.OpenDistroSecurityKeyStore;\n+import com.amazon.opendistroforelasticsearch.security.ssl.util.SSLConnectionTestUtil;\n+import com.amazon.opendistroforelasticsearch.security.ssl.util.SSLUtil;\n+import com.google.common.annotations.VisibleForTesting;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.ChannelFutureListener;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.handler.codec.ByteToMessageDecoder;\n+import io.netty.handler.ssl.SslHandler;\n+import java.nio.charset.StandardCharsets;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import javax.net.ssl.SSLException;\n+import java.util.List;\n+\n+/**\n+ * Modifies the current pipeline dynamically to enable TLS\n+ */\n+public class OpenDistroPortUnificationHandler extends ByteToMessageDecoder {\n+\n+    private final OpenDistroSecurityKeyStore odsks;\n+    private static final Logger logger = LogManager.getLogger(OpenDistroPortUnificationHandler.class);\n+\n+    private SslHandler providedSSLHandler;\n+    private SSLUtil sslUtils;\n+\n+    public OpenDistroPortUnificationHandler(OpenDistroSecurityKeyStore odsks, SSLUtil sslUtils) {\n+        this(odsks, null, sslUtils);\n+    }\n+\n+    @VisibleForTesting\n+    protected OpenDistroPortUnificationHandler(OpenDistroSecurityKeyStore odsks, SslHandler providedSSLHandler,\n+                                               SSLUtil sslUtils) {\n+        this.odsks = odsks;\n+        this.providedSSLHandler = providedSSLHandler;\n+        this.sslUtils = sslUtils;\n+    }\n+\n+    @Override\n+    protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {\n+        // Will use the first six bytes to detect a protocol.\n+        if (in.readableBytes() < 6) {\n+            return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ0ODA2NA=="}, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ2ODQ0Nw==", "bodyText": "Can you please point to the code where this is enforced.", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r498468447", "createdAt": "2020-10-01T19:29:20Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroPortUnificationHandler.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Portions Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+package com.amazon.opendistroforelasticsearch.security.ssl.transport;\n+\n+\n+import com.amazon.opendistroforelasticsearch.security.ssl.OpenDistroSecurityKeyStore;\n+import com.amazon.opendistroforelasticsearch.security.ssl.util.SSLConnectionTestUtil;\n+import com.amazon.opendistroforelasticsearch.security.ssl.util.SSLUtil;\n+import com.google.common.annotations.VisibleForTesting;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.ChannelFutureListener;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.handler.codec.ByteToMessageDecoder;\n+import io.netty.handler.ssl.SslHandler;\n+import java.nio.charset.StandardCharsets;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import javax.net.ssl.SSLException;\n+import java.util.List;\n+\n+/**\n+ * Modifies the current pipeline dynamically to enable TLS\n+ */\n+public class OpenDistroPortUnificationHandler extends ByteToMessageDecoder {\n+\n+    private final OpenDistroSecurityKeyStore odsks;\n+    private static final Logger logger = LogManager.getLogger(OpenDistroPortUnificationHandler.class);\n+\n+    private SslHandler providedSSLHandler;\n+    private SSLUtil sslUtils;\n+\n+    public OpenDistroPortUnificationHandler(OpenDistroSecurityKeyStore odsks, SSLUtil sslUtils) {\n+        this(odsks, null, sslUtils);\n+    }\n+\n+    @VisibleForTesting\n+    protected OpenDistroPortUnificationHandler(OpenDistroSecurityKeyStore odsks, SslHandler providedSSLHandler,\n+                                               SSLUtil sslUtils) {\n+        this.odsks = odsks;\n+        this.providedSSLHandler = providedSSLHandler;\n+        this.sslUtils = sslUtils;\n+    }\n+\n+    @Override\n+    protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {\n+        // Will use the first six bytes to detect a protocol.\n+        if (in.readableBytes() < 6) {\n+            return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ0ODA2NA=="}, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYwMTg4MA==", "bodyText": "https://github.com/elastic/elasticsearch/blob/381d7586e4067c1ce0dd840e704b21da9dbeb61b/server/src/main/java/org/elasticsearch/transport/TcpTransport.java#L103 and https://github.com/elastic/elasticsearch/blob/381d7586e4067c1ce0dd840e704b21da9dbeb61b/server/src/main/java/org/elasticsearch/transport/TcpTransport.java#L733-L749", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r498601880", "createdAt": "2020-10-02T03:08:06Z", "author": {"login": "vengadanathan-s"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroPortUnificationHandler.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Portions Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+package com.amazon.opendistroforelasticsearch.security.ssl.transport;\n+\n+\n+import com.amazon.opendistroforelasticsearch.security.ssl.OpenDistroSecurityKeyStore;\n+import com.amazon.opendistroforelasticsearch.security.ssl.util.SSLConnectionTestUtil;\n+import com.amazon.opendistroforelasticsearch.security.ssl.util.SSLUtil;\n+import com.google.common.annotations.VisibleForTesting;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.ChannelFutureListener;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.handler.codec.ByteToMessageDecoder;\n+import io.netty.handler.ssl.SslHandler;\n+import java.nio.charset.StandardCharsets;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import javax.net.ssl.SSLException;\n+import java.util.List;\n+\n+/**\n+ * Modifies the current pipeline dynamically to enable TLS\n+ */\n+public class OpenDistroPortUnificationHandler extends ByteToMessageDecoder {\n+\n+    private final OpenDistroSecurityKeyStore odsks;\n+    private static final Logger logger = LogManager.getLogger(OpenDistroPortUnificationHandler.class);\n+\n+    private SslHandler providedSSLHandler;\n+    private SSLUtil sslUtils;\n+\n+    public OpenDistroPortUnificationHandler(OpenDistroSecurityKeyStore odsks, SSLUtil sslUtils) {\n+        this(odsks, null, sslUtils);\n+    }\n+\n+    @VisibleForTesting\n+    protected OpenDistroPortUnificationHandler(OpenDistroSecurityKeyStore odsks, SslHandler providedSSLHandler,\n+                                               SSLUtil sslUtils) {\n+        this.odsks = odsks;\n+        this.providedSSLHandler = providedSSLHandler;\n+        this.sslUtils = sslUtils;\n+    }\n+\n+    @Override\n+    protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {\n+        // Will use the first six bytes to detect a protocol.\n+        if (in.readableBytes() < 6) {\n+            return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ0ODA2NA=="}, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYwOTI2NQ==", "bodyText": "In case the first byte is not 0x16, can't we reliably say that it is not TLS?", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r498609265", "createdAt": "2020-10-02T03:56:30Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroPortUnificationHandler.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Portions Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+package com.amazon.opendistroforelasticsearch.security.ssl.transport;\n+\n+\n+import com.amazon.opendistroforelasticsearch.security.ssl.OpenDistroSecurityKeyStore;\n+import com.amazon.opendistroforelasticsearch.security.ssl.util.SSLConnectionTestUtil;\n+import com.amazon.opendistroforelasticsearch.security.ssl.util.SSLUtil;\n+import com.google.common.annotations.VisibleForTesting;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.ChannelFutureListener;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.handler.codec.ByteToMessageDecoder;\n+import io.netty.handler.ssl.SslHandler;\n+import java.nio.charset.StandardCharsets;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import javax.net.ssl.SSLException;\n+import java.util.List;\n+\n+/**\n+ * Modifies the current pipeline dynamically to enable TLS\n+ */\n+public class OpenDistroPortUnificationHandler extends ByteToMessageDecoder {\n+\n+    private final OpenDistroSecurityKeyStore odsks;\n+    private static final Logger logger = LogManager.getLogger(OpenDistroPortUnificationHandler.class);\n+\n+    private SslHandler providedSSLHandler;\n+    private SSLUtil sslUtils;\n+\n+    public OpenDistroPortUnificationHandler(OpenDistroSecurityKeyStore odsks, SSLUtil sslUtils) {\n+        this(odsks, null, sslUtils);\n+    }\n+\n+    @VisibleForTesting\n+    protected OpenDistroPortUnificationHandler(OpenDistroSecurityKeyStore odsks, SslHandler providedSSLHandler,\n+                                               SSLUtil sslUtils) {\n+        this.odsks = odsks;\n+        this.providedSSLHandler = providedSSLHandler;\n+        this.sslUtils = sslUtils;\n+    }\n+\n+    @Override\n+    protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {\n+        // Will use the first six bytes to detect a protocol.\n+        if (in.readableBytes() < 6) {\n+            return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ0ODA2NA=="}, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYxNjEzMA==", "bodyText": "The first byte wont not be sufficient to reliably conclude that the message was TLS or not, also additionally we need to check the first 6 bytes of the message for the custom dual mode client-server handshake", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r498616130", "createdAt": "2020-10-02T04:41:42Z", "author": {"login": "sachetalva"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroPortUnificationHandler.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Portions Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+package com.amazon.opendistroforelasticsearch.security.ssl.transport;\n+\n+\n+import com.amazon.opendistroforelasticsearch.security.ssl.OpenDistroSecurityKeyStore;\n+import com.amazon.opendistroforelasticsearch.security.ssl.util.SSLConnectionTestUtil;\n+import com.amazon.opendistroforelasticsearch.security.ssl.util.SSLUtil;\n+import com.google.common.annotations.VisibleForTesting;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.ChannelFutureListener;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.handler.codec.ByteToMessageDecoder;\n+import io.netty.handler.ssl.SslHandler;\n+import java.nio.charset.StandardCharsets;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import javax.net.ssl.SSLException;\n+import java.util.List;\n+\n+/**\n+ * Modifies the current pipeline dynamically to enable TLS\n+ */\n+public class OpenDistroPortUnificationHandler extends ByteToMessageDecoder {\n+\n+    private final OpenDistroSecurityKeyStore odsks;\n+    private static final Logger logger = LogManager.getLogger(OpenDistroPortUnificationHandler.class);\n+\n+    private SslHandler providedSSLHandler;\n+    private SSLUtil sslUtils;\n+\n+    public OpenDistroPortUnificationHandler(OpenDistroSecurityKeyStore odsks, SSLUtil sslUtils) {\n+        this(odsks, null, sslUtils);\n+    }\n+\n+    @VisibleForTesting\n+    protected OpenDistroPortUnificationHandler(OpenDistroSecurityKeyStore odsks, SslHandler providedSSLHandler,\n+                                               SSLUtil sslUtils) {\n+        this.odsks = odsks;\n+        this.providedSSLHandler = providedSSLHandler;\n+        this.sslUtils = sslUtils;\n+    }\n+\n+    @Override\n+    protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {\n+        // Will use the first six bytes to detect a protocol.\n+        if (in.readableBytes() < 6) {\n+            return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ0ODA2NA=="}, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYyMTA3Ng==", "bodyText": "In case of TLS should not the first byte be always 0x16? I understand that you can't reliably say that it is TLS and/or dual mode client-server handshake until all 6 bytes are received, but it should be possible to reliably say that it is not using the first byte.", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r498621076", "createdAt": "2020-10-02T05:12:57Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroPortUnificationHandler.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Portions Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+package com.amazon.opendistroforelasticsearch.security.ssl.transport;\n+\n+\n+import com.amazon.opendistroforelasticsearch.security.ssl.OpenDistroSecurityKeyStore;\n+import com.amazon.opendistroforelasticsearch.security.ssl.util.SSLConnectionTestUtil;\n+import com.amazon.opendistroforelasticsearch.security.ssl.util.SSLUtil;\n+import com.google.common.annotations.VisibleForTesting;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.ChannelFutureListener;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.handler.codec.ByteToMessageDecoder;\n+import io.netty.handler.ssl.SslHandler;\n+import java.nio.charset.StandardCharsets;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import javax.net.ssl.SSLException;\n+import java.util.List;\n+\n+/**\n+ * Modifies the current pipeline dynamically to enable TLS\n+ */\n+public class OpenDistroPortUnificationHandler extends ByteToMessageDecoder {\n+\n+    private final OpenDistroSecurityKeyStore odsks;\n+    private static final Logger logger = LogManager.getLogger(OpenDistroPortUnificationHandler.class);\n+\n+    private SslHandler providedSSLHandler;\n+    private SSLUtil sslUtils;\n+\n+    public OpenDistroPortUnificationHandler(OpenDistroSecurityKeyStore odsks, SSLUtil sslUtils) {\n+        this(odsks, null, sslUtils);\n+    }\n+\n+    @VisibleForTesting\n+    protected OpenDistroPortUnificationHandler(OpenDistroSecurityKeyStore odsks, SslHandler providedSSLHandler,\n+                                               SSLUtil sslUtils) {\n+        this.odsks = odsks;\n+        this.providedSSLHandler = providedSSLHandler;\n+        this.sslUtils = sslUtils;\n+    }\n+\n+    @Override\n+    protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {\n+        // Will use the first six bytes to detect a protocol.\n+        if (in.readableBytes() < 6) {\n+            return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ0ODA2NA=="}, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ4NDk1Nw==", "bodyText": "The first byte can tell that it is not SSL message in some cases, but there may still be scenarios where we would need to check the first 5 bytes to confirm whether a message is SSL or not. The intention was to always prefer SSL connections when possible.\nAlso, we have a custom handshake message exchange which requires us to send at least 6 bytes of data between the transport client and transport server. This custom handshake helps in keeping the connection setup / probe deterministic and quick.\nMoreover, the entire logic to check the first 6 bytes only applies during the EIT migration phase (i.e. when dual mode is enabled)\nOnce the flag is disabled, the DualModeSSLHandler code is never used.", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r502484957", "createdAt": "2020-10-09T14:51:53Z", "author": {"login": "sachetalva"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroPortUnificationHandler.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Portions Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+package com.amazon.opendistroforelasticsearch.security.ssl.transport;\n+\n+\n+import com.amazon.opendistroforelasticsearch.security.ssl.OpenDistroSecurityKeyStore;\n+import com.amazon.opendistroforelasticsearch.security.ssl.util.SSLConnectionTestUtil;\n+import com.amazon.opendistroforelasticsearch.security.ssl.util.SSLUtil;\n+import com.google.common.annotations.VisibleForTesting;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.ChannelFutureListener;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.handler.codec.ByteToMessageDecoder;\n+import io.netty.handler.ssl.SslHandler;\n+import java.nio.charset.StandardCharsets;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import javax.net.ssl.SSLException;\n+import java.util.List;\n+\n+/**\n+ * Modifies the current pipeline dynamically to enable TLS\n+ */\n+public class OpenDistroPortUnificationHandler extends ByteToMessageDecoder {\n+\n+    private final OpenDistroSecurityKeyStore odsks;\n+    private static final Logger logger = LogManager.getLogger(OpenDistroPortUnificationHandler.class);\n+\n+    private SslHandler providedSSLHandler;\n+    private SSLUtil sslUtils;\n+\n+    public OpenDistroPortUnificationHandler(OpenDistroSecurityKeyStore odsks, SSLUtil sslUtils) {\n+        this(odsks, null, sslUtils);\n+    }\n+\n+    @VisibleForTesting\n+    protected OpenDistroPortUnificationHandler(OpenDistroSecurityKeyStore odsks, SslHandler providedSSLHandler,\n+                                               SSLUtil sslUtils) {\n+        this.odsks = odsks;\n+        this.providedSSLHandler = providedSSLHandler;\n+        this.sslUtils = sslUtils;\n+    }\n+\n+    @Override\n+    protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {\n+        // Will use the first six bytes to detect a protocol.\n+        if (in.readableBytes() < 6) {\n+            return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ0ODA2NA=="}, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MTgzMzcxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroSSLDualModeConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMzowMjoyM1rOHVoyww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNTo0MTowNFrOHWAlkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1MDQ5OQ==", "bodyText": "Does this mean that every restart of the node this setting will be reset based on elasticsearch.yml setting?\nWhy should we do that? If value is present in cluster setting, should we consider that over yml value?", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r492450499", "createdAt": "2020-09-22T03:02:23Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroSSLDualModeConfig.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Portions Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.ssl.transport;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.annotations.VisibleForTesting;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+\n+public class OpenDistroSSLDualModeConfig {\n+\n+    public static final Setting<Boolean> SSL_DUAL_MODE_SETTING = Setting.boolSetting(ConfigConstants.OPENDISTRO_SECURITY_SSL_DUAL_MODE_ENABLED,\n+            true, Setting.Property.NodeScope, Setting.Property.Dynamic, Setting.Property.Filtered);\n+\n+    private static final Logger logger = LogManager.getLogger(OpenDistroSSLDualModeConfig.class);\n+\n+    private static OpenDistroSSLDualModeConfig INSTANCE;\n+    private final boolean isSSLOnly;\n+    private volatile boolean dualModeEnabled;\n+\n+    private OpenDistroSSLDualModeConfig(final ClusterSettings clusterSettings, final Settings settings) {\n+        // currently dual mode can be enabled only when SSLOnly is enabled. This stance can change in future.\n+        isSSLOnly = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_SSL_ONLY, false);\n+        dualModeEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_SSL_DUAL_MODE_ENABLED,\n+                false);\n+        logger.info(\"SSL set dual mode status enabled is {}\", isDualModeEnabled());\n+        clusterSettings.addSettingsUpdateConsumer(SSL_DUAL_MODE_SETTING,\n+                dualModeEnabledClusterSetting -> {\n+                    logger.info(\"Detected change in settings for dual mode {}\", dualModeEnabledClusterSetting);\n+                    setDualModeEnabled(dualModeEnabledClusterSetting);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg0MDMzNw==", "bodyText": "Until the node joins the cluster it wont be having cluster settings, so it wont be able to know what is the current dual mode status, reading from yml file is the only it can know what is current dual mode status when booting up.\nAfter migrating customer should remove/disable dual mode from yml + make  API call to disable dual mode dynamically, that will ensure dual mode is permanently disabled.", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r492840337", "createdAt": "2020-09-22T15:41:04Z", "author": {"login": "vengadanathan-s"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroSSLDualModeConfig.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Portions Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.ssl.transport;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.annotations.VisibleForTesting;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+\n+public class OpenDistroSSLDualModeConfig {\n+\n+    public static final Setting<Boolean> SSL_DUAL_MODE_SETTING = Setting.boolSetting(ConfigConstants.OPENDISTRO_SECURITY_SSL_DUAL_MODE_ENABLED,\n+            true, Setting.Property.NodeScope, Setting.Property.Dynamic, Setting.Property.Filtered);\n+\n+    private static final Logger logger = LogManager.getLogger(OpenDistroSSLDualModeConfig.class);\n+\n+    private static OpenDistroSSLDualModeConfig INSTANCE;\n+    private final boolean isSSLOnly;\n+    private volatile boolean dualModeEnabled;\n+\n+    private OpenDistroSSLDualModeConfig(final ClusterSettings clusterSettings, final Settings settings) {\n+        // currently dual mode can be enabled only when SSLOnly is enabled. This stance can change in future.\n+        isSSLOnly = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_SSL_ONLY, false);\n+        dualModeEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_SSL_DUAL_MODE_ENABLED,\n+                false);\n+        logger.info(\"SSL set dual mode status enabled is {}\", isDualModeEnabled());\n+        clusterSettings.addSettingsUpdateConsumer(SSL_DUAL_MODE_SETTING,\n+                dualModeEnabledClusterSetting -> {\n+                    logger.info(\"Detected change in settings for dual mode {}\", dualModeEnabledClusterSetting);\n+                    setDualModeEnabled(dualModeEnabledClusterSetting);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1MDQ5OQ=="}, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MjI3MzA5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/util/SSLConnectionTestUtil.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNzowMjo1NFrOHVsoNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNDo0NDo1NlrOHfM2lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUxMzMzMg==", "bodyText": "this mean other node is able to communicate in DualMode (and hence SSL too)\nBut what will happen if other node is only listening in SSL mode  (and not in Dual Mode) ?\nThis check (sendDualSSLClientHello() ) will fail..  and also SendESPing() will fail .. (but actually SSL is still available so node should use SSL to communicate)", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r492513332", "createdAt": "2020-09-22T07:02:54Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/util/SSLConnectionTestUtil.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Portions Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.ssl.util;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.net.Socket;\n+import java.nio.charset.StandardCharsets;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * Utility class to test if the server supports SSL connections.\n+ * SSL Check will be done by sending an ES Ping to see if server is replying to pings.\n+ * Following that a custom client hello message will be sent to the server, if the server\n+ * side has OpenDistroPortUnificationHandler it will reply with server hello message.\n+ */\n+public class SSLConnectionTestUtil {\n+\n+    private static final Logger logger = LogManager.getLogger(SSLConnectionTestUtil.class);\n+    public static final byte[] ES_PING_MSG = new byte[]{(byte) 'E', (byte) 'S', (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF};\n+    public static final String DUAL_MODE_CLIENT_HELLO_MSG = \"DUALCM\";\n+    public static final String DUAL_MODE_SERVER_HELLO_MSG = \"DUALSM\";\n+    private static final int SOCKET_TIMEOUT_MILLIS = 10 * 1000;\n+    private boolean esPingReplyReceived;\n+    private boolean dualSSLProbeReplyReceived;\n+    private final String host;\n+    private final int port;\n+    private Socket overriddenSocket = null;\n+    private OutputStreamWriter testOutputStreamWriter = null;\n+    private InputStreamReader testInputStreamReader = null;\n+\n+    public SSLConnectionTestUtil(final String host, final int port) {\n+        this.host = host;\n+        this.port = port;\n+        esPingReplyReceived = false;\n+        dualSSLProbeReplyReceived = false;\n+    }\n+\n+    @VisibleForTesting\n+    protected SSLConnectionTestUtil(final String host, final int port, final Socket overriddenSocket, final OutputStreamWriter testOutputStreamWriter,\n+        final InputStreamReader testInputStreamReader) {\n+        this.overriddenSocket = overriddenSocket;\n+        this.testOutputStreamWriter = testOutputStreamWriter;\n+        this.testInputStreamReader = testInputStreamReader;\n+\n+        this.host = host;\n+        this.port = port;\n+        esPingReplyReceived = false;\n+        dualSSLProbeReplyReceived = false;\n+    }\n+\n+    /**\n+     * Test connection to server by performing the below steps:\n+     * - Send Client Hello to check if the server replies with Server Hello which indicates that Server understands SSL\n+     * - Send ES Ping to check if the server replies to the ES Ping message\n+     *\n+     * @return SSLConnectionTestResult i.e. ES_PING_FAILED or SSL_NOT_AVAILABLE or SSL_AVAILABLE\n+     */\n+    public SSLConnectionTestResult testConnection() {\n+        if (sendDualSSLClientHello()) {\n+            return SSLConnectionTestResult.SSL_AVAILABLE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjgzODYyNw==", "bodyText": "When can this happen ? We use dual mode only during migration i.e adding security plugin with SSL to existing cluster which does not have security plugin installed i.e using only plain text.", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r492838627", "createdAt": "2020-09-22T15:38:50Z", "author": {"login": "vengadanathan-s"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/util/SSLConnectionTestUtil.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Portions Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.ssl.util;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.net.Socket;\n+import java.nio.charset.StandardCharsets;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * Utility class to test if the server supports SSL connections.\n+ * SSL Check will be done by sending an ES Ping to see if server is replying to pings.\n+ * Following that a custom client hello message will be sent to the server, if the server\n+ * side has OpenDistroPortUnificationHandler it will reply with server hello message.\n+ */\n+public class SSLConnectionTestUtil {\n+\n+    private static final Logger logger = LogManager.getLogger(SSLConnectionTestUtil.class);\n+    public static final byte[] ES_PING_MSG = new byte[]{(byte) 'E', (byte) 'S', (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF};\n+    public static final String DUAL_MODE_CLIENT_HELLO_MSG = \"DUALCM\";\n+    public static final String DUAL_MODE_SERVER_HELLO_MSG = \"DUALSM\";\n+    private static final int SOCKET_TIMEOUT_MILLIS = 10 * 1000;\n+    private boolean esPingReplyReceived;\n+    private boolean dualSSLProbeReplyReceived;\n+    private final String host;\n+    private final int port;\n+    private Socket overriddenSocket = null;\n+    private OutputStreamWriter testOutputStreamWriter = null;\n+    private InputStreamReader testInputStreamReader = null;\n+\n+    public SSLConnectionTestUtil(final String host, final int port) {\n+        this.host = host;\n+        this.port = port;\n+        esPingReplyReceived = false;\n+        dualSSLProbeReplyReceived = false;\n+    }\n+\n+    @VisibleForTesting\n+    protected SSLConnectionTestUtil(final String host, final int port, final Socket overriddenSocket, final OutputStreamWriter testOutputStreamWriter,\n+        final InputStreamReader testInputStreamReader) {\n+        this.overriddenSocket = overriddenSocket;\n+        this.testOutputStreamWriter = testOutputStreamWriter;\n+        this.testInputStreamReader = testInputStreamReader;\n+\n+        this.host = host;\n+        this.port = port;\n+        esPingReplyReceived = false;\n+        dualSSLProbeReplyReceived = false;\n+    }\n+\n+    /**\n+     * Test connection to server by performing the below steps:\n+     * - Send Client Hello to check if the server replies with Server Hello which indicates that Server understands SSL\n+     * - Send ES Ping to check if the server replies to the ES Ping message\n+     *\n+     * @return SSLConnectionTestResult i.e. ES_PING_FAILED or SSL_NOT_AVAILABLE or SSL_AVAILABLE\n+     */\n+    public SSLConnectionTestResult testConnection() {\n+        if (sendDualSSLClientHello()) {\n+            return SSLConnectionTestResult.SSL_AVAILABLE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUxMzMzMg=="}, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYyMjMyNQ==", "bodyText": "This may happen in ODFE installation when new node with enabled dual SSL mode is added to an existing cluster with prior version of security plugin installed. If it is not supported, there should be clear error message, that dual SSL mode is not supported, not just network timeout.", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r498622325", "createdAt": "2020-10-02T05:21:05Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/util/SSLConnectionTestUtil.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Portions Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.ssl.util;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.net.Socket;\n+import java.nio.charset.StandardCharsets;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * Utility class to test if the server supports SSL connections.\n+ * SSL Check will be done by sending an ES Ping to see if server is replying to pings.\n+ * Following that a custom client hello message will be sent to the server, if the server\n+ * side has OpenDistroPortUnificationHandler it will reply with server hello message.\n+ */\n+public class SSLConnectionTestUtil {\n+\n+    private static final Logger logger = LogManager.getLogger(SSLConnectionTestUtil.class);\n+    public static final byte[] ES_PING_MSG = new byte[]{(byte) 'E', (byte) 'S', (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF};\n+    public static final String DUAL_MODE_CLIENT_HELLO_MSG = \"DUALCM\";\n+    public static final String DUAL_MODE_SERVER_HELLO_MSG = \"DUALSM\";\n+    private static final int SOCKET_TIMEOUT_MILLIS = 10 * 1000;\n+    private boolean esPingReplyReceived;\n+    private boolean dualSSLProbeReplyReceived;\n+    private final String host;\n+    private final int port;\n+    private Socket overriddenSocket = null;\n+    private OutputStreamWriter testOutputStreamWriter = null;\n+    private InputStreamReader testInputStreamReader = null;\n+\n+    public SSLConnectionTestUtil(final String host, final int port) {\n+        this.host = host;\n+        this.port = port;\n+        esPingReplyReceived = false;\n+        dualSSLProbeReplyReceived = false;\n+    }\n+\n+    @VisibleForTesting\n+    protected SSLConnectionTestUtil(final String host, final int port, final Socket overriddenSocket, final OutputStreamWriter testOutputStreamWriter,\n+        final InputStreamReader testInputStreamReader) {\n+        this.overriddenSocket = overriddenSocket;\n+        this.testOutputStreamWriter = testOutputStreamWriter;\n+        this.testInputStreamReader = testInputStreamReader;\n+\n+        this.host = host;\n+        this.port = port;\n+        esPingReplyReceived = false;\n+        dualSSLProbeReplyReceived = false;\n+    }\n+\n+    /**\n+     * Test connection to server by performing the below steps:\n+     * - Send Client Hello to check if the server replies with Server Hello which indicates that Server understands SSL\n+     * - Send ES Ping to check if the server replies to the ES Ping message\n+     *\n+     * @return SSLConnectionTestResult i.e. ES_PING_FAILED or SSL_NOT_AVAILABLE or SSL_AVAILABLE\n+     */\n+    public SSLConnectionTestResult testConnection() {\n+        if (sendDualSSLClientHello()) {\n+            return SSLConnectionTestResult.SSL_AVAILABLE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUxMzMzMg=="}, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY2MDAwNw==", "bodyText": "I am still not getting why would this happen, am i missing anything ? why would customer enable dual mode when existing cluster has SSL plugin and scan speak SSL already ? Ideally they must be following doc and enabling dual mode when migrating existing cluster to add security plugin with SSL enabled. It just wont work as customer has configured it wrongly. Correct us if we are wrong.", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r498660007", "createdAt": "2020-10-02T07:37:11Z", "author": {"login": "vengadanathan-s"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/util/SSLConnectionTestUtil.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Portions Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.ssl.util;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.net.Socket;\n+import java.nio.charset.StandardCharsets;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * Utility class to test if the server supports SSL connections.\n+ * SSL Check will be done by sending an ES Ping to see if server is replying to pings.\n+ * Following that a custom client hello message will be sent to the server, if the server\n+ * side has OpenDistroPortUnificationHandler it will reply with server hello message.\n+ */\n+public class SSLConnectionTestUtil {\n+\n+    private static final Logger logger = LogManager.getLogger(SSLConnectionTestUtil.class);\n+    public static final byte[] ES_PING_MSG = new byte[]{(byte) 'E', (byte) 'S', (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF};\n+    public static final String DUAL_MODE_CLIENT_HELLO_MSG = \"DUALCM\";\n+    public static final String DUAL_MODE_SERVER_HELLO_MSG = \"DUALSM\";\n+    private static final int SOCKET_TIMEOUT_MILLIS = 10 * 1000;\n+    private boolean esPingReplyReceived;\n+    private boolean dualSSLProbeReplyReceived;\n+    private final String host;\n+    private final int port;\n+    private Socket overriddenSocket = null;\n+    private OutputStreamWriter testOutputStreamWriter = null;\n+    private InputStreamReader testInputStreamReader = null;\n+\n+    public SSLConnectionTestUtil(final String host, final int port) {\n+        this.host = host;\n+        this.port = port;\n+        esPingReplyReceived = false;\n+        dualSSLProbeReplyReceived = false;\n+    }\n+\n+    @VisibleForTesting\n+    protected SSLConnectionTestUtil(final String host, final int port, final Socket overriddenSocket, final OutputStreamWriter testOutputStreamWriter,\n+        final InputStreamReader testInputStreamReader) {\n+        this.overriddenSocket = overriddenSocket;\n+        this.testOutputStreamWriter = testOutputStreamWriter;\n+        this.testInputStreamReader = testInputStreamReader;\n+\n+        this.host = host;\n+        this.port = port;\n+        esPingReplyReceived = false;\n+        dualSSLProbeReplyReceived = false;\n+    }\n+\n+    /**\n+     * Test connection to server by performing the below steps:\n+     * - Send Client Hello to check if the server replies with Server Hello which indicates that Server understands SSL\n+     * - Send ES Ping to check if the server replies to the ES Ping message\n+     *\n+     * @return SSLConnectionTestResult i.e. ES_PING_FAILED or SSL_NOT_AVAILABLE or SSL_AVAILABLE\n+     */\n+    public SSLConnectionTestResult testConnection() {\n+        if (sendDualSSLClientHello()) {\n+            return SSLConnectionTestResult.SSL_AVAILABLE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUxMzMzMg=="}, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcwNzE2OA==", "bodyText": "It may be enabled by accident in which case ES should terminate with a reasonable error message and not be stuck  waiting for a response that will never come.\nAdditionally, it looks that the handshake may require establishing 2 extra socket connections (one long lived connection and 2 short lived socket connections). Why one connection is not sufficient?", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r500707168", "createdAt": "2020-10-07T02:50:27Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/util/SSLConnectionTestUtil.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Portions Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.ssl.util;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.net.Socket;\n+import java.nio.charset.StandardCharsets;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * Utility class to test if the server supports SSL connections.\n+ * SSL Check will be done by sending an ES Ping to see if server is replying to pings.\n+ * Following that a custom client hello message will be sent to the server, if the server\n+ * side has OpenDistroPortUnificationHandler it will reply with server hello message.\n+ */\n+public class SSLConnectionTestUtil {\n+\n+    private static final Logger logger = LogManager.getLogger(SSLConnectionTestUtil.class);\n+    public static final byte[] ES_PING_MSG = new byte[]{(byte) 'E', (byte) 'S', (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF};\n+    public static final String DUAL_MODE_CLIENT_HELLO_MSG = \"DUALCM\";\n+    public static final String DUAL_MODE_SERVER_HELLO_MSG = \"DUALSM\";\n+    private static final int SOCKET_TIMEOUT_MILLIS = 10 * 1000;\n+    private boolean esPingReplyReceived;\n+    private boolean dualSSLProbeReplyReceived;\n+    private final String host;\n+    private final int port;\n+    private Socket overriddenSocket = null;\n+    private OutputStreamWriter testOutputStreamWriter = null;\n+    private InputStreamReader testInputStreamReader = null;\n+\n+    public SSLConnectionTestUtil(final String host, final int port) {\n+        this.host = host;\n+        this.port = port;\n+        esPingReplyReceived = false;\n+        dualSSLProbeReplyReceived = false;\n+    }\n+\n+    @VisibleForTesting\n+    protected SSLConnectionTestUtil(final String host, final int port, final Socket overriddenSocket, final OutputStreamWriter testOutputStreamWriter,\n+        final InputStreamReader testInputStreamReader) {\n+        this.overriddenSocket = overriddenSocket;\n+        this.testOutputStreamWriter = testOutputStreamWriter;\n+        this.testInputStreamReader = testInputStreamReader;\n+\n+        this.host = host;\n+        this.port = port;\n+        esPingReplyReceived = false;\n+        dualSSLProbeReplyReceived = false;\n+    }\n+\n+    /**\n+     * Test connection to server by performing the below steps:\n+     * - Send Client Hello to check if the server replies with Server Hello which indicates that Server understands SSL\n+     * - Send ES Ping to check if the server replies to the ES Ping message\n+     *\n+     * @return SSLConnectionTestResult i.e. ES_PING_FAILED or SSL_NOT_AVAILABLE or SSL_AVAILABLE\n+     */\n+    public SSLConnectionTestResult testConnection() {\n+        if (sendDualSSLClientHello()) {\n+            return SSLConnectionTestResult.SSL_AVAILABLE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUxMzMzMg=="}, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ3ODQ4Nw==", "bodyText": "I have updated the error message to be more clearer.\nRegarding the 2 extra sockets, we will be opening only 1 extra socket in the best case, i.e. if transport server supports dual mode. And 2 sockets when transport server does not support SSL.\nThe short lived connections are required to probe the transport server to check if it supports SSL connection.\nAlso, these extra sockets are opened only when dual mode is enabled (i.e. during EIT migration phase), in all other scenarios this part of code is never hit.\nThe following scenarios are possible:\n\nDual mode is enabled; Transport client and transport server both support dual mode:\n\nTransport client opens a socket to perform a custom handshake with the transport server\nTransport server responds to custom handshake and closes the socket (since this is a plain text socket and cant be used any more)\nTransport client now knows that the server supports SSL and proceeds with SSL connection (full SSL Handshake will take place)\n\n\nDual mode is enabled; Transport client supports dual mode, transport server does not support dual mode and dual mode is enabled:\n\nTransport client opens a socket to perform custom handshake with transport server.\nTransport server does not recognize this message and closes the connection.\nTransport client see that connection is closed and opens another socket to send ES Ping\nTransport server responds to this ES ping.\nTransport client will proceed with plain text connection with this transport server.\n\n\nDual mode is disabled:\n\nNo extra sockets are opened, SSL connections are setup by default.", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r502478487", "createdAt": "2020-10-09T14:44:56Z", "author": {"login": "sachetalva"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/util/SSLConnectionTestUtil.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Portions Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.ssl.util;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.net.Socket;\n+import java.nio.charset.StandardCharsets;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * Utility class to test if the server supports SSL connections.\n+ * SSL Check will be done by sending an ES Ping to see if server is replying to pings.\n+ * Following that a custom client hello message will be sent to the server, if the server\n+ * side has OpenDistroPortUnificationHandler it will reply with server hello message.\n+ */\n+public class SSLConnectionTestUtil {\n+\n+    private static final Logger logger = LogManager.getLogger(SSLConnectionTestUtil.class);\n+    public static final byte[] ES_PING_MSG = new byte[]{(byte) 'E', (byte) 'S', (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF};\n+    public static final String DUAL_MODE_CLIENT_HELLO_MSG = \"DUALCM\";\n+    public static final String DUAL_MODE_SERVER_HELLO_MSG = \"DUALSM\";\n+    private static final int SOCKET_TIMEOUT_MILLIS = 10 * 1000;\n+    private boolean esPingReplyReceived;\n+    private boolean dualSSLProbeReplyReceived;\n+    private final String host;\n+    private final int port;\n+    private Socket overriddenSocket = null;\n+    private OutputStreamWriter testOutputStreamWriter = null;\n+    private InputStreamReader testInputStreamReader = null;\n+\n+    public SSLConnectionTestUtil(final String host, final int port) {\n+        this.host = host;\n+        this.port = port;\n+        esPingReplyReceived = false;\n+        dualSSLProbeReplyReceived = false;\n+    }\n+\n+    @VisibleForTesting\n+    protected SSLConnectionTestUtil(final String host, final int port, final Socket overriddenSocket, final OutputStreamWriter testOutputStreamWriter,\n+        final InputStreamReader testInputStreamReader) {\n+        this.overriddenSocket = overriddenSocket;\n+        this.testOutputStreamWriter = testOutputStreamWriter;\n+        this.testInputStreamReader = testInputStreamReader;\n+\n+        this.host = host;\n+        this.port = port;\n+        esPingReplyReceived = false;\n+        dualSSLProbeReplyReceived = false;\n+    }\n+\n+    /**\n+     * Test connection to server by performing the below steps:\n+     * - Send Client Hello to check if the server replies with Server Hello which indicates that Server understands SSL\n+     * - Send ES Ping to check if the server replies to the ES Ping message\n+     *\n+     * @return SSLConnectionTestResult i.e. ES_PING_FAILED or SSL_NOT_AVAILABLE or SSL_AVAILABLE\n+     */\n+    public SSLConnectionTestResult testConnection() {\n+        if (sendDualSSLClientHello()) {\n+            return SSLConnectionTestResult.SSL_AVAILABLE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUxMzMzMg=="}, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MjMxNzQ4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroSecuritySSLNettyTransport.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNzoxODowMFrOHVtC-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNzoxODowMFrOHVtC-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUyMDE4Nw==", "bodyText": "if other node is only communicating in SSL mode (means other node has older version of the security plugin which is not supporting dual mode), connectionTestResult will be always ES_PING_FAILED  .. is that true?\npublic SSLConnectionTestResult testConnection() {\n    if (sendDualSSLClientHello()) {.    --> This will fail as server doesn't send DualSSL Hello \n        return SSLConnectionTestResult.SSL_AVAILABLE;\n    }\n\n    if (sendESPing()) {.  ----> this will fail too as other node is actually sending SSL response...  \n        return SSLConnectionTestResult.SSL_NOT_AVAILABLE;\n    }\n\n    return SSLConnectionTestResult.ES_PING_FAILED;   --> this will be return..\n}", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r492520187", "createdAt": "2020-09-22T07:18:00Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroSecuritySSLNettyTransport.java", "diffHunk": "@@ -178,21 +198,42 @@ public void connect(ChannelHandlerContext ctx, SocketAddress remoteAddress, Sock\n     protected class SSLClientChannelInitializer extends Netty4Transport.ClientChannelInitializer {\n         private final boolean hostnameVerificationEnabled;\n         private final boolean hostnameVerificationResovleHostName;\n+        private final DiscoveryNode node;\n+        private SSLConnectionTestResult connectionTestResult;\n \n         public SSLClientChannelInitializer(DiscoveryNode node) {\n+            this.node = node;\n             hostnameVerificationEnabled = settings.getAsBoolean(\n                     SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_ENFORCE_HOSTNAME_VERIFICATION, true);\n             hostnameVerificationResovleHostName = settings.getAsBoolean(\n                     SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_ENFORCE_HOSTNAME_VERIFICATION_RESOLVE_HOST_NAME, true);\n+\n+            connectionTestResult = SSLConnectionTestResult.SSL_AVAILABLE;\n+            if (OpenDistroSSLDualModeConfig.getInstance().isDualModeEnabled()) {\n+                SSLConnectionTestUtil sslConnectionTestUtil = new SSLConnectionTestUtil(node.getAddress().getAddress(), node.getAddress().getPort());\n+                connectionTestResult = AccessController.doPrivileged((PrivilegedAction<SSLConnectionTestResult>) sslConnectionTestUtil::testConnection);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzQ4NjkwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/rest/SSLDualModeAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNDozNjoyNlrOHZY9pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNDozMjoxNlrOHbhBuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM4NTQ0NA==", "bodyText": "Avoid wildcard import.", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r496385444", "createdAt": "2020-09-29T04:36:26Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/rest/SSLDualModeAction.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+package com.amazon.opendistroforelasticsearch.security.rest;\n+\n+import com.amazon.opendistroforelasticsearch.security.ssl.transport.OpenDistroSSLDualModeConfig;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.admin.cluster.settings.ClusterUpdateSettingsRequest;\n+import org.elasticsearch.action.admin.cluster.settings.ClusterUpdateSettingsResponse;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.rest.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61db0ddfccd8e2781d91d8c859f529b5e7fed197"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYxNDcxMw==", "bodyText": "Done", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r498614713", "createdAt": "2020-10-02T04:32:16Z", "author": {"login": "sachetalva"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/rest/SSLDualModeAction.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+package com.amazon.opendistroforelasticsearch.security.rest;\n+\n+import com.amazon.opendistroforelasticsearch.security.ssl.transport.OpenDistroSSLDualModeConfig;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.admin.cluster.settings.ClusterUpdateSettingsRequest;\n+import org.elasticsearch.action.admin.cluster.settings.ClusterUpdateSettingsResponse;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.rest.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM4NTQ0NA=="}, "originalCommit": {"oid": "61db0ddfccd8e2781d91d8c859f529b5e7fed197"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMDYyNzQ0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroSSLDualModeConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxOTozMjozMVrOHbYMJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNDozMjo0MVrOHbhB5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ2OTkyNA==", "bodyText": "OpenDistroSSLDualModeConfig -> SSLConfig(preferable) or OpenDistroSSLConfig (less preferable).", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r498469924", "createdAt": "2020-10-01T19:32:31Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroSSLDualModeConfig.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.ssl.transport;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+\n+public class OpenDistroSSLDualModeConfig {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61db0ddfccd8e2781d91d8c859f529b5e7fed197"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYxNDc1OQ==", "bodyText": "Renamed to OpenDistroSSLConfig", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r498614759", "createdAt": "2020-10-02T04:32:41Z", "author": {"login": "sachetalva"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroSSLDualModeConfig.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.ssl.transport;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+\n+public class OpenDistroSSLDualModeConfig {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ2OTkyNA=="}, "originalCommit": {"oid": "61db0ddfccd8e2781d91d8c859f529b5e7fed197"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMDYzNDAzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroSSLDualModeConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxOTozNTowMVrOHbYQug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNDozMzoxNVrOHbhCOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ3MTA5OA==", "bodyText": "isSSLOnly -> sslOnly. Move sslOnly and isSslOnlyMode(settings) to OpenDistroSSLConfig (it is not necessary to duplicate this flag in both classes).", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r498471098", "createdAt": "2020-10-01T19:35:01Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroSSLDualModeConfig.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.ssl.transport;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+\n+public class OpenDistroSSLDualModeConfig {\n+\n+    public static final Setting<Boolean> SSL_DUAL_MODE_SETTING = Setting.boolSetting(ConfigConstants.OPENDISTRO_SECURITY_SSL_DUAL_MODE_ENABLED,\n+            true, Setting.Property.NodeScope, Setting.Property.Dynamic, Setting.Property.Filtered);\n+\n+    private static final Logger logger = LogManager.getLogger(OpenDistroSSLDualModeConfig.class);\n+\n+    private final boolean isSSLOnly;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61db0ddfccd8e2781d91d8c859f529b5e7fed197"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYxNDg0MA==", "bodyText": "moved isSslOnlyMode(settings) to OpenDistroSSLConfig", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r498614840", "createdAt": "2020-10-02T04:33:15Z", "author": {"login": "sachetalva"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroSSLDualModeConfig.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.ssl.transport;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+\n+public class OpenDistroSSLDualModeConfig {\n+\n+    public static final Setting<Boolean> SSL_DUAL_MODE_SETTING = Setting.boolSetting(ConfigConstants.OPENDISTRO_SECURITY_SSL_DUAL_MODE_ENABLED,\n+            true, Setting.Property.NodeScope, Setting.Property.Dynamic, Setting.Property.Filtered);\n+\n+    private static final Logger logger = LogManager.getLogger(OpenDistroSSLDualModeConfig.class);\n+\n+    private final boolean isSSLOnly;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ3MTA5OA=="}, "originalCommit": {"oid": "61db0ddfccd8e2781d91d8c859f529b5e7fed197"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMDgwNDY5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroSSLDualModeConfig.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMDozNzoyOVrOHbaBRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNDoyNDoyNlrOHfL90w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ5OTkxMA==", "bodyText": "If it is registered as a ClusterSettings is it necessary to have a separate API to manage it? Why this can't be done using ES cluster settings API?", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r498499910", "createdAt": "2020-10-01T20:37:29Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroSSLDualModeConfig.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.ssl.transport;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+\n+public class OpenDistroSSLDualModeConfig {\n+\n+    public static final Setting<Boolean> SSL_DUAL_MODE_SETTING = Setting.boolSetting(ConfigConstants.OPENDISTRO_SECURITY_SSL_DUAL_MODE_ENABLED,\n+            true, Setting.Property.NodeScope, Setting.Property.Dynamic, Setting.Property.Filtered);\n+\n+    private static final Logger logger = LogManager.getLogger(OpenDistroSSLDualModeConfig.class);\n+\n+    private final boolean isSSLOnly;\n+    private volatile boolean dualModeEnabled;\n+\n+    public OpenDistroSSLDualModeConfig(final Settings settings) {\n+        isSSLOnly = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_SSL_ONLY, false);\n+        dualModeEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_SSL_DUAL_MODE_ENABLED,\n+                false);\n+        logger.info(\"SSL dual mode is {}\", isDualModeEnabled() ? \"enabled\" : \"disabled\");\n+    }\n+\n+    public void registerClusterSettingsChangeListener(final ClusterSettings clusterSettings) {\n+        clusterSettings.addSettingsUpdateConsumer(SSL_DUAL_MODE_SETTING,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61db0ddfccd8e2781d91d8c859f529b5e7fed197"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYwMjQyNA==", "bodyText": "Idea is to ensure that we provide abstraction over the settings i.e do additional validation/business logic etc. In future we need to add additional validation etc i.e admin user can only set these API's etc for FGAC domain's etc, this can allow us to accomplish it.\nAdditionally this is sensitive information and hence it is currently marked as filtered property (not available via cluster setting to view by all) and API would provide abstraction and ability to add additional permission's/logic in future.", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r498602424", "createdAt": "2020-10-02T03:11:52Z", "author": {"login": "vengadanathan-s"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroSSLDualModeConfig.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.ssl.transport;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+\n+public class OpenDistroSSLDualModeConfig {\n+\n+    public static final Setting<Boolean> SSL_DUAL_MODE_SETTING = Setting.boolSetting(ConfigConstants.OPENDISTRO_SECURITY_SSL_DUAL_MODE_ENABLED,\n+            true, Setting.Property.NodeScope, Setting.Property.Dynamic, Setting.Property.Filtered);\n+\n+    private static final Logger logger = LogManager.getLogger(OpenDistroSSLDualModeConfig.class);\n+\n+    private final boolean isSSLOnly;\n+    private volatile boolean dualModeEnabled;\n+\n+    public OpenDistroSSLDualModeConfig(final Settings settings) {\n+        isSSLOnly = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_SSL_ONLY, false);\n+        dualModeEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_SSL_DUAL_MODE_ENABLED,\n+                false);\n+        logger.info(\"SSL dual mode is {}\", isDualModeEnabled() ? \"enabled\" : \"disabled\");\n+    }\n+\n+    public void registerClusterSettingsChangeListener(final ClusterSettings clusterSettings) {\n+        clusterSettings.addSettingsUpdateConsumer(SSL_DUAL_MODE_SETTING,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ5OTkxMA=="}, "originalCommit": {"oid": "61db0ddfccd8e2781d91d8c859f529b5e7fed197"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYyNDgwNA==", "bodyText": "It is possible to change the settings using ES cluster API and having two different ways to change the settings is confusing, IMO. If it can be done using standard ES cluster settings API, there is no need to introduce (and maintain) another API.", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r498624804", "createdAt": "2020-10-02T05:36:36Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroSSLDualModeConfig.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.ssl.transport;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+\n+public class OpenDistroSSLDualModeConfig {\n+\n+    public static final Setting<Boolean> SSL_DUAL_MODE_SETTING = Setting.boolSetting(ConfigConstants.OPENDISTRO_SECURITY_SSL_DUAL_MODE_ENABLED,\n+            true, Setting.Property.NodeScope, Setting.Property.Dynamic, Setting.Property.Filtered);\n+\n+    private static final Logger logger = LogManager.getLogger(OpenDistroSSLDualModeConfig.class);\n+\n+    private final boolean isSSLOnly;\n+    private volatile boolean dualModeEnabled;\n+\n+    public OpenDistroSSLDualModeConfig(final Settings settings) {\n+        isSSLOnly = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_SSL_ONLY, false);\n+        dualModeEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_SSL_DUAL_MODE_ENABLED,\n+                false);\n+        logger.info(\"SSL dual mode is {}\", isDualModeEnabled() ? \"enabled\" : \"disabled\");\n+    }\n+\n+    public void registerClusterSettingsChangeListener(final ClusterSettings clusterSettings) {\n+        clusterSettings.addSettingsUpdateConsumer(SSL_DUAL_MODE_SETTING,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ5OTkxMA=="}, "originalCommit": {"oid": "61db0ddfccd8e2781d91d8c859f529b5e7fed197"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY0OTgxOQ==", "bodyText": "Yes, for current ssl_only mode it can be changed (but it cant be viewed as it is marked as sensitive/filtered settings), but idea is to ensure that dynamic enabling/disabling can be allowed only by privileged users. Currently for only_ssl mode there isn't much of a benefit like you mentioned, but if we are enabling this in FGAC mode (there would be additional configuration change to it), it makes sense to control who can dynamically change the property as well as we can change backend settings store used (using security index), i.e similar to how we made nodes_dn dynamic.  Do let us know your opinion on the same.", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r498649819", "createdAt": "2020-10-02T07:11:04Z", "author": {"login": "vengadanathan-s"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroSSLDualModeConfig.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.ssl.transport;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+\n+public class OpenDistroSSLDualModeConfig {\n+\n+    public static final Setting<Boolean> SSL_DUAL_MODE_SETTING = Setting.boolSetting(ConfigConstants.OPENDISTRO_SECURITY_SSL_DUAL_MODE_ENABLED,\n+            true, Setting.Property.NodeScope, Setting.Property.Dynamic, Setting.Property.Filtered);\n+\n+    private static final Logger logger = LogManager.getLogger(OpenDistroSSLDualModeConfig.class);\n+\n+    private final boolean isSSLOnly;\n+    private volatile boolean dualModeEnabled;\n+\n+    public OpenDistroSSLDualModeConfig(final Settings settings) {\n+        isSSLOnly = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_SSL_ONLY, false);\n+        dualModeEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_SSL_DUAL_MODE_ENABLED,\n+                false);\n+        logger.info(\"SSL dual mode is {}\", isDualModeEnabled() ? \"enabled\" : \"disabled\");\n+    }\n+\n+    public void registerClusterSettingsChangeListener(final ClusterSettings clusterSettings) {\n+        clusterSettings.addSettingsUpdateConsumer(SSL_DUAL_MODE_SETTING,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ5OTkxMA=="}, "originalCommit": {"oid": "61db0ddfccd8e2781d91d8c859f529b5e7fed197"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyMjM0Mg==", "bodyText": "Let's introduce new API when necessary, for now I would prefer standard ES cluster settings API.", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r498922342", "createdAt": "2020-10-02T16:22:44Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroSSLDualModeConfig.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.ssl.transport;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+\n+public class OpenDistroSSLDualModeConfig {\n+\n+    public static final Setting<Boolean> SSL_DUAL_MODE_SETTING = Setting.boolSetting(ConfigConstants.OPENDISTRO_SECURITY_SSL_DUAL_MODE_ENABLED,\n+            true, Setting.Property.NodeScope, Setting.Property.Dynamic, Setting.Property.Filtered);\n+\n+    private static final Logger logger = LogManager.getLogger(OpenDistroSSLDualModeConfig.class);\n+\n+    private final boolean isSSLOnly;\n+    private volatile boolean dualModeEnabled;\n+\n+    public OpenDistroSSLDualModeConfig(final Settings settings) {\n+        isSSLOnly = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_SSL_ONLY, false);\n+        dualModeEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_SSL_DUAL_MODE_ENABLED,\n+                false);\n+        logger.info(\"SSL dual mode is {}\", isDualModeEnabled() ? \"enabled\" : \"disabled\");\n+    }\n+\n+    public void registerClusterSettingsChangeListener(final ClusterSettings clusterSettings) {\n+        clusterSettings.addSettingsUpdateConsumer(SSL_DUAL_MODE_SETTING,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ5OTkxMA=="}, "originalCommit": {"oid": "61db0ddfccd8e2781d91d8c859f529b5e7fed197"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIzNTYwNQ==", "bodyText": "Removed the PUT apis, we can use the cluster settings api to set the dual mode value. Did not remove the GET api since the cluster settings are filtered out by default.", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r499235605", "createdAt": "2020-10-04T11:24:03Z", "author": {"login": "sachetalva"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroSSLDualModeConfig.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.ssl.transport;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+\n+public class OpenDistroSSLDualModeConfig {\n+\n+    public static final Setting<Boolean> SSL_DUAL_MODE_SETTING = Setting.boolSetting(ConfigConstants.OPENDISTRO_SECURITY_SSL_DUAL_MODE_ENABLED,\n+            true, Setting.Property.NodeScope, Setting.Property.Dynamic, Setting.Property.Filtered);\n+\n+    private static final Logger logger = LogManager.getLogger(OpenDistroSSLDualModeConfig.class);\n+\n+    private final boolean isSSLOnly;\n+    private volatile boolean dualModeEnabled;\n+\n+    public OpenDistroSSLDualModeConfig(final Settings settings) {\n+        isSSLOnly = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_SSL_ONLY, false);\n+        dualModeEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_SSL_DUAL_MODE_ENABLED,\n+                false);\n+        logger.info(\"SSL dual mode is {}\", isDualModeEnabled() ? \"enabled\" : \"disabled\");\n+    }\n+\n+    public void registerClusterSettingsChangeListener(final ClusterSettings clusterSettings) {\n+        clusterSettings.addSettingsUpdateConsumer(SSL_DUAL_MODE_SETTING,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ5OTkxMA=="}, "originalCommit": {"oid": "61db0ddfccd8e2781d91d8c859f529b5e7fed197"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ2Mzk1NQ==", "bodyText": "Removed the GET api also and updated the opendistro_security.ssl_dual_mode_enabled to not be a Filtered setting.\nAlso, updated getSettingsFilter() function override in OpenDistroSecurityPlugin and OpenDistroSecuritySSLPlugin classes, replaced opendistro_security.* filter with explicit filtering for all settings which didn't have Property.Filtered in setting definition.", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r502463955", "createdAt": "2020-10-09T14:24:26Z", "author": {"login": "sachetalva"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroSSLDualModeConfig.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.ssl.transport;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+\n+public class OpenDistroSSLDualModeConfig {\n+\n+    public static final Setting<Boolean> SSL_DUAL_MODE_SETTING = Setting.boolSetting(ConfigConstants.OPENDISTRO_SECURITY_SSL_DUAL_MODE_ENABLED,\n+            true, Setting.Property.NodeScope, Setting.Property.Dynamic, Setting.Property.Filtered);\n+\n+    private static final Logger logger = LogManager.getLogger(OpenDistroSSLDualModeConfig.class);\n+\n+    private final boolean isSSLOnly;\n+    private volatile boolean dualModeEnabled;\n+\n+    public OpenDistroSSLDualModeConfig(final Settings settings) {\n+        isSSLOnly = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_SSL_ONLY, false);\n+        dualModeEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_SSL_DUAL_MODE_ENABLED,\n+                false);\n+        logger.info(\"SSL dual mode is {}\", isDualModeEnabled() ? \"enabled\" : \"disabled\");\n+    }\n+\n+    public void registerClusterSettingsChangeListener(final ClusterSettings clusterSettings) {\n+        clusterSettings.addSettingsUpdateConsumer(SSL_DUAL_MODE_SETTING,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ5OTkxMA=="}, "originalCommit": {"oid": "61db0ddfccd8e2781d91d8c859f529b5e7fed197"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTQ0Njk1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/OpenDistroSecuritySSLPlugin.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMzoyNTowMlrOHbgZiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNDozMzoyNFrOHbhCTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYwNDQyNA==", "bodyText": "final", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r498604424", "createdAt": "2020-10-02T03:25:02Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/OpenDistroSecuritySSLPlugin.java", "diffHunk": "@@ -101,13 +102,13 @@\n     protected PrincipalExtractor principalExtractor;\n     protected final Path configPath;\n     private final static SslExceptionHandler NOOP_SSL_EXCEPTION_HANDLER = new SslExceptionHandler() {};\n-    \n+    protected OpenDistroSSLDualModeConfig openDistroSSLDualModeConfig;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61db0ddfccd8e2781d91d8c859f529b5e7fed197"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYxNDg2MQ==", "bodyText": "done", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r498614861", "createdAt": "2020-10-02T04:33:24Z", "author": {"login": "sachetalva"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/OpenDistroSecuritySSLPlugin.java", "diffHunk": "@@ -101,13 +102,13 @@\n     protected PrincipalExtractor principalExtractor;\n     protected final Path configPath;\n     private final static SslExceptionHandler NOOP_SSL_EXCEPTION_HANDLER = new SslExceptionHandler() {};\n-    \n+    protected OpenDistroSSLDualModeConfig openDistroSSLDualModeConfig;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYwNDQyNA=="}, "originalCommit": {"oid": "61db0ddfccd8e2781d91d8c859f529b5e7fed197"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTQ3MTk1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroPortUnificationHandler.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMzo1MTowMVrOHbgpRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNjo0MTo1MVrOHbilKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYwODQ1Mw==", "bodyText": "OpenDistroPortUnificationHandler -> DualModeSSLHandler, ByteToMessageDecoder -> OptionalSslHandler.", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r498608453", "createdAt": "2020-10-02T03:51:01Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroPortUnificationHandler.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+package com.amazon.opendistroforelasticsearch.security.ssl.transport;\n+\n+\n+import com.amazon.opendistroforelasticsearch.security.ssl.OpenDistroSecurityKeyStore;\n+import com.amazon.opendistroforelasticsearch.security.ssl.util.SSLConnectionTestUtil;\n+import com.amazon.opendistroforelasticsearch.security.ssl.util.SSLUtil;\n+import com.google.common.annotations.VisibleForTesting;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.ChannelFutureListener;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.handler.codec.ByteToMessageDecoder;\n+import io.netty.handler.ssl.SslHandler;\n+import java.nio.charset.StandardCharsets;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import javax.net.ssl.SSLException;\n+import java.util.List;\n+\n+/**\n+ * Modifies the current pipeline dynamically to enable TLS\n+ */\n+public class OpenDistroPortUnificationHandler extends ByteToMessageDecoder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61db0ddfccd8e2781d91d8c859f529b5e7fed197"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYxMzAwMQ==", "bodyText": "We did consider using OptionalSslHandler, but that uses very weaker check to detect SSL i.e getEncryptedPacketLength method. where it checks for SSV2 etc also (which are deprecated) which does not have proper header validation and does check value from predefined bytes to detect whether it is ssvl2 or not and it consider few non encrypted ES requests as SSLV2 messages.", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r498613001", "createdAt": "2020-10-02T04:20:31Z", "author": {"login": "vengadanathan-s"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroPortUnificationHandler.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+package com.amazon.opendistroforelasticsearch.security.ssl.transport;\n+\n+\n+import com.amazon.opendistroforelasticsearch.security.ssl.OpenDistroSecurityKeyStore;\n+import com.amazon.opendistroforelasticsearch.security.ssl.util.SSLConnectionTestUtil;\n+import com.amazon.opendistroforelasticsearch.security.ssl.util.SSLUtil;\n+import com.google.common.annotations.VisibleForTesting;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.ChannelFutureListener;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.handler.codec.ByteToMessageDecoder;\n+import io.netty.handler.ssl.SslHandler;\n+import java.nio.charset.StandardCharsets;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import javax.net.ssl.SSLException;\n+import java.util.List;\n+\n+/**\n+ * Modifies the current pipeline dynamically to enable TLS\n+ */\n+public class OpenDistroPortUnificationHandler extends ByteToMessageDecoder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYwODQ1Mw=="}, "originalCommit": {"oid": "61db0ddfccd8e2781d91d8c859f529b5e7fed197"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYxMzAyOA==", "bodyText": "renaming OpenDistroPortUnificationHandler -> DualModeSSLHandler\nhowever we cant use OptionalSslHandler instead of ByteToMessageDecoder since we are having our own implementation of the decode function in ByteToMessageDecoder in DualModeSSLHandler", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r498613028", "createdAt": "2020-10-02T04:20:39Z", "author": {"login": "sachetalva"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroPortUnificationHandler.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+package com.amazon.opendistroforelasticsearch.security.ssl.transport;\n+\n+\n+import com.amazon.opendistroforelasticsearch.security.ssl.OpenDistroSecurityKeyStore;\n+import com.amazon.opendistroforelasticsearch.security.ssl.util.SSLConnectionTestUtil;\n+import com.amazon.opendistroforelasticsearch.security.ssl.util.SSLUtil;\n+import com.google.common.annotations.VisibleForTesting;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.ChannelFutureListener;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.handler.codec.ByteToMessageDecoder;\n+import io.netty.handler.ssl.SslHandler;\n+import java.nio.charset.StandardCharsets;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import javax.net.ssl.SSLException;\n+import java.util.List;\n+\n+/**\n+ * Modifies the current pipeline dynamically to enable TLS\n+ */\n+public class OpenDistroPortUnificationHandler extends ByteToMessageDecoder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYwODQ1Mw=="}, "originalCommit": {"oid": "61db0ddfccd8e2781d91d8c859f529b5e7fed197"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYyNjg2Mg==", "bodyText": "ODFE supports not only TLSv1.3, it is necessary to support other versions that openssl and Java supports.", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r498626862", "createdAt": "2020-10-02T05:47:57Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroPortUnificationHandler.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+package com.amazon.opendistroforelasticsearch.security.ssl.transport;\n+\n+\n+import com.amazon.opendistroforelasticsearch.security.ssl.OpenDistroSecurityKeyStore;\n+import com.amazon.opendistroforelasticsearch.security.ssl.util.SSLConnectionTestUtil;\n+import com.amazon.opendistroforelasticsearch.security.ssl.util.SSLUtil;\n+import com.google.common.annotations.VisibleForTesting;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.ChannelFutureListener;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.handler.codec.ByteToMessageDecoder;\n+import io.netty.handler.ssl.SslHandler;\n+import java.nio.charset.StandardCharsets;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import javax.net.ssl.SSLException;\n+import java.util.List;\n+\n+/**\n+ * Modifies the current pipeline dynamically to enable TLS\n+ */\n+public class OpenDistroPortUnificationHandler extends ByteToMessageDecoder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYwODQ1Mw=="}, "originalCommit": {"oid": "61db0ddfccd8e2781d91d8c859f529b5e7fed197"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY0MDE3MA==", "bodyText": "My bad, updated the comment, we ignore only SSLV2 and it is not technically a TLS protocol, from SSLv3 onwards it is made as TLS, to be backward compatible TLS version header continued to use major version of SSL i.e 3 and minor version to specify the version of TLS.\nmajor+minor version of TLS versions:\nTLS1_VERSION           x'0301' # major version 3, minor version 1\nTLS1_1_VERSION         x'0302' # major version 3, minor version 2\nTLS1_2_VERSION         x'0303' # major version 3, minor version 3\nCheck that we currently do: https://github.com/vengadanathan-s/opendistro-security/blob/master/src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/util/SSLUtil.java#L51-L66 , where we major version is 3 i.e TLS message or not. AFAIK It should not true for all TLS versions, but it wont detect SSLv2 (deprecated long and no longer used anywhere) .", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r498640170", "createdAt": "2020-10-02T06:41:51Z", "author": {"login": "vengadanathan-s"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroPortUnificationHandler.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+package com.amazon.opendistroforelasticsearch.security.ssl.transport;\n+\n+\n+import com.amazon.opendistroforelasticsearch.security.ssl.OpenDistroSecurityKeyStore;\n+import com.amazon.opendistroforelasticsearch.security.ssl.util.SSLConnectionTestUtil;\n+import com.amazon.opendistroforelasticsearch.security.ssl.util.SSLUtil;\n+import com.google.common.annotations.VisibleForTesting;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.ChannelFutureListener;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.handler.codec.ByteToMessageDecoder;\n+import io.netty.handler.ssl.SslHandler;\n+import java.nio.charset.StandardCharsets;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import javax.net.ssl.SSLException;\n+import java.util.List;\n+\n+/**\n+ * Modifies the current pipeline dynamically to enable TLS\n+ */\n+public class OpenDistroPortUnificationHandler extends ByteToMessageDecoder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYwODQ1Mw=="}, "originalCommit": {"oid": "61db0ddfccd8e2781d91d8c859f529b5e7fed197"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTYwNDUwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNjowMDowNlrOHbh62w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNDoxOTozNlrOHfLw_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYyOTMzOQ==", "bodyText": "I think it is not necessary to have sslOnly both in OpenDistroSSLConfig and OpenDistroSecurityPlugin, especially that OpenDistroSecurityPlugin directly references OpenDistroSSLConfig.", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r498629339", "createdAt": "2020-10-02T06:00:06Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -255,7 +252,7 @@ public OpenDistroSecurityPlugin(final Settings settings, final Path configPath)\n             return;\n         }\n         \n-        sslOnly = isSslOnlyMode(settings);\n+        sslOnly = openDistroSSLConfig.isSslOnlyMode();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "129345734d2f0009140b102e9d055fa1e6dfc782"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI0MDM3Mw==", "bodyText": "currently in OpenDistroSecurityPlugin constructor the sslOnly value is being set to false if opendistro_security.disabled is set to false.\nIf we want to replace all usage of sslOnly in OpenDistroSecurityPlugin then we would need to add isDisabled() check also in all those places.\ni.e. all usages of sslOnly in OpenDistroSecurityPlugin would need to be replaced with (!disabled && openDistroSSLConfig.isSslOnlyMode())\nPlease let me know if I should proceed with those changes.", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r499240373", "createdAt": "2020-10-04T12:16:54Z", "author": {"login": "sachetalva"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -255,7 +252,7 @@ public OpenDistroSecurityPlugin(final Settings settings, final Path configPath)\n             return;\n         }\n         \n-        sslOnly = isSslOnlyMode(settings);\n+        sslOnly = openDistroSSLConfig.isSslOnlyMode();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYyOTMzOQ=="}, "originalCommit": {"oid": "129345734d2f0009140b102e9d055fa1e6dfc782"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY1NDEzOQ==", "bodyText": "I don't see a need to introduce isDisabled() check. When opendistro_security.disabled is true, sslOnly is initialized to false. It is still necessary to initialize OpenDistroSSLConfig when opendistro_security.disabled is true and set sslOnly to false. If you have a different approach in mind, let's discuss.", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r500654139", "createdAt": "2020-10-06T23:36:35Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -255,7 +252,7 @@ public OpenDistroSecurityPlugin(final Settings settings, final Path configPath)\n             return;\n         }\n         \n-        sslOnly = isSslOnlyMode(settings);\n+        sslOnly = openDistroSSLConfig.isSslOnlyMode();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYyOTMzOQ=="}, "originalCommit": {"oid": "129345734d2f0009140b102e9d055fa1e6dfc782"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ2MDY2OA==", "bodyText": "agree, I have updated the code to use openDistroSSLConfig.isSslOnlyMode() instead of sslOnly member variable in  OpenDistroSecurityPlugin", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r502460668", "createdAt": "2020-10-09T14:19:36Z", "author": {"login": "sachetalva"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -255,7 +252,7 @@ public OpenDistroSecurityPlugin(final Settings settings, final Path configPath)\n             return;\n         }\n         \n-        sslOnly = isSslOnlyMode(settings);\n+        sslOnly = openDistroSSLConfig.isSslOnlyMode();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYyOTMzOQ=="}, "originalCommit": {"oid": "129345734d2f0009140b102e9d055fa1e6dfc782"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNTE2NDM3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroSecuritySSLNettyTransport.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMjo1NDoxOVrOHdgzRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNDoxODozMFrOHfLuIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcwODE2NQ==", "bodyText": "What is the reason to probe connection in SSLClientChannelInitializer constructor and not in initChannel()?", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r500708165", "createdAt": "2020-10-07T02:54:19Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroSecuritySSLNettyTransport.java", "diffHunk": "@@ -178,21 +200,42 @@ public void connect(ChannelHandlerContext ctx, SocketAddress remoteAddress, Sock\n     protected class SSLClientChannelInitializer extends Netty4Transport.ClientChannelInitializer {\n         private final boolean hostnameVerificationEnabled;\n         private final boolean hostnameVerificationResovleHostName;\n+        private final DiscoveryNode node;\n+        private SSLConnectionTestResult connectionTestResult;\n \n         public SSLClientChannelInitializer(DiscoveryNode node) {\n+            this.node = node;\n             hostnameVerificationEnabled = settings.getAsBoolean(\n                     SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_ENFORCE_HOSTNAME_VERIFICATION, true);\n             hostnameVerificationResovleHostName = settings.getAsBoolean(\n                     SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_ENFORCE_HOSTNAME_VERIFICATION_RESOLVE_HOST_NAME, true);\n+\n+            connectionTestResult = SSLConnectionTestResult.SSL_AVAILABLE;\n+            if (openDistroSSLConfig.isDualModeEnabled()) {\n+                SSLConnectionTestUtil sslConnectionTestUtil = new SSLConnectionTestUtil(node.getAddress().getAddress(), node.getAddress().getPort());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc0691c138e82b53b843bf03518c0104e2f6e6c3"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ1OTkzNw==", "bodyText": "performing these steps in initChannel() adds delays during the connection initialization, hence kept these in the constructor", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r502459937", "createdAt": "2020-10-09T14:18:30Z", "author": {"login": "sachetalva"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroSecuritySSLNettyTransport.java", "diffHunk": "@@ -178,21 +200,42 @@ public void connect(ChannelHandlerContext ctx, SocketAddress remoteAddress, Sock\n     protected class SSLClientChannelInitializer extends Netty4Transport.ClientChannelInitializer {\n         private final boolean hostnameVerificationEnabled;\n         private final boolean hostnameVerificationResovleHostName;\n+        private final DiscoveryNode node;\n+        private SSLConnectionTestResult connectionTestResult;\n \n         public SSLClientChannelInitializer(DiscoveryNode node) {\n+            this.node = node;\n             hostnameVerificationEnabled = settings.getAsBoolean(\n                     SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_ENFORCE_HOSTNAME_VERIFICATION, true);\n             hostnameVerificationResovleHostName = settings.getAsBoolean(\n                     SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_ENFORCE_HOSTNAME_VERIFICATION_RESOLVE_HOST_NAME, true);\n+\n+            connectionTestResult = SSLConnectionTestResult.SSL_AVAILABLE;\n+            if (openDistroSSLConfig.isDualModeEnabled()) {\n+                SSLConnectionTestUtil sslConnectionTestUtil = new SSLConnectionTestUtil(node.getAddress().getAddress(), node.getAddress().getPort());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcwODE2NQ=="}, "originalCommit": {"oid": "dc0691c138e82b53b843bf03518c0104e2f6e6c3"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTY4NTkwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/util/SSLUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMjozMjozNFrOHeL2bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNDoxNzoyMFrOHfLq_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQxMzQ4Ng==", "bodyText": "It looks like an utility class. All method should be static and it must have private constructor. SSLUtil is not a good name. Rename it to TLS and make private static under OpenDistroPortUnificationHandler.", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r501413486", "createdAt": "2020-10-08T02:32:34Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/util/SSLUtil.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+package com.amazon.opendistroforelasticsearch.security.ssl.util;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+import java.nio.ByteOrder;\n+\n+\n+public class SSLUtil {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc0691c138e82b53b843bf03518c0104e2f6e6c3"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ1OTEzMg==", "bodyText": "done", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r502459132", "createdAt": "2020-10-09T14:17:20Z", "author": {"login": "sachetalva"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/util/SSLUtil.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+package com.amazon.opendistroforelasticsearch.security.ssl.util;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+import java.nio.ByteOrder;\n+\n+\n+public class SSLUtil {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQxMzQ4Ng=="}, "originalCommit": {"oid": "dc0691c138e82b53b843bf03518c0104e2f6e6c3"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTY5MDc4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/util/SSLUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMjozNToyNVrOHeL5Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNDoxNzowMVrOHfLqKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQxNDE4Nw==", "bodyText": "access specifier first private static.", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r501414187", "createdAt": "2020-10-08T02:35:25Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/util/SSLUtil.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+package com.amazon.opendistroforelasticsearch.security.ssl.util;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+import java.nio.ByteOrder;\n+\n+\n+public class SSLUtil {\n+\n+    private static final int SSL_CONTENT_TYPE_CHANGE_CIPHER_SPEC = 20;\n+    private static final int SSL_CONTENT_TYPE_ALERT = 21;\n+    private static final int SSL_CONTENT_TYPE_HANDSHAKE = 22;\n+    private static final int SSL_CONTENT_TYPE_APPLICATION_DATA = 23;\n+    private static final int SSL_CONTENT_TYPE_EXTENSION_HEARTBEAT = 24;\n+\n+    private static final int SSL_RECORD_HEADER_LENGTH = 5;\n+\n+    public boolean isTLS(ByteBuf buffer) {\n+        int packetLength = 0;\n+        int offset = buffer.readerIndex();\n+\n+        // SSLv3 or TLS - Check ContentType\n+        boolean tls;\n+        switch (buffer.getUnsignedByte(offset)) {\n+            case SSL_CONTENT_TYPE_CHANGE_CIPHER_SPEC:\n+            case SSL_CONTENT_TYPE_ALERT:\n+            case SSL_CONTENT_TYPE_HANDSHAKE:\n+            case SSL_CONTENT_TYPE_APPLICATION_DATA:\n+            case SSL_CONTENT_TYPE_EXTENSION_HEARTBEAT:\n+                tls = true;\n+                break;\n+            default:\n+                // SSLv2 or bad data\n+                tls = false;\n+        }\n+\n+        if (tls) {\n+            // SSLv3 or TLS - Check ProtocolVersion\n+            int majorVersion = buffer.getUnsignedByte(offset + 1);\n+            if (majorVersion == 3) {\n+                // SSLv3 or TLS\n+                packetLength = unsignedShortBE(buffer, offset + 3) + SSL_RECORD_HEADER_LENGTH;\n+                if (packetLength <= SSL_RECORD_HEADER_LENGTH) {\n+                    // Neither SSLv3 or TLSv1 (i.e. SSLv2 or bad data)\n+                    tls = false;\n+                }\n+            } else {\n+                // Neither SSLv3 or TLSv1 (i.e. SSLv2 or bad data)\n+                tls = false;\n+            }\n+        }\n+\n+        return tls;\n+    }\n+\n+    static private int unsignedShortBE(ByteBuf buffer, int offset) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc0691c138e82b53b843bf03518c0104e2f6e6c3"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ1ODkyMA==", "bodyText": "done", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r502458920", "createdAt": "2020-10-09T14:17:01Z", "author": {"login": "sachetalva"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/util/SSLUtil.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+package com.amazon.opendistroforelasticsearch.security.ssl.util;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+import java.nio.ByteOrder;\n+\n+\n+public class SSLUtil {\n+\n+    private static final int SSL_CONTENT_TYPE_CHANGE_CIPHER_SPEC = 20;\n+    private static final int SSL_CONTENT_TYPE_ALERT = 21;\n+    private static final int SSL_CONTENT_TYPE_HANDSHAKE = 22;\n+    private static final int SSL_CONTENT_TYPE_APPLICATION_DATA = 23;\n+    private static final int SSL_CONTENT_TYPE_EXTENSION_HEARTBEAT = 24;\n+\n+    private static final int SSL_RECORD_HEADER_LENGTH = 5;\n+\n+    public boolean isTLS(ByteBuf buffer) {\n+        int packetLength = 0;\n+        int offset = buffer.readerIndex();\n+\n+        // SSLv3 or TLS - Check ContentType\n+        boolean tls;\n+        switch (buffer.getUnsignedByte(offset)) {\n+            case SSL_CONTENT_TYPE_CHANGE_CIPHER_SPEC:\n+            case SSL_CONTENT_TYPE_ALERT:\n+            case SSL_CONTENT_TYPE_HANDSHAKE:\n+            case SSL_CONTENT_TYPE_APPLICATION_DATA:\n+            case SSL_CONTENT_TYPE_EXTENSION_HEARTBEAT:\n+                tls = true;\n+                break;\n+            default:\n+                // SSLv2 or bad data\n+                tls = false;\n+        }\n+\n+        if (tls) {\n+            // SSLv3 or TLS - Check ProtocolVersion\n+            int majorVersion = buffer.getUnsignedByte(offset + 1);\n+            if (majorVersion == 3) {\n+                // SSLv3 or TLS\n+                packetLength = unsignedShortBE(buffer, offset + 3) + SSL_RECORD_HEADER_LENGTH;\n+                if (packetLength <= SSL_RECORD_HEADER_LENGTH) {\n+                    // Neither SSLv3 or TLSv1 (i.e. SSLv2 or bad data)\n+                    tls = false;\n+                }\n+            } else {\n+                // Neither SSLv3 or TLSv1 (i.e. SSLv2 or bad data)\n+                tls = false;\n+            }\n+        }\n+\n+        return tls;\n+    }\n+\n+    static private int unsignedShortBE(ByteBuf buffer, int offset) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQxNDE4Nw=="}, "originalCommit": {"oid": "dc0691c138e82b53b843bf03518c0104e2f6e6c3"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTcwNDkyOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/HttpIntegrationTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMjo0NDoyOVrOHeMBQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNDoxNjo1MFrOHfLpow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQxNjI1OA==", "bodyText": "IMO, it should be part of API testing, not HttpIntegrationTests.", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r501416258", "createdAt": "2020-10-08T02:44:29Z", "author": {"login": "vrozov"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/HttpIntegrationTests.java", "diffHunk": "@@ -705,6 +714,67 @@ public void testSslOnlyMode() throws Exception {\n \n         res = rh.executeGetRequest(\"/_search\");\n         Assert.assertEquals(HttpStatus.SC_OK, res.getStatusCode());\n+\n+        if (dualModeEnabled) {\n+            res = rh.executeGetRequest(\"/_opendistro/_security/ssl_dual_mode\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc0691c138e82b53b843bf03518c0104e2f6e6c3"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ1ODc4Nw==", "bodyText": "Moved these tests to a separate file", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r502458787", "createdAt": "2020-10-09T14:16:50Z", "author": {"login": "sachetalva"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/HttpIntegrationTests.java", "diffHunk": "@@ -705,6 +714,67 @@ public void testSslOnlyMode() throws Exception {\n \n         res = rh.executeGetRequest(\"/_search\");\n         Assert.assertEquals(HttpStatus.SC_OK, res.getStatusCode());\n+\n+        if (dualModeEnabled) {\n+            res = rh.executeGetRequest(\"/_opendistro/_security/ssl_dual_mode\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQxNjI1OA=="}, "originalCommit": {"oid": "dc0691c138e82b53b843bf03518c0104e2f6e6c3"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1OTE1OTQxOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/test/helper/rest/RestHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMToyOTowOVrOHg-9qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNToxNDowMFrOHhCfNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM0ODA3NA==", "bodyText": "Why is this needed?", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r504348074", "createdAt": "2020-10-14T01:29:09Z", "author": {"login": "vrozov"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/test/helper/rest/RestHelper.java", "diffHunk": "@@ -253,6 +254,12 @@ protected final CloseableHttpClient getHTTPClient() throws Exception {\n \t\t\thcb.setSSLSocketFactory(sslsf);\n \t\t}\n \n+\t\tRequestConfig.Builder requestBuilder = RequestConfig.custom();\n+\t\trequestBuilder.setConnectTimeout(10000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ada4df1c3527c13498ec174d43fefa7724a4380"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQwNTgxNA==", "bodyText": "Reverted changes to install_demo_configuration.sh, HttpIntegrationTests.java and RestHelper.java", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r504405814", "createdAt": "2020-10-14T05:14:00Z", "author": {"login": "sachetalva"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/test/helper/rest/RestHelper.java", "diffHunk": "@@ -253,6 +254,12 @@ protected final CloseableHttpClient getHTTPClient() throws Exception {\n \t\t\thcb.setSSLSocketFactory(sslsf);\n \t\t}\n \n+\t\tRequestConfig.Builder requestBuilder = RequestConfig.custom();\n+\t\trequestBuilder.setConnectTimeout(10000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM0ODA3NA=="}, "originalCommit": {"oid": "8ada4df1c3527c13498ec174d43fefa7724a4380"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDA2MTQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMjowNjowNlrOHhuJkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDo1MToyMFrOHi1WXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEyMTE2OQ==", "bodyText": "As we are not supporting DualMode only for SSLOnly mode, should we only register this listener if it is SSLOnly mode?", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r505121169", "createdAt": "2020-10-15T02:06:06Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -706,7 +697,8 @@ public AsyncSender interceptSender(AsyncSender sender) {\n             Environment environment, NodeEnvironment nodeEnvironment, NamedWriteableRegistry namedWriteableRegistry,\n             IndexNameExpressionResolver indexNameExpressionResolver, Supplier<RepositoriesService> repositoriesServiceSupplier) {\n \n-        if(sslOnly) {\n+        openDistroSSLConfig.registerClusterSettingsChangeListener(clusterService.getClusterSettings());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "455e799795b3ee6892777a2b652939ed8f806aa6"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI4NzcxMA==", "bodyText": "Registering the setting even in not SSL modes since the cluster setting can be modified using the PUT _cluster/setting api.\nHowever, we already have a check inside the OpenDistroSSLConfig class to check if ssl_only mode is enabled. isDualModeEnabled() function returns true only when ssl_only is enabled and dual_mode is enabled", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r506287710", "createdAt": "2020-10-16T10:51:20Z", "author": {"login": "sachetalva"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -706,7 +697,8 @@ public AsyncSender interceptSender(AsyncSender sender) {\n             Environment environment, NodeEnvironment nodeEnvironment, NamedWriteableRegistry namedWriteableRegistry,\n             IndexNameExpressionResolver indexNameExpressionResolver, Supplier<RepositoriesService> repositoriesServiceSupplier) {\n \n-        if(sslOnly) {\n+        openDistroSSLConfig.registerClusterSettingsChangeListener(clusterService.getClusterSettings());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEyMTE2OQ=="}, "originalCommit": {"oid": "455e799795b3ee6892777a2b652939ed8f806aa6"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2OTI4Nzg0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMToyNzo0NFrOHihncQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDo0Nzo1NVrOHi1Lhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk2NDQwMQ==", "bodyText": "How did we verify that all \"opendistro_security.*\" except dual mode setting were filtered?\nAdditionally, we should improve filtering settings bit more instead adding all manfully. Like filtering everything except  \"dual_mode\" settings..   (I understand that we are not able to exclude setting and we are not able to keep wildcard based filtering pattern..  need to think more if there is other way instead adding manually all here..)\nwildcard pattern based filter was our safety to filter any remaining settings which was not filtered individually.\nany miss will expose sensitive security configuration via cluster settings.\nI understand listSettings and groupSettings are not being filtered with Property.Filtered() while registering those settings.   So, I think those are added separately as settingsFilter. But \"opendistro_security.*\" is really a safety for us for not exposing something accidentally", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r505964401", "createdAt": "2020-10-16T01:27:44Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -998,14 +993,35 @@ public Settings additionalSettings() {\n             return settingsFilter;\n         }\n \n-        settingsFilter.add(\"opendistro_security.*\");\n+        settingsFilter.addAll(super.getSettingsFilter());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "455e799795b3ee6892777a2b652939ed8f806aa6"}, "originalPosition": 291}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk5MTM3Mw==", "bodyText": "Other idea:  rename dual_mode settings with some different prefix . that way we can still rely on pattern based safety filter.", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r505991373", "createdAt": "2020-10-16T02:22:11Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -998,14 +993,35 @@ public Settings additionalSettings() {\n             return settingsFilter;\n         }\n \n-        settingsFilter.add(\"opendistro_security.*\");\n+        settingsFilter.addAll(super.getSettingsFilter());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk2NDQwMQ=="}, "originalCommit": {"oid": "455e799795b3ee6892777a2b652939ed8f806aa6"}, "originalPosition": 291}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI4NDkzNQ==", "bodyText": "reverted to \"opendistro_security.*\" filter and using opendistro_security_config as the prefix for ssl_dual_mode_enabled setting", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r506284935", "createdAt": "2020-10-16T10:47:55Z", "author": {"login": "sachetalva"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -998,14 +993,35 @@ public Settings additionalSettings() {\n             return settingsFilter;\n         }\n \n-        settingsFilter.add(\"opendistro_security.*\");\n+        settingsFilter.addAll(super.getSettingsFilter());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk2NDQwMQ=="}, "originalCommit": {"oid": "455e799795b3ee6892777a2b652939ed8f806aa6"}, "originalPosition": 291}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2OTMxMjY1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/OpenDistroSecuritySSLPlugin.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMTozNToxN1rOHih4bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDo0NjozOFrOHi1HGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk2ODc1MA==", "bodyText": "same here.", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r505968750", "createdAt": "2020-10-16T01:35:17Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/OpenDistroSecuritySSLPlugin.java", "diffHunk": "@@ -382,11 +385,15 @@ public Settings additionalSettings() {\n         \n         return builder.build();\n     }\n-    \n+\n     @Override\n     public List<String> getSettingsFilter() {\n         List<String> settingsFilter = new ArrayList<>();\n-        settingsFilter.add(\"opendistro_security.*\");\n+        settingsFilter.add(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_HTTP_ENABLED_CIPHERS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "455e799795b3ee6892777a2b652939ed8f806aa6"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI4MzgwMg==", "bodyText": "reverted to \"opendistro_security.*\" and using a different prefix for dual mode setting", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r506283802", "createdAt": "2020-10-16T10:46:38Z", "author": {"login": "sachetalva"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/OpenDistroSecuritySSLPlugin.java", "diffHunk": "@@ -382,11 +385,15 @@ public Settings additionalSettings() {\n         \n         return builder.build();\n     }\n-    \n+\n     @Override\n     public List<String> getSettingsFilter() {\n         List<String> settingsFilter = new ArrayList<>();\n-        settingsFilter.add(\"opendistro_security.*\");\n+        settingsFilter.add(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_HTTP_ENABLED_CIPHERS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk2ODc1MA=="}, "originalCommit": {"oid": "455e799795b3ee6892777a2b652939ed8f806aa6"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2OTUzODk4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroSSLConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMjo1MDozOFrOHikO9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDo0NjowNlrOHi1FTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjAwNzI4NQ==", "bodyText": "Why are we setting default to true?", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r506007285", "createdAt": "2020-10-16T02:50:38Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroSSLConfig.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.ssl.transport;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+\n+public class OpenDistroSSLConfig {\n+\n+    public static final Setting<Boolean> SSL_DUAL_MODE_SETTING = Setting.boolSetting(ConfigConstants.OPENDISTRO_SECURITY_SSL_DUAL_MODE_ENABLED,\n+            true, Setting.Property.NodeScope, Setting.Property.Dynamic); // Not filtered", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "455e799795b3ee6892777a2b652939ed8f806aa6"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI4MzM0MQ==", "bodyText": "changed default to false", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r506283341", "createdAt": "2020-10-16T10:46:06Z", "author": {"login": "sachetalva"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroSSLConfig.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.ssl.transport;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+\n+public class OpenDistroSSLConfig {\n+\n+    public static final Setting<Boolean> SSL_DUAL_MODE_SETTING = Setting.boolSetting(ConfigConstants.OPENDISTRO_SECURITY_SSL_DUAL_MODE_ENABLED,\n+            true, Setting.Property.NodeScope, Setting.Property.Dynamic); // Not filtered", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjAwNzI4NQ=="}, "originalCommit": {"oid": "455e799795b3ee6892777a2b652939ed8f806aa6"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2OTU0NzIwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroSSLConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMjo1MzoyNFrOHikUkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDo0NTo1MVrOHi1Eow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjAwODcyMA==", "bodyText": "lets throw a warning if DUAL mode is enabled but SSLOnly is not .\nThat way we can inform user that DUAL mode is not going to be applicable.", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r506008720", "createdAt": "2020-10-16T02:53:24Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroSSLConfig.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.ssl.transport;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+\n+public class OpenDistroSSLConfig {\n+\n+    public static final Setting<Boolean> SSL_DUAL_MODE_SETTING = Setting.boolSetting(ConfigConstants.OPENDISTRO_SECURITY_SSL_DUAL_MODE_ENABLED,\n+            true, Setting.Property.NodeScope, Setting.Property.Dynamic); // Not filtered\n+\n+    private static final Logger logger = LogManager.getLogger(OpenDistroSSLConfig.class);\n+\n+    private final boolean sslOnly;\n+    private volatile boolean dualModeEnabled;\n+\n+    public OpenDistroSSLConfig(final boolean sslOnly, final boolean dualModeEnabled) {\n+        this.sslOnly = sslOnly;\n+        this.dualModeEnabled = dualModeEnabled;\n+        logger.info(\"SSL dual mode is {}\", isDualModeEnabled() ? \"enabled\" : \"disabled\");\n+    }\n+\n+    public OpenDistroSSLConfig(final Settings settings) {\n+        this(settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_SSL_ONLY, false),\n+            settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_SSL_DUAL_MODE_ENABLED, false));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "455e799795b3ee6892777a2b652939ed8f806aa6"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI4MzE3MQ==", "bodyText": "Added a warning message", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r506283171", "createdAt": "2020-10-16T10:45:51Z", "author": {"login": "sachetalva"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroSSLConfig.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.ssl.transport;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+\n+public class OpenDistroSSLConfig {\n+\n+    public static final Setting<Boolean> SSL_DUAL_MODE_SETTING = Setting.boolSetting(ConfigConstants.OPENDISTRO_SECURITY_SSL_DUAL_MODE_ENABLED,\n+            true, Setting.Property.NodeScope, Setting.Property.Dynamic); // Not filtered\n+\n+    private static final Logger logger = LogManager.getLogger(OpenDistroSSLConfig.class);\n+\n+    private final boolean sslOnly;\n+    private volatile boolean dualModeEnabled;\n+\n+    public OpenDistroSSLConfig(final boolean sslOnly, final boolean dualModeEnabled) {\n+        this.sslOnly = sslOnly;\n+        this.dualModeEnabled = dualModeEnabled;\n+        logger.info(\"SSL dual mode is {}\", isDualModeEnabled() ? \"enabled\" : \"disabled\");\n+    }\n+\n+    public OpenDistroSSLConfig(final Settings settings) {\n+        this(settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_SSL_ONLY, false),\n+            settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_SSL_DUAL_MODE_ENABLED, false));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjAwODcyMA=="}, "originalCommit": {"oid": "455e799795b3ee6892777a2b652939ed8f806aa6"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2OTU2NTkxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroSecuritySSLNettyTransport.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMjo1OToyMFrOHikg3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDo0NTozN1rOHi1D7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjAxMTg2OQ==", "bodyText": "seems like amazon copyright is missing in this file.\nCan you add Portions Copyright for Amazon.com", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r506011869", "createdAt": "2020-10-16T02:59:20Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroSecuritySSLNettyTransport.java", "diffHunk": "@@ -1,28 +1,33 @@\n /*\n  * Copyright 2015-2017 floragunn GmbH\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *     http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n- * \n+ *\n  */\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "455e799795b3ee6892777a2b652939ed8f806aa6"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI4Mjk4OA==", "bodyText": "Added", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r506282988", "createdAt": "2020-10-16T10:45:37Z", "author": {"login": "sachetalva"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroSecuritySSLNettyTransport.java", "diffHunk": "@@ -1,28 +1,33 @@\n /*\n  * Copyright 2015-2017 floragunn GmbH\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *     http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n- * \n+ *\n  */\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjAxMTg2OQ=="}, "originalCommit": {"oid": "455e799795b3ee6892777a2b652939ed8f806aa6"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2312, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}