{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwMDA4NDYw", "number": 520, "title": "Add configuration for REST API whitelisting", "bodyText": "This commit introduces a REST API whitelisting feature into the security plugin.\nThis feature allows the SuperAdmin to whitelist REST APIs for all users.\nAll users except SuperAdmin can only access whitelisted APIs.\nWhitelisting can be configured in 2 ways:\n\nChanging the whitelist.yml file and pushing using command line (securityadmin.sh).\nUsing the REST API /_opendistro/_security/api/whitelist to update current whitelisting settings.\nThe GET, PUT and PATCH REST APIs -  /_opendistro/_security/api/whitelist are only accessible by the SuperAdmin.\n\nAPI functionality:\nGET /_opendistro/_security/api/whitelist - returns the existing whitelist configuration\nPUT /_opendistro/_security/api/whitelist - allows changing the existing configuration.\nPATCH /_opendistro/_security/api/whitelist - allows changing the existing configuration.\nWhitelisting can be turned off dynamically by setting 'enabled' to false\nby using either the API or securityadmin.sh\nIssue #, if available:\nDescription of changes:\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-06-25T13:07:10Z", "url": "https://github.com/opensearch-project/security/pull/520", "merged": true, "mergeCommit": {"oid": "6fde7a28e9c0945613b9b91ba84976a4616d1266"}, "closed": true, "closedAt": "2020-07-10T14:38:16Z", "author": {"login": "rahulkarajgikar"}, "timelineItems": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcurg5fgH2gAyNDQwMDA4NDYwOjM5Y2NjOTY1NDRkMGQxNmI2ZmQ1ZGQ3ZjVkNzQxZWMyNjc1OTcxNjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc1hHz4AFqTQ0OTk2OTA1OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "39ccc96544d0d16b6fd5dd7f5d741ec267597165", "author": {"user": {"login": "rahulkarajgikar", "name": "Rahul Karajgikar"}}, "url": "https://github.com/opensearch-project/security/commit/39ccc96544d0d16b6fd5dd7f5d741ec267597165", "committedDate": "2020-06-25T09:48:27Z", "message": "Add REST API whitelisting\n\nThis commit introduces a whitelisting feature into the security plugin.\nThis feature allows the SuperAdmin to whitelist APIs by URI for use by users.\nAll users except SuperAdmin can only access whitelisted APIs.\nWhitelisting can be configured in 2 ways:\n1. Using the whitelisting_settings.yml file and pushing using command line (securityadmin.sh).\n2. Using the REST API /_opendistro/_security/api/whitelist to update current whitelisting settings.\nThe REST API /_opendistro/_security/api/whitelist is only accessible by the SuperAdmin.\nIt has 2 endpoints:\n1. GET - returns the existing whitelist configuration\n2. PUT - allows changing the existing configuration.\nWhitelisting can be turned off dynamically by setting 'whitelistingEnabled' to false\nby using either the API or securityadmin.sh"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5549215bc2fbd9c6a87abcd3ec8d093e5f0c56ef", "author": {"user": null}, "url": "https://github.com/opensearch-project/security/commit/5549215bc2fbd9c6a87abcd3ec8d093e5f0c56ef", "committedDate": "2020-07-01T07:47:54Z", "message": "Merge changes from master and fix some tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c471b3a2da2c7c0833bcb2c1003274e09fe4810", "author": {"user": {"login": "rahulkarajgikar", "name": "Rahul Karajgikar"}}, "url": "https://github.com/opensearch-project/security/commit/8c471b3a2da2c7c0833bcb2c1003274e09fe4810", "committedDate": "2020-07-01T08:52:33Z", "message": "Merge branch 'master' into merge-conflict-fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMTMwNzQ2", "url": "https://github.com/opensearch-project/security/pull/520#pullrequestreview-441130746", "createdAt": "2020-07-01T19:11:23Z", "commit": {"oid": "8c471b3a2da2c7c0833bcb2c1003274e09fe4810"}, "state": "DISMISSED", "comments": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxOToxMToyNFrOGryMBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMzowOToxNlrOGr751Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU2NDIzMA==", "bodyText": "Try and stick to the same convention for your naming. Eg: whitelisting_enabled instead of whitelistingEnabled", "url": "https://github.com/opensearch-project/security/pull/520#discussion_r448564230", "createdAt": "2020-07-01T19:11:24Z", "author": {"login": "debjanibnrj"}, "path": "securityconfig/whitelisting_settings.yml", "diffHunk": "@@ -0,0 +1,9 @@\n+---\n+_meta:\n+  type: \"whitelisting_settings\"\n+  config_version: 2\n+\n+#this name must be whitelisting_settings\n+whitelisting_settings:\n+  whitelistingEnabled: false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c471b3a2da2c7c0833bcb2c1003274e09fe4810"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU2NDc1Ng==", "bodyText": "nit: add new line", "url": "https://github.com/opensearch-project/security/pull/520#discussion_r448564756", "createdAt": "2020-07-01T19:12:33Z", "author": {"login": "debjanibnrj"}, "path": "securityconfig/whitelisting_settings.yml", "diffHunk": "@@ -0,0 +1,9 @@\n+---\n+_meta:\n+  type: \"whitelisting_settings\"\n+  config_version: 2\n+\n+#this name must be whitelisting_settings\n+whitelisting_settings:\n+  whitelistingEnabled: false\n+  whitelistedAPIs: [\"/_cat/nodes\",\"/_cat/plugins\",\"/_cluster/health\",\"/_cluster/settings\"]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c471b3a2da2c7c0833bcb2c1003274e09fe4810"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU2NzEyNw==", "bodyText": "nit: , populateEmptyIfFileMissing", "url": "https://github.com/opensearch-project/security/pull/520#discussion_r448567127", "createdAt": "2020-07-01T19:17:39Z", "author": {"login": "debjanibnrj"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/ConfigurationRepository.java", "diffHunk": "@@ -141,6 +141,7 @@ public void run() {\n                                         }\n                                         final boolean populateEmptyIfFileMissing = true;\n                                         ConfigHelper.uploadFile(client, cd+\"nodes_dn.yml\", opendistrosecurityIndex, CType.NODESDN, DEFAULT_CONFIG_VERSION, populateEmptyIfFileMissing);\n+                                        ConfigHelper.uploadFile(client, cd +\"whitelisting_settings.yml\", opendistrosecurityIndex, CType.WHITELISTING_SETTINGS, DEFAULT_CONFIG_VERSION,populateEmptyIfFileMissing);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c471b3a2da2c7c0833bcb2c1003274e09fe4810"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3OTk0OA==", "bodyText": "Since this is mainly use to whitelist APIs maybe whitelisting_settings may be confusing. What about whitelist.yml? Let me know what you think.", "url": "https://github.com/opensearch-project/security/pull/520#discussion_r448579948", "createdAt": "2020-07-01T19:45:52Z", "author": {"login": "debjanibnrj"}, "path": "securityconfig/whitelisting_settings.yml", "diffHunk": "@@ -0,0 +1,9 @@\n+---", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c471b3a2da2c7c0833bcb2c1003274e09fe4810"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYwODU3OQ==", "bodyText": "remove unused imports", "url": "https://github.com/opensearch-project/security/pull/520#discussion_r448608579", "createdAt": "2020-07-01T20:49:09Z", "author": {"login": "debjanibnrj"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/WhitelistApiAction.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package com.amazon.opendistroforelasticsearch.security.dlic.rest.api;\n+\n+import com.amazon.opendistroforelasticsearch.security.DefaultObjectMapper;\n+import com.amazon.opendistroforelasticsearch.security.auditlog.AuditLog;\n+import com.amazon.opendistroforelasticsearch.security.configuration.AdminDNs;\n+import com.amazon.opendistroforelasticsearch.security.configuration.ConfigurationRepository;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.AbstractConfigurationValidator;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.RolesMappingValidator;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c471b3a2da2c7c0833bcb2c1003274e09fe4810"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYxMDY1MA==", "bodyText": "nit: remove st", "url": "https://github.com/opensearch-project/security/pull/520#discussion_r448610650", "createdAt": "2020-07-01T20:53:47Z", "author": {"login": "debjanibnrj"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/WhitelistApiAction.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package com.amazon.opendistroforelasticsearch.security.dlic.rest.api;\n+\n+import com.amazon.opendistroforelasticsearch.security.DefaultObjectMapper;\n+import com.amazon.opendistroforelasticsearch.security.auditlog.AuditLog;\n+import com.amazon.opendistroforelasticsearch.security.configuration.AdminDNs;\n+import com.amazon.opendistroforelasticsearch.security.configuration.ConfigurationRepository;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.AbstractConfigurationValidator;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.RolesMappingValidator;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.WhitelistValidator;\n+import com.amazon.opendistroforelasticsearch.security.privileges.PrivilegesEvaluator;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.CType;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.SecurityDynamicConfiguration;\n+import com.amazon.opendistroforelasticsearch.security.ssl.transport.PrincipalExtractor;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.common.collect.ImmutableList;\n+import org.elasticsearch.action.index.IndexResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.rest.RestChannel;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.threadpool.ThreadPool;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+\n+/**\n+ * This class implements GET and PUT operations to manage dynamic WhitelistingSettings.\n+ * <p>\n+ * These APIs are only accessible to SuperAdmin since the configuration controls what APIs are accessible by normal users.\n+ * Eg: If whitelisting is enabled, and a specific API like \"/_cat/nodes\" is not whitelisted, then only the SuperAdmin can use \"/_cat/nodes\"st", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c471b3a2da2c7c0833bcb2c1003274e09fe4810"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYxMjcwOQ==", "bodyText": "We can remove all extra '/' from the API name and then compare for equality so that the user does not need to worry about this. Let me know what you think.\nIt may also be useful to specify the API format you're looking for as a comment in whitelist.yml file.", "url": "https://github.com/opensearch-project/security/pull/520#discussion_r448612709", "createdAt": "2020-07-01T20:58:11Z", "author": {"login": "debjanibnrj"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/WhitelistApiAction.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package com.amazon.opendistroforelasticsearch.security.dlic.rest.api;\n+\n+import com.amazon.opendistroforelasticsearch.security.DefaultObjectMapper;\n+import com.amazon.opendistroforelasticsearch.security.auditlog.AuditLog;\n+import com.amazon.opendistroforelasticsearch.security.configuration.AdminDNs;\n+import com.amazon.opendistroforelasticsearch.security.configuration.ConfigurationRepository;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.AbstractConfigurationValidator;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.RolesMappingValidator;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.WhitelistValidator;\n+import com.amazon.opendistroforelasticsearch.security.privileges.PrivilegesEvaluator;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.CType;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.SecurityDynamicConfiguration;\n+import com.amazon.opendistroforelasticsearch.security.ssl.transport.PrincipalExtractor;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.common.collect.ImmutableList;\n+import org.elasticsearch.action.index.IndexResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.rest.RestChannel;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.threadpool.ThreadPool;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+\n+/**\n+ * This class implements GET and PUT operations to manage dynamic WhitelistingSettings.\n+ * <p>\n+ * These APIs are only accessible to SuperAdmin since the configuration controls what APIs are accessible by normal users.\n+ * Eg: If whitelisting is enabled, and a specific API like \"/_cat/nodes\" is not whitelisted, then only the SuperAdmin can use \"/_cat/nodes\"st\n+ * These APIs allow the SuperAdmin to enable/disable whitelisting, and also change the list of whitelisted APIs.\n+ * <p>\n+ * A SuperAdmin is identified by a certificate which represents a distinguished name(DN).\n+ * SuperAdmin DN's can be set in {@link ConfigConstants#OPENDISTRO_SECURITY_AUTHCZ_ADMIN_DN}\n+ * SuperAdmin certificate for the default superuser is stored as a kirk.pem file in config folder of elasticsearch\n+ * <p>\n+ * Example calling the PUT API as SuperAdmin using curl (if http basic auth is on):\n+ * curl -v --cacert path_to_config/root-ca.pem --cert path_to_config/kirk.pem --key path_to_config/kirk-key.pem -XPUT https://localhost:9200/_opendistro/_security/api/whitelist -H \"Content-Type: application/json\" -d\u2019\n+ * {\n+ * \"whitelistingEnabled\" : false,\n+ * \"whitelistedAPIs\" : [\"/_cat/nodes\",\"/_opendistro/_security/api/whitelist\",\"/_opendistro/_security/api/securityconfig\"]\n+ * }\n+ * \u2018\n+ * <p>\n+ * Currently, whitelisting checks the path for equality, so make sure you don't have errors in the whitelisted APIs.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c471b3a2da2c7c0833bcb2c1003274e09fe4810"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY2NDk0NA==", "bodyText": "Think you can remove new ArrayList<>. Also should this be a Set? Saw that you converted it to a HashSet here - https://github.com/opendistro-for-elasticsearch/security/pull/520/files#diff-252524d3598f0d934aec492210aac861R105", "url": "https://github.com/opensearch-project/security/pull/520#discussion_r448664944", "createdAt": "2020-07-01T23:21:46Z", "author": {"login": "debjanibnrj"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/filter/OpenDistroSecurityRestFilter.java", "diffHunk": "@@ -70,6 +79,16 @@\n     private final Settings settings;\n     private final Path configPath;\n     private final CompatConfig compatConfig;\n+    private static final List<String> defaultWhitelistedAPIs = new ArrayList<>(Arrays.asList(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c471b3a2da2c7c0833bcb2c1003274e09fe4810"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODcxMTE3Nw==", "bodyText": "you can just return user != null && adminDNs.isAdmin(user) here.", "url": "https://github.com/opensearch-project/security/pull/520#discussion_r448711177", "createdAt": "2020-07-02T02:18:59Z", "author": {"login": "debjanibnrj"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/filter/OpenDistroSecurityRestFilter.java", "diffHunk": "@@ -82,22 +101,86 @@ public OpenDistroSecurityRestFilter(final BackendRegistry registry, final AuditL\n         this.settings = settings;\n         this.configPath = configPath;\n         this.compatConfig = compatConfig;\n+        this.whitelistingEnabled = false;\n+        this.whitelistedAPIs = new HashSet<>(defaultWhitelistedAPIs);\n+\n     }\n-    \n-    public RestHandler wrap(RestHandler original) {\n+\n+    /**\n+     * This function wraps around all rest requests\n+     * If the request is authenticated, then it goes through a whitelisting check.\n+     * The whitelisting check works as follows:\n+     * If whitelisting is not enabled, then requests are handled normally.\n+     * If whitelisting is enabled, then SuperAdmin is allowed access to all APIs, regardless of what is currently whitelisted.\n+     * If whitelisting is enabled, then Non-SuperAdmin is allowed to access only those APIs that are whitelisted in {@link #whitelistedAPIs}\n+     * For example: if whitelisting is enabled and whitelistedAPIs = [\"/_cat/nodes\"], then SuperAdmin can access all APIs, but non SuperAdmin\n+     * can only access \"/_cat/nodes\"\n+     * Note: if whitelistedAPIs = [\"/_cat/nodes\"] is whitelisted, \"/_cat/nodes/\" will not work, because of the extra '/'.\n+     * Further note: Some APIs are only accessible by SuperAdmin, regardless of whitelisting. For example: /_opendistro/_security/api/whitelist is only accessible by SuperAdmin.\n+     * See {@link com.amazon.opendistroforelasticsearch.security.dlic.rest.api.WhitelistApiAction} for the implementation of this API.\n+     * SuperAdmin is identified by credentials, which can be passed in the curl request.\n+     */\n+    public RestHandler wrap(RestHandler original, AdminDNs adminDNs) {\n         return new RestHandler() {\n             \n             @Override\n             public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                 org.apache.logging.log4j.ThreadContext.clearAll();\n-                if(!checkAndAuthenticateRequest(request, channel, client)) {\n-                    original.handleRequest(request, channel, client);\n+                if (!checkAndAuthenticateRequest(request, channel, client)) {\n+                    User user = threadContext.getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n+                    if (userIsSuperAdmin(user, adminDNs) || checkRequestIsWhitelisted(request, channel, client)) {\n+                        original.handleRequest(request, channel, client);\n+                    }\n                 }\n             }\n         };\n     }\n \n-    private boolean checkAndAuthenticateRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n+    /**\n+     * Checks if a given user is a SuperAdmin\n+     */\n+    private Boolean userIsSuperAdmin(User user, AdminDNs adminDNs) {\n+        if (user != null && adminDNs.isAdmin(user)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c471b3a2da2c7c0833bcb2c1003274e09fe4810"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODcxMTQwOA==", "bodyText": "Separate helper function may not be needed for this since I see it is being used only once in https://github.com/opendistro-for-elasticsearch/security/pull/520/files#diff-252524d3598f0d934aec492210aac861R171", "url": "https://github.com/opensearch-project/security/pull/520#discussion_r448711408", "createdAt": "2020-07-02T02:19:55Z", "author": {"login": "debjanibnrj"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/filter/OpenDistroSecurityRestFilter.java", "diffHunk": "@@ -82,22 +101,86 @@ public OpenDistroSecurityRestFilter(final BackendRegistry registry, final AuditL\n         this.settings = settings;\n         this.configPath = configPath;\n         this.compatConfig = compatConfig;\n+        this.whitelistingEnabled = false;\n+        this.whitelistedAPIs = new HashSet<>(defaultWhitelistedAPIs);\n+\n     }\n-    \n-    public RestHandler wrap(RestHandler original) {\n+\n+    /**\n+     * This function wraps around all rest requests\n+     * If the request is authenticated, then it goes through a whitelisting check.\n+     * The whitelisting check works as follows:\n+     * If whitelisting is not enabled, then requests are handled normally.\n+     * If whitelisting is enabled, then SuperAdmin is allowed access to all APIs, regardless of what is currently whitelisted.\n+     * If whitelisting is enabled, then Non-SuperAdmin is allowed to access only those APIs that are whitelisted in {@link #whitelistedAPIs}\n+     * For example: if whitelisting is enabled and whitelistedAPIs = [\"/_cat/nodes\"], then SuperAdmin can access all APIs, but non SuperAdmin\n+     * can only access \"/_cat/nodes\"\n+     * Note: if whitelistedAPIs = [\"/_cat/nodes\"] is whitelisted, \"/_cat/nodes/\" will not work, because of the extra '/'.\n+     * Further note: Some APIs are only accessible by SuperAdmin, regardless of whitelisting. For example: /_opendistro/_security/api/whitelist is only accessible by SuperAdmin.\n+     * See {@link com.amazon.opendistroforelasticsearch.security.dlic.rest.api.WhitelistApiAction} for the implementation of this API.\n+     * SuperAdmin is identified by credentials, which can be passed in the curl request.\n+     */\n+    public RestHandler wrap(RestHandler original, AdminDNs adminDNs) {\n         return new RestHandler() {\n             \n             @Override\n             public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                 org.apache.logging.log4j.ThreadContext.clearAll();\n-                if(!checkAndAuthenticateRequest(request, channel, client)) {\n-                    original.handleRequest(request, channel, client);\n+                if (!checkAndAuthenticateRequest(request, channel, client)) {\n+                    User user = threadContext.getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n+                    if (userIsSuperAdmin(user, adminDNs) || checkRequestIsWhitelisted(request, channel, client)) {\n+                        original.handleRequest(request, channel, client);\n+                    }\n                 }\n             }\n         };\n     }\n \n-    private boolean checkAndAuthenticateRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n+    /**\n+     * Checks if a given user is a SuperAdmin\n+     */\n+    private Boolean userIsSuperAdmin(User user, AdminDNs adminDNs) {\n+        if (user != null && adminDNs.isAdmin(user)) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Helper function to generate an error when an unauthorized user (i.e non superadmin) tries to access an API that is not whitelisted.\n+     */\n+    private BytesRestResponse createNotWhitelistedErrorResponse(RestChannel channel, String errorMessage,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c471b3a2da2c7c0833bcb2c1003274e09fe4810"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODcyMTYwOQ==", "bodyText": "Instead of managing default values here could default value checks be moved to WhitelistingSettingsImpl?", "url": "https://github.com/opensearch-project/security/pull/520#discussion_r448721609", "createdAt": "2020-07-02T03:00:44Z", "author": {"login": "debjanibnrj"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/filter/OpenDistroSecurityRestFilter.java", "diffHunk": "@@ -155,4 +238,11 @@ private boolean checkAndAuthenticateRequest(RestRequest request, RestChannel cha\n         \n         return false;\n     }\n+\n+    @Subscribe\n+    public void onWhitelistingSettingChanged(WhitelistingSettingsModel whitelistingSettingsModel) {\n+        WhitelistingSettings whitelistingSettings = whitelistingSettingsModel.getWhitelistingSettings();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c471b3a2da2c7c0833bcb2c1003274e09fe4810"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODcyMjE0Mg==", "bodyText": "Best practice to avoid .* imports", "url": "https://github.com/opensearch-project/security/pull/520#discussion_r448722142", "createdAt": "2020-07-02T03:03:07Z", "author": {"login": "debjanibnrj"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/impl/CType.java", "diffHunk": "@@ -13,12 +13,7 @@\n import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v6.InternalUserV6;\n import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v6.RoleMappingsV6;\n import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v6.RoleV6;\n-import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v7.ActionGroupsV7;\n-import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v7.ConfigV7;\n-import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v7.InternalUserV7;\n-import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v7.RoleMappingsV7;\n-import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v7.RoleV7;\n-import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v7.TenantV7;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v7.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c471b3a2da2c7c0833bcb2c1003274e09fe4810"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODcyMjM3Nw==", "bodyText": "Should this be an empty list? Why are these enabled by default?", "url": "https://github.com/opensearch-project/security/pull/520#discussion_r448722377", "createdAt": "2020-07-02T03:04:18Z", "author": {"login": "debjanibnrj"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/impl/WhitelistingSettings.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package com.amazon.opendistroforelasticsearch.security.securityconf.impl;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class WhitelistingSettings {\n+    @JsonProperty(value = \"whitelistingEnabled\")\n+    private boolean whitelistingEnabled;\n+    @JsonProperty(value = \"whitelistedAPIs\")\n+    private List<String> whitelistedAPIs;\n+\n+    public WhitelistingSettings() {\n+        whitelistingEnabled = false;\n+        whitelistedAPIs = new ArrayList<>(Arrays.asList(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c471b3a2da2c7c0833bcb2c1003274e09fe4810"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODcyMjY5OA==", "bodyText": "Any reason why these values changed?", "url": "https://github.com/opensearch-project/security/pull/520#discussion_r448722698", "createdAt": "2020-07-02T03:05:47Z", "author": {"login": "debjanibnrj"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/UserApiTest.java", "diffHunk": "@@ -470,12 +467,12 @@ public void testUserApiWithDots() throws Exception {\n         rh.keystore = \"restapi/kirk-keystore.jks\";\n         rh.sendAdminCertificate = true;\n \n-        // initial configuration, 5 users\n+        // initial configuration, 6 users\n         HttpResponse response = rh\n                 .executeGetRequest(\"_opendistro/_security/api/\" + CType.INTERNALUSERS.toLCString());\n         Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n         Settings settings = Settings.builder().loadFromSource(response.getBody(), XContentType.JSON).build();\n-        Assert.assertEquals(49, settings.size());\n+        Assert.assertEquals(56, settings.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c471b3a2da2c7c0833bcb2c1003274e09fe4810"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODcyMjk5Mw==", "bodyText": "Please add new lines to the end of all your .yml files.", "url": "https://github.com/opensearch-project/security/pull/520#discussion_r448722993", "createdAt": "2020-07-02T03:07:09Z", "author": {"login": "debjanibnrj"}, "path": "src/test/resources/legacy/securityconfig_v6/whitelisting_settings.yml", "diffHunk": "@@ -0,0 +1,5 @@\n+---", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c471b3a2da2c7c0833bcb2c1003274e09fe4810"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODcyMzQxMw==", "bodyText": "may want to remove any print statements used for debugging.", "url": "https://github.com/opensearch-project/security/pull/520#discussion_r448723413", "createdAt": "2020-07-02T03:09:16Z", "author": {"login": "debjanibnrj"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/WhitelistApiTest.java", "diffHunk": "@@ -0,0 +1,211 @@\n+package com.amazon.opendistroforelasticsearch.security.dlic.rest.api;\n+\n+\n+import com.amazon.opendistroforelasticsearch.security.DefaultObjectMapper;\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditMessage;\n+import com.amazon.opendistroforelasticsearch.security.auditlog.integration.TestAuditlogImpl;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.AbstractConfigurationValidator;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.amazon.opendistroforelasticsearch.security.test.helper.file.FileHelper;\n+import com.amazon.opendistroforelasticsearch.security.test.helper.rest.RestHelper;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.common.collect.ImmutableMap;\n+import org.apache.http.Header;\n+import org.apache.http.HttpStatus;\n+import org.elasticsearch.common.settings.Settings;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+/**\n+ * Unit testing class to verify that {@link WhitelistApiAction} works correctly.\n+ * Check {@link com.amazon.opendistroforelasticsearch.security.filter.OpenDistroSecurityRestFilter} for extra tests for whitelisting functionality.\n+ */\n+public class WhitelistApiTest extends AbstractRestApiUnitTest {\n+    private RestHelper.HttpResponse response;\n+\n+    /**\n+     * admin_all_access is a user who has all permissions - essentially an admin user, not the same as superadmin.\n+     * superadmin is identified by a certificate that should be passed as a part of the request header.\n+     */\n+    private final Header adminCredsHeader = encodeBasicHeader(\"admin_all_access\", \"admin_all_access\");\n+    private final Header nonAdminCredsHeader = encodeBasicHeader(\"sarek\", \"sarek\");\n+\n+    /**\n+     * Helper function to test the GET and PUT endpoints.\n+     *\n+     * @param expectedStatus\n+     * @param headers\n+     * @throws Exception\n+     */\n+    private void testGetAndPut(final int expectedStatus, final Header... headers) throws Exception {\n+\n+        //CHECK GET REQUEST\n+        response = rh.executeGetRequest(\"_opendistro/_security/api/whitelist\", headers);\n+        assertThat(response.getBody(), response.getStatusCode(), equalTo(expectedStatus));\n+        if (expectedStatus == HttpStatus.SC_OK) {\n+            //Note: the response has no whitespaces, so the .json file does not have whitespaces\n+            Assert.assertEquals(FileHelper.loadFile(\"restapi/whitelist_response_success.json\"), FileHelper.loadFile(\"restapi/whitelist_response_success.json\"));\n+        }\n+        //FORBIDDEN FOR NON SUPER ADMIN\n+        if (expectedStatus == HttpStatus.SC_FORBIDDEN) {\n+            Assert.assertTrue(response.getBody().contains(\"API allowed only for super admin.\"));\n+        }\n+        //CHECK PUT REQUEST\n+        response = rh.executePutRequest(\"_opendistro/_security/api/whitelist\", \"{\\\"whitelistingEnabled\\\": true, \\\"whitelistedAPIs\\\": [\\\"/_cat/nodes\\\",\\\"/_cat/indices\\\"]}\", headers);\n+        assertThat(response.getBody(), response.getStatusCode(), equalTo(expectedStatus));\n+    }\n+\n+    /**\n+     * Tests that the response does not have a _meta header\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testResponseDoesNotContainMetaHeader() throws Exception {\n+\n+        setup();\n+\n+        rh.keystore = \"restapi/kirk-keystore.jks\";\n+        rh.sendAdminCertificate = true;\n+        RestHelper.HttpResponse response = rh.executeGetRequest(\"_opendistro/_security/api/whitelist\");\n+        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n+        Assert.assertFalse(response.getBody().contains(\"_meta\"));\n+    }\n+\n+    /**\n+     * Tests that putting an unknown key fails\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testPutUnknownKey() throws Exception {\n+\n+        setup();\n+\n+        rh.keystore = \"restapi/kirk-keystore.jks\";\n+        rh.sendAdminCertificate = true;\n+        RestHelper.HttpResponse response = rh.executePutRequest(\"_opendistro/_security/api/whitelist\", \"{ \\\"unknownkey\\\": true, \\\"whitelistedAPIs\\\": [\\\"/_cat/nodes\\\",\\\"/_cat/plugins\\\"] }\");\n+        Assert.assertEquals(HttpStatus.SC_BAD_REQUEST, response.getStatusCode());\n+        Assert.assertTrue(response.getBody().contains(\"invalid_keys\"));\n+        assertHealthy();\n+    }\n+\n+    /**\n+     * Tests that invalid json body fails\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testPutInvalidJson() throws Exception {\n+        setup();\n+\n+        rh.keystore = \"restapi/kirk-keystore.jks\";\n+        rh.sendAdminCertificate = true;\n+        RestHelper.HttpResponse response = rh.executePutRequest(\"_opendistro/_security/api/whitelist\", \"{ \\\"invalid\\\"::{{ [\\\"*\\\"], \\\"whitelistedAPIs\\\": [\\\"/_cat/nodes\\\",\\\"/_cat/plugins\\\"] }\");\n+        Assert.assertEquals(HttpStatus.SC_BAD_REQUEST, response.getStatusCode());\n+        Assert.assertTrue(response.getBody().contains(\"JsonParseException\"));\n+        assertHealthy();\n+    }\n+\n+    /**\n+     * Tests that the PUT API requires a payload. i.e non empty payloads give an error.\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testPayloadMandatory() throws Exception {\n+        setup();\n+\n+        rh.keystore = \"restapi/kirk-keystore.jks\";\n+        rh.sendAdminCertificate = true;\n+        response = rh.executePutRequest(\"/_opendistro/_security/api/whitelist\", \"\", new Header[0]);\n+        Assert.assertEquals(HttpStatus.SC_BAD_REQUEST, response.getStatusCode());\n+        JsonNode settings = DefaultObjectMapper.readTree(response.getBody());\n+        Assert.assertEquals(AbstractConfigurationValidator.ErrorType.PAYLOAD_MANDATORY.getMessage(), settings.get(\"reason\").asText());\n+    }\n+\n+    /**\n+     * Tests 4 scenarios for accessing and using the API.\n+     * No creds, no admin certificate - UNAUTHORIZED\n+     * non admin creds, no admin certificate - FORBIDDEN\n+     * admin creds, no admin certificate - FORBIDDEN\n+     * any creds, admin certificate - OK\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testWhitelistApi() throws Exception {\n+        setupWithRestRoles(null);\n+\n+        {\n+            // No creds, no admin certificate - UNAUTHORIZED\n+            rh.keystore = \"restapi/kirk-keystore.jks\";\n+            rh.sendAdminCertificate = false;\n+            testGetAndPut(HttpStatus.SC_UNAUTHORIZED);\n+        }\n+\n+\n+        {\n+            //non admin creds, no admin certificate - FORBIDDEN\n+            rh.keystore = \"restapi/kirk-keystore.jks\";\n+            rh.sendAdminCertificate = false;\n+            testGetAndPut(HttpStatus.SC_FORBIDDEN, nonAdminCredsHeader);\n+        }\n+\n+        {\n+            // admin creds, no admin certificate - FORBIDDEN\n+            rh.keystore = \"restapi/kirk-keystore.jks\";\n+            rh.sendAdminCertificate = false;\n+            testGetAndPut(HttpStatus.SC_FORBIDDEN, adminCredsHeader);\n+        }\n+\n+        {\n+            // any creds, admin certificate - OK\n+            rh.keystore = \"restapi/kirk-keystore.jks\";\n+            rh.sendAdminCertificate = true;\n+            testGetAndPut(HttpStatus.SC_OK, nonAdminCredsHeader);\n+        }\n+    }\n+\n+    @Test\n+    public void testWhitelistAuditComplianceLogging() throws Exception {\n+        Settings settings = Settings.builder()\n+                .put(\"opendistro_security.audit.type\", TestAuditlogImpl.class.getName())\n+                .put(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, false)\n+                .put(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, false)\n+                .put(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_BULK_REQUESTS, false)\n+                .put(ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_WRITE_LOG_DIFFS, true)\n+                .put(ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_EXTERNAL_CONFIG_ENABLED, false)\n+                .put(ConfigConstants.OPENDISTRO_SECURITY_COMPLIANCE_HISTORY_INTERNAL_CONFIG_ENABLED, true)\n+                .put(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES, \"authenticated,GRANTED_PRIVILEGES\")\n+                .put(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES, \"authenticated,GRANTED_PRIVILEGES\")\n+                .build();\n+        setupWithRestRoles(settings);\n+        TestAuditlogImpl.clear();\n+\n+        {\n+            // any creds, admin certificate - OK\n+            rh.keystore = \"restapi/kirk-keystore.jks\";\n+            rh.sendAdminCertificate = true;\n+            testGetAndPut(HttpStatus.SC_OK, nonAdminCredsHeader);\n+        }\n+\n+        System.out.println(TestAuditlogImpl.sb.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c471b3a2da2c7c0833bcb2c1003274e09fe4810"}, "originalPosition": 200}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a4f9eea29952a1f380bd93979f9d57ae9e19981", "author": {"user": null}, "url": "https://github.com/opensearch-project/security/commit/3a4f9eea29952a1f380bd93979f9d57ae9e19981", "committedDate": "2020-07-02T10:33:01Z", "message": "Make minor changes\n\nThis commit makes minor style changes like fixing typos, removing unnecessary imports, adding newline at end of all yml files.\nAlso, default value checking is shifted from OpenDistroSecurityRestFilter to WhitelistSettingsModelImpl."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e0fd095dede8c4c9ce2d57bf544c954f02b8b12", "author": {"user": null}, "url": "https://github.com/opensearch-project/security/commit/0e0fd095dede8c4c9ce2d57bf544c954f02b8b12", "committedDate": "2020-07-02T10:40:38Z", "message": "Merge branch 'master' into merge-conflict-fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f6c819cba067e78096d0a3cc8b90d4fb22b5661", "author": {"user": null}, "url": "https://github.com/opensearch-project/security/commit/0f6c819cba067e78096d0a3cc8b90d4fb22b5661", "committedDate": "2020-07-03T14:35:53Z", "message": "Add Http request method whitelisting and extra '/' support, make minor changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24a4575c146bdb64750744fc98d4cc810bac8af2", "author": {"user": null}, "url": "https://github.com/opensearch-project/security/commit/24a4575c146bdb64750744fc98d4cc810bac8af2", "committedDate": "2020-07-03T15:33:40Z", "message": "Fix minor bugs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyODE0MzI0", "url": "https://github.com/opensearch-project/security/pull/520#pullrequestreview-442814324", "createdAt": "2020-07-06T06:53:37Z", "commit": {"oid": "24a4575c146bdb64750744fc98d4cc810bac8af2"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNjo1MzozN1rOGtK4VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNzoxMDowOFrOGtLTjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAxNzM2NQ==", "bodyText": "Consider dropping whitelisting_ prefix from whitelisting_enabled and whitelisted_ prefix from whitelisted_APIs as they are already part of whitelisting_settings and makes it a bit cleaner.\nPlease check if this is desirable before making the change", "url": "https://github.com/opensearch-project/security/pull/520#discussion_r450017365", "createdAt": "2020-07-06T06:53:37Z", "author": {"login": "sujithvm"}, "path": "securityconfig/whitelist.yml", "diffHunk": "@@ -0,0 +1,72 @@\n+---\n+_meta:\n+  type: \"whitelist\"\n+  config_version: 2\n+\n+# Description:\n+# whitelisting_enabled - feature flag.\n+# if whitelisting_enabled is false, the whitelisting feature is removed.\n+# This is like removing the check that checks if an API is whitelisted.\n+# This is equivalent to continuing with the usual access control checks, and removing all the code that implements whitelisting.\n+# if whitelisting_enabled is true, then all users except SuperAdmin can access only the APIs in whitelistedAPIs\n+# SuperAdmin can access all APIs.\n+# SuperAdmin is defined by the SuperAdmin certificate, which is configured in the elasticsearch.yml setting: opendistro_security.authcz.admin_dn:\n+# Refer to the example setting in elasticsearch.yml.example, and the opendistro documentation to know more about configuring SuperAdmin.\n+#\n+# whitelisted_APIs - map of whitelisted endpoints, and the whitelisted HTTP requests for those endpoints\n+\n+# Examples showing how to configure this yml file (make sure the _meta data from above is also there):\n+# Example 1:\n+# To enable whitelisting and whitelist GET /_cluster/settings\n+#\n+#whitelisting_settings:\n+#  whitelisting_enabled: true\n+#  whitelisted_APIs:\n+#    /_cluster/settings:\n+#      - GET\n+#\n+# Example 2:\n+# If you want to whitelist multiple request methods for /_cluster/settings (GET,PUT):\n+#\n+#whitelisting_settings:\n+#  whitelisting_enabled: true\n+#  whitelisted_APIs:\n+#    /_cluster/settings:\n+#      - GET\n+#      - PUT\n+#\n+# Example 3:\n+# If you want to whitelist other APIs as well, for example GET /_cat/nodes, and GET /_cat/shards:\n+#\n+#whitelisting_settings:\n+#  whitelisting_enabled: true\n+#  whitelisted_APIs:\n+#    /_cluster/settings:\n+#      - GET\n+#      - PUT\n+#    /_cat/nodes:\n+#      - GET\n+#    /_cat/shards:\n+#      - GET\n+#\n+# Example 4:\n+# If you want to disable the whitelisting feature, set whitelisting_enabled to false.\n+#  whitelisting_enabled: false\n+#  whitelisted_APIs:\n+#    /_cluster/settings:\n+#      - GET\n+#\n+#At this point, all APIs become whitelisted because the feature to whitelist is off, so whitelisted_APIs is irrelevant.\n+\n+\n+#this name must be whitelisting_settings\n+whitelisting_settings:\n+  whitelisting_enabled: false\n+  whitelisted_APIs:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24a4575c146bdb64750744fc98d4cc810bac8af2"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAxODk5NA==", "bodyText": "Just this line can be moved above DynamicConfigFactory ? Just reducing diffs which will help in resolving conflicts during backports/patches", "url": "https://github.com/opensearch-project/security/pull/520#discussion_r450018994", "createdAt": "2020-07-06T06:57:28Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -773,6 +760,19 @@ public AsyncSender interceptSender(AsyncSender sender) {\n             principalExtractor = ReflectionHelper.instantiatePrincipalExtractor(principalExtractorClass);\n         }\n \n+        securityRestHandler = new OpenDistroSecurityRestFilter(backendRegistry, auditLog, threadPool,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24a4575c146bdb64750744fc98d4cc810bac8af2"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAxOTc5OA==", "bodyText": "If exactly the same empty version is returned similar to NODESDN, we can update the condition by making it cType == CType.NODESDN || cType == CType.WHITELIST ?", "url": "https://github.com/opensearch-project/security/pull/520#discussion_r450019798", "createdAt": "2020-07-06T06:59:19Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/ConfigurationLoaderSecurity7.java", "diffHunk": "@@ -131,7 +131,20 @@ public void noData(String id, String type) {\n \n                 // Since NODESDN is newly introduced data-type applying for existing clusters as well, we make it backward compatible by returning valid empty\n                 // SecurityDynamicConfiguration.\n-                if(cType == CType.NODESDN) {\n+                if (cType == CType.NODESDN) {\n+                    try {\n+                        SecurityDynamicConfiguration<?> empty = ConfigHelper.createEmptySdc(cType, ConfigurationRepository.getDefaultConfigVersion());\n+                        rs.put(cType, empty);\n+                        latch.countDown();\n+                        return;\n+                    } catch (Exception e) {\n+                        throw new RuntimeException(e);\n+                    }\n+                }\n+\n+                // Since WHITELISTING_SETTINGS is newly introduced data-type applying for existing clusters as well, we make it backward compatible by returning valid empty\n+                // SecurityDynamicConfiguration.\n+                if (cType == CType.WHITELIST) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24a4575c146bdb64750744fc98d4cc810bac8af2"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyMzM1OA==", "bodyText": "We cannot reuse elasticsearch org.elasticsearch.rest.RestRequest.Method enum ?", "url": "https://github.com/opensearch-project/security/pull/520#discussion_r450023358", "createdAt": "2020-07-06T07:07:48Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/impl/HttpRequestMethods.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package com.amazon.opendistroforelasticsearch.security.securityconf.impl;\n+\n+public enum HttpRequestMethods {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24a4575c146bdb64750744fc98d4cc810bac8af2"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyNDMzNA==", "bodyText": "nit: add newline", "url": "https://github.com/opensearch-project/security/pull/520#discussion_r450024334", "createdAt": "2020-07-06T07:10:08Z", "author": {"login": "sujithvm"}, "path": "src/test/resources/restapi/whitelist_response_success.json", "diffHunk": "@@ -0,0 +1 @@\n+{\"whitelisting_settings\":{\"whitelisting_enabled\":false,\"whitelisted_APIs\":{\"/_cat/nodes\":[\"GET\"],\"/_cat/plugins\": [\"GET\"],\"/_cluster/health\":[\"GET\"],\"/_cluster/settings\":[\"GET\"]}}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24a4575c146bdb64750744fc98d4cc810bac8af2"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyODI2NDcw", "url": "https://github.com/opensearch-project/security/pull/520#pullrequestreview-442826470", "createdAt": "2020-07-06T07:16:12Z", "commit": {"oid": "24a4575c146bdb64750744fc98d4cc810bac8af2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNzoxNjoxM1rOGtLd7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNzoxNjoxM1rOGtLd7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyNjk4OA==", "bodyText": "PATCH request needed ?", "url": "https://github.com/opensearch-project/security/pull/520#discussion_r450026988", "createdAt": "2020-07-06T07:16:13Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/WhitelistApiAction.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package com.amazon.opendistroforelasticsearch.security.dlic.rest.api;\n+\n+import com.amazon.opendistroforelasticsearch.security.DefaultObjectMapper;\n+import com.amazon.opendistroforelasticsearch.security.auditlog.AuditLog;\n+import com.amazon.opendistroforelasticsearch.security.configuration.AdminDNs;\n+import com.amazon.opendistroforelasticsearch.security.configuration.ConfigurationRepository;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.AbstractConfigurationValidator;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.WhitelistValidator;\n+import com.amazon.opendistroforelasticsearch.security.privileges.PrivilegesEvaluator;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.CType;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.SecurityDynamicConfiguration;\n+import com.amazon.opendistroforelasticsearch.security.ssl.transport.PrincipalExtractor;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.common.collect.ImmutableList;\n+import org.elasticsearch.action.index.IndexResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.rest.RestChannel;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.threadpool.ThreadPool;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+\n+/**\n+ * This class implements GET and PUT operations to manage dynamic WhitelistingSettings.\n+ * <p>\n+ * These APIs are only accessible to SuperAdmin since the configuration controls what APIs are accessible by normal users.\n+ * Eg: If whitelisting is enabled, and a specific API like \"/_cat/nodes\" is not whitelisted, then only the SuperAdmin can use \"/_cat/nodes\"\n+ * These APIs allow the SuperAdmin to enable/disable whitelisting, and also change the list of whitelisted APIs.\n+ * <p>\n+ * A SuperAdmin is identified by a certificate which represents a distinguished name(DN).\n+ * SuperAdmin DN's can be set in {@link ConfigConstants#OPENDISTRO_SECURITY_AUTHCZ_ADMIN_DN}\n+ * SuperAdmin certificate for the default superuser is stored as a kirk.pem file in config folder of elasticsearch\n+ * <p>\n+ * Example calling the PUT API as SuperAdmin using curl (if http basic auth is on):\n+ * curl -v --cacert path_to_config/root-ca.pem --cert path_to_config/kirk.pem --key path_to_config/kirk-key.pem -XPUT https://localhost:9200/_opendistro/_security/api/whitelist -H \"Content-Type: application/json\" -d\u2019\n+ * {\n+ * \"whitelisting_enabled\" : false,\n+ * \"whitelisted_APIs\" : {\"/_cat/nodes\": [\"GET\"], \"/_opendistro/_security/api/whitelist\": [\"GET\"]}\n+ * }\n+ *\n+ * The backing data is stored in {@link ConfigConstants#OPENDISTRO_SECURITY_CONFIG_INDEX_NAME} which is populated during bootstrap.\n+ * For existing clusters, {@link com.amazon.opendistroforelasticsearch.security.tools.OpenDistroSecurityAdmin} tool can\n+ * be used to populate the index.\n+ * <p>\n+ */\n+public class WhitelistApiAction extends AbstractApiAction {\n+    private static final List<Route> routes = ImmutableList.of(\n+            new Route(RestRequest.Method.GET, \"/_opendistro/_security/api/whitelist\"),\n+            new Route(RestRequest.Method.PUT, \"/_opendistro/_security/api/whitelist\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24a4575c146bdb64750744fc98d4cc810bac8af2"}, "originalPosition": 58}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5310896d0622e0fdb2f4f90700de908a2da2e22e", "author": {"user": null}, "url": "https://github.com/opensearch-project/security/commit/5310896d0622e0fdb2f4f90700de908a2da2e22e", "committedDate": "2020-07-06T10:03:19Z", "message": "Make more minor changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dba66d88bb1c1fb848769420fde655276122c839", "author": {"user": null}, "url": "https://github.com/opensearch-project/security/commit/dba66d88bb1c1fb848769420fde655276122c839", "committedDate": "2020-07-07T08:21:25Z", "message": "minor improvement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed30a513b12f171eac8587f673f9aca83dbb2170", "author": {"user": null}, "url": "https://github.com/opensearch-project/security/commit/ed30a513b12f171eac8587f673f9aca83dbb2170", "committedDate": "2020-07-08T05:54:11Z", "message": "Add PATCH Api and tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5ae3d06ae29cf5f19781a329b64540cf08b11a5", "author": {"user": null}, "url": "https://github.com/opensearch-project/security/commit/f5ae3d06ae29cf5f19781a329b64540cf08b11a5", "committedDate": "2020-07-08T06:17:05Z", "message": "Change schema of whitelist.yml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3878cd18a55998e077b8a5d1f9877d59029bea83", "author": {"user": null}, "url": "https://github.com/opensearch-project/security/commit/3878cd18a55998e077b8a5d1f9877d59029bea83", "committedDate": "2020-07-08T08:37:38Z", "message": "Merge changes from master"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1OTYzMjMw", "url": "https://github.com/opensearch-project/security/pull/520#pullrequestreview-445963230", "createdAt": "2020-07-09T20:56:42Z", "commit": {"oid": "3878cd18a55998e077b8a5d1f9877d59029bea83"}, "state": "COMMENTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMDo1Njo0MlrOGvhhGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMjowMjoyMFrOGvjU9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4NTQwMA==", "bodyText": "nit: trailing lines.", "url": "https://github.com/opensearch-project/security/pull/520#discussion_r452485400", "createdAt": "2020-07-09T20:56:42Z", "author": {"login": "sujithvm"}, "path": "securityconfig/whitelist.yml", "diffHunk": "@@ -0,0 +1,72 @@\n+---\n+_meta:\n+  type: \"whitelist\"\n+  config_version: 2\n+\n+# Description:\n+# enabled - feature flag.\n+# if enabled is false, the whitelisting feature is removed.\n+# This is like removing the check that checks if an API is whitelisted.\n+# This is equivalent to continuing with the usual access control checks, and removing all the code that implements whitelisting.\n+# if enabled is true, then all users except SuperAdmin can access only the APIs in whitelistedAPIs\n+# SuperAdmin can access all APIs.\n+# SuperAdmin is defined by the SuperAdmin certificate, which is configured in the elasticsearch.yml setting: opendistro_security.authcz.admin_dn:\n+# Refer to the example setting in elasticsearch.yml.example, and the opendistro documentation to know more about configuring SuperAdmin.\n+#\n+# requests - map of whitelisted endpoints, and the whitelisted HTTP requests for those endpoints\n+\n+# Examples showing how to configure this yml file (make sure the _meta data from above is also there):\n+# Example 1:\n+# To enable whitelisting and whitelist GET /_cluster/settings\n+#\n+#config:\n+#  enabled: true\n+#  requests:\n+#    /_cluster/settings:\n+#      - GET\n+#\n+# Example 2:\n+# If you want to whitelist multiple request methods for /_cluster/settings (GET,PUT):\n+#\n+#config:\n+#  enabled: true\n+#  requests:\n+#    /_cluster/settings:\n+#      - GET\n+#      - PUT\n+#\n+# Example 3:\n+# If you want to whitelist other APIs as well, for example GET /_cat/nodes, and GET /_cat/shards:\n+#\n+#config:\n+#  enabled: true\n+#  requests:\n+#    /_cluster/settings:\n+#      - GET\n+#      - PUT\n+#    /_cat/nodes:\n+#      - GET\n+#    /_cat/shards:\n+#      - GET\n+#\n+# Example 4:\n+# If you want to disable the whitelisting feature, set enabled to false.\n+#  enabled: false\n+#  requests:\n+#    /_cluster/settings:\n+#      - GET\n+#\n+#At this point, all APIs become whitelisted because the feature to whitelist is off, so requests is irrelevant.\n+\n+\n+#this name must be config\n+config:\n+  enabled: false\n+  requests:\n+    /_cluster/settings:\n+      - GET\n+    /_cat/nodes:\n+      - GET\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3878cd18a55998e077b8a5d1f9877d59029bea83"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4NzY1Ng==", "bodyText": "If this is going to be backported to 6.x, please include this whitelist.yml in legacy/securityconfig_v6 as well. Remove the _meta part. Check other config yml files.", "url": "https://github.com/opensearch-project/security/pull/520#discussion_r452487656", "createdAt": "2020-07-09T21:01:15Z", "author": {"login": "sujithvm"}, "path": "securityconfig/whitelist.yml", "diffHunk": "@@ -0,0 +1,72 @@\n+---", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3878cd18a55998e077b8a5d1f9877d59029bea83"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ5MDUxOQ==", "bodyText": "Can reuse the parent class handleGet ? No need to override and re-implement\nnit: last return not needed.", "url": "https://github.com/opensearch-project/security/pull/520#discussion_r452490519", "createdAt": "2020-07-09T21:06:59Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/WhitelistApiAction.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package com.amazon.opendistroforelasticsearch.security.dlic.rest.api;\n+\n+import com.amazon.opendistroforelasticsearch.security.DefaultObjectMapper;\n+import com.amazon.opendistroforelasticsearch.security.auditlog.AuditLog;\n+import com.amazon.opendistroforelasticsearch.security.configuration.AdminDNs;\n+import com.amazon.opendistroforelasticsearch.security.configuration.ConfigurationRepository;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.AbstractConfigurationValidator;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.WhitelistValidator;\n+import com.amazon.opendistroforelasticsearch.security.privileges.PrivilegesEvaluator;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.CType;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.SecurityDynamicConfiguration;\n+import com.amazon.opendistroforelasticsearch.security.ssl.transport.PrincipalExtractor;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.common.collect.ImmutableList;\n+import org.elasticsearch.action.index.IndexResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.rest.RestChannel;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.threadpool.ThreadPool;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+\n+/**\n+ * This class implements GET and PUT operations to manage dynamic WhitelistingSettings.\n+ * <p>\n+ * These APIs are only accessible to SuperAdmin since the configuration controls what APIs are accessible by normal users.\n+ * Eg: If whitelisting is enabled, and a specific API like \"/_cat/nodes\" is not whitelisted, then only the SuperAdmin can use \"/_cat/nodes\"\n+ * These APIs allow the SuperAdmin to enable/disable whitelisting, and also change the list of whitelisted APIs.\n+ * <p>\n+ * A SuperAdmin is identified by a certificate which represents a distinguished name(DN).\n+ * SuperAdmin DN's can be set in {@link ConfigConstants#OPENDISTRO_SECURITY_AUTHCZ_ADMIN_DN}\n+ * SuperAdmin certificate for the default superuser is stored as a kirk.pem file in config folder of elasticsearch\n+ * <p>\n+ * Example calling the PUT API as SuperAdmin using curl (if http basic auth is on):\n+ * curl -v --cacert path_to_config/root-ca.pem --cert path_to_config/kirk.pem --key path_to_config/kirk-key.pem -XPUT https://localhost:9200/_opendistro/_security/api/whitelist -H \"Content-Type: application/json\" -d\u2019\n+ * {\n+ *      \"enabled\" : false,\n+ *      \"requests\" : {\"/_cat/nodes\": [\"GET\"], \"/_opendistro/_security/api/whitelist\": [\"GET\"]}\n+ * }\n+ *\n+ * Example using the PATCH API to change the requests as SuperAdmin:\n+ * curl -v --cacert path_to_config/root-ca.pem --cert path_to_config/kirk.pem --key path_to_config/kirk-key.pem -XPATCH https://localhost:9200/_opendistro/_security/api/whitelist -H \"Content-Type: application/json\" -d\u2019\n+ * {\n+ *      \"op\":\"replace\",\n+ *      \"path\":\"/config/requests\",\n+ *      \"value\": {\"/_cat/nodes\": [\"GET\"], \"/_opendistro/_security/api/whitelist\": [\"GET\"]}\n+ * }\n+ *\n+ * To update enabled, use the \"add\" operation instead of the \"replace\" operation, since boolean variables are not recognized as valid paths when they are false.\n+ * eg:\n+ * curl -v --cacert path_to_config/root-ca.pem --cert path_to_config/kirk.pem --key path_to_config/kirk-key.pem -XPATCH https://localhost:9200/_opendistro/_security/api/whitelist -H \"Content-Type: application/json\" -d\u2019\n+ * {\n+ *      \"op\":\"add\",\n+ *      \"path\":\"/config/enabled\",\n+ *      \"value\": true\n+ * }\n+ *\n+ * The backing data is stored in {@link ConfigConstants#OPENDISTRO_SECURITY_CONFIG_INDEX_NAME} which is populated during bootstrap.\n+ * For existing clusters, {@link com.amazon.opendistroforelasticsearch.security.tools.OpenDistroSecurityAdmin} tool can\n+ * be used to populate the index.\n+ * <p>\n+ */\n+public class WhitelistApiAction extends PatchableResourceApiAction {\n+    private static final List<Route> routes = ImmutableList.of(\n+            new Route(RestRequest.Method.GET, \"/_opendistro/_security/api/whitelist\"),\n+            new Route(RestRequest.Method.PUT, \"/_opendistro/_security/api/whitelist\"),\n+            new Route(RestRequest.Method.PATCH, \"/_opendistro/_security/api/whitelist\")\n+    );\n+\n+    private static final String name = \"config\";\n+\n+    @Inject\n+    public WhitelistApiAction(final Settings settings, final Path configPath, final RestController controller, final Client client,\n+                              final AdminDNs adminDNs, final ConfigurationRepository cl, final ClusterService cs,\n+                              final PrincipalExtractor principalExtractor, final PrivilegesEvaluator evaluator, ThreadPool threadPool, AuditLog auditLog) {\n+        super(settings, configPath, controller, client, adminDNs, cl, cs, principalExtractor, evaluator, threadPool, auditLog);\n+    }\n+\n+    @Override\n+    protected void handleApiRequest(final RestChannel channel, final RestRequest request, final Client client) throws IOException {\n+        if (!isSuperAdmin()) {\n+            forbidden(channel, \"API allowed only for super admin.\");\n+            return;\n+        }\n+        super.handleApiRequest(channel, request, client);\n+    }\n+\n+    @Override\n+    protected void handleGet(final RestChannel channel, RestRequest request, Client client, final JsonNode content)\n+            throws IOException {\n+\n+\n+        final SecurityDynamicConfiguration<?> configuration = load(getConfigName(), true);\n+        filter(configuration);\n+        successResponse(channel, configuration);\n+        return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3878cd18a55998e077b8a5d1f9877d59029bea83"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ5Mjg0OQ==", "bodyText": "Why is this under the same file check as nodesdn ?", "url": "https://github.com/opensearch-project/security/pull/520#discussion_r452492849", "createdAt": "2020-07-09T21:12:10Z", "author": {"login": "sujithvm"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/test/DynamicSecurityConfig.java", "diffHunk": "@@ -157,10 +159,15 @@ public String getType() {\n \n         if (null != FileHelper.getAbsoluteFilePathFromClassPath(prefix + securityNodesDn)) {\n             ret.add(new IndexRequest(securityIndexName)\n-                .type(type)\n-                .id(CType.NODESDN.toLCString())\n-                .setRefreshPolicy(RefreshPolicy.IMMEDIATE)\n-                .source(CType.NODESDN.toLCString(), FileHelper.readYamlContent(prefix+securityNodesDn)));\n+                    .type(type)\n+                    .id(CType.NODESDN.toLCString())\n+                    .setRefreshPolicy(RefreshPolicy.IMMEDIATE)\n+                    .source(CType.NODESDN.toLCString(), FileHelper.readYamlContent(prefix + securityNodesDn)));\n+            ret.add(new IndexRequest(securityIndexName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3878cd18a55998e077b8a5d1f9877d59029bea83"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ5NDUzNg==", "bodyText": "Remove setting the keystore everytime if it is the same?\nnit: pass sendAdminCertificate as param so that it can be reset everytime to prev value?\nref: https://github.com/opendistro-for-elasticsearch/security/blob/master/src/test/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/AuditApiActionTest.java#L81", "url": "https://github.com/opensearch-project/security/pull/520#discussion_r452494536", "createdAt": "2020-07-09T21:15:29Z", "author": {"login": "sujithvm"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/WhitelistApiTest.java", "diffHunk": "@@ -0,0 +1,264 @@\n+package com.amazon.opendistroforelasticsearch.security.dlic.rest.api;\n+\n+\n+import com.amazon.opendistroforelasticsearch.security.DefaultObjectMapper;\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditMessage;\n+import com.amazon.opendistroforelasticsearch.security.auditlog.integration.TestAuditlogImpl;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.AbstractConfigurationValidator;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.amazon.opendistroforelasticsearch.security.test.helper.file.FileHelper;\n+import com.amazon.opendistroforelasticsearch.security.test.helper.rest.RestHelper;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.common.collect.ImmutableMap;\n+import org.apache.http.Header;\n+import org.apache.http.HttpStatus;\n+import org.elasticsearch.common.settings.Settings;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Testing class to verify that {@link WhitelistApiAction} works correctly.\n+ * Check {@link com.amazon.opendistroforelasticsearch.security.filter.OpenDistroSecurityRestFilter} for extra tests for whitelisting functionality.\n+ */\n+public class WhitelistApiTest extends AbstractRestApiUnitTest {\n+    private RestHelper.HttpResponse response;\n+\n+    /**\n+     * admin_all_access is a user who has all permissions - essentially an admin user, not the same as superadmin.\n+     * superadmin is identified by a certificate that should be passed as a part of the request header.\n+     */\n+    private final Header adminCredsHeader = encodeBasicHeader(\"admin_all_access\", \"admin_all_access\");\n+    private final Header nonAdminCredsHeader = encodeBasicHeader(\"sarek\", \"sarek\");\n+\n+    /**\n+     * Helper function to test the GET and PUT endpoints.\n+     *\n+     * @throws Exception\n+     */\n+    private void testGetAndPut(final int expectedStatus, final Header... headers) throws Exception {\n+\n+        //CHECK GET REQUEST\n+        response = rh.executeGetRequest(\"_opendistro/_security/api/whitelist\", headers);\n+        assertThat(response.getBody(), response.getStatusCode(), equalTo(expectedStatus));\n+        if (expectedStatus == HttpStatus.SC_OK) {\n+            //Note: the response has no whitespaces, so the .json file does not have whitespaces\n+            Assert.assertEquals(FileHelper.loadFile(\"restapi/whitelist_response_success.json\"), FileHelper.loadFile(\"restapi/whitelist_response_success.json\"));\n+        }\n+        //FORBIDDEN FOR NON SUPER ADMIN\n+        if (expectedStatus == HttpStatus.SC_FORBIDDEN) {\n+            assertTrue(response.getBody().contains(\"API allowed only for super admin.\"));\n+        }\n+        //CHECK PUT REQUEST\n+        response = rh.executePutRequest(\"_opendistro/_security/api/whitelist\", \"{\\\"enabled\\\": true, \\\"requests\\\": {\\\"/_cat/nodes\\\": [\\\"GET\\\"],\\\"/_cat/indices\\\": [\\\"GET\\\"] }}\", headers);\n+        assertThat(response.getBody(), response.getStatusCode(), equalTo(expectedStatus));\n+    }\n+\n+    /**\n+     * Tests that the response does not have a _meta header\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testResponseDoesNotContainMetaHeader() throws Exception {\n+\n+        setup();\n+\n+        rh.keystore = \"restapi/kirk-keystore.jks\";\n+        rh.sendAdminCertificate = true;\n+        RestHelper.HttpResponse response = rh.executeGetRequest(\"_opendistro/_security/api/whitelist\");\n+        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n+        Assert.assertFalse(response.getBody().contains(\"_meta\"));\n+    }\n+\n+    /**\n+     * Tests that putting an unknown key fails\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testPutUnknownKey() throws Exception {\n+\n+        setup();\n+\n+        rh.keystore = \"restapi/kirk-keystore.jks\";\n+        rh.sendAdminCertificate = true;\n+        RestHelper.HttpResponse response = rh.executePutRequest(\"_opendistro/_security/api/whitelist\", \"{ \\\"unknownkey\\\": true, \\\"requests\\\": {\\\"/_cat/nodes\\\": [\\\"GET\\\"],\\\"/_cat/indices\\\": [\\\"GET\\\"] }}\");\n+        Assert.assertEquals(HttpStatus.SC_BAD_REQUEST, response.getStatusCode());\n+        assertTrue(response.getBody().contains(\"invalid_keys\"));\n+        assertHealthy();\n+    }\n+\n+    /**\n+     * Tests that invalid json body fails\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testPutInvalidJson() throws Exception {\n+        setup();\n+\n+        rh.keystore = \"restapi/kirk-keystore.jks\";\n+        rh.sendAdminCertificate = true;\n+        RestHelper.HttpResponse response = rh.executePutRequest(\"_opendistro/_security/api/whitelist\", \"{ \\\"invalid\\\"::{{ [\\\"*\\\"], \\\"requests\\\": {\\\"/_cat/nodes\\\": [\\\"GET\\\"],\\\"/_cat/indices\\\": [\\\"GET\\\"] }}\");\n+        Assert.assertEquals(HttpStatus.SC_BAD_REQUEST, response.getStatusCode());\n+        assertTrue(response.getBody().contains(\"JsonParseException\"));\n+        assertHealthy();\n+    }\n+\n+    /**\n+     * Tests that the PUT API requires a payload. i.e non empty payloads give an error.\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testPayloadMandatory() throws Exception {\n+        setup();\n+\n+        rh.keystore = \"restapi/kirk-keystore.jks\";\n+        rh.sendAdminCertificate = true;\n+        response = rh.executePutRequest(\"/_opendistro/_security/api/whitelist\", \"\", new Header[0]);\n+        Assert.assertEquals(HttpStatus.SC_BAD_REQUEST, response.getStatusCode());\n+        JsonNode settings = DefaultObjectMapper.readTree(response.getBody());\n+        Assert.assertEquals(AbstractConfigurationValidator.ErrorType.PAYLOAD_MANDATORY.getMessage(), settings.get(\"reason\").asText());\n+    }\n+\n+    /**\n+     * Tests 4 scenarios for accessing and using the API.\n+     * No creds, no admin certificate - UNAUTHORIZED\n+     * non admin creds, no admin certificate - FORBIDDEN\n+     * admin creds, no admin certificate - FORBIDDEN\n+     * any creds, admin certificate - OK\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testWhitelistApi() throws Exception {\n+        setupWithRestRoles(null);\n+\n+        {\n+            // No creds, no admin certificate - UNAUTHORIZED\n+            rh.keystore = \"restapi/kirk-keystore.jks\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3878cd18a55998e077b8a5d1f9877d59029bea83"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ5NTkxMw==", "bodyText": "You can remove all the @JsonProperty in this class, as same variable name & matching getter/setters are used so Jackson will bind them correctly.", "url": "https://github.com/opensearch-project/security/pull/520#discussion_r452495913", "createdAt": "2020-07-09T21:18:26Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/impl/WhitelistingSettings.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package com.amazon.opendistroforelasticsearch.security.securityconf.impl;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class WhitelistingSettings {\n+    @JsonProperty(value = \"enabled\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3878cd18a55998e077b8a5d1f9877d59029bea83"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwMDM3Ng==", "bodyText": "Wonder why this is happening though. Jackson should handle with correct type.", "url": "https://github.com/opensearch-project/security/pull/520#discussion_r452500376", "createdAt": "2020-07-09T21:28:01Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/impl/HttpRequestMethods.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package com.amazon.opendistroforelasticsearch.security.securityconf.impl;\n+\n+public enum HttpRequestMethods {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyMzM1OA=="}, "originalCommit": {"oid": "24a4575c146bdb64750744fc98d4cc810bac8af2"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwMDU0Mw==", "bodyText": "Do we need this model & implementation class instead of just WhitelistingSettings ?", "url": "https://github.com/opensearch-project/security/pull/520#discussion_r452500543", "createdAt": "2020-07-09T21:28:24Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/WhitelistingSettingsModel.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package com.amazon.opendistroforelasticsearch.security.securityconf;\n+\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.HttpRequestMethods;\n+import java.util.List;\n+import java.util.Map;\n+\n+public abstract class WhitelistingSettingsModel {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3878cd18a55998e077b8a5d1f9877d59029bea83"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwNzQwNg==", "bodyText": "nit: use camel case? Or just manintain instance of WhitelistSetting", "url": "https://github.com/opensearch-project/security/pull/520#discussion_r452507406", "createdAt": "2020-07-09T21:44:16Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/filter/OpenDistroSecurityRestFilter.java", "diffHunk": "@@ -71,6 +79,10 @@\n     private final Path configPath;\n     private final CompatConfig compatConfig;\n \n+    private boolean whitelisting_enabled;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3878cd18a55998e077b8a5d1f9877d59029bea83"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwOTY1MA==", "bodyText": "nit: would recommend using EnumSet in place of List", "url": "https://github.com/opensearch-project/security/pull/520#discussion_r452509650", "createdAt": "2020-07-09T21:49:22Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/impl/WhitelistingSettings.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package com.amazon.opendistroforelasticsearch.security.securityconf.impl;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class WhitelistingSettings {\n+    @JsonProperty(value = \"enabled\")\n+    private boolean enabled;\n+    @JsonProperty(value = \"requests\")\n+    private Map<String, List<HttpRequestMethods>> requests;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3878cd18a55998e077b8a5d1f9877d59029bea83"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUxMDEyOA==", "bodyText": "nit: Would be nice reuse elasticsearch Request.Method to avoid this conversion", "url": "https://github.com/opensearch-project/security/pull/520#discussion_r452510128", "createdAt": "2020-07-09T21:50:29Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/filter/OpenDistroSecurityRestFilter.java", "diffHunk": "@@ -82,22 +94,106 @@ public OpenDistroSecurityRestFilter(final BackendRegistry registry, final AuditL\n         this.settings = settings;\n         this.configPath = configPath;\n         this.compatConfig = compatConfig;\n+        this.whitelisting_enabled = false;\n+        this.whitelisted_requests = Collections.emptyMap();\n     }\n-    \n-    public RestHandler wrap(RestHandler original) {\n+\n+    /**\n+     * This function wraps around all rest requests\n+     * If the request is authenticated, then it goes through a whitelisting check.\n+     * The whitelisting check works as follows:\n+     * If whitelisting is not enabled, then requests are handled normally.\n+     * If whitelisting is enabled, then SuperAdmin is allowed access to all APIs, regardless of what is currently whitelisted.\n+     * If whitelisting is enabled, then Non-SuperAdmin is allowed to access only those APIs that are whitelisted in {@link #requests}\n+     * For example: if whitelisting is enabled and requests = [\"/_cat/nodes\"], then SuperAdmin can access all APIs, but non SuperAdmin\n+     * can only access \"/_cat/nodes\"\n+     * Further note: Some APIs are only accessible by SuperAdmin, regardless of whitelisting. For example: /_opendistro/_security/api/whitelist is only accessible by SuperAdmin.\n+     * See {@link com.amazon.opendistroforelasticsearch.security.dlic.rest.api.WhitelistApiAction} for the implementation of this API.\n+     * SuperAdmin is identified by credentials, which can be passed in the curl request.\n+     */\n+    public RestHandler wrap(RestHandler original, AdminDNs adminDNs) {\n         return new RestHandler() {\n             \n             @Override\n             public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                 org.apache.logging.log4j.ThreadContext.clearAll();\n-                if(!checkAndAuthenticateRequest(request, channel, client)) {\n-                    original.handleRequest(request, channel, client);\n+                if (!checkAndAuthenticateRequest(request, channel, client)) {\n+                    User user = threadContext.getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n+                    if (userIsSuperAdmin(user, adminDNs) || checkRequestIsAllowed(request, channel, client)) {\n+                        original.handleRequest(request, channel, client);\n+                    }\n                 }\n             }\n         };\n     }\n \n-    private boolean checkAndAuthenticateRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n+    /**\n+     * Checks if a given user is a SuperAdmin\n+     */\n+    private boolean userIsSuperAdmin(User user, AdminDNs adminDNs) {\n+        return user != null && adminDNs.isAdmin(user);\n+    }\n+\n+    /**\n+     * Helper function to check if a rest request is whitelisted, by checking if the path is whitelisted,\n+     * and then if the Http method is whitelisted.\n+     * This method also contains logic to trim the path request, and check both with and without extra '/'\n+     * This allows users to whitelist either /_cluster/settings/ or /_cluster/settings, to avoid potential issues.\n+     * This also ensures that requests to the cluster can have a trailing '/'\n+     * Scenarios:\n+     * 1. Whitelisted API does not have an extra '/'. eg: If GET /_cluster/settings is whitelisted, these requests have the following response:\n+     *      GET /_cluster/settings  - OK\n+     *      GET /_cluster/settings/ - OK\n+     *\n+     * 2. Whitelisted API has an extra '/'. eg: If GET /_cluster/settings/ is whitelisted, these requests have the following response:\n+     *      GET /_cluster/settings  - OK\n+     *      GET /_cluster/settings/ - OK\n+     */\n+    private boolean requestIsWhitelisted(RestRequest request){\n+\n+        //ALSO ALLOWS REQUEST TO HAVE TRAILING '/'\n+        //pathWithoutTrailingSlash stores the endpoint path without extra '/'. eg: /_cat/nodes\n+        //pathWithTrailingSlash stores the endpoint path with extra '/'. eg: /_cat/nodes/\n+        String path = request.path();\n+        String pathWithoutTrailingSlash;\n+        String pathWithTrailingSlash;\n+\n+        //first obtain pathWithoutTrailingSlash, then add a '/' to it to get pathWithTrailingSlash\n+        pathWithoutTrailingSlash = path.endsWith(\"/\") ? path.substring(0, path.length() - 1) : path;\n+        pathWithTrailingSlash = pathWithoutTrailingSlash + '/';\n+\n+        //check if pathWithoutTrailingSlash is whitelisted\n+        if(this.whitelisted_requests.containsKey(pathWithoutTrailingSlash) && this.whitelisted_requests.get(pathWithoutTrailingSlash).contains(HttpRequestMethods.valueOf(request.method().toString())))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3878cd18a55998e077b8a5d1f9877d59029bea83"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUxMTAwOA==", "bodyText": "Would suggest moving this function inside WhitelistSetting and test if request is whitelisted. Even enabled check can be done there.", "url": "https://github.com/opensearch-project/security/pull/520#discussion_r452511008", "createdAt": "2020-07-09T21:52:22Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/filter/OpenDistroSecurityRestFilter.java", "diffHunk": "@@ -82,22 +94,106 @@ public OpenDistroSecurityRestFilter(final BackendRegistry registry, final AuditL\n         this.settings = settings;\n         this.configPath = configPath;\n         this.compatConfig = compatConfig;\n+        this.whitelisting_enabled = false;\n+        this.whitelisted_requests = Collections.emptyMap();\n     }\n-    \n-    public RestHandler wrap(RestHandler original) {\n+\n+    /**\n+     * This function wraps around all rest requests\n+     * If the request is authenticated, then it goes through a whitelisting check.\n+     * The whitelisting check works as follows:\n+     * If whitelisting is not enabled, then requests are handled normally.\n+     * If whitelisting is enabled, then SuperAdmin is allowed access to all APIs, regardless of what is currently whitelisted.\n+     * If whitelisting is enabled, then Non-SuperAdmin is allowed to access only those APIs that are whitelisted in {@link #requests}\n+     * For example: if whitelisting is enabled and requests = [\"/_cat/nodes\"], then SuperAdmin can access all APIs, but non SuperAdmin\n+     * can only access \"/_cat/nodes\"\n+     * Further note: Some APIs are only accessible by SuperAdmin, regardless of whitelisting. For example: /_opendistro/_security/api/whitelist is only accessible by SuperAdmin.\n+     * See {@link com.amazon.opendistroforelasticsearch.security.dlic.rest.api.WhitelistApiAction} for the implementation of this API.\n+     * SuperAdmin is identified by credentials, which can be passed in the curl request.\n+     */\n+    public RestHandler wrap(RestHandler original, AdminDNs adminDNs) {\n         return new RestHandler() {\n             \n             @Override\n             public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                 org.apache.logging.log4j.ThreadContext.clearAll();\n-                if(!checkAndAuthenticateRequest(request, channel, client)) {\n-                    original.handleRequest(request, channel, client);\n+                if (!checkAndAuthenticateRequest(request, channel, client)) {\n+                    User user = threadContext.getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n+                    if (userIsSuperAdmin(user, adminDNs) || checkRequestIsAllowed(request, channel, client)) {\n+                        original.handleRequest(request, channel, client);\n+                    }\n                 }\n             }\n         };\n     }\n \n-    private boolean checkAndAuthenticateRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n+    /**\n+     * Checks if a given user is a SuperAdmin\n+     */\n+    private boolean userIsSuperAdmin(User user, AdminDNs adminDNs) {\n+        return user != null && adminDNs.isAdmin(user);\n+    }\n+\n+    /**\n+     * Helper function to check if a rest request is whitelisted, by checking if the path is whitelisted,\n+     * and then if the Http method is whitelisted.\n+     * This method also contains logic to trim the path request, and check both with and without extra '/'\n+     * This allows users to whitelist either /_cluster/settings/ or /_cluster/settings, to avoid potential issues.\n+     * This also ensures that requests to the cluster can have a trailing '/'\n+     * Scenarios:\n+     * 1. Whitelisted API does not have an extra '/'. eg: If GET /_cluster/settings is whitelisted, these requests have the following response:\n+     *      GET /_cluster/settings  - OK\n+     *      GET /_cluster/settings/ - OK\n+     *\n+     * 2. Whitelisted API has an extra '/'. eg: If GET /_cluster/settings/ is whitelisted, these requests have the following response:\n+     *      GET /_cluster/settings  - OK\n+     *      GET /_cluster/settings/ - OK\n+     */\n+    private boolean requestIsWhitelisted(RestRequest request){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3878cd18a55998e077b8a5d1f9877d59029bea83"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUxNDI4MA==", "bodyText": "Does this imply customers can set different http whitelisting methods for paths with & without trailing '/' ? Not sure if this is the desired behavior", "url": "https://github.com/opensearch-project/security/pull/520#discussion_r452514280", "createdAt": "2020-07-09T22:00:17Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/filter/OpenDistroSecurityRestFilter.java", "diffHunk": "@@ -82,22 +94,106 @@ public OpenDistroSecurityRestFilter(final BackendRegistry registry, final AuditL\n         this.settings = settings;\n         this.configPath = configPath;\n         this.compatConfig = compatConfig;\n+        this.whitelisting_enabled = false;\n+        this.whitelisted_requests = Collections.emptyMap();\n     }\n-    \n-    public RestHandler wrap(RestHandler original) {\n+\n+    /**\n+     * This function wraps around all rest requests\n+     * If the request is authenticated, then it goes through a whitelisting check.\n+     * The whitelisting check works as follows:\n+     * If whitelisting is not enabled, then requests are handled normally.\n+     * If whitelisting is enabled, then SuperAdmin is allowed access to all APIs, regardless of what is currently whitelisted.\n+     * If whitelisting is enabled, then Non-SuperAdmin is allowed to access only those APIs that are whitelisted in {@link #requests}\n+     * For example: if whitelisting is enabled and requests = [\"/_cat/nodes\"], then SuperAdmin can access all APIs, but non SuperAdmin\n+     * can only access \"/_cat/nodes\"\n+     * Further note: Some APIs are only accessible by SuperAdmin, regardless of whitelisting. For example: /_opendistro/_security/api/whitelist is only accessible by SuperAdmin.\n+     * See {@link com.amazon.opendistroforelasticsearch.security.dlic.rest.api.WhitelistApiAction} for the implementation of this API.\n+     * SuperAdmin is identified by credentials, which can be passed in the curl request.\n+     */\n+    public RestHandler wrap(RestHandler original, AdminDNs adminDNs) {\n         return new RestHandler() {\n             \n             @Override\n             public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                 org.apache.logging.log4j.ThreadContext.clearAll();\n-                if(!checkAndAuthenticateRequest(request, channel, client)) {\n-                    original.handleRequest(request, channel, client);\n+                if (!checkAndAuthenticateRequest(request, channel, client)) {\n+                    User user = threadContext.getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n+                    if (userIsSuperAdmin(user, adminDNs) || checkRequestIsAllowed(request, channel, client)) {\n+                        original.handleRequest(request, channel, client);\n+                    }\n                 }\n             }\n         };\n     }\n \n-    private boolean checkAndAuthenticateRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n+    /**\n+     * Checks if a given user is a SuperAdmin\n+     */\n+    private boolean userIsSuperAdmin(User user, AdminDNs adminDNs) {\n+        return user != null && adminDNs.isAdmin(user);\n+    }\n+\n+    /**\n+     * Helper function to check if a rest request is whitelisted, by checking if the path is whitelisted,\n+     * and then if the Http method is whitelisted.\n+     * This method also contains logic to trim the path request, and check both with and without extra '/'\n+     * This allows users to whitelist either /_cluster/settings/ or /_cluster/settings, to avoid potential issues.\n+     * This also ensures that requests to the cluster can have a trailing '/'\n+     * Scenarios:\n+     * 1. Whitelisted API does not have an extra '/'. eg: If GET /_cluster/settings is whitelisted, these requests have the following response:\n+     *      GET /_cluster/settings  - OK\n+     *      GET /_cluster/settings/ - OK\n+     *\n+     * 2. Whitelisted API has an extra '/'. eg: If GET /_cluster/settings/ is whitelisted, these requests have the following response:\n+     *      GET /_cluster/settings  - OK\n+     *      GET /_cluster/settings/ - OK\n+     */\n+    private boolean requestIsWhitelisted(RestRequest request){\n+\n+        //ALSO ALLOWS REQUEST TO HAVE TRAILING '/'\n+        //pathWithoutTrailingSlash stores the endpoint path without extra '/'. eg: /_cat/nodes\n+        //pathWithTrailingSlash stores the endpoint path with extra '/'. eg: /_cat/nodes/\n+        String path = request.path();\n+        String pathWithoutTrailingSlash;\n+        String pathWithTrailingSlash;\n+\n+        //first obtain pathWithoutTrailingSlash, then add a '/' to it to get pathWithTrailingSlash\n+        pathWithoutTrailingSlash = path.endsWith(\"/\") ? path.substring(0, path.length() - 1) : path;\n+        pathWithTrailingSlash = pathWithoutTrailingSlash + '/';\n+\n+        //check if pathWithoutTrailingSlash is whitelisted\n+        if(this.whitelisted_requests.containsKey(pathWithoutTrailingSlash) && this.whitelisted_requests.get(pathWithoutTrailingSlash).contains(HttpRequestMethods.valueOf(request.method().toString())))\n+            return true;\n+\n+        //check if pathWithTrailingSlash is whitelisted\n+        if(this.whitelisted_requests.containsKey(pathWithTrailingSlash) && this.whitelisted_requests.get(pathWithTrailingSlash).contains(HttpRequestMethods.valueOf(request.method().toString())))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3878cd18a55998e077b8a5d1f9877d59029bea83"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUxNTA2MQ==", "bodyText": "What is the preference order?", "url": "https://github.com/opensearch-project/security/pull/520#discussion_r452515061", "createdAt": "2020-07-09T22:02:20Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/filter/OpenDistroSecurityRestFilter.java", "diffHunk": "@@ -82,22 +94,106 @@ public OpenDistroSecurityRestFilter(final BackendRegistry registry, final AuditL\n         this.settings = settings;\n         this.configPath = configPath;\n         this.compatConfig = compatConfig;\n+        this.whitelisting_enabled = false;\n+        this.whitelisted_requests = Collections.emptyMap();\n     }\n-    \n-    public RestHandler wrap(RestHandler original) {\n+\n+    /**\n+     * This function wraps around all rest requests\n+     * If the request is authenticated, then it goes through a whitelisting check.\n+     * The whitelisting check works as follows:\n+     * If whitelisting is not enabled, then requests are handled normally.\n+     * If whitelisting is enabled, then SuperAdmin is allowed access to all APIs, regardless of what is currently whitelisted.\n+     * If whitelisting is enabled, then Non-SuperAdmin is allowed to access only those APIs that are whitelisted in {@link #requests}\n+     * For example: if whitelisting is enabled and requests = [\"/_cat/nodes\"], then SuperAdmin can access all APIs, but non SuperAdmin\n+     * can only access \"/_cat/nodes\"\n+     * Further note: Some APIs are only accessible by SuperAdmin, regardless of whitelisting. For example: /_opendistro/_security/api/whitelist is only accessible by SuperAdmin.\n+     * See {@link com.amazon.opendistroforelasticsearch.security.dlic.rest.api.WhitelistApiAction} for the implementation of this API.\n+     * SuperAdmin is identified by credentials, which can be passed in the curl request.\n+     */\n+    public RestHandler wrap(RestHandler original, AdminDNs adminDNs) {\n         return new RestHandler() {\n             \n             @Override\n             public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                 org.apache.logging.log4j.ThreadContext.clearAll();\n-                if(!checkAndAuthenticateRequest(request, channel, client)) {\n-                    original.handleRequest(request, channel, client);\n+                if (!checkAndAuthenticateRequest(request, channel, client)) {\n+                    User user = threadContext.getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n+                    if (userIsSuperAdmin(user, adminDNs) || checkRequestIsAllowed(request, channel, client)) {\n+                        original.handleRequest(request, channel, client);\n+                    }\n                 }\n             }\n         };\n     }\n \n-    private boolean checkAndAuthenticateRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n+    /**\n+     * Checks if a given user is a SuperAdmin\n+     */\n+    private boolean userIsSuperAdmin(User user, AdminDNs adminDNs) {\n+        return user != null && adminDNs.isAdmin(user);\n+    }\n+\n+    /**\n+     * Helper function to check if a rest request is whitelisted, by checking if the path is whitelisted,\n+     * and then if the Http method is whitelisted.\n+     * This method also contains logic to trim the path request, and check both with and without extra '/'\n+     * This allows users to whitelist either /_cluster/settings/ or /_cluster/settings, to avoid potential issues.\n+     * This also ensures that requests to the cluster can have a trailing '/'\n+     * Scenarios:\n+     * 1. Whitelisted API does not have an extra '/'. eg: If GET /_cluster/settings is whitelisted, these requests have the following response:\n+     *      GET /_cluster/settings  - OK\n+     *      GET /_cluster/settings/ - OK\n+     *\n+     * 2. Whitelisted API has an extra '/'. eg: If GET /_cluster/settings/ is whitelisted, these requests have the following response:\n+     *      GET /_cluster/settings  - OK\n+     *      GET /_cluster/settings/ - OK\n+     */\n+    private boolean requestIsWhitelisted(RestRequest request){\n+\n+        //ALSO ALLOWS REQUEST TO HAVE TRAILING '/'\n+        //pathWithoutTrailingSlash stores the endpoint path without extra '/'. eg: /_cat/nodes\n+        //pathWithTrailingSlash stores the endpoint path with extra '/'. eg: /_cat/nodes/\n+        String path = request.path();\n+        String pathWithoutTrailingSlash;\n+        String pathWithTrailingSlash;\n+\n+        //first obtain pathWithoutTrailingSlash, then add a '/' to it to get pathWithTrailingSlash\n+        pathWithoutTrailingSlash = path.endsWith(\"/\") ? path.substring(0, path.length() - 1) : path;\n+        pathWithTrailingSlash = pathWithoutTrailingSlash + '/';\n+\n+        //check if pathWithoutTrailingSlash is whitelisted\n+        if(this.whitelisted_requests.containsKey(pathWithoutTrailingSlash) && this.whitelisted_requests.get(pathWithoutTrailingSlash).contains(HttpRequestMethods.valueOf(request.method().toString())))\n+            return true;\n+\n+        //check if pathWithTrailingSlash is whitelisted\n+        if(this.whitelisted_requests.containsKey(pathWithTrailingSlash) && this.whitelisted_requests.get(pathWithTrailingSlash).contains(HttpRequestMethods.valueOf(request.method().toString())))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUxNDI4MA=="}, "originalCommit": {"oid": "3878cd18a55998e077b8a5d1f9877d59029bea83"}, "originalPosition": 119}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05daef9d00c076e2601291d5166873d62e1d1ed4", "author": {"user": null}, "url": "https://github.com/opensearch-project/security/commit/05daef9d00c076e2601291d5166873d62e1d1ed4", "committedDate": "2020-07-10T05:58:30Z", "message": "Make minor changes, and remove WhitelistingSettingsModel"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MTM3MTE4", "url": "https://github.com/opensearch-project/security/pull/520#pullrequestreview-446137118", "createdAt": "2020-07-10T05:52:31Z", "commit": {"oid": "3878cd18a55998e077b8a5d1f9877d59029bea83"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNTo1MjozMlrOGvqsBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNjoxMjoyMVrOGvrC0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYzNTY1Mw==", "bodyText": "Thanks for adding all these descriptions, minor comment that - all users except SuperAdmin can access only the APIs in requests and not whitelistedAPIs", "url": "https://github.com/opensearch-project/security/pull/520#discussion_r452635653", "createdAt": "2020-07-10T05:52:32Z", "author": {"login": "debjanibnrj"}, "path": "securityconfig/whitelist.yml", "diffHunk": "@@ -0,0 +1,72 @@\n+---\n+_meta:\n+  type: \"whitelist\"\n+  config_version: 2\n+\n+# Description:\n+# enabled - feature flag.\n+# if enabled is false, the whitelisting feature is removed.\n+# This is like removing the check that checks if an API is whitelisted.\n+# This is equivalent to continuing with the usual access control checks, and removing all the code that implements whitelisting.\n+# if enabled is true, then all users except SuperAdmin can access only the APIs in whitelistedAPIs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3878cd18a55998e077b8a5d1f9877d59029bea83"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYzNjY0Mw==", "bodyText": "don't think we are implementing handlePost either. May want to add a new handler function like handleDelete for handlePost", "url": "https://github.com/opensearch-project/security/pull/520#discussion_r452636643", "createdAt": "2020-07-10T05:55:56Z", "author": {"login": "debjanibnrj"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/WhitelistApiAction.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package com.amazon.opendistroforelasticsearch.security.dlic.rest.api;\n+\n+import com.amazon.opendistroforelasticsearch.security.DefaultObjectMapper;\n+import com.amazon.opendistroforelasticsearch.security.auditlog.AuditLog;\n+import com.amazon.opendistroforelasticsearch.security.configuration.AdminDNs;\n+import com.amazon.opendistroforelasticsearch.security.configuration.ConfigurationRepository;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.AbstractConfigurationValidator;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.WhitelistValidator;\n+import com.amazon.opendistroforelasticsearch.security.privileges.PrivilegesEvaluator;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.CType;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.SecurityDynamicConfiguration;\n+import com.amazon.opendistroforelasticsearch.security.ssl.transport.PrincipalExtractor;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.common.collect.ImmutableList;\n+import org.elasticsearch.action.index.IndexResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.rest.RestChannel;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.threadpool.ThreadPool;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+\n+/**\n+ * This class implements GET and PUT operations to manage dynamic WhitelistingSettings.\n+ * <p>\n+ * These APIs are only accessible to SuperAdmin since the configuration controls what APIs are accessible by normal users.\n+ * Eg: If whitelisting is enabled, and a specific API like \"/_cat/nodes\" is not whitelisted, then only the SuperAdmin can use \"/_cat/nodes\"\n+ * These APIs allow the SuperAdmin to enable/disable whitelisting, and also change the list of whitelisted APIs.\n+ * <p>\n+ * A SuperAdmin is identified by a certificate which represents a distinguished name(DN).\n+ * SuperAdmin DN's can be set in {@link ConfigConstants#OPENDISTRO_SECURITY_AUTHCZ_ADMIN_DN}\n+ * SuperAdmin certificate for the default superuser is stored as a kirk.pem file in config folder of elasticsearch\n+ * <p>\n+ * Example calling the PUT API as SuperAdmin using curl (if http basic auth is on):\n+ * curl -v --cacert path_to_config/root-ca.pem --cert path_to_config/kirk.pem --key path_to_config/kirk-key.pem -XPUT https://localhost:9200/_opendistro/_security/api/whitelist -H \"Content-Type: application/json\" -d\u2019\n+ * {\n+ *      \"enabled\" : false,\n+ *      \"requests\" : {\"/_cat/nodes\": [\"GET\"], \"/_opendistro/_security/api/whitelist\": [\"GET\"]}\n+ * }\n+ *\n+ * Example using the PATCH API to change the requests as SuperAdmin:\n+ * curl -v --cacert path_to_config/root-ca.pem --cert path_to_config/kirk.pem --key path_to_config/kirk-key.pem -XPATCH https://localhost:9200/_opendistro/_security/api/whitelist -H \"Content-Type: application/json\" -d\u2019\n+ * {\n+ *      \"op\":\"replace\",\n+ *      \"path\":\"/config/requests\",\n+ *      \"value\": {\"/_cat/nodes\": [\"GET\"], \"/_opendistro/_security/api/whitelist\": [\"GET\"]}\n+ * }\n+ *\n+ * To update enabled, use the \"add\" operation instead of the \"replace\" operation, since boolean variables are not recognized as valid paths when they are false.\n+ * eg:\n+ * curl -v --cacert path_to_config/root-ca.pem --cert path_to_config/kirk.pem --key path_to_config/kirk-key.pem -XPATCH https://localhost:9200/_opendistro/_security/api/whitelist -H \"Content-Type: application/json\" -d\u2019\n+ * {\n+ *      \"op\":\"add\",\n+ *      \"path\":\"/config/enabled\",\n+ *      \"value\": true\n+ * }\n+ *\n+ * The backing data is stored in {@link ConfigConstants#OPENDISTRO_SECURITY_CONFIG_INDEX_NAME} which is populated during bootstrap.\n+ * For existing clusters, {@link com.amazon.opendistroforelasticsearch.security.tools.OpenDistroSecurityAdmin} tool can\n+ * be used to populate the index.\n+ * <p>\n+ */\n+public class WhitelistApiAction extends PatchableResourceApiAction {\n+    private static final List<Route> routes = ImmutableList.of(\n+            new Route(RestRequest.Method.GET, \"/_opendistro/_security/api/whitelist\"),\n+            new Route(RestRequest.Method.PUT, \"/_opendistro/_security/api/whitelist\"),\n+            new Route(RestRequest.Method.PATCH, \"/_opendistro/_security/api/whitelist\")\n+    );\n+\n+    private static final String name = \"config\";\n+\n+    @Inject\n+    public WhitelistApiAction(final Settings settings, final Path configPath, final RestController controller, final Client client,\n+                              final AdminDNs adminDNs, final ConfigurationRepository cl, final ClusterService cs,\n+                              final PrincipalExtractor principalExtractor, final PrivilegesEvaluator evaluator, ThreadPool threadPool, AuditLog auditLog) {\n+        super(settings, configPath, controller, client, adminDNs, cl, cs, principalExtractor, evaluator, threadPool, auditLog);\n+    }\n+\n+    @Override\n+    protected void handleApiRequest(final RestChannel channel, final RestRequest request, final Client client) throws IOException {\n+        if (!isSuperAdmin()) {\n+            forbidden(channel, \"API allowed only for super admin.\");\n+            return;\n+        }\n+        super.handleApiRequest(channel, request, client);\n+    }\n+\n+    @Override\n+    protected void handleGet(final RestChannel channel, RestRequest request, Client client, final JsonNode content)\n+            throws IOException {\n+\n+\n+        final SecurityDynamicConfiguration<?> configuration = load(getConfigName(), true);\n+        filter(configuration);\n+        successResponse(channel, configuration);\n+        return;\n+    }\n+\n+    @Override\n+    protected void handleDelete(final RestChannel channel, final RestRequest request, final Client client, final JsonNode content) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3878cd18a55998e077b8a5d1f9877d59029bea83"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY0MTQ4OA==", "bodyText": "Think this implies that if we whitelist GET /_cat/nodes both customer request for GET /_cat/nodes and GET /_cat/nodes/ are permissible.", "url": "https://github.com/opensearch-project/security/pull/520#discussion_r452641488", "createdAt": "2020-07-10T06:12:21Z", "author": {"login": "debjanibnrj"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/filter/OpenDistroSecurityRestFilter.java", "diffHunk": "@@ -82,22 +94,106 @@ public OpenDistroSecurityRestFilter(final BackendRegistry registry, final AuditL\n         this.settings = settings;\n         this.configPath = configPath;\n         this.compatConfig = compatConfig;\n+        this.whitelisting_enabled = false;\n+        this.whitelisted_requests = Collections.emptyMap();\n     }\n-    \n-    public RestHandler wrap(RestHandler original) {\n+\n+    /**\n+     * This function wraps around all rest requests\n+     * If the request is authenticated, then it goes through a whitelisting check.\n+     * The whitelisting check works as follows:\n+     * If whitelisting is not enabled, then requests are handled normally.\n+     * If whitelisting is enabled, then SuperAdmin is allowed access to all APIs, regardless of what is currently whitelisted.\n+     * If whitelisting is enabled, then Non-SuperAdmin is allowed to access only those APIs that are whitelisted in {@link #requests}\n+     * For example: if whitelisting is enabled and requests = [\"/_cat/nodes\"], then SuperAdmin can access all APIs, but non SuperAdmin\n+     * can only access \"/_cat/nodes\"\n+     * Further note: Some APIs are only accessible by SuperAdmin, regardless of whitelisting. For example: /_opendistro/_security/api/whitelist is only accessible by SuperAdmin.\n+     * See {@link com.amazon.opendistroforelasticsearch.security.dlic.rest.api.WhitelistApiAction} for the implementation of this API.\n+     * SuperAdmin is identified by credentials, which can be passed in the curl request.\n+     */\n+    public RestHandler wrap(RestHandler original, AdminDNs adminDNs) {\n         return new RestHandler() {\n             \n             @Override\n             public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                 org.apache.logging.log4j.ThreadContext.clearAll();\n-                if(!checkAndAuthenticateRequest(request, channel, client)) {\n-                    original.handleRequest(request, channel, client);\n+                if (!checkAndAuthenticateRequest(request, channel, client)) {\n+                    User user = threadContext.getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n+                    if (userIsSuperAdmin(user, adminDNs) || checkRequestIsAllowed(request, channel, client)) {\n+                        original.handleRequest(request, channel, client);\n+                    }\n                 }\n             }\n         };\n     }\n \n-    private boolean checkAndAuthenticateRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n+    /**\n+     * Checks if a given user is a SuperAdmin\n+     */\n+    private boolean userIsSuperAdmin(User user, AdminDNs adminDNs) {\n+        return user != null && adminDNs.isAdmin(user);\n+    }\n+\n+    /**\n+     * Helper function to check if a rest request is whitelisted, by checking if the path is whitelisted,\n+     * and then if the Http method is whitelisted.\n+     * This method also contains logic to trim the path request, and check both with and without extra '/'\n+     * This allows users to whitelist either /_cluster/settings/ or /_cluster/settings, to avoid potential issues.\n+     * This also ensures that requests to the cluster can have a trailing '/'\n+     * Scenarios:\n+     * 1. Whitelisted API does not have an extra '/'. eg: If GET /_cluster/settings is whitelisted, these requests have the following response:\n+     *      GET /_cluster/settings  - OK\n+     *      GET /_cluster/settings/ - OK\n+     *\n+     * 2. Whitelisted API has an extra '/'. eg: If GET /_cluster/settings/ is whitelisted, these requests have the following response:\n+     *      GET /_cluster/settings  - OK\n+     *      GET /_cluster/settings/ - OK\n+     */\n+    private boolean requestIsWhitelisted(RestRequest request){\n+\n+        //ALSO ALLOWS REQUEST TO HAVE TRAILING '/'\n+        //pathWithoutTrailingSlash stores the endpoint path without extra '/'. eg: /_cat/nodes\n+        //pathWithTrailingSlash stores the endpoint path with extra '/'. eg: /_cat/nodes/\n+        String path = request.path();\n+        String pathWithoutTrailingSlash;\n+        String pathWithTrailingSlash;\n+\n+        //first obtain pathWithoutTrailingSlash, then add a '/' to it to get pathWithTrailingSlash\n+        pathWithoutTrailingSlash = path.endsWith(\"/\") ? path.substring(0, path.length() - 1) : path;\n+        pathWithTrailingSlash = pathWithoutTrailingSlash + '/';\n+\n+        //check if pathWithoutTrailingSlash is whitelisted\n+        if(this.whitelisted_requests.containsKey(pathWithoutTrailingSlash) && this.whitelisted_requests.get(pathWithoutTrailingSlash).contains(HttpRequestMethods.valueOf(request.method().toString())))\n+            return true;\n+\n+        //check if pathWithTrailingSlash is whitelisted\n+        if(this.whitelisted_requests.containsKey(pathWithTrailingSlash) && this.whitelisted_requests.get(pathWithTrailingSlash).contains(HttpRequestMethods.valueOf(request.method().toString())))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUxNDI4MA=="}, "originalCommit": {"oid": "3878cd18a55998e077b8a5d1f9877d59029bea83"}, "originalPosition": 119}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "786fc7cd2bceee4f0e7a9dc3891a1e2eb933e9b0", "author": {"user": null}, "url": "https://github.com/opensearch-project/security/commit/786fc7cd2bceee4f0e7a9dc3891a1e2eb933e9b0", "committedDate": "2020-07-10T06:35:54Z", "message": "move whitelisting checks into WhitelistingSettings"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MTU3MTc1", "url": "https://github.com/opensearch-project/security/pull/520#pullrequestreview-446157175", "createdAt": "2020-07-10T06:44:55Z", "commit": {"oid": "786fc7cd2bceee4f0e7a9dc3891a1e2eb933e9b0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNjo0NDo1NVrOGvrs6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNjo0NDo1NVrOGvrs6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1MjI2Ng==", "bodyText": "Don't think you need to reset the value of  rh.sendAdminCertificate every time. Looks like this is being set everytime you call this method.", "url": "https://github.com/opensearch-project/security/pull/520#discussion_r452652266", "createdAt": "2020-07-10T06:44:55Z", "author": {"login": "debjanibnrj"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/WhitelistApiTest.java", "diffHunk": "@@ -44,7 +44,10 @@\n      *\n      * @throws Exception\n      */\n-    private void testGetAndPut(final int expectedStatus, final Header... headers) throws Exception {\n+    private void testGetAndPut(final int expectedStatus, final boolean sendAdminCertificate, final Header... headers) throws Exception {\n+\n+        final boolean prevSendAdminCertificate = rh.sendAdminCertificate;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "786fc7cd2bceee4f0e7a9dc3891a1e2eb933e9b0"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MTU5NTkx", "url": "https://github.com/opensearch-project/security/pull/520#pullrequestreview-446159591", "createdAt": "2020-07-10T06:50:21Z", "commit": {"oid": "786fc7cd2bceee4f0e7a9dc3891a1e2eb933e9b0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNjo1MDoyMVrOGvr0zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNjo1MDoyMVrOGvr0zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1NDI4NA==", "bodyText": "Mark this as volatile if the object is being changed under subscribe.", "url": "https://github.com/opensearch-project/security/pull/520#discussion_r452654284", "createdAt": "2020-07-10T06:50:21Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/filter/OpenDistroSecurityRestFilter.java", "diffHunk": "@@ -71,6 +74,9 @@\n     private final Path configPath;\n     private final CompatConfig compatConfig;\n \n+    private WhitelistingSettings whitelistingSettings;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "786fc7cd2bceee4f0e7a9dc3891a1e2eb933e9b0"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MTYzNDYw", "url": "https://github.com/opensearch-project/security/pull/520#pullrequestreview-446163460", "createdAt": "2020-07-10T06:58:28Z", "commit": {"oid": "786fc7cd2bceee4f0e7a9dc3891a1e2eb933e9b0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNjo1ODoyOFrOGvsBEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNjo1ODoyOFrOGvsBEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1NzQyNw==", "bodyText": "nit: whats the use case of this copy constuctor?", "url": "https://github.com/opensearch-project/security/pull/520#discussion_r452657427", "createdAt": "2020-07-10T06:58:28Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/impl/WhitelistingSettings.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package com.amazon.opendistroforelasticsearch.security.securityconf.impl;\n+\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestChannel;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestStatus;\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class WhitelistingSettings {\n+    private boolean enabled;\n+    private Map<String, List<HttpRequestMethods>> requests;\n+\n+    /**\n+     * Used to parse the yml files, do not remove.\n+     */\n+    public WhitelistingSettings() {\n+        enabled = false;\n+        requests = Collections.emptyMap();\n+    }\n+\n+    public WhitelistingSettings(WhitelistingSettings whitelistingSettings) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "786fc7cd2bceee4f0e7a9dc3891a1e2eb933e9b0"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MTY4OTUy", "url": "https://github.com/opensearch-project/security/pull/520#pullrequestreview-446168952", "createdAt": "2020-07-10T07:08:18Z", "commit": {"oid": "786fc7cd2bceee4f0e7a9dc3891a1e2eb933e9b0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNzowODoxOFrOGvsSdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNzowODoxOFrOGvsSdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY2MTg3Nw==", "bodyText": "nit: consider moving this null check to setter as getter is more likely accessed", "url": "https://github.com/opensearch-project/security/pull/520#discussion_r452661877", "createdAt": "2020-07-10T07:08:18Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/impl/WhitelistingSettings.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package com.amazon.opendistroforelasticsearch.security.securityconf.impl;\n+\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestChannel;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestStatus;\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class WhitelistingSettings {\n+    private boolean enabled;\n+    private Map<String, List<HttpRequestMethods>> requests;\n+\n+    /**\n+     * Used to parse the yml files, do not remove.\n+     */\n+    public WhitelistingSettings() {\n+        enabled = false;\n+        requests = Collections.emptyMap();\n+    }\n+\n+    public WhitelistingSettings(WhitelistingSettings whitelistingSettings) {\n+        this.enabled = whitelistingSettings.getEnabled();\n+        this.requests = whitelistingSettings.getRequests();\n+    }\n+\n+    public boolean getEnabled() {\n+        return this.enabled;\n+    }\n+\n+    public void setEnabled(boolean enabled) {\n+        this.enabled = enabled;\n+    }\n+\n+    public Map<String, List<HttpRequestMethods>> getRequests() {\n+        return this.requests == null ? Collections.emptyMap(): this.requests;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "786fc7cd2bceee4f0e7a9dc3891a1e2eb933e9b0"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MTg5MDI2", "url": "https://github.com/opensearch-project/security/pull/520#pullrequestreview-446189026", "createdAt": "2020-07-10T07:42:41Z", "commit": {"oid": "786fc7cd2bceee4f0e7a9dc3891a1e2eb933e9b0"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "786fc7cd2bceee4f0e7a9dc3891a1e2eb933e9b0", "author": {"user": null}, "url": "https://github.com/opensearch-project/security/commit/786fc7cd2bceee4f0e7a9dc3891a1e2eb933e9b0", "committedDate": "2020-07-10T06:35:54Z", "message": "move whitelisting checks into WhitelistingSettings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f14ba450db1edc528e51975d8e2d26bf1c142db", "author": {"user": null}, "url": "https://github.com/opensearch-project/security/commit/1f14ba450db1edc528e51975d8e2d26bf1c142db", "committedDate": "2020-07-10T09:04:55Z", "message": "ensure null object not posted"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MjQzNzM1", "url": "https://github.com/opensearch-project/security/pull/520#pullrequestreview-446243735", "createdAt": "2020-07-10T09:06:03Z", "commit": {"oid": "1f14ba450db1edc528e51975d8e2d26bf1c142db"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2NDQ5NjU5", "url": "https://github.com/opensearch-project/security/pull/520#pullrequestreview-446449659", "createdAt": "2020-07-10T14:30:37Z", "commit": {"oid": "1f14ba450db1edc528e51975d8e2d26bf1c142db"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5OTY5MDU5", "url": "https://github.com/opensearch-project/security/pull/520#pullrequestreview-449969059", "createdAt": "2020-07-16T15:35:03Z", "commit": {"oid": "1f14ba450db1edc528e51975d8e2d26bf1c142db"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNTozNTowM1rOGywqew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNTozODoyMFrOGywzVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg3OTI5MQ==", "bodyText": "Missing copyright.", "url": "https://github.com/opensearch-project/security/pull/520#discussion_r455879291", "createdAt": "2020-07-16T15:35:03Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/WhitelistApiAction.java", "diffHunk": "@@ -0,0 +1,163 @@\n+package com.amazon.opendistroforelasticsearch.security.dlic.rest.api;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f14ba450db1edc528e51975d8e2d26bf1c142db"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg3OTgxNw==", "bodyText": "Missing copyright.", "url": "https://github.com/opensearch-project/security/pull/520#discussion_r455879817", "createdAt": "2020-07-16T15:35:43Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/validation/WhitelistValidator.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package com.amazon.opendistroforelasticsearch.security.dlic.rest.validation;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f14ba450db1edc528e51975d8e2d26bf1c142db"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg4MDc0Ng==", "bodyText": "Missing copyright.", "url": "https://github.com/opensearch-project/security/pull/520#discussion_r455880746", "createdAt": "2020-07-16T15:37:07Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/impl/HttpRequestMethods.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package com.amazon.opendistroforelasticsearch.security.securityconf.impl;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f14ba450db1edc528e51975d8e2d26bf1c142db"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg4MDg0NA==", "bodyText": "Missing copyright.", "url": "https://github.com/opensearch-project/security/pull/520#discussion_r455880844", "createdAt": "2020-07-16T15:37:15Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/impl/WhitelistingSettings.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package com.amazon.opendistroforelasticsearch.security.securityconf.impl;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f14ba450db1edc528e51975d8e2d26bf1c142db"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg4MTE4OA==", "bodyText": "Missing copyright.", "url": "https://github.com/opensearch-project/security/pull/520#discussion_r455881188", "createdAt": "2020-07-16T15:37:48Z", "author": {"login": "vrozov"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/WhitelistApiTest.java", "diffHunk": "@@ -0,0 +1,249 @@\n+package com.amazon.opendistroforelasticsearch.security.dlic.rest.api;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f14ba450db1edc528e51975d8e2d26bf1c142db"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg4MTU1OA==", "bodyText": "Missing copyright.", "url": "https://github.com/opensearch-project/security/pull/520#discussion_r455881558", "createdAt": "2020-07-16T15:38:20Z", "author": {"login": "vrozov"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/filter/OpenDistroSecurityRestFilterTest.java", "diffHunk": "@@ -0,0 +1,240 @@\n+package com.amazon.opendistroforelasticsearch.security.filter;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f14ba450db1edc528e51975d8e2d26bf1c142db"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2798, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}