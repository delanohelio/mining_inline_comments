{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxNjM4Mzg5", "number": 303, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMTozMjoyNFrODqBSeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxNTozODo0MFrODqFxzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Mzg3ODk2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AsyncStoragePoolConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMTozMjoyNFrOF5jyNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMTozMjoyNFrOF5jyNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg5OTQ0Nw==", "bodyText": "it is a simple math :), consider 100_000.", "url": "https://github.com/opensearch-project/security/pull/303#discussion_r395899447", "createdAt": "2020-03-20T21:32:24Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AsyncStoragePoolConfig.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.elasticsearch.common.settings.Settings;\n+\n+public class AsyncStoragePoolConfig {\n+    private static final int DEFAULT_THREAD_POOL_SIZE = 10;\n+    private static final int DEFAULT_THREAD_POOL_MAX_QUEUE_LEN = 100 * 1000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Mzg5NDYxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AsyncStoragePoolConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMTo0MDowNFrOF5j8Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMjo0NTo1NFrOF5lIEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwMTk1OA==", "bodyText": "consider making constructor private.", "url": "https://github.com/opensearch-project/security/pull/303#discussion_r395901958", "createdAt": "2020-03-20T21:40:04Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AsyncStoragePoolConfig.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.elasticsearch.common.settings.Settings;\n+\n+public class AsyncStoragePoolConfig {\n+    private static final int DEFAULT_THREAD_POOL_SIZE = 10;\n+    private static final int DEFAULT_THREAD_POOL_MAX_QUEUE_LEN = 100 * 1000;\n+\n+    private final int threadPoolSize;\n+    private final int threadPoolMaxQueueLen;\n+\n+    public AsyncStoragePoolConfig(int threadPoolSize, int threadPoolMaxQueueLen) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkyMTQyNg==", "bodyText": "Public constructor is not needed for this PR but it will be made public soon in upcoming PRs as config will no longer be generated from Settings.", "url": "https://github.com/opensearch-project/security/pull/303#discussion_r395921426", "createdAt": "2020-03-20T22:45:54Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AsyncStoragePoolConfig.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.elasticsearch.common.settings.Settings;\n+\n+public class AsyncStoragePoolConfig {\n+    private static final int DEFAULT_THREAD_POOL_SIZE = 10;\n+    private static final int DEFAULT_THREAD_POOL_MAX_QUEUE_LEN = 100 * 1000;\n+\n+    private final int threadPoolSize;\n+    private final int threadPoolMaxQueueLen;\n+\n+    public AsyncStoragePoolConfig(int threadPoolSize, int threadPoolMaxQueueLen) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwMTk1OA=="}, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzkwNDk2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AsyncStoragePoolConfig.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMTo0NToxMFrOF5kCgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQwMDoyOToxMlrOF5mW4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwMzYxOQ==", "bodyText": "Is it a common practice to use a default value for an invalid setting? Can you point me how it is handled in other places? I would prefer at least a warning message or better an exception.", "url": "https://github.com/opensearch-project/security/pull/303#discussion_r395903619", "createdAt": "2020-03-20T21:45:10Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AsyncStoragePoolConfig.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.elasticsearch.common.settings.Settings;\n+\n+public class AsyncStoragePoolConfig {\n+    private static final int DEFAULT_THREAD_POOL_SIZE = 10;\n+    private static final int DEFAULT_THREAD_POOL_MAX_QUEUE_LEN = 100 * 1000;\n+\n+    private final int threadPoolSize;\n+    private final int threadPoolMaxQueueLen;\n+\n+    public AsyncStoragePoolConfig(int threadPoolSize, int threadPoolMaxQueueLen) {\n+        if (threadPoolSize <= 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkyMTkxMg==", "bodyText": "I believe it is a very common practice?\nCreating a thread pool with negative value will complain and we can go two ways from there:\n\nComplain and crash the process\nUse default values.\n\nI will log a warning for this case.", "url": "https://github.com/opensearch-project/security/pull/303#discussion_r395921912", "createdAt": "2020-03-20T22:48:02Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AsyncStoragePoolConfig.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.elasticsearch.common.settings.Settings;\n+\n+public class AsyncStoragePoolConfig {\n+    private static final int DEFAULT_THREAD_POOL_SIZE = 10;\n+    private static final int DEFAULT_THREAD_POOL_MAX_QUEUE_LEN = 100 * 1000;\n+\n+    private final int threadPoolSize;\n+    private final int threadPoolMaxQueueLen;\n+\n+    public AsyncStoragePoolConfig(int threadPoolSize, int threadPoolMaxQueueLen) {\n+        if (threadPoolSize <= 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwMzYxOQ=="}, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzMTQzNQ==", "bodyText": "My take is to complain (log error) and crash. IMO, silently switching to a default value will cause confusion. Logging a warning may go unnoticed.", "url": "https://github.com/opensearch-project/security/pull/303#discussion_r395931435", "createdAt": "2020-03-20T23:31:05Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AsyncStoragePoolConfig.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.elasticsearch.common.settings.Settings;\n+\n+public class AsyncStoragePoolConfig {\n+    private static final int DEFAULT_THREAD_POOL_SIZE = 10;\n+    private static final int DEFAULT_THREAD_POOL_MAX_QUEUE_LEN = 100 * 1000;\n+\n+    private final int threadPoolSize;\n+    private final int threadPoolMaxQueueLen;\n+\n+    public AsyncStoragePoolConfig(int threadPoolSize, int threadPoolMaxQueueLen) {\n+        if (threadPoolSize <= 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwMzYxOQ=="}, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzNTA5NA==", "bodyText": "I m slightly not sure if we should throw an exception and make it crash.\n\nReading from elasticsearch settings asks for a default value if not configured.\nUsers who don't care to make a specific config setting, this will crash for them too instead of relying on defaults.\nThis would make thread pool setting mandatory (may need to consult product and update docs).", "url": "https://github.com/opensearch-project/security/pull/303#discussion_r395935094", "createdAt": "2020-03-20T23:49:07Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AsyncStoragePoolConfig.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.elasticsearch.common.settings.Settings;\n+\n+public class AsyncStoragePoolConfig {\n+    private static final int DEFAULT_THREAD_POOL_SIZE = 10;\n+    private static final int DEFAULT_THREAD_POOL_MAX_QUEUE_LEN = 100 * 1000;\n+\n+    private final int threadPoolSize;\n+    private final int threadPoolMaxQueueLen;\n+\n+    public AsyncStoragePoolConfig(int threadPoolSize, int threadPoolMaxQueueLen) {\n+        if (threadPoolSize <= 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwMzYxOQ=="}, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzNjc4OA==", "bodyText": "If one of the settings is not present it needs to be replaced with a default value, there should not be any crash. In case an invalid value is passed to the constructor, it should be OK to throw an exception and fail to construct AsyncStoragePoolConfig object.", "url": "https://github.com/opensearch-project/security/pull/303#discussion_r395936788", "createdAt": "2020-03-20T23:58:37Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AsyncStoragePoolConfig.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.elasticsearch.common.settings.Settings;\n+\n+public class AsyncStoragePoolConfig {\n+    private static final int DEFAULT_THREAD_POOL_SIZE = 10;\n+    private static final int DEFAULT_THREAD_POOL_MAX_QUEUE_LEN = 100 * 1000;\n+\n+    private final int threadPoolSize;\n+    private final int threadPoolMaxQueueLen;\n+\n+    public AsyncStoragePoolConfig(int threadPoolSize, int threadPoolMaxQueueLen) {\n+        if (threadPoolSize <= 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwMzYxOQ=="}, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk0MTYwMQ==", "bodyText": "Alright", "url": "https://github.com/opensearch-project/security/pull/303#discussion_r395941601", "createdAt": "2020-03-21T00:29:12Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AsyncStoragePoolConfig.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.elasticsearch.common.settings.Settings;\n+\n+public class AsyncStoragePoolConfig {\n+    private static final int DEFAULT_THREAD_POOL_SIZE = 10;\n+    private static final int DEFAULT_THREAD_POOL_MAX_QUEUE_LEN = 100 * 1000;\n+\n+    private final int threadPoolSize;\n+    private final int threadPoolMaxQueueLen;\n+\n+    public AsyncStoragePoolConfig(int threadPoolSize, int threadPoolMaxQueueLen) {\n+        if (threadPoolSize <= 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwMzYxOQ=="}, "originalCommit": null, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzkwNjAzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AsyncStoragePoolConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMTo0NTozOVrOF5kDNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMjo0ODowOFrOF5lKEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwMzc5OQ==", "bodyText": "The same as threadPoolSize.", "url": "https://github.com/opensearch-project/security/pull/303#discussion_r395903799", "createdAt": "2020-03-20T21:45:39Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AsyncStoragePoolConfig.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.elasticsearch.common.settings.Settings;\n+\n+public class AsyncStoragePoolConfig {\n+    private static final int DEFAULT_THREAD_POOL_SIZE = 10;\n+    private static final int DEFAULT_THREAD_POOL_MAX_QUEUE_LEN = 100 * 1000;\n+\n+    private final int threadPoolSize;\n+    private final int threadPoolMaxQueueLen;\n+\n+    public AsyncStoragePoolConfig(int threadPoolSize, int threadPoolMaxQueueLen) {\n+        if (threadPoolSize <= 0) {\n+            threadPoolSize = DEFAULT_THREAD_POOL_SIZE;\n+        }\n+\n+        if (threadPoolMaxQueueLen <= 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkyMTkzNw==", "bodyText": "Same as above", "url": "https://github.com/opensearch-project/security/pull/303#discussion_r395921937", "createdAt": "2020-03-20T22:48:08Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AsyncStoragePoolConfig.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.elasticsearch.common.settings.Settings;\n+\n+public class AsyncStoragePoolConfig {\n+    private static final int DEFAULT_THREAD_POOL_SIZE = 10;\n+    private static final int DEFAULT_THREAD_POOL_MAX_QUEUE_LEN = 100 * 1000;\n+\n+    private final int threadPoolSize;\n+    private final int threadPoolMaxQueueLen;\n+\n+    public AsyncStoragePoolConfig(int threadPoolSize, int threadPoolMaxQueueLen) {\n+        if (threadPoolSize <= 0) {\n+            threadPoolSize = DEFAULT_THREAD_POOL_SIZE;\n+        }\n+\n+        if (threadPoolMaxQueueLen <= 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwMzc5OQ=="}, "originalCommit": null, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Mzk2OTU4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AsyncStoragePoolConfig.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMjoxODozMVrOF5kqNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQwMDo0MTozMlrOF5mdTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkxMzc4Mw==", "bodyText": "Will this class be used outside of AsyncStoragePool? The current usage is limited to AsyncStoragePool, why not to make it static inside AsyncStoragePool?", "url": "https://github.com/opensearch-project/security/pull/303#discussion_r395913783", "createdAt": "2020-03-20T22:18:31Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AsyncStoragePoolConfig.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.elasticsearch.common.settings.Settings;\n+\n+public class AsyncStoragePoolConfig {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzNDE2Mw==", "bodyText": "Yes. It will be used outside AsyncStoragePool to notify config changes. Moreover having it as static inner class will make outer class dependent on inner class. Eg: AsyncStoragePool constructor accepting inner class AsyncStoragePoolConfig dependency.", "url": "https://github.com/opensearch-project/security/pull/303#discussion_r395934163", "createdAt": "2020-03-20T23:44:17Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AsyncStoragePoolConfig.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.elasticsearch.common.settings.Settings;\n+\n+public class AsyncStoragePoolConfig {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkxMzc4Mw=="}, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzOTg3NQ==", "bodyText": "Will it only notify AsyncStoragePool about config changes? The class name AsyncStoragePoolConfig  suggests that it is specific to AsyncStoragePool and can't be used with other thread pools. In this case, I don't see anything wrong with making it more explicit and making AsyncStoragePool constructor accept an instance of an inner static class. It is simply a way to organize naming.", "url": "https://github.com/opensearch-project/security/pull/303#discussion_r395939875", "createdAt": "2020-03-21T00:16:56Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AsyncStoragePoolConfig.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.elasticsearch.common.settings.Settings;\n+\n+public class AsyncStoragePoolConfig {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkxMzc4Mw=="}, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk0MzI0Ng==", "bodyText": "I will rename it to ThreadPoolConfig to make it more generic if we want to use config for other thread pools.", "url": "https://github.com/opensearch-project/security/pull/303#discussion_r395943246", "createdAt": "2020-03-21T00:41:32Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AsyncStoragePoolConfig.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.elasticsearch.common.settings.Settings;\n+\n+public class AsyncStoragePoolConfig {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkxMzc4Mw=="}, "originalCommit": null, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Mzk4NjU1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/routing/AsyncStoragePool.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMjoyNzoxNlrOF5k0OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQwNToxNzoxMFrOF5nqyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkxNjM0NA==", "bodyText": "Not sure why this method is necessary, can't it be inlined in the constructor?", "url": "https://github.com/opensearch-project/security/pull/303#discussion_r395916344", "createdAt": "2020-03-20T22:27:16Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/routing/AsyncStoragePool.java", "diffHunk": "@@ -72,11 +59,18 @@ public void submit(AuditMessage message, AuditLogSink sink) {\n \t\t}\n \t}\n \n-\tprivate ThreadPoolExecutor createExecutor(final int threadPoolSize, final int maxQueueLen) {\n+\tprivate ThreadPoolExecutor createExecutor(final AsyncStoragePoolConfig config) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkyMjQwOQ==", "bodyText": "This class will be subscribed to a config listener in future PR which will update for any config changes which will call this function again. Hence moved it to be passed in a method.", "url": "https://github.com/opensearch-project/security/pull/303#discussion_r395922409", "createdAt": "2020-03-20T22:50:06Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/routing/AsyncStoragePool.java", "diffHunk": "@@ -72,11 +59,18 @@ public void submit(AuditMessage message, AuditLogSink sink) {\n \t\t}\n \t}\n \n-\tprivate ThreadPoolExecutor createExecutor(final int threadPoolSize, final int maxQueueLen) {\n+\tprivate ThreadPoolExecutor createExecutor(final AsyncStoragePoolConfig config) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkxNjM0NA=="}, "originalCommit": null, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk0MTU0NQ==", "bodyText": "To support config changes, it would be necessary to properly handle existing pool shutdown and creation of a new thread pool. What if there are pending tasks to execute? What if a running task takes too long to complete? This method is likely to require significant refactoring and new functionality before it can support config change.", "url": "https://github.com/opensearch-project/security/pull/303#discussion_r395941545", "createdAt": "2020-03-21T00:28:45Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/routing/AsyncStoragePool.java", "diffHunk": "@@ -72,11 +59,18 @@ public void submit(AuditMessage message, AuditLogSink sink) {\n \t\t}\n \t}\n \n-\tprivate ThreadPoolExecutor createExecutor(final int threadPoolSize, final int maxQueueLen) {\n+\tprivate ThreadPoolExecutor createExecutor(final AsyncStoragePoolConfig config) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkxNjM0NA=="}, "originalCommit": null, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk0MjkxMw==", "bodyText": "Thread pool size can be dynamically changed. However dynamically changing the queue length will be more challenging as the current queue must depleted as LinkedBlockingQueue size cant be changed once initialized. For sure it will need more work.\nThis PR just cleans up exisiting code.", "url": "https://github.com/opensearch-project/security/pull/303#discussion_r395942913", "createdAt": "2020-03-21T00:38:46Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/routing/AsyncStoragePool.java", "diffHunk": "@@ -72,11 +59,18 @@ public void submit(AuditMessage message, AuditLogSink sink) {\n \t\t}\n \t}\n \n-\tprivate ThreadPoolExecutor createExecutor(final int threadPoolSize, final int maxQueueLen) {\n+\tprivate ThreadPoolExecutor createExecutor(final AsyncStoragePoolConfig config) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkxNjM0NA=="}, "originalCommit": null, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk0OTY0Mg==", "bodyText": "Please clarify, if you want to create another Executor on configuration change, it would be necessary to deal with the issues I mentioned. If configuration change will modify an existing Executor, this function can't be reused as it creates new instance of ThreadPoolExecutor. I'd recommend to inline the function, especially that it looks like it was supposed to be static (it takes member variable config as an argument), but also requires access to log that is not static.", "url": "https://github.com/opensearch-project/security/pull/303#discussion_r395949642", "createdAt": "2020-03-21T01:44:53Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/routing/AsyncStoragePool.java", "diffHunk": "@@ -72,11 +59,18 @@ public void submit(AuditMessage message, AuditLogSink sink) {\n \t\t}\n \t}\n \n-\tprivate ThreadPoolExecutor createExecutor(final int threadPoolSize, final int maxQueueLen) {\n+\tprivate ThreadPoolExecutor createExecutor(final AsyncStoragePoolConfig config) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkxNjM0NA=="}, "originalCommit": null, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk2MzA4MQ==", "bodyText": "I was answering your concern of handling existing thread pool when there is a config change. I passed this as a param because createExecutor looked like a candidate that can be made separate. I will make this static.", "url": "https://github.com/opensearch-project/security/pull/303#discussion_r395963081", "createdAt": "2020-03-21T05:17:10Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/routing/AsyncStoragePool.java", "diffHunk": "@@ -72,11 +59,18 @@ public void submit(AuditMessage message, AuditLogSink sink) {\n \t\t}\n \t}\n \n-\tprivate ThreadPoolExecutor createExecutor(final int threadPoolSize, final int maxQueueLen) {\n+\tprivate ThreadPoolExecutor createExecutor(final AsyncStoragePoolConfig config) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkxNjM0NA=="}, "originalCommit": null, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Mzk5NDkwOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/auditlog/routing/ThreadPoolSettingsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMjozMToyMVrOF5k5GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMjozMToyMVrOF5k5GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkxNzU5Mw==", "bodyText": "Should this test be moved to RoutingConfigurationTest?", "url": "https://github.com/opensearch-project/security/pull/303#discussion_r395917593", "createdAt": "2020-03-20T22:31:21Z", "author": {"login": "vrozov"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/auditlog/routing/ThreadPoolSettingsTest.java", "diffHunk": "@@ -15,21 +15,21 @@\n \n package com.amazon.opendistroforelasticsearch.security.auditlog.routing;\n \n+import com.amazon.opendistroforelasticsearch.security.auditlog.AbstractAuditlogiUnitTest;\n+import com.amazon.opendistroforelasticsearch.security.auditlog.config.AsyncStoragePoolConfig;\n+import com.amazon.opendistroforelasticsearch.security.test.helper.file.FileHelper;\n import org.elasticsearch.common.settings.Settings;\n import org.junit.Assert;\n import org.junit.Test;\n \n-import com.amazon.opendistroforelasticsearch.security.auditlog.AbstractAuditlogiUnitTest;\n-import com.amazon.opendistroforelasticsearch.security.auditlog.routing.AuditMessageRouter;\n-import com.amazon.opendistroforelasticsearch.security.test.helper.file.FileHelper;\n-\n public class ThreadPoolSettingsTest extends AbstractAuditlogiUnitTest {\n \n-\t@Test\n-\tpublic void testNoMultipleEndpointsConfiguration() throws Exception {\n-\t\tSettings settings = Settings.builder().loadFromPath(FileHelper.getAbsoluteFilePathFromClassPath(\"auditlog/endpoints/sink/configuration_no_multiple_endpoints.yml\")).build();\n-\t\tAuditMessageRouter router = createMessageRouterComplianceEnabled(settings);\n-\t\tAssert.assertEquals(5, router.storagePool.threadPoolSize);\n-\t\tAssert.assertEquals(200000, router.storagePool.threadPoolMaxQueueLen);\n-\t}\n+    @Test\n+    public void testNoMultipleEndpointsConfiguration() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDAwNDY5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/routing/AuditMessageRouter.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMjozNzoyMFrOF5k_PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQwMDo1NTowMFrOF5mjwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkxOTE2NQ==", "bodyText": "Is it necessary to change the signature of the AsyncStoragePool constructor? Can it continue to accept Settings and create AsyncStoragePoolConfig inside?", "url": "https://github.com/opensearch-project/security/pull/303#discussion_r395919165", "createdAt": "2020-03-20T22:37:20Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/routing/AuditMessageRouter.java", "diffHunk": "@@ -51,7 +52,7 @@\n \n \tpublic AuditMessageRouter(final Settings settings, final Client clientProvider, ThreadPool threadPool, final Path configPath) {\n \t\tthis.sinkProvider = new SinkProvider(settings, clientProvider, threadPool, configPath);\n-\t\tthis.storagePool = new AsyncStoragePool(settings);\n+\t\tthis.storagePool = new AsyncStoragePool(AsyncStoragePoolConfig.getConfig(settings));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkyMjk2Ng==", "bodyText": "I believe it is a good idea to pass only whats needed to a class.", "url": "https://github.com/opensearch-project/security/pull/303#discussion_r395922966", "createdAt": "2020-03-20T22:52:32Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/routing/AuditMessageRouter.java", "diffHunk": "@@ -51,7 +52,7 @@\n \n \tpublic AuditMessageRouter(final Settings settings, final Client clientProvider, ThreadPool threadPool, final Path configPath) {\n \t\tthis.sinkProvider = new SinkProvider(settings, clientProvider, threadPool, configPath);\n-\t\tthis.storagePool = new AsyncStoragePool(settings);\n+\t\tthis.storagePool = new AsyncStoragePool(AsyncStoragePoolConfig.getConfig(settings));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkxOTE2NQ=="}, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk0MzYxMw==", "bodyText": "Yes, but on the other side, now AuditMessageRouter is exposed to Settings, AsyncStoragePool and in addition to AsyncStoragePoolConfig.", "url": "https://github.com/opensearch-project/security/pull/303#discussion_r395943613", "createdAt": "2020-03-21T00:44:19Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/routing/AuditMessageRouter.java", "diffHunk": "@@ -51,7 +52,7 @@\n \n \tpublic AuditMessageRouter(final Settings settings, final Client clientProvider, ThreadPool threadPool, final Path configPath) {\n \t\tthis.sinkProvider = new SinkProvider(settings, clientProvider, threadPool, configPath);\n-\t\tthis.storagePool = new AsyncStoragePool(settings);\n+\t\tthis.storagePool = new AsyncStoragePool(AsyncStoragePoolConfig.getConfig(settings));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkxOTE2NQ=="}, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk0NDY4MA==", "bodyText": "Those also will undergo changes.", "url": "https://github.com/opensearch-project/security/pull/303#discussion_r395944680", "createdAt": "2020-03-21T00:53:00Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/routing/AuditMessageRouter.java", "diffHunk": "@@ -51,7 +52,7 @@\n \n \tpublic AuditMessageRouter(final Settings settings, final Client clientProvider, ThreadPool threadPool, final Path configPath) {\n \t\tthis.sinkProvider = new SinkProvider(settings, clientProvider, threadPool, configPath);\n-\t\tthis.storagePool = new AsyncStoragePool(settings);\n+\t\tthis.storagePool = new AsyncStoragePool(AsyncStoragePoolConfig.getConfig(settings));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkxOTE2NQ=="}, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk0NDgxNg==", "bodyText": "All required dependencies will be injected for all the classes", "url": "https://github.com/opensearch-project/security/pull/303#discussion_r395944816", "createdAt": "2020-03-21T00:54:02Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/routing/AuditMessageRouter.java", "diffHunk": "@@ -51,7 +52,7 @@\n \n \tpublic AuditMessageRouter(final Settings settings, final Client clientProvider, ThreadPool threadPool, final Path configPath) {\n \t\tthis.sinkProvider = new SinkProvider(settings, clientProvider, threadPool, configPath);\n-\t\tthis.storagePool = new AsyncStoragePool(settings);\n+\t\tthis.storagePool = new AsyncStoragePool(AsyncStoragePoolConfig.getConfig(settings));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkxOTE2NQ=="}, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk0NDg5Nw==", "bodyText": "I really want to keep scope small for PRs as previous PRs went un-attended for weeks.", "url": "https://github.com/opensearch-project/security/pull/303#discussion_r395944897", "createdAt": "2020-03-21T00:55:00Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/routing/AuditMessageRouter.java", "diffHunk": "@@ -51,7 +52,7 @@\n \n \tpublic AuditMessageRouter(final Settings settings, final Client clientProvider, ThreadPool threadPool, final Path configPath) {\n \t\tthis.sinkProvider = new SinkProvider(settings, clientProvider, threadPool, configPath);\n-\t\tthis.storagePool = new AsyncStoragePool(settings);\n+\t\tthis.storagePool = new AsyncStoragePool(AsyncStoragePoolConfig.getConfig(settings));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkxOTE2NQ=="}, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDYxNDUyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/ThreadPoolConfig.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxNTozODo0MFrOF5qEpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQxNzo0NDozNlrOF5xUJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAwMjQ3MA==", "bodyText": "The check is not necessary. If there are no settings, it will return a default value, otherwise, it should check validity.", "url": "https://github.com/opensearch-project/security/pull/303#discussion_r396002470", "createdAt": "2020-03-21T15:38:40Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/ThreadPoolConfig.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.elasticsearch.common.settings.Settings;\n+\n+public class ThreadPoolConfig {\n+    private static final int DEFAULT_THREAD_POOL_SIZE = 10;\n+    private static final int DEFAULT_THREAD_POOL_MAX_QUEUE_LEN = 100_000;\n+\n+    private final int threadPoolSize;\n+    private final int threadPoolMaxQueueLen;\n+\n+    public ThreadPoolConfig(int threadPoolSize, int threadPoolMaxQueueLen) {\n+        if (threadPoolSize <= 0) {\n+            throw new IllegalArgumentException(\"Incorrect thread pool size: \" + threadPoolSize + \" configured for audit logging.\");\n+        }\n+\n+        if (threadPoolMaxQueueLen <= 0) {\n+            throw new IllegalArgumentException(\"Incorrect thread pool queue length: \" + threadPoolMaxQueueLen + \" configured for audit logging.\");\n+        }\n+\n+        this.threadPoolSize = threadPoolSize;\n+        this.threadPoolMaxQueueLen = threadPoolMaxQueueLen;\n+    }\n+\n+    public int getThreadPoolSize() {\n+        return threadPoolSize;\n+    }\n+\n+    public int getThreadPoolMaxQueueLen() {\n+        return threadPoolMaxQueueLen;\n+    }\n+\n+    public static ThreadPoolConfig getConfig(Settings settings) {\n+        int threadPoolSize = settings.getAsInt(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_THREADPOOL_SIZE, DEFAULT_THREAD_POOL_SIZE);\n+        int threadPoolMaxQueueLen = settings.getAsInt(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_THREADPOOL_MAX_QUEUE_LEN, DEFAULT_THREAD_POOL_MAX_QUEUE_LEN);\n+\n+        if (threadPoolSize <= 0) threadPoolSize = DEFAULT_THREAD_POOL_SIZE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0MTcxMw==", "bodyText": "A lot of tests are explicitly setting this value to be 0 with the expectation to use the default thread pool", "url": "https://github.com/opensearch-project/security/pull/303#discussion_r396041713", "createdAt": "2020-03-22T00:25:32Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/ThreadPoolConfig.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.elasticsearch.common.settings.Settings;\n+\n+public class ThreadPoolConfig {\n+    private static final int DEFAULT_THREAD_POOL_SIZE = 10;\n+    private static final int DEFAULT_THREAD_POOL_MAX_QUEUE_LEN = 100_000;\n+\n+    private final int threadPoolSize;\n+    private final int threadPoolMaxQueueLen;\n+\n+    public ThreadPoolConfig(int threadPoolSize, int threadPoolMaxQueueLen) {\n+        if (threadPoolSize <= 0) {\n+            throw new IllegalArgumentException(\"Incorrect thread pool size: \" + threadPoolSize + \" configured for audit logging.\");\n+        }\n+\n+        if (threadPoolMaxQueueLen <= 0) {\n+            throw new IllegalArgumentException(\"Incorrect thread pool queue length: \" + threadPoolMaxQueueLen + \" configured for audit logging.\");\n+        }\n+\n+        this.threadPoolSize = threadPoolSize;\n+        this.threadPoolMaxQueueLen = threadPoolMaxQueueLen;\n+    }\n+\n+    public int getThreadPoolSize() {\n+        return threadPoolSize;\n+    }\n+\n+    public int getThreadPoolMaxQueueLen() {\n+        return threadPoolMaxQueueLen;\n+    }\n+\n+    public static ThreadPoolConfig getConfig(Settings settings) {\n+        int threadPoolSize = settings.getAsInt(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_THREADPOOL_SIZE, DEFAULT_THREAD_POOL_SIZE);\n+        int threadPoolMaxQueueLen = settings.getAsInt(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_THREADPOOL_MAX_QUEUE_LEN, DEFAULT_THREAD_POOL_MAX_QUEUE_LEN);\n+\n+        if (threadPoolSize <= 0) threadPoolSize = DEFAULT_THREAD_POOL_SIZE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAwMjQ3MA=="}, "originalCommit": null, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NjEzMQ==", "bodyText": "There are only 3 tests that incorrectly set the value to be 0. If they want to rely on the default value, they should either set it explicitly to the default value or not to set it at all.", "url": "https://github.com/opensearch-project/security/pull/303#discussion_r396046131", "createdAt": "2020-03-22T01:54:02Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/ThreadPoolConfig.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.elasticsearch.common.settings.Settings;\n+\n+public class ThreadPoolConfig {\n+    private static final int DEFAULT_THREAD_POOL_SIZE = 10;\n+    private static final int DEFAULT_THREAD_POOL_MAX_QUEUE_LEN = 100_000;\n+\n+    private final int threadPoolSize;\n+    private final int threadPoolMaxQueueLen;\n+\n+    public ThreadPoolConfig(int threadPoolSize, int threadPoolMaxQueueLen) {\n+        if (threadPoolSize <= 0) {\n+            throw new IllegalArgumentException(\"Incorrect thread pool size: \" + threadPoolSize + \" configured for audit logging.\");\n+        }\n+\n+        if (threadPoolMaxQueueLen <= 0) {\n+            throw new IllegalArgumentException(\"Incorrect thread pool queue length: \" + threadPoolMaxQueueLen + \" configured for audit logging.\");\n+        }\n+\n+        this.threadPoolSize = threadPoolSize;\n+        this.threadPoolMaxQueueLen = threadPoolMaxQueueLen;\n+    }\n+\n+    public int getThreadPoolSize() {\n+        return threadPoolSize;\n+    }\n+\n+    public int getThreadPoolMaxQueueLen() {\n+        return threadPoolMaxQueueLen;\n+    }\n+\n+    public static ThreadPoolConfig getConfig(Settings settings) {\n+        int threadPoolSize = settings.getAsInt(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_THREADPOOL_SIZE, DEFAULT_THREAD_POOL_SIZE);\n+        int threadPoolMaxQueueLen = settings.getAsInt(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_THREADPOOL_MAX_QUEUE_LEN, DEFAULT_THREAD_POOL_MAX_QUEUE_LEN);\n+\n+        if (threadPoolSize <= 0) threadPoolSize = DEFAULT_THREAD_POOL_SIZE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAwMjQ3MA=="}, "originalCommit": null, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA2NDk1MA==", "bodyText": "I m really torn on changing this because I agree with you but removing this will change the functionality\n\nprevious: if set <= 0 or not defined, use default\ncurrent: if set <= 0, complain with exception. if not defined, use default.\n\nChanging functionality is something normally I wouldn't do in a refactor.\nThere are actually 40+ tests explicitly setting: opendistro_security.audit.threadpool.size to 0.\nIf you think changing the functionality is the correct way, let me know. I will change it.", "url": "https://github.com/opensearch-project/security/pull/303#discussion_r396064950", "createdAt": "2020-03-22T07:57:08Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/ThreadPoolConfig.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.elasticsearch.common.settings.Settings;\n+\n+public class ThreadPoolConfig {\n+    private static final int DEFAULT_THREAD_POOL_SIZE = 10;\n+    private static final int DEFAULT_THREAD_POOL_MAX_QUEUE_LEN = 100_000;\n+\n+    private final int threadPoolSize;\n+    private final int threadPoolMaxQueueLen;\n+\n+    public ThreadPoolConfig(int threadPoolSize, int threadPoolMaxQueueLen) {\n+        if (threadPoolSize <= 0) {\n+            throw new IllegalArgumentException(\"Incorrect thread pool size: \" + threadPoolSize + \" configured for audit logging.\");\n+        }\n+\n+        if (threadPoolMaxQueueLen <= 0) {\n+            throw new IllegalArgumentException(\"Incorrect thread pool queue length: \" + threadPoolMaxQueueLen + \" configured for audit logging.\");\n+        }\n+\n+        this.threadPoolSize = threadPoolSize;\n+        this.threadPoolMaxQueueLen = threadPoolMaxQueueLen;\n+    }\n+\n+    public int getThreadPoolSize() {\n+        return threadPoolSize;\n+    }\n+\n+    public int getThreadPoolMaxQueueLen() {\n+        return threadPoolMaxQueueLen;\n+    }\n+\n+    public static ThreadPoolConfig getConfig(Settings settings) {\n+        int threadPoolSize = settings.getAsInt(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_THREADPOOL_SIZE, DEFAULT_THREAD_POOL_SIZE);\n+        int threadPoolMaxQueueLen = settings.getAsInt(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_THREADPOOL_MAX_QUEUE_LEN, DEFAULT_THREAD_POOL_MAX_QUEUE_LEN);\n+\n+        if (threadPoolSize <= 0) threadPoolSize = DEFAULT_THREAD_POOL_SIZE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAwMjQ3MA=="}, "originalCommit": null, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjEyMTEyNQ==", "bodyText": "I suggest changing the behavior to avoid the possibility of overruling explicitly set by a user settings. IMO, tests need to be changed anyway to avoid using \"opendistro_security.audit.threadpool.size\" string instead of OPENDISTRO_SECURITY_AUDIT_THREADPOOL_SIZE constant. If a test needs to use not a default value it should use ConfigConstants.OPENDISTRO_SECURITY_AUDIT_THREADPOOL_SIZE.", "url": "https://github.com/opensearch-project/security/pull/303#discussion_r396121125", "createdAt": "2020-03-22T17:44:36Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/ThreadPoolConfig.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.elasticsearch.common.settings.Settings;\n+\n+public class ThreadPoolConfig {\n+    private static final int DEFAULT_THREAD_POOL_SIZE = 10;\n+    private static final int DEFAULT_THREAD_POOL_MAX_QUEUE_LEN = 100_000;\n+\n+    private final int threadPoolSize;\n+    private final int threadPoolMaxQueueLen;\n+\n+    public ThreadPoolConfig(int threadPoolSize, int threadPoolMaxQueueLen) {\n+        if (threadPoolSize <= 0) {\n+            throw new IllegalArgumentException(\"Incorrect thread pool size: \" + threadPoolSize + \" configured for audit logging.\");\n+        }\n+\n+        if (threadPoolMaxQueueLen <= 0) {\n+            throw new IllegalArgumentException(\"Incorrect thread pool queue length: \" + threadPoolMaxQueueLen + \" configured for audit logging.\");\n+        }\n+\n+        this.threadPoolSize = threadPoolSize;\n+        this.threadPoolMaxQueueLen = threadPoolMaxQueueLen;\n+    }\n+\n+    public int getThreadPoolSize() {\n+        return threadPoolSize;\n+    }\n+\n+    public int getThreadPoolMaxQueueLen() {\n+        return threadPoolMaxQueueLen;\n+    }\n+\n+    public static ThreadPoolConfig getConfig(Settings settings) {\n+        int threadPoolSize = settings.getAsInt(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_THREADPOOL_SIZE, DEFAULT_THREAD_POOL_SIZE);\n+        int threadPoolMaxQueueLen = settings.getAsInt(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_THREADPOOL_MAX_QUEUE_LEN, DEFAULT_THREAD_POOL_MAX_QUEUE_LEN);\n+\n+        if (threadPoolSize <= 0) threadPoolSize = DEFAULT_THREAD_POOL_SIZE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAwMjQ3MA=="}, "originalCommit": null, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2536, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}