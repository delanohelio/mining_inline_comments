{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIxODQyMjcx", "number": 840, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwMDo1NTozOVrOE9BMOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMjo0MzozM1rOE-ovLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNDE4MTA1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwMDo1NTozOVrOH5fCnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwMDo1NTozOVrOH5fCnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAzOTQ1Mg==", "bodyText": "minor: Wrong user in reader context.", "url": "https://github.com/opensearch-project/security/pull/840#discussion_r530039452", "createdAt": "2020-11-25T00:55:39Z", "author": {"login": "debjanibnrj"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -541,56 +541,63 @@ public Weight doCache(Weight weight, QueryCachingPolicy policy) {\n             indexModule.addSearchOperationListener(new SearchOperationListener() {\n \n                 @Override\n-                public void onNewContext(SearchContext context) {\n-\n+                public void onPreQueryPhase(SearchContext context) {\n                     if(advancedModulesEnabled) {\n                         dlsFlsValve.handleSearchContext(context, threadPool, namedXContentRegistry);\n                     }\n                 }\n \n                 @Override\n-                public void onNewScrollContext(SearchContext context) {\n-\n-                    final ScrollContext scrollContext = context.scrollContext();\n+                public void onNewReaderContext(ReaderContext readerContext) {\n+                    final boolean interClusterRequest = HeaderHelper.isInterClusterRequest(threadPool.getThreadContext());\n+                    if (Origin.LOCAL.toString().equals(threadPool.getThreadContext().getTransient(ConfigConstants.OPENDISTRO_SECURITY_ORIGIN))\n+                            && (interClusterRequest || HeaderHelper.isDirectRequest(threadPool.getThreadContext()))\n \n-                    if(scrollContext != null) {\n-\n-                        final boolean interClusterRequest = HeaderHelper.isInterClusterRequest(threadPool.getThreadContext());\n-                        if(Origin.LOCAL.toString().equals(threadPool.getThreadContext().getTransient(ConfigConstants.OPENDISTRO_SECURITY_ORIGIN))\n-                                && (interClusterRequest || HeaderHelper.isDirectRequest(threadPool.getThreadContext()))\n+                    ) {\n+                        readerContext.putInContext(\"_opendistro_security_scroll_auth_local\", Boolean.TRUE);\n+                    } else {\n+                        readerContext.putInContext(\"_opendistro_security_scroll_auth\", threadPool.getThreadContext()\n+                                .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER));\n+                    }\n+                }\n \n-                        ){\n-                            scrollContext.putInContext(\"_opendistro_security_scroll_auth_local\", Boolean.TRUE);\n+                @Override\n+                public void onNewScrollContext(ReaderContext readerContext) {\n+                    final boolean interClusterRequest = HeaderHelper.isInterClusterRequest(threadPool.getThreadContext());\n+                    if (Origin.LOCAL.toString().equals(threadPool.getThreadContext().getTransient(ConfigConstants.OPENDISTRO_SECURITY_ORIGIN))\n+                            && (interClusterRequest || HeaderHelper.isDirectRequest(threadPool.getThreadContext()))\n \n-                        } else {\n-                            scrollContext.putInContext(\"_opendistro_security_scroll_auth\", threadPool.getThreadContext()\n-                                    .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER));\n-                        }\n+                    ) {\n+                        readerContext.putInContext(\"_opendistro_security_scroll_auth_local\", Boolean.TRUE);\n+                    } else {\n+                        readerContext.putInContext(\"_opendistro_security_scroll_auth\", threadPool.getThreadContext()\n+                                .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER));\n                     }\n                 }\n \n                 @Override\n-                public void validateSearchContext(SearchContext context, TransportRequest transportRequest) {\n-\n-                    final ScrollContext scrollContext = context.scrollContext();\n-                    if(scrollContext != null) {\n-                        final Object _isLocal = scrollContext.getFromContext(\"_opendistro_security_scroll_auth_local\");\n-                        final Object _user = scrollContext.getFromContext(\"_opendistro_security_scroll_auth\");\n-                        if(_user != null && (_user instanceof User)) {\n-                            final User scrollUser = (User) _user;\n-                            final User currentUser = threadPool.getThreadContext()\n-                                    .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n-                            if(!scrollUser.equals(currentUser)) {\n-                                auditLog.logMissingPrivileges(SearchScrollAction.NAME, transportRequest, context.getTask());\n-                                log.error(\"Wrong user {} in scroll context, expected {}\", scrollUser, currentUser);\n-                                throw new ElasticsearchSecurityException(\"Wrong user in scroll context\", RestStatus.FORBIDDEN);\n-                            }\n-                        } else if(_isLocal != Boolean.TRUE) {\n-                            auditLog.logMissingPrivileges(SearchScrollAction.NAME, transportRequest, context.getTask());\n-                            throw new ElasticsearchSecurityException(\"No user in scroll context\", RestStatus.FORBIDDEN);\n+                public void validateReaderContext(ReaderContext readerContext, TransportRequest transportRequest) {\n+                    final Object _isLocal = readerContext.getFromContext(\"_opendistro_security_scroll_auth_local\");\n+                    final Object _user = readerContext.getFromContext(\"_opendistro_security_scroll_auth\");\n+                    if (_user != null && (_user instanceof User)) {\n+                        final User scrollUser = (User) _user;\n+                        final User currentUser = threadPool.getThreadContext()\n+                                .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n+                        if (!scrollUser.equals(currentUser)) {\n+                            auditLog.logMissingPrivileges(SearchScrollAction.NAME, transportRequest, null);\n+                            log.error(\"Wrong user {} in scroll context, expected {}\", scrollUser, currentUser);\n+                            throw new ElasticsearchSecurityException(\"Wrong user in scroll context\", RestStatus.FORBIDDEN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da7c7b981538d776433cf8651d4d2ed930822fc1"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNDE5OTY2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwMTowNTozMFrOH5fN9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwMToyODowM1rOH5fpOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA0MjM1OA==", "bodyText": "nit: Would \"bInterClusterRequest\" be a better name given that it's being used in the conditions of IF statements and that \"isInterClusterRequest\" has been occupied by the method name?", "url": "https://github.com/opensearch-project/security/pull/840#discussion_r530042358", "createdAt": "2020-11-25T01:05:30Z", "author": {"login": "cliu123"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -541,56 +541,63 @@ public Weight doCache(Weight weight, QueryCachingPolicy policy) {\n             indexModule.addSearchOperationListener(new SearchOperationListener() {\n \n                 @Override\n-                public void onNewContext(SearchContext context) {\n-\n+                public void onPreQueryPhase(SearchContext context) {\n                     if(advancedModulesEnabled) {\n                         dlsFlsValve.handleSearchContext(context, threadPool, namedXContentRegistry);\n                     }\n                 }\n \n                 @Override\n-                public void onNewScrollContext(SearchContext context) {\n-\n-                    final ScrollContext scrollContext = context.scrollContext();\n+                public void onNewReaderContext(ReaderContext readerContext) {\n+                    final boolean interClusterRequest = HeaderHelper.isInterClusterRequest(threadPool.getThreadContext());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da7c7b981538d776433cf8651d4d2ed930822fc1"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA0OTMzNg==", "bodyText": "while I agree that isInterClusterRequest would be a better name, it is better to keep the original name as the PR does not change how inter cluster request are processed.", "url": "https://github.com/opensearch-project/security/pull/840#discussion_r530049336", "createdAt": "2020-11-25T01:28:03Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -541,56 +541,63 @@ public Weight doCache(Weight weight, QueryCachingPolicy policy) {\n             indexModule.addSearchOperationListener(new SearchOperationListener() {\n \n                 @Override\n-                public void onNewContext(SearchContext context) {\n-\n+                public void onPreQueryPhase(SearchContext context) {\n                     if(advancedModulesEnabled) {\n                         dlsFlsValve.handleSearchContext(context, threadPool, namedXContentRegistry);\n                     }\n                 }\n \n                 @Override\n-                public void onNewScrollContext(SearchContext context) {\n-\n-                    final ScrollContext scrollContext = context.scrollContext();\n+                public void onNewReaderContext(ReaderContext readerContext) {\n+                    final boolean interClusterRequest = HeaderHelper.isInterClusterRequest(threadPool.getThreadContext());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA0MjM1OA=="}, "originalCommit": {"oid": "da7c7b981538d776433cf8651d4d2ed930822fc1"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNDIwNjExOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/DlsFlsValveImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwMTowODo1NFrOH5fRzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwMTozMzowNVrOH5fvUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA0MzM0MA==", "bodyText": "Curious what is going on here, can you possibly elaborate why we are aggregated query results here?", "url": "https://github.com/opensearch-project/security/pull/840#discussion_r530043340", "createdAt": "2020-11-25T01:08:54Z", "author": {"login": "debjanibnrj"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/DlsFlsValveImpl.java", "diffHunk": "@@ -140,4 +157,136 @@ public void handleSearchContext(SearchContext context, ThreadPool threadPool, Na\n \n     }\n \n+    @Override\n+    public void onQueryPhase(SearchContext searchContext, long tookInNanos) {\n+        QuerySearchResult queryResult = searchContext.queryResult();\n+        if (queryResult == null) {\n+            return;\n+        }\n+\n+        DelayableWriteable<InternalAggregations> aggregationsDelayedWritable = queryResult.aggregations();\n+        if (aggregationsDelayedWritable == null) {\n+            return;\n+        }\n+\n+        InternalAggregations aggregations = aggregationsDelayedWritable.expand();\n+        if (aggregations == null) {\n+            return;\n+        }\n+\n+        if (areBucketKeysDistinct(aggregations)) {\n+            return;\n+        }\n+\n+        log.debug(\"Found buckets with equal keys. Merging these buckets: {}\", aggregations);\n+\n+        // TODO check order\n+\n+        queryResult.aggregations(InternalAggregations.from(StreamSupport.stream(aggregations.spliterator(), false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da7c7b981538d776433cf8651d4d2ed930822fc1"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA1MDg5OQ==", "bodyText": "Starting with 7.10 ES assumes that buckets are strongly ordered by keys. Applying mask breaks strong ordering as some keys become the same. It is necessary to aggregate buckets with the same keys.", "url": "https://github.com/opensearch-project/security/pull/840#discussion_r530050899", "createdAt": "2020-11-25T01:33:05Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/DlsFlsValveImpl.java", "diffHunk": "@@ -140,4 +157,136 @@ public void handleSearchContext(SearchContext context, ThreadPool threadPool, Na\n \n     }\n \n+    @Override\n+    public void onQueryPhase(SearchContext searchContext, long tookInNanos) {\n+        QuerySearchResult queryResult = searchContext.queryResult();\n+        if (queryResult == null) {\n+            return;\n+        }\n+\n+        DelayableWriteable<InternalAggregations> aggregationsDelayedWritable = queryResult.aggregations();\n+        if (aggregationsDelayedWritable == null) {\n+            return;\n+        }\n+\n+        InternalAggregations aggregations = aggregationsDelayedWritable.expand();\n+        if (aggregations == null) {\n+            return;\n+        }\n+\n+        if (areBucketKeysDistinct(aggregations)) {\n+            return;\n+        }\n+\n+        log.debug(\"Found buckets with equal keys. Merging these buckets: {}\", aggregations);\n+\n+        // TODO check order\n+\n+        queryResult.aggregations(InternalAggregations.from(StreamSupport.stream(aggregations.spliterator(), false)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA0MzM0MA=="}, "originalCommit": {"oid": "da7c7b981538d776433cf8651d4d2ed930822fc1"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNDIyODczOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwMToxOToxN1rOH5felA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwMToxOToxN1rOH5felA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA0NjYxMg==", "bodyText": "No user in reader context.", "url": "https://github.com/opensearch-project/security/pull/840#discussion_r530046612", "createdAt": "2020-11-25T01:19:17Z", "author": {"login": "cliu123"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -541,56 +541,63 @@ public Weight doCache(Weight weight, QueryCachingPolicy policy) {\n             indexModule.addSearchOperationListener(new SearchOperationListener() {\n \n                 @Override\n-                public void onNewContext(SearchContext context) {\n-\n+                public void onPreQueryPhase(SearchContext context) {\n                     if(advancedModulesEnabled) {\n                         dlsFlsValve.handleSearchContext(context, threadPool, namedXContentRegistry);\n                     }\n                 }\n \n                 @Override\n-                public void onNewScrollContext(SearchContext context) {\n-\n-                    final ScrollContext scrollContext = context.scrollContext();\n+                public void onNewReaderContext(ReaderContext readerContext) {\n+                    final boolean interClusterRequest = HeaderHelper.isInterClusterRequest(threadPool.getThreadContext());\n+                    if (Origin.LOCAL.toString().equals(threadPool.getThreadContext().getTransient(ConfigConstants.OPENDISTRO_SECURITY_ORIGIN))\n+                            && (interClusterRequest || HeaderHelper.isDirectRequest(threadPool.getThreadContext()))\n \n-                    if(scrollContext != null) {\n-\n-                        final boolean interClusterRequest = HeaderHelper.isInterClusterRequest(threadPool.getThreadContext());\n-                        if(Origin.LOCAL.toString().equals(threadPool.getThreadContext().getTransient(ConfigConstants.OPENDISTRO_SECURITY_ORIGIN))\n-                                && (interClusterRequest || HeaderHelper.isDirectRequest(threadPool.getThreadContext()))\n+                    ) {\n+                        readerContext.putInContext(\"_opendistro_security_scroll_auth_local\", Boolean.TRUE);\n+                    } else {\n+                        readerContext.putInContext(\"_opendistro_security_scroll_auth\", threadPool.getThreadContext()\n+                                .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER));\n+                    }\n+                }\n \n-                        ){\n-                            scrollContext.putInContext(\"_opendistro_security_scroll_auth_local\", Boolean.TRUE);\n+                @Override\n+                public void onNewScrollContext(ReaderContext readerContext) {\n+                    final boolean interClusterRequest = HeaderHelper.isInterClusterRequest(threadPool.getThreadContext());\n+                    if (Origin.LOCAL.toString().equals(threadPool.getThreadContext().getTransient(ConfigConstants.OPENDISTRO_SECURITY_ORIGIN))\n+                            && (interClusterRequest || HeaderHelper.isDirectRequest(threadPool.getThreadContext()))\n \n-                        } else {\n-                            scrollContext.putInContext(\"_opendistro_security_scroll_auth\", threadPool.getThreadContext()\n-                                    .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER));\n-                        }\n+                    ) {\n+                        readerContext.putInContext(\"_opendistro_security_scroll_auth_local\", Boolean.TRUE);\n+                    } else {\n+                        readerContext.putInContext(\"_opendistro_security_scroll_auth\", threadPool.getThreadContext()\n+                                .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER));\n                     }\n                 }\n \n                 @Override\n-                public void validateSearchContext(SearchContext context, TransportRequest transportRequest) {\n-\n-                    final ScrollContext scrollContext = context.scrollContext();\n-                    if(scrollContext != null) {\n-                        final Object _isLocal = scrollContext.getFromContext(\"_opendistro_security_scroll_auth_local\");\n-                        final Object _user = scrollContext.getFromContext(\"_opendistro_security_scroll_auth\");\n-                        if(_user != null && (_user instanceof User)) {\n-                            final User scrollUser = (User) _user;\n-                            final User currentUser = threadPool.getThreadContext()\n-                                    .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n-                            if(!scrollUser.equals(currentUser)) {\n-                                auditLog.logMissingPrivileges(SearchScrollAction.NAME, transportRequest, context.getTask());\n-                                log.error(\"Wrong user {} in scroll context, expected {}\", scrollUser, currentUser);\n-                                throw new ElasticsearchSecurityException(\"Wrong user in scroll context\", RestStatus.FORBIDDEN);\n-                            }\n-                        } else if(_isLocal != Boolean.TRUE) {\n-                            auditLog.logMissingPrivileges(SearchScrollAction.NAME, transportRequest, context.getTask());\n-                            throw new ElasticsearchSecurityException(\"No user in scroll context\", RestStatus.FORBIDDEN);\n+                public void validateReaderContext(ReaderContext readerContext, TransportRequest transportRequest) {\n+                    final Object _isLocal = readerContext.getFromContext(\"_opendistro_security_scroll_auth_local\");\n+                    final Object _user = readerContext.getFromContext(\"_opendistro_security_scroll_auth\");\n+                    if (_user != null && (_user instanceof User)) {\n+                        final User scrollUser = (User) _user;\n+                        final User currentUser = threadPool.getThreadContext()\n+                                .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n+                        if (!scrollUser.equals(currentUser)) {\n+                            auditLog.logMissingPrivileges(SearchScrollAction.NAME, transportRequest, null);\n+                            log.error(\"Wrong user {} in scroll context, expected {}\", scrollUser, currentUser);\n+                            throw new ElasticsearchSecurityException(\"Wrong user in scroll context\", RestStatus.FORBIDDEN);\n                         }\n+                    } else if (_isLocal != Boolean.TRUE) {\n+                        auditLog.logMissingPrivileges(SearchScrollAction.NAME, transportRequest, null);\n+                        throw new ElasticsearchSecurityException(\"No user in scroll context\", RestStatus.FORBIDDEN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da7c7b981538d776433cf8651d4d2ed930822fc1"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODE4NzE5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMTo0MjoxOVrOH6EtGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMjowNjowOFrOH6FTbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY1NjUzNg==", "bodyText": "should it be scroll context or reader context?", "url": "https://github.com/opensearch-project/security/pull/840#discussion_r530656536", "createdAt": "2020-11-25T21:42:19Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -577,20 +578,22 @@ public void onNewScrollContext(ReaderContext readerContext) {\n \n                 @Override\n                 public void validateReaderContext(ReaderContext readerContext, TransportRequest transportRequest) {\n-                    final Object _isLocal = readerContext.getFromContext(\"_opendistro_security_scroll_auth_local\");\n-                    final Object _user = readerContext.getFromContext(\"_opendistro_security_scroll_auth\");\n-                    if (_user != null && (_user instanceof User)) {\n-                        final User scrollUser = (User) _user;\n-                        final User currentUser = threadPool.getThreadContext()\n-                                .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n-                        if (!scrollUser.equals(currentUser)) {\n+                    if (transportRequest instanceof InternalScrollSearchRequest) {\n+                        final Object _isLocal = readerContext.getFromContext(\"_opendistro_security_scroll_auth_local\");\n+                        final Object _user = readerContext.getFromContext(\"_opendistro_security_scroll_auth\");\n+                        if (_user != null && (_user instanceof User)) {\n+                            final User scrollUser = (User) _user;\n+                            final User currentUser = threadPool.getThreadContext()\n+                                    .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n+                            if (!scrollUser.equals(currentUser)) {\n+                                auditLog.logMissingPrivileges(SearchScrollAction.NAME, transportRequest, null);\n+                                log.error(\"Wrong user {} in reader context, expected {}\", scrollUser, currentUser);\n+                                throw new ElasticsearchSecurityException(\"Wrong user in reader context\", RestStatus.FORBIDDEN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a28c6fd46701474c1dc51992c59517e5960bebf0"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY2NjM1MQ==", "bodyText": "We expect ReaderContext (former SearchContext) to be populated. The check is done only for scroll (InternalScrollSearchRequest).", "url": "https://github.com/opensearch-project/security/pull/840#discussion_r530666351", "createdAt": "2020-11-25T22:06:08Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -577,20 +578,22 @@ public void onNewScrollContext(ReaderContext readerContext) {\n \n                 @Override\n                 public void validateReaderContext(ReaderContext readerContext, TransportRequest transportRequest) {\n-                    final Object _isLocal = readerContext.getFromContext(\"_opendistro_security_scroll_auth_local\");\n-                    final Object _user = readerContext.getFromContext(\"_opendistro_security_scroll_auth\");\n-                    if (_user != null && (_user instanceof User)) {\n-                        final User scrollUser = (User) _user;\n-                        final User currentUser = threadPool.getThreadContext()\n-                                .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n-                        if (!scrollUser.equals(currentUser)) {\n+                    if (transportRequest instanceof InternalScrollSearchRequest) {\n+                        final Object _isLocal = readerContext.getFromContext(\"_opendistro_security_scroll_auth_local\");\n+                        final Object _user = readerContext.getFromContext(\"_opendistro_security_scroll_auth\");\n+                        if (_user != null && (_user instanceof User)) {\n+                            final User scrollUser = (User) _user;\n+                            final User currentUser = threadPool.getThreadContext()\n+                                    .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n+                            if (!scrollUser.equals(currentUser)) {\n+                                auditLog.logMissingPrivileges(SearchScrollAction.NAME, transportRequest, null);\n+                                log.error(\"Wrong user {} in reader context, expected {}\", scrollUser, currentUser);\n+                                throw new ElasticsearchSecurityException(\"Wrong user in reader context\", RestStatus.FORBIDDEN);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY1NjUzNg=="}, "originalCommit": {"oid": "a28c6fd46701474c1dc51992c59517e5960bebf0"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MTE0NjA2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMjo0MzozM1rOH75b6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNzozNDowNVrOH8GAwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU2OTA2NQ==", "bodyText": "Note: This is relatively hot code, it will be called for each query on each shard. The complexity of evalMap grows with the complexity of configurations. For complex configurations, evalMap might thus add some overhead to each query. Thus, it might be a good idea to have some load tests for these changes.", "url": "https://github.com/opensearch-project/security/pull/840#discussion_r532569065", "createdAt": "2020-11-30T12:43:33Z", "author": {"login": "nibix"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -541,53 +542,70 @@ public Weight doCache(Weight weight, QueryCachingPolicy policy) {\n             indexModule.addSearchOperationListener(new SearchOperationListener() {\n \n                 @Override\n-                public void onNewContext(SearchContext context) {\n-\n+                public void onPreQueryPhase(SearchContext context) {\n                     if(advancedModulesEnabled) {\n                         dlsFlsValve.handleSearchContext(context, threadPool, namedXContentRegistry);\n                     }\n                 }\n \n                 @Override\n-                public void onNewScrollContext(SearchContext context) {\n-\n-                    final ScrollContext scrollContext = context.scrollContext();\n+                public void onNewReaderContext(ReaderContext readerContext) {\n+                    final boolean interClusterRequest = HeaderHelper.isInterClusterRequest(threadPool.getThreadContext());\n+                    if (Origin.LOCAL.toString().equals(threadPool.getThreadContext().getTransient(ConfigConstants.OPENDISTRO_SECURITY_ORIGIN))\n+                            && (interClusterRequest || HeaderHelper.isDirectRequest(threadPool.getThreadContext()))\n \n-                    if(scrollContext != null) {\n-\n-                        final boolean interClusterRequest = HeaderHelper.isInterClusterRequest(threadPool.getThreadContext());\n-                        if(Origin.LOCAL.toString().equals(threadPool.getThreadContext().getTransient(ConfigConstants.OPENDISTRO_SECURITY_ORIGIN))\n-                                && (interClusterRequest || HeaderHelper.isDirectRequest(threadPool.getThreadContext()))\n+                    ) {\n+                        readerContext.putInContext(\"_opendistro_security_scroll_auth_local\", Boolean.TRUE);\n+                    } else {\n+                        readerContext.putInContext(\"_opendistro_security_scroll_auth\", threadPool.getThreadContext()\n+                                .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER));\n+                    }\n+                }\n \n-                        ){\n-                            scrollContext.putInContext(\"_opendistro_security_scroll_auth_local\", Boolean.TRUE);\n+                @Override\n+                public void onNewScrollContext(ReaderContext readerContext) {\n+                    final boolean interClusterRequest = HeaderHelper.isInterClusterRequest(threadPool.getThreadContext());\n+                    if (Origin.LOCAL.toString().equals(threadPool.getThreadContext().getTransient(ConfigConstants.OPENDISTRO_SECURITY_ORIGIN))\n+                            && (interClusterRequest || HeaderHelper.isDirectRequest(threadPool.getThreadContext()))\n \n-                        } else {\n-                            scrollContext.putInContext(\"_opendistro_security_scroll_auth\", threadPool.getThreadContext()\n-                                    .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER));\n-                        }\n+                    ) {\n+                        readerContext.putInContext(\"_opendistro_security_scroll_auth_local\", Boolean.TRUE);\n+                    } else {\n+                        readerContext.putInContext(\"_opendistro_security_scroll_auth\", threadPool.getThreadContext()\n+                                .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER));\n                     }\n                 }\n \n                 @Override\n-                public void validateSearchContext(SearchContext context, TransportRequest transportRequest) {\n-\n-                    final ScrollContext scrollContext = context.scrollContext();\n-                    if(scrollContext != null) {\n-                        final Object _isLocal = scrollContext.getFromContext(\"_opendistro_security_scroll_auth_local\");\n-                        final Object _user = scrollContext.getFromContext(\"_opendistro_security_scroll_auth\");\n-                        if(_user != null && (_user instanceof User)) {\n+                public void validateReaderContext(ReaderContext readerContext, TransportRequest transportRequest) {\n+                    if (transportRequest instanceof InternalScrollSearchRequest) {\n+                        final Object _isLocal = readerContext.getFromContext(\"_opendistro_security_scroll_auth_local\");\n+                        final Object _user = readerContext.getFromContext(\"_opendistro_security_scroll_auth\");\n+                        if (_user != null && (_user instanceof User)) {\n                             final User scrollUser = (User) _user;\n                             final User currentUser = threadPool.getThreadContext()\n                                     .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n-                            if(!scrollUser.equals(currentUser)) {\n-                                auditLog.logMissingPrivileges(SearchScrollAction.NAME, transportRequest, context.getTask());\n-                                log.error(\"Wrong user {} in scroll context, expected {}\", scrollUser, currentUser);\n-                                throw new ElasticsearchSecurityException(\"Wrong user in scroll context\", RestStatus.FORBIDDEN);\n+                            if (!scrollUser.equals(currentUser)) {\n+                                auditLog.logMissingPrivileges(SearchScrollAction.NAME, transportRequest, null);\n+                                log.error(\"Wrong user {} in reader context, expected {}\", scrollUser, currentUser);\n+                                throw new ElasticsearchSecurityException(\"Wrong user in reader context\", RestStatus.FORBIDDEN);\n                             }\n-                        } else if(_isLocal != Boolean.TRUE) {\n-                            auditLog.logMissingPrivileges(SearchScrollAction.NAME, transportRequest, context.getTask());\n-                            throw new ElasticsearchSecurityException(\"No user in scroll context\", RestStatus.FORBIDDEN);\n+                        } else if (_isLocal != Boolean.TRUE) {\n+                            auditLog.logMissingPrivileges(SearchScrollAction.NAME, transportRequest, null);\n+                            throw new ElasticsearchSecurityException(\"No user in reader context\", RestStatus.FORBIDDEN);\n+                        }\n+                    }\n+                }\n+\n+                @Override\n+                public void onQueryPhase(SearchContext searchContext, long tookInNanos) {\n+                    final Map<String, Set<String>> maskedFieldsMap = (Map<String, Set<String>>) HeaderHelper.deserializeSafeFromHeader(threadPool.getThreadContext(),\n+                            ConfigConstants.OPENDISTRO_SECURITY_MASKED_FIELD_HEADER);\n+                    final String maskedEval = OpenDistroSecurityUtils.evalMap(maskedFieldsMap, indexModule.getIndex().getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7c9fc31ae17e30f4a33a4f934dbd365af6945d3"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc3NTEwNQ==", "bodyText": "It is now evaluated only for term (aggregation) queries.", "url": "https://github.com/opensearch-project/security/pull/840#discussion_r532775105", "createdAt": "2020-11-30T17:34:05Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -541,53 +542,70 @@ public Weight doCache(Weight weight, QueryCachingPolicy policy) {\n             indexModule.addSearchOperationListener(new SearchOperationListener() {\n \n                 @Override\n-                public void onNewContext(SearchContext context) {\n-\n+                public void onPreQueryPhase(SearchContext context) {\n                     if(advancedModulesEnabled) {\n                         dlsFlsValve.handleSearchContext(context, threadPool, namedXContentRegistry);\n                     }\n                 }\n \n                 @Override\n-                public void onNewScrollContext(SearchContext context) {\n-\n-                    final ScrollContext scrollContext = context.scrollContext();\n+                public void onNewReaderContext(ReaderContext readerContext) {\n+                    final boolean interClusterRequest = HeaderHelper.isInterClusterRequest(threadPool.getThreadContext());\n+                    if (Origin.LOCAL.toString().equals(threadPool.getThreadContext().getTransient(ConfigConstants.OPENDISTRO_SECURITY_ORIGIN))\n+                            && (interClusterRequest || HeaderHelper.isDirectRequest(threadPool.getThreadContext()))\n \n-                    if(scrollContext != null) {\n-\n-                        final boolean interClusterRequest = HeaderHelper.isInterClusterRequest(threadPool.getThreadContext());\n-                        if(Origin.LOCAL.toString().equals(threadPool.getThreadContext().getTransient(ConfigConstants.OPENDISTRO_SECURITY_ORIGIN))\n-                                && (interClusterRequest || HeaderHelper.isDirectRequest(threadPool.getThreadContext()))\n+                    ) {\n+                        readerContext.putInContext(\"_opendistro_security_scroll_auth_local\", Boolean.TRUE);\n+                    } else {\n+                        readerContext.putInContext(\"_opendistro_security_scroll_auth\", threadPool.getThreadContext()\n+                                .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER));\n+                    }\n+                }\n \n-                        ){\n-                            scrollContext.putInContext(\"_opendistro_security_scroll_auth_local\", Boolean.TRUE);\n+                @Override\n+                public void onNewScrollContext(ReaderContext readerContext) {\n+                    final boolean interClusterRequest = HeaderHelper.isInterClusterRequest(threadPool.getThreadContext());\n+                    if (Origin.LOCAL.toString().equals(threadPool.getThreadContext().getTransient(ConfigConstants.OPENDISTRO_SECURITY_ORIGIN))\n+                            && (interClusterRequest || HeaderHelper.isDirectRequest(threadPool.getThreadContext()))\n \n-                        } else {\n-                            scrollContext.putInContext(\"_opendistro_security_scroll_auth\", threadPool.getThreadContext()\n-                                    .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER));\n-                        }\n+                    ) {\n+                        readerContext.putInContext(\"_opendistro_security_scroll_auth_local\", Boolean.TRUE);\n+                    } else {\n+                        readerContext.putInContext(\"_opendistro_security_scroll_auth\", threadPool.getThreadContext()\n+                                .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER));\n                     }\n                 }\n \n                 @Override\n-                public void validateSearchContext(SearchContext context, TransportRequest transportRequest) {\n-\n-                    final ScrollContext scrollContext = context.scrollContext();\n-                    if(scrollContext != null) {\n-                        final Object _isLocal = scrollContext.getFromContext(\"_opendistro_security_scroll_auth_local\");\n-                        final Object _user = scrollContext.getFromContext(\"_opendistro_security_scroll_auth\");\n-                        if(_user != null && (_user instanceof User)) {\n+                public void validateReaderContext(ReaderContext readerContext, TransportRequest transportRequest) {\n+                    if (transportRequest instanceof InternalScrollSearchRequest) {\n+                        final Object _isLocal = readerContext.getFromContext(\"_opendistro_security_scroll_auth_local\");\n+                        final Object _user = readerContext.getFromContext(\"_opendistro_security_scroll_auth\");\n+                        if (_user != null && (_user instanceof User)) {\n                             final User scrollUser = (User) _user;\n                             final User currentUser = threadPool.getThreadContext()\n                                     .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n-                            if(!scrollUser.equals(currentUser)) {\n-                                auditLog.logMissingPrivileges(SearchScrollAction.NAME, transportRequest, context.getTask());\n-                                log.error(\"Wrong user {} in scroll context, expected {}\", scrollUser, currentUser);\n-                                throw new ElasticsearchSecurityException(\"Wrong user in scroll context\", RestStatus.FORBIDDEN);\n+                            if (!scrollUser.equals(currentUser)) {\n+                                auditLog.logMissingPrivileges(SearchScrollAction.NAME, transportRequest, null);\n+                                log.error(\"Wrong user {} in reader context, expected {}\", scrollUser, currentUser);\n+                                throw new ElasticsearchSecurityException(\"Wrong user in reader context\", RestStatus.FORBIDDEN);\n                             }\n-                        } else if(_isLocal != Boolean.TRUE) {\n-                            auditLog.logMissingPrivileges(SearchScrollAction.NAME, transportRequest, context.getTask());\n-                            throw new ElasticsearchSecurityException(\"No user in scroll context\", RestStatus.FORBIDDEN);\n+                        } else if (_isLocal != Boolean.TRUE) {\n+                            auditLog.logMissingPrivileges(SearchScrollAction.NAME, transportRequest, null);\n+                            throw new ElasticsearchSecurityException(\"No user in reader context\", RestStatus.FORBIDDEN);\n+                        }\n+                    }\n+                }\n+\n+                @Override\n+                public void onQueryPhase(SearchContext searchContext, long tookInNanos) {\n+                    final Map<String, Set<String>> maskedFieldsMap = (Map<String, Set<String>>) HeaderHelper.deserializeSafeFromHeader(threadPool.getThreadContext(),\n+                            ConfigConstants.OPENDISTRO_SECURITY_MASKED_FIELD_HEADER);\n+                    final String maskedEval = OpenDistroSecurityUtils.evalMap(maskedFieldsMap, indexModule.getIndex().getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU2OTA2NQ=="}, "originalCommit": {"oid": "b7c9fc31ae17e30f4a33a4f934dbd365af6945d3"}, "originalPosition": 103}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2239, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}