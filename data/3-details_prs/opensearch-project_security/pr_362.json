{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwNDQ5Njcy", "number": 362, "title": "Implement APIs and datamodel to configure nodes_dn dynamically.", "bodyText": "The primary usecase is targeted at cross-cluster where in nodes restart\ncan be avoided by populating the coordinating cluster's nodes_dn values\nto facilitate cross-cluster usecases.\nSummary of changes:\n\nIntroduce \"nodesdn\" datatype to be stored in security index. In a way\nit is another permission entity similar to internaluser, role etc\nMake the above datatype backward compatible i.e do not fail other\noperations (roles, users etc)\nImplement APIs for CRUD operations that are only super-admin\naccessible and are only enabled based on a YML config value.\n\nExample:\nGET /_opendistro/_security/api/nodesdn\n{\"cluster1\":{\"nodes_dn\": [\"CN=cluster1.example.com\"]},\"cluster2\":{\"nodes_dn\": [\"CN=cluster2.example.com\"]}}\n\nGET /_opendistro/_security/api/nodesdn/cluster1\n{\"cluster1\":{\"nodes_dn\": [\"CN=cluster1.example.com\"]}}\n\nPUT /_opendistro/_security/api/nodesdn/cluster3 -d'{\"nodes_dn\": [\"CN=cluster3.example.com\"]}'\n\nPATCH /_opendistro/_security/api/nodesdn/cluster3 \\\n-d'{\"op\":\"add\", \"path\": \"/nodesdn/-\", \"value\": \"CN=cluster-3b.example.com\"}'\n\nGET /_opendistro/_security/api/nodesdn/cluster3\n{\"cluster3\":{\"nodes_dn\": [\"CN=cluster3.example.com\", \"CN=cluster-3b.example.com\"]}}\n\nDELETE /_opendistro/_security/api/nodesdn/cluster2\n\n\n\nTesting:\n\nAdded tests for CRUD operations, enabling/disabling based on YML config\nAdded cross-cluster specific test scenarios\nSince the intent is to keep it backward compatible, the \"nodesdn\" document isn't populated in the index in all tests except the specific tests testing the API. This ensures current internalusers, roles etc are not impacted by changes in repository layer.\n\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-04-07T19:09:35Z", "url": "https://github.com/opensearch-project/security/pull/362", "merged": true, "mergeCommit": {"oid": "c7b28ad6f0a472113404135858e9852949971621"}, "closed": true, "closedAt": "2020-04-17T01:26:41Z", "author": {"login": "krishna-ggk"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcVYDPOgH2gAyNDAwNDQ5NjcyOjZjNzA5ZWJmOGU5YjRjMWVkZjg0MTVjZDFkOGUxYmU3MDQyYWMxOTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcYWp8BgFqTM5NTA5NjkxOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198", "author": {"user": {"login": "krishna-ggk", "name": "Gopala Krishna A"}}, "url": "https://github.com/opensearch-project/security/commit/6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198", "committedDate": "2020-04-07T18:59:45Z", "message": "Implement APIs and datamodel to configure nodes_dn dynamically.\n\nThe primary usecase is targeted at cross-cluster where in nodes restart\ncan be avoided by populating the coordinating cluster's nodes_dn values\nto facilitate cross-cluster usecases.\n\n**Summary of changes**:\n\n- Introduce \"nodesdn\" datatype to be stored in security index. In a way\n  it is another permission entity similar to internaluser, role etc\n- Make the above datatype backward compatible i.e do not fail other\n  operations (roles, users etc)\n- Implement APIs for CRUD operations that are only super-admin\n  accessible and are only enabled based on a YML config value."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NTc5Mjk3", "url": "https://github.com/opensearch-project/security/pull/362#pullrequestreview-389579297", "createdAt": "2020-04-08T00:30:26Z", "commit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "state": "DISMISSED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMDozMDoyNlrOGCa6AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMDo0MDo1N1rOGCbE4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MTE2OA==", "bodyText": "What is the difference between NodesDnModelV6 and NodesDnModelV7?", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r405191168", "createdAt": "2020-04-08T00:30:26Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/DynamicConfigFactory.java", "diffHunk": "@@ -320,5 +328,39 @@ public String getHash(String user) {\n             return Collections.emptyList();\n         }\n     }\n+\n+    private static class NodesDnModelV7 extends NodesDnModel {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MTUzNQ==", "bodyText": "What is the difference between NodesDnV6 and NodesDnV7?", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r405191535", "createdAt": "2020-04-08T00:31:45Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/impl/v6/NodesDnV6.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package com.amazon.opendistroforelasticsearch.security.securityconf.impl.v6;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5Mzk1Mw==", "bodyText": "I don't think that changing the interface is well justified. Only DefaultInterClusterRequestEvaluator is interested in NodesDnModel, all other classes that implement DCFListener actually do not use NodesDnModel on the callback event.", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r405193953", "createdAt": "2020-04-08T00:40:57Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/DynamicConfigFactory.java", "diffHunk": "@@ -230,7 +238,7 @@ public void registerDCFListener(DCFListener listener) {\n     }\n     \n     public static interface DCFListener {\n-        void onChanged(ConfigModel cm, DynamicConfigModel dcm, InternalUsersModel ium);\n+        void onChanged(ConfigModel cm, DynamicConfigModel dcm, InternalUsersModel ium, NodesDnModel nm);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwNDIyOTMx", "url": "https://github.com/opensearch-project/security/pull/362#pullrequestreview-390422931", "createdAt": "2020-04-09T00:45:03Z", "commit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMDo0NTowM1rOGDF0zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMDo1NTozM1rOGDGAPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg5NDM0OA==", "bodyText": "for PUT, PATCH and DELETE are we allowing users to modify nodesdn for the existing cluster? is there a way in the current design to distinguish between \"cross_cluster\" node dn and ones for the existing cluster?", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r405894348", "createdAt": "2020-04-09T00:45:03Z", "author": {"login": "debjanibnrj"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/NodesDnApiAction.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package com.amazon.opendistroforelasticsearch.security.dlic.rest.api;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.AuditLog;\n+import com.amazon.opendistroforelasticsearch.security.configuration.AdminDNs;\n+import com.amazon.opendistroforelasticsearch.security.configuration.ConfigurationRepository;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.AbstractConfigurationValidator;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.NodesDnValidator;\n+import com.amazon.opendistroforelasticsearch.security.privileges.PrivilegesEvaluator;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.CType;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.SecurityDynamicConfiguration;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v6.NodesDnV6;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v7.NodesDnV7;\n+import com.amazon.opendistroforelasticsearch.security.ssl.transport.PrincipalExtractor;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.rest.RestChannel;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestRequest.Method;\n+import org.elasticsearch.threadpool.ThreadPool;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * This class implements CRUD operations to manage dynamic NodesDn. The primary usecase is targeted at cross-cluster where\n+ * in node restart can be avoided by populating the coordinating cluster's nodes_dn values.\n+ *\n+ * The APIs are only accessible to SuperAdmin since the configuration controls the core application layer trust validation.\n+ * By default the APIs are disabled and can be enabled by a YML setting - {@link ConfigConstants#OPENDISTRO_SECURITY_NODES_DN_DYNAMIC_CONFIG_ENABLED}\n+ *\n+ * The backing data is stored in {@link ConfigConstants#OPENDISTRO_SECURITY_CONFIG_INDEX_NAME} which is populated during bootstrap.\n+ * For existing clusters, {@link com.amazon.opendistroforelasticsearch.security.tools.OpenDistroSecurityAdmin} tool can\n+ * be used to populate the index.\n+ *\n+ * See {@link com.amazon.opendistroforelasticsearch.security.dlic.rest.api.NodesDnApiTest} for usage examples.\n+ */\n+public class NodesDnApiAction extends PatchableResourceApiAction {\n+    public static final String STATIC_ES_YML_NODES_DN = \"STATIC_ES_YML_NODES_DN\";\n+    private final List<String> staticNodesDnFromEsYml;\n+\n+    @Inject\n+    public NodesDnApiAction(final Settings settings, final Path configPath, final RestController controller, final Client client,\n+        final AdminDNs adminDNs, final ConfigurationRepository cl, final ClusterService cs,\n+        final PrincipalExtractor principalExtractor, final PrivilegesEvaluator evaluator, ThreadPool threadPool, AuditLog auditLog) {\n+        super(settings, configPath, controller, client, adminDNs, cl, cs, principalExtractor, evaluator, threadPool, auditLog);\n+        this.staticNodesDnFromEsYml = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN, Collections.emptyList());\n+    }\n+\n+    @Override\n+    protected void registerHandlers(RestController controller, Settings settings) {\n+        if (settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN_DYNAMIC_CONFIG_ENABLED, false)) {\n+            controller.registerHandler(Method.GET, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.GET, \"/_opendistro/_security/api/nodesdn/\", this);\n+            controller.registerHandler(Method.DELETE, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.PUT, \"/_opendistro/_security/api/nodesdn/{name}\", this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg5NzI3OA==", "bodyText": "For PUT requests where API can enter free-form value for nodesdn you may want to validate the actual DN string. Eg: \"CN=OpenDistro,OU=Server CA,O=OpenDistro,C=US\" is acceptable but \"xyz\" is not.", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r405897278", "createdAt": "2020-04-09T00:55:33Z", "author": {"login": "debjanibnrj"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/validation/NodesDnValidator.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package com.amazon.opendistroforelasticsearch.security.dlic.rest.validation;\n+\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.rest.RestRequest;\n+\n+public class NodesDnValidator extends AbstractConfigurationValidator {\n+\n+    public NodesDnValidator(final RestRequest request, boolean isSuperAdmin, final BytesReference ref, final Settings esSettings, Object... param) {\n+        super(request, ref, esSettings, param);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwMzgzNTQ5", "url": "https://github.com/opensearch-project/security/pull/362#pullrequestreview-390383549", "createdAt": "2020-04-08T22:50:01Z", "commit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMjo1MDowMVrOGDDqig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMzo0Nzo1OFrOGDInnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg1ODk1NA==", "bodyText": "couldn't understand this case.\nWhen this (existingConfiguration.getSeqNo() < 0) can happen?\nAnd are you suggesting Security Admin tool to initialize the index?", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r405858954", "createdAt": "2020-04-08T22:50:01Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/AbstractApiAction.java", "diffHunk": "@@ -192,6 +192,11 @@ protected void handlePut(final RestChannel channel, final RestRequest request, f\n \n \t\tfinal SecurityDynamicConfiguration<?> existingConfiguration = load(getConfigName(), false);\n \n+\t\tif (existingConfiguration.getSeqNo() < 0) {\n+\t\t    forbidden(channel, \"Security index need to be updated to support '\" + getConfigName().toLCString() + \"'. Use OpenDistroSecurityAdmin to populate.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkwMzgyOA==", "bodyText": "couldn't get this condition here.\nReserved is a type of configuration (roles, users, mapping etc) which can be only updated by super admin.\nwhy are we checking ES_YML_NODES_DN here?", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r405903828", "createdAt": "2020-04-09T01:21:08Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/NodesDnApiAction.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package com.amazon.opendistroforelasticsearch.security.dlic.rest.api;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.AuditLog;\n+import com.amazon.opendistroforelasticsearch.security.configuration.AdminDNs;\n+import com.amazon.opendistroforelasticsearch.security.configuration.ConfigurationRepository;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.AbstractConfigurationValidator;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.NodesDnValidator;\n+import com.amazon.opendistroforelasticsearch.security.privileges.PrivilegesEvaluator;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.CType;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.SecurityDynamicConfiguration;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v6.NodesDnV6;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v7.NodesDnV7;\n+import com.amazon.opendistroforelasticsearch.security.ssl.transport.PrincipalExtractor;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.rest.RestChannel;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestRequest.Method;\n+import org.elasticsearch.threadpool.ThreadPool;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * This class implements CRUD operations to manage dynamic NodesDn. The primary usecase is targeted at cross-cluster where\n+ * in node restart can be avoided by populating the coordinating cluster's nodes_dn values.\n+ *\n+ * The APIs are only accessible to SuperAdmin since the configuration controls the core application layer trust validation.\n+ * By default the APIs are disabled and can be enabled by a YML setting - {@link ConfigConstants#OPENDISTRO_SECURITY_NODES_DN_DYNAMIC_CONFIG_ENABLED}\n+ *\n+ * The backing data is stored in {@link ConfigConstants#OPENDISTRO_SECURITY_CONFIG_INDEX_NAME} which is populated during bootstrap.\n+ * For existing clusters, {@link com.amazon.opendistroforelasticsearch.security.tools.OpenDistroSecurityAdmin} tool can\n+ * be used to populate the index.\n+ *\n+ * See {@link com.amazon.opendistroforelasticsearch.security.dlic.rest.api.NodesDnApiTest} for usage examples.\n+ */\n+public class NodesDnApiAction extends PatchableResourceApiAction {\n+    public static final String STATIC_ES_YML_NODES_DN = \"STATIC_ES_YML_NODES_DN\";\n+    private final List<String> staticNodesDnFromEsYml;\n+\n+    @Inject\n+    public NodesDnApiAction(final Settings settings, final Path configPath, final RestController controller, final Client client,\n+        final AdminDNs adminDNs, final ConfigurationRepository cl, final ClusterService cs,\n+        final PrincipalExtractor principalExtractor, final PrivilegesEvaluator evaluator, ThreadPool threadPool, AuditLog auditLog) {\n+        super(settings, configPath, controller, client, adminDNs, cl, cs, principalExtractor, evaluator, threadPool, auditLog);\n+        this.staticNodesDnFromEsYml = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN, Collections.emptyList());\n+    }\n+\n+    @Override\n+    protected void registerHandlers(RestController controller, Settings settings) {\n+        if (settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN_DYNAMIC_CONFIG_ENABLED, false)) {\n+            controller.registerHandler(Method.GET, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.GET, \"/_opendistro/_security/api/nodesdn/\", this);\n+            controller.registerHandler(Method.DELETE, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.PUT, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.PATCH, \"/_opendistro/_security/api/nodesdn/\", this);\n+            controller.registerHandler(Method.PATCH, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+        }\n+    }\n+\n+    @Override\n+    protected void handleApiRequest(RestChannel channel, RestRequest request, Client client) throws IOException {\n+        if (!isSuperAdmin()) {\n+            forbidden(channel, \"API allowed only for admin.\");\n+            return;\n+        }\n+        super.handleApiRequest(channel, request, client);\n+    }\n+\n+    protected void consumeParameters(final RestRequest request) {\n+        request.param(\"name\");\n+        request.param(\"show_all\");\n+    }\n+\n+    @Override\n+    protected boolean isReservedAndAccessible(SecurityDynamicConfiguration<?> existingConfiguration, String name) {\n+        if (STATIC_ES_YML_NODES_DN.equals(name)) {\n+            return false;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkwNzA4Mw==", "bodyText": "are we putting primary DN  into security index as well? It will duplicate the information may create confusion.\nAs Primary DN will be now present into elasticsearch.yml as well as nodes_dn.yml .\nOne can export and change this value through security admin tool.", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r405907083", "createdAt": "2020-04-09T01:34:00Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/NodesDnApiAction.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package com.amazon.opendistroforelasticsearch.security.dlic.rest.api;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.AuditLog;\n+import com.amazon.opendistroforelasticsearch.security.configuration.AdminDNs;\n+import com.amazon.opendistroforelasticsearch.security.configuration.ConfigurationRepository;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.AbstractConfigurationValidator;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.NodesDnValidator;\n+import com.amazon.opendistroforelasticsearch.security.privileges.PrivilegesEvaluator;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.CType;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.SecurityDynamicConfiguration;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v6.NodesDnV6;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v7.NodesDnV7;\n+import com.amazon.opendistroforelasticsearch.security.ssl.transport.PrincipalExtractor;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.rest.RestChannel;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestRequest.Method;\n+import org.elasticsearch.threadpool.ThreadPool;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * This class implements CRUD operations to manage dynamic NodesDn. The primary usecase is targeted at cross-cluster where\n+ * in node restart can be avoided by populating the coordinating cluster's nodes_dn values.\n+ *\n+ * The APIs are only accessible to SuperAdmin since the configuration controls the core application layer trust validation.\n+ * By default the APIs are disabled and can be enabled by a YML setting - {@link ConfigConstants#OPENDISTRO_SECURITY_NODES_DN_DYNAMIC_CONFIG_ENABLED}\n+ *\n+ * The backing data is stored in {@link ConfigConstants#OPENDISTRO_SECURITY_CONFIG_INDEX_NAME} which is populated during bootstrap.\n+ * For existing clusters, {@link com.amazon.opendistroforelasticsearch.security.tools.OpenDistroSecurityAdmin} tool can\n+ * be used to populate the index.\n+ *\n+ * See {@link com.amazon.opendistroforelasticsearch.security.dlic.rest.api.NodesDnApiTest} for usage examples.\n+ */\n+public class NodesDnApiAction extends PatchableResourceApiAction {\n+    public static final String STATIC_ES_YML_NODES_DN = \"STATIC_ES_YML_NODES_DN\";\n+    private final List<String> staticNodesDnFromEsYml;\n+\n+    @Inject\n+    public NodesDnApiAction(final Settings settings, final Path configPath, final RestController controller, final Client client,\n+        final AdminDNs adminDNs, final ConfigurationRepository cl, final ClusterService cs,\n+        final PrincipalExtractor principalExtractor, final PrivilegesEvaluator evaluator, ThreadPool threadPool, AuditLog auditLog) {\n+        super(settings, configPath, controller, client, adminDNs, cl, cs, principalExtractor, evaluator, threadPool, auditLog);\n+        this.staticNodesDnFromEsYml = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN, Collections.emptyList());\n+    }\n+\n+    @Override\n+    protected void registerHandlers(RestController controller, Settings settings) {\n+        if (settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN_DYNAMIC_CONFIG_ENABLED, false)) {\n+            controller.registerHandler(Method.GET, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.GET, \"/_opendistro/_security/api/nodesdn/\", this);\n+            controller.registerHandler(Method.DELETE, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.PUT, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.PATCH, \"/_opendistro/_security/api/nodesdn/\", this);\n+            controller.registerHandler(Method.PATCH, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+        }\n+    }\n+\n+    @Override\n+    protected void handleApiRequest(RestChannel channel, RestRequest request, Client client) throws IOException {\n+        if (!isSuperAdmin()) {\n+            forbidden(channel, \"API allowed only for admin.\");\n+            return;\n+        }\n+        super.handleApiRequest(channel, request, client);\n+    }\n+\n+    protected void consumeParameters(final RestRequest request) {\n+        request.param(\"name\");\n+        request.param(\"show_all\");\n+    }\n+\n+    @Override\n+    protected boolean isReservedAndAccessible(SecurityDynamicConfiguration<?> existingConfiguration, String name) {\n+        if (STATIC_ES_YML_NODES_DN.equals(name)) {\n+            return false;\n+        }\n+        return super.isReservedAndAccessible(existingConfiguration, name);\n+    }\n+\n+    @Override\n+    protected void handleGet(final RestChannel channel, RestRequest request, Client client, final JsonNode content) throws IOException {\n+        final String resourcename = request.param(\"name\");\n+\n+        final SecurityDynamicConfiguration<?> configuration = load(getConfigName(), true);\n+        filter(configuration);\n+\n+        // no specific resource requested, return complete config\n+        if (resourcename == null || resourcename.length() == 0) {\n+            final Boolean showAll = request.paramAsBoolean(\"show_all\", Boolean.FALSE);\n+            if (showAll) {\n+                putStaticEntry(configuration);\n+            }\n+            successResponse(channel, configuration);\n+            return;\n+        }\n+\n+        if (!configuration.exists(resourcename)) {\n+            notFound(channel, \"Resource '\" + resourcename + \"' not found.\");\n+            return;\n+        }\n+\n+        configuration.removeOthers(resourcename);\n+        successResponse(channel, configuration);\n+    }\n+\n+    private void putStaticEntry(SecurityDynamicConfiguration<?> configuration) {\n+        if (NodesDnV7.class.equals(configuration.getImplementingClass())) {\n+            NodesDnV7 nodesDnV7 = new NodesDnV7();\n+            nodesDnV7.setNodesDn(staticNodesDnFromEsYml);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkwNzM5MA==", "bodyText": "super admin check will be evaluated through handleApiRequest() ?", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r405907390", "createdAt": "2020-04-09T01:35:16Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/NodesDnApiAction.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package com.amazon.opendistroforelasticsearch.security.dlic.rest.api;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.AuditLog;\n+import com.amazon.opendistroforelasticsearch.security.configuration.AdminDNs;\n+import com.amazon.opendistroforelasticsearch.security.configuration.ConfigurationRepository;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.AbstractConfigurationValidator;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.NodesDnValidator;\n+import com.amazon.opendistroforelasticsearch.security.privileges.PrivilegesEvaluator;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.CType;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.SecurityDynamicConfiguration;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v6.NodesDnV6;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v7.NodesDnV7;\n+import com.amazon.opendistroforelasticsearch.security.ssl.transport.PrincipalExtractor;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.rest.RestChannel;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestRequest.Method;\n+import org.elasticsearch.threadpool.ThreadPool;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * This class implements CRUD operations to manage dynamic NodesDn. The primary usecase is targeted at cross-cluster where\n+ * in node restart can be avoided by populating the coordinating cluster's nodes_dn values.\n+ *\n+ * The APIs are only accessible to SuperAdmin since the configuration controls the core application layer trust validation.\n+ * By default the APIs are disabled and can be enabled by a YML setting - {@link ConfigConstants#OPENDISTRO_SECURITY_NODES_DN_DYNAMIC_CONFIG_ENABLED}\n+ *\n+ * The backing data is stored in {@link ConfigConstants#OPENDISTRO_SECURITY_CONFIG_INDEX_NAME} which is populated during bootstrap.\n+ * For existing clusters, {@link com.amazon.opendistroforelasticsearch.security.tools.OpenDistroSecurityAdmin} tool can\n+ * be used to populate the index.\n+ *\n+ * See {@link com.amazon.opendistroforelasticsearch.security.dlic.rest.api.NodesDnApiTest} for usage examples.\n+ */\n+public class NodesDnApiAction extends PatchableResourceApiAction {\n+    public static final String STATIC_ES_YML_NODES_DN = \"STATIC_ES_YML_NODES_DN\";\n+    private final List<String> staticNodesDnFromEsYml;\n+\n+    @Inject\n+    public NodesDnApiAction(final Settings settings, final Path configPath, final RestController controller, final Client client,\n+        final AdminDNs adminDNs, final ConfigurationRepository cl, final ClusterService cs,\n+        final PrincipalExtractor principalExtractor, final PrivilegesEvaluator evaluator, ThreadPool threadPool, AuditLog auditLog) {\n+        super(settings, configPath, controller, client, adminDNs, cl, cs, principalExtractor, evaluator, threadPool, auditLog);\n+        this.staticNodesDnFromEsYml = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN, Collections.emptyList());\n+    }\n+\n+    @Override\n+    protected void registerHandlers(RestController controller, Settings settings) {\n+        if (settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN_DYNAMIC_CONFIG_ENABLED, false)) {\n+            controller.registerHandler(Method.GET, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.GET, \"/_opendistro/_security/api/nodesdn/\", this);\n+            controller.registerHandler(Method.DELETE, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.PUT, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.PATCH, \"/_opendistro/_security/api/nodesdn/\", this);\n+            controller.registerHandler(Method.PATCH, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+        }\n+    }\n+\n+    @Override\n+    protected void handleApiRequest(RestChannel channel, RestRequest request, Client client) throws IOException {\n+        if (!isSuperAdmin()) {\n+            forbidden(channel, \"API allowed only for admin.\");\n+            return;\n+        }\n+        super.handleApiRequest(channel, request, client);\n+    }\n+\n+    protected void consumeParameters(final RestRequest request) {\n+        request.param(\"name\");\n+        request.param(\"show_all\");\n+    }\n+\n+    @Override\n+    protected boolean isReservedAndAccessible(SecurityDynamicConfiguration<?> existingConfiguration, String name) {\n+        if (STATIC_ES_YML_NODES_DN.equals(name)) {\n+            return false;\n+        }\n+        return super.isReservedAndAccessible(existingConfiguration, name);\n+    }\n+\n+    @Override\n+    protected void handleGet(final RestChannel channel, RestRequest request, Client client, final JsonNode content) throws IOException {\n+        final String resourcename = request.param(\"name\");\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkxMDY4OQ==", "bodyText": "where are we using isSuperAdmin boolean?", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r405910689", "createdAt": "2020-04-09T01:48:24Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/validation/NodesDnValidator.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package com.amazon.opendistroforelasticsearch.security.dlic.rest.validation;\n+\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.rest.RestRequest;\n+\n+public class NodesDnValidator extends AbstractConfigurationValidator {\n+\n+    public NodesDnValidator(final RestRequest request, boolean isSuperAdmin, final BytesReference ref, final Settings esSettings, Object... param) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkyNjgxMg==", "bodyText": "+1 about difference question,\nand as this is new configuration, do we really need  V6 as well? Are we supporting this for 6x and needed for 6.8 to 7.x migration?", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r405926812", "createdAt": "2020-04-09T02:51:31Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/DynamicConfigFactory.java", "diffHunk": "@@ -320,5 +328,39 @@ public String getHash(String user) {\n             return Collections.emptyList();\n         }\n     }\n+\n+    private static class NodesDnModelV7 extends NodesDnModel {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MTE2OA=="}, "originalCommit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkyODA2Nw==", "bodyText": "if both models are same, do we need migration?", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r405928067", "createdAt": "2020-04-09T02:56:34Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/Migration.java", "diffHunk": "@@ -96,7 +96,20 @@\n         }\n         return c7;\n     }\n-    \n+\n+    public static SecurityDynamicConfiguration<NodesDnV7> migrateNodesDn(SecurityDynamicConfiguration<NodesDnV6> n6) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkzNzY2NA==", "bodyText": "We are already listening changes and updating it\ndo we still need to make it volatile?", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r405937664", "createdAt": "2020-04-09T03:37:10Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/transport/DefaultInterClusterRequestEvaluator.java", "diffHunk": "@@ -47,15 +56,34 @@\n import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n import com.amazon.opendistroforelasticsearch.security.support.WildcardMatcher;\n \n-public final class DefaultInterClusterRequestEvaluator implements InterClusterRequestEvaluator {\n+public final class DefaultInterClusterRequestEvaluator implements InterClusterRequestEvaluator, DCFListener {\n \n     private final Logger log = LogManager.getLogger(this.getClass());\n     private final String certOid;\n-    private final List<String> nodesDn;\n+    private final List<String> staticNodesDnFromEsYml;\n+    private boolean dynamicNodesDnConfigEnabled;\n+    private volatile Map<String, List<String>> dynamicNodesDn;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkzNzg1Mw==", "bodyText": "what will happen during the node/cluster boot up time when .security_index is not available? dynamicNodesDn will be initialized with empty list?", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r405937853", "createdAt": "2020-04-09T03:37:56Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/transport/DefaultInterClusterRequestEvaluator.java", "diffHunk": "@@ -47,15 +56,34 @@\n import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n import com.amazon.opendistroforelasticsearch.security.support.WildcardMatcher;\n \n-public final class DefaultInterClusterRequestEvaluator implements InterClusterRequestEvaluator {\n+public final class DefaultInterClusterRequestEvaluator implements InterClusterRequestEvaluator, DCFListener {\n \n     private final Logger log = LogManager.getLogger(this.getClass());\n     private final String certOid;\n-    private final List<String> nodesDn;\n+    private final List<String> staticNodesDnFromEsYml;\n+    private boolean dynamicNodesDnConfigEnabled;\n+    private volatile Map<String, List<String>> dynamicNodesDn;\n \n     public DefaultInterClusterRequestEvaluator(final Settings settings) {\n         this.certOid = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CERT_OID, \"1.2.3.4.5.5\");\n-        this.nodesDn = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN, Collections.emptyList());\n+        this.staticNodesDnFromEsYml = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN, Collections.emptyList());\n+        this.dynamicNodesDnConfigEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN_DYNAMIC_CONFIG_ENABLED, false);\n+        this.dynamicNodesDn = Collections.emptyMap();\n+    }\n+\n+    public void subscribeForChanges(DynamicConfigFactory dynamicConfigFactory) {\n+        if (this.dynamicNodesDnConfigEnabled) {\n+            dynamicConfigFactory.registerDCFListener(this);\n+        }\n+    }\n+\n+    private List<String> getNodesDnToEvaluate() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk0MDEyNQ==", "bodyText": "should we also add -ve test? where we do not add new cert dynamically and statically?", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r405940125", "createdAt": "2020-04-09T03:47:58Z", "author": {"login": "hardik-k-shah"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/ccstest/CrossClusterSearchTests.java", "diffHunk": "@@ -827,4 +879,113 @@ public void testCcsAggregationsDnfof() throws Exception {\n         ccs = new RestHelper(cl1Info, false, false, getResourceFolder()).executePostRequest(\"cross_cluster_two:not*,notf*/_search?pretty\", agg, encodeBasicHeader(\"twitter\",\"nagilum\"));\n         Assert.assertEquals(HttpStatus.SC_OK, ccs.getStatusCode());\n     }\n-}\n\\ No newline at end of file\n+\n+\n+    private ClusterTransportClientSettings getBaseSettingsWithDifferentCert() {\n+        Settings cluster = Settings.builder()\n+            .put(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_HTTP_ENABLED, true)\n+            .put(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_HTTP_KEYSTORE_FILEPATH,\n+                FileHelper.getAbsoluteFilePathFromClassPath(\"restapi/node-0-keystore.jks\"))\n+            .put(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_HTTP_TRUSTSTORE_FILEPATH,\n+                FileHelper.getAbsoluteFilePathFromClassPath(\"restapi/truststore.jks\"))\n+            .put(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_KEYSTORE_FILEPATH, FileHelper.getAbsoluteFilePathFromClassPath(\"node-untspec5-keystore.p12\"))\n+            .put(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_KEYSTORE_ALIAS, \"1\")\n+            .put(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN_DYNAMIC_CONFIG_ENABLED, true)\n+            .put(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_KEYSTORE_TYPE, \"PKCS12\")\n+            .putList(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN,\n+                \"EMAILADDRESS=unt@tst.com,CN=node-untspec5.example.com,OU=SSL,O=Te\\\\, st,L=Test,C=DE\")//, \"CN=node-0.example.com,OU=SSL,O=Test,L=Test,C=DE\")\n+            .putList(ConfigConstants.OPENDISTRO_SECURITY_AUTHCZ_ADMIN_DN,\n+                \"EMAILADDRESS=unt@xxx.com,CN=node-untspec6.example.com,OU=SSL,O=Te\\\\, st,L=Test,C=DE\",\n+                \"CN=kirk,OU=client,O=client,l=tEst, C=De\")\n+            .put(ConfigConstants.OPENDISTRO_SECURITY_CERT_OID,\"1.2.3.4.5.6\")\n+            .build();\n+        Settings transport = Settings.builder()\n+            .put(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_KEYSTORE_FILEPATH, FileHelper.getAbsoluteFilePathFromClassPath(\"node-untspec6-keystore.p12\"))\n+            .build();\n+        return new ClusterTransportClientSettings(cluster, transport);\n+    }\n+\n+    private void populateBaseData(ClusterTransportClientSettings cluster1, ClusterTransportClientSettings cluster2) throws Exception {\n+        final String cl1BodyMain = rh1.executeGetRequest(\"\", encodeBasicHeader(\"twitter\",\"nagilum\")).getBody();\n+        Assert.assertTrue(cl1BodyMain, cl1BodyMain.contains(\"crl1\"));\n+\n+        final String cl2BodyMain = rh2.executeGetRequest(\"\", encodeBasicHeader(\"twitter\",\"nagilum\")).getBody();\n+        Assert.assertTrue(cl2BodyMain.contains(\"crl2\"));\n+\n+        try (TransportClient tc = getInternalTransportClient(cl1Info, cluster1.transportClientSettings())) {\n+            tc.index(new IndexRequest(\"twitter\").type(\"tweet\").setRefreshPolicy(RefreshPolicy.IMMEDIATE).id(\"0\")\n+                .source(\"{\\\"cluster\\\": \\\"\"+cl1Info.clustername+\"\\\"}\", XContentType.JSON)).actionGet();\n+        }\n+\n+        try (TransportClient tc = getInternalTransportClient(cl2Info, cluster2.transportClientSettings())) {\n+            tc.index(new IndexRequest(\"twitter\").type(\"tweet\").setRefreshPolicy(RefreshPolicy.IMMEDIATE).id(\"0\")\n+                .source(\"{\\\"cluster\\\": \\\"\"+cl2Info.clustername+\"\\\"}\", XContentType.JSON)).actionGet();\n+        }\n+    }\n+\n+    @Test\n+    public void testCcsWithDiffCertsWithNoNodesDnUpdate() throws Exception {\n+        final ClusterTransportClientSettings cluster1 = new ClusterTransportClientSettings();\n+        final ClusterTransportClientSettings cluster2 = getBaseSettingsWithDifferentCert();\n+\n+        setupCcs(new DynamicSecurityConfig(), cluster1, cluster2);\n+        populateBaseData(cluster1, cluster2);\n+\n+        String uri = \"cross_cluster_two:twitter/tweet/_search?pretty\";\n+        HttpResponse ccs = rh1.executeGetRequest(uri, encodeBasicHeader(\"twitter\", \"nagilum\"));\n+        System.out.println(ccs.getBody());\n+        assertThat(ccs.getStatusCode(), equalTo(HttpStatus.SC_INTERNAL_SERVER_ERROR));\n+        assertThat(ccs.getBody(), containsString(\"no OID or security.nodes_dn incorrect configured\"));\n+    }\n+\n+    @Test\n+    public void testCcsWithDiffCertsWithNodesDnStaticallyAdded() throws Exception {\n+        final ClusterTransportClientSettings cluster1 = new ClusterTransportClientSettings();\n+        ClusterTransportClientSettings cluster2 = getBaseSettingsWithDifferentCert();\n+        Settings updatedCluster2 = Settings.builder()\n+            .put(cluster2.clusterSettings())\n+            .putList(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN,\n+                \"EMAILADDRESS=unt@tst.com,CN=node-untspec5.example.com,OU=SSL,O=Te\\\\, st,L=Test,C=DE\",\n+                \"CN=node-0.example.com,OU=SSL,O=Test,L=Test,C=DE\")\n+            .build();\n+        cluster2 = new ClusterTransportClientSettings(updatedCluster2, cluster2.transportClientSettings());\n+\n+        setupCcs(new DynamicSecurityConfig(), cluster1, cluster2);\n+        populateBaseData(cluster1, cluster2);\n+\n+        String uri = \"cross_cluster_two:twitter/tweet/_search?pretty\";\n+        HttpResponse ccs = rh1.executeGetRequest(uri, encodeBasicHeader(\"twitter\", \"nagilum\"));\n+        System.out.println(ccs.getBody());\n+        assertThat(ccs.getStatusCode(), equalTo(HttpStatus.SC_OK));\n+        assertThat(ccs.getBody(), not(containsString(\"security_exception\")));\n+        assertThat(ccs.getBody(), containsString(\"\\\"timed_out\\\" : false\"));\n+        assertThat(ccs.getBody(), not(containsString(\"crl1\")));\n+        assertThat(ccs.getBody(), containsString(\"crl2\"));\n+        assertThat(ccs.getBody(), containsString(\"cross_cluster_two:twitter\"));\n+    }\n+\n+    @Test\n+    public void testCcsWithDiffCertsWithNodesDnDynamicallyAdded() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "originalPosition": 225}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e16f78df8763d1315cc32a34cdd835eafe2ddaf9", "author": {"user": {"login": "krishna-ggk", "name": "Gopala Krishna A"}}, "url": "https://github.com/opensearch-project/security/commit/e16f78df8763d1315cc32a34cdd835eafe2ddaf9", "committedDate": "2020-04-10T13:03:24Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19579db53f9150368efc97b26887396d9ebb4c46", "author": {"user": {"login": "krishna-ggk", "name": "Gopala Krishna A"}}, "url": "https://github.com/opensearch-project/security/commit/19579db53f9150368efc97b26887396d9ebb4c46", "committedDate": "2020-04-10T13:53:15Z", "message": "Merge NodesDnV7 and NodesDnV6."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "015e51a184434a493c399d7b12192d3a11f73246", "author": {"user": {"login": "krishna-ggk", "name": "Gopala Krishna A"}}, "url": "https://github.com/opensearch-project/security/commit/015e51a184434a493c399d7b12192d3a11f73246", "committedDate": "2020-04-10T14:03:49Z", "message": "Remove unused param in NodesDnValidator."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae636ae77b85ecbf143ea8a904f9490dbcbc5bda", "author": {"user": {"login": "krishna-ggk", "name": "Gopala Krishna A"}}, "url": "https://github.com/opensearch-project/security/commit/ae636ae77b85ecbf143ea8a904f9490dbcbc5bda", "committedDate": "2020-04-10T15:31:55Z", "message": "Ensure nodes_dn migration coverage."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2896c6cfae198ecc35fc460fd2550981e05d27b4", "author": {"user": {"login": "krishna-ggk", "name": "Gopala Krishna A"}}, "url": "https://github.com/opensearch-project/security/commit/2896c6cfae198ecc35fc460fd2550981e05d27b4", "committedDate": "2020-04-11T15:42:23Z", "message": "Remove unused imports."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62b578198a3a8179fff25d0c2b00c9eb4fb48269", "author": {"user": {"login": "krishna-ggk", "name": "Gopala Krishna A"}}, "url": "https://github.com/opensearch-project/security/commit/62b578198a3a8179fff25d0c2b00c9eb4fb48269", "committedDate": "2020-04-11T15:51:19Z", "message": "Remove terminal newline from unrelated files for NodesDn changes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24690d616eda6d1b194fbb9ed4e87b2589ac2ab3", "author": {"user": {"login": "krishna-ggk", "name": "Gopala Krishna A"}}, "url": "https://github.com/opensearch-project/security/commit/24690d616eda6d1b194fbb9ed4e87b2589ac2ab3", "committedDate": "2020-04-11T16:00:09Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cdd20b22ca37d7ee6e4166dbc2af29d932fbde75", "author": {"user": {"login": "krishna-ggk", "name": "Gopala Krishna A"}}, "url": "https://github.com/opensearch-project/security/commit/cdd20b22ca37d7ee6e4166dbc2af29d932fbde75", "committedDate": "2020-04-11T16:04:09Z", "message": "Switch from Guava EventBus to Greenrobot for DefaultInterClusterRequestEvaluator"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMDEzNzgx", "url": "https://github.com/opensearch-project/security/pull/362#pullrequestreview-392013781", "createdAt": "2020-04-13T08:05:37Z", "commit": {"oid": "cdd20b22ca37d7ee6e4166dbc2af29d932fbde75"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwODowNTozN1rOGEfy0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwODo1NTowM1rOGEg2Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM2ODQwMQ==", "bodyText": "Do we need some validation here of the input as we accepting directly List ?", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r407368401", "createdAt": "2020-04-13T08:05:37Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/validation/NodesDnValidator.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package com.amazon.opendistroforelasticsearch.security.dlic.rest.validation;\n+\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.rest.RestRequest;\n+\n+public class NodesDnValidator extends AbstractConfigurationValidator {\n+\n+    public NodesDnValidator(final RestRequest request, final BytesReference ref, final Settings esSettings, Object... param) {\n+        super(request, ref, esSettings, param);\n+        this.payloadMandatory = true;\n+\n+        allowedKeys.put(\"nodes_dn\", DataType.ARRAY);\n+        mandatoryKeys.add(\"nodes_dn\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd20b22ca37d7ee6e4166dbc2af29d932fbde75"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM3Mzg0MA==", "bodyText": "I am slightly confused here. isReservedAndAccessible checks if class implements StaticDefinable interface which NodeDn does not.\nDid you mean to override isReserved() here instead ?\nSince we are calling super.isReservedAndAccessible(), this function will always never return false ?", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r407373840", "createdAt": "2020-04-13T08:22:10Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/NodesDnApiAction.java", "diffHunk": "@@ -0,0 +1,145 @@\n+package com.amazon.opendistroforelasticsearch.security.dlic.rest.api;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.AuditLog;\n+import com.amazon.opendistroforelasticsearch.security.configuration.AdminDNs;\n+import com.amazon.opendistroforelasticsearch.security.configuration.ConfigurationRepository;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.AbstractConfigurationValidator;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.NodesDnValidator;\n+import com.amazon.opendistroforelasticsearch.security.privileges.PrivilegesEvaluator;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.CType;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.SecurityDynamicConfiguration;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.NodesDn;\n+import com.amazon.opendistroforelasticsearch.security.ssl.transport.PrincipalExtractor;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.rest.RestChannel;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestRequest.Method;\n+import org.elasticsearch.threadpool.ThreadPool;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * This class implements CRUD operations to manage dynamic NodesDn. The primary usecase is targeted at cross-cluster where\n+ * in node restart can be avoided by populating the coordinating cluster's nodes_dn values.\n+ *\n+ * The APIs are only accessible to SuperAdmin since the configuration controls the core application layer trust validation.\n+ * By default the APIs are disabled and can be enabled by a YML setting - {@link ConfigConstants#OPENDISTRO_SECURITY_NODES_DN_DYNAMIC_CONFIG_ENABLED}\n+ *\n+ * The backing data is stored in {@link ConfigConstants#OPENDISTRO_SECURITY_CONFIG_INDEX_NAME} which is populated during bootstrap.\n+ * For existing clusters, {@link com.amazon.opendistroforelasticsearch.security.tools.OpenDistroSecurityAdmin} tool can\n+ * be used to populate the index.\n+ *\n+ * See {@link com.amazon.opendistroforelasticsearch.security.dlic.rest.api.NodesDnApiTest} for usage examples.\n+ */\n+public class NodesDnApiAction extends PatchableResourceApiAction {\n+    public static final String STATIC_ES_YML_NODES_DN = \"STATIC_ES_YML_NODES_DN\";\n+    private final List<String> staticNodesDnFromEsYml;\n+\n+    @Inject\n+    public NodesDnApiAction(final Settings settings, final Path configPath, final RestController controller, final Client client,\n+        final AdminDNs adminDNs, final ConfigurationRepository cl, final ClusterService cs,\n+        final PrincipalExtractor principalExtractor, final PrivilegesEvaluator evaluator, ThreadPool threadPool, AuditLog auditLog) {\n+        super(settings, configPath, controller, client, adminDNs, cl, cs, principalExtractor, evaluator, threadPool, auditLog);\n+        this.staticNodesDnFromEsYml = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN, Collections.emptyList());\n+    }\n+\n+    @Override\n+    protected void registerHandlers(RestController controller, Settings settings) {\n+        if (settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN_DYNAMIC_CONFIG_ENABLED, false)) {\n+            controller.registerHandler(Method.GET, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.GET, \"/_opendistro/_security/api/nodesdn/\", this);\n+            controller.registerHandler(Method.DELETE, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.PUT, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.PATCH, \"/_opendistro/_security/api/nodesdn/\", this);\n+            controller.registerHandler(Method.PATCH, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+        }\n+    }\n+\n+    @Override\n+    protected void handleApiRequest(RestChannel channel, RestRequest request, Client client) throws IOException {\n+        if (!isSuperAdmin()) {\n+            forbidden(channel, \"API allowed only for admin.\");\n+            return;\n+        }\n+        super.handleApiRequest(channel, request, client);\n+    }\n+\n+    protected void consumeParameters(final RestRequest request) {\n+        request.param(\"name\");\n+        request.param(\"show_all\");\n+    }\n+\n+    @Override\n+    protected boolean isReservedAndAccessible(SecurityDynamicConfiguration<?> existingConfiguration, String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd20b22ca37d7ee6e4166dbc2af29d932fbde75"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM3NTEzMw==", "bodyText": "Is this gonna handle a PUT request of this form ? PUT /_opendistro/_security/api/nodesdn/STATIC_ES_YML_NODES_DN  ? as thats what is passed as name.", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r407375133", "createdAt": "2020-04-13T08:25:46Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/NodesDnApiAction.java", "diffHunk": "@@ -0,0 +1,145 @@\n+package com.amazon.opendistroforelasticsearch.security.dlic.rest.api;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.AuditLog;\n+import com.amazon.opendistroforelasticsearch.security.configuration.AdminDNs;\n+import com.amazon.opendistroforelasticsearch.security.configuration.ConfigurationRepository;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.AbstractConfigurationValidator;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.NodesDnValidator;\n+import com.amazon.opendistroforelasticsearch.security.privileges.PrivilegesEvaluator;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.CType;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.SecurityDynamicConfiguration;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.NodesDn;\n+import com.amazon.opendistroforelasticsearch.security.ssl.transport.PrincipalExtractor;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.rest.RestChannel;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestRequest.Method;\n+import org.elasticsearch.threadpool.ThreadPool;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * This class implements CRUD operations to manage dynamic NodesDn. The primary usecase is targeted at cross-cluster where\n+ * in node restart can be avoided by populating the coordinating cluster's nodes_dn values.\n+ *\n+ * The APIs are only accessible to SuperAdmin since the configuration controls the core application layer trust validation.\n+ * By default the APIs are disabled and can be enabled by a YML setting - {@link ConfigConstants#OPENDISTRO_SECURITY_NODES_DN_DYNAMIC_CONFIG_ENABLED}\n+ *\n+ * The backing data is stored in {@link ConfigConstants#OPENDISTRO_SECURITY_CONFIG_INDEX_NAME} which is populated during bootstrap.\n+ * For existing clusters, {@link com.amazon.opendistroforelasticsearch.security.tools.OpenDistroSecurityAdmin} tool can\n+ * be used to populate the index.\n+ *\n+ * See {@link com.amazon.opendistroforelasticsearch.security.dlic.rest.api.NodesDnApiTest} for usage examples.\n+ */\n+public class NodesDnApiAction extends PatchableResourceApiAction {\n+    public static final String STATIC_ES_YML_NODES_DN = \"STATIC_ES_YML_NODES_DN\";\n+    private final List<String> staticNodesDnFromEsYml;\n+\n+    @Inject\n+    public NodesDnApiAction(final Settings settings, final Path configPath, final RestController controller, final Client client,\n+        final AdminDNs adminDNs, final ConfigurationRepository cl, final ClusterService cs,\n+        final PrincipalExtractor principalExtractor, final PrivilegesEvaluator evaluator, ThreadPool threadPool, AuditLog auditLog) {\n+        super(settings, configPath, controller, client, adminDNs, cl, cs, principalExtractor, evaluator, threadPool, auditLog);\n+        this.staticNodesDnFromEsYml = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN, Collections.emptyList());\n+    }\n+\n+    @Override\n+    protected void registerHandlers(RestController controller, Settings settings) {\n+        if (settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN_DYNAMIC_CONFIG_ENABLED, false)) {\n+            controller.registerHandler(Method.GET, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.GET, \"/_opendistro/_security/api/nodesdn/\", this);\n+            controller.registerHandler(Method.DELETE, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.PUT, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.PATCH, \"/_opendistro/_security/api/nodesdn/\", this);\n+            controller.registerHandler(Method.PATCH, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+        }\n+    }\n+\n+    @Override\n+    protected void handleApiRequest(RestChannel channel, RestRequest request, Client client) throws IOException {\n+        if (!isSuperAdmin()) {\n+            forbidden(channel, \"API allowed only for admin.\");\n+            return;\n+        }\n+        super.handleApiRequest(channel, request, client);\n+    }\n+\n+    protected void consumeParameters(final RestRequest request) {\n+        request.param(\"name\");\n+        request.param(\"show_all\");\n+    }\n+\n+    @Override\n+    protected boolean isReservedAndAccessible(SecurityDynamicConfiguration<?> existingConfiguration, String name) {\n+        if (STATIC_ES_YML_NODES_DN.equals(name)) {\n+            return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd20b22ca37d7ee6e4166dbc2af29d932fbde75"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM3NjkxOA==", "bodyText": "Can the API be blocked from RestApiPrivilegeEvaluator instead of doing this here?\nhttps://github.com/opendistro-for-elasticsearch/security/blob/master/src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/RestApiPrivilegesEvaluator.java#L213", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r407376918", "createdAt": "2020-04-13T08:30:34Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/NodesDnApiAction.java", "diffHunk": "@@ -0,0 +1,145 @@\n+package com.amazon.opendistroforelasticsearch.security.dlic.rest.api;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.AuditLog;\n+import com.amazon.opendistroforelasticsearch.security.configuration.AdminDNs;\n+import com.amazon.opendistroforelasticsearch.security.configuration.ConfigurationRepository;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.AbstractConfigurationValidator;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.NodesDnValidator;\n+import com.amazon.opendistroforelasticsearch.security.privileges.PrivilegesEvaluator;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.CType;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.SecurityDynamicConfiguration;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.NodesDn;\n+import com.amazon.opendistroforelasticsearch.security.ssl.transport.PrincipalExtractor;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.rest.RestChannel;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestRequest.Method;\n+import org.elasticsearch.threadpool.ThreadPool;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * This class implements CRUD operations to manage dynamic NodesDn. The primary usecase is targeted at cross-cluster where\n+ * in node restart can be avoided by populating the coordinating cluster's nodes_dn values.\n+ *\n+ * The APIs are only accessible to SuperAdmin since the configuration controls the core application layer trust validation.\n+ * By default the APIs are disabled and can be enabled by a YML setting - {@link ConfigConstants#OPENDISTRO_SECURITY_NODES_DN_DYNAMIC_CONFIG_ENABLED}\n+ *\n+ * The backing data is stored in {@link ConfigConstants#OPENDISTRO_SECURITY_CONFIG_INDEX_NAME} which is populated during bootstrap.\n+ * For existing clusters, {@link com.amazon.opendistroforelasticsearch.security.tools.OpenDistroSecurityAdmin} tool can\n+ * be used to populate the index.\n+ *\n+ * See {@link com.amazon.opendistroforelasticsearch.security.dlic.rest.api.NodesDnApiTest} for usage examples.\n+ */\n+public class NodesDnApiAction extends PatchableResourceApiAction {\n+    public static final String STATIC_ES_YML_NODES_DN = \"STATIC_ES_YML_NODES_DN\";\n+    private final List<String> staticNodesDnFromEsYml;\n+\n+    @Inject\n+    public NodesDnApiAction(final Settings settings, final Path configPath, final RestController controller, final Client client,\n+        final AdminDNs adminDNs, final ConfigurationRepository cl, final ClusterService cs,\n+        final PrincipalExtractor principalExtractor, final PrivilegesEvaluator evaluator, ThreadPool threadPool, AuditLog auditLog) {\n+        super(settings, configPath, controller, client, adminDNs, cl, cs, principalExtractor, evaluator, threadPool, auditLog);\n+        this.staticNodesDnFromEsYml = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN, Collections.emptyList());\n+    }\n+\n+    @Override\n+    protected void registerHandlers(RestController controller, Settings settings) {\n+        if (settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN_DYNAMIC_CONFIG_ENABLED, false)) {\n+            controller.registerHandler(Method.GET, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.GET, \"/_opendistro/_security/api/nodesdn/\", this);\n+            controller.registerHandler(Method.DELETE, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.PUT, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.PATCH, \"/_opendistro/_security/api/nodesdn/\", this);\n+            controller.registerHandler(Method.PATCH, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+        }\n+    }\n+\n+    @Override\n+    protected void handleApiRequest(RestChannel channel, RestRequest request, Client client) throws IOException {\n+        if (!isSuperAdmin()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd20b22ca37d7ee6e4166dbc2af29d932fbde75"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM4MjQ0NQ==", "bodyText": "Do we reach this stage when node is re-started or opendistro index is already initialized ? I assumed it would throw exception from line #136 ? ResourceAlreadyExistsException", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r407382445", "createdAt": "2020-04-13T08:46:16Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/ConfigurationRepository.java", "diffHunk": "@@ -144,14 +138,16 @@ public void run() {\n                                             .actionGet().isAcknowledged();\n                                     LOGGER.info(\"Index {} created?: {}\", opendistrosecurityIndex, ok);\n                                     if(ok) {\n-                                        ConfigHelper.uploadFile(client, cd+\"config.yml\", opendistrosecurityIndex, CType.CONFIG, configVersion);\n-                                        ConfigHelper.uploadFile(client, cd+\"roles.yml\", opendistrosecurityIndex, CType.ROLES, configVersion);\n-                                        ConfigHelper.uploadFile(client, cd+\"roles_mapping.yml\", opendistrosecurityIndex, CType.ROLESMAPPING, configVersion);\n-                                        ConfigHelper.uploadFile(client, cd+\"internal_users.yml\", opendistrosecurityIndex, CType.INTERNALUSERS, configVersion);\n-                                        ConfigHelper.uploadFile(client, cd+\"action_groups.yml\", opendistrosecurityIndex, CType.ACTIONGROUPS, configVersion);\n-                                        if(configVersion == 2) {\n-                                            ConfigHelper.uploadFile(client, cd+\"tenants.yml\", opendistrosecurityIndex, CType.TENANTS, configVersion);\n+                                        ConfigHelper.uploadFile(client, cd+\"config.yml\", opendistrosecurityIndex, CType.CONFIG, DEFAULT_CONFIG_VERSION);\n+                                        ConfigHelper.uploadFile(client, cd+\"roles.yml\", opendistrosecurityIndex, CType.ROLES, DEFAULT_CONFIG_VERSION);\n+                                        ConfigHelper.uploadFile(client, cd+\"roles_mapping.yml\", opendistrosecurityIndex, CType.ROLESMAPPING, DEFAULT_CONFIG_VERSION);\n+                                        ConfigHelper.uploadFile(client, cd+\"internal_users.yml\", opendistrosecurityIndex, CType.INTERNALUSERS, DEFAULT_CONFIG_VERSION);\n+                                        ConfigHelper.uploadFile(client, cd+\"action_groups.yml\", opendistrosecurityIndex, CType.ACTIONGROUPS, DEFAULT_CONFIG_VERSION);\n+                                        if(DEFAULT_CONFIG_VERSION == 2) {\n+                                            ConfigHelper.uploadFile(client, cd+\"tenants.yml\", opendistrosecurityIndex, CType.TENANTS, DEFAULT_CONFIG_VERSION);\n                                         }\n+                                        final boolean populateEmptyIfFileMissing = true;\n+                                        ConfigHelper.uploadFile(client, cd+\"nodes_dn.yml\", opendistrosecurityIndex, CType.NODESDN, DEFAULT_CONFIG_VERSION, populateEmptyIfFileMissing);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd20b22ca37d7ee6e4166dbc2af29d932fbde75"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM4NDk5MQ==", "bodyText": "Do we need this populateEmptyIfFileMissing logic? Can we add the file and assume the file to exists in the builds like we do for other configs in securityconfig dir ?", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r407384991", "createdAt": "2020-04-13T08:53:15Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/support/ConfigHelper.java", "diffHunk": "@@ -70,11 +78,36 @@ public static void uploadFile(Client tc, String filepath, String index, CType cT\n                 throw new Exception(\"   FAIL: Configuration for '\" + cType.toLCString()\n                         + \"' failed for unknown reasons. Pls. consult logfile of elasticsearch\");\n             }\n-        } catch (Exception e) {\n-            throw e;\n         }\n     }\n-    \n+\n+    public static Reader createFileOrStringReader(CType cType, int configVersion, String filepath, boolean populateEmptyIfFileMissing) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd20b22ca37d7ee6e4166dbc2af29d932fbde75"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM4NTYxMQ==", "bodyText": "Do need any of these imports? Just seeing the diff", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r407385611", "createdAt": "2020-04-13T08:55:03Z", "author": {"login": "sujithvm"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/SecurityAdminMigrationTests.java", "diffHunk": "@@ -21,6 +21,9 @@\n import java.util.ArrayList;\n import java.util.List;\n \n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.CType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd20b22ca37d7ee6e4166dbc2af29d932fbde75"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02f2502f1808e7ec06048330c433ca1c8d83ec6d", "author": {"user": {"login": "krishna-ggk", "name": "Gopala Krishna A"}}, "url": "https://github.com/opensearch-project/security/commit/02f2502f1808e7ec06048330c433ca1c8d83ec6d", "committedDate": "2020-04-13T14:19:12Z", "message": "Remove unused import - try-2 :("}}, {"__typename": "PullRequestCommit", "commit": {"oid": "956daf8ecac65d1a274965bc76b8b233264f1431", "author": {"user": {"login": "krishna-ggk", "name": "Gopala Krishna A"}}, "url": "https://github.com/opensearch-project/security/commit/956daf8ecac65d1a274965bc76b8b233264f1431", "committedDate": "2020-04-14T08:13:38Z", "message": "Address remaining comments.\n\n- Added a test to validate audit logging\n- Added copyright headers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dec1411040d583b91c6250aa273eb2f673150830", "author": {"user": {"login": "krishna-ggk", "name": "Gopala Krishna A"}}, "url": "https://github.com/opensearch-project/security/commit/dec1411040d583b91c6250aa273eb2f673150830", "committedDate": "2020-04-14T14:56:23Z", "message": "Changes in Migrater to also migrate NodesDn."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f651c7e2fe63654d4a6d207df9bbd9bd73dfc9bb", "author": {"user": {"login": "krishna-ggk", "name": "Gopala Krishna A"}}, "url": "https://github.com/opensearch-project/security/commit/f651c7e2fe63654d4a6d207df9bbd9bd73dfc9bb", "committedDate": "2020-04-14T19:05:02Z", "message": "Fix the default legacy config for nodes_dn.\n\nWhile backporting to 0.9, I realized an empty YAML file results in parse\nfailures as it expects an object. So use \"{}\" as default content."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MDYwMzgy", "url": "https://github.com/opensearch-project/security/pull/362#pullrequestreview-395060382", "createdAt": "2020-04-16T23:11:43Z", "commit": {"oid": "f651c7e2fe63654d4a6d207df9bbd9bd73dfc9bb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MDk2OTE5", "url": "https://github.com/opensearch-project/security/pull/362#pullrequestreview-395096919", "createdAt": "2020-04-17T01:03:59Z", "commit": {"oid": "f651c7e2fe63654d4a6d207df9bbd9bd73dfc9bb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2865, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}