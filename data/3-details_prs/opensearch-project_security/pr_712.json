{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzODIzODAw", "number": 712, "title": "Adding support for SSL dual mode", "bodyText": "Description of changes:\nAdding support for SSL dual mode to enable migration of a non EIT (Encryption in transit) cluster to EIT enabled cluster.\nSummary of changes:\n\nConfiguration to enable dual ssl mode\nOpenDistroPortUnificationHandler for dual mode SSL server\nCustom logic on client side to detect ssl / non ssl connection to server when dual mode is enabled\nCorresponding updates to UTs and ITs\n\nSSL Dual mode can be enabled by adding below configuration to elasticsearch.yml:\nopendistro_security_config.ssl_dual_mode_enabled: true\n\nThe SSL Dual mode can be enabled / disabled using the cluster settings api.\nCurrently SSL Dual mode is supported only when opendistro_security.ssl_only: true is set, support for migration for non ssl only (i.e. full mode) is enabled will be covered later.\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-09-10T13:03:21Z", "url": "https://github.com/opensearch-project/security/pull/712", "merged": true, "mergeCommit": {"oid": "27f33fba5cfe9c1b6882cb531bbe8c0ac6d4fa9f"}, "closed": true, "closedAt": "2020-10-19T19:58:28Z", "author": {"login": "sachetalva"}, "timelineItems": {"totalCount": 56, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-HEuagH2gAyNDgzODIzODAwOjA2YTlkNDQ5YzZhYWRhOTdjNzE1NDM0MjBlNzhhZmNlNTMyMzM2Mjk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdUJujhgFqTUxMjExMDgwMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "06a9d449c6aada97c71543420e78afce53233629", "author": {"user": null}, "url": "https://github.com/opensearch-project/security/commit/06a9d449c6aada97c71543420e78afce53233629", "committedDate": "2020-08-12T08:23:53Z", "message": "Adding SSL dual mode support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fcf1708bb7e7c186139b286e13afb94334a6f782", "author": {"user": {"login": "sachetalva", "name": "Sachet Alva"}}, "url": "https://github.com/opensearch-project/security/commit/fcf1708bb7e7c186139b286e13afb94334a6f782", "committedDate": "2020-08-12T11:49:18Z", "message": "Adding socket timeout to dual mode client channel init"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5285fc60ed629ca4280b586690c3d3d75a49d4b8", "author": {"user": null}, "url": "https://github.com/opensearch-project/security/commit/5285fc60ed629ca4280b586690c3d3d75a49d4b8", "committedDate": "2020-08-17T04:55:05Z", "message": "Refactoring + adding rest handler to disable dual mode + UT for port unification handler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3be0a4a245d9805a7611b57a0c1798810589440", "author": {"user": null}, "url": "https://github.com/opensearch-project/security/commit/e3be0a4a245d9805a7611b57a0c1798810589440", "committedDate": "2020-08-18T07:13:21Z", "message": "Adding UT for SSLUtil + IT for dual mode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52e579f185c29f2a2ad6de26da58044982c00710", "author": {"user": {"login": "sachetalva", "name": "Sachet Alva"}}, "url": "https://github.com/opensearch-project/security/commit/52e579f185c29f2a2ad6de26da58044982c00710", "committedDate": "2020-08-19T05:31:35Z", "message": "Adding handling for dual mode client ssl connection failure in client initChannel"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f30decea82c7984c7b80ee4dbd42909eaad3b0b9", "author": {"user": null}, "url": "https://github.com/opensearch-project/security/commit/f30decea82c7984c7b80ee4dbd42909eaad3b0b9", "committedDate": "2020-08-20T04:03:08Z", "message": "Adding integ test to invoke new dual mode SSL API's"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19b18d9fd37a1ee50c845a86e02f777eac78c397", "author": {"user": null}, "url": "https://github.com/opensearch-project/security/commit/19b18d9fd37a1ee50c845a86e02f777eac78c397", "committedDate": "2020-08-20T12:23:04Z", "message": "Adding custom protocol to check if dual or not in server handler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5a5ef6c3a5f638749f36616625fe7c7e1e08d99", "author": {"user": null}, "url": "https://github.com/opensearch-project/security/commit/e5a5ef6c3a5f638749f36616625fe7c7e1e08d99", "committedDate": "2020-08-20T12:23:46Z", "message": "Changes to enable dual mode when ES  boots up (will remove this when merging with master)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4162c9c93fbf536c26d1da702e34fc6eecb7669d", "author": {"user": {"login": "sachetalva", "name": "Sachet Alva"}}, "url": "https://github.com/opensearch-project/security/commit/4162c9c93fbf536c26d1da702e34fc6eecb7669d", "committedDate": "2020-08-24T13:39:16Z", "message": "Added custom dual ssl protocol handling in client and port unification server"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76950db4eb61edf902c781de4557b64a4408a585", "author": {"user": {"login": "sachetalva", "name": "Sachet Alva"}}, "url": "https://github.com/opensearch-project/security/commit/76950db4eb61edf902c781de4557b64a4408a585", "committedDate": "2020-08-26T12:27:43Z", "message": "Added UTs for SSLConnectionTestUtil"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12ab0b8337068ada99dadee94d9430d96e8942f9", "author": {"user": {"login": "sachetalva", "name": "Sachet Alva"}}, "url": "https://github.com/opensearch-project/security/commit/12ab0b8337068ada99dadee94d9430d96e8942f9", "committedDate": "2020-08-27T12:51:21Z", "message": "Updated Dual SSL client connection steps"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "329de42c4182a27be4684b8a9a294d4136d809e1", "author": {"user": {"login": "sachetalva", "name": "Sachet Alva"}}, "url": "https://github.com/opensearch-project/security/commit/329de42c4182a27be4684b8a9a294d4136d809e1", "committedDate": "2020-09-02T11:04:33Z", "message": "Minor fixes and refactoring for dual mode ssl changes as per PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "758f6f19a72b89b46d5d4e0d25467e15306929b8", "author": {"user": {"login": "sachetalva", "name": "Sachet Alva"}}, "url": "https://github.com/opensearch-project/security/commit/758f6f19a72b89b46d5d4e0d25467e15306929b8", "committedDate": "2020-09-08T12:26:15Z", "message": "Merge pull request #1 from vengadanathan-s/vengad\n\nAdding support for SSL dual mode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e19fea41f24ea488aaf0d85b1030c84028ea5589", "author": {"user": null}, "url": "https://github.com/opensearch-project/security/commit/e19fea41f24ea488aaf0d85b1030c84028ea5589", "committedDate": "2020-09-08T12:39:23Z", "message": "Adding SSL dual mode support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b21c67d8f4ac24a7fee111cd5220fa55709c2d43", "author": {"user": {"login": "sachetalva", "name": "Sachet Alva"}}, "url": "https://github.com/opensearch-project/security/commit/b21c67d8f4ac24a7fee111cd5220fa55709c2d43", "committedDate": "2020-09-08T12:39:23Z", "message": "Adding socket timeout to dual mode client channel init"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "156aa24c496ffb0ca06618510755dcd337cee85d", "author": {"user": null}, "url": "https://github.com/opensearch-project/security/commit/156aa24c496ffb0ca06618510755dcd337cee85d", "committedDate": "2020-09-08T12:39:23Z", "message": "Refactoring + adding rest handler to disable dual mode + UT for port unification handler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9be603dca268bb4c2a4c8b30c758967317433a01", "author": {"user": null}, "url": "https://github.com/opensearch-project/security/commit/9be603dca268bb4c2a4c8b30c758967317433a01", "committedDate": "2020-09-08T12:39:23Z", "message": "Adding UT for SSLUtil + IT for dual mode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98bff23b5575479c08cca730156415a964e6c4df", "author": {"user": {"login": "sachetalva", "name": "Sachet Alva"}}, "url": "https://github.com/opensearch-project/security/commit/98bff23b5575479c08cca730156415a964e6c4df", "committedDate": "2020-09-08T12:39:23Z", "message": "Adding handling for dual mode client ssl connection failure in client initChannel"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e862e8fefbb6c270f47cda0b22beeb20d6d407e6", "author": {"user": null}, "url": "https://github.com/opensearch-project/security/commit/e862e8fefbb6c270f47cda0b22beeb20d6d407e6", "committedDate": "2020-09-08T12:39:23Z", "message": "Adding integ test to invoke new dual mode SSL API's"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "975d47b03042156803b86fe142d0b407acb6a06a", "author": {"user": null}, "url": "https://github.com/opensearch-project/security/commit/975d47b03042156803b86fe142d0b407acb6a06a", "committedDate": "2020-09-08T12:39:23Z", "message": "Adding custom protocol to check if dual or not in server handler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0845cf5dfb8b801268ef3f99c5a95d8afefa5bc2", "author": {"user": null}, "url": "https://github.com/opensearch-project/security/commit/0845cf5dfb8b801268ef3f99c5a95d8afefa5bc2", "committedDate": "2020-09-08T12:39:24Z", "message": "Changes to enable dual mode when ES  boots up (will remove this when merging with master)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "513894cfb728280bbad177cef9bb73a6867d7e0b", "author": {"user": {"login": "sachetalva", "name": "Sachet Alva"}}, "url": "https://github.com/opensearch-project/security/commit/513894cfb728280bbad177cef9bb73a6867d7e0b", "committedDate": "2020-09-08T12:39:24Z", "message": "Added custom dual ssl protocol handling in client and port unification server"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5715d5e68c1ddd2e1f6eef9329ef7e551afd463", "author": {"user": {"login": "sachetalva", "name": "Sachet Alva"}}, "url": "https://github.com/opensearch-project/security/commit/d5715d5e68c1ddd2e1f6eef9329ef7e551afd463", "committedDate": "2020-09-08T12:39:24Z", "message": "Added UTs for SSLConnectionTestUtil"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "046910e10b90ef26f19400aaba37f586e594db13", "author": {"user": {"login": "sachetalva", "name": "Sachet Alva"}}, "url": "https://github.com/opensearch-project/security/commit/046910e10b90ef26f19400aaba37f586e594db13", "committedDate": "2020-09-08T12:39:24Z", "message": "Updated Dual SSL client connection steps"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a783407edf9b791d216b4f60ac20000e369a9dc", "author": {"user": {"login": "sachetalva", "name": "Sachet Alva"}}, "url": "https://github.com/opensearch-project/security/commit/8a783407edf9b791d216b4f60ac20000e369a9dc", "committedDate": "2020-09-08T12:39:24Z", "message": "Minor fixes and refactoring for dual mode ssl changes as per PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50fe7ab3c3812f346102219b35194e24e1ab5f6b", "author": {"user": {"login": "sachetalva", "name": "Sachet Alva"}}, "url": "https://github.com/opensearch-project/security/commit/50fe7ab3c3812f346102219b35194e24e1ab5f6b", "committedDate": "2020-09-08T12:44:39Z", "message": "Merge branch 'master' of https://github.com/vengadanathan-s/opendistro-security"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7eddc684da2bbab3d2e016a71fe462f7562a10fb", "author": {"user": {"login": "sachetalva", "name": "Sachet Alva"}}, "url": "https://github.com/opensearch-project/security/commit/7eddc684da2bbab3d2e016a71fe462f7562a10fb", "committedDate": "2020-09-10T12:29:24Z", "message": "Adding timeout to ssl connection test sockets"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6", "author": {"user": {"login": "sachetalva", "name": "Sachet Alva"}}, "url": "https://github.com/opensearch-project/security/commit/0e88e06b71f24f331eadb491d6a0e1aeed9023c6", "committedDate": "2020-09-18T09:09:19Z", "message": "Adding enable api for ssl dual mode"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxOTczNTkx", "url": "https://github.com/opensearch-project/security/pull/712#pullrequestreview-491973591", "createdAt": "2020-09-19T05:51:43Z", "commit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwNTo1MTo0M1rOHUhSVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNTowMjozMVrOHVAwdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI3ODkzNQ==", "bodyText": "Please avoid wildcard imports and changes to import order", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r491278935", "createdAt": "2020-09-19T05:51:43Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -50,11 +50,13 @@\n import com.amazon.opendistroforelasticsearch.security.auditlog.NullAuditLog;\n import com.amazon.opendistroforelasticsearch.security.configuration.OpenDistroSecurityFlsDlsIndexSearcherWrapper;\n import com.amazon.opendistroforelasticsearch.security.configuration.Salt;\n+import com.amazon.opendistroforelasticsearch.security.rest.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI3OTk5Ng==", "bodyText": "Why it does not apply to not sslOnly?", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r491279996", "createdAt": "2020-09-19T05:54:51Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -451,6 +448,10 @@ private boolean checkFilePermissions(final Path p) {\n \n             handlers.addAll(super.getRestHandlers(settings, restController, clusterSettings, indexScopedSettings, settingsFilter, indexNameExpressionResolver, nodesInCluster));\n \n+            if(sslOnly){\n+                handlers.add(new SSLDualModeAction(settings, clusterSettings));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI4MDY2OQ==", "bodyText": "There is already check for sslOnly, use else", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r491280669", "createdAt": "2020-09-19T05:56:38Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -451,6 +448,10 @@ private boolean checkFilePermissions(final Path p) {\n \n             handlers.addAll(super.getRestHandlers(settings, restController, clusterSettings, indexScopedSettings, settingsFilter, indexNameExpressionResolver, nodesInCluster));\n \n+            if(sslOnly){\n+                handlers.add(new SSLDualModeAction(settings, clusterSettings));\n+            }\n+\n             if(!sslOnly) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI4MDgzMg==", "bodyText": "avoid format only changes", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r491280832", "createdAt": "2020-09-19T05:56:57Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -616,7 +617,6 @@ public void validateSearchContext(SearchContext context, TransportRequest transp\n     @Override\n     public List<TransportInterceptor> getTransportInterceptors(NamedWriteableRegistry namedWriteableRegistry, ThreadContext threadContext) {\n         List<TransportInterceptor> interceptors = new ArrayList<TransportInterceptor>(1);\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI4Mzc4OA==", "bodyText": "Remove Portions, Amazon has full copyright on this file (and all other new files)", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r491283788", "createdAt": "2020-09-19T06:05:59Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroPortUnificationHandler.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Portions Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI4Mzg5Mw==", "bodyText": "Declare static before not static.", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r491283893", "createdAt": "2020-09-19T06:06:21Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroPortUnificationHandler.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Portions Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+package com.amazon.opendistroforelasticsearch.security.ssl.transport;\n+\n+\n+import com.amazon.opendistroforelasticsearch.security.ssl.OpenDistroSecurityKeyStore;\n+import com.amazon.opendistroforelasticsearch.security.ssl.util.SSLConnectionTestUtil;\n+import com.amazon.opendistroforelasticsearch.security.ssl.util.SSLUtil;\n+import com.google.common.annotations.VisibleForTesting;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.ChannelFutureListener;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.handler.codec.ByteToMessageDecoder;\n+import io.netty.handler.ssl.SslHandler;\n+import java.nio.charset.StandardCharsets;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import javax.net.ssl.SSLException;\n+import java.util.List;\n+\n+/**\n+ * Modifies the current pipeline dynamically to enable TLS\n+ */\n+public class OpenDistroPortUnificationHandler extends ByteToMessageDecoder {\n+\n+    private final OpenDistroSecurityKeyStore odsks;\n+    private static final Logger logger = LogManager.getLogger(OpenDistroPortUnificationHandler.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI4NDA4MA==", "bodyText": "use different from odsks name.", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r491284080", "createdAt": "2020-09-19T06:06:57Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroPortUnificationHandler.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Portions Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+package com.amazon.opendistroforelasticsearch.security.ssl.transport;\n+\n+\n+import com.amazon.opendistroforelasticsearch.security.ssl.OpenDistroSecurityKeyStore;\n+import com.amazon.opendistroforelasticsearch.security.ssl.util.SSLConnectionTestUtil;\n+import com.amazon.opendistroforelasticsearch.security.ssl.util.SSLUtil;\n+import com.google.common.annotations.VisibleForTesting;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.ChannelFutureListener;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.handler.codec.ByteToMessageDecoder;\n+import io.netty.handler.ssl.SslHandler;\n+import java.nio.charset.StandardCharsets;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import javax.net.ssl.SSLException;\n+import java.util.List;\n+\n+/**\n+ * Modifies the current pipeline dynamically to enable TLS\n+ */\n+public class OpenDistroPortUnificationHandler extends ByteToMessageDecoder {\n+\n+    private final OpenDistroSecurityKeyStore odsks;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI4NDE4OA==", "bodyText": "both should be final", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r491284188", "createdAt": "2020-09-19T06:07:21Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroPortUnificationHandler.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Portions Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+package com.amazon.opendistroforelasticsearch.security.ssl.transport;\n+\n+\n+import com.amazon.opendistroforelasticsearch.security.ssl.OpenDistroSecurityKeyStore;\n+import com.amazon.opendistroforelasticsearch.security.ssl.util.SSLConnectionTestUtil;\n+import com.amazon.opendistroforelasticsearch.security.ssl.util.SSLUtil;\n+import com.google.common.annotations.VisibleForTesting;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.ChannelFutureListener;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.handler.codec.ByteToMessageDecoder;\n+import io.netty.handler.ssl.SslHandler;\n+import java.nio.charset.StandardCharsets;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import javax.net.ssl.SSLException;\n+import java.util.List;\n+\n+/**\n+ * Modifies the current pipeline dynamically to enable TLS\n+ */\n+public class OpenDistroPortUnificationHandler extends ByteToMessageDecoder {\n+\n+    private final OpenDistroSecurityKeyStore odsks;\n+    private static final Logger logger = LogManager.getLogger(OpenDistroPortUnificationHandler.class);\n+\n+    private SslHandler providedSSLHandler;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc5NDA5Ng==", "bodyText": "IMO, this class should not be a singleton.", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r491794096", "createdAt": "2020-09-21T05:00:00Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroSSLDualModeConfig.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Portions Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.ssl.transport;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.annotations.VisibleForTesting;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+\n+public class OpenDistroSSLDualModeConfig {\n+\n+    public static final Setting<Boolean> SSL_DUAL_MODE_SETTING = Setting.boolSetting(ConfigConstants.OPENDISTRO_SECURITY_SSL_DUAL_MODE_ENABLED,\n+            true, Setting.Property.NodeScope, Setting.Property.Dynamic, Setting.Property.Filtered);\n+\n+    private static final Logger logger = LogManager.getLogger(OpenDistroSSLDualModeConfig.class);\n+\n+    private static OpenDistroSSLDualModeConfig INSTANCE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc5NDU0OA==", "bodyText": "avoid \"enabled is true\" or \"enabled is false\". Change to \"... is enabled\" or \"... is disabled\"", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r491794548", "createdAt": "2020-09-21T05:02:31Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroSSLDualModeConfig.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Portions Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.ssl.transport;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.annotations.VisibleForTesting;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+\n+public class OpenDistroSSLDualModeConfig {\n+\n+    public static final Setting<Boolean> SSL_DUAL_MODE_SETTING = Setting.boolSetting(ConfigConstants.OPENDISTRO_SECURITY_SSL_DUAL_MODE_ENABLED,\n+            true, Setting.Property.NodeScope, Setting.Property.Dynamic, Setting.Property.Filtered);\n+\n+    private static final Logger logger = LogManager.getLogger(OpenDistroSSLDualModeConfig.class);\n+\n+    private static OpenDistroSSLDualModeConfig INSTANCE;\n+    private final boolean isSSLOnly;\n+    private volatile boolean dualModeEnabled;\n+\n+    private OpenDistroSSLDualModeConfig(final ClusterSettings clusterSettings, final Settings settings) {\n+        // currently dual mode can be enabled only when SSLOnly is enabled. This stance can change in future.\n+        isSSLOnly = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_SSL_ONLY, false);\n+        dualModeEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_SSL_DUAL_MODE_ENABLED,\n+                false);\n+        logger.info(\"SSL set dual mode status enabled is {}\", isDualModeEnabled());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzMDYxNDUy", "url": "https://github.com/opensearch-project/security/pull/712#pullrequestreview-493061452", "createdAt": "2020-09-22T00:13:56Z", "commit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMDoxMzo1NlrOHVmlhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMzowMjoyM1rOHVoyww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQxNDM0MQ==", "bodyText": "I agree here. We should support SSLDualMode for both SSLOnly and  not SSLOnly (fullSecurity) mode for ODFE benefits.", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r492414341", "createdAt": "2020-09-22T00:13:56Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -451,6 +448,10 @@ private boolean checkFilePermissions(final Path p) {\n \n             handlers.addAll(super.getRestHandlers(settings, restController, clusterSettings, indexScopedSettings, settingsFilter, indexNameExpressionResolver, nodesInCluster));\n \n+            if(sslOnly){\n+                handlers.add(new SSLDualModeAction(settings, clusterSettings));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI3OTk5Ng=="}, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQzOTM5Mw==", "bodyText": "Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n(\"Portions\" not needed)", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r492439393", "createdAt": "2020-09-22T02:05:30Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/rest/SSLDualModeAction.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Portions Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ0MjM4Ng==", "bodyText": "we should explicitly check \"_disable\" otherwise any random string will disable dual mode. like \"/_opendistro/_security/ssl_dual_mode/xyz --> will disable dual mode)\nand we should handle any other random string and throw error/ not supported.", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r492442386", "createdAt": "2020-09-22T02:20:38Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/rest/SSLDualModeAction.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Portions Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+package com.amazon.opendistroforelasticsearch.security.rest;\n+\n+import com.amazon.opendistroforelasticsearch.security.ssl.transport.OpenDistroSSLDualModeConfig;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.admin.cluster.settings.ClusterUpdateSettingsRequest;\n+import org.elasticsearch.action.admin.cluster.settings.ClusterUpdateSettingsResponse;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.rest.*;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+import static org.elasticsearch.rest.RestRequest.Method.PUT;\n+\n+public class SSLDualModeAction extends BaseRestHandler {\n+\n+    private static final String RESPONSE_ENABLED_FIELD = \"enabled\";\n+    private static final String RESPONSE_ERROR_FIELD = \"error\";\n+\n+    private ClusterSettings clusterSettings;\n+    private Settings settings;\n+\n+    private static final Logger logger = LogManager.getLogger(SSLDualModeAction.class);\n+\n+    private static final List<Route> routes = ImmutableList.of(\n+            // gets the current status of ssl dual mode\n+            new Route(GET, \"/_opendistro/_security/ssl_dual_mode\"),\n+            // disables ssl dual mode\n+            new Route(PUT, \"/_opendistro/_security/ssl_dual_mode/_disable\"),\n+            // enables ssl dual mode\n+            new Route(PUT, \"/_opendistro/_security/ssl_dual_mode/_enable\")\n+    );\n+\n+    public SSLDualModeAction(final Settings settings, final ClusterSettings clusterSettings) {\n+        this.settings = settings;\n+        this.clusterSettings = clusterSettings;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"ssl_dual_mode\";\n+    }\n+\n+    @Override\n+    public List<Route> routes() {\n+        return routes;\n+    }\n+\n+    @Override\n+    protected RestChannelConsumer prepareRequest(RestRequest request, NodeClient client) throws IOException {\n+        return new RestChannelConsumer() {\n+            @Override\n+            public void accept(RestChannel restChannel) throws Exception {\n+\n+                switch (request.method()) {\n+                    case GET:\n+                        boolean dualModeEnabled = OpenDistroSSLDualModeConfig.getInstance().isDualModeEnabled();\n+                        BytesRestResponse response = getDualModeResponse(restChannel, dualModeEnabled);\n+                        restChannel.sendResponse(response);\n+                        break;\n+                    case PUT:\n+                        try {\n+                            final boolean enableDualMode;\n+                            if (request.path().endsWith(\"_enable\")) {\n+                                enableDualMode = true;\n+                            } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ0ODA2NA==", "bodyText": "Are we never expecting message less than 6 bytes?  how did we ensure that message will always be 6+ bytes?", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r492448064", "createdAt": "2020-09-22T02:50:04Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroPortUnificationHandler.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Portions Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+package com.amazon.opendistroforelasticsearch.security.ssl.transport;\n+\n+\n+import com.amazon.opendistroforelasticsearch.security.ssl.OpenDistroSecurityKeyStore;\n+import com.amazon.opendistroforelasticsearch.security.ssl.util.SSLConnectionTestUtil;\n+import com.amazon.opendistroforelasticsearch.security.ssl.util.SSLUtil;\n+import com.google.common.annotations.VisibleForTesting;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.ChannelFutureListener;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.handler.codec.ByteToMessageDecoder;\n+import io.netty.handler.ssl.SslHandler;\n+import java.nio.charset.StandardCharsets;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import javax.net.ssl.SSLException;\n+import java.util.List;\n+\n+/**\n+ * Modifies the current pipeline dynamically to enable TLS\n+ */\n+public class OpenDistroPortUnificationHandler extends ByteToMessageDecoder {\n+\n+    private final OpenDistroSecurityKeyStore odsks;\n+    private static final Logger logger = LogManager.getLogger(OpenDistroPortUnificationHandler.class);\n+\n+    private SslHandler providedSSLHandler;\n+    private SSLUtil sslUtils;\n+\n+    public OpenDistroPortUnificationHandler(OpenDistroSecurityKeyStore odsks, SSLUtil sslUtils) {\n+        this(odsks, null, sslUtils);\n+    }\n+\n+    @VisibleForTesting\n+    protected OpenDistroPortUnificationHandler(OpenDistroSecurityKeyStore odsks, SslHandler providedSSLHandler,\n+                                               SSLUtil sslUtils) {\n+        this.odsks = odsks;\n+        this.providedSSLHandler = providedSSLHandler;\n+        this.sslUtils = sslUtils;\n+    }\n+\n+    @Override\n+    protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {\n+        // Will use the first six bytes to detect a protocol.\n+        if (in.readableBytes() < 6) {\n+            return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1MDQ5OQ==", "bodyText": "Does this mean that every restart of the node this setting will be reset based on elasticsearch.yml setting?\nWhy should we do that? If value is present in cluster setting, should we consider that over yml value?", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r492450499", "createdAt": "2020-09-22T03:02:23Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroSSLDualModeConfig.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Portions Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.ssl.transport;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.annotations.VisibleForTesting;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+\n+public class OpenDistroSSLDualModeConfig {\n+\n+    public static final Setting<Boolean> SSL_DUAL_MODE_SETTING = Setting.boolSetting(ConfigConstants.OPENDISTRO_SECURITY_SSL_DUAL_MODE_ENABLED,\n+            true, Setting.Property.NodeScope, Setting.Property.Dynamic, Setting.Property.Filtered);\n+\n+    private static final Logger logger = LogManager.getLogger(OpenDistroSSLDualModeConfig.class);\n+\n+    private static OpenDistroSSLDualModeConfig INSTANCE;\n+    private final boolean isSSLOnly;\n+    private volatile boolean dualModeEnabled;\n+\n+    private OpenDistroSSLDualModeConfig(final ClusterSettings clusterSettings, final Settings settings) {\n+        // currently dual mode can be enabled only when SSLOnly is enabled. This stance can change in future.\n+        isSSLOnly = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_SSL_ONLY, false);\n+        dualModeEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_SSL_DUAL_MODE_ENABLED,\n+                false);\n+        logger.info(\"SSL set dual mode status enabled is {}\", isDualModeEnabled());\n+        clusterSettings.addSettingsUpdateConsumer(SSL_DUAL_MODE_SETTING,\n+                dualModeEnabledClusterSetting -> {\n+                    logger.info(\"Detected change in settings for dual mode {}\", dualModeEnabledClusterSetting);\n+                    setDualModeEnabled(dualModeEnabledClusterSetting);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzMTczMzUx", "url": "https://github.com/opensearch-project/security/pull/712#pullrequestreview-493173351", "createdAt": "2020-09-22T07:02:54Z", "commit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNzowMjo1NFrOHVsoNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNzoxODowMFrOHVtC-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUxMzMzMg==", "bodyText": "this mean other node is able to communicate in DualMode (and hence SSL too)\nBut what will happen if other node is only listening in SSL mode  (and not in Dual Mode) ?\nThis check (sendDualSSLClientHello() ) will fail..  and also SendESPing() will fail .. (but actually SSL is still available so node should use SSL to communicate)", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r492513332", "createdAt": "2020-09-22T07:02:54Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/util/SSLConnectionTestUtil.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Portions Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.ssl.util;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.net.Socket;\n+import java.nio.charset.StandardCharsets;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * Utility class to test if the server supports SSL connections.\n+ * SSL Check will be done by sending an ES Ping to see if server is replying to pings.\n+ * Following that a custom client hello message will be sent to the server, if the server\n+ * side has OpenDistroPortUnificationHandler it will reply with server hello message.\n+ */\n+public class SSLConnectionTestUtil {\n+\n+    private static final Logger logger = LogManager.getLogger(SSLConnectionTestUtil.class);\n+    public static final byte[] ES_PING_MSG = new byte[]{(byte) 'E', (byte) 'S', (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF};\n+    public static final String DUAL_MODE_CLIENT_HELLO_MSG = \"DUALCM\";\n+    public static final String DUAL_MODE_SERVER_HELLO_MSG = \"DUALSM\";\n+    private static final int SOCKET_TIMEOUT_MILLIS = 10 * 1000;\n+    private boolean esPingReplyReceived;\n+    private boolean dualSSLProbeReplyReceived;\n+    private final String host;\n+    private final int port;\n+    private Socket overriddenSocket = null;\n+    private OutputStreamWriter testOutputStreamWriter = null;\n+    private InputStreamReader testInputStreamReader = null;\n+\n+    public SSLConnectionTestUtil(final String host, final int port) {\n+        this.host = host;\n+        this.port = port;\n+        esPingReplyReceived = false;\n+        dualSSLProbeReplyReceived = false;\n+    }\n+\n+    @VisibleForTesting\n+    protected SSLConnectionTestUtil(final String host, final int port, final Socket overriddenSocket, final OutputStreamWriter testOutputStreamWriter,\n+        final InputStreamReader testInputStreamReader) {\n+        this.overriddenSocket = overriddenSocket;\n+        this.testOutputStreamWriter = testOutputStreamWriter;\n+        this.testInputStreamReader = testInputStreamReader;\n+\n+        this.host = host;\n+        this.port = port;\n+        esPingReplyReceived = false;\n+        dualSSLProbeReplyReceived = false;\n+    }\n+\n+    /**\n+     * Test connection to server by performing the below steps:\n+     * - Send Client Hello to check if the server replies with Server Hello which indicates that Server understands SSL\n+     * - Send ES Ping to check if the server replies to the ES Ping message\n+     *\n+     * @return SSLConnectionTestResult i.e. ES_PING_FAILED or SSL_NOT_AVAILABLE or SSL_AVAILABLE\n+     */\n+    public SSLConnectionTestResult testConnection() {\n+        if (sendDualSSLClientHello()) {\n+            return SSLConnectionTestResult.SSL_AVAILABLE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUyMDE4Nw==", "bodyText": "if other node is only communicating in SSL mode (means other node has older version of the security plugin which is not supporting dual mode), connectionTestResult will be always ES_PING_FAILED  .. is that true?\npublic SSLConnectionTestResult testConnection() {\n    if (sendDualSSLClientHello()) {.    --> This will fail as server doesn't send DualSSL Hello \n        return SSLConnectionTestResult.SSL_AVAILABLE;\n    }\n\n    if (sendESPing()) {.  ----> this will fail too as other node is actually sending SSL response...  \n        return SSLConnectionTestResult.SSL_NOT_AVAILABLE;\n    }\n\n    return SSLConnectionTestResult.ES_PING_FAILED;   --> this will be return..\n}", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r492520187", "createdAt": "2020-09-22T07:18:00Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroSecuritySSLNettyTransport.java", "diffHunk": "@@ -178,21 +198,42 @@ public void connect(ChannelHandlerContext ctx, SocketAddress remoteAddress, Sock\n     protected class SSLClientChannelInitializer extends Netty4Transport.ClientChannelInitializer {\n         private final boolean hostnameVerificationEnabled;\n         private final boolean hostnameVerificationResovleHostName;\n+        private final DiscoveryNode node;\n+        private SSLConnectionTestResult connectionTestResult;\n \n         public SSLClientChannelInitializer(DiscoveryNode node) {\n+            this.node = node;\n             hostnameVerificationEnabled = settings.getAsBoolean(\n                     SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_ENFORCE_HOSTNAME_VERIFICATION, true);\n             hostnameVerificationResovleHostName = settings.getAsBoolean(\n                     SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_ENFORCE_HOSTNAME_VERIFICATION_RESOLVE_HOST_NAME, true);\n+\n+            connectionTestResult = SSLConnectionTestResult.SSL_AVAILABLE;\n+            if (OpenDistroSSLDualModeConfig.getInstance().isDualModeEnabled()) {\n+                SSLConnectionTestUtil sslConnectionTestUtil = new SSLConnectionTestUtil(node.getAddress().getAddress(), node.getAddress().getPort());\n+                connectionTestResult = AccessController.doPrivileged((PrivilegedAction<SSLConnectionTestResult>) sslConnectionTestUtil::testConnection);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 155}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61db0ddfccd8e2781d91d8c859f529b5e7fed197", "author": {"user": {"login": "sachetalva", "name": "Sachet Alva"}}, "url": "https://github.com/opensearch-project/security/commit/61db0ddfccd8e2781d91d8c859f529b5e7fed197", "committedDate": "2020-09-24T09:05:23Z", "message": "Updated OpenDistroSSLDualModeConfig to a non-Singleton design"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4MDg5MjIx", "url": "https://github.com/opensearch-project/security/pull/712#pullrequestreview-498089221", "createdAt": "2020-09-29T04:36:26Z", "commit": {"oid": "61db0ddfccd8e2781d91d8c859f529b5e7fed197"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNDozNjoyNlrOHZY9pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMDozNzoyOVrOHbaBRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM4NTQ0NA==", "bodyText": "Avoid wildcard import.", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r496385444", "createdAt": "2020-09-29T04:36:26Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/rest/SSLDualModeAction.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+package com.amazon.opendistroforelasticsearch.security.rest;\n+\n+import com.amazon.opendistroforelasticsearch.security.ssl.transport.OpenDistroSSLDualModeConfig;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.admin.cluster.settings.ClusterUpdateSettingsRequest;\n+import org.elasticsearch.action.admin.cluster.settings.ClusterUpdateSettingsResponse;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.rest.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61db0ddfccd8e2781d91d8c859f529b5e7fed197"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ2ODQ0Nw==", "bodyText": "Can you please point to the code where this is enforced.", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r498468447", "createdAt": "2020-10-01T19:29:20Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroPortUnificationHandler.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Portions Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+package com.amazon.opendistroforelasticsearch.security.ssl.transport;\n+\n+\n+import com.amazon.opendistroforelasticsearch.security.ssl.OpenDistroSecurityKeyStore;\n+import com.amazon.opendistroforelasticsearch.security.ssl.util.SSLConnectionTestUtil;\n+import com.amazon.opendistroforelasticsearch.security.ssl.util.SSLUtil;\n+import com.google.common.annotations.VisibleForTesting;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.ChannelFutureListener;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.handler.codec.ByteToMessageDecoder;\n+import io.netty.handler.ssl.SslHandler;\n+import java.nio.charset.StandardCharsets;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import javax.net.ssl.SSLException;\n+import java.util.List;\n+\n+/**\n+ * Modifies the current pipeline dynamically to enable TLS\n+ */\n+public class OpenDistroPortUnificationHandler extends ByteToMessageDecoder {\n+\n+    private final OpenDistroSecurityKeyStore odsks;\n+    private static final Logger logger = LogManager.getLogger(OpenDistroPortUnificationHandler.class);\n+\n+    private SslHandler providedSSLHandler;\n+    private SSLUtil sslUtils;\n+\n+    public OpenDistroPortUnificationHandler(OpenDistroSecurityKeyStore odsks, SSLUtil sslUtils) {\n+        this(odsks, null, sslUtils);\n+    }\n+\n+    @VisibleForTesting\n+    protected OpenDistroPortUnificationHandler(OpenDistroSecurityKeyStore odsks, SslHandler providedSSLHandler,\n+                                               SSLUtil sslUtils) {\n+        this.odsks = odsks;\n+        this.providedSSLHandler = providedSSLHandler;\n+        this.sslUtils = sslUtils;\n+    }\n+\n+    @Override\n+    protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {\n+        // Will use the first six bytes to detect a protocol.\n+        if (in.readableBytes() < 6) {\n+            return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ0ODA2NA=="}, "originalCommit": {"oid": "0e88e06b71f24f331eadb491d6a0e1aeed9023c6"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ2OTkyNA==", "bodyText": "OpenDistroSSLDualModeConfig -> SSLConfig(preferable) or OpenDistroSSLConfig (less preferable).", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r498469924", "createdAt": "2020-10-01T19:32:31Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroSSLDualModeConfig.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.ssl.transport;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+\n+public class OpenDistroSSLDualModeConfig {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61db0ddfccd8e2781d91d8c859f529b5e7fed197"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ3MTA5OA==", "bodyText": "isSSLOnly -> sslOnly. Move sslOnly and isSslOnlyMode(settings) to OpenDistroSSLConfig (it is not necessary to duplicate this flag in both classes).", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r498471098", "createdAt": "2020-10-01T19:35:01Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroSSLDualModeConfig.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.ssl.transport;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+\n+public class OpenDistroSSLDualModeConfig {\n+\n+    public static final Setting<Boolean> SSL_DUAL_MODE_SETTING = Setting.boolSetting(ConfigConstants.OPENDISTRO_SECURITY_SSL_DUAL_MODE_ENABLED,\n+            true, Setting.Property.NodeScope, Setting.Property.Dynamic, Setting.Property.Filtered);\n+\n+    private static final Logger logger = LogManager.getLogger(OpenDistroSSLDualModeConfig.class);\n+\n+    private final boolean isSSLOnly;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61db0ddfccd8e2781d91d8c859f529b5e7fed197"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ5OTkxMA==", "bodyText": "If it is registered as a ClusterSettings is it necessary to have a separate API to manage it? Why this can't be done using ES cluster settings API?", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r498499910", "createdAt": "2020-10-01T20:37:29Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroSSLDualModeConfig.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.ssl.transport;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+\n+public class OpenDistroSSLDualModeConfig {\n+\n+    public static final Setting<Boolean> SSL_DUAL_MODE_SETTING = Setting.boolSetting(ConfigConstants.OPENDISTRO_SECURITY_SSL_DUAL_MODE_ENABLED,\n+            true, Setting.Property.NodeScope, Setting.Property.Dynamic, Setting.Property.Filtered);\n+\n+    private static final Logger logger = LogManager.getLogger(OpenDistroSSLDualModeConfig.class);\n+\n+    private final boolean isSSLOnly;\n+    private volatile boolean dualModeEnabled;\n+\n+    public OpenDistroSSLDualModeConfig(final Settings settings) {\n+        isSSLOnly = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_SSL_ONLY, false);\n+        dualModeEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_SSL_DUAL_MODE_ENABLED,\n+                false);\n+        logger.info(\"SSL dual mode is {}\", isDualModeEnabled() ? \"enabled\" : \"disabled\");\n+    }\n+\n+    public void registerClusterSettingsChangeListener(final ClusterSettings clusterSettings) {\n+        clusterSettings.addSettingsUpdateConsumer(SSL_DUAL_MODE_SETTING,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61db0ddfccd8e2781d91d8c859f529b5e7fed197"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwODQxNTAx", "url": "https://github.com/opensearch-project/security/pull/712#pullrequestreview-500841501", "createdAt": "2020-10-02T03:25:02Z", "commit": {"oid": "61db0ddfccd8e2781d91d8c859f529b5e7fed197"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMzoyNTowMlrOHbgZiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMzoyNTowMlrOHbgZiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYwNDQyNA==", "bodyText": "final", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r498604424", "createdAt": "2020-10-02T03:25:02Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/OpenDistroSecuritySSLPlugin.java", "diffHunk": "@@ -101,13 +102,13 @@\n     protected PrincipalExtractor principalExtractor;\n     protected final Path configPath;\n     private final static SslExceptionHandler NOOP_SSL_EXCEPTION_HANDLER = new SslExceptionHandler() {};\n-    \n+    protected OpenDistroSSLDualModeConfig openDistroSSLDualModeConfig;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61db0ddfccd8e2781d91d8c859f529b5e7fed197"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwODQ3MDA4", "url": "https://github.com/opensearch-project/security/pull/712#pullrequestreview-500847008", "createdAt": "2020-10-02T03:51:01Z", "commit": {"oid": "61db0ddfccd8e2781d91d8c859f529b5e7fed197"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMzo1MTowMVrOHbgpRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMzo1MTowMVrOHbgpRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYwODQ1Mw==", "bodyText": "OpenDistroPortUnificationHandler -> DualModeSSLHandler, ByteToMessageDecoder -> OptionalSslHandler.", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r498608453", "createdAt": "2020-10-02T03:51:01Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroPortUnificationHandler.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+package com.amazon.opendistroforelasticsearch.security.ssl.transport;\n+\n+\n+import com.amazon.opendistroforelasticsearch.security.ssl.OpenDistroSecurityKeyStore;\n+import com.amazon.opendistroforelasticsearch.security.ssl.util.SSLConnectionTestUtil;\n+import com.amazon.opendistroforelasticsearch.security.ssl.util.SSLUtil;\n+import com.google.common.annotations.VisibleForTesting;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.ChannelFutureListener;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.handler.codec.ByteToMessageDecoder;\n+import io.netty.handler.ssl.SslHandler;\n+import java.nio.charset.StandardCharsets;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import javax.net.ssl.SSLException;\n+import java.util.List;\n+\n+/**\n+ * Modifies the current pipeline dynamically to enable TLS\n+ */\n+public class OpenDistroPortUnificationHandler extends ByteToMessageDecoder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61db0ddfccd8e2781d91d8c859f529b5e7fed197"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "129345734d2f0009140b102e9d055fa1e6dfc782", "author": {"user": {"login": "sachetalva", "name": "Sachet Alva"}}, "url": "https://github.com/opensearch-project/security/commit/129345734d2f0009140b102e9d055fa1e6dfc782", "committedDate": "2020-10-02T04:30:28Z", "message": "Renamed OpendistroPortUnificationHandler and OpenDistroSSLDualModeConfig classes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwODc0Nzg3", "url": "https://github.com/opensearch-project/security/pull/712#pullrequestreview-500874787", "createdAt": "2020-10-02T06:00:06Z", "commit": {"oid": "129345734d2f0009140b102e9d055fa1e6dfc782"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNjowMDowNlrOHbh62w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNjowMDowNlrOHbh62w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYyOTMzOQ==", "bodyText": "I think it is not necessary to have sslOnly both in OpenDistroSSLConfig and OpenDistroSecurityPlugin, especially that OpenDistroSecurityPlugin directly references OpenDistroSSLConfig.", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r498629339", "createdAt": "2020-10-02T06:00:06Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -255,7 +252,7 @@ public OpenDistroSecurityPlugin(final Settings settings, final Path configPath)\n             return;\n         }\n         \n-        sslOnly = isSslOnlyMode(settings);\n+        sslOnly = openDistroSSLConfig.isSslOnlyMode();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "129345734d2f0009140b102e9d055fa1e6dfc782"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc0691c138e82b53b843bf03518c0104e2f6e6c3", "author": {"user": {"login": "sachetalva", "name": "Sachet Alva"}}, "url": "https://github.com/opensearch-project/security/commit/dc0691c138e82b53b843bf03518c0104e2f6e6c3", "committedDate": "2020-10-04T11:18:34Z", "message": "Removing custom APIs to enable and disable Dual Mode"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzNDkwNTU2", "url": "https://github.com/opensearch-project/security/pull/712#pullrequestreview-503490556", "createdAt": "2020-10-07T02:54:19Z", "commit": {"oid": "dc0691c138e82b53b843bf03518c0104e2f6e6c3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMjo1NDoxOVrOHdgzRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMjo1NDoxOVrOHdgzRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcwODE2NQ==", "bodyText": "What is the reason to probe connection in SSLClientChannelInitializer constructor and not in initChannel()?", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r500708165", "createdAt": "2020-10-07T02:54:19Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroSecuritySSLNettyTransport.java", "diffHunk": "@@ -178,21 +200,42 @@ public void connect(ChannelHandlerContext ctx, SocketAddress remoteAddress, Sock\n     protected class SSLClientChannelInitializer extends Netty4Transport.ClientChannelInitializer {\n         private final boolean hostnameVerificationEnabled;\n         private final boolean hostnameVerificationResovleHostName;\n+        private final DiscoveryNode node;\n+        private SSLConnectionTestResult connectionTestResult;\n \n         public SSLClientChannelInitializer(DiscoveryNode node) {\n+            this.node = node;\n             hostnameVerificationEnabled = settings.getAsBoolean(\n                     SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_ENFORCE_HOSTNAME_VERIFICATION, true);\n             hostnameVerificationResovleHostName = settings.getAsBoolean(\n                     SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_ENFORCE_HOSTNAME_VERIFICATION_RESOLVE_HOST_NAME, true);\n+\n+            connectionTestResult = SSLConnectionTestResult.SSL_AVAILABLE;\n+            if (openDistroSSLConfig.isDualModeEnabled()) {\n+                SSLConnectionTestUtil sslConnectionTestUtil = new SSLConnectionTestUtil(node.getAddress().getAddress(), node.getAddress().getPort());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc0691c138e82b53b843bf03518c0104e2f6e6c3"}, "originalPosition": 158}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0Mzg4NzAw", "url": "https://github.com/opensearch-project/security/pull/712#pullrequestreview-504388700", "createdAt": "2020-10-08T02:32:34Z", "commit": {"oid": "dc0691c138e82b53b843bf03518c0104e2f6e6c3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMjozMjozNFrOHeL2bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMjozMjozNFrOHeL2bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQxMzQ4Ng==", "bodyText": "It looks like an utility class. All method should be static and it must have private constructor. SSLUtil is not a good name. Rename it to TLS and make private static under OpenDistroPortUnificationHandler.", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r501413486", "createdAt": "2020-10-08T02:32:34Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/util/SSLUtil.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+package com.amazon.opendistroforelasticsearch.security.ssl.util;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+import java.nio.ByteOrder;\n+\n+\n+public class SSLUtil {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc0691c138e82b53b843bf03518c0104e2f6e6c3"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0Mzg5NDU0", "url": "https://github.com/opensearch-project/security/pull/712#pullrequestreview-504389454", "createdAt": "2020-10-08T02:35:25Z", "commit": {"oid": "dc0691c138e82b53b843bf03518c0104e2f6e6c3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMjozNToyNVrOHeL5Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMjozNToyNVrOHeL5Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQxNDE4Nw==", "bodyText": "access specifier first private static.", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r501414187", "createdAt": "2020-10-08T02:35:25Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/util/SSLUtil.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+package com.amazon.opendistroforelasticsearch.security.ssl.util;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+import java.nio.ByteOrder;\n+\n+\n+public class SSLUtil {\n+\n+    private static final int SSL_CONTENT_TYPE_CHANGE_CIPHER_SPEC = 20;\n+    private static final int SSL_CONTENT_TYPE_ALERT = 21;\n+    private static final int SSL_CONTENT_TYPE_HANDSHAKE = 22;\n+    private static final int SSL_CONTENT_TYPE_APPLICATION_DATA = 23;\n+    private static final int SSL_CONTENT_TYPE_EXTENSION_HEARTBEAT = 24;\n+\n+    private static final int SSL_RECORD_HEADER_LENGTH = 5;\n+\n+    public boolean isTLS(ByteBuf buffer) {\n+        int packetLength = 0;\n+        int offset = buffer.readerIndex();\n+\n+        // SSLv3 or TLS - Check ContentType\n+        boolean tls;\n+        switch (buffer.getUnsignedByte(offset)) {\n+            case SSL_CONTENT_TYPE_CHANGE_CIPHER_SPEC:\n+            case SSL_CONTENT_TYPE_ALERT:\n+            case SSL_CONTENT_TYPE_HANDSHAKE:\n+            case SSL_CONTENT_TYPE_APPLICATION_DATA:\n+            case SSL_CONTENT_TYPE_EXTENSION_HEARTBEAT:\n+                tls = true;\n+                break;\n+            default:\n+                // SSLv2 or bad data\n+                tls = false;\n+        }\n+\n+        if (tls) {\n+            // SSLv3 or TLS - Check ProtocolVersion\n+            int majorVersion = buffer.getUnsignedByte(offset + 1);\n+            if (majorVersion == 3) {\n+                // SSLv3 or TLS\n+                packetLength = unsignedShortBE(buffer, offset + 3) + SSL_RECORD_HEADER_LENGTH;\n+                if (packetLength <= SSL_RECORD_HEADER_LENGTH) {\n+                    // Neither SSLv3 or TLSv1 (i.e. SSLv2 or bad data)\n+                    tls = false;\n+                }\n+            } else {\n+                // Neither SSLv3 or TLSv1 (i.e. SSLv2 or bad data)\n+                tls = false;\n+            }\n+        }\n+\n+        return tls;\n+    }\n+\n+    static private int unsignedShortBE(ByteBuf buffer, int offset) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc0691c138e82b53b843bf03518c0104e2f6e6c3"}, "originalPosition": 70}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0MzkxOTk2", "url": "https://github.com/opensearch-project/security/pull/712#pullrequestreview-504391996", "createdAt": "2020-10-08T02:44:29Z", "commit": {"oid": "dc0691c138e82b53b843bf03518c0104e2f6e6c3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMjo0NDoyOVrOHeMBQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMjo0NDoyOVrOHeMBQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQxNjI1OA==", "bodyText": "IMO, it should be part of API testing, not HttpIntegrationTests.", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r501416258", "createdAt": "2020-10-08T02:44:29Z", "author": {"login": "vrozov"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/HttpIntegrationTests.java", "diffHunk": "@@ -705,6 +714,67 @@ public void testSslOnlyMode() throws Exception {\n \n         res = rh.executeGetRequest(\"/_search\");\n         Assert.assertEquals(HttpStatus.SC_OK, res.getStatusCode());\n+\n+        if (dualModeEnabled) {\n+            res = rh.executeGetRequest(\"/_opendistro/_security/ssl_dual_mode\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc0691c138e82b53b843bf03518c0104e2f6e6c3"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89b0173eb0ba5150b7a646419844c247943a257a", "author": {"user": {"login": "sachetalva", "name": "Sachet Alva"}}, "url": "https://github.com/opensearch-project/security/commit/89b0173eb0ba5150b7a646419844c247943a257a", "committedDate": "2020-10-09T07:22:00Z", "message": "Removing custom GET api for ssl_dual_mode_enabled and refactoring dual mode tests to separate file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "acf2c32d031c1f0bf774e05fbf54082ba033a65f", "author": {"user": {"login": "sachetalva", "name": "Sachet Alva"}}, "url": "https://github.com/opensearch-project/security/commit/acf2c32d031c1f0bf774e05fbf54082ba033a65f", "committedDate": "2020-10-09T14:54:06Z", "message": "Merge branch 'master' into master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5d85ec858e636c7e9a8978b556e38f2492905fc", "author": {"user": {"login": "sachetalva", "name": "Sachet Alva"}}, "url": "https://github.com/opensearch-project/security/commit/f5d85ec858e636c7e9a8978b556e38f2492905fc", "committedDate": "2020-10-12T06:11:44Z", "message": "Reverting property filter changes in getSettings and adding explicit filtering in getSettingsFilter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ada4df1c3527c13498ec174d43fefa7724a4380", "author": {"user": {"login": "sachetalva", "name": "Sachet Alva"}}, "url": "https://github.com/opensearch-project/security/commit/8ada4df1c3527c13498ec174d43fefa7724a4380", "committedDate": "2020-10-12T07:26:33Z", "message": "Fix for tests failing due to getSettingsFilter changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3OTMzODQy", "url": "https://github.com/opensearch-project/security/pull/712#pullrequestreview-507933842", "createdAt": "2020-10-14T01:29:08Z", "commit": {"oid": "8ada4df1c3527c13498ec174d43fefa7724a4380"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMToyOTowOVrOHg-9qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMToyOTowOVrOHg-9qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM0ODA3NA==", "bodyText": "Why is this needed?", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r504348074", "createdAt": "2020-10-14T01:29:09Z", "author": {"login": "vrozov"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/test/helper/rest/RestHelper.java", "diffHunk": "@@ -253,6 +254,12 @@ protected final CloseableHttpClient getHTTPClient() throws Exception {\n \t\t\thcb.setSSLSocketFactory(sslsf);\n \t\t}\n \n+\t\tRequestConfig.Builder requestBuilder = RequestConfig.custom();\n+\t\trequestBuilder.setConnectTimeout(10000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ada4df1c3527c13498ec174d43fefa7724a4380"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b22e05bdc6a5ad22e41442ba33c34f290ce2f30", "author": {"user": {"login": "sachetalva", "name": "Sachet Alva"}}, "url": "https://github.com/opensearch-project/security/commit/3b22e05bdc6a5ad22e41442ba33c34f290ce2f30", "committedDate": "2020-10-14T05:08:30Z", "message": "Reverting changes to files not related to eit dual mode migration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "455e799795b3ee6892777a2b652939ed8f806aa6", "author": {"user": {"login": "sachetalva", "name": "Sachet Alva"}}, "url": "https://github.com/opensearch-project/security/commit/455e799795b3ee6892777a2b652939ed8f806aa6", "committedDate": "2020-10-14T05:11:51Z", "message": "Removing unused import from RestHelper"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4MDEyMzUz", "url": "https://github.com/opensearch-project/security/pull/712#pullrequestreview-508012353", "createdAt": "2020-10-14T05:48:09Z", "commit": {"oid": "455e799795b3ee6892777a2b652939ed8f806aa6"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4ODg3MTY0", "url": "https://github.com/opensearch-project/security/pull/712#pullrequestreview-508887164", "createdAt": "2020-10-15T02:06:06Z", "commit": {"oid": "455e799795b3ee6892777a2b652939ed8f806aa6"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMjowNjowNlrOHhuJkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMjoyMjoxMVrOHijQzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEyMTE2OQ==", "bodyText": "As we are not supporting DualMode only for SSLOnly mode, should we only register this listener if it is SSLOnly mode?", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r505121169", "createdAt": "2020-10-15T02:06:06Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -706,7 +697,8 @@ public AsyncSender interceptSender(AsyncSender sender) {\n             Environment environment, NodeEnvironment nodeEnvironment, NamedWriteableRegistry namedWriteableRegistry,\n             IndexNameExpressionResolver indexNameExpressionResolver, Supplier<RepositoriesService> repositoriesServiceSupplier) {\n \n-        if(sslOnly) {\n+        openDistroSSLConfig.registerClusterSettingsChangeListener(clusterService.getClusterSettings());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "455e799795b3ee6892777a2b652939ed8f806aa6"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk2NDQwMQ==", "bodyText": "How did we verify that all \"opendistro_security.*\" except dual mode setting were filtered?\nAdditionally, we should improve filtering settings bit more instead adding all manfully. Like filtering everything except  \"dual_mode\" settings..   (I understand that we are not able to exclude setting and we are not able to keep wildcard based filtering pattern..  need to think more if there is other way instead adding manually all here..)\nwildcard pattern based filter was our safety to filter any remaining settings which was not filtered individually.\nany miss will expose sensitive security configuration via cluster settings.\nI understand listSettings and groupSettings are not being filtered with Property.Filtered() while registering those settings.   So, I think those are added separately as settingsFilter. But \"opendistro_security.*\" is really a safety for us for not exposing something accidentally", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r505964401", "createdAt": "2020-10-16T01:27:44Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -998,14 +993,35 @@ public Settings additionalSettings() {\n             return settingsFilter;\n         }\n \n-        settingsFilter.add(\"opendistro_security.*\");\n+        settingsFilter.addAll(super.getSettingsFilter());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "455e799795b3ee6892777a2b652939ed8f806aa6"}, "originalPosition": 291}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk2ODc1MA==", "bodyText": "same here.", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r505968750", "createdAt": "2020-10-16T01:35:17Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/OpenDistroSecuritySSLPlugin.java", "diffHunk": "@@ -382,11 +385,15 @@ public Settings additionalSettings() {\n         \n         return builder.build();\n     }\n-    \n+\n     @Override\n     public List<String> getSettingsFilter() {\n         List<String> settingsFilter = new ArrayList<>();\n-        settingsFilter.add(\"opendistro_security.*\");\n+        settingsFilter.add(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_HTTP_ENABLED_CIPHERS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "455e799795b3ee6892777a2b652939ed8f806aa6"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk5MTM3Mw==", "bodyText": "Other idea:  rename dual_mode settings with some different prefix . that way we can still rely on pattern based safety filter.", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r505991373", "createdAt": "2020-10-16T02:22:11Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -998,14 +993,35 @@ public Settings additionalSettings() {\n             return settingsFilter;\n         }\n \n-        settingsFilter.add(\"opendistro_security.*\");\n+        settingsFilter.addAll(super.getSettingsFilter());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk2NDQwMQ=="}, "originalCommit": {"oid": "455e799795b3ee6892777a2b652939ed8f806aa6"}, "originalPosition": 291}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5OTc2Mzk3", "url": "https://github.com/opensearch-project/security/pull/712#pullrequestreview-509976397", "createdAt": "2020-10-16T02:50:38Z", "commit": {"oid": "455e799795b3ee6892777a2b652939ed8f806aa6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMjo1MDozOFrOHikO9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMjo1MDozOFrOHikO9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjAwNzI4NQ==", "bodyText": "Why are we setting default to true?", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r506007285", "createdAt": "2020-10-16T02:50:38Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroSSLConfig.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.ssl.transport;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+\n+public class OpenDistroSSLConfig {\n+\n+    public static final Setting<Boolean> SSL_DUAL_MODE_SETTING = Setting.boolSetting(ConfigConstants.OPENDISTRO_SECURITY_SSL_DUAL_MODE_ENABLED,\n+            true, Setting.Property.NodeScope, Setting.Property.Dynamic); // Not filtered", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "455e799795b3ee6892777a2b652939ed8f806aa6"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5OTc3MTg1", "url": "https://github.com/opensearch-project/security/pull/712#pullrequestreview-509977185", "createdAt": "2020-10-16T02:53:23Z", "commit": {"oid": "455e799795b3ee6892777a2b652939ed8f806aa6"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMjo1MzoyNFrOHikUkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMjo1OToyMFrOHikg3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjAwODcyMA==", "bodyText": "lets throw a warning if DUAL mode is enabled but SSLOnly is not .\nThat way we can inform user that DUAL mode is not going to be applicable.", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r506008720", "createdAt": "2020-10-16T02:53:24Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroSSLConfig.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.ssl.transport;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+\n+public class OpenDistroSSLConfig {\n+\n+    public static final Setting<Boolean> SSL_DUAL_MODE_SETTING = Setting.boolSetting(ConfigConstants.OPENDISTRO_SECURITY_SSL_DUAL_MODE_ENABLED,\n+            true, Setting.Property.NodeScope, Setting.Property.Dynamic); // Not filtered\n+\n+    private static final Logger logger = LogManager.getLogger(OpenDistroSSLConfig.class);\n+\n+    private final boolean sslOnly;\n+    private volatile boolean dualModeEnabled;\n+\n+    public OpenDistroSSLConfig(final boolean sslOnly, final boolean dualModeEnabled) {\n+        this.sslOnly = sslOnly;\n+        this.dualModeEnabled = dualModeEnabled;\n+        logger.info(\"SSL dual mode is {}\", isDualModeEnabled() ? \"enabled\" : \"disabled\");\n+    }\n+\n+    public OpenDistroSSLConfig(final Settings settings) {\n+        this(settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_SSL_ONLY, false),\n+            settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_SSL_DUAL_MODE_ENABLED, false));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "455e799795b3ee6892777a2b652939ed8f806aa6"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjAxMTg2OQ==", "bodyText": "seems like amazon copyright is missing in this file.\nCan you add Portions Copyright for Amazon.com", "url": "https://github.com/opensearch-project/security/pull/712#discussion_r506011869", "createdAt": "2020-10-16T02:59:20Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/ssl/transport/OpenDistroSecuritySSLNettyTransport.java", "diffHunk": "@@ -1,28 +1,33 @@\n /*\n  * Copyright 2015-2017 floragunn GmbH\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *     http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n- * \n+ *\n  */\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "455e799795b3ee6892777a2b652939ed8f806aa6"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79b4ebcfbfc02057260a43dff8edfcecb8034039", "author": {"user": {"login": "sachetalva", "name": "Sachet Alva"}}, "url": "https://github.com/opensearch-project/security/commit/79b4ebcfbfc02057260a43dff8edfcecb8034039", "committedDate": "2020-10-16T10:42:59Z", "message": "Changing ssl_dual_mode_enabled prefix to opendistro_security_config"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwODkzNjYx", "url": "https://github.com/opensearch-project/security/pull/712#pullrequestreview-510893661", "createdAt": "2020-10-17T04:22:44Z", "commit": {"oid": "79b4ebcfbfc02057260a43dff8edfcecb8034039"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMTEwODAz", "url": "https://github.com/opensearch-project/security/pull/712#pullrequestreview-512110803", "createdAt": "2020-10-19T19:55:43Z", "commit": {"oid": "79b4ebcfbfc02057260a43dff8edfcecb8034039"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2750, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}