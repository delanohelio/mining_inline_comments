{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwNDQ5Njcy", "number": 362, "reviewThreads": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMDozMDoyNlrODvyjrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwODo1NTowM1rODxLtrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDM3OTk4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/DynamicConfigFactory.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMDozMDoyNlrOGCa6AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzo1NDoxNFrOGD7IhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MTE2OA==", "bodyText": "What is the difference between NodesDnModelV6 and NodesDnModelV7?", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r405191168", "createdAt": "2020-04-08T00:30:26Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/DynamicConfigFactory.java", "diffHunk": "@@ -320,5 +328,39 @@ public String getHash(String user) {\n             return Collections.emptyList();\n         }\n     }\n+\n+    private static class NodesDnModelV7 extends NodesDnModel {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkyNjgxMg==", "bodyText": "+1 about difference question,\nand as this is new configuration, do we really need  V6 as well? Are we supporting this for 6x and needed for 6.8 to 7.x migration?", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r405926812", "createdAt": "2020-04-09T02:51:31Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/DynamicConfigFactory.java", "diffHunk": "@@ -320,5 +328,39 @@ public String getHash(String user) {\n             return Collections.emptyList();\n         }\n     }\n+\n+    private static class NodesDnModelV7 extends NodesDnModel {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MTE2OA=="}, "originalCommit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk4MDEzNQ==", "bodyText": "+1 about difference question,\nand as this is new configuration, do we really need V6 as well? Are we supporting this for 6x and needed for 6.8 to 7.x migration?\n\nYes, will be supporting 6.7+", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r405980135", "createdAt": "2020-04-09T06:22:50Z", "author": {"login": "krishna-ggk"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/DynamicConfigFactory.java", "diffHunk": "@@ -320,5 +328,39 @@ public String getHash(String user) {\n             return Collections.emptyList();\n         }\n     }\n+\n+    private static class NodesDnModelV7 extends NodesDnModel {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MTE2OA=="}, "originalCommit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc2Nzc0OQ==", "bodyText": "Merged the classes.", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r406767749", "createdAt": "2020-04-10T13:54:14Z", "author": {"login": "krishna-ggk"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/DynamicConfigFactory.java", "diffHunk": "@@ -320,5 +328,39 @@ public String getHash(String user) {\n             return Collections.emptyList();\n         }\n     }\n+\n+    private static class NodesDnModelV7 extends NodesDnModel {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MTE2OA=="}, "originalCommit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDM4MjQxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/impl/v6/NodesDnV6.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMDozMTo0NVrOGCa7bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzo1NTozNVrOGD7KwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MTUzNQ==", "bodyText": "What is the difference between NodesDnV6 and NodesDnV7?", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r405191535", "createdAt": "2020-04-08T00:31:45Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/impl/v6/NodesDnV6.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package com.amazon.opendistroforelasticsearch.security.securityconf.impl.v6;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI4OTAxMQ==", "bodyText": "Though no difference in structure, the classes serve as a way to identify the config version. V7 versions when persisted to index includes meta fields while V6 versions don't.\nI'll take another look to see if we can make it work with single class.", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r405289011", "createdAt": "2020-04-08T06:35:37Z", "author": {"login": "krishna-ggk"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/impl/v6/NodesDnV6.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package com.amazon.opendistroforelasticsearch.security.securityconf.impl.v6;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MTUzNQ=="}, "originalCommit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc2ODMyMA==", "bodyText": "Merged the classes.", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r406768320", "createdAt": "2020-04-10T13:55:35Z", "author": {"login": "krishna-ggk"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/impl/v6/NodesDnV6.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package com.amazon.opendistroforelasticsearch.security.securityconf.impl.v6;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MTUzNQ=="}, "originalCommit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDM5ODcyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/DynamicConfigFactory.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMDo0MDo1N1rOGCbE4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzo1NjowNVrOGD7LgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5Mzk1Mw==", "bodyText": "I don't think that changing the interface is well justified. Only DefaultInterClusterRequestEvaluator is interested in NodesDnModel, all other classes that implement DCFListener actually do not use NodesDnModel on the callback event.", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r405193953", "createdAt": "2020-04-08T00:40:57Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/DynamicConfigFactory.java", "diffHunk": "@@ -230,7 +238,7 @@ public void registerDCFListener(DCFListener listener) {\n     }\n     \n     public static interface DCFListener {\n-        void onChanged(ConfigModel cm, DynamicConfigModel dcm, InternalUsersModel ium);\n+        void onChanged(ConfigModel cm, DynamicConfigModel dcm, InternalUsersModel ium, NodesDnModel nm);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI5MTI2OQ==", "bodyText": "The behavior in opendistroforelasticsearch/security for older versions (0.9 and 0.10) had support for subscribing and listening to changes for specific type.\nHowever that was removed in later versions where irrespective of type that changed, listener receives everything - https://github.com/opendistro-for-elasticsearch/security/blob/master/src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/ConfigurationRepository.java#L294-L298\nI'll give this another thought, but do you have any suggestion?", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r405291269", "createdAt": "2020-04-08T06:41:12Z", "author": {"login": "krishna-ggk"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/DynamicConfigFactory.java", "diffHunk": "@@ -230,7 +238,7 @@ public void registerDCFListener(DCFListener listener) {\n     }\n     \n     public static interface DCFListener {\n-        void onChanged(ConfigModel cm, DynamicConfigModel dcm, InternalUsersModel ium);\n+        void onChanged(ConfigModel cm, DynamicConfigModel dcm, InternalUsersModel ium, NodesDnModel nm);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5Mzk1Mw=="}, "originalCommit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY1ODY0NQ==", "bodyText": "Please see #364", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r405658645", "createdAt": "2020-04-08T16:34:30Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/DynamicConfigFactory.java", "diffHunk": "@@ -230,7 +238,7 @@ public void registerDCFListener(DCFListener listener) {\n     }\n     \n     public static interface DCFListener {\n-        void onChanged(ConfigModel cm, DynamicConfigModel dcm, InternalUsersModel ium);\n+        void onChanged(ConfigModel cm, DynamicConfigModel dcm, InternalUsersModel ium, NodesDnModel nm);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5Mzk1Mw=="}, "originalCommit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcyNzU1OQ==", "bodyText": "Please see #364\n\nI left a comment on yours. May be Hardik has some context on the behavior change. But I an adapt to your change quickly once it is pushed", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r405727559", "createdAt": "2020-04-08T18:27:49Z", "author": {"login": "krishna-ggk"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/DynamicConfigFactory.java", "diffHunk": "@@ -230,7 +238,7 @@ public void registerDCFListener(DCFListener listener) {\n     }\n     \n     public static interface DCFListener {\n-        void onChanged(ConfigModel cm, DynamicConfigModel dcm, InternalUsersModel ium);\n+        void onChanged(ConfigModel cm, DynamicConfigModel dcm, InternalUsersModel ium, NodesDnModel nm);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5Mzk1Mw=="}, "originalCommit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc2ODUxMg==", "bodyText": "Adapted to pub-sub changes in master.", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r406768512", "createdAt": "2020-04-10T13:56:05Z", "author": {"login": "krishna-ggk"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/DynamicConfigFactory.java", "diffHunk": "@@ -230,7 +238,7 @@ public void registerDCFListener(DCFListener listener) {\n     }\n     \n     public static interface DCFListener {\n-        void onChanged(ConfigModel cm, DynamicConfigModel dcm, InternalUsersModel ium);\n+        void onChanged(ConfigModel cm, DynamicConfigModel dcm, InternalUsersModel ium, NodesDnModel nm);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5Mzk1Mw=="}, "originalCommit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODYwNjE1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/AbstractApiAction.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMjo1MDowMVrOGDDqig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNjozNzozMVrOGDLZOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg1ODk1NA==", "bodyText": "couldn't understand this case.\nWhen this (existingConfiguration.getSeqNo() < 0) can happen?\nAnd are you suggesting Security Admin tool to initialize the index?", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r405858954", "createdAt": "2020-04-08T22:50:01Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/AbstractApiAction.java", "diffHunk": "@@ -192,6 +192,11 @@ protected void handlePut(final RestChannel channel, final RestRequest request, f\n \n \t\tfinal SecurityDynamicConfiguration<?> existingConfiguration = load(getConfigName(), false);\n \n+\t\tif (existingConfiguration.getSeqNo() < 0) {\n+\t\t    forbidden(channel, \"Security index need to be updated to support '\" + getConfigName().toLCString() + \"'. Use OpenDistroSecurityAdmin to populate.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk4NTIyOQ==", "bodyText": "couldn't understand this case.\nWhen this (existingConfiguration.getSeqNo() < 0) can happen?\nAnd are you suggesting Security Admin tool to initialize the index?\n\nCorrect. The need comes from nodesdn usecase. This is being introduced in older versions and hence it should be backward compatible, which means in the cases where the index is already created, the APIs will not work out of the box and will need security admin to create the document in index.\nSince the need is there, I added this generic check to provide better error message rather than ending with 5xx.", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r405985229", "createdAt": "2020-04-09T06:36:35Z", "author": {"login": "krishna-ggk"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/AbstractApiAction.java", "diffHunk": "@@ -192,6 +192,11 @@ protected void handlePut(final RestChannel channel, final RestRequest request, f\n \n \t\tfinal SecurityDynamicConfiguration<?> existingConfiguration = load(getConfigName(), false);\n \n+\t\tif (existingConfiguration.getSeqNo() < 0) {\n+\t\t    forbidden(channel, \"Security index need to be updated to support '\" + getConfigName().toLCString() + \"'. Use OpenDistroSecurityAdmin to populate.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg1ODk1NA=="}, "originalCommit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk4NTU5NA==", "bodyText": "When this (existingConfiguration.getSeqNo() < 0) can happen?\n\nThis will happen when the index doesn't exist. ConfigurationLoader handles empty scenario and returns an object with negative seq number.", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r405985594", "createdAt": "2020-04-09T06:37:31Z", "author": {"login": "krishna-ggk"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/AbstractApiAction.java", "diffHunk": "@@ -192,6 +192,11 @@ protected void handlePut(final RestChannel channel, final RestRequest request, f\n \n \t\tfinal SecurityDynamicConfiguration<?> existingConfiguration = load(getConfigName(), false);\n \n+\t\tif (existingConfiguration.getSeqNo() < 0) {\n+\t\t    forbidden(channel, \"Security index need to be updated to support '\" + getConfigName().toLCString() + \"'. Use OpenDistroSecurityAdmin to populate.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg1ODk1NA=="}, "originalCommit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODg0MTA3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/NodesDnApiAction.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMDo0NTowM1rOGDF0zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNTo0ODo0N1rOGD-MKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg5NDM0OA==", "bodyText": "for PUT, PATCH and DELETE are we allowing users to modify nodesdn for the existing cluster? is there a way in the current design to distinguish between \"cross_cluster\" node dn and ones for the existing cluster?", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r405894348", "createdAt": "2020-04-09T00:45:03Z", "author": {"login": "debjanibnrj"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/NodesDnApiAction.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package com.amazon.opendistroforelasticsearch.security.dlic.rest.api;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.AuditLog;\n+import com.amazon.opendistroforelasticsearch.security.configuration.AdminDNs;\n+import com.amazon.opendistroforelasticsearch.security.configuration.ConfigurationRepository;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.AbstractConfigurationValidator;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.NodesDnValidator;\n+import com.amazon.opendistroforelasticsearch.security.privileges.PrivilegesEvaluator;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.CType;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.SecurityDynamicConfiguration;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v6.NodesDnV6;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v7.NodesDnV7;\n+import com.amazon.opendistroforelasticsearch.security.ssl.transport.PrincipalExtractor;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.rest.RestChannel;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestRequest.Method;\n+import org.elasticsearch.threadpool.ThreadPool;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * This class implements CRUD operations to manage dynamic NodesDn. The primary usecase is targeted at cross-cluster where\n+ * in node restart can be avoided by populating the coordinating cluster's nodes_dn values.\n+ *\n+ * The APIs are only accessible to SuperAdmin since the configuration controls the core application layer trust validation.\n+ * By default the APIs are disabled and can be enabled by a YML setting - {@link ConfigConstants#OPENDISTRO_SECURITY_NODES_DN_DYNAMIC_CONFIG_ENABLED}\n+ *\n+ * The backing data is stored in {@link ConfigConstants#OPENDISTRO_SECURITY_CONFIG_INDEX_NAME} which is populated during bootstrap.\n+ * For existing clusters, {@link com.amazon.opendistroforelasticsearch.security.tools.OpenDistroSecurityAdmin} tool can\n+ * be used to populate the index.\n+ *\n+ * See {@link com.amazon.opendistroforelasticsearch.security.dlic.rest.api.NodesDnApiTest} for usage examples.\n+ */\n+public class NodesDnApiAction extends PatchableResourceApiAction {\n+    public static final String STATIC_ES_YML_NODES_DN = \"STATIC_ES_YML_NODES_DN\";\n+    private final List<String> staticNodesDnFromEsYml;\n+\n+    @Inject\n+    public NodesDnApiAction(final Settings settings, final Path configPath, final RestController controller, final Client client,\n+        final AdminDNs adminDNs, final ConfigurationRepository cl, final ClusterService cs,\n+        final PrincipalExtractor principalExtractor, final PrivilegesEvaluator evaluator, ThreadPool threadPool, AuditLog auditLog) {\n+        super(settings, configPath, controller, client, adminDNs, cl, cs, principalExtractor, evaluator, threadPool, auditLog);\n+        this.staticNodesDnFromEsYml = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN, Collections.emptyList());\n+    }\n+\n+    @Override\n+    protected void registerHandlers(RestController controller, Settings settings) {\n+        if (settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN_DYNAMIC_CONFIG_ENABLED, false)) {\n+            controller.registerHandler(Method.GET, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.GET, \"/_opendistro/_security/api/nodesdn/\", this);\n+            controller.registerHandler(Method.DELETE, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.PUT, \"/_opendistro/_security/api/nodesdn/{name}\", this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk4MDU5Nw==", "bodyText": "Yes, the GET has a show_all which shows the existing cluster nodesdn from YML with special key (STATIC_ES_YML_NODES_DN)", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r405980597", "createdAt": "2020-04-09T06:24:06Z", "author": {"login": "krishna-ggk"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/NodesDnApiAction.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package com.amazon.opendistroforelasticsearch.security.dlic.rest.api;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.AuditLog;\n+import com.amazon.opendistroforelasticsearch.security.configuration.AdminDNs;\n+import com.amazon.opendistroforelasticsearch.security.configuration.ConfigurationRepository;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.AbstractConfigurationValidator;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.NodesDnValidator;\n+import com.amazon.opendistroforelasticsearch.security.privileges.PrivilegesEvaluator;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.CType;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.SecurityDynamicConfiguration;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v6.NodesDnV6;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v7.NodesDnV7;\n+import com.amazon.opendistroforelasticsearch.security.ssl.transport.PrincipalExtractor;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.rest.RestChannel;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestRequest.Method;\n+import org.elasticsearch.threadpool.ThreadPool;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * This class implements CRUD operations to manage dynamic NodesDn. The primary usecase is targeted at cross-cluster where\n+ * in node restart can be avoided by populating the coordinating cluster's nodes_dn values.\n+ *\n+ * The APIs are only accessible to SuperAdmin since the configuration controls the core application layer trust validation.\n+ * By default the APIs are disabled and can be enabled by a YML setting - {@link ConfigConstants#OPENDISTRO_SECURITY_NODES_DN_DYNAMIC_CONFIG_ENABLED}\n+ *\n+ * The backing data is stored in {@link ConfigConstants#OPENDISTRO_SECURITY_CONFIG_INDEX_NAME} which is populated during bootstrap.\n+ * For existing clusters, {@link com.amazon.opendistroforelasticsearch.security.tools.OpenDistroSecurityAdmin} tool can\n+ * be used to populate the index.\n+ *\n+ * See {@link com.amazon.opendistroforelasticsearch.security.dlic.rest.api.NodesDnApiTest} for usage examples.\n+ */\n+public class NodesDnApiAction extends PatchableResourceApiAction {\n+    public static final String STATIC_ES_YML_NODES_DN = \"STATIC_ES_YML_NODES_DN\";\n+    private final List<String> staticNodesDnFromEsYml;\n+\n+    @Inject\n+    public NodesDnApiAction(final Settings settings, final Path configPath, final RestController controller, final Client client,\n+        final AdminDNs adminDNs, final ConfigurationRepository cl, final ClusterService cs,\n+        final PrincipalExtractor principalExtractor, final PrivilegesEvaluator evaluator, ThreadPool threadPool, AuditLog auditLog) {\n+        super(settings, configPath, controller, client, adminDNs, cl, cs, principalExtractor, evaluator, threadPool, auditLog);\n+        this.staticNodesDnFromEsYml = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN, Collections.emptyList());\n+    }\n+\n+    @Override\n+    protected void registerHandlers(RestController controller, Settings settings) {\n+        if (settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN_DYNAMIC_CONFIG_ENABLED, false)) {\n+            controller.registerHandler(Method.GET, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.GET, \"/_opendistro/_security/api/nodesdn/\", this);\n+            controller.registerHandler(Method.DELETE, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.PUT, \"/_opendistro/_security/api/nodesdn/{name}\", this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg5NDM0OA=="}, "originalCommit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc2OTE5Mw==", "bodyText": "Please reopen conv if this doesn't answer your question.", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r406769193", "createdAt": "2020-04-10T13:57:39Z", "author": {"login": "krishna-ggk"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/NodesDnApiAction.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package com.amazon.opendistroforelasticsearch.security.dlic.rest.api;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.AuditLog;\n+import com.amazon.opendistroforelasticsearch.security.configuration.AdminDNs;\n+import com.amazon.opendistroforelasticsearch.security.configuration.ConfigurationRepository;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.AbstractConfigurationValidator;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.NodesDnValidator;\n+import com.amazon.opendistroforelasticsearch.security.privileges.PrivilegesEvaluator;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.CType;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.SecurityDynamicConfiguration;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v6.NodesDnV6;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v7.NodesDnV7;\n+import com.amazon.opendistroforelasticsearch.security.ssl.transport.PrincipalExtractor;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.rest.RestChannel;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestRequest.Method;\n+import org.elasticsearch.threadpool.ThreadPool;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * This class implements CRUD operations to manage dynamic NodesDn. The primary usecase is targeted at cross-cluster where\n+ * in node restart can be avoided by populating the coordinating cluster's nodes_dn values.\n+ *\n+ * The APIs are only accessible to SuperAdmin since the configuration controls the core application layer trust validation.\n+ * By default the APIs are disabled and can be enabled by a YML setting - {@link ConfigConstants#OPENDISTRO_SECURITY_NODES_DN_DYNAMIC_CONFIG_ENABLED}\n+ *\n+ * The backing data is stored in {@link ConfigConstants#OPENDISTRO_SECURITY_CONFIG_INDEX_NAME} which is populated during bootstrap.\n+ * For existing clusters, {@link com.amazon.opendistroforelasticsearch.security.tools.OpenDistroSecurityAdmin} tool can\n+ * be used to populate the index.\n+ *\n+ * See {@link com.amazon.opendistroforelasticsearch.security.dlic.rest.api.NodesDnApiTest} for usage examples.\n+ */\n+public class NodesDnApiAction extends PatchableResourceApiAction {\n+    public static final String STATIC_ES_YML_NODES_DN = \"STATIC_ES_YML_NODES_DN\";\n+    private final List<String> staticNodesDnFromEsYml;\n+\n+    @Inject\n+    public NodesDnApiAction(final Settings settings, final Path configPath, final RestController controller, final Client client,\n+        final AdminDNs adminDNs, final ConfigurationRepository cl, final ClusterService cs,\n+        final PrincipalExtractor principalExtractor, final PrivilegesEvaluator evaluator, ThreadPool threadPool, AuditLog auditLog) {\n+        super(settings, configPath, controller, client, adminDNs, cl, cs, principalExtractor, evaluator, threadPool, auditLog);\n+        this.staticNodesDnFromEsYml = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN, Collections.emptyList());\n+    }\n+\n+    @Override\n+    protected void registerHandlers(RestController controller, Settings settings) {\n+        if (settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN_DYNAMIC_CONFIG_ENABLED, false)) {\n+            controller.registerHandler(Method.GET, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.GET, \"/_opendistro/_security/api/nodesdn/\", this);\n+            controller.registerHandler(Method.DELETE, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.PUT, \"/_opendistro/_security/api/nodesdn/{name}\", this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg5NDM0OA=="}, "originalCommit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxNzgzNA==", "bodyText": "thanks for the explanation", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r406817834", "createdAt": "2020-04-10T15:48:47Z", "author": {"login": "debjanibnrj"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/NodesDnApiAction.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package com.amazon.opendistroforelasticsearch.security.dlic.rest.api;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.AuditLog;\n+import com.amazon.opendistroforelasticsearch.security.configuration.AdminDNs;\n+import com.amazon.opendistroforelasticsearch.security.configuration.ConfigurationRepository;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.AbstractConfigurationValidator;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.NodesDnValidator;\n+import com.amazon.opendistroforelasticsearch.security.privileges.PrivilegesEvaluator;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.CType;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.SecurityDynamicConfiguration;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v6.NodesDnV6;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v7.NodesDnV7;\n+import com.amazon.opendistroforelasticsearch.security.ssl.transport.PrincipalExtractor;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.rest.RestChannel;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestRequest.Method;\n+import org.elasticsearch.threadpool.ThreadPool;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * This class implements CRUD operations to manage dynamic NodesDn. The primary usecase is targeted at cross-cluster where\n+ * in node restart can be avoided by populating the coordinating cluster's nodes_dn values.\n+ *\n+ * The APIs are only accessible to SuperAdmin since the configuration controls the core application layer trust validation.\n+ * By default the APIs are disabled and can be enabled by a YML setting - {@link ConfigConstants#OPENDISTRO_SECURITY_NODES_DN_DYNAMIC_CONFIG_ENABLED}\n+ *\n+ * The backing data is stored in {@link ConfigConstants#OPENDISTRO_SECURITY_CONFIG_INDEX_NAME} which is populated during bootstrap.\n+ * For existing clusters, {@link com.amazon.opendistroforelasticsearch.security.tools.OpenDistroSecurityAdmin} tool can\n+ * be used to populate the index.\n+ *\n+ * See {@link com.amazon.opendistroforelasticsearch.security.dlic.rest.api.NodesDnApiTest} for usage examples.\n+ */\n+public class NodesDnApiAction extends PatchableResourceApiAction {\n+    public static final String STATIC_ES_YML_NODES_DN = \"STATIC_ES_YML_NODES_DN\";\n+    private final List<String> staticNodesDnFromEsYml;\n+\n+    @Inject\n+    public NodesDnApiAction(final Settings settings, final Path configPath, final RestController controller, final Client client,\n+        final AdminDNs adminDNs, final ConfigurationRepository cl, final ClusterService cs,\n+        final PrincipalExtractor principalExtractor, final PrivilegesEvaluator evaluator, ThreadPool threadPool, AuditLog auditLog) {\n+        super(settings, configPath, controller, client, adminDNs, cl, cs, principalExtractor, evaluator, threadPool, auditLog);\n+        this.staticNodesDnFromEsYml = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN, Collections.emptyList());\n+    }\n+\n+    @Override\n+    protected void registerHandlers(RestController controller, Settings settings) {\n+        if (settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN_DYNAMIC_CONFIG_ENABLED, false)) {\n+            controller.registerHandler(Method.GET, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.GET, \"/_opendistro/_security/api/nodesdn/\", this);\n+            controller.registerHandler(Method.DELETE, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.PUT, \"/_opendistro/_security/api/nodesdn/{name}\", this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg5NDM0OA=="}, "originalCommit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODg2MTE3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/validation/NodesDnValidator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMDo1NTozM1rOGDGAPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzo1NzowNlrOGD7NKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg5NzI3OA==", "bodyText": "For PUT requests where API can enter free-form value for nodesdn you may want to validate the actual DN string. Eg: \"CN=OpenDistro,OU=Server CA,O=OpenDistro,C=US\" is acceptable but \"xyz\" is not.", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r405897278", "createdAt": "2020-04-09T00:55:33Z", "author": {"login": "debjanibnrj"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/validation/NodesDnValidator.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package com.amazon.opendistroforelasticsearch.security.dlic.rest.validation;\n+\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.rest.RestRequest;\n+\n+public class NodesDnValidator extends AbstractConfigurationValidator {\n+\n+    public NodesDnValidator(final RestRequest request, boolean isSuperAdmin, final BytesReference ref, final Settings esSettings, Object... param) {\n+        super(request, ref, esSettings, param);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk4MDk3OA==", "bodyText": "Good point, but I noticed there is no validation while loading values from ES YML. Let me look this up and accommodate the validation.", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r405980978", "createdAt": "2020-04-09T06:25:12Z", "author": {"login": "krishna-ggk"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/validation/NodesDnValidator.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package com.amazon.opendistroforelasticsearch.security.dlic.rest.validation;\n+\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.rest.RestRequest;\n+\n+public class NodesDnValidator extends AbstractConfigurationValidator {\n+\n+    public NodesDnValidator(final RestRequest request, boolean isSuperAdmin, final BytesReference ref, final Settings esSettings, Object... param) {\n+        super(request, ref, esSettings, param);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg5NzI3OA=="}, "originalCommit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc2ODkzNg==", "bodyText": "I took another look and realized, we support both regex and wildcard, similar to how the YML value is consumed. So we won't be able to validate.", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r406768936", "createdAt": "2020-04-10T13:57:06Z", "author": {"login": "krishna-ggk"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/validation/NodesDnValidator.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package com.amazon.opendistroforelasticsearch.security.dlic.rest.validation;\n+\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.rest.RestRequest;\n+\n+public class NodesDnValidator extends AbstractConfigurationValidator {\n+\n+    public NodesDnValidator(final RestRequest request, boolean isSuperAdmin, final BytesReference ref, final Settings esSettings, Object... param) {\n+        super(request, ref, esSettings, param);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg5NzI3OA=="}, "originalCommit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODkwMzg2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/NodesDnApiAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMToyMTowOFrOGDGZ1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNjozMzo1M1rOGDLTwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkwMzgyOA==", "bodyText": "couldn't get this condition here.\nReserved is a type of configuration (roles, users, mapping etc) which can be only updated by super admin.\nwhy are we checking ES_YML_NODES_DN here?", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r405903828", "createdAt": "2020-04-09T01:21:08Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/NodesDnApiAction.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package com.amazon.opendistroforelasticsearch.security.dlic.rest.api;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.AuditLog;\n+import com.amazon.opendistroforelasticsearch.security.configuration.AdminDNs;\n+import com.amazon.opendistroforelasticsearch.security.configuration.ConfigurationRepository;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.AbstractConfigurationValidator;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.NodesDnValidator;\n+import com.amazon.opendistroforelasticsearch.security.privileges.PrivilegesEvaluator;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.CType;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.SecurityDynamicConfiguration;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v6.NodesDnV6;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v7.NodesDnV7;\n+import com.amazon.opendistroforelasticsearch.security.ssl.transport.PrincipalExtractor;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.rest.RestChannel;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestRequest.Method;\n+import org.elasticsearch.threadpool.ThreadPool;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * This class implements CRUD operations to manage dynamic NodesDn. The primary usecase is targeted at cross-cluster where\n+ * in node restart can be avoided by populating the coordinating cluster's nodes_dn values.\n+ *\n+ * The APIs are only accessible to SuperAdmin since the configuration controls the core application layer trust validation.\n+ * By default the APIs are disabled and can be enabled by a YML setting - {@link ConfigConstants#OPENDISTRO_SECURITY_NODES_DN_DYNAMIC_CONFIG_ENABLED}\n+ *\n+ * The backing data is stored in {@link ConfigConstants#OPENDISTRO_SECURITY_CONFIG_INDEX_NAME} which is populated during bootstrap.\n+ * For existing clusters, {@link com.amazon.opendistroforelasticsearch.security.tools.OpenDistroSecurityAdmin} tool can\n+ * be used to populate the index.\n+ *\n+ * See {@link com.amazon.opendistroforelasticsearch.security.dlic.rest.api.NodesDnApiTest} for usage examples.\n+ */\n+public class NodesDnApiAction extends PatchableResourceApiAction {\n+    public static final String STATIC_ES_YML_NODES_DN = \"STATIC_ES_YML_NODES_DN\";\n+    private final List<String> staticNodesDnFromEsYml;\n+\n+    @Inject\n+    public NodesDnApiAction(final Settings settings, final Path configPath, final RestController controller, final Client client,\n+        final AdminDNs adminDNs, final ConfigurationRepository cl, final ClusterService cs,\n+        final PrincipalExtractor principalExtractor, final PrivilegesEvaluator evaluator, ThreadPool threadPool, AuditLog auditLog) {\n+        super(settings, configPath, controller, client, adminDNs, cl, cs, principalExtractor, evaluator, threadPool, auditLog);\n+        this.staticNodesDnFromEsYml = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN, Collections.emptyList());\n+    }\n+\n+    @Override\n+    protected void registerHandlers(RestController controller, Settings settings) {\n+        if (settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN_DYNAMIC_CONFIG_ENABLED, false)) {\n+            controller.registerHandler(Method.GET, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.GET, \"/_opendistro/_security/api/nodesdn/\", this);\n+            controller.registerHandler(Method.DELETE, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.PUT, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.PATCH, \"/_opendistro/_security/api/nodesdn/\", this);\n+            controller.registerHandler(Method.PATCH, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+        }\n+    }\n+\n+    @Override\n+    protected void handleApiRequest(RestChannel channel, RestRequest request, Client client) throws IOException {\n+        if (!isSuperAdmin()) {\n+            forbidden(channel, \"API allowed only for admin.\");\n+            return;\n+        }\n+        super.handleApiRequest(channel, request, client);\n+    }\n+\n+    protected void consumeParameters(final RestRequest request) {\n+        request.param(\"name\");\n+        request.param(\"show_all\");\n+    }\n+\n+    @Override\n+    protected boolean isReservedAndAccessible(SecurityDynamicConfiguration<?> existingConfiguration, String name) {\n+        if (STATIC_ES_YML_NODES_DN.equals(name)) {\n+            return false;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk4NDE5Mg==", "bodyText": "couldn't get this condition here.\nReserved is a type of configuration (roles, users, mapping etc) which can be only updated by super admin.\nwhy are we checking ES_YML_NODES_DN here?\n\nIt is an amalgamation of super-admin and accessible. Since this is static coming from YML, the intention is to not allow updates to this key.", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r405984192", "createdAt": "2020-04-09T06:33:53Z", "author": {"login": "krishna-ggk"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/NodesDnApiAction.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package com.amazon.opendistroforelasticsearch.security.dlic.rest.api;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.AuditLog;\n+import com.amazon.opendistroforelasticsearch.security.configuration.AdminDNs;\n+import com.amazon.opendistroforelasticsearch.security.configuration.ConfigurationRepository;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.AbstractConfigurationValidator;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.NodesDnValidator;\n+import com.amazon.opendistroforelasticsearch.security.privileges.PrivilegesEvaluator;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.CType;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.SecurityDynamicConfiguration;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v6.NodesDnV6;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v7.NodesDnV7;\n+import com.amazon.opendistroforelasticsearch.security.ssl.transport.PrincipalExtractor;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.rest.RestChannel;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestRequest.Method;\n+import org.elasticsearch.threadpool.ThreadPool;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * This class implements CRUD operations to manage dynamic NodesDn. The primary usecase is targeted at cross-cluster where\n+ * in node restart can be avoided by populating the coordinating cluster's nodes_dn values.\n+ *\n+ * The APIs are only accessible to SuperAdmin since the configuration controls the core application layer trust validation.\n+ * By default the APIs are disabled and can be enabled by a YML setting - {@link ConfigConstants#OPENDISTRO_SECURITY_NODES_DN_DYNAMIC_CONFIG_ENABLED}\n+ *\n+ * The backing data is stored in {@link ConfigConstants#OPENDISTRO_SECURITY_CONFIG_INDEX_NAME} which is populated during bootstrap.\n+ * For existing clusters, {@link com.amazon.opendistroforelasticsearch.security.tools.OpenDistroSecurityAdmin} tool can\n+ * be used to populate the index.\n+ *\n+ * See {@link com.amazon.opendistroforelasticsearch.security.dlic.rest.api.NodesDnApiTest} for usage examples.\n+ */\n+public class NodesDnApiAction extends PatchableResourceApiAction {\n+    public static final String STATIC_ES_YML_NODES_DN = \"STATIC_ES_YML_NODES_DN\";\n+    private final List<String> staticNodesDnFromEsYml;\n+\n+    @Inject\n+    public NodesDnApiAction(final Settings settings, final Path configPath, final RestController controller, final Client client,\n+        final AdminDNs adminDNs, final ConfigurationRepository cl, final ClusterService cs,\n+        final PrincipalExtractor principalExtractor, final PrivilegesEvaluator evaluator, ThreadPool threadPool, AuditLog auditLog) {\n+        super(settings, configPath, controller, client, adminDNs, cl, cs, principalExtractor, evaluator, threadPool, auditLog);\n+        this.staticNodesDnFromEsYml = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN, Collections.emptyList());\n+    }\n+\n+    @Override\n+    protected void registerHandlers(RestController controller, Settings settings) {\n+        if (settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN_DYNAMIC_CONFIG_ENABLED, false)) {\n+            controller.registerHandler(Method.GET, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.GET, \"/_opendistro/_security/api/nodesdn/\", this);\n+            controller.registerHandler(Method.DELETE, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.PUT, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.PATCH, \"/_opendistro/_security/api/nodesdn/\", this);\n+            controller.registerHandler(Method.PATCH, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+        }\n+    }\n+\n+    @Override\n+    protected void handleApiRequest(RestChannel channel, RestRequest request, Client client) throws IOException {\n+        if (!isSuperAdmin()) {\n+            forbidden(channel, \"API allowed only for admin.\");\n+            return;\n+        }\n+        super.handleApiRequest(channel, request, client);\n+    }\n+\n+    protected void consumeParameters(final RestRequest request) {\n+        request.param(\"name\");\n+        request.param(\"show_all\");\n+    }\n+\n+    @Override\n+    protected boolean isReservedAndAccessible(SecurityDynamicConfiguration<?> existingConfiguration, String name) {\n+        if (STATIC_ES_YML_NODES_DN.equals(name)) {\n+            return false;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkwMzgyOA=="}, "originalCommit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODkyNTI4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/NodesDnApiAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMTozNDowMFrOGDGmiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjoyNzozNlrOGDyPHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkwNzA4Mw==", "bodyText": "are we putting primary DN  into security index as well? It will duplicate the information may create confusion.\nAs Primary DN will be now present into elasticsearch.yml as well as nodes_dn.yml .\nOne can export and change this value through security admin tool.", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r405907083", "createdAt": "2020-04-09T01:34:00Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/NodesDnApiAction.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package com.amazon.opendistroforelasticsearch.security.dlic.rest.api;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.AuditLog;\n+import com.amazon.opendistroforelasticsearch.security.configuration.AdminDNs;\n+import com.amazon.opendistroforelasticsearch.security.configuration.ConfigurationRepository;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.AbstractConfigurationValidator;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.NodesDnValidator;\n+import com.amazon.opendistroforelasticsearch.security.privileges.PrivilegesEvaluator;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.CType;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.SecurityDynamicConfiguration;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v6.NodesDnV6;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v7.NodesDnV7;\n+import com.amazon.opendistroforelasticsearch.security.ssl.transport.PrincipalExtractor;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.rest.RestChannel;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestRequest.Method;\n+import org.elasticsearch.threadpool.ThreadPool;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * This class implements CRUD operations to manage dynamic NodesDn. The primary usecase is targeted at cross-cluster where\n+ * in node restart can be avoided by populating the coordinating cluster's nodes_dn values.\n+ *\n+ * The APIs are only accessible to SuperAdmin since the configuration controls the core application layer trust validation.\n+ * By default the APIs are disabled and can be enabled by a YML setting - {@link ConfigConstants#OPENDISTRO_SECURITY_NODES_DN_DYNAMIC_CONFIG_ENABLED}\n+ *\n+ * The backing data is stored in {@link ConfigConstants#OPENDISTRO_SECURITY_CONFIG_INDEX_NAME} which is populated during bootstrap.\n+ * For existing clusters, {@link com.amazon.opendistroforelasticsearch.security.tools.OpenDistroSecurityAdmin} tool can\n+ * be used to populate the index.\n+ *\n+ * See {@link com.amazon.opendistroforelasticsearch.security.dlic.rest.api.NodesDnApiTest} for usage examples.\n+ */\n+public class NodesDnApiAction extends PatchableResourceApiAction {\n+    public static final String STATIC_ES_YML_NODES_DN = \"STATIC_ES_YML_NODES_DN\";\n+    private final List<String> staticNodesDnFromEsYml;\n+\n+    @Inject\n+    public NodesDnApiAction(final Settings settings, final Path configPath, final RestController controller, final Client client,\n+        final AdminDNs adminDNs, final ConfigurationRepository cl, final ClusterService cs,\n+        final PrincipalExtractor principalExtractor, final PrivilegesEvaluator evaluator, ThreadPool threadPool, AuditLog auditLog) {\n+        super(settings, configPath, controller, client, adminDNs, cl, cs, principalExtractor, evaluator, threadPool, auditLog);\n+        this.staticNodesDnFromEsYml = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN, Collections.emptyList());\n+    }\n+\n+    @Override\n+    protected void registerHandlers(RestController controller, Settings settings) {\n+        if (settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN_DYNAMIC_CONFIG_ENABLED, false)) {\n+            controller.registerHandler(Method.GET, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.GET, \"/_opendistro/_security/api/nodesdn/\", this);\n+            controller.registerHandler(Method.DELETE, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.PUT, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.PATCH, \"/_opendistro/_security/api/nodesdn/\", this);\n+            controller.registerHandler(Method.PATCH, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+        }\n+    }\n+\n+    @Override\n+    protected void handleApiRequest(RestChannel channel, RestRequest request, Client client) throws IOException {\n+        if (!isSuperAdmin()) {\n+            forbidden(channel, \"API allowed only for admin.\");\n+            return;\n+        }\n+        super.handleApiRequest(channel, request, client);\n+    }\n+\n+    protected void consumeParameters(final RestRequest request) {\n+        request.param(\"name\");\n+        request.param(\"show_all\");\n+    }\n+\n+    @Override\n+    protected boolean isReservedAndAccessible(SecurityDynamicConfiguration<?> existingConfiguration, String name) {\n+        if (STATIC_ES_YML_NODES_DN.equals(name)) {\n+            return false;\n+        }\n+        return super.isReservedAndAccessible(existingConfiguration, name);\n+    }\n+\n+    @Override\n+    protected void handleGet(final RestChannel channel, RestRequest request, Client client, final JsonNode content) throws IOException {\n+        final String resourcename = request.param(\"name\");\n+\n+        final SecurityDynamicConfiguration<?> configuration = load(getConfigName(), true);\n+        filter(configuration);\n+\n+        // no specific resource requested, return complete config\n+        if (resourcename == null || resourcename.length() == 0) {\n+            final Boolean showAll = request.paramAsBoolean(\"show_all\", Boolean.FALSE);\n+            if (showAll) {\n+                putStaticEntry(configuration);\n+            }\n+            successResponse(channel, configuration);\n+            return;\n+        }\n+\n+        if (!configuration.exists(resourcename)) {\n+            notFound(channel, \"Resource '\" + resourcename + \"' not found.\");\n+            return;\n+        }\n+\n+        configuration.removeOthers(resourcename);\n+        successResponse(channel, configuration);\n+    }\n+\n+    private void putStaticEntry(SecurityDynamicConfiguration<?> configuration) {\n+        if (NodesDnV7.class.equals(configuration.getImplementingClass())) {\n+            NodesDnV7 nodesDnV7 = new NodesDnV7();\n+            nodesDnV7.setNodesDn(staticNodesDnFromEsYml);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyMTk4Mg==", "bodyText": "Primary DN will continue to be only in elasticsearch.yml.\nIf you notice, the static entry only shows up with explicit \"show_all\" flag. It is never propagated to index and the SecurityAdmin will also not use this flag while backing up or backfilling.", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r406621982", "createdAt": "2020-04-10T06:27:36Z", "author": {"login": "krishna-ggk"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/NodesDnApiAction.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package com.amazon.opendistroforelasticsearch.security.dlic.rest.api;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.AuditLog;\n+import com.amazon.opendistroforelasticsearch.security.configuration.AdminDNs;\n+import com.amazon.opendistroforelasticsearch.security.configuration.ConfigurationRepository;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.AbstractConfigurationValidator;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.NodesDnValidator;\n+import com.amazon.opendistroforelasticsearch.security.privileges.PrivilegesEvaluator;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.CType;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.SecurityDynamicConfiguration;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v6.NodesDnV6;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v7.NodesDnV7;\n+import com.amazon.opendistroforelasticsearch.security.ssl.transport.PrincipalExtractor;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.rest.RestChannel;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestRequest.Method;\n+import org.elasticsearch.threadpool.ThreadPool;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * This class implements CRUD operations to manage dynamic NodesDn. The primary usecase is targeted at cross-cluster where\n+ * in node restart can be avoided by populating the coordinating cluster's nodes_dn values.\n+ *\n+ * The APIs are only accessible to SuperAdmin since the configuration controls the core application layer trust validation.\n+ * By default the APIs are disabled and can be enabled by a YML setting - {@link ConfigConstants#OPENDISTRO_SECURITY_NODES_DN_DYNAMIC_CONFIG_ENABLED}\n+ *\n+ * The backing data is stored in {@link ConfigConstants#OPENDISTRO_SECURITY_CONFIG_INDEX_NAME} which is populated during bootstrap.\n+ * For existing clusters, {@link com.amazon.opendistroforelasticsearch.security.tools.OpenDistroSecurityAdmin} tool can\n+ * be used to populate the index.\n+ *\n+ * See {@link com.amazon.opendistroforelasticsearch.security.dlic.rest.api.NodesDnApiTest} for usage examples.\n+ */\n+public class NodesDnApiAction extends PatchableResourceApiAction {\n+    public static final String STATIC_ES_YML_NODES_DN = \"STATIC_ES_YML_NODES_DN\";\n+    private final List<String> staticNodesDnFromEsYml;\n+\n+    @Inject\n+    public NodesDnApiAction(final Settings settings, final Path configPath, final RestController controller, final Client client,\n+        final AdminDNs adminDNs, final ConfigurationRepository cl, final ClusterService cs,\n+        final PrincipalExtractor principalExtractor, final PrivilegesEvaluator evaluator, ThreadPool threadPool, AuditLog auditLog) {\n+        super(settings, configPath, controller, client, adminDNs, cl, cs, principalExtractor, evaluator, threadPool, auditLog);\n+        this.staticNodesDnFromEsYml = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN, Collections.emptyList());\n+    }\n+\n+    @Override\n+    protected void registerHandlers(RestController controller, Settings settings) {\n+        if (settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN_DYNAMIC_CONFIG_ENABLED, false)) {\n+            controller.registerHandler(Method.GET, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.GET, \"/_opendistro/_security/api/nodesdn/\", this);\n+            controller.registerHandler(Method.DELETE, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.PUT, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.PATCH, \"/_opendistro/_security/api/nodesdn/\", this);\n+            controller.registerHandler(Method.PATCH, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+        }\n+    }\n+\n+    @Override\n+    protected void handleApiRequest(RestChannel channel, RestRequest request, Client client) throws IOException {\n+        if (!isSuperAdmin()) {\n+            forbidden(channel, \"API allowed only for admin.\");\n+            return;\n+        }\n+        super.handleApiRequest(channel, request, client);\n+    }\n+\n+    protected void consumeParameters(final RestRequest request) {\n+        request.param(\"name\");\n+        request.param(\"show_all\");\n+    }\n+\n+    @Override\n+    protected boolean isReservedAndAccessible(SecurityDynamicConfiguration<?> existingConfiguration, String name) {\n+        if (STATIC_ES_YML_NODES_DN.equals(name)) {\n+            return false;\n+        }\n+        return super.isReservedAndAccessible(existingConfiguration, name);\n+    }\n+\n+    @Override\n+    protected void handleGet(final RestChannel channel, RestRequest request, Client client, final JsonNode content) throws IOException {\n+        final String resourcename = request.param(\"name\");\n+\n+        final SecurityDynamicConfiguration<?> configuration = load(getConfigName(), true);\n+        filter(configuration);\n+\n+        // no specific resource requested, return complete config\n+        if (resourcename == null || resourcename.length() == 0) {\n+            final Boolean showAll = request.paramAsBoolean(\"show_all\", Boolean.FALSE);\n+            if (showAll) {\n+                putStaticEntry(configuration);\n+            }\n+            successResponse(channel, configuration);\n+            return;\n+        }\n+\n+        if (!configuration.exists(resourcename)) {\n+            notFound(channel, \"Resource '\" + resourcename + \"' not found.\");\n+            return;\n+        }\n+\n+        configuration.removeOthers(resourcename);\n+        successResponse(channel, configuration);\n+    }\n+\n+    private void putStaticEntry(SecurityDynamicConfiguration<?> configuration) {\n+        if (NodesDnV7.class.equals(configuration.getImplementingClass())) {\n+            NodesDnV7 nodesDnV7 = new NodesDnV7();\n+            nodesDnV7.setNodesDn(staticNodesDnFromEsYml);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkwNzA4Mw=="}, "originalCommit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODkyNzMwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/NodesDnApiAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMTozNToxNlrOGDGnvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNjozMjo0N1rOGDLR8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkwNzM5MA==", "bodyText": "super admin check will be evaluated through handleApiRequest() ?", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r405907390", "createdAt": "2020-04-09T01:35:16Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/NodesDnApiAction.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package com.amazon.opendistroforelasticsearch.security.dlic.rest.api;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.AuditLog;\n+import com.amazon.opendistroforelasticsearch.security.configuration.AdminDNs;\n+import com.amazon.opendistroforelasticsearch.security.configuration.ConfigurationRepository;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.AbstractConfigurationValidator;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.NodesDnValidator;\n+import com.amazon.opendistroforelasticsearch.security.privileges.PrivilegesEvaluator;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.CType;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.SecurityDynamicConfiguration;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v6.NodesDnV6;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v7.NodesDnV7;\n+import com.amazon.opendistroforelasticsearch.security.ssl.transport.PrincipalExtractor;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.rest.RestChannel;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestRequest.Method;\n+import org.elasticsearch.threadpool.ThreadPool;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * This class implements CRUD operations to manage dynamic NodesDn. The primary usecase is targeted at cross-cluster where\n+ * in node restart can be avoided by populating the coordinating cluster's nodes_dn values.\n+ *\n+ * The APIs are only accessible to SuperAdmin since the configuration controls the core application layer trust validation.\n+ * By default the APIs are disabled and can be enabled by a YML setting - {@link ConfigConstants#OPENDISTRO_SECURITY_NODES_DN_DYNAMIC_CONFIG_ENABLED}\n+ *\n+ * The backing data is stored in {@link ConfigConstants#OPENDISTRO_SECURITY_CONFIG_INDEX_NAME} which is populated during bootstrap.\n+ * For existing clusters, {@link com.amazon.opendistroforelasticsearch.security.tools.OpenDistroSecurityAdmin} tool can\n+ * be used to populate the index.\n+ *\n+ * See {@link com.amazon.opendistroforelasticsearch.security.dlic.rest.api.NodesDnApiTest} for usage examples.\n+ */\n+public class NodesDnApiAction extends PatchableResourceApiAction {\n+    public static final String STATIC_ES_YML_NODES_DN = \"STATIC_ES_YML_NODES_DN\";\n+    private final List<String> staticNodesDnFromEsYml;\n+\n+    @Inject\n+    public NodesDnApiAction(final Settings settings, final Path configPath, final RestController controller, final Client client,\n+        final AdminDNs adminDNs, final ConfigurationRepository cl, final ClusterService cs,\n+        final PrincipalExtractor principalExtractor, final PrivilegesEvaluator evaluator, ThreadPool threadPool, AuditLog auditLog) {\n+        super(settings, configPath, controller, client, adminDNs, cl, cs, principalExtractor, evaluator, threadPool, auditLog);\n+        this.staticNodesDnFromEsYml = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN, Collections.emptyList());\n+    }\n+\n+    @Override\n+    protected void registerHandlers(RestController controller, Settings settings) {\n+        if (settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN_DYNAMIC_CONFIG_ENABLED, false)) {\n+            controller.registerHandler(Method.GET, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.GET, \"/_opendistro/_security/api/nodesdn/\", this);\n+            controller.registerHandler(Method.DELETE, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.PUT, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.PATCH, \"/_opendistro/_security/api/nodesdn/\", this);\n+            controller.registerHandler(Method.PATCH, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+        }\n+    }\n+\n+    @Override\n+    protected void handleApiRequest(RestChannel channel, RestRequest request, Client client) throws IOException {\n+        if (!isSuperAdmin()) {\n+            forbidden(channel, \"API allowed only for admin.\");\n+            return;\n+        }\n+        super.handleApiRequest(channel, request, client);\n+    }\n+\n+    protected void consumeParameters(final RestRequest request) {\n+        request.param(\"name\");\n+        request.param(\"show_all\");\n+    }\n+\n+    @Override\n+    protected boolean isReservedAndAccessible(SecurityDynamicConfiguration<?> existingConfiguration, String name) {\n+        if (STATIC_ES_YML_NODES_DN.equals(name)) {\n+            return false;\n+        }\n+        return super.isReservedAndAccessible(existingConfiguration, name);\n+    }\n+\n+    @Override\n+    protected void handleGet(final RestChannel channel, RestRequest request, Client client, final JsonNode content) throws IOException {\n+        final String resourcename = request.param(\"name\");\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk4MzcyOA==", "bodyText": "super admin check will be evaluated through handleApiRequest() ?\n\nCorrect. handleApiRequest is invoked first which further dispatches to handleGet, handlePut etc", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r405983728", "createdAt": "2020-04-09T06:32:47Z", "author": {"login": "krishna-ggk"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/NodesDnApiAction.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package com.amazon.opendistroforelasticsearch.security.dlic.rest.api;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.AuditLog;\n+import com.amazon.opendistroforelasticsearch.security.configuration.AdminDNs;\n+import com.amazon.opendistroforelasticsearch.security.configuration.ConfigurationRepository;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.AbstractConfigurationValidator;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.NodesDnValidator;\n+import com.amazon.opendistroforelasticsearch.security.privileges.PrivilegesEvaluator;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.CType;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.SecurityDynamicConfiguration;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v6.NodesDnV6;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v7.NodesDnV7;\n+import com.amazon.opendistroforelasticsearch.security.ssl.transport.PrincipalExtractor;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.rest.RestChannel;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestRequest.Method;\n+import org.elasticsearch.threadpool.ThreadPool;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * This class implements CRUD operations to manage dynamic NodesDn. The primary usecase is targeted at cross-cluster where\n+ * in node restart can be avoided by populating the coordinating cluster's nodes_dn values.\n+ *\n+ * The APIs are only accessible to SuperAdmin since the configuration controls the core application layer trust validation.\n+ * By default the APIs are disabled and can be enabled by a YML setting - {@link ConfigConstants#OPENDISTRO_SECURITY_NODES_DN_DYNAMIC_CONFIG_ENABLED}\n+ *\n+ * The backing data is stored in {@link ConfigConstants#OPENDISTRO_SECURITY_CONFIG_INDEX_NAME} which is populated during bootstrap.\n+ * For existing clusters, {@link com.amazon.opendistroforelasticsearch.security.tools.OpenDistroSecurityAdmin} tool can\n+ * be used to populate the index.\n+ *\n+ * See {@link com.amazon.opendistroforelasticsearch.security.dlic.rest.api.NodesDnApiTest} for usage examples.\n+ */\n+public class NodesDnApiAction extends PatchableResourceApiAction {\n+    public static final String STATIC_ES_YML_NODES_DN = \"STATIC_ES_YML_NODES_DN\";\n+    private final List<String> staticNodesDnFromEsYml;\n+\n+    @Inject\n+    public NodesDnApiAction(final Settings settings, final Path configPath, final RestController controller, final Client client,\n+        final AdminDNs adminDNs, final ConfigurationRepository cl, final ClusterService cs,\n+        final PrincipalExtractor principalExtractor, final PrivilegesEvaluator evaluator, ThreadPool threadPool, AuditLog auditLog) {\n+        super(settings, configPath, controller, client, adminDNs, cl, cs, principalExtractor, evaluator, threadPool, auditLog);\n+        this.staticNodesDnFromEsYml = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN, Collections.emptyList());\n+    }\n+\n+    @Override\n+    protected void registerHandlers(RestController controller, Settings settings) {\n+        if (settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN_DYNAMIC_CONFIG_ENABLED, false)) {\n+            controller.registerHandler(Method.GET, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.GET, \"/_opendistro/_security/api/nodesdn/\", this);\n+            controller.registerHandler(Method.DELETE, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.PUT, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.PATCH, \"/_opendistro/_security/api/nodesdn/\", this);\n+            controller.registerHandler(Method.PATCH, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+        }\n+    }\n+\n+    @Override\n+    protected void handleApiRequest(RestChannel channel, RestRequest request, Client client) throws IOException {\n+        if (!isSuperAdmin()) {\n+            forbidden(channel, \"API allowed only for admin.\");\n+            return;\n+        }\n+        super.handleApiRequest(channel, request, client);\n+    }\n+\n+    protected void consumeParameters(final RestRequest request) {\n+        request.param(\"name\");\n+        request.param(\"show_all\");\n+    }\n+\n+    @Override\n+    protected boolean isReservedAndAccessible(SecurityDynamicConfiguration<?> existingConfiguration, String name) {\n+        if (STATIC_ES_YML_NODES_DN.equals(name)) {\n+            return false;\n+        }\n+        return super.isReservedAndAccessible(existingConfiguration, name);\n+    }\n+\n+    @Override\n+    protected void handleGet(final RestChannel channel, RestRequest request, Client client, final JsonNode content) throws IOException {\n+        final String resourcename = request.param(\"name\");\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkwNzM5MA=="}, "originalCommit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODk0OTE0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/validation/NodesDnValidator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMTo0ODoyNFrOGDG0oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzo1ODozOFrOGD7P1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkxMDY4OQ==", "bodyText": "where are we using isSuperAdmin boolean?", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r405910689", "createdAt": "2020-04-09T01:48:24Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/validation/NodesDnValidator.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package com.amazon.opendistroforelasticsearch.security.dlic.rest.validation;\n+\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.rest.RestRequest;\n+\n+public class NodesDnValidator extends AbstractConfigurationValidator {\n+\n+    public NodesDnValidator(final RestRequest request, boolean isSuperAdmin, final BytesReference ref, final Settings esSettings, Object... param) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk4MzM5MA==", "bodyText": "where are we using isSuperAdmin boolean?\n\nWill remove, not using this anymore.", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r405983390", "createdAt": "2020-04-09T06:31:53Z", "author": {"login": "krishna-ggk"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/validation/NodesDnValidator.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package com.amazon.opendistroforelasticsearch.security.dlic.rest.validation;\n+\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.rest.RestRequest;\n+\n+public class NodesDnValidator extends AbstractConfigurationValidator {\n+\n+    public NodesDnValidator(final RestRequest request, boolean isSuperAdmin, final BytesReference ref, final Settings esSettings, Object... param) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkxMDY4OQ=="}, "originalCommit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc2OTYyMg==", "bodyText": "Done.", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r406769622", "createdAt": "2020-04-10T13:58:38Z", "author": {"login": "krishna-ggk"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/validation/NodesDnValidator.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package com.amazon.opendistroforelasticsearch.security.dlic.rest.validation;\n+\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.rest.RestRequest;\n+\n+public class NodesDnValidator extends AbstractConfigurationValidator {\n+\n+    public NodesDnValidator(final RestRequest request, boolean isSuperAdmin, final BytesReference ref, final Settings esSettings, Object... param) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkxMDY4OQ=="}, "originalCommit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTA2NDA0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/Migration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMjo1NjozNFrOGDH4gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNDowMToyNFrOGD7UMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkyODA2Nw==", "bodyText": "if both models are same, do we need migration?", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r405928067", "createdAt": "2020-04-09T02:56:34Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/Migration.java", "diffHunk": "@@ -96,7 +96,20 @@\n         }\n         return c7;\n     }\n-    \n+\n+    public static SecurityDynamicConfiguration<NodesDnV7> migrateNodesDn(SecurityDynamicConfiguration<NodesDnV6> n6) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc3MDczOQ==", "bodyText": "I did merge the classes. However this migration section remains since the version is part of the configuration in v7 as Meta fields.\nV7\n_meta:\n  type: \"nodesdn\"\n  config_version: 2\ncluster1:\n  nodes_dn:\n    - \"CN=abc.com\"\nV6\ncluster1:\n  nodes_dn:\n    - \"CN=abc.com\"", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r406770739", "createdAt": "2020-04-10T14:01:24Z", "author": {"login": "krishna-ggk"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/Migration.java", "diffHunk": "@@ -96,7 +96,20 @@\n         }\n         return c7;\n     }\n-    \n+\n+    public static SecurityDynamicConfiguration<NodesDnV7> migrateNodesDn(SecurityDynamicConfiguration<NodesDnV6> n6) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkyODA2Nw=="}, "originalCommit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTEyODk4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/transport/DefaultInterClusterRequestEvaluator.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMzozNzoxMFrOGDIeAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNTo0MjozOVrOGD-BlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkzNzY2NA==", "bodyText": "We are already listening changes and updating it\ndo we still need to make it volatile?", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r405937664", "createdAt": "2020-04-09T03:37:10Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/transport/DefaultInterClusterRequestEvaluator.java", "diffHunk": "@@ -47,15 +56,34 @@\n import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n import com.amazon.opendistroforelasticsearch.security.support.WildcardMatcher;\n \n-public final class DefaultInterClusterRequestEvaluator implements InterClusterRequestEvaluator {\n+public final class DefaultInterClusterRequestEvaluator implements InterClusterRequestEvaluator, DCFListener {\n \n     private final Logger log = LogManager.getLogger(this.getClass());\n     private final String certOid;\n-    private final List<String> nodesDn;\n+    private final List<String> staticNodesDnFromEsYml;\n+    private boolean dynamicNodesDnConfigEnabled;\n+    private volatile Map<String, List<String>> dynamicNodesDn;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk4MzExNw==", "bodyText": "We are already listening changes and updating it\ndo we still need to make it volatile?\n\nYes, it is mostly to ensure the writes are quickly picked up in the subsequent reads. Otherwise further reads could end up reading from cache and miss the update.", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r405983117", "createdAt": "2020-04-09T06:31:07Z", "author": {"login": "krishna-ggk"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/transport/DefaultInterClusterRequestEvaluator.java", "diffHunk": "@@ -47,15 +56,34 @@\n import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n import com.amazon.opendistroforelasticsearch.security.support.WildcardMatcher;\n \n-public final class DefaultInterClusterRequestEvaluator implements InterClusterRequestEvaluator {\n+public final class DefaultInterClusterRequestEvaluator implements InterClusterRequestEvaluator, DCFListener {\n \n     private final Logger log = LogManager.getLogger(this.getClass());\n     private final String certOid;\n-    private final List<String> nodesDn;\n+    private final List<String> staticNodesDnFromEsYml;\n+    private boolean dynamicNodesDnConfigEnabled;\n+    private volatile Map<String, List<String>> dynamicNodesDn;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkzNzY2NA=="}, "originalCommit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQyNDg5OQ==", "bodyText": "Consider using AtomicReference instead of volatile: private final AtomicReference<Map<String, List<String>>> dynamicNodesDn = new AtomicReference<>(Collections.emptyMap());", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r406424899", "createdAt": "2020-04-09T19:22:32Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/transport/DefaultInterClusterRequestEvaluator.java", "diffHunk": "@@ -47,15 +56,34 @@\n import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n import com.amazon.opendistroforelasticsearch.security.support.WildcardMatcher;\n \n-public final class DefaultInterClusterRequestEvaluator implements InterClusterRequestEvaluator {\n+public final class DefaultInterClusterRequestEvaluator implements InterClusterRequestEvaluator, DCFListener {\n \n     private final Logger log = LogManager.getLogger(this.getClass());\n     private final String certOid;\n-    private final List<String> nodesDn;\n+    private final List<String> staticNodesDnFromEsYml;\n+    private boolean dynamicNodesDnConfigEnabled;\n+    private volatile Map<String, List<String>> dynamicNodesDn;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkzNzY2NA=="}, "originalCommit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY1OTE0OA==", "bodyText": "Consider using AtomicReference instead of volatile: private final AtomicReference<Map<String, List<String>>> dynamicNodesDn = new AtomicReference<>(Collections.emptyMap());\n\nSince I don't need CAS semantics, it seems like using volatile direclty is simpler. Do you see any other benefits of using AtomicReference in this specific scenario?", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r406659148", "createdAt": "2020-04-10T08:25:59Z", "author": {"login": "krishna-ggk"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/transport/DefaultInterClusterRequestEvaluator.java", "diffHunk": "@@ -47,15 +56,34 @@\n import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n import com.amazon.opendistroforelasticsearch.security.support.WildcardMatcher;\n \n-public final class DefaultInterClusterRequestEvaluator implements InterClusterRequestEvaluator {\n+public final class DefaultInterClusterRequestEvaluator implements InterClusterRequestEvaluator, DCFListener {\n \n     private final Logger log = LogManager.getLogger(this.getClass());\n     private final String certOid;\n-    private final List<String> nodesDn;\n+    private final List<String> staticNodesDnFromEsYml;\n+    private boolean dynamicNodesDnConfigEnabled;\n+    private volatile Map<String, List<String>> dynamicNodesDn;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkzNzY2NA=="}, "originalCommit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxNTEyNQ==", "bodyText": "1. Can you please make sure if nodes_dn API calls are being audit logged properly?\n2. Under which event it is being audit logged? Do we need to create separate audit log events?\n\n\nThe current audit coverage covers limited REST API access audit logging\nSince the Admin access is checked after the section in the above link, they are not logged currently. However this behavior is consistent with other security API such as SSL certs APIs that were recently added. Since these are all admin API, do you think we can add them collectively?\n(It looks like security index updates aren't logged, or that would have had the required info).\n\n3. Can we verify 6.8 to 7.1 migration?\n4. Can we test if security admin tools are working as expected ?\n\n\nGood point. This was already being tested in SecurityAdminMigrationTests, but added a non-empty file to improve coverage.\n$ pwd\n~/code/native_es_stuff/fork/security/data/utest_n1_ffork_1_t17447483324660_migration\n\n$ cat nodes_dn.yml\n---\ncluster1:\n  nodes_dn:\n  - \"cn=popeye\"\n\n$ cat v7/nodes_dn.yml\n---\n_meta:\n  type: \"nodesdn\"\n  config_version: 2\ncluster1:\n  nodes_dn:\n  - \"cn=popeye\"\n\n5. Do we need any code change for certificate oid?\n\n\nNope. CertOid is fall back logic if there is no match for nodes_dn. It is singular value and hence makes sense only in YML.", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r406815125", "createdAt": "2020-04-10T15:42:39Z", "author": {"login": "krishna-ggk"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/transport/DefaultInterClusterRequestEvaluator.java", "diffHunk": "@@ -47,15 +56,34 @@\n import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n import com.amazon.opendistroforelasticsearch.security.support.WildcardMatcher;\n \n-public final class DefaultInterClusterRequestEvaluator implements InterClusterRequestEvaluator {\n+public final class DefaultInterClusterRequestEvaluator implements InterClusterRequestEvaluator, DCFListener {\n \n     private final Logger log = LogManager.getLogger(this.getClass());\n     private final String certOid;\n-    private final List<String> nodesDn;\n+    private final List<String> staticNodesDnFromEsYml;\n+    private boolean dynamicNodesDnConfigEnabled;\n+    private volatile Map<String, List<String>> dynamicNodesDn;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkzNzY2NA=="}, "originalCommit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTEzMDI3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/transport/DefaultInterClusterRequestEvaluator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMzozNzo1NlrOGDIevQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNjoyODozNlrOGDLMBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkzNzg1Mw==", "bodyText": "what will happen during the node/cluster boot up time when .security_index is not available? dynamicNodesDn will be initialized with empty list?", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r405937853", "createdAt": "2020-04-09T03:37:56Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/transport/DefaultInterClusterRequestEvaluator.java", "diffHunk": "@@ -47,15 +56,34 @@\n import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n import com.amazon.opendistroforelasticsearch.security.support.WildcardMatcher;\n \n-public final class DefaultInterClusterRequestEvaluator implements InterClusterRequestEvaluator {\n+public final class DefaultInterClusterRequestEvaluator implements InterClusterRequestEvaluator, DCFListener {\n \n     private final Logger log = LogManager.getLogger(this.getClass());\n     private final String certOid;\n-    private final List<String> nodesDn;\n+    private final List<String> staticNodesDnFromEsYml;\n+    private boolean dynamicNodesDnConfigEnabled;\n+    private volatile Map<String, List<String>> dynamicNodesDn;\n \n     public DefaultInterClusterRequestEvaluator(final Settings settings) {\n         this.certOid = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CERT_OID, \"1.2.3.4.5.5\");\n-        this.nodesDn = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN, Collections.emptyList());\n+        this.staticNodesDnFromEsYml = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN, Collections.emptyList());\n+        this.dynamicNodesDnConfigEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN_DYNAMIC_CONFIG_ENABLED, false);\n+        this.dynamicNodesDn = Collections.emptyMap();\n+    }\n+\n+    public void subscribeForChanges(DynamicConfigFactory dynamicConfigFactory) {\n+        if (this.dynamicNodesDnConfigEnabled) {\n+            dynamicConfigFactory.registerDCFListener(this);\n+        }\n+    }\n+\n+    private List<String> getNodesDnToEvaluate() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk4MjIxMg==", "bodyText": "what will happen during the node/cluster boot up time when .security_index is not available? dynamicNodesDn will be initialized with empty list?\n\nCorrect. For boot up it uses the value from YML alone.", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r405982212", "createdAt": "2020-04-09T06:28:36Z", "author": {"login": "krishna-ggk"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/transport/DefaultInterClusterRequestEvaluator.java", "diffHunk": "@@ -47,15 +56,34 @@\n import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n import com.amazon.opendistroforelasticsearch.security.support.WildcardMatcher;\n \n-public final class DefaultInterClusterRequestEvaluator implements InterClusterRequestEvaluator {\n+public final class DefaultInterClusterRequestEvaluator implements InterClusterRequestEvaluator, DCFListener {\n \n     private final Logger log = LogManager.getLogger(this.getClass());\n     private final String certOid;\n-    private final List<String> nodesDn;\n+    private final List<String> staticNodesDnFromEsYml;\n+    private boolean dynamicNodesDnConfigEnabled;\n+    private volatile Map<String, List<String>> dynamicNodesDn;\n \n     public DefaultInterClusterRequestEvaluator(final Settings settings) {\n         this.certOid = settings.get(ConfigConstants.OPENDISTRO_SECURITY_CERT_OID, \"1.2.3.4.5.5\");\n-        this.nodesDn = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN, Collections.emptyList());\n+        this.staticNodesDnFromEsYml = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN, Collections.emptyList());\n+        this.dynamicNodesDnConfigEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN_DYNAMIC_CONFIG_ENABLED, false);\n+        this.dynamicNodesDn = Collections.emptyMap();\n+    }\n+\n+    public void subscribeForChanges(DynamicConfigFactory dynamicConfigFactory) {\n+        if (this.dynamicNodesDnConfigEnabled) {\n+            dynamicConfigFactory.registerDCFListener(this);\n+        }\n+    }\n+\n+    private List<String> getNodesDnToEvaluate() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkzNzg1Mw=="}, "originalCommit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTE0NjA4OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/ccstest/CrossClusterSearchTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMzo0Nzo1OFrOGDInnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNjoyODoxMlrOGDLLcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk0MDEyNQ==", "bodyText": "should we also add -ve test? where we do not add new cert dynamically and statically?", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r405940125", "createdAt": "2020-04-09T03:47:58Z", "author": {"login": "hardik-k-shah"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/ccstest/CrossClusterSearchTests.java", "diffHunk": "@@ -827,4 +879,113 @@ public void testCcsAggregationsDnfof() throws Exception {\n         ccs = new RestHelper(cl1Info, false, false, getResourceFolder()).executePostRequest(\"cross_cluster_two:not*,notf*/_search?pretty\", agg, encodeBasicHeader(\"twitter\",\"nagilum\"));\n         Assert.assertEquals(HttpStatus.SC_OK, ccs.getStatusCode());\n     }\n-}\n\\ No newline at end of file\n+\n+\n+    private ClusterTransportClientSettings getBaseSettingsWithDifferentCert() {\n+        Settings cluster = Settings.builder()\n+            .put(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_HTTP_ENABLED, true)\n+            .put(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_HTTP_KEYSTORE_FILEPATH,\n+                FileHelper.getAbsoluteFilePathFromClassPath(\"restapi/node-0-keystore.jks\"))\n+            .put(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_HTTP_TRUSTSTORE_FILEPATH,\n+                FileHelper.getAbsoluteFilePathFromClassPath(\"restapi/truststore.jks\"))\n+            .put(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_KEYSTORE_FILEPATH, FileHelper.getAbsoluteFilePathFromClassPath(\"node-untspec5-keystore.p12\"))\n+            .put(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_KEYSTORE_ALIAS, \"1\")\n+            .put(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN_DYNAMIC_CONFIG_ENABLED, true)\n+            .put(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_KEYSTORE_TYPE, \"PKCS12\")\n+            .putList(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN,\n+                \"EMAILADDRESS=unt@tst.com,CN=node-untspec5.example.com,OU=SSL,O=Te\\\\, st,L=Test,C=DE\")//, \"CN=node-0.example.com,OU=SSL,O=Test,L=Test,C=DE\")\n+            .putList(ConfigConstants.OPENDISTRO_SECURITY_AUTHCZ_ADMIN_DN,\n+                \"EMAILADDRESS=unt@xxx.com,CN=node-untspec6.example.com,OU=SSL,O=Te\\\\, st,L=Test,C=DE\",\n+                \"CN=kirk,OU=client,O=client,l=tEst, C=De\")\n+            .put(ConfigConstants.OPENDISTRO_SECURITY_CERT_OID,\"1.2.3.4.5.6\")\n+            .build();\n+        Settings transport = Settings.builder()\n+            .put(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_KEYSTORE_FILEPATH, FileHelper.getAbsoluteFilePathFromClassPath(\"node-untspec6-keystore.p12\"))\n+            .build();\n+        return new ClusterTransportClientSettings(cluster, transport);\n+    }\n+\n+    private void populateBaseData(ClusterTransportClientSettings cluster1, ClusterTransportClientSettings cluster2) throws Exception {\n+        final String cl1BodyMain = rh1.executeGetRequest(\"\", encodeBasicHeader(\"twitter\",\"nagilum\")).getBody();\n+        Assert.assertTrue(cl1BodyMain, cl1BodyMain.contains(\"crl1\"));\n+\n+        final String cl2BodyMain = rh2.executeGetRequest(\"\", encodeBasicHeader(\"twitter\",\"nagilum\")).getBody();\n+        Assert.assertTrue(cl2BodyMain.contains(\"crl2\"));\n+\n+        try (TransportClient tc = getInternalTransportClient(cl1Info, cluster1.transportClientSettings())) {\n+            tc.index(new IndexRequest(\"twitter\").type(\"tweet\").setRefreshPolicy(RefreshPolicy.IMMEDIATE).id(\"0\")\n+                .source(\"{\\\"cluster\\\": \\\"\"+cl1Info.clustername+\"\\\"}\", XContentType.JSON)).actionGet();\n+        }\n+\n+        try (TransportClient tc = getInternalTransportClient(cl2Info, cluster2.transportClientSettings())) {\n+            tc.index(new IndexRequest(\"twitter\").type(\"tweet\").setRefreshPolicy(RefreshPolicy.IMMEDIATE).id(\"0\")\n+                .source(\"{\\\"cluster\\\": \\\"\"+cl2Info.clustername+\"\\\"}\", XContentType.JSON)).actionGet();\n+        }\n+    }\n+\n+    @Test\n+    public void testCcsWithDiffCertsWithNoNodesDnUpdate() throws Exception {\n+        final ClusterTransportClientSettings cluster1 = new ClusterTransportClientSettings();\n+        final ClusterTransportClientSettings cluster2 = getBaseSettingsWithDifferentCert();\n+\n+        setupCcs(new DynamicSecurityConfig(), cluster1, cluster2);\n+        populateBaseData(cluster1, cluster2);\n+\n+        String uri = \"cross_cluster_two:twitter/tweet/_search?pretty\";\n+        HttpResponse ccs = rh1.executeGetRequest(uri, encodeBasicHeader(\"twitter\", \"nagilum\"));\n+        System.out.println(ccs.getBody());\n+        assertThat(ccs.getStatusCode(), equalTo(HttpStatus.SC_INTERNAL_SERVER_ERROR));\n+        assertThat(ccs.getBody(), containsString(\"no OID or security.nodes_dn incorrect configured\"));\n+    }\n+\n+    @Test\n+    public void testCcsWithDiffCertsWithNodesDnStaticallyAdded() throws Exception {\n+        final ClusterTransportClientSettings cluster1 = new ClusterTransportClientSettings();\n+        ClusterTransportClientSettings cluster2 = getBaseSettingsWithDifferentCert();\n+        Settings updatedCluster2 = Settings.builder()\n+            .put(cluster2.clusterSettings())\n+            .putList(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN,\n+                \"EMAILADDRESS=unt@tst.com,CN=node-untspec5.example.com,OU=SSL,O=Te\\\\, st,L=Test,C=DE\",\n+                \"CN=node-0.example.com,OU=SSL,O=Test,L=Test,C=DE\")\n+            .build();\n+        cluster2 = new ClusterTransportClientSettings(updatedCluster2, cluster2.transportClientSettings());\n+\n+        setupCcs(new DynamicSecurityConfig(), cluster1, cluster2);\n+        populateBaseData(cluster1, cluster2);\n+\n+        String uri = \"cross_cluster_two:twitter/tweet/_search?pretty\";\n+        HttpResponse ccs = rh1.executeGetRequest(uri, encodeBasicHeader(\"twitter\", \"nagilum\"));\n+        System.out.println(ccs.getBody());\n+        assertThat(ccs.getStatusCode(), equalTo(HttpStatus.SC_OK));\n+        assertThat(ccs.getBody(), not(containsString(\"security_exception\")));\n+        assertThat(ccs.getBody(), containsString(\"\\\"timed_out\\\" : false\"));\n+        assertThat(ccs.getBody(), not(containsString(\"crl1\")));\n+        assertThat(ccs.getBody(), containsString(\"crl2\"));\n+        assertThat(ccs.getBody(), containsString(\"cross_cluster_two:twitter\"));\n+    }\n+\n+    @Test\n+    public void testCcsWithDiffCertsWithNodesDnDynamicallyAdded() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "originalPosition": 225}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk4MjA2Nw==", "bodyText": "There is, testCcsWithDiffCertsWithNoNodesDnUpdate()", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r405982067", "createdAt": "2020-04-09T06:28:12Z", "author": {"login": "krishna-ggk"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/ccstest/CrossClusterSearchTests.java", "diffHunk": "@@ -827,4 +879,113 @@ public void testCcsAggregationsDnfof() throws Exception {\n         ccs = new RestHelper(cl1Info, false, false, getResourceFolder()).executePostRequest(\"cross_cluster_two:not*,notf*/_search?pretty\", agg, encodeBasicHeader(\"twitter\",\"nagilum\"));\n         Assert.assertEquals(HttpStatus.SC_OK, ccs.getStatusCode());\n     }\n-}\n\\ No newline at end of file\n+\n+\n+    private ClusterTransportClientSettings getBaseSettingsWithDifferentCert() {\n+        Settings cluster = Settings.builder()\n+            .put(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_HTTP_ENABLED, true)\n+            .put(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_HTTP_KEYSTORE_FILEPATH,\n+                FileHelper.getAbsoluteFilePathFromClassPath(\"restapi/node-0-keystore.jks\"))\n+            .put(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_HTTP_TRUSTSTORE_FILEPATH,\n+                FileHelper.getAbsoluteFilePathFromClassPath(\"restapi/truststore.jks\"))\n+            .put(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_KEYSTORE_FILEPATH, FileHelper.getAbsoluteFilePathFromClassPath(\"node-untspec5-keystore.p12\"))\n+            .put(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_KEYSTORE_ALIAS, \"1\")\n+            .put(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN_DYNAMIC_CONFIG_ENABLED, true)\n+            .put(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_KEYSTORE_TYPE, \"PKCS12\")\n+            .putList(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN,\n+                \"EMAILADDRESS=unt@tst.com,CN=node-untspec5.example.com,OU=SSL,O=Te\\\\, st,L=Test,C=DE\")//, \"CN=node-0.example.com,OU=SSL,O=Test,L=Test,C=DE\")\n+            .putList(ConfigConstants.OPENDISTRO_SECURITY_AUTHCZ_ADMIN_DN,\n+                \"EMAILADDRESS=unt@xxx.com,CN=node-untspec6.example.com,OU=SSL,O=Te\\\\, st,L=Test,C=DE\",\n+                \"CN=kirk,OU=client,O=client,l=tEst, C=De\")\n+            .put(ConfigConstants.OPENDISTRO_SECURITY_CERT_OID,\"1.2.3.4.5.6\")\n+            .build();\n+        Settings transport = Settings.builder()\n+            .put(SSLConfigConstants.OPENDISTRO_SECURITY_SSL_TRANSPORT_KEYSTORE_FILEPATH, FileHelper.getAbsoluteFilePathFromClassPath(\"node-untspec6-keystore.p12\"))\n+            .build();\n+        return new ClusterTransportClientSettings(cluster, transport);\n+    }\n+\n+    private void populateBaseData(ClusterTransportClientSettings cluster1, ClusterTransportClientSettings cluster2) throws Exception {\n+        final String cl1BodyMain = rh1.executeGetRequest(\"\", encodeBasicHeader(\"twitter\",\"nagilum\")).getBody();\n+        Assert.assertTrue(cl1BodyMain, cl1BodyMain.contains(\"crl1\"));\n+\n+        final String cl2BodyMain = rh2.executeGetRequest(\"\", encodeBasicHeader(\"twitter\",\"nagilum\")).getBody();\n+        Assert.assertTrue(cl2BodyMain.contains(\"crl2\"));\n+\n+        try (TransportClient tc = getInternalTransportClient(cl1Info, cluster1.transportClientSettings())) {\n+            tc.index(new IndexRequest(\"twitter\").type(\"tweet\").setRefreshPolicy(RefreshPolicy.IMMEDIATE).id(\"0\")\n+                .source(\"{\\\"cluster\\\": \\\"\"+cl1Info.clustername+\"\\\"}\", XContentType.JSON)).actionGet();\n+        }\n+\n+        try (TransportClient tc = getInternalTransportClient(cl2Info, cluster2.transportClientSettings())) {\n+            tc.index(new IndexRequest(\"twitter\").type(\"tweet\").setRefreshPolicy(RefreshPolicy.IMMEDIATE).id(\"0\")\n+                .source(\"{\\\"cluster\\\": \\\"\"+cl2Info.clustername+\"\\\"}\", XContentType.JSON)).actionGet();\n+        }\n+    }\n+\n+    @Test\n+    public void testCcsWithDiffCertsWithNoNodesDnUpdate() throws Exception {\n+        final ClusterTransportClientSettings cluster1 = new ClusterTransportClientSettings();\n+        final ClusterTransportClientSettings cluster2 = getBaseSettingsWithDifferentCert();\n+\n+        setupCcs(new DynamicSecurityConfig(), cluster1, cluster2);\n+        populateBaseData(cluster1, cluster2);\n+\n+        String uri = \"cross_cluster_two:twitter/tweet/_search?pretty\";\n+        HttpResponse ccs = rh1.executeGetRequest(uri, encodeBasicHeader(\"twitter\", \"nagilum\"));\n+        System.out.println(ccs.getBody());\n+        assertThat(ccs.getStatusCode(), equalTo(HttpStatus.SC_INTERNAL_SERVER_ERROR));\n+        assertThat(ccs.getBody(), containsString(\"no OID or security.nodes_dn incorrect configured\"));\n+    }\n+\n+    @Test\n+    public void testCcsWithDiffCertsWithNodesDnStaticallyAdded() throws Exception {\n+        final ClusterTransportClientSettings cluster1 = new ClusterTransportClientSettings();\n+        ClusterTransportClientSettings cluster2 = getBaseSettingsWithDifferentCert();\n+        Settings updatedCluster2 = Settings.builder()\n+            .put(cluster2.clusterSettings())\n+            .putList(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN,\n+                \"EMAILADDRESS=unt@tst.com,CN=node-untspec5.example.com,OU=SSL,O=Te\\\\, st,L=Test,C=DE\",\n+                \"CN=node-0.example.com,OU=SSL,O=Test,L=Test,C=DE\")\n+            .build();\n+        cluster2 = new ClusterTransportClientSettings(updatedCluster2, cluster2.transportClientSettings());\n+\n+        setupCcs(new DynamicSecurityConfig(), cluster1, cluster2);\n+        populateBaseData(cluster1, cluster2);\n+\n+        String uri = \"cross_cluster_two:twitter/tweet/_search?pretty\";\n+        HttpResponse ccs = rh1.executeGetRequest(uri, encodeBasicHeader(\"twitter\", \"nagilum\"));\n+        System.out.println(ccs.getBody());\n+        assertThat(ccs.getStatusCode(), equalTo(HttpStatus.SC_OK));\n+        assertThat(ccs.getBody(), not(containsString(\"security_exception\")));\n+        assertThat(ccs.getBody(), containsString(\"\\\"timed_out\\\" : false\"));\n+        assertThat(ccs.getBody(), not(containsString(\"crl1\")));\n+        assertThat(ccs.getBody(), containsString(\"crl2\"));\n+        assertThat(ccs.getBody(), containsString(\"cross_cluster_two:twitter\"));\n+    }\n+\n+    @Test\n+    public void testCcsWithDiffCertsWithNodesDnDynamicallyAdded() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk0MDEyNQ=="}, "originalCommit": {"oid": "6c709ebf8e9b4c1edf8415cd1d8e1be7042ac198"}, "originalPosition": 225}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyODg3Mjc0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/validation/NodesDnValidator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwODowNTozN1rOGEfy0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMTowMToxMFrOGE1K3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM2ODQwMQ==", "bodyText": "Do we need some validation here of the input as we accepting directly List ?", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r407368401", "createdAt": "2020-04-13T08:05:37Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/validation/NodesDnValidator.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package com.amazon.opendistroforelasticsearch.security.dlic.rest.validation;\n+\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.rest.RestRequest;\n+\n+public class NodesDnValidator extends AbstractConfigurationValidator {\n+\n+    public NodesDnValidator(final RestRequest request, final BytesReference ref, final Settings esSettings, Object... param) {\n+        super(request, ref, esSettings, param);\n+        this.payloadMandatory = true;\n+\n+        allowedKeys.put(\"nodes_dn\", DataType.ARRAY);\n+        mandatoryKeys.add(\"nodes_dn\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd20b22ca37d7ee6e4166dbc2af29d932fbde75"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQxNTQxNg==", "bodyText": "The nodes_dn accepts regex and wildcard similar to how the YML config is consumed. Hence chose not to validate.", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r407415416", "createdAt": "2020-04-13T10:19:46Z", "author": {"login": "krishna-ggk"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/validation/NodesDnValidator.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package com.amazon.opendistroforelasticsearch.security.dlic.rest.validation;\n+\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.rest.RestRequest;\n+\n+public class NodesDnValidator extends AbstractConfigurationValidator {\n+\n+    public NodesDnValidator(final RestRequest request, final BytesReference ref, final Settings esSettings, Object... param) {\n+        super(request, ref, esSettings, param);\n+        this.payloadMandatory = true;\n+\n+        allowedKeys.put(\"nodes_dn\", DataType.ARRAY);\n+        mandatoryKeys.add(\"nodes_dn\");\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM2ODQwMQ=="}, "originalCommit": {"oid": "cdd20b22ca37d7ee6e4166dbc2af29d932fbde75"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcxODYyMQ==", "bodyText": "I m just worried about how bad requests are handled. Will passing any random string be accepted like Random= testing?", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r407718621", "createdAt": "2020-04-13T21:01:10Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/validation/NodesDnValidator.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package com.amazon.opendistroforelasticsearch.security.dlic.rest.validation;\n+\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.rest.RestRequest;\n+\n+public class NodesDnValidator extends AbstractConfigurationValidator {\n+\n+    public NodesDnValidator(final RestRequest request, final BytesReference ref, final Settings esSettings, Object... param) {\n+        super(request, ref, esSettings, param);\n+        this.payloadMandatory = true;\n+\n+        allowedKeys.put(\"nodes_dn\", DataType.ARRAY);\n+        mandatoryKeys.add(\"nodes_dn\");\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM2ODQwMQ=="}, "originalCommit": {"oid": "cdd20b22ca37d7ee6e4166dbc2af29d932fbde75"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyODkwODk1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/NodesDnApiAction.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwODoyMjoxMFrOGEgIEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMDo0OTozOFrOGE0zFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM3Mzg0MA==", "bodyText": "I am slightly confused here. isReservedAndAccessible checks if class implements StaticDefinable interface which NodeDn does not.\nDid you mean to override isReserved() here instead ?\nSince we are calling super.isReservedAndAccessible(), this function will always never return false ?", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r407373840", "createdAt": "2020-04-13T08:22:10Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/NodesDnApiAction.java", "diffHunk": "@@ -0,0 +1,145 @@\n+package com.amazon.opendistroforelasticsearch.security.dlic.rest.api;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.AuditLog;\n+import com.amazon.opendistroforelasticsearch.security.configuration.AdminDNs;\n+import com.amazon.opendistroforelasticsearch.security.configuration.ConfigurationRepository;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.AbstractConfigurationValidator;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.NodesDnValidator;\n+import com.amazon.opendistroforelasticsearch.security.privileges.PrivilegesEvaluator;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.CType;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.SecurityDynamicConfiguration;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.NodesDn;\n+import com.amazon.opendistroforelasticsearch.security.ssl.transport.PrincipalExtractor;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.rest.RestChannel;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestRequest.Method;\n+import org.elasticsearch.threadpool.ThreadPool;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * This class implements CRUD operations to manage dynamic NodesDn. The primary usecase is targeted at cross-cluster where\n+ * in node restart can be avoided by populating the coordinating cluster's nodes_dn values.\n+ *\n+ * The APIs are only accessible to SuperAdmin since the configuration controls the core application layer trust validation.\n+ * By default the APIs are disabled and can be enabled by a YML setting - {@link ConfigConstants#OPENDISTRO_SECURITY_NODES_DN_DYNAMIC_CONFIG_ENABLED}\n+ *\n+ * The backing data is stored in {@link ConfigConstants#OPENDISTRO_SECURITY_CONFIG_INDEX_NAME} which is populated during bootstrap.\n+ * For existing clusters, {@link com.amazon.opendistroforelasticsearch.security.tools.OpenDistroSecurityAdmin} tool can\n+ * be used to populate the index.\n+ *\n+ * See {@link com.amazon.opendistroforelasticsearch.security.dlic.rest.api.NodesDnApiTest} for usage examples.\n+ */\n+public class NodesDnApiAction extends PatchableResourceApiAction {\n+    public static final String STATIC_ES_YML_NODES_DN = \"STATIC_ES_YML_NODES_DN\";\n+    private final List<String> staticNodesDnFromEsYml;\n+\n+    @Inject\n+    public NodesDnApiAction(final Settings settings, final Path configPath, final RestController controller, final Client client,\n+        final AdminDNs adminDNs, final ConfigurationRepository cl, final ClusterService cs,\n+        final PrincipalExtractor principalExtractor, final PrivilegesEvaluator evaluator, ThreadPool threadPool, AuditLog auditLog) {\n+        super(settings, configPath, controller, client, adminDNs, cl, cs, principalExtractor, evaluator, threadPool, auditLog);\n+        this.staticNodesDnFromEsYml = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN, Collections.emptyList());\n+    }\n+\n+    @Override\n+    protected void registerHandlers(RestController controller, Settings settings) {\n+        if (settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN_DYNAMIC_CONFIG_ENABLED, false)) {\n+            controller.registerHandler(Method.GET, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.GET, \"/_opendistro/_security/api/nodesdn/\", this);\n+            controller.registerHandler(Method.DELETE, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.PUT, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.PATCH, \"/_opendistro/_security/api/nodesdn/\", this);\n+            controller.registerHandler(Method.PATCH, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+        }\n+    }\n+\n+    @Override\n+    protected void handleApiRequest(RestChannel channel, RestRequest request, Client client) throws IOException {\n+        if (!isSuperAdmin()) {\n+            forbidden(channel, \"API allowed only for admin.\");\n+            return;\n+        }\n+        super.handleApiRequest(channel, request, client);\n+    }\n+\n+    protected void consumeParameters(final RestRequest request) {\n+        request.param(\"name\");\n+        request.param(\"show_all\");\n+    }\n+\n+    @Override\n+    protected boolean isReservedAndAccessible(SecurityDynamicConfiguration<?> existingConfiguration, String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd20b22ca37d7ee6e4166dbc2af29d932fbde75"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQxODk3MQ==", "bodyText": "I am slightly confused here. isReservedAndAccessible checks if class implements StaticDefinable interface which NodeDn does not.\nDid you mean to override isReserved() here instead ?\n\nReserved means, it is only updateable by Admin. In this case, the STATIC_ES_YML_NODES_DN key shouldn't be updateable by Admin too.\n\nSince we are calling super.isReservedAndAccessible(), this function will always return false ?\nNope. On the contrary, it returns true all the time\n\n\tprotected boolean isReservedAndAccessible(final SecurityDynamicConfiguration<?> existingConfiguration,\n\t\t\t\t\t\t\t\t\t\t\t  String name) {\n\t\tif( isReserved(existingConfiguration, name) && !isSuperAdmin()) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\nSince isReserved returns false, it defaults to returning true.", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r407418971", "createdAt": "2020-04-13T10:30:38Z", "author": {"login": "krishna-ggk"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/NodesDnApiAction.java", "diffHunk": "@@ -0,0 +1,145 @@\n+package com.amazon.opendistroforelasticsearch.security.dlic.rest.api;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.AuditLog;\n+import com.amazon.opendistroforelasticsearch.security.configuration.AdminDNs;\n+import com.amazon.opendistroforelasticsearch.security.configuration.ConfigurationRepository;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.AbstractConfigurationValidator;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.NodesDnValidator;\n+import com.amazon.opendistroforelasticsearch.security.privileges.PrivilegesEvaluator;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.CType;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.SecurityDynamicConfiguration;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.NodesDn;\n+import com.amazon.opendistroforelasticsearch.security.ssl.transport.PrincipalExtractor;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.rest.RestChannel;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestRequest.Method;\n+import org.elasticsearch.threadpool.ThreadPool;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * This class implements CRUD operations to manage dynamic NodesDn. The primary usecase is targeted at cross-cluster where\n+ * in node restart can be avoided by populating the coordinating cluster's nodes_dn values.\n+ *\n+ * The APIs are only accessible to SuperAdmin since the configuration controls the core application layer trust validation.\n+ * By default the APIs are disabled and can be enabled by a YML setting - {@link ConfigConstants#OPENDISTRO_SECURITY_NODES_DN_DYNAMIC_CONFIG_ENABLED}\n+ *\n+ * The backing data is stored in {@link ConfigConstants#OPENDISTRO_SECURITY_CONFIG_INDEX_NAME} which is populated during bootstrap.\n+ * For existing clusters, {@link com.amazon.opendistroforelasticsearch.security.tools.OpenDistroSecurityAdmin} tool can\n+ * be used to populate the index.\n+ *\n+ * See {@link com.amazon.opendistroforelasticsearch.security.dlic.rest.api.NodesDnApiTest} for usage examples.\n+ */\n+public class NodesDnApiAction extends PatchableResourceApiAction {\n+    public static final String STATIC_ES_YML_NODES_DN = \"STATIC_ES_YML_NODES_DN\";\n+    private final List<String> staticNodesDnFromEsYml;\n+\n+    @Inject\n+    public NodesDnApiAction(final Settings settings, final Path configPath, final RestController controller, final Client client,\n+        final AdminDNs adminDNs, final ConfigurationRepository cl, final ClusterService cs,\n+        final PrincipalExtractor principalExtractor, final PrivilegesEvaluator evaluator, ThreadPool threadPool, AuditLog auditLog) {\n+        super(settings, configPath, controller, client, adminDNs, cl, cs, principalExtractor, evaluator, threadPool, auditLog);\n+        this.staticNodesDnFromEsYml = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN, Collections.emptyList());\n+    }\n+\n+    @Override\n+    protected void registerHandlers(RestController controller, Settings settings) {\n+        if (settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN_DYNAMIC_CONFIG_ENABLED, false)) {\n+            controller.registerHandler(Method.GET, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.GET, \"/_opendistro/_security/api/nodesdn/\", this);\n+            controller.registerHandler(Method.DELETE, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.PUT, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.PATCH, \"/_opendistro/_security/api/nodesdn/\", this);\n+            controller.registerHandler(Method.PATCH, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+        }\n+    }\n+\n+    @Override\n+    protected void handleApiRequest(RestChannel channel, RestRequest request, Client client) throws IOException {\n+        if (!isSuperAdmin()) {\n+            forbidden(channel, \"API allowed only for admin.\");\n+            return;\n+        }\n+        super.handleApiRequest(channel, request, client);\n+    }\n+\n+    protected void consumeParameters(final RestRequest request) {\n+        request.param(\"name\");\n+        request.param(\"show_all\");\n+    }\n+\n+    @Override\n+    protected boolean isReservedAndAccessible(SecurityDynamicConfiguration<?> existingConfiguration, String name) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM3Mzg0MA=="}, "originalCommit": {"oid": "cdd20b22ca37d7ee6e4166dbc2af29d932fbde75"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcxMjUzNQ==", "bodyText": "Yes. Sorry I did mean that function will never return false.\nIf we override isReserved() and put the check STATIC_ES_YML_NODES_DN.equals(name)  in the function, won't we have a same behaviour?  Because what we are trying to override here is the reservedness of a resource.", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r407712535", "createdAt": "2020-04-13T20:49:38Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/NodesDnApiAction.java", "diffHunk": "@@ -0,0 +1,145 @@\n+package com.amazon.opendistroforelasticsearch.security.dlic.rest.api;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.AuditLog;\n+import com.amazon.opendistroforelasticsearch.security.configuration.AdminDNs;\n+import com.amazon.opendistroforelasticsearch.security.configuration.ConfigurationRepository;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.AbstractConfigurationValidator;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.NodesDnValidator;\n+import com.amazon.opendistroforelasticsearch.security.privileges.PrivilegesEvaluator;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.CType;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.SecurityDynamicConfiguration;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.NodesDn;\n+import com.amazon.opendistroforelasticsearch.security.ssl.transport.PrincipalExtractor;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.rest.RestChannel;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestRequest.Method;\n+import org.elasticsearch.threadpool.ThreadPool;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * This class implements CRUD operations to manage dynamic NodesDn. The primary usecase is targeted at cross-cluster where\n+ * in node restart can be avoided by populating the coordinating cluster's nodes_dn values.\n+ *\n+ * The APIs are only accessible to SuperAdmin since the configuration controls the core application layer trust validation.\n+ * By default the APIs are disabled and can be enabled by a YML setting - {@link ConfigConstants#OPENDISTRO_SECURITY_NODES_DN_DYNAMIC_CONFIG_ENABLED}\n+ *\n+ * The backing data is stored in {@link ConfigConstants#OPENDISTRO_SECURITY_CONFIG_INDEX_NAME} which is populated during bootstrap.\n+ * For existing clusters, {@link com.amazon.opendistroforelasticsearch.security.tools.OpenDistroSecurityAdmin} tool can\n+ * be used to populate the index.\n+ *\n+ * See {@link com.amazon.opendistroforelasticsearch.security.dlic.rest.api.NodesDnApiTest} for usage examples.\n+ */\n+public class NodesDnApiAction extends PatchableResourceApiAction {\n+    public static final String STATIC_ES_YML_NODES_DN = \"STATIC_ES_YML_NODES_DN\";\n+    private final List<String> staticNodesDnFromEsYml;\n+\n+    @Inject\n+    public NodesDnApiAction(final Settings settings, final Path configPath, final RestController controller, final Client client,\n+        final AdminDNs adminDNs, final ConfigurationRepository cl, final ClusterService cs,\n+        final PrincipalExtractor principalExtractor, final PrivilegesEvaluator evaluator, ThreadPool threadPool, AuditLog auditLog) {\n+        super(settings, configPath, controller, client, adminDNs, cl, cs, principalExtractor, evaluator, threadPool, auditLog);\n+        this.staticNodesDnFromEsYml = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN, Collections.emptyList());\n+    }\n+\n+    @Override\n+    protected void registerHandlers(RestController controller, Settings settings) {\n+        if (settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN_DYNAMIC_CONFIG_ENABLED, false)) {\n+            controller.registerHandler(Method.GET, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.GET, \"/_opendistro/_security/api/nodesdn/\", this);\n+            controller.registerHandler(Method.DELETE, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.PUT, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.PATCH, \"/_opendistro/_security/api/nodesdn/\", this);\n+            controller.registerHandler(Method.PATCH, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+        }\n+    }\n+\n+    @Override\n+    protected void handleApiRequest(RestChannel channel, RestRequest request, Client client) throws IOException {\n+        if (!isSuperAdmin()) {\n+            forbidden(channel, \"API allowed only for admin.\");\n+            return;\n+        }\n+        super.handleApiRequest(channel, request, client);\n+    }\n+\n+    protected void consumeParameters(final RestRequest request) {\n+        request.param(\"name\");\n+        request.param(\"show_all\");\n+    }\n+\n+    @Override\n+    protected boolean isReservedAndAccessible(SecurityDynamicConfiguration<?> existingConfiguration, String name) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM3Mzg0MA=="}, "originalCommit": {"oid": "cdd20b22ca37d7ee6e4166dbc2af29d932fbde75"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyODkxNzg5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/NodesDnApiAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwODoyNTo0NlrOGEgNHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxMDozMToxNVrOGEi4_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM3NTEzMw==", "bodyText": "Is this gonna handle a PUT request of this form ? PUT /_opendistro/_security/api/nodesdn/STATIC_ES_YML_NODES_DN  ? as thats what is passed as name.", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r407375133", "createdAt": "2020-04-13T08:25:46Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/NodesDnApiAction.java", "diffHunk": "@@ -0,0 +1,145 @@\n+package com.amazon.opendistroforelasticsearch.security.dlic.rest.api;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.AuditLog;\n+import com.amazon.opendistroforelasticsearch.security.configuration.AdminDNs;\n+import com.amazon.opendistroforelasticsearch.security.configuration.ConfigurationRepository;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.AbstractConfigurationValidator;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.NodesDnValidator;\n+import com.amazon.opendistroforelasticsearch.security.privileges.PrivilegesEvaluator;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.CType;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.SecurityDynamicConfiguration;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.NodesDn;\n+import com.amazon.opendistroforelasticsearch.security.ssl.transport.PrincipalExtractor;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.rest.RestChannel;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestRequest.Method;\n+import org.elasticsearch.threadpool.ThreadPool;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * This class implements CRUD operations to manage dynamic NodesDn. The primary usecase is targeted at cross-cluster where\n+ * in node restart can be avoided by populating the coordinating cluster's nodes_dn values.\n+ *\n+ * The APIs are only accessible to SuperAdmin since the configuration controls the core application layer trust validation.\n+ * By default the APIs are disabled and can be enabled by a YML setting - {@link ConfigConstants#OPENDISTRO_SECURITY_NODES_DN_DYNAMIC_CONFIG_ENABLED}\n+ *\n+ * The backing data is stored in {@link ConfigConstants#OPENDISTRO_SECURITY_CONFIG_INDEX_NAME} which is populated during bootstrap.\n+ * For existing clusters, {@link com.amazon.opendistroforelasticsearch.security.tools.OpenDistroSecurityAdmin} tool can\n+ * be used to populate the index.\n+ *\n+ * See {@link com.amazon.opendistroforelasticsearch.security.dlic.rest.api.NodesDnApiTest} for usage examples.\n+ */\n+public class NodesDnApiAction extends PatchableResourceApiAction {\n+    public static final String STATIC_ES_YML_NODES_DN = \"STATIC_ES_YML_NODES_DN\";\n+    private final List<String> staticNodesDnFromEsYml;\n+\n+    @Inject\n+    public NodesDnApiAction(final Settings settings, final Path configPath, final RestController controller, final Client client,\n+        final AdminDNs adminDNs, final ConfigurationRepository cl, final ClusterService cs,\n+        final PrincipalExtractor principalExtractor, final PrivilegesEvaluator evaluator, ThreadPool threadPool, AuditLog auditLog) {\n+        super(settings, configPath, controller, client, adminDNs, cl, cs, principalExtractor, evaluator, threadPool, auditLog);\n+        this.staticNodesDnFromEsYml = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN, Collections.emptyList());\n+    }\n+\n+    @Override\n+    protected void registerHandlers(RestController controller, Settings settings) {\n+        if (settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN_DYNAMIC_CONFIG_ENABLED, false)) {\n+            controller.registerHandler(Method.GET, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.GET, \"/_opendistro/_security/api/nodesdn/\", this);\n+            controller.registerHandler(Method.DELETE, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.PUT, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.PATCH, \"/_opendistro/_security/api/nodesdn/\", this);\n+            controller.registerHandler(Method.PATCH, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+        }\n+    }\n+\n+    @Override\n+    protected void handleApiRequest(RestChannel channel, RestRequest request, Client client) throws IOException {\n+        if (!isSuperAdmin()) {\n+            forbidden(channel, \"API allowed only for admin.\");\n+            return;\n+        }\n+        super.handleApiRequest(channel, request, client);\n+    }\n+\n+    protected void consumeParameters(final RestRequest request) {\n+        request.param(\"name\");\n+        request.param(\"show_all\");\n+    }\n+\n+    @Override\n+    protected boolean isReservedAndAccessible(SecurityDynamicConfiguration<?> existingConfiguration, String name) {\n+        if (STATIC_ES_YML_NODES_DN.equals(name)) {\n+            return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd20b22ca37d7ee6e4166dbc2af29d932fbde75"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQxOTEzNQ==", "bodyText": "correct.", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r407419135", "createdAt": "2020-04-13T10:31:15Z", "author": {"login": "krishna-ggk"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/NodesDnApiAction.java", "diffHunk": "@@ -0,0 +1,145 @@\n+package com.amazon.opendistroforelasticsearch.security.dlic.rest.api;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.AuditLog;\n+import com.amazon.opendistroforelasticsearch.security.configuration.AdminDNs;\n+import com.amazon.opendistroforelasticsearch.security.configuration.ConfigurationRepository;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.AbstractConfigurationValidator;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.NodesDnValidator;\n+import com.amazon.opendistroforelasticsearch.security.privileges.PrivilegesEvaluator;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.CType;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.SecurityDynamicConfiguration;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.NodesDn;\n+import com.amazon.opendistroforelasticsearch.security.ssl.transport.PrincipalExtractor;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.rest.RestChannel;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestRequest.Method;\n+import org.elasticsearch.threadpool.ThreadPool;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * This class implements CRUD operations to manage dynamic NodesDn. The primary usecase is targeted at cross-cluster where\n+ * in node restart can be avoided by populating the coordinating cluster's nodes_dn values.\n+ *\n+ * The APIs are only accessible to SuperAdmin since the configuration controls the core application layer trust validation.\n+ * By default the APIs are disabled and can be enabled by a YML setting - {@link ConfigConstants#OPENDISTRO_SECURITY_NODES_DN_DYNAMIC_CONFIG_ENABLED}\n+ *\n+ * The backing data is stored in {@link ConfigConstants#OPENDISTRO_SECURITY_CONFIG_INDEX_NAME} which is populated during bootstrap.\n+ * For existing clusters, {@link com.amazon.opendistroforelasticsearch.security.tools.OpenDistroSecurityAdmin} tool can\n+ * be used to populate the index.\n+ *\n+ * See {@link com.amazon.opendistroforelasticsearch.security.dlic.rest.api.NodesDnApiTest} for usage examples.\n+ */\n+public class NodesDnApiAction extends PatchableResourceApiAction {\n+    public static final String STATIC_ES_YML_NODES_DN = \"STATIC_ES_YML_NODES_DN\";\n+    private final List<String> staticNodesDnFromEsYml;\n+\n+    @Inject\n+    public NodesDnApiAction(final Settings settings, final Path configPath, final RestController controller, final Client client,\n+        final AdminDNs adminDNs, final ConfigurationRepository cl, final ClusterService cs,\n+        final PrincipalExtractor principalExtractor, final PrivilegesEvaluator evaluator, ThreadPool threadPool, AuditLog auditLog) {\n+        super(settings, configPath, controller, client, adminDNs, cl, cs, principalExtractor, evaluator, threadPool, auditLog);\n+        this.staticNodesDnFromEsYml = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN, Collections.emptyList());\n+    }\n+\n+    @Override\n+    protected void registerHandlers(RestController controller, Settings settings) {\n+        if (settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN_DYNAMIC_CONFIG_ENABLED, false)) {\n+            controller.registerHandler(Method.GET, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.GET, \"/_opendistro/_security/api/nodesdn/\", this);\n+            controller.registerHandler(Method.DELETE, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.PUT, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.PATCH, \"/_opendistro/_security/api/nodesdn/\", this);\n+            controller.registerHandler(Method.PATCH, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+        }\n+    }\n+\n+    @Override\n+    protected void handleApiRequest(RestChannel channel, RestRequest request, Client client) throws IOException {\n+        if (!isSuperAdmin()) {\n+            forbidden(channel, \"API allowed only for admin.\");\n+            return;\n+        }\n+        super.handleApiRequest(channel, request, client);\n+    }\n+\n+    protected void consumeParameters(final RestRequest request) {\n+        request.param(\"name\");\n+        request.param(\"show_all\");\n+    }\n+\n+    @Override\n+    protected boolean isReservedAndAccessible(SecurityDynamicConfiguration<?> existingConfiguration, String name) {\n+        if (STATIC_ES_YML_NODES_DN.equals(name)) {\n+            return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM3NTEzMw=="}, "originalCommit": {"oid": "cdd20b22ca37d7ee6e4166dbc2af29d932fbde75"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyODkyOTcwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/NodesDnApiAction.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwODozMDozNFrOGEgUFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMDozNDozM1rOGE0ULw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM3NjkxOA==", "bodyText": "Can the API be blocked from RestApiPrivilegeEvaluator instead of doing this here?\nhttps://github.com/opendistro-for-elasticsearch/security/blob/master/src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/RestApiPrivilegesEvaluator.java#L213", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r407376918", "createdAt": "2020-04-13T08:30:34Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/NodesDnApiAction.java", "diffHunk": "@@ -0,0 +1,145 @@\n+package com.amazon.opendistroforelasticsearch.security.dlic.rest.api;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.AuditLog;\n+import com.amazon.opendistroforelasticsearch.security.configuration.AdminDNs;\n+import com.amazon.opendistroforelasticsearch.security.configuration.ConfigurationRepository;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.AbstractConfigurationValidator;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.NodesDnValidator;\n+import com.amazon.opendistroforelasticsearch.security.privileges.PrivilegesEvaluator;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.CType;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.SecurityDynamicConfiguration;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.NodesDn;\n+import com.amazon.opendistroforelasticsearch.security.ssl.transport.PrincipalExtractor;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.rest.RestChannel;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestRequest.Method;\n+import org.elasticsearch.threadpool.ThreadPool;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * This class implements CRUD operations to manage dynamic NodesDn. The primary usecase is targeted at cross-cluster where\n+ * in node restart can be avoided by populating the coordinating cluster's nodes_dn values.\n+ *\n+ * The APIs are only accessible to SuperAdmin since the configuration controls the core application layer trust validation.\n+ * By default the APIs are disabled and can be enabled by a YML setting - {@link ConfigConstants#OPENDISTRO_SECURITY_NODES_DN_DYNAMIC_CONFIG_ENABLED}\n+ *\n+ * The backing data is stored in {@link ConfigConstants#OPENDISTRO_SECURITY_CONFIG_INDEX_NAME} which is populated during bootstrap.\n+ * For existing clusters, {@link com.amazon.opendistroforelasticsearch.security.tools.OpenDistroSecurityAdmin} tool can\n+ * be used to populate the index.\n+ *\n+ * See {@link com.amazon.opendistroforelasticsearch.security.dlic.rest.api.NodesDnApiTest} for usage examples.\n+ */\n+public class NodesDnApiAction extends PatchableResourceApiAction {\n+    public static final String STATIC_ES_YML_NODES_DN = \"STATIC_ES_YML_NODES_DN\";\n+    private final List<String> staticNodesDnFromEsYml;\n+\n+    @Inject\n+    public NodesDnApiAction(final Settings settings, final Path configPath, final RestController controller, final Client client,\n+        final AdminDNs adminDNs, final ConfigurationRepository cl, final ClusterService cs,\n+        final PrincipalExtractor principalExtractor, final PrivilegesEvaluator evaluator, ThreadPool threadPool, AuditLog auditLog) {\n+        super(settings, configPath, controller, client, adminDNs, cl, cs, principalExtractor, evaluator, threadPool, auditLog);\n+        this.staticNodesDnFromEsYml = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN, Collections.emptyList());\n+    }\n+\n+    @Override\n+    protected void registerHandlers(RestController controller, Settings settings) {\n+        if (settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN_DYNAMIC_CONFIG_ENABLED, false)) {\n+            controller.registerHandler(Method.GET, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.GET, \"/_opendistro/_security/api/nodesdn/\", this);\n+            controller.registerHandler(Method.DELETE, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.PUT, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.PATCH, \"/_opendistro/_security/api/nodesdn/\", this);\n+            controller.registerHandler(Method.PATCH, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+        }\n+    }\n+\n+    @Override\n+    protected void handleApiRequest(RestChannel channel, RestRequest request, Client client) throws IOException {\n+        if (!isSuperAdmin()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd20b22ca37d7ee6e4166dbc2af29d932fbde75"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ5ODQ2Mg==", "bodyText": "I tried that approach - however that handles RBAC which doesn't support special casing for admin DN (AdminDN is required since this is sensitive setting parallel to cert hot-reload)", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r407498462", "createdAt": "2020-04-13T14:12:42Z", "author": {"login": "krishna-ggk"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/NodesDnApiAction.java", "diffHunk": "@@ -0,0 +1,145 @@\n+package com.amazon.opendistroforelasticsearch.security.dlic.rest.api;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.AuditLog;\n+import com.amazon.opendistroforelasticsearch.security.configuration.AdminDNs;\n+import com.amazon.opendistroforelasticsearch.security.configuration.ConfigurationRepository;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.AbstractConfigurationValidator;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.NodesDnValidator;\n+import com.amazon.opendistroforelasticsearch.security.privileges.PrivilegesEvaluator;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.CType;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.SecurityDynamicConfiguration;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.NodesDn;\n+import com.amazon.opendistroforelasticsearch.security.ssl.transport.PrincipalExtractor;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.rest.RestChannel;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestRequest.Method;\n+import org.elasticsearch.threadpool.ThreadPool;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * This class implements CRUD operations to manage dynamic NodesDn. The primary usecase is targeted at cross-cluster where\n+ * in node restart can be avoided by populating the coordinating cluster's nodes_dn values.\n+ *\n+ * The APIs are only accessible to SuperAdmin since the configuration controls the core application layer trust validation.\n+ * By default the APIs are disabled and can be enabled by a YML setting - {@link ConfigConstants#OPENDISTRO_SECURITY_NODES_DN_DYNAMIC_CONFIG_ENABLED}\n+ *\n+ * The backing data is stored in {@link ConfigConstants#OPENDISTRO_SECURITY_CONFIG_INDEX_NAME} which is populated during bootstrap.\n+ * For existing clusters, {@link com.amazon.opendistroforelasticsearch.security.tools.OpenDistroSecurityAdmin} tool can\n+ * be used to populate the index.\n+ *\n+ * See {@link com.amazon.opendistroforelasticsearch.security.dlic.rest.api.NodesDnApiTest} for usage examples.\n+ */\n+public class NodesDnApiAction extends PatchableResourceApiAction {\n+    public static final String STATIC_ES_YML_NODES_DN = \"STATIC_ES_YML_NODES_DN\";\n+    private final List<String> staticNodesDnFromEsYml;\n+\n+    @Inject\n+    public NodesDnApiAction(final Settings settings, final Path configPath, final RestController controller, final Client client,\n+        final AdminDNs adminDNs, final ConfigurationRepository cl, final ClusterService cs,\n+        final PrincipalExtractor principalExtractor, final PrivilegesEvaluator evaluator, ThreadPool threadPool, AuditLog auditLog) {\n+        super(settings, configPath, controller, client, adminDNs, cl, cs, principalExtractor, evaluator, threadPool, auditLog);\n+        this.staticNodesDnFromEsYml = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN, Collections.emptyList());\n+    }\n+\n+    @Override\n+    protected void registerHandlers(RestController controller, Settings settings) {\n+        if (settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN_DYNAMIC_CONFIG_ENABLED, false)) {\n+            controller.registerHandler(Method.GET, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.GET, \"/_opendistro/_security/api/nodesdn/\", this);\n+            controller.registerHandler(Method.DELETE, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.PUT, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.PATCH, \"/_opendistro/_security/api/nodesdn/\", this);\n+            controller.registerHandler(Method.PATCH, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+        }\n+    }\n+\n+    @Override\n+    protected void handleApiRequest(RestChannel channel, RestRequest request, Client client) throws IOException {\n+        if (!isSuperAdmin()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM3NjkxOA=="}, "originalCommit": {"oid": "cdd20b22ca37d7ee6e4166dbc2af29d932fbde75"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcwNDYyMw==", "bodyText": "AdminDN is already injected in the constructor and user can be determined from the thread pool context. How differently are they handled in the api action ?", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r407704623", "createdAt": "2020-04-13T20:34:33Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/NodesDnApiAction.java", "diffHunk": "@@ -0,0 +1,145 @@\n+package com.amazon.opendistroforelasticsearch.security.dlic.rest.api;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.AuditLog;\n+import com.amazon.opendistroforelasticsearch.security.configuration.AdminDNs;\n+import com.amazon.opendistroforelasticsearch.security.configuration.ConfigurationRepository;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.AbstractConfigurationValidator;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.NodesDnValidator;\n+import com.amazon.opendistroforelasticsearch.security.privileges.PrivilegesEvaluator;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.CType;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.SecurityDynamicConfiguration;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.NodesDn;\n+import com.amazon.opendistroforelasticsearch.security.ssl.transport.PrincipalExtractor;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.rest.RestChannel;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestRequest.Method;\n+import org.elasticsearch.threadpool.ThreadPool;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * This class implements CRUD operations to manage dynamic NodesDn. The primary usecase is targeted at cross-cluster where\n+ * in node restart can be avoided by populating the coordinating cluster's nodes_dn values.\n+ *\n+ * The APIs are only accessible to SuperAdmin since the configuration controls the core application layer trust validation.\n+ * By default the APIs are disabled and can be enabled by a YML setting - {@link ConfigConstants#OPENDISTRO_SECURITY_NODES_DN_DYNAMIC_CONFIG_ENABLED}\n+ *\n+ * The backing data is stored in {@link ConfigConstants#OPENDISTRO_SECURITY_CONFIG_INDEX_NAME} which is populated during bootstrap.\n+ * For existing clusters, {@link com.amazon.opendistroforelasticsearch.security.tools.OpenDistroSecurityAdmin} tool can\n+ * be used to populate the index.\n+ *\n+ * See {@link com.amazon.opendistroforelasticsearch.security.dlic.rest.api.NodesDnApiTest} for usage examples.\n+ */\n+public class NodesDnApiAction extends PatchableResourceApiAction {\n+    public static final String STATIC_ES_YML_NODES_DN = \"STATIC_ES_YML_NODES_DN\";\n+    private final List<String> staticNodesDnFromEsYml;\n+\n+    @Inject\n+    public NodesDnApiAction(final Settings settings, final Path configPath, final RestController controller, final Client client,\n+        final AdminDNs adminDNs, final ConfigurationRepository cl, final ClusterService cs,\n+        final PrincipalExtractor principalExtractor, final PrivilegesEvaluator evaluator, ThreadPool threadPool, AuditLog auditLog) {\n+        super(settings, configPath, controller, client, adminDNs, cl, cs, principalExtractor, evaluator, threadPool, auditLog);\n+        this.staticNodesDnFromEsYml = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN, Collections.emptyList());\n+    }\n+\n+    @Override\n+    protected void registerHandlers(RestController controller, Settings settings) {\n+        if (settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_NODES_DN_DYNAMIC_CONFIG_ENABLED, false)) {\n+            controller.registerHandler(Method.GET, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.GET, \"/_opendistro/_security/api/nodesdn/\", this);\n+            controller.registerHandler(Method.DELETE, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.PUT, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+            controller.registerHandler(Method.PATCH, \"/_opendistro/_security/api/nodesdn/\", this);\n+            controller.registerHandler(Method.PATCH, \"/_opendistro/_security/api/nodesdn/{name}\", this);\n+        }\n+    }\n+\n+    @Override\n+    protected void handleApiRequest(RestChannel channel, RestRequest request, Client client) throws IOException {\n+        if (!isSuperAdmin()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM3NjkxOA=="}, "originalCommit": {"oid": "cdd20b22ca37d7ee6e4166dbc2af29d932fbde75"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyODk2NjA0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/ConfigurationRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwODo0NjoxNlrOGEgprQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxMDozNjo0NlrOGEi_TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM4MjQ0NQ==", "bodyText": "Do we reach this stage when node is re-started or opendistro index is already initialized ? I assumed it would throw exception from line #136 ? ResourceAlreadyExistsException", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r407382445", "createdAt": "2020-04-13T08:46:16Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/ConfigurationRepository.java", "diffHunk": "@@ -144,14 +138,16 @@ public void run() {\n                                             .actionGet().isAcknowledged();\n                                     LOGGER.info(\"Index {} created?: {}\", opendistrosecurityIndex, ok);\n                                     if(ok) {\n-                                        ConfigHelper.uploadFile(client, cd+\"config.yml\", opendistrosecurityIndex, CType.CONFIG, configVersion);\n-                                        ConfigHelper.uploadFile(client, cd+\"roles.yml\", opendistrosecurityIndex, CType.ROLES, configVersion);\n-                                        ConfigHelper.uploadFile(client, cd+\"roles_mapping.yml\", opendistrosecurityIndex, CType.ROLESMAPPING, configVersion);\n-                                        ConfigHelper.uploadFile(client, cd+\"internal_users.yml\", opendistrosecurityIndex, CType.INTERNALUSERS, configVersion);\n-                                        ConfigHelper.uploadFile(client, cd+\"action_groups.yml\", opendistrosecurityIndex, CType.ACTIONGROUPS, configVersion);\n-                                        if(configVersion == 2) {\n-                                            ConfigHelper.uploadFile(client, cd+\"tenants.yml\", opendistrosecurityIndex, CType.TENANTS, configVersion);\n+                                        ConfigHelper.uploadFile(client, cd+\"config.yml\", opendistrosecurityIndex, CType.CONFIG, DEFAULT_CONFIG_VERSION);\n+                                        ConfigHelper.uploadFile(client, cd+\"roles.yml\", opendistrosecurityIndex, CType.ROLES, DEFAULT_CONFIG_VERSION);\n+                                        ConfigHelper.uploadFile(client, cd+\"roles_mapping.yml\", opendistrosecurityIndex, CType.ROLESMAPPING, DEFAULT_CONFIG_VERSION);\n+                                        ConfigHelper.uploadFile(client, cd+\"internal_users.yml\", opendistrosecurityIndex, CType.INTERNALUSERS, DEFAULT_CONFIG_VERSION);\n+                                        ConfigHelper.uploadFile(client, cd+\"action_groups.yml\", opendistrosecurityIndex, CType.ACTIONGROUPS, DEFAULT_CONFIG_VERSION);\n+                                        if(DEFAULT_CONFIG_VERSION == 2) {\n+                                            ConfigHelper.uploadFile(client, cd+\"tenants.yml\", opendistrosecurityIndex, CType.TENANTS, DEFAULT_CONFIG_VERSION);\n                                         }\n+                                        final boolean populateEmptyIfFileMissing = true;\n+                                        ConfigHelper.uploadFile(client, cd+\"nodes_dn.yml\", opendistrosecurityIndex, CType.NODESDN, DEFAULT_CONFIG_VERSION, populateEmptyIfFileMissing);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd20b22ca37d7ee6e4166dbc2af29d932fbde75"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQyMDc0OQ==", "bodyText": "It won't reach here if index is already created. However it reaches here on the first time bootstrap of the cluster, where after index creation it populates the documents.", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r407420749", "createdAt": "2020-04-13T10:36:46Z", "author": {"login": "krishna-ggk"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/ConfigurationRepository.java", "diffHunk": "@@ -144,14 +138,16 @@ public void run() {\n                                             .actionGet().isAcknowledged();\n                                     LOGGER.info(\"Index {} created?: {}\", opendistrosecurityIndex, ok);\n                                     if(ok) {\n-                                        ConfigHelper.uploadFile(client, cd+\"config.yml\", opendistrosecurityIndex, CType.CONFIG, configVersion);\n-                                        ConfigHelper.uploadFile(client, cd+\"roles.yml\", opendistrosecurityIndex, CType.ROLES, configVersion);\n-                                        ConfigHelper.uploadFile(client, cd+\"roles_mapping.yml\", opendistrosecurityIndex, CType.ROLESMAPPING, configVersion);\n-                                        ConfigHelper.uploadFile(client, cd+\"internal_users.yml\", opendistrosecurityIndex, CType.INTERNALUSERS, configVersion);\n-                                        ConfigHelper.uploadFile(client, cd+\"action_groups.yml\", opendistrosecurityIndex, CType.ACTIONGROUPS, configVersion);\n-                                        if(configVersion == 2) {\n-                                            ConfigHelper.uploadFile(client, cd+\"tenants.yml\", opendistrosecurityIndex, CType.TENANTS, configVersion);\n+                                        ConfigHelper.uploadFile(client, cd+\"config.yml\", opendistrosecurityIndex, CType.CONFIG, DEFAULT_CONFIG_VERSION);\n+                                        ConfigHelper.uploadFile(client, cd+\"roles.yml\", opendistrosecurityIndex, CType.ROLES, DEFAULT_CONFIG_VERSION);\n+                                        ConfigHelper.uploadFile(client, cd+\"roles_mapping.yml\", opendistrosecurityIndex, CType.ROLESMAPPING, DEFAULT_CONFIG_VERSION);\n+                                        ConfigHelper.uploadFile(client, cd+\"internal_users.yml\", opendistrosecurityIndex, CType.INTERNALUSERS, DEFAULT_CONFIG_VERSION);\n+                                        ConfigHelper.uploadFile(client, cd+\"action_groups.yml\", opendistrosecurityIndex, CType.ACTIONGROUPS, DEFAULT_CONFIG_VERSION);\n+                                        if(DEFAULT_CONFIG_VERSION == 2) {\n+                                            ConfigHelper.uploadFile(client, cd+\"tenants.yml\", opendistrosecurityIndex, CType.TENANTS, DEFAULT_CONFIG_VERSION);\n                                         }\n+                                        final boolean populateEmptyIfFileMissing = true;\n+                                        ConfigHelper.uploadFile(client, cd+\"nodes_dn.yml\", opendistrosecurityIndex, CType.NODESDN, DEFAULT_CONFIG_VERSION, populateEmptyIfFileMissing);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM4MjQ0NQ=="}, "originalCommit": {"oid": "cdd20b22ca37d7ee6e4166dbc2af29d932fbde75"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyODk4Mjk1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/support/ConfigHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwODo1MzoxNVrOGEgznw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNDowNTo1OFrOGEnixA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM4NDk5MQ==", "bodyText": "Do we need this populateEmptyIfFileMissing logic? Can we add the file and assume the file to exists in the builds like we do for other configs in securityconfig dir ?", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r407384991", "createdAt": "2020-04-13T08:53:15Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/support/ConfigHelper.java", "diffHunk": "@@ -70,11 +78,36 @@ public static void uploadFile(Client tc, String filepath, String index, CType cT\n                 throw new Exception(\"   FAIL: Configuration for '\" + cType.toLCString()\n                         + \"' failed for unknown reasons. Pls. consult logfile of elasticsearch\");\n             }\n-        } catch (Exception e) {\n-            throw e;\n         }\n     }\n-    \n+\n+    public static Reader createFileOrStringReader(CType cType, int configVersion, String filepath, boolean populateEmptyIfFileMissing) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd20b22ca37d7ee6e4166dbc2af29d932fbde75"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ5NTM2NA==", "bodyText": "The intention is to keep it backward compatible so that if customers perform minor version upgrade, they are not impacted by the document not being present. That said, there are following paths overall.\n\nConfigurationRepository.uploadFile() - This path is invoked only during index bootstrap which means folks performing minor version upgrade would not hit this path as the index already exists. Missing file handling can be removed from here.\nOpenDistroSecurityAdmin.migrate(),upload() - These paths provide a way to populate missing documents and thus having missing file handling will be useful.\n\nNow I can remove path 1, but it could help remote cases of migration without using SecurityAdmin tool and ensure the index is always populated. Let me know if you strongly feel the need to remove and I can remove it.", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r407495364", "createdAt": "2020-04-13T14:05:58Z", "author": {"login": "krishna-ggk"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/support/ConfigHelper.java", "diffHunk": "@@ -70,11 +78,36 @@ public static void uploadFile(Client tc, String filepath, String index, CType cT\n                 throw new Exception(\"   FAIL: Configuration for '\" + cType.toLCString()\n                         + \"' failed for unknown reasons. Pls. consult logfile of elasticsearch\");\n             }\n-        } catch (Exception e) {\n-            throw e;\n         }\n     }\n-    \n+\n+    public static Reader createFileOrStringReader(CType cType, int configVersion, String filepath, boolean populateEmptyIfFileMissing) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM4NDk5MQ=="}, "originalCommit": {"oid": "cdd20b22ca37d7ee6e4166dbc2af29d932fbde75"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyODk4NzM0OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/SecurityAdminMigrationTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwODo1NTowM1rOGEg2Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxMDo0MDoxMVrOGEjDGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM4NTYxMQ==", "bodyText": "Do need any of these imports? Just seeing the diff", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r407385611", "createdAt": "2020-04-13T08:55:03Z", "author": {"login": "sujithvm"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/SecurityAdminMigrationTests.java", "diffHunk": "@@ -21,6 +21,9 @@\n import java.util.ArrayList;\n import java.util.List;\n \n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.CType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd20b22ca37d7ee6e4166dbc2af29d932fbde75"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQyMTcyMg==", "bodyText": "Good point - I'll do another scan to rid off these stray imports.", "url": "https://github.com/opensearch-project/security/pull/362#discussion_r407421722", "createdAt": "2020-04-13T10:40:11Z", "author": {"login": "krishna-ggk"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/SecurityAdminMigrationTests.java", "diffHunk": "@@ -21,6 +21,9 @@\n import java.util.ArrayList;\n import java.util.List;\n \n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.CType;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM4NTYxMQ=="}, "originalCommit": {"oid": "cdd20b22ca37d7ee6e4166dbc2af29d932fbde75"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2401, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}