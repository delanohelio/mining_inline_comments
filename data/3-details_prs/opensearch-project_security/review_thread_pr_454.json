{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzMTU4NTk5", "number": 454, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMzo0MjozOVrOD6gAew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMjoxODo0MVrOD8QY5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjY4NDExOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/ConfigurationRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMzo0MjozOVrOGSX7wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMDoxNzoxNFrOGVB_SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkxOTY4Mg==", "bodyText": "Curious why we have this property - Whats the use case of starting up nodes always accepting invalid config?\nIf it's just for loading during migration API call, we can just overload the function to do it?", "url": "https://github.com/opensearch-project/security/pull/454#discussion_r421919682", "createdAt": "2020-05-08T03:42:39Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/ConfigurationRepository.java", "diffHunk": "@@ -101,6 +102,7 @@ private ConfigurationRepository(Settings settings, final Path configPath, Thread\n         this.clusterService = clusterService;\n         this.auditLog = auditLog;\n         this.configurationChangedListener = new ArrayList<>();\n+        this.acceptInvalid = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_UNSUPPORTED_ACCEPT_INVALID_CONFIG, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2244fdb72205e0e8c30dfff24c21c0107eebfdab"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcwNTg2NQ==", "bodyText": "accepting invalid config is configuration parameter you can set in elasticsearch.yml\nYou can configure if you want to accept invalid/non-supported 6.x configuration and still migrate remaining valid configuration to 7.x format and still start node.\n7.x can still read 6.x configuration and work without any problem.\nIf you migrate configuration with accept invalid configuration to true, you need that flag everytime when node boots up to ignore invalid configuration present in index.", "url": "https://github.com/opensearch-project/security/pull/454#discussion_r424705865", "createdAt": "2020-05-13T20:17:14Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/ConfigurationRepository.java", "diffHunk": "@@ -101,6 +102,7 @@ private ConfigurationRepository(Settings settings, final Path configPath, Thread\n         this.clusterService = clusterService;\n         this.auditLog = auditLog;\n         this.configurationChangedListener = new ArrayList<>();\n+        this.acceptInvalid = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_UNSUPPORTED_ACCEPT_INVALID_CONFIG, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkxOTY4Mg=="}, "originalCommit": {"oid": "2244fdb72205e0e8c30dfff24c21c0107eebfdab"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyODgyMTQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/MigrateApiAction.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNjo0MjowOVrOGSr7dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxOToxNjo1NVrOGVqupw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI0NzI4Ng==", "bodyText": "Need to add NodesDn also to the migration", "url": "https://github.com/opensearch-project/security/pull/454#discussion_r422247286", "createdAt": "2020-05-08T16:42:09Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/MigrateApiAction.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *  You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.dlic.rest.api;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.admin.indices.create.CreateIndexResponse;\n+import org.elasticsearch.action.bulk.BulkRequestBuilder;\n+import org.elasticsearch.action.bulk.BulkResponse;\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.action.support.WriteRequest.RefreshPolicy;\n+import org.elasticsearch.action.support.master.AcknowledgedResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.metadata.IndexMetaData;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.collect.Tuple;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.settings.Settings.Builder;\n+import org.elasticsearch.common.xcontent.XContentHelper;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.rest.RestChannel;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestRequest.Method;\n+import org.elasticsearch.threadpool.ThreadPool;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.amazon.opendistroforelasticsearch.security.auditlog.AuditLog;\n+import com.amazon.opendistroforelasticsearch.security.configuration.AdminDNs;\n+import com.amazon.opendistroforelasticsearch.security.configuration.ConfigurationRepository;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.AbstractConfigurationValidator;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.NoOpValidator;\n+import com.amazon.opendistroforelasticsearch.security.privileges.PrivilegesEvaluator;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.Migration;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.CType;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.SecurityDynamicConfiguration;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v6.ActionGroupsV6;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v6.ConfigV6;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v6.InternalUserV6;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v6.RoleMappingsV6;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v6.RoleV6;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v7.ActionGroupsV7;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v7.ConfigV7;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v7.InternalUserV7;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v7.RoleMappingsV7;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v7.RoleV7;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v7.TenantV7;\n+import com.amazon.opendistroforelasticsearch.security.ssl.transport.PrincipalExtractor;\n+\n+public class MigrateApiAction extends AbstractApiAction {\n+\n+    @Inject\n+    public MigrateApiAction(final Settings settings, final Path configPath, final RestController controller, final Client client,\n+                            final AdminDNs adminDNs, final ConfigurationRepository cl, final ClusterService cs, final PrincipalExtractor principalExtractor,\n+                            final PrivilegesEvaluator evaluator, ThreadPool threadPool, AuditLog auditLog) {\n+        super(settings, configPath, controller, client, adminDNs, cl, cs, principalExtractor, evaluator, threadPool, auditLog);\n+    }\n+\n+    @Override\n+    protected void registerHandlers(RestController controller, Settings settings) {\n+        controller.registerHandler(Method.POST, \"/_opendistro/_security/api/migrate\", this);\n+    }\n+\n+    @Override\n+    protected Endpoint getEndpoint() {\n+        return Endpoint.MIGRATE;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    protected void handlePost(RestChannel channel, RestRequest request, Client client, final JsonNode content) throws IOException {\n+\n+        final Version oldestNodeVersion = cs.state().getNodes().getMinNodeVersion();\n+\n+        if(oldestNodeVersion.before(Version.V_7_0_0)) {\n+            badRequestResponse(channel, \"Can not migrate configuration because cluster is not fully migrated.\");\n+            return;\n+        }\n+\n+        final SecurityDynamicConfiguration<?> loadedConfig = load(CType.CONFIG, true);\n+\n+        if (loadedConfig.getVersion() != 1) {\n+            badRequestResponse(channel, \"Can not migrate configuration because it was already migrated.\");\n+            return;\n+        }\n+\n+        final SecurityDynamicConfiguration<ConfigV6> configV6 = (SecurityDynamicConfiguration<ConfigV6>) loadedConfig;\n+        final SecurityDynamicConfiguration<ActionGroupsV6> actionGroupsV6 = (SecurityDynamicConfiguration<ActionGroupsV6>) load(CType.ACTIONGROUPS, true);\n+        final SecurityDynamicConfiguration<InternalUserV6> internalUsersV6 = (SecurityDynamicConfiguration<InternalUserV6>) load(CType.INTERNALUSERS, true);\n+        final SecurityDynamicConfiguration<RoleV6> rolesV6 = (SecurityDynamicConfiguration<RoleV6>) load(CType.ROLES, true);\n+        final SecurityDynamicConfiguration<RoleMappingsV6> rolesmappingV6 = (SecurityDynamicConfiguration<RoleMappingsV6>) load(CType.ROLESMAPPING, true);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2244fdb72205e0e8c30dfff24c21c0107eebfdab"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcwNTk1MQ==", "bodyText": "added.", "url": "https://github.com/opensearch-project/security/pull/454#discussion_r424705951", "createdAt": "2020-05-13T20:17:26Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/MigrateApiAction.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *  You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.dlic.rest.api;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.admin.indices.create.CreateIndexResponse;\n+import org.elasticsearch.action.bulk.BulkRequestBuilder;\n+import org.elasticsearch.action.bulk.BulkResponse;\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.action.support.WriteRequest.RefreshPolicy;\n+import org.elasticsearch.action.support.master.AcknowledgedResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.metadata.IndexMetaData;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.collect.Tuple;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.settings.Settings.Builder;\n+import org.elasticsearch.common.xcontent.XContentHelper;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.rest.RestChannel;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestRequest.Method;\n+import org.elasticsearch.threadpool.ThreadPool;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.amazon.opendistroforelasticsearch.security.auditlog.AuditLog;\n+import com.amazon.opendistroforelasticsearch.security.configuration.AdminDNs;\n+import com.amazon.opendistroforelasticsearch.security.configuration.ConfigurationRepository;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.AbstractConfigurationValidator;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.NoOpValidator;\n+import com.amazon.opendistroforelasticsearch.security.privileges.PrivilegesEvaluator;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.Migration;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.CType;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.SecurityDynamicConfiguration;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v6.ActionGroupsV6;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v6.ConfigV6;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v6.InternalUserV6;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v6.RoleMappingsV6;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v6.RoleV6;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v7.ActionGroupsV7;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v7.ConfigV7;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v7.InternalUserV7;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v7.RoleMappingsV7;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v7.RoleV7;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v7.TenantV7;\n+import com.amazon.opendistroforelasticsearch.security.ssl.transport.PrincipalExtractor;\n+\n+public class MigrateApiAction extends AbstractApiAction {\n+\n+    @Inject\n+    public MigrateApiAction(final Settings settings, final Path configPath, final RestController controller, final Client client,\n+                            final AdminDNs adminDNs, final ConfigurationRepository cl, final ClusterService cs, final PrincipalExtractor principalExtractor,\n+                            final PrivilegesEvaluator evaluator, ThreadPool threadPool, AuditLog auditLog) {\n+        super(settings, configPath, controller, client, adminDNs, cl, cs, principalExtractor, evaluator, threadPool, auditLog);\n+    }\n+\n+    @Override\n+    protected void registerHandlers(RestController controller, Settings settings) {\n+        controller.registerHandler(Method.POST, \"/_opendistro/_security/api/migrate\", this);\n+    }\n+\n+    @Override\n+    protected Endpoint getEndpoint() {\n+        return Endpoint.MIGRATE;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    protected void handlePost(RestChannel channel, RestRequest request, Client client, final JsonNode content) throws IOException {\n+\n+        final Version oldestNodeVersion = cs.state().getNodes().getMinNodeVersion();\n+\n+        if(oldestNodeVersion.before(Version.V_7_0_0)) {\n+            badRequestResponse(channel, \"Can not migrate configuration because cluster is not fully migrated.\");\n+            return;\n+        }\n+\n+        final SecurityDynamicConfiguration<?> loadedConfig = load(CType.CONFIG, true);\n+\n+        if (loadedConfig.getVersion() != 1) {\n+            badRequestResponse(channel, \"Can not migrate configuration because it was already migrated.\");\n+            return;\n+        }\n+\n+        final SecurityDynamicConfiguration<ConfigV6> configV6 = (SecurityDynamicConfiguration<ConfigV6>) loadedConfig;\n+        final SecurityDynamicConfiguration<ActionGroupsV6> actionGroupsV6 = (SecurityDynamicConfiguration<ActionGroupsV6>) load(CType.ACTIONGROUPS, true);\n+        final SecurityDynamicConfiguration<InternalUserV6> internalUsersV6 = (SecurityDynamicConfiguration<InternalUserV6>) load(CType.INTERNALUSERS, true);\n+        final SecurityDynamicConfiguration<RoleV6> rolesV6 = (SecurityDynamicConfiguration<RoleV6>) load(CType.ROLES, true);\n+        final SecurityDynamicConfiguration<RoleMappingsV6> rolesmappingV6 = (SecurityDynamicConfiguration<RoleMappingsV6>) load(CType.ROLESMAPPING, true);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI0NzI4Ng=="}, "originalCommit": {"oid": "2244fdb72205e0e8c30dfff24c21c0107eebfdab"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM3MzM1MQ==", "bodyText": "Need to add to validate api too ?", "url": "https://github.com/opensearch-project/security/pull/454#discussion_r425373351", "createdAt": "2020-05-14T19:16:55Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/MigrateApiAction.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *  You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.dlic.rest.api;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.admin.indices.create.CreateIndexResponse;\n+import org.elasticsearch.action.bulk.BulkRequestBuilder;\n+import org.elasticsearch.action.bulk.BulkResponse;\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.action.support.WriteRequest.RefreshPolicy;\n+import org.elasticsearch.action.support.master.AcknowledgedResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.metadata.IndexMetaData;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.collect.Tuple;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.settings.Settings.Builder;\n+import org.elasticsearch.common.xcontent.XContentHelper;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.rest.RestChannel;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestRequest.Method;\n+import org.elasticsearch.threadpool.ThreadPool;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.amazon.opendistroforelasticsearch.security.auditlog.AuditLog;\n+import com.amazon.opendistroforelasticsearch.security.configuration.AdminDNs;\n+import com.amazon.opendistroforelasticsearch.security.configuration.ConfigurationRepository;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.AbstractConfigurationValidator;\n+import com.amazon.opendistroforelasticsearch.security.dlic.rest.validation.NoOpValidator;\n+import com.amazon.opendistroforelasticsearch.security.privileges.PrivilegesEvaluator;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.Migration;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.CType;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.SecurityDynamicConfiguration;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v6.ActionGroupsV6;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v6.ConfigV6;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v6.InternalUserV6;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v6.RoleMappingsV6;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v6.RoleV6;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v7.ActionGroupsV7;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v7.ConfigV7;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v7.InternalUserV7;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v7.RoleMappingsV7;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v7.RoleV7;\n+import com.amazon.opendistroforelasticsearch.security.securityconf.impl.v7.TenantV7;\n+import com.amazon.opendistroforelasticsearch.security.ssl.transport.PrincipalExtractor;\n+\n+public class MigrateApiAction extends AbstractApiAction {\n+\n+    @Inject\n+    public MigrateApiAction(final Settings settings, final Path configPath, final RestController controller, final Client client,\n+                            final AdminDNs adminDNs, final ConfigurationRepository cl, final ClusterService cs, final PrincipalExtractor principalExtractor,\n+                            final PrivilegesEvaluator evaluator, ThreadPool threadPool, AuditLog auditLog) {\n+        super(settings, configPath, controller, client, adminDNs, cl, cs, principalExtractor, evaluator, threadPool, auditLog);\n+    }\n+\n+    @Override\n+    protected void registerHandlers(RestController controller, Settings settings) {\n+        controller.registerHandler(Method.POST, \"/_opendistro/_security/api/migrate\", this);\n+    }\n+\n+    @Override\n+    protected Endpoint getEndpoint() {\n+        return Endpoint.MIGRATE;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    protected void handlePost(RestChannel channel, RestRequest request, Client client, final JsonNode content) throws IOException {\n+\n+        final Version oldestNodeVersion = cs.state().getNodes().getMinNodeVersion();\n+\n+        if(oldestNodeVersion.before(Version.V_7_0_0)) {\n+            badRequestResponse(channel, \"Can not migrate configuration because cluster is not fully migrated.\");\n+            return;\n+        }\n+\n+        final SecurityDynamicConfiguration<?> loadedConfig = load(CType.CONFIG, true);\n+\n+        if (loadedConfig.getVersion() != 1) {\n+            badRequestResponse(channel, \"Can not migrate configuration because it was already migrated.\");\n+            return;\n+        }\n+\n+        final SecurityDynamicConfiguration<ConfigV6> configV6 = (SecurityDynamicConfiguration<ConfigV6>) loadedConfig;\n+        final SecurityDynamicConfiguration<ActionGroupsV6> actionGroupsV6 = (SecurityDynamicConfiguration<ActionGroupsV6>) load(CType.ACTIONGROUPS, true);\n+        final SecurityDynamicConfiguration<InternalUserV6> internalUsersV6 = (SecurityDynamicConfiguration<InternalUserV6>) load(CType.INTERNALUSERS, true);\n+        final SecurityDynamicConfiguration<RoleV6> rolesV6 = (SecurityDynamicConfiguration<RoleV6>) load(CType.ROLES, true);\n+        final SecurityDynamicConfiguration<RoleMappingsV6> rolesmappingV6 = (SecurityDynamicConfiguration<RoleMappingsV6>) load(CType.ROLESMAPPING, true);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI0NzI4Ng=="}, "originalCommit": {"oid": "2244fdb72205e0e8c30dfff24c21c0107eebfdab"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NTA5MTA5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/NonValidatingObjectMapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMjoxNjoxM1rOGVFbuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMjoyNDowNlrOGVFnkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc2MjI5Ng==", "bodyText": "The class is used only within SecurityDynamicConfiguration, can it be made private static inside SecurityDynamicConfiguration?", "url": "https://github.com/opensearch-project/security/pull/454#discussion_r424762296", "createdAt": "2020-05-13T22:16:13Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/NonValidatingObjectMapper.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2015-2018 _floragunn_ GmbH\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+/*\n+ * Portions Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security;\n+\n+import java.io.IOException;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n+import java.security.PrivilegedExceptionAction;\n+\n+import org.elasticsearch.SpecialPermission;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude.Include;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.JavaType;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.type.TypeFactory;\n+\n+public class NonValidatingObjectMapper {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7694a383f041e385ef529d8bdf552a2604d7af3c"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc2NTMzMQ==", "bodyText": "these is mostly cherry pick from 7.1 branch which we missed merging to master branch.\nI would prefer to make separate PR for suggested refactoring if any.", "url": "https://github.com/opensearch-project/security/pull/454#discussion_r424765331", "createdAt": "2020-05-13T22:24:06Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/NonValidatingObjectMapper.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2015-2018 _floragunn_ GmbH\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+/*\n+ * Portions Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security;\n+\n+import java.io.IOException;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n+import java.security.PrivilegedExceptionAction;\n+\n+import org.elasticsearch.SpecialPermission;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude.Include;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.JavaType;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.type.TypeFactory;\n+\n+public class NonValidatingObjectMapper {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc2MjI5Ng=="}, "originalCommit": {"oid": "7694a383f041e385ef529d8bdf552a2604d7af3c"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NTA5NjY5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/NonValidatingObjectMapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMjoxODo0MVrOGVFfSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMjoxODo0MVrOGVFfSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc2MzIwOQ==", "bodyText": "Is it necessary to make nonValidatingObjectMapper a singleton?", "url": "https://github.com/opensearch-project/security/pull/454#discussion_r424763209", "createdAt": "2020-05-13T22:18:41Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/NonValidatingObjectMapper.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2015-2018 _floragunn_ GmbH\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+/*\n+ * Portions Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security;\n+\n+import java.io.IOException;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n+import java.security.PrivilegedExceptionAction;\n+\n+import org.elasticsearch.SpecialPermission;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude.Include;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.JavaType;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.type.TypeFactory;\n+\n+public class NonValidatingObjectMapper {\n+    private static final ObjectMapper nonValidatingObjectMapper = new ObjectMapper();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7694a383f041e385ef529d8bdf552a2604d7af3c"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2438, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}