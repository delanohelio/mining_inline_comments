{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3NTIzMzk0", "number": 491, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMToxMzozOFrOECyUFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMDo0MDoyNVrOEGGdWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzU2OTQ4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/compliance/ComplianceIndexingOperationListenerImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMToxMzozOFrOGfdRzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxODoyOTozNlrOGf5HvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYzODczNA==", "bodyText": "is it necessary to have indexName? How it is different from ShardId.getIndexName()?", "url": "https://github.com/opensearch-project/security/pull/491#discussion_r435638734", "createdAt": "2020-06-05T01:13:38Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/compliance/ComplianceIndexingOperationListenerImpl.java", "diffHunk": "@@ -34,11 +34,13 @@\n public final class ComplianceIndexingOperationListenerImpl extends ComplianceIndexingOperationListener {\n \n     private static final Logger log = LogManager.getLogger(ComplianceIndexingOperationListenerImpl.class);\n+    private final String indexName;\n     private final AuditLog auditlog;\n     private volatile IndexService is;\n \n-    public ComplianceIndexingOperationListenerImpl(final AuditLog auditlog) {\n+    public ComplianceIndexingOperationListenerImpl(final String indexName, final AuditLog auditlog) {\n         super();\n+        this.indexName = indexName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA5NDkwOA==", "bodyText": "Looks like the behavior is going to be the same.\nI wouldn't assume ES will pass a different index shardId for a given registered index module. However will use ShardId.getIndexName() as it is closer to truth of the operation being performed.", "url": "https://github.com/opensearch-project/security/pull/491#discussion_r436094908", "createdAt": "2020-06-05T18:29:36Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/compliance/ComplianceIndexingOperationListenerImpl.java", "diffHunk": "@@ -34,11 +34,13 @@\n public final class ComplianceIndexingOperationListenerImpl extends ComplianceIndexingOperationListener {\n \n     private static final Logger log = LogManager.getLogger(ComplianceIndexingOperationListenerImpl.class);\n+    private final String indexName;\n     private final AuditLog auditlog;\n     private volatile IndexService is;\n \n-    public ComplianceIndexingOperationListenerImpl(final AuditLog auditlog) {\n+    public ComplianceIndexingOperationListenerImpl(final String indexName, final AuditLog auditlog) {\n         super();\n+        this.indexName = indexName;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYzODczNA=="}, "originalCommit": null, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjcyNzk2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/compliance/ComplianceIndexingOperationListenerImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMDoyMTozNFrOGf8P6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMDoyMTozNFrOGf8P6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE0NjE1Mw==", "bodyText": "indexName is not used.", "url": "https://github.com/opensearch-project/security/pull/491#discussion_r436146153", "createdAt": "2020-06-05T20:21:34Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/compliance/ComplianceIndexingOperationListenerImpl.java", "diffHunk": "@@ -37,7 +37,7 @@\n     private final AuditLog auditlog;\n     private volatile IndexService is;\n \n-    public ComplianceIndexingOperationListenerImpl(final AuditLog auditlog) {\n+    public ComplianceIndexingOperationListenerImpl(final String indexName, final AuditLog auditlog) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNjc1ODA1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/compliance/ComplianceConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMDozMzo0NVrOGhbJyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMDozMzo0NVrOGhbJyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcwMTA2NQ==", "bodyText": "nit: introduce private static boolean isLoggingWriteDiffEnabled(final ComplianceConfig complianceConfig, final String indexName) to ComplianceIndexingOperationListenerImpl.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public boolean shouldLogDiffsForWriteInIndex(final String indexName) {\n          \n          \n            \n                private static boolean isLoggingWriteDiffEnabled(final ComplianceConfig complianceConfig, final String indexName) {\n          \n          \n            \n                    return complianceConfig != null && complianceConfig.shouldLogDiffsForWrite() && complianceConfig.writeHistoryEnabledForIndex(indexName);\n          \n          \n            \n                }", "url": "https://github.com/opensearch-project/security/pull/491#discussion_r437701065", "createdAt": "2020-06-09T20:33:45Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/compliance/ComplianceConfig.java", "diffHunk": "@@ -255,6 +255,10 @@ public boolean shouldLogDiffsForWrite() {\n         return !shouldLogWriteMetadataOnly() && logDiffsForWrite;\n     }\n \n+    public boolean shouldLogDiffsForWriteInIndex(final String indexName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODMxNTEzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/compliance/ComplianceIndexingOperationListenerImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMDozNzowMVrOGksP6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMDozNzowMVrOGksP6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEyNjg5MA==", "bodyText": "Should we move this to separate method, similar to \"isLoggingWriteDiffEnabled\" ?", "url": "https://github.com/opensearch-project/security/pull/491#discussion_r441126890", "createdAt": "2020-06-16T20:37:01Z", "author": {"login": "dinusX"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/compliance/ComplianceIndexingOperationListenerImpl.java", "diffHunk": "@@ -67,7 +67,8 @@ public GetResult getGetResult() {\n \n     @Override\n     public void postDelete(final ShardId shardId, final Delete delete, final DeleteResult result) {\n-        if (auditlog.getComplianceConfig().isEnabled()) {\n+        final ComplianceConfig complianceConfig = auditlog.getComplianceConfig();\n+        if (complianceConfig != null && complianceConfig.writeHistoryEnabledForIndex(shardId.getIndexName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "178afbf19b2e534af41c619c3e1f6e3bf66286f5"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODMyNzMxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMDo0MDoyNVrOGksXPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODo0ODozNFrOGlSq7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEyODc2Ng==", "bodyText": "Do we want to add this listener to indexModule when it's disabled ?", "url": "https://github.com/opensearch-project/security/pull/491#discussion_r441128766", "createdAt": "2020-06-16T20:40:25Z", "author": {"login": "dinusX"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -508,20 +508,11 @@ public void onIndexModule(IndexModule indexModule) {\n         //called for every index!\n \n         if (!disabled && !client && !sslOnly) {\n-            final ComplianceConfig complianceConfig = auditLog.getComplianceConfig();\n-            log.debug(\"Handle complianceConfig=\"+complianceConfig+\"/dlsFlsAvailable: \"+dlsFlsAvailable+\"/auditLog=\"+auditLog.getClass()+\" for onIndexModule() of index \"+indexModule.getIndex().getName());\n+            log.debug(\"Handle dlsFlsAvailable: \"+dlsFlsAvailable+\"/auditLog=\"+auditLog.getClass()+\" for onIndexModule() of index \"+indexModule.getIndex().getName());\n             if (dlsFlsAvailable) {\n \n-                final ComplianceIndexingOperationListener ciol;\n-\n-                assert complianceConfig!=null:\"compliance config must not be null here\";\n-                \n-                if(complianceConfig.writeHistoryEnabledForIndex(indexModule.getIndex().getName())) {\n-                    ciol = ReflectionHelper.instantiateComplianceListener(Objects.requireNonNull(auditLog));\n-                    indexModule.addIndexOperationListener(ciol);\n-                } else {\n-                    ciol = new ComplianceIndexingOperationListener();\n-                }\n+                final ComplianceIndexingOperationListener ciol = ReflectionHelper.instantiateComplianceListener(Objects.requireNonNull(auditLog));\n+                indexModule.addIndexOperationListener(ciol);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "178afbf19b2e534af41c619c3e1f6e3bf66286f5"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE0MDgwMw==", "bodyText": "This will be enabled only if dlsFlsAvailable is enabled. Whether compliance will be enabled or not is dynamic hence checking for the condition writeHistoryEnabledForIndex inside the ComplianceIndexingOperationListenerImpl .\nPreviously compliance is static during node startup so if it was disabled, we were using a no-op listener ComplianceIndexingOperationListener.", "url": "https://github.com/opensearch-project/security/pull/491#discussion_r441140803", "createdAt": "2020-06-16T21:04:02Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -508,20 +508,11 @@ public void onIndexModule(IndexModule indexModule) {\n         //called for every index!\n \n         if (!disabled && !client && !sslOnly) {\n-            final ComplianceConfig complianceConfig = auditLog.getComplianceConfig();\n-            log.debug(\"Handle complianceConfig=\"+complianceConfig+\"/dlsFlsAvailable: \"+dlsFlsAvailable+\"/auditLog=\"+auditLog.getClass()+\" for onIndexModule() of index \"+indexModule.getIndex().getName());\n+            log.debug(\"Handle dlsFlsAvailable: \"+dlsFlsAvailable+\"/auditLog=\"+auditLog.getClass()+\" for onIndexModule() of index \"+indexModule.getIndex().getName());\n             if (dlsFlsAvailable) {\n \n-                final ComplianceIndexingOperationListener ciol;\n-\n-                assert complianceConfig!=null:\"compliance config must not be null here\";\n-                \n-                if(complianceConfig.writeHistoryEnabledForIndex(indexModule.getIndex().getName())) {\n-                    ciol = ReflectionHelper.instantiateComplianceListener(Objects.requireNonNull(auditLog));\n-                    indexModule.addIndexOperationListener(ciol);\n-                } else {\n-                    ciol = new ComplianceIndexingOperationListener();\n-                }\n+                final ComplianceIndexingOperationListener ciol = ReflectionHelper.instantiateComplianceListener(Objects.requireNonNull(auditLog));\n+                indexModule.addIndexOperationListener(ciol);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEyODc2Ng=="}, "originalCommit": {"oid": "178afbf19b2e534af41c619c3e1f6e3bf66286f5"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE5ODkyOQ==", "bodyText": "Now we are adding this listener always even if Audit logging is disable. That will have performance impact.\n(even though listener will check internally if need to log compliance event or not) .\nLets run performance bench-marking to understand if there is any impact.", "url": "https://github.com/opensearch-project/security/pull/491#discussion_r441198929", "createdAt": "2020-06-16T23:34:21Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -508,20 +508,11 @@ public void onIndexModule(IndexModule indexModule) {\n         //called for every index!\n \n         if (!disabled && !client && !sslOnly) {\n-            final ComplianceConfig complianceConfig = auditLog.getComplianceConfig();\n-            log.debug(\"Handle complianceConfig=\"+complianceConfig+\"/dlsFlsAvailable: \"+dlsFlsAvailable+\"/auditLog=\"+auditLog.getClass()+\" for onIndexModule() of index \"+indexModule.getIndex().getName());\n+            log.debug(\"Handle dlsFlsAvailable: \"+dlsFlsAvailable+\"/auditLog=\"+auditLog.getClass()+\" for onIndexModule() of index \"+indexModule.getIndex().getName());\n             if (dlsFlsAvailable) {\n \n-                final ComplianceIndexingOperationListener ciol;\n-\n-                assert complianceConfig!=null:\"compliance config must not be null here\";\n-                \n-                if(complianceConfig.writeHistoryEnabledForIndex(indexModule.getIndex().getName())) {\n-                    ciol = ReflectionHelper.instantiateComplianceListener(Objects.requireNonNull(auditLog));\n-                    indexModule.addIndexOperationListener(ciol);\n-                } else {\n-                    ciol = new ComplianceIndexingOperationListener();\n-                }\n+                final ComplianceIndexingOperationListener ciol = ReflectionHelper.instantiateComplianceListener(Objects.requireNonNull(auditLog));\n+                indexModule.addIndexOperationListener(ciol);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEyODc2Ng=="}, "originalCommit": {"oid": "178afbf19b2e534af41c619c3e1f6e3bf66286f5"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI1MDIxNw==", "bodyText": "Okay. Performance bench-marking can be done.\nAre you suggesting any other alternative to listen on indexing events with dynamic configuration?", "url": "https://github.com/opensearch-project/security/pull/491#discussion_r441250217", "createdAt": "2020-06-17T02:49:24Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -508,20 +508,11 @@ public void onIndexModule(IndexModule indexModule) {\n         //called for every index!\n \n         if (!disabled && !client && !sslOnly) {\n-            final ComplianceConfig complianceConfig = auditLog.getComplianceConfig();\n-            log.debug(\"Handle complianceConfig=\"+complianceConfig+\"/dlsFlsAvailable: \"+dlsFlsAvailable+\"/auditLog=\"+auditLog.getClass()+\" for onIndexModule() of index \"+indexModule.getIndex().getName());\n+            log.debug(\"Handle dlsFlsAvailable: \"+dlsFlsAvailable+\"/auditLog=\"+auditLog.getClass()+\" for onIndexModule() of index \"+indexModule.getIndex().getName());\n             if (dlsFlsAvailable) {\n \n-                final ComplianceIndexingOperationListener ciol;\n-\n-                assert complianceConfig!=null:\"compliance config must not be null here\";\n-                \n-                if(complianceConfig.writeHistoryEnabledForIndex(indexModule.getIndex().getName())) {\n-                    ciol = ReflectionHelper.instantiateComplianceListener(Objects.requireNonNull(auditLog));\n-                    indexModule.addIndexOperationListener(ciol);\n-                } else {\n-                    ciol = new ComplianceIndexingOperationListener();\n-                }\n+                final ComplianceIndexingOperationListener ciol = ReflectionHelper.instantiateComplianceListener(Objects.requireNonNull(auditLog));\n+                indexModule.addIndexOperationListener(ciol);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEyODc2Ng=="}, "originalCommit": {"oid": "178afbf19b2e534af41c619c3e1f6e3bf66286f5"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcxODg4OA==", "bodyText": "@hardik-k-shah I ran ES rally for index only challenge. I see comparable results and in some runs, this was faster. I believe it would just be hitting few if conditions.\nesrally compare --baseline=025569a1-4be2-419a-8fd1-fe1ad42b2a20 --contender=33de97f0-f140-48e3-a96d-a5763d040532\n\n    ____        ____\n   / __ \\____ _/ / /_  __\n  / /_/ / __ `/ / / / / /\n / _, _/ /_/ / / / /_/ /\n/_/ |_|\\__,_/_/_/\\__, /\n                /____/\n\n\nComparing baseline\n  Race ID: 025569a1-4be2-419a-8fd1-fe1ad42b2a20\n  Race timestamp: 2020-06-17 08:57:03\n  Challenge: append-no-conflicts-index-only\n  Car: external\n  User tags: intention=baseline_master_1.8.0.0_run_1\n\nwith contender\n  Race ID: 33de97f0-f140-48e3-a96d-a5763d040532\n  Race timestamp: 2020-06-17 09:26:17\n  Challenge: append-no-conflicts-index-only\n  Car: external\n  User tags: intention=baseline_compliance_ciol_1.8.0.0_run_1\n\n------------------------------------------------------\n    _______             __   _____\n   / ____(_)___  ____ _/ /  / ___/_________  ________\n  / /_  / / __ \\/ __ `/ /   \\__ \\/ ___/ __ \\/ ___/ _ \\\n / __/ / / / / / /_/ / /   ___/ / /__/ /_/ / /  /  __/\n/_/   /_/_/ /_/\\__,_/_/   /____/\\___/\\____/_/   \\___/\n------------------------------------------------------\n            \n|                                                        Metric |         Task |    Baseline |   Contender |     Diff |   Unit |\n|--------------------------------------------------------------:|-------------:|------------:|------------:|---------:|-------:|\n|                    Cumulative indexing time of primary shards |              |     118.276 |     115.712 | -2.56353 |    min |\n|             Min cumulative indexing time across primary shard |              |  0.00163333 |  0.00158333 |   -5e-05 |    min |\n|          Median cumulative indexing time across primary shard |              |     23.5892 |     23.1008 | -0.48842 |    min |\n|             Max cumulative indexing time across primary shard |              |     23.8583 |     23.4322 | -0.42612 |    min |\n|           Cumulative indexing throttle time of primary shards |              |           0 |           0 |        0 |    min |\n|    Min cumulative indexing throttle time across primary shard |              |           0 |           0 |        0 |    min |\n| Median cumulative indexing throttle time across primary shard |              |           0 |           0 |        0 |    min |\n|    Max cumulative indexing throttle time across primary shard |              |           0 |           0 |        0 |    min |\n|                       Cumulative merge time of primary shards |              |     25.5617 |     24.0826 | -1.47902 |    min |\n|                      Cumulative merge count of primary shards |              |          55 |          55 |        0 |        |\n|                Min cumulative merge time across primary shard |              |           0 |           0 |        0 |    min |\n|             Median cumulative merge time across primary shard |              |     4.94765 |     4.80126 | -0.14639 |    min |\n|                Max cumulative merge time across primary shard |              |     5.76003 |     5.10472 | -0.65532 |    min |\n|              Cumulative merge throttle time of primary shards |              |    0.634817 |    0.624383 | -0.01043 |    min |\n|       Min cumulative merge throttle time across primary shard |              |           0 |           0 |        0 |    min |\n|    Median cumulative merge throttle time across primary shard |              |   0.0891583 |   0.0844083 | -0.00475 |    min |\n|       Max cumulative merge throttle time across primary shard |              |      0.2612 |    0.250317 | -0.01088 |    min |\n|                     Cumulative refresh time of primary shards |              |     14.4739 |      13.596 | -0.87782 |    min |\n|                    Cumulative refresh count of primary shards |              |         217 |         217 |        0 |        |\n|              Min cumulative refresh time across primary shard |              |  0.00333333 |      0.0032 | -0.00013 |    min |\n|           Median cumulative refresh time across primary shard |              |     2.86742 |     2.64756 | -0.21986 |    min |\n|              Max cumulative refresh time across primary shard |              |     3.00652 |     2.85603 | -0.15048 |    min |\n|                       Cumulative flush time of primary shards |              |     1.13335 |     1.06617 | -0.06718 |    min |\n|                      Cumulative flush count of primary shards |              |          11 |          11 |        0 |        |\n|                Min cumulative flush time across primary shard |              |  0.00573333 |  0.00628333 |  0.00055 |    min |\n|             Median cumulative flush time across primary shard |              |    0.190342 |    0.163642 |  -0.0267 |    min |\n|                Max cumulative flush time across primary shard |              |    0.320717 |     0.29595 | -0.02477 |    min |\n|                                            Total Young Gen GC |              |      21.848 |      22.174 |    0.326 |      s |\n|                                              Total Old Gen GC |              |       2.976 |       2.979 |    0.003 |      s |\n|                                                    Store size |              |     3.21763 |     3.29633 |  0.07871 |     GB |\n|                                                 Translog size |              | 3.07336e-07 | 3.07336e-07 |        0 |     GB |\n|                                        Heap used for segments |              |    0.124893 |    0.126514 |  0.00162 |     MB |\n|                                      Heap used for doc values |              |  0.00782776 |   0.0141411 |  0.00631 |     MB |\n|                                           Heap used for terms |              |   0.0335999 |   0.0315704 | -0.00203 |     MB |\n|                                           Heap used for norms |              | 0.000427246 | 0.000427246 |        0 |     MB |\n|                                          Heap used for points |              |           0 |           0 |        0 |     MB |\n|                                   Heap used for stored fields |              |   0.0830383 |   0.0803757 | -0.00266 |     MB |\n|                                                 Segment count |              |         108 |         101 |       -7 |        |\n|                                                Min Throughput | index-append |     53464.7 |     56185.7 |  2720.93 | docs/s |\n|                                             Median Throughput | index-append |     55321.8 |     57059.1 |  1737.28 | docs/s |\n|                                                Max Throughput | index-append |     56309.7 |     59945.4 |  3635.76 | docs/s |\n|                                       50th percentile latency | index-append |     561.452 |     567.206 |  5.75334 |     ms |\n|                                       90th percentile latency | index-append |     815.576 |     803.831 | -11.7452 |     ms |\n|                                       99th percentile latency | index-append |     5358.51 |     5063.67 | -294.837 |     ms |\n|                                     99.9th percentile latency | index-append |     7472.59 |     7083.27 | -389.321 |     ms |\n|                                    99.99th percentile latency | index-append |     8449.72 |     7653.97 | -795.752 |     ms |\n|                                      100th percentile latency | index-append |     8699.56 |     7991.26 | -708.305 |     ms |\n|                                  50th percentile service time | index-append |     561.452 |     567.206 |  5.75334 |     ms |\n|                                  90th percentile service time | index-append |     815.576 |     803.831 | -11.7452 |     ms |\n|                                  99th percentile service time | index-append |     5358.51 |     5063.67 | -294.837 |     ms |\n|                                99.9th percentile service time | index-append |     7472.59 |     7083.27 | -389.321 |     ms |\n|                               99.99th percentile service time | index-append |     8449.72 |     7653.97 | -795.752 |     ms |\n|                                 100th percentile service time | index-append |     8699.56 |     7991.26 | -708.305 |     ms |\n|                                                    error rate | index-append |           0 |           0 |        0 |      % |", "url": "https://github.com/opensearch-project/security/pull/491#discussion_r441718888", "createdAt": "2020-06-17T17:43:43Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -508,20 +508,11 @@ public void onIndexModule(IndexModule indexModule) {\n         //called for every index!\n \n         if (!disabled && !client && !sslOnly) {\n-            final ComplianceConfig complianceConfig = auditLog.getComplianceConfig();\n-            log.debug(\"Handle complianceConfig=\"+complianceConfig+\"/dlsFlsAvailable: \"+dlsFlsAvailable+\"/auditLog=\"+auditLog.getClass()+\" for onIndexModule() of index \"+indexModule.getIndex().getName());\n+            log.debug(\"Handle dlsFlsAvailable: \"+dlsFlsAvailable+\"/auditLog=\"+auditLog.getClass()+\" for onIndexModule() of index \"+indexModule.getIndex().getName());\n             if (dlsFlsAvailable) {\n \n-                final ComplianceIndexingOperationListener ciol;\n-\n-                assert complianceConfig!=null:\"compliance config must not be null here\";\n-                \n-                if(complianceConfig.writeHistoryEnabledForIndex(indexModule.getIndex().getName())) {\n-                    ciol = ReflectionHelper.instantiateComplianceListener(Objects.requireNonNull(auditLog));\n-                    indexModule.addIndexOperationListener(ciol);\n-                } else {\n-                    ciol = new ComplianceIndexingOperationListener();\n-                }\n+                final ComplianceIndexingOperationListener ciol = ReflectionHelper.instantiateComplianceListener(Objects.requireNonNull(auditLog));\n+                indexModule.addIndexOperationListener(ciol);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEyODc2Ng=="}, "originalCommit": {"oid": "178afbf19b2e534af41c619c3e1f6e3bf66286f5"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcyMDc0Mw==", "bodyText": "@hardik-k-shah Ran ES rally with challenge append-no-conflicts-index-only. It is mostly comparable (in some runs, I see this to be faster). I believe it would hit ~3-5 small if-conditions not causing a performance impact\n<cluster having master plugin>\nesrally --pipeline benchmark-only --track=geopoint --challenge append-no-conflicts-index-only --target-host=https://localhost:9200 --client-options=\"use_ssl:true,basic_auth_user:'admin',basic_auth_password:'admin',verify_certs:false\" --revision=current --user-tag=\"intention:baseline_master_1.8.0.0_run_1\"\n\n<cluster having compliance_ciol change plugin>\nesrally --pipeline benchmark-only --track=geopoint --challenge append-no-conflicts-index-only --target-host=https://localhost:9200 --client-options=\"use_ssl:true,basic_auth_user:'admin',basic_auth_password:'admin',verify_certs:false\" --revision=current --user-tag=\"intention:baseline_compliance_ciol_1.8.0.0_run_1\"\n\nesrally compare --baseline=025569a1-4be2-419a-8fd1-fe1ad42b2a20 --contender=33de97f0-f140-48e3-a96d-a5763d040532\n\n    ____        ____\n   / __ \\____ _/ / /_  __\n  / /_/ / __ `/ / / / / /\n / _, _/ /_/ / / / /_/ /\n/_/ |_|\\__,_/_/_/\\__, /\n                /____/\n\n\nComparing baseline\n  Race ID: 025569a1-4be2-419a-8fd1-fe1ad42b2a20\n  Race timestamp: 2020-06-17 08:57:03\n  Challenge: append-no-conflicts-index-only\n  Car: external\n  User tags: intention=baseline_master_1.8.0.0_run_1\n\nwith contender\n  Race ID: 33de97f0-f140-48e3-a96d-a5763d040532\n  Race timestamp: 2020-06-17 09:26:17\n  Challenge: append-no-conflicts-index-only\n  Car: external\n  User tags: intention=baseline_compliance_ciol_1.8.0.0_run_1\n\n------------------------------------------------------\n    _______             __   _____\n   / ____(_)___  ____ _/ /  / ___/_________  ________\n  / /_  / / __ \\/ __ `/ /   \\__ \\/ ___/ __ \\/ ___/ _ \\\n / __/ / / / / / /_/ / /   ___/ / /__/ /_/ / /  /  __/\n/_/   /_/_/ /_/\\__,_/_/   /____/\\___/\\____/_/   \\___/\n------------------------------------------------------\n            \n|                                                        Metric |         Task |    Baseline |   Contender |     Diff |   Unit |\n|--------------------------------------------------------------:|-------------:|------------:|------------:|---------:|-------:|\n|                    Cumulative indexing time of primary shards |              |     118.276 |     115.712 | -2.56353 |    min |\n|             Min cumulative indexing time across primary shard |              |  0.00163333 |  0.00158333 |   -5e-05 |    min |\n|          Median cumulative indexing time across primary shard |              |     23.5892 |     23.1008 | -0.48842 |    min |\n|             Max cumulative indexing time across primary shard |              |     23.8583 |     23.4322 | -0.42612 |    min |\n|           Cumulative indexing throttle time of primary shards |              |           0 |           0 |        0 |    min |\n|    Min cumulative indexing throttle time across primary shard |              |           0 |           0 |        0 |    min |\n| Median cumulative indexing throttle time across primary shard |              |           0 |           0 |        0 |    min |\n|    Max cumulative indexing throttle time across primary shard |              |           0 |           0 |        0 |    min |\n|                       Cumulative merge time of primary shards |              |     25.5617 |     24.0826 | -1.47902 |    min |\n|                      Cumulative merge count of primary shards |              |          55 |          55 |        0 |        |\n|                Min cumulative merge time across primary shard |              |           0 |           0 |        0 |    min |\n|             Median cumulative merge time across primary shard |              |     4.94765 |     4.80126 | -0.14639 |    min |\n|                Max cumulative merge time across primary shard |              |     5.76003 |     5.10472 | -0.65532 |    min |\n|              Cumulative merge throttle time of primary shards |              |    0.634817 |    0.624383 | -0.01043 |    min |\n|       Min cumulative merge throttle time across primary shard |              |           0 |           0 |        0 |    min |\n|    Median cumulative merge throttle time across primary shard |              |   0.0891583 |   0.0844083 | -0.00475 |    min |\n|       Max cumulative merge throttle time across primary shard |              |      0.2612 |    0.250317 | -0.01088 |    min |\n|                     Cumulative refresh time of primary shards |              |     14.4739 |      13.596 | -0.87782 |    min |\n|                    Cumulative refresh count of primary shards |              |         217 |         217 |        0 |        |\n|              Min cumulative refresh time across primary shard |              |  0.00333333 |      0.0032 | -0.00013 |    min |\n|           Median cumulative refresh time across primary shard |              |     2.86742 |     2.64756 | -0.21986 |    min |\n|              Max cumulative refresh time across primary shard |              |     3.00652 |     2.85603 | -0.15048 |    min |\n|                       Cumulative flush time of primary shards |              |     1.13335 |     1.06617 | -0.06718 |    min |\n|                      Cumulative flush count of primary shards |              |          11 |          11 |        0 |        |\n|                Min cumulative flush time across primary shard |              |  0.00573333 |  0.00628333 |  0.00055 |    min |\n|             Median cumulative flush time across primary shard |              |    0.190342 |    0.163642 |  -0.0267 |    min |\n|                Max cumulative flush time across primary shard |              |    0.320717 |     0.29595 | -0.02477 |    min |\n|                                            Total Young Gen GC |              |      21.848 |      22.174 |    0.326 |      s |\n|                                              Total Old Gen GC |              |       2.976 |       2.979 |    0.003 |      s |\n|                                                    Store size |              |     3.21763 |     3.29633 |  0.07871 |     GB |\n|                                                 Translog size |              | 3.07336e-07 | 3.07336e-07 |        0 |     GB |\n|                                        Heap used for segments |              |    0.124893 |    0.126514 |  0.00162 |     MB |\n|                                      Heap used for doc values |              |  0.00782776 |   0.0141411 |  0.00631 |     MB |\n|                                           Heap used for terms |              |   0.0335999 |   0.0315704 | -0.00203 |     MB |\n|                                           Heap used for norms |              | 0.000427246 | 0.000427246 |        0 |     MB |\n|                                          Heap used for points |              |           0 |           0 |        0 |     MB |\n|                                   Heap used for stored fields |              |   0.0830383 |   0.0803757 | -0.00266 |     MB |\n|                                                 Segment count |              |         108 |         101 |       -7 |        |\n|                                                Min Throughput | index-append |     53464.7 |     56185.7 |  2720.93 | docs/s |\n|                                             Median Throughput | index-append |     55321.8 |     57059.1 |  1737.28 | docs/s |\n|                                                Max Throughput | index-append |     56309.7 |     59945.4 |  3635.76 | docs/s |\n|                                       50th percentile latency | index-append |     561.452 |     567.206 |  5.75334 |     ms |\n|                                       90th percentile latency | index-append |     815.576 |     803.831 | -11.7452 |     ms |\n|                                       99th percentile latency | index-append |     5358.51 |     5063.67 | -294.837 |     ms |\n|                                     99.9th percentile latency | index-append |     7472.59 |     7083.27 | -389.321 |     ms |\n|                                    99.99th percentile latency | index-append |     8449.72 |     7653.97 | -795.752 |     ms |\n|                                      100th percentile latency | index-append |     8699.56 |     7991.26 | -708.305 |     ms |\n|                                  50th percentile service time | index-append |     561.452 |     567.206 |  5.75334 |     ms |\n|                                  90th percentile service time | index-append |     815.576 |     803.831 | -11.7452 |     ms |\n|                                  99th percentile service time | index-append |     5358.51 |     5063.67 | -294.837 |     ms |\n|                                99.9th percentile service time | index-append |     7472.59 |     7083.27 | -389.321 |     ms |\n|                               99.99th percentile service time | index-append |     8449.72 |     7653.97 | -795.752 |     ms |\n|                                 100th percentile service time | index-append |     8699.56 |     7991.26 | -708.305 |     ms |\n|                                                    error rate | index-append |           0 |           0 |        0 |      % |", "url": "https://github.com/opensearch-project/security/pull/491#discussion_r441720743", "createdAt": "2020-06-17T17:46:48Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -508,20 +508,11 @@ public void onIndexModule(IndexModule indexModule) {\n         //called for every index!\n \n         if (!disabled && !client && !sslOnly) {\n-            final ComplianceConfig complianceConfig = auditLog.getComplianceConfig();\n-            log.debug(\"Handle complianceConfig=\"+complianceConfig+\"/dlsFlsAvailable: \"+dlsFlsAvailable+\"/auditLog=\"+auditLog.getClass()+\" for onIndexModule() of index \"+indexModule.getIndex().getName());\n+            log.debug(\"Handle dlsFlsAvailable: \"+dlsFlsAvailable+\"/auditLog=\"+auditLog.getClass()+\" for onIndexModule() of index \"+indexModule.getIndex().getName());\n             if (dlsFlsAvailable) {\n \n-                final ComplianceIndexingOperationListener ciol;\n-\n-                assert complianceConfig!=null:\"compliance config must not be null here\";\n-                \n-                if(complianceConfig.writeHistoryEnabledForIndex(indexModule.getIndex().getName())) {\n-                    ciol = ReflectionHelper.instantiateComplianceListener(Objects.requireNonNull(auditLog));\n-                    indexModule.addIndexOperationListener(ciol);\n-                } else {\n-                    ciol = new ComplianceIndexingOperationListener();\n-                }\n+                final ComplianceIndexingOperationListener ciol = ReflectionHelper.instantiateComplianceListener(Objects.requireNonNull(auditLog));\n+                indexModule.addIndexOperationListener(ciol);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEyODc2Ng=="}, "originalCommit": {"oid": "178afbf19b2e534af41c619c3e1f6e3bf66286f5"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc0MDY1OQ==", "bodyText": "I have run the same ES rally for default run append-no-conflicts . Seeing very comparable performance.\nesrally compare --baseline=27d3f68d-278b-45ff-bd94-674f1c68013c --contender=29e7ad6f-688b-4f26-962e-f4ac93cf255d\n\n    ____        ____\n   / __ \\____ _/ / /_  __\n  / /_/ / __ `/ / / / / /\n / _, _/ /_/ / / / /_/ /\n/_/ |_|\\__,_/_/_/\\__, /\n                /____/\n\n\nComparing baseline\n  Race ID: 27d3f68d-278b-45ff-bd94-674f1c68013c\n  Race timestamp: 2020-06-17 16:36:41\n  Challenge: append-no-conflicts\n  Car: external\n  User tags: intention=baseline_master_1.8.0.0_run_2\n\nwith contender\n  Race ID: 29e7ad6f-688b-4f26-962e-f4ac93cf255d\n  Race timestamp: 2020-06-17 17:15:51\n  Challenge: append-no-conflicts\n  Car: external\n  User tags: intention=baseline_compliance_ciol_1.8.0.0_run_2\n\n------------------------------------------------------\n    _______             __   _____\n   / ____(_)___  ____ _/ /  / ___/_________  ________\n  / /_  / / __ \\/ __ `/ /   \\__ \\/ ___/ __ \\/ ___/ _ \\\n / __/ / / / / / /_/ / /   ___/ / /__/ /_/ / /  /  __/\n/_/   /_/_/ /_/\\__,_/_/   /____/\\___/\\____/_/   \\___/\n------------------------------------------------------\n            \n|                                                        Metric |          Task |    Baseline |   Contender |     Diff |   Unit |\n|--------------------------------------------------------------:|--------------:|------------:|------------:|---------:|-------:|\n|                    Cumulative indexing time of primary shards |               |      116.29 |      114.34 |  -1.9495 |    min |\n|             Min cumulative indexing time across primary shard |               |  0.00161667 |  0.00161667 |        0 |    min |\n|          Median cumulative indexing time across primary shard |               |     23.1681 |     22.9597 | -0.20847 |    min |\n|             Max cumulative indexing time across primary shard |               |     23.6566 |     23.0313 | -0.62523 |    min |\n|           Cumulative indexing throttle time of primary shards |               |           0 |           0 |        0 |    min |\n|    Min cumulative indexing throttle time across primary shard |               |           0 |           0 |        0 |    min |\n| Median cumulative indexing throttle time across primary shard |               |           0 |           0 |        0 |    min |\n|    Max cumulative indexing throttle time across primary shard |               |           0 |           0 |        0 |    min |\n|                       Cumulative merge time of primary shards |               |     25.6515 |     24.4783 | -1.17315 |    min |\n|                      Cumulative merge count of primary shards |               |          54 |          54 |        0 |        |\n|                Min cumulative merge time across primary shard |               |           0 |           0 |        0 |    min |\n|             Median cumulative merge time across primary shard |               |     5.08235 |     4.80908 | -0.27327 |    min |\n|                Max cumulative merge time across primary shard |               |     5.34453 |      5.1737 | -0.17083 |    min |\n|              Cumulative merge throttle time of primary shards |               |     0.61275 |    0.500583 | -0.11217 |    min |\n|       Min cumulative merge throttle time across primary shard |               |           0 |           0 |        0 |    min |\n|    Median cumulative merge throttle time across primary shard |               |    0.119675 |   0.0843917 | -0.03528 |    min |\n|       Max cumulative merge throttle time across primary shard |               |    0.149433 |    0.160067 |  0.01063 |    min |\n|                     Cumulative refresh time of primary shards |               |     14.1648 |     13.2993 | -0.86552 |    min |\n|                    Cumulative refresh count of primary shards |               |         218 |         222 |        4 |        |\n|              Min cumulative refresh time across primary shard |               |  0.00256667 |     0.00305 |  0.00048 |    min |\n|           Median cumulative refresh time across primary shard |               |     2.80443 |      2.6442 | -0.16023 |    min |\n|              Max cumulative refresh time across primary shard |               |      3.0255 |      2.7346 |  -0.2909 |    min |\n|                       Cumulative flush time of primary shards |               |     1.12462 |     1.02668 | -0.09793 |    min |\n|                      Cumulative flush count of primary shards |               |          16 |          16 |        0 |        |\n|                Min cumulative flush time across primary shard |               |  0.00523333 |      0.0114 |  0.00617 |    min |\n|             Median cumulative flush time across primary shard |               |    0.164133 |     0.16815 |  0.00402 |    min |\n|                Max cumulative flush time across primary shard |               |    0.362233 |     0.29085 | -0.07138 |    min |\n|                                            Total Young Gen GC |               |      21.731 |       21.94 |    0.209 |      s |\n|                                              Total Old Gen GC |               |       2.885 |       2.831 |   -0.054 |      s |\n|                                                    Store size |               |     3.14898 |      3.1626 |  0.01362 |     GB |\n|                                                 Translog size |               | 3.07336e-07 | 3.07336e-07 |        0 |     GB |\n|                                        Heap used for segments |               |    0.117134 |    0.124229 |   0.0071 |     MB |\n|                                      Heap used for doc values |               |  0.00710297 |  0.00803375 |  0.00093 |     MB |\n|                                           Heap used for terms |               |   0.0307007 |     0.03302 |  0.00232 |     MB |\n|                                           Heap used for norms |               | 0.000427246 | 0.000427246 |        0 |     MB |\n|                                          Heap used for points |               |           0 |           0 |        0 |     MB |\n|                                   Heap used for stored fields |               |   0.0789032 |   0.0827484 |  0.00385 |     MB |\n|                                                 Segment count |               |          98 |         106 |        8 |        |\n|                                                Min Throughput |  index-append |     56073.5 |     56911.7 |  838.163 | docs/s |\n|                                             Median Throughput |  index-append |     57790.8 |     58344.8 |  554.008 | docs/s |\n|                                                Max Throughput |  index-append |     61334.6 |     62348.8 |  1014.17 | docs/s |\n|                                       50th percentile latency |  index-append |     563.169 |     559.103 | -4.06651 |     ms |\n|                                       90th percentile latency |  index-append |     819.896 |      783.56 | -36.3362 |     ms |\n|                                       99th percentile latency |  index-append |     5260.49 |     4858.24 | -402.253 |     ms |\n|                                     99.9th percentile latency |  index-append |     7297.99 |     6733.47 | -564.527 |     ms |\n|                                    99.99th percentile latency |  index-append |     8097.31 |     7898.67 | -198.644 |     ms |\n|                                      100th percentile latency |  index-append |     8125.76 |     8221.85 |  96.0861 |     ms |\n|                                  50th percentile service time |  index-append |     563.169 |     559.103 | -4.06651 |     ms |\n|                                  90th percentile service time |  index-append |     819.896 |      783.56 | -36.3362 |     ms |\n|                                  99th percentile service time |  index-append |     5260.49 |     4858.24 | -402.253 |     ms |\n|                                99.9th percentile service time |  index-append |     7297.99 |     6733.47 | -564.527 |     ms |\n|                               99.99th percentile service time |  index-append |     8097.31 |     7898.67 | -198.644 |     ms |\n|                                 100th percentile service time |  index-append |     8125.76 |     8221.85 |  96.0861 |     ms |\n|                                                    error rate |  index-append |           0 |           0 |        0 |      % |\n|                                                Min Throughput |       polygon |     2.00606 |     2.00594 | -0.00012 |  ops/s |\n|                                             Median Throughput |       polygon |     2.00723 |     2.00716 |   -7e-05 |  ops/s |\n|                                                Max Throughput |       polygon |     2.00903 |     2.00898 |   -5e-05 |  ops/s |\n|                                       50th percentile latency |       polygon |     48.9295 |     52.7095 |  3.78001 |     ms |\n|                                       90th percentile latency |       polygon |     52.4551 |     57.4678 |  5.01271 |     ms |\n|                                       99th percentile latency |       polygon |     56.0409 |     60.5088 |  4.46784 |     ms |\n|                                      100th percentile latency |       polygon |     60.4992 |     65.1092 |  4.60998 |     ms |\n|                                  50th percentile service time |       polygon |     46.2946 |     47.2608 |  0.96623 |     ms |\n|                                  90th percentile service time |       polygon |     49.4574 |     50.6995 |  1.24212 |     ms |\n|                                  99th percentile service time |       polygon |     53.5856 |     54.2241 |  0.63852 |     ms |\n|                                 100th percentile service time |       polygon |     59.7949 |      57.327 | -2.46789 |     ms |\n|                                                    error rate |       polygon |           0 |           0 |        0 |      % |\n|                                                Min Throughput |          bbox |     2.00551 |     2.00582 |  0.00031 |  ops/s |\n|                                             Median Throughput |          bbox |     2.00659 |     2.00702 |  0.00043 |  ops/s |\n|                                                Max Throughput |          bbox |     2.00883 |     2.00867 | -0.00016 |  ops/s |\n|                                       50th percentile latency |          bbox |     78.1395 |      61.353 | -16.7865 |     ms |\n|                                       90th percentile latency |          bbox |     99.0993 |     65.8409 | -33.2584 |     ms |\n|                                       99th percentile latency |          bbox |     151.841 |     82.3598 | -69.4816 |     ms |\n|                                      100th percentile latency |          bbox |     160.008 |     83.0498 | -76.9579 |     ms |\n|                                  50th percentile service time |          bbox |     76.5268 |     55.3796 | -21.1472 |     ms |\n|                                  90th percentile service time |          bbox |     96.8285 |     60.6023 | -36.2262 |     ms |\n|                                  99th percentile service time |          bbox |      148.44 |      75.527 |  -72.913 |     ms |\n|                                 100th percentile service time |          bbox |     156.613 |     80.2201 | -76.3926 |     ms |\n|                                                    error rate |          bbox |           0 |           0 |        0 |      % |\n|                                                Min Throughput |      distance |     5.01562 |     5.01567 |    5e-05 |  ops/s |\n|                                             Median Throughput |      distance |     5.01871 |     5.01836 | -0.00035 |  ops/s |\n|                                                Max Throughput |      distance |     5.02277 |     5.02326 |  0.00049 |  ops/s |\n|                                       50th percentile latency |      distance |     15.1561 |     18.7673 |   3.6112 |     ms |\n|                                       90th percentile latency |      distance |     17.1768 |     21.6565 |  4.47973 |     ms |\n|                                       99th percentile latency |      distance |      19.774 |     23.5863 |  3.81225 |     ms |\n|                                      100th percentile latency |      distance |      21.312 |     25.0206 |  3.70863 |     ms |\n|                                  50th percentile service time |      distance |     12.1756 |     12.3035 |  0.12788 |     ms |\n|                                  90th percentile service time |      distance |     13.3634 |     13.3482 | -0.01518 |     ms |\n|                                  99th percentile service time |      distance |     16.7787 |     16.3682 | -0.41046 |     ms |\n|                                 100th percentile service time |      distance |     20.3187 |     16.5775 | -3.74121 |     ms |\n|                                                    error rate |      distance |           0 |           0 |        0 |      % |\n|                                                Min Throughput | distanceRange |    0.500068 |    0.500095 |    3e-05 |  ops/s |\n|                                             Median Throughput | distanceRange |    0.500584 |    0.500621 |    4e-05 |  ops/s |\n|                                                Max Throughput | distanceRange |    0.500814 |    0.500857 |    4e-05 |  ops/s |\n|                                       50th percentile latency | distanceRange |     1445.58 |     1346.42 | -99.1601 |     ms |\n|                                       90th percentile latency | distanceRange |     1644.28 |     1443.76 | -200.519 |     ms |\n|                                       99th percentile latency | distanceRange |     1900.03 |     1767.17 | -132.857 |     ms |\n|                                      100th percentile latency | distanceRange |     1927.36 |     1916.19 | -11.1755 |     ms |\n|                                  50th percentile service time | distanceRange |     1443.18 |     1343.01 | -100.164 |     ms |\n|                                  90th percentile service time | distanceRange |     1643.64 |     1439.07 |  -204.57 |     ms |\n|                                  99th percentile service time | distanceRange |      1898.9 |     1763.21 | -135.695 |     ms |\n|                                 100th percentile service time | distanceRange |     1922.79 |     1913.49 | -9.30182 |     ms |\n|                                                    error rate | distanceRange |           0 |           0 |        0 |      % |", "url": "https://github.com/opensearch-project/security/pull/491#discussion_r441740659", "createdAt": "2020-06-17T18:20:59Z", "author": {"login": "sujithvm"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -508,20 +508,11 @@ public void onIndexModule(IndexModule indexModule) {\n         //called for every index!\n \n         if (!disabled && !client && !sslOnly) {\n-            final ComplianceConfig complianceConfig = auditLog.getComplianceConfig();\n-            log.debug(\"Handle complianceConfig=\"+complianceConfig+\"/dlsFlsAvailable: \"+dlsFlsAvailable+\"/auditLog=\"+auditLog.getClass()+\" for onIndexModule() of index \"+indexModule.getIndex().getName());\n+            log.debug(\"Handle dlsFlsAvailable: \"+dlsFlsAvailable+\"/auditLog=\"+auditLog.getClass()+\" for onIndexModule() of index \"+indexModule.getIndex().getName());\n             if (dlsFlsAvailable) {\n \n-                final ComplianceIndexingOperationListener ciol;\n-\n-                assert complianceConfig!=null:\"compliance config must not be null here\";\n-                \n-                if(complianceConfig.writeHistoryEnabledForIndex(indexModule.getIndex().getName())) {\n-                    ciol = ReflectionHelper.instantiateComplianceListener(Objects.requireNonNull(auditLog));\n-                    indexModule.addIndexOperationListener(ciol);\n-                } else {\n-                    ciol = new ComplianceIndexingOperationListener();\n-                }\n+                final ComplianceIndexingOperationListener ciol = ReflectionHelper.instantiateComplianceListener(Objects.requireNonNull(auditLog));\n+                indexModule.addIndexOperationListener(ciol);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEyODc2Ng=="}, "originalCommit": {"oid": "178afbf19b2e534af41c619c3e1f6e3bf66286f5"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc1NjM5OQ==", "bodyText": "Thanks for doing quick perf run.", "url": "https://github.com/opensearch-project/security/pull/491#discussion_r441756399", "createdAt": "2020-06-17T18:48:34Z", "author": {"login": "hardik-k-shah"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -508,20 +508,11 @@ public void onIndexModule(IndexModule indexModule) {\n         //called for every index!\n \n         if (!disabled && !client && !sslOnly) {\n-            final ComplianceConfig complianceConfig = auditLog.getComplianceConfig();\n-            log.debug(\"Handle complianceConfig=\"+complianceConfig+\"/dlsFlsAvailable: \"+dlsFlsAvailable+\"/auditLog=\"+auditLog.getClass()+\" for onIndexModule() of index \"+indexModule.getIndex().getName());\n+            log.debug(\"Handle dlsFlsAvailable: \"+dlsFlsAvailable+\"/auditLog=\"+auditLog.getClass()+\" for onIndexModule() of index \"+indexModule.getIndex().getName());\n             if (dlsFlsAvailable) {\n \n-                final ComplianceIndexingOperationListener ciol;\n-\n-                assert complianceConfig!=null:\"compliance config must not be null here\";\n-                \n-                if(complianceConfig.writeHistoryEnabledForIndex(indexModule.getIndex().getName())) {\n-                    ciol = ReflectionHelper.instantiateComplianceListener(Objects.requireNonNull(auditLog));\n-                    indexModule.addIndexOperationListener(ciol);\n-                } else {\n-                    ciol = new ComplianceIndexingOperationListener();\n-                }\n+                final ComplianceIndexingOperationListener ciol = ReflectionHelper.instantiateComplianceListener(Objects.requireNonNull(auditLog));\n+                indexModule.addIndexOperationListener(ciol);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEyODc2Ng=="}, "originalCommit": {"oid": "178afbf19b2e534af41c619c3e1f6e3bf66286f5"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2471, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}