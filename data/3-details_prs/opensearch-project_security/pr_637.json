{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0Nzk3MjAz", "number": 637, "title": "Clean up rest and transport header filtering", "bodyText": "Issue #, if available:\nDescription of changes:\n\nCleanup header filtering logic. Creating two maps in one flow.\nInput can be immutable map hence making a map clone (retaining behavior)\nUsing wildcard pattern\nAdded tests\n\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-08-07T20:13:09Z", "url": "https://github.com/opensearch-project/security/pull/637", "merged": true, "mergeCommit": {"oid": "221d6f03442c804e7b39d8614971f8bec874d7c2"}, "closed": true, "closedAt": "2020-08-08T01:52:04Z", "author": {"login": "sujithvm"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc8qJ3yAH2gAyNDY0Nzk3MjAzOmVhNjA1NTQ5YzI4MGY1YmRmZTBlZjYyZTQ5M2I2MGVkYTBhNjBlYTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc8-4MjAFqTQ2MzgyNDkzNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ea605549c280f5bdfe0ef62e493b60eda0a60ea4", "author": {"user": {"login": "sujithvm", "name": "Sujith Vadakkepat"}}, "url": "https://github.com/opensearch-project/security/commit/ea605549c280f5bdfe0ef62e493b60eda0a60ea4", "committedDate": "2020-08-07T20:08:20Z", "message": "Clean up rest and transport header filtering"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNjA3MTAx", "url": "https://github.com/opensearch-project/security/pull/637#pullrequestreview-463607101", "createdAt": "2020-08-07T20:58:05Z", "commit": {"oid": "ea605549c280f5bdfe0ef62e493b60eda0a60ea4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNzA4MzQ2", "url": "https://github.com/opensearch-project/security/pull/637#pullrequestreview-463708346", "createdAt": "2020-08-08T01:49:23Z", "commit": {"oid": "ea605549c280f5bdfe0ef62e493b60eda0a60ea4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzODI0NTQz", "url": "https://github.com/opensearch-project/security/pull/637#pullrequestreview-463824543", "createdAt": "2020-08-08T20:07:32Z", "commit": {"oid": "ea605549c280f5bdfe0ef62e493b60eda0a60ea4"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQyMDowNzozMlrOG9164g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQyMDowOTo0N1rOG917ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ5OTc0Ng==", "bodyText": "Is it necessary to create the clone even if excludeSensitiveHeaders is false?", "url": "https://github.com/opensearch-project/security/pull/637#discussion_r467499746", "createdAt": "2020-08-08T20:07:32Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AuditMessage.java", "diffHunk": "@@ -307,15 +307,11 @@ public void addRestParams(Map<String,String> params) {\n \n     public void addRestHeaders(Map<String,List<String>> headers, boolean excludeSensitiveHeaders) {\n         if(headers != null && !headers.isEmpty()) {\n-            if(excludeSensitiveHeaders) {\n-                final Map<String, List<String>> headersClone = new HashMap<String, List<String>>(headers)\n-                        .entrySet().stream()\n-                        .filter(map -> !map.getKey().equalsIgnoreCase(AUTHORIZATION_HEADER))\n-                        .collect(Collectors.toMap(p -> p.getKey(), p -> p.getValue()));\n-                auditInfo.put(REST_REQUEST_HEADERS, headersClone);\n-            } else {\n-                auditInfo.put(REST_REQUEST_HEADERS, new HashMap<String, List<String>>(headers));\n+            final Map<String, List<String>> headersClone = new HashMap<>(headers);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea605549c280f5bdfe0ef62e493b60eda0a60ea4"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ5OTg5OQ==", "bodyText": "headers = Maps.filterEntries(headers, header -> !AUTHORIZATION_HEADER.test(header.getKey()));", "url": "https://github.com/opensearch-project/security/pull/637#discussion_r467499899", "createdAt": "2020-08-08T20:09:47Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AuditMessage.java", "diffHunk": "@@ -307,15 +307,11 @@ public void addRestParams(Map<String,String> params) {\n \n     public void addRestHeaders(Map<String,List<String>> headers, boolean excludeSensitiveHeaders) {\n         if(headers != null && !headers.isEmpty()) {\n-            if(excludeSensitiveHeaders) {\n-                final Map<String, List<String>> headersClone = new HashMap<String, List<String>>(headers)\n-                        .entrySet().stream()\n-                        .filter(map -> !map.getKey().equalsIgnoreCase(AUTHORIZATION_HEADER))\n-                        .collect(Collectors.toMap(p -> p.getKey(), p -> p.getValue()));\n-                auditInfo.put(REST_REQUEST_HEADERS, headersClone);\n-            } else {\n-                auditInfo.put(REST_REQUEST_HEADERS, new HashMap<String, List<String>>(headers));\n+            final Map<String, List<String>> headersClone = new HashMap<>(headers);\n+            if (excludeSensitiveHeaders) {\n+                headersClone.keySet().removeIf(AUTHORIZATION_HEADER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea605549c280f5bdfe0ef62e493b60eda0a60ea4"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzODI0OTM2", "url": "https://github.com/opensearch-project/security/pull/637#pullrequestreview-463824936", "createdAt": "2020-08-08T20:17:02Z", "commit": {"oid": "ea605549c280f5bdfe0ef62e493b60eda0a60ea4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQyMDoxNzowMlrOG919rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQyMDoxNzowMlrOG919rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUwMDQ2Mw==", "bodyText": "Avoid code duplication. Merge addTransportHeaders and addRestHeaders to a single method with one more parameter.", "url": "https://github.com/opensearch-project/security/pull/637#discussion_r467500463", "createdAt": "2020-08-08T20:17:02Z", "author": {"login": "vrozov"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AuditMessage.java", "diffHunk": "@@ -339,15 +335,11 @@ void addRestRequestInfo(final RestRequest request, final AuditConfig.Filter filt\n \n     public void addTransportHeaders(Map<String,String> headers, boolean excludeSensitiveHeaders) {\n         if(headers != null && !headers.isEmpty()) {\n-            if(excludeSensitiveHeaders) {\n-                final Map<String,String> headersClone = new HashMap<String,String>(headers)\n-                        .entrySet().stream()\n-                        .filter(map -> !map.getKey().equalsIgnoreCase(AUTHORIZATION_HEADER))\n-                        .collect(Collectors.toMap(p -> p.getKey(), p -> p.getValue()));\n-                auditInfo.put(TRANSPORT_REQUEST_HEADERS, headersClone);\n-            } else {\n-                auditInfo.put(TRANSPORT_REQUEST_HEADERS, new HashMap<String,String>(headers));\n+            final Map<String, String> headersClone = new HashMap<>(headers);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea605549c280f5bdfe0ef62e493b60eda0a60ea4"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2855, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}