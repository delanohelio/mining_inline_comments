{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzMzMxNjU4", "number": 874, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNzowMTowNFrOD_xB3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNzowMTowNFrOD_xB3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MTkwMTc1OnYy", "diffSide": "RIGHT", "path": "src/main/java/run/halo/app/aspect/SensitiveConcealAspect.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNzowMTowNFrOGan0uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNzowMTowNFrOGan0uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU2ODYzMg==", "bodyText": "Maybe here should invoke sensitiveMask(result) before returning result.", "url": "https://github.com/halo-dev/halo/pull/874#discussion_r430568632", "createdAt": "2020-05-26T17:01:04Z", "author": {"login": "JohnNiang"}, "path": "src/main/java/run/halo/app/aspect/SensitiveConcealAspect.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package run.halo.app.aspect;\n+\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.annotation.Around;\n+import org.aspectj.lang.annotation.Aspect;\n+import org.aspectj.lang.annotation.Pointcut;\n+import org.springframework.stereotype.Component;\n+import run.halo.app.model.entity.BaseComment;\n+import run.halo.app.security.context.SecurityContextHolder;\n+\n+\n+/**\n+ * @author giveup\n+ * @description SensitiveMaskAspect\n+ * @date 10:22 PM 25/5/2020\n+ */\n+@Aspect\n+@Component\n+public class SensitiveConcealAspect {\n+\n+\n+    @Pointcut(\"@annotation(run.halo.app.annotation.SensitiveConceal)\")\n+    public void pointCut() {\n+    }\n+\n+    private void sensitiveMask(Object comment) {\n+        if (comment instanceof BaseComment) {\n+            ((BaseComment) comment).setEmail(\"\");\n+            ((BaseComment) comment).setIpAddress(\"\");\n+        }\n+    }\n+\n+\n+    @Around(\"pointCut()\")\n+    public Object mask(ProceedingJoinPoint joinPoint) throws Throwable {\n+\n+        Object result = joinPoint.proceed();\n+\n+        if (SecurityContextHolder.getContext().isAuthenticated()) {\n+\n+            return result;\n+\n+        }\n+\n+        if (result instanceof Iterable) {\n+\n+            ((Iterable<?>) result).forEach(this::sensitiveMask);\n+\n+        }\n+\n+        return result;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3586e5d99410eb4f7d5320ffb1d5bbf97e59795e"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2049, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}