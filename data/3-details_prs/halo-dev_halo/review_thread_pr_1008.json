{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYxMTkyODgx", "number": 1008, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxNTozOToxMlrOEUTGmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxNTo0MDoyNlrOEUTHGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NzE5OTYwOnYy", "diffSide": "RIGHT", "path": "src/main/java/run/halo/app/cache/RedisCacheStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxNTozOToxMlrOG6es2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxNTozOToxMlrOG6es2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3MzU5NA==", "bodyText": "\u52a0\u4e0a\u7a7a\u884c\u3002", "url": "https://github.com/halo-dev/halo/pull/1008#discussion_r463973594", "createdAt": "2020-08-01T15:39:12Z", "author": {"login": "JohnNiang"}, "path": "src/main/java/run/halo/app/cache/RedisCacheStore.java", "diffHunk": "@@ -32,11 +32,11 @@\n      */\n     private final static ConcurrentHashMap<String, CacheWrapper<String>> CACHE_CONTAINER = new ConcurrentHashMap<>();\n     private volatile static JedisCluster REDIS;\n-    protected HaloProperties haloProperties;\n     /**\n      * Lock.\n      */\n-    private Lock lock = new ReentrantLock();\n+    private final Lock lock = new ReentrantLock();\n+    protected HaloProperties haloProperties;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a01f6aeb0b527189e7f815cec90ff285e0a1b74"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NzIwMDQ5OnYy", "diffSide": "RIGHT", "path": "src/main/java/run/halo/app/service/impl/PostServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxNTo0MDowMFrOG6etNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxNTo0Mjo1OVrOG6euVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3MzY4Nw==", "bodyText": "\u4e3a\u4ec0\u4e48\u8981\u628a id \u964d\u5e8f\u6392\u5e8f\u5220\u9664\u5462\uff1f", "url": "https://github.com/halo-dev/halo/pull/1008#discussion_r463973687", "createdAt": "2020-08-01T15:40:00Z", "author": {"login": "JohnNiang"}, "path": "src/main/java/run/halo/app/service/impl/PostServiceImpl.java", "diffHunk": "@@ -804,76 +806,11 @@ public void publishVisitEvent(Integer postId) {\n         eventPublisher.publishEvent(new PostVisitEvent(this, postId));\n     }\n \n-    @Override\n-    public @NotNull AdjacentPostVO getAdjacentPosts(Post currentPost) {\n-        Assert.notNull(currentPost, \"Post must not be null\");\n-\n-        // get pageable post list\n-        List<Post> postList = new ArrayList<>();\n-        // init fist page && default page size\n-        int page = 1;\n-        int defaultPageSize = 500;\n-        boolean needNext = true;\n-\n-        // get custom sort type\n-        Sort sort = getPostDefaultSort();\n-        Pageable pageable = null;\n-        PostStatus postStatus = PostStatus.PUBLISHED;\n-        long totalCount = countByStatus(postStatus);\n-\n-        while (needNext && totalCount > postList.size()) {\n-            pageable = PageRequest\n-                .of(page >= 1 ? page - 1 : page, defaultPageSize, sort);\n-\n-            Page<Post> postPage = pageBy(postStatus, pageable);\n-            List<Post> pageablePostList = postPage.getContent();\n-            if (pageablePostList.size() == 0) {\n-                break;\n-            }\n-            postList.addAll(postPage.getContent());\n-            if (postList.stream().filter(it -> it.getId().equals(currentPost.getId())).count() == 1\n-                && !postList.stream().reduce((first, second) -> second).get().getId()\n-                .equals(currentPost.getId())) {\n-                // contains the post && the post is not in the end\n-                needNext = false;\n-            }\n-\n-            page++;\n-        }\n-\n-        if (CollectionUtils.isEmpty(postList)) {\n-            // if post list is empty, return empty object\n-            return AdjacentPostVO.builder().build();\n-        }\n-\n-        // get current post index in post list\n-        List<Integer> idList = postList.stream().map(Post::getId).collect(Collectors.toList());\n-        int index = idList.indexOf(currentPost.getId());\n-\n-        if (index == -1) {\n-            // if not found, return empty object\n-            return AdjacentPostVO.builder().build();\n-        }\n-\n-        AdjacentPostVO adjacentPostVO = new AdjacentPostVO();\n-\n-        // setup pre\n-        if (index > 0) {\n-            adjacentPostVO.setPrevPost(postList.get(index - 1));\n-        }\n-        // setup next\n-        if (index < postList.size() - 1) {\n-            adjacentPostVO.setNextPost(postList.get(index + 1));\n-        }\n-\n-        return adjacentPostVO;\n-    }\n-\n     @Override\n     public @NotNull Sort getPostDefaultSort() {\n         String indexSort = optionService.getByPropertyOfNonNull(PostProperties.INDEX_SORT)\n             .toString();\n-        return Sort.by(DESC, \"topPriority\").and(Sort.by(DESC, indexSort)).and(Sort.by(DESC, \"id\"));\n+        return Sort.by(DESC, \"topPriority\").and(Sort.by(DESC, indexSort));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a01f6aeb0b527189e7f815cec90ff285e0a1b74"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3Mzk3NA==", "bodyText": "\u56e0\u4e3a\u6ca1\u6709\u4efb\u4f55\u7528\u9014\u3002", "url": "https://github.com/halo-dev/halo/pull/1008#discussion_r463973974", "createdAt": "2020-08-01T15:42:59Z", "author": {"login": "ruibaby"}, "path": "src/main/java/run/halo/app/service/impl/PostServiceImpl.java", "diffHunk": "@@ -804,76 +806,11 @@ public void publishVisitEvent(Integer postId) {\n         eventPublisher.publishEvent(new PostVisitEvent(this, postId));\n     }\n \n-    @Override\n-    public @NotNull AdjacentPostVO getAdjacentPosts(Post currentPost) {\n-        Assert.notNull(currentPost, \"Post must not be null\");\n-\n-        // get pageable post list\n-        List<Post> postList = new ArrayList<>();\n-        // init fist page && default page size\n-        int page = 1;\n-        int defaultPageSize = 500;\n-        boolean needNext = true;\n-\n-        // get custom sort type\n-        Sort sort = getPostDefaultSort();\n-        Pageable pageable = null;\n-        PostStatus postStatus = PostStatus.PUBLISHED;\n-        long totalCount = countByStatus(postStatus);\n-\n-        while (needNext && totalCount > postList.size()) {\n-            pageable = PageRequest\n-                .of(page >= 1 ? page - 1 : page, defaultPageSize, sort);\n-\n-            Page<Post> postPage = pageBy(postStatus, pageable);\n-            List<Post> pageablePostList = postPage.getContent();\n-            if (pageablePostList.size() == 0) {\n-                break;\n-            }\n-            postList.addAll(postPage.getContent());\n-            if (postList.stream().filter(it -> it.getId().equals(currentPost.getId())).count() == 1\n-                && !postList.stream().reduce((first, second) -> second).get().getId()\n-                .equals(currentPost.getId())) {\n-                // contains the post && the post is not in the end\n-                needNext = false;\n-            }\n-\n-            page++;\n-        }\n-\n-        if (CollectionUtils.isEmpty(postList)) {\n-            // if post list is empty, return empty object\n-            return AdjacentPostVO.builder().build();\n-        }\n-\n-        // get current post index in post list\n-        List<Integer> idList = postList.stream().map(Post::getId).collect(Collectors.toList());\n-        int index = idList.indexOf(currentPost.getId());\n-\n-        if (index == -1) {\n-            // if not found, return empty object\n-            return AdjacentPostVO.builder().build();\n-        }\n-\n-        AdjacentPostVO adjacentPostVO = new AdjacentPostVO();\n-\n-        // setup pre\n-        if (index > 0) {\n-            adjacentPostVO.setPrevPost(postList.get(index - 1));\n-        }\n-        // setup next\n-        if (index < postList.size() - 1) {\n-            adjacentPostVO.setNextPost(postList.get(index + 1));\n-        }\n-\n-        return adjacentPostVO;\n-    }\n-\n     @Override\n     public @NotNull Sort getPostDefaultSort() {\n         String indexSort = optionService.getByPropertyOfNonNull(PostProperties.INDEX_SORT)\n             .toString();\n-        return Sort.by(DESC, \"topPriority\").and(Sort.by(DESC, indexSort)).and(Sort.by(DESC, \"id\"));\n+        return Sort.by(DESC, \"topPriority\").and(Sort.by(DESC, indexSort));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3MzY4Nw=="}, "originalCommit": {"oid": "6a01f6aeb0b527189e7f815cec90ff285e0a1b74"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NzIwMDYwOnYy", "diffSide": "RIGHT", "path": "src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxNTo0MDowNlrOG6etQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxNTo0MDowNlrOG6etQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3MzY5OQ==", "bodyText": "\u7a7a\u884c\u3002", "url": "https://github.com/halo-dev/halo/pull/1008#discussion_r463973699", "createdAt": "2020-08-01T15:40:06Z", "author": {"login": "JohnNiang"}, "path": "src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java", "diffHunk": "@@ -77,20 +77,17 @@\n     private final RestTemplate restTemplate;\n \n     private final ApplicationEventPublisher eventPublisher;\n-\n+    private final AtomicReference<String> activeThemeId = new AtomicReference<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a01f6aeb0b527189e7f815cec90ff285e0a1b74"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NzIwMDkwOnYy", "diffSide": "RIGHT", "path": "src/main/java/run/halo/app/utils/GithubUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxNTo0MDoyNlrOG6etZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxNTo0MDoyNlrOG6etZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3MzczNA==", "bodyText": "\u7a7a\u884c\u3002", "url": "https://github.com/halo-dev/halo/pull/1008#discussion_r463973734", "createdAt": "2020-08-01T15:40:26Z", "author": {"login": "JohnNiang"}, "path": "src/main/java/run/halo/app/utils/GithubUtils.java", "diffHunk": "@@ -126,16 +130,14 @@ public static String accessThemeProperty(String uri, String branch) {\n     private static class GithubRelease implements Runnable {\n \n         /**\n-         * The return result is zip url and tag name etc.\n+         * should be in format of \"username/reponame\"\n          */\n-        private HashMap<String, Object> result;\n-\n+        private final String repoUrl;\n+        private final String tagName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a01f6aeb0b527189e7f815cec90ff285e0a1b74"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2008, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}