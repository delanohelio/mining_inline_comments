{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxNzEwNzg5", "number": 489, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQxNzowOTowN1rODXVqbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQwMzozMTo1NlrODXWxTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1Nzk4NzY0OnYy", "diffSide": "RIGHT", "path": "src/main/java/run/halo/app/service/PostService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQxNzowOTowN1rOFcmShQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxMzozNToxOVrOFcpdOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzMTc4MQ==", "bodyText": "\u8fd9\u91cc\u9700\u8981\u8be6\u7ec6\u8bf4\u660e\u8fd4\u56de\u503c\u5177\u4f53\u662f\u4ec0\u4e48\uff1b\n\u540c\u65f6\uff0c\u4e5f\u4e0d\u5efa\u8bae\u8fd9\u6837\u8fd4\u56de\u7ed3\u679c\u3002", "url": "https://github.com/halo-dev/halo/pull/489#discussion_r365531781", "createdAt": "2020-01-11T17:09:07Z", "author": {"login": "JohnNiang"}, "path": "src/main/java/run/halo/app/service/PostService.java", "diffHunk": "@@ -228,4 +230,20 @@\n      * @param postId postId must not be null\n      */\n     void publishVisitEvent(@NonNull Integer postId);\n+\n+    /**\n+     * Gets pre && next post.\n+     * @param currentPost post must not be null\n+     * @return\n+     */\n+    @NotNull\n+    List<Post> getAdjacentPostList(Post currentPost);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c93dee615fefd5364be898adb4fc4f340d00ed2"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzMjU4OA==", "bodyText": "\u8fd9\u91cc\u8be5\u600e\u4e48\u8fd4\u56de\u7ed3\u679c\u6bd4\u8f83\u597d\u5462\ud83d\ude33", "url": "https://github.com/halo-dev/halo/pull/489#discussion_r365532588", "createdAt": "2020-01-11T17:26:45Z", "author": {"login": "guqing"}, "path": "src/main/java/run/halo/app/service/PostService.java", "diffHunk": "@@ -228,4 +230,20 @@\n      * @param postId postId must not be null\n      */\n     void publishVisitEvent(@NonNull Integer postId);\n+\n+    /**\n+     * Gets pre && next post.\n+     * @param currentPost post must not be null\n+     * @return\n+     */\n+    @NotNull\n+    List<Post> getAdjacentPostList(Post currentPost);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzMTc4MQ=="}, "originalCommit": {"oid": "3c93dee615fefd5364be898adb4fc4f340d00ed2"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4MzY3Mw==", "bodyText": "\u8fd9\u91cc\u4f1a\u8c03\u6574\u4e0b\uff0c\u8fd4\u56de\u4e00\u4e2aAdjacentPost\u5bf9\u8c61\uff0c\u91cc\u9762\u5305\u542bpre\u548cnext", "url": "https://github.com/halo-dev/halo/pull/489#discussion_r365583673", "createdAt": "2020-01-12T13:35:19Z", "author": {"login": "le0zh0u"}, "path": "src/main/java/run/halo/app/service/PostService.java", "diffHunk": "@@ -228,4 +230,20 @@\n      * @param postId postId must not be null\n      */\n     void publishVisitEvent(@NonNull Integer postId);\n+\n+    /**\n+     * Gets pre && next post.\n+     * @param currentPost post must not be null\n+     * @return\n+     */\n+    @NotNull\n+    List<Post> getAdjacentPostList(Post currentPost);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzMTc4MQ=="}, "originalCommit": {"oid": "3c93dee615fefd5364be898adb4fc4f340d00ed2"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1Nzk4OTAwOnYy", "diffSide": "RIGHT", "path": "src/main/java/run/halo/app/controller/content/model/PostModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQxNzoxMzoxOVrOFcmTQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxMzozNjowNVrOFcpdZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzMTk2OQ==", "bodyText": "\u65b9\u6cd5\u8fd4\u56de\u503c\u7684 adjacentPostDTOList \u4e0d\u591f\u660e\u786e\u3002\u4e5f\u4e0d\u5efa\u8bae\u8fd9\u6837\u505a\uff08\u5c3d\u7ba1\u80fd\u591f\u5b9e\u73b0\u6548\u679c\uff09\u3002", "url": "https://github.com/halo-dev/halo/pull/489#discussion_r365531969", "createdAt": "2020-01-11T17:13:19Z", "author": {"login": "JohnNiang"}, "path": "src/main/java/run/halo/app/controller/content/model/PostModel.java", "diffHunk": "@@ -75,21 +77,27 @@ public PostModel(PostService postService,\n     public String content(Post post, String token, Model model) {\n \n         if (post.getStatus().equals(PostStatus.INTIMATE) && StringUtils.isEmpty(token)) {\n-            String redirect = String.format(\"%s/archives/%s/password\", optionService.getBlogBaseUrl(), post.getUrl());\n+            String redirect = String\n+                    .format(\"%s/archives/%s/password\", optionService.getBlogBaseUrl(),\n+                            post.getUrl());\n             return \"redirect:\" + redirect;\n         }\n \n         if (!StringUtils.isEmpty(token)) {\n             // verify token\n-            String cachedToken = cacheStore.getAny(token, String.class).orElseThrow(() -> new ForbiddenException(\"\u60a8\u6ca1\u6709\u8be5\u6587\u7ae0\u7684\u8bbf\u95ee\u6743\u9650\"));\n+            String cachedToken = cacheStore.getAny(token, String.class)\n+                    .orElseThrow(() -> new ForbiddenException(\"\u60a8\u6ca1\u6709\u8be5\u6587\u7ae0\u7684\u8bbf\u95ee\u6743\u9650\"));\n             if (!cachedToken.equals(token)) {\n                 throw new ForbiddenException(\"\u60a8\u6ca1\u6709\u8be5\u6587\u7ae0\u7684\u8bbf\u95ee\u6743\u9650\");\n             }\n             post.setFormatContent(MarkdownUtils.renderHtml(post.getOriginalContent()));\n         }\n         postService.publishVisitEvent(post.getId());\n-        postService.getNextPost(post.getCreateTime()).ifPresent(nextPost -> model.addAttribute(\"nextPost\", nextPost));\n-        postService.getPrePost(post.getCreateTime()).ifPresent(prePost -> model.addAttribute(\"prePost\", prePost));\n+\n+        List<Post> adjacentPostList = postService.getAdjacentPostList(post);\n+        List<BasePostMinimalDTO> adjacentPostDTOList = postService.convertToMinimal(adjacentPostList);\n+        Optional.ofNullable(adjacentPostDTOList.get(0)).ifPresent(prePost -> model.addAttribute(\"prePost\", prePost));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c93dee615fefd5364be898adb4fc4f340d00ed2"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4MzcxOA==", "bodyText": "adjacentPostDTOList \u662f\u6682\u65f6\u5bf9dev\u5206\u652f\u7684\u6539\u9020\u505a\u7684\u8c03\u6574\uff0c\u4e3a\u4e86\u80fd\u8fd4\u56defullPath\u3002\u73b0\u5728fullPath\u4e0d\u751f\u6548\uff0c\u4f1a\u5728dev\u7a33\u5b9a\u540e\u91cd\u65b0\u9002\u914d\u3002", "url": "https://github.com/halo-dev/halo/pull/489#discussion_r365583718", "createdAt": "2020-01-12T13:36:05Z", "author": {"login": "le0zh0u"}, "path": "src/main/java/run/halo/app/controller/content/model/PostModel.java", "diffHunk": "@@ -75,21 +77,27 @@ public PostModel(PostService postService,\n     public String content(Post post, String token, Model model) {\n \n         if (post.getStatus().equals(PostStatus.INTIMATE) && StringUtils.isEmpty(token)) {\n-            String redirect = String.format(\"%s/archives/%s/password\", optionService.getBlogBaseUrl(), post.getUrl());\n+            String redirect = String\n+                    .format(\"%s/archives/%s/password\", optionService.getBlogBaseUrl(),\n+                            post.getUrl());\n             return \"redirect:\" + redirect;\n         }\n \n         if (!StringUtils.isEmpty(token)) {\n             // verify token\n-            String cachedToken = cacheStore.getAny(token, String.class).orElseThrow(() -> new ForbiddenException(\"\u60a8\u6ca1\u6709\u8be5\u6587\u7ae0\u7684\u8bbf\u95ee\u6743\u9650\"));\n+            String cachedToken = cacheStore.getAny(token, String.class)\n+                    .orElseThrow(() -> new ForbiddenException(\"\u60a8\u6ca1\u6709\u8be5\u6587\u7ae0\u7684\u8bbf\u95ee\u6743\u9650\"));\n             if (!cachedToken.equals(token)) {\n                 throw new ForbiddenException(\"\u60a8\u6ca1\u6709\u8be5\u6587\u7ae0\u7684\u8bbf\u95ee\u6743\u9650\");\n             }\n             post.setFormatContent(MarkdownUtils.renderHtml(post.getOriginalContent()));\n         }\n         postService.publishVisitEvent(post.getId());\n-        postService.getNextPost(post.getCreateTime()).ifPresent(nextPost -> model.addAttribute(\"nextPost\", nextPost));\n-        postService.getPrePost(post.getCreateTime()).ifPresent(prePost -> model.addAttribute(\"prePost\", prePost));\n+\n+        List<Post> adjacentPostList = postService.getAdjacentPostList(post);\n+        List<BasePostMinimalDTO> adjacentPostDTOList = postService.convertToMinimal(adjacentPostList);\n+        Optional.ofNullable(adjacentPostDTOList.get(0)).ifPresent(prePost -> model.addAttribute(\"prePost\", prePost));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzMTk2OQ=="}, "originalCommit": {"oid": "3c93dee615fefd5364be898adb4fc4f340d00ed2"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1Nzk4OTQ2OnYy", "diffSide": "RIGHT", "path": "src/main/java/run/halo/app/service/impl/PostServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQxNzoxNDozNFrOFcmTgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxMzozODowOFrOFcpd6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzMjAzMw==", "bodyText": "\u53ef\u4ee5\u8003\u8651\u521b\u5efa\u4e00\u4e2a VO\uff0c\u6765\u4f20\u9012\u53c2\u6570\u3002", "url": "https://github.com/halo-dev/halo/pull/489#discussion_r365532033", "createdAt": "2020-01-11T17:14:34Z", "author": {"login": "JohnNiang"}, "path": "src/main/java/run/halo/app/service/impl/PostServiceImpl.java", "diffHunk": "@@ -698,4 +743,77 @@ private PostDetailVO createOrUpdate(@NonNull Post post, Set<Integer> tagIds, Set\n     public void publishVisitEvent(Integer postId) {\n         eventPublisher.publishEvent(new PostVisitEvent(this, postId));\n     }\n+\n+    @Override\n+    public @NotNull List<Post> getAdjacentPostList(Post currentPost) {\n+        Assert.notNull(currentPost, \"Post must not be null\");\n+\n+        // get pageable post list\n+        List<Post> postList = new ArrayList<>();\n+        // init fist page && default page size\n+        Integer page = 1;\n+        Integer defaultPageSize = 500;\n+        boolean needNext = true;\n+\n+        // get custom sort type\n+        Sort sort = getPostDefaultSort();\n+        Pageable pageable = null;\n+        PostStatus postStatus = PostStatus.PUBLISHED;\n+        long totalCount = countByStatus(postStatus);\n+\n+        while (needNext && totalCount > postList.size()) {\n+            pageable = PageRequest\n+                    .of(page >= 1 ? page - 1 : page, defaultPageSize, sort);\n+\n+            Page<Post> postPage = pageBy(postStatus, pageable);\n+            List<Post> pageablePostList = postPage.getContent();\n+            if (pageablePostList.size() == 0) {\n+                break;\n+            }\n+            postList.addAll(postPage.getContent());\n+            if (postList.stream().filter(it -> it.getId().equals(currentPost.getId())).count() == 1\n+                    && !postList.stream().reduce((first, second) -> second).get().getId()\n+                    .equals(currentPost.getId())) {\n+                // contains the post && the post is not in the end\n+                needNext = false;\n+            }\n+\n+            page++;\n+        }\n+\n+        List<Post> resultList = new ArrayList<>(2);\n+\n+        if (CollectionUtils.isEmpty(postList)) {\n+            return resultList;\n+        }\n+\n+        List<Integer> idList = postList.stream().map(Post::getId).collect(Collectors.toList());\n+        Integer index = idList.indexOf(currentPost.getId());\n+\n+        if (index == -1) {\n+            return resultList;\n+        }\n+\n+        //setup preContentArchiveController\n+        if (index > 0) {\n+            resultList.add(postList.get(index - 1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c93dee615fefd5364be898adb4fc4f340d00ed2"}, "originalPosition": 365}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4Mzg1MA==", "bodyText": "\u8fd9\u91cc\u4f1a\u65b0\u589e\u4e00\u4e2a\u7279\u5b9a\u7684AdjacentPost\u5bf9\u8c61\uff0c\u91cc\u9762\u7684\u4e24\u4e2a\u5c5e\u6027\u662fpre\u548cnext", "url": "https://github.com/halo-dev/halo/pull/489#discussion_r365583850", "createdAt": "2020-01-12T13:38:08Z", "author": {"login": "le0zh0u"}, "path": "src/main/java/run/halo/app/service/impl/PostServiceImpl.java", "diffHunk": "@@ -698,4 +743,77 @@ private PostDetailVO createOrUpdate(@NonNull Post post, Set<Integer> tagIds, Set\n     public void publishVisitEvent(Integer postId) {\n         eventPublisher.publishEvent(new PostVisitEvent(this, postId));\n     }\n+\n+    @Override\n+    public @NotNull List<Post> getAdjacentPostList(Post currentPost) {\n+        Assert.notNull(currentPost, \"Post must not be null\");\n+\n+        // get pageable post list\n+        List<Post> postList = new ArrayList<>();\n+        // init fist page && default page size\n+        Integer page = 1;\n+        Integer defaultPageSize = 500;\n+        boolean needNext = true;\n+\n+        // get custom sort type\n+        Sort sort = getPostDefaultSort();\n+        Pageable pageable = null;\n+        PostStatus postStatus = PostStatus.PUBLISHED;\n+        long totalCount = countByStatus(postStatus);\n+\n+        while (needNext && totalCount > postList.size()) {\n+            pageable = PageRequest\n+                    .of(page >= 1 ? page - 1 : page, defaultPageSize, sort);\n+\n+            Page<Post> postPage = pageBy(postStatus, pageable);\n+            List<Post> pageablePostList = postPage.getContent();\n+            if (pageablePostList.size() == 0) {\n+                break;\n+            }\n+            postList.addAll(postPage.getContent());\n+            if (postList.stream().filter(it -> it.getId().equals(currentPost.getId())).count() == 1\n+                    && !postList.stream().reduce((first, second) -> second).get().getId()\n+                    .equals(currentPost.getId())) {\n+                // contains the post && the post is not in the end\n+                needNext = false;\n+            }\n+\n+            page++;\n+        }\n+\n+        List<Post> resultList = new ArrayList<>(2);\n+\n+        if (CollectionUtils.isEmpty(postList)) {\n+            return resultList;\n+        }\n+\n+        List<Integer> idList = postList.stream().map(Post::getId).collect(Collectors.toList());\n+        Integer index = idList.indexOf(currentPost.getId());\n+\n+        if (index == -1) {\n+            return resultList;\n+        }\n+\n+        //setup preContentArchiveController\n+        if (index > 0) {\n+            resultList.add(postList.get(index - 1));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzMjAzMw=="}, "originalCommit": {"oid": "3c93dee615fefd5364be898adb4fc4f340d00ed2"}, "originalPosition": 365}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODE2OTA4OnYy", "diffSide": "RIGHT", "path": "src/main/java/run/halo/app/service/impl/StaticPageServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQwMzozMTo1NlrOFcnuAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxMzozOTo1MlrOFcpeUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU1NTIwMQ==", "bodyText": "\u4e0d\u5efa\u8bae\u76f4\u63a5\u4f7f\u7528 get \u83b7\u53d6 List \u7684\u5143\u7d20\uff0c\u53ef\u80fd\u4f60 service \u65b9\u6cd5\u9700\u8981\u4fee\u6539\u4e00\u4e0b\uff0c\u5b9e\u5728\u4e0d\u884c\uff0c\u5efa\u8bae\u5199\u4e24\u4e2a\u3002\u4e00\u4e2a PrePost\uff0c\u4e00\u4e2a NextPost\u3002\u5e76\u4e14\u4f7f\u7528 Optional \u5305\u88c5\u3002", "url": "https://github.com/halo-dev/halo/pull/489#discussion_r365555201", "createdAt": "2020-01-12T03:31:56Z", "author": {"login": "ruibaby"}, "path": "src/main/java/run/halo/app/service/impl/StaticPageServiceImpl.java", "diffHunk": "@@ -329,8 +330,10 @@ private void generatePost() throws IOException, TemplateException {\n         for (Post post : posts) {\n             log.info(\"Generate archives/{}/index.html\", post.getUrl());\n             ModelMap model = new ModelMap();\n-            postService.getNextPost(post.getCreateTime()).ifPresent(nextPost -> model.addAttribute(\"nextPost\", nextPost));\n-            postService.getPrePost(post.getCreateTime()).ifPresent(prePost -> model.addAttribute(\"prePost\", prePost));\n+\n+            List<Post> adjacentPostList = postService.getAdjacentPostList(post);\n+            Optional.ofNullable(adjacentPostList.get(0)).ifPresent(prePost -> model.addAttribute(\"prePost\", prePost));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c93dee615fefd5364be898adb4fc4f340d00ed2"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4Mzk1NQ==", "bodyText": "\u4e0d\u5efa\u8bae\u76f4\u63a5\u4f7f\u7528 get \u83b7\u53d6 List \u7684\u5143\u7d20\uff0c\u53ef\u80fd\u4f60 service \u65b9\u6cd5\u9700\u8981\u4fee\u6539\u4e00\u4e0b\uff0c\u5b9e\u5728\u4e0d\u884c\uff0c\u5efa\u8bae\u5199\u4e24\u4e2a\u3002\u4e00\u4e2a PrePost\uff0c\u4e00\u4e2a NextPost\u3002\u5e76\u4e14\u4f7f\u7528 Optional \u5305\u88c5\u3002\n\n\u8fd9\u91cc\u4f1a\u589e\u52a0\u4e00\u4e2a\u5bf9\u8c61\uff0c\u91cc\u9762\u5305\u542bpre\u548cnext\uff0c\u8fdb\u884c\u5355\u72ec\u8fd4\u56de\u3002", "url": "https://github.com/halo-dev/halo/pull/489#discussion_r365583955", "createdAt": "2020-01-12T13:39:52Z", "author": {"login": "le0zh0u"}, "path": "src/main/java/run/halo/app/service/impl/StaticPageServiceImpl.java", "diffHunk": "@@ -329,8 +330,10 @@ private void generatePost() throws IOException, TemplateException {\n         for (Post post : posts) {\n             log.info(\"Generate archives/{}/index.html\", post.getUrl());\n             ModelMap model = new ModelMap();\n-            postService.getNextPost(post.getCreateTime()).ifPresent(nextPost -> model.addAttribute(\"nextPost\", nextPost));\n-            postService.getPrePost(post.getCreateTime()).ifPresent(prePost -> model.addAttribute(\"prePost\", prePost));\n+\n+            List<Post> adjacentPostList = postService.getAdjacentPostList(post);\n+            Optional.ofNullable(adjacentPostList.get(0)).ifPresent(prePost -> model.addAttribute(\"prePost\", prePost));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU1NTIwMQ=="}, "originalCommit": {"oid": "3c93dee615fefd5364be898adb4fc4f340d00ed2"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2052, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}