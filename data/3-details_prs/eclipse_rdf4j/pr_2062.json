{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3NTExOTUy", "number": 2062, "title": "GH-2028 TripleRef evaluation in StrictEvaluationStrategy", "bodyText": "GitHub issue resolved: #2028\nBriefly describe the changes proposed in this PR:\n\nIntroduced a new interface RDFStarTripleSource that  extends TripleSource interface with getRdfStarTriples(s, p, o).\nadded implementation of evaluate(TripleRef) that uses the new interface, if possible or checks the nodes from standard reification for solutions\nadded a synthetic test cases to evaluate a TripleRef node through both types of sources\n\n\nPR Author Checklist:\n\n my pull request is self-contained\n I've added tests for the changes I made\n every commit message starts with the issue number (GH-xxxx) followed by a meaningful description of the change\n every commit has been signed off\n\nNote: we merge all feature pull requests using squash and merge. See RDF4J git merge strategy for more details.", "createdAt": "2020-04-02T11:13:29Z", "url": "https://github.com/eclipse/rdf4j/pull/2062", "merged": true, "mergeCommit": {"oid": "605947384a8f04919cd1cb81bdd3cf2f50407543"}, "closed": true, "closedAt": "2020-04-13T22:53:31Z", "author": {"login": "damyan-ognyanov"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTqO03gH2gAyMzk3NTExOTUyOjhiNDI5ZjNjMTA5OWYyYjYwNzRlODI0ODMzYmViNjk0MTQzMmQzNjk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcXWXBiAFqTM5MjQ3NDA4MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8b429f3c1099f2b6074e824833beb6941432d369", "author": {"user": {"login": "damyan-ognyanov", "name": null}}, "url": "https://github.com/eclipse/rdf4j/commit/8b429f3c1099f2b6074e824833beb6941432d369", "committedDate": "2020-04-02T11:02:51Z", "message": "GH-2028 add support for evaluation of TripleRef nodes in StrictEvaluationStrategy\n\nSigned-off-by: damyan.ognyanov <damyan.ognyanov@ontotext.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3ODgxMzk0", "url": "https://github.com/eclipse/rdf4j/pull/2062#pullrequestreview-387881394", "createdAt": "2020-04-06T00:30:55Z", "commit": {"oid": "8b429f3c1099f2b6074e824833beb6941432d369"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxOTE1MTYw", "url": "https://github.com/eclipse/rdf4j/pull/2062#pullrequestreview-391915160", "createdAt": "2020-04-13T01:25:31Z", "commit": {"oid": "8b429f3c1099f2b6074e824833beb6941432d369"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwMToyNTozMVrOGEaV4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwMTozNToyM1rOGEabvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI3OTA3Mg==", "bodyText": "Why are these checks necessary? Isn't this check already supposed to be done by RDFStarTripleSource.getRdfStarTriples?", "url": "https://github.com/eclipse/rdf4j/pull/2062#discussion_r407279072", "createdAt": "2020-04-13T01:25:31Z", "author": {"login": "jeenbroekstra"}, "path": "core/queryalgebra/evaluation/src/main/java/org/eclipse/rdf4j/query/algebra/evaluation/impl/StrictEvaluationStrategy.java", "diffHunk": "@@ -1823,15 +1824,158 @@ public Value evaluate(ValueExprTripleRef node, BindingSet bindings)\n \n \t/**\n \t * evaluates a TripleRef node returning bindingsets from the matched Triple nodes in the dataset (or explore\n-\t * standart reification)\n+\t * standard reification)\n \t * \n \t * @param ref      to evaluate\n \t * @param bindings with the solutions\n \t * @return iteration over the solutions\n \t */\n \tpublic CloseableIteration<BindingSet, QueryEvaluationException> evaluate(TripleRef ref, BindingSet bindings) {\n-\t\t// not supported\n-\t\treturn new EmptyIteration<BindingSet, QueryEvaluationException>();\n+\t\t// Naive implementation that walks over all statements matching (x rdf:type rdf:Statement)\n+\t\t// and filter those that do not match the bindings for subject, predicate and object vars (if bound)\n+\t\tfinal org.eclipse.rdf4j.query.algebra.Var subjVar = ref.getSubjectVar();\n+\t\tfinal org.eclipse.rdf4j.query.algebra.Var predVar = ref.getPredicateVar();\n+\t\tfinal org.eclipse.rdf4j.query.algebra.Var objVar = ref.getObjectVar();\n+\t\tfinal org.eclipse.rdf4j.query.algebra.Var extVar = ref.getExprVar();\n+\n+\t\tfinal Value subjValue = getVarValue(subjVar, bindings);\n+\t\tfinal Value predValue = getVarValue(predVar, bindings);\n+\t\tfinal Value objValue = getVarValue(objVar, bindings);\n+\t\tfinal Value extValue = getVarValue(extVar, bindings);\n+\n+\t\t// case1: when we have a binding for extVar we use it in the reified nodes lookup\n+\t\t// case2: in which we have unbound extVar\n+\t\t// in both cases:\n+\t\t// 1. iterate over all statements matching ((* | extValue), rdf:type, rdf:Statement)\n+\t\t// 2. construct a look ahead iteration and filter these solutions that do not match the\n+\t\t// bindings for the subject, predicate and object vars (if these are bound)\n+\t\t// return set of solution where the values of the statements (extVar, rdf:subject/predicate/object, value)\n+\t\t// are bound to the variables of the respective TripleRef variables for subject, predicate, object\n+\t\t// NOTE: if the tripleSource is extended to allow for lookup over asserted Triple values in the underlying sail\n+\t\t// the evaluation of the TripleRef should be suitably forwarded down the sail and filter/construct\n+\t\t// the correct solution out of the results of that call\n+\t\tif (extValue != null && !(extValue instanceof Resource)) {\n+\t\t\treturn new EmptyIteration<>();\n+\t\t}\n+\n+\t\t// whether the TripleSouce support access to RDF star\n+\t\tfinal boolean bSourceSupportsRdfStar = tripleSource instanceof RDFStarTripleSource;\n+\n+\t\t// in case the\n+\t\tif (bSourceSupportsRdfStar) {\n+\t\t\tfinal CloseableIteration<? extends Resource, QueryEvaluationException> iter = ((RDFStarTripleSource) tripleSource)\n+\t\t\t\t\t.getRdfStarTriples((Resource) subjValue, (IRI) predValue, objValue);\n+\t\t\treturn new LookAheadIteration<BindingSet, QueryEvaluationException>() {\n+\t\t\t\t@Override\n+\t\t\t\tprotected BindingSet getNextElement()\n+\t\t\t\t\t\tthrows QueryEvaluationException {\n+\t\t\t\t\twhile (iter.hasNext()) {\n+\t\t\t\t\t\tTriple match = (Triple) iter.next();\n+\t\t\t\t\t\tif (subjValue != null && !subjValue.equals(match.getSubject())) {\n+\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tif (predValue != null && !predValue.equals(match.getPredicate())) {\n+\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tif (objValue != null && !objValue.equals(match.getObject())) {\n+\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b429f3c1099f2b6074e824833beb6941432d369"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI4MDIzMQ==", "bodyText": "This is minor, but since this is a behavioral interface it doesn't have to extend TripleSource - just thinking ahead of a possible future design where TripleSource and RDFStarTripleSource methods are not provided by the same object.", "url": "https://github.com/eclipse/rdf4j/pull/2062#discussion_r407280231", "createdAt": "2020-04-13T01:33:14Z", "author": {"login": "jeenbroekstra"}, "path": "core/queryalgebra/evaluation/src/main/java/org/eclipse/rdf4j/query/algebra/evaluation/RDFStarTripleSource.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+package org.eclipse.rdf4j.query.algebra.evaluation;\n+\n+import org.eclipse.rdf4j.common.iteration.CloseableIteration;\n+import org.eclipse.rdf4j.model.IRI;\n+import org.eclipse.rdf4j.model.Resource;\n+import org.eclipse.rdf4j.model.Triple;\n+import org.eclipse.rdf4j.model.Value;\n+import org.eclipse.rdf4j.query.QueryEvaluationException;\n+\n+public interface RDFStarTripleSource extends TripleSource {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b429f3c1099f2b6074e824833beb6941432d369"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI4MDU3NA==", "bodyText": "I'm not sure I follow where this extVar comes from. Is this intended to encapsulate use of RDF* triples in things like BIND clauses? Why not use a BindingSetAssignment for that case?", "url": "https://github.com/eclipse/rdf4j/pull/2062#discussion_r407280574", "createdAt": "2020-04-13T01:35:23Z", "author": {"login": "jeenbroekstra"}, "path": "core/queryalgebra/evaluation/src/main/java/org/eclipse/rdf4j/query/algebra/evaluation/impl/StrictEvaluationStrategy.java", "diffHunk": "@@ -1823,15 +1824,158 @@ public Value evaluate(ValueExprTripleRef node, BindingSet bindings)\n \n \t/**\n \t * evaluates a TripleRef node returning bindingsets from the matched Triple nodes in the dataset (or explore\n-\t * standart reification)\n+\t * standard reification)\n \t * \n \t * @param ref      to evaluate\n \t * @param bindings with the solutions\n \t * @return iteration over the solutions\n \t */\n \tpublic CloseableIteration<BindingSet, QueryEvaluationException> evaluate(TripleRef ref, BindingSet bindings) {\n-\t\t// not supported\n-\t\treturn new EmptyIteration<BindingSet, QueryEvaluationException>();\n+\t\t// Naive implementation that walks over all statements matching (x rdf:type rdf:Statement)\n+\t\t// and filter those that do not match the bindings for subject, predicate and object vars (if bound)\n+\t\tfinal org.eclipse.rdf4j.query.algebra.Var subjVar = ref.getSubjectVar();\n+\t\tfinal org.eclipse.rdf4j.query.algebra.Var predVar = ref.getPredicateVar();\n+\t\tfinal org.eclipse.rdf4j.query.algebra.Var objVar = ref.getObjectVar();\n+\t\tfinal org.eclipse.rdf4j.query.algebra.Var extVar = ref.getExprVar();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b429f3c1099f2b6074e824833beb6941432d369"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNDc0MDgw", "url": "https://github.com/eclipse/rdf4j/pull/2062#pullrequestreview-392474080", "createdAt": "2020-04-13T22:09:24Z", "commit": {"oid": "8b429f3c1099f2b6074e824833beb6941432d369"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 24, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}