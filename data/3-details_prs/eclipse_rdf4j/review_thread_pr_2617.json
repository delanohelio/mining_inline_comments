{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4Njc5MDI3", "number": 2617, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNjoxMjozOFrOExEGJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwOToyODowMFrOExf1Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5ODgyNzg5OnYy", "diffSide": "RIGHT", "path": "core/rio/turtle/src/main/java/org/eclipse/rdf4j/rio/turtle/TurtleWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNjoxMjozOFrOHm_zvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNjoxMjozOFrOHm_zvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY1MzM3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * @param out     The OutputStream to write the Turtle document to. The writer will use\n          \n          \n            \n            \t * @param out     The OutputStream to write the Turtle document to.", "url": "https://github.com/eclipse/rdf4j/pull/2617#discussion_r510653375", "createdAt": "2020-10-23T06:12:38Z", "author": {"login": "erikgb"}, "path": "core/rio/turtle/src/main/java/org/eclipse/rdf4j/rio/turtle/TurtleWriter.java", "diffHunk": "@@ -114,11 +107,10 @@ public TurtleWriter(OutputStream out) {\n \t/**\n \t * Creates a new TurtleWriter that will write to the supplied OutputStream.\n \t *\n-\t * @param out     The OutputStream to write the Turtle document to.\n+\t * @param out     The OutputStream to write the Turtle document to. The writer will use", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b12ca74ce6c43b77cd2624bae39a309837763fba"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5ODg0NTcxOnYy", "diffSide": "RIGHT", "path": "core/rio/trix/src/main/java/org/eclipse/rdf4j/rio/trix/TriXWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNjoxNTo0M1rOHm__5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNjoxNTo0M1rOHm__5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY1NjQ4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/eclipse/rdf4j/pull/2617#discussion_r510656486", "createdAt": "2020-10-23T06:15:43Z", "author": {"login": "erikgb"}, "path": "core/rio/trix/src/main/java/org/eclipse/rdf4j/rio/trix/TriXWriter.java", "diffHunk": "@@ -210,4 +211,5 @@ private static final boolean contextsEquals(Resource context1, Resource context2\n \t\t\treturn context1.equals(context2);\n \t\t}\n \t}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b12ca74ce6c43b77cd2624bae39a309837763fba"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5ODg2NTI0OnYy", "diffSide": "RIGHT", "path": "core/rio/trix/src/main/java/org/eclipse/rdf4j/rio/trix/TriXWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNjoyMjowMFrOHnAL5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMDoxNDo0MVrOHnHqbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY1OTU1OQ==", "bodyText": "Maybe remove this - since the corresponding Methods-marker is deleted.", "url": "https://github.com/eclipse/rdf4j/pull/2617#discussion_r510659559", "createdAt": "2020-10-23T06:22:00Z", "author": {"login": "erikgb"}, "path": "core/rio/trix/src/main/java/org/eclipse/rdf4j/rio/trix/TriXWriter.java", "diffHunk": "@@ -42,13 +43,13 @@\n  *\n  * @author Arjohn Kampman\n  */\n-public class TriXWriter extends AbstractRDFWriter implements RDFWriter {\n+public class TriXWriter extends AbstractRDFWriter implements RDFWriter, CharSink {\n \n \t/*-----------*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b12ca74ce6c43b77cd2624bae39a309837763fba"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc4MjA2MQ==", "bodyText": "I'm sort of removing these as I see them but missed this one. Will fix.", "url": "https://github.com/eclipse/rdf4j/pull/2617#discussion_r510782061", "createdAt": "2020-10-23T10:14:41Z", "author": {"login": "jeenbroekstra"}, "path": "core/rio/trix/src/main/java/org/eclipse/rdf4j/rio/trix/TriXWriter.java", "diffHunk": "@@ -42,13 +43,13 @@\n  *\n  * @author Arjohn Kampman\n  */\n-public class TriXWriter extends AbstractRDFWriter implements RDFWriter {\n+public class TriXWriter extends AbstractRDFWriter implements RDFWriter, CharSink {\n \n \t/*-----------*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY1OTU1OQ=="}, "originalCommit": {"oid": "b12ca74ce6c43b77cd2624bae39a309837763fba"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5OTAzODI4OnYy", "diffSide": "RIGHT", "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/SPARQLProtocolSession.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNzoyMzowNlrOHnBwDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwOTozMjo1OVrOHnrJyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY4NTE5Ng==", "bodyText": "I think the following block is quite long and a bit hard to read. Would it be possible to split it up with some private methods? Or replacing the instanceof conditionals with use of the Strategy/Visitor Pattern? I tend to prefer it to get better compile-time checks.", "url": "https://github.com/eclipse/rdf4j/pull/2617#discussion_r510685196", "createdAt": "2020-10-23T07:23:06Z", "author": {"login": "erikgb"}, "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/SPARQLProtocolSession.java", "diffHunk": "@@ -685,15 +688,24 @@ protected void getTupleQueryResult(HttpUriRequest method, TupleQueryResultHandle\n \t\t\t\t\t\t.orElseThrow(() -> new RepositoryException(\n \t\t\t\t\t\t\t\t\"Server responded with an unsupported file format: \" + mimeType));\n \n-\t\t\t\t// Check if we can pass through to the output stream directly\n+\t\t\t\t// Check if we can pass through to the writer directly\n \t\t\t\tif (handler instanceof TupleQueryResultWriter) {\n \t\t\t\t\tTupleQueryResultWriter tqrWriter = (TupleQueryResultWriter) handler;\n \t\t\t\t\tif (tqrWriter.getTupleQueryResultFormat().equals(format)) {\n-\t\t\t\t\t\tOutputStream out = tqrWriter.getOutputStream().orElse(null);\n-\t\t\t\t\t\tif (out != null) {\n-\t\t\t\t\t\t\tInputStream in = response.getEntity().getContent();\n-\t\t\t\t\t\t\tIOUtils.copy(in, out);\n-\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\tif (tqrWriter instanceof CharSink) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b12ca74ce6c43b77cd2624bae39a309837763fba"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc4MTYyMA==", "bodyText": "Yeah good point, not sure about a visitor but I'll DRY it up a bit at least.", "url": "https://github.com/eclipse/rdf4j/pull/2617#discussion_r510781620", "createdAt": "2020-10-23T10:13:46Z", "author": {"login": "jeenbroekstra"}, "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/SPARQLProtocolSession.java", "diffHunk": "@@ -685,15 +688,24 @@ protected void getTupleQueryResult(HttpUriRequest method, TupleQueryResultHandle\n \t\t\t\t\t\t.orElseThrow(() -> new RepositoryException(\n \t\t\t\t\t\t\t\t\"Server responded with an unsupported file format: \" + mimeType));\n \n-\t\t\t\t// Check if we can pass through to the output stream directly\n+\t\t\t\t// Check if we can pass through to the writer directly\n \t\t\t\tif (handler instanceof TupleQueryResultWriter) {\n \t\t\t\t\tTupleQueryResultWriter tqrWriter = (TupleQueryResultWriter) handler;\n \t\t\t\t\tif (tqrWriter.getTupleQueryResultFormat().equals(format)) {\n-\t\t\t\t\t\tOutputStream out = tqrWriter.getOutputStream().orElse(null);\n-\t\t\t\t\t\tif (out != null) {\n-\t\t\t\t\t\t\tInputStream in = response.getEntity().getContent();\n-\t\t\t\t\t\t\tIOUtils.copy(in, out);\n-\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\tif (tqrWriter instanceof CharSink) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY4NTE5Ng=="}, "originalCommit": {"oid": "b12ca74ce6c43b77cd2624bae39a309837763fba"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM2MzUzMA==", "bodyText": "Much better, even if I try to avoid instanceof - if possible.", "url": "https://github.com/eclipse/rdf4j/pull/2617#discussion_r511363530", "createdAt": "2020-10-24T09:32:59Z", "author": {"login": "erikgb"}, "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/SPARQLProtocolSession.java", "diffHunk": "@@ -685,15 +688,24 @@ protected void getTupleQueryResult(HttpUriRequest method, TupleQueryResultHandle\n \t\t\t\t\t\t.orElseThrow(() -> new RepositoryException(\n \t\t\t\t\t\t\t\t\"Server responded with an unsupported file format: \" + mimeType));\n \n-\t\t\t\t// Check if we can pass through to the output stream directly\n+\t\t\t\t// Check if we can pass through to the writer directly\n \t\t\t\tif (handler instanceof TupleQueryResultWriter) {\n \t\t\t\t\tTupleQueryResultWriter tqrWriter = (TupleQueryResultWriter) handler;\n \t\t\t\t\tif (tqrWriter.getTupleQueryResultFormat().equals(format)) {\n-\t\t\t\t\t\tOutputStream out = tqrWriter.getOutputStream().orElse(null);\n-\t\t\t\t\t\tif (out != null) {\n-\t\t\t\t\t\t\tInputStream in = response.getEntity().getContent();\n-\t\t\t\t\t\t\tIOUtils.copy(in, out);\n-\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\tif (tqrWriter instanceof CharSink) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY4NTE5Ng=="}, "originalCommit": {"oid": "b12ca74ce6c43b77cd2624bae39a309837763fba"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5OTAzOTU5OnYy", "diffSide": "RIGHT", "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/SPARQLProtocolSession.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNzoyMzozNFrOHnBw3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwOTozMzozNlrOHnrKYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY4NTQwNw==", "bodyText": "I think the following block is quite long and a bit hard to read. Would it be possible to split it up with some private methods? Or replacing the instanceof conditionals with use of the Strategy/Visitor Pattern? I tend to prefer it to get better compile-time checks.", "url": "https://github.com/eclipse/rdf4j/pull/2617#discussion_r510685407", "createdAt": "2020-10-23T07:23:34Z", "author": {"login": "erikgb"}, "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/SPARQLProtocolSession.java", "diffHunk": "@@ -853,15 +865,24 @@ protected void getRDF(HttpUriRequest method, RDFHandler handler, boolean require\n \t\t\t\tRDFFormat format = RDFFormat.matchMIMEType(mimeType, rdfFormats)\n \t\t\t\t\t\t.orElseThrow(() -> new RepositoryException(\n \t\t\t\t\t\t\t\t\"Server responded with an unsupported file format: \" + mimeType));\n-\t\t\t\t// Check if we can pass through to the output stream directly\n+\t\t\t\t// Check if we can pass through to the writer directly\n \t\t\t\tif (handler instanceof RDFWriter) {\n \t\t\t\t\tRDFWriter rdfWriter = (RDFWriter) handler;\n \t\t\t\t\tif (rdfWriter.getRDFFormat().equals(format)) {\n-\t\t\t\t\t\tOutputStream out = rdfWriter.getOutputStream().orElse(null);\n-\t\t\t\t\t\tif (out != null) {\n-\t\t\t\t\t\t\tInputStream in = response.getEntity().getContent();\n-\t\t\t\t\t\t\tIOUtils.copy(in, out);\n-\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\tif (rdfWriter instanceof CharSink) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b12ca74ce6c43b77cd2624bae39a309837763fba"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTIwMzI3Mw==", "bodyText": "I didn't quite use a strategy pattern in the end but I've managed to simplify things a little, have another look.", "url": "https://github.com/eclipse/rdf4j/pull/2617#discussion_r511203273", "createdAt": "2020-10-24T00:07:17Z", "author": {"login": "jeenbroekstra"}, "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/SPARQLProtocolSession.java", "diffHunk": "@@ -853,15 +865,24 @@ protected void getRDF(HttpUriRequest method, RDFHandler handler, boolean require\n \t\t\t\tRDFFormat format = RDFFormat.matchMIMEType(mimeType, rdfFormats)\n \t\t\t\t\t\t.orElseThrow(() -> new RepositoryException(\n \t\t\t\t\t\t\t\t\"Server responded with an unsupported file format: \" + mimeType));\n-\t\t\t\t// Check if we can pass through to the output stream directly\n+\t\t\t\t// Check if we can pass through to the writer directly\n \t\t\t\tif (handler instanceof RDFWriter) {\n \t\t\t\t\tRDFWriter rdfWriter = (RDFWriter) handler;\n \t\t\t\t\tif (rdfWriter.getRDFFormat().equals(format)) {\n-\t\t\t\t\t\tOutputStream out = rdfWriter.getOutputStream().orElse(null);\n-\t\t\t\t\t\tif (out != null) {\n-\t\t\t\t\t\t\tInputStream in = response.getEntity().getContent();\n-\t\t\t\t\t\t\tIOUtils.copy(in, out);\n-\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\tif (rdfWriter instanceof CharSink) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY4NTQwNw=="}, "originalCommit": {"oid": "b12ca74ce6c43b77cd2624bae39a309837763fba"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM2MzY4Mw==", "bodyText": "Great job! Much better now!", "url": "https://github.com/eclipse/rdf4j/pull/2617#discussion_r511363683", "createdAt": "2020-10-24T09:33:36Z", "author": {"login": "erikgb"}, "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/SPARQLProtocolSession.java", "diffHunk": "@@ -853,15 +865,24 @@ protected void getRDF(HttpUriRequest method, RDFHandler handler, boolean require\n \t\t\t\tRDFFormat format = RDFFormat.matchMIMEType(mimeType, rdfFormats)\n \t\t\t\t\t\t.orElseThrow(() -> new RepositoryException(\n \t\t\t\t\t\t\t\t\"Server responded with an unsupported file format: \" + mimeType));\n-\t\t\t\t// Check if we can pass through to the output stream directly\n+\t\t\t\t// Check if we can pass through to the writer directly\n \t\t\t\tif (handler instanceof RDFWriter) {\n \t\t\t\t\tRDFWriter rdfWriter = (RDFWriter) handler;\n \t\t\t\t\tif (rdfWriter.getRDFFormat().equals(format)) {\n-\t\t\t\t\t\tOutputStream out = rdfWriter.getOutputStream().orElse(null);\n-\t\t\t\t\t\tif (out != null) {\n-\t\t\t\t\t\t\tInputStream in = response.getEntity().getContent();\n-\t\t\t\t\t\t\tIOUtils.copy(in, out);\n-\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\tif (rdfWriter instanceof CharSink) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY4NTQwNw=="}, "originalCommit": {"oid": "b12ca74ce6c43b77cd2624bae39a309837763fba"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMjQyNTk0OnYy", "diffSide": "RIGHT", "path": "core/util/src/main/java/org/eclipse/rdf4j/common/io/Sink.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwMDoxNjowMVrOHnhiPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQyMzozMToxM1rOHn1CQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTIwNTk1MA==", "bodyText": "Fwiw I'm open to other/better naming suggestions. \"Sink\" is very generic.", "url": "https://github.com/eclipse/rdf4j/pull/2617#discussion_r511205950", "createdAt": "2020-10-24T00:16:01Z", "author": {"login": "jeenbroekstra"}, "path": "core/util/src/main/java/org/eclipse/rdf4j/common/io/Sink.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/******************************************************************************* \n+ * Copyright (c) 2020 Eclipse RDF4J contributors. \n+ * All rights reserved. This program and the accompanying materials \n+ * are made available under the terms of the Eclipse Distribution License v1.0 \n+ * which accompanies this distribution, and is available at \n+ * http://www.eclipse.org/org/documents/edl-v10.php. \n+ *******************************************************************************/\n+package org.eclipse.rdf4j.common.io;\n+\n+import org.eclipse.rdf4j.common.lang.FileFormat;\n+\n+/**\n+ * \n+ * A Sink writes data in a particular {@link FileFormat}.\n+ * \n+ * @author Jeen Broekstra\n+ * @since 3.5.0\n+ */\n+public interface Sink {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9fe9cecf370cbc8b2e22561ad9a4abbd2076d16"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMzNjMwNg==", "bodyText": "Naming is always the hardest part! I think we need to decide if we want to include some term(s) from where we are \"coming\" or to where we are \"going\". Some ideas: RdfDataSink, RdfOutputStreamProvider, RdfWriterSink. Put I also think we can keep the generic Sink name. This will almost be a marker interface, and only minor parts of code will have to relate to it.", "url": "https://github.com/eclipse/rdf4j/pull/2617#discussion_r511336306", "createdAt": "2020-10-24T08:19:09Z", "author": {"login": "erikgb"}, "path": "core/util/src/main/java/org/eclipse/rdf4j/common/io/Sink.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/******************************************************************************* \n+ * Copyright (c) 2020 Eclipse RDF4J contributors. \n+ * All rights reserved. This program and the accompanying materials \n+ * are made available under the terms of the Eclipse Distribution License v1.0 \n+ * which accompanies this distribution, and is available at \n+ * http://www.eclipse.org/org/documents/edl-v10.php. \n+ *******************************************************************************/\n+package org.eclipse.rdf4j.common.io;\n+\n+import org.eclipse.rdf4j.common.lang.FileFormat;\n+\n+/**\n+ * \n+ * A Sink writes data in a particular {@link FileFormat}.\n+ * \n+ * @author Jeen Broekstra\n+ * @since 3.5.0\n+ */\n+public interface Sink {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTIwNTk1MA=="}, "originalCommit": {"oid": "a9fe9cecf370cbc8b2e22561ad9a4abbd2076d16"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUyNTQ0Mg==", "bodyText": "Thanks, all decent suggestions, but the core problem is that it should cover both RDF data and SPARQL Tuple Query results, so I'm a little uncomfortable prefixing it with \"Rdf\". I'll go the path of least resistance and stick with Sink for now I think.", "url": "https://github.com/eclipse/rdf4j/pull/2617#discussion_r511525442", "createdAt": "2020-10-24T23:31:13Z", "author": {"login": "jeenbroekstra"}, "path": "core/util/src/main/java/org/eclipse/rdf4j/common/io/Sink.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/******************************************************************************* \n+ * Copyright (c) 2020 Eclipse RDF4J contributors. \n+ * All rights reserved. This program and the accompanying materials \n+ * are made available under the terms of the Eclipse Distribution License v1.0 \n+ * which accompanies this distribution, and is available at \n+ * http://www.eclipse.org/org/documents/edl-v10.php. \n+ *******************************************************************************/\n+package org.eclipse.rdf4j.common.io;\n+\n+import org.eclipse.rdf4j.common.lang.FileFormat;\n+\n+/**\n+ * \n+ * A Sink writes data in a particular {@link FileFormat}.\n+ * \n+ * @author Jeen Broekstra\n+ * @since 3.5.0\n+ */\n+public interface Sink {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTIwNTk1MA=="}, "originalCommit": {"oid": "a9fe9cecf370cbc8b2e22561ad9a4abbd2076d16"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMzI0NjA5OnYy", "diffSide": "RIGHT", "path": "core/queryresultio/sparqljson/src/main/java/org/eclipse/rdf4j/query/resultio/sparqljson/AbstractSPARQLJSONWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwODo0MDoxM1rOHnpxwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQyMzozMTo1OFrOHn1Ccg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM0MDk5Mw==", "bodyText": "I think this statement mandates to make the getWriter method final.", "url": "https://github.com/eclipse/rdf4j/pull/2617#discussion_r511340993", "createdAt": "2020-10-24T08:40:13Z", "author": {"login": "erikgb"}, "path": "core/queryresultio/sparqljson/src/main/java/org/eclipse/rdf4j/query/resultio/sparqljson/AbstractSPARQLJSONWriter.java", "diffHunk": "@@ -77,15 +75,26 @@\n \n \tprotected final JsonGenerator jg;\n \n+\tprivate final Writer writer;\n+\n \tprotected AbstractSPARQLJSONWriter(OutputStream out) {\n-\t\tsuper(out);\n+\t\tthis(new OutputStreamWriter(out, StandardCharsets.UTF_8));\n+\t}\n+\n+\tprotected AbstractSPARQLJSONWriter(Writer writer) {\n+\t\tthis.writer = writer;\n \t\ttry {\n-\t\t\tjg = JSON_FACTORY.createGenerator(new OutputStreamWriter(out, StandardCharsets.UTF_8));\n+\t\t\tjg = JSON_FACTORY.createGenerator(writer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9fe9cecf370cbc8b2e22561ad9a4abbd2076d16"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUyNTQ5MA==", "bodyText": "Good catch - will fix.", "url": "https://github.com/eclipse/rdf4j/pull/2617#discussion_r511525490", "createdAt": "2020-10-24T23:31:58Z", "author": {"login": "jeenbroekstra"}, "path": "core/queryresultio/sparqljson/src/main/java/org/eclipse/rdf4j/query/resultio/sparqljson/AbstractSPARQLJSONWriter.java", "diffHunk": "@@ -77,15 +75,26 @@\n \n \tprotected final JsonGenerator jg;\n \n+\tprivate final Writer writer;\n+\n \tprotected AbstractSPARQLJSONWriter(OutputStream out) {\n-\t\tsuper(out);\n+\t\tthis(new OutputStreamWriter(out, StandardCharsets.UTF_8));\n+\t}\n+\n+\tprotected AbstractSPARQLJSONWriter(Writer writer) {\n+\t\tthis.writer = writer;\n \t\ttry {\n-\t\t\tjg = JSON_FACTORY.createGenerator(new OutputStreamWriter(out, StandardCharsets.UTF_8));\n+\t\t\tjg = JSON_FACTORY.createGenerator(writer);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM0MDk5Mw=="}, "originalCommit": {"oid": "a9fe9cecf370cbc8b2e22561ad9a4abbd2076d16"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMzM0NDUyOnYy", "diffSide": "RIGHT", "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/SPARQLProtocolSession.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwOToxNjo1NFrOHnqwtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQwMDoxMDozN1rOHn1M4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM1NzEwOA==", "bodyText": "There are utilities in Http Client for obtaining the Charset! Something in the line of\nHttpEntity entity = response.getEntity();\nContentType contentType = ContentType.get(entity);\nif (contentType == null) {\n   return Optional.empty();\n}\nreturn Optional.ofNullable(contentType.getCharset());\nOr is there a reason for not using it?", "url": "https://github.com/eclipse/rdf4j/pull/2617#discussion_r511357108", "createdAt": "2020-10-24T09:16:54Z", "author": {"login": "erikgb"}, "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/SPARQLProtocolSession.java", "diffHunk": "@@ -1139,6 +1150,35 @@ protected String getResponseMIMEType(HttpResponse method) throws IOException {\n \t\treturn null;\n \t}\n \n+\t/**\n+\t * Gets the character encoding specified in the HTTP headers of the supplied response, if any. For example, if the\n+\t * response headers contain <tt>Content-Type: application/xml;charset=UTF-8</tt>, this method will return\n+\t * {@link StandardCharsets#UTF_8 UTF-8} as the character encoding.\n+\t * \n+\t * @param response the response to get the character encoding from.\n+\t * @return the response character encoding, {@link Optional#empty()} if it can not be determined.\n+\t */\n+\tOptional<Charset> getResponseCharset(HttpResponse response) {\n+\t\tHeader[] headers = response.getHeaders(\"Content-Type\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9fe9cecf370cbc8b2e22561ad9a4abbd2076d16"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUyNTY5MQ==", "bodyText": "I'm aware of the utilities, but I figured I'd do the minimal change only, so I just copied / adapted this from existing internal methods dealing with the content type. A lot of that code is from the httpclient 3.x days when it didn't have these kinds of utilities (or perhaps we weren't aware of it at the time).\nYou're right that it could probably be cleaned up a bit though, I'll take another look at it.", "url": "https://github.com/eclipse/rdf4j/pull/2617#discussion_r511525691", "createdAt": "2020-10-24T23:34:50Z", "author": {"login": "jeenbroekstra"}, "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/SPARQLProtocolSession.java", "diffHunk": "@@ -1139,6 +1150,35 @@ protected String getResponseMIMEType(HttpResponse method) throws IOException {\n \t\treturn null;\n \t}\n \n+\t/**\n+\t * Gets the character encoding specified in the HTTP headers of the supplied response, if any. For example, if the\n+\t * response headers contain <tt>Content-Type: application/xml;charset=UTF-8</tt>, this method will return\n+\t * {@link StandardCharsets#UTF_8 UTF-8} as the character encoding.\n+\t * \n+\t * @param response the response to get the character encoding from.\n+\t * @return the response character encoding, {@link Optional#empty()} if it can not be determined.\n+\t */\n+\tOptional<Charset> getResponseCharset(HttpResponse response) {\n+\t\tHeader[] headers = response.getHeaders(\"Content-Type\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM1NzEwOA=="}, "originalCommit": {"oid": "a9fe9cecf370cbc8b2e22561ad9a4abbd2076d16"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUyODE2MQ==", "bodyText": "I've had a quick look but I'm not confident about changing how content-type header processing is handled in general without introducing regressions. It needs some better test coverage to get certainty on that and I just don't want to spend the effort right now (it's also somewhat out of scope for this ticket).  So I'll stick with the current approach for now. I have logged a separate ticket to deal with some general cleanup of this part of the code: #2619.", "url": "https://github.com/eclipse/rdf4j/pull/2617#discussion_r511528161", "createdAt": "2020-10-25T00:10:37Z", "author": {"login": "jeenbroekstra"}, "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/SPARQLProtocolSession.java", "diffHunk": "@@ -1139,6 +1150,35 @@ protected String getResponseMIMEType(HttpResponse method) throws IOException {\n \t\treturn null;\n \t}\n \n+\t/**\n+\t * Gets the character encoding specified in the HTTP headers of the supplied response, if any. For example, if the\n+\t * response headers contain <tt>Content-Type: application/xml;charset=UTF-8</tt>, this method will return\n+\t * {@link StandardCharsets#UTF_8 UTF-8} as the character encoding.\n+\t * \n+\t * @param response the response to get the character encoding from.\n+\t * @return the response character encoding, {@link Optional#empty()} if it can not be determined.\n+\t */\n+\tOptional<Charset> getResponseCharset(HttpResponse response) {\n+\t\tHeader[] headers = response.getHeaders(\"Content-Type\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM1NzEwOA=="}, "originalCommit": {"oid": "a9fe9cecf370cbc8b2e22561ad9a4abbd2076d16"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMzM3MjQyOnYy", "diffSide": "RIGHT", "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/SPARQLProtocolSession.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwOToyODowMFrOHnrCqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQwODozMjo1OVrOHn3diQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM2MTcwNQ==", "bodyText": "Maybe introduce a variable for the used Charset?", "url": "https://github.com/eclipse/rdf4j/pull/2617#discussion_r511361705", "createdAt": "2020-10-24T09:28:00Z", "author": {"login": "erikgb"}, "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/SPARQLProtocolSession.java", "diffHunk": "@@ -880,6 +866,31 @@ protected void getRDF(HttpUriRequest method, RDFHandler handler, boolean require\n \t\t}\n \t}\n \n+\t/**\n+\t * Pass through response content directly to the supplied sink if possible.\n+\t * \n+\t * @param response       the {@link HttpResponse} with the content.\n+\t * @param responseFormat the format of the response.\n+\t * @param sink           the {@link Sink} to pass the content through to.\n+\t * @return {@code true} if the content was passed through, {@code false} otherwise.\n+\t * @throws IOException\n+\t */\n+\tprivate boolean passThrough(HttpResponse response, FileFormat responseFormat, Sink sink)\n+\t\t\tthrows IOException {\n+\t\tif (responseFormat.equals(sink.getFileFormat())) {\n+\t\t\tInputStream in = response.getEntity().getContent();\n+\t\t\tif (sink instanceof CharSink) {\n+\t\t\t\tIOUtils.copy(in, ((CharSink) sink).getWriter(),\n+\t\t\t\t\t\tgetResponseCharset(response).orElse(responseFormat.getCharset()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9fe9cecf370cbc8b2e22561ad9a4abbd2076d16"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUyNTg4MQ==", "bodyText": "My personal rule of thumb is not to introduce a variable unless you refer to it at least twice and/or the code becomes unreadable without it. YMMV but I think this is still in the \"easy enough to read\" category :)", "url": "https://github.com/eclipse/rdf4j/pull/2617#discussion_r511525881", "createdAt": "2020-10-24T23:37:05Z", "author": {"login": "jeenbroekstra"}, "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/SPARQLProtocolSession.java", "diffHunk": "@@ -880,6 +866,31 @@ protected void getRDF(HttpUriRequest method, RDFHandler handler, boolean require\n \t\t}\n \t}\n \n+\t/**\n+\t * Pass through response content directly to the supplied sink if possible.\n+\t * \n+\t * @param response       the {@link HttpResponse} with the content.\n+\t * @param responseFormat the format of the response.\n+\t * @param sink           the {@link Sink} to pass the content through to.\n+\t * @return {@code true} if the content was passed through, {@code false} otherwise.\n+\t * @throws IOException\n+\t */\n+\tprivate boolean passThrough(HttpResponse response, FileFormat responseFormat, Sink sink)\n+\t\t\tthrows IOException {\n+\t\tif (responseFormat.equals(sink.getFileFormat())) {\n+\t\t\tInputStream in = response.getEntity().getContent();\n+\t\t\tif (sink instanceof CharSink) {\n+\t\t\t\tIOUtils.copy(in, ((CharSink) sink).getWriter(),\n+\t\t\t\t\t\tgetResponseCharset(response).orElse(responseFormat.getCharset()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM2MTcwNQ=="}, "originalCommit": {"oid": "a9fe9cecf370cbc8b2e22561ad9a4abbd2076d16"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU2NTE5Mw==", "bodyText": "A programmer will always have a personal preference. \ud83d\ude09 I am fine with that, and agree that this case is in the category \"easy enough to read\".", "url": "https://github.com/eclipse/rdf4j/pull/2617#discussion_r511565193", "createdAt": "2020-10-25T08:32:59Z", "author": {"login": "erikgb"}, "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/SPARQLProtocolSession.java", "diffHunk": "@@ -880,6 +866,31 @@ protected void getRDF(HttpUriRequest method, RDFHandler handler, boolean require\n \t\t}\n \t}\n \n+\t/**\n+\t * Pass through response content directly to the supplied sink if possible.\n+\t * \n+\t * @param response       the {@link HttpResponse} with the content.\n+\t * @param responseFormat the format of the response.\n+\t * @param sink           the {@link Sink} to pass the content through to.\n+\t * @return {@code true} if the content was passed through, {@code false} otherwise.\n+\t * @throws IOException\n+\t */\n+\tprivate boolean passThrough(HttpResponse response, FileFormat responseFormat, Sink sink)\n+\t\t\tthrows IOException {\n+\t\tif (responseFormat.equals(sink.getFileFormat())) {\n+\t\t\tInputStream in = response.getEntity().getContent();\n+\t\t\tif (sink instanceof CharSink) {\n+\t\t\t\tIOUtils.copy(in, ((CharSink) sink).getWriter(),\n+\t\t\t\t\t\tgetResponseCharset(response).orElse(responseFormat.getCharset()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM2MTcwNQ=="}, "originalCommit": {"oid": "a9fe9cecf370cbc8b2e22561ad9a4abbd2076d16"}, "originalPosition": 97}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1316, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}