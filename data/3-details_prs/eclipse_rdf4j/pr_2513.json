{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4NDk3MDky", "number": 2513, "title": "GH-2489 Indexing and searching over geospatial data using lucene", "bodyText": "GitHub issue resolved: #2489\nWith the current implementation in rdf4j, the lucene index have had some troubles in indexing and searching over geospatial data. After trying some modifications as presented in the issue #2489, no good results came out. So in this pull request the new way to index data introduced by Lucene is integrated and has been tested on very huge geo-shapes, the indexing works much much faster and it doesn't fail at all, adding to that the very fast search capability over such data is attained.\n\nPR Author Checklist (see the contributor guidelines for more details):\n\n my pull request is self-contained\n I've added tests for the changes I made\n I've applied code formatting (you can use mvn process-resources to format from the command line)\n every commit message starts with the issue number (GH-xxxx) followed by a meaningful description of the change\n every commit has been signed off\n\nNote: we merge all feature pull requests using squash and merge. See RDF4J git merge strategy for more details.", "createdAt": "2020-09-17T08:26:45Z", "url": "https://github.com/eclipse/rdf4j/pull/2513", "merged": true, "mergeCommit": {"oid": "764a0fc945008a00cc93da404628f1ac4ea6c65b"}, "closed": true, "closedAt": "2020-09-24T01:40:46Z", "author": {"login": "AlyHdr"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdJ6zVTgFqTQ5MTA2NDU0NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLhfXqAFqTQ5MzkzMzA4NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxMDY0NTQ1", "url": "https://github.com/eclipse/rdf4j/pull/2513#pullrequestreview-491064545", "createdAt": "2020-09-17T23:59:34Z", "commit": {"oid": "07a8524598a8fdb604e51bf2c4d22dfa2d5e36bf"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMzo1OTozNFrOHT5ZRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMDo0NjowOVrOHT6Kkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYyNTM0OA==", "bodyText": "Instead of printing to STDOUT, let's send this to the logging framework:\nlogger.warn(\"error while processing geo property\", e);\n\nNot sure if this class has a logger field yet, if not, you can add it like this:\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nprivate final Logger logger = LoggerFactory.getLogger(getClass());", "url": "https://github.com/eclipse/rdf4j/pull/2513#discussion_r490625348", "createdAt": "2020-09-17T23:59:34Z", "author": {"login": "jeenbroekstra"}, "path": "core/sail/lucene/src/main/java/org/eclipse/rdf4j/sail/lucene/LuceneDocument.java", "diffHunk": "@@ -140,13 +154,33 @@ public boolean hasProperty(String fieldName, String value) {\n \tpublic void addGeoProperty(String field, String value) {\n \t\tLuceneIndex.addStoredOnlyPredicateField(field, value, doc);\n \t\ttry {\n-\t\t\tSpatialStrategy geoStrategy = geoStrategyMapper.apply(field);\n-\t\t\tShape shape = geoStrategy.getSpatialContext().readShapeFromWkt(value);\n-\t\t\tfor (IndexableField f : geoStrategy.createIndexableFields(shape)) {\n-\t\t\t\tdoc.add(f);\n+\t\t\tString wkt = value;\n+\t\t\t// wkt = wkt.replace(\"\\\"\", \"\").replace(\"^^<http://www.opengis.net/ont/geosparql#wktLiteral>\", \"\");\n+\t\t\t// System.out.println(wkt);\n+\t\t\tObject shape = SimpleWKTShapeParser.parse(wkt);\n+\t\t\tif (shape instanceof Polygon[]) {\n+\t\t\t\tfor (Polygon p : (Polygon[]) shape) {\n+\t\t\t\t\tfor (Field f : LatLonShape.createIndexableFields(field, p)) {\n+\t\t\t\t\t\tdoc.add(f);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t} else if (shape instanceof Polygon) {\n+\t\t\t\tfor (Field f : LatLonShape.createIndexableFields(field, (Polygon) shape)) {\n+\t\t\t\t\tdoc.add(f);\n+\t\t\t\t}\n+\t\t\t} else if (shape instanceof Line) {\n+\t\t\t\tfor (Field f : LatLonShape.createIndexableFields(field, (Line) shape)) {\n+\t\t\t\t\tdoc.add(f);\n+\t\t\t\t}\n+\t\t\t} else if (shape instanceof double[]) {\n+\t\t\t\tdouble point[] = (double[]) shape;\n+\t\t\t\t// System.out.println(point[0]+\" \"+point[1]);\n+\t\t\t\tdoc.add(new LatLonPoint(field, point[1], point[0]));\n+\t\t\t} else {\n+\t\t\t\tthrow new IllegalArgumentException(\"Geometry is not supported\");\n \t\t\t}\n-\t\t} catch (ParseException e) {\n-\t\t\t// ignore\n+\t\t} catch (Exception e) {\n+\t\t\te.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07a8524598a8fdb604e51bf2c4d22dfa2d5e36bf"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYyNTgzOA==", "bodyText": "Let's be specific about the exceptions we're catching here:\n catch (ParseException | IllegalArgumentException e) {", "url": "https://github.com/eclipse/rdf4j/pull/2513#discussion_r490625838", "createdAt": "2020-09-18T00:01:16Z", "author": {"login": "jeenbroekstra"}, "path": "core/sail/lucene/src/main/java/org/eclipse/rdf4j/sail/lucene/LuceneDocument.java", "diffHunk": "@@ -140,13 +154,33 @@ public boolean hasProperty(String fieldName, String value) {\n \tpublic void addGeoProperty(String field, String value) {\n \t\tLuceneIndex.addStoredOnlyPredicateField(field, value, doc);\n \t\ttry {\n-\t\t\tSpatialStrategy geoStrategy = geoStrategyMapper.apply(field);\n-\t\t\tShape shape = geoStrategy.getSpatialContext().readShapeFromWkt(value);\n-\t\t\tfor (IndexableField f : geoStrategy.createIndexableFields(shape)) {\n-\t\t\t\tdoc.add(f);\n+\t\t\tString wkt = value;\n+\t\t\t// wkt = wkt.replace(\"\\\"\", \"\").replace(\"^^<http://www.opengis.net/ont/geosparql#wktLiteral>\", \"\");\n+\t\t\t// System.out.println(wkt);\n+\t\t\tObject shape = SimpleWKTShapeParser.parse(wkt);\n+\t\t\tif (shape instanceof Polygon[]) {\n+\t\t\t\tfor (Polygon p : (Polygon[]) shape) {\n+\t\t\t\t\tfor (Field f : LatLonShape.createIndexableFields(field, p)) {\n+\t\t\t\t\t\tdoc.add(f);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t} else if (shape instanceof Polygon) {\n+\t\t\t\tfor (Field f : LatLonShape.createIndexableFields(field, (Polygon) shape)) {\n+\t\t\t\t\tdoc.add(f);\n+\t\t\t\t}\n+\t\t\t} else if (shape instanceof Line) {\n+\t\t\t\tfor (Field f : LatLonShape.createIndexableFields(field, (Line) shape)) {\n+\t\t\t\t\tdoc.add(f);\n+\t\t\t\t}\n+\t\t\t} else if (shape instanceof double[]) {\n+\t\t\t\tdouble point[] = (double[]) shape;\n+\t\t\t\t// System.out.println(point[0]+\" \"+point[1]);\n+\t\t\t\tdoc.add(new LatLonPoint(field, point[1], point[0]));\n+\t\t\t} else {\n+\t\t\t\tthrow new IllegalArgumentException(\"Geometry is not supported\");\n \t\t\t}\n-\t\t} catch (ParseException e) {\n-\t\t\t// ignore\n+\t\t} catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07a8524598a8fdb604e51bf2c4d22dfa2d5e36bf"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYyNjExNA==", "bodyText": "A minor thing, but: our code conventions don't use wildcard imports, could you roll this back here (and in other places where this has been changed)?", "url": "https://github.com/eclipse/rdf4j/pull/2513#discussion_r490626114", "createdAt": "2020-09-18T00:02:23Z", "author": {"login": "jeenbroekstra"}, "path": "core/sail/lucene/src/main/java/org/eclipse/rdf4j/sail/lucene/LuceneDocument.java", "diffHunk": "@@ -8,15 +8,29 @@\n package org.eclipse.rdf4j.sail.lucene;\n \n import java.text.ParseException;\n-import java.util.Arrays;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Set;\n+import java.util.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07a8524598a8fdb604e51bf2c4d22dfa2d5e36bf"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYyNzk4Ng==", "bodyText": "Could we add the shape object to the exception message? Not sure it has a readable string representation but on the off chance, it could help pinpoint the error.", "url": "https://github.com/eclipse/rdf4j/pull/2513#discussion_r490627986", "createdAt": "2020-09-18T00:09:26Z", "author": {"login": "jeenbroekstra"}, "path": "core/sail/lucene/src/main/java/org/eclipse/rdf4j/sail/lucene/LuceneDocument.java", "diffHunk": "@@ -140,13 +154,33 @@ public boolean hasProperty(String fieldName, String value) {\n \tpublic void addGeoProperty(String field, String value) {\n \t\tLuceneIndex.addStoredOnlyPredicateField(field, value, doc);\n \t\ttry {\n-\t\t\tSpatialStrategy geoStrategy = geoStrategyMapper.apply(field);\n-\t\t\tShape shape = geoStrategy.getSpatialContext().readShapeFromWkt(value);\n-\t\t\tfor (IndexableField f : geoStrategy.createIndexableFields(shape)) {\n-\t\t\t\tdoc.add(f);\n+\t\t\tString wkt = value;\n+\t\t\t// wkt = wkt.replace(\"\\\"\", \"\").replace(\"^^<http://www.opengis.net/ont/geosparql#wktLiteral>\", \"\");\n+\t\t\t// System.out.println(wkt);\n+\t\t\tObject shape = SimpleWKTShapeParser.parse(wkt);\n+\t\t\tif (shape instanceof Polygon[]) {\n+\t\t\t\tfor (Polygon p : (Polygon[]) shape) {\n+\t\t\t\t\tfor (Field f : LatLonShape.createIndexableFields(field, p)) {\n+\t\t\t\t\t\tdoc.add(f);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t} else if (shape instanceof Polygon) {\n+\t\t\t\tfor (Field f : LatLonShape.createIndexableFields(field, (Polygon) shape)) {\n+\t\t\t\t\tdoc.add(f);\n+\t\t\t\t}\n+\t\t\t} else if (shape instanceof Line) {\n+\t\t\t\tfor (Field f : LatLonShape.createIndexableFields(field, (Line) shape)) {\n+\t\t\t\t\tdoc.add(f);\n+\t\t\t\t}\n+\t\t\t} else if (shape instanceof double[]) {\n+\t\t\t\tdouble point[] = (double[]) shape;\n+\t\t\t\t// System.out.println(point[0]+\" \"+point[1]);\n+\t\t\t\tdoc.add(new LatLonPoint(field, point[1], point[0]));\n+\t\t\t} else {\n+\t\t\t\tthrow new IllegalArgumentException(\"Geometry is not supported\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07a8524598a8fdb604e51bf2c4d22dfa2d5e36bf"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzMjk0NQ==", "bodyText": "More generally: I don't know the geospatial support well enough to really follow, but I'm a little uncomfortable to have this if..else construction in our code base. Here, we make a choice to just support Polygon, Line, and coordinate tuples as possible Shapes, and everything else we just throw an exception. Are there no other possible shapes that could come from processing the WKT literal that could be indexed by Lucene? For example what about multiline shapes, or rectangles/envelopes, or more generally Geometry collections?", "url": "https://github.com/eclipse/rdf4j/pull/2513#discussion_r490632945", "createdAt": "2020-09-18T00:26:41Z", "author": {"login": "jeenbroekstra"}, "path": "core/sail/lucene/src/main/java/org/eclipse/rdf4j/sail/lucene/LuceneDocument.java", "diffHunk": "@@ -140,13 +154,33 @@ public boolean hasProperty(String fieldName, String value) {\n \tpublic void addGeoProperty(String field, String value) {\n \t\tLuceneIndex.addStoredOnlyPredicateField(field, value, doc);\n \t\ttry {\n-\t\t\tSpatialStrategy geoStrategy = geoStrategyMapper.apply(field);\n-\t\t\tShape shape = geoStrategy.getSpatialContext().readShapeFromWkt(value);\n-\t\t\tfor (IndexableField f : geoStrategy.createIndexableFields(shape)) {\n-\t\t\t\tdoc.add(f);\n+\t\t\tString wkt = value;\n+\t\t\t// wkt = wkt.replace(\"\\\"\", \"\").replace(\"^^<http://www.opengis.net/ont/geosparql#wktLiteral>\", \"\");\n+\t\t\t// System.out.println(wkt);\n+\t\t\tObject shape = SimpleWKTShapeParser.parse(wkt);\n+\t\t\tif (shape instanceof Polygon[]) {\n+\t\t\t\tfor (Polygon p : (Polygon[]) shape) {\n+\t\t\t\t\tfor (Field f : LatLonShape.createIndexableFields(field, p)) {\n+\t\t\t\t\t\tdoc.add(f);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t} else if (shape instanceof Polygon) {\n+\t\t\t\tfor (Field f : LatLonShape.createIndexableFields(field, (Polygon) shape)) {\n+\t\t\t\t\tdoc.add(f);\n+\t\t\t\t}\n+\t\t\t} else if (shape instanceof Line) {\n+\t\t\t\tfor (Field f : LatLonShape.createIndexableFields(field, (Line) shape)) {\n+\t\t\t\t\tdoc.add(f);\n+\t\t\t\t}\n+\t\t\t} else if (shape instanceof double[]) {\n+\t\t\t\tdouble point[] = (double[]) shape;\n+\t\t\t\t// System.out.println(point[0]+\" \"+point[1]);\n+\t\t\t\tdoc.add(new LatLonPoint(field, point[1], point[0]));\n+\t\t\t} else {\n+\t\t\t\tthrow new IllegalArgumentException(\"Geometry is not supported\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYyNzk4Ng=="}, "originalCommit": {"oid": "07a8524598a8fdb604e51bf2c4d22dfa2d5e36bf"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzNzU2NA==", "bodyText": "This looks like you've used the example for your own tests - which is fine of course, but I think it needs some cleaning up.", "url": "https://github.com/eclipse/rdf4j/pull/2513#discussion_r490637564", "createdAt": "2020-09-18T00:44:36Z", "author": {"login": "jeenbroekstra"}, "path": "core/sail/lucene/src/test/java/org/eclipse/rdf4j/sail/lucene/examples/LuceneSailExample.java", "diffHunk": "@@ -69,45 +75,35 @@ public static void createSimple() throws Exception {\n \t\ttry ( // add some test data, the FOAF ont\n \t\t\t\tSailRepositoryConnection connection = repository.getConnection()) {\n \t\t\tconnection.begin();\n-\t\t\tconnection.add(LuceneSailExample.class.getResourceAsStream(\"/org/openrdf/sail/lucene/examples/foaf.rdfs\"),\n-\t\t\t\t\t\"\", RDFFormat.RDFXML);\n+\t\t\tconnection.add(new FileInputStream(new File(\"some_dir\")),\n+\t\t\t\t\t\"\", RDFFormat.NTRIPLES);\n \t\t\tconnection.commit();\n \n \t\t\t// search for resources that mention \"person\"\n-\t\t\tString queryString = \"PREFIX search:   <\" + LuceneSailSchema.NAMESPACE + \"> \\n\"\n-\t\t\t\t\t+ \"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \\n\" + \"SELECT * WHERE { \\n\"\n-\t\t\t\t\t+ \"?subject search:matches ?match . \\n\" + \"?match search:query \\\"person\\\" ; \\n\"\n-\t\t\t\t\t+ \"       search:property ?property ; \\n\" + \"       search:score ?score ; \\n\"\n-\t\t\t\t\t+ \"       search:snippet ?snippet . \\n\" + \"?subject rdf:type ?type . \\n\" + \"} LIMIT 3 \\n\"\n-\t\t\t\t\t+ \"BINDINGS ?type { \\n\" + \" (<http://www.w3.org/2002/07/owl#Class>) \\n\" + \"}\";\n-\t\t\ttupleQuery(queryString, connection);\n-\n-\t\t\t// search for property \"name\" with domain \"person\"\n-\t\t\tqueryString = \"PREFIX search: <\" + LuceneSailSchema.NAMESPACE + \"> \\n\"\n-\t\t\t\t\t+ \"PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> \\n\" + \"SELECT * WHERE { \\n\"\n-\t\t\t\t\t+ \"?subject rdfs:domain ?domain . \\n\" + \"?subject search:matches ?match . \\n\"\n-\t\t\t\t\t+ \"?match search:query \\\"chat\\\" ; \\n\" + \"       search:score ?score . \\n\"\n-\t\t\t\t\t+ \"?domain search:matches ?match2 . \\n\" + \"?match2 search:query \\\"person\\\" ; \\n\"\n-\t\t\t\t\t+ \"        search:score ?score2 . \\n\" + \"} LIMIT 5\";\n+\t\t\t// String queryString = \"PREFIX geof: <http://www.opengis.net/def/function/geosparql/> PREFIX geo:\n+\t\t\t// <http://www.opengis.net/ont/geosparql#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX\n+\t\t\t// rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT ?id WHERE { ?s <http://nuts.de/geometry> ?o . FILTER\n+\t\t\t// (geof:sfWithin(\\\"Point(-2.7633 47.826)\\\"^^geo:wktLiteral,?o)) }\";\n+\t\t\t// String queryString = \"PREFIX geof: <http://www.opengis.net/def/function/geosparql/> PREFIX geo:\n+\t\t\t// <http://www.opengis.net/ont/geosparql#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX\n+\t\t\t// rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT ?id WHERE { ?s <http://nuts.de/geometry> ?o . FILTER\n+\t\t\t// (geof:sfContains(?o,\\\"POINT(33.30260 38.675310)\\\"^^geo:wktLiteral)) ?s <http://example.com/id> ?id . }\";\n+\t\t\t// String queryString = \"PREFIX geof: <http://www.opengis.net/def/function/geosparql/> PREFIX geo:\n+\t\t\t// <http://www.opengis.net/ont/geosparql#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX\n+\t\t\t// rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT ?id WHERE { ?s <http://nuts.de/geometry> ?o . FILTER\n+\t\t\t// (geof:sfWithin(\\\"Point(7.98 45.363)\\\"^^geo:wktLiteral,?o)) ?s <http://nuts.de/id> ?id . }\";\n+\t\t\tString queryString = \"SELECT ?s0 where { ?s0 <https://linkedopendata.eu/prop/direct/P127> ?coordinates . FILTER ( <http://www.opengis.net/def/function/geosparql/distance>(\\\"Point(12.2018 44.4161)\\\"^^<http://www.opengis.net/ont/geosparql#wktLiteral>,?coordinates,<http://www.opengis.net/def/uom/OGC/1.0/metre>)< 100000) .    ?s0 <https://linkedopendata.eu/prop/direct/P35> <https://linkedopendata.eu/entity/Q9934> .}\";\n+\t\t\t/*\n+\t\t\t * String queryString = \"PREFIX geo: <http://www.opengis.net/ont/geosparql#>\\n\" +\n+\t\t\t * \"PREFIX geof: <http://www.opengis.net/def/function/geosparql/>\\n\" +\n+\t\t\t * \"PREFIX uom: <http://www.opengis.net/def/uom/OGC/1.0/>\\n\" + \"PREFIX ex: <http://example.org/>\\n\" +\n+\t\t\t * \"SELECT *\\n\" + \"WHERE {\\n\" + \"  ?lmA a ex:Landmark ;\\n\" +\n+\t\t\t * \"       geo:hasGeometry [ geo:asWKT ?coord1 ].\\n\" + \"  ?lmB a ex:Landmark ;\\n\" +\n+\t\t\t * \"       geo:hasGeometry [ geo:asWKT ?coord2 ].\\n\" +\n+\t\t\t * \"  BIND((geof:distance(?coord1, ?coord2, uom:metre)/1000) as ?dist) .\\n\" +\n+\t\t\t * \"  FILTER (str(?lmA) < str(?lmB))\\n\" + \"}\";\n+\t\t\t */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07a8524598a8fdb604e51bf2c4d22dfa2d5e36bf"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzNzk3MQ==", "bodyText": "This brings up a point: are these changes compatible with existing indexes? What would happen if you ran this code on a Lucene index that was generated with an older version of RDF4J?", "url": "https://github.com/eclipse/rdf4j/pull/2513#discussion_r490637971", "createdAt": "2020-09-18T00:46:09Z", "author": {"login": "jeenbroekstra"}, "path": "core/sail/lucene/src/main/java/org/eclipse/rdf4j/sail/lucene/LuceneIndex.java", "diffHunk": "@@ -753,11 +751,15 @@ public DocumentScore apply(ScoreDoc doc) {\n \t\tSpatialStrategy strategy = getSpatialStrategyMapper().apply(geoField);\n \t\tfinal Shape boundingCircle = strategy.getSpatialContext().getShapeFactory().circle(p, degs);\n \t\tQuery q = strategy.makeQuery(new SpatialArgs(SpatialOperation.Intersects, boundingCircle));\n+\n+\t\t// use LatLonPoint for distance query after indexing it with the same data structure\n+\n+\t\tq = LatLonPoint.newDistanceQuery(geoField, p.getY(), p.getX(), distance);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07a8524598a8fdb604e51bf2c4d22dfa2d5e36bf"}, "originalPosition": 21}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "07a8524598a8fdb604e51bf2c4d22dfa2d5e36bf", "author": {"user": {"login": "AlyHdr", "name": null}}, "url": "https://github.com/eclipse/rdf4j/commit/07a8524598a8fdb604e51bf2c4d22dfa2d5e36bf", "committedDate": "2020-09-17T09:25:08Z", "message": "Merge branch 'GH-2489-geospatial-lucene-index' of https://github.com/AlyHdr/rdf4j into GH-2489-geospatial-lucene-index\n\nSigned-off-by: AlyHdr <ali.haidar-97@hotmail.com>"}, "afterCommit": {"oid": "7b9fc780189903ee09f29b272026627de7f9c106", "author": {"user": {"login": "AlyHdr", "name": null}}, "url": "https://github.com/eclipse/rdf4j/commit/7b9fc780189903ee09f29b272026627de7f9c106", "committedDate": "2020-09-18T08:02:33Z", "message": "Modified the LuceneIndex so that it uses the LatLonShape to index and search over data much faster than the current implementation\n\nSigned-off-by: AlyHdr <ali.haidar-97@hotmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzMDUxMTM2", "url": "https://github.com/eclipse/rdf4j/pull/2513#pullrequestreview-493051136", "createdAt": "2020-09-21T23:39:21Z", "commit": {"oid": "01093a67bfc6a6c93facaa4c52937db9a9ce6f93"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMzozOToyMVrOHVmAzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMzozOToyMVrOHVmAzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQwNDk0MQ==", "bodyText": "Not sure why this shows up in your PR, as these changes are already present on the master branch. Possibly caused by your fork being out of sync with the upstream repo.\nIt's probably not a problem, but just to be sure, could you update your fork's master branch and then run git rebase master on your feature branch? After you force-pushed that, these older commits should no longer show up in this PR.", "url": "https://github.com/eclipse/rdf4j/pull/2513#discussion_r492404941", "createdAt": "2020-09-21T23:39:21Z", "author": {"login": "jeenbroekstra"}, "path": "core/model/src/test/java/org/eclipse/rdf4j/model/util/RDFCollectionsTest.java", "diffHunk": "@@ -71,35 +70,34 @@ public void testConversionRoundtrip() {\n \n \t}\n \n-\t@Test\n-\tpublic void testNonWellformedCollection() {\n+\t@Test(expected = ModelException.class)\n+\tpublic void testNonWellformedCollection_MissingTerminator() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01093a67bfc6a6c93facaa4c52937db9a9ce6f93"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93cd34629b032c8a3afeae6543271ca850d837a9", "author": {"user": {"login": "AlyHdr", "name": null}}, "url": "https://github.com/eclipse/rdf4j/commit/93cd34629b032c8a3afeae6543271ca850d837a9", "committedDate": "2020-09-22T09:29:03Z", "message": "Modified the LuceneIndex so that it uses the LatLonShape to index and search over data much faster than the current implementation\n\nSigned-off-by: AlyHdr <ali.haidar-97@hotmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2796411017b7183beef907cbe20860396e2dd030", "author": {"user": {"login": "AlyHdr", "name": null}}, "url": "https://github.com/eclipse/rdf4j/commit/2796411017b7183beef907cbe20860396e2dd030", "committedDate": "2020-09-22T09:29:03Z", "message": "GH-2489 supporting all WKT geometries at index and search time\n\nSigned-off-by: AlyHdr <ali.haidar-97@hotmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d78d03d414d4ef1d1211be184f81e52490704628", "author": {"user": {"login": "AlyHdr", "name": null}}, "url": "https://github.com/eclipse/rdf4j/commit/d78d03d414d4ef1d1211be184f81e52490704628", "committedDate": "2020-09-22T09:29:03Z", "message": "GH-2489 supporting formating for rdf4j\n\nSigned-off-by: AlyHdr <ali.haidar-97@hotmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "886cf06631e70bc7d8fb718d5b9139aa781f124b", "author": {"user": {"login": "AlyHdr", "name": null}}, "url": "https://github.com/eclipse/rdf4j/commit/886cf06631e70bc7d8fb718d5b9139aa781f124b", "committedDate": "2020-09-22T09:29:04Z", "message": "GH-2489 modified a bug in lucene index search\n\nSigned-off-by: AlyHdr <ali.haidar-97@hotmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "01093a67bfc6a6c93facaa4c52937db9a9ce6f93", "author": {"user": {"login": "AlyHdr", "name": null}}, "url": "https://github.com/eclipse/rdf4j/commit/01093a67bfc6a6c93facaa4c52937db9a9ce6f93", "committedDate": "2020-09-21T13:09:16Z", "message": "GH-2489 modified a bug in lucene index search\n\nSigned-off-by: AlyHdr <ali.haidar-97@hotmail.com>"}, "afterCommit": {"oid": "886cf06631e70bc7d8fb718d5b9139aa781f124b", "author": {"user": {"login": "AlyHdr", "name": null}}, "url": "https://github.com/eclipse/rdf4j/commit/886cf06631e70bc7d8fb718d5b9139aa781f124b", "committedDate": "2020-09-22T09:29:04Z", "message": "GH-2489 modified a bug in lucene index search\n\nSigned-off-by: AlyHdr <ali.haidar-97@hotmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzOTMzMDg1", "url": "https://github.com/eclipse/rdf4j/pull/2513#pullrequestreview-493933085", "createdAt": "2020-09-23T00:31:32Z", "commit": {"oid": "886cf06631e70bc7d8fb718d5b9139aa781f124b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 101, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}