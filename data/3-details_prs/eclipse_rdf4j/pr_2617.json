{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4Njc5MDI3", "number": 2617, "title": "GH-1942 Rio RDF and QueryResult Writer support for non-default character encoding", "bodyText": "GitHub issue resolved: #1942  \nBriefly describe the changes proposed in this PR:\n\nAdded Writer constructors to all character format QueryResultWriter classes\nConsistent handling of Writer (or Writer based) fields from OutputStream and Writer constructors in QueryResultWriter and RDFWriter classes\nadded roundtrip test for writers/parsers that support character encoding-based serializations\n\nContains contributions by @erikgb (from original PR #2106 ), with minor updates.\n\nPR Author Checklist (see the contributor guidelines for more details):\n\n my pull request is self-contained\n I've added tests for the changes I made\n I've applied code formatting (you can use mvn process-resources to format from the command line)\n I've squashed my commits down to one or a few meaningful commits\n every commit message starts with the issue number (GH-xxxx) followed by a meaningful description of the change\n every commit has been signed off", "createdAt": "2020-10-23T03:51:23Z", "url": "https://github.com/eclipse/rdf4j/pull/2617", "merged": true, "mergeCommit": {"oid": "27f877639e607a2d68165da16db00d11614cb2d0"}, "closed": true, "closedAt": "2020-10-25T21:03:07Z", "author": {"login": "jeenbroekstra"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZLVZdgH2gAyNTA4Njc5MDI3OjIzNDk1YzE5NzhhYjE1NTZiZGM2ZThkMTlhODI0NWI0YWZhMjUzY2E=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdV7ghbAFqTUxNjMzNTM1MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "23495c1978ab1556bdc6e8d19a8245b4afa253ca", "author": {"user": {"login": "erikgb", "name": "Erik Godding Boye"}}, "url": "https://github.com/eclipse/rdf4j/commit/23495c1978ab1556bdc6e8d19a8245b4afa253ca", "committedDate": "2020-04-19T14:26:31Z", "message": "GH-1942: Added Writer constructor for relevant QueryResultWriter classes\n\nSigned-off-by: Erik Godding Boye <1142578+erikgb@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f55ae83e755844d2e1801729df055608133437f5", "author": {"user": {"login": "erikgb", "name": "Erik Godding Boye"}}, "url": "https://github.com/eclipse/rdf4j/commit/f55ae83e755844d2e1801729df055608133437f5", "committedDate": "2020-04-19T14:26:54Z", "message": "GH-1942: Assured correct state handling in Writer constructors for relevant RDFWriter classes\n\nSigned-off-by: Erik Godding Boye <1142578+erikgb@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d863e5868bd2e4e989203125542c9fde535eee03", "author": {"user": {"login": "jeenbroekstra", "name": "Jeen Broekstra"}}, "url": "https://github.com/eclipse/rdf4j/commit/d863e5868bd2e4e989203125542c9fde535eee03", "committedDate": "2020-04-21T01:27:02Z", "message": "Merge branch 'develop' into GH-1942-writer-character-encoding"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68b7ee42934bace6d8c93c778925ac595bf78c57", "author": {"user": {"login": "jeenbroekstra", "name": "Jeen Broekstra"}}, "url": "https://github.com/eclipse/rdf4j/commit/68b7ee42934bace6d8c93c778925ac595bf78c57", "committedDate": "2020-10-22T23:52:58Z", "message": "Merge branch 'GH-1942-writer-char-encoding' into GH-1942-writer-character-encoding"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b44926024fbf64aca7023637184a17e1e187d991", "author": {"user": {"login": "jeenbroekstra", "name": "Jeen Broekstra"}}, "url": "https://github.com/eclipse/rdf4j/commit/b44926024fbf64aca7023637184a17e1e187d991", "committedDate": "2020-10-23T00:31:40Z", "message": "Merge pull request #2106 from erikgb/GH-1942-writer-character-encoding\n\nGH-1942 Made sure all character format writers have Writer constructor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e3e5a74f346ab2ef7193ab76ef252ce0646306f", "author": {"user": {"login": "jeenbroekstra", "name": "Jeen Broekstra"}}, "url": "https://github.com/eclipse/rdf4j/commit/9e3e5a74f346ab2ef7193ab76ef252ce0646306f", "committedDate": "2020-10-23T02:25:20Z", "message": "GH-1942 roundtrip test for non-default encoding in RDFWriters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba46cc6da6b8c352f50d45bc7f5baab27be50e4a", "author": {"user": {"login": "jeenbroekstra", "name": "Jeen Broekstra"}}, "url": "https://github.com/eclipse/rdf4j/commit/ba46cc6da6b8c352f50d45bc7f5baab27be50e4a", "committedDate": "2020-10-23T04:24:53Z", "message": "GH-1942 introduce ByteSink/CharSink and clean up constructors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b12ca74ce6c43b77cd2624bae39a309837763fba", "author": {"user": {"login": "jeenbroekstra", "name": "Jeen Broekstra"}}, "url": "https://github.com/eclipse/rdf4j/commit/b12ca74ce6c43b77cd2624bae39a309837763fba", "committedDate": "2020-10-23T04:31:56Z", "message": "Merge branch 'GH-1942-bytesink-charsink' into GH-1942-writer-char-encoding"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8f8d68ccc911828ee67f2233227e8042eb5f4954", "author": {"user": {"login": "jeenbroekstra", "name": "Jeen Broekstra"}}, "url": "https://github.com/eclipse/rdf4j/commit/8f8d68ccc911828ee67f2233227e8042eb5f4954", "committedDate": "2020-10-23T04:29:28Z", "message": "Merge branch 'GH-1942-bytesink-charsink' into GH-1942-writer-char-encoding"}, "afterCommit": {"oid": "b12ca74ce6c43b77cd2624bae39a309837763fba", "author": {"user": {"login": "jeenbroekstra", "name": "Jeen Broekstra"}}, "url": "https://github.com/eclipse/rdf4j/commit/b12ca74ce6c43b77cd2624bae39a309837763fba", "committedDate": "2020-10-23T04:31:56Z", "message": "Merge branch 'GH-1942-bytesink-charsink' into GH-1942-writer-char-encoding"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1MzcwMjkw", "url": "https://github.com/eclipse/rdf4j/pull/2617#pullrequestreview-515370290", "createdAt": "2020-10-23T06:12:38Z", "commit": {"oid": "b12ca74ce6c43b77cd2624bae39a309837763fba"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNjoxMjozOFrOHm_zvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNzoyMzozNFrOHnBw3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY1MzM3NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * @param out     The OutputStream to write the Turtle document to. The writer will use\n          \n          \n            \n            \t * @param out     The OutputStream to write the Turtle document to.", "url": "https://github.com/eclipse/rdf4j/pull/2617#discussion_r510653375", "createdAt": "2020-10-23T06:12:38Z", "author": {"login": "erikgb"}, "path": "core/rio/turtle/src/main/java/org/eclipse/rdf4j/rio/turtle/TurtleWriter.java", "diffHunk": "@@ -114,11 +107,10 @@ public TurtleWriter(OutputStream out) {\n \t/**\n \t * Creates a new TurtleWriter that will write to the supplied OutputStream.\n \t *\n-\t * @param out     The OutputStream to write the Turtle document to.\n+\t * @param out     The OutputStream to write the Turtle document to. The writer will use", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b12ca74ce6c43b77cd2624bae39a309837763fba"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY1NjQ4Ng==", "bodyText": "Suggested change", "url": "https://github.com/eclipse/rdf4j/pull/2617#discussion_r510656486", "createdAt": "2020-10-23T06:15:43Z", "author": {"login": "erikgb"}, "path": "core/rio/trix/src/main/java/org/eclipse/rdf4j/rio/trix/TriXWriter.java", "diffHunk": "@@ -210,4 +211,5 @@ private static final boolean contextsEquals(Resource context1, Resource context2\n \t\t\treturn context1.equals(context2);\n \t\t}\n \t}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b12ca74ce6c43b77cd2624bae39a309837763fba"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY1OTU1OQ==", "bodyText": "Maybe remove this - since the corresponding Methods-marker is deleted.", "url": "https://github.com/eclipse/rdf4j/pull/2617#discussion_r510659559", "createdAt": "2020-10-23T06:22:00Z", "author": {"login": "erikgb"}, "path": "core/rio/trix/src/main/java/org/eclipse/rdf4j/rio/trix/TriXWriter.java", "diffHunk": "@@ -42,13 +43,13 @@\n  *\n  * @author Arjohn Kampman\n  */\n-public class TriXWriter extends AbstractRDFWriter implements RDFWriter {\n+public class TriXWriter extends AbstractRDFWriter implements RDFWriter, CharSink {\n \n \t/*-----------*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b12ca74ce6c43b77cd2624bae39a309837763fba"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY4NTE5Ng==", "bodyText": "I think the following block is quite long and a bit hard to read. Would it be possible to split it up with some private methods? Or replacing the instanceof conditionals with use of the Strategy/Visitor Pattern? I tend to prefer it to get better compile-time checks.", "url": "https://github.com/eclipse/rdf4j/pull/2617#discussion_r510685196", "createdAt": "2020-10-23T07:23:06Z", "author": {"login": "erikgb"}, "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/SPARQLProtocolSession.java", "diffHunk": "@@ -685,15 +688,24 @@ protected void getTupleQueryResult(HttpUriRequest method, TupleQueryResultHandle\n \t\t\t\t\t\t.orElseThrow(() -> new RepositoryException(\n \t\t\t\t\t\t\t\t\"Server responded with an unsupported file format: \" + mimeType));\n \n-\t\t\t\t// Check if we can pass through to the output stream directly\n+\t\t\t\t// Check if we can pass through to the writer directly\n \t\t\t\tif (handler instanceof TupleQueryResultWriter) {\n \t\t\t\t\tTupleQueryResultWriter tqrWriter = (TupleQueryResultWriter) handler;\n \t\t\t\t\tif (tqrWriter.getTupleQueryResultFormat().equals(format)) {\n-\t\t\t\t\t\tOutputStream out = tqrWriter.getOutputStream().orElse(null);\n-\t\t\t\t\t\tif (out != null) {\n-\t\t\t\t\t\t\tInputStream in = response.getEntity().getContent();\n-\t\t\t\t\t\t\tIOUtils.copy(in, out);\n-\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\tif (tqrWriter instanceof CharSink) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b12ca74ce6c43b77cd2624bae39a309837763fba"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY4NTQwNw==", "bodyText": "I think the following block is quite long and a bit hard to read. Would it be possible to split it up with some private methods? Or replacing the instanceof conditionals with use of the Strategy/Visitor Pattern? I tend to prefer it to get better compile-time checks.", "url": "https://github.com/eclipse/rdf4j/pull/2617#discussion_r510685407", "createdAt": "2020-10-23T07:23:34Z", "author": {"login": "erikgb"}, "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/SPARQLProtocolSession.java", "diffHunk": "@@ -853,15 +865,24 @@ protected void getRDF(HttpUriRequest method, RDFHandler handler, boolean require\n \t\t\t\tRDFFormat format = RDFFormat.matchMIMEType(mimeType, rdfFormats)\n \t\t\t\t\t\t.orElseThrow(() -> new RepositoryException(\n \t\t\t\t\t\t\t\t\"Server responded with an unsupported file format: \" + mimeType));\n-\t\t\t\t// Check if we can pass through to the output stream directly\n+\t\t\t\t// Check if we can pass through to the writer directly\n \t\t\t\tif (handler instanceof RDFWriter) {\n \t\t\t\t\tRDFWriter rdfWriter = (RDFWriter) handler;\n \t\t\t\t\tif (rdfWriter.getRDFFormat().equals(format)) {\n-\t\t\t\t\t\tOutputStream out = rdfWriter.getOutputStream().orElse(null);\n-\t\t\t\t\t\tif (out != null) {\n-\t\t\t\t\t\t\tInputStream in = response.getEntity().getContent();\n-\t\t\t\t\t\t\tIOUtils.copy(in, out);\n-\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\tif (rdfWriter instanceof CharSink) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b12ca74ce6c43b77cd2624bae39a309837763fba"}, "originalPosition": 62}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9fe9cecf370cbc8b2e22561ad9a4abbd2076d16", "author": {"user": {"login": "jeenbroekstra", "name": "Jeen Broekstra"}}, "url": "https://github.com/eclipse/rdf4j/commit/a9fe9cecf370cbc8b2e22561ad9a4abbd2076d16", "committedDate": "2020-10-24T00:03:30Z", "message": "GH-1942 moved new Sink interfaces to common.io package, DRYed up code a bit\n\n- generic Sink interface to allow fileformat retrieval without knowing\nthe specific type of writer (RDF or QueryResult)\n- moved Sinks to org.eclipse.rdf4j.common.io to make them more\ngenerically reusable.\n- DRYed up SPARQLProtocolSession code to determine if passthrough of\neither RDF data or sparql query result is possible."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MTM5ODI5", "url": "https://github.com/eclipse/rdf4j/pull/2617#pullrequestreview-516139829", "createdAt": "2020-10-24T00:16:01Z", "commit": {"oid": "a9fe9cecf370cbc8b2e22561ad9a4abbd2076d16"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwMDoxNjowMVrOHnhiPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwMDoxNjowMVrOHnhiPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTIwNTk1MA==", "bodyText": "Fwiw I'm open to other/better naming suggestions. \"Sink\" is very generic.", "url": "https://github.com/eclipse/rdf4j/pull/2617#discussion_r511205950", "createdAt": "2020-10-24T00:16:01Z", "author": {"login": "jeenbroekstra"}, "path": "core/util/src/main/java/org/eclipse/rdf4j/common/io/Sink.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/******************************************************************************* \n+ * Copyright (c) 2020 Eclipse RDF4J contributors. \n+ * All rights reserved. This program and the accompanying materials \n+ * are made available under the terms of the Eclipse Distribution License v1.0 \n+ * which accompanies this distribution, and is available at \n+ * http://www.eclipse.org/org/documents/edl-v10.php. \n+ *******************************************************************************/\n+package org.eclipse.rdf4j.common.io;\n+\n+import org.eclipse.rdf4j.common.lang.FileFormat;\n+\n+/**\n+ * \n+ * A Sink writes data in a particular {@link FileFormat}.\n+ * \n+ * @author Jeen Broekstra\n+ * @since 3.5.0\n+ */\n+public interface Sink {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9fe9cecf370cbc8b2e22561ad9a4abbd2076d16"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MjQzNjU3", "url": "https://github.com/eclipse/rdf4j/pull/2617#pullrequestreview-516243657", "createdAt": "2020-10-24T08:19:09Z", "commit": {"oid": "a9fe9cecf370cbc8b2e22561ad9a4abbd2076d16"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwODoxOTowOVrOHnpfcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwOToyODowMFrOHnrCqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMzNjMwNg==", "bodyText": "Naming is always the hardest part! I think we need to decide if we want to include some term(s) from where we are \"coming\" or to where we are \"going\". Some ideas: RdfDataSink, RdfOutputStreamProvider, RdfWriterSink. Put I also think we can keep the generic Sink name. This will almost be a marker interface, and only minor parts of code will have to relate to it.", "url": "https://github.com/eclipse/rdf4j/pull/2617#discussion_r511336306", "createdAt": "2020-10-24T08:19:09Z", "author": {"login": "erikgb"}, "path": "core/util/src/main/java/org/eclipse/rdf4j/common/io/Sink.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/******************************************************************************* \n+ * Copyright (c) 2020 Eclipse RDF4J contributors. \n+ * All rights reserved. This program and the accompanying materials \n+ * are made available under the terms of the Eclipse Distribution License v1.0 \n+ * which accompanies this distribution, and is available at \n+ * http://www.eclipse.org/org/documents/edl-v10.php. \n+ *******************************************************************************/\n+package org.eclipse.rdf4j.common.io;\n+\n+import org.eclipse.rdf4j.common.lang.FileFormat;\n+\n+/**\n+ * \n+ * A Sink writes data in a particular {@link FileFormat}.\n+ * \n+ * @author Jeen Broekstra\n+ * @since 3.5.0\n+ */\n+public interface Sink {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTIwNTk1MA=="}, "originalCommit": {"oid": "a9fe9cecf370cbc8b2e22561ad9a4abbd2076d16"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM0MDk5Mw==", "bodyText": "I think this statement mandates to make the getWriter method final.", "url": "https://github.com/eclipse/rdf4j/pull/2617#discussion_r511340993", "createdAt": "2020-10-24T08:40:13Z", "author": {"login": "erikgb"}, "path": "core/queryresultio/sparqljson/src/main/java/org/eclipse/rdf4j/query/resultio/sparqljson/AbstractSPARQLJSONWriter.java", "diffHunk": "@@ -77,15 +75,26 @@\n \n \tprotected final JsonGenerator jg;\n \n+\tprivate final Writer writer;\n+\n \tprotected AbstractSPARQLJSONWriter(OutputStream out) {\n-\t\tsuper(out);\n+\t\tthis(new OutputStreamWriter(out, StandardCharsets.UTF_8));\n+\t}\n+\n+\tprotected AbstractSPARQLJSONWriter(Writer writer) {\n+\t\tthis.writer = writer;\n \t\ttry {\n-\t\t\tjg = JSON_FACTORY.createGenerator(new OutputStreamWriter(out, StandardCharsets.UTF_8));\n+\t\t\tjg = JSON_FACTORY.createGenerator(writer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9fe9cecf370cbc8b2e22561ad9a4abbd2076d16"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM1NzEwOA==", "bodyText": "There are utilities in Http Client for obtaining the Charset! Something in the line of\nHttpEntity entity = response.getEntity();\nContentType contentType = ContentType.get(entity);\nif (contentType == null) {\n   return Optional.empty();\n}\nreturn Optional.ofNullable(contentType.getCharset());\nOr is there a reason for not using it?", "url": "https://github.com/eclipse/rdf4j/pull/2617#discussion_r511357108", "createdAt": "2020-10-24T09:16:54Z", "author": {"login": "erikgb"}, "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/SPARQLProtocolSession.java", "diffHunk": "@@ -1139,6 +1150,35 @@ protected String getResponseMIMEType(HttpResponse method) throws IOException {\n \t\treturn null;\n \t}\n \n+\t/**\n+\t * Gets the character encoding specified in the HTTP headers of the supplied response, if any. For example, if the\n+\t * response headers contain <tt>Content-Type: application/xml;charset=UTF-8</tt>, this method will return\n+\t * {@link StandardCharsets#UTF_8 UTF-8} as the character encoding.\n+\t * \n+\t * @param response the response to get the character encoding from.\n+\t * @return the response character encoding, {@link Optional#empty()} if it can not be determined.\n+\t */\n+\tOptional<Charset> getResponseCharset(HttpResponse response) {\n+\t\tHeader[] headers = response.getHeaders(\"Content-Type\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9fe9cecf370cbc8b2e22561ad9a4abbd2076d16"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM2MTcwNQ==", "bodyText": "Maybe introduce a variable for the used Charset?", "url": "https://github.com/eclipse/rdf4j/pull/2617#discussion_r511361705", "createdAt": "2020-10-24T09:28:00Z", "author": {"login": "erikgb"}, "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/SPARQLProtocolSession.java", "diffHunk": "@@ -880,6 +866,31 @@ protected void getRDF(HttpUriRequest method, RDFHandler handler, boolean require\n \t\t}\n \t}\n \n+\t/**\n+\t * Pass through response content directly to the supplied sink if possible.\n+\t * \n+\t * @param response       the {@link HttpResponse} with the content.\n+\t * @param responseFormat the format of the response.\n+\t * @param sink           the {@link Sink} to pass the content through to.\n+\t * @return {@code true} if the content was passed through, {@code false} otherwise.\n+\t * @throws IOException\n+\t */\n+\tprivate boolean passThrough(HttpResponse response, FileFormat responseFormat, Sink sink)\n+\t\t\tthrows IOException {\n+\t\tif (responseFormat.equals(sink.getFileFormat())) {\n+\t\t\tInputStream in = response.getEntity().getContent();\n+\t\t\tif (sink instanceof CharSink) {\n+\t\t\t\tIOUtils.copy(in, ((CharSink) sink).getWriter(),\n+\t\t\t\t\t\tgetResponseCharset(response).orElse(responseFormat.getCharset()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9fe9cecf370cbc8b2e22561ad9a4abbd2076d16"}, "originalPosition": 97}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d2b5eb853e38abe40df78f01deaa1181982fae0", "author": {"user": {"login": "jeenbroekstra", "name": "Jeen Broekstra"}}, "url": "https://github.com/eclipse/rdf4j/commit/9d2b5eb853e38abe40df78f01deaa1181982fae0", "committedDate": "2020-10-25T00:10:55Z", "message": "GH-1942 make final because it is internally injected in the JsonGenerator"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MzM1MzUx", "url": "https://github.com/eclipse/rdf4j/pull/2617#pullrequestreview-516335351", "createdAt": "2020-10-25T08:29:34Z", "commit": {"oid": "9d2b5eb853e38abe40df78f01deaa1181982fae0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 77, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}