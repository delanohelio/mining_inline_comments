{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1MTIxNjU2", "number": 2294, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzoxMDozNlrOEA-OcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwMTo1NjowMVrOEBOhZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDU0OTYwOnYy", "diffSide": "RIGHT", "path": "core/rio/rdfxml/pom.xml", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzoxMDozNlrOGclQbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxNzoxMTo1NFrOGc6Jkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYyMzcyNA==", "bodyText": "Could you explain a little bit why the rio-turtle dependency is needed here ? I would assume the code also compiles without it...", "url": "https://github.com/eclipse/rdf4j/pull/2294#discussion_r432623724", "createdAt": "2020-05-29T17:10:36Z", "author": {"login": "barthanssens"}, "path": "core/rio/rdfxml/pom.xml", "diffHunk": "@@ -61,5 +61,11 @@\n \t\t\t<version>${project.version}</version>\n \t\t\t<scope>test</scope>\n \t\t</dependency>\n-\t</dependencies>\n+        <dependency>\n+            <groupId>org.eclipse.rdf4j</groupId>\n+            <artifactId>rdf4j-rio-turtle</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a93cb8194e1a5ec931df63925b7fac6e02740505"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYzNDAzNw==", "bodyText": "Yes, it is compiling without it, but this was added automatically, we did not change anything in the rio-turtle files. We only added our code in the rio-util and helper files (RDFXMLPrettyWriter and BasicWriterSettings) only.", "url": "https://github.com/eclipse/rdf4j/pull/2294#discussion_r432634037", "createdAt": "2020-05-29T17:30:13Z", "author": {"login": "iamaryananand"}, "path": "core/rio/rdfxml/pom.xml", "diffHunk": "@@ -61,5 +61,11 @@\n \t\t\t<version>${project.version}</version>\n \t\t\t<scope>test</scope>\n \t\t</dependency>\n-\t</dependencies>\n+        <dependency>\n+            <groupId>org.eclipse.rdf4j</groupId>\n+            <artifactId>rdf4j-rio-turtle</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYyMzcyNA=="}, "originalCommit": {"oid": "a93cb8194e1a5ec931df63925b7fac6e02740505"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc5MjAxMQ==", "bodyText": "Added automatically - that's really strange. Can I ask what editor you are using?", "url": "https://github.com/eclipse/rdf4j/pull/2294#discussion_r432792011", "createdAt": "2020-05-30T00:35:44Z", "author": {"login": "jeenbroekstra"}, "path": "core/rio/rdfxml/pom.xml", "diffHunk": "@@ -61,5 +61,11 @@\n \t\t\t<version>${project.version}</version>\n \t\t\t<scope>test</scope>\n \t\t</dependency>\n-\t</dependencies>\n+        <dependency>\n+            <groupId>org.eclipse.rdf4j</groupId>\n+            <artifactId>rdf4j-rio-turtle</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYyMzcyNA=="}, "originalCommit": {"oid": "a93cb8194e1a5ec931df63925b7fac6e02740505"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgwOTc3NQ==", "bodyText": "IntelliJ IDEA Community Edition 2020.1.1 x64", "url": "https://github.com/eclipse/rdf4j/pull/2294#discussion_r432809775", "createdAt": "2020-05-30T04:38:42Z", "author": {"login": "iamaryananand"}, "path": "core/rio/rdfxml/pom.xml", "diffHunk": "@@ -61,5 +61,11 @@\n \t\t\t<version>${project.version}</version>\n \t\t\t<scope>test</scope>\n \t\t</dependency>\n-\t</dependencies>\n+        <dependency>\n+            <groupId>org.eclipse.rdf4j</groupId>\n+            <artifactId>rdf4j-rio-turtle</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYyMzcyNA=="}, "originalCommit": {"oid": "a93cb8194e1a5ec931df63925b7fac6e02740505"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk2MDg2MA==", "bodyText": "Strange, could you perhaps manually remove this, and see what happens ?", "url": "https://github.com/eclipse/rdf4j/pull/2294#discussion_r432960860", "createdAt": "2020-05-31T16:06:01Z", "author": {"login": "barthanssens"}, "path": "core/rio/rdfxml/pom.xml", "diffHunk": "@@ -61,5 +61,11 @@\n \t\t\t<version>${project.version}</version>\n \t\t\t<scope>test</scope>\n \t\t</dependency>\n-\t</dependencies>\n+        <dependency>\n+            <groupId>org.eclipse.rdf4j</groupId>\n+            <artifactId>rdf4j-rio-turtle</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYyMzcyNA=="}, "originalCommit": {"oid": "a93cb8194e1a5ec931df63925b7fac6e02740505"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk2NjAzNA==", "bodyText": "This dependency had to be added back because of the Class<?> arrangedWriterCls = Class.forName(\"org.eclipse.rdf4j.rio.turtle.ArrangedWriter\"); line, without adding the dependency the code was not running.", "url": "https://github.com/eclipse/rdf4j/pull/2294#discussion_r432966034", "createdAt": "2020-05-31T17:11:54Z", "author": {"login": "iamaryananand"}, "path": "core/rio/rdfxml/pom.xml", "diffHunk": "@@ -61,5 +61,11 @@\n \t\t\t<version>${project.version}</version>\n \t\t\t<scope>test</scope>\n \t\t</dependency>\n-\t</dependencies>\n+        <dependency>\n+            <groupId>org.eclipse.rdf4j</groupId>\n+            <artifactId>rdf4j-rio-turtle</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYyMzcyNA=="}, "originalCommit": {"oid": "a93cb8194e1a5ec931df63925b7fac6e02740505"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTYzMTgzOnYy", "diffSide": "RIGHT", "path": "core/rio/api/src/main/java/org/eclipse/rdf4j/rio/helpers/BasicWriterSettings.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwMToyMToxNFrOGcv1RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxNDozNDozN1rOGc5XbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc5Njk5Ng==", "bodyText": "I like this, but perhaps a better place for this is XMLWriterSettings, since this configuration option is only relevant for XML.", "url": "https://github.com/eclipse/rdf4j/pull/2294#discussion_r432796996", "createdAt": "2020-05-30T01:21:14Z", "author": {"login": "jeenbroekstra"}, "path": "core/rio/api/src/main/java/org/eclipse/rdf4j/rio/helpers/BasicWriterSettings.java", "diffHunk": "@@ -113,6 +113,17 @@\n \t\t\t\"org.eclipse.rdf4j.rio.encode_rdf_star\",\n \t\t\t\"Encodes RDF* triples to special IRIs for compatibility with RDF\", Boolean.TRUE);\n \n+\t/**\n+\t * Boolean setting for writer to determine whether it should remove the rdf:nodeID attribute from blank nodes.\n+\t * <p>\n+\t * Defaults to False.\n+\t * <p>\n+\t * Can be overridden by setting system property {@code org.eclipse.rdf4j.rio.compact_xml}.\n+\t */\n+\tpublic static final RioSetting<Boolean> COMPACT_XML = new BooleanRioSetting(\n+\t\t\t\"org.eclipse.rdf4j.rio.compact_xml\",\n+\t\t\t\"To generate a compact XML i.e. without Blank Node ID.\", Boolean.FALSE);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a93cb8194e1a5ec931df63925b7fac6e02740505"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk1MzE5Nw==", "bodyText": "sure.", "url": "https://github.com/eclipse/rdf4j/pull/2294#discussion_r432953197", "createdAt": "2020-05-31T14:34:37Z", "author": {"login": "REVERB283"}, "path": "core/rio/api/src/main/java/org/eclipse/rdf4j/rio/helpers/BasicWriterSettings.java", "diffHunk": "@@ -113,6 +113,17 @@\n \t\t\t\"org.eclipse.rdf4j.rio.encode_rdf_star\",\n \t\t\t\"Encodes RDF* triples to special IRIs for compatibility with RDF\", Boolean.TRUE);\n \n+\t/**\n+\t * Boolean setting for writer to determine whether it should remove the rdf:nodeID attribute from blank nodes.\n+\t * <p>\n+\t * Defaults to False.\n+\t * <p>\n+\t * Can be overridden by setting system property {@code org.eclipse.rdf4j.rio.compact_xml}.\n+\t */\n+\tpublic static final RioSetting<Boolean> COMPACT_XML = new BooleanRioSetting(\n+\t\t\t\"org.eclipse.rdf4j.rio.compact_xml\",\n+\t\t\t\"To generate a compact XML i.e. without Blank Node ID.\", Boolean.FALSE);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc5Njk5Ng=="}, "originalCommit": {"oid": "a93cb8194e1a5ec931df63925b7fac6e02740505"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzE1MjU4OnYy", "diffSide": "RIGHT", "path": "core/rio/rdfxml/src/test/java/org/eclipse/rdf4j/rio/rdfxml/RDFXMLPrettyWriterTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwMDo0NDo0NlrOGc8YTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwNjowMzozOFrOGgCHJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAwMjU3Mg==", "bodyText": "I'm not sure why you are using reflection here. As far as I can tell, you can simply do this:\nArrangedWriter arrangedXmlWriter = new ArrangedWriter(rdfXmlWriter);\n\nBut to be honest, I think you can get rid of using the ArrangedWriter as part of this test completely, as it's not really necessary for testing that the COMPACT_XML setting works.", "url": "https://github.com/eclipse/rdf4j/pull/2294#discussion_r433002572", "createdAt": "2020-06-01T00:44:46Z", "author": {"login": "jeenbroekstra"}, "path": "core/rio/rdfxml/src/test/java/org/eclipse/rdf4j/rio/rdfxml/RDFXMLPrettyWriterTest.java", "diffHunk": "@@ -104,6 +109,58 @@ public void outOfSequenceItemsAreNotAbbreviated() throws RDFHandlerException, IO\n \t\tassertEquals(Arrays.asList(\"<rdf:RDF\", \"<rdf:Bag\", \"<rdf:_0\", \"<rdf:_2\"), rdfLines);\n \t}\n \n+\t@Test\n+\tpublic void compactXMLPrintTest() throws RDFHandlerException, IOException, ClassNotFoundException,\n+\t\t\tNoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {\n+\t\tOutputStream outputStream = new ByteArrayOutputStream();\n+\t\tPrintStream printStream = new PrintStream(outputStream);\n+\t\tSystem.setOut(printStream);\n+\n+\t\tRDFWriter rdfXmlWriter = new RDFXMLPrettyWriter(System.out);\n+\n+\t\tClass<?> arrangedWriterCls = Class.forName(\"org.eclipse.rdf4j.rio.turtle.ArrangedWriter\");\n+\t\tConstructor<?> constructor = arrangedWriterCls.getConstructor(RDFWriter.class);\n+\t\tconstructor.setAccessible(true);\n+\t\tRDFWriter arrangedXmlWriter = (RDFWriter) constructor.newInstance(rdfXmlWriter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "344461a347234fbfca5befa25a0a9bbc3f41e27d"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc3OTc0MA==", "bodyText": "We've cleared some clutter (reflections) and are using just the normal instances but I don't understand why do you want us to remove the arrangedwriter part. I mean to check if the setting really works I believe we have to compare the output with the expected one. If you can clear this a bit more, we'll be really grateful.", "url": "https://github.com/eclipse/rdf4j/pull/2294#discussion_r435779740", "createdAt": "2020-06-05T08:48:31Z", "author": {"login": "REVERB283"}, "path": "core/rio/rdfxml/src/test/java/org/eclipse/rdf4j/rio/rdfxml/RDFXMLPrettyWriterTest.java", "diffHunk": "@@ -104,6 +109,58 @@ public void outOfSequenceItemsAreNotAbbreviated() throws RDFHandlerException, IO\n \t\tassertEquals(Arrays.asList(\"<rdf:RDF\", \"<rdf:Bag\", \"<rdf:_0\", \"<rdf:_2\"), rdfLines);\n \t}\n \n+\t@Test\n+\tpublic void compactXMLPrintTest() throws RDFHandlerException, IOException, ClassNotFoundException,\n+\t\t\tNoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {\n+\t\tOutputStream outputStream = new ByteArrayOutputStream();\n+\t\tPrintStream printStream = new PrintStream(outputStream);\n+\t\tSystem.setOut(printStream);\n+\n+\t\tRDFWriter rdfXmlWriter = new RDFXMLPrettyWriter(System.out);\n+\n+\t\tClass<?> arrangedWriterCls = Class.forName(\"org.eclipse.rdf4j.rio.turtle.ArrangedWriter\");\n+\t\tConstructor<?> constructor = arrangedWriterCls.getConstructor(RDFWriter.class);\n+\t\tconstructor.setAccessible(true);\n+\t\tRDFWriter arrangedXmlWriter = (RDFWriter) constructor.newInstance(rdfXmlWriter);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAwMjU3Mg=="}, "originalCommit": {"oid": "344461a347234fbfca5befa25a0a9bbc3f41e27d"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI0MjIxNA==", "bodyText": "We've cleared some clutter (reflections) and are using just the normal instances but I don't understand why do you want us to remove the arrangedwriter part. I mean to check if the setting really works I believe we have to compare the output with the expected one. If you can clear this a bit more, we'll be really grateful.\n\nMy point is that you don't need the ArrangedWriter to test that. The RDFXMLPrettyWriter is expected to work if the input statements are sent in the correct order. All you really need is a  List with statements in the correct order, feed that list into the RDFXMLPrettyWriter, and then check if the output is as you expect.", "url": "https://github.com/eclipse/rdf4j/pull/2294#discussion_r436242214", "createdAt": "2020-06-06T06:03:38Z", "author": {"login": "jeenbroekstra"}, "path": "core/rio/rdfxml/src/test/java/org/eclipse/rdf4j/rio/rdfxml/RDFXMLPrettyWriterTest.java", "diffHunk": "@@ -104,6 +109,58 @@ public void outOfSequenceItemsAreNotAbbreviated() throws RDFHandlerException, IO\n \t\tassertEquals(Arrays.asList(\"<rdf:RDF\", \"<rdf:Bag\", \"<rdf:_0\", \"<rdf:_2\"), rdfLines);\n \t}\n \n+\t@Test\n+\tpublic void compactXMLPrintTest() throws RDFHandlerException, IOException, ClassNotFoundException,\n+\t\t\tNoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {\n+\t\tOutputStream outputStream = new ByteArrayOutputStream();\n+\t\tPrintStream printStream = new PrintStream(outputStream);\n+\t\tSystem.setOut(printStream);\n+\n+\t\tRDFWriter rdfXmlWriter = new RDFXMLPrettyWriter(System.out);\n+\n+\t\tClass<?> arrangedWriterCls = Class.forName(\"org.eclipse.rdf4j.rio.turtle.ArrangedWriter\");\n+\t\tConstructor<?> constructor = arrangedWriterCls.getConstructor(RDFWriter.class);\n+\t\tconstructor.setAccessible(true);\n+\t\tRDFWriter arrangedXmlWriter = (RDFWriter) constructor.newInstance(rdfXmlWriter);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAwMjU3Mg=="}, "originalCommit": {"oid": "344461a347234fbfca5befa25a0a9bbc3f41e27d"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzE1OTIyOnYy", "diffSide": "RIGHT", "path": "core/rio/rdfxml/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwMDo1MjozMFrOGc8b8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwMDo1MjozMFrOGc8b8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAwMzUwNQ==", "bodyText": "As I understand it, this dependency is necessary because you are using the ArrangedWriter class as part of your test. I don't really think you need to use it as part of your test (see my comments on the test code). If you agree with that and remove it from the test, you can also remove this dependency again.  At the very least though, the version number will need to be changed (to ${project.version}) and the scope will need to be changed (to test).", "url": "https://github.com/eclipse/rdf4j/pull/2294#discussion_r433003505", "createdAt": "2020-06-01T00:52:30Z", "author": {"login": "jeenbroekstra"}, "path": "core/rio/rdfxml/pom.xml", "diffHunk": "@@ -61,5 +61,11 @@\n \t\t\t<version>${project.version}</version>\n \t\t\t<scope>test</scope>\n \t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.eclipse.rdf4j</groupId>\n+\t\t\t<artifactId>rdf4j-rio-turtle</artifactId>\n+\t\t\t<version>3.2.2-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "344461a347234fbfca5befa25a0a9bbc3f41e27d"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzE3MDE5OnYy", "diffSide": "RIGHT", "path": "core/rio/rdfxml/src/test/java/org/eclipse/rdf4j/rio/rdfxml/RDFXMLPrettyWriterTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwMTowNjoyOVrOGc8ihA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwMTowNjoyOVrOGc8ihA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAwNTE4OA==", "bodyText": "Like I said above: I don't really think you need this shuffle on the order of statements here: your test should only be about the improvement to the RDFXMLPrettyWriter that you did. Making sure statements are always in the correct order is not part of that class' job. So by doing this shuffle, all you're really testing is that ArrangedWriter is doing its job - and that should not be part of this unit test.\nThe only thing you should be testing here is that if statements are fed in in the correct order, and the COMPACT_XML setting is turned on, the output is as expected. So I'd suggest that instead of creating a Model and then shuffling that Model, you just create two Statement using the ValueFactory, then add those two statements to a simple ArrayList in the correct order, and then pass that Arraylist to the RDFXMLPrettyWriter.", "url": "https://github.com/eclipse/rdf4j/pull/2294#discussion_r433005188", "createdAt": "2020-06-01T01:06:29Z", "author": {"login": "jeenbroekstra"}, "path": "core/rio/rdfxml/src/test/java/org/eclipse/rdf4j/rio/rdfxml/RDFXMLPrettyWriterTest.java", "diffHunk": "@@ -104,6 +109,58 @@ public void outOfSequenceItemsAreNotAbbreviated() throws RDFHandlerException, IO\n \t\tassertEquals(Arrays.asList(\"<rdf:RDF\", \"<rdf:Bag\", \"<rdf:_0\", \"<rdf:_2\"), rdfLines);\n \t}\n \n+\t@Test\n+\tpublic void compactXMLPrintTest() throws RDFHandlerException, IOException, ClassNotFoundException,\n+\t\t\tNoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {\n+\t\tOutputStream outputStream = new ByteArrayOutputStream();\n+\t\tPrintStream printStream = new PrintStream(outputStream);\n+\t\tSystem.setOut(printStream);\n+\n+\t\tRDFWriter rdfXmlWriter = new RDFXMLPrettyWriter(System.out);\n+\n+\t\tClass<?> arrangedWriterCls = Class.forName(\"org.eclipse.rdf4j.rio.turtle.ArrangedWriter\");\n+\t\tConstructor<?> constructor = arrangedWriterCls.getConstructor(RDFWriter.class);\n+\t\tconstructor.setAccessible(true);\n+\t\tRDFWriter arrangedXmlWriter = (RDFWriter) constructor.newInstance(rdfXmlWriter);\n+\n+\t\tarrangedXmlWriter.set(BasicWriterSettings.PRETTY_PRINT, false);\n+\t\tarrangedXmlWriter.set(BasicWriterSettings.INLINE_BLANK_NODES, true);\n+\t\tarrangedXmlWriter.set(XMLWriterSettings.COMPACT_XML, true);\n+\n+\t\tValueFactory vf = SimpleValueFactory.getInstance();\n+\n+\t\tIRI subject = vf.createIRI(\"http://example.org/subject\");\n+\t\tIRI relation = vf.createIRI(\"http://example.org/relation\");\n+\n+\t\tLinkedHashModel model = new LinkedHashModel();\n+\t\tBNode bnode = vf.createBNode(\"bnode\");\n+\n+\t\tmodel.add(subject, relation, bnode);\n+\t\tmodel.add(bnode, RDFS.LABEL, vf.createLiteral(\"the bnode\"));\n+\t\tmodel.setNamespace(RDFS.NS);\n+\t\tmodel.setNamespace(\"ex\", \"http://example.org/\");\n+\n+\t\tList<Statement> shuffledStatements = new ArrayList<>(model);\n+\t\tCollections.shuffle(shuffledStatements);\n+\t\tRio.write(shuffledStatements, arrangedXmlWriter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "344461a347234fbfca5befa25a0a9bbc3f41e27d"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzE4MDc2OnYy", "diffSide": "RIGHT", "path": "core/rio/rdfxml/src/test/java/org/eclipse/rdf4j/rio/rdfxml/RDFXMLPrettyWriterTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwMToxODoyNVrOGc8o5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwMToxODoyNVrOGc8o5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAwNjgyMg==", "bodyText": "Rather than redirecting System.out, why not just give the outputStream argument directly to the RDFXMlPrettyWriter?", "url": "https://github.com/eclipse/rdf4j/pull/2294#discussion_r433006822", "createdAt": "2020-06-01T01:18:25Z", "author": {"login": "jeenbroekstra"}, "path": "core/rio/rdfxml/src/test/java/org/eclipse/rdf4j/rio/rdfxml/RDFXMLPrettyWriterTest.java", "diffHunk": "@@ -104,6 +109,58 @@ public void outOfSequenceItemsAreNotAbbreviated() throws RDFHandlerException, IO\n \t\tassertEquals(Arrays.asList(\"<rdf:RDF\", \"<rdf:Bag\", \"<rdf:_0\", \"<rdf:_2\"), rdfLines);\n \t}\n \n+\t@Test\n+\tpublic void compactXMLPrintTest() throws RDFHandlerException, IOException, ClassNotFoundException,\n+\t\t\tNoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {\n+\t\tOutputStream outputStream = new ByteArrayOutputStream();\n+\t\tPrintStream printStream = new PrintStream(outputStream);\n+\t\tSystem.setOut(printStream);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "344461a347234fbfca5befa25a0a9bbc3f41e27d"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzE5NjUwOnYy", "diffSide": "RIGHT", "path": "core/rio/rdfxml/src/test/java/org/eclipse/rdf4j/rio/rdfxml/RDFXMLPrettyWriterTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwMTozNDozOFrOGc8x4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwMTozNDozOFrOGc8x4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAwOTEyMQ==", "bodyText": "If you get rid of using the ArrangedWriter, you can also remove the first two settings, and just set the third one (but directly on the rdfXmlWriter, of course).", "url": "https://github.com/eclipse/rdf4j/pull/2294#discussion_r433009121", "createdAt": "2020-06-01T01:34:38Z", "author": {"login": "jeenbroekstra"}, "path": "core/rio/rdfxml/src/test/java/org/eclipse/rdf4j/rio/rdfxml/RDFXMLPrettyWriterTest.java", "diffHunk": "@@ -104,6 +109,58 @@ public void outOfSequenceItemsAreNotAbbreviated() throws RDFHandlerException, IO\n \t\tassertEquals(Arrays.asList(\"<rdf:RDF\", \"<rdf:Bag\", \"<rdf:_0\", \"<rdf:_2\"), rdfLines);\n \t}\n \n+\t@Test\n+\tpublic void compactXMLPrintTest() throws RDFHandlerException, IOException, ClassNotFoundException,\n+\t\t\tNoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {\n+\t\tOutputStream outputStream = new ByteArrayOutputStream();\n+\t\tPrintStream printStream = new PrintStream(outputStream);\n+\t\tSystem.setOut(printStream);\n+\n+\t\tRDFWriter rdfXmlWriter = new RDFXMLPrettyWriter(System.out);\n+\n+\t\tClass<?> arrangedWriterCls = Class.forName(\"org.eclipse.rdf4j.rio.turtle.ArrangedWriter\");\n+\t\tConstructor<?> constructor = arrangedWriterCls.getConstructor(RDFWriter.class);\n+\t\tconstructor.setAccessible(true);\n+\t\tRDFWriter arrangedXmlWriter = (RDFWriter) constructor.newInstance(rdfXmlWriter);\n+\n+\t\tarrangedXmlWriter.set(BasicWriterSettings.PRETTY_PRINT, false);\n+\t\tarrangedXmlWriter.set(BasicWriterSettings.INLINE_BLANK_NODES, true);\n+\t\tarrangedXmlWriter.set(XMLWriterSettings.COMPACT_XML, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "344461a347234fbfca5befa25a0a9bbc3f41e27d"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzIxOTU4OnYy", "diffSide": "RIGHT", "path": "core/rio/api/src/main/java/org/eclipse/rdf4j/rio/helpers/XMLWriterSettings.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwMTo1NjowMVrOGc8_TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwODozNjo0MFrOGflfAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAxMjU1Nw==", "bodyText": "I just had another look at this, and at the issue, and I realized that this new setting is not really necessary, as there already exists a setting for this: BasicWriterSettings.INLINE_BLANK_NODES.\nWhy not use that setting to check in RDFXMLPrettyWriter, and remove this new setting?", "url": "https://github.com/eclipse/rdf4j/pull/2294#discussion_r433012557", "createdAt": "2020-06-01T01:56:01Z", "author": {"login": "jeenbroekstra"}, "path": "core/rio/api/src/main/java/org/eclipse/rdf4j/rio/helpers/XMLWriterSettings.java", "diffHunk": "@@ -57,6 +57,17 @@\n \tpublic static final RioSetting<Boolean> USE_SINGLE_QUOTES = new BooleanRioSetting(\n \t\t\t\"org.eclipse.rdf4j.rio.use_single_quotes\", \"Use single quotes\", Boolean.FALSE);\n \n+\t/**\n+\t * Boolean setting for writer to determine whether it should remove the rdf:nodeID attribute from blank nodes.\n+\t * <p>\n+\t * Defaults to False.\n+\t * <p>\n+\t * Can be overridden by setting system property {@code org.eclipse.rdf4j.rio.compact_xml}.\n+\t */\n+\tpublic static final RioSetting<Boolean> COMPACT_XML = new BooleanRioSetting(\n+\t\t\t\"org.eclipse.rdf4j.rio.compact_xml\",\n+\t\t\t\"To generate a compact XML i.e. without Blank Node ID.\", Boolean.FALSE);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "344461a347234fbfca5befa25a0a9bbc3f41e27d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE2MDY5OA==", "bodyText": "Well I didn't quite understand the what this setting INLINE_BLANK_NODES is all about. While understanding the issue I went through the entire link that @barthanssens shared and that contained some test cases that the author was trying to model this problem and I took help from that. But If you're saying that this can be achieved using INLINE_BLANK_NODES settings only then I think I can do that.\nMoreover I had a doubt regarding the checks: Is it necessary that the checks will succeed only if @iamaryananand (author of the pull request) will do the commit?", "url": "https://github.com/eclipse/rdf4j/pull/2294#discussion_r433160698", "createdAt": "2020-06-01T10:36:12Z", "author": {"login": "REVERB283"}, "path": "core/rio/api/src/main/java/org/eclipse/rdf4j/rio/helpers/XMLWriterSettings.java", "diffHunk": "@@ -57,6 +57,17 @@\n \tpublic static final RioSetting<Boolean> USE_SINGLE_QUOTES = new BooleanRioSetting(\n \t\t\t\"org.eclipse.rdf4j.rio.use_single_quotes\", \"Use single quotes\", Boolean.FALSE);\n \n+\t/**\n+\t * Boolean setting for writer to determine whether it should remove the rdf:nodeID attribute from blank nodes.\n+\t * <p>\n+\t * Defaults to False.\n+\t * <p>\n+\t * Can be overridden by setting system property {@code org.eclipse.rdf4j.rio.compact_xml}.\n+\t */\n+\tpublic static final RioSetting<Boolean> COMPACT_XML = new BooleanRioSetting(\n+\t\t\t\"org.eclipse.rdf4j.rio.compact_xml\",\n+\t\t\t\"To generate a compact XML i.e. without Blank Node ID.\", Boolean.FALSE);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAxMjU1Nw=="}, "originalCommit": {"oid": "344461a347234fbfca5befa25a0a9bbc3f41e27d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU2NjQzNQ==", "bodyText": "Well I didn't quite understand the what this setting INLINE_BLANK_NODES is all about. While understanding the issue I went through the entire link that @barthanssens shared and that contained some test cases that the author was trying to model this problem and I took help from that. But If you're saying that this can be achieved using INLINE_BLANK_NODES settings only then I think I can do that.\n\nNot a problem, it took me a while to remember this as well. But yes, I believe we can reuse the existing setting.\n\nMoreover I had a doubt regarding the checks: Is it necessary that the checks will succeed only if @iamaryananand (author of the pull request) will do the commit?\n\nIf you mean the sign off check: it doesn't matter who created the pull request, it looks at the commits inside the pull request. Each individual commit that you add needs to be signed off by the author of that commit, and that author needs to be on record as having signed the Eclipse Contributor Agreement. So if you add a commit, you need to sign it off, if @iamaryananand adds a commit, they need to sign off that commit.\nIf you are interested in learning why we need this: our project is part of the Eclipse Foundation, which requires a formal record of each contribution, who has created it, and that that person has given us license to use their contribution. As an open-source contributor you still own your own code, so we need written evidence that you given us permission to reuse it. In other words, we need to have an audit trail for Intellectual Property (IP).", "url": "https://github.com/eclipse/rdf4j/pull/2294#discussion_r433566435", "createdAt": "2020-06-02T01:04:06Z", "author": {"login": "jeenbroekstra"}, "path": "core/rio/api/src/main/java/org/eclipse/rdf4j/rio/helpers/XMLWriterSettings.java", "diffHunk": "@@ -57,6 +57,17 @@\n \tpublic static final RioSetting<Boolean> USE_SINGLE_QUOTES = new BooleanRioSetting(\n \t\t\t\"org.eclipse.rdf4j.rio.use_single_quotes\", \"Use single quotes\", Boolean.FALSE);\n \n+\t/**\n+\t * Boolean setting for writer to determine whether it should remove the rdf:nodeID attribute from blank nodes.\n+\t * <p>\n+\t * Defaults to False.\n+\t * <p>\n+\t * Can be overridden by setting system property {@code org.eclipse.rdf4j.rio.compact_xml}.\n+\t */\n+\tpublic static final RioSetting<Boolean> COMPACT_XML = new BooleanRioSetting(\n+\t\t\t\"org.eclipse.rdf4j.rio.compact_xml\",\n+\t\t\t\"To generate a compact XML i.e. without Blank Node ID.\", Boolean.FALSE);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAxMjU1Nw=="}, "originalCommit": {"oid": "344461a347234fbfca5befa25a0a9bbc3f41e27d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc3MzE4Nw==", "bodyText": "Okay! So we managed to delete the CompactXML setting as you requested and are using the existing INLINE_BLANK_NODES for our purpose.", "url": "https://github.com/eclipse/rdf4j/pull/2294#discussion_r435773187", "createdAt": "2020-06-05T08:36:40Z", "author": {"login": "REVERB283"}, "path": "core/rio/api/src/main/java/org/eclipse/rdf4j/rio/helpers/XMLWriterSettings.java", "diffHunk": "@@ -57,6 +57,17 @@\n \tpublic static final RioSetting<Boolean> USE_SINGLE_QUOTES = new BooleanRioSetting(\n \t\t\t\"org.eclipse.rdf4j.rio.use_single_quotes\", \"Use single quotes\", Boolean.FALSE);\n \n+\t/**\n+\t * Boolean setting for writer to determine whether it should remove the rdf:nodeID attribute from blank nodes.\n+\t * <p>\n+\t * Defaults to False.\n+\t * <p>\n+\t * Can be overridden by setting system property {@code org.eclipse.rdf4j.rio.compact_xml}.\n+\t */\n+\tpublic static final RioSetting<Boolean> COMPACT_XML = new BooleanRioSetting(\n+\t\t\t\"org.eclipse.rdf4j.rio.compact_xml\",\n+\t\t\t\"To generate a compact XML i.e. without Blank Node ID.\", Boolean.FALSE);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAxMjU1Nw=="}, "originalCommit": {"oid": "344461a347234fbfca5befa25a0a9bbc3f41e27d"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1419, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}