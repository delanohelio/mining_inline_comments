{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1MDg1Nzky", "number": 2378, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMToyOTowM1rOEROdLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMTozMToyMFrOEROf0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDk4MDkzOnYy", "diffSide": "RIGHT", "path": "core/sail/lucene-api/src/main/java/org/eclipse/rdf4j/sail/lucene/LuceneSail.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMToyOTowM1rOG1054A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMTozMzowOVrOG15pLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA5NDQ5Ng==", "bodyText": "Just a a general note, the whole code above should actually be using a peeking iterator. It's iterating over all the statements in the database and grouping by subject. It's doing it in a streaming fashion, which makes me assume that the iterator it has against the database is sorted by subject (which would take a massive amount of memory!). And it needs to check the next statement to see if it's got a different subject so it can add all the statements it's gathered for that subject to the lucene index as a document. Is that correct?\nI'm not proposing that we need to actually rewrite the code.\nCould you check that !statements.empty() as well, so we don't add the last document twice?", "url": "https://github.com/eclipse/rdf4j/pull/2378#discussion_r459094496", "createdAt": "2020-07-22T21:29:03Z", "author": {"login": "hmottestad"}, "path": "core/sail/lucene-api/src/main/java/org/eclipse/rdf4j/sail/lucene/LuceneSail.java", "diffHunk": "@@ -551,6 +551,15 @@ public void shutDown() {\n \t\t\t\t\t\t}\n \t\t\t\t\t\tstatements.add(vf.createStatement(r, p, o, c));\n \t\t\t\t\t}\n+\n+\t\t\t\t\t// make sure to index statements for last resource\n+\t\t\t\t\tif (current != null) {\n+\t\t\t\t\t\tif (logger.isDebugEnabled()) {\n+\t\t\t\t\t\t\tlogger.debug(\"reindexing resource \" + current);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\t// commit\n+\t\t\t\t\t\tluceneIndex.addDocuments(current, statements);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76a6a30aff091de6fe548e34220c19348636cf37"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE3MjE0Mg==", "bodyText": "Just a a general note, the whole code above should actually be using a peeking iterator. It's iterating over all the statements in the database and grouping by subject. It's doing it in a streaming fashion, which makes me assume that the iterator it has against the database is sorted by subject (which would take a massive amount of memory!). And it needs to check the next statement to see if it's got a different subject so it can add all the statements it's gathered for that subject to the lucene index as a document. Is that correct?\n\nYeah I think that sums it up - and yes the result is sorted by subject (this is specified in the actual reindex query). This code is pretty old, and I agree that there are likely far more efficient ways to trigger a reindexing.\n\nI'm not proposing that we need to actually rewrite the code.\n\nWorth logging an issue for? The problem is that none of us have LuceneSail maintenance/improvements high on our priority list.\n\nCould you check that !statements.empty() as well, so we don't add the last document twice?\n\nGood point. I'll add a check for that.", "url": "https://github.com/eclipse/rdf4j/pull/2378#discussion_r459172142", "createdAt": "2020-07-23T01:33:09Z", "author": {"login": "jeenbroekstra"}, "path": "core/sail/lucene-api/src/main/java/org/eclipse/rdf4j/sail/lucene/LuceneSail.java", "diffHunk": "@@ -551,6 +551,15 @@ public void shutDown() {\n \t\t\t\t\t\t}\n \t\t\t\t\t\tstatements.add(vf.createStatement(r, p, o, c));\n \t\t\t\t\t}\n+\n+\t\t\t\t\t// make sure to index statements for last resource\n+\t\t\t\t\tif (current != null) {\n+\t\t\t\t\t\tif (logger.isDebugEnabled()) {\n+\t\t\t\t\t\t\tlogger.debug(\"reindexing resource \" + current);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\t// commit\n+\t\t\t\t\t\tluceneIndex.addDocuments(current, statements);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA5NDQ5Ng=="}, "originalCommit": {"oid": "76a6a30aff091de6fe548e34220c19348636cf37"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDk4NzY5OnYy", "diffSide": "RIGHT", "path": "testsuites/lucene/src/main/java/org/eclipse/rdf4j/sail/lucene/AbstractLuceneSailTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMTozMToyMFrOG10-MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMTozMToyMFrOG10-MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA5NTYwMA==", "bodyText": "ps, explicit initialization is now optional", "url": "https://github.com/eclipse/rdf4j/pull/2378#discussion_r459095600", "createdAt": "2020-07-22T21:31:20Z", "author": {"login": "hmottestad"}, "path": "testsuites/lucene/src/main/java/org/eclipse/rdf4j/sail/lucene/AbstractLuceneSailTest.java", "diffHunk": "@@ -121,7 +121,7 @@ public void setUp() throws Exception {\n \n \t\t// create a Repository wrapping the LuceneSail\n \t\trepository = new SailRepository(sail);\n-\t\trepository.initialize();\n+\t\trepository.init();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76a6a30aff091de6fe548e34220c19348636cf37"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1451, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}