{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2NzA5MTI5", "number": 2395, "title": "GH-2373 update function howto and example code to show use of TripleSource", "bodyText": "GitHub issue resolved: #2373 \nBriefly describe the changes proposed in this PR:\n\nadded code example of a function that uses TripleSource to inspect the database.\nadded a paragraph + link in the custom function Howto\nupdated pom in examples section to use RDF4J 3.3.0 (about time too, it was still on 2.ancient)\n\n\nPR Author Checklist (see the contributor guidelines for more details):\n\n my pull request is self-contained\n I've added tests for the changes I made\n I've applied code formatting (you can use mvn process-resources to format from the command line)\n every commit message starts with the issue number (GH-xxxx) followed by a meaningful description of the change\n every commit has been signed off\n\nNote: we merge all feature pull requests using squash and merge. See RDF4J git merge strategy for more details.", "createdAt": "2020-07-26T06:32:07Z", "url": "https://github.com/eclipse/rdf4j/pull/2395", "merged": true, "mergeCommit": {"oid": "3b8841533501211ddc88247b33d73c8ea8fcabbf"}, "closed": true, "closedAt": "2020-07-27T03:25:43Z", "author": {"login": "jeenbroekstra"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc4nQH6gH2gAyNDU2NzA5MTI5OmZiODk3NWZlMjgxZGI0MzBmMjJjOWFmZjc1MDc2YWJmNDVkOTBkOWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc41MG1AH2gAyNDU2NzA5MTI5OjYzOTA4NGM4OTAyNTI1MmNjZmNjZWRjNzM3OTU0MTg2OTRiZjZhNjE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "fb8975fe281db430f22c9aff75076abf45d90d9c", "author": {"user": {"login": "jeenbroekstra", "name": "Jeen Broekstra"}}, "url": "https://github.com/eclipse/rdf4j/commit/fb8975fe281db430f22c9aff75076abf45d90d9c", "committedDate": "2020-07-26T06:29:45Z", "message": "GH-2373 update function howto and example code to show use of TripleSource"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MzM2MjM5", "url": "https://github.com/eclipse/rdf4j/pull/2395#pullrequestreview-455336239", "createdAt": "2020-07-26T06:33:46Z", "commit": {"oid": "fb8975fe281db430f22c9aff75076abf45d90d9c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwNjozMzo0NlrOG3J2Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwNjozMzo0NlrOG3J2Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ4NjIzOQ==", "bodyText": "I realize this is silly, but I was struggling to come up with a simple example that actually made sense. Happy to hear improvements.", "url": "https://github.com/eclipse/rdf4j/pull/2395#discussion_r460486239", "createdAt": "2020-07-26T06:33:46Z", "author": {"login": "jeenbroekstra"}, "path": "examples/src/main/java/org/eclipse/rdf4j/examples/function/ExistingPalindromeFunction.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*******************************************************************************\n+ * Copyright (c) 2017 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+package org.eclipse.rdf4j.examples.function;\n+\n+import org.eclipse.rdf4j.model.Literal;\n+import org.eclipse.rdf4j.model.Value;\n+import org.eclipse.rdf4j.model.ValueFactory;\n+import org.eclipse.rdf4j.model.vocabulary.RDFS;\n+import org.eclipse.rdf4j.query.QueryResults;\n+import org.eclipse.rdf4j.query.algebra.evaluation.TripleSource;\n+import org.eclipse.rdf4j.query.algebra.evaluation.ValueExprEvaluationException;\n+import org.eclipse.rdf4j.query.algebra.evaluation.function.Function;\n+\n+/**\n+ * An example custom SPARQL function that detects palindromes that already exist in the database.\n+ *\n+ * @author Jeen Broekstra\n+ */\n+public class ExistingPalindromeFunction implements Function {\n+\n+\t// define a constant for the namespace of our custom function\n+\tpublic static final String NAMESPACE = \"http://example.org/custom-function/\";\n+\n+\t/**\n+\t * return the URI 'http://example.org/custom-function/existingPalindrome' as a String\n+\t */\n+\t@Override\n+\tpublic String getURI() {\n+\t\treturn NAMESPACE + \"existingPalindrome\";\n+\t}\n+\n+\t/**\n+\t * Executes the existingPalindrome function.\n+\t *\n+\t * @return A boolean literal representing true if the input argument is a palindrome and exists in the database,\n+\t *         false otherwise.\n+\t * @throws ValueExprEvaluationException if more than one argument is supplied or if the supplied argument is not a\n+\t *                                      literal.\n+\t */\n+\t@Override\n+\tpublic Value evaluate(TripleSource tripleSource, Value... args)\n+\t\t\tthrows ValueExprEvaluationException {\n+\t\t// our palindrome function expects only a single argument, so throw an error\n+\t\t// if there's more than one\n+\t\tif (args.length != 1) {\n+\t\t\tthrow new ValueExprEvaluationException(\n+\t\t\t\t\t\"palindrome function requires\" + \"exactly 1 argument, got \"\n+\t\t\t\t\t\t\t+ args.length);\n+\t\t}\n+\t\tValue arg = args[0];\n+\t\t// check if the argument is a literal, if not, we throw an error\n+\t\tif (!(arg instanceof Literal)) {\n+\t\t\tthrow new ValueExprEvaluationException(\n+\t\t\t\t\t\"invalid argument (literal expected): \" + arg);\n+\t\t}\n+\n+\t\t// get the actual string value that we want to check for palindrome-ness.\n+\t\tString label = ((Literal) arg).getLabel();\n+\t\t// we invert our string\n+\t\tString inverted = \"\";\n+\t\tfor (int i = label.length() - 1; i >= 0; i--) {\n+\t\t\tinverted += label.charAt(i);\n+\t\t}\n+\t\t// a string is a palindrome if it is equal to its own inverse\n+\t\tboolean palindrome = inverted.equalsIgnoreCase(label);\n+\n+\t\t// check if a triple with the rdfs:label predicate and this palindrome as its value exists in the database\n+\t\tboolean existing = !QueryResults.asList(tripleSource.getStatements(null, RDFS.LABEL, (Literal) arg)).isEmpty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb8975fe281db430f22c9aff75076abf45d90d9c"}, "originalPosition": 73}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "639084c89025252ccfccedc73795418694bf6a61", "author": {"user": {"login": "jeenbroekstra", "name": "Jeen Broekstra"}}, "url": "https://github.com/eclipse/rdf4j/commit/639084c89025252ccfccedc73795418694bf6a61", "committedDate": "2020-07-26T22:44:02Z", "message": "GH-2373 fix xml formatting, ignore hugo theme in formatting"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 136, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}