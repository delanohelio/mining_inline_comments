{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxNDQ0NjA4", "number": 2025, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMzoyOTozNVrODp3iyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMzoyMDoxM1rODs44LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MjI4MjM1OnYy", "diffSide": "RIGHT", "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/SPARQLProtocolSession.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMzoyOTozNVrOF5TsAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMjowMjo0MVrOF5kYkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYzNTcxMg==", "bodyText": "I'm trying out throwing a custom exception based based on if the correct header is set to indicate that this is a shacl violation.", "url": "https://github.com/eclipse/rdf4j/pull/2025#discussion_r395635712", "createdAt": "2020-03-20T13:29:35Z", "author": {"login": "hmottestad"}, "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/SPARQLProtocolSession.java", "diffHunk": "@@ -1041,6 +1044,10 @@ protected HttpResponse execute(HttpUriRequest method) throws IOException, RDF4JE\n \t\t\t\t\t\tthrow new MalformedQueryException(errInfo.getErrorMessage());\n \t\t\t\t\t} else if (errInfo.getErrorType() == ErrorType.UNSUPPORTED_QUERY_LANGUAGE) {\n \t\t\t\t\t\tthrow new UnsupportedQueryLanguageException(errInfo.getErrorMessage());\n+\t\t\t\t\t} else if (exceptionIs(response, \"ShaclSailValidationException\")) {\n+\t\t\t\t\t\tthrow new RepositoryException(new RemoteShaclSailValidationException(\n+\t\t\t\t\t\t\t\tnew StringReader(errInfo.toString()), \"\", RDFFormat.NQUADS));\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5d31dfdb9336db3596b20ab0073e9df6ffc3f87"}, "originalPosition": 204}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYzNzMwNw==", "bodyText": "I would prefer to throw the real ShaclSailValidationException, but doing so requires a dependency on the shacl module which causes a dependency cycle. I need to extract some interfaces instead....which maven model should I use for those interfaces do you think @jeenbroekstra ?", "url": "https://github.com/eclipse/rdf4j/pull/2025#discussion_r395637307", "createdAt": "2020-03-20T13:32:12Z", "author": {"login": "hmottestad"}, "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/SPARQLProtocolSession.java", "diffHunk": "@@ -1041,6 +1044,10 @@ protected HttpResponse execute(HttpUriRequest method) throws IOException, RDF4JE\n \t\t\t\t\t\tthrow new MalformedQueryException(errInfo.getErrorMessage());\n \t\t\t\t\t} else if (errInfo.getErrorType() == ErrorType.UNSUPPORTED_QUERY_LANGUAGE) {\n \t\t\t\t\t\tthrow new UnsupportedQueryLanguageException(errInfo.getErrorMessage());\n+\t\t\t\t\t} else if (exceptionIs(response, \"ShaclSailValidationException\")) {\n+\t\t\t\t\t\tthrow new RepositoryException(new RemoteShaclSailValidationException(\n+\t\t\t\t\t\t\t\tnew StringReader(errInfo.toString()), \"\", RDFFormat.NQUADS));\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYzNTcxMg=="}, "originalCommit": {"oid": "f5d31dfdb9336db3596b20ab0073e9df6ffc3f87"}, "originalPosition": 204}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwOTI2NA==", "bodyText": "If you want a place to have a shared exception class, rdf4j-util might be a good spot. Create a package org.eclipse.rdf4j.common.exception perhaps?", "url": "https://github.com/eclipse/rdf4j/pull/2025#discussion_r395909264", "createdAt": "2020-03-20T22:02:41Z", "author": {"login": "jeenbroekstra"}, "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/SPARQLProtocolSession.java", "diffHunk": "@@ -1041,6 +1044,10 @@ protected HttpResponse execute(HttpUriRequest method) throws IOException, RDF4JE\n \t\t\t\t\t\tthrow new MalformedQueryException(errInfo.getErrorMessage());\n \t\t\t\t\t} else if (errInfo.getErrorType() == ErrorType.UNSUPPORTED_QUERY_LANGUAGE) {\n \t\t\t\t\t\tthrow new UnsupportedQueryLanguageException(errInfo.getErrorMessage());\n+\t\t\t\t\t} else if (exceptionIs(response, \"ShaclSailValidationException\")) {\n+\t\t\t\t\t\tthrow new RepositoryException(new RemoteShaclSailValidationException(\n+\t\t\t\t\t\t\t\tnew StringReader(errInfo.toString()), \"\", RDFFormat.NQUADS));\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYzNTcxMg=="}, "originalCommit": {"oid": "f5d31dfdb9336db3596b20ab0073e9df6ffc3f87"}, "originalPosition": 204}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MjI5NDkyOnYy", "diffSide": "RIGHT", "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/SPARQLProtocolSession.java", "isResolved": false, "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMzozMzowMVrOF5T0Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQyMzo0MjowOFrOF5zxmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYzNzc5NQ==", "bodyText": "Went with `X-Eclipse-RDF4J-Exception\u00b4as the header, and it should contain a simple class name.", "url": "https://github.com/eclipse/rdf4j/pull/2025#discussion_r395637795", "createdAt": "2020-03-20T13:33:01Z", "author": {"login": "hmottestad"}, "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/SPARQLProtocolSession.java", "diffHunk": "@@ -1055,6 +1062,21 @@ protected HttpResponse execute(HttpUriRequest method) throws IOException, RDF4JE\n \t\t}\n \t}\n \n+\tprivate boolean exceptionIs(HttpResponse response, String exceptionName) {\n+\t\tHeader[] headers = response.getHeaders(\"X-Eclipse-RDF4J-Exception\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5d31dfdb9336db3596b20ab0073e9df6ffc3f87"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk2NDA0Mw==", "bodyText": "If we must use a custom header, this seems like a good name for it. I'd remove the X- prefix though. That is no longer recommend practice for custom headers. See https://stackoverflow.com/questions/3561381/custom-http-headers-naming-conventions\nI know it's very unlikely that this header will have be standardized, but we might as well stick to what IETF says, regardless.", "url": "https://github.com/eclipse/rdf4j/pull/2025#discussion_r395964043", "createdAt": "2020-03-21T05:36:06Z", "author": {"login": "jeenbroekstra"}, "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/SPARQLProtocolSession.java", "diffHunk": "@@ -1055,6 +1062,21 @@ protected HttpResponse execute(HttpUriRequest method) throws IOException, RDF4JE\n \t\t}\n \t}\n \n+\tprivate boolean exceptionIs(HttpResponse response, String exceptionName) {\n+\t\tHeader[] headers = response.getHeaders(\"X-Eclipse-RDF4J-Exception\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYzNzc5NQ=="}, "originalCommit": {"oid": "f5d31dfdb9336db3596b20ab0073e9df6ffc3f87"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk2NDYwNQ==", "bodyText": "Alternatively: instead of using a custom header for this (which on some servers/firewalls is known to cause problems), we could also just let the client look at the response status code, and if it's a 409 conflict, see if there is a payload with a validation report in it.", "url": "https://github.com/eclipse/rdf4j/pull/2025#discussion_r395964605", "createdAt": "2020-03-21T05:45:48Z", "author": {"login": "jeenbroekstra"}, "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/SPARQLProtocolSession.java", "diffHunk": "@@ -1055,6 +1062,21 @@ protected HttpResponse execute(HttpUriRequest method) throws IOException, RDF4JE\n \t\t}\n \t}\n \n+\tprivate boolean exceptionIs(HttpResponse response, String exceptionName) {\n+\t\tHeader[] headers = response.getHeaders(\"X-Eclipse-RDF4J-Exception\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYzNzc5NQ=="}, "originalCommit": {"oid": "f5d31dfdb9336db3596b20ab0073e9df6ffc3f87"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk3MzM1Mg==", "bodyText": "We shouldn\u2019t rely on having to look at the content, since that will stop us from doing a streaming based approach down the line. Custom status line was my first idea until I realized how hard it would be to do with spring.", "url": "https://github.com/eclipse/rdf4j/pull/2025#discussion_r395973352", "createdAt": "2020-03-21T08:22:37Z", "author": {"login": "hmottestad"}, "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/SPARQLProtocolSession.java", "diffHunk": "@@ -1055,6 +1062,21 @@ protected HttpResponse execute(HttpUriRequest method) throws IOException, RDF4JE\n \t\t}\n \t}\n \n+\tprivate boolean exceptionIs(HttpResponse response, String exceptionName) {\n+\t\tHeader[] headers = response.getHeaders(\"X-Eclipse-RDF4J-Exception\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYzNzc5NQ=="}, "originalCommit": {"oid": "f5d31dfdb9336db3596b20ab0073e9df6ffc3f87"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk4MTY0MA==", "bodyText": "Fwiw I'm fine with going with the header for now but I don't see how looking at the content would stop us streaming: based on content type you can just immediately parse in the background, this is no different from how query results are processed. Also: do these reports really get so large that this is a serious consideration?", "url": "https://github.com/eclipse/rdf4j/pull/2025#discussion_r395981640", "createdAt": "2020-03-21T10:36:57Z", "author": {"login": "jeenbroekstra"}, "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/SPARQLProtocolSession.java", "diffHunk": "@@ -1055,6 +1062,21 @@ protected HttpResponse execute(HttpUriRequest method) throws IOException, RDF4JE\n \t\t}\n \t}\n \n+\tprivate boolean exceptionIs(HttpResponse response, String exceptionName) {\n+\t\tHeader[] headers = response.getHeaders(\"X-Eclipse-RDF4J-Exception\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYzNzc5NQ=="}, "originalCommit": {"oid": "f5d31dfdb9336db3596b20ab0073e9df6ffc3f87"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk4Mjk5OA==", "bodyText": "Can you point me to where this is handled for the query results?\nMy fear is that someone will modify a shape and that will cause a lot of data to become invalid. I've done this myself a few times while developing validation rules. It's usually not intentional, but it would be a pity if we bring down the server because we run out of memory.", "url": "https://github.com/eclipse/rdf4j/pull/2025#discussion_r395982998", "createdAt": "2020-03-21T10:58:17Z", "author": {"login": "hmottestad"}, "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/SPARQLProtocolSession.java", "diffHunk": "@@ -1055,6 +1062,21 @@ protected HttpResponse execute(HttpUriRequest method) throws IOException, RDF4JE\n \t\t}\n \t}\n \n+\tprivate boolean exceptionIs(HttpResponse response, String exceptionName) {\n+\t\tHeader[] headers = response.getHeaders(\"X-Eclipse-RDF4J-Exception\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYzNzc5NQ=="}, "originalCommit": {"oid": "f5d31dfdb9336db3596b20ab0073e9df6ffc3f87"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0OTEzMA==", "bodyText": "Can you point me to where this is handled for the query results?\n\nSure thing. For construct queries, for example:\n\nserver-side streaming: org.eclipse.rdf4j.http.server.repository.GraphQueryResultView (the renderInternal method)\nclient-side streaming: SPARQLProtocolSession.getRDFBackground.", "url": "https://github.com/eclipse/rdf4j/pull/2025#discussion_r396049130", "createdAt": "2020-03-22T02:57:30Z", "author": {"login": "jeenbroekstra"}, "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/SPARQLProtocolSession.java", "diffHunk": "@@ -1055,6 +1062,21 @@ protected HttpResponse execute(HttpUriRequest method) throws IOException, RDF4JE\n \t\t}\n \t}\n \n+\tprivate boolean exceptionIs(HttpResponse response, String exceptionName) {\n+\t\tHeader[] headers = response.getHeaders(\"X-Eclipse-RDF4J-Exception\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYzNzc5NQ=="}, "originalCommit": {"oid": "f5d31dfdb9336db3596b20ab0073e9df6ffc3f87"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjEwOTU1OA==", "bodyText": "SPARQLProtocolSession.getRDFBackground is based on headers and not content. It gets the content type from the headers and then passes the content of the response to the parser. It never checks anything from the content.\nWe could extend the content type, essentially like how application/json is extended to application/json+ld we could extend application/n-quads to be application/n-quads+shacl-validation-report or application/json+ld+shacl-validation-report.\nI still think I prefer a custom header. I'll post this to the SHACL forum, maybe someone has come up with something already that we can consider implementing too.", "url": "https://github.com/eclipse/rdf4j/pull/2025#discussion_r396109558", "createdAt": "2020-03-22T15:58:54Z", "author": {"login": "hmottestad"}, "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/SPARQLProtocolSession.java", "diffHunk": "@@ -1055,6 +1062,21 @@ protected HttpResponse execute(HttpUriRequest method) throws IOException, RDF4JE\n \t\t}\n \t}\n \n+\tprivate boolean exceptionIs(HttpResponse response, String exceptionName) {\n+\t\tHeader[] headers = response.getHeaders(\"X-Eclipse-RDF4J-Exception\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYzNzc5NQ=="}, "originalCommit": {"oid": "f5d31dfdb9336db3596b20ab0073e9df6ffc3f87"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE0MDg5Ng==", "bodyText": "SPARQLProtocolSession.getRDFBackground is based on headers and not content. It gets the content type from the headers and then passes the content of the response to the parser. It never checks anything from the content.\n\nYes, I know, that's what I meant. Sorry if this wasn't clear, my point was that based purely on the status code and the response content type you can process the response body (streaming). No need for an additional custom header.", "url": "https://github.com/eclipse/rdf4j/pull/2025#discussion_r396140896", "createdAt": "2020-03-22T21:06:55Z", "author": {"login": "jeenbroekstra"}, "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/SPARQLProtocolSession.java", "diffHunk": "@@ -1055,6 +1062,21 @@ protected HttpResponse execute(HttpUriRequest method) throws IOException, RDF4JE\n \t\t}\n \t}\n \n+\tprivate boolean exceptionIs(HttpResponse response, String exceptionName) {\n+\t\tHeader[] headers = response.getHeaders(\"X-Eclipse-RDF4J-Exception\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYzNzc5NQ=="}, "originalCommit": {"oid": "f5d31dfdb9336db3596b20ab0073e9df6ffc3f87"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE0NTQ1MA==", "bodyText": "Andy (Jena dev) proposed the same to my email on the SHACL public mailing list. application/shacl-validation-report+n-quads. I\u2019m starting to appreciate that. Will see what others reply before we decide. Would be nice if at least Jena and RDF4J did it the same way.", "url": "https://github.com/eclipse/rdf4j/pull/2025#discussion_r396145450", "createdAt": "2020-03-22T21:53:52Z", "author": {"login": "hmottestad"}, "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/SPARQLProtocolSession.java", "diffHunk": "@@ -1055,6 +1062,21 @@ protected HttpResponse execute(HttpUriRequest method) throws IOException, RDF4JE\n \t\t}\n \t}\n \n+\tprivate boolean exceptionIs(HttpResponse response, String exceptionName) {\n+\t\tHeader[] headers = response.getHeaders(\"X-Eclipse-RDF4J-Exception\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYzNzc5NQ=="}, "originalCommit": {"oid": "f5d31dfdb9336db3596b20ab0073e9df6ffc3f87"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE2MTQzNA==", "bodyText": "I hadn't even thought of a custom content type - I was just thinking of using plain text/turtle (or application/n-quads). That's all you need to parse the incoming data. Figuring out that it is a SHACL validation report can be done on the parsed model.\nI'm not against a custom content type per se but it's important to realize that unless a client has been specifically built to recognize it, it won't be able to do anything with it.\n+1 on getting alignment between implementations though :)", "url": "https://github.com/eclipse/rdf4j/pull/2025#discussion_r396161434", "createdAt": "2020-03-22T23:42:08Z", "author": {"login": "jeenbroekstra"}, "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/SPARQLProtocolSession.java", "diffHunk": "@@ -1055,6 +1062,21 @@ protected HttpResponse execute(HttpUriRequest method) throws IOException, RDF4JE\n \t\t}\n \t}\n \n+\tprivate boolean exceptionIs(HttpResponse response, String exceptionName) {\n+\t\tHeader[] headers = response.getHeaders(\"X-Eclipse-RDF4J-Exception\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYzNzc5NQ=="}, "originalCommit": {"oid": "f5d31dfdb9336db3596b20ab0073e9df6ffc3f87"}, "originalPosition": 213}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzgzMjI4OnYy", "diffSide": "RIGHT", "path": "tools/workbench/src/main/java/org/eclipse/rdf4j/workbench/proxy/WorkbenchServlet.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMToxMjoxNlrOF5jUmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMzowMjoyMlrOF5s7ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg5MTg2NA==", "bodyText": "Why are you sending the validation report with this tagged on, and as plain text? Wouldn't it make more sense to send just the turtle data, as text/turtle?", "url": "https://github.com/eclipse/rdf4j/pull/2025#discussion_r395891864", "createdAt": "2020-03-20T21:12:16Z", "author": {"login": "jeenbroekstra"}, "path": "tools/workbench/src/main/java/org/eclipse/rdf4j/workbench/proxy/WorkbenchServlet.java", "diffHunk": "@@ -127,7 +134,27 @@ private void handleRequest(final HttpServletRequest req, final HttpServletRespon\n \t\t} catch (UnauthorizedException e) {\n \t\t\thandleUnauthorizedException(req, resp);\n \t\t} catch (RepositoryConfigException | RepositoryException e) {\n-\t\t\tthrow new ServletException(e);\n+\t\t\tif (e.getCause() instanceof RemoteShaclSailValidationException) {\n+\t\t\t\tModel model = ((RemoteShaclSailValidationException) e.getCause()).validationReportAsModel();\n+\n+\t\t\t\tresp.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n+\t\t\t\tresp.setContentType(TEXT_PLAIN);\n+\t\t\t\tPrintWriter writer = resp.getWriter();\n+\n+\t\t\t\twriter.println(\"SHACL validation failed with the following report:\\n\");\n+\t\t\t\tWriterConfig writerConfig = new WriterConfig();\n+\t\t\t\twriterConfig.set(BasicWriterSettings.PRETTY_PRINT, true);\n+\t\t\t\twriterConfig.set(BasicWriterSettings.INLINE_BLANK_NODES, true);\n+\t\t\t\tRio.write(model, writer, RDFFormat.TURTLE, writerConfig);\n+\n+\t\t\t\twriter.println(\n+\t\t\t\t\t\t\"\\n\" +\n+\t\t\t\t\t\t\t\t\"THIS ERROR MESSAGE IS EXPERIMENTAL AND IS SUBJECT TO CHANGE - \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2fbffb4bee06952e7be6ff76a75721733133b6f"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk3Mjc4Mw==", "bodyText": "It\u2019s just a simple way to display it to the user. In the future someone could extend the user interface to show the error properly, at which point it could be changed to work some other way.", "url": "https://github.com/eclipse/rdf4j/pull/2025#discussion_r395972783", "createdAt": "2020-03-21T08:12:12Z", "author": {"login": "hmottestad"}, "path": "tools/workbench/src/main/java/org/eclipse/rdf4j/workbench/proxy/WorkbenchServlet.java", "diffHunk": "@@ -127,7 +134,27 @@ private void handleRequest(final HttpServletRequest req, final HttpServletRespon\n \t\t} catch (UnauthorizedException e) {\n \t\t\thandleUnauthorizedException(req, resp);\n \t\t} catch (RepositoryConfigException | RepositoryException e) {\n-\t\t\tthrow new ServletException(e);\n+\t\t\tif (e.getCause() instanceof RemoteShaclSailValidationException) {\n+\t\t\t\tModel model = ((RemoteShaclSailValidationException) e.getCause()).validationReportAsModel();\n+\n+\t\t\t\tresp.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n+\t\t\t\tresp.setContentType(TEXT_PLAIN);\n+\t\t\t\tPrintWriter writer = resp.getWriter();\n+\n+\t\t\t\twriter.println(\"SHACL validation failed with the following report:\\n\");\n+\t\t\t\tWriterConfig writerConfig = new WriterConfig();\n+\t\t\t\twriterConfig.set(BasicWriterSettings.PRETTY_PRINT, true);\n+\t\t\t\twriterConfig.set(BasicWriterSettings.INLINE_BLANK_NODES, true);\n+\t\t\t\tRio.write(model, writer, RDFFormat.TURTLE, writerConfig);\n+\n+\t\t\t\twriter.println(\n+\t\t\t\t\t\t\"\\n\" +\n+\t\t\t\t\t\t\t\t\"THIS ERROR MESSAGE IS EXPERIMENTAL AND IS SUBJECT TO CHANGE - \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg5MTg2NA=="}, "originalCommit": {"oid": "a2fbffb4bee06952e7be6ff76a75721733133b6f"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk4MDk4OA==", "bodyText": "To explain further. This is actually a view layer issue...we need to return this error to the view layer in some way, but I've not started looking at the view layer of the workbench to figure out how to interact with it. Returning the text/plain here is just bypassing the view layer, returning text/turtle is not correct because the view layer is supposed to be html. Text/plain is just a temporary hack to make the error visible to the user. And by temporary I mean, probably permanent unless someone who built the workbench can help out.", "url": "https://github.com/eclipse/rdf4j/pull/2025#discussion_r395980988", "createdAt": "2020-03-21T10:26:15Z", "author": {"login": "hmottestad"}, "path": "tools/workbench/src/main/java/org/eclipse/rdf4j/workbench/proxy/WorkbenchServlet.java", "diffHunk": "@@ -127,7 +134,27 @@ private void handleRequest(final HttpServletRequest req, final HttpServletRespon\n \t\t} catch (UnauthorizedException e) {\n \t\t\thandleUnauthorizedException(req, resp);\n \t\t} catch (RepositoryConfigException | RepositoryException e) {\n-\t\t\tthrow new ServletException(e);\n+\t\t\tif (e.getCause() instanceof RemoteShaclSailValidationException) {\n+\t\t\t\tModel model = ((RemoteShaclSailValidationException) e.getCause()).validationReportAsModel();\n+\n+\t\t\t\tresp.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n+\t\t\t\tresp.setContentType(TEXT_PLAIN);\n+\t\t\t\tPrintWriter writer = resp.getWriter();\n+\n+\t\t\t\twriter.println(\"SHACL validation failed with the following report:\\n\");\n+\t\t\t\tWriterConfig writerConfig = new WriterConfig();\n+\t\t\t\twriterConfig.set(BasicWriterSettings.PRETTY_PRINT, true);\n+\t\t\t\twriterConfig.set(BasicWriterSettings.INLINE_BLANK_NODES, true);\n+\t\t\t\tRio.write(model, writer, RDFFormat.TURTLE, writerConfig);\n+\n+\t\t\t\twriter.println(\n+\t\t\t\t\t\t\"\\n\" +\n+\t\t\t\t\t\t\t\t\"THIS ERROR MESSAGE IS EXPERIMENTAL AND IS SUBJECT TO CHANGE - \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg5MTg2NA=="}, "originalCommit": {"oid": "a2fbffb4bee06952e7be6ff76a75721733133b6f"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk4MTgwNA==", "bodyText": "I, um, did. But it was a while back. Let me have a think about this, I don't want to make REST API decisions based on shortcomings of the client tool.", "url": "https://github.com/eclipse/rdf4j/pull/2025#discussion_r395981804", "createdAt": "2020-03-21T10:39:35Z", "author": {"login": "jeenbroekstra"}, "path": "tools/workbench/src/main/java/org/eclipse/rdf4j/workbench/proxy/WorkbenchServlet.java", "diffHunk": "@@ -127,7 +134,27 @@ private void handleRequest(final HttpServletRequest req, final HttpServletRespon\n \t\t} catch (UnauthorizedException e) {\n \t\t\thandleUnauthorizedException(req, resp);\n \t\t} catch (RepositoryConfigException | RepositoryException e) {\n-\t\t\tthrow new ServletException(e);\n+\t\t\tif (e.getCause() instanceof RemoteShaclSailValidationException) {\n+\t\t\t\tModel model = ((RemoteShaclSailValidationException) e.getCause()).validationReportAsModel();\n+\n+\t\t\t\tresp.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n+\t\t\t\tresp.setContentType(TEXT_PLAIN);\n+\t\t\t\tPrintWriter writer = resp.getWriter();\n+\n+\t\t\t\twriter.println(\"SHACL validation failed with the following report:\\n\");\n+\t\t\t\tWriterConfig writerConfig = new WriterConfig();\n+\t\t\t\twriterConfig.set(BasicWriterSettings.PRETTY_PRINT, true);\n+\t\t\t\twriterConfig.set(BasicWriterSettings.INLINE_BLANK_NODES, true);\n+\t\t\t\tRio.write(model, writer, RDFFormat.TURTLE, writerConfig);\n+\n+\t\t\t\twriter.println(\n+\t\t\t\t\t\t\"\\n\" +\n+\t\t\t\t\t\t\t\t\"THIS ERROR MESSAGE IS EXPERIMENTAL AND IS SUBJECT TO CHANGE - \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg5MTg2NA=="}, "originalCommit": {"oid": "a2fbffb4bee06952e7be6ff76a75721733133b6f"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0OTM0Nw==", "bodyText": "Hang on, apologies, I completely misread this - for some reason I assumed I was looking at the RDF4J Server code, not the workbench. So yes - this makes much more sense now!", "url": "https://github.com/eclipse/rdf4j/pull/2025#discussion_r396049347", "createdAt": "2020-03-22T03:02:22Z", "author": {"login": "jeenbroekstra"}, "path": "tools/workbench/src/main/java/org/eclipse/rdf4j/workbench/proxy/WorkbenchServlet.java", "diffHunk": "@@ -127,7 +134,27 @@ private void handleRequest(final HttpServletRequest req, final HttpServletRespon\n \t\t} catch (UnauthorizedException e) {\n \t\t\thandleUnauthorizedException(req, resp);\n \t\t} catch (RepositoryConfigException | RepositoryException e) {\n-\t\t\tthrow new ServletException(e);\n+\t\t\tif (e.getCause() instanceof RemoteShaclSailValidationException) {\n+\t\t\t\tModel model = ((RemoteShaclSailValidationException) e.getCause()).validationReportAsModel();\n+\n+\t\t\t\tresp.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n+\t\t\t\tresp.setContentType(TEXT_PLAIN);\n+\t\t\t\tPrintWriter writer = resp.getWriter();\n+\n+\t\t\t\twriter.println(\"SHACL validation failed with the following report:\\n\");\n+\t\t\t\tWriterConfig writerConfig = new WriterConfig();\n+\t\t\t\twriterConfig.set(BasicWriterSettings.PRETTY_PRINT, true);\n+\t\t\t\twriterConfig.set(BasicWriterSettings.INLINE_BLANK_NODES, true);\n+\t\t\t\tRio.write(model, writer, RDFFormat.TURTLE, writerConfig);\n+\n+\t\t\t\twriter.println(\n+\t\t\t\t\t\t\"\\n\" +\n+\t\t\t\t\t\t\t\t\"THIS ERROR MESSAGE IS EXPERIMENTAL AND IS SUBJECT TO CHANGE - \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg5MTg2NA=="}, "originalCommit": {"oid": "a2fbffb4bee06952e7be6ff76a75721733133b6f"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzgzNTE3OnYy", "diffSide": "RIGHT", "path": "tools/workbench/src/main/java/org/eclipse/rdf4j/workbench/proxy/WorkbenchServlet.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMToxMzoyNVrOF5jWcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQwODoxODoyMlrOF5oSBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg5MjMzNw==", "bodyText": "Perhaps a 409 (conflict) is more specific.", "url": "https://github.com/eclipse/rdf4j/pull/2025#discussion_r395892337", "createdAt": "2020-03-20T21:13:25Z", "author": {"login": "jeenbroekstra"}, "path": "tools/workbench/src/main/java/org/eclipse/rdf4j/workbench/proxy/WorkbenchServlet.java", "diffHunk": "@@ -127,7 +134,27 @@ private void handleRequest(final HttpServletRequest req, final HttpServletRespon\n \t\t} catch (UnauthorizedException e) {\n \t\t\thandleUnauthorizedException(req, resp);\n \t\t} catch (RepositoryConfigException | RepositoryException e) {\n-\t\t\tthrow new ServletException(e);\n+\t\t\tif (e.getCause() instanceof RemoteShaclSailValidationException) {\n+\t\t\t\tModel model = ((RemoteShaclSailValidationException) e.getCause()).validationReportAsModel();\n+\n+\t\t\t\tresp.setStatus(HttpServletResponse.SC_BAD_REQUEST);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2fbffb4bee06952e7be6ff76a75721733133b6f"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk3MzEyNQ==", "bodyText": "409 seems good. Hadn\u2019t heard of that one before.", "url": "https://github.com/eclipse/rdf4j/pull/2025#discussion_r395973125", "createdAt": "2020-03-21T08:18:22Z", "author": {"login": "hmottestad"}, "path": "tools/workbench/src/main/java/org/eclipse/rdf4j/workbench/proxy/WorkbenchServlet.java", "diffHunk": "@@ -127,7 +134,27 @@ private void handleRequest(final HttpServletRequest req, final HttpServletRespon\n \t\t} catch (UnauthorizedException e) {\n \t\t\thandleUnauthorizedException(req, resp);\n \t\t} catch (RepositoryConfigException | RepositoryException e) {\n-\t\t\tthrow new ServletException(e);\n+\t\t\tif (e.getCause() instanceof RemoteShaclSailValidationException) {\n+\t\t\t\tModel model = ((RemoteShaclSailValidationException) e.getCause()).validationReportAsModel();\n+\n+\t\t\t\tresp.setStatus(HttpServletResponse.SC_BAD_REQUEST);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg5MjMzNw=="}, "originalCommit": {"oid": "a2fbffb4bee06952e7be6ff76a75721733133b6f"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzkzMDAyOnYy", "diffSide": "RIGHT", "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/ModelInterface.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMTo1NzowMVrOF5kRuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMjo1OToxOVrOF5s7UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwNzUxNQ==", "bodyText": "What purpose does this wrapper interface server? Can we do without?", "url": "https://github.com/eclipse/rdf4j/pull/2025#discussion_r395907515", "createdAt": "2020-03-20T21:57:01Z", "author": {"login": "jeenbroekstra"}, "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/ModelInterface.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*******************************************************************************\n+ * Copyright (c) 2019 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+\n+package org.eclipse.rdf4j.http.client;\n+\n+import org.eclipse.rdf4j.model.Model;\n+import org.eclipse.rdf4j.model.Resource;\n+import org.eclipse.rdf4j.model.impl.DynamicModelFactory;\n+\n+public interface ModelInterface {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2fbffb4bee06952e7be6ff76a75721733133b6f"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk4MTQ4Mg==", "bodyText": "This is part of the way the shacl exception is built in the shacl sail. It will be moved into the common module. When that's done we can revisit how it's implemented.", "url": "https://github.com/eclipse/rdf4j/pull/2025#discussion_r395981482", "createdAt": "2020-03-21T10:34:09Z", "author": {"login": "hmottestad"}, "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/ModelInterface.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*******************************************************************************\n+ * Copyright (c) 2019 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+\n+package org.eclipse.rdf4j.http.client;\n+\n+import org.eclipse.rdf4j.model.Model;\n+import org.eclipse.rdf4j.model.Resource;\n+import org.eclipse.rdf4j.model.impl.DynamicModelFactory;\n+\n+public interface ModelInterface {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwNzUxNQ=="}, "originalCommit": {"oid": "a2fbffb4bee06952e7be6ff76a75721733133b6f"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0OTIzMg==", "bodyText": "I would really prefer keeping this lean, and not introducing additional public interfaces unless there is a clear need for them. Unless I completely misunderstand this does not look like code that an end user should ever want to touch.", "url": "https://github.com/eclipse/rdf4j/pull/2025#discussion_r396049232", "createdAt": "2020-03-22T02:59:19Z", "author": {"login": "jeenbroekstra"}, "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/ModelInterface.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*******************************************************************************\n+ * Copyright (c) 2019 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+\n+package org.eclipse.rdf4j.http.client;\n+\n+import org.eclipse.rdf4j.model.Model;\n+import org.eclipse.rdf4j.model.Resource;\n+import org.eclipse.rdf4j.model.impl.DynamicModelFactory;\n+\n+public interface ModelInterface {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwNzUxNQ=="}, "originalCommit": {"oid": "a2fbffb4bee06952e7be6ff76a75721733133b6f"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzkzMDUxOnYy", "diffSide": "RIGHT", "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/RemoteShaclSailValidationException.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMTo1NzoxOVrOF5kSHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMTo1NzoxOVrOF5kSHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwNzYxMg==", "bodyText": "Should extend RDF4JException", "url": "https://github.com/eclipse/rdf4j/pull/2025#discussion_r395907612", "createdAt": "2020-03-20T21:57:19Z", "author": {"login": "jeenbroekstra"}, "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/RemoteShaclSailValidationException.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*******************************************************************************\n+ * Copyright (c) 2019 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+\n+package org.eclipse.rdf4j.http.client;\n+\n+import org.eclipse.rdf4j.model.Model;\n+import org.eclipse.rdf4j.model.vocabulary.SHACL;\n+import org.eclipse.rdf4j.rio.RDFFormat;\n+\n+import java.io.StringReader;\n+\n+public class RemoteShaclSailValidationException extends Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2fbffb4bee06952e7be6ff76a75721733133b6f"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzkzMjU4OnYy", "diffSide": "RIGHT", "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/RemoteValidation.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMTo1ODoxNFrOF5kTSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxMDo0NDowN1rOF5o1Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwNzkxMw==", "bodyText": "What purpose does this wrapper serve? It seems to be pretty basic use of the Rio parser. Can we do without?", "url": "https://github.com/eclipse/rdf4j/pull/2025#discussion_r395907913", "createdAt": "2020-03-20T21:58:14Z", "author": {"login": "jeenbroekstra"}, "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/RemoteValidation.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package org.eclipse.rdf4j.http.client;\n+\n+import org.eclipse.rdf4j.model.Model;\n+import org.eclipse.rdf4j.model.Resource;\n+import org.eclipse.rdf4j.rio.RDFFormat;\n+import org.eclipse.rdf4j.rio.Rio;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+\n+public class RemoteValidation implements ModelInterface {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2fbffb4bee06952e7be6ff76a75721733133b6f"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk4MTU4Ng==", "bodyText": "Intention is to support streaming validation reports down the line. Hopefully I can build that as part of this branch, so that I can get the requirements down from the get go.", "url": "https://github.com/eclipse/rdf4j/pull/2025#discussion_r395981586", "createdAt": "2020-03-21T10:35:51Z", "author": {"login": "hmottestad"}, "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/RemoteValidation.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package org.eclipse.rdf4j.http.client;\n+\n+import org.eclipse.rdf4j.model.Model;\n+import org.eclipse.rdf4j.model.Resource;\n+import org.eclipse.rdf4j.rio.RDFFormat;\n+import org.eclipse.rdf4j.rio.Rio;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+\n+public class RemoteValidation implements ModelInterface {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwNzkxMw=="}, "originalCommit": {"oid": "a2fbffb4bee06952e7be6ff76a75721733133b6f"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk4MjA5MQ==", "bodyText": "Can we make it package private? I'm a little wary of introducing public interfaces and classes for this.", "url": "https://github.com/eclipse/rdf4j/pull/2025#discussion_r395982091", "createdAt": "2020-03-21T10:44:07Z", "author": {"login": "jeenbroekstra"}, "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/RemoteValidation.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package org.eclipse.rdf4j.http.client;\n+\n+import org.eclipse.rdf4j.model.Model;\n+import org.eclipse.rdf4j.model.Resource;\n+import org.eclipse.rdf4j.rio.RDFFormat;\n+import org.eclipse.rdf4j.rio.Rio;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+\n+public class RemoteValidation implements ModelInterface {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwNzkxMw=="}, "originalCommit": {"oid": "a2fbffb4bee06952e7be6ff76a75721733133b6f"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzkzNDc5OnYy", "diffSide": "RIGHT", "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/SPARQLProtocolSession.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMTo1OTowOFrOF5kUlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMzowMDowOVrOF5s7Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwODI0NA==", "bodyText": "This is very RDF4J-specific. Shouldn't this be in the RDF4JProtocolSession instead?", "url": "https://github.com/eclipse/rdf4j/pull/2025#discussion_r395908244", "createdAt": "2020-03-20T21:59:08Z", "author": {"login": "jeenbroekstra"}, "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/SPARQLProtocolSession.java", "diffHunk": "@@ -1041,6 +1044,10 @@ protected HttpResponse execute(HttpUriRequest method) throws IOException, RDF4JE\n \t\t\t\t\t\tthrow new MalformedQueryException(errInfo.getErrorMessage());\n \t\t\t\t\t} else if (errInfo.getErrorType() == ErrorType.UNSUPPORTED_QUERY_LANGUAGE) {\n \t\t\t\t\t\tthrow new UnsupportedQueryLanguageException(errInfo.getErrorMessage());\n+\t\t\t\t\t} else if (exceptionIs(response, \"ShaclSailValidationException\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2fbffb4bee06952e7be6ff76a75721733133b6f"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk3MzIwMA==", "bodyText": "I can try to move it there and see if it works.", "url": "https://github.com/eclipse/rdf4j/pull/2025#discussion_r395973200", "createdAt": "2020-03-21T08:19:47Z", "author": {"login": "hmottestad"}, "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/SPARQLProtocolSession.java", "diffHunk": "@@ -1041,6 +1044,10 @@ protected HttpResponse execute(HttpUriRequest method) throws IOException, RDF4JE\n \t\t\t\t\t\tthrow new MalformedQueryException(errInfo.getErrorMessage());\n \t\t\t\t\t} else if (errInfo.getErrorType() == ErrorType.UNSUPPORTED_QUERY_LANGUAGE) {\n \t\t\t\t\t\tthrow new UnsupportedQueryLanguageException(errInfo.getErrorMessage());\n+\t\t\t\t\t} else if (exceptionIs(response, \"ShaclSailValidationException\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwODI0NA=="}, "originalCommit": {"oid": "a2fbffb4bee06952e7be6ff76a75721733133b6f"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk4MjA2OQ==", "bodyText": "Took a look now. This execute(....) method is what is used by RDF4JProtocolSession for its requests. RDF4JProtocolSession extends SPARQLProtocolSession. We should probably extract an even lower class that only implements execute(....) so that we can be sure that no one above can bypass it. This isn't in scope for this PR though.", "url": "https://github.com/eclipse/rdf4j/pull/2025#discussion_r395982069", "createdAt": "2020-03-21T10:43:51Z", "author": {"login": "hmottestad"}, "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/SPARQLProtocolSession.java", "diffHunk": "@@ -1041,6 +1044,10 @@ protected HttpResponse execute(HttpUriRequest method) throws IOException, RDF4JE\n \t\t\t\t\t\tthrow new MalformedQueryException(errInfo.getErrorMessage());\n \t\t\t\t\t} else if (errInfo.getErrorType() == ErrorType.UNSUPPORTED_QUERY_LANGUAGE) {\n \t\t\t\t\t\tthrow new UnsupportedQueryLanguageException(errInfo.getErrorMessage());\n+\t\t\t\t\t} else if (exceptionIs(response, \"ShaclSailValidationException\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwODI0NA=="}, "originalCommit": {"oid": "a2fbffb4bee06952e7be6ff76a75721733133b6f"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0OTI1NQ==", "bodyText": "Fair enough, let's leave for now. It's not in the way.", "url": "https://github.com/eclipse/rdf4j/pull/2025#discussion_r396049255", "createdAt": "2020-03-22T03:00:09Z", "author": {"login": "jeenbroekstra"}, "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/SPARQLProtocolSession.java", "diffHunk": "@@ -1041,6 +1044,10 @@ protected HttpResponse execute(HttpUriRequest method) throws IOException, RDF4JE\n \t\t\t\t\t\tthrow new MalformedQueryException(errInfo.getErrorMessage());\n \t\t\t\t\t} else if (errInfo.getErrorType() == ErrorType.UNSUPPORTED_QUERY_LANGUAGE) {\n \t\t\t\t\t\tthrow new UnsupportedQueryLanguageException(errInfo.getErrorMessage());\n+\t\t\t\t\t} else if (exceptionIs(response, \"ShaclSailValidationException\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwODI0NA=="}, "originalCommit": {"oid": "a2fbffb4bee06952e7be6ff76a75721733133b6f"}, "originalPosition": 201}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NzM0MDMxOnYy", "diffSide": "RIGHT", "path": "core/sail/shacl-common/src/main/java/org/eclipse/rdf4j/sail/shaclcommon/ShaclSailValidationException.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMzo0ODoyNFrOF9Eyag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMzo0ODoyNFrOF9Eyag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4NTg5OA==", "bodyText": "I think this should be an abstract class, extending RDF4JException.\nI'd also rename to something more generic, like just ValidationException.", "url": "https://github.com/eclipse/rdf4j/pull/2025#discussion_r399585898", "createdAt": "2020-03-27T23:48:24Z", "author": {"login": "jeenbroekstra"}, "path": "core/sail/shacl-common/src/main/java/org/eclipse/rdf4j/sail/shaclcommon/ShaclSailValidationException.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+\n+package org.eclipse.rdf4j.sail.shaclcommon;\n+\n+\n+import org.eclipse.rdf4j.model.Model;\n+import org.eclipse.rdf4j.sail.shaclcommon.results.ValidationReport;\n+\n+public interface ShaclSailValidationException  {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b83b4702028bd2301e8c7ce010fb06e7d9f763c3"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NzM0MTM3OnYy", "diffSide": "RIGHT", "path": "core/sail/shacl-common/src/main/java/org/eclipse/rdf4j/sail/shaclcommon/ShaclSailValidationException.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMzo0OTowMFrOF9Ey_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMzo0OTowMFrOF9Ey_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4NjA0Ng==", "bodyText": "I think this package name and the module is too specific. I'd suggest putting this in a package org.eclipse.rdf4j.common.validation.", "url": "https://github.com/eclipse/rdf4j/pull/2025#discussion_r399586046", "createdAt": "2020-03-27T23:49:00Z", "author": {"login": "jeenbroekstra"}, "path": "core/sail/shacl-common/src/main/java/org/eclipse/rdf4j/sail/shaclcommon/ShaclSailValidationException.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+\n+package org.eclipse.rdf4j.sail.shaclcommon;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b83b4702028bd2301e8c7ce010fb06e7d9f763c3"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NzM0MjcwOnYy", "diffSide": "RIGHT", "path": "core/sail/shacl-common/src/main/java/org/eclipse/rdf4j/sail/shaclcommon/ShaclSailValidationException.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMzo0OTo1MVrOF9Ezug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMzo0OTo1MVrOF9Ezug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4NjIzNA==", "bodyText": "I don't think you need this here. Doesn't the ValidationREport itself already have an asModel method?", "url": "https://github.com/eclipse/rdf4j/pull/2025#discussion_r399586234", "createdAt": "2020-03-27T23:49:51Z", "author": {"login": "jeenbroekstra"}, "path": "core/sail/shacl-common/src/main/java/org/eclipse/rdf4j/sail/shaclcommon/ShaclSailValidationException.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+\n+package org.eclipse.rdf4j.sail.shaclcommon;\n+\n+\n+import org.eclipse.rdf4j.model.Model;\n+import org.eclipse.rdf4j.sail.shaclcommon.results.ValidationReport;\n+\n+public interface ShaclSailValidationException  {\n+\n+\n+\t/**\n+\t * @return A Model containing the validation report as specified by the SHACL Recommendation\n+\t */\n+\t Model validationReportAsModel() ;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b83b4702028bd2301e8c7ce010fb06e7d9f763c3"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NzkxODcxOnYy", "diffSide": "RIGHT", "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/shacl/RemoteShaclSailValidationException.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxMjo0Mjo0MlrOF9JMxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQxMDo0OToyOVrOF9QnBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY1ODE4MQ==", "bodyText": "@jeenbroekstra\nThis is the exception that gets thrown by the client when the server responds with a 409 and the validation report. The ValidationException interface is now what's common between the regular ShaclSailValidationException and this exception. Users would then need to migrate to \"catch\" this interface instead of the ShaclSailValidationException if they only retrieve the model and want their code to be portable between a local ShaclSail and remote one.\nThings still left to consider:\n\nShould this exception extend the RDF4JException (which is deprecated) or SailException (which is what the ShaclSailValidationException does? Not sure why the RDF4JException isn't an interface instead of an abstract class.\nShould we mark this and the remote validation exception as experimental, since this isn't the final location of the interface at least?\nHow to support streaming validation reports?\nWhat are we going to do with the current java based validation report? Maybe deprecate it so we can move it and generalise it?", "url": "https://github.com/eclipse/rdf4j/pull/2025#discussion_r399658181", "createdAt": "2020-03-28T12:42:42Z", "author": {"login": "hmottestad"}, "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/shacl/RemoteShaclSailValidationException.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+\n+package org.eclipse.rdf4j.http.client.shacl;\n+\n+import org.eclipse.rdf4j.model.Model;\n+import org.eclipse.rdf4j.model.vocabulary.SHACL;\n+import org.eclipse.rdf4j.rio.RDFFormat;\n+import org.eclipse.rdf4j.sail.SailException;\n+import org.eclipse.rdf4j.exceptions.ValidationException;\n+\n+import java.io.StringReader;\n+\n+public class RemoteShaclSailValidationException extends SailException implements ValidationException {\n+\n+\tprivate final RemoteValidation remoteValidation;\n+\n+\tpublic RemoteShaclSailValidationException(StringReader stringReader, String s, RDFFormat format) {\n+\t\tremoteValidation = new RemoteValidation(stringReader, s, format);\n+\t}\n+\n+\t/**\n+\t * @return A Model containing the validation report as specified by the SHACL Recommendation\n+\t */\n+\t@Override\n+\tpublic Model validationReportAsModel() {\n+\t\tModel model = remoteValidation.asModel();\n+\t\tmodel.setNamespace(SHACL.PREFIX, SHACL.NAMESPACE);\n+\t\treturn model;\n+\n+\t}\n+\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ef09e5ea14e00279825aca06ea6cca385563891"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc3OTU5MQ==", "bodyText": "My take on things:\n\nRDF4JException isn't deprecated. It inherits from the old OpenRDFException (which is deprecated, and is a class because we made a design decision that all RDF4J exceptions are unchecked (so it needs to extend RuntimeException). Actually SailException itself extends RDF4JException as well (all RDF4J exceptions do).  I still find the naming not quite right. The word \"SAIL\" shouldn't appear on the client side at all. Sails are an internal server-side matter. So the server-side version of the ValidationException should be called ShaclValidationException or something like that, and probably extend SailException. But the client-side version should be called something like RemoteShaclValidationException or something like that, but not have Sail in its name, and not extend SailException\nmarking things experimental is always good for a new feature - it gives us leeway :)\nYAGNI (or at the very least, not in scope for this iteration, though I'm fairly confident we can do something along these lines when it becomes necessary)\nis this the report functionality as previously released you mean? If we can deprecate it, keep it functional but then copy and migrate, that'd be ideal.", "url": "https://github.com/eclipse/rdf4j/pull/2025#discussion_r399779591", "createdAt": "2020-03-29T10:49:29Z", "author": {"login": "jeenbroekstra"}, "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/shacl/RemoteShaclSailValidationException.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+\n+package org.eclipse.rdf4j.http.client.shacl;\n+\n+import org.eclipse.rdf4j.model.Model;\n+import org.eclipse.rdf4j.model.vocabulary.SHACL;\n+import org.eclipse.rdf4j.rio.RDFFormat;\n+import org.eclipse.rdf4j.sail.SailException;\n+import org.eclipse.rdf4j.exceptions.ValidationException;\n+\n+import java.io.StringReader;\n+\n+public class RemoteShaclSailValidationException extends SailException implements ValidationException {\n+\n+\tprivate final RemoteValidation remoteValidation;\n+\n+\tpublic RemoteShaclSailValidationException(StringReader stringReader, String s, RDFFormat format) {\n+\t\tremoteValidation = new RemoteValidation(stringReader, s, format);\n+\t}\n+\n+\t/**\n+\t * @return A Model containing the validation report as specified by the SHACL Recommendation\n+\t */\n+\t@Override\n+\tpublic Model validationReportAsModel() {\n+\t\tModel model = remoteValidation.asModel();\n+\t\tmodel.setNamespace(SHACL.PREFIX, SHACL.NAMESPACE);\n+\t\treturn model;\n+\n+\t}\n+\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY1ODE4MQ=="}, "originalCommit": {"oid": "4ef09e5ea14e00279825aca06ea6cca385563891"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3ODk2MjgxOnYy", "diffSide": "RIGHT", "path": "core/http/client/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQxMjowMDoxOFrOF9RGRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQxMjoyMTo1OVrOF9RP-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc4NzU5MA==", "bodyText": "You can not let the http client depend on the sail api.", "url": "https://github.com/eclipse/rdf4j/pull/2025#discussion_r399787590", "createdAt": "2020-03-29T12:00:18Z", "author": {"login": "jeenbroekstra"}, "path": "core/http/client/pom.xml", "diffHunk": "@@ -60,6 +60,11 @@\n \t\t\t<groupId>commons-codec</groupId>\n \t\t\t<artifactId>commons-codec</artifactId>\n \t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>${project.groupId}</groupId>\n+\t\t\t<artifactId>rdf4j-sail-api</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ef09e5ea14e00279825aca06ea6cca385563891"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc5MDA3NQ==", "bodyText": "I think this is only due to the sail exception, so should be fixable when we change the exception.", "url": "https://github.com/eclipse/rdf4j/pull/2025#discussion_r399790075", "createdAt": "2020-03-29T12:21:59Z", "author": {"login": "hmottestad"}, "path": "core/http/client/pom.xml", "diffHunk": "@@ -60,6 +60,11 @@\n \t\t\t<groupId>commons-codec</groupId>\n \t\t\t<artifactId>commons-codec</artifactId>\n \t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>${project.groupId}</groupId>\n+\t\t\t<artifactId>rdf4j-sail-api</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc4NzU5MA=="}, "originalCommit": {"oid": "4ef09e5ea14e00279825aca06ea6cca385563891"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzkxMTgwOnYy", "diffSide": "RIGHT", "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/SPARQLProtocolSession.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMjo1OTowMFrOF9_TjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNjozMDozMlrOF-HESQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU0NDY1Mg==", "bodyText": "Not a blocker for this PR, but: could you fix your formatter to not reorganize imports in this fashion? Most of our code follows the default Eclipse convention to have static imports first, then normal imports organized with anything from java.* at the top, then javax.* , then org.*, then com.*, then everything else.\nReason I ask is that I've had to resolve some merge conflicts in the past that were caused by imports being moved around, and it's a hassle.\nThis was never made explicit because in the past everyone on the project used Eclipse, so it was just the implicit default. Perhaps we should document this now that we have a more diverse toolset.", "url": "https://github.com/eclipse/rdf4j/pull/2025#discussion_r400544652", "createdAt": "2020-03-30T22:59:00Z", "author": {"login": "jeenbroekstra"}, "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/SPARQLProtocolSession.java", "diffHunk": "@@ -102,6 +86,26 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.StringReader;\n+import java.net.HttpURLConnection;\n+import java.net.URISyntaxException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.IllegalCharsetNameException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+\n+import static org.eclipse.rdf4j.http.protocol.Protocol.ACCEPT_PARAM_NAME;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1893b2600d9e571e3b7bf81e60207c714381b1a9"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY1MjA1Mw==", "bodyText": "Doesn\u2019t everyone almost everyone use IntelliJ now? Since this is the default with IntelliJ. Btw, I\u2019m not a fan of having to adjust my editor for every project, there was once an attempt at making a standardized editor config, maybe we should look at that. Also I think the maven formatter plugin should handle this and if it doesn\u2019t then we need to just live with the fact that the imports are going to change. I\u2019ll try not to optimize imports for files I don\u2019t touch. And also IntelliJ can fix import conflicts for you very easily.", "url": "https://github.com/eclipse/rdf4j/pull/2025#discussion_r400652053", "createdAt": "2020-03-31T05:28:49Z", "author": {"login": "hmottestad"}, "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/SPARQLProtocolSession.java", "diffHunk": "@@ -102,6 +86,26 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.StringReader;\n+import java.net.HttpURLConnection;\n+import java.net.URISyntaxException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.IllegalCharsetNameException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+\n+import static org.eclipse.rdf4j.http.protocol.Protocol.ACCEPT_PARAM_NAME;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU0NDY1Mg=="}, "originalCommit": {"oid": "1893b2600d9e571e3b7bf81e60207c714381b1a9"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY3MTgxNw==", "bodyText": "Doesn\u2019t everyone almost everyone use IntelliJ now?\n\nNo.\n\nSince this is the default with IntelliJ. Btw, I\u2019m not a fan of having to adjust my editor for every project, there was once an attempt at making a standardized editor config, maybe we should look at that.\n\nTo some extent this is unavoidable in an open-source world I'm afraid. Every project has different conventions.\nThen again this one is not a huge deal. I'll cop the occasional merge conflict fallout (it doesn't happen very often anyway - mostly it can resolve it fine, and even if it doesn't it's easy to fix in the IDE).\n\nAlso I think the maven formatter plugin should handle this and if it doesn\u2019t then we need to just live with the fact that the imports are going to change. I\u2019ll try not to optimize imports for files I don\u2019t touch.\n\nI'll take a look at the formatter plugin, see if that's possible. Like I said earlier, we haven't really enforced this guideline before, and I'm not even sure what Netbeans (which Bart uses) does, so don't worry too much about it - I merely asked on the off chance it was a simple tweak on your end.", "url": "https://github.com/eclipse/rdf4j/pull/2025#discussion_r400671817", "createdAt": "2020-03-31T06:30:32Z", "author": {"login": "jeenbroekstra"}, "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/SPARQLProtocolSession.java", "diffHunk": "@@ -102,6 +86,26 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.StringReader;\n+import java.net.HttpURLConnection;\n+import java.net.URISyntaxException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.IllegalCharsetNameException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+\n+import static org.eclipse.rdf4j.http.protocol.Protocol.ACCEPT_PARAM_NAME;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU0NDY1Mg=="}, "originalCommit": {"oid": "1893b2600d9e571e3b7bf81e60207c714381b1a9"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzkyMzU0OnYy", "diffSide": "RIGHT", "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/SPARQLProtocolSession.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMzowNDoxMlrOF9_ayQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNTozMDoxNlrOF-F4yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU0NjUwNQ==", "bodyText": "Why is this a static? You're not using it in a static way, as far as I can tell, nor are there any other existing static methods in the ProtocolSession class. It think it can just be a private instance method.", "url": "https://github.com/eclipse/rdf4j/pull/2025#discussion_r400546505", "createdAt": "2020-03-30T23:04:12Z", "author": {"login": "jeenbroekstra"}, "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/SPARQLProtocolSession.java", "diffHunk": "@@ -1055,6 +1066,62 @@ protected HttpResponse execute(HttpUriRequest method) throws IOException, RDF4JE\n \t\t}\n \t}\n \n+\tstatic RDFFormat getContentTypeSerialisation(HttpResponse response) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1893b2600d9e571e3b7bf81e60207c714381b1a9"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY1MjQ4OQ==", "bodyText": "Doesn\u2019t rely on any instance data. This means it can be static, and if it can be static it should be static. Also much easier to test when it\u2019s static.", "url": "https://github.com/eclipse/rdf4j/pull/2025#discussion_r400652489", "createdAt": "2020-03-31T05:30:16Z", "author": {"login": "hmottestad"}, "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/SPARQLProtocolSession.java", "diffHunk": "@@ -1055,6 +1066,62 @@ protected HttpResponse execute(HttpUriRequest method) throws IOException, RDF4JE\n \t\t}\n \t}\n \n+\tstatic RDFFormat getContentTypeSerialisation(HttpResponse response) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU0NjUwNQ=="}, "originalCommit": {"oid": "1893b2600d9e571e3b7bf81e60207c714381b1a9"}, "originalPosition": 232}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Mzk1ODIwOnYy", "diffSide": "RIGHT", "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/SPARQLProtocolSession.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMzoyMDoxM1rOF9_v0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNTozMDo1OVrOF-F5bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU1MTg4OQ==", "bodyText": "Missing curly braces.", "url": "https://github.com/eclipse/rdf4j/pull/2025#discussion_r400551889", "createdAt": "2020-03-30T23:20:13Z", "author": {"login": "jeenbroekstra"}, "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/SPARQLProtocolSession.java", "diffHunk": "@@ -1055,6 +1066,62 @@ protected HttpResponse execute(HttpUriRequest method) throws IOException, RDF4JE\n \t\t}\n \t}\n \n+\tstatic RDFFormat getContentTypeSerialisation(HttpResponse response) {\n+\t\tHeader[] headers = response.getHeaders(\"Content-Type\");\n+\n+\t\tSet<RDFFormat> rdfFormats = RDFParserRegistry.getInstance().getKeys();\n+\t\tif (rdfFormats.isEmpty()) {\n+\t\t\tthrow new RepositoryException(\"No tuple RDF parsers have been registered\");\n+\t\t}\n+\n+\t\tfor (Header header : headers) {\n+\t\t\tfor (HeaderElement element : header.getElements()) {\n+\t\t\t\t// SHACL Validation report Content-Type gets transformed from:\n+\t\t\t\t// application/shacl-validation-report+n-quads => application/n-quads\n+\t\t\t\t// application/shacl-validation-report+ld+json => application/ld+json\n+\t\t\t\t// text/shacl-validation-report+turtle => text/turtle\n+\n+\t\t\t\tString[] split = element.getName().split(\"\\\\+\");\n+\t\t\t\tStringBuilder serialisation = new StringBuilder(element.getName().split(\"/\")[0] + \"/\");\n+\t\t\t\tfor (int i = 1; i < split.length; i++) {\n+\t\t\t\t\tserialisation.append(split[i]);\n+\t\t\t\t\tif (i + 1 < split.length) {\n+\t\t\t\t\t\tserialisation.append(\"+\");\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\tlogger.debug(\"SHACL validation report is serialised as: \" + serialisation.toString());\n+\n+\t\t\t\tOptional<RDFFormat> rdfFormat = RDFFormat.matchMIMEType(serialisation.toString(), rdfFormats);\n+\n+\t\t\t\tif (rdfFormat.isPresent())\n+\t\t\t\t\treturn rdfFormat.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1893b2600d9e571e3b7bf81e60207c714381b1a9"}, "originalPosition": 261}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY1MjY1NA==", "bodyText": "Will fix.", "url": "https://github.com/eclipse/rdf4j/pull/2025#discussion_r400652654", "createdAt": "2020-03-31T05:30:59Z", "author": {"login": "hmottestad"}, "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/SPARQLProtocolSession.java", "diffHunk": "@@ -1055,6 +1066,62 @@ protected HttpResponse execute(HttpUriRequest method) throws IOException, RDF4JE\n \t\t}\n \t}\n \n+\tstatic RDFFormat getContentTypeSerialisation(HttpResponse response) {\n+\t\tHeader[] headers = response.getHeaders(\"Content-Type\");\n+\n+\t\tSet<RDFFormat> rdfFormats = RDFParserRegistry.getInstance().getKeys();\n+\t\tif (rdfFormats.isEmpty()) {\n+\t\t\tthrow new RepositoryException(\"No tuple RDF parsers have been registered\");\n+\t\t}\n+\n+\t\tfor (Header header : headers) {\n+\t\t\tfor (HeaderElement element : header.getElements()) {\n+\t\t\t\t// SHACL Validation report Content-Type gets transformed from:\n+\t\t\t\t// application/shacl-validation-report+n-quads => application/n-quads\n+\t\t\t\t// application/shacl-validation-report+ld+json => application/ld+json\n+\t\t\t\t// text/shacl-validation-report+turtle => text/turtle\n+\n+\t\t\t\tString[] split = element.getName().split(\"\\\\+\");\n+\t\t\t\tStringBuilder serialisation = new StringBuilder(element.getName().split(\"/\")[0] + \"/\");\n+\t\t\t\tfor (int i = 1; i < split.length; i++) {\n+\t\t\t\t\tserialisation.append(split[i]);\n+\t\t\t\t\tif (i + 1 < split.length) {\n+\t\t\t\t\t\tserialisation.append(\"+\");\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\tlogger.debug(\"SHACL validation report is serialised as: \" + serialisation.toString());\n+\n+\t\t\t\tOptional<RDFFormat> rdfFormat = RDFFormat.matchMIMEType(serialisation.toString(), rdfFormats);\n+\n+\t\t\t\tif (rdfFormat.isPresent())\n+\t\t\t\t\treturn rdfFormat.get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU1MTg4OQ=="}, "originalCommit": {"oid": "1893b2600d9e571e3b7bf81e60207c714381b1a9"}, "originalPosition": 261}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1542, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}