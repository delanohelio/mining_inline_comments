{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3NTExOTUy", "number": 2062, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwMToyNTozMVrODxHRvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwMTozNToyM1rODxHWBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyODI2MDQ0OnYy", "diffSide": "RIGHT", "path": "core/queryalgebra/evaluation/src/main/java/org/eclipse/rdf4j/query/algebra/evaluation/impl/StrictEvaluationStrategy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwMToyNTozMVrOGEaV4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwNTozNzowMVrOGEdP3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI3OTA3Mg==", "bodyText": "Why are these checks necessary? Isn't this check already supposed to be done by RDFStarTripleSource.getRdfStarTriples?", "url": "https://github.com/eclipse/rdf4j/pull/2062#discussion_r407279072", "createdAt": "2020-04-13T01:25:31Z", "author": {"login": "jeenbroekstra"}, "path": "core/queryalgebra/evaluation/src/main/java/org/eclipse/rdf4j/query/algebra/evaluation/impl/StrictEvaluationStrategy.java", "diffHunk": "@@ -1823,15 +1824,158 @@ public Value evaluate(ValueExprTripleRef node, BindingSet bindings)\n \n \t/**\n \t * evaluates a TripleRef node returning bindingsets from the matched Triple nodes in the dataset (or explore\n-\t * standart reification)\n+\t * standard reification)\n \t * \n \t * @param ref      to evaluate\n \t * @param bindings with the solutions\n \t * @return iteration over the solutions\n \t */\n \tpublic CloseableIteration<BindingSet, QueryEvaluationException> evaluate(TripleRef ref, BindingSet bindings) {\n-\t\t// not supported\n-\t\treturn new EmptyIteration<BindingSet, QueryEvaluationException>();\n+\t\t// Naive implementation that walks over all statements matching (x rdf:type rdf:Statement)\n+\t\t// and filter those that do not match the bindings for subject, predicate and object vars (if bound)\n+\t\tfinal org.eclipse.rdf4j.query.algebra.Var subjVar = ref.getSubjectVar();\n+\t\tfinal org.eclipse.rdf4j.query.algebra.Var predVar = ref.getPredicateVar();\n+\t\tfinal org.eclipse.rdf4j.query.algebra.Var objVar = ref.getObjectVar();\n+\t\tfinal org.eclipse.rdf4j.query.algebra.Var extVar = ref.getExprVar();\n+\n+\t\tfinal Value subjValue = getVarValue(subjVar, bindings);\n+\t\tfinal Value predValue = getVarValue(predVar, bindings);\n+\t\tfinal Value objValue = getVarValue(objVar, bindings);\n+\t\tfinal Value extValue = getVarValue(extVar, bindings);\n+\n+\t\t// case1: when we have a binding for extVar we use it in the reified nodes lookup\n+\t\t// case2: in which we have unbound extVar\n+\t\t// in both cases:\n+\t\t// 1. iterate over all statements matching ((* | extValue), rdf:type, rdf:Statement)\n+\t\t// 2. construct a look ahead iteration and filter these solutions that do not match the\n+\t\t// bindings for the subject, predicate and object vars (if these are bound)\n+\t\t// return set of solution where the values of the statements (extVar, rdf:subject/predicate/object, value)\n+\t\t// are bound to the variables of the respective TripleRef variables for subject, predicate, object\n+\t\t// NOTE: if the tripleSource is extended to allow for lookup over asserted Triple values in the underlying sail\n+\t\t// the evaluation of the TripleRef should be suitably forwarded down the sail and filter/construct\n+\t\t// the correct solution out of the results of that call\n+\t\tif (extValue != null && !(extValue instanceof Resource)) {\n+\t\t\treturn new EmptyIteration<>();\n+\t\t}\n+\n+\t\t// whether the TripleSouce support access to RDF star\n+\t\tfinal boolean bSourceSupportsRdfStar = tripleSource instanceof RDFStarTripleSource;\n+\n+\t\t// in case the\n+\t\tif (bSourceSupportsRdfStar) {\n+\t\t\tfinal CloseableIteration<? extends Resource, QueryEvaluationException> iter = ((RDFStarTripleSource) tripleSource)\n+\t\t\t\t\t.getRdfStarTriples((Resource) subjValue, (IRI) predValue, objValue);\n+\t\t\treturn new LookAheadIteration<BindingSet, QueryEvaluationException>() {\n+\t\t\t\t@Override\n+\t\t\t\tprotected BindingSet getNextElement()\n+\t\t\t\t\t\tthrows QueryEvaluationException {\n+\t\t\t\t\twhile (iter.hasNext()) {\n+\t\t\t\t\t\tTriple match = (Triple) iter.next();\n+\t\t\t\t\t\tif (subjValue != null && !subjValue.equals(match.getSubject())) {\n+\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tif (predValue != null && !predValue.equals(match.getPredicate())) {\n+\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tif (objValue != null && !objValue.equals(match.getObject())) {\n+\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b429f3c1099f2b6074e824833beb6941432d369"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzMyNjY4NA==", "bodyText": "It is like that to cover the case in which the implementation does not provide results that match the arguments but dump everything that is a Triple in the result iteration. Just a double check which does not put much overhead but ensure a correctness of the results.", "url": "https://github.com/eclipse/rdf4j/pull/2062#discussion_r407326684", "createdAt": "2020-04-13T05:37:01Z", "author": {"login": "damyan-ognyanov"}, "path": "core/queryalgebra/evaluation/src/main/java/org/eclipse/rdf4j/query/algebra/evaluation/impl/StrictEvaluationStrategy.java", "diffHunk": "@@ -1823,15 +1824,158 @@ public Value evaluate(ValueExprTripleRef node, BindingSet bindings)\n \n \t/**\n \t * evaluates a TripleRef node returning bindingsets from the matched Triple nodes in the dataset (or explore\n-\t * standart reification)\n+\t * standard reification)\n \t * \n \t * @param ref      to evaluate\n \t * @param bindings with the solutions\n \t * @return iteration over the solutions\n \t */\n \tpublic CloseableIteration<BindingSet, QueryEvaluationException> evaluate(TripleRef ref, BindingSet bindings) {\n-\t\t// not supported\n-\t\treturn new EmptyIteration<BindingSet, QueryEvaluationException>();\n+\t\t// Naive implementation that walks over all statements matching (x rdf:type rdf:Statement)\n+\t\t// and filter those that do not match the bindings for subject, predicate and object vars (if bound)\n+\t\tfinal org.eclipse.rdf4j.query.algebra.Var subjVar = ref.getSubjectVar();\n+\t\tfinal org.eclipse.rdf4j.query.algebra.Var predVar = ref.getPredicateVar();\n+\t\tfinal org.eclipse.rdf4j.query.algebra.Var objVar = ref.getObjectVar();\n+\t\tfinal org.eclipse.rdf4j.query.algebra.Var extVar = ref.getExprVar();\n+\n+\t\tfinal Value subjValue = getVarValue(subjVar, bindings);\n+\t\tfinal Value predValue = getVarValue(predVar, bindings);\n+\t\tfinal Value objValue = getVarValue(objVar, bindings);\n+\t\tfinal Value extValue = getVarValue(extVar, bindings);\n+\n+\t\t// case1: when we have a binding for extVar we use it in the reified nodes lookup\n+\t\t// case2: in which we have unbound extVar\n+\t\t// in both cases:\n+\t\t// 1. iterate over all statements matching ((* | extValue), rdf:type, rdf:Statement)\n+\t\t// 2. construct a look ahead iteration and filter these solutions that do not match the\n+\t\t// bindings for the subject, predicate and object vars (if these are bound)\n+\t\t// return set of solution where the values of the statements (extVar, rdf:subject/predicate/object, value)\n+\t\t// are bound to the variables of the respective TripleRef variables for subject, predicate, object\n+\t\t// NOTE: if the tripleSource is extended to allow for lookup over asserted Triple values in the underlying sail\n+\t\t// the evaluation of the TripleRef should be suitably forwarded down the sail and filter/construct\n+\t\t// the correct solution out of the results of that call\n+\t\tif (extValue != null && !(extValue instanceof Resource)) {\n+\t\t\treturn new EmptyIteration<>();\n+\t\t}\n+\n+\t\t// whether the TripleSouce support access to RDF star\n+\t\tfinal boolean bSourceSupportsRdfStar = tripleSource instanceof RDFStarTripleSource;\n+\n+\t\t// in case the\n+\t\tif (bSourceSupportsRdfStar) {\n+\t\t\tfinal CloseableIteration<? extends Resource, QueryEvaluationException> iter = ((RDFStarTripleSource) tripleSource)\n+\t\t\t\t\t.getRdfStarTriples((Resource) subjValue, (IRI) predValue, objValue);\n+\t\t\treturn new LookAheadIteration<BindingSet, QueryEvaluationException>() {\n+\t\t\t\t@Override\n+\t\t\t\tprotected BindingSet getNextElement()\n+\t\t\t\t\t\tthrows QueryEvaluationException {\n+\t\t\t\t\twhile (iter.hasNext()) {\n+\t\t\t\t\t\tTriple match = (Triple) iter.next();\n+\t\t\t\t\t\tif (subjValue != null && !subjValue.equals(match.getSubject())) {\n+\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tif (predValue != null && !predValue.equals(match.getPredicate())) {\n+\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tif (objValue != null && !objValue.equals(match.getObject())) {\n+\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI3OTA3Mg=="}, "originalCommit": {"oid": "8b429f3c1099f2b6074e824833beb6941432d369"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyODI2ODc3OnYy", "diffSide": "RIGHT", "path": "core/queryalgebra/evaluation/src/main/java/org/eclipse/rdf4j/query/algebra/evaluation/RDFStarTripleSource.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwMTozMzoxNFrOGEaaZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMjowOToxMVrOGE3EIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI4MDIzMQ==", "bodyText": "This is minor, but since this is a behavioral interface it doesn't have to extend TripleSource - just thinking ahead of a possible future design where TripleSource and RDFStarTripleSource methods are not provided by the same object.", "url": "https://github.com/eclipse/rdf4j/pull/2062#discussion_r407280231", "createdAt": "2020-04-13T01:33:14Z", "author": {"login": "jeenbroekstra"}, "path": "core/queryalgebra/evaluation/src/main/java/org/eclipse/rdf4j/query/algebra/evaluation/RDFStarTripleSource.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+package org.eclipse.rdf4j.query.algebra.evaluation;\n+\n+import org.eclipse.rdf4j.common.iteration.CloseableIteration;\n+import org.eclipse.rdf4j.model.IRI;\n+import org.eclipse.rdf4j.model.Resource;\n+import org.eclipse.rdf4j.model.Triple;\n+import org.eclipse.rdf4j.model.Value;\n+import org.eclipse.rdf4j.query.QueryEvaluationException;\n+\n+public interface RDFStarTripleSource extends TripleSource {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b429f3c1099f2b6074e824833beb6941432d369"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzMyNzQ5Mg==", "bodyText": "The interface as is, does not provide any other meaningful uses for the classes that implement it. It makes sence only for those classes that also implement TripleSource that's why it extends TripleSource.", "url": "https://github.com/eclipse/rdf4j/pull/2062#discussion_r407327492", "createdAt": "2020-04-13T05:40:33Z", "author": {"login": "damyan-ognyanov"}, "path": "core/queryalgebra/evaluation/src/main/java/org/eclipse/rdf4j/query/algebra/evaluation/RDFStarTripleSource.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+package org.eclipse.rdf4j.query.algebra.evaluation;\n+\n+import org.eclipse.rdf4j.common.iteration.CloseableIteration;\n+import org.eclipse.rdf4j.model.IRI;\n+import org.eclipse.rdf4j.model.Resource;\n+import org.eclipse.rdf4j.model.Triple;\n+import org.eclipse.rdf4j.model.Value;\n+import org.eclipse.rdf4j.query.QueryEvaluationException;\n+\n+public interface RDFStarTripleSource extends TripleSource {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI4MDIzMQ=="}, "originalCommit": {"oid": "8b429f3c1099f2b6074e824833beb6941432d369"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0OTY2NQ==", "bodyText": "I'm not sure I agree with that, but as said it's minor, fine to keep as-is, my \"possible future design\" may well be a YAGNI.", "url": "https://github.com/eclipse/rdf4j/pull/2062#discussion_r407749665", "createdAt": "2020-04-13T22:09:11Z", "author": {"login": "jeenbroekstra"}, "path": "core/queryalgebra/evaluation/src/main/java/org/eclipse/rdf4j/query/algebra/evaluation/RDFStarTripleSource.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+package org.eclipse.rdf4j.query.algebra.evaluation;\n+\n+import org.eclipse.rdf4j.common.iteration.CloseableIteration;\n+import org.eclipse.rdf4j.model.IRI;\n+import org.eclipse.rdf4j.model.Resource;\n+import org.eclipse.rdf4j.model.Triple;\n+import org.eclipse.rdf4j.model.Value;\n+import org.eclipse.rdf4j.query.QueryEvaluationException;\n+\n+public interface RDFStarTripleSource extends TripleSource {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI4MDIzMQ=="}, "originalCommit": {"oid": "8b429f3c1099f2b6074e824833beb6941432d369"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyODI3MTQxOnYy", "diffSide": "RIGHT", "path": "core/queryalgebra/evaluation/src/main/java/org/eclipse/rdf4j/query/algebra/evaluation/impl/StrictEvaluationStrategy.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwMTozNToyM1rOGEabvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMjowNzowOVrOGE3A_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI4MDU3NA==", "bodyText": "I'm not sure I follow where this extVar comes from. Is this intended to encapsulate use of RDF* triples in things like BIND clauses? Why not use a BindingSetAssignment for that case?", "url": "https://github.com/eclipse/rdf4j/pull/2062#discussion_r407280574", "createdAt": "2020-04-13T01:35:23Z", "author": {"login": "jeenbroekstra"}, "path": "core/queryalgebra/evaluation/src/main/java/org/eclipse/rdf4j/query/algebra/evaluation/impl/StrictEvaluationStrategy.java", "diffHunk": "@@ -1823,15 +1824,158 @@ public Value evaluate(ValueExprTripleRef node, BindingSet bindings)\n \n \t/**\n \t * evaluates a TripleRef node returning bindingsets from the matched Triple nodes in the dataset (or explore\n-\t * standart reification)\n+\t * standard reification)\n \t * \n \t * @param ref      to evaluate\n \t * @param bindings with the solutions\n \t * @return iteration over the solutions\n \t */\n \tpublic CloseableIteration<BindingSet, QueryEvaluationException> evaluate(TripleRef ref, BindingSet bindings) {\n-\t\t// not supported\n-\t\treturn new EmptyIteration<BindingSet, QueryEvaluationException>();\n+\t\t// Naive implementation that walks over all statements matching (x rdf:type rdf:Statement)\n+\t\t// and filter those that do not match the bindings for subject, predicate and object vars (if bound)\n+\t\tfinal org.eclipse.rdf4j.query.algebra.Var subjVar = ref.getSubjectVar();\n+\t\tfinal org.eclipse.rdf4j.query.algebra.Var predVar = ref.getPredicateVar();\n+\t\tfinal org.eclipse.rdf4j.query.algebra.Var objVar = ref.getObjectVar();\n+\t\tfinal org.eclipse.rdf4j.query.algebra.Var extVar = ref.getExprVar();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b429f3c1099f2b6074e824833beb6941432d369"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzMzMzM2OQ==", "bodyText": "Not sure how BindingSetAssignment can be re-used.\nEach reference to a Triple in the SPARQL* syntax is translated (recursively) to a TripleRef that provides bindings (instances of Triple) through it's extVar and that ext var is used at the place where the reference appear. E.g.:\n\nthe Statement pattern << ?s ?p ?o>> ?predicate ?object . is translated to a Join between [TripleRef(?s ?p?o) to ?anon_ext] and [?anon_ext ?predicate ?object]\nor in the case of bind:\nBIND(<<?s ?p ?o>> as ?t) is translated to [TripleRef(?s ?p ?o) to ?anon_ext] and [BIND(?anon_ext as ?t)]", "url": "https://github.com/eclipse/rdf4j/pull/2062#discussion_r407333369", "createdAt": "2020-04-13T06:05:45Z", "author": {"login": "damyan-ognyanov"}, "path": "core/queryalgebra/evaluation/src/main/java/org/eclipse/rdf4j/query/algebra/evaluation/impl/StrictEvaluationStrategy.java", "diffHunk": "@@ -1823,15 +1824,158 @@ public Value evaluate(ValueExprTripleRef node, BindingSet bindings)\n \n \t/**\n \t * evaluates a TripleRef node returning bindingsets from the matched Triple nodes in the dataset (or explore\n-\t * standart reification)\n+\t * standard reification)\n \t * \n \t * @param ref      to evaluate\n \t * @param bindings with the solutions\n \t * @return iteration over the solutions\n \t */\n \tpublic CloseableIteration<BindingSet, QueryEvaluationException> evaluate(TripleRef ref, BindingSet bindings) {\n-\t\t// not supported\n-\t\treturn new EmptyIteration<BindingSet, QueryEvaluationException>();\n+\t\t// Naive implementation that walks over all statements matching (x rdf:type rdf:Statement)\n+\t\t// and filter those that do not match the bindings for subject, predicate and object vars (if bound)\n+\t\tfinal org.eclipse.rdf4j.query.algebra.Var subjVar = ref.getSubjectVar();\n+\t\tfinal org.eclipse.rdf4j.query.algebra.Var predVar = ref.getPredicateVar();\n+\t\tfinal org.eclipse.rdf4j.query.algebra.Var objVar = ref.getObjectVar();\n+\t\tfinal org.eclipse.rdf4j.query.algebra.Var extVar = ref.getExprVar();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI4MDU3NA=="}, "originalCommit": {"oid": "8b429f3c1099f2b6074e824833beb6941432d369"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0ODg2MA==", "bodyText": "Of course, that makes sense, thanks for clarifying!", "url": "https://github.com/eclipse/rdf4j/pull/2062#discussion_r407748860", "createdAt": "2020-04-13T22:07:09Z", "author": {"login": "jeenbroekstra"}, "path": "core/queryalgebra/evaluation/src/main/java/org/eclipse/rdf4j/query/algebra/evaluation/impl/StrictEvaluationStrategy.java", "diffHunk": "@@ -1823,15 +1824,158 @@ public Value evaluate(ValueExprTripleRef node, BindingSet bindings)\n \n \t/**\n \t * evaluates a TripleRef node returning bindingsets from the matched Triple nodes in the dataset (or explore\n-\t * standart reification)\n+\t * standard reification)\n \t * \n \t * @param ref      to evaluate\n \t * @param bindings with the solutions\n \t * @return iteration over the solutions\n \t */\n \tpublic CloseableIteration<BindingSet, QueryEvaluationException> evaluate(TripleRef ref, BindingSet bindings) {\n-\t\t// not supported\n-\t\treturn new EmptyIteration<BindingSet, QueryEvaluationException>();\n+\t\t// Naive implementation that walks over all statements matching (x rdf:type rdf:Statement)\n+\t\t// and filter those that do not match the bindings for subject, predicate and object vars (if bound)\n+\t\tfinal org.eclipse.rdf4j.query.algebra.Var subjVar = ref.getSubjectVar();\n+\t\tfinal org.eclipse.rdf4j.query.algebra.Var predVar = ref.getPredicateVar();\n+\t\tfinal org.eclipse.rdf4j.query.algebra.Var objVar = ref.getObjectVar();\n+\t\tfinal org.eclipse.rdf4j.query.algebra.Var extVar = ref.getExprVar();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI4MDU3NA=="}, "originalCommit": {"oid": "8b429f3c1099f2b6074e824833beb6941432d369"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1565, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}