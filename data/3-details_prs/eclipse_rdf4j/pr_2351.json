{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0MjY3Mzg5", "number": 2351, "title": "GH-2350 transaction settings", "bodyText": "GitHub issue resolved: #2350  \nBriefly describe the changes proposed in this PR:\n\nSupport for user supplied settings per transaction.\nSupport for bulk validation ShaclSail setting\n\n\nPR Author Checklist (see the contributor guidelines for more details):\n\n my pull request is self-contained\n I've added tests for the changes I made\n I've applied code formatting (you can use mvn process-resources to format from the command line)\n every commit message starts with the issue number (GH-xxxx) followed by a meaningful description of the change\n every commit has been signed off\n\nNote: we merge all feature pull requests using squash and merge. See RDF4J git merge strategy for more details.", "createdAt": "2020-07-04T10:22:47Z", "url": "https://github.com/eclipse/rdf4j/pull/2351", "merged": true, "mergeCommit": {"oid": "7261fbea2d114f39c5ecc9b6d7f2f4e049545978"}, "closed": true, "closedAt": "2020-07-21T17:10:33Z", "author": {"login": "hmottestad"}, "timelineItems": {"totalCount": 43, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcxlYIagH2gAyNDQ0MjY3Mzg5OjQ1ZjFkYWI3NTZjNjBlYjhlNTFjMWRhM2Q4NDQxODg3ZTI1NDc4MTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc3D-2igFqTQ1MjM0MDQ4MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "45f1dab756c60eb8e51c1da3d8441887e2547814", "author": {"user": {"login": "hmottestad", "name": null}}, "url": "https://github.com/eclipse/rdf4j/commit/45f1dab756c60eb8e51c1da3d8441887e2547814", "committedDate": "2020-07-04T10:21:13Z", "message": "GH-2350 initial commit\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNjAxNDgz", "url": "https://github.com/eclipse/rdf4j/pull/2351#pullrequestreview-442601483", "createdAt": "2020-07-04T10:24:04Z", "commit": {"oid": "45f1dab756c60eb8e51c1da3d8441887e2547814"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQxMDoyNDowNFrOGs7NMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQxMDoyNDowNFrOGs7NMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc2MDU2MA==", "bodyText": "This is just the git diff engine not understanding that I wrapped everything in try-finally to clear the transaction settings.", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r449760560", "createdAt": "2020-07-04T10:24:04Z", "author": {"login": "hmottestad"}, "path": "core/sail/api/src/main/java/org/eclipse/rdf4j/sail/helpers/AbstractSailConnection.java", "diffHunk": "@@ -375,61 +397,70 @@ public final void prepare() throws SailException {\n \n \t@Override\n \tpublic final void commit() throws SailException {\n-\t\tif (isActive()) {\n-\t\t\tendUpdate(null);\n-\t\t}\n-\t\tconnectionLock.readLock().lock();\n \t\ttry {\n-\t\t\tverifyIsOpen();\n+\t\t\tif (isActive()) {\n+\t\t\t\tendUpdate(null);\n+\t\t\t}\n \n-\t\t\tupdateLock.lock();\n+\t\t\tconnectionLock.readLock().lock();\n \t\t\ttry {\n-\t\t\t\tif (txnActive) {\n-\t\t\t\t\tif (!txnPrepared) {\n-\t\t\t\t\t\tprepareInternal();\n+\t\t\t\tverifyIsOpen();\n+\n+\t\t\t\tupdateLock.lock();\n+\t\t\t\ttry {\n+\t\t\t\t\tif (txnActive) {\n+\t\t\t\t\t\tif (!txnPrepared) {\n+\t\t\t\t\t\t\tprepareInternal();\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tcommitInternal();\n+\t\t\t\t\t\ttxnActive = false;\n+\t\t\t\t\t\ttxnPrepared = false;\n \t\t\t\t\t}\n-\t\t\t\t\tcommitInternal();\n-\t\t\t\t\ttxnActive = false;\n-\t\t\t\t\ttxnPrepared = false;\n+\t\t\t\t} finally {\n+\t\t\t\t\tupdateLock.unlock();\n \t\t\t\t}\n \t\t\t} finally {\n-\t\t\t\tupdateLock.unlock();\n+\t\t\t\tconnectionLock.readLock().unlock();\n \t\t\t}\n \t\t} finally {\n-\t\t\tconnectionLock.readLock().unlock();\n+\t\t\ttransactionSettings.clear();\n \t\t}\n \t}\n \n \t@Override\n \tpublic final void rollback() throws SailException {\n-\t\tsynchronized (added) {\n-\t\t\tadded.clear();\n-\t\t}\n-\t\tsynchronized (removed) {\n-\t\t\tremoved.clear();\n-\t\t}\n-\t\tconnectionLock.readLock().lock();\n \t\ttry {\n-\t\t\tverifyIsOpen();\n-\n-\t\t\tupdateLock.lock();\n+\t\t\tsynchronized (added) {\n+\t\t\t\tadded.clear();\n+\t\t\t}\n+\t\t\tsynchronized (removed) {\n+\t\t\t\tremoved.clear();\n+\t\t\t}\n+\t\t\tconnectionLock.readLock().lock();\n \t\t\ttry {\n-\t\t\t\tif (txnActive) {\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\trollbackInternal();\n-\t\t\t\t\t} finally {\n-\t\t\t\t\t\ttxnActive = false;\n-\t\t\t\t\t\ttxnPrepared = false;\n+\t\t\t\tverifyIsOpen();\n+\n+\t\t\t\tupdateLock.lock();\n+\t\t\t\ttry {\n+\t\t\t\t\tif (txnActive) {\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\trollbackInternal();\n+\t\t\t\t\t\t} finally {\n+\t\t\t\t\t\t\ttxnActive = false;\n+\t\t\t\t\t\t\ttxnPrepared = false;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlogger.warn(\"Cannot rollback transaction on connection because transaction is not active\",\n+\t\t\t\t\t\t\t\tdebugEnabled ? new Throwable() : null);\n \t\t\t\t\t}\n-\t\t\t\t} else {\n-\t\t\t\t\tlogger.warn(\"Cannot rollback transaction on connection because transaction is not active\",\n-\t\t\t\t\t\t\tdebugEnabled ? new Throwable() : null);\n+\t\t\t\t} finally {\n+\t\t\t\t\tupdateLock.unlock();\n \t\t\t\t}\n \t\t\t} finally {\n-\t\t\t\tupdateLock.unlock();\n+\t\t\t\tconnectionLock.readLock().unlock();\n \t\t\t}\n \t\t} finally {\n-\t\t\tconnectionLock.readLock().unlock();\n+\t\t\ttransactionSettings.clear();\n \t\t}\n \t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45f1dab756c60eb8e51c1da3d8441887e2547814"}, "originalPosition": 173}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fea23a434dc2339a976b563f2e10cebea955113b", "author": {"user": {"login": "hmottestad", "name": null}}, "url": "https://github.com/eclipse/rdf4j/commit/fea23a434dc2339a976b563f2e10cebea955113b", "committedDate": "2020-07-04T10:28:18Z", "message": "forgot some varargs\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNjAxODgw", "url": "https://github.com/eclipse/rdf4j/pull/2351#pullrequestreview-442601880", "createdAt": "2020-07-04T10:31:46Z", "commit": {"oid": "fea23a434dc2339a976b563f2e10cebea955113b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQxMDozMTo0NlrOGs7Pew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQxMDozMTo0NlrOGs7Pew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc2MTE0Nw==", "bodyText": "@jeenbroekstra\nThe whole wrapped connection approach here makes it hard for me to add support for transaction settings. The problem is that code higher up will often override the begin() and begin(IsolationLevel level) methods to hook into the transaction handling approach. With the new begin(TransactionSetting[] settings) simply calling wrapped.begin(settings) the code higher up will have to override the new begin method in order to fully hook into the transaction flow.\nI'm not sure right now how to fix this. I was initially hoping to hook in like I did in the AbstractSailConnection.", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r449761147", "createdAt": "2020-07-04T10:31:46Z", "author": {"login": "hmottestad"}, "path": "core/sail/api/src/main/java/org/eclipse/rdf4j/sail/helpers/SailConnectionWrapper.java", "diffHunk": "@@ -206,6 +207,11 @@ public Explanation explain(Explanation.Level level, TupleExpr tupleExpr, Dataset\n \t\treturn wrappedCon.explain(level, tupleExpr, dataset, bindings, includeInferred, timeoutSeconds);\n \t}\n \n+\t@Override\n+\tpublic void begin(TransactionSetting... settings) {\n+\t\twrappedCon.begin(settings);\n+\t}\n+\n \t@Override\n \tpublic void begin() throws SailException {\n \t\twrappedCon.begin();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fea23a434dc2339a976b563f2e10cebea955113b"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66b12619802fdfd5431c68e510ab972855f83436", "author": {"user": {"login": "hmottestad", "name": null}}, "url": "https://github.com/eclipse/rdf4j/commit/66b12619802fdfd5431c68e510ab972855f83436", "committedDate": "2020-07-04T16:04:01Z", "message": "bug fix\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNjM5NTEw", "url": "https://github.com/eclipse/rdf4j/pull/2351#pullrequestreview-442639510", "createdAt": "2020-07-05T01:36:44Z", "commit": {"oid": "66b12619802fdfd5431c68e510ab972855f83436"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQwMTozNjo0NFrOGs-3uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQwMTozNjo0NFrOGs-3uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgyMDYwMA==", "bodyText": "I think silently ignoring (possibly logging a warning) might be better here. Not the most important thing right now though.", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r449820600", "createdAt": "2020-07-05T01:36:44Z", "author": {"login": "jeenbroekstra"}, "path": "core/repository/sparql/src/main/java/org/eclipse/rdf4j/repository/sparql/SPARQLConnection.java", "diffHunk": "@@ -459,6 +460,11 @@ public void begin() throws RepositoryException {\n \t\t}\n \t}\n \n+\t@Override\n+\tpublic void begin(TransactionSetting... settings) {\n+\t\tthrow new UnsupportedOperationException(\"SPARQLConnection does not support transaction settings\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66b12619802fdfd5431c68e510ab972855f83436"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3a2cf6e0e1918a519a16610a95ad6ddf931a64f", "author": {"user": {"login": "hmottestad", "name": null}}, "url": "https://github.com/eclipse/rdf4j/commit/f3a2cf6e0e1918a519a16610a95ad6ddf931a64f", "committedDate": "2020-07-05T11:45:47Z", "message": "added default methods\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1aa102207dd9626a7151e2e1e79fee2be0dee18", "author": {"user": {"login": "hmottestad", "name": null}}, "url": "https://github.com/eclipse/rdf4j/commit/a1aa102207dd9626a7151e2e1e79fee2be0dee18", "committedDate": "2020-07-05T13:41:44Z", "message": "Merge branch 'develop' into GH-2350-transaction-settings"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNzI2MjE2", "url": "https://github.com/eclipse/rdf4j/pull/2351#pullrequestreview-442726216", "createdAt": "2020-07-06T01:09:43Z", "commit": {"oid": "a1aa102207dd9626a7151e2e1e79fee2be0dee18"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwMTowOTo0M1rOGtGRmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwMTowOTo0M1rOGtGRmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk0MTkxMw==", "bodyText": "Can you move this to a new package org.eclipse.rdf4j.common.transaction? That's really where IsolationLevel should also be, but at least let's not add more inferfaces in a place we know we'll want to refactor later.\nAlso means that it's probably better to move it to the rdf4j-util module btw, because that's where all the other org.eclipse.rdf4j.common packages are.", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r449941913", "createdAt": "2020-07-06T01:09:43Z", "author": {"login": "jeenbroekstra"}, "path": "core/model/src/main/java/org/eclipse/rdf4j/TransactionSetting.java", "diffHunk": "@@ -0,0 +1,9 @@\n+package org.eclipse.rdf4j;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1aa102207dd9626a7151e2e1e79fee2be0dee18"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNzI3MDQz", "url": "https://github.com/eclipse/rdf4j/pull/2351#pullrequestreview-442727043", "createdAt": "2020-07-06T01:15:22Z", "commit": {"oid": "a1aa102207dd9626a7151e2e1e79fee2be0dee18"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwMToxNToyMlrOGtGUkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwMToxNToyMlrOGtGUkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk0MjY3Mw==", "bodyText": "I'm not sure what we need this for (especially if we move the default methods to TransactionSetting) but I don't think  an interface should be called ....Impl. If we need some sort of base implementation class it should be an abstract class, not an interface. It should also be called AbstractTransactionSetting to stay consistent with naming conventions elsewhere in the projbect.", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r449942673", "createdAt": "2020-07-06T01:15:22Z", "author": {"login": "jeenbroekstra"}, "path": "core/model/src/main/java/org/eclipse/rdf4j/TransactionSettingImpl.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package org.eclipse.rdf4j;\n+\n+public interface TransactionSettingImpl extends TransactionSetting {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1aa102207dd9626a7151e2e1e79fee2be0dee18"}, "originalPosition": 3}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b030e862f0ad6fdba85133299b4e7ac838e939f1", "author": {"user": {"login": "hmottestad", "name": null}}, "url": "https://github.com/eclipse/rdf4j/commit/b030e862f0ad6fdba85133299b4e7ac838e939f1", "committedDate": "2020-07-09T14:51:35Z", "message": "WIP transaction settings\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MDMzNTYx", "url": "https://github.com/eclipse/rdf4j/pull/2351#pullrequestreview-446033561", "createdAt": "2020-07-09T23:31:01Z", "commit": {"oid": "b030e862f0ad6fdba85133299b4e7ac838e939f1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMzozMTowMVrOGvlHbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMzozMTowMVrOGvlHbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0NDM2NA==", "bodyText": "It looks like your formatter is still applying the single-indent rule, rather than sticking to 2 indents for wrapped lines. Did I make a mistake when I merged the formatting changes, or is there something out of sync on your end?", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r452544364", "createdAt": "2020-07-09T23:31:01Z", "author": {"login": "jeenbroekstra"}, "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/RDF4JProtocolSession.java", "diffHunk": "@@ -204,7 +207,7 @@ private synchronized String getTransactionURL() {\n \t *-----------------*/\n \n \tpublic TupleQueryResult getRepositoryList()\n-\t\t\tthrows IOException, RepositoryException, UnauthorizedException, QueryInterruptedException {\n+\t\tthrows IOException, RepositoryException, UnauthorizedException, QueryInterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b030e862f0ad6fdba85133299b4e7ac838e939f1"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MDM0NTIx", "url": "https://github.com/eclipse/rdf4j/pull/2351#pullrequestreview-446034521", "createdAt": "2020-07-09T23:33:54Z", "commit": {"oid": "b030e862f0ad6fdba85133299b4e7ac838e939f1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMzozMzo1NFrOGvlKrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMzozMzo1NFrOGvlKrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0NTE5Ng==", "bodyText": "Why are there changes to the docker build script in this PR?", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r452545196", "createdAt": "2020-07-09T23:33:54Z", "author": {"login": "jeenbroekstra"}, "path": "assembly/src/main/dist/docker/build.sh", "diffHunk": "@@ -30,4 +28,4 @@ cp $ZIP ./ignore/rdf4j.zip\n # build\n docker-compose build\n \n-docker tag docker_rdf4j:latest eclipse/rdf4j-workbench:${MVN_VERSION}\n\\ No newline at end of file\n+docker tag docker_rdf4j:latest eclipse/rdf4j-workbench:${MVN_VERSION}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b030e862f0ad6fdba85133299b4e7ac838e939f1"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fc4f29378acfe5b590c84093162fcc2d9eaf9bb", "author": {"user": {"login": "hmottestad", "name": null}}, "url": "https://github.com/eclipse/rdf4j/commit/0fc4f29378acfe5b590c84093162fcc2d9eaf9bb", "committedDate": "2020-07-10T13:46:01Z", "message": "formatter\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af193ac28846e3f9f2e66e1a20415c7ec641c2e1", "author": {"user": {"login": "hmottestad", "name": null}}, "url": "https://github.com/eclipse/rdf4j/commit/af193ac28846e3f9f2e66e1a20415c7ec641c2e1", "committedDate": "2020-07-10T13:51:05Z", "message": "Merge branch 'develop' into GH-2350-transaction-settings\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f171c80db69e0a2ed1502ef67499e0e037a4d0d", "author": {"user": {"login": "hmottestad", "name": null}}, "url": "https://github.com/eclipse/rdf4j/commit/5f171c80db69e0a2ed1502ef67499e0e037a4d0d", "committedDate": "2020-07-10T14:45:58Z", "message": "WIP testing the http repo\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38628864f6ac9326bb0a0e864125fddecde5563b", "author": {"user": {"login": "hmottestad", "name": null}}, "url": "https://github.com/eclipse/rdf4j/commit/38628864f6ac9326bb0a0e864125fddecde5563b", "committedDate": "2020-07-10T18:49:54Z", "message": "GH-2350 seems to work now\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2NzcwNzM0", "url": "https://github.com/eclipse/rdf4j/pull/2351#pullrequestreview-446770734", "createdAt": "2020-07-11T02:28:44Z", "commit": {"oid": "38628864f6ac9326bb0a0e864125fddecde5563b"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQwMjoyODo0NFrOGwJuCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQwMjozMzoxM1rOGwJvhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE0NDA3Mw==", "bodyText": "This is backward incompatible in multiple ways.", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r453144073", "createdAt": "2020-07-11T02:28:44Z", "author": {"login": "jeenbroekstra"}, "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/RDF4JProtocolSession.java", "diffHunk": "@@ -606,7 +609,7 @@ public void getStatements(Resource subj, IRI pred, Value obj, boolean includeInf\n \t\tpingTransaction();\n \t}\n \n-\tpublic synchronized void beginTransaction(IsolationLevel isolationLevel)\n+\tpublic synchronized void beginTransaction(TransactionSetting... transactionSettings)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38628864f6ac9326bb0a0e864125fddecde5563b"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE0NDMyMQ==", "bodyText": "This is not backward compatible. The REST API requires a transaction isolation level to be sent, but this opens the option of not supplying one. It also removes the actual Isolation level parameter that is part of the protocol, instead encoding everything as a generic transaction setting.\nI'll push some fixes for this.", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r453144321", "createdAt": "2020-07-11T02:31:28Z", "author": {"login": "jeenbroekstra"}, "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/RDF4JProtocolSession.java", "diffHunk": "@@ -620,11 +623,14 @@ public synchronized void beginTransaction(IsolationLevel isolationLevel)\n \t\t\tmethod.setHeader(\"Content-Type\", Protocol.FORM_MIME_TYPE + \"; charset=utf-8\");\n \n \t\t\tList<NameValuePair> params = new ArrayList<>();\n-\t\t\tif (isolationLevel != null) {\n+\n+\t\t\tfor (TransactionSetting transactionSetting : transactionSettings) {\n+\t\t\t\tif (transactionSetting == null)\n+\t\t\t\t\tcontinue;\n \t\t\t\tparams.add(\n \t\t\t\t\t\tnew BasicNameValuePair(\n-\t\t\t\t\t\t\t\tProtocol.ISOLATION_LEVEL_PARAM_NAME,\n-\t\t\t\t\t\t\t\tisolationLevel.getURI().stringValue()\n+\t\t\t\t\t\t\t\tTRANSACTION_SETTINGS_PREFIX + transactionSetting.getName(),\n+\t\t\t\t\t\t\t\ttransactionSetting.getValue()\n \t\t\t\t\t\t)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38628864f6ac9326bb0a0e864125fddecde5563b"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE0NDQ1Mw==", "bodyText": "Removing a parameter from the public REST API and replacing it with something else is backward incompatible. I think the simplest solution is that at the level of the REST API protocol we keep IsolationLevel and other Transaction Settings distinct.", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r453144453", "createdAt": "2020-07-11T02:33:13Z", "author": {"login": "jeenbroekstra"}, "path": "core/http/protocol/src/main/java/org/eclipse/rdf4j/http/protocol/Protocol.java", "diffHunk": "@@ -181,9 +181,9 @@\n \tpublic static final String ACCEPT_PARAM_NAME = \"Accept\";\n \n \t/**\n-\t * Parameter name for the isolation level used in transactions.\n+\t * Prefix for transaction settings in the query param\n \t */\n-\tpublic static final String ISOLATION_LEVEL_PARAM_NAME = \"isolation-level\";\n+\tpublic static final String TRANSACTION_SETTINGS_PREFIX = \"transaction-setting__\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38628864f6ac9326bb0a0e864125fddecde5563b"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b421868b159a6c6fd9174e707d25b8e1cd9e45cf", "author": {"user": {"login": "jeenbroekstra", "name": "Jeen Broekstra"}}, "url": "https://github.com/eclipse/rdf4j/commit/b421868b159a6c6fd9174e707d25b8e1cd9e45cf", "committedDate": "2020-07-11T03:45:09Z", "message": "GH-2350 fix compatibility issues in REST API / ProtocolSession"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2Nzc1MTE4", "url": "https://github.com/eclipse/rdf4j/pull/2351#pullrequestreview-446775118", "createdAt": "2020-07-11T03:50:00Z", "commit": {"oid": "b421868b159a6c6fd9174e707d25b8e1cd9e45cf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQwMzo1MDowMFrOGwKH_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQwMzo1MDowMFrOGwKH_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE1MDcxOA==", "bodyText": "I took this check back out because it shouldn't be necessary: if no isolation level is supplied the connection should just use its default setting.", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r453150718", "createdAt": "2020-07-11T03:50:00Z", "author": {"login": "jeenbroekstra"}, "path": "tools/server-spring/src/main/java/org/eclipse/rdf4j/http/server/repository/transaction/TransactionStartController.java", "diffHunk": "@@ -101,15 +115,9 @@ public String getValue() {\n \n \t\t\t\t\ttransactionSettings.add(transactionSetting);\n \t\t\t\t}\n-\n \t\t\t}\n-\n \t\t});\n \n-\t\tif (isolationLevel[0] == null) {\n-\t\t\tthrow new IllegalStateException(\"Isolation level must be specified\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b421868b159a6c6fd9174e707d25b8e1cd9e45cf"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2Nzg4Mjc0", "url": "https://github.com/eclipse/rdf4j/pull/2351#pullrequestreview-446788274", "createdAt": "2020-07-11T08:30:00Z", "commit": {"oid": "b421868b159a6c6fd9174e707d25b8e1cd9e45cf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQwODozMDowMFrOGwLbjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQwODozMDowMFrOGwLbjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE3MjExMQ==", "bodyText": "@jeenbroekstra we really shouldn\u2019t make these methods default in a brand new interface.", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r453172111", "createdAt": "2020-07-11T08:30:00Z", "author": {"login": "hmottestad"}, "path": "core/model/src/main/java/org/eclipse/rdf4j/TransactionSetting.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package org.eclipse.rdf4j;\n+\n+public interface TransactionSetting {\n+\n+\tdefault String getName() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b421868b159a6c6fd9174e707d25b8e1cd9e45cf"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0f9eb84bba6e3535250ef8ce7f9f9ba7a41175f", "author": {"user": {"login": "hmottestad", "name": null}}, "url": "https://github.com/eclipse/rdf4j/commit/d0f9eb84bba6e3535250ef8ce7f9f9ba7a41175f", "committedDate": "2020-07-11T14:32:40Z", "message": "GH-2350 fix tests and japicmp plugin\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f61febe52d85d5b418fab35ed48a8d441ead3aeb", "author": {"user": {"login": "hmottestad", "name": null}}, "url": "https://github.com/eclipse/rdf4j/commit/f61febe52d85d5b418fab35ed48a8d441ead3aeb", "committedDate": "2020-07-15T14:58:26Z", "message": "wip\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f9e1baf33e6f5b5298309b6326ba5c5158ca911", "author": {"user": {"login": "hmottestad", "name": null}}, "url": "https://github.com/eclipse/rdf4j/commit/9f9e1baf33e6f5b5298309b6326ba5c5158ca911", "committedDate": "2020-07-15T20:29:24Z", "message": "Gh-2350 introduced interning of transaction settings and some simplification\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5MzA4ODQz", "url": "https://github.com/eclipse/rdf4j/pull/2351#pullrequestreview-449308843", "createdAt": "2020-07-15T20:33:23Z", "commit": {"oid": "9f9e1baf33e6f5b5298309b6326ba5c5158ca911"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMDozMzoyM1rOGyO02w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMDozMzoyM1rOGyO02w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMyNDg5MQ==", "bodyText": "I've introduced this concept here for handling transaction settings that come from http. Essentially we \"intern\" them just like you can intern a string. This makes it much easier to write the rest of the code since we can use things like instanceOf and == for enums.\nAlso this opens up for supporting multiple isolation levels. I was thinking of adding our current isolation levels to the abstract sail class, so we retrieve them from there if possible. That way another sail can override that class and provide their own isolation levels. What do you think? @jeenbroekstra", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r455324891", "createdAt": "2020-07-15T20:33:23Z", "author": {"login": "hmottestad"}, "path": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/ShaclSail.java", "diffHunk": "@@ -926,4 +930,60 @@ public long getValidationResultsLimitTotal() {\n \tpublic void setValidationResultsLimitTotal(long validationResultsLimitTotal) {\n \t\tthis.validationResultsLimitTotal = validationResultsLimitTotal;\n \t}\n+\n+\t@Override\n+\tpublic IsolationLevel getDefaultIsolationLevel() {\n+\t\treturn super.getDefaultIsolationLevel();\n+\t}\n+\n+\t@Override\n+\tpublic Optional<TransactionSetting> internTransactionSetting(String name, String value) {\n+\t\tif (Settings.ValidationApproach.Disabled.getName().equals(name)\n+\t\t\t\t&& Settings.ValidationApproach.Disabled.getValue().equals(value)) {\n+\t\t\treturn Optional.of(Settings.ValidationApproach.Disabled);\n+\t\t}\n+\t\tif (Settings.ValidationApproach.Bulk.getName().equals(name)\n+\t\t\t\t&& Settings.ValidationApproach.Bulk.getValue().equals(value)) {\n+\t\t\treturn Optional.of(Settings.ValidationApproach.Bulk);\n+\t\t}\n+\t\treturn getBaseSail().internTransactionSetting(name, value);\n+\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f9e1baf33e6f5b5298309b6326ba5c5158ca911"}, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8321870dc9fa6855ef3d837d9505f02aae1f1fc2", "author": {"user": {"login": "jeenbroekstra", "name": "Jeen Broekstra"}}, "url": "https://github.com/eclipse/rdf4j/commit/8321870dc9fa6855ef3d837d9505f02aae1f1fc2", "committedDate": "2020-07-16T00:14:43Z", "message": "GH-2350 refactored AbstractSailConnection to make backward compatible overrides easier\n\nThe idea is that begin(IsolationLevel) now redirects to\nbegin(TransactionSettings...). Any existing impl that overrides\nbegin(IsolationLevel) but is at least smart enough to still call the\nsuper will automatically support processing of other transaction\nsettings."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5NDg2MDQ3", "url": "https://github.com/eclipse/rdf4j/pull/2351#pullrequestreview-449486047", "createdAt": "2020-07-16T03:42:22Z", "commit": {"oid": "fa1905330ce82e87e6d2deadeaf199f4eac6d051"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwMzo0MjoyMlrOGyY_Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwMzo0MjoyMlrOGyY_Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ5MTQyNw==", "bodyText": "Went ahead and moved the interface and related factory and registry classes to its own package.", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r455491427", "createdAt": "2020-07-16T03:42:22Z", "author": {"login": "jeenbroekstra"}, "path": "core/util/src/main/java/org/eclipse/rdf4j/common/transaction/TransactionSetting.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+package org.eclipse.rdf4j.common.transaction;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa1905330ce82e87e6d2deadeaf199f4eac6d051"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5NDg2OTU1", "url": "https://github.com/eclipse/rdf4j/pull/2351#pullrequestreview-449486955", "createdAt": "2020-07-16T03:45:45Z", "commit": {"oid": "fa1905330ce82e87e6d2deadeaf199f4eac6d051"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwMzo0NTo0NlrOGyZC1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwMzo0NTo0NlrOGyZC1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ5MjMxMQ==", "bodyText": "Calling it out here as well: For IsolationLevel, we use getURI as the canonical identifier. If we do the same thing generally for TransactionSetting, it would make integration IsolationLevel with the generic handling of TransactionSetttings easier.", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r455492311", "createdAt": "2020-07-16T03:45:46Z", "author": {"login": "jeenbroekstra"}, "path": "core/util/src/main/java/org/eclipse/rdf4j/common/transaction/TransactionSetting.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+package org.eclipse.rdf4j.common.transaction;\n+\n+/**\n+ * A configuration setting that can be passed at the beginning of a repository transaction to influence behavior within\n+ * the scope of that transaction only.\n+ *\n+ * @author H\u00e5vard Ottestad\n+ * @author Jeen Broekstra\n+ */\n+public interface TransactionSetting {\n+\n+\t// FIXME we should perhaps use getURI (with an IRI return type) to uniquely identify settings. Same as what we do\n+\t// for IsolationLevels.\n+\tdefault String getName() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa1905330ce82e87e6d2deadeaf199f4eac6d051"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9d0f62f4e8db5013a00f572a563c36f8d46e8a8", "author": {"user": {"login": "jeenbroekstra", "name": "Jeen Broekstra"}}, "url": "https://github.com/eclipse/rdf4j/commit/f9d0f62f4e8db5013a00f572a563c36f8d46e8a8", "committedDate": "2020-07-16T04:31:14Z", "message": "GH-2350 replace intern pass-through methods with use of an SPI registry"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fa1905330ce82e87e6d2deadeaf199f4eac6d051", "author": {"user": {"login": "jeenbroekstra", "name": "Jeen Broekstra"}}, "url": "https://github.com/eclipse/rdf4j/commit/fa1905330ce82e87e6d2deadeaf199f4eac6d051", "committedDate": "2020-07-16T03:39:18Z", "message": "GH-2350 replace intern pass-through methods with use of an SPI registry"}, "afterCommit": {"oid": "f9d0f62f4e8db5013a00f572a563c36f8d46e8a8", "author": {"user": {"login": "jeenbroekstra", "name": "Jeen Broekstra"}}, "url": "https://github.com/eclipse/rdf4j/commit/f9d0f62f4e8db5013a00f572a563c36f8d46e8a8", "committedDate": "2020-07-16T04:31:14Z", "message": "GH-2350 replace intern pass-through methods with use of an SPI registry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48046dc7d9410ec288658b2b5d6307ab32e0fdc4", "author": {"user": {"login": "hmottestad", "name": null}}, "url": "https://github.com/eclipse/rdf4j/commit/48046dc7d9410ec288658b2b5d6307ab32e0fdc4", "committedDate": "2020-07-19T11:17:57Z", "message": "GH-2350 migrated to a receive transaction settings approach for sails instead of more complex begin methods\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "212d02c018610ec9b14430a7ff5a2824c5a21ae2", "author": {"user": {"login": "hmottestad", "name": null}}, "url": "https://github.com/eclipse/rdf4j/commit/212d02c018610ec9b14430a7ff5a2824c5a21ae2", "committedDate": "2020-07-19T11:45:24Z", "message": "GH-2350 fix some test failures\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5af2729d0ca0388815547caaba834c055de36576", "author": {"user": {"login": "hmottestad", "name": null}}, "url": "https://github.com/eclipse/rdf4j/commit/5af2729d0ca0388815547caaba834c055de36576", "committedDate": "2020-07-19T11:55:00Z", "message": "updated docs\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMTM4ODE4", "url": "https://github.com/eclipse/rdf4j/pull/2351#pullrequestreview-452138818", "createdAt": "2020-07-21T05:36:59Z", "commit": {"oid": "5af2729d0ca0388815547caaba834c055de36576"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNTozNjo1OVrOG0ozeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNTo0ODoyN1rOG0pBqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg0NzY3Mw==", "bodyText": "Javadoc on this would be useful. Specifically the general contract and the default implementation behaviour of selecting the first IsolationLevel rather than using the last or another decision algorithm.", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r457847673", "createdAt": "2020-07-21T05:36:59Z", "author": {"login": "ansell"}, "path": "core/repository/api/src/main/java/org/eclipse/rdf4j/repository/RepositoryConnection.java", "diffHunk": "@@ -622,7 +623,18 @@ public void exportStatements(Resource subj, IRI pred, Value obj, boolean include\n \t * @see #rollback()\n \t * @see #setIsolationLevel(IsolationLevel)\n \t */\n-\tpublic void begin(IsolationLevel level) throws RepositoryException;\n+\tvoid begin(IsolationLevel level) throws RepositoryException;\n+\n+\tdefault void begin(TransactionSetting... settings) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5af2729d0ca0388815547caaba834c055de36576"}, "originalPosition": 352}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg0ODgyOA==", "bodyText": "The default method does backwards compatibility by calling begin() by default. This method should also call begin() for backwards compatibility unless there is a specific reason for not following the previous transactional implementation which hasn't been deleted or modified here.", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r457848828", "createdAt": "2020-07-21T05:41:00Z", "author": {"login": "ansell"}, "path": "core/repository/sparql/src/main/java/org/eclipse/rdf4j/repository/sparql/SPARQLConnection.java", "diffHunk": "@@ -459,6 +460,11 @@ public void begin() throws RepositoryException {\n \t\t}\n \t}\n \n+\t@Override\n+\tpublic void begin(TransactionSetting... settings) {\n+\t\tthrow new UnsupportedOperationException(\"SPARQLConnection does not support transaction settings\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgyMDYwMA=="}, "originalCommit": {"oid": "66b12619802fdfd5431c68e510ab972855f83436"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg0OTI4Mw==", "bodyText": "The other APIs use the ... form. This call seems to be compatible with that so there doesn't seem to be a reason why it should use the [] form instead of ....", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r457849283", "createdAt": "2020-07-21T05:42:23Z", "author": {"login": "ansell"}, "path": "core/sail/api/src/main/java/org/eclipse/rdf4j/sail/SailConnection.java", "diffHunk": "@@ -187,6 +188,19 @@ default boolean hasStatement(Resource subj, IRI pred, Value obj, boolean include\n \t */\n \tvoid begin(IsolationLevel level) throws UnknownSailTransactionStateException, SailException;\n \n+\t/**\n+\t *\n+\t * Override this method to receive the transaction settings. This method is always called (by the SailRepository)\n+\t * before any .begin method is called, but may not be called if the sail is being used outside of the\n+\t * SailRepository. Always remember to call super. receiveTransactionSettings(settings) if you override this method.\n+\t *\n+\t * @param settings the transaction settings on which this transaction operates. It may or may not contain the\n+\t *                 isolation level.\n+\t */\n+\tdefault void receiveTransactionSettings(TransactionSetting[] settings) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5af2729d0ca0388815547caaba834c055de36576"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg1MDM5NQ==", "bodyText": "This seems like it will cause threadsafety issues as the implementation of the transactionSettings field is a non-threadsafe Map and this is outside of the lock. Is there a reason why the transaction settings cannot be cleared from within the lock section?", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r457850395", "createdAt": "2020-07-21T05:45:46Z", "author": {"login": "ansell"}, "path": "core/sail/api/src/main/java/org/eclipse/rdf4j/sail/helpers/AbstractSailConnection.java", "diffHunk": "@@ -375,61 +385,70 @@ public final void prepare() throws SailException {\n \n \t@Override\n \tpublic final void commit() throws SailException {\n-\t\tif (isActive()) {\n-\t\t\tendUpdate(null);\n-\t\t}\n-\t\tconnectionLock.readLock().lock();\n \t\ttry {\n-\t\t\tverifyIsOpen();\n+\t\t\tif (isActive()) {\n+\t\t\t\tendUpdate(null);\n+\t\t\t}\n \n-\t\t\tupdateLock.lock();\n+\t\t\tconnectionLock.readLock().lock();\n \t\t\ttry {\n-\t\t\t\tif (txnActive) {\n-\t\t\t\t\tif (!txnPrepared) {\n-\t\t\t\t\t\tprepareInternal();\n+\t\t\t\tverifyIsOpen();\n+\n+\t\t\t\tupdateLock.lock();\n+\t\t\t\ttry {\n+\t\t\t\t\tif (txnActive) {\n+\t\t\t\t\t\tif (!txnPrepared) {\n+\t\t\t\t\t\t\tprepareInternal();\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tcommitInternal();\n+\t\t\t\t\t\ttxnActive = false;\n+\t\t\t\t\t\ttxnPrepared = false;\n \t\t\t\t\t}\n-\t\t\t\t\tcommitInternal();\n-\t\t\t\t\ttxnActive = false;\n-\t\t\t\t\ttxnPrepared = false;\n+\t\t\t\t} finally {\n+\t\t\t\t\tupdateLock.unlock();\n \t\t\t\t}\n \t\t\t} finally {\n-\t\t\t\tupdateLock.unlock();\n+\t\t\t\tconnectionLock.readLock().unlock();\n \t\t\t}\n \t\t} finally {\n-\t\t\tconnectionLock.readLock().unlock();\n+\t\t\ttransactionSettings.clear();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5af2729d0ca0388815547caaba834c055de36576"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg1MTMwNA==", "bodyText": "If this check is being removed, then there should be a new null-guard on this parameter, given it is a public API method that previously supported null as a valid parameter value (even if IsolationLevels.getCompatibleIsolationLevel is currently null-safe)", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r457851304", "createdAt": "2020-07-21T05:48:27Z", "author": {"login": "ansell"}, "path": "core/sail/inferencer/src/main/java/org/eclipse/rdf4j/sail/inferencer/fc/SchemaCachingRDFSInferencerConnection.java", "diffHunk": "@@ -767,17 +767,13 @@ public void rollback()\n \t@Override\n \tpublic void begin()\n \t\t\tthrows SailException {\n-\t\tthis.begin(null);\n+\t\tthis.begin(sail.getDefaultIsolationLevel());\n \t}\n \n \t@Override\n \tpublic void begin(IsolationLevel level)\n \t\t\tthrows SailException {\n \n-\t\tif (level == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5af2729d0ca0388815547caaba834c055de36576"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMTQ4NzU1", "url": "https://github.com/eclipse/rdf4j/pull/2351#pullrequestreview-452148755", "createdAt": "2020-07-21T06:03:03Z", "commit": {"oid": "5af2729d0ca0388815547caaba834c055de36576"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNjowMzowM1rOG0pVKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNjoxNDozNlrOG0pkbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg1NjI5Nw==", "bodyText": "This check is not necessary - you can just pass null as an argument to the begin method.", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r457856297", "createdAt": "2020-07-21T06:03:03Z", "author": {"login": "jeenbroekstra"}, "path": "core/repository/sail/src/main/java/org/eclipse/rdf4j/repository/sail/SailRepositoryConnection.java", "diffHunk": "@@ -155,7 +165,41 @@ public void begin() throws RepositoryException {\n \t@Override\n \tpublic void begin(IsolationLevel level) throws RepositoryException {\n \t\ttry {\n-\t\t\tsailConnection.begin(level);\n+\t\t\t// always call receiveTransactionSettings(...) before calling begin();\n+\t\t\tsailConnection.receiveTransactionSettings(new TransactionSetting[0]);\n+\n+\t\t\tif (level != null) {\n+\t\t\t\tsailConnection.begin(level);\n+\t\t\t} else {\n+\t\t\t\tsailConnection.begin();\n+\t\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5af2729d0ca0388815547caaba834c055de36576"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg1ODE5MQ==", "bodyText": "I'm not a docker expert but there are a lot of changes in these files that I am unsure about or that look like they're temporary changes for your own test rig, rather than for our deployment. Can you roll these changes back please? If you think some of these are good general improvements let's create a separate issue and PR for it.", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r457858191", "createdAt": "2020-07-21T06:08:46Z", "author": {"login": "jeenbroekstra"}, "path": "assembly/src/main/dist/docker/Dockerfile.amd64", "diffHunk": "@@ -1,30 +1,32 @@\n FROM amd64/tomcat:8.5-jre8-alpine\n MAINTAINER Bart Hanssens (bart.hanssens@bosa.fgov.be)\n \n-ARG VERSION=\"2.5.1\"\n-\n ENV JAVA_OPTS=\"-Xmx2g\"\n ENV CATALINA_OPTS=\"-Dorg.eclipse.rdf4j.appdata.basedir=/var/rdf4j\"\n \n-RUN adduser -S tomcat \n+RUN adduser -S tomcat\n+\n+COPY ignore/rdf4j.zip /tmp/rdf4j.zip\n+\n+WORKDIR /tmp\n \n-RUN cd /tmp && \\\n-\twget -q \"https://www.eclipse.org/downloads/download.php?file=/rdf4j/eclipse-rdf4j-${VERSION}-sdk.zip&r=1\" -O /tmp/rdf4j.zip && \\\n-\tunzip -q /tmp/rdf4j.zip && \\\n-\trm -rf /usr/local/tomcat/webapps/* && \\\n-\tcp /tmp/eclipse-rdf4j-${VERSION}/war/*.war /usr/local/tomcat/webapps && \\\n-\trm -rf /tmp/eclipse && \\\n-\trm /tmp/rdf4j.zip && \\\n-\tmkdir -p /var/rdf4j && \\\n-\tchown -R tomcat /var/rdf4j /usr/local/tomcat && \\\n-\tchmod a+x /usr/local/tomcat /usr/local/tomcat/bin /usr/local/tomcat/bin/catalina.sh\n+RUN\tunzip -q /tmp/rdf4j.zip\n+RUN\trm -rf /usr/local/tomcat/webapps/*\n+RUN\tcp /tmp/eclipse-rdf4j*/war/*.war /usr/local/tomcat/webapps\n+RUN\trm -rf /tmp/eclipse\n+RUN\trm /tmp/rdf4j.zip\n+RUN\tmkdir -p /var/rdf4j\n+RUN\tchown -R tomcat /var/rdf4j /usr/local/tomcat\n+RUN\tchmod a+x /usr/local/tomcat /usr/local/tomcat/bin /usr/local/tomcat/bin/catalina.sh\n \n COPY web.xml /usr/local/tomcat/conf/web.xml\n \n USER tomcat\n \n-VOLUME /var/rdf4j\n-VOLUME /usr/local/tomcat/logs\n+WORKDIR /usr/local/tomcat/\n \n-EXPOSE 8080\n+# never got this syntax to work with docker-compose\n+#VOLUME /var/rdf4j\n+#VOLUME /usr/local/tomcat/logs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5af2729d0ca0388815547caaba834c055de36576"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg2MDIwNA==", "bodyText": "Shouldn't this be cleared before releasing the update lock?", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r457860204", "createdAt": "2020-07-21T06:14:36Z", "author": {"login": "jeenbroekstra"}, "path": "core/sail/api/src/main/java/org/eclipse/rdf4j/sail/helpers/AbstractSailConnection.java", "diffHunk": "@@ -375,61 +385,70 @@ public final void prepare() throws SailException {\n \n \t@Override\n \tpublic final void commit() throws SailException {\n-\t\tif (isActive()) {\n-\t\t\tendUpdate(null);\n-\t\t}\n-\t\tconnectionLock.readLock().lock();\n \t\ttry {\n-\t\t\tverifyIsOpen();\n+\t\t\tif (isActive()) {\n+\t\t\t\tendUpdate(null);\n+\t\t\t}\n \n-\t\t\tupdateLock.lock();\n+\t\t\tconnectionLock.readLock().lock();\n \t\t\ttry {\n-\t\t\t\tif (txnActive) {\n-\t\t\t\t\tif (!txnPrepared) {\n-\t\t\t\t\t\tprepareInternal();\n+\t\t\t\tverifyIsOpen();\n+\n+\t\t\t\tupdateLock.lock();\n+\t\t\t\ttry {\n+\t\t\t\t\tif (txnActive) {\n+\t\t\t\t\t\tif (!txnPrepared) {\n+\t\t\t\t\t\t\tprepareInternal();\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tcommitInternal();\n+\t\t\t\t\t\ttxnActive = false;\n+\t\t\t\t\t\ttxnPrepared = false;\n \t\t\t\t\t}\n-\t\t\t\t\tcommitInternal();\n-\t\t\t\t\ttxnActive = false;\n-\t\t\t\t\ttxnPrepared = false;\n+\t\t\t\t} finally {\n+\t\t\t\t\tupdateLock.unlock();\n \t\t\t\t}\n \t\t\t} finally {\n-\t\t\t\tupdateLock.unlock();\n+\t\t\t\tconnectionLock.readLock().unlock();\n \t\t\t}\n \t\t} finally {\n-\t\t\tconnectionLock.readLock().unlock();\n+\t\t\ttransactionSettings.clear();\n \t\t}\n \t}\n \n \t@Override\n \tpublic final void rollback() throws SailException {\n-\t\tsynchronized (added) {\n-\t\t\tadded.clear();\n-\t\t}\n-\t\tsynchronized (removed) {\n-\t\t\tremoved.clear();\n-\t\t}\n-\t\tconnectionLock.readLock().lock();\n \t\ttry {\n-\t\t\tverifyIsOpen();\n-\n-\t\t\tupdateLock.lock();\n+\t\t\tsynchronized (added) {\n+\t\t\t\tadded.clear();\n+\t\t\t}\n+\t\t\tsynchronized (removed) {\n+\t\t\t\tremoved.clear();\n+\t\t\t}\n+\t\t\tconnectionLock.readLock().lock();\n \t\t\ttry {\n-\t\t\t\tif (txnActive) {\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\trollbackInternal();\n-\t\t\t\t\t} finally {\n-\t\t\t\t\t\ttxnActive = false;\n-\t\t\t\t\t\ttxnPrepared = false;\n+\t\t\t\tverifyIsOpen();\n+\n+\t\t\t\tupdateLock.lock();\n+\t\t\t\ttry {\n+\t\t\t\t\tif (txnActive) {\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\trollbackInternal();\n+\t\t\t\t\t\t} finally {\n+\t\t\t\t\t\t\ttxnActive = false;\n+\t\t\t\t\t\t\ttxnPrepared = false;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlogger.warn(\"Cannot rollback transaction on connection because transaction is not active\",\n+\t\t\t\t\t\t\t\tdebugEnabled ? new Throwable() : null);\n \t\t\t\t\t}\n-\t\t\t\t} else {\n-\t\t\t\t\tlogger.warn(\"Cannot rollback transaction on connection because transaction is not active\",\n-\t\t\t\t\t\t\tdebugEnabled ? new Throwable() : null);\n+\t\t\t\t} finally {\n+\t\t\t\t\tupdateLock.unlock();\n \t\t\t\t}\n \t\t\t} finally {\n-\t\t\t\tupdateLock.unlock();\n+\t\t\t\tconnectionLock.readLock().unlock();\n \t\t\t}\n \t\t} finally {\n-\t\t\tconnectionLock.readLock().unlock();\n+\t\t\ttransactionSettings.clear();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5af2729d0ca0388815547caaba834c055de36576"}, "originalPosition": 174}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4f36e79689cedd07da07496e88b26e86da9abe5", "author": {"user": {"login": "hmottestad", "name": null}}, "url": "https://github.com/eclipse/rdf4j/commit/f4f36e79689cedd07da07496e88b26e86da9abe5", "committedDate": "2020-07-21T06:36:18Z", "message": "fixes from review\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5461ef37d834efe585561bc2269822686472e7d", "author": {"user": {"login": "hmottestad", "name": null}}, "url": "https://github.com/eclipse/rdf4j/commit/e5461ef37d834efe585561bc2269822686472e7d", "committedDate": "2020-07-21T06:42:15Z", "message": "revert docker changes\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2e625ded394389458c00e28e4ec9c6ae34a3d7f", "author": {"user": {"login": "hmottestad", "name": null}}, "url": "https://github.com/eclipse/rdf4j/commit/f2e625ded394389458c00e28e4ec9c6ae34a3d7f", "committedDate": "2020-07-21T06:48:10Z", "message": "removed override method in the sparql connection for handling transaction settings\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87e5d1d60974f15582875899df979d118456cc17", "author": {"user": {"login": "hmottestad", "name": null}}, "url": "https://github.com/eclipse/rdf4j/commit/87e5d1d60974f15582875899df979d118456cc17", "committedDate": "2020-07-21T07:08:02Z", "message": "fixed a pom file and added docs\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMTgyMzYw", "url": "https://github.com/eclipse/rdf4j/pull/2351#pullrequestreview-452182360", "createdAt": "2020-07-21T07:10:08Z", "commit": {"oid": "87e5d1d60974f15582875899df979d118456cc17"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNzoxMDowOFrOG0q-4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNzoxMDowOFrOG0q-4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg4MzM2Mg==", "bodyText": "Added java docs now.", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r457883362", "createdAt": "2020-07-21T07:10:08Z", "author": {"login": "hmottestad"}, "path": "core/repository/api/src/main/java/org/eclipse/rdf4j/repository/RepositoryConnection.java", "diffHunk": "@@ -622,7 +623,39 @@ public void exportStatements(Resource subj, IRI pred, Value obj, boolean include\n \t * @see #rollback()\n \t * @see #setIsolationLevel(IsolationLevel)\n \t */\n-\tpublic void begin(IsolationLevel level) throws RepositoryException;\n+\tvoid begin(IsolationLevel level) throws RepositoryException;\n+\n+\t/**\n+\t * Begins a new transaction with the supplied {@link TransactionSetting}, requiring {@link #commit()} or\n+\t * {@link #rollback()} to be called to end the transaction.\n+\t *\n+\t * @param settings The {@link TransactionSetting} (zero or more) for this transaction. If an isolation level is\n+\t *                 provided in the settings this will be used for the transaction. If none is provided then the\n+\t *                 default will be used. Behaviour of this method is undefined if more than one isolation level is\n+\t *                 provided. Behaviour of this method is undefined if one or more settings is null.\n+\t * @throws RepositoryException If the connection could not start the transaction. Possible reasons this may happen\n+\t *                             are:\n+\t *                             <ul>\n+\t *                             <li>a transaction is already {@link #isActive() active} on the current connection.\n+\t *                             <li>the specified {@link IsolationLevel} is not supported by the store, and no\n+\t *                             compatible level could be found.\n+\t *                             </ul>\n+\t * @see #begin()\n+\t * @see #isActive()\n+\t * @see #commit()\n+\t * @see #rollback()\n+\t * @see #setIsolationLevel(IsolationLevel)\n+\t */\n+\tdefault void begin(TransactionSetting... settings) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87e5d1d60974f15582875899df979d118456cc17"}, "originalPosition": 373}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08d022df9ad653402cd12cbabe646b0e2ae5bdfd", "author": {"user": {"login": "hmottestad", "name": null}}, "url": "https://github.com/eclipse/rdf4j/commit/08d022df9ad653402cd12cbabe646b0e2ae5bdfd", "committedDate": "2020-07-21T07:41:04Z", "message": "fixes from review\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMjA0NDQ2", "url": "https://github.com/eclipse/rdf4j/pull/2351#pullrequestreview-452204446", "createdAt": "2020-07-21T07:43:32Z", "commit": {"oid": "08d022df9ad653402cd12cbabe646b0e2ae5bdfd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMzQwNDgw", "url": "https://github.com/eclipse/rdf4j/pull/2351#pullrequestreview-452340480", "createdAt": "2020-07-21T10:50:17Z", "commit": {"oid": "08d022df9ad653402cd12cbabe646b0e2ae5bdfd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMDo1MDoxN1rOG0yiRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMDo1MDoxN1rOG0yiRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAwNzEwOQ==", "bodyText": "@rdstn Representative tests", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r458007109", "createdAt": "2020-07-21T10:50:17Z", "author": {"login": "hmottestad"}, "path": "core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/BulkValidationSettingsTest.java", "diffHunk": "@@ -0,0 +1,199 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+\n+package org.eclipse.rdf4j.sail.shacl;\n+\n+import java.io.InputStream;\n+\n+import org.eclipse.rdf4j.IsolationLevels;\n+import org.eclipse.rdf4j.model.vocabulary.RDF;\n+import org.eclipse.rdf4j.model.vocabulary.RDF4J;\n+import org.eclipse.rdf4j.model.vocabulary.RDFS;\n+import org.eclipse.rdf4j.repository.RepositoryConnection;\n+import org.eclipse.rdf4j.repository.RepositoryException;\n+import org.eclipse.rdf4j.repository.sail.SailRepository;\n+import org.eclipse.rdf4j.repository.sail.SailRepositoryConnection;\n+import org.eclipse.rdf4j.rio.RDFFormat;\n+import org.eclipse.rdf4j.sail.memory.MemoryStore;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+/**\n+ * @author H\u00e5vard Ottestad\n+ */\n+public class BulkValidationSettingsTest {\n+\n+\t@BeforeClass\n+\tpublic static void beforeClass() {\n+\t\tGlobalValidationExecutionLogging.loggingEnabled = false;\n+\t}\n+\n+\t@Test\n+\tpublic void testValid() throws Exception {\n+\n+\t\tSailRepository repository = new SailRepository(new ShaclSail(new MemoryStore()));\n+\n+\t\ttry (RepositoryConnection connection = repository.getConnection()) {\n+\n+\t\t\tconnection.begin(ShaclSail.TransactionSettings.ValidationApproach.Bulk, IsolationLevels.NONE);\n+\n+\t\t\ttry (InputStream shapesData = Utils.class.getClassLoader().getResourceAsStream(\"shacl.ttl\")) {\n+\t\t\t\tconnection.add(shapesData, \"\", RDFFormat.TURTLE, RDF4J.SHACL_SHAPE_GRAPH);\n+\t\t\t}\n+\n+\t\t\tconnection.add(RDFS.RESOURCE, RDF.TYPE, RDFS.RESOURCE);\n+\t\t\tconnection.add(RDFS.RESOURCE, RDFS.LABEL, connection.getValueFactory().createLiteral(\"a\"));\n+\t\t\tconnection.commit();\n+\n+\t\t}\n+\n+\t}\n+\n+\t@Test(expected = ShaclSailValidationException.class)\n+\tpublic void testInvalid() throws Throwable {\n+\n+\t\tSailRepository repository = new SailRepository(new ShaclSail(new MemoryStore()));\n+\n+\t\ttry (RepositoryConnection connection = repository.getConnection()) {\n+\n+\t\t\tconnection.begin(ShaclSail.TransactionSettings.ValidationApproach.Bulk, IsolationLevels.NONE);\n+\n+\t\t\ttry (InputStream shapesData = Utils.class.getClassLoader().getResourceAsStream(\"shacl.ttl\")) {\n+\t\t\t\tconnection.add(shapesData, \"\", RDFFormat.TURTLE, RDF4J.SHACL_SHAPE_GRAPH);\n+\t\t\t}\n+\n+\t\t\tconnection.add(RDFS.RESOURCE, RDF.TYPE, RDFS.RESOURCE);\n+\t\t\ttry {\n+\t\t\t\tconnection.commit();\n+\t\t\t} catch (RepositoryException e) {\n+\t\t\t\tthrow e.getCause();\n+\t\t\t}\n+\n+\t\t}\n+\n+\t}\n+\n+\t@Test(expected = ShaclSailValidationException.class)\n+\tpublic void testInvalidSnapshot() throws Throwable {\n+\n+\t\tSailRepository repository = new SailRepository(new ShaclSail(new MemoryStore()));\n+\n+\t\ttry (RepositoryConnection connection = repository.getConnection()) {\n+\n+\t\t\tconnection.begin(ShaclSail.TransactionSettings.ValidationApproach.Bulk, IsolationLevels.SNAPSHOT);\n+\n+\t\t\ttry (InputStream shapesData = Utils.class.getClassLoader().getResourceAsStream(\"shacl.ttl\")) {\n+\t\t\t\tconnection.add(shapesData, \"\", RDFFormat.TURTLE, RDF4J.SHACL_SHAPE_GRAPH);\n+\t\t\t}\n+\n+\t\t\tconnection.add(RDFS.RESOURCE, RDF.TYPE, RDFS.RESOURCE);\n+\t\t\ttry {\n+\t\t\t\tconnection.commit();\n+\t\t\t} catch (RepositoryException e) {\n+\t\t\t\tthrow e.getCause();\n+\t\t\t}\n+\n+\t\t}\n+\n+\t}\n+\n+\t@Test\n+\tpublic void testInvalidRollsBackCorrectly() {\n+\n+\t\tSailRepository repository = new SailRepository(new ShaclSail(new MemoryStore()));\n+\n+\t\ttry (RepositoryConnection connection = repository.getConnection()) {\n+\n+\t\t\tconnection.begin(ShaclSail.TransactionSettings.ValidationApproach.Bulk, IsolationLevels.NONE);\n+\n+\t\t\ttry (InputStream shapesData = Utils.class.getClassLoader().getResourceAsStream(\"shacl.ttl\")) {\n+\t\t\t\tconnection.add(shapesData, \"\", RDFFormat.TURTLE, RDF4J.SHACL_SHAPE_GRAPH);\n+\t\t\t}\n+\n+\t\t\tconnection.add(RDFS.RESOURCE, RDF.TYPE, RDFS.RESOURCE);\n+\n+\t\t\tconnection.commit();\n+\n+\t\t} catch (Exception ignored) {\n+\n+\t\t}\n+\n+\t\ttry (RepositoryConnection connection = repository.getConnection()) {\n+\n+\t\t\tconnection.begin(IsolationLevels.NONE);\n+\t\t\tconnection.add(RDFS.RESOURCE, RDF.TYPE, RDFS.RESOURCE);\n+\t\t\tconnection.commit();\n+\n+\t\t}\n+\n+\t}\n+\n+\t@Test(expected = ShaclSailValidationException.class)\n+\tpublic void testValidationDisabled() throws Throwable {\n+\n+\t\tSailRepository repository = new SailRepository(new ShaclSail(new MemoryStore()));\n+\n+\t\ttry (RepositoryConnection connection = repository.getConnection()) {\n+\n+\t\t\tconnection.begin(ShaclSail.TransactionSettings.ValidationApproach.Disabled);\n+\n+\t\t\ttry (InputStream shapesData = Utils.class.getClassLoader().getResourceAsStream(\"shacl.ttl\")) {\n+\t\t\t\tconnection.add(shapesData, \"\", RDFFormat.TURTLE, RDF4J.SHACL_SHAPE_GRAPH);\n+\t\t\t}\n+\n+\t\t\tconnection.add(RDFS.RESOURCE, RDF.TYPE, RDFS.RESOURCE);\n+\n+\t\t\tconnection.commit();\n+\n+\t\t\tconnection.begin(ShaclSail.TransactionSettings.ValidationApproach.Bulk);\n+\t\t\ttry (SailRepositoryConnection connection1 = repository.getConnection()) {\n+\n+\t\t\t\ttry {\n+\t\t\t\t\tconnection.commit();\n+\t\t\t\t} catch (RepositoryException e) {\n+\t\t\t\t\tthrow e.getCause();\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t}\n+\n+\t}\n+\n+\t@Test\n+\tpublic void testValidationDisabledSnapshotSerializableValidation() throws Throwable {\n+\n+\t\tSailRepository repository = new SailRepository(new ShaclSail(new MemoryStore()));\n+\n+\t\ttry (RepositoryConnection connection = repository.getConnection()) {\n+\n+\t\t\tconnection.begin(ShaclSail.TransactionSettings.ValidationApproach.Disabled, IsolationLevels.SNAPSHOT);\n+\n+\t\t\ttry (InputStream shapesData = Utils.class.getClassLoader().getResourceAsStream(\"shacl.ttl\")) {\n+\t\t\t\tconnection.add(shapesData, \"\", RDFFormat.TURTLE, RDF4J.SHACL_SHAPE_GRAPH);\n+\t\t\t}\n+\n+\t\t\tconnection.commit();\n+\n+\t\t\tconnection.add(RDFS.RESOURCE, RDF.TYPE, RDFS.CLASS);\n+\n+\t\t\tconnection.begin(ShaclSail.TransactionSettings.ValidationApproach.Disabled, IsolationLevels.SNAPSHOT);\n+\n+\t\t\ttry (SailRepositoryConnection connection1 = repository.getConnection()) {\n+\n+\t\t\t\tconnection.add(RDFS.RESOURCE, RDF.TYPE, RDFS.RESOURCE);\n+\n+\t\t\t\tconnection.commit();\n+\n+\t\t\t}\n+\n+\t\t}\n+\n+\t}\n+\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08d022df9ad653402cd12cbabe646b0e2ae5bdfd"}, "originalPosition": 199}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 129, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}