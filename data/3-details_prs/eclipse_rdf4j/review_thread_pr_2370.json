{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUxNzE2ODg4", "number": 2370, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNzoyODo1MVrOEQTPjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDo0Mzo1OVrOEQdfCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTI3OTQ5OnYy", "diffSide": "RIGHT", "path": "tools/federation/src/main/java/org/eclipse/rdf4j/federated/FederationManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNzoyODo1MVrOG0YKag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNzoyODo1MVrOG0YKag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU3NTAxOA==", "bodyText": "...which takes care of properly handling...", "url": "https://github.com/eclipse/rdf4j/pull/2370#discussion_r457575018", "createdAt": "2020-07-20T17:28:51Z", "author": {"login": "jetztgradnet"}, "path": "tools/federation/src/main/java/org/eclipse/rdf4j/federated/FederationManager.java", "diffHunk": "@@ -103,28 +104,43 @@ public void reset() {\n \t\t\tlog.debug(\"Scheduler for join and union are reset.\");\n \t\t}\n \n+\t\tTaskWrapper taskWrapper = federationContext.getConfig().getTaskWrapper();\n \t\tif (joinScheduler != null) {\n \t\t\tjoinScheduler.abort();\n \t\t}\n \t\tjoinScheduler = new ControlledWorkerScheduler<>(federationContext.getConfig().getJoinWorkerThreads(),\n-\t\t\t\t\"Join Scheduler\");\n+\t\t\t\t\"Join Scheduler\", taskWrapper);\n \n \t\tif (unionScheduler != null) {\n \t\t\tunionScheduler.abort();\n \t\t}\n \t\tunionScheduler = new ControlledWorkerScheduler<>(federationContext.getConfig().getUnionWorkerThreads(),\n-\t\t\t\t\"Union Scheduler\");\n+\t\t\t\t\"Union Scheduler\", taskWrapper);\n \n \t\tif (leftJoinScheduler != null) {\n \t\t\tleftJoinScheduler.abort();\n \t\t}\n \t\tleftJoinScheduler = new ControlledWorkerScheduler<>(federationContext.getConfig().getLeftJoinWorkerThreads(),\n-\t\t\t\t\"Left Join Scheduler\");\n+\t\t\t\t\"Left Join Scheduler\", taskWrapper);\n \n \t}\n \n+\t/**\n+\t * Returns the managed {@link Executor} which takes for properly handling any configured", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60ab98f94ae59414d549fe94691d82d20bdded22"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTI4ODc4OnYy", "diffSide": "RIGHT", "path": "tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/ControlledWorkerScheduler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNzozMToyMVrOG0YQNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNzozMToyMVrOG0YQNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU3NjUwMQ==", "bodyText": "as a TaskWrapper might be a construct also used in other places and there are already quite some constructor parameters and constructor variants I suggest to rather create an interface TaskWrapperAware which allows setting  (and getting) a TaskWrapper and implement that here. This also allows usiing this in other places.", "url": "https://github.com/eclipse/rdf4j/pull/2370#discussion_r457576501", "createdAt": "2020-07-20T17:31:21Z", "author": {"login": "jetztgradnet"}, "path": "tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/ControlledWorkerScheduler.java", "diffHunk": "@@ -46,23 +46,41 @@\n \n \tprivate final int nWorkers;\n \tprivate final String name;\n+\tprivate final TaskWrapper taskWrapper;\n \n \t/**\n \t * Construct a new instance with 20 workers.\n+\t * \n+\t * @deprecated use {@link #ControlledWorkerScheduler(int, String, TaskWrapper)}. Scheduled to be removed in 4.0\n \t */\n+\t@Deprecated\n \tpublic ControlledWorkerScheduler() {\n-\t\tthis(20, \"FedX Worker\");\n+\t\tthis(20, \"FedX Worker\", DefaultTaskWrapper.INSTANCE);\n \t}\n \n \t/**\n \t * Construct a new instance with the specified number of workers and the given name.\n \t *\n \t * @param nWorkers\n \t * @param name\n+\t * @deprecated use {@link #ControlledWorkerScheduler(int, String, TaskWrapper)}. Scheduled to be removed in 4.0\n \t */\n+\t@Deprecated\n \tpublic ControlledWorkerScheduler(int nWorkers, String name) {\n+\t\tthis(nWorkers, name, DefaultTaskWrapper.INSTANCE);\n+\t}\n+\n+\t/**\n+\t * Construct a new instance with the specified number of workers, the given name and {@link TaskWrapper}.\n+\t *\n+\t * @param nWorkers\n+\t * @param name\n+\t * @param taskWrapper\n+\t */\n+\tpublic ControlledWorkerScheduler(int nWorkers, String name, TaskWrapper taskWrapper) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60ab98f94ae59414d549fe94691d82d20bdded22"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTI5MTA3OnYy", "diffSide": "RIGHT", "path": "tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNzozMTo1OVrOG0YRmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNzozMTo1OVrOG0YRmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU3Njg1OQ==", "bodyText": "I suggest adding a default method here which simply returns the provided runnable.", "url": "https://github.com/eclipse/rdf4j/pull/2370#discussion_r457576859", "createdAt": "2020-07-20T17:31:59Z", "author": {"login": "jetztgradnet"}, "path": "tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapper.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+package org.eclipse.rdf4j.federated.evaluation.concurrent;\n+\n+import java.util.concurrent.Executor;\n+\n+import org.eclipse.rdf4j.federated.FedXConfig;\n+\n+/**\n+ * A {@link TaskWrapper} is a facility to wrap {@link Runnable} background tasks before they are passed to the\n+ * {@link Executor}. Use-cases include injection of thread-local context variables, or more fine-granular error\n+ * handling.\n+ * \n+ * <p>\n+ * All sub-queries sent by the federation engine that make use of the concurrency infrastructure (e.g.\n+ * {@link ControlledWorkerScheduler}) are passing this wrapper.\n+ * </p>\n+ * \n+ * <p>\n+ * The concrete implementation can be configured using {@link FedXConfig#withTaskWrapper(TaskWrapper)}.\n+ * </p>\n+ * \n+ * @author Andreas Schwarte\n+ * @see DefaultTaskWrapper\n+ * @see ControlledWorkerScheduler\n+ * @see FedXConfig#withTaskWrapper(TaskWrapper)\n+ */\n+public interface TaskWrapper {\n+\n+\t/**\n+\t * Wrap the given {@link Runnable} and add custom logic.\n+\t * \n+\t * <p>\n+\t * Use cases include injection of state into the thread-local context, or more fine granular error handling.\n+\t * </p>\n+\t * \n+\t * <p>\n+\t * Note that when modifying state in {@link ThreadLocal} it must be reset properly in a try/finally block.\n+\t * </p>\n+\t * \n+\t * @param runnable the task as generated by the FedX engine\n+\t * @return the wrapped {@link Runnable}\n+\t */\n+\tpublic Runnable wrap(Runnable runnable);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60ab98f94ae59414d549fe94691d82d20bdded22"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTMwNjkwOnYy", "diffSide": "RIGHT", "path": "tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNzozNjoyMFrOG0YbNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNzozNjoyMFrOG0YbNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU3OTMxNg==", "bodyText": "let's also add a variant for Callable<T> because depending on the type of tasks passed to an (Scheduled)Exectuor(Service) this is relevant when expecting results from that, e.g. using a Future.\nThis method should also have a default implementation returning the original callable. That way an implementer can still implement this using a lambda even though the interface has two methods and hence is strictly no SAM interface.", "url": "https://github.com/eclipse/rdf4j/pull/2370#discussion_r457579316", "createdAt": "2020-07-20T17:36:20Z", "author": {"login": "jetztgradnet"}, "path": "tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapper.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+package org.eclipse.rdf4j.federated.evaluation.concurrent;\n+\n+import java.util.concurrent.Executor;\n+\n+import org.eclipse.rdf4j.federated.FedXConfig;\n+\n+/**\n+ * A {@link TaskWrapper} is a facility to wrap {@link Runnable} background tasks before they are passed to the\n+ * {@link Executor}. Use-cases include injection of thread-local context variables, or more fine-granular error\n+ * handling.\n+ * \n+ * <p>\n+ * All sub-queries sent by the federation engine that make use of the concurrency infrastructure (e.g.\n+ * {@link ControlledWorkerScheduler}) are passing this wrapper.\n+ * </p>\n+ * \n+ * <p>\n+ * The concrete implementation can be configured using {@link FedXConfig#withTaskWrapper(TaskWrapper)}.\n+ * </p>\n+ * \n+ * @author Andreas Schwarte\n+ * @see DefaultTaskWrapper\n+ * @see ControlledWorkerScheduler\n+ * @see FedXConfig#withTaskWrapper(TaskWrapper)\n+ */\n+public interface TaskWrapper {\n+\n+\t/**\n+\t * Wrap the given {@link Runnable} and add custom logic.\n+\t * \n+\t * <p>\n+\t * Use cases include injection of state into the thread-local context, or more fine granular error handling.\n+\t * </p>\n+\t * \n+\t * <p>\n+\t * Note that when modifying state in {@link ThreadLocal} it must be reset properly in a try/finally block.\n+\t * </p>\n+\t * \n+\t * @param runnable the task as generated by the FedX engine\n+\t * @return the wrapped {@link Runnable}\n+\t */\n+\tpublic Runnable wrap(Runnable runnable);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60ab98f94ae59414d549fe94691d82d20bdded22"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTMxNjA3OnYy", "diffSide": "RIGHT", "path": "tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/DefaultTaskWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNzozODo0MlrOG0YgvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNzozODo0MlrOG0YgvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU4MDczMg==", "bodyText": "when providing a default implementation of the methods this class could be avoided and the INSTANCE simpyl be moved into the interface.", "url": "https://github.com/eclipse/rdf4j/pull/2370#discussion_r457580732", "createdAt": "2020-07-20T17:38:42Z", "author": {"login": "jetztgradnet"}, "path": "tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/DefaultTaskWrapper.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+package org.eclipse.rdf4j.federated.evaluation.concurrent;\n+\n+/**\n+ * Default implementation of {@link TaskWrapper} which returns the unmodified original task\n+ * \n+ * @author Andreas Schwarte\n+ *\n+ */\n+public class DefaultTaskWrapper implements TaskWrapper {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60ab98f94ae59414d549fe94691d82d20bdded22"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjU4MTcxOnYy", "diffSide": "RIGHT", "path": "tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwMTowNzoxNFrOG0kcAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDozODo0MFrOG0nzmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc3NjEyOA==", "bodyText": "Instead of adding a default no-op impl here (which automatically gets inherited by every implementation of TaskWrapper, imho a bit of a code smell) I suggest we instead allow TaskWrapper to be undefined (null or empty) and check for that in relevant places. Also removes the need for default implementations of methods in this interface (which makes discovering what methods to implement easier as well).", "url": "https://github.com/eclipse/rdf4j/pull/2370#discussion_r457776128", "createdAt": "2020-07-21T01:07:14Z", "author": {"login": "jeenbroekstra"}, "path": "tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapper.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+package org.eclipse.rdf4j.federated.evaluation.concurrent;\n+\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.Executor;\n+\n+import org.eclipse.rdf4j.federated.FedXConfig;\n+\n+/**\n+ * A {@link TaskWrapper} is a facility to wrap {@link Runnable} background tasks before they are passed to the\n+ * {@link Executor}. Use-cases include injection of thread-local context variables, or more fine-granular error\n+ * handling.\n+ * \n+ * <p>\n+ * All sub-queries sent by the federation engine that make use of the concurrency infrastructure (e.g.\n+ * {@link ControlledWorkerScheduler}) are passing this wrapper.\n+ * </p>\n+ * \n+ * <p>\n+ * The concrete implementation can be configured using {@link FedXConfig#withTaskWrapper(TaskWrapper)}.\n+ * </p>\n+ * \n+ * @author Andreas Schwarte\n+ * @see ControlledWorkerScheduler\n+ * @see FedXConfig#withTaskWrapper(TaskWrapper)\n+ */\n+public interface TaskWrapper {\n+\n+\t/**\n+\t * Default implementation of {@link TaskWrapper} which returns the unmodified original task\n+\t */\n+\tstatic final TaskWrapper DEFAULT = new TaskWrapper() {\n+\t};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37686de23d831d292a113c0248b8af0214b1bc7f"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgzMTMyMw==", "bodyText": "Done, comment is addressed. Let me know if this works for you", "url": "https://github.com/eclipse/rdf4j/pull/2370#discussion_r457831323", "createdAt": "2020-07-21T04:38:40Z", "author": {"login": "aschwarte10"}, "path": "tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapper.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+package org.eclipse.rdf4j.federated.evaluation.concurrent;\n+\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.Executor;\n+\n+import org.eclipse.rdf4j.federated.FedXConfig;\n+\n+/**\n+ * A {@link TaskWrapper} is a facility to wrap {@link Runnable} background tasks before they are passed to the\n+ * {@link Executor}. Use-cases include injection of thread-local context variables, or more fine-granular error\n+ * handling.\n+ * \n+ * <p>\n+ * All sub-queries sent by the federation engine that make use of the concurrency infrastructure (e.g.\n+ * {@link ControlledWorkerScheduler}) are passing this wrapper.\n+ * </p>\n+ * \n+ * <p>\n+ * The concrete implementation can be configured using {@link FedXConfig#withTaskWrapper(TaskWrapper)}.\n+ * </p>\n+ * \n+ * @author Andreas Schwarte\n+ * @see ControlledWorkerScheduler\n+ * @see FedXConfig#withTaskWrapper(TaskWrapper)\n+ */\n+public interface TaskWrapper {\n+\n+\t/**\n+\t * Default implementation of {@link TaskWrapper} which returns the unmodified original task\n+\t */\n+\tstatic final TaskWrapper DEFAULT = new TaskWrapper() {\n+\t};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc3NjEyOA=="}, "originalCommit": {"oid": "37686de23d831d292a113c0248b8af0214b1bc7f"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1Njk1NzUyOnYy", "diffSide": "RIGHT", "path": "tools/federation/src/main/java/org/eclipse/rdf4j/federated/FederationManager.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDo0Mzo1OVrOG0n4rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDo1MTozM1rOG0oAmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgzMjYyMQ==", "bodyText": "You're passing the Optional, rather than the TaskWrapper - will that work?", "url": "https://github.com/eclipse/rdf4j/pull/2370#discussion_r457832621", "createdAt": "2020-07-21T04:43:59Z", "author": {"login": "jeenbroekstra"}, "path": "tools/federation/src/main/java/org/eclipse/rdf4j/federated/FederationManager.java", "diffHunk": "@@ -103,28 +105,46 @@ public void reset() {\n \t\t\tlog.debug(\"Scheduler for join and union are reset.\");\n \t\t}\n \n+\t\tOptional<TaskWrapper> taskWrapper = federationContext.getConfig().getTaskWrapper();\n \t\tif (joinScheduler != null) {\n \t\t\tjoinScheduler.abort();\n \t\t}\n \t\tjoinScheduler = new ControlledWorkerScheduler<>(federationContext.getConfig().getJoinWorkerThreads(),\n \t\t\t\t\"Join Scheduler\");\n+\t\tjoinScheduler.setTaskWrapper(taskWrapper);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de2e229b9ba1ad9eb517d6e75cffaea4a3de31fd"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgzMzI1OA==", "bodyText": "Ah never mind I see what you did - added an overloaded setter.\nI personally prefer handling the Optional at the point of message passing rather than inside the setter:\nfederationContext.getConfig().getTaskWrapper().ifPresent(joinScheduler::setTaskWrapper);\n\nbut YMMV.", "url": "https://github.com/eclipse/rdf4j/pull/2370#discussion_r457833258", "createdAt": "2020-07-21T04:46:19Z", "author": {"login": "jeenbroekstra"}, "path": "tools/federation/src/main/java/org/eclipse/rdf4j/federated/FederationManager.java", "diffHunk": "@@ -103,28 +105,46 @@ public void reset() {\n \t\t\tlog.debug(\"Scheduler for join and union are reset.\");\n \t\t}\n \n+\t\tOptional<TaskWrapper> taskWrapper = federationContext.getConfig().getTaskWrapper();\n \t\tif (joinScheduler != null) {\n \t\t\tjoinScheduler.abort();\n \t\t}\n \t\tjoinScheduler = new ControlledWorkerScheduler<>(federationContext.getConfig().getJoinWorkerThreads(),\n \t\t\t\t\"Join Scheduler\");\n+\t\tjoinScheduler.setTaskWrapper(taskWrapper);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgzMjYyMQ=="}, "originalCommit": {"oid": "de2e229b9ba1ad9eb517d6e75cffaea4a3de31fd"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgzNDY1MQ==", "bodyText": "That looks better, will change and remove the default implementation for optional. Thanks", "url": "https://github.com/eclipse/rdf4j/pull/2370#discussion_r457834651", "createdAt": "2020-07-21T04:51:33Z", "author": {"login": "aschwarte10"}, "path": "tools/federation/src/main/java/org/eclipse/rdf4j/federated/FederationManager.java", "diffHunk": "@@ -103,28 +105,46 @@ public void reset() {\n \t\t\tlog.debug(\"Scheduler for join and union are reset.\");\n \t\t}\n \n+\t\tOptional<TaskWrapper> taskWrapper = federationContext.getConfig().getTaskWrapper();\n \t\tif (joinScheduler != null) {\n \t\t\tjoinScheduler.abort();\n \t\t}\n \t\tjoinScheduler = new ControlledWorkerScheduler<>(federationContext.getConfig().getJoinWorkerThreads(),\n \t\t\t\t\"Join Scheduler\");\n+\t\tjoinScheduler.setTaskWrapper(taskWrapper);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgzMjYyMQ=="}, "originalCommit": {"oid": "de2e229b9ba1ad9eb517d6e75cffaea4a3de31fd"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1444, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}