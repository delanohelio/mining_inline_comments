{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzNzYzODI0", "number": 2539, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwMDoxMzoxOFrOEn4zQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNzozNTowNFrOE_fJzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMjYwNTQ1OnYy", "diffSide": "RIGHT", "path": "core/queryalgebra/model/src/main/java/org/eclipse/rdf4j/query/algebra/Var.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwMDoxMzoxOFrOHYrRzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNToyMjoyOFrOHYuzdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYzNjk0MA==", "bodyText": "Nice idea to create an anonymous variable this way, but this will cause syntactically illegal variable names - in SPARQL, variable names cannot contain '-'. See createAnonVar in the SPARQL TupleExpBuilder, which use this to create the name:\n new Var(\"_anon_\" + UUID.randomUUID().toString().replaceAll(\"-\", \"_\")); \n\nYou probably also need to set the isAnonymous flag.\nMight be a good idea to handle this in one place (here in the constructor) and refactor the TupleExprBuilder and other places where we create anonymous vars. We've had problems in the past with the naming pattern not being consistent, so DRYing this up is a good idea.", "url": "https://github.com/eclipse/rdf4j/pull/2539#discussion_r495636940", "createdAt": "2020-09-28T00:13:18Z", "author": {"login": "jeenbroekstra"}, "path": "core/queryalgebra/model/src/main/java/org/eclipse/rdf4j/query/algebra/Var.java", "diffHunk": "@@ -42,6 +45,11 @@ public Var(String name, Value value) {\n \t\tsetValue(value);\n \t}\n \n+\tpublic Var(Value value) {\n+\t\tthis(UUID.randomUUID() + \"_anon\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ca0979b126e30941e587ee6290fac5868fa28bf"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY5NDcxMA==", "bodyText": "I'm not sure if I use this code anymore, will have to take another look. Might be something left over from testing.\nI've updated the code. I used .replace instead of .replaceAll since .replace is the same as .replaceAll except that it doesn't support regex.", "url": "https://github.com/eclipse/rdf4j/pull/2539#discussion_r495694710", "createdAt": "2020-09-28T05:22:28Z", "author": {"login": "hmottestad"}, "path": "core/queryalgebra/model/src/main/java/org/eclipse/rdf4j/query/algebra/Var.java", "diffHunk": "@@ -42,6 +45,11 @@ public Var(String name, Value value) {\n \t\tsetValue(value);\n \t}\n \n+\tpublic Var(Value value) {\n+\t\tthis(UUID.randomUUID() + \"_anon\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYzNjk0MA=="}, "originalCommit": {"oid": "0ca0979b126e30941e587ee6290fac5868fa28bf"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMjYxMDM4OnYy", "diffSide": "RIGHT", "path": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/ConnectionsGroup.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwMDoxODozNVrOHYrUTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNToxNToxNlrOHYus1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYzNzU4Mg==", "bodyText": "Two things:\n\nlet's call the package 'ast' rather than 'abstractsyntaxtree', to be consistent with how we do this for SPARQL and SeRQL as well.\nI thought part of the idea was to have an AST that is not \"just\" usable by the SAIL, but also potentially for other SHACL implementations. If that is still the case it should be put in a in a more generic package: org.eclipse.rdf4j.shacl.ast, and ideally a separate module as well.", "url": "https://github.com/eclipse/rdf4j/pull/2539#discussion_r495637582", "createdAt": "2020-09-28T00:18:35Z", "author": {"login": "jeenbroekstra"}, "path": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/ConnectionsGroup.java", "diffHunk": "@@ -14,11 +14,10 @@\n import java.util.concurrent.ConcurrentLinkedQueue;\n \n import org.eclipse.rdf4j.common.annotation.InternalUseOnly;\n-import org.eclipse.rdf4j.common.transaction.TransactionSetting;\n import org.eclipse.rdf4j.sail.Sail;\n import org.eclipse.rdf4j.sail.SailConnection;\n-import org.eclipse.rdf4j.sail.shacl.planNodes.BufferedSplitter;\n-import org.eclipse.rdf4j.sail.shacl.planNodes.PlanNode;\n+import org.eclipse.rdf4j.sail.shacl.abstractsyntaxtree.planNodes.BufferedSplitter;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ca0979b126e30941e587ee6290fac5868fa28bf"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY5MzAxMw==", "bodyText": "It's called abstract syntax tree so that it can exist together with the old AST. We can rename it before merging.", "url": "https://github.com/eclipse/rdf4j/pull/2539#discussion_r495693013", "createdAt": "2020-09-28T05:15:16Z", "author": {"login": "hmottestad"}, "path": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/ConnectionsGroup.java", "diffHunk": "@@ -14,11 +14,10 @@\n import java.util.concurrent.ConcurrentLinkedQueue;\n \n import org.eclipse.rdf4j.common.annotation.InternalUseOnly;\n-import org.eclipse.rdf4j.common.transaction.TransactionSetting;\n import org.eclipse.rdf4j.sail.Sail;\n import org.eclipse.rdf4j.sail.SailConnection;\n-import org.eclipse.rdf4j.sail.shacl.planNodes.BufferedSplitter;\n-import org.eclipse.rdf4j.sail.shacl.planNodes.PlanNode;\n+import org.eclipse.rdf4j.sail.shacl.abstractsyntaxtree.planNodes.BufferedSplitter;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYzNzU4Mg=="}, "originalCommit": {"oid": "0ca0979b126e30941e587ee6290fac5868fa28bf"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMjYxMzU3OnYy", "diffSide": "RIGHT", "path": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/abstractsyntaxtree/ValidationApproach.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwMDoyMjowNlrOHYrV5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwMDoyMjowNlrOHYrV5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYzNzk5MQ==", "bodyText": "ObNitpick, this should be all caps.", "url": "https://github.com/eclipse/rdf4j/pull/2539#discussion_r495637991", "createdAt": "2020-09-28T00:22:06Z", "author": {"login": "jeenbroekstra"}, "path": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/abstractsyntaxtree/ValidationApproach.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package org.eclipse.rdf4j.sail.shacl.abstractsyntaxtree;\n+\n+public enum ValidationApproach {\n+\n+\tTransactional,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ca0979b126e30941e587ee6290fac5868fa28bf"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMjYxNTE0OnYy", "diffSide": "RIGHT", "path": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/abstractsyntaxtree/constraintcomponents/AndConstraintComponent.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwMDoyMzo1MlrOHYrWtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNToxNjozOVrOHYuuEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYzODE5Ng==", "bodyText": "Ah, this suggests that this AST is still tightly coupled to the ShaclSail, in which case separating it out to a generic package probably makes little sense.", "url": "https://github.com/eclipse/rdf4j/pull/2539#discussion_r495638196", "createdAt": "2020-09-28T00:23:52Z", "author": {"login": "jeenbroekstra"}, "path": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/abstractsyntaxtree/constraintcomponents/AndConstraintComponent.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package org.eclipse.rdf4j.sail.shacl.abstractsyntaxtree.constraintcomponents;\n+\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.rdf4j.model.IRI;\n+import org.eclipse.rdf4j.model.Model;\n+import org.eclipse.rdf4j.model.Resource;\n+import org.eclipse.rdf4j.model.vocabulary.SHACL;\n+import org.eclipse.rdf4j.repository.RepositoryConnection;\n+import org.eclipse.rdf4j.sail.shacl.AST.ShaclProperties;\n+import org.eclipse.rdf4j.sail.shacl.ConnectionsGroup;\n+import org.eclipse.rdf4j.sail.shacl.ShaclSail;\n+import org.eclipse.rdf4j.sail.shacl.SourceConstraintComponent;\n+import org.eclipse.rdf4j.sail.shacl.abstractsyntaxtree.Cache;\n+import org.eclipse.rdf4j.sail.shacl.abstractsyntaxtree.HelperTool;\n+import org.eclipse.rdf4j.sail.shacl.abstractsyntaxtree.NodeShape;\n+import org.eclipse.rdf4j.sail.shacl.abstractsyntaxtree.PropertyShape;\n+import org.eclipse.rdf4j.sail.shacl.abstractsyntaxtree.Shape;\n+import org.eclipse.rdf4j.sail.shacl.abstractsyntaxtree.planNodes.DebugPlanNode;\n+import org.eclipse.rdf4j.sail.shacl.abstractsyntaxtree.planNodes.EmptyNode;\n+import org.eclipse.rdf4j.sail.shacl.abstractsyntaxtree.planNodes.PlanNode;\n+import org.eclipse.rdf4j.sail.shacl.abstractsyntaxtree.planNodes.PlanNodeProvider;\n+import org.eclipse.rdf4j.sail.shacl.abstractsyntaxtree.planNodes.UnionNode;\n+import org.eclipse.rdf4j.sail.shacl.abstractsyntaxtree.planNodes.Unique;\n+import org.eclipse.rdf4j.sail.shacl.abstractsyntaxtree.targets.TargetChain;\n+\n+public class AndConstraintComponent extends AbstractConstraintComponent {\n+\tList<Shape> and;\n+\n+\tpublic AndConstraintComponent(Resource id, RepositoryConnection connection,\n+\t\t\tCache cache, ShaclSail shaclSail) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ca0979b126e30941e587ee6290fac5868fa28bf"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY5MzMzMQ==", "bodyText": "It's not that tightly coupled. The SHACL sail is only used to get hold of some user settings. Could make an interface for that instead.", "url": "https://github.com/eclipse/rdf4j/pull/2539#discussion_r495693331", "createdAt": "2020-09-28T05:16:39Z", "author": {"login": "hmottestad"}, "path": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/abstractsyntaxtree/constraintcomponents/AndConstraintComponent.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package org.eclipse.rdf4j.sail.shacl.abstractsyntaxtree.constraintcomponents;\n+\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.rdf4j.model.IRI;\n+import org.eclipse.rdf4j.model.Model;\n+import org.eclipse.rdf4j.model.Resource;\n+import org.eclipse.rdf4j.model.vocabulary.SHACL;\n+import org.eclipse.rdf4j.repository.RepositoryConnection;\n+import org.eclipse.rdf4j.sail.shacl.AST.ShaclProperties;\n+import org.eclipse.rdf4j.sail.shacl.ConnectionsGroup;\n+import org.eclipse.rdf4j.sail.shacl.ShaclSail;\n+import org.eclipse.rdf4j.sail.shacl.SourceConstraintComponent;\n+import org.eclipse.rdf4j.sail.shacl.abstractsyntaxtree.Cache;\n+import org.eclipse.rdf4j.sail.shacl.abstractsyntaxtree.HelperTool;\n+import org.eclipse.rdf4j.sail.shacl.abstractsyntaxtree.NodeShape;\n+import org.eclipse.rdf4j.sail.shacl.abstractsyntaxtree.PropertyShape;\n+import org.eclipse.rdf4j.sail.shacl.abstractsyntaxtree.Shape;\n+import org.eclipse.rdf4j.sail.shacl.abstractsyntaxtree.planNodes.DebugPlanNode;\n+import org.eclipse.rdf4j.sail.shacl.abstractsyntaxtree.planNodes.EmptyNode;\n+import org.eclipse.rdf4j.sail.shacl.abstractsyntaxtree.planNodes.PlanNode;\n+import org.eclipse.rdf4j.sail.shacl.abstractsyntaxtree.planNodes.PlanNodeProvider;\n+import org.eclipse.rdf4j.sail.shacl.abstractsyntaxtree.planNodes.UnionNode;\n+import org.eclipse.rdf4j.sail.shacl.abstractsyntaxtree.planNodes.Unique;\n+import org.eclipse.rdf4j.sail.shacl.abstractsyntaxtree.targets.TargetChain;\n+\n+public class AndConstraintComponent extends AbstractConstraintComponent {\n+\tList<Shape> and;\n+\n+\tpublic AndConstraintComponent(Resource id, RepositoryConnection connection,\n+\t\t\tCache cache, ShaclSail shaclSail) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYzODE5Ng=="}, "originalCommit": {"oid": "0ca0979b126e30941e587ee6290fac5868fa28bf"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzIwMDQzOnYy", "diffSide": "RIGHT", "path": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/abstractsyntaxtree/Cache.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNToxNDo0MlrOHbxhnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QxNDo1MTo0OFrOHcB9ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg4NTAyMA==", "bodyText": "That sound helpful for performance. Do you have a comparison between the resources used by the old AST and the new one?", "url": "https://github.com/eclipse/rdf4j/pull/2539#discussion_r498885020", "createdAt": "2020-10-02T15:14:42Z", "author": {"login": "rdstn"}, "path": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/abstractsyntaxtree/Cache.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package org.eclipse.rdf4j.sail.shacl.abstractsyntaxtree;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import org.eclipse.rdf4j.model.Resource;\n+\n+public class Cache {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c481380da9d3ccc2f89097ef0c2149cb7f80f9f8"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE1NDMzOQ==", "bodyText": "I think it's just the cache used to allow parsing of SHACL with recursion. We don't allow for executing SHACL with recursion though, but parsing is a first step. The actual cache, which is also available in the current SHACL implementation is broken at the moment.", "url": "https://github.com/eclipse/rdf4j/pull/2539#discussion_r499154339", "createdAt": "2020-10-03T14:51:48Z", "author": {"login": "hmottestad"}, "path": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/abstractsyntaxtree/Cache.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package org.eclipse.rdf4j.sail.shacl.abstractsyntaxtree;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import org.eclipse.rdf4j.model.Resource;\n+\n+public class Cache {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg4NTAyMA=="}, "originalCommit": {"oid": "c481380da9d3ccc2f89097ef0c2149cb7f80f9f8"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzIxNTgyOnYy", "diffSide": "RIGHT", "path": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/abstractsyntaxtree/HelperTool.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNToxOTowMlrOHbxrmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwODo1MToxMFrOH6RWcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg4NzU3OA==", "bodyText": "This may be useful otuside of the abstract syntax tree. Perhaps movement to the common package might be relevant.", "url": "https://github.com/eclipse/rdf4j/pull/2539#discussion_r498887578", "createdAt": "2020-10-02T15:19:02Z", "author": {"login": "rdstn"}, "path": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/abstractsyntaxtree/HelperTool.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package org.eclipse.rdf4j.sail.shacl.abstractsyntaxtree;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.rdf4j.model.Model;\n+import org.eclipse.rdf4j.model.Resource;\n+import org.eclipse.rdf4j.model.Statement;\n+import org.eclipse.rdf4j.model.Value;\n+import org.eclipse.rdf4j.model.ValueFactory;\n+import org.eclipse.rdf4j.model.impl.SimpleValueFactory;\n+import org.eclipse.rdf4j.model.vocabulary.RDF;\n+import org.eclipse.rdf4j.repository.RepositoryConnection;\n+\n+public class HelperTool {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c481380da9d3ccc2f89097ef0c2149cb7f80f9f8"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc3MjAzNw==", "bodyText": "We already have generic utility functions for converting between java collections and rdf collections. @hmottestad any reason you're not just reusing org.eclipse.rdf4j.model.util.RDFCollections (or perhaps org.eclipse.rdf4j.repository.util.Connections) here?", "url": "https://github.com/eclipse/rdf4j/pull/2539#discussion_r530772037", "createdAt": "2020-11-26T04:48:53Z", "author": {"login": "jeenbroekstra"}, "path": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/abstractsyntaxtree/HelperTool.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package org.eclipse.rdf4j.sail.shacl.abstractsyntaxtree;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.rdf4j.model.Model;\n+import org.eclipse.rdf4j.model.Resource;\n+import org.eclipse.rdf4j.model.Statement;\n+import org.eclipse.rdf4j.model.Value;\n+import org.eclipse.rdf4j.model.ValueFactory;\n+import org.eclipse.rdf4j.model.impl.SimpleValueFactory;\n+import org.eclipse.rdf4j.model.vocabulary.RDF;\n+import org.eclipse.rdf4j.repository.RepositoryConnection;\n+\n+public class HelperTool {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg4NzU3OA=="}, "originalCommit": {"oid": "c481380da9d3ccc2f89097ef0c2149cb7f80f9f8"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc3Njk5Mg==", "bodyText": "Doesn't supporting generics.", "url": "https://github.com/eclipse/rdf4j/pull/2539#discussion_r530776992", "createdAt": "2020-11-26T05:10:15Z", "author": {"login": "hmottestad"}, "path": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/abstractsyntaxtree/HelperTool.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package org.eclipse.rdf4j.sail.shacl.abstractsyntaxtree;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.rdf4j.model.Model;\n+import org.eclipse.rdf4j.model.Resource;\n+import org.eclipse.rdf4j.model.Statement;\n+import org.eclipse.rdf4j.model.Value;\n+import org.eclipse.rdf4j.model.ValueFactory;\n+import org.eclipse.rdf4j.model.impl.SimpleValueFactory;\n+import org.eclipse.rdf4j.model.vocabulary.RDF;\n+import org.eclipse.rdf4j.repository.RepositoryConnection;\n+\n+public class HelperTool {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg4NzU3OA=="}, "originalCommit": {"oid": "c481380da9d3ccc2f89097ef0c2149cb7f80f9f8"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDgzNjQwNQ==", "bodyText": "Doesn't supporting generics.\n\nOk, if you need generics, how about we add this to the RDFCollections util instead?", "url": "https://github.com/eclipse/rdf4j/pull/2539#discussion_r530836405", "createdAt": "2020-11-26T08:04:43Z", "author": {"login": "jeenbroekstra"}, "path": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/abstractsyntaxtree/HelperTool.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package org.eclipse.rdf4j.sail.shacl.abstractsyntaxtree;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.rdf4j.model.Model;\n+import org.eclipse.rdf4j.model.Resource;\n+import org.eclipse.rdf4j.model.Statement;\n+import org.eclipse.rdf4j.model.Value;\n+import org.eclipse.rdf4j.model.ValueFactory;\n+import org.eclipse.rdf4j.model.impl.SimpleValueFactory;\n+import org.eclipse.rdf4j.model.vocabulary.RDF;\n+import org.eclipse.rdf4j.repository.RepositoryConnection;\n+\n+public class HelperTool {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg4NzU3OA=="}, "originalCommit": {"oid": "c481380da9d3ccc2f89097ef0c2149cb7f80f9f8"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg2MzczMQ==", "bodyText": "That's essentially what Rado's comment boils down to.", "url": "https://github.com/eclipse/rdf4j/pull/2539#discussion_r530863731", "createdAt": "2020-11-26T08:51:10Z", "author": {"login": "hmottestad"}, "path": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/abstractsyntaxtree/HelperTool.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package org.eclipse.rdf4j.sail.shacl.abstractsyntaxtree;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.rdf4j.model.Model;\n+import org.eclipse.rdf4j.model.Resource;\n+import org.eclipse.rdf4j.model.Statement;\n+import org.eclipse.rdf4j.model.Value;\n+import org.eclipse.rdf4j.model.ValueFactory;\n+import org.eclipse.rdf4j.model.impl.SimpleValueFactory;\n+import org.eclipse.rdf4j.model.vocabulary.RDF;\n+import org.eclipse.rdf4j.repository.RepositoryConnection;\n+\n+public class HelperTool {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg4NzU3OA=="}, "originalCommit": {"oid": "c481380da9d3ccc2f89097ef0c2149cb7f80f9f8"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzI1OTkyOnYy", "diffSide": "RIGHT", "path": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/abstractsyntaxtree/ShaclUnsupportedException.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNTozMDo1N1rOHbyHDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QxNDo1Mjo1M1rOHcB-AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg5NDYwNQ==", "bodyText": "From what I've seen, this gets thrown only for paths, but aren't qualified shapes also not yet done?", "url": "https://github.com/eclipse/rdf4j/pull/2539#discussion_r498894605", "createdAt": "2020-10-02T15:30:57Z", "author": {"login": "rdstn"}, "path": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/abstractsyntaxtree/ShaclUnsupportedException.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package org.eclipse.rdf4j.sail.shacl.abstractsyntaxtree;\n+\n+public class ShaclUnsupportedException extends UnsupportedOperationException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c481380da9d3ccc2f89097ef0c2149cb7f80f9f8"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE1NDQzMw==", "bodyText": "I'm not very consisten with this. I'm unsure if I want to throw and exception in general for unsupported things or just simply log a message.", "url": "https://github.com/eclipse/rdf4j/pull/2539#discussion_r499154433", "createdAt": "2020-10-03T14:52:53Z", "author": {"login": "hmottestad"}, "path": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/abstractsyntaxtree/ShaclUnsupportedException.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package org.eclipse.rdf4j.sail.shacl.abstractsyntaxtree;\n+\n+public class ShaclUnsupportedException extends UnsupportedOperationException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg5NDYwNQ=="}, "originalCommit": {"oid": "c481380da9d3ccc2f89097ef0c2149cb7f80f9f8"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzI4MjQ3OnYy", "diffSide": "RIGHT", "path": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/abstractsyntaxtree/ValidationApproach.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNTozNzozM1rOHbyVfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QxNDo1NDozOFrOHcB-qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg5ODMwMA==", "bodyText": "Do we have details on the difference between the validation approaches? And could we configure them easily?", "url": "https://github.com/eclipse/rdf4j/pull/2539#discussion_r498898300", "createdAt": "2020-10-02T15:37:33Z", "author": {"login": "rdstn"}, "path": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/abstractsyntaxtree/ValidationApproach.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package org.eclipse.rdf4j.sail.shacl.abstractsyntaxtree;\n+\n+public enum ValidationApproach {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c481380da9d3ccc2f89097ef0c2149cb7f80f9f8"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE1NDYwMA==", "bodyText": "When generating the validation plan we ask what the preferred validation approach is. Things aren't working that well at the moment so it's mostly disabled. But the code is here so we have somewhere to start.", "url": "https://github.com/eclipse/rdf4j/pull/2539#discussion_r499154600", "createdAt": "2020-10-03T14:54:38Z", "author": {"login": "hmottestad"}, "path": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/abstractsyntaxtree/ValidationApproach.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package org.eclipse.rdf4j.sail.shacl.abstractsyntaxtree;\n+\n+public enum ValidationApproach {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg5ODMwMA=="}, "originalCommit": {"oid": "c481380da9d3ccc2f89097ef0c2149cb7f80f9f8"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzM0MzQ0OnYy", "diffSide": "RIGHT", "path": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/abstractsyntaxtree/constraintcomponents/NodeKindConstraintComponent.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNTo1NToyNFrOHby8VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNTo1NToyNFrOHby8VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkwODI0NA==", "bodyText": "The blank nodes (not here in particular, generally in the internal SHACL implementation) are a bit of a nuissance. We are using a cluster of several synchronized repositories and they tend to assign different blank node IDs. It's also occasionally problematic to fetch and parse the SHACL schema from the database - though that's easier to resolve with a bit of development effort. Is there a way to make them more consistent?", "url": "https://github.com/eclipse/rdf4j/pull/2539#discussion_r498908244", "createdAt": "2020-10-02T15:55:24Z", "author": {"login": "rdstn"}, "path": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/abstractsyntaxtree/constraintcomponents/NodeKindConstraintComponent.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package org.eclipse.rdf4j.sail.shacl.abstractsyntaxtree.constraintcomponents;\n+\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+import org.eclipse.rdf4j.model.IRI;\n+import org.eclipse.rdf4j.model.Model;\n+import org.eclipse.rdf4j.model.Resource;\n+import org.eclipse.rdf4j.model.vocabulary.SHACL;\n+import org.eclipse.rdf4j.sail.shacl.SourceConstraintComponent;\n+import org.eclipse.rdf4j.sail.shacl.abstractsyntaxtree.planNodes.FilterPlanNode;\n+import org.eclipse.rdf4j.sail.shacl.abstractsyntaxtree.planNodes.NodeKindFilter;\n+import org.eclipse.rdf4j.sail.shacl.abstractsyntaxtree.planNodes.PlanNode;\n+\n+public class NodeKindConstraintComponent extends SimpleAbstractConstraintComponent {\n+\n+\tNodeKind nodeKind;\n+\n+\tpublic NodeKindConstraintComponent(Resource nodeKind) {\n+\t\tthis.nodeKind = NodeKind.from(nodeKind);\n+\t}\n+\n+\t@Override\n+\tString getSparqlFilterExpression(String varName, boolean negated) {\n+\t\tif (negated) {\n+\t\t\treturn \"(isIRI(?\" + varName + \") && <\" + nodeKind.iri + \"> IN ( <\" + SHACL.IRI + \">, <\"\n+\t\t\t\t\t+ SHACL.BLANK_NODE_OR_IRI + \">, <\" + SHACL.IRI_OR_LITERAL + \"> ) ) ||\\n\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c481380da9d3ccc2f89097ef0c2149cb7f80f9f8"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzM1MTQ4OnYy", "diffSide": "RIGHT", "path": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/abstractsyntaxtree/paths/AlternativePath.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNTo1Nzo1MFrOHbzBeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNTo1Nzo1MFrOHbzBeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkwOTU2Mg==", "bodyText": "Probably this one has the second highest priority after InversePath.", "url": "https://github.com/eclipse/rdf4j/pull/2539#discussion_r498909562", "createdAt": "2020-10-02T15:57:50Z", "author": {"login": "rdstn"}, "path": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/abstractsyntaxtree/paths/AlternativePath.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package org.eclipse.rdf4j.sail.shacl.abstractsyntaxtree.paths;\n+\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.rdf4j.model.IRI;\n+import org.eclipse.rdf4j.model.Model;\n+import org.eclipse.rdf4j.model.Resource;\n+import org.eclipse.rdf4j.model.vocabulary.SHACL;\n+import org.eclipse.rdf4j.query.algebra.StatementPattern;\n+import org.eclipse.rdf4j.query.algebra.Var;\n+import org.eclipse.rdf4j.repository.RepositoryConnection;\n+import org.eclipse.rdf4j.sail.shacl.ConnectionsGroup;\n+import org.eclipse.rdf4j.sail.shacl.RdfsSubClassOfReasoner;\n+import org.eclipse.rdf4j.sail.shacl.abstractsyntaxtree.ShaclUnsupportedException;\n+import org.eclipse.rdf4j.sail.shacl.abstractsyntaxtree.planNodes.PlanNode;\n+import org.eclipse.rdf4j.sail.shacl.abstractsyntaxtree.planNodes.PlanNodeWrapper;\n+\n+public class AlternativePath extends Path {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c481380da9d3ccc2f89097ef0c2149cb7f80f9f8"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzQxODA3OnYy", "diffSide": "RIGHT", "path": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/abstractsyntaxtree/planNodes/Formatter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNjoxODo1M1rOHbzrgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNjoxODo1M1rOHbzrgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyMDMyMg==", "bodyText": "This could be moved to the util class?", "url": "https://github.com/eclipse/rdf4j/pull/2539#discussion_r498920322", "createdAt": "2020-10-02T16:18:53Z", "author": {"login": "rdstn"}, "path": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/abstractsyntaxtree/planNodes/Formatter.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+package org.eclipse.rdf4j.sail.shacl.abstractsyntaxtree.planNodes;\n+\n+import org.eclipse.rdf4j.model.IRI;\n+import org.eclipse.rdf4j.model.Value;\n+import org.eclipse.rdf4j.model.vocabulary.RDF;\n+import org.eclipse.rdf4j.model.vocabulary.RDFS;\n+import org.eclipse.rdf4j.model.vocabulary.SHACL;\n+\n+public class Formatter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c481380da9d3ccc2f89097ef0c2149cb7f80f9f8"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzQyODg3OnYy", "diffSide": "RIGHT", "path": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/abstractsyntaxtree/planNodes/LanguageInFilter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNjoyMjoxMVrOHbzycg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNjoyMjoxMVrOHbzycg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyMjA5OA==", "bodyText": "Looks like we have some subtagging, which is good.", "url": "https://github.com/eclipse/rdf4j/pull/2539#discussion_r498922098", "createdAt": "2020-10-02T16:22:11Z", "author": {"login": "rdstn"}, "path": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/abstractsyntaxtree/planNodes/LanguageInFilter.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+\n+package org.eclipse.rdf4j.sail.shacl.abstractsyntaxtree.planNodes;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.eclipse.rdf4j.model.Literal;\n+import org.eclipse.rdf4j.model.util.Literals;\n+\n+/**\n+ * @author H\u00e5vard Ottestad\n+ */\n+public class LanguageInFilter extends FilterPlanNode {\n+\n+\tprivate final List<String> languageRanges;\n+\tprivate final Set<String> lowerCaseLanguageIn;\n+\n+\tpublic LanguageInFilter(PlanNode parent, Set<String> lowerCaseLanguageIn, List<String> languageRanges) {\n+\t\tsuper(parent);\n+\t\tthis.lowerCaseLanguageIn = lowerCaseLanguageIn;\n+\t\tthis.languageRanges = languageRanges;\n+\t}\n+\n+\t@Override\n+\tboolean checkTuple(ValidationTuple t) {\n+\t\tif (!(t.getValue() instanceof Literal)) {\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tOptional<String> language = ((Literal) t.getValue()).getLanguage();\n+\t\tif (!language.isPresent()) {\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\t// early matching\n+\t\tboolean languageMatches = language.map(String::toLowerCase).filter(lowerCaseLanguageIn::contains).isPresent();\n+\t\tif (languageMatches) {\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\t// test according to BCP47\n+\t\tString langTag = language.get();\n+\n+\t\tfor (String languageRange : languageRanges) {\n+\t\t\tif (Literals.langMatches(langTag, languageRange)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c481380da9d3ccc2f89097ef0c2149cb7f80f9f8"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODkyMzE2OnYy", "diffSide": "RIGHT", "path": "core/queryalgebra/model/src/main/java/org/eclipse/rdf4j/query/algebra/Var.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNDoxNjozNFrOH6LSUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMjoyMzowOFrOH68jyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc2NDM3MQ==", "bodyText": "Let's make sure this uses the same algorithm as oer.query.parser.sparql.TupleExprBuilder#createAnonVar:\n\"_anon_\" + UUID.randomUUID().toString().replaceAll(\"-\", \"_\")\n\nIn fact if we add this as a convenience thing here in the Var class, let's also make sure TupleExprBuilder reuses it (you don't have to do that in this PR btw, it's a bit out of scope :))", "url": "https://github.com/eclipse/rdf4j/pull/2539#discussion_r530764371", "createdAt": "2020-11-26T04:16:34Z", "author": {"login": "jeenbroekstra"}, "path": "core/queryalgebra/model/src/main/java/org/eclipse/rdf4j/query/algebra/Var.java", "diffHunk": "@@ -42,6 +45,12 @@ public Var(String name, Value value) {\n \t\tsetValue(value);\n \t}\n \n+\tpublic Var(Value value) {\n+\t\tthis(UUID.randomUUID().toString().replace(\"-\", \"\") + \"_anon\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "308ac2438e959a5da790c5aa33869ec63e4e789f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc5MDI0MQ==", "bodyText": "I'm actually going to redo some of the use of Var and StatementPattern because things aren't working as I want with the last bit of the support for rsx:targetShape. I was actually considering making some more constructors in Var and also a static constant anonymous instance. Also quite annoying that there is no documentation in the Var class!", "url": "https://github.com/eclipse/rdf4j/pull/2539#discussion_r530790241", "createdAt": "2020-11-26T06:01:39Z", "author": {"login": "hmottestad"}, "path": "core/queryalgebra/model/src/main/java/org/eclipse/rdf4j/query/algebra/Var.java", "diffHunk": "@@ -42,6 +45,12 @@ public Var(String name, Value value) {\n \t\tsetValue(value);\n \t}\n \n+\tpublic Var(Value value) {\n+\t\tthis(UUID.randomUUID().toString().replace(\"-\", \"\") + \"_anon\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc2NDM3MQ=="}, "originalCommit": {"oid": "308ac2438e959a5da790c5aa33869ec63e4e789f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg0MTM1Ng==", "bodyText": "(I think github might be having some issues, because some of my comments are showing up when I look at the diff, but not here - forgive me if I appear to say things twice)\nA few more constructors to make (anonymous) Var creation sounds fine. Not sure about a static constant, at least not for general inside the Var class itself - that sounds problematic in the sense that even if it's anonymous, it still has identity. You can't just reuse the same anonymous var everywhere.\nAs for documentation: I agree that it could be better, but Var is a relatively simple container class, anything specific you're missing specs on?", "url": "https://github.com/eclipse/rdf4j/pull/2539#discussion_r530841356", "createdAt": "2020-11-26T08:14:18Z", "author": {"login": "jeenbroekstra"}, "path": "core/queryalgebra/model/src/main/java/org/eclipse/rdf4j/query/algebra/Var.java", "diffHunk": "@@ -42,6 +45,12 @@ public Var(String name, Value value) {\n \t\tsetValue(value);\n \t}\n \n+\tpublic Var(Value value) {\n+\t\tthis(UUID.randomUUID().toString().replace(\"-\", \"\") + \"_anon\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc2NDM3MQ=="}, "originalCommit": {"oid": "308ac2438e959a5da790c5aa33869ec63e4e789f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg2NDE4NA==", "bodyText": "Would be nice with some examples of combinations that are legal and what they match to in the query. And simple definitions for all the fields.", "url": "https://github.com/eclipse/rdf4j/pull/2539#discussion_r530864184", "createdAt": "2020-11-26T08:52:01Z", "author": {"login": "hmottestad"}, "path": "core/queryalgebra/model/src/main/java/org/eclipse/rdf4j/query/algebra/Var.java", "diffHunk": "@@ -42,6 +45,12 @@ public Var(String name, Value value) {\n \t\tsetValue(value);\n \t}\n \n+\tpublic Var(Value value) {\n+\t\tthis(UUID.randomUUID().toString().replace(\"-\", \"\") + \"_anon\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc2NDM3MQ=="}, "originalCommit": {"oid": "308ac2438e959a5da790c5aa33869ec63e4e789f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg2OTQ4MA==", "bodyText": "I presume that anonymous means that it doesn't have a variable name (which makes me wonder why null doesn't suffice). However it can still have a value. Var with variable name and constant value is probably equivalent to a variable bound at query time.", "url": "https://github.com/eclipse/rdf4j/pull/2539#discussion_r530869480", "createdAt": "2020-11-26T09:00:24Z", "author": {"login": "hmottestad"}, "path": "core/queryalgebra/model/src/main/java/org/eclipse/rdf4j/query/algebra/Var.java", "diffHunk": "@@ -42,6 +45,12 @@ public Var(String name, Value value) {\n \t\tsetValue(value);\n \t}\n \n+\tpublic Var(Value value) {\n+\t\tthis(UUID.randomUUID().toString().replace(\"-\", \"\") + \"_anon\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc2NDM3MQ=="}, "originalCommit": {"oid": "308ac2438e959a5da790c5aa33869ec63e4e789f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTI0MjY3NA==", "bodyText": "To explain: anonymous vars are vars that have no specific user-defined name in the query (or more precisely: a variable that can not be in the projection). In SPARQL this happens, for example, when a query involves a blank node:\n SELECT * WHERE {\n      [] rdf:type :Foo ;\n         rdfs:label ?label .\n }\n\nThe [] in the above query is represented as an anonymous variable in the algebra. However it still needs a separate identity because (as you can see) it needs to appear in two statement patterns - we are executing a join on the anonymous var. And there may be more than one anonymous var in the same query (a second blank node), which means we can't just reuse the same Var instance everywhere.\nAnother point where they occur in SPARQL queries is in path expressions. For example this SPARQL query:\n?start :p1/p2 ?end.\n\ninternally gets represented by two statement patterns, where the object-var of the first is the subject-var of the second. Again, the variable is anonymous, but its identity is still important as the 'glue-component' in the path expression.\nI agree though that there is some ambiguity and lack of documentation in how the Var class handles this. Having to set the the isAnonymous flag in addition to assigning it a generated name sounds superfluous (although in sparql there actually is a corner case where an anonymous var still has a user-defined name: when you use blank node identifiers in the query: _:mybnode rdf:type :Foo.).", "url": "https://github.com/eclipse/rdf4j/pull/2539#discussion_r531242674", "createdAt": "2020-11-26T22:33:30Z", "author": {"login": "jeenbroekstra"}, "path": "core/queryalgebra/model/src/main/java/org/eclipse/rdf4j/query/algebra/Var.java", "diffHunk": "@@ -42,6 +45,12 @@ public Var(String name, Value value) {\n \t\tsetValue(value);\n \t}\n \n+\tpublic Var(Value value) {\n+\t\tthis(UUID.randomUUID().toString().replace(\"-\", \"\") + \"_anon\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc2NDM3MQ=="}, "originalCommit": {"oid": "308ac2438e959a5da790c5aa33869ec63e4e789f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTI0MzMxNg==", "bodyText": "As for why null doesn't suffice: we need to be able to serialize the algebra. And the internal mechanics of the evaluation engine rely on being able to set values for vars by means of using the variable name as a key in a Binding(Set) object.", "url": "https://github.com/eclipse/rdf4j/pull/2539#discussion_r531243316", "createdAt": "2020-11-26T22:36:31Z", "author": {"login": "jeenbroekstra"}, "path": "core/queryalgebra/model/src/main/java/org/eclipse/rdf4j/query/algebra/Var.java", "diffHunk": "@@ -42,6 +45,12 @@ public Var(String name, Value value) {\n \t\tsetValue(value);\n \t}\n \n+\tpublic Var(Value value) {\n+\t\tthis(UUID.randomUUID().toString().replace(\"-\", \"\") + \"_anon\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc2NDM3MQ=="}, "originalCommit": {"oid": "308ac2438e959a5da790c5aa33869ec63e4e789f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU3MTY1OQ==", "bodyText": "I think I will migrate away from Var and StatementPattern then since my usecase is similar but sufficiently different. I'm using it as a two step process for retrieving the minimal amount of data from the backing store. Essentially I want to express things like:\nFor a query:\n?a rdf:type ex:Company.\n?b ex:subsidiary ?c.\nBound to whatever matches the patterns:\n\n?a rdf:type ex:company\n?b ex:subsidiary ?c\n\nBut sometimes it gets more complicated, for some of the SHACL components and I need a pattern like:\n\n?b null ?c\nOr\n?a rdf:type null\n\nFor the same query.\nThese patterns I run against the changeset for the transaction and then use the results to bind the variables in the query to retrieve less data when validating.\nAs an example. If I say that every person that has an address they must have max 1 street name. Then we only need to retrieve people and their street names if either a street name is added or a person is added. We can ignore any removals. And we don't need to revalidate all people and their street names, only ones that could actually now violate the rule based on the changes in the transaction.", "url": "https://github.com/eclipse/rdf4j/pull/2539#discussion_r531571659", "createdAt": "2020-11-27T12:23:08Z", "author": {"login": "hmottestad"}, "path": "core/queryalgebra/model/src/main/java/org/eclipse/rdf4j/query/algebra/Var.java", "diffHunk": "@@ -42,6 +45,12 @@ public Var(String name, Value value) {\n \t\tsetValue(value);\n \t}\n \n+\tpublic Var(Value value) {\n+\t\tthis(UUID.randomUUID().toString().replace(\"-\", \"\") + \"_anon\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc2NDM3MQ=="}, "originalCommit": {"oid": "308ac2438e959a5da790c5aa33869ec63e4e789f"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODk2MjkzOnYy", "diffSide": "RIGHT", "path": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/AST/ShaclProperties.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNDozOTo1N1rOH6LnzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwNzoxMzoxM1rOH6zLvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc2OTg2OA==", "bodyText": "Can we replace this massive switch statement with a simple strategy pattern? Bit more coding but in the end probably a lot more readable and maintainable.\nAlso: can we replace the hardcoded strings with constant references?", "url": "https://github.com/eclipse/rdf4j/pull/2539#discussion_r530769868", "createdAt": "2020-11-26T04:39:57Z", "author": {"login": "jeenbroekstra"}, "path": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/AST/ShaclProperties.java", "diffHunk": "@@ -48,39 +61,70 @@\n \tprivate Literal maxInclusive;\n \n \tprivate final List<String> pattern = new ArrayList<>();\n-\tprivate String flags = \"\";\n+\tprivate String flags = null;\n \n \tprivate final Set<Resource> targetClass = new HashSet<>();\n \tprivate final TreeSet<Value> targetNode = new TreeSet<>(new ValueComparator());\n \tprivate final Set<IRI> targetSubjectsOf = new HashSet<>();\n \tprivate final Set<IRI> targetObjectsOf = new HashSet<>();\n \tprivate final List<Resource> targetShape = new ArrayList<>();\n \n+\tprivate Resource qualifiedValueShape;\n+\tprivate Long qualifiedMinCount;\n+\tprivate Long qualifiedMaxCount;\n+\tprivate Boolean qualifiedValueShapesDisjoint;\n+\n \tprivate final List<Resource> target = new ArrayList<>();\n \n \tprivate boolean deactivated = false;\n \n \tprivate boolean uniqueLang = false;\n \n+\tboolean closed = false;\n+\tprivate Resource ignoredProperties;\n+\n+\tprivate Resource id;\n+\n+\tprivate final List<Literal> message = new ArrayList<>();\n+\n \tpublic ShaclProperties() {\n \t}\n \n-\tpublic ShaclProperties(Resource propertyShapeId, SailRepositoryConnection connection) {\n-\n-\t\ttry (Stream<Statement> stream = connection.getStatements(propertyShapeId, null, null).stream()) {\n+\tpublic ShaclProperties(Resource id, RepositoryConnection connection) {\n+\t\tthis.id = id;\n+\t\ttry (Stream<Statement> stream = connection.getStatements(id, null, null, true).stream()) {\n \t\t\tstream.forEach(statement -> {\n \t\t\t\tString predicate = statement.getPredicate().toString();\n \t\t\t\tValue object = statement.getObject();\n \t\t\t\tswitch (predicate) {\n+\t\t\t\tcase \"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "308ac2438e959a5da790c5aa33869ec63e4e789f"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc3Nzg5OQ==", "bodyText": "This code was written for performance. It was originally a bunch of getStatement calls, but those ended up being considerably slower. This class essentially just converts the raw graph in a java object to make things easier to work with. Hence the naming of the variables and getters. They all reflect the rdf property.", "url": "https://github.com/eclipse/rdf4j/pull/2539#discussion_r530777899", "createdAt": "2020-11-26T05:13:57Z", "author": {"login": "hmottestad"}, "path": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/AST/ShaclProperties.java", "diffHunk": "@@ -48,39 +61,70 @@\n \tprivate Literal maxInclusive;\n \n \tprivate final List<String> pattern = new ArrayList<>();\n-\tprivate String flags = \"\";\n+\tprivate String flags = null;\n \n \tprivate final Set<Resource> targetClass = new HashSet<>();\n \tprivate final TreeSet<Value> targetNode = new TreeSet<>(new ValueComparator());\n \tprivate final Set<IRI> targetSubjectsOf = new HashSet<>();\n \tprivate final Set<IRI> targetObjectsOf = new HashSet<>();\n \tprivate final List<Resource> targetShape = new ArrayList<>();\n \n+\tprivate Resource qualifiedValueShape;\n+\tprivate Long qualifiedMinCount;\n+\tprivate Long qualifiedMaxCount;\n+\tprivate Boolean qualifiedValueShapesDisjoint;\n+\n \tprivate final List<Resource> target = new ArrayList<>();\n \n \tprivate boolean deactivated = false;\n \n \tprivate boolean uniqueLang = false;\n \n+\tboolean closed = false;\n+\tprivate Resource ignoredProperties;\n+\n+\tprivate Resource id;\n+\n+\tprivate final List<Literal> message = new ArrayList<>();\n+\n \tpublic ShaclProperties() {\n \t}\n \n-\tpublic ShaclProperties(Resource propertyShapeId, SailRepositoryConnection connection) {\n-\n-\t\ttry (Stream<Statement> stream = connection.getStatements(propertyShapeId, null, null).stream()) {\n+\tpublic ShaclProperties(Resource id, RepositoryConnection connection) {\n+\t\tthis.id = id;\n+\t\ttry (Stream<Statement> stream = connection.getStatements(id, null, null, true).stream()) {\n \t\t\tstream.forEach(statement -> {\n \t\t\t\tString predicate = statement.getPredicate().toString();\n \t\t\t\tValue object = statement.getObject();\n \t\t\t\tswitch (predicate) {\n+\t\t\t\tcase \"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\":", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc2OTg2OA=="}, "originalCommit": {"oid": "308ac2438e959a5da790c5aa33869ec63e4e789f"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTI0MDE3Mg==", "bodyText": "I'm not convinced about the performance argument to be honest - I don't doubt that this code performs significantly better than what was previously there, but I do doubt that using hardcoded strings instead of reusing RDF.TYPE.stringValue()  is a significant factor in that (or indeed that a case statement is so much quicker than a simple dictionary lookup / strategy pattern impl).  However, I also appreciate that the focus should be on getting this in a mergable state, so maybe this isn't the highest priority.\nI would suggest to liberally comment and javadoc the code though, to make it clear what is going on (in particular javadoc on the getters to say which RDF property they correspond to might be useful).", "url": "https://github.com/eclipse/rdf4j/pull/2539#discussion_r531240172", "createdAt": "2020-11-26T22:20:49Z", "author": {"login": "jeenbroekstra"}, "path": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/AST/ShaclProperties.java", "diffHunk": "@@ -48,39 +61,70 @@\n \tprivate Literal maxInclusive;\n \n \tprivate final List<String> pattern = new ArrayList<>();\n-\tprivate String flags = \"\";\n+\tprivate String flags = null;\n \n \tprivate final Set<Resource> targetClass = new HashSet<>();\n \tprivate final TreeSet<Value> targetNode = new TreeSet<>(new ValueComparator());\n \tprivate final Set<IRI> targetSubjectsOf = new HashSet<>();\n \tprivate final Set<IRI> targetObjectsOf = new HashSet<>();\n \tprivate final List<Resource> targetShape = new ArrayList<>();\n \n+\tprivate Resource qualifiedValueShape;\n+\tprivate Long qualifiedMinCount;\n+\tprivate Long qualifiedMaxCount;\n+\tprivate Boolean qualifiedValueShapesDisjoint;\n+\n \tprivate final List<Resource> target = new ArrayList<>();\n \n \tprivate boolean deactivated = false;\n \n \tprivate boolean uniqueLang = false;\n \n+\tboolean closed = false;\n+\tprivate Resource ignoredProperties;\n+\n+\tprivate Resource id;\n+\n+\tprivate final List<Literal> message = new ArrayList<>();\n+\n \tpublic ShaclProperties() {\n \t}\n \n-\tpublic ShaclProperties(Resource propertyShapeId, SailRepositoryConnection connection) {\n-\n-\t\ttry (Stream<Statement> stream = connection.getStatements(propertyShapeId, null, null).stream()) {\n+\tpublic ShaclProperties(Resource id, RepositoryConnection connection) {\n+\t\tthis.id = id;\n+\t\ttry (Stream<Statement> stream = connection.getStatements(id, null, null, true).stream()) {\n \t\t\tstream.forEach(statement -> {\n \t\t\t\tString predicate = statement.getPredicate().toString();\n \t\t\t\tValue object = statement.getObject();\n \t\t\t\tswitch (predicate) {\n+\t\t\t\tcase \"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\":", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc2OTg2OA=="}, "originalCommit": {"oid": "308ac2438e959a5da790c5aa33869ec63e4e789f"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQxODA0NQ==", "bodyText": "It's just a java limitation. Can't use SHACL.PROPERTY.toString() because it's not bound at compile time.", "url": "https://github.com/eclipse/rdf4j/pull/2539#discussion_r531418045", "createdAt": "2020-11-27T07:13:13Z", "author": {"login": "hmottestad"}, "path": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/AST/ShaclProperties.java", "diffHunk": "@@ -48,39 +61,70 @@\n \tprivate Literal maxInclusive;\n \n \tprivate final List<String> pattern = new ArrayList<>();\n-\tprivate String flags = \"\";\n+\tprivate String flags = null;\n \n \tprivate final Set<Resource> targetClass = new HashSet<>();\n \tprivate final TreeSet<Value> targetNode = new TreeSet<>(new ValueComparator());\n \tprivate final Set<IRI> targetSubjectsOf = new HashSet<>();\n \tprivate final Set<IRI> targetObjectsOf = new HashSet<>();\n \tprivate final List<Resource> targetShape = new ArrayList<>();\n \n+\tprivate Resource qualifiedValueShape;\n+\tprivate Long qualifiedMinCount;\n+\tprivate Long qualifiedMaxCount;\n+\tprivate Boolean qualifiedValueShapesDisjoint;\n+\n \tprivate final List<Resource> target = new ArrayList<>();\n \n \tprivate boolean deactivated = false;\n \n \tprivate boolean uniqueLang = false;\n \n+\tboolean closed = false;\n+\tprivate Resource ignoredProperties;\n+\n+\tprivate Resource id;\n+\n+\tprivate final List<Literal> message = new ArrayList<>();\n+\n \tpublic ShaclProperties() {\n \t}\n \n-\tpublic ShaclProperties(Resource propertyShapeId, SailRepositoryConnection connection) {\n-\n-\t\ttry (Stream<Statement> stream = connection.getStatements(propertyShapeId, null, null).stream()) {\n+\tpublic ShaclProperties(Resource id, RepositoryConnection connection) {\n+\t\tthis.id = id;\n+\t\ttry (Stream<Statement> stream = connection.getStatements(id, null, null, true).stream()) {\n \t\t\tstream.forEach(statement -> {\n \t\t\t\tString predicate = statement.getPredicate().toString();\n \t\t\t\tValue object = statement.getObject();\n \t\t\t\tswitch (predicate) {\n+\t\t\t\tcase \"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\":", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc2OTg2OA=="}, "originalCommit": {"oid": "308ac2438e959a5da790c5aa33869ec63e4e789f"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODk2NjkxOnYy", "diffSide": "RIGHT", "path": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/AST/ShaclProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNDo0MjowOVrOH6Lp5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNDo0MjowOVrOH6Lp5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc3MDQwNA==", "bodyText": "Given that it returns a list, rename to getMessages()?", "url": "https://github.com/eclipse/rdf4j/pull/2539#discussion_r530770404", "createdAt": "2020-11-26T04:42:09Z", "author": {"login": "jeenbroekstra"}, "path": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/AST/ShaclProperties.java", "diffHunk": "@@ -319,10 +404,58 @@ public boolean isUniqueLang() {\n \t\treturn uniqueLang;\n \t}\n \n-\tpublic Value getHasValue() {\n+\tpublic Resource getId() {\n+\t\treturn id;\n+\t}\n+\n+\tpublic IRI getType() {\n+\t\treturn type;\n+\t}\n+\n+\tpublic List<Literal> getMessage() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "308ac2438e959a5da790c5aa33869ec63e4e789f"}, "originalPosition": 214}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODk2NzY4OnYy", "diffSide": "RIGHT", "path": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/AST/ShaclProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNDo0MjozOFrOH6LqWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNDo0MjozOFrOH6LqWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc3MDUyMw==", "bodyText": "Same here: getProperties()?", "url": "https://github.com/eclipse/rdf4j/pull/2539#discussion_r530770523", "createdAt": "2020-11-26T04:42:38Z", "author": {"login": "jeenbroekstra"}, "path": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/AST/ShaclProperties.java", "diffHunk": "@@ -319,10 +404,58 @@ public boolean isUniqueLang() {\n \t\treturn uniqueLang;\n \t}\n \n-\tpublic Value getHasValue() {\n+\tpublic Resource getId() {\n+\t\treturn id;\n+\t}\n+\n+\tpublic IRI getType() {\n+\t\treturn type;\n+\t}\n+\n+\tpublic List<Literal> getMessage() {\n+\t\treturn message;\n+\t}\n+\n+\tpublic List<Resource> getProperty() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "308ac2438e959a5da790c5aa33869ec63e4e789f"}, "originalPosition": 218}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MDA2MTU4OnYy", "diffSide": "RIGHT", "path": "core/sail/shacl/src/test/resources/test-cases/hasValueIn/targetShapeOr/invalid/case2/report.ttl", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNzozNTowNFrOH9NzXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNzowODo1NVrOH9lR6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk1MTMyNg==", "bodyText": "I haven't seen the actual shape itself being included in a validation report like this before - it's usually just a reference (which is really annoying when the shape has a bnode identifier). Is this new for this reimplementation? And is this what the SHACL spec actually says we should do? If so, I like it a lot :)", "url": "https://github.com/eclipse/rdf4j/pull/2539#discussion_r533951326", "createdAt": "2020-12-02T07:35:04Z", "author": {"login": "jeenbroekstra"}, "path": "core/sail/shacl/src/test/resources/test-cases/hasValueIn/targetShapeOr/invalid/case2/report.ttl", "diffHunk": "@@ -4,3 +4,17 @@\n @prefix sh: <http://www.w3.org/ns/shacl#> .\n @prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\n @prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .\n+\n+[] a sh:ValidationReport;\n+  sh:conforms false;\n+  <http://rdf4j.org/schema/rdf4j#truncated> false;\n+  sh:result [ a sh:ValidationResult;\n+      sh:focusNode ex:validPerson1;\n+      sh:resultPath ex:info2;\n+      sh:sourceConstraintComponent sh:MinCountConstraintComponent;\n+      sh:resultSeverity sh:Violation;\n+      sh:sourceShape [ a sh:PropertyShape;\n+          sh:path ex:info2;\n+          sh:minCount 1\n+        ]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b4ae18ff490d8cd091ad5b6dd784f8b490b2448"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDMzNTk3Ng==", "bodyText": "It's not part of the spec, but due to the way the new AST is implemented we are able to extract a much more minimal shape and add it to the report. Essentially if the shape has both minCount and maxCount but only minCount fails the validation, then maxCount is left out of the shape in the report.", "url": "https://github.com/eclipse/rdf4j/pull/2539#discussion_r534335976", "createdAt": "2020-12-02T17:08:55Z", "author": {"login": "hmottestad"}, "path": "core/sail/shacl/src/test/resources/test-cases/hasValueIn/targetShapeOr/invalid/case2/report.ttl", "diffHunk": "@@ -4,3 +4,17 @@\n @prefix sh: <http://www.w3.org/ns/shacl#> .\n @prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\n @prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .\n+\n+[] a sh:ValidationReport;\n+  sh:conforms false;\n+  <http://rdf4j.org/schema/rdf4j#truncated> false;\n+  sh:result [ a sh:ValidationResult;\n+      sh:focusNode ex:validPerson1;\n+      sh:resultPath ex:info2;\n+      sh:sourceConstraintComponent sh:MinCountConstraintComponent;\n+      sh:resultSeverity sh:Violation;\n+      sh:sourceShape [ a sh:PropertyShape;\n+          sh:path ex:info2;\n+          sh:minCount 1\n+        ]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk1MTMyNg=="}, "originalCommit": {"oid": "7b4ae18ff490d8cd091ad5b6dd784f8b490b2448"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1382, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}