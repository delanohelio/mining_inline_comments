{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1NzYwODU2", "number": 2477, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQwMDoxMDo0M1rOEeA_xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMzozNTozNVrOEozoQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5OTA5MDYzOnYy", "diffSide": "RIGHT", "path": "core/model/src/main/java/org/eclipse/rdf4j/model/impl/SimpleLiteral.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQwMDoxMDo0M1rOHJewEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwOTo0MTozNVrOHZk-ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTcwMzA1OQ==", "bodyText": "Is this separate boolean flag necessary? You could just do this with a simple null check, right?", "url": "https://github.com/eclipse/rdf4j/pull/2477#discussion_r479703059", "createdAt": "2020-08-30T00:10:43Z", "author": {"login": "jeenbroekstra"}, "path": "core/model/src/main/java/org/eclipse/rdf4j/model/impl/SimpleLiteral.java", "diffHunk": "@@ -130,11 +145,26 @@ protected void setDatatype(IRI datatype) {\n \t\tthis.datatype = datatype;\n \t}\n \n+\tprotected void setDatatype(XmlDatatypeEnum datatype) {\n+\t\tthis.datatype = datatype.getIri();\n+\t\tthis.xmlDatatypeCached = true;\n+\t\tthis.xmlDatatype = datatype;\n+\t}\n+\n \t@Override\n \tpublic IRI getDatatype() {\n \t\treturn datatype;\n \t}\n \n+\t@Override\n+\tpublic XmlDatatypeEnum getXmlDatatypeEnum() {\n+\t\tif (!xmlDatatypeCached) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c40d70d84a878e4421cc70b90eb57fadbce07bec"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU4MjI0NA==", "bodyText": "removed now that we've moved to optionals", "url": "https://github.com/eclipse/rdf4j/pull/2477#discussion_r496582244", "createdAt": "2020-09-29T09:41:35Z", "author": {"login": "hmottestad"}, "path": "core/model/src/main/java/org/eclipse/rdf4j/model/impl/SimpleLiteral.java", "diffHunk": "@@ -130,11 +145,26 @@ protected void setDatatype(IRI datatype) {\n \t\tthis.datatype = datatype;\n \t}\n \n+\tprotected void setDatatype(XmlDatatypeEnum datatype) {\n+\t\tthis.datatype = datatype.getIri();\n+\t\tthis.xmlDatatypeCached = true;\n+\t\tthis.xmlDatatype = datatype;\n+\t}\n+\n \t@Override\n \tpublic IRI getDatatype() {\n \t\treturn datatype;\n \t}\n \n+\t@Override\n+\tpublic XmlDatatypeEnum getXmlDatatypeEnum() {\n+\t\tif (!xmlDatatypeCached) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTcwMzA1OQ=="}, "originalCommit": {"oid": "c40d70d84a878e4421cc70b90eb57fadbce07bec"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5OTA5NzA5OnYy", "diffSide": "RIGHT", "path": "core/model/src/main/java/org/eclipse/rdf4j/model/Literal.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQwMDoyMjo1MFrOHJey6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwOTo0MzoyMFrOHZlC2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTcwMzc4NA==", "bodyText": "I agree with you that use of Optional is better here (especially if it makes no difference in performance) - it will also make some of your usage code a bit more fluent. Btw the public modifier is redundant here (and on everything else in this interface as well I guess).", "url": "https://github.com/eclipse/rdf4j/pull/2477#discussion_r479703784", "createdAt": "2020-08-30T00:22:50Z", "author": {"login": "jeenbroekstra"}, "path": "core/model/src/main/java/org/eclipse/rdf4j/model/Literal.java", "diffHunk": "@@ -47,6 +48,10 @@\n \t */\n \tpublic IRI getDatatype();\n \n+\tdefault public XmlDatatypeEnum getXmlDatatypeEnum() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c40d70d84a878e4421cc70b90eb57fadbce07bec"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTcwNDM1Nw==", "bodyText": "Naming: as with the class name, I dislike having the type in the method name. Can we call the method getXmlDatatype instead?", "url": "https://github.com/eclipse/rdf4j/pull/2477#discussion_r479704357", "createdAt": "2020-08-30T00:31:03Z", "author": {"login": "jeenbroekstra"}, "path": "core/model/src/main/java/org/eclipse/rdf4j/model/Literal.java", "diffHunk": "@@ -47,6 +48,10 @@\n \t */\n \tpublic IRI getDatatype();\n \n+\tdefault public XmlDatatypeEnum getXmlDatatypeEnum() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTcwMzc4NA=="}, "originalCommit": {"oid": "c40d70d84a878e4421cc70b90eb57fadbce07bec"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU4MzExNA==", "bodyText": "I've gone with getXsdDatatype() which aligns with having Datatype be an enum within the XSD class.", "url": "https://github.com/eclipse/rdf4j/pull/2477#discussion_r496583114", "createdAt": "2020-09-29T09:42:56Z", "author": {"login": "hmottestad"}, "path": "core/model/src/main/java/org/eclipse/rdf4j/model/Literal.java", "diffHunk": "@@ -47,6 +48,10 @@\n \t */\n \tpublic IRI getDatatype();\n \n+\tdefault public XmlDatatypeEnum getXmlDatatypeEnum() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTcwMzc4NA=="}, "originalCommit": {"oid": "c40d70d84a878e4421cc70b90eb57fadbce07bec"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU4MzM4NQ==", "bodyText": "I've also moved to using Optional.", "url": "https://github.com/eclipse/rdf4j/pull/2477#discussion_r496583385", "createdAt": "2020-09-29T09:43:20Z", "author": {"login": "hmottestad"}, "path": "core/model/src/main/java/org/eclipse/rdf4j/model/Literal.java", "diffHunk": "@@ -47,6 +48,10 @@\n \t */\n \tpublic IRI getDatatype();\n \n+\tdefault public XmlDatatypeEnum getXmlDatatypeEnum() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTcwMzc4NA=="}, "originalCommit": {"oid": "c40d70d84a878e4421cc70b90eb57fadbce07bec"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5OTA5NzY4OnYy", "diffSide": "RIGHT", "path": "core/model/src/main/java/org/eclipse/rdf4j/model/datatypes/Temp.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQwMDoyNDowMlrOHJezKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQwMDoyNDowMlrOHJezKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTcwMzg1MQ==", "bodyText": "You will need to remove this before merging.", "url": "https://github.com/eclipse/rdf4j/pull/2477#discussion_r479703851", "createdAt": "2020-08-30T00:24:02Z", "author": {"login": "jeenbroekstra"}, "path": "core/model/src/main/java/org/eclipse/rdf4j/model/datatypes/Temp.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package org.eclipse.rdf4j.model.datatypes;\n+\n+public class Temp {\n+\tpublic static void main(String[] args) {\n+\n+\t\tfor (XmlDatatypeEnum value : XmlDatatypeEnum.values()) {\n+\t\t\tSystem.out.println(value.name() + \"(XSD.\" + value.name() + \", \" +\n+\t\t\t\t\tXMLDatatypeUtil.isPrimitiveDatatype(value.iri) + \" ,\" +\n+\t\t\t\t\tXMLDatatypeUtil.isDurationDatatype(value.iri) + \" ,\" +\n+\t\t\t\t\tXMLDatatypeUtil.isIntegerDatatype(value.iri) + \" ,\" +\n+\t\t\t\t\tXMLDatatypeUtil.isDerivedDatatype(value.iri) + \" ,\" +\n+\t\t\t\t\tXMLDatatypeUtil.isDecimalDatatype(value.iri) + \" ,\" +\n+\t\t\t\t\tXMLDatatypeUtil.isFloatingPointDatatype(value.iri) + \" ,\" +\n+\t\t\t\t\tXMLDatatypeUtil.isCalendarDatatype(value.iri) + \" \" +\n+\t\t\t\t\t\") ,\"\n+\t\t\t);\n+\n+\t\t}\n+\t\t;\n+\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c40d70d84a878e4421cc70b90eb57fadbce07bec"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5OTEwMDQwOnYy", "diffSide": "RIGHT", "path": "core/model/src/main/java/org/eclipse/rdf4j/model/datatypes/XmlDatatypeEnum.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQwMDoyODo0MFrOHJe0Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwOTo0MjowNVrOHZk_xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTcwNDE2Mw==", "bodyText": "I really dislike having the Enum suffix on the class name. How about we move this enum to an inner type of XSD and call it Datatype instead? You'd refer to it as XSD.Datatype.DURATION etc.", "url": "https://github.com/eclipse/rdf4j/pull/2477#discussion_r479704163", "createdAt": "2020-08-30T00:28:40Z", "author": {"login": "jeenbroekstra"}, "path": "core/model/src/main/java/org/eclipse/rdf4j/model/datatypes/XmlDatatypeEnum.java", "diffHunk": "@@ -0,0 +1,213 @@\n+package org.eclipse.rdf4j.model.datatypes;\n+\n+import java.util.HashMap;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import javax.xml.datatype.Duration;\n+import javax.xml.datatype.XMLGregorianCalendar;\n+\n+import org.eclipse.rdf4j.model.IRI;\n+import org.eclipse.rdf4j.model.vocabulary.XSD;\n+\n+import com.google.common.collect.Sets;\n+\n+public enum XmlDatatypeEnum {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c40d70d84a878e4421cc70b90eb57fadbce07bec"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU4MjU5Ng==", "bodyText": "I followed your recommendation here and it looks pretty decent. Thanks!", "url": "https://github.com/eclipse/rdf4j/pull/2477#discussion_r496582596", "createdAt": "2020-09-29T09:42:05Z", "author": {"login": "hmottestad"}, "path": "core/model/src/main/java/org/eclipse/rdf4j/model/datatypes/XmlDatatypeEnum.java", "diffHunk": "@@ -0,0 +1,213 @@\n+package org.eclipse.rdf4j.model.datatypes;\n+\n+import java.util.HashMap;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import javax.xml.datatype.Duration;\n+import javax.xml.datatype.XMLGregorianCalendar;\n+\n+import org.eclipse.rdf4j.model.IRI;\n+import org.eclipse.rdf4j.model.vocabulary.XSD;\n+\n+import com.google.common.collect.Sets;\n+\n+public enum XmlDatatypeEnum {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTcwNDE2Mw=="}, "originalCommit": {"oid": "c40d70d84a878e4421cc70b90eb57fadbce07bec"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDM3OTk2OnYy", "diffSide": "RIGHT", "path": "core/model/src/main/java/org/eclipse/rdf4j/model/datatypes/XmlDatatype.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMjozMjoxNVrOHY7d-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMjozMjoxNVrOHY7d-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkwMjIwMg==", "bodyText": "Pre-calculation of new ValueComparator().compare(d1, d2) for all datatype combinations.", "url": "https://github.com/eclipse/rdf4j/pull/2477#discussion_r495902202", "createdAt": "2020-09-28T12:32:15Z", "author": {"login": "hmottestad"}, "path": "core/model/src/main/java/org/eclipse/rdf4j/model/datatypes/XmlDatatype.java", "diffHunk": "@@ -0,0 +1,2470 @@\n+package org.eclipse.rdf4j.model.datatypes;\n+\n+import java.util.HashMap;\n+\n+import javax.xml.datatype.Duration;\n+import javax.xml.datatype.XMLGregorianCalendar;\n+\n+import org.eclipse.rdf4j.model.IRI;\n+import org.eclipse.rdf4j.model.vocabulary.XSD;\n+\n+public enum XmlDatatype {\n+\n+\tDURATION(XSD.DURATION, true, true, false, false, false, false, false),\n+\tDATETIME(XSD.DATETIME, true, false, false, false, false, false, true),\n+\tDATETIMESTAMP(XSD.DATETIMESTAMP, false, false, false, true, false, false, true),\n+\tDAYTIMEDURATION(XSD.DAYTIMEDURATION, false, true, false, true, false, false, false),\n+\tTIME(XSD.TIME, true, false, false, false, false, false, true),\n+\tDATE(XSD.DATE, true, false, false, false, false, false, true),\n+\tGYEARMONTH(XSD.GYEARMONTH, true, false, false, false, false, false, true),\n+\tGYEAR(XSD.GYEAR, true, false, false, false, false, false, true),\n+\tGMONTHDAY(XSD.GMONTHDAY, true, false, false, false, false, false, true),\n+\tGDAY(XSD.GDAY, true, false, false, false, false, false, true),\n+\tGMONTH(XSD.GMONTH, true, false, false, false, false, false, true),\n+\tSTRING(XSD.STRING, true, false, false, false, false, false, false),\n+\tBOOLEAN(XSD.BOOLEAN, true, false, false, false, false, false, false),\n+\tBASE64BINARY(XSD.BASE64BINARY, true, false, false, false, false, false, false),\n+\tHEXBINARY(XSD.HEXBINARY, true, false, false, false, false, false, false),\n+\tFLOAT(XSD.FLOAT, true, false, false, false, false, true, false),\n+\tDECIMAL(XSD.DECIMAL, true, false, false, false, true, false, false),\n+\tDOUBLE(XSD.DOUBLE, true, false, false, false, false, true, false),\n+\tANYURI(XSD.ANYURI, true, false, false, false, false, false, false),\n+\tQNAME(XSD.QNAME, true, false, false, false, false, false, false),\n+\tNOTATION(XSD.NOTATION, true, false, false, false, false, false, false),\n+\tNORMALIZEDSTRING(XSD.NORMALIZEDSTRING, false, false, false, true, false, false, false),\n+\tTOKEN(XSD.TOKEN, false, false, false, true, false, false, false),\n+\tLANGUAGE(XSD.LANGUAGE, false, false, false, true, false, false, false),\n+\tNMTOKEN(XSD.NMTOKEN, false, false, false, true, false, false, false),\n+\tNMTOKENS(XSD.NMTOKENS, false, false, false, true, false, false, false),\n+\tNAME(XSD.NAME, false, false, false, true, false, false, false),\n+\tNCNAME(XSD.NCNAME, false, false, false, true, false, false, false),\n+\tID(XSD.ID, false, false, false, true, false, false, false),\n+\tIDREF(XSD.IDREF, false, false, false, true, false, false, false),\n+\tIDREFS(XSD.IDREFS, false, false, false, true, false, false, false),\n+\tENTITY(XSD.ENTITY, false, false, false, true, false, false, false),\n+\tENTITIES(XSD.ENTITIES, false, false, false, true, false, false, false),\n+\tINTEGER(XSD.INTEGER, false, false, true, true, true, false, false),\n+\tLONG(XSD.LONG, false, false, true, true, true, false, false),\n+\tINT(XSD.INT, false, false, true, true, true, false, false),\n+\tSHORT(XSD.SHORT, false, false, true, true, true, false, false),\n+\tBYTE(XSD.BYTE, false, false, true, true, true, false, false),\n+\tNON_POSITIVE_INTEGER(XSD.NON_POSITIVE_INTEGER, false, false, true, true, true, false, false),\n+\tNEGATIVE_INTEGER(XSD.NEGATIVE_INTEGER, false, false, true, true, true, false, false),\n+\tNON_NEGATIVE_INTEGER(XSD.NON_NEGATIVE_INTEGER, false, false, true, true, true, false, false),\n+\tPOSITIVE_INTEGER(XSD.POSITIVE_INTEGER, false, false, true, true, true, false, false),\n+\tUNSIGNED_LONG(XSD.UNSIGNED_LONG, false, false, true, true, true, false, false),\n+\tUNSIGNED_INT(XSD.UNSIGNED_INT, false, false, true, true, true, false, false),\n+\tUNSIGNED_SHORT(XSD.UNSIGNED_SHORT, false, false, true, true, true, false, false),\n+\tUNSIGNED_BYTE(XSD.UNSIGNED_BYTE, false, false, true, true, true, false, false),\n+\tYEARMONTHDURATION(XSD.YEARMONTHDURATION, false, true, false, true, false, false, false);\n+\n+\tprivate final IRI iri;\n+\tprivate final boolean primitive;\n+\tprivate final boolean duration;\n+\tprivate final boolean integer;\n+\tprivate final boolean derived;\n+\tprivate final boolean decimal;\n+\tprivate final boolean floatingPoint;\n+\tprivate final boolean calendar;\n+\n+\t// a lookup table so we don't need to use IRI comparison when comparing two datatypes\n+\tprivate HashMap<XmlDatatype, Integer> valueComparatorLookup;\n+\n+\tXmlDatatype(IRI iri, boolean primitive, boolean duration, boolean integer, boolean derived, boolean decimal,\n+\t\t\tboolean floatingPoint, boolean calendar) {\n+\t\tthis.iri = iri;\n+\t\tthis.primitive = primitive;\n+\t\tthis.duration = duration;\n+\t\tthis.integer = integer;\n+\t\tthis.derived = derived;\n+\t\tthis.decimal = decimal;\n+\t\tthis.floatingPoint = floatingPoint;\n+\t\tthis.calendar = calendar;\n+\t}\n+\n+\t/**\n+\t * Checks whether the supplied datatype is a primitive XML Schema datatype.\n+\t *\n+\t * @return true if the datatype is a primitive type\n+\t */\n+\tpublic boolean isPrimitiveDatatype() {\n+\t\treturn primitive;\n+\t}\n+\n+\t/**\n+\t * Checks whether the supplied datatype is a derived XML Schema datatype.\n+\t *\n+\t * @return true if the datatype is a derived type\n+\t */\n+\tpublic boolean isDerivedDatatype() {\n+\t\treturn derived;\n+\t}\n+\n+\t/**\n+\t * Checks whether the supplied datatype is a built-in XML Schema datatype.\n+\t *\n+\t * @return true if it is a primitive or derived XML Schema type\n+\t */\n+\tpublic boolean isBuiltInDatatype() {\n+\t\treturn isPrimitiveDatatype() || isDerivedDatatype();\n+\t}\n+\n+\t/**\n+\t * Checks whether the supplied datatype is a numeric datatype, i.e.if it is equal to xsd:float, xsd:double,\n+\t * xsd:decimal or one of the datatypes derived from xsd:decimal.\n+\t *\n+\t * @return true of it is a decimal or floating point type\n+\t */\n+\tpublic boolean isNumericDatatype() {\n+\t\treturn isDecimalDatatype() || isFloatingPointDatatype();\n+\t}\n+\n+\t/**\n+\t * Checks whether the supplied datatype is equal to xsd:decimal or one of the built-in datatypes that is derived\n+\t * from xsd:decimal.\n+\t *\n+\t * @return true if it is a decimal datatype\n+\t */\n+\tpublic boolean isDecimalDatatype() {\n+\t\treturn decimal;\n+\t}\n+\n+\t/**\n+\t * Checks whether the supplied datatype is equal to xsd:integer or one of the built-in datatypes that is derived\n+\t * from xsd:integer.\n+\t *\n+\t * @return true if it is an integer type\n+\t */\n+\tpublic boolean isIntegerDatatype() {\n+\t\treturn integer;\n+\t}\n+\n+\t/**\n+\t * Checks whether the supplied datatype is equal to xsd:float or xsd:double.\n+\t *\n+\t * @return true if it is a floating point type\n+\t */\n+\tpublic boolean isFloatingPointDatatype() {\n+\t\treturn floatingPoint;\n+\t}\n+\n+\t/**\n+\t * Checks whether the supplied datatype is equal to xsd:dateTime, xsd:date, xsd:time, xsd:gYearMonth, xsd:gMonthDay,\n+\t * xsd:gYear, xsd:gMonth or xsd:gDay.These are the primitive datatypes that represent dates and/or times.\n+\t *\n+\t * @see XMLGregorianCalendar\n+\t * @return true if it is a calendar type\n+\t */\n+\tpublic boolean isCalendarDatatype() {\n+\t\treturn calendar;\n+\t}\n+\n+\t/**\n+\t * Checks whether the supplied datatype is equal to xsd:duration, xsd:dayTimeDuration, xsd:yearMonthDuration. These\n+\t * are the datatypes that represents durations.\n+\t *\n+\t * @see Duration\n+\t * @return true if it is a duration type\n+\t */\n+\tpublic boolean isDurationDatatype() {\n+\t\treturn duration;\n+\t}\n+\n+\t/**\n+\t * Checks whether the supplied datatype is ordered.The values of an ordered datatype can be compared to each other\n+\t * using operators like <tt>&lt;</tt> and <tt>&gt;</tt>.\n+\t *\n+\t * @return true if the datatype is ordered\n+\t */\n+\tpublic boolean isOrderedDatatype() {\n+\t\treturn isNumericDatatype() || isCalendarDatatype();\n+\t}\n+\n+\tstatic HashMap<IRI, XmlDatatype> reverseLookup = new HashMap<>();\n+\n+\tstatic {\n+\t\tfor (XmlDatatype value : XmlDatatype.values()) {\n+\t\t\treverseLookup.put(value.iri, value);\n+\t\t}\n+\t}\n+\n+\tpublic static XmlDatatype from(IRI datatype) {\n+\t\treturn reverseLookup.get(datatype);\n+\t}\n+\n+\tpublic IRI getIri() {\n+\t\treturn iri;\n+\t}\n+\n+\tpublic int valueComparatorTo(XmlDatatype compareTo) {\n+\t\tif (valueComparatorLookup == null) {\n+\t\t\tcreateLookupTable();\n+\t\t}\n+\n+\t\treturn valueComparatorLookup.get(compareTo);\n+\t}\n+\n+\tprivate void createLookupTable() {\n+\t\tHashMap<XmlDatatype, Integer> valueComparatorLookup = new HashMap<>();\n+\n+\t\tif (this == DURATION) {\n+\t\t\tvalueComparatorLookup.put(DURATION, 0);\n+\t\t\tvalueComparatorLookup.put(DATETIME, 20);\n+\t\t\tvalueComparatorLookup.put(DATETIMESTAMP, 20);\n+\t\t\tvalueComparatorLookup.put(DAYTIMEDURATION, 20);\n+\t\t\tvalueComparatorLookup.put(TIME, -16);\n+\t\t\tvalueComparatorLookup.put(DATE, 20);\n+\t\t\tvalueComparatorLookup.put(GYEARMONTH, -3);\n+\t\t\tvalueComparatorLookup.put(GYEAR, -3);\n+\t\t\tvalueComparatorLookup.put(GMONTHDAY, -3);\n+\t\t\tvalueComparatorLookup.put(GDAY, -3);\n+\t\t\tvalueComparatorLookup.put(GMONTH, -3);\n+\t\t\tvalueComparatorLookup.put(STRING, -15);\n+\t\t\tvalueComparatorLookup.put(BOOLEAN, 2);\n+\t\t\tvalueComparatorLookup.put(BASE64BINARY, 2);\n+\t\t\tvalueComparatorLookup.put(HEXBINARY, -4);\n+\t\t\tvalueComparatorLookup.put(FLOAT, -2);\n+\t\t\tvalueComparatorLookup.put(DECIMAL, 16);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f156d5b5749cc725e5f586e791bf99557dbd5d5"}, "originalPosition": 227}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMjE4MTM2OnYy", "diffSide": "RIGHT", "path": "core/model/src/main/java/org/eclipse/rdf4j/model/BNode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMzoyMDo0NlrOHaGiqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMzoyMDo0NlrOHaGiqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzEzMjIwMg==", "bodyText": "Spelling: it should be isBNode (capital N)", "url": "https://github.com/eclipse/rdf4j/pull/2477#discussion_r497132202", "createdAt": "2020-09-29T23:20:46Z", "author": {"login": "jeenbroekstra"}, "path": "core/model/src/main/java/org/eclipse/rdf4j/model/BNode.java", "diffHunk": "@@ -40,4 +40,24 @@\n \t */\n \t@Override\n \tpublic int hashCode();\n+\n+\t@Override\n+\tdefault boolean isBnode() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f7aa2365e2b9c180b6b357d4a3058ec8b1babac"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMjE5NDQyOnYy", "diffSide": "RIGHT", "path": "core/model/src/main/java/org/eclipse/rdf4j/model/IRI.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMzoyMzo0OFrOHaGrJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwNjoyMzo1NFrOHaO2DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzEzNDM3Mg==", "bodyText": "I suggest we move these defaults to Value instead, and then have each sub-interface override only the one for which the result should be true.", "url": "https://github.com/eclipse/rdf4j/pull/2477#discussion_r497134372", "createdAt": "2020-09-29T23:23:48Z", "author": {"login": "jeenbroekstra"}, "path": "core/model/src/main/java/org/eclipse/rdf4j/model/IRI.java", "diffHunk": "@@ -72,4 +72,24 @@\n \t */\n \t@Override\n \tpublic int hashCode();\n+\n+\t@Override\n+\tdefault boolean isBnode() {\n+\t\treturn false;\n+\t}\n+\n+\t@Override\n+\tdefault boolean isIRI() {\n+\t\treturn true;\n+\t}\n+\n+\t@Override\n+\tdefault boolean isLiteral() {\n+\t\treturn false;\n+\t}\n+\n+\t@Override\n+\tdefault boolean isTriple() {\n+\t\treturn false;\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f7aa2365e2b9c180b6b357d4a3058ec8b1babac"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI2ODIzNw==", "bodyText": "I prefer to have Value have functional defaults (eg. instanceof), but it wouldn't actually make a difference I think.", "url": "https://github.com/eclipse/rdf4j/pull/2477#discussion_r497268237", "createdAt": "2020-09-30T06:23:54Z", "author": {"login": "hmottestad"}, "path": "core/model/src/main/java/org/eclipse/rdf4j/model/IRI.java", "diffHunk": "@@ -72,4 +72,24 @@\n \t */\n \t@Override\n \tpublic int hashCode();\n+\n+\t@Override\n+\tdefault boolean isBnode() {\n+\t\treturn false;\n+\t}\n+\n+\t@Override\n+\tdefault boolean isIRI() {\n+\t\treturn true;\n+\t}\n+\n+\t@Override\n+\tdefault boolean isLiteral() {\n+\t\treturn false;\n+\t}\n+\n+\t@Override\n+\tdefault boolean isTriple() {\n+\t\treturn false;\n+\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzEzNDM3Mg=="}, "originalCommit": {"oid": "0f7aa2365e2b9c180b6b357d4a3058ec8b1babac"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMjIzMjAyOnYy", "diffSide": "RIGHT", "path": "core/model/src/main/java/org/eclipse/rdf4j/model/impl/SimpleLiteral.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMzozMjo0NVrOHaHEEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMzozMjo0NVrOHaHEEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE0MDc1NA==", "bodyText": "Missing curly braces.", "url": "https://github.com/eclipse/rdf4j/pull/2477#discussion_r497140754", "createdAt": "2020-09-29T23:32:45Z", "author": {"login": "jeenbroekstra"}, "path": "core/model/src/main/java/org/eclipse/rdf4j/model/impl/SimpleLiteral.java", "diffHunk": "@@ -159,11 +192,8 @@ public boolean equals(Object o) {\n \t\t\t\treturn getLanguage().get().equalsIgnoreCase(other.getLanguage().get());\n \t\t\t}\n \t\t\t// If only one has a language, then return false\n-\t\t\telse if (getLanguage().isPresent() || other.getLanguage().isPresent()) {\n-\t\t\t\treturn false;\n-\t\t\t}\n-\n-\t\t\treturn true;\n+\t\t\telse\n+\t\t\t\treturn !getLanguage().isPresent() && !other.getLanguage().isPresent();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f7aa2365e2b9c180b6b357d4a3058ec8b1babac"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMjI0Mzg3OnYy", "diffSide": "RIGHT", "path": "core/model/src/main/java/org/eclipse/rdf4j/model/impl/SimpleLiteral.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMzozNTozNVrOHaHL5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMzozNTozNVrOHaHL5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE0Mjc1Nw==", "bodyText": "It's a little odd to be using an Optional value that can also be null. I understand why it's done (and the comment also explains it well), but to make it glaringly obvbious perhaps initialize the value as null here as well, explicitly.", "url": "https://github.com/eclipse/rdf4j/pull/2477#discussion_r497142757", "createdAt": "2020-09-29T23:35:35Z", "author": {"login": "jeenbroekstra"}, "path": "core/model/src/main/java/org/eclipse/rdf4j/model/impl/SimpleLiteral.java", "diffHunk": "@@ -54,6 +54,12 @@\n \t */\n \tprivate IRI datatype;\n \n+\t// The XSD.Datatype enum that matches the datatype IRI for this literal. This value is calculated on the fly and\n+\t// cached in this variable. `null` means we have not calculated and cached this value yet. We are not worried about\n+\t// race conditions, since calculating this value multiple times must lead to the same effective result. Transient is\n+\t// only used to stop this field from be serialised.\n+\ttransient private Optional<XSD.Datatype> xsdDatatype;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f7aa2365e2b9c180b6b357d4a3058ec8b1babac"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1362, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}