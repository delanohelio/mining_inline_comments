{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwNjQ0MDYw", "number": 2020, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMTowNToyNFrODpR2aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMjo1MDowOFrODpvMig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NjEwNjY0OnYy", "diffSide": "RIGHT", "path": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/AST/ShaclProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMTowNToyNFrOF4W3bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMTowNToyNFrOF4W3bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYzOTIxMg==", "bodyText": "Create a test that exemplifies this.", "url": "https://github.com/eclipse/rdf4j/pull/2020#discussion_r394639212", "createdAt": "2020-03-18T21:05:24Z", "author": {"login": "hmottestad"}, "path": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/AST/ShaclProperties.java", "diffHunk": "@@ -48,7 +50,7 @@\n \tString flags = \"\";\n \n \tSet<Resource> targetClass = new HashSet<>(0);\n-\tSet<Value> targetNode = new HashSet<>(0);\n+\tTreeSet<Value> targetNode = new TreeSet<>(new ValueComparator());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "066988b122873d8455de00aa4e47f2403f6d2333"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDg5NTIyOnYy", "diffSide": "RIGHT", "path": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/planNodes/ValuesBackedNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMjozNDo1M1rOF5GPjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwNjo1NDoyNVrOF5JECQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQxNTQzNw==", "bodyText": "That looks like the wrong year for a new file", "url": "https://github.com/eclipse/rdf4j/pull/2020#discussion_r395415437", "createdAt": "2020-03-20T02:34:53Z", "author": {"login": "jeenbroekstra"}, "path": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/planNodes/ValuesBackedNode.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*******************************************************************************\n+ * Copyright (c) 2018 Eclipse RDF4J contributors.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0168b23d1ce54a515336628deb92e9582a561094"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ2MTY0MQ==", "bodyText": "Will fix", "url": "https://github.com/eclipse/rdf4j/pull/2020#discussion_r395461641", "createdAt": "2020-03-20T06:54:25Z", "author": {"login": "hmottestad"}, "path": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/planNodes/ValuesBackedNode.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*******************************************************************************\n+ * Copyright (c) 2018 Eclipse RDF4J contributors.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQxNTQzNw=="}, "originalCommit": {"oid": "0168b23d1ce54a515336628deb92e9582a561094"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDg5NTc5OnYy", "diffSide": "RIGHT", "path": "core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/OrderingTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMjozNToyMlrOF5GP5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwNjo1NDoxMVrOF5JD1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQxNTUyNA==", "bodyText": "wrong year.", "url": "https://github.com/eclipse/rdf4j/pull/2020#discussion_r395415524", "createdAt": "2020-03-20T02:35:22Z", "author": {"login": "jeenbroekstra"}, "path": "core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/OrderingTest.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*******************************************************************************\n+ * Copyright (c) 2018 Eclipse RDF4J contributors.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0168b23d1ce54a515336628deb92e9582a561094"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ2MTU4OQ==", "bodyText": "This is just a renamed file.", "url": "https://github.com/eclipse/rdf4j/pull/2020#discussion_r395461589", "createdAt": "2020-03-20T06:54:11Z", "author": {"login": "hmottestad"}, "path": "core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/OrderingTest.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*******************************************************************************\n+ * Copyright (c) 2018 Eclipse RDF4J contributors.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQxNTUyNA=="}, "originalCommit": {"oid": "0168b23d1ce54a515336628deb92e9582a561094"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDkwMjA3OnYy", "diffSide": "RIGHT", "path": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/planNodes/GroupByCount.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMjozOTo1NVrOF5GTWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMDoyNjozOFrOF5OVig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQxNjQxMQ==", "bodyText": "Why are you wrapping this in an Arraylist?", "url": "https://github.com/eclipse/rdf4j/pull/2020#discussion_r395416411", "createdAt": "2020-03-20T02:39:55Z", "author": {"login": "jeenbroekstra"}, "path": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/planNodes/GroupByCount.java", "diffHunk": "@@ -74,7 +75,8 @@ private void calculateNext() {\n \n \t\t\t\t}\n \n-\t\t\t\tList<Value> line = Arrays.asList(subject, SimpleValueFactory.getInstance().createLiteral(count));\n+\t\t\t\tList<Value> line = new ArrayList<>(\n+\t\t\t\t\t\tArrays.asList(subject, SimpleValueFactory.getInstance().createLiteral(count)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0168b23d1ce54a515336628deb92e9582a561094"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ2MTgyOA==", "bodyText": "Arrays.asList is immutable and I need mutability.", "url": "https://github.com/eclipse/rdf4j/pull/2020#discussion_r395461828", "createdAt": "2020-03-20T06:55:12Z", "author": {"login": "hmottestad"}, "path": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/planNodes/GroupByCount.java", "diffHunk": "@@ -74,7 +75,8 @@ private void calculateNext() {\n \n \t\t\t\t}\n \n-\t\t\t\tList<Value> line = Arrays.asList(subject, SimpleValueFactory.getInstance().createLiteral(count));\n+\t\t\t\tList<Value> line = new ArrayList<>(\n+\t\t\t\t\t\tArrays.asList(subject, SimpleValueFactory.getInstance().createLiteral(count)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQxNjQxMQ=="}, "originalCommit": {"oid": "0168b23d1ce54a515336628deb92e9582a561094"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU0ODA0Mg==", "bodyText": "I've added some comments.", "url": "https://github.com/eclipse/rdf4j/pull/2020#discussion_r395548042", "createdAt": "2020-03-20T10:26:38Z", "author": {"login": "hmottestad"}, "path": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/planNodes/GroupByCount.java", "diffHunk": "@@ -74,7 +75,8 @@ private void calculateNext() {\n \n \t\t\t\t}\n \n-\t\t\t\tList<Value> line = Arrays.asList(subject, SimpleValueFactory.getInstance().createLiteral(count));\n+\t\t\t\tList<Value> line = new ArrayList<>(\n+\t\t\t\t\t\tArrays.asList(subject, SimpleValueFactory.getInstance().createLiteral(count)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQxNjQxMQ=="}, "originalCommit": {"oid": "0168b23d1ce54a515336628deb92e9582a561094"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDkwMzA3OnYy", "diffSide": "RIGHT", "path": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/planNodes/Tuple.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMjo0MDo0NlrOF5GT5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMjo0MDo0NlrOF5GT5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQxNjU0OQ==", "bodyText": "Same here - why is this needed? It looks redundant.", "url": "https://github.com/eclipse/rdf4j/pull/2020#discussion_r395416549", "createdAt": "2020-03-20T02:40:46Z", "author": {"login": "jeenbroekstra"}, "path": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/planNodes/Tuple.java", "diffHunk": "@@ -39,7 +39,7 @@ public Tuple(List<Value> list) {\n \t}\n \n \tpublic Tuple(Value... list) {\n-\t\tline = Arrays.asList(list);\n+\t\tline = new ArrayList<>(Arrays.asList(list));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0168b23d1ce54a515336628deb92e9582a561094"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDkxNDY2OnYy", "diffSide": "RIGHT", "path": "core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/OrderingTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMjo1MDowOFrOF5Gakg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwNjo1NzoyMlrOF5JG4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQxODI1OA==", "bodyText": "While these tests (after reading back and forth a bit) seem sensible, I'm a bit lost on what this has to do with issue GH-1574. Did the fix you added change ordering behavior somehow?", "url": "https://github.com/eclipse/rdf4j/pull/2020#discussion_r395418258", "createdAt": "2020-03-20T02:50:08Z", "author": {"login": "jeenbroekstra"}, "path": "core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/OrderingTest.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*******************************************************************************\n+ * Copyright (c) 2018 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+\n+package org.eclipse.rdf4j.sail.shacl;\n+\n+import org.eclipse.rdf4j.IsolationLevels;\n+import org.eclipse.rdf4j.model.IRI;\n+import org.eclipse.rdf4j.model.Value;\n+import org.eclipse.rdf4j.model.ValueFactory;\n+import org.eclipse.rdf4j.model.impl.SimpleValueFactory;\n+import org.eclipse.rdf4j.model.vocabulary.FOAF;\n+import org.eclipse.rdf4j.model.vocabulary.RDF;\n+import org.eclipse.rdf4j.model.vocabulary.RDFS;\n+import org.eclipse.rdf4j.model.vocabulary.SHACL;\n+import org.eclipse.rdf4j.repository.sail.SailRepository;\n+import org.eclipse.rdf4j.repository.sail.SailRepositoryConnection;\n+import org.eclipse.rdf4j.sail.SailConnection;\n+import org.eclipse.rdf4j.sail.memory.MemoryStore;\n+import org.eclipse.rdf4j.sail.shacl.AST.ShaclProperties;\n+import org.eclipse.rdf4j.sail.shacl.mock.MockConsumePlanNode;\n+import org.eclipse.rdf4j.sail.shacl.planNodes.InnerJoin;\n+import org.eclipse.rdf4j.sail.shacl.planNodes.PlanNode;\n+import org.eclipse.rdf4j.sail.shacl.planNodes.Select;\n+import org.eclipse.rdf4j.sail.shacl.planNodes.Sort;\n+import org.eclipse.rdf4j.sail.shacl.planNodes.TrimTuple;\n+import org.eclipse.rdf4j.sail.shacl.planNodes.Tuple;\n+import org.eclipse.rdf4j.sail.shacl.planNodes.UnBufferedPlanNode;\n+import org.eclipse.rdf4j.sail.shacl.planNodes.ValuesBackedNode;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.stream.Collectors;\n+\n+import static junit.framework.TestCase.assertEquals;\n+import static junit.framework.TestCase.assertTrue;\n+\n+/**\n+ * @author H\u00e5vard Ottestad\n+ */\n+public class OrderingTest {\n+\n+\tprivate final static ValueFactory vf = SimpleValueFactory.getInstance();\n+\n+\t@Test\n+\tpublic void testSelect() {\n+\t\tMemoryStore repository = new MemoryStore();\n+\t\trepository.init();\n+\n+\t\ttry (SailConnection connection = repository.getConnection()) {\n+\t\t\tconnection.begin(IsolationLevels.NONE);\n+\t\t\tconnection.addStatement(RDFS.RESOURCE, RDF.TYPE, RDFS.RESOURCE);\n+\t\t\tconnection.addStatement(RDFS.CLASS, RDF.TYPE, RDFS.RESOURCE);\n+\t\t\tconnection.addStatement(RDFS.SUBCLASSOF, RDF.TYPE, RDFS.RESOURCE);\n+\t\t\tconnection.commit();\n+\n+\t\t\tSelect select = new Select(connection, \"?a <\" + RDF.TYPE + \"> []\", \"*\");\n+\t\t\tList<Tuple> tuples = new MockConsumePlanNode(select).asList();\n+\n+\t\t\tString actual = Arrays.toString(tuples.toArray());\n+\n+\t\t\tCollections.sort(tuples);\n+\n+\t\t\tString expected = Arrays.toString(tuples.toArray());\n+\n+\t\t\tassertEquals(expected, actual);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0168b23d1ce54a515336628deb92e9582a561094"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ2MjM2OA==", "bodyText": "Ordering test is a renamed file where I\u2019ve moved in some old tests and also added one that checks that the set used to store the target nodes is sorted. Which is an assumption used further down the line.", "url": "https://github.com/eclipse/rdf4j/pull/2020#discussion_r395462368", "createdAt": "2020-03-20T06:57:22Z", "author": {"login": "hmottestad"}, "path": "core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/OrderingTest.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*******************************************************************************\n+ * Copyright (c) 2018 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+\n+package org.eclipse.rdf4j.sail.shacl;\n+\n+import org.eclipse.rdf4j.IsolationLevels;\n+import org.eclipse.rdf4j.model.IRI;\n+import org.eclipse.rdf4j.model.Value;\n+import org.eclipse.rdf4j.model.ValueFactory;\n+import org.eclipse.rdf4j.model.impl.SimpleValueFactory;\n+import org.eclipse.rdf4j.model.vocabulary.FOAF;\n+import org.eclipse.rdf4j.model.vocabulary.RDF;\n+import org.eclipse.rdf4j.model.vocabulary.RDFS;\n+import org.eclipse.rdf4j.model.vocabulary.SHACL;\n+import org.eclipse.rdf4j.repository.sail.SailRepository;\n+import org.eclipse.rdf4j.repository.sail.SailRepositoryConnection;\n+import org.eclipse.rdf4j.sail.SailConnection;\n+import org.eclipse.rdf4j.sail.memory.MemoryStore;\n+import org.eclipse.rdf4j.sail.shacl.AST.ShaclProperties;\n+import org.eclipse.rdf4j.sail.shacl.mock.MockConsumePlanNode;\n+import org.eclipse.rdf4j.sail.shacl.planNodes.InnerJoin;\n+import org.eclipse.rdf4j.sail.shacl.planNodes.PlanNode;\n+import org.eclipse.rdf4j.sail.shacl.planNodes.Select;\n+import org.eclipse.rdf4j.sail.shacl.planNodes.Sort;\n+import org.eclipse.rdf4j.sail.shacl.planNodes.TrimTuple;\n+import org.eclipse.rdf4j.sail.shacl.planNodes.Tuple;\n+import org.eclipse.rdf4j.sail.shacl.planNodes.UnBufferedPlanNode;\n+import org.eclipse.rdf4j.sail.shacl.planNodes.ValuesBackedNode;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.stream.Collectors;\n+\n+import static junit.framework.TestCase.assertEquals;\n+import static junit.framework.TestCase.assertTrue;\n+\n+/**\n+ * @author H\u00e5vard Ottestad\n+ */\n+public class OrderingTest {\n+\n+\tprivate final static ValueFactory vf = SimpleValueFactory.getInstance();\n+\n+\t@Test\n+\tpublic void testSelect() {\n+\t\tMemoryStore repository = new MemoryStore();\n+\t\trepository.init();\n+\n+\t\ttry (SailConnection connection = repository.getConnection()) {\n+\t\t\tconnection.begin(IsolationLevels.NONE);\n+\t\t\tconnection.addStatement(RDFS.RESOURCE, RDF.TYPE, RDFS.RESOURCE);\n+\t\t\tconnection.addStatement(RDFS.CLASS, RDF.TYPE, RDFS.RESOURCE);\n+\t\t\tconnection.addStatement(RDFS.SUBCLASSOF, RDF.TYPE, RDFS.RESOURCE);\n+\t\t\tconnection.commit();\n+\n+\t\t\tSelect select = new Select(connection, \"?a <\" + RDF.TYPE + \"> []\", \"*\");\n+\t\t\tList<Tuple> tuples = new MockConsumePlanNode(select).asList();\n+\n+\t\t\tString actual = Arrays.toString(tuples.toArray());\n+\n+\t\t\tCollections.sort(tuples);\n+\n+\t\t\tString expected = Arrays.toString(tuples.toArray());\n+\n+\t\t\tassertEquals(expected, actual);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQxODI1OA=="}, "originalCommit": {"oid": "0168b23d1ce54a515336628deb92e9582a561094"}, "originalPosition": 76}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1539, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}