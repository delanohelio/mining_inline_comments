{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3MzMwMTcy", "number": 2058, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNDo0NTowN1rODtyxmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODo1NToxM1rODuSNZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MzQ0NDA4OnYy", "diffSide": "RIGHT", "path": "core/repository/sail/src/test/java/org/eclipse/rdf4j/repository/sail/SailRepositoryConnectionTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNDo0NTowN1rOF_bGyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNDo0NTowN1rOF_bGyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA0ODcxMw==", "bodyText": "Fwiw I still haven't come up with a decent convention for this kind of test naming. Using CamelCase just quickly becomes unreadable.", "url": "https://github.com/eclipse/rdf4j/pull/2058#discussion_r402048713", "createdAt": "2020-04-02T04:45:07Z", "author": {"login": "jeenbroekstra"}, "path": "core/repository/sail/src/test/java/org/eclipse/rdf4j/repository/sail/SailRepositoryConnectionTest.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+package org.eclipse.rdf4j.repository.sail;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyBoolean;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Optional;\n+\n+import org.eclipse.rdf4j.common.iteration.EmptyIteration;\n+import org.eclipse.rdf4j.query.BooleanQuery;\n+import org.eclipse.rdf4j.query.GraphQuery;\n+import org.eclipse.rdf4j.query.Query;\n+import org.eclipse.rdf4j.query.TupleQuery;\n+import org.eclipse.rdf4j.query.algebra.TupleExpr;\n+import org.eclipse.rdf4j.sail.SailConnection;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * Unit tests for {@link SailRepositoryConnection}\n+ * \n+ * @author Jeen Broekstra\n+ *\n+ */\n+public class SailRepositoryConnectionTest {\n+\n+\tprivate SailRepositoryConnection subject;\n+\tprivate SailConnection sailConnection;\n+\tprivate SailRepository sailRepository;\n+\n+\t@Before\n+\tpublic void setUp() throws Exception {\n+\t\tsailConnection = mock(SailConnection.class);\n+\t\tsailRepository = mock(SailRepository.class);\n+\n+\t\tsubject = new SailRepositoryConnection(sailRepository, sailConnection);\n+\t}\n+\n+\t@Test\n+\tpublic void testPrepareQuery_not_bypassed() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3f2d05a1d8cfa25ccddd3a352621bcdf06c6b58"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MzczMzM4OnYy", "diffSide": "RIGHT", "path": "core/query/src/main/java/org/eclipse/rdf4j/query/Query.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNzowMDoyOFrOF_dvlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMjoxMzo1NFrOGAuNiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA5MTkyNQ==", "bodyText": "Is this a general thing you would like to start doing?", "url": "https://github.com/eclipse/rdf4j/pull/2058#discussion_r402091925", "createdAt": "2020-04-02T07:00:28Z", "author": {"login": "hmottestad"}, "path": "core/query/src/main/java/org/eclipse/rdf4j/query/Query.java", "diffHunk": "@@ -16,6 +16,17 @@\n  */\n public interface Query extends Operation {\n \n+\t/**\n+\t * The different types of queries that RDF4J recognizes: boolean queries, graph queries, and tuple queries.\n+\t * \n+\t * @since 3.2.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3f2d05a1d8cfa25ccddd3a352621bcdf06c6b58"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQxMDMxMg==", "bodyText": "We've been doing that for a while actually - just not very consistently. But yes, it seems like a good (low-cost) idea.", "url": "https://github.com/eclipse/rdf4j/pull/2058#discussion_r403410312", "createdAt": "2020-04-04T02:13:54Z", "author": {"login": "jeenbroekstra"}, "path": "core/query/src/main/java/org/eclipse/rdf4j/query/Query.java", "diffHunk": "@@ -16,6 +16,17 @@\n  */\n public interface Query extends Operation {\n \n+\t/**\n+\t * The different types of queries that RDF4J recognizes: boolean queries, graph queries, and tuple queries.\n+\t * \n+\t * @since 3.2.0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA5MTkyNQ=="}, "originalCommit": {"oid": "f3f2d05a1d8cfa25ccddd3a352621bcdf06c6b58"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODI5MjgzOnYy", "diffSide": "RIGHT", "path": "core/query/src/main/java/org/eclipse/rdf4j/query/Query.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODowNzozNVrOGAJs7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODowNzozNVrOGAJs7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgxMjE0Mw==", "bodyText": "note to self: rename to QueryType for greater clarity.", "url": "https://github.com/eclipse/rdf4j/pull/2058#discussion_r402812143", "createdAt": "2020-04-03T08:07:35Z", "author": {"login": "jeenbroekstra"}, "path": "core/query/src/main/java/org/eclipse/rdf4j/query/Query.java", "diffHunk": "@@ -16,6 +16,17 @@\n  */\n public interface Query extends Operation {\n \n+\t/**\n+\t * The different types of queries that RDF4J recognizes: boolean queries, graph queries, and tuple queries.\n+\t * \n+\t * @since 3.2.0\n+\t */\n+\tpublic enum Type {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3f2d05a1d8cfa25ccddd3a352621bcdf06c6b58"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODU1NzQxOnYy", "diffSide": "RIGHT", "path": "core/repository/sail/src/main/java/org/eclipse/rdf4j/repository/sail/SailRepositoryConnection.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODo0OTozNlrOGAL7yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMjoyMjoyNlrOGAuQ3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg0ODcxMw==", "bodyText": "Does this end up potentially parsing twice? Parsing queries is one of the slowest parts of the SHACL sail, so I think we should avoid parsing twice at all costs.", "url": "https://github.com/eclipse/rdf4j/pull/2058#discussion_r402848713", "createdAt": "2020-04-03T08:49:36Z", "author": {"login": "hmottestad"}, "path": "core/repository/sail/src/main/java/org/eclipse/rdf4j/repository/sail/SailRepositoryConnection.java", "diffHunk": "@@ -195,10 +199,23 @@ public SailQuery prepareQuery(QueryLanguage ql, String queryString, String baseU\n \t\tParsedQuery parsedQuery = QueryParserUtil.parseQuery(ql, queryString, baseURI);\n \n \t\tif (parsedQuery instanceof ParsedTupleQuery) {\n+\t\t\tOptional<TupleExpr> sailTupleExpr = sailConnection.prepareQuery(ql, Query.Type.TUPLE, queryString, baseURI);\n+\t\t\tif (sailTupleExpr.isPresent()) {\n+\t\t\t\tparsedQuery = new ParsedTupleQuery(queryString, sailTupleExpr.get());\n+\t\t\t}\n \t\t\treturn new SailTupleQuery((ParsedTupleQuery) parsedQuery, this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3f2d05a1d8cfa25ccddd3a352621bcdf06c6b58"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg1Nzc1OQ==", "bodyText": "I guess this is more of a legacy method, so we could probably live with having to parse the query twice if we maybe add some documentation to let the user know to prefer the more explicit methods.", "url": "https://github.com/eclipse/rdf4j/pull/2058#discussion_r402857759", "createdAt": "2020-04-03T08:59:38Z", "author": {"login": "hmottestad"}, "path": "core/repository/sail/src/main/java/org/eclipse/rdf4j/repository/sail/SailRepositoryConnection.java", "diffHunk": "@@ -195,10 +199,23 @@ public SailQuery prepareQuery(QueryLanguage ql, String queryString, String baseU\n \t\tParsedQuery parsedQuery = QueryParserUtil.parseQuery(ql, queryString, baseURI);\n \n \t\tif (parsedQuery instanceof ParsedTupleQuery) {\n+\t\t\tOptional<TupleExpr> sailTupleExpr = sailConnection.prepareQuery(ql, Query.Type.TUPLE, queryString, baseURI);\n+\t\t\tif (sailTupleExpr.isPresent()) {\n+\t\t\t\tparsedQuery = new ParsedTupleQuery(queryString, sailTupleExpr.get());\n+\t\t\t}\n \t\t\treturn new SailTupleQuery((ParsedTupleQuery) parsedQuery, this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg0ODcxMw=="}, "originalCommit": {"oid": "f3f2d05a1d8cfa25ccddd3a352621bcdf06c6b58"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQxMDQ3OQ==", "bodyText": "You're right that it parses twice, and of course that is a penalty - but only if the underlying Sail actually chooses to do its own processing (which is not the default case). We could potentially improve it a bit by using some regex matching to determine the type (instead of a full parse) but at this point I didn't want to spend the effort.", "url": "https://github.com/eclipse/rdf4j/pull/2058#discussion_r403410479", "createdAt": "2020-04-04T02:15:47Z", "author": {"login": "jeenbroekstra"}, "path": "core/repository/sail/src/main/java/org/eclipse/rdf4j/repository/sail/SailRepositoryConnection.java", "diffHunk": "@@ -195,10 +199,23 @@ public SailQuery prepareQuery(QueryLanguage ql, String queryString, String baseU\n \t\tParsedQuery parsedQuery = QueryParserUtil.parseQuery(ql, queryString, baseURI);\n \n \t\tif (parsedQuery instanceof ParsedTupleQuery) {\n+\t\t\tOptional<TupleExpr> sailTupleExpr = sailConnection.prepareQuery(ql, Query.Type.TUPLE, queryString, baseURI);\n+\t\t\tif (sailTupleExpr.isPresent()) {\n+\t\t\t\tparsedQuery = new ParsedTupleQuery(queryString, sailTupleExpr.get());\n+\t\t\t}\n \t\t\treturn new SailTupleQuery((ParsedTupleQuery) parsedQuery, this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg0ODcxMw=="}, "originalCommit": {"oid": "f3f2d05a1d8cfa25ccddd3a352621bcdf06c6b58"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQxMTE2Ng==", "bodyText": "I'll add something to the javadoc to point to the more explicit methods though - it's a good thing to use those if you can, regardless.", "url": "https://github.com/eclipse/rdf4j/pull/2058#discussion_r403411166", "createdAt": "2020-04-04T02:22:26Z", "author": {"login": "jeenbroekstra"}, "path": "core/repository/sail/src/main/java/org/eclipse/rdf4j/repository/sail/SailRepositoryConnection.java", "diffHunk": "@@ -195,10 +199,23 @@ public SailQuery prepareQuery(QueryLanguage ql, String queryString, String baseU\n \t\tParsedQuery parsedQuery = QueryParserUtil.parseQuery(ql, queryString, baseURI);\n \n \t\tif (parsedQuery instanceof ParsedTupleQuery) {\n+\t\t\tOptional<TupleExpr> sailTupleExpr = sailConnection.prepareQuery(ql, Query.Type.TUPLE, queryString, baseURI);\n+\t\t\tif (sailTupleExpr.isPresent()) {\n+\t\t\t\tparsedQuery = new ParsedTupleQuery(queryString, sailTupleExpr.get());\n+\t\t\t}\n \t\t\treturn new SailTupleQuery((ParsedTupleQuery) parsedQuery, this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg0ODcxMw=="}, "originalCommit": {"oid": "f3f2d05a1d8cfa25ccddd3a352621bcdf06c6b58"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODU5NDMxOnYy", "diffSide": "RIGHT", "path": "core/repository/sail/src/main/java/org/eclipse/rdf4j/repository/sail/SailRepositoryConnection.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODo1NToxM1rOGAMPqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMjoxNjo0MlrOGAuOgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg1MzgwMw==", "bodyText": "This looks like it ends up parsing only once.  Thats good :)\nBtw. Optionals have some rather nice chaining potential in java 8.\n\t\tParsedTupleQuery parsedQuery = sailTupleExpr\n\t\t\t.map(expr -> new ParsedTupleQuery(queryString, expr))\n\t\t\t.orElse(QueryParserUtil.parseTupleQuery(ql, queryString, baseURI));", "url": "https://github.com/eclipse/rdf4j/pull/2058#discussion_r402853803", "createdAt": "2020-04-03T08:55:13Z", "author": {"login": "hmottestad"}, "path": "core/repository/sail/src/main/java/org/eclipse/rdf4j/repository/sail/SailRepositoryConnection.java", "diffHunk": "@@ -208,21 +225,30 @@ public SailQuery prepareQuery(QueryLanguage ql, String queryString, String baseU\n \t@Override\n \tpublic SailTupleQuery prepareTupleQuery(QueryLanguage ql, String queryString, String baseURI)\n \t\t\tthrows MalformedQueryException {\n-\t\tParsedTupleQuery parsedQuery = QueryParserUtil.parseTupleQuery(ql, queryString, baseURI);\n+\t\tOptional<TupleExpr> sailTupleExpr = sailConnection.prepareQuery(ql, Query.Type.TUPLE, queryString, baseURI);\n+\t\tParsedTupleQuery parsedQuery = sailTupleExpr.isPresent()\n+\t\t\t\t? new ParsedTupleQuery(queryString, sailTupleExpr.get())\n+\t\t\t\t: QueryParserUtil.parseTupleQuery(ql, queryString, baseURI);\n \t\treturn new SailTupleQuery(parsedQuery, this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3f2d05a1d8cfa25ccddd3a352621bcdf06c6b58"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQxMDU2MQ==", "bodyText": "I always forget about Optional.map for some reason. Good call, I'll fix that.", "url": "https://github.com/eclipse/rdf4j/pull/2058#discussion_r403410561", "createdAt": "2020-04-04T02:16:42Z", "author": {"login": "jeenbroekstra"}, "path": "core/repository/sail/src/main/java/org/eclipse/rdf4j/repository/sail/SailRepositoryConnection.java", "diffHunk": "@@ -208,21 +225,30 @@ public SailQuery prepareQuery(QueryLanguage ql, String queryString, String baseU\n \t@Override\n \tpublic SailTupleQuery prepareTupleQuery(QueryLanguage ql, String queryString, String baseURI)\n \t\t\tthrows MalformedQueryException {\n-\t\tParsedTupleQuery parsedQuery = QueryParserUtil.parseTupleQuery(ql, queryString, baseURI);\n+\t\tOptional<TupleExpr> sailTupleExpr = sailConnection.prepareQuery(ql, Query.Type.TUPLE, queryString, baseURI);\n+\t\tParsedTupleQuery parsedQuery = sailTupleExpr.isPresent()\n+\t\t\t\t? new ParsedTupleQuery(queryString, sailTupleExpr.get())\n+\t\t\t\t: QueryParserUtil.parseTupleQuery(ql, queryString, baseURI);\n \t\treturn new SailTupleQuery(parsedQuery, this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg1MzgwMw=="}, "originalCommit": {"oid": "f3f2d05a1d8cfa25ccddd3a352621bcdf06c6b58"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1562, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}