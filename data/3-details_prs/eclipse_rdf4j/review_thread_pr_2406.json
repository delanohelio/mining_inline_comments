{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5NjU4NDQ5", "number": 2406, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMjo1Mjo1M1rOEWBJ6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMzowNDo0N1rOEWBTuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTIzMDQ4OnYy", "diffSide": "RIGHT", "path": "core/sail/elasticsearch-store/src/test/java/org/eclipse/rdf4j/sail/elasticsearchstore/benchmark/AddBenchmark.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMjo1Mjo1M1rOG9GygQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxODoyNTo1NlrOHJQayA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcyNzU1Mw==", "bodyText": "Given that this is ignored anyway, perhaps just remove it?", "url": "https://github.com/eclipse/rdf4j/pull/2406#discussion_r466727553", "createdAt": "2020-08-06T22:52:53Z", "author": {"login": "jeenbroekstra"}, "path": "core/sail/elasticsearch-store/src/test/java/org/eclipse/rdf4j/sail/elasticsearchstore/benchmark/AddBenchmark.java", "diffHunk": "@@ -47,22 +46,20 @@\n @OutputTimeUnit(TimeUnit.MILLISECONDS)\n public class AddBenchmark {\n \n-\tprivate static EmbeddedElastic embeddedElastic;\n-\n \tprivate static File installLocation = Files.newTemporaryFolder();\n-\n+\tprivate static ElasticsearchClusterRunner runner;\n \tprivate SailRepository elasticsearchStore;\n \n \t@Setup(Level.Trial)\n \tpublic void beforeClass() throws IOException, InterruptedException {\n \t\t// JMH does not correctly set JAVA_HOME. Change the JAVA_HOME below if you the following error:\n \t\t// [EmbeddedElsHandler] INFO p.a.t.e.ElasticServer - could not find java; set JAVA_HOME or ensure java is in\n \t\t// PATH\n-\t\tembeddedElastic = TestHelpers.startElasticsearch(installLocation,\n+\t\trunner = TestHelpers.startElasticsearch(installLocation,\n \t\t\t\t\"/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f42da053484943f3419d116cd3c5321f60d5ec6"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ2ODIzMg==", "bodyText": "ok, done", "url": "https://github.com/eclipse/rdf4j/pull/2406#discussion_r479468232", "createdAt": "2020-08-28T18:25:56Z", "author": {"login": "barthanssens"}, "path": "core/sail/elasticsearch-store/src/test/java/org/eclipse/rdf4j/sail/elasticsearchstore/benchmark/AddBenchmark.java", "diffHunk": "@@ -47,22 +46,20 @@\n @OutputTimeUnit(TimeUnit.MILLISECONDS)\n public class AddBenchmark {\n \n-\tprivate static EmbeddedElastic embeddedElastic;\n-\n \tprivate static File installLocation = Files.newTemporaryFolder();\n-\n+\tprivate static ElasticsearchClusterRunner runner;\n \tprivate SailRepository elasticsearchStore;\n \n \t@Setup(Level.Trial)\n \tpublic void beforeClass() throws IOException, InterruptedException {\n \t\t// JMH does not correctly set JAVA_HOME. Change the JAVA_HOME below if you the following error:\n \t\t// [EmbeddedElsHandler] INFO p.a.t.e.ElasticServer - could not find java; set JAVA_HOME or ensure java is in\n \t\t// PATH\n-\t\tembeddedElastic = TestHelpers.startElasticsearch(installLocation,\n+\t\trunner = TestHelpers.startElasticsearch(installLocation,\n \t\t\t\t\"/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcyNzU1Mw=="}, "originalCommit": {"oid": "0f42da053484943f3419d116cd3c5321f60d5ec6"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTI1NDQ0OnYy", "diffSide": "RIGHT", "path": "core/sail/elasticsearch-store/src/test/java/org/eclipse/rdf4j/sail/elasticsearchstore/TestHelpers.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMzowNDoxNVrOG9HA3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxODozMzo1NFrOHJQoYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjczMTIzMA==", "bodyText": "I'd be fine with marking this deprecated at least or even just getting rid of it - given that the java home is not something we can set anymore, and even if we could it's kind of a problematic hack anyway.", "url": "https://github.com/eclipse/rdf4j/pull/2406#discussion_r466731230", "createdAt": "2020-08-06T23:04:15Z", "author": {"login": "jeenbroekstra"}, "path": "core/sail/elasticsearch-store/src/test/java/org/eclipse/rdf4j/sail/elasticsearchstore/TestHelpers.java", "diffHunk": "@@ -9,72 +9,55 @@\n \n import java.io.File;\n import java.io.IOException;\n-import java.util.Random;\n+import java.net.URL;\n import java.util.concurrent.TimeUnit;\n \n import org.apache.commons.io.FileUtils;\n+import org.codelibs.elasticsearch.runner.ElasticsearchClusterRunner;\n+import org.elasticsearch.common.settings.Settings.Builder;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import pl.allegro.tech.embeddedelasticsearch.EmbeddedElastic;\n-import pl.allegro.tech.embeddedelasticsearch.JavaHomeOption;\n-import pl.allegro.tech.embeddedelasticsearch.PopularProperties;\n-\n public class TestHelpers {\n-\n-\tprivate final static Random random = new Random();\n-\tpublic static final String VERSION = \"6.8.8\";\n \tpublic static final String CLUSTER = \"cluster1\";\n-\tpublic static final String ELASTICSEARCH_DOWNLOAD_DIRECTORY = \"tempElasticsearchDownload\";\n \n \tprivate static final Logger logger = LoggerFactory.getLogger(TestHelpers.class);\n \n-\tpublic static EmbeddedElastic startElasticsearch(File installLocation) throws IOException, InterruptedException {\n-\n-\t\tEmbeddedElastic embeddedElastic = EmbeddedElastic.builder()\n-\t\t\t\t.withElasticVersion(VERSION)\n-\t\t\t\t.withSetting(PopularProperties.TRANSPORT_TCP_PORT, random.nextInt(10000) + 10000)\n-\t\t\t\t.withSetting(PopularProperties.HTTP_PORT, random.nextInt(10000) + 10000)\n-\t\t\t\t.withSetting(PopularProperties.CLUSTER_NAME, \"cluster1\")\n-\t\t\t\t.withInstallationDirectory(installLocation)\n-\t\t\t\t.withDownloadDirectory(new File(\"tempElasticsearchDownload\"))\n-//\t\t\t.withPlugin(\"analysis-stempel\")\n-\t\t\t\t.withStartTimeout(5, TimeUnit.MINUTES)\n-\t\t\t\t.build();\n-\n-\t\tembeddedElastic.start();\n-\t\tlogger.info(\"Elasticearch using transport port: \" + embeddedElastic.getTransportTcpPort());\n-\t\tlogger.info(\"Elasticearch using http port: \" + embeddedElastic.getHttpPort());\n+\tpublic static ElasticsearchClusterRunner startElasticsearch(File installLocation)\n+\t\t\tthrows IOException, InterruptedException {\n \n-\t\treturn embeddedElastic;\n+\t\tElasticsearchClusterRunner runner = new ElasticsearchClusterRunner();\n+\t\trunner.onBuild(new ElasticsearchClusterRunner.Builder() {\n+\t\t\t@Override\n+\t\t\tpublic void build(int number, Builder settingsBuilder) {\n+\t\t\t\t// settingsBuilder.put(\"indices.breaker.total.limit\", \"1100m\");\n+\t\t\t}\n+\t\t});\n+\t\trunner.build(ElasticsearchClusterRunner.newConfigs()\n+\t\t\t\t.numOfNode(1)\n+\t\t\t\t.basePath(installLocation.toString())\n+\t\t\t\t.clusterName(CLUSTER));\n+\n+\t\trunner.ensureYellow();\n+\n+\t\treturn runner;\n \t}\n \n-\tpublic static void stopElasticsearch(EmbeddedElastic embeddedElastic, File installLocation) {\n-\t\tembeddedElastic.stop();\n+\tpublic static int getPort(ElasticsearchClusterRunner runner) {\n+\t\treturn runner.node().settings().getAsInt(\"transport.port\", 9300);\n+\t}\n \n+\tpublic static void stopElasticsearch(ElasticsearchClusterRunner runner) {\n \t\ttry {\n-\t\t\tFileUtils.deleteDirectory(installLocation);\n-\t\t} catch (IOException e) {\n-\t\t\tthrow new RuntimeException(e);\n+\t\t\trunner.close();\n+\t\t} catch (IOException ioe) {\n+\t\t\tlogger.error(\"Error closing ES cluster\", ioe);\n \t\t}\n+\t\trunner.clean();\n \t}\n \n-\tpublic static EmbeddedElastic startElasticsearch(File installLocation, String javaHomePath)\n+\tpublic static ElasticsearchClusterRunner startElasticsearch(File installLocation, String javaHomePath)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f42da053484943f3419d116cd3c5321f60d5ec6"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ3MTcxMw==", "bodyText": "Removed the (test)method", "url": "https://github.com/eclipse/rdf4j/pull/2406#discussion_r479471713", "createdAt": "2020-08-28T18:33:54Z", "author": {"login": "barthanssens"}, "path": "core/sail/elasticsearch-store/src/test/java/org/eclipse/rdf4j/sail/elasticsearchstore/TestHelpers.java", "diffHunk": "@@ -9,72 +9,55 @@\n \n import java.io.File;\n import java.io.IOException;\n-import java.util.Random;\n+import java.net.URL;\n import java.util.concurrent.TimeUnit;\n \n import org.apache.commons.io.FileUtils;\n+import org.codelibs.elasticsearch.runner.ElasticsearchClusterRunner;\n+import org.elasticsearch.common.settings.Settings.Builder;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import pl.allegro.tech.embeddedelasticsearch.EmbeddedElastic;\n-import pl.allegro.tech.embeddedelasticsearch.JavaHomeOption;\n-import pl.allegro.tech.embeddedelasticsearch.PopularProperties;\n-\n public class TestHelpers {\n-\n-\tprivate final static Random random = new Random();\n-\tpublic static final String VERSION = \"6.8.8\";\n \tpublic static final String CLUSTER = \"cluster1\";\n-\tpublic static final String ELASTICSEARCH_DOWNLOAD_DIRECTORY = \"tempElasticsearchDownload\";\n \n \tprivate static final Logger logger = LoggerFactory.getLogger(TestHelpers.class);\n \n-\tpublic static EmbeddedElastic startElasticsearch(File installLocation) throws IOException, InterruptedException {\n-\n-\t\tEmbeddedElastic embeddedElastic = EmbeddedElastic.builder()\n-\t\t\t\t.withElasticVersion(VERSION)\n-\t\t\t\t.withSetting(PopularProperties.TRANSPORT_TCP_PORT, random.nextInt(10000) + 10000)\n-\t\t\t\t.withSetting(PopularProperties.HTTP_PORT, random.nextInt(10000) + 10000)\n-\t\t\t\t.withSetting(PopularProperties.CLUSTER_NAME, \"cluster1\")\n-\t\t\t\t.withInstallationDirectory(installLocation)\n-\t\t\t\t.withDownloadDirectory(new File(\"tempElasticsearchDownload\"))\n-//\t\t\t.withPlugin(\"analysis-stempel\")\n-\t\t\t\t.withStartTimeout(5, TimeUnit.MINUTES)\n-\t\t\t\t.build();\n-\n-\t\tembeddedElastic.start();\n-\t\tlogger.info(\"Elasticearch using transport port: \" + embeddedElastic.getTransportTcpPort());\n-\t\tlogger.info(\"Elasticearch using http port: \" + embeddedElastic.getHttpPort());\n+\tpublic static ElasticsearchClusterRunner startElasticsearch(File installLocation)\n+\t\t\tthrows IOException, InterruptedException {\n \n-\t\treturn embeddedElastic;\n+\t\tElasticsearchClusterRunner runner = new ElasticsearchClusterRunner();\n+\t\trunner.onBuild(new ElasticsearchClusterRunner.Builder() {\n+\t\t\t@Override\n+\t\t\tpublic void build(int number, Builder settingsBuilder) {\n+\t\t\t\t// settingsBuilder.put(\"indices.breaker.total.limit\", \"1100m\");\n+\t\t\t}\n+\t\t});\n+\t\trunner.build(ElasticsearchClusterRunner.newConfigs()\n+\t\t\t\t.numOfNode(1)\n+\t\t\t\t.basePath(installLocation.toString())\n+\t\t\t\t.clusterName(CLUSTER));\n+\n+\t\trunner.ensureYellow();\n+\n+\t\treturn runner;\n \t}\n \n-\tpublic static void stopElasticsearch(EmbeddedElastic embeddedElastic, File installLocation) {\n-\t\tembeddedElastic.stop();\n+\tpublic static int getPort(ElasticsearchClusterRunner runner) {\n+\t\treturn runner.node().settings().getAsInt(\"transport.port\", 9300);\n+\t}\n \n+\tpublic static void stopElasticsearch(ElasticsearchClusterRunner runner) {\n \t\ttry {\n-\t\t\tFileUtils.deleteDirectory(installLocation);\n-\t\t} catch (IOException e) {\n-\t\t\tthrow new RuntimeException(e);\n+\t\t\trunner.close();\n+\t\t} catch (IOException ioe) {\n+\t\t\tlogger.error(\"Error closing ES cluster\", ioe);\n \t\t}\n+\t\trunner.clean();\n \t}\n \n-\tpublic static EmbeddedElastic startElasticsearch(File installLocation, String javaHomePath)\n+\tpublic static ElasticsearchClusterRunner startElasticsearch(File installLocation, String javaHomePath)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjczMTIzMA=="}, "originalCommit": {"oid": "0f42da053484943f3419d116cd3c5321f60d5ec6"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTI1NTYzOnYy", "diffSide": "RIGHT", "path": "core/sail/elasticsearch-store/src/test/java/org/eclipse/rdf4j/sail/elasticsearchstore/TestHelpers.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMzowNDo0N1rOG9HBjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMzowNDo0N1rOG9HBjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjczMTQwNw==", "bodyText": "Very nice. Happy we can upgrade to a more maintained embedded cluster setup.", "url": "https://github.com/eclipse/rdf4j/pull/2406#discussion_r466731407", "createdAt": "2020-08-06T23:04:47Z", "author": {"login": "jeenbroekstra"}, "path": "core/sail/elasticsearch-store/src/test/java/org/eclipse/rdf4j/sail/elasticsearchstore/TestHelpers.java", "diffHunk": "@@ -9,72 +9,55 @@\n \n import java.io.File;\n import java.io.IOException;\n-import java.util.Random;\n+import java.net.URL;\n import java.util.concurrent.TimeUnit;\n \n import org.apache.commons.io.FileUtils;\n+import org.codelibs.elasticsearch.runner.ElasticsearchClusterRunner;\n+import org.elasticsearch.common.settings.Settings.Builder;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import pl.allegro.tech.embeddedelasticsearch.EmbeddedElastic;\n-import pl.allegro.tech.embeddedelasticsearch.JavaHomeOption;\n-import pl.allegro.tech.embeddedelasticsearch.PopularProperties;\n-\n public class TestHelpers {\n-\n-\tprivate final static Random random = new Random();\n-\tpublic static final String VERSION = \"6.8.8\";\n \tpublic static final String CLUSTER = \"cluster1\";\n-\tpublic static final String ELASTICSEARCH_DOWNLOAD_DIRECTORY = \"tempElasticsearchDownload\";\n \n \tprivate static final Logger logger = LoggerFactory.getLogger(TestHelpers.class);\n \n-\tpublic static EmbeddedElastic startElasticsearch(File installLocation) throws IOException, InterruptedException {\n-\n-\t\tEmbeddedElastic embeddedElastic = EmbeddedElastic.builder()\n-\t\t\t\t.withElasticVersion(VERSION)\n-\t\t\t\t.withSetting(PopularProperties.TRANSPORT_TCP_PORT, random.nextInt(10000) + 10000)\n-\t\t\t\t.withSetting(PopularProperties.HTTP_PORT, random.nextInt(10000) + 10000)\n-\t\t\t\t.withSetting(PopularProperties.CLUSTER_NAME, \"cluster1\")\n-\t\t\t\t.withInstallationDirectory(installLocation)\n-\t\t\t\t.withDownloadDirectory(new File(\"tempElasticsearchDownload\"))\n-//\t\t\t.withPlugin(\"analysis-stempel\")\n-\t\t\t\t.withStartTimeout(5, TimeUnit.MINUTES)\n-\t\t\t\t.build();\n-\n-\t\tembeddedElastic.start();\n-\t\tlogger.info(\"Elasticearch using transport port: \" + embeddedElastic.getTransportTcpPort());\n-\t\tlogger.info(\"Elasticearch using http port: \" + embeddedElastic.getHttpPort());\n+\tpublic static ElasticsearchClusterRunner startElasticsearch(File installLocation)\n+\t\t\tthrows IOException, InterruptedException {\n \n-\t\treturn embeddedElastic;\n+\t\tElasticsearchClusterRunner runner = new ElasticsearchClusterRunner();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f42da053484943f3419d116cd3c5321f60d5ec6"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1459, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}