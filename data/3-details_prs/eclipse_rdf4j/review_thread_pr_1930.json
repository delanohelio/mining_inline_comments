{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1ODE0OTc2", "number": 1930, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQxOTo1NjoyN1rODgOzfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwOTo0MjoxN1rODgUw6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MTIzNTgyOnYy", "diffSide": "RIGHT", "path": "core/sail/memory/src/main/java/org/eclipse/rdf4j/sail/memory/MemorySailStore.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQxOTo1NjoyN1rOFqVApg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMDoyMDozMVrOFrimhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkyODc0Mg==", "bodyText": "This fixes a bug I believe I've introduced previously. Not a problem until now though.", "url": "https://github.com/eclipse/rdf4j/pull/1930#discussion_r379928742", "createdAt": "2020-02-16T19:56:27Z", "author": {"login": "hmottestad"}, "path": "core/sail/memory/src/main/java/org/eclipse/rdf4j/sail/memory/MemorySailStore.java", "diffHunk": "@@ -511,7 +511,10 @@ public synchronized void deprecate(Statement statement) throws SailException {\n \t\t\tacquireExclusiveTransactionLock();\n \t\t\trequireCleanup = true;\n \t\t\tif (statement instanceof MemStatement) {\n-\t\t\t\t((MemStatement) statement).setTillSnapshot(nextSnapshot);\n+\t\t\t\tMemStatement toDeprecate = (MemStatement) statement;\n+\t\t\t\tif (toDeprecate.getTillSnapshot() > nextSnapshot && toDeprecate.isExplicit() == explicit) {\n+\t\t\t\t\ttoDeprecate.setTillSnapshot(nextSnapshot);\n+\t\t\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa56f9401879a1524e0f573c577235236bdc5f4e"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA3MDAzNg==", "bodyText": "How is this fix related to the new SimpleUpgradeableModel class?", "url": "https://github.com/eclipse/rdf4j/pull/1930#discussion_r381070036", "createdAt": "2020-02-19T04:21:34Z", "author": {"login": "jeenbroekstra"}, "path": "core/sail/memory/src/main/java/org/eclipse/rdf4j/sail/memory/MemorySailStore.java", "diffHunk": "@@ -511,7 +511,10 @@ public synchronized void deprecate(Statement statement) throws SailException {\n \t\t\tacquireExclusiveTransactionLock();\n \t\t\trequireCleanup = true;\n \t\t\tif (statement instanceof MemStatement) {\n-\t\t\t\t((MemStatement) statement).setTillSnapshot(nextSnapshot);\n+\t\t\t\tMemStatement toDeprecate = (MemStatement) statement;\n+\t\t\t\tif (toDeprecate.getTillSnapshot() > nextSnapshot && toDeprecate.isExplicit() == explicit) {\n+\t\t\t\t\ttoDeprecate.setTillSnapshot(nextSnapshot);\n+\t\t\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkyODc0Mg=="}, "originalCommit": {"oid": "aa56f9401879a1524e0f573c577235236bdc5f4e"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE4ODI1OQ==", "bodyText": "I've made some more changes here.\nThe concept of directly manipulating the statement was introduced with the ElasticsearchStore. Gives a decent performance improvement since it allows us to skip retrieving a statement we already have. Unfortunately it's common that we try to deprecate a statement that can't be deprecated (not in our snapshot or explicit/inferred). That's usually handled when retrieving the statement again, however since we are working on it directly we need to apply the same checks.", "url": "https://github.com/eclipse/rdf4j/pull/1930#discussion_r381188259", "createdAt": "2020-02-19T09:59:44Z", "author": {"login": "hmottestad"}, "path": "core/sail/memory/src/main/java/org/eclipse/rdf4j/sail/memory/MemorySailStore.java", "diffHunk": "@@ -511,7 +511,10 @@ public synchronized void deprecate(Statement statement) throws SailException {\n \t\t\tacquireExclusiveTransactionLock();\n \t\t\trequireCleanup = true;\n \t\t\tif (statement instanceof MemStatement) {\n-\t\t\t\t((MemStatement) statement).setTillSnapshot(nextSnapshot);\n+\t\t\t\tMemStatement toDeprecate = (MemStatement) statement;\n+\t\t\t\tif (toDeprecate.getTillSnapshot() > nextSnapshot && toDeprecate.isExplicit() == explicit) {\n+\t\t\t\t\ttoDeprecate.setTillSnapshot(nextSnapshot);\n+\t\t\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkyODc0Mg=="}, "originalCommit": {"oid": "aa56f9401879a1524e0f573c577235236bdc5f4e"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE4OTA5OQ==", "bodyText": "I've now copied this line from here: \n  \n    \n      rdf4j/core/sail/memory/src/main/java/org/eclipse/rdf4j/sail/memory/model/MemStatementIterator.java\n    \n    \n         Line 142\n      in\n      d2a301d\n    \n    \n    \n    \n\n        \n          \n           return snapshot < 0 || st.isInSnapshot(snapshot);", "url": "https://github.com/eclipse/rdf4j/pull/1930#discussion_r381189099", "createdAt": "2020-02-19T10:01:08Z", "author": {"login": "hmottestad"}, "path": "core/sail/memory/src/main/java/org/eclipse/rdf4j/sail/memory/MemorySailStore.java", "diffHunk": "@@ -511,7 +511,10 @@ public synchronized void deprecate(Statement statement) throws SailException {\n \t\t\tacquireExclusiveTransactionLock();\n \t\t\trequireCleanup = true;\n \t\t\tif (statement instanceof MemStatement) {\n-\t\t\t\t((MemStatement) statement).setTillSnapshot(nextSnapshot);\n+\t\t\t\tMemStatement toDeprecate = (MemStatement) statement;\n+\t\t\t\tif (toDeprecate.getTillSnapshot() > nextSnapshot && toDeprecate.isExplicit() == explicit) {\n+\t\t\t\t\ttoDeprecate.setTillSnapshot(nextSnapshot);\n+\t\t\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkyODc0Mg=="}, "originalCommit": {"oid": "aa56f9401879a1524e0f573c577235236bdc5f4e"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIwMDAwNQ==", "bodyText": "Btw. The reason this wasn't caught earlier was because the statements was never instanceof MemStatement directly until now. The LinkedHashModel wraps it's statement in a LinkedHashModelStatement (or something like that)", "url": "https://github.com/eclipse/rdf4j/pull/1930#discussion_r381200005", "createdAt": "2020-02-19T10:20:31Z", "author": {"login": "hmottestad"}, "path": "core/sail/memory/src/main/java/org/eclipse/rdf4j/sail/memory/MemorySailStore.java", "diffHunk": "@@ -511,7 +511,10 @@ public synchronized void deprecate(Statement statement) throws SailException {\n \t\t\tacquireExclusiveTransactionLock();\n \t\t\trequireCleanup = true;\n \t\t\tif (statement instanceof MemStatement) {\n-\t\t\t\t((MemStatement) statement).setTillSnapshot(nextSnapshot);\n+\t\t\t\tMemStatement toDeprecate = (MemStatement) statement;\n+\t\t\t\tif (toDeprecate.getTillSnapshot() > nextSnapshot && toDeprecate.isExplicit() == explicit) {\n+\t\t\t\t\ttoDeprecate.setTillSnapshot(nextSnapshot);\n+\t\t\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkyODc0Mg=="}, "originalCommit": {"oid": "aa56f9401879a1524e0f573c577235236bdc5f4e"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MTI4NzE2OnYy", "diffSide": "RIGHT", "path": "core/sail/base/src/main/java/org/eclipse/rdf4j/sail/base/SimpleUpgradeableModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQyMTozOToyOFrOFqVbOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQyMTozOToyOFrOFqVbOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzNTU0Ng==", "bodyText": "Can we put a bit of javadoc in that describes the purpose and design rationale of this class?", "url": "https://github.com/eclipse/rdf4j/pull/1930#discussion_r379935546", "createdAt": "2020-02-16T21:39:28Z", "author": {"login": "jeenbroekstra"}, "path": "core/sail/base/src/main/java/org/eclipse/rdf4j/sail/base/SimpleUpgradeableModel.java", "diffHunk": "@@ -0,0 +1,256 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+package org.eclipse.rdf4j.sail.base;\n+\n+import org.eclipse.rdf4j.model.IRI;\n+import org.eclipse.rdf4j.model.Model;\n+import org.eclipse.rdf4j.model.ModelFactory;\n+import org.eclipse.rdf4j.model.Namespace;\n+import org.eclipse.rdf4j.model.Resource;\n+import org.eclipse.rdf4j.model.Statement;\n+import org.eclipse.rdf4j.model.Value;\n+import org.eclipse.rdf4j.model.impl.SimpleValueFactory;\n+\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+public class SimpleUpgradeableModel implements Model {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "402751590863ace12ed512191848a04a67931edc"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MjIxMjI0OnYy", "diffSide": "RIGHT", "path": "compliance/repository/src/test/java/org/eclipse/rdf4j/repository/sparql/federation/RepositoryFederatedServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwOTo0MjoxN1rOFqd7pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwNDozMDoxMlrOFraxfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA3NDkxNg==", "bodyText": "There were tests that assumed an order but didn't specify one. The new ConcurrentHashSet based model has reverse order from the LinkedHashSet based one. I think this is fine, unless there is some internal ordering requirement that I don't know about???", "url": "https://github.com/eclipse/rdf4j/pull/1930#discussion_r380074916", "createdAt": "2020-02-17T09:42:17Z", "author": {"login": "hmottestad"}, "path": "compliance/repository/src/test/java/org/eclipse/rdf4j/repository/sparql/federation/RepositoryFederatedServiceIntegrationTest.java", "diffHunk": "@@ -129,7 +129,7 @@ public void test4() throws Exception {\n \t\t\t\tvf.createStatement(iri(\"s2\"), RDFS.LABEL, l(\"val2\")),\n \t\t\t\tvf.createStatement(iri(\"s3\"), RDFS.LABEL, l(\"val3\"))));\n \n-\t\tString query = \"SELECT ?var WHERE { SERVICE <urn:dummy> { ?s ?p ?var } . SERVICE <urn:dummy> {  ?s ?p ?var  } }\";\n+\t\tString query = \"SELECT ?var WHERE { SERVICE <urn:dummy> { ?s ?p ?var } . SERVICE <urn:dummy> {  ?s ?p ?var  } } order by ?var\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10a38fb5433edde87d802cae863f6ba70c99174d"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA3MTc0MA==", "bodyText": "A Model is supposed to have predictable iteration order but that doesn't translate to a fixed order on a SPARQL query result, so good find.", "url": "https://github.com/eclipse/rdf4j/pull/1930#discussion_r381071740", "createdAt": "2020-02-19T04:30:12Z", "author": {"login": "jeenbroekstra"}, "path": "compliance/repository/src/test/java/org/eclipse/rdf4j/repository/sparql/federation/RepositoryFederatedServiceIntegrationTest.java", "diffHunk": "@@ -129,7 +129,7 @@ public void test4() throws Exception {\n \t\t\t\tvf.createStatement(iri(\"s2\"), RDFS.LABEL, l(\"val2\")),\n \t\t\t\tvf.createStatement(iri(\"s3\"), RDFS.LABEL, l(\"val3\"))));\n \n-\t\tString query = \"SELECT ?var WHERE { SERVICE <urn:dummy> { ?s ?p ?var } . SERVICE <urn:dummy> {  ?s ?p ?var  } }\";\n+\t\tString query = \"SELECT ?var WHERE { SERVICE <urn:dummy> { ?s ?p ?var } . SERVICE <urn:dummy> {  ?s ?p ?var  } } order by ?var\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA3NDkxNg=="}, "originalCommit": {"oid": "10a38fb5433edde87d802cae863f6ba70c99174d"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1658, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}