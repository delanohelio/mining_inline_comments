{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwOTQ0MzQ5", "number": 1819, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwOTo1NDoyMlrODXGmRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQxMDo1MTozNVrODXU0ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NTUxOTQxOnYy", "diffSide": "RIGHT", "path": "core/model/src/main/java/org/eclipse/rdf4j/model/util/ModelCollector.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwOTo1NDoyMlrOFcPMlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNjo1OTo1OFrOFcaOXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE1MzQyOQ==", "bodyText": "does this also need to be synchronized?", "url": "https://github.com/eclipse/rdf4j/pull/1819#discussion_r365153429", "createdAt": "2020-01-10T09:54:22Z", "author": {"login": "hmottestad"}, "path": "core/model/src/main/java/org/eclipse/rdf4j/model/util/ModelCollector.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+package org.eclipse.rdf4j.model.util;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.function.BiConsumer;\n+import java.util.function.BinaryOperator;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.stream.Collector;\n+\n+import org.eclipse.rdf4j.model.Model;\n+import org.eclipse.rdf4j.model.Statement;\n+import org.eclipse.rdf4j.model.impl.LinkedHashModel;\n+\n+/**\n+ * Collects a stream of Statements into a Model.\n+ * \n+ * @author Bart Hanssens\n+ */\n+public class ModelCollector implements Collector<Statement, Model, Model> {\n+\tprivate final Object lock = new Object();\n+\n+\t/**\n+\t * Convenience method to obtain a ModelCollector.\n+\t * \n+\t * @return a ModelCollector\n+\t */\n+\tpublic static ModelCollector toModel() {\n+\t\treturn new ModelCollector();\n+\t}\n+\n+\t@Override\n+\tpublic Supplier<Model> supplier() {\n+\t\treturn LinkedHashModel::new;\n+\t}\n+\n+\t@Override\n+\tpublic BiConsumer<Model, Statement> accumulator() {\n+\t\treturn (m, s) -> {\n+\t\t\tsynchronized (lock) {\n+\t\t\t\tm.add(s);\n+\t\t\t}\n+\t\t};\n+\t}\n+\n+\t@Override\n+\tpublic BinaryOperator<Model> combiner() {\n+\t\treturn (m1, m2) -> {\n+\t\t\tm1.addAll(m2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33fcd272f72162d817ef8bdf578e64d112555cfb"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTMzNDEwOA==", "bodyText": "Actually, if I understand the Collector correctly, this method could be implemented returning just null....\nBecause the combiner does not get called in parallelStream() with the concurrent and unordered characteristics set.\nInterestingly enough, with OpenJDK11 on my machine, the combiner does get called in sequential stream(), but the result seems to be ignored anyway (just returning null does not break the test code)", "url": "https://github.com/eclipse/rdf4j/pull/1819#discussion_r365334108", "createdAt": "2020-01-10T16:59:58Z", "author": {"login": "barthanssens"}, "path": "core/model/src/main/java/org/eclipse/rdf4j/model/util/ModelCollector.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+package org.eclipse.rdf4j.model.util;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.function.BiConsumer;\n+import java.util.function.BinaryOperator;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.stream.Collector;\n+\n+import org.eclipse.rdf4j.model.Model;\n+import org.eclipse.rdf4j.model.Statement;\n+import org.eclipse.rdf4j.model.impl.LinkedHashModel;\n+\n+/**\n+ * Collects a stream of Statements into a Model.\n+ * \n+ * @author Bart Hanssens\n+ */\n+public class ModelCollector implements Collector<Statement, Model, Model> {\n+\tprivate final Object lock = new Object();\n+\n+\t/**\n+\t * Convenience method to obtain a ModelCollector.\n+\t * \n+\t * @return a ModelCollector\n+\t */\n+\tpublic static ModelCollector toModel() {\n+\t\treturn new ModelCollector();\n+\t}\n+\n+\t@Override\n+\tpublic Supplier<Model> supplier() {\n+\t\treturn LinkedHashModel::new;\n+\t}\n+\n+\t@Override\n+\tpublic BiConsumer<Model, Statement> accumulator() {\n+\t\treturn (m, s) -> {\n+\t\t\tsynchronized (lock) {\n+\t\t\t\tm.add(s);\n+\t\t\t}\n+\t\t};\n+\t}\n+\n+\t@Override\n+\tpublic BinaryOperator<Model> combiner() {\n+\t\treturn (m1, m2) -> {\n+\t\t\tm1.addAll(m2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE1MzQyOQ=="}, "originalCommit": {"oid": "33fcd272f72162d817ef8bdf578e64d112555cfb"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NTUyMTY5OnYy", "diffSide": "RIGHT", "path": "core/model/src/main/java/org/eclipse/rdf4j/model/util/ModelCollector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwOTo1NTowMlrOFcPN4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNzo1Mjo0N1rOFcbiPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE1Mzc2MA==", "bodyText": "could this be synchronized on m instead of on lock?", "url": "https://github.com/eclipse/rdf4j/pull/1819#discussion_r365153760", "createdAt": "2020-01-10T09:55:02Z", "author": {"login": "hmottestad"}, "path": "core/model/src/main/java/org/eclipse/rdf4j/model/util/ModelCollector.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+package org.eclipse.rdf4j.model.util;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.function.BiConsumer;\n+import java.util.function.BinaryOperator;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.stream.Collector;\n+\n+import org.eclipse.rdf4j.model.Model;\n+import org.eclipse.rdf4j.model.Statement;\n+import org.eclipse.rdf4j.model.impl.LinkedHashModel;\n+\n+/**\n+ * Collects a stream of Statements into a Model.\n+ * \n+ * @author Bart Hanssens\n+ */\n+public class ModelCollector implements Collector<Statement, Model, Model> {\n+\tprivate final Object lock = new Object();\n+\n+\t/**\n+\t * Convenience method to obtain a ModelCollector.\n+\t * \n+\t * @return a ModelCollector\n+\t */\n+\tpublic static ModelCollector toModel() {\n+\t\treturn new ModelCollector();\n+\t}\n+\n+\t@Override\n+\tpublic Supplier<Model> supplier() {\n+\t\treturn LinkedHashModel::new;\n+\t}\n+\n+\t@Override\n+\tpublic BiConsumer<Model, Statement> accumulator() {\n+\t\treturn (m, s) -> {\n+\t\t\tsynchronized (lock) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33fcd272f72162d817ef8bdf578e64d112555cfb"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM1NTU4MQ==", "bodyText": "thanks, seems to work", "url": "https://github.com/eclipse/rdf4j/pull/1819#discussion_r365355581", "createdAt": "2020-01-10T17:52:47Z", "author": {"login": "barthanssens"}, "path": "core/model/src/main/java/org/eclipse/rdf4j/model/util/ModelCollector.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+package org.eclipse.rdf4j.model.util;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.function.BiConsumer;\n+import java.util.function.BinaryOperator;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.stream.Collector;\n+\n+import org.eclipse.rdf4j.model.Model;\n+import org.eclipse.rdf4j.model.Statement;\n+import org.eclipse.rdf4j.model.impl.LinkedHashModel;\n+\n+/**\n+ * Collects a stream of Statements into a Model.\n+ * \n+ * @author Bart Hanssens\n+ */\n+public class ModelCollector implements Collector<Statement, Model, Model> {\n+\tprivate final Object lock = new Object();\n+\n+\t/**\n+\t * Convenience method to obtain a ModelCollector.\n+\t * \n+\t * @return a ModelCollector\n+\t */\n+\tpublic static ModelCollector toModel() {\n+\t\treturn new ModelCollector();\n+\t}\n+\n+\t@Override\n+\tpublic Supplier<Model> supplier() {\n+\t\treturn LinkedHashModel::new;\n+\t}\n+\n+\t@Override\n+\tpublic BiConsumer<Model, Statement> accumulator() {\n+\t\treturn (m, s) -> {\n+\t\t\tsynchronized (lock) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE1Mzc2MA=="}, "originalCommit": {"oid": "33fcd272f72162d817ef8bdf578e64d112555cfb"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NTUyOTU4OnYy", "diffSide": "RIGHT", "path": "core/model/src/main/java/org/eclipse/rdf4j/model/util/ModelCollector.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwOTo1Nzo0OVrOFcPSkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwMDoyODozNVrOFcjJnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE1NDk2Mg==", "bodyText": "Could this use ModelFactory, so that we can add a toLinkedHashModel() and toTreeModel() method? I would like the default toModel() method to use the LinkedHashModel as this is typically the fastest.", "url": "https://github.com/eclipse/rdf4j/pull/1819#discussion_r365154962", "createdAt": "2020-01-10T09:57:49Z", "author": {"login": "hmottestad"}, "path": "core/model/src/main/java/org/eclipse/rdf4j/model/util/ModelCollector.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+package org.eclipse.rdf4j.model.util;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.function.BiConsumer;\n+import java.util.function.BinaryOperator;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.stream.Collector;\n+\n+import org.eclipse.rdf4j.model.Model;\n+import org.eclipse.rdf4j.model.Statement;\n+import org.eclipse.rdf4j.model.impl.LinkedHashModel;\n+\n+/**\n+ * Collects a stream of Statements into a Model.\n+ * \n+ * @author Bart Hanssens\n+ */\n+public class ModelCollector implements Collector<Statement, Model, Model> {\n+\tprivate final Object lock = new Object();\n+\n+\t/**\n+\t * Convenience method to obtain a ModelCollector.\n+\t * \n+\t * @return a ModelCollector\n+\t */\n+\tpublic static ModelCollector toModel() {\n+\t\treturn new ModelCollector();\n+\t}\n+\n+\t@Override\n+\tpublic Supplier<Model> supplier() {\n+\t\treturn LinkedHashModel::new;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33fcd272f72162d817ef8bdf578e64d112555cfb"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ4MDM0OQ==", "bodyText": "I've slightly modified the code to use ModelFactory, so a toTreeModel() could indeed be added", "url": "https://github.com/eclipse/rdf4j/pull/1819#discussion_r365480349", "createdAt": "2020-01-11T00:28:35Z", "author": {"login": "barthanssens"}, "path": "core/model/src/main/java/org/eclipse/rdf4j/model/util/ModelCollector.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+package org.eclipse.rdf4j.model.util;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.function.BiConsumer;\n+import java.util.function.BinaryOperator;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.stream.Collector;\n+\n+import org.eclipse.rdf4j.model.Model;\n+import org.eclipse.rdf4j.model.Statement;\n+import org.eclipse.rdf4j.model.impl.LinkedHashModel;\n+\n+/**\n+ * Collects a stream of Statements into a Model.\n+ * \n+ * @author Bart Hanssens\n+ */\n+public class ModelCollector implements Collector<Statement, Model, Model> {\n+\tprivate final Object lock = new Object();\n+\n+\t/**\n+\t * Convenience method to obtain a ModelCollector.\n+\t * \n+\t * @return a ModelCollector\n+\t */\n+\tpublic static ModelCollector toModel() {\n+\t\treturn new ModelCollector();\n+\t}\n+\n+\t@Override\n+\tpublic Supplier<Model> supplier() {\n+\t\treturn LinkedHashModel::new;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE1NDk2Mg=="}, "originalCommit": {"oid": "33fcd272f72162d817ef8bdf578e64d112555cfb"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1Nzg0OTMzOnYy", "diffSide": "RIGHT", "path": "core/model/src/main/java/org/eclipse/rdf4j/model/util/ModelCollector.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQxMDo1MTozNVrOFclNtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQxMjowNzo1M1rOFclbHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUxNDE2NQ==", "bodyText": "I took a look at some examples online and found a cool class called EnumSet:\nreturn EnumSet.of(Characteristics.CONCURRENT, Characteristics.IDENTITY_FINISH, Characteristics.UNORDERED);", "url": "https://github.com/eclipse/rdf4j/pull/1819#discussion_r365514165", "createdAt": "2020-01-11T10:51:35Z", "author": {"login": "hmottestad"}, "path": "core/model/src/main/java/org/eclipse/rdf4j/model/util/ModelCollector.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+package org.eclipse.rdf4j.model.util;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.function.BiConsumer;\n+import java.util.function.BinaryOperator;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.stream.Collector;\n+\n+import org.eclipse.rdf4j.model.Model;\n+import org.eclipse.rdf4j.model.ModelFactory;\n+import org.eclipse.rdf4j.model.Statement;\n+import org.eclipse.rdf4j.model.impl.LinkedHashModel;\n+import org.eclipse.rdf4j.model.impl.LinkedHashModelFactory;\n+\n+/**\n+ * Collects a stream of Statements into a Model.\n+ * \n+ * @author Bart Hanssens\n+ */\n+public class ModelCollector implements Collector<Statement, Model, Model> {\n+\tprivate ModelFactory factory;\n+\n+\t/**\n+\t * Constructor\n+\t */\n+\tpublic ModelCollector() {\n+\t\tthis.factory = new LinkedHashModelFactory();\n+\t}\n+\n+\t/**\n+\t * Constructor\n+\t * \n+\t * @param factory\n+\t */\n+\tpublic ModelCollector(ModelFactory factory) {\n+\t\tthis.factory = factory;\n+\t}\n+\n+\t/**\n+\t * Convenience method to obtain a ModelCollector.\n+\t * \n+\t * @return a ModelCollector\n+\t */\n+\tpublic static ModelCollector toModel() {\n+\t\treturn new ModelCollector();\n+\t}\n+\n+\t@Override\n+\tpublic Supplier<Model> supplier() {\n+\t\treturn () -> factory.createEmptyModel();\n+\t}\n+\n+\t@Override\n+\tpublic BiConsumer<Model, Statement> accumulator() {\n+\t\treturn (m, s) -> {\n+\t\t\tsynchronized (m) {\n+\t\t\t\tm.add(s);\n+\t\t\t}\n+\t\t};\n+\t}\n+\n+\t@Override\n+\tpublic BinaryOperator<Model> combiner() {\n+\t\treturn (m1, m2) -> {\n+\t\t\tm1.addAll(m2);\n+\t\t\treturn m1;\n+\t\t};\n+\t}\n+\n+\t@Override\n+\tpublic Function<Model, Model> finisher() {\n+\t\treturn Function.identity();\n+\t}\n+\n+\t@Override\n+\tpublic Set<Characteristics> characteristics() {\n+\t\tSet<Characteristics> characteristics = new HashSet<>();\n+\t\tcharacteristics.add(Characteristics.CONCURRENT);\n+\t\tcharacteristics.add(Characteristics.IDENTITY_FINISH);\n+\t\tcharacteristics.add(Characteristics.UNORDERED);\n+\t\treturn characteristics;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6afcaaffbb25e99ef3f539fdefc3b87a512995ed"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUxNzU5OA==", "bodyText": "Aha, just what we need. Didn't know that one.", "url": "https://github.com/eclipse/rdf4j/pull/1819#discussion_r365517598", "createdAt": "2020-01-11T12:07:53Z", "author": {"login": "barthanssens"}, "path": "core/model/src/main/java/org/eclipse/rdf4j/model/util/ModelCollector.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+package org.eclipse.rdf4j.model.util;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.function.BiConsumer;\n+import java.util.function.BinaryOperator;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.stream.Collector;\n+\n+import org.eclipse.rdf4j.model.Model;\n+import org.eclipse.rdf4j.model.ModelFactory;\n+import org.eclipse.rdf4j.model.Statement;\n+import org.eclipse.rdf4j.model.impl.LinkedHashModel;\n+import org.eclipse.rdf4j.model.impl.LinkedHashModelFactory;\n+\n+/**\n+ * Collects a stream of Statements into a Model.\n+ * \n+ * @author Bart Hanssens\n+ */\n+public class ModelCollector implements Collector<Statement, Model, Model> {\n+\tprivate ModelFactory factory;\n+\n+\t/**\n+\t * Constructor\n+\t */\n+\tpublic ModelCollector() {\n+\t\tthis.factory = new LinkedHashModelFactory();\n+\t}\n+\n+\t/**\n+\t * Constructor\n+\t * \n+\t * @param factory\n+\t */\n+\tpublic ModelCollector(ModelFactory factory) {\n+\t\tthis.factory = factory;\n+\t}\n+\n+\t/**\n+\t * Convenience method to obtain a ModelCollector.\n+\t * \n+\t * @return a ModelCollector\n+\t */\n+\tpublic static ModelCollector toModel() {\n+\t\treturn new ModelCollector();\n+\t}\n+\n+\t@Override\n+\tpublic Supplier<Model> supplier() {\n+\t\treturn () -> factory.createEmptyModel();\n+\t}\n+\n+\t@Override\n+\tpublic BiConsumer<Model, Statement> accumulator() {\n+\t\treturn (m, s) -> {\n+\t\t\tsynchronized (m) {\n+\t\t\t\tm.add(s);\n+\t\t\t}\n+\t\t};\n+\t}\n+\n+\t@Override\n+\tpublic BinaryOperator<Model> combiner() {\n+\t\treturn (m1, m2) -> {\n+\t\t\tm1.addAll(m2);\n+\t\t\treturn m1;\n+\t\t};\n+\t}\n+\n+\t@Override\n+\tpublic Function<Model, Model> finisher() {\n+\t\treturn Function.identity();\n+\t}\n+\n+\t@Override\n+\tpublic Set<Characteristics> characteristics() {\n+\t\tSet<Characteristics> characteristics = new HashSet<>();\n+\t\tcharacteristics.add(Characteristics.CONCURRENT);\n+\t\tcharacteristics.add(Characteristics.IDENTITY_FINISH);\n+\t\tcharacteristics.add(Characteristics.UNORDERED);\n+\t\treturn characteristics;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUxNDE2NQ=="}, "originalCommit": {"oid": "6afcaaffbb25e99ef3f539fdefc3b87a512995ed"}, "originalPosition": 90}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1614, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}