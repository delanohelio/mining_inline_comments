{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwMDg1MzYy", "number": 2243, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxOTo1NTo0MlrOD_DpXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMjo0MToyNlrOD_P48w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NDQ2NjIwOnYy", "diffSide": "RIGHT", "path": "core/sparqlbuilder/src/main/java/org/eclipse/rdf4j/sparqlbuilder/constraint/Operation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxOTo1NTo0MlrOGZiUOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxMjozMzo0M1rOGZpLaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQyOTgxOA==", "bodyText": "Using toString() and then .equals() is typically very slow. Try to use the enums instead: ConnectiveOperator.AND", "url": "https://github.com/eclipse/rdf4j/pull/2243#discussion_r429429818", "createdAt": "2020-05-22T19:55:42Z", "author": {"login": "hmottestad"}, "path": "core/sparqlbuilder/src/main/java/org/eclipse/rdf4j/sparqlbuilder/constraint/Operation.java", "diffHunk": "@@ -23,7 +23,9 @@\n \tOperation(SparqlOperator operator, int operandLimit) {\n \t\tsuper(operator);\n \t\tthis.operandLimit = operandLimit;\n-//\t\tparenthesize();\n+\t\tif (operator.toString().equals(\"AND\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1efe9a1d6accba6db4d94bb80bf111ca7f6aace"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU0MjI1MQ==", "bodyText": "Thanks for the suggestion! Done the necessary changes.", "url": "https://github.com/eclipse/rdf4j/pull/2243#discussion_r429542251", "createdAt": "2020-05-23T12:33:43Z", "author": {"login": "abhishekag03"}, "path": "core/sparqlbuilder/src/main/java/org/eclipse/rdf4j/sparqlbuilder/constraint/Operation.java", "diffHunk": "@@ -23,7 +23,9 @@\n \tOperation(SparqlOperator operator, int operandLimit) {\n \t\tsuper(operator);\n \t\tthis.operandLimit = operandLimit;\n-//\t\tparenthesize();\n+\t\tif (operator.toString().equals(\"AND\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQyOTgxOA=="}, "originalCommit": {"oid": "b1efe9a1d6accba6db4d94bb80bf111ca7f6aace"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NDQ3NTc0OnYy", "diffSide": "RIGHT", "path": "core/sparqlbuilder/src/test/java/org/eclipse/rdf4j/sparqlbuilder/examples/sparql11spec/Section6Test.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQyMDowMTozNFrOGZiacw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQyMDoxOTowN1rOGZiwkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQzMTQxMQ==", "bodyText": "I don't see how this tests actually checks if the changes you've made are correct. The test still passes even if I comment out your change.", "url": "https://github.com/eclipse/rdf4j/pull/2243#discussion_r429431411", "createdAt": "2020-05-22T20:01:34Z", "author": {"login": "hmottestad"}, "path": "core/sparqlbuilder/src/test/java/org/eclipse/rdf4j/sparqlbuilder/examples/sparql11spec/Section6Test.java", "diffHunk": "@@ -61,4 +61,19 @@ public void example_6_3() {\n \t\t\t\t\t\tGraphPatterns.and(x.has(foaf.iri(\"homepage\"), hpage)).optional());\n \t\tp();\n \t}\n+\n+\t@Test\n+\tpublic void example_6_4() {\n+\t\tPrefix dc = SparqlBuilder.prefix(\"dc\", iri(DC_NS)), ns = SparqlBuilder.prefix(\"ns\", iri(EXAMPLE_ORG_NS));\n+\t\tVariable title = SparqlBuilder.var(\"title\"), price = SparqlBuilder.var(\"price\"), x = SparqlBuilder.var(\"x\");\n+\n+\t\tGraphPatternNotTriples pricePattern = GraphPatterns.and(x.has(ns.iri(\"price\"), price))\n+\t\t\t\t.filter(Expressions.or(Expressions.lt(price, 20),\n+\t\t\t\t\t\tExpressions.and(Expressions.lt(price, 50), Expressions.gt(price, 30))))\n+\t\t\t\t.optional();\n+\n+\t\tquery.prefix(dc, ns).select(title, price).where(x.has(dc.iri(\"title\"), title), pricePattern);\n+\t\tp();\n+\t}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1efe9a1d6accba6db4d94bb80bf111ca7f6aace"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQzMjY1NQ==", "bodyText": "Btw. I'm sorry the test code in general here is so poor. p() isn't particularly useful here (for those reading this comment it actually means System.out.println(query) ), and all the tests are stateful, even though there is no need to keep state between tests.", "url": "https://github.com/eclipse/rdf4j/pull/2243#discussion_r429432655", "createdAt": "2020-05-22T20:05:20Z", "author": {"login": "hmottestad"}, "path": "core/sparqlbuilder/src/test/java/org/eclipse/rdf4j/sparqlbuilder/examples/sparql11spec/Section6Test.java", "diffHunk": "@@ -61,4 +61,19 @@ public void example_6_3() {\n \t\t\t\t\t\tGraphPatterns.and(x.has(foaf.iri(\"homepage\"), hpage)).optional());\n \t\tp();\n \t}\n+\n+\t@Test\n+\tpublic void example_6_4() {\n+\t\tPrefix dc = SparqlBuilder.prefix(\"dc\", iri(DC_NS)), ns = SparqlBuilder.prefix(\"ns\", iri(EXAMPLE_ORG_NS));\n+\t\tVariable title = SparqlBuilder.var(\"title\"), price = SparqlBuilder.var(\"price\"), x = SparqlBuilder.var(\"x\");\n+\n+\t\tGraphPatternNotTriples pricePattern = GraphPatterns.and(x.has(ns.iri(\"price\"), price))\n+\t\t\t\t.filter(Expressions.or(Expressions.lt(price, 20),\n+\t\t\t\t\t\tExpressions.and(Expressions.lt(price, 50), Expressions.gt(price, 30))))\n+\t\t\t\t.optional();\n+\n+\t\tquery.prefix(dc, ns).select(title, price).where(x.has(dc.iri(\"title\"), title), pricePattern);\n+\t\tp();\n+\t}\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQzMTQxMQ=="}, "originalCommit": {"oid": "b1efe9a1d6accba6db4d94bb80bf111ca7f6aace"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQzNDUwNw==", "bodyText": "Second btw. I've take another look at the tests within the examples package and realized that none of these test anything, ie. there are no asserts anywhere. When I remove these \"tests\" I end up with a 13% test coverage. This is very unfortunate, but in now way your fault @abhishekag03", "url": "https://github.com/eclipse/rdf4j/pull/2243#discussion_r429434507", "createdAt": "2020-05-22T20:10:38Z", "author": {"login": "hmottestad"}, "path": "core/sparqlbuilder/src/test/java/org/eclipse/rdf4j/sparqlbuilder/examples/sparql11spec/Section6Test.java", "diffHunk": "@@ -61,4 +61,19 @@ public void example_6_3() {\n \t\t\t\t\t\tGraphPatterns.and(x.has(foaf.iri(\"homepage\"), hpage)).optional());\n \t\tp();\n \t}\n+\n+\t@Test\n+\tpublic void example_6_4() {\n+\t\tPrefix dc = SparqlBuilder.prefix(\"dc\", iri(DC_NS)), ns = SparqlBuilder.prefix(\"ns\", iri(EXAMPLE_ORG_NS));\n+\t\tVariable title = SparqlBuilder.var(\"title\"), price = SparqlBuilder.var(\"price\"), x = SparqlBuilder.var(\"x\");\n+\n+\t\tGraphPatternNotTriples pricePattern = GraphPatterns.and(x.has(ns.iri(\"price\"), price))\n+\t\t\t\t.filter(Expressions.or(Expressions.lt(price, 20),\n+\t\t\t\t\t\tExpressions.and(Expressions.lt(price, 50), Expressions.gt(price, 30))))\n+\t\t\t\t.optional();\n+\n+\t\tquery.prefix(dc, ns).select(title, price).where(x.has(dc.iri(\"title\"), title), pricePattern);\n+\t\tp();\n+\t}\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQzMTQxMQ=="}, "originalCommit": {"oid": "b1efe9a1d6accba6db4d94bb80bf111ca7f6aace"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQzNzA3NA==", "bodyText": "I propose this assert:\nAssert.assertThat(query.getQueryString(), CoreMatchers.containsString(\"( ?price < 50 && ?price > 30 )\"));", "url": "https://github.com/eclipse/rdf4j/pull/2243#discussion_r429437074", "createdAt": "2020-05-22T20:19:07Z", "author": {"login": "hmottestad"}, "path": "core/sparqlbuilder/src/test/java/org/eclipse/rdf4j/sparqlbuilder/examples/sparql11spec/Section6Test.java", "diffHunk": "@@ -61,4 +61,19 @@ public void example_6_3() {\n \t\t\t\t\t\tGraphPatterns.and(x.has(foaf.iri(\"homepage\"), hpage)).optional());\n \t\tp();\n \t}\n+\n+\t@Test\n+\tpublic void example_6_4() {\n+\t\tPrefix dc = SparqlBuilder.prefix(\"dc\", iri(DC_NS)), ns = SparqlBuilder.prefix(\"ns\", iri(EXAMPLE_ORG_NS));\n+\t\tVariable title = SparqlBuilder.var(\"title\"), price = SparqlBuilder.var(\"price\"), x = SparqlBuilder.var(\"x\");\n+\n+\t\tGraphPatternNotTriples pricePattern = GraphPatterns.and(x.has(ns.iri(\"price\"), price))\n+\t\t\t\t.filter(Expressions.or(Expressions.lt(price, 20),\n+\t\t\t\t\t\tExpressions.and(Expressions.lt(price, 50), Expressions.gt(price, 30))))\n+\t\t\t\t.optional();\n+\n+\t\tquery.prefix(dc, ns).select(title, price).where(x.has(dc.iri(\"title\"), title), pricePattern);\n+\t\tp();\n+\t}\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQzMTQxMQ=="}, "originalCommit": {"oid": "b1efe9a1d6accba6db4d94bb80bf111ca7f6aace"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTI0NjYwOnYy", "diffSide": "RIGHT", "path": "core/sparqlbuilder/src/main/java/org/eclipse/rdf4j/sparqlbuilder/constraint/Operation.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxMjo1ODo0MlrOGZpShg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxNzo1Nzo1OVrOGZqnBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU0NDA3MA==", "bodyText": "We noticed that the Paranthesize function needs to be called for the OR operator as well. This is because for queries which have an OR inside an AND, the query output is not how it should be. It does not take into consideration that the OR part must be evaluated first.\nHowever, calling the Paranthesize function as we have done here is giving us extra parenthesis inside the filter query whenever we have boolean binary operators (AND/OR). Is that fine? If not, kindly help us with how we should remove it. Although considering it evaluation wise, it will always give the correct output. Just that the brackets there are not essential.", "url": "https://github.com/eclipse/rdf4j/pull/2243#discussion_r429544070", "createdAt": "2020-05-23T12:58:42Z", "author": {"login": "abhishekag03"}, "path": "core/sparqlbuilder/src/main/java/org/eclipse/rdf4j/sparqlbuilder/constraint/Operation.java", "diffHunk": "@@ -23,7 +23,7 @@\n \tOperation(SparqlOperator operator, int operandLimit) {\n \t\tsuper(operator);\n \t\tthis.operandLimit = operandLimit;\n-\t\tif (operator == ConnectiveOperator.AND) {\n+\t\tif (operator == ConnectiveOperator.AND || operator == ConnectiveOperator.OR) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c576d190c1f4c4ca12c5871f39f6d3807268ecb0"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU1MTA4OA==", "bodyText": "I'm ok with the extra parenthesis. I think it would be hard to fix and it's not semantically incorrect, just superfluous.", "url": "https://github.com/eclipse/rdf4j/pull/2243#discussion_r429551088", "createdAt": "2020-05-23T14:32:11Z", "author": {"login": "hmottestad"}, "path": "core/sparqlbuilder/src/main/java/org/eclipse/rdf4j/sparqlbuilder/constraint/Operation.java", "diffHunk": "@@ -23,7 +23,7 @@\n \tOperation(SparqlOperator operator, int operandLimit) {\n \t\tsuper(operator);\n \t\tthis.operandLimit = operandLimit;\n-\t\tif (operator == ConnectiveOperator.AND) {\n+\t\tif (operator == ConnectiveOperator.AND || operator == ConnectiveOperator.OR) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU0NDA3MA=="}, "originalCommit": {"oid": "c576d190c1f4c4ca12c5871f39f6d3807268ecb0"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU1MTI4Mw==", "bodyText": "I am wondering if all connective operators need parenthesises around them? Do you know @abhishekag03 ?", "url": "https://github.com/eclipse/rdf4j/pull/2243#discussion_r429551283", "createdAt": "2020-05-23T14:34:01Z", "author": {"login": "hmottestad"}, "path": "core/sparqlbuilder/src/main/java/org/eclipse/rdf4j/sparqlbuilder/constraint/Operation.java", "diffHunk": "@@ -23,7 +23,7 @@\n \tOperation(SparqlOperator operator, int operandLimit) {\n \t\tsuper(operator);\n \t\tthis.operandLimit = operandLimit;\n-\t\tif (operator == ConnectiveOperator.AND) {\n+\t\tif (operator == ConnectiveOperator.AND || operator == ConnectiveOperator.OR) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU0NDA3MA=="}, "originalCommit": {"oid": "c576d190c1f4c4ca12c5871f39f6d3807268ecb0"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU1NjQwNw==", "bodyText": "Yeah, you're actually right! We need to include it for all Connective Operators. We will add the code for the same along with test cases for each operator. I'm just wondering if this should be done in this issue itself or shall we open a new issue and commit the changes there? Or can the issue heading be changed? Please advise what shall be done?", "url": "https://github.com/eclipse/rdf4j/pull/2243#discussion_r429556407", "createdAt": "2020-05-23T15:41:57Z", "author": {"login": "abhishekag03"}, "path": "core/sparqlbuilder/src/main/java/org/eclipse/rdf4j/sparqlbuilder/constraint/Operation.java", "diffHunk": "@@ -23,7 +23,7 @@\n \tOperation(SparqlOperator operator, int operandLimit) {\n \t\tsuper(operator);\n \t\tthis.operandLimit = operandLimit;\n-\t\tif (operator == ConnectiveOperator.AND) {\n+\t\tif (operator == ConnectiveOperator.AND || operator == ConnectiveOperator.OR) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU0NDA3MA=="}, "originalCommit": {"oid": "c576d190c1f4c4ca12c5871f39f6d3807268ecb0"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU1NzIxNw==", "bodyText": "It\u2019ll be easier to do it in this PR and just update the title and description of both the issue and this PR.", "url": "https://github.com/eclipse/rdf4j/pull/2243#discussion_r429557217", "createdAt": "2020-05-23T15:52:40Z", "author": {"login": "hmottestad"}, "path": "core/sparqlbuilder/src/main/java/org/eclipse/rdf4j/sparqlbuilder/constraint/Operation.java", "diffHunk": "@@ -23,7 +23,7 @@\n \tOperation(SparqlOperator operator, int operandLimit) {\n \t\tsuper(operator);\n \t\tthis.operandLimit = operandLimit;\n-\t\tif (operator == ConnectiveOperator.AND) {\n+\t\tif (operator == ConnectiveOperator.AND || operator == ConnectiveOperator.OR) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU0NDA3MA=="}, "originalCommit": {"oid": "c576d190c1f4c4ca12c5871f39f6d3807268ecb0"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU2NTcwMA==", "bodyText": "Sure, we have done the same and pushed the code. Since the check had to be done for all connective operators, we have now used instanceOf instead of equality check. Kindly have a look and let us know if something needs to be changed.", "url": "https://github.com/eclipse/rdf4j/pull/2243#discussion_r429565700", "createdAt": "2020-05-23T17:57:59Z", "author": {"login": "abhishekag03"}, "path": "core/sparqlbuilder/src/main/java/org/eclipse/rdf4j/sparqlbuilder/constraint/Operation.java", "diffHunk": "@@ -23,7 +23,7 @@\n \tOperation(SparqlOperator operator, int operandLimit) {\n \t\tsuper(operator);\n \t\tthis.operandLimit = operandLimit;\n-\t\tif (operator == ConnectiveOperator.AND) {\n+\t\tif (operator == ConnectiveOperator.AND || operator == ConnectiveOperator.OR) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU0NDA3MA=="}, "originalCommit": {"oid": "c576d190c1f4c4ca12c5871f39f6d3807268ecb0"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTQxMTAzOnYy", "diffSide": "RIGHT", "path": "core/sparqlbuilder/src/test/java/org/eclipse/rdf4j/sparqlbuilder/examples/sparql11spec/Section6Test.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxODowODoxMlrOGZqpoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QyMjo1ODo0NVrOGZrwew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU2NjM2OA==", "bodyText": "20-2*5 == 20-(2*5)\nCould you instead test for (20-2)*5 since this is different from 20-2*5?", "url": "https://github.com/eclipse/rdf4j/pull/2243#discussion_r429566368", "createdAt": "2020-05-23T18:08:12Z", "author": {"login": "hmottestad"}, "path": "core/sparqlbuilder/src/test/java/org/eclipse/rdf4j/sparqlbuilder/examples/sparql11spec/Section6Test.java", "diffHunk": "@@ -61,4 +64,65 @@ public void example_6_3() {\n \t\t\t\t\t\tGraphPatterns.and(x.has(foaf.iri(\"homepage\"), hpage)).optional());\n \t\tp();\n \t}\n+\n+\t@Test\n+\tpublic void example_6_4() {\n+\t\tPrefix dc = SparqlBuilder.prefix(\"dc\", iri(DC_NS)), ns = SparqlBuilder.prefix(\"ns\", iri(EXAMPLE_ORG_NS));\n+\t\tVariable title = SparqlBuilder.var(\"title\"), price = SparqlBuilder.var(\"price\"), x = SparqlBuilder.var(\"x\");\n+\n+\t\tGraphPatternNotTriples pricePattern = GraphPatterns.and(x.has(ns.iri(\"price\"), price))\n+\t\t\t\t.filter(Expressions.or(Expressions.lt(price, 20),\n+\t\t\t\t\t\tExpressions.and(Expressions.lt(price, 50), Expressions.gt(price, 30))))\n+\t\t\t\t.optional();\n+\n+\t\tquery.prefix(dc, ns).select(title, price).where(x.has(dc.iri(\"title\"), title), pricePattern);\n+\t\tAssert.assertThat(query.getQueryString(), CoreMatchers.containsString(\"( ?price < 50 && ?price > 30 )\"));\n+\t}\n+\n+\t@Test\n+\tpublic void example_6_5() {\n+\t\tPrefix dc = SparqlBuilder.prefix(\"dc\", iri(DC_NS)), ns = SparqlBuilder.prefix(\"ns\", iri(EXAMPLE_ORG_NS));\n+\t\tVariable title = SparqlBuilder.var(\"title\"), price = SparqlBuilder.var(\"price\"), x = SparqlBuilder.var(\"x\");\n+\n+\t\tGraphPatternNotTriples pricePattern = GraphPatterns.and(x.has(ns.iri(\"price\"), price))\n+\t\t\t\t.filter(Expressions.or(Expressions.lt(price, 20),\n+\t\t\t\t\t\tExpressions.and(Expressions.gt(price, 50),\n+\t\t\t\t\t\t\t\tExpressions.or(Expressions.gt(price, 60), Expressions.lt(price, 70)))))\n+\t\t\t\t.optional();\n+\n+\t\tquery.prefix(dc, ns).select(title, price).where(x.has(dc.iri(\"title\"), title), pricePattern);\n+\t\tAssert.assertThat(query.getQueryString(), CoreMatchers.containsString(\"( ?price < 20 || ( ?price > 50 &&\" +\n+\t\t\t\t\" ( ?price > 60 || ?price < 70 ) ) )\"));\n+\t}\n+\n+\t@Test\n+\tpublic void example_6_6() {\n+\t\tPrefix dc = SparqlBuilder.prefix(\"dc\", iri(DC_NS)), ns = SparqlBuilder.prefix(\"ns\", iri(EXAMPLE_ORG_NS));\n+\t\tVariable title = SparqlBuilder.var(\"title\"), price = SparqlBuilder.var(\"price\"), x = SparqlBuilder.var(\"x\");\n+\n+\t\tGraphPatternNotTriples pricePattern = GraphPatterns.and(x.has(ns.iri(\"price\"), price))\n+\t\t\t\t.filter(Expressions.or(Expressions.lt(price, Expressions.subtract(Rdf.literalOf(20),\n+\t\t\t\t\t\tExpressions.multiply(Rdf.literalOf(2), Rdf.literalOf(5)))),\n+\t\t\t\t\t\tExpressions.lt(price, 50)))\n+\t\t\t\t.optional();\n+\n+\t\tquery.prefix(dc, ns).select(title, price).where(x.has(dc.iri(\"title\"), title), pricePattern);\n+\t\tAssert.assertThat(query.getQueryString(), CoreMatchers.containsString(\"( 20 - ( 2 * 5 ) )\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82d5edcbc58df12d937fb80270b8e9d5ed02c558"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU2ODA5MQ==", "bodyText": "Sure. Added the same and pushed it. Also, shall we add all these test cases to the file Section6Test.java only or should there be a separate file for these test cases? I couldn't understand how the Test cases are divided into the various SectionTest files.", "url": "https://github.com/eclipse/rdf4j/pull/2243#discussion_r429568091", "createdAt": "2020-05-23T18:31:31Z", "author": {"login": "abhishekag03"}, "path": "core/sparqlbuilder/src/test/java/org/eclipse/rdf4j/sparqlbuilder/examples/sparql11spec/Section6Test.java", "diffHunk": "@@ -61,4 +64,65 @@ public void example_6_3() {\n \t\t\t\t\t\tGraphPatterns.and(x.has(foaf.iri(\"homepage\"), hpage)).optional());\n \t\tp();\n \t}\n+\n+\t@Test\n+\tpublic void example_6_4() {\n+\t\tPrefix dc = SparqlBuilder.prefix(\"dc\", iri(DC_NS)), ns = SparqlBuilder.prefix(\"ns\", iri(EXAMPLE_ORG_NS));\n+\t\tVariable title = SparqlBuilder.var(\"title\"), price = SparqlBuilder.var(\"price\"), x = SparqlBuilder.var(\"x\");\n+\n+\t\tGraphPatternNotTriples pricePattern = GraphPatterns.and(x.has(ns.iri(\"price\"), price))\n+\t\t\t\t.filter(Expressions.or(Expressions.lt(price, 20),\n+\t\t\t\t\t\tExpressions.and(Expressions.lt(price, 50), Expressions.gt(price, 30))))\n+\t\t\t\t.optional();\n+\n+\t\tquery.prefix(dc, ns).select(title, price).where(x.has(dc.iri(\"title\"), title), pricePattern);\n+\t\tAssert.assertThat(query.getQueryString(), CoreMatchers.containsString(\"( ?price < 50 && ?price > 30 )\"));\n+\t}\n+\n+\t@Test\n+\tpublic void example_6_5() {\n+\t\tPrefix dc = SparqlBuilder.prefix(\"dc\", iri(DC_NS)), ns = SparqlBuilder.prefix(\"ns\", iri(EXAMPLE_ORG_NS));\n+\t\tVariable title = SparqlBuilder.var(\"title\"), price = SparqlBuilder.var(\"price\"), x = SparqlBuilder.var(\"x\");\n+\n+\t\tGraphPatternNotTriples pricePattern = GraphPatterns.and(x.has(ns.iri(\"price\"), price))\n+\t\t\t\t.filter(Expressions.or(Expressions.lt(price, 20),\n+\t\t\t\t\t\tExpressions.and(Expressions.gt(price, 50),\n+\t\t\t\t\t\t\t\tExpressions.or(Expressions.gt(price, 60), Expressions.lt(price, 70)))))\n+\t\t\t\t.optional();\n+\n+\t\tquery.prefix(dc, ns).select(title, price).where(x.has(dc.iri(\"title\"), title), pricePattern);\n+\t\tAssert.assertThat(query.getQueryString(), CoreMatchers.containsString(\"( ?price < 20 || ( ?price > 50 &&\" +\n+\t\t\t\t\" ( ?price > 60 || ?price < 70 ) ) )\"));\n+\t}\n+\n+\t@Test\n+\tpublic void example_6_6() {\n+\t\tPrefix dc = SparqlBuilder.prefix(\"dc\", iri(DC_NS)), ns = SparqlBuilder.prefix(\"ns\", iri(EXAMPLE_ORG_NS));\n+\t\tVariable title = SparqlBuilder.var(\"title\"), price = SparqlBuilder.var(\"price\"), x = SparqlBuilder.var(\"x\");\n+\n+\t\tGraphPatternNotTriples pricePattern = GraphPatterns.and(x.has(ns.iri(\"price\"), price))\n+\t\t\t\t.filter(Expressions.or(Expressions.lt(price, Expressions.subtract(Rdf.literalOf(20),\n+\t\t\t\t\t\tExpressions.multiply(Rdf.literalOf(2), Rdf.literalOf(5)))),\n+\t\t\t\t\t\tExpressions.lt(price, 50)))\n+\t\t\t\t.optional();\n+\n+\t\tquery.prefix(dc, ns).select(title, price).where(x.has(dc.iri(\"title\"), title), pricePattern);\n+\t\tAssert.assertThat(query.getQueryString(), CoreMatchers.containsString(\"( 20 - ( 2 * 5 ) )\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU2NjM2OA=="}, "originalCommit": {"oid": "82d5edcbc58df12d937fb80270b8e9d5ed02c558"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU2ODMxNg==", "bodyText": "As I stated earlier. There are actually almost no tests for the SparqlBuilder (ie. no tests will fail if I change random things in the code). I think adding the tests like you have done here should be fine. But @jeenbroekstra should take a look to see if he agrees. Jeen is the project manager for RDF4J.", "url": "https://github.com/eclipse/rdf4j/pull/2243#discussion_r429568316", "createdAt": "2020-05-23T18:34:48Z", "author": {"login": "hmottestad"}, "path": "core/sparqlbuilder/src/test/java/org/eclipse/rdf4j/sparqlbuilder/examples/sparql11spec/Section6Test.java", "diffHunk": "@@ -61,4 +64,65 @@ public void example_6_3() {\n \t\t\t\t\t\tGraphPatterns.and(x.has(foaf.iri(\"homepage\"), hpage)).optional());\n \t\tp();\n \t}\n+\n+\t@Test\n+\tpublic void example_6_4() {\n+\t\tPrefix dc = SparqlBuilder.prefix(\"dc\", iri(DC_NS)), ns = SparqlBuilder.prefix(\"ns\", iri(EXAMPLE_ORG_NS));\n+\t\tVariable title = SparqlBuilder.var(\"title\"), price = SparqlBuilder.var(\"price\"), x = SparqlBuilder.var(\"x\");\n+\n+\t\tGraphPatternNotTriples pricePattern = GraphPatterns.and(x.has(ns.iri(\"price\"), price))\n+\t\t\t\t.filter(Expressions.or(Expressions.lt(price, 20),\n+\t\t\t\t\t\tExpressions.and(Expressions.lt(price, 50), Expressions.gt(price, 30))))\n+\t\t\t\t.optional();\n+\n+\t\tquery.prefix(dc, ns).select(title, price).where(x.has(dc.iri(\"title\"), title), pricePattern);\n+\t\tAssert.assertThat(query.getQueryString(), CoreMatchers.containsString(\"( ?price < 50 && ?price > 30 )\"));\n+\t}\n+\n+\t@Test\n+\tpublic void example_6_5() {\n+\t\tPrefix dc = SparqlBuilder.prefix(\"dc\", iri(DC_NS)), ns = SparqlBuilder.prefix(\"ns\", iri(EXAMPLE_ORG_NS));\n+\t\tVariable title = SparqlBuilder.var(\"title\"), price = SparqlBuilder.var(\"price\"), x = SparqlBuilder.var(\"x\");\n+\n+\t\tGraphPatternNotTriples pricePattern = GraphPatterns.and(x.has(ns.iri(\"price\"), price))\n+\t\t\t\t.filter(Expressions.or(Expressions.lt(price, 20),\n+\t\t\t\t\t\tExpressions.and(Expressions.gt(price, 50),\n+\t\t\t\t\t\t\t\tExpressions.or(Expressions.gt(price, 60), Expressions.lt(price, 70)))))\n+\t\t\t\t.optional();\n+\n+\t\tquery.prefix(dc, ns).select(title, price).where(x.has(dc.iri(\"title\"), title), pricePattern);\n+\t\tAssert.assertThat(query.getQueryString(), CoreMatchers.containsString(\"( ?price < 20 || ( ?price > 50 &&\" +\n+\t\t\t\t\" ( ?price > 60 || ?price < 70 ) ) )\"));\n+\t}\n+\n+\t@Test\n+\tpublic void example_6_6() {\n+\t\tPrefix dc = SparqlBuilder.prefix(\"dc\", iri(DC_NS)), ns = SparqlBuilder.prefix(\"ns\", iri(EXAMPLE_ORG_NS));\n+\t\tVariable title = SparqlBuilder.var(\"title\"), price = SparqlBuilder.var(\"price\"), x = SparqlBuilder.var(\"x\");\n+\n+\t\tGraphPatternNotTriples pricePattern = GraphPatterns.and(x.has(ns.iri(\"price\"), price))\n+\t\t\t\t.filter(Expressions.or(Expressions.lt(price, Expressions.subtract(Rdf.literalOf(20),\n+\t\t\t\t\t\tExpressions.multiply(Rdf.literalOf(2), Rdf.literalOf(5)))),\n+\t\t\t\t\t\tExpressions.lt(price, 50)))\n+\t\t\t\t.optional();\n+\n+\t\tquery.prefix(dc, ns).select(title, price).where(x.has(dc.iri(\"title\"), title), pricePattern);\n+\t\tAssert.assertThat(query.getQueryString(), CoreMatchers.containsString(\"( 20 - ( 2 * 5 ) )\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU2NjM2OA=="}, "originalCommit": {"oid": "82d5edcbc58df12d937fb80270b8e9d5ed02c558"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU2ODM3Ng==", "bodyText": "Also, thank you @abhishekag03!", "url": "https://github.com/eclipse/rdf4j/pull/2243#discussion_r429568376", "createdAt": "2020-05-23T18:35:33Z", "author": {"login": "hmottestad"}, "path": "core/sparqlbuilder/src/test/java/org/eclipse/rdf4j/sparqlbuilder/examples/sparql11spec/Section6Test.java", "diffHunk": "@@ -61,4 +64,65 @@ public void example_6_3() {\n \t\t\t\t\t\tGraphPatterns.and(x.has(foaf.iri(\"homepage\"), hpage)).optional());\n \t\tp();\n \t}\n+\n+\t@Test\n+\tpublic void example_6_4() {\n+\t\tPrefix dc = SparqlBuilder.prefix(\"dc\", iri(DC_NS)), ns = SparqlBuilder.prefix(\"ns\", iri(EXAMPLE_ORG_NS));\n+\t\tVariable title = SparqlBuilder.var(\"title\"), price = SparqlBuilder.var(\"price\"), x = SparqlBuilder.var(\"x\");\n+\n+\t\tGraphPatternNotTriples pricePattern = GraphPatterns.and(x.has(ns.iri(\"price\"), price))\n+\t\t\t\t.filter(Expressions.or(Expressions.lt(price, 20),\n+\t\t\t\t\t\tExpressions.and(Expressions.lt(price, 50), Expressions.gt(price, 30))))\n+\t\t\t\t.optional();\n+\n+\t\tquery.prefix(dc, ns).select(title, price).where(x.has(dc.iri(\"title\"), title), pricePattern);\n+\t\tAssert.assertThat(query.getQueryString(), CoreMatchers.containsString(\"( ?price < 50 && ?price > 30 )\"));\n+\t}\n+\n+\t@Test\n+\tpublic void example_6_5() {\n+\t\tPrefix dc = SparqlBuilder.prefix(\"dc\", iri(DC_NS)), ns = SparqlBuilder.prefix(\"ns\", iri(EXAMPLE_ORG_NS));\n+\t\tVariable title = SparqlBuilder.var(\"title\"), price = SparqlBuilder.var(\"price\"), x = SparqlBuilder.var(\"x\");\n+\n+\t\tGraphPatternNotTriples pricePattern = GraphPatterns.and(x.has(ns.iri(\"price\"), price))\n+\t\t\t\t.filter(Expressions.or(Expressions.lt(price, 20),\n+\t\t\t\t\t\tExpressions.and(Expressions.gt(price, 50),\n+\t\t\t\t\t\t\t\tExpressions.or(Expressions.gt(price, 60), Expressions.lt(price, 70)))))\n+\t\t\t\t.optional();\n+\n+\t\tquery.prefix(dc, ns).select(title, price).where(x.has(dc.iri(\"title\"), title), pricePattern);\n+\t\tAssert.assertThat(query.getQueryString(), CoreMatchers.containsString(\"( ?price < 20 || ( ?price > 50 &&\" +\n+\t\t\t\t\" ( ?price > 60 || ?price < 70 ) ) )\"));\n+\t}\n+\n+\t@Test\n+\tpublic void example_6_6() {\n+\t\tPrefix dc = SparqlBuilder.prefix(\"dc\", iri(DC_NS)), ns = SparqlBuilder.prefix(\"ns\", iri(EXAMPLE_ORG_NS));\n+\t\tVariable title = SparqlBuilder.var(\"title\"), price = SparqlBuilder.var(\"price\"), x = SparqlBuilder.var(\"x\");\n+\n+\t\tGraphPatternNotTriples pricePattern = GraphPatterns.and(x.has(ns.iri(\"price\"), price))\n+\t\t\t\t.filter(Expressions.or(Expressions.lt(price, Expressions.subtract(Rdf.literalOf(20),\n+\t\t\t\t\t\tExpressions.multiply(Rdf.literalOf(2), Rdf.literalOf(5)))),\n+\t\t\t\t\t\tExpressions.lt(price, 50)))\n+\t\t\t\t.optional();\n+\n+\t\tquery.prefix(dc, ns).select(title, price).where(x.has(dc.iri(\"title\"), title), pricePattern);\n+\t\tAssert.assertThat(query.getQueryString(), CoreMatchers.containsString(\"( 20 - ( 2 * 5 ) )\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU2NjM2OA=="}, "originalCommit": {"oid": "82d5edcbc58df12d937fb80270b8e9d5ed02c558"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU2ODY4OA==", "bodyText": "Thank you for the valuable suggestions and prompt responses @hmottestad.\nWill wait for @jeenbroekstra to have a look at the changes made so that this issue can be closed.", "url": "https://github.com/eclipse/rdf4j/pull/2243#discussion_r429568688", "createdAt": "2020-05-23T18:39:49Z", "author": {"login": "abhishekag03"}, "path": "core/sparqlbuilder/src/test/java/org/eclipse/rdf4j/sparqlbuilder/examples/sparql11spec/Section6Test.java", "diffHunk": "@@ -61,4 +64,65 @@ public void example_6_3() {\n \t\t\t\t\t\tGraphPatterns.and(x.has(foaf.iri(\"homepage\"), hpage)).optional());\n \t\tp();\n \t}\n+\n+\t@Test\n+\tpublic void example_6_4() {\n+\t\tPrefix dc = SparqlBuilder.prefix(\"dc\", iri(DC_NS)), ns = SparqlBuilder.prefix(\"ns\", iri(EXAMPLE_ORG_NS));\n+\t\tVariable title = SparqlBuilder.var(\"title\"), price = SparqlBuilder.var(\"price\"), x = SparqlBuilder.var(\"x\");\n+\n+\t\tGraphPatternNotTriples pricePattern = GraphPatterns.and(x.has(ns.iri(\"price\"), price))\n+\t\t\t\t.filter(Expressions.or(Expressions.lt(price, 20),\n+\t\t\t\t\t\tExpressions.and(Expressions.lt(price, 50), Expressions.gt(price, 30))))\n+\t\t\t\t.optional();\n+\n+\t\tquery.prefix(dc, ns).select(title, price).where(x.has(dc.iri(\"title\"), title), pricePattern);\n+\t\tAssert.assertThat(query.getQueryString(), CoreMatchers.containsString(\"( ?price < 50 && ?price > 30 )\"));\n+\t}\n+\n+\t@Test\n+\tpublic void example_6_5() {\n+\t\tPrefix dc = SparqlBuilder.prefix(\"dc\", iri(DC_NS)), ns = SparqlBuilder.prefix(\"ns\", iri(EXAMPLE_ORG_NS));\n+\t\tVariable title = SparqlBuilder.var(\"title\"), price = SparqlBuilder.var(\"price\"), x = SparqlBuilder.var(\"x\");\n+\n+\t\tGraphPatternNotTriples pricePattern = GraphPatterns.and(x.has(ns.iri(\"price\"), price))\n+\t\t\t\t.filter(Expressions.or(Expressions.lt(price, 20),\n+\t\t\t\t\t\tExpressions.and(Expressions.gt(price, 50),\n+\t\t\t\t\t\t\t\tExpressions.or(Expressions.gt(price, 60), Expressions.lt(price, 70)))))\n+\t\t\t\t.optional();\n+\n+\t\tquery.prefix(dc, ns).select(title, price).where(x.has(dc.iri(\"title\"), title), pricePattern);\n+\t\tAssert.assertThat(query.getQueryString(), CoreMatchers.containsString(\"( ?price < 20 || ( ?price > 50 &&\" +\n+\t\t\t\t\" ( ?price > 60 || ?price < 70 ) ) )\"));\n+\t}\n+\n+\t@Test\n+\tpublic void example_6_6() {\n+\t\tPrefix dc = SparqlBuilder.prefix(\"dc\", iri(DC_NS)), ns = SparqlBuilder.prefix(\"ns\", iri(EXAMPLE_ORG_NS));\n+\t\tVariable title = SparqlBuilder.var(\"title\"), price = SparqlBuilder.var(\"price\"), x = SparqlBuilder.var(\"x\");\n+\n+\t\tGraphPatternNotTriples pricePattern = GraphPatterns.and(x.has(ns.iri(\"price\"), price))\n+\t\t\t\t.filter(Expressions.or(Expressions.lt(price, Expressions.subtract(Rdf.literalOf(20),\n+\t\t\t\t\t\tExpressions.multiply(Rdf.literalOf(2), Rdf.literalOf(5)))),\n+\t\t\t\t\t\tExpressions.lt(price, 50)))\n+\t\t\t\t.optional();\n+\n+\t\tquery.prefix(dc, ns).select(title, price).where(x.has(dc.iri(\"title\"), title), pricePattern);\n+\t\tAssert.assertThat(query.getQueryString(), CoreMatchers.containsString(\"( 20 - ( 2 * 5 ) )\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU2NjM2OA=="}, "originalCommit": {"oid": "82d5edcbc58df12d937fb80270b8e9d5ed02c558"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU4NDUwNw==", "bodyText": "I added a comment on the PR about this, but just to repeat here: I suggest you move these tests out of these SectionTest classes completely, and instead introduce a test class org.eclipse.rdf4j.sparqlbuilder.core.SparqlBuilderTest where you can add these cases. I'd prefer not to edit the code in the package org.eclipse.rdf4j.sparqlbuilder.examples - they are meant to be examples rather than actual code (I don't know if we want to keep them that way, but for now I'd like our actual tests to be separate from it).", "url": "https://github.com/eclipse/rdf4j/pull/2243#discussion_r429584507", "createdAt": "2020-05-23T22:58:45Z", "author": {"login": "jeenbroekstra"}, "path": "core/sparqlbuilder/src/test/java/org/eclipse/rdf4j/sparqlbuilder/examples/sparql11spec/Section6Test.java", "diffHunk": "@@ -61,4 +64,65 @@ public void example_6_3() {\n \t\t\t\t\t\tGraphPatterns.and(x.has(foaf.iri(\"homepage\"), hpage)).optional());\n \t\tp();\n \t}\n+\n+\t@Test\n+\tpublic void example_6_4() {\n+\t\tPrefix dc = SparqlBuilder.prefix(\"dc\", iri(DC_NS)), ns = SparqlBuilder.prefix(\"ns\", iri(EXAMPLE_ORG_NS));\n+\t\tVariable title = SparqlBuilder.var(\"title\"), price = SparqlBuilder.var(\"price\"), x = SparqlBuilder.var(\"x\");\n+\n+\t\tGraphPatternNotTriples pricePattern = GraphPatterns.and(x.has(ns.iri(\"price\"), price))\n+\t\t\t\t.filter(Expressions.or(Expressions.lt(price, 20),\n+\t\t\t\t\t\tExpressions.and(Expressions.lt(price, 50), Expressions.gt(price, 30))))\n+\t\t\t\t.optional();\n+\n+\t\tquery.prefix(dc, ns).select(title, price).where(x.has(dc.iri(\"title\"), title), pricePattern);\n+\t\tAssert.assertThat(query.getQueryString(), CoreMatchers.containsString(\"( ?price < 50 && ?price > 30 )\"));\n+\t}\n+\n+\t@Test\n+\tpublic void example_6_5() {\n+\t\tPrefix dc = SparqlBuilder.prefix(\"dc\", iri(DC_NS)), ns = SparqlBuilder.prefix(\"ns\", iri(EXAMPLE_ORG_NS));\n+\t\tVariable title = SparqlBuilder.var(\"title\"), price = SparqlBuilder.var(\"price\"), x = SparqlBuilder.var(\"x\");\n+\n+\t\tGraphPatternNotTriples pricePattern = GraphPatterns.and(x.has(ns.iri(\"price\"), price))\n+\t\t\t\t.filter(Expressions.or(Expressions.lt(price, 20),\n+\t\t\t\t\t\tExpressions.and(Expressions.gt(price, 50),\n+\t\t\t\t\t\t\t\tExpressions.or(Expressions.gt(price, 60), Expressions.lt(price, 70)))))\n+\t\t\t\t.optional();\n+\n+\t\tquery.prefix(dc, ns).select(title, price).where(x.has(dc.iri(\"title\"), title), pricePattern);\n+\t\tAssert.assertThat(query.getQueryString(), CoreMatchers.containsString(\"( ?price < 20 || ( ?price > 50 &&\" +\n+\t\t\t\t\" ( ?price > 60 || ?price < 70 ) ) )\"));\n+\t}\n+\n+\t@Test\n+\tpublic void example_6_6() {\n+\t\tPrefix dc = SparqlBuilder.prefix(\"dc\", iri(DC_NS)), ns = SparqlBuilder.prefix(\"ns\", iri(EXAMPLE_ORG_NS));\n+\t\tVariable title = SparqlBuilder.var(\"title\"), price = SparqlBuilder.var(\"price\"), x = SparqlBuilder.var(\"x\");\n+\n+\t\tGraphPatternNotTriples pricePattern = GraphPatterns.and(x.has(ns.iri(\"price\"), price))\n+\t\t\t\t.filter(Expressions.or(Expressions.lt(price, Expressions.subtract(Rdf.literalOf(20),\n+\t\t\t\t\t\tExpressions.multiply(Rdf.literalOf(2), Rdf.literalOf(5)))),\n+\t\t\t\t\t\tExpressions.lt(price, 50)))\n+\t\t\t\t.optional();\n+\n+\t\tquery.prefix(dc, ns).select(title, price).where(x.has(dc.iri(\"title\"), title), pricePattern);\n+\t\tAssert.assertThat(query.getQueryString(), CoreMatchers.containsString(\"( 20 - ( 2 * 5 ) )\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU2NjM2OA=="}, "originalCommit": {"oid": "82d5edcbc58df12d937fb80270b8e9d5ed02c558"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjQ2Njk4OnYy", "diffSide": "RIGHT", "path": "core/sparqlbuilder/src/test/java/org/eclipse/rdf4j/sparqlbuilder/core/SparqlBuilderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMjozNjozOFrOGZzYwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMjozNjozOFrOGZzYwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcwOTUwNg==", "bodyText": "Looks like your editor forgot to substitute ${year} with 2020 :)", "url": "https://github.com/eclipse/rdf4j/pull/2243#discussion_r429709506", "createdAt": "2020-05-25T02:36:38Z", "author": {"login": "jeenbroekstra"}, "path": "core/sparqlbuilder/src/test/java/org/eclipse/rdf4j/sparqlbuilder/core/SparqlBuilderTest.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*******************************************************************************\n+ * Copyright (c) ${year} Eclipse RDF4J contributors.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec78d8c2b07c4dd4b63b01bf299a36d1e4a17585"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjQ2ODk4OnYy", "diffSide": "RIGHT", "path": "core/sparqlbuilder/src/test/java/org/eclipse/rdf4j/sparqlbuilder/core/SparqlBuilderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMjozODoyM1rOGZzaAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMjozODoyM1rOGZzaAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcwOTgyNQ==", "bodyText": "We actually prefer using AssertJ rather than Hamcrest, but no big deal, you can leave as-is.", "url": "https://github.com/eclipse/rdf4j/pull/2243#discussion_r429709825", "createdAt": "2020-05-25T02:38:23Z", "author": {"login": "jeenbroekstra"}, "path": "core/sparqlbuilder/src/test/java/org/eclipse/rdf4j/sparqlbuilder/core/SparqlBuilderTest.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*******************************************************************************\n+ * Copyright (c) ${year} Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+\n+package org.eclipse.rdf4j.sparqlbuilder.core;\n+\n+import static org.eclipse.rdf4j.sparqlbuilder.rdf.Rdf.iri;\n+\n+import org.eclipse.rdf4j.model.vocabulary.DC;\n+import org.eclipse.rdf4j.sparqlbuilder.constraint.Expressions;\n+import org.eclipse.rdf4j.sparqlbuilder.core.query.Queries;\n+import org.eclipse.rdf4j.sparqlbuilder.core.query.SelectQuery;\n+import org.eclipse.rdf4j.sparqlbuilder.graphpattern.GraphPatternNotTriples;\n+import org.eclipse.rdf4j.sparqlbuilder.graphpattern.GraphPatterns;\n+import org.eclipse.rdf4j.sparqlbuilder.rdf.Rdf;\n+import org.hamcrest.CoreMatchers;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec78d8c2b07c4dd4b63b01bf299a36d1e4a17585"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjQ3MjE5OnYy", "diffSide": "RIGHT", "path": "core/sparqlbuilder/src/test/java/org/eclipse/rdf4j/sparqlbuilder/core/SparqlBuilderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMjo0MToyNlrOGZzb7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMjo0MToyNlrOGZzb7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcxMDMxOQ==", "bodyText": "Could you remove the System.out.println ? Just so there is less output to scroll through when running these tests.", "url": "https://github.com/eclipse/rdf4j/pull/2243#discussion_r429710319", "createdAt": "2020-05-25T02:41:26Z", "author": {"login": "jeenbroekstra"}, "path": "core/sparqlbuilder/src/test/java/org/eclipse/rdf4j/sparqlbuilder/core/SparqlBuilderTest.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*******************************************************************************\n+ * Copyright (c) ${year} Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+\n+package org.eclipse.rdf4j.sparqlbuilder.core;\n+\n+import static org.eclipse.rdf4j.sparqlbuilder.rdf.Rdf.iri;\n+\n+import org.eclipse.rdf4j.model.vocabulary.DC;\n+import org.eclipse.rdf4j.sparqlbuilder.constraint.Expressions;\n+import org.eclipse.rdf4j.sparqlbuilder.core.query.Queries;\n+import org.eclipse.rdf4j.sparqlbuilder.core.query.SelectQuery;\n+import org.eclipse.rdf4j.sparqlbuilder.graphpattern.GraphPatternNotTriples;\n+import org.eclipse.rdf4j.sparqlbuilder.graphpattern.GraphPatterns;\n+import org.eclipse.rdf4j.sparqlbuilder.rdf.Rdf;\n+import org.hamcrest.CoreMatchers;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * Tests for precedence order of all operators in SPARQL builder Queries.\n+ */\n+public class SparqlBuilderTest {\n+\n+\tprotected SelectQuery query;\n+\tprotected static final String EXAMPLE_ORG_NS = \"https://example.org/ns#\";\n+\tprotected static final String DC_NS = DC.NAMESPACE;\n+\n+\t@Before\n+\tpublic void before() {\n+\t\tquery = Queries.SELECT();\n+\t}\n+\n+\t@Test\n+\tpublic void testLogicalOperatorPrecedence1() {\n+\t\tPrefix dc = SparqlBuilder.prefix(\"dc\", iri(DC_NS)), ns = SparqlBuilder.prefix(\"ns\", iri(EXAMPLE_ORG_NS));\n+\t\tVariable title = SparqlBuilder.var(\"title\"), price = SparqlBuilder.var(\"price\"), x = SparqlBuilder.var(\"x\");\n+\n+\t\tGraphPatternNotTriples pricePattern = GraphPatterns.and(x.has(ns.iri(\"price\"), price))\n+\t\t\t\t.filter(Expressions.or(Expressions.lt(price, Rdf.literalOf(20)),\n+\t\t\t\t\t\tExpressions.and(Expressions.lt(price, Rdf.literalOf(50)),\n+\t\t\t\t\t\t\t\tExpressions.gt(price, Rdf.literalOf(30)))))\n+\t\t\t\t.optional();\n+\t\tSystem.out.println(query);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec78d8c2b07c4dd4b63b01bf299a36d1e4a17585"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1507, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}