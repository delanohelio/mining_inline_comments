{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1MTE1MzQ4", "number": 2047, "title": "GH-2044 store cardinality in query model node", "bodyText": "Related GitHub issue: #2044 \nBriefly describe the changes proposed in this PR:\n\nintroduce getter and setter for cardinality in QueryModelNode\ndefault implementation in AbstractQueryModelNode\ninclude cardinality in signature for StatementPattern\n\nprints StatementPattern (resultSizeEstimate=1) instead of just StatementPattern\n\n\n\nEg:\nProjection\n   ProjectionElemList\n      ProjectionElem \"name\"\n      ProjectionElem \"mbox\"\n   Filter\n      Regex\n         Str\n            Var (name=mbox)\n         Var (name=pattern)\n         Var (name=flags)\n      Join\n         StatementPattern (resultSizeEstimate=1)\n            Var (name=y)\n            Var (name=_const_2c03e873_uri, value=http://example.org/ns#pattern, anonymous)\n            Var (name=pattern)\n         Join\n            StatementPattern (resultSizeEstimate=1)\n               Var (name=y)\n               Var (name=_const_144ac82a_uri, value=http://example.org/ns#flags, anonymous)\n               Var (name=flags)\n            Join\n               StatementPattern (resultSizeEstimate=3)\n                  Var (name=x)\n                  Var (name=_const_23b7c3b6_uri, value=http://xmlns.com/foaf/0.1/name, anonymous)\n                  Var (name=name)\n               StatementPattern (resultSizeEstimate=3)\n                  Var (name=x)\n                  Var (name=_const_23b75369_uri, value=http://xmlns.com/foaf/0.1/mbox, anonymous)\n                  Var (name=mbox)", "createdAt": "2020-03-28T16:01:49Z", "url": "https://github.com/eclipse/rdf4j/pull/2047", "merged": true, "mergeCommit": {"oid": "8d8dd23426e8be34747c006bb80ce7010b42d6d3"}, "closed": true, "closedAt": "2020-04-02T06:34:43Z", "author": {"login": "hmottestad"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcSH1maABqjMxNzUxMDY1Njg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcTgM19AFqTM4NjAxNDQyNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a077c51a63a71bc86ede707f0117df23e3cd7324", "author": {"user": {"login": "hmottestad", "name": null}}, "url": "https://github.com/eclipse/rdf4j/commit/a077c51a63a71bc86ede707f0117df23e3cd7324", "committedDate": "2020-03-28T15:57:02Z", "message": "GH-2044 store cardinality in query model node so that we can print it for statement patterns and for joins and other nodes in the future\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>"}, "afterCommit": {"oid": "4d38e1389fa436a050c5ae1644c2e8e81ff991d1", "author": {"user": {"login": "hmottestad", "name": null}}, "url": "https://github.com/eclipse/rdf4j/commit/4d38e1389fa436a050c5ae1644c2e8e81ff991d1", "committedDate": "2020-03-28T16:24:21Z", "message": "GH-2044 store cardinality in query model node so that we can print it for statement patterns and for joins and other nodes in the future\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMzY5NjU5", "url": "https://github.com/eclipse/rdf4j/pull/2047#pullrequestreview-383369659", "createdAt": "2020-03-29T03:39:35Z", "commit": {"oid": "4d38e1389fa436a050c5ae1644c2e8e81ff991d1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQwMzozOTozNVrOF9OL2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQwMzozOTozNVrOF9OL2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTczOTg2Nw==", "bodyText": "Strictly speaking this is not backward-compatible. I'm on the fence whether we can get away with by saying that any implementor who does not use the abstract base class has only themselves to blame.", "url": "https://github.com/eclipse/rdf4j/pull/2047#discussion_r399739867", "createdAt": "2020-03-29T03:39:35Z", "author": {"login": "jeenbroekstra"}, "path": "core/queryalgebra/model/src/main/java/org/eclipse/rdf4j/query/algebra/QueryModelNode.java", "diffHunk": "@@ -73,16 +73,27 @@\n \t/**\n \t * Returns the signature of this query model node. Signatures normally include the node's name and any parameters,\n \t * but not parent or child nodes. This method is used by {@link #toString()}.\n-\t * \n+\t *\n \t * @return The node's signature, e.g. <tt>SLICE (offset=10, limit=10)</tt>.\n \t */\n \tpublic String getSignature();\n \n \t/**\n \t * Returns a (deep) clone of this query model node. This method recursively clones the entire node tree, starting\n \t * from this nodes.\n-\t * \n+\t *\n \t * @return A deep clone of this query model node.\n \t */\n \tpublic QueryModelNode clone();\n+\n+\t/**\n+\t * Returns the number of outputs that this QueryNode predicts will be outputted. For a StatementPattern this would\n+\t * be the estimated cardinality provided by the EvaluationStatistics. For a Join the would be the resulting number\n+\t * of joined tuples.\n+\t * \n+\t * @return cardinality\n+\t */\n+\tpublic double getCardinality();\n+\n+\tpublic void setCardinality(double cardinality);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d38e1389fa436a050c5ae1644c2e8e81ff991d1"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMzcwMTUw", "url": "https://github.com/eclipse/rdf4j/pull/2047#pullrequestreview-383370150", "createdAt": "2020-03-29T03:52:28Z", "commit": {"oid": "4d38e1389fa436a050c5ae1644c2e8e81ff991d1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQwMzo1MjoyOFrOF9OPQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQwMzo1MjoyOFrOF9OPQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc0MDczNw==", "bodyText": "Should we call it 'getCostEstimate` as a more generic method? Cost estimation can be done using cardinality, but it's not always the sole factor (for example a SERVICE clause has a significantly higher cost due to network latency). I know that in the current implemtation of the EvaluationStatistics we sort of mix this up, but perhaps we should start being a bit more precise.", "url": "https://github.com/eclipse/rdf4j/pull/2047#discussion_r399740737", "createdAt": "2020-03-29T03:52:28Z", "author": {"login": "jeenbroekstra"}, "path": "core/queryalgebra/model/src/main/java/org/eclipse/rdf4j/query/algebra/QueryModelNode.java", "diffHunk": "@@ -73,16 +73,27 @@\n \t/**\n \t * Returns the signature of this query model node. Signatures normally include the node's name and any parameters,\n \t * but not parent or child nodes. This method is used by {@link #toString()}.\n-\t * \n+\t *\n \t * @return The node's signature, e.g. <tt>SLICE (offset=10, limit=10)</tt>.\n \t */\n \tpublic String getSignature();\n \n \t/**\n \t * Returns a (deep) clone of this query model node. This method recursively clones the entire node tree, starting\n \t * from this nodes.\n-\t * \n+\t *\n \t * @return A deep clone of this query model node.\n \t */\n \tpublic QueryModelNode clone();\n+\n+\t/**\n+\t * Returns the number of outputs that this QueryNode predicts will be outputted. For a StatementPattern this would\n+\t * be the estimated cardinality provided by the EvaluationStatistics. For a Join the would be the resulting number\n+\t * of joined tuples.\n+\t * \n+\t * @return cardinality\n+\t */\n+\tpublic double getCardinality();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d38e1389fa436a050c5ae1644c2e8e81ff991d1"}, "originalPosition": 60}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fa9995f646c2c209a23774b611636b7636f250b0", "author": {"user": {"login": "hmottestad", "name": null}}, "url": "https://github.com/eclipse/rdf4j/commit/fa9995f646c2c209a23774b611636b7636f250b0", "committedDate": "2020-03-29T13:00:07Z", "message": "GH-2044 renamed cardinality to estimated rows and made implementation optional\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>"}, "afterCommit": {"oid": "5f249531d1f64554fdc4d73125b40aac15833e7b", "author": {"user": {"login": "hmottestad", "name": null}}, "url": "https://github.com/eclipse/rdf4j/commit/5f249531d1f64554fdc4d73125b40aac15833e7b", "committedDate": "2020-03-29T15:37:16Z", "message": "GH-2044 renamed cardinality to estimated rows and made implementation optional\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNDI0Nzgw", "url": "https://github.com/eclipse/rdf4j/pull/2047#pullrequestreview-383424780", "createdAt": "2020-03-29T15:41:40Z", "commit": {"oid": "5f249531d1f64554fdc4d73125b40aac15833e7b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQxNTo0MTo0MFrOF9SwvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQxNTo0MTo0MFrOF9SwvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgxNDg0NA==", "bodyText": "@jeenbroekstra Propose we use the PostgreSQL naming of \"rows\" for this cardinality. I've prefixed it with \"estimated\" to make it more obvious what we are talking about.\nIn order for this to be backwards compatible I propose that setEstimatedRows be a no-op. We can remove both default implementations in 4.0.0, I'm just a bit unsure now how we can mark these methods to make it obvious for anyone who stumbles upon them. I have marked them Experimental though, since we might want to change the name or something else in the future. I'm open to other names though, \"getEstimatedTuples\" comes to mind.", "url": "https://github.com/eclipse/rdf4j/pull/2047#discussion_r399814844", "createdAt": "2020-03-29T15:41:40Z", "author": {"login": "hmottestad"}, "path": "core/queryalgebra/model/src/main/java/org/eclipse/rdf4j/query/algebra/QueryModelNode.java", "diffHunk": "@@ -73,16 +75,33 @@\n \t/**\n \t * Returns the signature of this query model node. Signatures normally include the node's name and any parameters,\n \t * but not parent or child nodes. This method is used by {@link #toString()}.\n-\t * \n+\t *\n \t * @return The node's signature, e.g. <tt>SLICE (offset=10, limit=10)</tt>.\n \t */\n \tpublic String getSignature();\n \n \t/**\n \t * Returns a (deep) clone of this query model node. This method recursively clones the entire node tree, starting\n \t * from this nodes.\n-\t * \n+\t *\n \t * @return A deep clone of this query model node.\n \t */\n \tpublic QueryModelNode clone();\n+\n+\t/**\n+\t * Returns the number of tuples that this QueryNode predicts will be outputted. For a StatementPattern this would be\n+\t * the estimated cardinality provided by the EvaluationStatistics. For a Join the would be the resulting number of\n+\t * joined tuples.\n+\t *\n+\t * @return rows\n+\t */\n+\t@Experimental\n+\tdefault double getEstimatedRows() {\n+\t\treturn -1;\n+\t}\n+\n+\t@Experimental\n+\tdefault void setEstimatedRows(double rows) {\n+\t\t// no-op for backwards compatibility\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f249531d1f64554fdc4d73125b40aac15833e7b"}, "originalPosition": 77}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNDU5NjI4", "url": "https://github.com/eclipse/rdf4j/pull/2047#pullrequestreview-383459628", "createdAt": "2020-03-29T21:54:07Z", "commit": {"oid": "5f249531d1f64554fdc4d73125b40aac15833e7b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQyMTo1NDowN1rOF9VeFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQyMTo1NDowN1rOF9VeFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1OTIyMA==", "bodyText": "Right, so here's where I went wrong: I somehow had it in my head that you were using the outcome of QueryJoinOptimizer.getTupleExprCardinality to set this number. Apologies for the confusion.\nBtw that might be a good thing to fix as part of this PR: rename that method to get(TupleExpr)CostEstimate.", "url": "https://github.com/eclipse/rdf4j/pull/2047#discussion_r399859220", "createdAt": "2020-03-29T21:54:07Z", "author": {"login": "jeenbroekstra"}, "path": "core/queryalgebra/evaluation/src/main/java/org/eclipse/rdf4j/query/algebra/evaluation/impl/QueryJoinOptimizer.java", "diffHunk": "@@ -109,7 +109,9 @@ public void meet(Join node) {\n \t\t\t\t\tMap<TupleExpr, List<Var>> varsMap = new HashMap<>();\n \n \t\t\t\t\tfor (TupleExpr tupleExpr : joinArgs) {\n-\t\t\t\t\t\tcardinalityMap.put(tupleExpr, statistics.getCardinality(tupleExpr));\n+\t\t\t\t\t\tdouble cardinality = statistics.getCardinality(tupleExpr);\n+\t\t\t\t\t\ttupleExpr.setEstimatedRows(cardinality);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f249531d1f64554fdc4d73125b40aac15833e7b"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1671cf8bc55f45dc6777c7fd51237912908404c4", "author": {"user": {"login": "hmottestad", "name": null}}, "url": "https://github.com/eclipse/rdf4j/commit/1671cf8bc55f45dc6777c7fd51237912908404c4", "committedDate": "2020-04-01T19:34:25Z", "message": "GH-2044 store cardinality in query model node so that we can print it for statement patterns and for joins and other nodes in the future\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f126d07b9fe5838c47374412256311221adb58c2", "author": {"user": {"login": "hmottestad", "name": null}}, "url": "https://github.com/eclipse/rdf4j/commit/f126d07b9fe5838c47374412256311221adb58c2", "committedDate": "2020-04-01T19:34:25Z", "message": "GH-2044 renamed cardinality to estimated rows and made implementation optional\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78b95429d655ae46fb42137b96cc3432b32cab38", "author": {"user": {"login": "hmottestad", "name": null}}, "url": "https://github.com/eclipse/rdf4j/commit/78b95429d655ae46fb42137b96cc3432b32cab38", "committedDate": "2020-04-01T19:34:25Z", "message": "GH-2044 renamed variable after code review and updated tests\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a3351debc6869e63e17993d23438aeb9a8c3ae2a", "author": {"user": {"login": "hmottestad", "name": null}}, "url": "https://github.com/eclipse/rdf4j/commit/a3351debc6869e63e17993d23438aeb9a8c3ae2a", "committedDate": "2020-04-01T19:32:10Z", "message": "GH-2044 rename method which is about cost and not just cardinality\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>"}, "afterCommit": {"oid": "f0a44a282fb9175de172ed2a122b3f601f14d755", "author": {"user": {"login": "hmottestad", "name": null}}, "url": "https://github.com/eclipse/rdf4j/commit/f0a44a282fb9175de172ed2a122b3f601f14d755", "committedDate": "2020-04-01T19:34:26Z", "message": "GH-2044 rename method which is about cost and not just cardinality\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "edbc67ac52705c2267cc9fce82a6b6fea22a49eb", "author": {"user": {"login": "hmottestad", "name": null}}, "url": "https://github.com/eclipse/rdf4j/commit/edbc67ac52705c2267cc9fce82a6b6fea22a49eb", "committedDate": "2020-04-01T19:41:46Z", "message": "GH-2044 rename method which is about cost and not just cardinality\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f0a44a282fb9175de172ed2a122b3f601f14d755", "author": {"user": {"login": "hmottestad", "name": null}}, "url": "https://github.com/eclipse/rdf4j/commit/f0a44a282fb9175de172ed2a122b3f601f14d755", "committedDate": "2020-04-01T19:34:26Z", "message": "GH-2044 rename method which is about cost and not just cardinality\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>"}, "afterCommit": {"oid": "edbc67ac52705c2267cc9fce82a6b6fea22a49eb", "author": {"user": {"login": "hmottestad", "name": null}}, "url": "https://github.com/eclipse/rdf4j/commit/edbc67ac52705c2267cc9fce82a6b6fea22a49eb", "committedDate": "2020-04-01T19:41:46Z", "message": "GH-2044 rename method which is about cost and not just cardinality\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MDE0NDI2", "url": "https://github.com/eclipse/rdf4j/pull/2047#pullrequestreview-386014426", "createdAt": "2020-04-01T23:20:58Z", "commit": {"oid": "edbc67ac52705c2267cc9fce82a6b6fea22a49eb"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMzoyMDo1OVrOF_WC0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMzoyMDo1OVrOF_WC0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk2NTc3Ng==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/eclipse/rdf4j/pull/2047#discussion_r401965776", "createdAt": "2020-04-01T23:20:59Z", "author": {"login": "jeenbroekstra"}, "path": "core/sail/federation/src/main/java/org/eclipse/rdf4j/sail/federation/optimizers/QueryMultiJoinOptimizer.java", "diffHunk": "@@ -177,26 +177,26 @@ public void meetJoin(TupleExpr node) {\n \t\t */\n \t\tprotected TupleExpr selectNextTupleExpr(List<TupleExpr> expressions, Map<TupleExpr, Double> cardinalityMap,\n \t\t\t\tMap<TupleExpr, List<Var>> varsMap, Map<Var, Integer> varFreqMap, Set<String> boundVars) {\n-\t\t\tdouble lowestCardinality = Double.MAX_VALUE;\n+\t\t\tdouble lowestCost = Double.MAX_VALUE;\n \t\t\tTupleExpr result = null;\n \n \t\t\tfor (TupleExpr tupleExpr : expressions) {\n \t\t\t\t// Calculate a score for this tuple expression\n-\t\t\t\tdouble cardinality = getTupleExprCardinality(tupleExpr, cardinalityMap, varsMap, varFreqMap, boundVars);\n+\t\t\t\tdouble cost = getTupleExprCost(tupleExpr, cardinalityMap, varsMap, varFreqMap, boundVars);\n \n-\t\t\t\tif (cardinality < lowestCardinality) {\n+\t\t\t\tif (cost < lowestCost) {\n \t\t\t\t\t// More specific path expression found\n-\t\t\t\t\tlowestCardinality = cardinality;\n+\t\t\t\t\tlowestCost = cost;\n \t\t\t\t\tresult = tupleExpr;\n \t\t\t\t}\n \t\t\t}\n \n \t\t\treturn result;\n \t\t}\n \n-\t\tprotected double getTupleExprCardinality(TupleExpr tupleExpr, Map<TupleExpr, Double> cardinalityMap,\n+\t\tprotected double getTupleExprCost(TupleExpr tupleExpr, Map<TupleExpr, Double> cardinalityMap,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edbc67ac52705c2267cc9fce82a6b6fea22a49eb"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 12, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}