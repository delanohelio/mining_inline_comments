{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUwOTYzNDE1", "number": 2367, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQwMjozMToyOFrOEPt-rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzoxOToxM1rOEQAlzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0OTE3NDIzOnYy", "diffSide": "RIGHT", "path": "core/queryalgebra/evaluation/src/main/java/org/eclipse/rdf4j/query/algebra/evaluation/function/Function.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQwMjozMToyOFrOGzlFHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQwMjozMToyOFrOGzlFHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjczODA3OQ==", "bodyText": "We should probably note in #2115 that this default might be removed in 4.0.", "url": "https://github.com/eclipse/rdf4j/pull/2367#discussion_r456738079", "createdAt": "2020-07-18T02:31:28Z", "author": {"login": "jeenbroekstra"}, "path": "core/queryalgebra/evaluation/src/main/java/org/eclipse/rdf4j/query/algebra/evaluation/function/Function.java", "diffHunk": "@@ -9,14 +9,45 @@\n \n import org.eclipse.rdf4j.model.Value;\n import org.eclipse.rdf4j.model.ValueFactory;\n+import org.eclipse.rdf4j.query.algebra.evaluation.TripleSource;\n import org.eclipse.rdf4j.query.algebra.evaluation.ValueExprEvaluationException;\n \n /**\n+ * A query function, which can be a built-in function in the query language, or a custom function as documented in the\n+ * <a href=\"https://www.w3.org/TR/sparql11-query/\">SPARQL 1.1 Query Language Recommendation</a>.\n+ *\n  * @author Arjohn Kampman\n+ * @author Jeen Broekstra\n+ * @see FunctionRegistry\n  */\n public interface Function {\n \n-\tpublic String getURI();\n+\tString getURI();\n \n-\tpublic Value evaluate(ValueFactory valueFactory, Value... args) throws ValueExprEvaluationException;\n+\t/**\n+\t * Evaluate the function over the supplied input arguments, using the supplied {@link ValueFactory} to produce the\n+\t * result.\n+\t *\n+\t * @param valueFactory a {@link ValueFactory} to use for producing the function result.\n+\t * @param args         the function input arguments.\n+\t * @return the function result value.\n+\t * @throws ValueExprEvaluationException\n+\t * @deprecated since 3.3.0. Use {@link #evaluate(TripleSource, Value...)} instead.\n+\t */\n+\t@Deprecated\n+\tValue evaluate(ValueFactory valueFactory, Value... args) throws ValueExprEvaluationException;\n+\n+\t/**\n+\t * Evaluate the function over the supplied input arguments.\n+\t *\n+\t * @param tripleSource the {@link TripleSource} used in the query evaluation. This can be used to access the current\n+\t *                     state of the store.\n+\t * @param args         the function input arguments.\n+\t * @return the function result value.\n+\t * @throws ValueExprEvaluationException\n+\t * @since 3.3.0\n+\t */\n+\tdefault Value evaluate(TripleSource tripleSource, Value... args) throws ValueExprEvaluationException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f388f377afb0f71d2d234e00cacd986fb34194ef"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjIyMzQ5OnYy", "diffSide": "RIGHT", "path": "core/queryalgebra/evaluation/src/main/java/org/eclipse/rdf4j/query/algebra/evaluation/function/Function.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzoxOToxM1rOGz8nmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzoxOToxM1rOGz8nmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEyMzczOA==", "bodyText": "Could you add to the deprecation warning that the value factory can be retrieved from the triple source?", "url": "https://github.com/eclipse/rdf4j/pull/2367#discussion_r457123738", "createdAt": "2020-07-20T07:19:13Z", "author": {"login": "hmottestad"}, "path": "core/queryalgebra/evaluation/src/main/java/org/eclipse/rdf4j/query/algebra/evaluation/function/Function.java", "diffHunk": "@@ -9,14 +9,45 @@\n \n import org.eclipse.rdf4j.model.Value;\n import org.eclipse.rdf4j.model.ValueFactory;\n+import org.eclipse.rdf4j.query.algebra.evaluation.TripleSource;\n import org.eclipse.rdf4j.query.algebra.evaluation.ValueExprEvaluationException;\n \n /**\n+ * A query function, which can be a built-in function in the query language, or a custom function as documented in the\n+ * <a href=\"https://www.w3.org/TR/sparql11-query/\">SPARQL 1.1 Query Language Recommendation</a>.\n+ *\n  * @author Arjohn Kampman\n+ * @author Jeen Broekstra\n+ * @see FunctionRegistry\n  */\n public interface Function {\n \n-\tpublic String getURI();\n+\tString getURI();\n \n-\tpublic Value evaluate(ValueFactory valueFactory, Value... args) throws ValueExprEvaluationException;\n+\t/**\n+\t * Evaluate the function over the supplied input arguments, using the supplied {@link ValueFactory} to produce the\n+\t * result.\n+\t *\n+\t * @param valueFactory a {@link ValueFactory} to use for producing the function result.\n+\t * @param args         the function input arguments.\n+\t * @return the function result value.\n+\t * @throws ValueExprEvaluationException\n+\t * @deprecated since 3.3.0. Use {@link #evaluate(TripleSource, Value...)} instead.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a597ca5af6b7f438c90534f111da65544d4ef00"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1442, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}