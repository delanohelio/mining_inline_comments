{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1NDA0NzQx", "number": 2051, "title": "GH-2024 rdfstar support in memorystore", "bodyText": "GitHub issue resolved: #2024 \nBriefly describe the changes proposed in this PR:\n\nadding and retrieving of Triple objects in the memory store added\nmodified SimpleTriple.equals method to allow equality with other implementations of the Triple interface (cf. other simple model object implementations, e.g. SimpleIRI.equals)\nadded basic unit and integration tests", "createdAt": "2020-03-30T04:55:51Z", "url": "https://github.com/eclipse/rdf4j/pull/2051", "merged": true, "mergeCommit": {"oid": "0d61892cbff0c5719692b4101008260c63dd51ec"}, "closed": true, "closedAt": "2020-03-30T07:50:14Z", "author": {"login": "jeenbroekstra"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcSnPA8gBqjMxNzY4ODg5MzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcSpT9vAFqTM4MzU4OTIxOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7dfff483b32bcb2cb4c73eeee557aa9b84c76e2d", "author": {"user": {"login": "jeenbroekstra", "name": "Jeen Broekstra"}}, "url": "https://github.com/eclipse/rdf4j/commit/7dfff483b32bcb2cb4c73eeee557aa9b84c76e2d", "committedDate": "2020-03-30T04:52:04Z", "message": "GH-2024 added stringValue for MemTriple\n\n- added unit tests on equality and stringValue representation"}, "afterCommit": {"oid": "ba6bab603485c6f88ddf2c4390d6f580786439a8", "author": {"user": {"login": "jeenbroekstra", "name": "Jeen Broekstra"}}, "url": "https://github.com/eclipse/rdf4j/commit/ba6bab603485c6f88ddf2c4390d6f580786439a8", "committedDate": "2020-03-30T04:59:14Z", "message": "GH-2024 added stringValue for MemTriple\n\n- added unit tests on equality and stringValue representation\n\nSigned-off-by: Jeen Broekstra <jeen.broekstra@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNTMyOTYy", "url": "https://github.com/eclipse/rdf4j/pull/2051#pullrequestreview-383532962", "createdAt": "2020-03-30T05:06:33Z", "commit": {"oid": "ba6bab603485c6f88ddf2c4390d6f580786439a8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNTowNjozM1rOF9ZwrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNTowNjozM1rOF9ZwrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkyOTUxNg==", "bodyText": "Just looking at this, I'm wondering how (non-)obvious the difference between ValueFactory.createStatement and ValueFactory.createTriple will be to users. Apart from making sure it's clearly explained in the javadoc, any ideas around how to make this more clear?", "url": "https://github.com/eclipse/rdf4j/pull/2051#discussion_r399929516", "createdAt": "2020-03-30T05:06:33Z", "author": {"login": "jeenbroekstra"}, "path": "testsuites/repository/src/main/java/org/eclipse/rdf4j/repository/RDFStarSupportTest.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/******************************************************************************* \n+ * Copyright (c) 2020 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+package org.eclipse.rdf4j.repository;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.fail;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.rdf4j.model.BNode;\n+import org.eclipse.rdf4j.model.IRI;\n+import org.eclipse.rdf4j.model.Literal;\n+import org.eclipse.rdf4j.model.Triple;\n+import org.eclipse.rdf4j.model.ValueFactory;\n+import org.eclipse.rdf4j.model.vocabulary.FOAF;\n+import org.eclipse.rdf4j.model.vocabulary.RDF;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+\n+/**\n+ * Test cases for RDF* support in the Repository.\n+ * \n+ * @author Jeen Broekstra\n+ *\n+ */\n+public abstract class RDFStarSupportTest {\n+\t/**\n+\t * Timeout all individual tests after 10 minutes.\n+\t */\n+\t@Rule\n+\tpublic Timeout to = new Timeout(10, TimeUnit.MINUTES);\n+\n+\tprivate Repository testRepository;\n+\n+\tprivate RepositoryConnection testCon;\n+\n+\tprivate ValueFactory vf;\n+\n+\tprivate BNode bob;\n+\n+\tprivate BNode alice;\n+\n+\tprivate BNode alexander;\n+\n+\tprivate Literal nameAlice;\n+\n+\tprivate Literal nameBob;\n+\n+\tprivate Literal mboxAlice;\n+\n+\tprivate Literal mboxBob;\n+\n+\tprivate IRI context1;\n+\n+\tprivate IRI context2;\n+\n+\t@Before\n+\tpublic void setUp() throws Exception {\n+\t\ttestRepository = createRepository();\n+\n+\t\ttestCon = testRepository.getConnection();\n+\t\ttestCon.clear();\n+\t\ttestCon.clearNamespaces();\n+\n+\t\tvf = testRepository.getValueFactory();\n+\n+\t\t// Initialize values\n+\t\tbob = vf.createBNode();\n+\t\talice = vf.createBNode();\n+\t\talexander = vf.createBNode();\n+\n+\t\tnameAlice = vf.createLiteral(\"Alice\");\n+\t\tnameBob = vf.createLiteral(\"Bob\");\n+\n+\t\tmboxAlice = vf.createLiteral(\"alice@example.org\");\n+\t\tmboxBob = vf.createLiteral(\"bob@example.org\");\n+\n+\t\tcontext1 = vf.createIRI(\"urn:x-local:graph1\");\n+\t\tcontext2 = vf.createIRI(\"urn:x-local:graph2\");\n+\t}\n+\n+\t@After\n+\tpublic void tearDown() throws Exception {\n+\t\ttry {\n+\t\t\ttestCon.close();\n+\t\t} finally {\n+\t\t\ttestRepository.shutDown();\n+\t\t}\n+\t}\n+\n+\t@Test\n+\tpublic void testAddRDFStarSubject() throws Exception {\n+\t\tTriple rdfStarTriple = vf.createTriple(bob, FOAF.NAME, nameBob);\n+\n+\t\ttestCon.add(rdfStarTriple, RDF.TYPE, RDF.ALT);\n+\n+\t\tassertThat(testCon.hasStatement(rdfStarTriple, RDF.TYPE, RDF.ALT, false)).isTrue();\n+\t}\n+\n+\t@Test\n+\tpublic void testAddRDFStarObject() throws Exception {\n+\t\tTriple rdfStarTriple = vf.createTriple(bob, FOAF.NAME, nameBob);\n+\n+\t\ttestCon.add(RDF.ALT, RDF.TYPE, rdfStarTriple);\n+\n+\t\tassertThat(testCon.hasStatement(RDF.ALT, RDF.TYPE, rdfStarTriple, false)).isTrue();\n+\t}\n+\n+\t@Test\n+\tpublic void testAddRDFStarContext() throws Exception {\n+\t\tTriple rdfStarTriple = vf.createTriple(bob, FOAF.NAME, nameBob);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba6bab603485c6f88ddf2c4390d6f580786439a8"}, "originalPosition": 119}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94459da09aadf7012ea1b71e2d91104cf738e545", "author": {"user": {"login": "jeenbroekstra", "name": "Jeen Broekstra"}}, "url": "https://github.com/eclipse/rdf4j/commit/94459da09aadf7012ea1b71e2d91104cf738e545", "committedDate": "2020-03-30T05:14:42Z", "message": "GH-2024 adding/retrieving of Triple objects in memorystore\n\n- added MemTriple class to keep track of triple objects in the\nmemorystore\n- SimpleTriple.equals loosened to allow equality with any Triple\n  implementation (cf how this works for SimpleIRI, SimpleLiteral, etc.)\n- added test case class for RDF* support in repository testsuite\n- added unit tests on equality and stringValue representation\n\nSigned-off-by: Jeen Broekstra <jeen.broekstra@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3da275ce438a37a9bc0d89f987e69a76f89e2c8f", "author": {"user": {"login": "jeenbroekstra", "name": "Jeen Broekstra"}}, "url": "https://github.com/eclipse/rdf4j/commit/3da275ce438a37a9bc0d89f987e69a76f89e2c8f", "committedDate": "2020-03-30T05:13:17Z", "message": "GH-2024 fixed classcastexception in equals method"}, "afterCommit": {"oid": "94459da09aadf7012ea1b71e2d91104cf738e545", "author": {"user": {"login": "jeenbroekstra", "name": "Jeen Broekstra"}}, "url": "https://github.com/eclipse/rdf4j/commit/94459da09aadf7012ea1b71e2d91104cf738e545", "committedDate": "2020-03-30T05:14:42Z", "message": "GH-2024 adding/retrieving of Triple objects in memorystore\n\n- added MemTriple class to keep track of triple objects in the\nmemorystore\n- SimpleTriple.equals loosened to allow equality with any Triple\n  implementation (cf how this works for SimpleIRI, SimpleLiteral, etc.)\n- added test case class for RDF* support in repository testsuite\n- added unit tests on equality and stringValue representation\n\nSigned-off-by: Jeen Broekstra <jeen.broekstra@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNTgxMjgw", "url": "https://github.com/eclipse/rdf4j/pull/2051#pullrequestreview-383581280", "createdAt": "2020-03-30T07:11:16Z", "commit": {"oid": "94459da09aadf7012ea1b71e2d91104cf738e545"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNTg5MjE4", "url": "https://github.com/eclipse/rdf4j/pull/2051#pullrequestreview-383589218", "createdAt": "2020-03-30T07:24:38Z", "commit": {"oid": "94459da09aadf7012ea1b71e2d91104cf738e545"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 14, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}