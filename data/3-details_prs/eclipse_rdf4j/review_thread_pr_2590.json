{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwOTk1ODY2", "number": 2590, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMTowMzozMFrOEsxyyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMTowMzozMFrOEsxyyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Mzg4NjE5OnYy", "diffSide": "RIGHT", "path": "core/model-vocabulary/src/main/java/org/eclipse/rdf4j/model/vocabulary/Vocabularies.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMTowMzozMFrOHgNGAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzo0ODowM1rOHgZsZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUzMTAxMQ==", "bodyText": "This shift away from using the SimpleValueFactory might impact performance. We'll need to take a closer look at anything involving IRI object comparison.", "url": "https://github.com/eclipse/rdf4j/pull/2590#discussion_r503531011", "createdAt": "2020-10-12T21:03:30Z", "author": {"login": "jeenbroekstra"}, "path": "core/model-vocabulary/src/main/java/org/eclipse/rdf4j/model/vocabulary/Vocabularies.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+\n+package org.eclipse.rdf4j.model.vocabulary;\n+\n+import org.eclipse.rdf4j.model.IRI;\n+import org.eclipse.rdf4j.model.Namespace;\n+import org.eclipse.rdf4j.model.base.AbstractIRI;\n+import org.eclipse.rdf4j.model.base.AbstractNamespace;\n+\n+/**\n+ * Utility methods related to RDF vocabularies.\n+ *\n+ * @author Alessandro Bollini\n+ * @since 3.5.0\n+ *\n+ * @implNote To be eventually removed or merged with {@code org.eclipse.rdf4j.model.util.Vocabularies}.\n+ */\n+class Vocabularies {\n+\n+\tstatic Namespace createNamespace(String prefix, String namespace) {\n+\t\treturn new AbstractNamespace() {\n+\n+\t\t\t@Override\n+\t\t\tpublic String getPrefix() {\n+\t\t\t\treturn prefix;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic String getName() {\n+\t\t\t\treturn namespace;\n+\t\t\t}\n+\n+\t\t};\n+\t}\n+\n+\tstatic IRI createIRI(final String namespace, final String localName) {\n+\t\treturn new AbstractIRI() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8feba36cf8f374fbba38cb86491d0c94a625fe04"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzczNzQ0NA==", "bodyText": "I considered this issue in the design of the current approach and I agree that a closer look is deserved; however, any performance degradation is likely to be traced back to #2546, which factored object equality from SimpleIRI to the shared AbstractIRI base class.\nAs far as I can see, the only relevant difference is in the timing of IRI.toString():\nfailing string object identity, both the original SimpleIRI.equals() and the updated AbstractIRI.equals() methods compare the return value of IRI.toString(), but:\n\nin the case of SimpleIRI the value is precomputed in AbstractValueFactory as\n\npublic IRI createIRI(String namespace, String localName) {\n\treturn createIRI(namespace + localName);\n}\n\nin the case of AbstractIRI the value is computed on demand on the basis of the public API as\n\npublic String stringValue() {\n\treturn getNamespace() + getLocalName();\n}\nBack to you with some hard figures\u2026", "url": "https://github.com/eclipse/rdf4j/pull/2590#discussion_r503737444", "createdAt": "2020-10-13T07:48:03Z", "author": {"login": "knoan"}, "path": "core/model-vocabulary/src/main/java/org/eclipse/rdf4j/model/vocabulary/Vocabularies.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+\n+package org.eclipse.rdf4j.model.vocabulary;\n+\n+import org.eclipse.rdf4j.model.IRI;\n+import org.eclipse.rdf4j.model.Namespace;\n+import org.eclipse.rdf4j.model.base.AbstractIRI;\n+import org.eclipse.rdf4j.model.base.AbstractNamespace;\n+\n+/**\n+ * Utility methods related to RDF vocabularies.\n+ *\n+ * @author Alessandro Bollini\n+ * @since 3.5.0\n+ *\n+ * @implNote To be eventually removed or merged with {@code org.eclipse.rdf4j.model.util.Vocabularies}.\n+ */\n+class Vocabularies {\n+\n+\tstatic Namespace createNamespace(String prefix, String namespace) {\n+\t\treturn new AbstractNamespace() {\n+\n+\t\t\t@Override\n+\t\t\tpublic String getPrefix() {\n+\t\t\t\treturn prefix;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic String getName() {\n+\t\t\t\treturn namespace;\n+\t\t\t}\n+\n+\t\t};\n+\t}\n+\n+\tstatic IRI createIRI(final String namespace, final String localName) {\n+\t\treturn new AbstractIRI() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUzMTAxMQ=="}, "originalCommit": {"oid": "8feba36cf8f374fbba38cb86491d0c94a625fe04"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1397, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}