{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1NDA0NzQx", "number": 2051, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNTowNjozM1rODsgx3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNTowNjozM1rODsgx3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MDAwOTg5OnYy", "diffSide": "RIGHT", "path": "testsuites/repository/src/main/java/org/eclipse/rdf4j/repository/RDFStarSupportTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNTowNjozM1rOF9ZwrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNzoxMDo0OFrOF9cQEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkyOTUxNg==", "bodyText": "Just looking at this, I'm wondering how (non-)obvious the difference between ValueFactory.createStatement and ValueFactory.createTriple will be to users. Apart from making sure it's clearly explained in the javadoc, any ideas around how to make this more clear?", "url": "https://github.com/eclipse/rdf4j/pull/2051#discussion_r399929516", "createdAt": "2020-03-30T05:06:33Z", "author": {"login": "jeenbroekstra"}, "path": "testsuites/repository/src/main/java/org/eclipse/rdf4j/repository/RDFStarSupportTest.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/******************************************************************************* \n+ * Copyright (c) 2020 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+package org.eclipse.rdf4j.repository;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.fail;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.rdf4j.model.BNode;\n+import org.eclipse.rdf4j.model.IRI;\n+import org.eclipse.rdf4j.model.Literal;\n+import org.eclipse.rdf4j.model.Triple;\n+import org.eclipse.rdf4j.model.ValueFactory;\n+import org.eclipse.rdf4j.model.vocabulary.FOAF;\n+import org.eclipse.rdf4j.model.vocabulary.RDF;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+\n+/**\n+ * Test cases for RDF* support in the Repository.\n+ * \n+ * @author Jeen Broekstra\n+ *\n+ */\n+public abstract class RDFStarSupportTest {\n+\t/**\n+\t * Timeout all individual tests after 10 minutes.\n+\t */\n+\t@Rule\n+\tpublic Timeout to = new Timeout(10, TimeUnit.MINUTES);\n+\n+\tprivate Repository testRepository;\n+\n+\tprivate RepositoryConnection testCon;\n+\n+\tprivate ValueFactory vf;\n+\n+\tprivate BNode bob;\n+\n+\tprivate BNode alice;\n+\n+\tprivate BNode alexander;\n+\n+\tprivate Literal nameAlice;\n+\n+\tprivate Literal nameBob;\n+\n+\tprivate Literal mboxAlice;\n+\n+\tprivate Literal mboxBob;\n+\n+\tprivate IRI context1;\n+\n+\tprivate IRI context2;\n+\n+\t@Before\n+\tpublic void setUp() throws Exception {\n+\t\ttestRepository = createRepository();\n+\n+\t\ttestCon = testRepository.getConnection();\n+\t\ttestCon.clear();\n+\t\ttestCon.clearNamespaces();\n+\n+\t\tvf = testRepository.getValueFactory();\n+\n+\t\t// Initialize values\n+\t\tbob = vf.createBNode();\n+\t\talice = vf.createBNode();\n+\t\talexander = vf.createBNode();\n+\n+\t\tnameAlice = vf.createLiteral(\"Alice\");\n+\t\tnameBob = vf.createLiteral(\"Bob\");\n+\n+\t\tmboxAlice = vf.createLiteral(\"alice@example.org\");\n+\t\tmboxBob = vf.createLiteral(\"bob@example.org\");\n+\n+\t\tcontext1 = vf.createIRI(\"urn:x-local:graph1\");\n+\t\tcontext2 = vf.createIRI(\"urn:x-local:graph2\");\n+\t}\n+\n+\t@After\n+\tpublic void tearDown() throws Exception {\n+\t\ttry {\n+\t\t\ttestCon.close();\n+\t\t} finally {\n+\t\t\ttestRepository.shutDown();\n+\t\t}\n+\t}\n+\n+\t@Test\n+\tpublic void testAddRDFStarSubject() throws Exception {\n+\t\tTriple rdfStarTriple = vf.createTriple(bob, FOAF.NAME, nameBob);\n+\n+\t\ttestCon.add(rdfStarTriple, RDF.TYPE, RDF.ALT);\n+\n+\t\tassertThat(testCon.hasStatement(rdfStarTriple, RDF.TYPE, RDF.ALT, false)).isTrue();\n+\t}\n+\n+\t@Test\n+\tpublic void testAddRDFStarObject() throws Exception {\n+\t\tTriple rdfStarTriple = vf.createTriple(bob, FOAF.NAME, nameBob);\n+\n+\t\ttestCon.add(RDF.ALT, RDF.TYPE, rdfStarTriple);\n+\n+\t\tassertThat(testCon.hasStatement(RDF.ALT, RDF.TYPE, rdfStarTriple, false)).isTrue();\n+\t}\n+\n+\t@Test\n+\tpublic void testAddRDFStarContext() throws Exception {\n+\t\tTriple rdfStarTriple = vf.createTriple(bob, FOAF.NAME, nameBob);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba6bab603485c6f88ddf2c4390d6f580786439a8"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk3MDMyMQ==", "bodyText": "If you are a complete newbie it might be unclear but if that is the case there will lots of other confusing things too. Once you realize you can't pass a Triple where a Statement is expected it should be obvious they aren't interchangeable. The multitude of methods that have \"statement\" in their name (hasStatement, getStatements, exportStatements, handleStatement etc.) are also a clear indication of what is expected or returned there.\nIf you aren't new to RDF4J it shouldn't be a problem at all.", "url": "https://github.com/eclipse/rdf4j/pull/2051#discussion_r399970321", "createdAt": "2020-03-30T07:10:48Z", "author": {"login": "avataar"}, "path": "testsuites/repository/src/main/java/org/eclipse/rdf4j/repository/RDFStarSupportTest.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/******************************************************************************* \n+ * Copyright (c) 2020 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+package org.eclipse.rdf4j.repository;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.fail;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.rdf4j.model.BNode;\n+import org.eclipse.rdf4j.model.IRI;\n+import org.eclipse.rdf4j.model.Literal;\n+import org.eclipse.rdf4j.model.Triple;\n+import org.eclipse.rdf4j.model.ValueFactory;\n+import org.eclipse.rdf4j.model.vocabulary.FOAF;\n+import org.eclipse.rdf4j.model.vocabulary.RDF;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+\n+/**\n+ * Test cases for RDF* support in the Repository.\n+ * \n+ * @author Jeen Broekstra\n+ *\n+ */\n+public abstract class RDFStarSupportTest {\n+\t/**\n+\t * Timeout all individual tests after 10 minutes.\n+\t */\n+\t@Rule\n+\tpublic Timeout to = new Timeout(10, TimeUnit.MINUTES);\n+\n+\tprivate Repository testRepository;\n+\n+\tprivate RepositoryConnection testCon;\n+\n+\tprivate ValueFactory vf;\n+\n+\tprivate BNode bob;\n+\n+\tprivate BNode alice;\n+\n+\tprivate BNode alexander;\n+\n+\tprivate Literal nameAlice;\n+\n+\tprivate Literal nameBob;\n+\n+\tprivate Literal mboxAlice;\n+\n+\tprivate Literal mboxBob;\n+\n+\tprivate IRI context1;\n+\n+\tprivate IRI context2;\n+\n+\t@Before\n+\tpublic void setUp() throws Exception {\n+\t\ttestRepository = createRepository();\n+\n+\t\ttestCon = testRepository.getConnection();\n+\t\ttestCon.clear();\n+\t\ttestCon.clearNamespaces();\n+\n+\t\tvf = testRepository.getValueFactory();\n+\n+\t\t// Initialize values\n+\t\tbob = vf.createBNode();\n+\t\talice = vf.createBNode();\n+\t\talexander = vf.createBNode();\n+\n+\t\tnameAlice = vf.createLiteral(\"Alice\");\n+\t\tnameBob = vf.createLiteral(\"Bob\");\n+\n+\t\tmboxAlice = vf.createLiteral(\"alice@example.org\");\n+\t\tmboxBob = vf.createLiteral(\"bob@example.org\");\n+\n+\t\tcontext1 = vf.createIRI(\"urn:x-local:graph1\");\n+\t\tcontext2 = vf.createIRI(\"urn:x-local:graph2\");\n+\t}\n+\n+\t@After\n+\tpublic void tearDown() throws Exception {\n+\t\ttry {\n+\t\t\ttestCon.close();\n+\t\t} finally {\n+\t\t\ttestRepository.shutDown();\n+\t\t}\n+\t}\n+\n+\t@Test\n+\tpublic void testAddRDFStarSubject() throws Exception {\n+\t\tTriple rdfStarTriple = vf.createTriple(bob, FOAF.NAME, nameBob);\n+\n+\t\ttestCon.add(rdfStarTriple, RDF.TYPE, RDF.ALT);\n+\n+\t\tassertThat(testCon.hasStatement(rdfStarTriple, RDF.TYPE, RDF.ALT, false)).isTrue();\n+\t}\n+\n+\t@Test\n+\tpublic void testAddRDFStarObject() throws Exception {\n+\t\tTriple rdfStarTriple = vf.createTriple(bob, FOAF.NAME, nameBob);\n+\n+\t\ttestCon.add(RDF.ALT, RDF.TYPE, rdfStarTriple);\n+\n+\t\tassertThat(testCon.hasStatement(RDF.ALT, RDF.TYPE, rdfStarTriple, false)).isTrue();\n+\t}\n+\n+\t@Test\n+\tpublic void testAddRDFStarContext() throws Exception {\n+\t\tTriple rdfStarTriple = vf.createTriple(bob, FOAF.NAME, nameBob);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkyOTUxNg=="}, "originalCommit": {"oid": "ba6bab603485c6f88ddf2c4390d6f580786439a8"}, "originalPosition": 119}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1554, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}