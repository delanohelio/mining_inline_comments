{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwODIwMTA2", "number": 1818, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwNzo1NDoxOVrODWw3Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwNzo1NDoxOVrODWw3Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MTk1ODM1OnYy", "diffSide": "RIGHT", "path": "tools/federation/src/main/java/org/eclipse/rdf4j/federated/FedXConnection.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwNzo1NDoxOVrOFbtR5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxNDo0NzoyOFrOFb4Rjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU5NzczNQ==", "bodyText": "We really should get a possibility inside the SAIL to access information on the Query object (e.g. in this case the includeInferred), I am using nasty workarounds by passing it as a binding", "url": "https://github.com/eclipse/rdf4j/pull/1818#discussion_r364597735", "createdAt": "2020-01-09T07:54:19Z", "author": {"login": "aschwarte10"}, "path": "tools/federation/src/main/java/org/eclipse/rdf4j/federated/FedXConnection.java", "diffHunk": "@@ -388,6 +389,21 @@ private static int getOriginalMaxExecutionTime(BindingSet b) {\n \t\treturn 0;\n \t}\n \n+\t/**\n+\t * Return the original explicit includeInferred {@link Operation#getIncludeInferred()} value.\n+\t * \n+\t * @param b\n+\t * @return the supplied value or {@link FedXConfig#getIncludeInferredDefault()}\n+\t */\n+\tprivate boolean getOriginalIncludeInferred(BindingSet b) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d223ca8ed0766fee7271c3c936c4ef1a0811f9c8"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDYzNTU3Nw==", "bodyText": "I haven't looked at this long so perhaps I'm missing something obvious, but  I don't understand why you need this at all. The includeInferred parameter is an input for evaluateInternal. Why do you need this passing arround through a config object at all?", "url": "https://github.com/eclipse/rdf4j/pull/1818#discussion_r364635577", "createdAt": "2020-01-09T09:30:46Z", "author": {"login": "jeenbroekstra"}, "path": "tools/federation/src/main/java/org/eclipse/rdf4j/federated/FedXConnection.java", "diffHunk": "@@ -388,6 +389,21 @@ private static int getOriginalMaxExecutionTime(BindingSet b) {\n \t\treturn 0;\n \t}\n \n+\t/**\n+\t * Return the original explicit includeInferred {@link Operation#getIncludeInferred()} value.\n+\t * \n+\t * @param b\n+\t * @return the supplied value or {@link FedXConfig#getIncludeInferredDefault()}\n+\t */\n+\tprivate boolean getOriginalIncludeInferred(BindingSet b) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU5NzczNQ=="}, "originalCommit": {"oid": "d223ca8ed0766fee7271c3c936c4ef1a0811f9c8"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc3MjcxNw==", "bodyText": "@jeenbroekstra thanks for this. You are absolutetly right, includeInferred is available in evaluateInternal. Did not look properly or have missed it. This will make my change a bit simpler.\nI will provide a revised version later.\nStill for the query execution time there is no way to access it inside the sail.", "url": "https://github.com/eclipse/rdf4j/pull/1818#discussion_r364772717", "createdAt": "2020-01-09T14:38:56Z", "author": {"login": "aschwarte10"}, "path": "tools/federation/src/main/java/org/eclipse/rdf4j/federated/FedXConnection.java", "diffHunk": "@@ -388,6 +389,21 @@ private static int getOriginalMaxExecutionTime(BindingSet b) {\n \t\treturn 0;\n \t}\n \n+\t/**\n+\t * Return the original explicit includeInferred {@link Operation#getIncludeInferred()} value.\n+\t * \n+\t * @param b\n+\t * @return the supplied value or {@link FedXConfig#getIncludeInferredDefault()}\n+\t */\n+\tprivate boolean getOriginalIncludeInferred(BindingSet b) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU5NzczNQ=="}, "originalCommit": {"oid": "d223ca8ed0766fee7271c3c936c4ef1a0811f9c8"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc3Nzg3MQ==", "bodyText": "Done, I amended the change and could get rid of this piece of code", "url": "https://github.com/eclipse/rdf4j/pull/1818#discussion_r364777871", "createdAt": "2020-01-09T14:47:28Z", "author": {"login": "aschwarte10"}, "path": "tools/federation/src/main/java/org/eclipse/rdf4j/federated/FedXConnection.java", "diffHunk": "@@ -388,6 +389,21 @@ private static int getOriginalMaxExecutionTime(BindingSet b) {\n \t\treturn 0;\n \t}\n \n+\t/**\n+\t * Return the original explicit includeInferred {@link Operation#getIncludeInferred()} value.\n+\t * \n+\t * @param b\n+\t * @return the supplied value or {@link FedXConfig#getIncludeInferredDefault()}\n+\t */\n+\tprivate boolean getOriginalIncludeInferred(BindingSet b) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU5NzczNQ=="}, "originalCommit": {"oid": "d223ca8ed0766fee7271c3c936c4ef1a0811f9c8"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1610, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}