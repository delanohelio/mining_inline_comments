{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1MDg3MTQx", "number": 2293, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwMDo1NDoyNlrOEBEt1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNjo1Mjo0M1rOEDUd6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTYxMzAwOnYy", "diffSide": "RIGHT", "path": "core/queryalgebra/evaluation/src/main/java/org/eclipse/rdf4j/query/algebra/evaluation/iterator/GroupIterator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwMDo1NDoyNlrOGcvqxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwNzo1NDowN1rOGcxRrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc5NDMxMA==", "bodyText": "This won't quite work. Pretty much every EvaluationStrategy implementation in RDF4J is a subclass of StrictEvaluationStrategy. Even ExtendedEvaluationStrategy.\nI think you need to do this the other way around to make it work:\n                    boolean strict = true;\n\t\tif (strategy instanceof ExtendedEvaluationStrategy) {\n\t\t\tstrict = false;\n\t\t}", "url": "https://github.com/eclipse/rdf4j/pull/2293#discussion_r432794310", "createdAt": "2020-05-30T00:54:26Z", "author": {"login": "jeenbroekstra"}, "path": "core/queryalgebra/evaluation/src/main/java/org/eclipse/rdf4j/query/algebra/evaluation/iterator/GroupIterator.java", "diffHunk": "@@ -474,10 +477,14 @@ public MinAggregate(Min operator) {\n \t\t@Override\n \t\tpublic void processAggregate(BindingSet s) throws QueryEvaluationException {\n \t\t\tValue v = evaluate(s);\n+\t\t\tboolean strict = false;\n+\t\t\tif (strategy instanceof StrictEvaluationStrategy) {\n+\t\t\t\tstrict = true;\n+\t\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0fd5268540f2edfe90cc8662f150999ef5ff485"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgxODQyOA==", "bodyText": "Okay I made the check to ExtendedEvaluationStrategy.", "url": "https://github.com/eclipse/rdf4j/pull/2293#discussion_r432818428", "createdAt": "2020-05-30T07:18:01Z", "author": {"login": "SakshiSaini17092"}, "path": "core/queryalgebra/evaluation/src/main/java/org/eclipse/rdf4j/query/algebra/evaluation/iterator/GroupIterator.java", "diffHunk": "@@ -474,10 +477,14 @@ public MinAggregate(Min operator) {\n \t\t@Override\n \t\tpublic void processAggregate(BindingSet s) throws QueryEvaluationException {\n \t\t\tValue v = evaluate(s);\n+\t\t\tboolean strict = false;\n+\t\t\tif (strategy instanceof StrictEvaluationStrategy) {\n+\t\t\t\tstrict = true;\n+\t\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc5NDMxMA=="}, "originalCommit": {"oid": "f0fd5268540f2edfe90cc8662f150999ef5ff485"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgyMDY1Mw==", "bodyText": "But It is still failing on some test cases in build.", "url": "https://github.com/eclipse/rdf4j/pull/2293#discussion_r432820653", "createdAt": "2020-05-30T07:54:07Z", "author": {"login": "SakshiSaini17092"}, "path": "core/queryalgebra/evaluation/src/main/java/org/eclipse/rdf4j/query/algebra/evaluation/iterator/GroupIterator.java", "diffHunk": "@@ -474,10 +477,14 @@ public MinAggregate(Min operator) {\n \t\t@Override\n \t\tpublic void processAggregate(BindingSet s) throws QueryEvaluationException {\n \t\t\tValue v = evaluate(s);\n+\t\t\tboolean strict = false;\n+\t\t\tif (strategy instanceof StrictEvaluationStrategy) {\n+\t\t\t\tstrict = true;\n+\t\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc5NDMxMA=="}, "originalCommit": {"oid": "f0fd5268540f2edfe90cc8662f150999ef5ff485"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzM2MjgxOnYy", "diffSide": "RIGHT", "path": "core/queryalgebra/evaluation/src/main/java/org/eclipse/rdf4j/query/algebra/evaluation/util/ValueComparator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwNjowNjoyMlrOGgCHuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxNDoyMjozMlrOGgD-aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI0MjM2MA==", "bodyText": "This is nitpicking a bit, but the convention is to name methods that return a boolean value is... rather than get.... So isStrict().", "url": "https://github.com/eclipse/rdf4j/pull/2293#discussion_r436242360", "createdAt": "2020-06-06T06:06:22Z", "author": {"login": "jeenbroekstra"}, "path": "core/queryalgebra/evaluation/src/main/java/org/eclipse/rdf4j/query/algebra/evaluation/util/ValueComparator.java", "diffHunk": "@@ -87,6 +89,14 @@ public int compare(Value o1, Value o2) {\n \t\treturn compareTriples((Triple) o1, (Triple) o2);\n \t}\n \n+\tpublic void setStrict(boolean flag) {\n+\t\tthis.strict = flag;\n+\t}\n+\n+\tpublic boolean getStrict() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "988a2e5a7c61d265c86f95a78f8ac181ebb2e64c"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3Mjc0NQ==", "bodyText": "this is done.", "url": "https://github.com/eclipse/rdf4j/pull/2293#discussion_r436272745", "createdAt": "2020-06-06T14:22:32Z", "author": {"login": "SakshiSaini17092"}, "path": "core/queryalgebra/evaluation/src/main/java/org/eclipse/rdf4j/query/algebra/evaluation/util/ValueComparator.java", "diffHunk": "@@ -87,6 +89,14 @@ public int compare(Value o1, Value o2) {\n \t\treturn compareTriples((Triple) o1, (Triple) o2);\n \t}\n \n+\tpublic void setStrict(boolean flag) {\n+\t\tthis.strict = flag;\n+\t}\n+\n+\tpublic boolean getStrict() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI0MjM2MA=="}, "originalCommit": {"oid": "988a2e5a7c61d265c86f95a78f8ac181ebb2e64c"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxOTE0MjgwOnYy", "diffSide": "RIGHT", "path": "core/queryalgebra/evaluation/src/main/java/org/eclipse/rdf4j/query/algebra/evaluation/util/ValueComparator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNjo0NDowMVrOGgQ8zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNDo1NzozMlrOGg4wqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ4NTMyNg==", "bodyText": "This isn't correct. The ValueComparator needs to fall back to its own way of ordering values if QueryEvaluationUtil throws an Exception. So we need to catch the exception, to make sure that the rest of the method gets executed if the QueryEvaluationUtil comparison fails.\nThe reason for the difference between ValueComparator and QueryEvaluationUtil is that ValueComparator is used for sorting/ordering query results, and that is never allowed to throw an error: if something is a result, we always need to find a way to order it. QueryEvaluationUtil, on the other hand, is also used for handling things likes FILTER conditions in SPARQL queries, and needs to be able to throw errors when certain comparisons aren't valid.", "url": "https://github.com/eclipse/rdf4j/pull/2293#discussion_r436485326", "createdAt": "2020-06-08T06:44:01Z", "author": {"login": "jeenbroekstra"}, "path": "core/queryalgebra/evaluation/src/main/java/org/eclipse/rdf4j/query/algebra/evaluation/util/ValueComparator.java", "diffHunk": "@@ -99,23 +109,23 @@ private int compareLiterals(Literal leftLit, Literal rightLit) {\n \t\t// Additional constraint for ORDER BY: \"A plain literal is lower\n \t\t// than an RDF literal with type xsd:string of the same lexical\n \t\t// form.\"\n-\t\tif (!(QueryEvaluationUtil.isPlainLiteral(leftLit) || QueryEvaluationUtil.isPlainLiteral(rightLit))) {\n-\t\t\ttry {\n-\t\t\t\tboolean isSmaller = QueryEvaluationUtil.compareLiterals(leftLit, rightLit, CompareOp.LT);\n \n-\t\t\t\tif (isSmaller) {\n-\t\t\t\t\treturn -1;\n-\t\t\t\t} else {\n-\t\t\t\t\tboolean isEquivalent = QueryEvaluationUtil.compareLiterals(leftLit, rightLit, CompareOp.EQ);\n-\t\t\t\t\tif (isEquivalent) {\n-\t\t\t\t\t\treturn 0;\n-\t\t\t\t\t}\n-\t\t\t\t\treturn 1;\n+\t\tif (!(QueryEvaluationUtil.isPlainLiteral(leftLit) || QueryEvaluationUtil.isPlainLiteral(rightLit))) {\n+//\t\t\ttry {\n+\t\t\tboolean isSmaller = QueryEvaluationUtil.compareLiterals(leftLit, rightLit, CompareOp.LT, strict);\n+\t\t\tif (isSmaller) {\n+\t\t\t\treturn -1;\n+\t\t\t} else {\n+\t\t\t\tboolean isEquivalent = QueryEvaluationUtil.compareLiterals(leftLit, rightLit, CompareOp.EQ, strict);\n+\t\t\t\tif (isEquivalent) {\n+\t\t\t\t\treturn 0;\n \t\t\t\t}\n-\t\t\t} catch (ValueExprEvaluationException e) {\n-\t\t\t\t// literals cannot be compared using the '<' operator, continue\n-\t\t\t\t// below\n+\t\t\t\treturn 1;\n \t\t\t}\n+//\t\t\t} catch (ValueExprEvaluationException e) {\n+//\t\t\t\t// literals cannot be compared using the '<' operator, continue\n+//\t\t\t\t// below\n+//\t\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be24d0acaa0ad66b81916d4457c02dcdf2de054c"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEzNzU3Nw==", "bodyText": "ohh Okay.. thanks for the info.", "url": "https://github.com/eclipse/rdf4j/pull/2293#discussion_r437137577", "createdAt": "2020-06-09T04:57:32Z", "author": {"login": "SakshiSaini17092"}, "path": "core/queryalgebra/evaluation/src/main/java/org/eclipse/rdf4j/query/algebra/evaluation/util/ValueComparator.java", "diffHunk": "@@ -99,23 +109,23 @@ private int compareLiterals(Literal leftLit, Literal rightLit) {\n \t\t// Additional constraint for ORDER BY: \"A plain literal is lower\n \t\t// than an RDF literal with type xsd:string of the same lexical\n \t\t// form.\"\n-\t\tif (!(QueryEvaluationUtil.isPlainLiteral(leftLit) || QueryEvaluationUtil.isPlainLiteral(rightLit))) {\n-\t\t\ttry {\n-\t\t\t\tboolean isSmaller = QueryEvaluationUtil.compareLiterals(leftLit, rightLit, CompareOp.LT);\n \n-\t\t\t\tif (isSmaller) {\n-\t\t\t\t\treturn -1;\n-\t\t\t\t} else {\n-\t\t\t\t\tboolean isEquivalent = QueryEvaluationUtil.compareLiterals(leftLit, rightLit, CompareOp.EQ);\n-\t\t\t\t\tif (isEquivalent) {\n-\t\t\t\t\t\treturn 0;\n-\t\t\t\t\t}\n-\t\t\t\t\treturn 1;\n+\t\tif (!(QueryEvaluationUtil.isPlainLiteral(leftLit) || QueryEvaluationUtil.isPlainLiteral(rightLit))) {\n+//\t\t\ttry {\n+\t\t\tboolean isSmaller = QueryEvaluationUtil.compareLiterals(leftLit, rightLit, CompareOp.LT, strict);\n+\t\t\tif (isSmaller) {\n+\t\t\t\treturn -1;\n+\t\t\t} else {\n+\t\t\t\tboolean isEquivalent = QueryEvaluationUtil.compareLiterals(leftLit, rightLit, CompareOp.EQ, strict);\n+\t\t\t\tif (isEquivalent) {\n+\t\t\t\t\treturn 0;\n \t\t\t\t}\n-\t\t\t} catch (ValueExprEvaluationException e) {\n-\t\t\t\t// literals cannot be compared using the '<' operator, continue\n-\t\t\t\t// below\n+\t\t\t\treturn 1;\n \t\t\t}\n+//\t\t\t} catch (ValueExprEvaluationException e) {\n+//\t\t\t\t// literals cannot be compared using the '<' operator, continue\n+//\t\t\t\t// below\n+//\t\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ4NTMyNg=="}, "originalCommit": {"oid": "be24d0acaa0ad66b81916d4457c02dcdf2de054c"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxOTE2MDA4OnYy", "diffSide": "RIGHT", "path": "core/queryalgebra/evaluation/src/test/java/org/eclipse/rdf4j/query/algebra/evaluation/util/ValueComparatorTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNjo1MDo0OVrOGgRG_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNTowMzozN1rOGg42cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ4NzkzNQ==", "bodyText": "You need to change this to this:\nLiteral date1 = vf.createLiteral(\"2019-09-02\", XMLSchema.DATE);\nLiteral date2 = vf.createLiteral(\"2018\", XMLSchema.GYEAR);\nassertTrue(cmp.compare(date1, date2) > 0);\n\nIt's important that date1's value is larger than date2 (so in the next year), but that its datatype, when looked at alphabetically, is smaller than that of date2. That way, when comparing in non-strict mode, the result will be that date1 is larger than date2 (because QueryEvaluationUtil can compare them), but when comparing in strict mode, date1 will be smaller than date2 (because QueryEvaluationUtil will throw an error, and ValueComparator then falls back to sorting by datatypeURI).", "url": "https://github.com/eclipse/rdf4j/pull/2293#discussion_r436487935", "createdAt": "2020-06-08T06:50:49Z", "author": {"login": "jeenbroekstra"}, "path": "core/queryalgebra/evaluation/src/test/java/org/eclipse/rdf4j/query/algebra/evaluation/util/ValueComparatorTest.java", "diffHunk": "@@ -152,4 +155,29 @@ public void testOrder3() throws Exception {\n \t\tCollections.sort(valueList, cmp);\n \t\tassertTrue(valueList.indexOf(int1000) < valueList.indexOf(float2000));\n \t}\n+\n+\t@Test\n+\tpublic void testNonStrictComparisons() throws Exception {\n+\t\tcmp.setStrict(false);\n+\t\tassertTrue(cmp.isStrict() == false);\n+\t\tLiteral date1 = vf.createLiteral(\"2019-09-02\", XMLSchema.DATE);\n+\t\tLiteral date2 = vf.createLiteral(\"2020\", XMLSchema.GYEAR);\n+\t\tassertTrue(cmp.compare(date1, date2) < 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be24d0acaa0ad66b81916d4457c02dcdf2de054c"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEzOTA1OA==", "bodyText": "okay, now I understood the problem, better. Thanks again. Updated the test cases in my latest commit.", "url": "https://github.com/eclipse/rdf4j/pull/2293#discussion_r437139058", "createdAt": "2020-06-09T05:03:37Z", "author": {"login": "SakshiSaini17092"}, "path": "core/queryalgebra/evaluation/src/test/java/org/eclipse/rdf4j/query/algebra/evaluation/util/ValueComparatorTest.java", "diffHunk": "@@ -152,4 +155,29 @@ public void testOrder3() throws Exception {\n \t\tCollections.sort(valueList, cmp);\n \t\tassertTrue(valueList.indexOf(int1000) < valueList.indexOf(float2000));\n \t}\n+\n+\t@Test\n+\tpublic void testNonStrictComparisons() throws Exception {\n+\t\tcmp.setStrict(false);\n+\t\tassertTrue(cmp.isStrict() == false);\n+\t\tLiteral date1 = vf.createLiteral(\"2019-09-02\", XMLSchema.DATE);\n+\t\tLiteral date2 = vf.createLiteral(\"2020\", XMLSchema.GYEAR);\n+\t\tassertTrue(cmp.compare(date1, date2) < 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ4NzkzNQ=="}, "originalCommit": {"oid": "be24d0acaa0ad66b81916d4457c02dcdf2de054c"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxOTE2NTIyOnYy", "diffSide": "RIGHT", "path": "core/queryalgebra/evaluation/src/test/java/org/eclipse/rdf4j/query/algebra/evaluation/util/ValueComparatorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNjo1Mjo0M1rOGgRJ-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNjo1Mjo0M1rOGgRJ-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ4ODY5Ng==", "bodyText": "You need to change this to something like this:\nLiteral date1 = vf.createLiteral(\"2019-09-02\", XMLSchema.DATE);\nLiteral date2 = vf.createLiteral(\"2018\", XMLSchema.GYEAR);\nassertTrue(cmp.compare(date1, date2) < 0);\n\nIn strict mode, QueryEvaluationUtil will throw an exception. ValueComparator catches this exception, falls back to doings its own comparison, and orders them in alphabetical order on datatype.\nIn other words: by choosing the values and datatypes of our two literals very carefully, we make sure that strict mode will give a different comparison result than non-strict mode.", "url": "https://github.com/eclipse/rdf4j/pull/2293#discussion_r436488696", "createdAt": "2020-06-08T06:52:43Z", "author": {"login": "jeenbroekstra"}, "path": "core/queryalgebra/evaluation/src/test/java/org/eclipse/rdf4j/query/algebra/evaluation/util/ValueComparatorTest.java", "diffHunk": "@@ -152,4 +155,29 @@ public void testOrder3() throws Exception {\n \t\tCollections.sort(valueList, cmp);\n \t\tassertTrue(valueList.indexOf(int1000) < valueList.indexOf(float2000));\n \t}\n+\n+\t@Test\n+\tpublic void testNonStrictComparisons() throws Exception {\n+\t\tcmp.setStrict(false);\n+\t\tassertTrue(cmp.isStrict() == false);\n+\t\tLiteral date1 = vf.createLiteral(\"2019-09-02\", XMLSchema.DATE);\n+\t\tLiteral date2 = vf.createLiteral(\"2020\", XMLSchema.GYEAR);\n+\t\tassertTrue(cmp.compare(date1, date2) < 0);\n+\t}\n+\n+\t@Test\n+\tpublic void testStrictComparisons() throws Exception {\n+\t\tcmp.setStrict(true);\n+\t\tassertTrue(cmp.isStrict() == true);\n+\t\tLiteral date1 = vf.createLiteral(\"2019-09-02\", XMLSchema.DATE);\n+\t\tLiteral date2 = vf.createLiteral(\"2020\", XMLSchema.GYEAR);\n+\t\ttry {\n+\t\t\tcmp.compare(date1, date2);\n+\t\t\tfail(\"Did not find expected exception\");\n+\t\t} catch (ValueExprEvaluationException e) {\n+\t\t\tassertEquals(true, e.getMessage()\n+\t\t\t\t\t.contains(\n+\t\t\t\t\t\t\t\"Only literals with compatible, ordered datatypes can be compared using <, <=, > and >= operators\"));\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be24d0acaa0ad66b81916d4457c02dcdf2de054c"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1415, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}