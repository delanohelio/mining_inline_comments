{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0NDUxNTk4", "number": 2288, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjo1OTowN1rOEAs_aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjo1OTowN1rOEAs_aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTcyNTg1OnYy", "diffSide": "RIGHT", "path": "core/query/src/main/java/org/eclipse/rdf4j/query/QueryResults.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjo1OTowN1rOGcJhAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNjo1NDoyOFrOGcQ2Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE2OTIxOQ==", "bodyText": "The code is correct, but it is possible to write it in a slightly shorter way, since in this case the compiler already knows the result type: I'd suggest to use return ArrayList<>(); instead of return ArrayList<Value>()", "url": "https://github.com/eclipse/rdf4j/pull/2288#discussion_r432169219", "createdAt": "2020-05-28T22:59:07Z", "author": {"login": "barthanssens"}, "path": "core/query/src/main/java/org/eclipse/rdf4j/query/QueryResults.java", "diffHunk": "@@ -87,6 +88,24 @@ public static Model asModel(CloseableIteration<? extends Statement, ? extends RD\n \t\treturn model;\n \t}\n \n+\t/**\n+\t * Returns a list of values of a particular variable out of the QueryResult.\n+\t *\n+\t * @param result\n+\t * @param var    variable for which list of values needs to be returned\n+\t * @return a list of Values of var\n+\t * @throws QueryEvaluationException\n+\t */\n+\tpublic static List<Value> getAllValues(TupleQueryResult result, String var) throws QueryEvaluationException {\n+\t\ttry (Stream<BindingSet> stream = result.stream()) {\n+\t\t\tif (result.getBindingNames().contains(var)) {\n+\t\t\t\treturn stream.map(bs -> bs.getValue(var)).collect(Collectors.toList());\n+\t\t\t} else {\n+\t\t\t\treturn new ArrayList<Value>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc326a0b12163f9c0183c2d5273395b6347df1b2"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE3MzI5Mw==", "bodyText": "A second way to reduce the amount of code even further would be to use a ternary operator, but that's just a matter of taste (some people like this style, some don't because it can be harder to read).\nI.e.\nreturn result.getBindingNames().contains(var) \n          ? stream.map(..\n          : new ArrayList<>();", "url": "https://github.com/eclipse/rdf4j/pull/2288#discussion_r432173293", "createdAt": "2020-05-28T23:11:54Z", "author": {"login": "barthanssens"}, "path": "core/query/src/main/java/org/eclipse/rdf4j/query/QueryResults.java", "diffHunk": "@@ -87,6 +88,24 @@ public static Model asModel(CloseableIteration<? extends Statement, ? extends RD\n \t\treturn model;\n \t}\n \n+\t/**\n+\t * Returns a list of values of a particular variable out of the QueryResult.\n+\t *\n+\t * @param result\n+\t * @param var    variable for which list of values needs to be returned\n+\t * @return a list of Values of var\n+\t * @throws QueryEvaluationException\n+\t */\n+\tpublic static List<Value> getAllValues(TupleQueryResult result, String var) throws QueryEvaluationException {\n+\t\ttry (Stream<BindingSet> stream = result.stream()) {\n+\t\t\tif (result.getBindingNames().contains(var)) {\n+\t\t\t\treturn stream.map(bs -> bs.getValue(var)).collect(Collectors.toList());\n+\t\t\t} else {\n+\t\t\t\treturn new ArrayList<Value>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE2OTIxOQ=="}, "originalCommit": {"oid": "cc326a0b12163f9c0183c2d5273395b6347df1b2"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI1NzM4MA==", "bodyText": "Thank you @barthanssens . I will make these changes.", "url": "https://github.com/eclipse/rdf4j/pull/2288#discussion_r432257380", "createdAt": "2020-05-29T05:05:19Z", "author": {"login": "navdhaagarwal"}, "path": "core/query/src/main/java/org/eclipse/rdf4j/query/QueryResults.java", "diffHunk": "@@ -87,6 +88,24 @@ public static Model asModel(CloseableIteration<? extends Statement, ? extends RD\n \t\treturn model;\n \t}\n \n+\t/**\n+\t * Returns a list of values of a particular variable out of the QueryResult.\n+\t *\n+\t * @param result\n+\t * @param var    variable for which list of values needs to be returned\n+\t * @return a list of Values of var\n+\t * @throws QueryEvaluationException\n+\t */\n+\tpublic static List<Value> getAllValues(TupleQueryResult result, String var) throws QueryEvaluationException {\n+\t\ttry (Stream<BindingSet> stream = result.stream()) {\n+\t\t\tif (result.getBindingNames().contains(var)) {\n+\t\t\t\treturn stream.map(bs -> bs.getValue(var)).collect(Collectors.toList());\n+\t\t\t} else {\n+\t\t\t\treturn new ArrayList<Value>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE2OTIxOQ=="}, "originalCommit": {"oid": "cc326a0b12163f9c0183c2d5273395b6347df1b2"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI4OTM0Mg==", "bodyText": "Collections.emptyList() is a great option if we need an empty list.", "url": "https://github.com/eclipse/rdf4j/pull/2288#discussion_r432289342", "createdAt": "2020-05-29T06:54:28Z", "author": {"login": "hmottestad"}, "path": "core/query/src/main/java/org/eclipse/rdf4j/query/QueryResults.java", "diffHunk": "@@ -87,6 +88,24 @@ public static Model asModel(CloseableIteration<? extends Statement, ? extends RD\n \t\treturn model;\n \t}\n \n+\t/**\n+\t * Returns a list of values of a particular variable out of the QueryResult.\n+\t *\n+\t * @param result\n+\t * @param var    variable for which list of values needs to be returned\n+\t * @return a list of Values of var\n+\t * @throws QueryEvaluationException\n+\t */\n+\tpublic static List<Value> getAllValues(TupleQueryResult result, String var) throws QueryEvaluationException {\n+\t\ttry (Stream<BindingSet> stream = result.stream()) {\n+\t\t\tif (result.getBindingNames().contains(var)) {\n+\t\t\t\treturn stream.map(bs -> bs.getValue(var)).collect(Collectors.toList());\n+\t\t\t} else {\n+\t\t\t\treturn new ArrayList<Value>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE2OTIxOQ=="}, "originalCommit": {"oid": "cc326a0b12163f9c0183c2d5273395b6347df1b2"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1409, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}