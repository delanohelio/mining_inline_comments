{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4OTUyMzAy", "number": 2229, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxMToxMToxNlrOD9FMgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwMTowMDo1M1rOEFXLfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Mzc0ODUwOnYy", "diffSide": "RIGHT", "path": "core/sail/shacl/src/test/resources/shaclDatatypeSparqlTarget.ttl", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxMToxMToxNlrOGWZxoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxMToxMToxNlrOGWZxoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE0NDE2MA==", "bodyText": "Example of the SPARQL target support.\nNote: You have to include prefixes in the string. We don't support sh:prefixes!", "url": "https://github.com/eclipse/rdf4j/pull/2229#discussion_r426144160", "createdAt": "2020-05-16T11:11:16Z", "author": {"login": "hmottestad"}, "path": "core/sail/shacl/src/test/resources/shaclDatatypeSparqlTarget.ttl", "diffHunk": "@@ -0,0 +1,34 @@\n+@base <http://example.com/ns> .\n+@prefix ex: <http://example.com/ns#> .\n+@prefix owl: <http://www.w3.org/2002/07/owl#> .\n+@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\n+@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .\n+@prefix sh: <http://www.w3.org/ns/shacl#> .\n+@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\n+@prefix foaf: <http://xmlns.com/foaf/0.1/>.\n+\n+ex:PersonShape\n+\ta sh:NodeShape  ;\n+\t\tsh:target [\n+                \t\ta sh:SPARQLTarget ;\n+                \t\tsh:select \"\"\"\n+                \t\t        PREFIX ex: <http://example.com/ns#>\n+                                        PREFIX owl: <http://www.w3.org/2002/07/owl#>\n+                                        PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n+                                        PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n+                                        PREFIX sh: <http://www.w3.org/ns/shacl#>\n+                                        PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n+\n+                \t\t\tSELECT ?this\n+                \t\t\tWHERE {\n+                \t\t\t\t?this a rdfs:Resource .\n+                \t\t\t}\n+                \t\t\t\"\"\" ;\n+                ] ;\n+\n+\tsh:property [\n+\t\tsh:path foaf:age ;\n+\t\tsh:datatype xsd:int ;\n+\n+\t] .\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47127dfb653f63cb3c1acf541642c1374c1fe5b8"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Mzc0OTAwOnYy", "diffSide": "RIGHT", "path": "core/sail/shacl/src/test/resources/test-cases/class/predicateObjectTarget/shacl.ttl", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxMToxMjoyNlrOGWZx5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxMToxMjoyNlrOGWZx5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE0NDIyOQ==", "bodyText": "An example of the new predicate+object target support.\nYou can have as many rdf4j-sh:compoundTarget as you want, but each one can only have a single rdf4j-sh:targetPredicate and single rdf4j-sh:targetObject. For the time being at least.", "url": "https://github.com/eclipse/rdf4j/pull/2229#discussion_r426144229", "createdAt": "2020-05-16T11:12:26Z", "author": {"login": "hmottestad"}, "path": "core/sail/shacl/src/test/resources/test-cases/class/predicateObjectTarget/shacl.ttl", "diffHunk": "@@ -0,0 +1,27 @@\n+@base <http://example.com/ns> .\n+@prefix ex: <http://example.com/ns#> .\n+@prefix owl: <http://www.w3.org/2002/07/owl#> .\n+@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\n+@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .\n+@prefix sh: <http://www.w3.org/ns/shacl#> .\n+@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\n+@prefix rdf4j-sh: <http://rdf4j.org/schema/rdf4j-shacl#> .\n+\n+ex:PersonShape\n+\ta sh:NodeShape  ;\n+\n+        rdf4j-sh:compoundTarget [\n+\t        rdf4j-sh:targetPredicate rdf:type;\n+\t        rdf4j-sh:targetObject ex:Person\n+\t];\n+\n+        rdf4j-sh:compoundTarget [\n+\t        rdf4j-sh:targetPredicate rdf:type;\n+\t        rdf4j-sh:targetObject ex:SecondTarget\n+\t];\n+\n+\tsh:property [\n+\t\tsh:path ex:knows ;\n+\t\tsh:and ( [sh:class ex:Person]  [sh:class ex:Human])\n+\t] .\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47127dfb653f63cb3c1acf541642c1374c1fe5b8"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Mzc1MDc3OnYy", "diffSide": "RIGHT", "path": "core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/benchmark/Main.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxMToxNTowMlrOGWZytw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxMToxNTowMlrOGWZytw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE0NDQzOQ==", "bodyText": "Use this main method to compare performance between SPARQL targets and predicate+object targets. The benchmarks test how the number of targets already present in the database affect the performance of a standard number (and size) of transactions.", "url": "https://github.com/eclipse/rdf4j/pull/2229#discussion_r426144439", "createdAt": "2020-05-16T11:15:02Z", "author": {"login": "hmottestad"}, "path": "core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/benchmark/Main.java", "diffHunk": "@@ -24,7 +24,7 @@\n \t}\n \n \tpublic static void main(String[] args) throws RunnerException {\n-\t\tOptions opt = new OptionsBuilder().include(\"\")\n+\t\tOptions opt = new OptionsBuilder().include(\"TargetBenchmarkInitialData.*\")\n \n \t\t\t\t// .addProfiler(\"stack\", \"lines=20;period=1;top=20\")\n \t\t\t\t.build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47127dfb653f63cb3c1acf541642c1374c1fe5b8"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTk5MjQ3OnYy", "diffSide": "RIGHT", "path": "core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/AbstractShaclTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwODo1NzozMFrOGaU-Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwOToyNzo0OFrOGaWGFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI1OTc0Ng==", "bodyText": "I think this is what causes your current compile failure - on the develop branch, the import for XMLSchema in this class has been replaced with XSD. CI tries to build the PR after merging, and fails because it misses the import.\nEasiest way to fix is to rebase and then replace this reference with XSD.", "url": "https://github.com/eclipse/rdf4j/pull/2229#discussion_r430259746", "createdAt": "2020-05-26T08:57:30Z", "author": {"login": "jeenbroekstra"}, "path": "core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/AbstractShaclTest.java", "diffHunk": "@@ -273,7 +295,7 @@ static void runTestCase(String shaclPath, String dataPath, ExpectedResult expect\n \t\t\t\tconnection.begin(isolationLevel);\n \t\t\t\tValueFactory vf = connection.getValueFactory();\n \t\t\t\tconnection.add(vf.createBNode(), vf.createIRI(\"http://example.com/jkhsdfiu3r2y9fjr3u0\"),\n-\t\t\t\t\t\tvf.createLiteral(\"auto-generated!\"), vf.createBNode());\n+\t\t\t\t\t\tvf.createLiteral(\"123\", XMLSchema.INTEGER), vf.createBNode());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef3c62cfa33e03b26291cc8e2edf5c6948e4c475"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI3ODE2NQ==", "bodyText": "Ahh. That makes sense. The import gets changed to XSD, but the reference XMLSchema.INTEGER can't resolve.", "url": "https://github.com/eclipse/rdf4j/pull/2229#discussion_r430278165", "createdAt": "2020-05-26T09:27:48Z", "author": {"login": "hmottestad"}, "path": "core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/AbstractShaclTest.java", "diffHunk": "@@ -273,7 +295,7 @@ static void runTestCase(String shaclPath, String dataPath, ExpectedResult expect\n \t\t\t\tconnection.begin(isolationLevel);\n \t\t\t\tValueFactory vf = connection.getValueFactory();\n \t\t\t\tconnection.add(vf.createBNode(), vf.createIRI(\"http://example.com/jkhsdfiu3r2y9fjr3u0\"),\n-\t\t\t\t\t\tvf.createLiteral(\"auto-generated!\"), vf.createBNode());\n+\t\t\t\t\t\tvf.createLiteral(\"123\", XMLSchema.INTEGER), vf.createBNode());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI1OTc0Ng=="}, "originalCommit": {"oid": "ef3c62cfa33e03b26291cc8e2edf5c6948e4c475"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MDAwMjUwOnYy", "diffSide": "RIGHT", "path": "core/model/src/main/java/org/eclipse/rdf4j/model/vocabulary/DASH.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwOTowMDowNFrOGaVEkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwOTowMDowNFrOGaVEkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI2MTM5NQ==", "bodyText": "This copyright header looks a bit odd: it's missing the full lines of asterisks at beginning and end.", "url": "https://github.com/eclipse/rdf4j/pull/2229#discussion_r430261395", "createdAt": "2020-05-26T09:00:04Z", "author": {"login": "jeenbroekstra"}, "path": "core/model/src/main/java/org/eclipse/rdf4j/model/vocabulary/DASH.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/**\n+ * Copyright (c) 2020 Eclipse RDF4J contributors, and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef3c62cfa33e03b26291cc8e2edf5c6948e4c475"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NjI1NTA3OnYy", "diffSide": "RIGHT", "path": "core/model/src/main/java/org/eclipse/rdf4j/model/vocabulary/DASH.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQyMDowMzozMFrOGc1EoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQyMDowMzozMFrOGc1EoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg4Mjg0OA==", "bodyText": "I have chosen to go with the more natural naming rather than the forced uppercase.", "url": "https://github.com/eclipse/rdf4j/pull/2229#discussion_r432882848", "createdAt": "2020-05-30T20:03:30Z", "author": {"login": "hmottestad"}, "path": "core/model/src/main/java/org/eclipse/rdf4j/model/vocabulary/DASH.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+\n+package org.eclipse.rdf4j.model.vocabulary;\n+\n+import org.eclipse.rdf4j.model.IRI;\n+import org.eclipse.rdf4j.model.Namespace;\n+import org.eclipse.rdf4j.model.ValueFactory;\n+import org.eclipse.rdf4j.model.impl.SimpleNamespace;\n+import org.eclipse.rdf4j.model.impl.SimpleValueFactory;\n+\n+public class DASH {\n+\n+\tpublic static final String NAMESPACE = \"http://datashapes.org/dash#\";\n+\n+\tpublic static final String PREFIX = \"dash\";\n+\n+\t/**\n+\t * An immutable {@link Namespace} constant that represents the namespace.\n+\t */\n+\tpublic static final Namespace NS = new SimpleNamespace(PREFIX, NAMESPACE);\n+\n+\tstatic private final ValueFactory vf = SimpleValueFactory.getInstance();\n+\n+\tpublic static final IRI AllObjectsTarget = createIRI(\"AllObjectsTarget\");\n+\tpublic static final IRI AllSubjectsTarget = createIRI(\"AllSubjectsTarget\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3049c16f8bc3b9ab6c7431c92da01094cc2f38c"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NjI1NTM4OnYy", "diffSide": "RIGHT", "path": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/AST/AbstractSimplePropertyShape.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQyMDowNDoyNFrOGc1Eyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQyMDowNDoyNFrOGc1Eyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg4Mjg5MQ==", "bodyText": "This is to be able to make sure that the getTargetFilter on NodeShape only operates on the base connection.", "url": "https://github.com/eclipse/rdf4j/pull/2229#discussion_r432882891", "createdAt": "2020-05-30T20:04:24Z", "author": {"login": "hmottestad"}, "path": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/AST/AbstractSimplePropertyShape.java", "diffHunk": "@@ -101,7 +101,7 @@ static public PlanNode getGenericSingleObjectPlan(ConnectionsGroup connectionsGr\n \n \t\t\tPlanNode discardedRight = innerJoin.getDiscardedRight(BufferedPlanNode.class);\n \n-\t\t\tPlanNode typeFilterPlan = nodeShape.getTargetFilter(connectionsGroup.getBaseConnection(), discardedRight);\n+\t\t\tPlanNode typeFilterPlan = nodeShape.getTargetFilter(connectionsGroup, discardedRight);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3049c16f8bc3b9ab6c7431c92da01094cc2f38c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NjI1NjQzOnYy", "diffSide": "RIGHT", "path": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/AST/AllObjectsTarget.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQyMDowNTo0MVrOGc1FRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQyMDowNTo0MVrOGc1FRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg4MzAxMw==", "bodyText": "Removed doesn't guarantee to only return this that have been removed, but must return everything that could potentially have been removed. So this implementation will be fine.", "url": "https://github.com/eclipse/rdf4j/pull/2229#discussion_r432883013", "createdAt": "2020-05-30T20:05:41Z", "author": {"login": "hmottestad"}, "path": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/AST/AllObjectsTarget.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*******************************************************************************\n+ * Copyright (c) 2019 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+\n+package org.eclipse.rdf4j.sail.shacl.AST;\n+\n+import java.util.UUID;\n+\n+import org.eclipse.rdf4j.model.Resource;\n+import org.eclipse.rdf4j.repository.sail.SailRepositoryConnection;\n+import org.eclipse.rdf4j.sail.SailConnection;\n+import org.eclipse.rdf4j.sail.shacl.ConnectionsGroup;\n+import org.eclipse.rdf4j.sail.shacl.RdfsSubClassOfReasoner;\n+import org.eclipse.rdf4j.sail.shacl.ShaclSail;\n+import org.eclipse.rdf4j.sail.shacl.Stats;\n+import org.eclipse.rdf4j.sail.shacl.planNodes.ExternalFilterIsObject;\n+import org.eclipse.rdf4j.sail.shacl.planNodes.PlanNode;\n+import org.eclipse.rdf4j.sail.shacl.planNodes.PlanNodeProvider;\n+import org.eclipse.rdf4j.sail.shacl.planNodes.Sort;\n+import org.eclipse.rdf4j.sail.shacl.planNodes.TrimTuple;\n+import org.eclipse.rdf4j.sail.shacl.planNodes.UnBufferedPlanNode;\n+import org.eclipse.rdf4j.sail.shacl.planNodes.Unique;\n+import org.eclipse.rdf4j.sail.shacl.planNodes.UnorderedSelect;\n+\n+/**\n+ * sh:targetObjectsOf\n+ *\n+ * @author H\u00e5vard Mikkelsen Ottestad\n+ */\n+public class AllObjectsTarget extends NodeShape {\n+\n+\tAllObjectsTarget(Resource id, ShaclSail shaclSail, SailRepositoryConnection connection, boolean deactivated) {\n+\t\tsuper(id, shaclSail, connection, deactivated);\n+\t}\n+\n+\t@Override\n+\tpublic PlanNode getPlan(ConnectionsGroup connectionsGroup, boolean printPlans,\n+\t\t\tPlanNodeProvider overrideTargetNode, boolean negateThisPlan, boolean negateSubPlans) {\n+\t\tassert !negateSubPlans : \"There are no subplans!\";\n+\t\tassert !negateThisPlan;\n+\n+\t\tPlanNode select = new Unique(\n+\t\t\t\tnew Sort(\n+\t\t\t\t\t\tnew TrimTuple(\n+\t\t\t\t\t\t\t\tnew UnorderedSelect(\n+\t\t\t\t\t\t\t\t\t\tconnectionsGroup.getBaseConnection(),\n+\t\t\t\t\t\t\t\t\t\tnull,\n+\t\t\t\t\t\t\t\t\t\tnull,\n+\t\t\t\t\t\t\t\t\t\tnull,\n+\t\t\t\t\t\t\t\t\t\tUnorderedSelect.OutputPattern.ObjectPredicateSubject),\n+\t\t\t\t\t\t\t\t0,\n+\t\t\t\t\t\t\t\t1)));\n+\n+\t\treturn connectionsGroup.getCachedNodeFor(select);\n+\t}\n+\n+\t@Override\n+\tpublic PlanNode getPlanAddedStatements(ConnectionsGroup connectionsGroup,\n+\t\t\tPlaneNodeWrapper planeNodeWrapper) {\n+\n+\t\tPlanNode select = new Unique(\n+\t\t\t\tnew Sort(\n+\t\t\t\t\t\tnew TrimTuple(\n+\t\t\t\t\t\t\t\tnew UnorderedSelect(\n+\t\t\t\t\t\t\t\t\t\tconnectionsGroup.getAddedStatements(),\n+\t\t\t\t\t\t\t\t\t\tnull,\n+\t\t\t\t\t\t\t\t\t\tnull,\n+\t\t\t\t\t\t\t\t\t\tnull,\n+\t\t\t\t\t\t\t\t\t\tUnorderedSelect.OutputPattern.ObjectPredicateSubject),\n+\t\t\t\t\t\t\t\t0,\n+\t\t\t\t\t\t\t\t1)));\n+\n+\t\treturn connectionsGroup.getCachedNodeFor(select);\n+\t}\n+\n+\t@Override\n+\tpublic PlanNode getPlanRemovedStatements(ConnectionsGroup connectionsGroup,\n+\t\t\tPlaneNodeWrapper planeNodeWrapper) {\n+\t\tPlanNode select = new Unique(\n+\t\t\t\tnew Sort(\n+\t\t\t\t\t\tnew TrimTuple(\n+\t\t\t\t\t\t\t\tnew UnorderedSelect(\n+\t\t\t\t\t\t\t\t\t\tconnectionsGroup.getRemovedStatements(),\n+\t\t\t\t\t\t\t\t\t\tnull,\n+\t\t\t\t\t\t\t\t\t\tnull,\n+\t\t\t\t\t\t\t\t\t\tnull,\n+\t\t\t\t\t\t\t\t\t\tUnorderedSelect.OutputPattern.ObjectPredicateSubject),\n+\t\t\t\t\t\t\t\t0,\n+\t\t\t\t\t\t\t\t1)));\n+\n+\t\treturn connectionsGroup.getCachedNodeFor(select);\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3049c16f8bc3b9ab6c7431c92da01094cc2f38c"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NjI1NzQ1OnYy", "diffSide": "RIGHT", "path": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/AST/AllSubjectsTarget.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQyMDowNzozOVrOGc1FzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQyMDowNzozOVrOGc1FzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg4MzE0OQ==", "bodyText": "AllSubjectsTarget is the only place where we are supporting sh:filterShape currently.", "url": "https://github.com/eclipse/rdf4j/pull/2229#discussion_r432883149", "createdAt": "2020-05-30T20:07:39Z", "author": {"login": "hmottestad"}, "path": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/AST/AllSubjectsTarget.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/*******************************************************************************\n+ * Copyright (c) 2019 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+\n+package org.eclipse.rdf4j.sail.shacl.AST;\n+\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.rdf4j.model.IRI;\n+import org.eclipse.rdf4j.model.Resource;\n+import org.eclipse.rdf4j.query.algebra.StatementPattern;\n+import org.eclipse.rdf4j.repository.sail.SailRepositoryConnection;\n+import org.eclipse.rdf4j.sail.SailConnection;\n+import org.eclipse.rdf4j.sail.shacl.ConnectionsGroup;\n+import org.eclipse.rdf4j.sail.shacl.RdfsSubClassOfReasoner;\n+import org.eclipse.rdf4j.sail.shacl.ShaclSail;\n+import org.eclipse.rdf4j.sail.shacl.Stats;\n+import org.eclipse.rdf4j.sail.shacl.planNodes.BulkedExternalInnerJoin;\n+import org.eclipse.rdf4j.sail.shacl.planNodes.EmptyNode;\n+import org.eclipse.rdf4j.sail.shacl.planNodes.ExternalFilterByQuery;\n+import org.eclipse.rdf4j.sail.shacl.planNodes.ExternalFilterIsSubject;\n+import org.eclipse.rdf4j.sail.shacl.planNodes.PlanNode;\n+import org.eclipse.rdf4j.sail.shacl.planNodes.PlanNodeProvider;\n+import org.eclipse.rdf4j.sail.shacl.planNodes.Select;\n+import org.eclipse.rdf4j.sail.shacl.planNodes.Sort;\n+import org.eclipse.rdf4j.sail.shacl.planNodes.TrimTuple;\n+import org.eclipse.rdf4j.sail.shacl.planNodes.UnBufferedPlanNode;\n+import org.eclipse.rdf4j.sail.shacl.planNodes.UnionNode;\n+import org.eclipse.rdf4j.sail.shacl.planNodes.Unique;\n+import org.eclipse.rdf4j.sail.shacl.planNodes.UnorderedSelect;\n+\n+/**\n+ * sh:targetObjectsOf\n+ *\n+ * @author H\u00e5vard Mikkelsen Ottestad\n+ */\n+public class AllSubjectsTarget extends NodeShape {\n+\n+\tNodeShape filterShape;\n+\n+\tAllSubjectsTarget(Resource id, ShaclSail shaclSail, SailRepositoryConnection connection, boolean deactivated,\n+\t\t\tResource filterShape) {\n+\t\tsuper(id, shaclSail, connection, deactivated);\n+\t\tif (shaclSail.isExperimentalFilterShapeSupport() && filterShape != null) {\n+\t\t\tthis.filterShape = new NodeShape(filterShape, shaclSail, connection, false);\n+\t\t}\n+\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3049c16f8bc3b9ab6c7431c92da01094cc2f38c"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDU4MTEwOnYy", "diffSide": "RIGHT", "path": "core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/ExperimentalFeaturesTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwMTowMDo1M1rOGjgnVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNTo1OTowN1rOGjkHeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg4NzcwMw==", "bodyText": "This test contains no assertions - what exactly are we testing here? Perhaps clarify with a comment.", "url": "https://github.com/eclipse/rdf4j/pull/2229#discussion_r439887703", "createdAt": "2020-06-15T01:00:53Z", "author": {"login": "jeenbroekstra"}, "path": "core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/ExperimentalFeaturesTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+\n+package org.eclipse.rdf4j.sail.shacl;\n+\n+import org.eclipse.rdf4j.model.BNode;\n+import org.eclipse.rdf4j.model.IRI;\n+import org.eclipse.rdf4j.model.impl.SimpleValueFactory;\n+import org.eclipse.rdf4j.model.vocabulary.RDF;\n+import org.eclipse.rdf4j.repository.RepositoryException;\n+import org.eclipse.rdf4j.repository.sail.SailRepository;\n+import org.eclipse.rdf4j.repository.sail.SailRepositoryConnection;\n+import org.junit.AfterClass;\n+import org.junit.Test;\n+\n+/**\n+ * @author H\u00e5vard Ottestad\n+ */\n+public class ExperimentalFeaturesTest {\n+\n+\tSimpleValueFactory vf = SimpleValueFactory.getInstance();\n+\tIRI ex_knows = vf.createIRI(\"http://example.com/ns#knows\");\n+\tIRI ex_Person = vf.createIRI(\"http://example.com/ns#Person\");\n+\n+\t@AfterClass\n+\tpublic static void afterClass() {\n+\t\tGlobalValidationExecutionLogging.loggingEnabled = false;\n+\t}\n+\n+\t@Test\n+\tpublic void testDash() throws Exception {\n+\n+\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"test-cases/class/allSubjects/shacl.ttl\",\n+\t\t\t\tfalse);\n+\n+\t\ttry (SailRepositoryConnection connection = shaclRepository.getConnection()) {\n+\t\t\tconnection.begin();\n+\t\t\tconnection.add(vf.createBNode(), ex_knows, vf.createBNode());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81cc711fd51f72663273e8f401c48a3417904426"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk0MzU0OA==", "bodyText": "There are two sets of tests that check that the experimental features are disabled by default and that you can enable them after you've added you shapes. Essentially the tests are \"without the experimental features enabled there should be no shacl exception\".", "url": "https://github.com/eclipse/rdf4j/pull/2229#discussion_r439943548", "createdAt": "2020-06-15T05:53:36Z", "author": {"login": "hmottestad"}, "path": "core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/ExperimentalFeaturesTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+\n+package org.eclipse.rdf4j.sail.shacl;\n+\n+import org.eclipse.rdf4j.model.BNode;\n+import org.eclipse.rdf4j.model.IRI;\n+import org.eclipse.rdf4j.model.impl.SimpleValueFactory;\n+import org.eclipse.rdf4j.model.vocabulary.RDF;\n+import org.eclipse.rdf4j.repository.RepositoryException;\n+import org.eclipse.rdf4j.repository.sail.SailRepository;\n+import org.eclipse.rdf4j.repository.sail.SailRepositoryConnection;\n+import org.junit.AfterClass;\n+import org.junit.Test;\n+\n+/**\n+ * @author H\u00e5vard Ottestad\n+ */\n+public class ExperimentalFeaturesTest {\n+\n+\tSimpleValueFactory vf = SimpleValueFactory.getInstance();\n+\tIRI ex_knows = vf.createIRI(\"http://example.com/ns#knows\");\n+\tIRI ex_Person = vf.createIRI(\"http://example.com/ns#Person\");\n+\n+\t@AfterClass\n+\tpublic static void afterClass() {\n+\t\tGlobalValidationExecutionLogging.loggingEnabled = false;\n+\t}\n+\n+\t@Test\n+\tpublic void testDash() throws Exception {\n+\n+\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"test-cases/class/allSubjects/shacl.ttl\",\n+\t\t\t\tfalse);\n+\n+\t\ttry (SailRepositoryConnection connection = shaclRepository.getConnection()) {\n+\t\t\tconnection.begin();\n+\t\t\tconnection.add(vf.createBNode(), ex_knows, vf.createBNode());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg4NzcwMw=="}, "originalCommit": {"oid": "81cc711fd51f72663273e8f401c48a3417904426"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk0NTA4Mg==", "bodyText": "I will add a comment to the test", "url": "https://github.com/eclipse/rdf4j/pull/2229#discussion_r439945082", "createdAt": "2020-06-15T05:59:07Z", "author": {"login": "hmottestad"}, "path": "core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/ExperimentalFeaturesTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+\n+package org.eclipse.rdf4j.sail.shacl;\n+\n+import org.eclipse.rdf4j.model.BNode;\n+import org.eclipse.rdf4j.model.IRI;\n+import org.eclipse.rdf4j.model.impl.SimpleValueFactory;\n+import org.eclipse.rdf4j.model.vocabulary.RDF;\n+import org.eclipse.rdf4j.repository.RepositoryException;\n+import org.eclipse.rdf4j.repository.sail.SailRepository;\n+import org.eclipse.rdf4j.repository.sail.SailRepositoryConnection;\n+import org.junit.AfterClass;\n+import org.junit.Test;\n+\n+/**\n+ * @author H\u00e5vard Ottestad\n+ */\n+public class ExperimentalFeaturesTest {\n+\n+\tSimpleValueFactory vf = SimpleValueFactory.getInstance();\n+\tIRI ex_knows = vf.createIRI(\"http://example.com/ns#knows\");\n+\tIRI ex_Person = vf.createIRI(\"http://example.com/ns#Person\");\n+\n+\t@AfterClass\n+\tpublic static void afterClass() {\n+\t\tGlobalValidationExecutionLogging.loggingEnabled = false;\n+\t}\n+\n+\t@Test\n+\tpublic void testDash() throws Exception {\n+\n+\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"test-cases/class/allSubjects/shacl.ttl\",\n+\t\t\t\tfalse);\n+\n+\t\ttry (SailRepositoryConnection connection = shaclRepository.getConnection()) {\n+\t\t\tconnection.begin();\n+\t\t\tconnection.add(vf.createBNode(), ex_knows, vf.createBNode());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg4NzcwMw=="}, "originalCommit": {"oid": "81cc711fd51f72663273e8f401c48a3417904426"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1493, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}