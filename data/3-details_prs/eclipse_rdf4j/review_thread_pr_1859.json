{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0OTkxNjY5", "number": 1859, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQyMjoxMTowNFrODZVRJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQyMjoxNTo1N1rODZVT2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3ODg5NDQ2OnYy", "diffSide": "RIGHT", "path": "tools/federation/src/test/java/demos/FedXWithRemoteRepositoryManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQyMjoxMTowNFrOFfqMiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwNzoxNzo1MlrOFfwS_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc0MTUxMg==", "bodyText": "Missing copyright header.", "url": "https://github.com/eclipse/rdf4j/pull/1859#discussion_r368741512", "createdAt": "2020-01-20T22:11:04Z", "author": {"login": "jeenbroekstra"}, "path": "tools/federation/src/test/java/demos/FedXWithRemoteRepositoryManager.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package demos;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44990bb440e8eea881ffd8f806217c2a30491a48"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg0MTQ2OQ==", "bodyText": "Done, added in amended commit", "url": "https://github.com/eclipse/rdf4j/pull/1859#discussion_r368841469", "createdAt": "2020-01-21T07:17:52Z", "author": {"login": "aschwarte10"}, "path": "tools/federation/src/test/java/demos/FedXWithRemoteRepositoryManager.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package demos;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc0MTUxMg=="}, "originalCommit": {"oid": "44990bb440e8eea881ffd8f806217c2a30491a48"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3ODg5Nzc5OnYy", "diffSide": "RIGHT", "path": "tools/federation/src/test/java/demos/FedXWithRemoteRepositoryManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQyMjoxMzoyN1rOFfqOYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwNzoxODoxOVrOFfwTfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc0MTk4Ng==", "bodyText": "This reminds me: calling init() should not be mandatory. I'm not sure if the FedXRepository implements that (as it's a fairly new thing).", "url": "https://github.com/eclipse/rdf4j/pull/1859#discussion_r368741986", "createdAt": "2020-01-20T22:13:27Z", "author": {"login": "jeenbroekstra"}, "path": "tools/federation/src/test/java/demos/FedXWithRemoteRepositoryManager.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package demos;\n+\n+import org.eclipse.rdf4j.federated.FedXFactory;\n+import org.eclipse.rdf4j.model.Statement;\n+import org.eclipse.rdf4j.model.vocabulary.FOAF;\n+import org.eclipse.rdf4j.model.vocabulary.RDF;\n+import org.eclipse.rdf4j.repository.Repository;\n+import org.eclipse.rdf4j.repository.RepositoryConnection;\n+import org.eclipse.rdf4j.repository.RepositoryResult;\n+import org.eclipse.rdf4j.repository.manager.RemoteRepositoryManager;\n+import org.eclipse.rdf4j.repository.manager.RepositoryManager;\n+\n+/**\n+ * Demo which shows an example of a local federation which uses repositories from a remote RDF4J instance as federation\n+ * members.\n+ * \n+ * @author Andreas Schwarte\n+ *\n+ */\n+public class FedXWithRemoteRepositoryManager {\n+\n+\tpublic static void main(String[] args) throws Exception {\n+\n+\t\t// connection URL of a RDF4J server which manages the repositories\n+\t\tString serverUrl = \"http://localhost:8080/rdf4j-server\";\n+\t\tRepositoryManager repoManager = new RemoteRepositoryManager(serverUrl);\n+\n+\t\t// assumes that remote repositories exist\n+\t\tRepository repo = FedXFactory.newFederation()\n+\t\t\t\t.withRepositoryResolver(repoManager)\n+\t\t\t\t.withResolvableEndpoint(\"my-repository-1\")\n+\t\t\t\t.withResolvableEndpoint(\"my-repository-2\")\n+\t\t\t\t.create();\n+\n+\t\trepo.init();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44990bb440e8eea881ffd8f806217c2a30491a48"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg0MTU5OA==", "bodyText": "Good point, just tested and it does not yet work. I'll track an issue and provide a fix for 3.1", "url": "https://github.com/eclipse/rdf4j/pull/1859#discussion_r368841598", "createdAt": "2020-01-21T07:18:19Z", "author": {"login": "aschwarte10"}, "path": "tools/federation/src/test/java/demos/FedXWithRemoteRepositoryManager.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package demos;\n+\n+import org.eclipse.rdf4j.federated.FedXFactory;\n+import org.eclipse.rdf4j.model.Statement;\n+import org.eclipse.rdf4j.model.vocabulary.FOAF;\n+import org.eclipse.rdf4j.model.vocabulary.RDF;\n+import org.eclipse.rdf4j.repository.Repository;\n+import org.eclipse.rdf4j.repository.RepositoryConnection;\n+import org.eclipse.rdf4j.repository.RepositoryResult;\n+import org.eclipse.rdf4j.repository.manager.RemoteRepositoryManager;\n+import org.eclipse.rdf4j.repository.manager.RepositoryManager;\n+\n+/**\n+ * Demo which shows an example of a local federation which uses repositories from a remote RDF4J instance as federation\n+ * members.\n+ * \n+ * @author Andreas Schwarte\n+ *\n+ */\n+public class FedXWithRemoteRepositoryManager {\n+\n+\tpublic static void main(String[] args) throws Exception {\n+\n+\t\t// connection URL of a RDF4J server which manages the repositories\n+\t\tString serverUrl = \"http://localhost:8080/rdf4j-server\";\n+\t\tRepositoryManager repoManager = new RemoteRepositoryManager(serverUrl);\n+\n+\t\t// assumes that remote repositories exist\n+\t\tRepository repo = FedXFactory.newFederation()\n+\t\t\t\t.withRepositoryResolver(repoManager)\n+\t\t\t\t.withResolvableEndpoint(\"my-repository-1\")\n+\t\t\t\t.withResolvableEndpoint(\"my-repository-2\")\n+\t\t\t\t.create();\n+\n+\t\trepo.init();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc0MTk4Ng=="}, "originalCommit": {"oid": "44990bb440e8eea881ffd8f806217c2a30491a48"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3ODkwMTM5OnYy", "diffSide": "RIGHT", "path": "tools/federation/src/test/java/demos/FedXWithRemoteRepositoryManager.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQyMjoxNTo1N1rOFfqQgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwODoyNTo0MFrOFfxlEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc0MjUyOQ==", "bodyText": "You can just do a shutDown on the repoManager, it will shut down the actual repository for you. And perhaps, if we're a bit paranoid, this should be in a finally clause.", "url": "https://github.com/eclipse/rdf4j/pull/1859#discussion_r368742529", "createdAt": "2020-01-20T22:15:57Z", "author": {"login": "jeenbroekstra"}, "path": "tools/federation/src/test/java/demos/FedXWithRemoteRepositoryManager.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package demos;\n+\n+import org.eclipse.rdf4j.federated.FedXFactory;\n+import org.eclipse.rdf4j.model.Statement;\n+import org.eclipse.rdf4j.model.vocabulary.FOAF;\n+import org.eclipse.rdf4j.model.vocabulary.RDF;\n+import org.eclipse.rdf4j.repository.Repository;\n+import org.eclipse.rdf4j.repository.RepositoryConnection;\n+import org.eclipse.rdf4j.repository.RepositoryResult;\n+import org.eclipse.rdf4j.repository.manager.RemoteRepositoryManager;\n+import org.eclipse.rdf4j.repository.manager.RepositoryManager;\n+\n+/**\n+ * Demo which shows an example of a local federation which uses repositories from a remote RDF4J instance as federation\n+ * members.\n+ * \n+ * @author Andreas Schwarte\n+ *\n+ */\n+public class FedXWithRemoteRepositoryManager {\n+\n+\tpublic static void main(String[] args) throws Exception {\n+\n+\t\t// connection URL of a RDF4J server which manages the repositories\n+\t\tString serverUrl = \"http://localhost:8080/rdf4j-server\";\n+\t\tRepositoryManager repoManager = new RemoteRepositoryManager(serverUrl);\n+\n+\t\t// assumes that remote repositories exist\n+\t\tRepository repo = FedXFactory.newFederation()\n+\t\t\t\t.withRepositoryResolver(repoManager)\n+\t\t\t\t.withResolvableEndpoint(\"my-repository-1\")\n+\t\t\t\t.withResolvableEndpoint(\"my-repository-2\")\n+\t\t\t\t.create();\n+\n+\t\trepo.init();\n+\n+\t\ttry (RepositoryConnection conn = repo.getConnection()) {\n+\t\t\ttry (RepositoryResult<Statement> repoResult = conn.getStatements(null, RDF.TYPE, FOAF.PERSON)) {\n+\t\t\t\trepoResult.forEach(st -> System.out.println(st));\n+\t\t\t}\n+\t\t}\n+\n+\t\trepo.shutDown();\n+\t\trepoManager.shutDown();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44990bb440e8eea881ffd8f806217c2a30491a48"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg0MzM1MA==", "bodyText": "The FedX repository is actually a local repository, while only the federation members are managed in the remote repository manager (i.e. in the HTTP server). Thus the shutdown is required. I tried to make this a bit more explicit in the example by naming the variable \"localRepo\"\nThe finally for the shutdown I typically omit in the very simplistic examples. I typically only add the try with resources for connections and tuple results.", "url": "https://github.com/eclipse/rdf4j/pull/1859#discussion_r368843350", "createdAt": "2020-01-21T07:24:50Z", "author": {"login": "aschwarte10"}, "path": "tools/federation/src/test/java/demos/FedXWithRemoteRepositoryManager.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package demos;\n+\n+import org.eclipse.rdf4j.federated.FedXFactory;\n+import org.eclipse.rdf4j.model.Statement;\n+import org.eclipse.rdf4j.model.vocabulary.FOAF;\n+import org.eclipse.rdf4j.model.vocabulary.RDF;\n+import org.eclipse.rdf4j.repository.Repository;\n+import org.eclipse.rdf4j.repository.RepositoryConnection;\n+import org.eclipse.rdf4j.repository.RepositoryResult;\n+import org.eclipse.rdf4j.repository.manager.RemoteRepositoryManager;\n+import org.eclipse.rdf4j.repository.manager.RepositoryManager;\n+\n+/**\n+ * Demo which shows an example of a local federation which uses repositories from a remote RDF4J instance as federation\n+ * members.\n+ * \n+ * @author Andreas Schwarte\n+ *\n+ */\n+public class FedXWithRemoteRepositoryManager {\n+\n+\tpublic static void main(String[] args) throws Exception {\n+\n+\t\t// connection URL of a RDF4J server which manages the repositories\n+\t\tString serverUrl = \"http://localhost:8080/rdf4j-server\";\n+\t\tRepositoryManager repoManager = new RemoteRepositoryManager(serverUrl);\n+\n+\t\t// assumes that remote repositories exist\n+\t\tRepository repo = FedXFactory.newFederation()\n+\t\t\t\t.withRepositoryResolver(repoManager)\n+\t\t\t\t.withResolvableEndpoint(\"my-repository-1\")\n+\t\t\t\t.withResolvableEndpoint(\"my-repository-2\")\n+\t\t\t\t.create();\n+\n+\t\trepo.init();\n+\n+\t\ttry (RepositoryConnection conn = repo.getConnection()) {\n+\t\t\ttry (RepositoryResult<Statement> repoResult = conn.getStatements(null, RDF.TYPE, FOAF.PERSON)) {\n+\t\t\t\trepoResult.forEach(st -> System.out.println(st));\n+\t\t\t}\n+\t\t}\n+\n+\t\trepo.shutDown();\n+\t\trepoManager.shutDown();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc0MjUyOQ=="}, "originalCommit": {"oid": "44990bb440e8eea881ffd8f806217c2a30491a48"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg2MjQ4MQ==", "bodyText": "Fair enough, makes sense.", "url": "https://github.com/eclipse/rdf4j/pull/1859#discussion_r368862481", "createdAt": "2020-01-21T08:25:40Z", "author": {"login": "jeenbroekstra"}, "path": "tools/federation/src/test/java/demos/FedXWithRemoteRepositoryManager.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package demos;\n+\n+import org.eclipse.rdf4j.federated.FedXFactory;\n+import org.eclipse.rdf4j.model.Statement;\n+import org.eclipse.rdf4j.model.vocabulary.FOAF;\n+import org.eclipse.rdf4j.model.vocabulary.RDF;\n+import org.eclipse.rdf4j.repository.Repository;\n+import org.eclipse.rdf4j.repository.RepositoryConnection;\n+import org.eclipse.rdf4j.repository.RepositoryResult;\n+import org.eclipse.rdf4j.repository.manager.RemoteRepositoryManager;\n+import org.eclipse.rdf4j.repository.manager.RepositoryManager;\n+\n+/**\n+ * Demo which shows an example of a local federation which uses repositories from a remote RDF4J instance as federation\n+ * members.\n+ * \n+ * @author Andreas Schwarte\n+ *\n+ */\n+public class FedXWithRemoteRepositoryManager {\n+\n+\tpublic static void main(String[] args) throws Exception {\n+\n+\t\t// connection URL of a RDF4J server which manages the repositories\n+\t\tString serverUrl = \"http://localhost:8080/rdf4j-server\";\n+\t\tRepositoryManager repoManager = new RemoteRepositoryManager(serverUrl);\n+\n+\t\t// assumes that remote repositories exist\n+\t\tRepository repo = FedXFactory.newFederation()\n+\t\t\t\t.withRepositoryResolver(repoManager)\n+\t\t\t\t.withResolvableEndpoint(\"my-repository-1\")\n+\t\t\t\t.withResolvableEndpoint(\"my-repository-2\")\n+\t\t\t\t.create();\n+\n+\t\trepo.init();\n+\n+\t\ttry (RepositoryConnection conn = repo.getConnection()) {\n+\t\t\ttry (RepositoryResult<Statement> repoResult = conn.getStatements(null, RDF.TYPE, FOAF.PERSON)) {\n+\t\t\t\trepoResult.forEach(st -> System.out.println(st));\n+\t\t\t}\n+\t\t}\n+\n+\t\trepo.shutDown();\n+\t\trepoManager.shutDown();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc0MjUyOQ=="}, "originalCommit": {"oid": "44990bb440e8eea881ffd8f806217c2a30491a48"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1627, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}