{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5MDE3NjM5", "number": 2448, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNToxODozM1rOEZUKRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNToxODo1NlrOEZUKhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTgwMTY0OnYy", "diffSide": "RIGHT", "path": "core/queryalgebra/evaluation/src/test/java/org/eclipse/rdf4j/query/algebra/evaluation/util/benchmark/ValueComparatorBenchmark.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNToxODozM1rOHCDsxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNToxODozM1rOHCDsxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkxOTgxNQ==", "bodyText": "The license header looks like it got mangled a bit", "url": "https://github.com/eclipse/rdf4j/pull/2448#discussion_r471919815", "createdAt": "2020-08-18T05:18:33Z", "author": {"login": "jeenbroekstra"}, "path": "core/queryalgebra/evaluation/src/test/java/org/eclipse/rdf4j/query/algebra/evaluation/util/benchmark/ValueComparatorBenchmark.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/**\n+ * ****************************************************************************", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eb04ee7aed78ec3d8ab70c33b65558a3499b03d"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTgwMjMxOnYy", "diffSide": "RIGHT", "path": "core/queryalgebra/evaluation/src/test/java/org/eclipse/rdf4j/query/algebra/evaluation/util/benchmark/ValueComparatorBenchmark.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNToxODo1NlrOHCDtNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNToxODo1NlrOHCDtNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkxOTkyNg==", "bodyText": "Could you add a standard main method?", "url": "https://github.com/eclipse/rdf4j/pull/2448#discussion_r471919926", "createdAt": "2020-08-18T05:18:56Z", "author": {"login": "jeenbroekstra"}, "path": "core/queryalgebra/evaluation/src/test/java/org/eclipse/rdf4j/query/algebra/evaluation/util/benchmark/ValueComparatorBenchmark.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/**\n+ * ****************************************************************************\n+ *  Copyright (c) 2020 Eclipse RDF4J contributors.\n+ *  All rights reserved. This program and the accompanying materials\n+ *  are made available under the terms of the Eclipse Distribution License v1.0\n+ *  which accompanies this distribution, and is available at\n+ *  http://www.eclipse.org/org/documents/edl-v10.php.\n+ * *****************************************************************************\n+ */\n+package org.eclipse.rdf4j.query.algebra.evaluation.util.benchmark;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.rdf4j.model.BNode;\n+import org.eclipse.rdf4j.model.IRI;\n+import org.eclipse.rdf4j.model.Model;\n+import org.eclipse.rdf4j.model.Value;\n+import org.eclipse.rdf4j.model.impl.SimpleValueFactory;\n+import org.eclipse.rdf4j.query.algebra.evaluation.util.ValueComparator;\n+import org.eclipse.rdf4j.rio.RDFFormat;\n+import org.eclipse.rdf4j.rio.Rio;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+/**\n+ * @author H\u00e5vard Ottestad\n+ */\n+@State(Scope.Benchmark)\n+@Warmup(iterations = 20)\n+@BenchmarkMode({ Mode.AverageTime })\n+@Fork(value = 1, jvmArgs = { \"-Xms8G\", \"-Xmx8G\", \"-Xmn4G\", \"-XX:+UseSerialGC\" })\n+//@Fork(value = 1, jvmArgs = {\"-Xms8G\", \"-Xmx8G\", \"-Xmn4G\", \"-XX:+UseSerialGC\", \"-XX:+UnlockCommercialFeatures\", \"-XX:StartFlightRecording=delay=5s,duration=120s,filename=recording.jfr,settings=profile\", \"-XX:FlightRecorderOptions=samplethreads=true,stackdepth=1024\", \"-XX:+UnlockDiagnosticVMOptions\", \"-XX:+DebugNonSafepoints\"})\n+@Measurement(iterations = 10)\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+public class ValueComparatorBenchmark {\n+\n+\tList<Value> subjects;\n+\tList<Value> predicates;\n+\tList<Value> objects;\n+\tList<Value> manyPointerEquals;\n+\tList<Value> manyDeepEquals;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eb04ee7aed78ec3d8ab70c33b65558a3499b03d"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1355, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}