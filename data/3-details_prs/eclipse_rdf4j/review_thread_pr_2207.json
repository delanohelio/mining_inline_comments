{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1NTY3NzI4", "number": 2207, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQwMTo0NjozMVrOD67CGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQwMTo1MTo0MlrOD67Dvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMTExMTk1OnYy", "diffSide": "RIGHT", "path": "core/query/src/main/java/org/eclipse/rdf4j/query/explanation/GenericPlanNode.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQwMTo0NjozMVrOGS_pug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQwODoxNjoxMlrOGTB7lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU3MDQyNg==", "bodyText": "Can you remind me - this is separate from what I would get if I did\n TupleQuery query = conn.prepareTupleQuery(....);\n System.out.println(query);\n\ncorrect? What I'm getting at is that this influences only the output of the Explanation serialization, not if we directly serialize a query algebra node to string. If so: that's good, I'd rather not change the original tupleExpr serialization too much (even if it's not, strictly speaking, a standardized format).", "url": "https://github.com/eclipse/rdf4j/pull/2207#discussion_r422570426", "createdAt": "2020-05-10T01:46:31Z", "author": {"login": "jeenbroekstra"}, "path": "core/query/src/main/java/org/eclipse/rdf4j/query/explanation/GenericPlanNode.java", "diffHunk": "@@ -217,14 +217,25 @@ public void setAlgorithm(String algorithm) {\n \t\tthis.algorithm = algorithm;\n \t}\n \n+\tprivate static int prettyBoxDrawingType = 0;\n+\n \t/**\n \t * Human readable string. Do not attempt to parse this.\n \t *\n \t * @return\n \t */\n \t@Override\n \tpublic String toString() {\n+\t\treturn getHumanReadable(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4441e068bbc67e90fa10f11d00f46b6c1154eb2c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYwNzc2NQ==", "bodyText": "Yes. Printing the query like that just prints the parsed version of the tuple expression. Using the explanation transforms the query into GenericPlanNode, where we have this bow-drawing toString addition.", "url": "https://github.com/eclipse/rdf4j/pull/2207#discussion_r422607765", "createdAt": "2020-05-10T08:16:12Z", "author": {"login": "hmottestad"}, "path": "core/query/src/main/java/org/eclipse/rdf4j/query/explanation/GenericPlanNode.java", "diffHunk": "@@ -217,14 +217,25 @@ public void setAlgorithm(String algorithm) {\n \t\tthis.algorithm = algorithm;\n \t}\n \n+\tprivate static int prettyBoxDrawingType = 0;\n+\n \t/**\n \t * Human readable string. Do not attempt to parse this.\n \t *\n \t * @return\n \t */\n \t@Override\n \tpublic String toString() {\n+\t\treturn getHumanReadable(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU3MDQyNg=="}, "originalCommit": {"oid": "4441e068bbc67e90fa10f11d00f46b6c1154eb2c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMTExNjE0OnYy", "diffSide": "RIGHT", "path": "core/sail/memory/src/test/java/org/eclipse/rdf4j/sail/memory/QueryPlanRetrievalTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQwMTo1MTo0MlrOGS_rjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQwODoxMzozNFrOGTB6Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU3MDg5Mg==", "bodyText": "If I understood correctly, the idea is to use the double lines for all nodes that have two (or more) children, single lines only for unary predicates. So why is the outer join here single lined, and the inner one double?", "url": "https://github.com/eclipse/rdf4j/pull/2207#discussion_r422570892", "createdAt": "2020-05-10T01:51:42Z", "author": {"login": "jeenbroekstra"}, "path": "core/sail/memory/src/test/java/org/eclipse/rdf4j/sail/memory/QueryPlanRetrievalTest.java", "diffHunk": "@@ -87,32 +87,32 @@ public void testTupleQuery() {\n \t\t\tString actual = query.explain(Explanation.Level.Unoptimized).toString();\n \n \t\t\tString expected = \"Projection\\n\" +\n-\t\t\t\t\t\"   ProjectionElemList\\n\" +\n-\t\t\t\t\t\"      ProjectionElem \\\"a\\\"\\n\" +\n-\t\t\t\t\t\"   Filter\\n\" +\n-\t\t\t\t\t\"      Compare (!=)\\n\" +\n-\t\t\t\t\t\"         Var (name=c)\\n\" +\n-\t\t\t\t\t\"         Var (name=d)\\n\" +\n-\t\t\t\t\t\"      LeftJoin\\n\" +\n-\t\t\t\t\t\"         Join\\n\" +\n-\t\t\t\t\t\"            Join\\n\" +\n-\t\t\t\t\t\"               LeftJoin (new scope)\\n\" +\n-\t\t\t\t\t\"                  SingletonSet\\n\" +\n-\t\t\t\t\t\"                  StatementPattern\\n\" +\n-\t\t\t\t\t\"                     Var (name=d)\\n\" +\n-\t\t\t\t\t\"                     Var (name=e)\\n\" +\n-\t\t\t\t\t\"                     Var (name=f)\\n\" +\n-\t\t\t\t\t\"               StatementPattern\\n\" +\n-\t\t\t\t\t\"                  Var (name=a)\\n\" +\n-\t\t\t\t\t\"                  Var (name=_const_f5e5585a_uri, value=http://www.w3.org/1999/02/22-rdf-syntax-ns#type, anonymous)\\n\"\n+\t\t\t\t\t\"\u2560\u2550\u2550ProjectionElemList\\n\" +\n+\t\t\t\t\t\"\u2551     ProjectionElem \\\"a\\\"\\n\" +\n+\t\t\t\t\t\"\u255a\u2550\u2550Filter\\n\" +\n+\t\t\t\t\t\"   \u251c\u2500\u2500Compare (!=)\\n\" +\n+\t\t\t\t\t\"   \u2502     Var (name=c)\\n\" +\n+\t\t\t\t\t\"   \u2502     Var (name=d)\\n\" +\n+\t\t\t\t\t\"   \u2514\u2500\u2500LeftJoin\\n\" +\n+\t\t\t\t\t\"      \u2560\u2550\u2550Join\\n\" +\n+\t\t\t\t\t\"      \u2551  \u251c\u2500\u2500Join\\n\" +\n+\t\t\t\t\t\"      \u2551  \u2502  \u2560\u2550\u2550LeftJoin (new scope)\\n\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4441e068bbc67e90fa10f11d00f46b6c1154eb2c"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYwNzM4Ng==", "bodyText": "It just swaps every other node. So that it\u2019s easier to follow the lines visually. Double vs single has no meaning.", "url": "https://github.com/eclipse/rdf4j/pull/2207#discussion_r422607386", "createdAt": "2020-05-10T08:13:34Z", "author": {"login": "hmottestad"}, "path": "core/sail/memory/src/test/java/org/eclipse/rdf4j/sail/memory/QueryPlanRetrievalTest.java", "diffHunk": "@@ -87,32 +87,32 @@ public void testTupleQuery() {\n \t\t\tString actual = query.explain(Explanation.Level.Unoptimized).toString();\n \n \t\t\tString expected = \"Projection\\n\" +\n-\t\t\t\t\t\"   ProjectionElemList\\n\" +\n-\t\t\t\t\t\"      ProjectionElem \\\"a\\\"\\n\" +\n-\t\t\t\t\t\"   Filter\\n\" +\n-\t\t\t\t\t\"      Compare (!=)\\n\" +\n-\t\t\t\t\t\"         Var (name=c)\\n\" +\n-\t\t\t\t\t\"         Var (name=d)\\n\" +\n-\t\t\t\t\t\"      LeftJoin\\n\" +\n-\t\t\t\t\t\"         Join\\n\" +\n-\t\t\t\t\t\"            Join\\n\" +\n-\t\t\t\t\t\"               LeftJoin (new scope)\\n\" +\n-\t\t\t\t\t\"                  SingletonSet\\n\" +\n-\t\t\t\t\t\"                  StatementPattern\\n\" +\n-\t\t\t\t\t\"                     Var (name=d)\\n\" +\n-\t\t\t\t\t\"                     Var (name=e)\\n\" +\n-\t\t\t\t\t\"                     Var (name=f)\\n\" +\n-\t\t\t\t\t\"               StatementPattern\\n\" +\n-\t\t\t\t\t\"                  Var (name=a)\\n\" +\n-\t\t\t\t\t\"                  Var (name=_const_f5e5585a_uri, value=http://www.w3.org/1999/02/22-rdf-syntax-ns#type, anonymous)\\n\"\n+\t\t\t\t\t\"\u2560\u2550\u2550ProjectionElemList\\n\" +\n+\t\t\t\t\t\"\u2551     ProjectionElem \\\"a\\\"\\n\" +\n+\t\t\t\t\t\"\u255a\u2550\u2550Filter\\n\" +\n+\t\t\t\t\t\"   \u251c\u2500\u2500Compare (!=)\\n\" +\n+\t\t\t\t\t\"   \u2502     Var (name=c)\\n\" +\n+\t\t\t\t\t\"   \u2502     Var (name=d)\\n\" +\n+\t\t\t\t\t\"   \u2514\u2500\u2500LeftJoin\\n\" +\n+\t\t\t\t\t\"      \u2560\u2550\u2550Join\\n\" +\n+\t\t\t\t\t\"      \u2551  \u251c\u2500\u2500Join\\n\" +\n+\t\t\t\t\t\"      \u2551  \u2502  \u2560\u2550\u2550LeftJoin (new scope)\\n\" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU3MDg5Mg=="}, "originalCommit": {"oid": "4441e068bbc67e90fa10f11d00f46b6c1154eb2c"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1486, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}