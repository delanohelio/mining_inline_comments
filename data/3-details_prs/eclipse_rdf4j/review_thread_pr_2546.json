{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0MTAxMjE1", "number": 2546, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMDowODoxMFrOEo0dyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDoyNTo0N1rOEp-mSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMjM4MDg4OnYy", "diffSide": "RIGHT", "path": "core/model-api/src/main/java/org/eclipse/rdf4j/model/ValueFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMDowODoxMVrOHaIkTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMDowODoxMVrOHaIkTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE2NTM5MA==", "bodyText": "Your IDE forgot to substitute the number here. Also: I don't think we should replace the license header on this just because we moved the file.", "url": "https://github.com/eclipse/rdf4j/pull/2546#discussion_r497165390", "createdAt": "2020-09-30T00:08:11Z", "author": {"login": "jeenbroekstra"}, "path": "core/model-api/src/main/java/org/eclipse/rdf4j/model/ValueFactory.java", "diffHunk": "@@ -1,10 +1,10 @@\n /*******************************************************************************\n- * Copyright (c) 2015 Eclipse RDF4J contributors, Aduna, and others.\n+ * Copyright (c) ${year} Eclipse RDF4J contributors.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07b810c860468e029d1a746bb750cafead7bc4fb"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMjM4MTg0OnYy", "diffSide": "RIGHT", "path": "core/model-api/src/main/java/org/eclipse/rdf4j/model/ValueFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMDowODoyNlrOHaIk_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMDowODoyNlrOHaIk_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE2NTU2Nw==", "bodyText": "good catch. I had to look several times before I even realized what you had changed.", "url": "https://github.com/eclipse/rdf4j/pull/2546#discussion_r497165567", "createdAt": "2020-09-30T00:08:26Z", "author": {"login": "jeenbroekstra"}, "path": "core/model-api/src/main/java/org/eclipse/rdf4j/model/ValueFactory.java", "diffHunk": "@@ -30,7 +27,7 @@\n \t *\n \t * @param iri A string-representation of a IRI.\n \t * @return An object representing the IRI.\n-\t * @throws IlllegalArgumentException If the supplied string does not resolve to a legal (absolute) IRI.\n+\t * @throws IllegalArgumentException If the supplied string does not resolve to a legal (absolute) IRI.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07b810c860468e029d1a746bb750cafead7bc4fb"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMjQwNTIwOnYy", "diffSide": "RIGHT", "path": "core/model/src/test/java/org/eclipse/rdf4j/model/impl/SimpleBNodeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMDoxNDowNlrOHaIzyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMDoxNDowNlrOHaIzyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE2OTM1Mg==", "bodyText": "This is a new file I think? If so this is the wrong header.", "url": "https://github.com/eclipse/rdf4j/pull/2546#discussion_r497169352", "createdAt": "2020-09-30T00:14:06Z", "author": {"login": "jeenbroekstra"}, "path": "core/model/src/test/java/org/eclipse/rdf4j/model/impl/SimpleBNodeTest.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*******************************************************************************\n+ * Copyright (c) 2015 Eclipse RDF4J contributors, Aduna, and others.\n+ * All rights reserved. This program and the accompanying materials", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07b810c860468e029d1a746bb750cafead7bc4fb"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMjQyNjI2OnYy", "diffSide": "RIGHT", "path": "core/model/src/test/java/org/eclipse/rdf4j/model/impl/SimpleTripleTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMDoxOToxNFrOHaJBqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMDoxOToxNFrOHaJBqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE3MjkwNQ==", "bodyText": "Wildcard import needs to be expanded.", "url": "https://github.com/eclipse/rdf4j/pull/2546#discussion_r497172905", "createdAt": "2020-09-30T00:19:14Z", "author": {"login": "jeenbroekstra"}, "path": "core/model/src/test/java/org/eclipse/rdf4j/model/impl/SimpleTripleTest.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*******************************************************************************\n+ * Copyright (c) 2015 Eclipse RDF4J contributors, Aduna, and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+package org.eclipse.rdf4j.model.impl;\n+\n+import org.eclipse.rdf4j.model.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07b810c860468e029d1a746bb750cafead7bc4fb"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMjQ1NDA5OnYy", "diffSide": "RIGHT", "path": "core/model/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMDoyNTo1MFrOHaJTWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMDoyNTo1MFrOHaJTWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE3NzQzMg==", "bodyText": "This won't work unless the model-api module actually produces and publishes a test jar. I'm not sure yet if that is desirable - we use this approach in one other place (the rio api) but for everything else we have set up separate test suite projects instead. I'll take a look at this and if necessary refactor.", "url": "https://github.com/eclipse/rdf4j/pull/2546#discussion_r497177432", "createdAt": "2020-09-30T00:25:50Z", "author": {"login": "jeenbroekstra"}, "path": "core/model/pom.xml", "diffHunk": "@@ -8,13 +8,25 @@\n \t</parent>\n \t<artifactId>rdf4j-model</artifactId>\n \t<name>RDF4J: Model</name>\n-\t<description>RDF model interfaces and implementations.</description>\n+\t<description>RDF model implementations.</description>\n \t<dependencies>\n+\t\t<dependency>\n+\t\t\t<groupId>${project.groupId}</groupId>\n+\t\t\t<artifactId>rdf4j-model-api</artifactId>\n+\t\t\t<version>${project.version}</version>\n+\t\t</dependency>\n \t\t<dependency>\n \t\t\t<groupId>${project.groupId}</groupId>\n \t\t\t<artifactId>rdf4j-util</artifactId>\n \t\t\t<version>${project.version}</version>\n \t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>${project.groupId}</groupId>\n+\t\t\t<artifactId>rdf4j-model-api</artifactId>\n+\t\t\t<version>${project.version}</version>\n+\t\t\t<type>test-jar</type>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07b810c860468e029d1a746bb750cafead7bc4fb"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMjQ3MjAxOnYy", "diffSide": "RIGHT", "path": "core/model-api/src/main/java/org/eclipse/rdf4j/model/base/AbstractBNode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMDozNDo0MVrOHaJd0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMDozNDo0MVrOHaJd0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE4MDExMg==", "bodyText": "This class, and the other new abstract classes, could use a minimal bit of Javadoc. All it really needs:\n\nBase class for {@link BNode}, offering common functionality.\n\nand preferable an author tag, and a @since 3.5.0 tag as well.", "url": "https://github.com/eclipse/rdf4j/pull/2546#discussion_r497180112", "createdAt": "2020-09-30T00:34:41Z", "author": {"login": "jeenbroekstra"}, "path": "core/model-api/src/main/java/org/eclipse/rdf4j/model/base/AbstractBNode.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ ******************************************************************************/\n+\n+package org.eclipse.rdf4j.model.base;\n+\n+import java.util.Objects;\n+\n+import org.eclipse.rdf4j.model.BNode;\n+\n+public abstract class AbstractBNode implements BNode {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07b810c860468e029d1a746bb750cafead7bc4fb"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExODUwNDk0OnYy", "diffSide": "RIGHT", "path": "core/model/src/main/java/org/eclipse/rdf4j/model/util/Literals.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMDowMTo1NlrOHbDS6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMTozOTo1OFrOHbGZSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODEyNzU5NA==", "bodyText": "Can we move this back into the Literal interface. There is no need to introduce another instanceof call for every Literal again!", "url": "https://github.com/eclipse/rdf4j/pull/2546#discussion_r498127594", "createdAt": "2020-10-01T10:01:56Z", "author": {"login": "hmottestad"}, "path": "core/model/src/main/java/org/eclipse/rdf4j/model/util/Literals.java", "diffHunk": "@@ -57,6 +58,22 @@ public static String getLabel(Optional v, String fallback) {\n \t\treturn v != null ? getLabel((Value) v.orElseGet(null), fallback) : fallback;\n \t}\n \n+\t/**\n+\t * Retrieves the {@link XSD.Datatype} value for the supplied Literal, if it has one.\n+\t *\n+\t * @param a Literal\n+\t * @return an Optional {@link XSD.Datatype} enum, if one is available. Note that the absence of this enum does\n+\t *         <i>not</i> indicate that the literal has no datatype, merely that it has no cached enum representation of\n+\t *         that datatype.\n+\t * @since 3.5.0\n+\t */\n+\tpublic static Optional<XSD.Datatype> getXsdDatatype(Literal l) {\n+\t\tif (l instanceof SimpleLiteral) {\n+\t\t\treturn ((SimpleLiteral) l).getXsdDatatype();\n+\t\t}\n+\t\treturn Optional.empty();\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d610b0e1bbe591750ca76b58b1c7b530ce09059"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODEzOTg1NQ==", "bodyText": "I'll run some benchmarks now to see the effects, but I understand that's it's hard to move back since it makes the Literal class dependent on the XSD class.", "url": "https://github.com/eclipse/rdf4j/pull/2546#discussion_r498139855", "createdAt": "2020-10-01T10:23:30Z", "author": {"login": "hmottestad"}, "path": "core/model/src/main/java/org/eclipse/rdf4j/model/util/Literals.java", "diffHunk": "@@ -57,6 +58,22 @@ public static String getLabel(Optional v, String fallback) {\n \t\treturn v != null ? getLabel((Value) v.orElseGet(null), fallback) : fallback;\n \t}\n \n+\t/**\n+\t * Retrieves the {@link XSD.Datatype} value for the supplied Literal, if it has one.\n+\t *\n+\t * @param a Literal\n+\t * @return an Optional {@link XSD.Datatype} enum, if one is available. Note that the absence of this enum does\n+\t *         <i>not</i> indicate that the literal has no datatype, merely that it has no cached enum representation of\n+\t *         that datatype.\n+\t * @since 3.5.0\n+\t */\n+\tpublic static Optional<XSD.Datatype> getXsdDatatype(Literal l) {\n+\t\tif (l instanceof SimpleLiteral) {\n+\t\t\treturn ((SimpleLiteral) l).getXsdDatatype();\n+\t\t}\n+\t\treturn Optional.empty();\n+\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODEyNzU5NA=="}, "originalCommit": {"oid": "5d610b0e1bbe591750ca76b58b1c7b530ce09059"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE1NDc2OQ==", "bodyText": "This branch:\nBenchmark                                       Mode  Cnt    Score   Error  Units\nValueComparatorBenchmark.sortManyDeepEquals     avgt   10  330.260 \u00b1 2.762  ms/op\nValueComparatorBenchmark.sortManyPointerEquals  avgt   10   19.662 \u00b1 0.335  ms/op\nValueComparatorBenchmark.sortObjects            avgt   10   26.762 \u00b1 0.800  ms/op\nValueComparatorBenchmark.sortPredicates         avgt   10    0.049 \u00b1 0.016  ms/op\nValueComparatorBenchmark.sortSubjects           avgt   10   24.441 \u00b1 0.448  ms/op\n\nDevelop:\nBenchmark                                       Mode  Cnt    Score   Error  Units\nValueComparatorBenchmark.sortManyDeepEquals     avgt   10  341.620 \u00b1 3.551  ms/op\nValueComparatorBenchmark.sortManyPointerEquals  avgt   10   19.915 \u00b1 0.697  ms/op\nValueComparatorBenchmark.sortObjects            avgt   10   27.737 \u00b1 1.054  ms/op\nValueComparatorBenchmark.sortPredicates         avgt   10    0.059 \u00b1 0.009  ms/op\nValueComparatorBenchmark.sortSubjects           avgt   10   24.673 \u00b1 0.624  ms/op", "url": "https://github.com/eclipse/rdf4j/pull/2546#discussion_r498154769", "createdAt": "2020-10-01T10:52:47Z", "author": {"login": "hmottestad"}, "path": "core/model/src/main/java/org/eclipse/rdf4j/model/util/Literals.java", "diffHunk": "@@ -57,6 +58,22 @@ public static String getLabel(Optional v, String fallback) {\n \t\treturn v != null ? getLabel((Value) v.orElseGet(null), fallback) : fallback;\n \t}\n \n+\t/**\n+\t * Retrieves the {@link XSD.Datatype} value for the supplied Literal, if it has one.\n+\t *\n+\t * @param a Literal\n+\t * @return an Optional {@link XSD.Datatype} enum, if one is available. Note that the absence of this enum does\n+\t *         <i>not</i> indicate that the literal has no datatype, merely that it has no cached enum representation of\n+\t *         that datatype.\n+\t * @since 3.5.0\n+\t */\n+\tpublic static Optional<XSD.Datatype> getXsdDatatype(Literal l) {\n+\t\tif (l instanceof SimpleLiteral) {\n+\t\t\treturn ((SimpleLiteral) l).getXsdDatatype();\n+\t\t}\n+\t\treturn Optional.empty();\n+\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODEyNzU5NA=="}, "originalCommit": {"oid": "5d610b0e1bbe591750ca76b58b1c7b530ce09059"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE2MDgwOA==", "bodyText": "No, we can't, because it uses a class from the model module, which introduces a cyclic dependency.", "url": "https://github.com/eclipse/rdf4j/pull/2546#discussion_r498160808", "createdAt": "2020-10-01T11:04:28Z", "author": {"login": "jeenbroekstra"}, "path": "core/model/src/main/java/org/eclipse/rdf4j/model/util/Literals.java", "diffHunk": "@@ -57,6 +58,22 @@ public static String getLabel(Optional v, String fallback) {\n \t\treturn v != null ? getLabel((Value) v.orElseGet(null), fallback) : fallback;\n \t}\n \n+\t/**\n+\t * Retrieves the {@link XSD.Datatype} value for the supplied Literal, if it has one.\n+\t *\n+\t * @param a Literal\n+\t * @return an Optional {@link XSD.Datatype} enum, if one is available. Note that the absence of this enum does\n+\t *         <i>not</i> indicate that the literal has no datatype, merely that it has no cached enum representation of\n+\t *         that datatype.\n+\t * @since 3.5.0\n+\t */\n+\tpublic static Optional<XSD.Datatype> getXsdDatatype(Literal l) {\n+\t\tif (l instanceof SimpleLiteral) {\n+\t\t\treturn ((SimpleLiteral) l).getXsdDatatype();\n+\t\t}\n+\t\treturn Optional.empty();\n+\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODEyNzU5NA=="}, "originalCommit": {"oid": "5d610b0e1bbe591750ca76b58b1c7b530ce09059"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE2NjA2Nw==", "bodyText": "Unless we can interface/abstract that out as well, somehow.", "url": "https://github.com/eclipse/rdf4j/pull/2546#discussion_r498166067", "createdAt": "2020-10-01T11:15:06Z", "author": {"login": "jeenbroekstra"}, "path": "core/model/src/main/java/org/eclipse/rdf4j/model/util/Literals.java", "diffHunk": "@@ -57,6 +58,22 @@ public static String getLabel(Optional v, String fallback) {\n \t\treturn v != null ? getLabel((Value) v.orElseGet(null), fallback) : fallback;\n \t}\n \n+\t/**\n+\t * Retrieves the {@link XSD.Datatype} value for the supplied Literal, if it has one.\n+\t *\n+\t * @param a Literal\n+\t * @return an Optional {@link XSD.Datatype} enum, if one is available. Note that the absence of this enum does\n+\t *         <i>not</i> indicate that the literal has no datatype, merely that it has no cached enum representation of\n+\t *         that datatype.\n+\t * @since 3.5.0\n+\t */\n+\tpublic static Optional<XSD.Datatype> getXsdDatatype(Literal l) {\n+\t\tif (l instanceof SimpleLiteral) {\n+\t\t\treturn ((SimpleLiteral) l).getXsdDatatype();\n+\t\t}\n+\t\treturn Optional.empty();\n+\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODEyNzU5NA=="}, "originalCommit": {"oid": "5d610b0e1bbe591750ca76b58b1c7b530ce09059"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE3NjMwOA==", "bodyText": "Actually might not be a bad idea. It's late and I'm in the middle of a whisky tasting but I'll have a look tomorrow unless you best me to it.", "url": "https://github.com/eclipse/rdf4j/pull/2546#discussion_r498176308", "createdAt": "2020-10-01T11:35:55Z", "author": {"login": "jeenbroekstra"}, "path": "core/model/src/main/java/org/eclipse/rdf4j/model/util/Literals.java", "diffHunk": "@@ -57,6 +58,22 @@ public static String getLabel(Optional v, String fallback) {\n \t\treturn v != null ? getLabel((Value) v.orElseGet(null), fallback) : fallback;\n \t}\n \n+\t/**\n+\t * Retrieves the {@link XSD.Datatype} value for the supplied Literal, if it has one.\n+\t *\n+\t * @param a Literal\n+\t * @return an Optional {@link XSD.Datatype} enum, if one is available. Note that the absence of this enum does\n+\t *         <i>not</i> indicate that the literal has no datatype, merely that it has no cached enum representation of\n+\t *         that datatype.\n+\t * @since 3.5.0\n+\t */\n+\tpublic static Optional<XSD.Datatype> getXsdDatatype(Literal l) {\n+\t\tif (l instanceof SimpleLiteral) {\n+\t\t\treturn ((SimpleLiteral) l).getXsdDatatype();\n+\t\t}\n+\t\treturn Optional.empty();\n+\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODEyNzU5NA=="}, "originalCommit": {"oid": "5d610b0e1bbe591750ca76b58b1c7b530ce09059"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE3ODM3OQ==", "bodyText": "Enjoy your whisky tasting! No need to worry about this. I checked the performance, and using instanceof against a class seems to have no impact compared to how slow we were seeing instanceof be against an interface.", "url": "https://github.com/eclipse/rdf4j/pull/2546#discussion_r498178379", "createdAt": "2020-10-01T11:39:58Z", "author": {"login": "hmottestad"}, "path": "core/model/src/main/java/org/eclipse/rdf4j/model/util/Literals.java", "diffHunk": "@@ -57,6 +58,22 @@ public static String getLabel(Optional v, String fallback) {\n \t\treturn v != null ? getLabel((Value) v.orElseGet(null), fallback) : fallback;\n \t}\n \n+\t/**\n+\t * Retrieves the {@link XSD.Datatype} value for the supplied Literal, if it has one.\n+\t *\n+\t * @param a Literal\n+\t * @return an Optional {@link XSD.Datatype} enum, if one is available. Note that the absence of this enum does\n+\t *         <i>not</i> indicate that the literal has no datatype, merely that it has no cached enum representation of\n+\t *         that datatype.\n+\t * @since 3.5.0\n+\t */\n+\tpublic static Optional<XSD.Datatype> getXsdDatatype(Literal l) {\n+\t\tif (l instanceof SimpleLiteral) {\n+\t\t\treturn ((SimpleLiteral) l).getXsdDatatype();\n+\t\t}\n+\t\treturn Optional.empty();\n+\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODEyNzU5NA=="}, "originalCommit": {"oid": "5d610b0e1bbe591750ca76b58b1c7b530ce09059"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExODUwODUwOnYy", "diffSide": "RIGHT", "path": "core/queryalgebra/evaluation/src/main/java/org/eclipse/rdf4j/query/algebra/evaluation/util/QueryEvaluationUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMDowMjo1NVrOHbDVIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMDowMjo1NVrOHbDVIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODEyODE2Mw==", "bodyText": "This is probably what is causing the test failures. Notice both methods call on leftLit", "url": "https://github.com/eclipse/rdf4j/pull/2546#discussion_r498128163", "createdAt": "2020-10-01T10:02:55Z", "author": {"login": "hmottestad"}, "path": "core/queryalgebra/evaluation/src/main/java/org/eclipse/rdf4j/query/algebra/evaluation/util/QueryEvaluationUtil.java", "diffHunk": "@@ -152,8 +152,8 @@ public static boolean compareLiterals(Literal leftLit, Literal rightLit, Compare\n \t\tIRI leftDatatype = leftLit.getDatatype();\n \t\tIRI rightDatatype = rightLit.getDatatype();\n \n-\t\tXSD.Datatype leftXsdDatatype = leftLit.getXsdDatatype().orElse(null);\n-\t\tXSD.Datatype rightXsdDatatype = rightLit.getXsdDatatype().orElse(null);\n+\t\tXSD.Datatype leftXsdDatatype = Literals.getXsdDatatype(leftLit).orElse(null);\n+\t\tXSD.Datatype rightXsdDatatype = Literals.getXsdDatatype(leftLit).orElse(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d610b0e1bbe591750ca76b58b1c7b530ce09059"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMDg1MjE1OnYy", "diffSide": "RIGHT", "path": "core/model-api/src/main/java/org/eclipse/rdf4j/model/Namespace.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMDo1NDo1MFrOHbagMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMjo0NToyOFrOHbc9Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUwNzgyNQ==", "bodyText": "Adding new methods to an existing public interface (without a default implementation) is not backwards compatible. It's also out of scope for this issue.", "url": "https://github.com/eclipse/rdf4j/pull/2546#discussion_r498507825", "createdAt": "2020-10-01T20:54:50Z", "author": {"login": "jeenbroekstra"}, "path": "core/model-api/src/main/java/org/eclipse/rdf4j/model/Namespace.java", "diffHunk": "@@ -11,9 +11,20 @@\n \n /**\n  * A namespace, consisting of a namespace name and a prefix that has been assigned to it.\n+ * <p>\n+ * <strong>Warning</strong> / In order to ensure interoperability of concrete classes implementing this interface,\n+ * {@link #equals(Object)} and {@link #hashCode()} methods must be implemented exactly as described in their specs.\n+ * \n  */\n public interface Namespace extends Serializable, Comparable<Namespace> {\n \n+\t/**\n+\t * Gets the prefix of the current namespace. The default namespace is represented by an empty prefix string.\n+\t *\n+\t * @return prefix of namespace, or an empty string in case of the default namespace.\n+\t */\n+\tpublic String getPrefix();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1867f973276ed616e105adde4ea102c18a59629"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU0ODAzOQ==", "bodyText": "Er, forget I said that, this is obviously not a new method. It was early, before coffee.", "url": "https://github.com/eclipse/rdf4j/pull/2546#discussion_r498548039", "createdAt": "2020-10-01T22:45:28Z", "author": {"login": "jeenbroekstra"}, "path": "core/model-api/src/main/java/org/eclipse/rdf4j/model/Namespace.java", "diffHunk": "@@ -11,9 +11,20 @@\n \n /**\n  * A namespace, consisting of a namespace name and a prefix that has been assigned to it.\n+ * <p>\n+ * <strong>Warning</strong> / In order to ensure interoperability of concrete classes implementing this interface,\n+ * {@link #equals(Object)} and {@link #hashCode()} methods must be implemented exactly as described in their specs.\n+ * \n  */\n public interface Namespace extends Serializable, Comparable<Namespace> {\n \n+\t/**\n+\t * Gets the prefix of the current namespace. The default namespace is represented by an empty prefix string.\n+\t *\n+\t * @return prefix of namespace, or an empty string in case of the default namespace.\n+\t */\n+\tpublic String getPrefix();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUwNzgyNQ=="}, "originalCommit": {"oid": "f1867f973276ed616e105adde4ea102c18a59629"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMDg1NTMyOnYy", "diffSide": "RIGHT", "path": "core/model-api/src/main/java/org/eclipse/rdf4j/model/Namespace.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMDo1NTo1MFrOHbaiGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMzowOToxNFrOHbdWmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUwODMxMg==", "bodyText": "This, also, is not backwards compatible. I don't think we need to declare these at the interface level right now to get this to work.", "url": "https://github.com/eclipse/rdf4j/pull/2546#discussion_r498508312", "createdAt": "2020-10-01T20:55:50Z", "author": {"login": "jeenbroekstra"}, "path": "core/model-api/src/main/java/org/eclipse/rdf4j/model/Namespace.java", "diffHunk": "@@ -22,9 +33,23 @@\n \tpublic String getName();\n \n \t/**\n-\t * Gets the prefix of the current namespace. The default namespace is represented by an empty prefix string.\n+\t * Compares this namespace to another object.\n \t *\n-\t * @return prefix of namespace, or an empty string in case of the default namespace.\n+\t * @param o The object to compare this namespace to\n+\t *\n+\t * @return {@code true} if the other object is an instance of {@code Namespace} and their {@linkplain #getPrefix()\n+\t *         prefixes} and {@linkplain #getName() names} are equal, {@code false} otherwise.\n \t */\n-\tpublic String getPrefix();\n+\t@Override\n+\tboolean equals(Object o);\n+\n+\t/**\n+\t * Computes the hash code of this namespace.\n+\t *\n+\t * @return a hash code for this namespace computed as {@link java.util.Objects#hash Objects.hash}(\n+\t *         {@link #getPrefix()}, {@link #getName()})\n+\t */\n+\t@Override\n+\tint hashCode();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1867f973276ed616e105adde4ea102c18a59629"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU1NDUyMg==", "bodyText": "I had a closer look at this and I think that in fact you are correct to specify this, and we should treat this not as a backward-incompatible change, but as a bug fix. Namespace extends Comparable, which requires that we have properly defined contract for equals / hashCode. It also shouldn't be a problem for existing implementations that don't have a correct equals/hashCode methods yet: they'll still compile and run, they'll just break the contract (but they already did that implicitly).\nI'll add the necessary exceptions to the api comparison check.", "url": "https://github.com/eclipse/rdf4j/pull/2546#discussion_r498554522", "createdAt": "2020-10-01T23:09:14Z", "author": {"login": "jeenbroekstra"}, "path": "core/model-api/src/main/java/org/eclipse/rdf4j/model/Namespace.java", "diffHunk": "@@ -22,9 +33,23 @@\n \tpublic String getName();\n \n \t/**\n-\t * Gets the prefix of the current namespace. The default namespace is represented by an empty prefix string.\n+\t * Compares this namespace to another object.\n \t *\n-\t * @return prefix of namespace, or an empty string in case of the default namespace.\n+\t * @param o The object to compare this namespace to\n+\t *\n+\t * @return {@code true} if the other object is an instance of {@code Namespace} and their {@linkplain #getPrefix()\n+\t *         prefixes} and {@linkplain #getName() names} are equal, {@code false} otherwise.\n \t */\n-\tpublic String getPrefix();\n+\t@Override\n+\tboolean equals(Object o);\n+\n+\t/**\n+\t * Computes the hash code of this namespace.\n+\t *\n+\t * @return a hash code for this namespace computed as {@link java.util.Objects#hash Objects.hash}(\n+\t *         {@link #getPrefix()}, {@link #getName()})\n+\t */\n+\t@Override\n+\tint hashCode();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUwODMxMg=="}, "originalCommit": {"oid": "f1867f973276ed616e105adde4ea102c18a59629"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDUyNjgwOnYy", "diffSide": "RIGHT", "path": "core/model-api/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDoyNTo0N1rOHb-caA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDoyNTo0N1rOHb-caA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NjY4MA==", "bodyText": "I've added this to make sure the test-jar gets produced. I originally wanted to move your abstracts tests to the rdf4j-model-testsuite, but that then results in a circular dependency between rdf4j-model-api and rdf4j-model-testsuite. So let's go with the test-jar approach instead.", "url": "https://github.com/eclipse/rdf4j/pull/2546#discussion_r499096680", "createdAt": "2020-10-03T00:25:47Z", "author": {"login": "jeenbroekstra"}, "path": "core/model-api/pom.xml", "diffHunk": "@@ -0,0 +1,31 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+\t<modelVersion>4.0.0</modelVersion>\n+\t<parent>\n+\t\t<groupId>org.eclipse.rdf4j</groupId>\n+\t\t<artifactId>rdf4j-core</artifactId>\n+\t\t<version>3.5.0-SNAPSHOT</version>\n+\t</parent>\n+\t<artifactId>rdf4j-model-api</artifactId>\n+\t<name>RDF4J: Model API</name>\n+\t<description>RDF model interfaces.</description>\n+\t<build>\n+\t\t<plugins>\n+\t\t\t<plugin>\n+\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\n+\t\t\t\t<artifactId>maven-jar-plugin</artifactId>\n+\t\t\t\t<executions>\n+\t\t\t\t\t<execution>\n+\t\t\t\t\t\t<goals>\n+\t\t\t\t\t\t\t<goal>test-jar</goal>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2839267dae7c88a6876e38f9dc4ac74ffde24194"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1386, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}