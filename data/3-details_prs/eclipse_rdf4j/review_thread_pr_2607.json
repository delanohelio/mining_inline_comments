{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2NTQyNTg2", "number": 2607, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNDozOTo0MlrOEwl8ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNjozNzozM1rOExxBuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5Mzg4ODMwOnYy", "diffSide": "RIGHT", "path": "core/model-api/src/main/java/org/eclipse/rdf4j/model/base/AbstractBNode.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNDozOTo0MlrOHmQUWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNjozMDo0MVrOHmSbkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg3NTI5MQ==", "bodyText": "Why are we adding factory methods to the class itself? This will be problematic to support. For example concrete subclasses will have their own factories, but if you do MyConcreteBNode.createBNode you suddenly get a GenericBNode instance again. It also somewhat defeats the purpose of having a separate ValueFactory.", "url": "https://github.com/eclipse/rdf4j/pull/2607#discussion_r509875291", "createdAt": "2020-10-22T04:39:42Z", "author": {"login": "jeenbroekstra"}, "path": "core/model-api/src/main/java/org/eclipse/rdf4j/model/base/AbstractBNode.java", "diffHunk": "@@ -22,6 +23,37 @@\n \n \tprivate static final long serialVersionUID = -437354568418943981L;\n \n+\tprivate static final AtomicLong nodeID = new AtomicLong(ThreadLocalRandom.current().nextLong());\n+\n+\t/**\n+\t * Creates a new blank node value.\n+\t *\n+\t * @return a new generic blank node value with a system-generated label\n+\t */\n+\tpublic static BNode createBNode() {\n+\t\treturn new GenericBNode(Long.toHexString(Math.abs(nodeID.getAndIncrement())));\n+\t}\n+\n+\t/**\n+\t * Creates a new blank node value.\n+\t *\n+\t * @param nodeID the identifier of the blank node\n+\t *\n+\t * @return a new generic blank node value\n+\t *\n+\t * @throws NullPointerException if {@code nodeID} is {@code null}\n+\t */\n+\tpublic static BNode createBNode(String nodeID) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fae58ca4e44f56ea4c63bb945c169d35252ff6ef"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTkwOTkwNw==", "bodyText": "No problem reverting to package-visible constructors.", "url": "https://github.com/eclipse/rdf4j/pull/2607#discussion_r509909907", "createdAt": "2020-10-22T06:30:41Z", "author": {"login": "knoan"}, "path": "core/model-api/src/main/java/org/eclipse/rdf4j/model/base/AbstractBNode.java", "diffHunk": "@@ -22,6 +23,37 @@\n \n \tprivate static final long serialVersionUID = -437354568418943981L;\n \n+\tprivate static final AtomicLong nodeID = new AtomicLong(ThreadLocalRandom.current().nextLong());\n+\n+\t/**\n+\t * Creates a new blank node value.\n+\t *\n+\t * @return a new generic blank node value with a system-generated label\n+\t */\n+\tpublic static BNode createBNode() {\n+\t\treturn new GenericBNode(Long.toHexString(Math.abs(nodeID.getAndIncrement())));\n+\t}\n+\n+\t/**\n+\t * Creates a new blank node value.\n+\t *\n+\t * @param nodeID the identifier of the blank node\n+\t *\n+\t * @return a new generic blank node value\n+\t *\n+\t * @throws NullPointerException if {@code nodeID} is {@code null}\n+\t */\n+\tpublic static BNode createBNode(String nodeID) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg3NTI5MQ=="}, "originalCommit": {"oid": "fae58ca4e44f56ea4c63bb945c169d35252ff6ef"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5Mzg5ODg3OnYy", "diffSide": "RIGHT", "path": "core/model-api/src/main/java/org/eclipse/rdf4j/model/base/AbstractIRI.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNDo0NTo0OFrOHmQaTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNDo0NTo0OFrOHmQaTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg3NjgxMg==", "bodyText": "Same here. Let's not put factory methods in the abstract classes themselves.", "url": "https://github.com/eclipse/rdf4j/pull/2607#discussion_r509876812", "createdAt": "2020-10-22T04:45:48Z", "author": {"login": "jeenbroekstra"}, "path": "core/model-api/src/main/java/org/eclipse/rdf4j/model/base/AbstractIRI.java", "diffHunk": "@@ -26,6 +23,61 @@\n \n \tprivate static final long serialVersionUID = 7799969821538513046L;\n \n+\t/**\n+\t * Creates a new IRI value.\n+\t *\n+\t * @param iri the string representation of the IRI\n+\t * \n+\t * @return a new generic IRI value\n+\t * \n+\t * @throws NullPointerException     if {@code iri} is {@code null}\n+\t * @throws IllegalArgumentException if {@code iri} is not an absolute IRI\n+\t */\n+\tpublic static IRI createIRI(String iri) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fae58ca4e44f56ea4c63bb945c169d35252ff6ef"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MzkwMDgwOnYy", "diffSide": "RIGHT", "path": "core/model-api/src/main/java/org/eclipse/rdf4j/model/base/AbstractIRI.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNDo0Njo1NVrOHmQbYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNjozMzo0NlrOHmSgKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg3NzA5MA==", "bodyText": "I think this may be over-optimising things somewhat. Keep in mind that most database implementations will have their own ValueFactory (and therefore own IRI) implementations.", "url": "https://github.com/eclipse/rdf4j/pull/2607#discussion_r509877090", "createdAt": "2020-10-22T04:46:55Z", "author": {"login": "jeenbroekstra"}, "path": "core/model-api/src/main/java/org/eclipse/rdf4j/model/base/AbstractIRI.java", "diffHunk": "@@ -34,17 +86,92 @@ public String stringValue() {\n \t@Override\n \tpublic boolean equals(Object o) {\n \t\treturn this == o || o instanceof IRI\n-\t\t\t\t&& Objects.equals(toString(), ((Value) o).toString()); // !!! use stringValue()\n+\t\t\t\t&& toString().equals(o.toString()); // !!! use stringValue()\n \t}\n \n \t@Override\n \tpublic int hashCode() {\n-\t\treturn Objects.hashCode(toString()); // !!! use stringValue()\n+\t\treturn toString().hashCode(); // !!! use stringValue()\n \t}\n \n \t@Override\n \tpublic String toString() {\n \t\treturn stringValue();\n \t}\n \n+\t////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n+\n+\tprivate static class UnaryIRI extends AbstractIRI {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fae58ca4e44f56ea4c63bb945c169d35252ff6ef"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTkxMTA4Mw==", "bodyText": "More of a matter of convenience, as the merging/splitting logic is reversed in the two cases, but I'll review the matter.", "url": "https://github.com/eclipse/rdf4j/pull/2607#discussion_r509911083", "createdAt": "2020-10-22T06:33:46Z", "author": {"login": "knoan"}, "path": "core/model-api/src/main/java/org/eclipse/rdf4j/model/base/AbstractIRI.java", "diffHunk": "@@ -34,17 +86,92 @@ public String stringValue() {\n \t@Override\n \tpublic boolean equals(Object o) {\n \t\treturn this == o || o instanceof IRI\n-\t\t\t\t&& Objects.equals(toString(), ((Value) o).toString()); // !!! use stringValue()\n+\t\t\t\t&& toString().equals(o.toString()); // !!! use stringValue()\n \t}\n \n \t@Override\n \tpublic int hashCode() {\n-\t\treturn Objects.hashCode(toString()); // !!! use stringValue()\n+\t\treturn toString().hashCode(); // !!! use stringValue()\n \t}\n \n \t@Override\n \tpublic String toString() {\n \t\treturn stringValue();\n \t}\n \n+\t////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n+\n+\tprivate static class UnaryIRI extends AbstractIRI {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg3NzA5MA=="}, "originalCommit": {"oid": "fae58ca4e44f56ea4c63bb945c169d35252ff6ef"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNTU0NDY1OnYy", "diffSide": "RIGHT", "path": "core/model-api/src/main/java/org/eclipse/rdf4j/model/base/AbstractBNode.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQyMjowNDozMVrOHn86lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNjoxODowNVrOHvgOuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY1NDU1MQ==", "bodyText": "This is somewhat minor (so don't feel the need to immediately take these out again), but: open question (to @hmottestad and @barthanssens as well) - what's your opinion on the usefulness of this kind of \"visual divider\" commenting? I've been taking most of the legacy marker comment blocks (\"constructors\" / \"public methods\") etc out because they tend to get malformed and also just wrong over time (people putting private methods in the public methods bit etc).\nI'm personally not in favor of adding this kind of thing at all. But if we feel there's value in organising code this way then I'd like a consistent style adopted, at least.", "url": "https://github.com/eclipse/rdf4j/pull/2607#discussion_r511654551", "createdAt": "2020-10-25T22:04:31Z", "author": {"login": "jeenbroekstra"}, "path": "core/model-api/src/main/java/org/eclipse/rdf4j/model/base/AbstractBNode.java", "diffHunk": "@@ -22,6 +20,8 @@\n \n \tprivate static final long serialVersionUID = -437354568418943981L;\n \n+\t////////////////////////////////////////////////////////////////////////////////////////////////////////////////////", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78000512453ae2de10b1dd1135dda91b80c20206"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc1ODI4MQ==", "bodyText": "When working with a folding code editor on a complex class, I find it useful to be able to visually group related methods.\nThis particular graphic solution is probably too imposing: my personal suggestion would be to relax formatting rules to allow for two consecutive blank lines as in the attached example.", "url": "https://github.com/eclipse/rdf4j/pull/2607#discussion_r511758281", "createdAt": "2020-10-26T07:24:58Z", "author": {"login": "knoan"}, "path": "core/model-api/src/main/java/org/eclipse/rdf4j/model/base/AbstractBNode.java", "diffHunk": "@@ -22,6 +20,8 @@\n \n \tprivate static final long serialVersionUID = -437354568418943981L;\n \n+\t////////////////////////////////////////////////////////////////////////////////////////////////////////////////////", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY1NDU1MQ=="}, "originalCommit": {"oid": "78000512453ae2de10b1dd1135dda91b80c20206"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc2MDk2Nw==", "bodyText": "Provisionally removed from this PR.", "url": "https://github.com/eclipse/rdf4j/pull/2607#discussion_r511760967", "createdAt": "2020-10-26T07:31:45Z", "author": {"login": "knoan"}, "path": "core/model-api/src/main/java/org/eclipse/rdf4j/model/base/AbstractBNode.java", "diffHunk": "@@ -22,6 +20,8 @@\n \n \tprivate static final long serialVersionUID = -437354568418943981L;\n \n+\t////////////////////////////////////////////////////////////////////////////////////////////////////////////////////", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY1NDU1MQ=="}, "originalCommit": {"oid": "78000512453ae2de10b1dd1135dda91b80c20206"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU3MzE3OQ==", "bodyText": "@knoan fwiw I put this up for discussion and seeing if there are some best practices we can agree upon on the rdf4j-dev mailinglist, feel free to chime in there. For now I'm fine with just some developer discretion, as in: feel free to use what you think makes the code easier to read / maintain, as long as nobody objects you're good :)", "url": "https://github.com/eclipse/rdf4j/pull/2607#discussion_r519573179", "createdAt": "2020-11-09T06:18:05Z", "author": {"login": "jeenbroekstra"}, "path": "core/model-api/src/main/java/org/eclipse/rdf4j/model/base/AbstractBNode.java", "diffHunk": "@@ -22,6 +20,8 @@\n \n \tprivate static final long serialVersionUID = -437354568418943981L;\n \n+\t////////////////////////////////////////////////////////////////////////////////////////////////////////////////////", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY1NDU1MQ=="}, "originalCommit": {"oid": "78000512453ae2de10b1dd1135dda91b80c20206"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNTU2ODE1OnYy", "diffSide": "RIGHT", "path": "core/model-api/src/main/java/org/eclipse/rdf4j/model/base/AbstractValueFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQyMjoyOTo1NlrOHn9GNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNzo1NDowMFrOHoD9-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY1NzUyNw==", "bodyText": "I've just realized that this new class was introduced, but there's no relation to the existing AbstractValueFactory. I'll take a look at that, we may want to have the old class inherit from the new and/or deprecate it.", "url": "https://github.com/eclipse/rdf4j/pull/2607#discussion_r511657527", "createdAt": "2020-10-25T22:29:56Z", "author": {"login": "jeenbroekstra"}, "path": "core/model-api/src/main/java/org/eclipse/rdf4j/model/base/AbstractValueFactory.java", "diffHunk": "@@ -0,0 +1,280 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ ******************************************************************************/\n+\n+package org.eclipse.rdf4j.model.base;\n+\n+import static org.eclipse.rdf4j.model.base.AbstractLiteral.reserved;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import javax.xml.datatype.XMLGregorianCalendar;\n+\n+import org.eclipse.rdf4j.model.BNode;\n+import org.eclipse.rdf4j.model.IRI;\n+import org.eclipse.rdf4j.model.Literal;\n+import org.eclipse.rdf4j.model.Resource;\n+import org.eclipse.rdf4j.model.Statement;\n+import org.eclipse.rdf4j.model.Triple;\n+import org.eclipse.rdf4j.model.Value;\n+import org.eclipse.rdf4j.model.ValueFactory;\n+import org.eclipse.rdf4j.model.base.AbstractBNode.GenericBNode;\n+import org.eclipse.rdf4j.model.base.AbstractIRI.GenericIRI;\n+import org.eclipse.rdf4j.model.base.AbstractLiteral.BooleanLiteral;\n+import org.eclipse.rdf4j.model.base.AbstractLiteral.CalendarLiteral;\n+import org.eclipse.rdf4j.model.base.AbstractLiteral.DecimalLiteral;\n+import org.eclipse.rdf4j.model.base.AbstractLiteral.IntegerLiteral;\n+import org.eclipse.rdf4j.model.base.AbstractLiteral.NumberLiteral;\n+import org.eclipse.rdf4j.model.base.AbstractLiteral.TaggedLiteral;\n+import org.eclipse.rdf4j.model.base.AbstractLiteral.TypedLiteral;\n+import org.eclipse.rdf4j.model.base.AbstractStatement.GenericStatement;\n+import org.eclipse.rdf4j.model.base.AbstractTriple.GenericTriple;\n+\n+/**\n+ * Base class for {@link ValueFactory}, offering common functionality.\n+ *\n+ * @author Alessandro Bollini\n+ * @since 3.5.0\n+ */\n+@SuppressWarnings(\"UseOfObsoleteDateTimeApi\")\n+public abstract class AbstractValueFactory implements ValueFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78000512453ae2de10b1dd1135dda91b80c20206"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc3MDEwNg==", "bodyText": "See #2607 (comment)", "url": "https://github.com/eclipse/rdf4j/pull/2607#discussion_r511770106", "createdAt": "2020-10-26T07:54:00Z", "author": {"login": "knoan"}, "path": "core/model-api/src/main/java/org/eclipse/rdf4j/model/base/AbstractValueFactory.java", "diffHunk": "@@ -0,0 +1,280 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ ******************************************************************************/\n+\n+package org.eclipse.rdf4j.model.base;\n+\n+import static org.eclipse.rdf4j.model.base.AbstractLiteral.reserved;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import javax.xml.datatype.XMLGregorianCalendar;\n+\n+import org.eclipse.rdf4j.model.BNode;\n+import org.eclipse.rdf4j.model.IRI;\n+import org.eclipse.rdf4j.model.Literal;\n+import org.eclipse.rdf4j.model.Resource;\n+import org.eclipse.rdf4j.model.Statement;\n+import org.eclipse.rdf4j.model.Triple;\n+import org.eclipse.rdf4j.model.Value;\n+import org.eclipse.rdf4j.model.ValueFactory;\n+import org.eclipse.rdf4j.model.base.AbstractBNode.GenericBNode;\n+import org.eclipse.rdf4j.model.base.AbstractIRI.GenericIRI;\n+import org.eclipse.rdf4j.model.base.AbstractLiteral.BooleanLiteral;\n+import org.eclipse.rdf4j.model.base.AbstractLiteral.CalendarLiteral;\n+import org.eclipse.rdf4j.model.base.AbstractLiteral.DecimalLiteral;\n+import org.eclipse.rdf4j.model.base.AbstractLiteral.IntegerLiteral;\n+import org.eclipse.rdf4j.model.base.AbstractLiteral.NumberLiteral;\n+import org.eclipse.rdf4j.model.base.AbstractLiteral.TaggedLiteral;\n+import org.eclipse.rdf4j.model.base.AbstractLiteral.TypedLiteral;\n+import org.eclipse.rdf4j.model.base.AbstractStatement.GenericStatement;\n+import org.eclipse.rdf4j.model.base.AbstractTriple.GenericTriple;\n+\n+/**\n+ * Base class for {@link ValueFactory}, offering common functionality.\n+ *\n+ * @author Alessandro Bollini\n+ * @since 3.5.0\n+ */\n+@SuppressWarnings(\"UseOfObsoleteDateTimeApi\")\n+public abstract class AbstractValueFactory implements ValueFactory {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY1NzUyNw=="}, "originalCommit": {"oid": "78000512453ae2de10b1dd1135dda91b80c20206"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNTU2OTQyOnYy", "diffSide": "RIGHT", "path": "core/model-api/src/main/java/org/eclipse/rdf4j/model/base/AbstractValueFactory.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQyMjozMToyMVrOHn9Gzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwODoxMjoxMFrOHoEeYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY1NzY3OQ==", "bodyText": "Objects.requireNonNull(nodeID);?", "url": "https://github.com/eclipse/rdf4j/pull/2607#discussion_r511657679", "createdAt": "2020-10-25T22:31:21Z", "author": {"login": "jeenbroekstra"}, "path": "core/model-api/src/main/java/org/eclipse/rdf4j/model/base/AbstractValueFactory.java", "diffHunk": "@@ -0,0 +1,280 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ ******************************************************************************/\n+\n+package org.eclipse.rdf4j.model.base;\n+\n+import static org.eclipse.rdf4j.model.base.AbstractLiteral.reserved;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import javax.xml.datatype.XMLGregorianCalendar;\n+\n+import org.eclipse.rdf4j.model.BNode;\n+import org.eclipse.rdf4j.model.IRI;\n+import org.eclipse.rdf4j.model.Literal;\n+import org.eclipse.rdf4j.model.Resource;\n+import org.eclipse.rdf4j.model.Statement;\n+import org.eclipse.rdf4j.model.Triple;\n+import org.eclipse.rdf4j.model.Value;\n+import org.eclipse.rdf4j.model.ValueFactory;\n+import org.eclipse.rdf4j.model.base.AbstractBNode.GenericBNode;\n+import org.eclipse.rdf4j.model.base.AbstractIRI.GenericIRI;\n+import org.eclipse.rdf4j.model.base.AbstractLiteral.BooleanLiteral;\n+import org.eclipse.rdf4j.model.base.AbstractLiteral.CalendarLiteral;\n+import org.eclipse.rdf4j.model.base.AbstractLiteral.DecimalLiteral;\n+import org.eclipse.rdf4j.model.base.AbstractLiteral.IntegerLiteral;\n+import org.eclipse.rdf4j.model.base.AbstractLiteral.NumberLiteral;\n+import org.eclipse.rdf4j.model.base.AbstractLiteral.TaggedLiteral;\n+import org.eclipse.rdf4j.model.base.AbstractLiteral.TypedLiteral;\n+import org.eclipse.rdf4j.model.base.AbstractStatement.GenericStatement;\n+import org.eclipse.rdf4j.model.base.AbstractTriple.GenericTriple;\n+\n+/**\n+ * Base class for {@link ValueFactory}, offering common functionality.\n+ *\n+ * @author Alessandro Bollini\n+ * @since 3.5.0\n+ */\n+@SuppressWarnings(\"UseOfObsoleteDateTimeApi\")\n+public abstract class AbstractValueFactory implements ValueFactory {\n+\n+\tprivate static final Literal TRUE = new BooleanLiteral(true);\n+\tprivate static final Literal FALSE = new BooleanLiteral(false);\n+\n+\t////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n+\n+\tprivate final AtomicLong nodeID = new AtomicLong(ThreadLocalRandom.current().nextLong());\n+\n+\t@Override\n+\tpublic BNode createBNode() {\n+\t\treturn new GenericBNode(Long.toHexString(Math.abs(nodeID.getAndIncrement())));\n+\t}\n+\n+\t@Override\n+\tpublic BNode createBNode(String nodeID) {\n+\n+\t\tif (nodeID == null) {\n+\t\t\tthrow new NullPointerException(\"null nodeID\");\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78000512453ae2de10b1dd1135dda91b80c20206"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc2Mzg2Mg==", "bodyText": "No problem migrating to the compact form, if that is the project standard; however, in the context of argument checking, I personally find the extended form more explicit and more consistent when accompanied by other checks as in:\nif (iri == null) {\n\tthrow new NullPointerException(\"null iri\");\n}\n\nif (iri.indexOf(':') < 0) {\n\tthrow new IllegalArgumentException(\"missing colon in absolute IRI\");\n}", "url": "https://github.com/eclipse/rdf4j/pull/2607#discussion_r511763862", "createdAt": "2020-10-26T07:39:19Z", "author": {"login": "knoan"}, "path": "core/model-api/src/main/java/org/eclipse/rdf4j/model/base/AbstractValueFactory.java", "diffHunk": "@@ -0,0 +1,280 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ ******************************************************************************/\n+\n+package org.eclipse.rdf4j.model.base;\n+\n+import static org.eclipse.rdf4j.model.base.AbstractLiteral.reserved;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import javax.xml.datatype.XMLGregorianCalendar;\n+\n+import org.eclipse.rdf4j.model.BNode;\n+import org.eclipse.rdf4j.model.IRI;\n+import org.eclipse.rdf4j.model.Literal;\n+import org.eclipse.rdf4j.model.Resource;\n+import org.eclipse.rdf4j.model.Statement;\n+import org.eclipse.rdf4j.model.Triple;\n+import org.eclipse.rdf4j.model.Value;\n+import org.eclipse.rdf4j.model.ValueFactory;\n+import org.eclipse.rdf4j.model.base.AbstractBNode.GenericBNode;\n+import org.eclipse.rdf4j.model.base.AbstractIRI.GenericIRI;\n+import org.eclipse.rdf4j.model.base.AbstractLiteral.BooleanLiteral;\n+import org.eclipse.rdf4j.model.base.AbstractLiteral.CalendarLiteral;\n+import org.eclipse.rdf4j.model.base.AbstractLiteral.DecimalLiteral;\n+import org.eclipse.rdf4j.model.base.AbstractLiteral.IntegerLiteral;\n+import org.eclipse.rdf4j.model.base.AbstractLiteral.NumberLiteral;\n+import org.eclipse.rdf4j.model.base.AbstractLiteral.TaggedLiteral;\n+import org.eclipse.rdf4j.model.base.AbstractLiteral.TypedLiteral;\n+import org.eclipse.rdf4j.model.base.AbstractStatement.GenericStatement;\n+import org.eclipse.rdf4j.model.base.AbstractTriple.GenericTriple;\n+\n+/**\n+ * Base class for {@link ValueFactory}, offering common functionality.\n+ *\n+ * @author Alessandro Bollini\n+ * @since 3.5.0\n+ */\n+@SuppressWarnings(\"UseOfObsoleteDateTimeApi\")\n+public abstract class AbstractValueFactory implements ValueFactory {\n+\n+\tprivate static final Literal TRUE = new BooleanLiteral(true);\n+\tprivate static final Literal FALSE = new BooleanLiteral(false);\n+\n+\t////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n+\n+\tprivate final AtomicLong nodeID = new AtomicLong(ThreadLocalRandom.current().nextLong());\n+\n+\t@Override\n+\tpublic BNode createBNode() {\n+\t\treturn new GenericBNode(Long.toHexString(Math.abs(nodeID.getAndIncrement())));\n+\t}\n+\n+\t@Override\n+\tpublic BNode createBNode(String nodeID) {\n+\n+\t\tif (nodeID == null) {\n+\t\t\tthrow new NullPointerException(\"null nodeID\");\n+\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY1NzY3OQ=="}, "originalCommit": {"oid": "78000512453ae2de10b1dd1135dda91b80c20206"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc2NjYxOA==", "bodyText": "Migrated to Objects.requireNonNull().", "url": "https://github.com/eclipse/rdf4j/pull/2607#discussion_r511766618", "createdAt": "2020-10-26T07:46:03Z", "author": {"login": "knoan"}, "path": "core/model-api/src/main/java/org/eclipse/rdf4j/model/base/AbstractValueFactory.java", "diffHunk": "@@ -0,0 +1,280 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ ******************************************************************************/\n+\n+package org.eclipse.rdf4j.model.base;\n+\n+import static org.eclipse.rdf4j.model.base.AbstractLiteral.reserved;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import javax.xml.datatype.XMLGregorianCalendar;\n+\n+import org.eclipse.rdf4j.model.BNode;\n+import org.eclipse.rdf4j.model.IRI;\n+import org.eclipse.rdf4j.model.Literal;\n+import org.eclipse.rdf4j.model.Resource;\n+import org.eclipse.rdf4j.model.Statement;\n+import org.eclipse.rdf4j.model.Triple;\n+import org.eclipse.rdf4j.model.Value;\n+import org.eclipse.rdf4j.model.ValueFactory;\n+import org.eclipse.rdf4j.model.base.AbstractBNode.GenericBNode;\n+import org.eclipse.rdf4j.model.base.AbstractIRI.GenericIRI;\n+import org.eclipse.rdf4j.model.base.AbstractLiteral.BooleanLiteral;\n+import org.eclipse.rdf4j.model.base.AbstractLiteral.CalendarLiteral;\n+import org.eclipse.rdf4j.model.base.AbstractLiteral.DecimalLiteral;\n+import org.eclipse.rdf4j.model.base.AbstractLiteral.IntegerLiteral;\n+import org.eclipse.rdf4j.model.base.AbstractLiteral.NumberLiteral;\n+import org.eclipse.rdf4j.model.base.AbstractLiteral.TaggedLiteral;\n+import org.eclipse.rdf4j.model.base.AbstractLiteral.TypedLiteral;\n+import org.eclipse.rdf4j.model.base.AbstractStatement.GenericStatement;\n+import org.eclipse.rdf4j.model.base.AbstractTriple.GenericTriple;\n+\n+/**\n+ * Base class for {@link ValueFactory}, offering common functionality.\n+ *\n+ * @author Alessandro Bollini\n+ * @since 3.5.0\n+ */\n+@SuppressWarnings(\"UseOfObsoleteDateTimeApi\")\n+public abstract class AbstractValueFactory implements ValueFactory {\n+\n+\tprivate static final Literal TRUE = new BooleanLiteral(true);\n+\tprivate static final Literal FALSE = new BooleanLiteral(false);\n+\n+\t////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n+\n+\tprivate final AtomicLong nodeID = new AtomicLong(ThreadLocalRandom.current().nextLong());\n+\n+\t@Override\n+\tpublic BNode createBNode() {\n+\t\treturn new GenericBNode(Long.toHexString(Math.abs(nodeID.getAndIncrement())));\n+\t}\n+\n+\t@Override\n+\tpublic BNode createBNode(String nodeID) {\n+\n+\t\tif (nodeID == null) {\n+\t\t\tthrow new NullPointerException(\"null nodeID\");\n+\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY1NzY3OQ=="}, "originalCommit": {"oid": "78000512453ae2de10b1dd1135dda91b80c20206"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc3ODQwMQ==", "bodyText": "I don't think we have a consistent standard for this throughout the project - I tend to prefer the more compact form myself but there's some room for personal preference here :)", "url": "https://github.com/eclipse/rdf4j/pull/2607#discussion_r511778401", "createdAt": "2020-10-26T08:12:10Z", "author": {"login": "jeenbroekstra"}, "path": "core/model-api/src/main/java/org/eclipse/rdf4j/model/base/AbstractValueFactory.java", "diffHunk": "@@ -0,0 +1,280 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ ******************************************************************************/\n+\n+package org.eclipse.rdf4j.model.base;\n+\n+import static org.eclipse.rdf4j.model.base.AbstractLiteral.reserved;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import javax.xml.datatype.XMLGregorianCalendar;\n+\n+import org.eclipse.rdf4j.model.BNode;\n+import org.eclipse.rdf4j.model.IRI;\n+import org.eclipse.rdf4j.model.Literal;\n+import org.eclipse.rdf4j.model.Resource;\n+import org.eclipse.rdf4j.model.Statement;\n+import org.eclipse.rdf4j.model.Triple;\n+import org.eclipse.rdf4j.model.Value;\n+import org.eclipse.rdf4j.model.ValueFactory;\n+import org.eclipse.rdf4j.model.base.AbstractBNode.GenericBNode;\n+import org.eclipse.rdf4j.model.base.AbstractIRI.GenericIRI;\n+import org.eclipse.rdf4j.model.base.AbstractLiteral.BooleanLiteral;\n+import org.eclipse.rdf4j.model.base.AbstractLiteral.CalendarLiteral;\n+import org.eclipse.rdf4j.model.base.AbstractLiteral.DecimalLiteral;\n+import org.eclipse.rdf4j.model.base.AbstractLiteral.IntegerLiteral;\n+import org.eclipse.rdf4j.model.base.AbstractLiteral.NumberLiteral;\n+import org.eclipse.rdf4j.model.base.AbstractLiteral.TaggedLiteral;\n+import org.eclipse.rdf4j.model.base.AbstractLiteral.TypedLiteral;\n+import org.eclipse.rdf4j.model.base.AbstractStatement.GenericStatement;\n+import org.eclipse.rdf4j.model.base.AbstractTriple.GenericTriple;\n+\n+/**\n+ * Base class for {@link ValueFactory}, offering common functionality.\n+ *\n+ * @author Alessandro Bollini\n+ * @since 3.5.0\n+ */\n+@SuppressWarnings(\"UseOfObsoleteDateTimeApi\")\n+public abstract class AbstractValueFactory implements ValueFactory {\n+\n+\tprivate static final Literal TRUE = new BooleanLiteral(true);\n+\tprivate static final Literal FALSE = new BooleanLiteral(false);\n+\n+\t////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n+\n+\tprivate final AtomicLong nodeID = new AtomicLong(ThreadLocalRandom.current().nextLong());\n+\n+\t@Override\n+\tpublic BNode createBNode() {\n+\t\treturn new GenericBNode(Long.toHexString(Math.abs(nodeID.getAndIncrement())));\n+\t}\n+\n+\t@Override\n+\tpublic BNode createBNode(String nodeID) {\n+\n+\t\tif (nodeID == null) {\n+\t\t\tthrow new NullPointerException(\"null nodeID\");\n+\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY1NzY3OQ=="}, "originalCommit": {"oid": "78000512453ae2de10b1dd1135dda91b80c20206"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjEzOTA1OnYy", "diffSide": "RIGHT", "path": "core/model-api/src/main/java/org/eclipse/rdf4j/model/base/AbstractLiteral.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNjoxMToyMlrOHoB5Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNzo1MDozMFrOHoD4Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTczNjEzOQ==", "bodyText": "Where does this come from? I've never seen this particular warning / annotation before.", "url": "https://github.com/eclipse/rdf4j/pull/2607#discussion_r511736139", "createdAt": "2020-10-26T06:11:22Z", "author": {"login": "jeenbroekstra"}, "path": "core/model-api/src/main/java/org/eclipse/rdf4j/model/base/AbstractLiteral.java", "diffHunk": "@@ -8,56 +8,88 @@\n \n package org.eclipse.rdf4j.model.base;\n \n-import static java.lang.Boolean.FALSE;\n-import static java.lang.Boolean.TRUE;\n import static java.util.Objects.requireNonNull;\n \n import java.math.BigDecimal;\n import java.math.BigInteger;\n-import java.util.Locale;\n-import java.util.Objects;\n+import java.util.GregorianCalendar;\n+import java.util.HashMap;\n+import java.util.Map;\n import java.util.Optional;\n import java.util.function.Function;\n-import java.util.regex.Pattern;\n \n import javax.xml.datatype.DatatypeConfigurationException;\n+import javax.xml.datatype.DatatypeConstants;\n import javax.xml.datatype.DatatypeFactory;\n import javax.xml.datatype.XMLGregorianCalendar;\n+import javax.xml.namespace.QName;\n \n+import org.eclipse.rdf4j.model.IRI;\n import org.eclipse.rdf4j.model.Literal;\n-import org.eclipse.rdf4j.model.Value;\n+import org.eclipse.rdf4j.model.base.AbstractIRI.GenericIRI;\n \n /**\n  * Base class for {@link Literal}, offering common functionality.\n  *\n  * @author Alessandro Bollini\n  * @since 3.5.0\n  */\n+@SuppressWarnings(\"UseOfObsoleteDateTimeApi\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78000512453ae2de10b1dd1135dda91b80c20206"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc2ODYxNA==", "bodyText": "Technically speaking that annotation prevents IntelliJ automated QA from complaining about the use of Date and Calendar. Probably also useful as a human-readable reminder of the need to upgrade (e.g. #2563).", "url": "https://github.com/eclipse/rdf4j/pull/2607#discussion_r511768614", "createdAt": "2020-10-26T07:50:30Z", "author": {"login": "knoan"}, "path": "core/model-api/src/main/java/org/eclipse/rdf4j/model/base/AbstractLiteral.java", "diffHunk": "@@ -8,56 +8,88 @@\n \n package org.eclipse.rdf4j.model.base;\n \n-import static java.lang.Boolean.FALSE;\n-import static java.lang.Boolean.TRUE;\n import static java.util.Objects.requireNonNull;\n \n import java.math.BigDecimal;\n import java.math.BigInteger;\n-import java.util.Locale;\n-import java.util.Objects;\n+import java.util.GregorianCalendar;\n+import java.util.HashMap;\n+import java.util.Map;\n import java.util.Optional;\n import java.util.function.Function;\n-import java.util.regex.Pattern;\n \n import javax.xml.datatype.DatatypeConfigurationException;\n+import javax.xml.datatype.DatatypeConstants;\n import javax.xml.datatype.DatatypeFactory;\n import javax.xml.datatype.XMLGregorianCalendar;\n+import javax.xml.namespace.QName;\n \n+import org.eclipse.rdf4j.model.IRI;\n import org.eclipse.rdf4j.model.Literal;\n-import org.eclipse.rdf4j.model.Value;\n+import org.eclipse.rdf4j.model.base.AbstractIRI.GenericIRI;\n \n /**\n  * Base class for {@link Literal}, offering common functionality.\n  *\n  * @author Alessandro Bollini\n  * @since 3.5.0\n  */\n+@SuppressWarnings(\"UseOfObsoleteDateTimeApi\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTczNjEzOQ=="}, "originalCommit": {"oid": "78000512453ae2de10b1dd1135dda91b80c20206"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjE4MjY1OnYy", "diffSide": "RIGHT", "path": "core/model-api/src/main/java/org/eclipse/rdf4j/model/base/AbstractIRI.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNjozNDoxNFrOHoCRhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNzo1MzoxMVrOHoD8dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc0MjM0Mg==", "bodyText": "Could we rewrite this using if...else instead of a collection of ternary operators? It will be easier to read I think.", "url": "https://github.com/eclipse/rdf4j/pull/2607#discussion_r511742342", "createdAt": "2020-10-26T06:34:14Z", "author": {"login": "jeenbroekstra"}, "path": "core/model-api/src/main/java/org/eclipse/rdf4j/model/base/AbstractIRI.java", "diffHunk": "@@ -34,17 +33,62 @@ public String stringValue() {\n \t@Override\n \tpublic boolean equals(Object o) {\n \t\treturn this == o || o instanceof IRI\n-\t\t\t\t&& Objects.equals(toString(), ((Value) o).toString()); // !!! use stringValue()\n+\t\t\t\t&& toString().equals(o.toString()); // !!! use stringValue()\n \t}\n \n \t@Override\n \tpublic int hashCode() {\n-\t\treturn Objects.hashCode(toString()); // !!! use stringValue()\n+\t\treturn toString().hashCode(); // !!! use stringValue()\n \t}\n \n \t@Override\n \tpublic String toString() {\n \t\treturn stringValue();\n \t}\n \n+\t////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n+\n+\tstatic class GenericIRI extends AbstractIRI {\n+\n+\t\tprivate static final long serialVersionUID = 2209156550690548467L;\n+\n+\t\tprivate String iri;\n+\n+\t\tprivate int split;\n+\n+\t\tGenericIRI(String iri) {\n+\t\t\tthis.iri = iri;\n+\t\t\tthis.split = 0;\n+\t\t}\n+\n+\t\tGenericIRI(String namespace, String localName) {\n+\t\t\tthis.iri = namespace + localName; // !!! concatenation performance impact?\n+\t\t\tthis.split = namespace.length();\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String stringValue() {\n+\t\t\treturn iri;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String getNamespace() {\n+\t\t\treturn iri.substring(0, split());\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String getLocalName() {\n+\t\t\treturn iri.substring(split());\n+\t\t}\n+\n+\t\tprivate int split() {\n+\t\t\treturn (split > 0) ? split\n+\t\t\t\t\t: (split = iri.indexOf('#') + 1) > 0 ? split\n+\t\t\t\t\t\t\t: (split = iri.lastIndexOf('/') + 1) > 0 ? split\n+\t\t\t\t\t\t\t\t\t: (split = iri.lastIndexOf(':') + 1) > 0 ? split\n+\t\t\t\t\t\t\t\t\t\t\t: 0; // unexpected: colon presence already tested in factory methods", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78000512453ae2de10b1dd1135dda91b80c20206"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc2OTcxOQ==", "bodyText": "Done", "url": "https://github.com/eclipse/rdf4j/pull/2607#discussion_r511769719", "createdAt": "2020-10-26T07:53:11Z", "author": {"login": "knoan"}, "path": "core/model-api/src/main/java/org/eclipse/rdf4j/model/base/AbstractIRI.java", "diffHunk": "@@ -34,17 +33,62 @@ public String stringValue() {\n \t@Override\n \tpublic boolean equals(Object o) {\n \t\treturn this == o || o instanceof IRI\n-\t\t\t\t&& Objects.equals(toString(), ((Value) o).toString()); // !!! use stringValue()\n+\t\t\t\t&& toString().equals(o.toString()); // !!! use stringValue()\n \t}\n \n \t@Override\n \tpublic int hashCode() {\n-\t\treturn Objects.hashCode(toString()); // !!! use stringValue()\n+\t\treturn toString().hashCode(); // !!! use stringValue()\n \t}\n \n \t@Override\n \tpublic String toString() {\n \t\treturn stringValue();\n \t}\n \n+\t////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n+\n+\tstatic class GenericIRI extends AbstractIRI {\n+\n+\t\tprivate static final long serialVersionUID = 2209156550690548467L;\n+\n+\t\tprivate String iri;\n+\n+\t\tprivate int split;\n+\n+\t\tGenericIRI(String iri) {\n+\t\t\tthis.iri = iri;\n+\t\t\tthis.split = 0;\n+\t\t}\n+\n+\t\tGenericIRI(String namespace, String localName) {\n+\t\t\tthis.iri = namespace + localName; // !!! concatenation performance impact?\n+\t\t\tthis.split = namespace.length();\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String stringValue() {\n+\t\t\treturn iri;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String getNamespace() {\n+\t\t\treturn iri.substring(0, split());\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String getLocalName() {\n+\t\t\treturn iri.substring(split());\n+\t\t}\n+\n+\t\tprivate int split() {\n+\t\t\treturn (split > 0) ? split\n+\t\t\t\t\t: (split = iri.indexOf('#') + 1) > 0 ? split\n+\t\t\t\t\t\t\t: (split = iri.lastIndexOf('/') + 1) > 0 ? split\n+\t\t\t\t\t\t\t\t\t: (split = iri.lastIndexOf(':') + 1) > 0 ? split\n+\t\t\t\t\t\t\t\t\t\t\t: 0; // unexpected: colon presence already tested in factory methods", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc0MjM0Mg=="}, "originalCommit": {"oid": "78000512453ae2de10b1dd1135dda91b80c20206"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjE4NTI0OnYy", "diffSide": "RIGHT", "path": "core/model-api/src/main/java/org/eclipse/rdf4j/model/base/AbstractLiteral.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNjozNToxN1rOHoCS6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNzo1MzozN1rOHoD9SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc0MjY5Ng==", "bodyText": "We already have a BooleanLiteral class. Do we need this?", "url": "https://github.com/eclipse/rdf4j/pull/2607#discussion_r511742696", "createdAt": "2020-10-26T06:35:17Z", "author": {"login": "jeenbroekstra"}, "path": "core/model-api/src/main/java/org/eclipse/rdf4j/model/base/AbstractLiteral.java", "diffHunk": "@@ -148,41 +179,361 @@ public BigDecimal decimalValue() {\n \n \t@Override\n \tpublic XMLGregorianCalendar calendarValue() {\n-\t\treturn value(label -> factory.get().newXMLGregorianCalendar(label));\n+\t\treturn value(label -> DATATYPE_FACTORY.get().newXMLGregorianCalendar(label));\n \t}\n \n \t@Override\n \tpublic boolean equals(Object o) {\n \t\treturn this == o || o instanceof Literal\n-\t\t\t\t&& Objects.equals(getLabel(), ((Literal) o).getLabel())\n-\t\t\t\t&& Objects.equals(getLanguage().map(this::normalize), ((Literal) o).getLanguage().map(this::normalize))\n-\t\t\t\t&& Objects.equals(getDatatype(), ((Literal) o).getDatatype());\n+\t\t\t\t&& getLabel().equals(((Literal) o).getLabel())\n+\t\t\t\t&& getDatatype().equals(((Literal) o).getDatatype())\n+\t\t\t\t&& equals(getLanguage(), ((Literal) o).getLanguage());\n \t}\n \n \t@Override\n \tpublic int hashCode() {\n-\t\treturn Objects.hashCode(getLabel());\n+\t\treturn getLabel().hashCode();\n \t}\n \n-\t/**\n-\t * Returns the label of the literal with its language or datatype.\n-\t * <p>\n-\t * Note that this method does not escape the quoted label.\n-\t */\n \t@Override\n \tpublic String toString() {\n \n-\t\tfinal String label = Optional.ofNullable(getLabel()).orElse(\"\");\n-\t\tfinal String language = getLanguage().orElse(null);\n-\t\tfinal String datatype = Optional.ofNullable(getDatatype()).map(Value::stringValue).orElse(XSD_STRING);\n+\t\tfinal String label = '\"' + getLabel() + '\"';\n+\n+\t\treturn getLanguage()\n+\n+\t\t\t\t.map(language -> label + '@' + language)\n+\n+\t\t\t\t.orElseGet(() -> {\n+\n+\t\t\t\t\tfinal IRI datatype = getDatatype();\n+\n+\t\t\t\t\treturn datatype.equals(XSD_STRING) ? label\n+\t\t\t\t\t\t\t: label + \"^^<\" + datatype.stringValue() + \">\";\n+\n+\t\t\t\t});\n+\t}\n+\n+\tprivate boolean equals(Optional<String> x, Optional<String> y) {\n+\n+\t\tfinal boolean px = x.isPresent();\n+\t\tfinal boolean py = y.isPresent();\n+\n+\t\treturn px && py && x.get().equalsIgnoreCase(y.get()) || !px && !py;\n+\t}\n+\n+\t////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n+\n+\tstatic class TypedLiteral extends AbstractLiteral {\n+\n+\t\tprivate static final long serialVersionUID = -19640527584237291L;\n+\n+\t\tprivate String label;\n+\t\tprivate IRI datatype;\n+\n+\t\tTypedLiteral(String label) {\n+\t\t\tthis.label = label;\n+\t\t\tthis.datatype = XSD_STRING;\n+\t\t}\n+\n+\t\tTypedLiteral(String label, IRI datatype) {\n+\t\t\tthis.label = label;\n+\t\t\tthis.datatype = (datatype != null) ? datatype : XSD_STRING;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String getLabel() {\n+\t\t\treturn label;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Optional<String> getLanguage() {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic IRI getDatatype() {\n+\t\t\treturn datatype;\n+\t\t}\n \n-\t\treturn language != null ? '\"' + label + '\"' + '@' + language\n-\t\t\t\t: datatype.equals(XSD_STRING) ? '\"' + label + '\"'\n-\t\t\t\t\t\t: '\"' + label + '\"' + \"^^<\" + datatype + \">\";\n \t}\n \n-\tprivate String normalize(String tag) {\n-\t\treturn tag.toUpperCase(Locale.ROOT);\n+\tstatic class TaggedLiteral extends AbstractLiteral {\n+\n+\t\tprivate static final long serialVersionUID = -19640527584237291L;\n+\n+\t\tprivate String label;\n+\t\tprivate String language;\n+\n+\t\tTaggedLiteral(String label, String language) {\n+\t\t\tthis.label = label;\n+\t\t\tthis.language = language;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String getLabel() {\n+\t\t\treturn label;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Optional<String> getLanguage() {\n+\t\t\treturn Optional.of(language);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic IRI getDatatype() {\n+\t\t\treturn RDF_LANGSTRING;\n+\t\t}\n+\n+\t}\n+\n+\tstatic class BooleanLiteral extends AbstractLiteral {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78000512453ae2de10b1dd1135dda91b80c20206"}, "originalPosition": 271}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc2OTkyOQ==", "bodyText": "See #2607 (comment)", "url": "https://github.com/eclipse/rdf4j/pull/2607#discussion_r511769929", "createdAt": "2020-10-26T07:53:37Z", "author": {"login": "knoan"}, "path": "core/model-api/src/main/java/org/eclipse/rdf4j/model/base/AbstractLiteral.java", "diffHunk": "@@ -148,41 +179,361 @@ public BigDecimal decimalValue() {\n \n \t@Override\n \tpublic XMLGregorianCalendar calendarValue() {\n-\t\treturn value(label -> factory.get().newXMLGregorianCalendar(label));\n+\t\treturn value(label -> DATATYPE_FACTORY.get().newXMLGregorianCalendar(label));\n \t}\n \n \t@Override\n \tpublic boolean equals(Object o) {\n \t\treturn this == o || o instanceof Literal\n-\t\t\t\t&& Objects.equals(getLabel(), ((Literal) o).getLabel())\n-\t\t\t\t&& Objects.equals(getLanguage().map(this::normalize), ((Literal) o).getLanguage().map(this::normalize))\n-\t\t\t\t&& Objects.equals(getDatatype(), ((Literal) o).getDatatype());\n+\t\t\t\t&& getLabel().equals(((Literal) o).getLabel())\n+\t\t\t\t&& getDatatype().equals(((Literal) o).getDatatype())\n+\t\t\t\t&& equals(getLanguage(), ((Literal) o).getLanguage());\n \t}\n \n \t@Override\n \tpublic int hashCode() {\n-\t\treturn Objects.hashCode(getLabel());\n+\t\treturn getLabel().hashCode();\n \t}\n \n-\t/**\n-\t * Returns the label of the literal with its language or datatype.\n-\t * <p>\n-\t * Note that this method does not escape the quoted label.\n-\t */\n \t@Override\n \tpublic String toString() {\n \n-\t\tfinal String label = Optional.ofNullable(getLabel()).orElse(\"\");\n-\t\tfinal String language = getLanguage().orElse(null);\n-\t\tfinal String datatype = Optional.ofNullable(getDatatype()).map(Value::stringValue).orElse(XSD_STRING);\n+\t\tfinal String label = '\"' + getLabel() + '\"';\n+\n+\t\treturn getLanguage()\n+\n+\t\t\t\t.map(language -> label + '@' + language)\n+\n+\t\t\t\t.orElseGet(() -> {\n+\n+\t\t\t\t\tfinal IRI datatype = getDatatype();\n+\n+\t\t\t\t\treturn datatype.equals(XSD_STRING) ? label\n+\t\t\t\t\t\t\t: label + \"^^<\" + datatype.stringValue() + \">\";\n+\n+\t\t\t\t});\n+\t}\n+\n+\tprivate boolean equals(Optional<String> x, Optional<String> y) {\n+\n+\t\tfinal boolean px = x.isPresent();\n+\t\tfinal boolean py = y.isPresent();\n+\n+\t\treturn px && py && x.get().equalsIgnoreCase(y.get()) || !px && !py;\n+\t}\n+\n+\t////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n+\n+\tstatic class TypedLiteral extends AbstractLiteral {\n+\n+\t\tprivate static final long serialVersionUID = -19640527584237291L;\n+\n+\t\tprivate String label;\n+\t\tprivate IRI datatype;\n+\n+\t\tTypedLiteral(String label) {\n+\t\t\tthis.label = label;\n+\t\t\tthis.datatype = XSD_STRING;\n+\t\t}\n+\n+\t\tTypedLiteral(String label, IRI datatype) {\n+\t\t\tthis.label = label;\n+\t\t\tthis.datatype = (datatype != null) ? datatype : XSD_STRING;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String getLabel() {\n+\t\t\treturn label;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Optional<String> getLanguage() {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic IRI getDatatype() {\n+\t\t\treturn datatype;\n+\t\t}\n \n-\t\treturn language != null ? '\"' + label + '\"' + '@' + language\n-\t\t\t\t: datatype.equals(XSD_STRING) ? '\"' + label + '\"'\n-\t\t\t\t\t\t: '\"' + label + '\"' + \"^^<\" + datatype + \">\";\n \t}\n \n-\tprivate String normalize(String tag) {\n-\t\treturn tag.toUpperCase(Locale.ROOT);\n+\tstatic class TaggedLiteral extends AbstractLiteral {\n+\n+\t\tprivate static final long serialVersionUID = -19640527584237291L;\n+\n+\t\tprivate String label;\n+\t\tprivate String language;\n+\n+\t\tTaggedLiteral(String label, String language) {\n+\t\t\tthis.label = label;\n+\t\t\tthis.language = language;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String getLabel() {\n+\t\t\treturn label;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Optional<String> getLanguage() {\n+\t\t\treturn Optional.of(language);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic IRI getDatatype() {\n+\t\t\treturn RDF_LANGSTRING;\n+\t\t}\n+\n+\t}\n+\n+\tstatic class BooleanLiteral extends AbstractLiteral {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc0MjY5Ng=="}, "originalCommit": {"oid": "78000512453ae2de10b1dd1135dda91b80c20206"}, "originalPosition": 271}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjE4OTM5OnYy", "diffSide": "RIGHT", "path": "core/model-api/src/main/java/org/eclipse/rdf4j/model/base/AbstractStatement.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNjozNzozM1rOHoCVLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwODowNDo1N1rOHoERYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc0MzI3OQ==", "bodyText": "I genuinely don't understand what this comment means (also not sure I understand what the !!! signifies).", "url": "https://github.com/eclipse/rdf4j/pull/2607#discussion_r511743279", "createdAt": "2020-10-26T06:37:33Z", "author": {"login": "jeenbroekstra"}, "path": "core/model-api/src/main/java/org/eclipse/rdf4j/model/base/AbstractStatement.java", "diffHunk": "@@ -30,15 +35,15 @@ public boolean equals(Object o) {\n \t\t// so these are checked last.\n \n \t\treturn this == o || o instanceof Statement\n-\t\t\t\t&& Objects.equals(getObject(), ((Statement) o).getObject())\n-\t\t\t\t&& Objects.equals(getSubject(), ((Statement) o).getSubject())\n-\t\t\t\t&& Objects.equals(getPredicate(), ((Statement) o).getPredicate())\n+\t\t\t\t&& getObject().equals(((Statement) o).getObject())\n+\t\t\t\t&& getSubject().equals(((Statement) o).getSubject())\n+\t\t\t\t&& getPredicate().equals(((Statement) o).getPredicate())\n \t\t\t\t&& Objects.equals(getContext(), ((Statement) o).getContext());\n \t}\n \n \t@Override\n \tpublic int hashCode() {\n-\t\treturn Objects.hash(getSubject(), getPredicate(), getObject(), getContext());\n+\t\treturn Objects.hash(getSubject(), getPredicate(), getObject(), getContext()); // !!! avoid array creation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78000512453ae2de10b1dd1135dda91b80c20206"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc3MDU4Mg==", "bodyText": "!!!comments are just a leftover personal annotations, now removed or replaced with TODO comments.", "url": "https://github.com/eclipse/rdf4j/pull/2607#discussion_r511770582", "createdAt": "2020-10-26T07:55:01Z", "author": {"login": "knoan"}, "path": "core/model-api/src/main/java/org/eclipse/rdf4j/model/base/AbstractStatement.java", "diffHunk": "@@ -30,15 +35,15 @@ public boolean equals(Object o) {\n \t\t// so these are checked last.\n \n \t\treturn this == o || o instanceof Statement\n-\t\t\t\t&& Objects.equals(getObject(), ((Statement) o).getObject())\n-\t\t\t\t&& Objects.equals(getSubject(), ((Statement) o).getSubject())\n-\t\t\t\t&& Objects.equals(getPredicate(), ((Statement) o).getPredicate())\n+\t\t\t\t&& getObject().equals(((Statement) o).getObject())\n+\t\t\t\t&& getSubject().equals(((Statement) o).getSubject())\n+\t\t\t\t&& getPredicate().equals(((Statement) o).getPredicate())\n \t\t\t\t&& Objects.equals(getContext(), ((Statement) o).getContext());\n \t}\n \n \t@Override\n \tpublic int hashCode() {\n-\t\treturn Objects.hash(getSubject(), getPredicate(), getObject(), getContext());\n+\t\treturn Objects.hash(getSubject(), getPredicate(), getObject(), getContext()); // !!! avoid array creation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc0MzI3OQ=="}, "originalCommit": {"oid": "78000512453ae2de10b1dd1135dda91b80c20206"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc3NTA3NQ==", "bodyText": "Objects.hash() is a variadic method: invoking it requires the instantiation of an array containing arguments, which in the context of .hashCode() has a large performance impact (more than 25% according to my rough figures).\nLeft a comment just as a reminder for future review: we are currently not at liberty of redefining hashing, as already discussed elsewhere.", "url": "https://github.com/eclipse/rdf4j/pull/2607#discussion_r511775075", "createdAt": "2020-10-26T08:04:57Z", "author": {"login": "knoan"}, "path": "core/model-api/src/main/java/org/eclipse/rdf4j/model/base/AbstractStatement.java", "diffHunk": "@@ -30,15 +35,15 @@ public boolean equals(Object o) {\n \t\t// so these are checked last.\n \n \t\treturn this == o || o instanceof Statement\n-\t\t\t\t&& Objects.equals(getObject(), ((Statement) o).getObject())\n-\t\t\t\t&& Objects.equals(getSubject(), ((Statement) o).getSubject())\n-\t\t\t\t&& Objects.equals(getPredicate(), ((Statement) o).getPredicate())\n+\t\t\t\t&& getObject().equals(((Statement) o).getObject())\n+\t\t\t\t&& getSubject().equals(((Statement) o).getSubject())\n+\t\t\t\t&& getPredicate().equals(((Statement) o).getPredicate())\n \t\t\t\t&& Objects.equals(getContext(), ((Statement) o).getContext());\n \t}\n \n \t@Override\n \tpublic int hashCode() {\n-\t\treturn Objects.hash(getSubject(), getPredicate(), getObject(), getContext());\n+\t\treturn Objects.hash(getSubject(), getPredicate(), getObject(), getContext()); // !!! avoid array creation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc0MzI3OQ=="}, "originalCommit": {"oid": "78000512453ae2de10b1dd1135dda91b80c20206"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1313, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}