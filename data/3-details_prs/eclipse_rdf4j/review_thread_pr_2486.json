{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgwMzMxNDc5", "number": 2486, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwOToyMTo0OVrOEg26uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwOToyMTo0OVrOEg26uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyODg5NjU2OnYy", "diffSide": "RIGHT", "path": "core/model/src/test/java/org/eclipse/rdf4j/model/util/RDFCollectionsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwOToyMTo0OVrOHN3spQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QyMzozMToyN1rOHOIxSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDMwNjA4NQ==", "bodyText": "Could you add the comment: // supply incorrect head node\nMakes the test easier to read.", "url": "https://github.com/eclipse/rdf4j/pull/2486#discussion_r484306085", "createdAt": "2020-09-07T09:21:49Z", "author": {"login": "hmottestad"}, "path": "core/model/src/test/java/org/eclipse/rdf4j/model/util/RDFCollectionsTest.java", "diffHunk": "@@ -71,35 +70,33 @@ public void testConversionRoundtrip() {\n \n \t}\n \n-\t@Test\n-\tpublic void testNonWellformedCollection() {\n+\t@Test(expected = ModelException.class)\n+\tpublic void testNonWellformedCollection_MissingTerminator() {\n \t\tResource head = vf.createBNode();\n \t\tModel m = RDFCollections.asRDF(values, head, new TreeModel());\n \t\tm.remove(null, RDF.REST, RDF.NIL);\n-\t\ttry {\n-\t\t\tRDFCollections.asValues(m, head, new ArrayList<>());\n-\t\t\tfail(\"collection missing terminator should result in error\");\n-\t\t} catch (ModelException e) {\n-\t\t\t// fall through, expected\n-\t\t}\n-\n-\t\tm = RDFCollections.asRDF(values, head, new TreeModel());\n+\t\tRDFCollections.asValues(m, head, new ArrayList<>());\n+\t}\n+\n+\t@Test(expected = ModelException.class)\n+\tpublic void testNonWellformedCollection_Cycle() {\n+\t\tResource head = vf.createBNode(\"z\");\n+\t\tModel m = RDFCollections.asRDF(values, head, new TreeModel());\n+\n+\t\t// Replace rdf:rest relation for head node with one pointing to itself.\n+\t\t// This introduces a cycle in an otherwise well-formed collection.\n+\t\tm.remove(head, RDF.REST, null);\n \t\tm.add(head, RDF.REST, head);\n \n-\t\ttry {\n-\t\t\tRDFCollections.asValues(m, head, new ArrayList<>());\n-\t\t\tfail(\"collection with cycle should result in error\");\n-\t\t} catch (ModelException e) {\n-\t\t\t// fall through, expected\n-\t\t}\n-\n-\t\t// supply incorrect head node\n-\t\ttry {\n-\t\t\tRDFCollections.asValues(m, vf.createBNode(), new ArrayList<>());\n-\t\t\tfail(\"resource that is not a collection should result in error\");\n-\t\t} catch (ModelException e) {\n-\t\t\t// fall through, expected\n-\t\t}\n+\t\tRDFCollections.asValues(m, head, new ArrayList<>());\n+\t}\n+\n+\t@Test(expected = ModelException.class)\n+\tpublic void testNonWellformedCollection_IncorrectHeadNode() {\n+\t\tResource head = vf.createBNode();\n+\t\tModel m = RDFCollections.asRDF(values, head, new TreeModel());\n+\n+\t\tRDFCollections.asValues(m, vf.createBNode(), new ArrayList<>());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8c624faf00bed7f10abeed6321ab08026e15634"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU4NTgwMw==", "bodyText": "Fixed.", "url": "https://github.com/eclipse/rdf4j/pull/2486#discussion_r484585803", "createdAt": "2020-09-07T23:31:27Z", "author": {"login": "jeenbroekstra"}, "path": "core/model/src/test/java/org/eclipse/rdf4j/model/util/RDFCollectionsTest.java", "diffHunk": "@@ -71,35 +70,33 @@ public void testConversionRoundtrip() {\n \n \t}\n \n-\t@Test\n-\tpublic void testNonWellformedCollection() {\n+\t@Test(expected = ModelException.class)\n+\tpublic void testNonWellformedCollection_MissingTerminator() {\n \t\tResource head = vf.createBNode();\n \t\tModel m = RDFCollections.asRDF(values, head, new TreeModel());\n \t\tm.remove(null, RDF.REST, RDF.NIL);\n-\t\ttry {\n-\t\t\tRDFCollections.asValues(m, head, new ArrayList<>());\n-\t\t\tfail(\"collection missing terminator should result in error\");\n-\t\t} catch (ModelException e) {\n-\t\t\t// fall through, expected\n-\t\t}\n-\n-\t\tm = RDFCollections.asRDF(values, head, new TreeModel());\n+\t\tRDFCollections.asValues(m, head, new ArrayList<>());\n+\t}\n+\n+\t@Test(expected = ModelException.class)\n+\tpublic void testNonWellformedCollection_Cycle() {\n+\t\tResource head = vf.createBNode(\"z\");\n+\t\tModel m = RDFCollections.asRDF(values, head, new TreeModel());\n+\n+\t\t// Replace rdf:rest relation for head node with one pointing to itself.\n+\t\t// This introduces a cycle in an otherwise well-formed collection.\n+\t\tm.remove(head, RDF.REST, null);\n \t\tm.add(head, RDF.REST, head);\n \n-\t\ttry {\n-\t\t\tRDFCollections.asValues(m, head, new ArrayList<>());\n-\t\t\tfail(\"collection with cycle should result in error\");\n-\t\t} catch (ModelException e) {\n-\t\t\t// fall through, expected\n-\t\t}\n-\n-\t\t// supply incorrect head node\n-\t\ttry {\n-\t\t\tRDFCollections.asValues(m, vf.createBNode(), new ArrayList<>());\n-\t\t\tfail(\"resource that is not a collection should result in error\");\n-\t\t} catch (ModelException e) {\n-\t\t\t// fall through, expected\n-\t\t}\n+\t\tRDFCollections.asValues(m, head, new ArrayList<>());\n+\t}\n+\n+\t@Test(expected = ModelException.class)\n+\tpublic void testNonWellformedCollection_IncorrectHeadNode() {\n+\t\tResource head = vf.createBNode();\n+\t\tModel m = RDFCollections.asRDF(values, head, new TreeModel());\n+\n+\t\tRDFCollections.asValues(m, vf.createBNode(), new ArrayList<>());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDMwNjA4NQ=="}, "originalCommit": {"oid": "c8c624faf00bed7f10abeed6321ab08026e15634"}, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1364, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}