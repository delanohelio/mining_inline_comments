{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxMDA5NDcw", "number": 1821, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQyMzo0NDozOFrODXWa4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQyMzo0NzoxMFrODXWbKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODExMTY5OnYy", "diffSide": "RIGHT", "path": "compliance/repository/src/test/java/org/eclipse/rdf4j/repository/sparql/federation/RepositoryFederatedServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQyMzo0NDozOFrOFcnSLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxNzozNzo1M1rOFcqZMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU0ODA3Nw==", "bodyText": "Could you add a comment here that explains why this test is a good indicator if things are properly closed? I know you explained in the PR description but I'm thinking it would be good to have it as a code comment.", "url": "https://github.com/eclipse/rdf4j/pull/1821#discussion_r365548077", "createdAt": "2020-01-11T23:44:38Z", "author": {"login": "jeenbroekstra"}, "path": "compliance/repository/src/test/java/org/eclipse/rdf4j/repository/sparql/federation/RepositoryFederatedServiceIntegrationTest.java", "diffHunk": "@@ -262,6 +265,59 @@ public void test8a_subSelectAll() throws Exception {\n \t\tassertResultEquals(evaluateQuery(query), \"var\", Lists.newArrayList(l(\"val1\")));\n \t}\n \n+\t@Test\n+\tpublic void test9_connectionHandling() throws Exception {\n+\n+\t\tSystem.setProperty(\"org.eclipse.rdf4j.repository.debug\", \"true\");\n+\t\tList<Value> values = Lists.newArrayList();\n+\t\tfor (int i = 0; i < 10; i++) {\n+\t\t\tvalues.add(l(\"value\" + i));\n+\t\t}\n+\t\taddData(serviceRepo,\n+\t\t\t\tvalues.stream()\n+\t\t\t\t\t\t.map(value -> vf.createStatement(iri(\"s1\"), RDFS.LABEL, value))\n+\t\t\t\t\t\t.collect(Collectors.toList()));\n+\n+\t\tExecutorService executor = Executors.newFixedThreadPool(5);\n+\t\ttry {\n+\t\t\tfor (int i = 0; i < 5; i++) {\n+\t\t\t\texecutor.submit(() -> {\n+\n+\t\t\t\t\tString query = \"SELECT ?var WHERE { SERVICE <urn:dummy> { ?s ?p ?var  } }\";\n+\t\t\t\t\tassertResultEquals(evaluateQuery(query), \"var\", values);\n+\t\t\t\t});\n+\t\t\t}\n+\n+\t\t} finally {\n+\t\t\texecutor.shutdown();\n+\t\t\texecutor.awaitTermination(10, TimeUnit.SECONDS);\n+\t\t}\n+\n+\t}\n+\n+\t@Test\n+\tpublic void test10_consumePartially() throws Exception {\n+\n+\t\tList<Value> values = Lists.newArrayList();\n+\t\tfor (int i = 0; i < 10; i++) {\n+\t\t\tvalues.add(l(\"value\" + i));\n+\t\t}\n+\t\taddData(serviceRepo,\n+\t\t\t\tvalues.stream()\n+\t\t\t\t\t\t.map(value -> vf.createStatement(iri(\"s1\"), RDFS.LABEL, value))\n+\t\t\t\t\t\t.collect(Collectors.toList()));\n+\n+\t\tString query = \"SELECT ?var WHERE { SERVICE <urn:dummy> { ?s ?p ?var  } }\";\n+\t\ttry (RepositoryConnection conn = localRepo.getConnection()) {\n+\t\t\ttry (TupleQueryResult tqr = conn.prepareTupleQuery(query).evaluate()) {\n+\n+\t\t\t\t// consume only two items\n+\t\t\t\ttqr.next();\n+\t\t\t\ttqr.next();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad0e2d457dcdeba383a939e69a14269aecb3527f"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU5OTAyNg==", "bodyText": "Added a comment to both tests.", "url": "https://github.com/eclipse/rdf4j/pull/1821#discussion_r365599026", "createdAt": "2020-01-12T17:37:53Z", "author": {"login": "aschwarte10"}, "path": "compliance/repository/src/test/java/org/eclipse/rdf4j/repository/sparql/federation/RepositoryFederatedServiceIntegrationTest.java", "diffHunk": "@@ -262,6 +265,59 @@ public void test8a_subSelectAll() throws Exception {\n \t\tassertResultEquals(evaluateQuery(query), \"var\", Lists.newArrayList(l(\"val1\")));\n \t}\n \n+\t@Test\n+\tpublic void test9_connectionHandling() throws Exception {\n+\n+\t\tSystem.setProperty(\"org.eclipse.rdf4j.repository.debug\", \"true\");\n+\t\tList<Value> values = Lists.newArrayList();\n+\t\tfor (int i = 0; i < 10; i++) {\n+\t\t\tvalues.add(l(\"value\" + i));\n+\t\t}\n+\t\taddData(serviceRepo,\n+\t\t\t\tvalues.stream()\n+\t\t\t\t\t\t.map(value -> vf.createStatement(iri(\"s1\"), RDFS.LABEL, value))\n+\t\t\t\t\t\t.collect(Collectors.toList()));\n+\n+\t\tExecutorService executor = Executors.newFixedThreadPool(5);\n+\t\ttry {\n+\t\t\tfor (int i = 0; i < 5; i++) {\n+\t\t\t\texecutor.submit(() -> {\n+\n+\t\t\t\t\tString query = \"SELECT ?var WHERE { SERVICE <urn:dummy> { ?s ?p ?var  } }\";\n+\t\t\t\t\tassertResultEquals(evaluateQuery(query), \"var\", values);\n+\t\t\t\t});\n+\t\t\t}\n+\n+\t\t} finally {\n+\t\t\texecutor.shutdown();\n+\t\t\texecutor.awaitTermination(10, TimeUnit.SECONDS);\n+\t\t}\n+\n+\t}\n+\n+\t@Test\n+\tpublic void test10_consumePartially() throws Exception {\n+\n+\t\tList<Value> values = Lists.newArrayList();\n+\t\tfor (int i = 0; i < 10; i++) {\n+\t\t\tvalues.add(l(\"value\" + i));\n+\t\t}\n+\t\taddData(serviceRepo,\n+\t\t\t\tvalues.stream()\n+\t\t\t\t\t\t.map(value -> vf.createStatement(iri(\"s1\"), RDFS.LABEL, value))\n+\t\t\t\t\t\t.collect(Collectors.toList()));\n+\n+\t\tString query = \"SELECT ?var WHERE { SERVICE <urn:dummy> { ?s ?p ?var  } }\";\n+\t\ttry (RepositoryConnection conn = localRepo.getConnection()) {\n+\t\t\ttry (TupleQueryResult tqr = conn.prepareTupleQuery(query).evaluate()) {\n+\n+\t\t\t\t// consume only two items\n+\t\t\t\ttqr.next();\n+\t\t\t\ttqr.next();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU0ODA3Nw=="}, "originalCommit": {"oid": "ad0e2d457dcdeba383a939e69a14269aecb3527f"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODExMjA4OnYy", "diffSide": "RIGHT", "path": "core/repository/sparql/src/main/java/org/eclipse/rdf4j/repository/sparql/federation/RepositoryFederatedService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQyMzo0NjoyMlrOFcnSYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxNzozODowNlrOFcqZPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU0ODEzMQ==", "bodyText": "Same here: does this need to be protected? Or can it be made private?", "url": "https://github.com/eclipse/rdf4j/pull/1821#discussion_r365548131", "createdAt": "2020-01-11T23:46:22Z", "author": {"login": "jeenbroekstra"}, "path": "core/repository/sparql/src/main/java/org/eclipse/rdf4j/repository/sparql/federation/RepositoryFederatedService.java", "diffHunk": "@@ -419,13 +503,28 @@ public void shutdown() throws QueryEvaluationException {\n \t\t}\n \t}\n \n-\tprotected RepositoryConnection getConnection() throws RepositoryException {\n-\t\t// use a cache connection if possible\n-\t\t// (TODO add mechanism to unset/close connection)\n-\t\tif (conn == null) {\n-\t\t\tconn = rep.getConnection();\n+\t/**\n+\t * Return a fresh {@link RepositoryConnection} from the configured repository.\n+\t * \n+\t * @return\n+\t * @throws RepositoryException\n+\t */\n+\tprotected RepositoryConnection freshConnection() throws RepositoryException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad0e2d457dcdeba383a939e69a14269aecb3527f"}, "originalPosition": 218}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU5OTAzNg==", "bodyText": "done, made to private", "url": "https://github.com/eclipse/rdf4j/pull/1821#discussion_r365599036", "createdAt": "2020-01-12T17:38:06Z", "author": {"login": "aschwarte10"}, "path": "core/repository/sparql/src/main/java/org/eclipse/rdf4j/repository/sparql/federation/RepositoryFederatedService.java", "diffHunk": "@@ -419,13 +503,28 @@ public void shutdown() throws QueryEvaluationException {\n \t\t}\n \t}\n \n-\tprotected RepositoryConnection getConnection() throws RepositoryException {\n-\t\t// use a cache connection if possible\n-\t\t// (TODO add mechanism to unset/close connection)\n-\t\tif (conn == null) {\n-\t\t\tconn = rep.getConnection();\n+\t/**\n+\t * Return a fresh {@link RepositoryConnection} from the configured repository.\n+\t * \n+\t * @return\n+\t * @throws RepositoryException\n+\t */\n+\tprotected RepositoryConnection freshConnection() throws RepositoryException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU0ODEzMQ=="}, "originalCommit": {"oid": "ad0e2d457dcdeba383a939e69a14269aecb3527f"}, "originalPosition": 218}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODExMjQyOnYy", "diffSide": "RIGHT", "path": "core/repository/sparql/src/main/java/org/eclipse/rdf4j/repository/sparql/federation/RepositoryFederatedService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQyMzo0NzoxMFrOFcnSiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxNzozODoxN1rOFcqZVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU0ODE2OQ==", "bodyText": "Can this be private instead?", "url": "https://github.com/eclipse/rdf4j/pull/1821#discussion_r365548169", "createdAt": "2020-01-11T23:47:10Z", "author": {"login": "jeenbroekstra"}, "path": "core/repository/sparql/src/main/java/org/eclipse/rdf4j/repository/sparql/federation/RepositoryFederatedService.java", "diffHunk": "@@ -128,10 +172,15 @@ protected void handleBindings() throws Exception {\n \t */\n \tprotected int boundJoinBlockSize = 15;\n \n+\t/**\n+\t * Whether to use a fresh repository connection for individual queries\n+\t */\n+\tprotected boolean useFreshConnection = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad0e2d457dcdeba383a939e69a14269aecb3527f"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU5OTA2Mw==", "bodyText": "Done, see amended commit", "url": "https://github.com/eclipse/rdf4j/pull/1821#discussion_r365599063", "createdAt": "2020-01-12T17:38:17Z", "author": {"login": "aschwarte10"}, "path": "core/repository/sparql/src/main/java/org/eclipse/rdf4j/repository/sparql/federation/RepositoryFederatedService.java", "diffHunk": "@@ -128,10 +172,15 @@ protected void handleBindings() throws Exception {\n \t */\n \tprotected int boundJoinBlockSize = 15;\n \n+\t/**\n+\t * Whether to use a fresh repository connection for individual queries\n+\t */\n+\tprotected boolean useFreshConnection = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU0ODE2OQ=="}, "originalCommit": {"oid": "ad0e2d457dcdeba383a939e69a14269aecb3527f"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1616, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}