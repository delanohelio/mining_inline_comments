{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1MTg3NDY2", "number": 1920, "title": "GH-1484 rdfstar and sparqlstar support", "bodyText": "GitHub issue resolved: #1484  \nOver-arching feature branch for RDF* and SPARQL* support.\nTo do:\n\n RDF* parsers/writers for Turtle* and TriG*\n model support\n conversion utilities between Triple and RDF reification\n update SPARQL parser (may split this out)", "createdAt": "2020-02-14T02:58:32Z", "url": "https://github.com/eclipse/rdf4j/pull/1920", "merged": true, "mergeCommit": {"oid": "3ada7e68cfafc5a28461dd72b88353469ca1bc8e"}, "closed": true, "closedAt": "2020-03-28T01:34:12Z", "author": {"login": "jeenbroekstra"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcPUqIcAH2gAyMzc1MTg3NDY2Ojg2YjYwZTdiN2IzNzY5MzE0Y2Y2N2NlNTJmYzUzMzViZTUyZDliM2U=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcR6DJ2AH2gAyMzc1MTg3NDY2OmIzODYwMjU3OTU3ODgxYmEyNDA4YWQwMTQ2M2MwYWQ4ZDEzZDM3Yzk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "86b60e7b7b3769314cf67ce52fc5335be52d9b3e", "author": {"user": null}, "url": "https://github.com/eclipse/rdf4j/commit/86b60e7b7b3769314cf67ce52fc5335be52d9b3e", "committedDate": "2020-03-19T23:39:04Z", "message": "GH-1484: Minimal RDF* model and parser/writers for Turtle* and TriG*\n\nSigned-off-by: Pavel Mihaylov <pavel@ontotext.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34ecb47212ad8971bd3ede34b023f22db7e0d9dc", "author": {"user": null}, "url": "https://github.com/eclipse/rdf4j/commit/34ecb47212ad8971bd3ede34b023f22db7e0d9dc", "committedDate": "2020-03-19T23:39:04Z", "message": "GH-1484: Changed SPARQLUpdateDataBlockParser to use TriGStar instead of TriG to support future RDF* data blocks\n\nSigned-off-by: Pavel Mihaylov <pavel@ontotext.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f94dac411b3dbb0a420cb950c37f75a012ab2253", "author": {"user": null}, "url": "https://github.com/eclipse/rdf4j/commit/f94dac411b3dbb0a420cb950c37f75a012ab2253", "committedDate": "2020-03-19T23:40:37Z", "message": "GH-1484: RDF* <-> RDF reification conversion utility classes and RDF* -> RDF reification support in RDF serializers\n\nSigned-off-by: Pavel Mihaylov <pavel@ontotext.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc27d527a8d8e6c837c1d474a2182282ab1fb8ff", "author": {"user": null}, "url": "https://github.com/eclipse/rdf4j/commit/cc27d527a8d8e6c837c1d474a2182282ab1fb8ff", "committedDate": "2020-03-19T23:40:37Z", "message": "GH-1484: RDF* triple support in the HTTP protocol (via NTriplesUtil) and RDF* triple support in the binary RDF result format\n\nSigned-off-by: Pavel Mihaylov <pavel@ontotext.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "251c979f835af8f9f995bca85621df0d144944a2", "author": {"user": {"login": "damyan-ognyanov", "name": null}}, "url": "https://github.com/eclipse/rdf4j/commit/251c979f835af8f9f995bca85621df0d144944a2", "committedDate": "2020-03-19T23:40:37Z", "message": "SPARQL grammar update to support SPARQL*\n\nSigned-off-by: damyan.ognyanov <damyan.ognyanov@ontotext.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26a234f8570659ad77e1ab03f183d6ff5002c84d", "author": {"user": null}, "url": "https://github.com/eclipse/rdf4j/commit/26a234f8570659ad77e1ab03f183d6ff5002c84d", "committedDate": "2020-03-19T23:51:55Z", "message": "GH-1484: RDF* serialization for Binary query results (extended existing format) and two new formats, SPARQL* JSON and SPARQL* TSV\n\n - RDF* compatibility serialization (as IRIs) for all RDF formats\n - Added another MIME type for Turtle* to better reflect its Turtle origin\n - Parser/writer (both RDF and query result) cleanup and contract enforcement, improved tests\n - NTriplesUtil moved outside NTriples module (similar to some other NTriples related classes used in multiple places)\n - Moved Turtle* and TriG* to Turtle and TriG modules instead of separate modules\n - Compare Triple in ValueComparator\n\nSigned-off-by: Pavel Mihaylov <pavel@ontotext.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2eb85eb3f2c3c4d59b263338e3824820ebf648a9", "author": {"user": {"login": "jeenbroekstra", "name": "Jeen Broekstra"}}, "url": "https://github.com/eclipse/rdf4j/commit/2eb85eb3f2c3c4d59b263338e3824820ebf648a9", "committedDate": "2020-03-19T23:27:59Z", "message": "Merge branch 'develop' into GH-1484-rdfstar"}, "afterCommit": {"oid": "26a234f8570659ad77e1ab03f183d6ff5002c84d", "author": {"user": null}, "url": "https://github.com/eclipse/rdf4j/commit/26a234f8570659ad77e1ab03f183d6ff5002c84d", "committedDate": "2020-03-19T23:51:55Z", "message": "GH-1484: RDF* serialization for Binary query results (extended existing format) and two new formats, SPARQL* JSON and SPARQL* TSV\n\n - RDF* compatibility serialization (as IRIs) for all RDF formats\n - Added another MIME type for Turtle* to better reflect its Turtle origin\n - Parser/writer (both RDF and query result) cleanup and contract enforcement, improved tests\n - NTriplesUtil moved outside NTriples module (similar to some other NTriples related classes used in multiple places)\n - Moved Turtle* and TriG* to Turtle and TriG modules instead of separate modules\n - Compare Triple in ValueComparator\n\nSigned-off-by: Pavel Mihaylov <pavel@ontotext.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1e1669468b57f0a55754e0d1eef0db3f52b49b02", "author": {"user": {"login": "jeenbroekstra", "name": "Jeen Broekstra"}}, "url": "https://github.com/eclipse/rdf4j/commit/1e1669468b57f0a55754e0d1eef0db3f52b49b02", "committedDate": "2020-03-20T03:10:35Z", "message": "GH-1484 clean up handling of writingStarted check in AbstractRDFWriter\n\n- writingStarted now a private boolean field\n- renamed handleStatementImpl to consumeStatement\n- made handleStatement final"}, "afterCommit": {"oid": "2ce1a86dfc19e209eb360f7d03702ec8125eb942", "author": {"user": {"login": "jeenbroekstra", "name": "Jeen Broekstra"}}, "url": "https://github.com/eclipse/rdf4j/commit/2ce1a86dfc19e209eb360f7d03702ec8125eb942", "committedDate": "2020-03-21T06:06:05Z", "message": "GH-1484 clean up handling of writingStarted check in AbstractRDFWriter\n\n- writingStarted now a private boolean field\n- renamed handleStatementImpl to consumeStatement\n- made consumeStatement concrete no-op method to provide backward\n  compatibility\n\nSigned-off-by: Jeen Broekstra <jeen.broekstra@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ccaba597aaa337a243b94f82baa9c35e6b01f342", "author": {"user": {"login": "jeenbroekstra", "name": "Jeen Broekstra"}}, "url": "https://github.com/eclipse/rdf4j/commit/ccaba597aaa337a243b94f82baa9c35e6b01f342", "committedDate": "2020-03-21T06:06:53Z", "message": "GH-1484 clean up handling of writingStarted check in AbstractRDFWriter\n\n- writingStarted now a private boolean field\n- renamed handleStatementImpl to consumeStatement\n- made consumeStatement concrete no-op method to provide backward\n  compatibility\n\nSigned-off-by: Jeen Broekstra <jeen.broekstra@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2ce1a86dfc19e209eb360f7d03702ec8125eb942", "author": {"user": {"login": "jeenbroekstra", "name": "Jeen Broekstra"}}, "url": "https://github.com/eclipse/rdf4j/commit/2ce1a86dfc19e209eb360f7d03702ec8125eb942", "committedDate": "2020-03-21T06:06:05Z", "message": "GH-1484 clean up handling of writingStarted check in AbstractRDFWriter\n\n- writingStarted now a private boolean field\n- renamed handleStatementImpl to consumeStatement\n- made consumeStatement concrete no-op method to provide backward\n  compatibility\n\nSigned-off-by: Jeen Broekstra <jeen.broekstra@gmail.com>"}, "afterCommit": {"oid": "ccaba597aaa337a243b94f82baa9c35e6b01f342", "author": {"user": {"login": "jeenbroekstra", "name": "Jeen Broekstra"}}, "url": "https://github.com/eclipse/rdf4j/commit/ccaba597aaa337a243b94f82baa9c35e6b01f342", "committedDate": "2020-03-21T06:06:53Z", "message": "GH-1484 clean up handling of writingStarted check in AbstractRDFWriter\n\n- writingStarted now a private boolean field\n- renamed handleStatementImpl to consumeStatement\n- made consumeStatement concrete no-op method to provide backward\n  compatibility\n\nSigned-off-by: Jeen Broekstra <jeen.broekstra@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4OTM1NTQ4", "url": "https://github.com/eclipse/rdf4j/pull/1920#pullrequestreview-378935548", "createdAt": "2020-03-21T17:26:32Z", "commit": {"oid": "ccaba597aaa337a243b94f82baa9c35e6b01f342"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxNzoyNjozMlrOF5qnQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxNzoyNjozMlrOF5qnQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAxMTMzMA==", "bodyText": "Could be use the new DynamicModel here?", "url": "https://github.com/eclipse/rdf4j/pull/1920#discussion_r396011330", "createdAt": "2020-03-21T17:26:32Z", "author": {"login": "hmottestad"}, "path": "core/model/src/main/java/org/eclipse/rdf4j/model/util/Models.java", "diffHunk": "@@ -753,4 +758,152 @@ private static Model toModel(Iterable<? extends Statement> iterable) {\n \tpublic static Model synchronizedModel(Model toSynchronize) {\n \t\treturn new SynchronizedModel(toSynchronize);\n \t}\n+\n+\t/**\n+\t * Converts the supplied RDF* model to RDF reification statements. The converted statements are sent to the supplied\n+\t * consumer function.\n+\t * <p>\n+\t * The supplied value factory is used to create all new statements.\n+\t *\n+\t * @param vf       the {@link ValueFactory} to use for creating statements.\n+\t * @param model    the {@link Model} to convert.\n+\t * @param consumer the {@link Consumer} function for the produced statements.\n+\t */\n+\tpublic static void convertRDFStarToReification(ValueFactory vf, Model model, Consumer<Statement> consumer) {\n+\t\tmodel.forEach(st -> Statements.convertRDFStarToReification(vf, st, consumer));\n+\t}\n+\n+\t/**\n+\t * Converts the supplied RDF* model to RDF reification statements. The converted statements are sent to the supplied\n+\t * consumer function.\n+\t *\n+\t * @param model    the {@link Model} to convert.\n+\t * @param consumer the {@link Consumer} function for the produced statements.\n+\t */\n+\tpublic static void convertRDFStarToReification(Model model, Consumer<Statement> consumer) {\n+\t\tconvertRDFStarToReification(SimpleValueFactory.getInstance(), model, consumer);\n+\t}\n+\n+\t/**\n+\t * Converts the supplied RDF* model to an RDF reification model.\n+\t * <p>\n+\t * The supplied value factory is used to create all new statements.\n+\t *\n+\t * @param vf    the {@link ValueFactory} to use for creating statements.\n+\t * @param model the {@link Model} to convert.\n+\t * @return the converted {@link Model}.\n+\t */\n+\tpublic static Model convertRDFStarToReification(ValueFactory vf, Model model) {\n+\t\tModel reificationModel = new LinkedHashModel();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccaba597aaa337a243b94f82baa9c35e6b01f342"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4OTM1ODc2", "url": "https://github.com/eclipse/rdf4j/pull/1920#pullrequestreview-378935876", "createdAt": "2020-03-21T17:30:39Z", "commit": {"oid": "ccaba597aaa337a243b94f82baa9c35e6b01f342"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxNzozMDozOVrOF5qomQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxNzozMDozOVrOF5qomQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAxMTY3Mw==", "bodyText": "This kind of use of .filter(....) shows that we really need a .select(...) instead. I think .filter(....) is too heavyweight with all its guarantees about returning a model that reflects the underlying model...while all we really need here is at iterator.", "url": "https://github.com/eclipse/rdf4j/pull/1920#discussion_r396011673", "createdAt": "2020-03-21T17:30:39Z", "author": {"login": "hmottestad"}, "path": "core/model/src/main/java/org/eclipse/rdf4j/model/util/Models.java", "diffHunk": "@@ -753,4 +758,152 @@ private static Model toModel(Iterable<? extends Statement> iterable) {\n \tpublic static Model synchronizedModel(Model toSynchronize) {\n \t\treturn new SynchronizedModel(toSynchronize);\n \t}\n+\n+\t/**\n+\t * Converts the supplied RDF* model to RDF reification statements. The converted statements are sent to the supplied\n+\t * consumer function.\n+\t * <p>\n+\t * The supplied value factory is used to create all new statements.\n+\t *\n+\t * @param vf       the {@link ValueFactory} to use for creating statements.\n+\t * @param model    the {@link Model} to convert.\n+\t * @param consumer the {@link Consumer} function for the produced statements.\n+\t */\n+\tpublic static void convertRDFStarToReification(ValueFactory vf, Model model, Consumer<Statement> consumer) {\n+\t\tmodel.forEach(st -> Statements.convertRDFStarToReification(vf, st, consumer));\n+\t}\n+\n+\t/**\n+\t * Converts the supplied RDF* model to RDF reification statements. The converted statements are sent to the supplied\n+\t * consumer function.\n+\t *\n+\t * @param model    the {@link Model} to convert.\n+\t * @param consumer the {@link Consumer} function for the produced statements.\n+\t */\n+\tpublic static void convertRDFStarToReification(Model model, Consumer<Statement> consumer) {\n+\t\tconvertRDFStarToReification(SimpleValueFactory.getInstance(), model, consumer);\n+\t}\n+\n+\t/**\n+\t * Converts the supplied RDF* model to an RDF reification model.\n+\t * <p>\n+\t * The supplied value factory is used to create all new statements.\n+\t *\n+\t * @param vf    the {@link ValueFactory} to use for creating statements.\n+\t * @param model the {@link Model} to convert.\n+\t * @return the converted {@link Model}.\n+\t */\n+\tpublic static Model convertRDFStarToReification(ValueFactory vf, Model model) {\n+\t\tModel reificationModel = new LinkedHashModel();\n+\t\tconvertRDFStarToReification(vf, model, reificationModel::add);\n+\t\treturn reificationModel;\n+\t}\n+\n+\t/**\n+\t * Converts the supplied RDF* model to an RDF reification model.\n+\t *\n+\t * @param model the {@link Model} to convert.\n+\t * @return the converted {@link Model}.\n+\t */\n+\tpublic static Model convertRDFStarToReification(Model model) {\n+\t\treturn convertRDFStarToReification(SimpleValueFactory.getInstance(), model);\n+\t}\n+\n+\t/**\n+\t * Converts the supplied RDF reification model to RDF* statements. The converted statements are sent to the supplied\n+\t * consumer function.\n+\t * <p>\n+\t * The supplied value factory is used to create all new statements.\n+\t *\n+\t * @param vf       the {@link ValueFactory} to use for creating statements.\n+\t * @param model    the {@link Model} to convert.\n+\t * @param consumer the {@link Consumer} function for the produced statements.\n+\t */\n+\tpublic static void convertReificationToRDFStar(ValueFactory vf, Model model, Consumer<Statement> consumer) {\n+\t\tMap<Resource, Triple> convertedStatements = new HashMap<>();\n+\t\tmodel.filter(null, RDF.TYPE, RDF.STATEMENT).forEach((s) -> {\n+\t\t\tValue subject = object(model.filter(s.getSubject(), RDF.SUBJECT, null)).orElse(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccaba597aaa337a243b94f82baa9c35e6b01f342"}, "originalPosition": 89}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4OTM2Njg0", "url": "https://github.com/eclipse/rdf4j/pull/1920#pullrequestreview-378936684", "createdAt": "2020-03-21T17:41:37Z", "commit": {"oid": "ccaba597aaa337a243b94f82baa9c35e6b01f342"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxNzo0MTozOFrOF5qsIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxNzo0MTozOFrOF5qsIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAxMjU3OA==", "bodyText": "DynamicModel", "url": "https://github.com/eclipse/rdf4j/pull/1920#discussion_r396012578", "createdAt": "2020-03-21T17:41:38Z", "author": {"login": "hmottestad"}, "path": "core/model/src/main/java/org/eclipse/rdf4j/model/util/Models.java", "diffHunk": "@@ -753,4 +758,152 @@ private static Model toModel(Iterable<? extends Statement> iterable) {\n \tpublic static Model synchronizedModel(Model toSynchronize) {\n \t\treturn new SynchronizedModel(toSynchronize);\n \t}\n+\n+\t/**\n+\t * Converts the supplied RDF* model to RDF reification statements. The converted statements are sent to the supplied\n+\t * consumer function.\n+\t * <p>\n+\t * The supplied value factory is used to create all new statements.\n+\t *\n+\t * @param vf       the {@link ValueFactory} to use for creating statements.\n+\t * @param model    the {@link Model} to convert.\n+\t * @param consumer the {@link Consumer} function for the produced statements.\n+\t */\n+\tpublic static void convertRDFStarToReification(ValueFactory vf, Model model, Consumer<Statement> consumer) {\n+\t\tmodel.forEach(st -> Statements.convertRDFStarToReification(vf, st, consumer));\n+\t}\n+\n+\t/**\n+\t * Converts the supplied RDF* model to RDF reification statements. The converted statements are sent to the supplied\n+\t * consumer function.\n+\t *\n+\t * @param model    the {@link Model} to convert.\n+\t * @param consumer the {@link Consumer} function for the produced statements.\n+\t */\n+\tpublic static void convertRDFStarToReification(Model model, Consumer<Statement> consumer) {\n+\t\tconvertRDFStarToReification(SimpleValueFactory.getInstance(), model, consumer);\n+\t}\n+\n+\t/**\n+\t * Converts the supplied RDF* model to an RDF reification model.\n+\t * <p>\n+\t * The supplied value factory is used to create all new statements.\n+\t *\n+\t * @param vf    the {@link ValueFactory} to use for creating statements.\n+\t * @param model the {@link Model} to convert.\n+\t * @return the converted {@link Model}.\n+\t */\n+\tpublic static Model convertRDFStarToReification(ValueFactory vf, Model model) {\n+\t\tModel reificationModel = new LinkedHashModel();\n+\t\tconvertRDFStarToReification(vf, model, reificationModel::add);\n+\t\treturn reificationModel;\n+\t}\n+\n+\t/**\n+\t * Converts the supplied RDF* model to an RDF reification model.\n+\t *\n+\t * @param model the {@link Model} to convert.\n+\t * @return the converted {@link Model}.\n+\t */\n+\tpublic static Model convertRDFStarToReification(Model model) {\n+\t\treturn convertRDFStarToReification(SimpleValueFactory.getInstance(), model);\n+\t}\n+\n+\t/**\n+\t * Converts the supplied RDF reification model to RDF* statements. The converted statements are sent to the supplied\n+\t * consumer function.\n+\t * <p>\n+\t * The supplied value factory is used to create all new statements.\n+\t *\n+\t * @param vf       the {@link ValueFactory} to use for creating statements.\n+\t * @param model    the {@link Model} to convert.\n+\t * @param consumer the {@link Consumer} function for the produced statements.\n+\t */\n+\tpublic static void convertReificationToRDFStar(ValueFactory vf, Model model, Consumer<Statement> consumer) {\n+\t\tMap<Resource, Triple> convertedStatements = new HashMap<>();\n+\t\tmodel.filter(null, RDF.TYPE, RDF.STATEMENT).forEach((s) -> {\n+\t\t\tValue subject = object(model.filter(s.getSubject(), RDF.SUBJECT, null)).orElse(null);\n+\t\t\tif (!(subject instanceof IRI) && !(subject instanceof BNode)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tValue predicate = object(model.filter(s.getSubject(), RDF.PREDICATE, null)).orElse(null);\n+\t\t\tif (!(predicate instanceof IRI)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tValue object = object(model.filter(s.getSubject(), RDF.OBJECT, null)).orElse(null);\n+\t\t\tif (!(object instanceof Value)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tTriple t = vf.createTriple((Resource) subject, (IRI) predicate, object);\n+\t\t\tconvertedStatements.put(s.getSubject(), t);\n+\t\t});\n+\n+\t\tfor (Map.Entry<Resource, Triple> e : convertedStatements.entrySet()) {\n+\t\t\tTriple t = e.getValue();\n+\t\t\tResource subject = convertedStatements.get(t.getSubject());\n+\t\t\tResource object = convertedStatements.get(t.getObject());\n+\t\t\tif (subject != null || object != null) {\n+\t\t\t\t// Triples within triples, replace them in the map\n+\t\t\t\tTriple nt = vf.createTriple(subject != null ? subject : t.getSubject(), t.getPredicate(),\n+\t\t\t\t\t\tobject != null ? object : t.getObject());\n+\t\t\t\te.setValue(nt);\n+\t\t\t}\n+\t\t}\n+\n+\t\tmodel.forEach((s) -> {\n+\t\t\tResource subject = s.getSubject();\n+\t\t\tIRI predicate = s.getPredicate();\n+\t\t\tValue object = s.getObject();\n+\t\t\tTriple subjectTriple = convertedStatements.get(subject);\n+\t\t\tTriple objectTriple = convertedStatements.get(object);\n+\n+\t\t\tif (subjectTriple == null && objectTriple == null) {\n+\t\t\t\t// Statement not part of detected reification, add it as is\n+\t\t\t\tconsumer.accept(s);\n+\t\t\t} else if (subjectTriple == null || ((!RDF.TYPE.equals(predicate) || !RDF.STATEMENT.equals(object))\n+\t\t\t\t\t&& !RDF.SUBJECT.equals(predicate) && !RDF.PREDICATE.equals(predicate)\n+\t\t\t\t\t&& !RDF.OBJECT.equals(predicate))) {\n+\t\t\t\t// Statement uses reified data and needs to be converted\n+\t\t\t\tStatement ns = vf.createStatement(subjectTriple != null ? subjectTriple : s.getSubject(),\n+\t\t\t\t\t\ts.getPredicate(), objectTriple != null ? objectTriple : s.getObject(), s.getContext());\n+\t\t\t\tconsumer.accept(ns);\n+\t\t\t} // else: Statement part of reification and needs to be removed (skipped)\n+\t\t});\n+\t}\n+\n+\t/**\n+\t * Converts the supplied RDF reification model to RDF* statements. The converted statements are sent to the supplied\n+\t * consumer function.\n+\t *\n+\t * @param model    the {@link Model} to convert.\n+\t * @param consumer the {@link Consumer} function for the produced statements.\n+\t */\n+\tpublic static void convertReificationToRDFStar(Model model, Consumer<Statement> consumer) {\n+\t\tconvertReificationToRDFStar(SimpleValueFactory.getInstance(), model, consumer);\n+\t}\n+\n+\t/**\n+\t * Converts the supplied RDF reification model to an RDF* model.\n+\t * <p>\n+\t * The supplied value factory is used to create all new statements.\n+\t *\n+\t * @param vf    the {@link ValueFactory} to use for creating statements.\n+\t * @param model the {@link Model} to convert.\n+\t * @return the converted {@link Model}.\n+\t */\n+\tpublic static Model convertReificationToRDFStar(ValueFactory vf, Model model) {\n+\t\tModel rdfStarModel = new LinkedHashModel();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccaba597aaa337a243b94f82baa9c35e6b01f342"}, "originalPosition": 159}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4OTM2OTQ3", "url": "https://github.com/eclipse/rdf4j/pull/1920#pullrequestreview-378936947", "createdAt": "2020-03-21T17:45:17Z", "commit": {"oid": "ccaba597aaa337a243b94f82baa9c35e6b01f342"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxNzo0NToxN1rOF5qtRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxNzo0NToxN1rOF5qtRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAxMjg2OQ==", "bodyText": "Does this risk bnode identifiers being really long of the Triple contains a long literal?", "url": "https://github.com/eclipse/rdf4j/pull/1920#discussion_r396012869", "createdAt": "2020-03-21T17:45:17Z", "author": {"login": "hmottestad"}, "path": "core/model/src/main/java/org/eclipse/rdf4j/model/util/Statements.java", "diffHunk": "@@ -26,6 +31,16 @@\n  */\n public class Statements {\n \n+\t/**\n+\t * A {@link Function} that maps {@link Triple} to {@link org.eclipse.rdf4j.model.BNode} consistently. Multiple\n+\t * invocations for the same {@link Triple} will return the same {@link org.eclipse.rdf4j.model.BNode}.\n+\t *\n+\t * The current implementation creates a {@link org.eclipse.rdf4j.model.BNode} by encoding the string representation\n+\t * of the {@link Triple} using base64 URL-safe encoding.\n+\t */\n+\tpublic static Function<Triple, Resource> TRIPLE_BNODE_MAPPER = (t) -> SimpleValueFactory.getInstance()\n+\t\t\t.createBNode(Base64.getUrlEncoder().encodeToString(t.stringValue().getBytes(StandardCharsets.UTF_8)));\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccaba597aaa337a243b94f82baa9c35e6b01f342"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4OTM3MTcx", "url": "https://github.com/eclipse/rdf4j/pull/1920#pullrequestreview-378937171", "createdAt": "2020-03-21T17:48:12Z", "commit": {"oid": "ccaba597aaa337a243b94f82baa9c35e6b01f342"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxNzo0ODoxMlrOF5qung==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxNzo0ODoxMlrOF5qung==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAxMzIxNA==", "bodyText": "I believe you can use .equals on models and it uses isomorphic underneath.", "url": "https://github.com/eclipse/rdf4j/pull/1920#discussion_r396013214", "createdAt": "2020-03-21T17:48:12Z", "author": {"login": "hmottestad"}, "path": "core/model/src/test/java/org/eclipse/rdf4j/model/util/ModelsTest.java", "diffHunk": "@@ -445,4 +446,77 @@ public void testStripContextsSpecificContext() {\n \t\tassertThat(graph2Stripped.size()).isEqualTo(model1.size());\n \t}\n \n+\t@Test\n+\tpublic void testConvertReificationToRDFStar() {\n+\t\tModel reificationModel = RDFStarTestHelper.createRDFReificationModel();\n+\t\tModel referenceRDFStarModel = RDFStarTestHelper.createRDFStarModel();\n+\n+\t\tModel rdfStarModel1 = Models.convertReificationToRDFStar(VF, reificationModel);\n+\t\tassertTrue(\"RDF reification conversion to RDF* with explicit VF, model-to-model\",\n+\t\t\t\tModels.isomorphic(rdfStarModel1, referenceRDFStarModel));\n+\n+\t\tModel rdfStarModel2 = Models.convertReificationToRDFStar(reificationModel);\n+\t\tassertTrue(\"RDF reification conversion to RDF* with implicit VF, model-to-model\",\n+\t\t\t\tModels.isomorphic(rdfStarModel2, referenceRDFStarModel));\n+\n+\t\tModel rdfStarModel3 = new TreeModel();\n+\t\tModels.convertReificationToRDFStar(VF, reificationModel, rdfStarModel3::add);\n+\t\tassertTrue(\"RDF reification conversion to RDF* with explicit VF, model-to-consumer\",\n+\t\t\t\tModels.isomorphic(rdfStarModel3, referenceRDFStarModel));\n+\n+\t\tModel rdfStarModel4 = new TreeModel();\n+\t\tModels.convertReificationToRDFStar(reificationModel, rdfStarModel4::add);\n+\t\tassertTrue(\"RDF reification conversion to RDF* with implicit VF, model-to-consumer\",\n+\t\t\t\tModels.isomorphic(rdfStarModel4, referenceRDFStarModel));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccaba597aaa337a243b94f82baa9c35e6b01f342"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4OTM3Mjc1", "url": "https://github.com/eclipse/rdf4j/pull/1920#pullrequestreview-378937275", "createdAt": "2020-03-21T17:49:43Z", "commit": {"oid": "ccaba597aaa337a243b94f82baa9c35e6b01f342"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxNzo0OTo0M1rOF5qvDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxNzo0OTo0M1rOF5qvDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAxMzMyNw==", "bodyText": "{ } is missing", "url": "https://github.com/eclipse/rdf4j/pull/1920#discussion_r396013327", "createdAt": "2020-03-21T17:49:43Z", "author": {"login": "hmottestad"}, "path": "core/queryalgebra/evaluation/src/main/java/org/eclipse/rdf4j/query/algebra/evaluation/function/triple/IsTripleFunction.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+package org.eclipse.rdf4j.query.algebra.evaluation.function.triple;\n+\n+import org.eclipse.rdf4j.model.Triple;\n+import org.eclipse.rdf4j.model.Value;\n+import org.eclipse.rdf4j.model.ValueFactory;\n+import org.eclipse.rdf4j.model.vocabulary.RDF;\n+import org.eclipse.rdf4j.query.algebra.evaluation.ValueExprEvaluationException;\n+import org.eclipse.rdf4j.query.algebra.evaluation.function.Function;\n+\n+/**\n+ * Function that return \"true\"^^xsd:boolean if its argument is RDF* Triple otherwise return \"false\"^^xsd:boolean the\n+ * function's IRI uses RDF namespace to match the other functions in the package\n+ * \n+ * @author damyan.ognyanov\n+ *\n+ */\n+public class IsTripleFunction implements Function {\n+\t@Override\n+\tpublic String getURI() {\n+\t\treturn RDF.NAMESPACE + \"isTriple\";\n+\t}\n+\n+\t@Override\n+\tpublic Value evaluate(ValueFactory vf, Value... args) throws ValueExprEvaluationException {\n+\t\tif (args.length != 1)\n+\t\t\tthrow new ValueExprEvaluationException(\"expect exactly 1 argument\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccaba597aaa337a243b94f82baa9c35e6b01f342"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4OTM3MzE3", "url": "https://github.com/eclipse/rdf4j/pull/1920#pullrequestreview-378937317", "createdAt": "2020-03-21T17:50:05Z", "commit": {"oid": "ccaba597aaa337a243b94f82baa9c35e6b01f342"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxNzo1MDowNVrOF5qvMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxNzo1MDowNVrOF5qvMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAxMzM2MQ==", "bodyText": "{ }  is missing", "url": "https://github.com/eclipse/rdf4j/pull/1920#discussion_r396013361", "createdAt": "2020-03-21T17:50:05Z", "author": {"login": "hmottestad"}, "path": "core/queryalgebra/evaluation/src/main/java/org/eclipse/rdf4j/query/algebra/evaluation/function/triple/StatementFunction.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+package org.eclipse.rdf4j.query.algebra.evaluation.function.triple;\n+\n+import org.eclipse.rdf4j.model.IRI;\n+import org.eclipse.rdf4j.model.Resource;\n+import org.eclipse.rdf4j.model.Value;\n+import org.eclipse.rdf4j.model.ValueFactory;\n+import org.eclipse.rdf4j.model.vocabulary.RDF;\n+import org.eclipse.rdf4j.query.algebra.evaluation.ValueExprEvaluationException;\n+import org.eclipse.rdf4j.query.algebra.evaluation.function.Function;\n+\n+/**\n+ * Function constructing RDF* Triple from its 3 arguments reused the IRI of rdf:Statement as name\n+ * \n+ * @author damyan.ognyanov\n+ *\n+ */\n+public class StatementFunction implements Function {\n+\t@Override\n+\tpublic String getURI() {\n+\t\treturn RDF.STATEMENT.toString();\n+\t}\n+\n+\t@Override\n+\tpublic Value evaluate(ValueFactory vf, Value... args) throws ValueExprEvaluationException {\n+\t\tif (args.length != 3)\n+\t\t\tthrow new ValueExprEvaluationException(\"expect exactly 3 arguments\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccaba597aaa337a243b94f82baa9c35e6b01f342"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4OTM3NDE4", "url": "https://github.com/eclipse/rdf4j/pull/1920#pullrequestreview-378937418", "createdAt": "2020-03-21T17:51:14Z", "commit": {"oid": "ccaba597aaa337a243b94f82baa9c35e6b01f342"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxNzo1MToxNFrOF5qvsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxNzo1MToxNFrOF5qvsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAxMzQ5MQ==", "bodyText": "@jeenbroekstra why do we have two ValueComapartors?", "url": "https://github.com/eclipse/rdf4j/pull/1920#discussion_r396013491", "createdAt": "2020-03-21T17:51:14Z", "author": {"login": "hmottestad"}, "path": "core/queryalgebra/evaluation/src/main/java/org/eclipse/rdf4j/query/algebra/evaluation/util/ValueComparator.java", "diffHunk": "@@ -69,8 +70,21 @@ public int compare(Value o1, Value o2) {\n \t\t\treturn 1;\n \t\t}\n \n-\t\t// 4. RDF literals\n-\t\treturn compareLiterals((Literal) o1, (Literal) o2);\n+\t\t// 4. Literals", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccaba597aaa337a243b94f82baa9c35e6b01f342"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc9affbaf26a8a259360592015b01aa0eeab9cfb", "author": {"user": {"login": "jeenbroekstra", "name": "Jeen Broekstra"}}, "url": "https://github.com/eclipse/rdf4j/commit/cc9affbaf26a8a259360592015b01aa0eeab9cfb", "committedDate": "2020-03-22T01:09:20Z", "message": "GH-1484 ModelFactory injection and javadoc improvements\n\n- marked utility functions as Experimental\n- added method overloads to allow ModelFactory injection\n- use DynamicModel as default implementation\n- editoral changes to javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3860257957881ba2408ad01463c0ad8d13d37c9", "author": {"user": {"login": "jeenbroekstra", "name": "Jeen Broekstra"}}, "url": "https://github.com/eclipse/rdf4j/commit/b3860257957881ba2408ad01463c0ad8d13d37c9", "committedDate": "2020-03-28T00:20:44Z", "message": "Merge branch 'develop' into GH-1484-rdfstar"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 66, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}