{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwNjQ4NTY1", "number": 1200, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwODo0NzoxMFrOEtYZkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMzoyMDoxNVrOExBHFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MDIxMTM2OnYy", "diffSide": "RIGHT", "path": "resilience4j-core/src/main/java/io/github/resilience4j/core/IntervalBiFunction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwODo0NzoxMFrOHhItbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDoyODoyMlrOHi0NBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUwNzc1OQ==", "bodyText": "By convention, Either's Left represents a failure case and the Right represents a success.\nT and Throwable must be switched.", "url": "https://github.com/resilience4j/resilience4j/pull/1200#discussion_r504507759", "createdAt": "2020-10-14T08:47:10Z", "author": {"login": "RobWin"}, "path": "resilience4j-core/src/main/java/io/github/resilience4j/core/IntervalBiFunction.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package io.github.resilience4j.core;\n+\n+import io.vavr.control.Either;\n+\n+import java.util.function.BiFunction;\n+\n+/**\n+ * An IntervalBiFunction which can be used to calculate the wait interval. The input parameters of the bi\n+ * function is the number of attempts (attempt) and either result or exception, the output parameter is the wait interval in\n+ * milliseconds. The attempt parameter starts at 1 and increases with every further attempt.\n+ */\n+@FunctionalInterface\n+public interface IntervalBiFunction<T> extends BiFunction<Integer, Either<T, Throwable>, Long> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03ae297337d42471c7836e8176cd53c50c0c1fd1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI2ODkzMw==", "bodyText": "didn't know, will change \ud83d\udc4d", "url": "https://github.com/resilience4j/resilience4j/pull/1200#discussion_r506268933", "createdAt": "2020-10-16T10:28:22Z", "author": {"login": "cosminseceleanu"}, "path": "resilience4j-core/src/main/java/io/github/resilience4j/core/IntervalBiFunction.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package io.github.resilience4j.core;\n+\n+import io.vavr.control.Either;\n+\n+import java.util.function.BiFunction;\n+\n+/**\n+ * An IntervalBiFunction which can be used to calculate the wait interval. The input parameters of the bi\n+ * function is the number of attempts (attempt) and either result or exception, the output parameter is the wait interval in\n+ * milliseconds. The attempt parameter starts at 1 and increases with every further attempt.\n+ */\n+@FunctionalInterface\n+public interface IntervalBiFunction<T> extends BiFunction<Integer, Either<T, Throwable>, Long> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUwNzc1OQ=="}, "originalCommit": {"oid": "03ae297337d42471c7836e8176cd53c50c0c1fd1"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MzYzNzg3OnYy", "diffSide": "RIGHT", "path": "resilience4j-core/src/main/java/io/github/resilience4j/core/IntervalBiFunction.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNjoyMToyNVrOHksR4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNzozODowMFrOHkupnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIzNjI1Nw==", "bodyText": "We are trying to remove vavr dependency in 2.0 branch.\nIs there any substitute forEither?", "url": "https://github.com/resilience4j/resilience4j/pull/1200#discussion_r508236257", "createdAt": "2020-10-20T06:21:25Z", "author": {"login": "dlsrb6342"}, "path": "resilience4j-core/src/main/java/io/github/resilience4j/core/IntervalBiFunction.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package io.github.resilience4j.core;\n+\n+import io.vavr.control.Either;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9d072ccad348c227de5a45bf85325237672189b"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI0Mzc5Ng==", "bodyText": "We have to provide our own implementation in 2.0 like we provide our own Function Interfaces", "url": "https://github.com/resilience4j/resilience4j/pull/1200#discussion_r508243796", "createdAt": "2020-10-20T06:39:05Z", "author": {"login": "RobWin"}, "path": "resilience4j-core/src/main/java/io/github/resilience4j/core/IntervalBiFunction.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package io.github.resilience4j.core;\n+\n+import io.vavr.control.Either;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIzNjI1Nw=="}, "originalCommit": {"oid": "f9d072ccad348c227de5a45bf85325237672189b"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI3NDE2NQ==", "bodyText": "just for my personal curiosity, why do you want to get rid of vavr?", "url": "https://github.com/resilience4j/resilience4j/pull/1200#discussion_r508274165", "createdAt": "2020-10-20T07:36:23Z", "author": {"login": "cosminseceleanu"}, "path": "resilience4j-core/src/main/java/io/github/resilience4j/core/IntervalBiFunction.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package io.github.resilience4j.core;\n+\n+import io.vavr.control.Either;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIzNjI1Nw=="}, "originalCommit": {"oid": "f9d072ccad348c227de5a45bf85325237672189b"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI3NTEwMQ==", "bodyText": "Because a lot of users requested it, unfortunately.", "url": "https://github.com/resilience4j/resilience4j/pull/1200#discussion_r508275101", "createdAt": "2020-10-20T07:38:00Z", "author": {"login": "RobWin"}, "path": "resilience4j-core/src/main/java/io/github/resilience4j/core/IntervalBiFunction.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package io.github.resilience4j.core;\n+\n+import io.vavr.control.Either;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIzNjI1Nw=="}, "originalCommit": {"oid": "f9d072ccad348c227de5a45bf85325237672189b"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NDc0MTIyOnYy", "diffSide": "LEFT", "path": "resilience4j-retry/src/main/java/io/github/resilience4j/retry/RetryConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMTowMzozMlrOHk20sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMToxMzowNFrOHk3KTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQwOTAwOA==", "bodyText": "is this considered a breaking change?\nI think it was copy pasted from circuit breaker \ud83d\ude04", "url": "https://github.com/resilience4j/resilience4j/pull/1200#discussion_r508409008", "createdAt": "2020-10-20T11:03:32Z", "author": {"login": "cosminseceleanu"}, "path": "resilience4j-retry/src/main/java/io/github/resilience4j/retry/RetryConfig.java", "diffHunk": "@@ -150,7 +171,7 @@ public Builder(RetryConfig baseConfig) {\n                 this.intervalFunction = (x) -> waitDuration.toMillis();\n             } else {\n                 throw new IllegalArgumentException(\n-                    \"waitDurationInOpenState must be a positive value\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55d37aebd8aa80059f8b456a64eb7a3b32955e75"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQxNDU0MQ==", "bodyText": "No :) we should fix the message :)", "url": "https://github.com/resilience4j/resilience4j/pull/1200#discussion_r508414541", "createdAt": "2020-10-20T11:13:04Z", "author": {"login": "RobWin"}, "path": "resilience4j-retry/src/main/java/io/github/resilience4j/retry/RetryConfig.java", "diffHunk": "@@ -150,7 +171,7 @@ public Builder(RetryConfig baseConfig) {\n                 this.intervalFunction = (x) -> waitDuration.toMillis();\n             } else {\n                 throw new IllegalArgumentException(\n-                    \"waitDurationInOpenState must be a positive value\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQwOTAwOA=="}, "originalCommit": {"oid": "55d37aebd8aa80059f8b456a64eb7a3b32955e75"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTAzMDUxOnYy", "diffSide": "RIGHT", "path": "resilience4j-retry/src/main/java/io/github/resilience4j/retry/RetryConfig.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMjoyMTo1N1rOHk5kTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwODo1OTozNVrOHlhl6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ1Mzk2NQ==", "bodyText": "I think we should deprecate getIntervalFunction, since it shouldn't be used anymore in our  RetryImpl. Makes it more obvious where it is still used.\nComparable to getWaitDurationInOpenState in CircuitBreakerConfig", "url": "https://github.com/resilience4j/resilience4j/pull/1200#discussion_r508453965", "createdAt": "2020-10-20T12:21:57Z", "author": {"login": "RobWin"}, "path": "resilience4j-retry/src/main/java/io/github/resilience4j/retry/RetryConfig.java", "diffHunk": "@@ -90,6 +95,18 @@ public int getMaxAttempts() {\n         return intervalFunction;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eddbe000694405e82e283dbc0ddaf9fdf71c17f"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ2MzQ2OQ==", "bodyText": "This was one of my questions from PR description \ud83d\ude03", "url": "https://github.com/resilience4j/resilience4j/pull/1200#discussion_r508463469", "createdAt": "2020-10-20T12:36:45Z", "author": {"login": "cosminseceleanu"}, "path": "resilience4j-retry/src/main/java/io/github/resilience4j/retry/RetryConfig.java", "diffHunk": "@@ -90,6 +95,18 @@ public int getMaxAttempts() {\n         return intervalFunction;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ1Mzk2NQ=="}, "originalCommit": {"oid": "3eddbe000694405e82e283dbc0ddaf9fdf71c17f"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ2NDU4NQ==", "bodyText": "I misread the PR description. I thought you want to deprecate IntervalFunction itself.\nToo many topics in parallel, sorry.", "url": "https://github.com/resilience4j/resilience4j/pull/1200#discussion_r508464585", "createdAt": "2020-10-20T12:38:22Z", "author": {"login": "RobWin"}, "path": "resilience4j-retry/src/main/java/io/github/resilience4j/retry/RetryConfig.java", "diffHunk": "@@ -90,6 +95,18 @@ public int getMaxAttempts() {\n         return intervalFunction;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ1Mzk2NQ=="}, "originalCommit": {"oid": "3eddbe000694405e82e283dbc0ddaf9fdf71c17f"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEwOTczOQ==", "bodyText": "no worries", "url": "https://github.com/resilience4j/resilience4j/pull/1200#discussion_r509109739", "createdAt": "2020-10-21T08:59:35Z", "author": {"login": "cosminseceleanu"}, "path": "resilience4j-retry/src/main/java/io/github/resilience4j/retry/RetryConfig.java", "diffHunk": "@@ -90,6 +95,18 @@ public int getMaxAttempts() {\n         return intervalFunction;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ1Mzk2NQ=="}, "originalCommit": {"oid": "3eddbe000694405e82e283dbc0ddaf9fdf71c17f"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4ODk3MTY0OnYy", "diffSide": "RIGHT", "path": "resilience4j-retry/src/test/java/io/github/resilience4j/retry/RetryConfigBuilderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwODowNzozNFrOHlfXnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwODowNzozNFrOHlfXnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA3MzMwOA==", "bodyText": "Could you please add a final test that if neither intervalBiFunction nor intervalFunction is set, that the default setting is used in the RetryConfig?", "url": "https://github.com/resilience4j/resilience4j/pull/1200#discussion_r509073308", "createdAt": "2020-10-21T08:07:34Z", "author": {"login": "RobWin"}, "path": "resilience4j-retry/src/test/java/io/github/resilience4j/retry/RetryConfigBuilderTest.java", "diffHunk": "@@ -168,6 +181,13 @@ public void shouldBuilderCreateConfigEveryTime() {\n         assertThat(config1.getMaxAttempts()).isEqualTo(5);\n     }\n \n+    @Test(expected = IllegalStateException.class)\n+    public void intervalFunctionUsedWithIntervalBiFunctionShouldFail() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eddbe000694405e82e283dbc0ddaf9fdf71c17f"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTAxNzY2OnYy", "diffSide": "RIGHT", "path": "resilience4j-retry/src/main/java/io/github/resilience4j/retry/internal/RetryImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwODoxODoxOFrOHlfzjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwODoxODoxOFrOHlfzjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4MDQ2MQ==", "bodyText": "I think this is unused import.", "url": "https://github.com/resilience4j/resilience4j/pull/1200#discussion_r509080461", "createdAt": "2020-10-21T08:18:18Z", "author": {"login": "dlsrb6342"}, "path": "resilience4j-retry/src/main/java/io/github/resilience4j/retry/internal/RetryImpl.java", "diffHunk": "@@ -24,19 +24,21 @@\n import io.github.resilience4j.retry.MaxRetriesExceeded;\n import io.github.resilience4j.retry.Retry;\n import io.github.resilience4j.retry.RetryConfig;\n+import io.github.resilience4j.core.IntervalBiFunction;\n import io.github.resilience4j.retry.event.*;\n import io.vavr.CheckedConsumer;\n import io.vavr.collection.HashMap;\n import io.vavr.collection.Map;\n+import io.vavr.control.Either;\n import io.vavr.control.Option;\n import io.vavr.control.Try;\n \n+import java.util.Optional;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eddbe000694405e82e283dbc0ddaf9fdf71c17f"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTAzODkyOnYy", "diffSide": "RIGHT", "path": "resilience4j-retry/src/main/java/io/github/resilience4j/retry/RetryConfig.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwODoyMzowNFrOHlgA1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNzozNTo1OVrOHnCJPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4Mzg2MA==", "bodyText": "config.intervalFunction isn't used anymore in RetryImpl.\nIf set only IntervalFunction, I think code should be like following\nconfig.intervalBiFunction = Optional.ofNullable(intervalBiFunction)\n                                    .orElse(IntervalBiFunction.ofIntervalFunction(intervalFunction));", "url": "https://github.com/resilience4j/resilience4j/pull/1200#discussion_r509083860", "createdAt": "2020-10-21T08:23:04Z", "author": {"login": "dlsrb6342"}, "path": "resilience4j-retry/src/main/java/io/github/resilience4j/retry/RetryConfig.java", "diffHunk": "@@ -243,14 +280,19 @@ public Builder(RetryConfig baseConfig) {\n         }\n \n         public RetryConfig build() {\n+            if (intervalFunction != null && intervalBiFunction != null) {\n+                throw new IllegalStateException(\"The intervalFunction was configured twice which could result in an\" +\n+                    \" undesired state. Please use either intervalFunction or intervalBiFunction.\");\n+            }\n             RetryConfig config = new RetryConfig();\n-            config.intervalFunction = intervalFunction;\n+            config.intervalFunction = Optional.ofNullable(intervalFunction).orElse(IntervalFunction.ofDefaults());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eddbe000694405e82e283dbc0ddaf9fdf71c17f"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEwOTMzMA==", "bodyText": "this means that config.intervalFunction should be marked as deprecated and nullable", "url": "https://github.com/resilience4j/resilience4j/pull/1200#discussion_r509109330", "createdAt": "2020-10-21T08:59:04Z", "author": {"login": "cosminseceleanu"}, "path": "resilience4j-retry/src/main/java/io/github/resilience4j/retry/RetryConfig.java", "diffHunk": "@@ -243,14 +280,19 @@ public Builder(RetryConfig baseConfig) {\n         }\n \n         public RetryConfig build() {\n+            if (intervalFunction != null && intervalBiFunction != null) {\n+                throw new IllegalStateException(\"The intervalFunction was configured twice which could result in an\" +\n+                    \" undesired state. Please use either intervalFunction or intervalBiFunction.\");\n+            }\n             RetryConfig config = new RetryConfig();\n-            config.intervalFunction = intervalFunction;\n+            config.intervalFunction = Optional.ofNullable(intervalFunction).orElse(IntervalFunction.ofDefaults());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4Mzg2MA=="}, "originalCommit": {"oid": "3eddbe000694405e82e283dbc0ddaf9fdf71c17f"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEyMzE0Ng==", "bodyText": "Yes, I think that's fine", "url": "https://github.com/resilience4j/resilience4j/pull/1200#discussion_r509123146", "createdAt": "2020-10-21T09:19:17Z", "author": {"login": "RobWin"}, "path": "resilience4j-retry/src/main/java/io/github/resilience4j/retry/RetryConfig.java", "diffHunk": "@@ -243,14 +280,19 @@ public Builder(RetryConfig baseConfig) {\n         }\n \n         public RetryConfig build() {\n+            if (intervalFunction != null && intervalBiFunction != null) {\n+                throw new IllegalStateException(\"The intervalFunction was configured twice which could result in an\" +\n+                    \" undesired state. Please use either intervalFunction or intervalBiFunction.\");\n+            }\n             RetryConfig config = new RetryConfig();\n-            config.intervalFunction = intervalFunction;\n+            config.intervalFunction = Optional.ofNullable(intervalFunction).orElse(IntervalFunction.ofDefaults());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4Mzg2MA=="}, "originalCommit": {"oid": "3eddbe000694405e82e283dbc0ddaf9fdf71c17f"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE5Mzc3Mw==", "bodyText": "Hmm, I tried this and found an interesting use case, the following code will throw IllegalStateException\nRetryConfig baseConfig = RetryConfig.ofDefaults();\nRetryConfig retryConfig = RetryConfig.from(baseConfig)\n            .intervalFunction(IntervalFunction.of(100L))\n            .build();\nBecause baseConfig.intervalBiFunction = bi function of interval defaults and since config.intervalBiFunction is the only used by Retry I thought that only this value should be copied from base config on RetryConfig.from(baseConfig), therefore retryConfig.intervalBiFunction = baseConfig.intervalBiFunction\nI'm kind of stuck with this, any idea?", "url": "https://github.com/resilience4j/resilience4j/pull/1200#discussion_r509193773", "createdAt": "2020-10-21T11:16:38Z", "author": {"login": "cosminseceleanu"}, "path": "resilience4j-retry/src/main/java/io/github/resilience4j/retry/RetryConfig.java", "diffHunk": "@@ -243,14 +280,19 @@ public Builder(RetryConfig baseConfig) {\n         }\n \n         public RetryConfig build() {\n+            if (intervalFunction != null && intervalBiFunction != null) {\n+                throw new IllegalStateException(\"The intervalFunction was configured twice which could result in an\" +\n+                    \" undesired state. Please use either intervalFunction or intervalBiFunction.\");\n+            }\n             RetryConfig config = new RetryConfig();\n-            config.intervalFunction = intervalFunction;\n+            config.intervalFunction = Optional.ofNullable(intervalFunction).orElse(IntervalFunction.ofDefaults());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4Mzg2MA=="}, "originalCommit": {"oid": "3eddbe000694405e82e283dbc0ddaf9fdf71c17f"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk4NTE3Nw==", "bodyText": "Maybe we just use a int counter. If the counter == 2, then the user has used both methods.", "url": "https://github.com/resilience4j/resilience4j/pull/1200#discussion_r509985177", "createdAt": "2020-10-22T08:43:50Z", "author": {"login": "RobWin"}, "path": "resilience4j-retry/src/main/java/io/github/resilience4j/retry/RetryConfig.java", "diffHunk": "@@ -243,14 +280,19 @@ public Builder(RetryConfig baseConfig) {\n         }\n \n         public RetryConfig build() {\n+            if (intervalFunction != null && intervalBiFunction != null) {\n+                throw new IllegalStateException(\"The intervalFunction was configured twice which could result in an\" +\n+                    \" undesired state. Please use either intervalFunction or intervalBiFunction.\");\n+            }\n             RetryConfig config = new RetryConfig();\n-            config.intervalFunction = intervalFunction;\n+            config.intervalFunction = Optional.ofNullable(intervalFunction).orElse(IntervalFunction.ofDefaults());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4Mzg2MA=="}, "originalCommit": {"oid": "3eddbe000694405e82e283dbc0ddaf9fdf71c17f"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI0NTk4Mw==", "bodyText": "never mind, I think I was too tired", "url": "https://github.com/resilience4j/resilience4j/pull/1200#discussion_r510245983", "createdAt": "2020-10-22T15:16:40Z", "author": {"login": "cosminseceleanu"}, "path": "resilience4j-retry/src/main/java/io/github/resilience4j/retry/RetryConfig.java", "diffHunk": "@@ -243,14 +280,19 @@ public Builder(RetryConfig baseConfig) {\n         }\n \n         public RetryConfig build() {\n+            if (intervalFunction != null && intervalBiFunction != null) {\n+                throw new IllegalStateException(\"The intervalFunction was configured twice which could result in an\" +\n+                    \" undesired state. Please use either intervalFunction or intervalBiFunction.\");\n+            }\n             RetryConfig config = new RetryConfig();\n-            config.intervalFunction = intervalFunction;\n+            config.intervalFunction = Optional.ofNullable(intervalFunction).orElse(IntervalFunction.ofDefaults());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4Mzg2MA=="}, "originalCommit": {"oid": "3eddbe000694405e82e283dbc0ddaf9fdf71c17f"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY1ODMwMw==", "bodyText": "This is how it was implemented in CircuitBreakerConfig now -> https://github.com/resilience4j/resilience4j/pull/1216/files", "url": "https://github.com/resilience4j/resilience4j/pull/1200#discussion_r510658303", "createdAt": "2020-10-23T06:18:22Z", "author": {"login": "RobWin"}, "path": "resilience4j-retry/src/main/java/io/github/resilience4j/retry/RetryConfig.java", "diffHunk": "@@ -243,14 +280,19 @@ public Builder(RetryConfig baseConfig) {\n         }\n \n         public RetryConfig build() {\n+            if (intervalFunction != null && intervalBiFunction != null) {\n+                throw new IllegalStateException(\"The intervalFunction was configured twice which could result in an\" +\n+                    \" undesired state. Please use either intervalFunction or intervalBiFunction.\");\n+            }\n             RetryConfig config = new RetryConfig();\n-            config.intervalFunction = intervalFunction;\n+            config.intervalFunction = Optional.ofNullable(intervalFunction).orElse(IntervalFunction.ofDefaults());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4Mzg2MA=="}, "originalCommit": {"oid": "3eddbe000694405e82e283dbc0ddaf9fdf71c17f"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY5MTY0NA==", "bodyText": "I was trying to avoid that kind of implementation.\nWhat I've done is this: whenever intervalFunction is set then when creating a new builder with RetryConfig.from only intervalFunction is copied from base config. Because intervalBiFunction is always present and when build is invoked will be created from intervalFunction.\nSee the implementation :)", "url": "https://github.com/resilience4j/resilience4j/pull/1200#discussion_r510691644", "createdAt": "2020-10-23T07:35:59Z", "author": {"login": "cosminseceleanu"}, "path": "resilience4j-retry/src/main/java/io/github/resilience4j/retry/RetryConfig.java", "diffHunk": "@@ -243,14 +280,19 @@ public Builder(RetryConfig baseConfig) {\n         }\n \n         public RetryConfig build() {\n+            if (intervalFunction != null && intervalBiFunction != null) {\n+                throw new IllegalStateException(\"The intervalFunction was configured twice which could result in an\" +\n+                    \" undesired state. Please use either intervalFunction or intervalBiFunction.\");\n+            }\n             RetryConfig config = new RetryConfig();\n-            config.intervalFunction = intervalFunction;\n+            config.intervalFunction = Optional.ofNullable(intervalFunction).orElse(IntervalFunction.ofDefaults());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4Mzg2MA=="}, "originalCommit": {"oid": "3eddbe000694405e82e283dbc0ddaf9fdf71c17f"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5ODMzODc3OnYy", "diffSide": "RIGHT", "path": "resilience4j-retry/src/main/java/io/github/resilience4j/retry/RetryConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMzoyMDoxNVrOHm60mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNzozNjoyNFrOHnCKBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU3MTY3NA==", "bodyText": "Doesn't need to set IntervalBiFunction?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            this.intervalFunction = (x) -> waitDuration.toMillis();\n          \n          \n            \n                            this.intervalBiFunction = (attempt, either) -> waitDuration.toMillis();", "url": "https://github.com/resilience4j/resilience4j/pull/1200#discussion_r510571674", "createdAt": "2020-10-23T03:20:15Z", "author": {"login": "dlsrb6342"}, "path": "resilience4j-retry/src/main/java/io/github/resilience4j/retry/RetryConfig.java", "diffHunk": "@@ -150,7 +182,7 @@ public Builder(RetryConfig baseConfig) {\n                 this.intervalFunction = (x) -> waitDuration.toMillis();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1931fa65fbbe9f0eff5f1310c5615975dd7cde0b"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY5MTg0NA==", "bodyText": "done", "url": "https://github.com/resilience4j/resilience4j/pull/1200#discussion_r510691844", "createdAt": "2020-10-23T07:36:24Z", "author": {"login": "cosminseceleanu"}, "path": "resilience4j-retry/src/main/java/io/github/resilience4j/retry/RetryConfig.java", "diffHunk": "@@ -150,7 +182,7 @@ public Builder(RetryConfig baseConfig) {\n                 this.intervalFunction = (x) -> waitDuration.toMillis();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU3MTY3NA=="}, "originalCommit": {"oid": "1931fa65fbbe9f0eff5f1310c5615975dd7cde0b"}, "originalPosition": 101}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 25, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}