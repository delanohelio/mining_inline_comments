{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4NDc0NTIy", "number": 1121, "title": "Phase-1 Remove vavr dependency for CircuitBreaker and retry module", "bodyText": "This Pull request is part of removing Vavr dependency from Resiliency4j- Phase 1.\nThis PR includes changes to make CircuitBreaker and Retry module entirely vavr independent. Changes are done to many other modules to back port the contract breaking changes done in core APIs.\nMy sincere apologies that the PR has become too long this time as I just couldn't keep track while back porting changes from core APIs.\nI will try to keep the PRs smaller next time and iteratively remove Vavr from subsequent other modules.\n@RobWin Let me know if the PR is too difficult to review. I will try to figure something out.", "createdAt": "2020-08-16T17:48:52Z", "url": "https://github.com/resilience4j/resilience4j/pull/1121", "merged": true, "mergeCommit": {"oid": "f25936cb98c6ae822ff4b5e146e39677e4dcd9b9"}, "closed": true, "closedAt": "2020-08-20T13:26:32Z", "author": {"login": "KrnSaurabh"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc_hFVIAH2gAyNDY4NDc0NTIyOjFlYTI0YjUxZjczYmIxNDM5YWM0YjdjYmI5NzlkOTU2NTU2MTdmODI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdAwLvRAFqTQ3MTYxMTEzMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1ea24b51f73bb1439ac4b7cbb979d95655617f82", "author": {"user": null}, "url": "https://github.com/resilience4j/resilience4j/commit/1ea24b51f73bb1439ac4b7cbb979d95655617f82", "committedDate": "2020-08-16T17:16:00Z", "message": "Phase-1 Remove vavr dependency for CircuitBreaker and retry module"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwMTk2Nzk5", "url": "https://github.com/resilience4j/resilience4j/pull/1121#pullrequestreview-470196799", "createdAt": "2020-08-19T07:34:23Z", "commit": {"oid": "1ea24b51f73bb1439ac4b7cbb979d95655617f82"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNzozNDoyM1rOHC584A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNzozNTo1MFrOHC6Bqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjgwODY3Mg==", "bodyText": "I think we should create a defensive copy of the Map", "url": "https://github.com/resilience4j/resilience4j/pull/1121#discussion_r472808672", "createdAt": "2020-08-19T07:34:23Z", "author": {"login": "RobWin"}, "path": "resilience4j-spring/src/main/java/io/github/resilience4j/ratelimiter/configure/RateLimiterConfiguration.java", "diffHunk": "@@ -104,7 +104,7 @@ private RateLimiterRegistry createRateLimiterRegistry(\n                         entry.getKey())));\n \n         return RateLimiterRegistry.of(configs, rateLimiterRegistryEventConsumer,\n-            io.vavr.collection.HashMap.ofAll(rateLimiterConfigurationProperties.getTags()));\n+            rateLimiterConfigurationProperties.getTags());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ea24b51f73bb1439ac4b7cbb979d95655617f82"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjgwOTAwNQ==", "bodyText": "I think we should create a defensive copy of the Map", "url": "https://github.com/resilience4j/resilience4j/pull/1121#discussion_r472809005", "createdAt": "2020-08-19T07:34:48Z", "author": {"login": "RobWin"}, "path": "resilience4j-spring/src/main/java/io/github/resilience4j/circuitbreaker/configure/CircuitBreakerConfiguration.java", "diffHunk": "@@ -142,8 +142,7 @@ CircuitBreakerRegistry createCircuitBreakerRegistry(\n                     .createCircuitBreakerConfig(entry.getKey(), entry.getValue(),\n                         customizerMap)));\n \n-        return CircuitBreakerRegistry.of(configs, circuitBreakerRegistryEventConsumer,\n-            io.vavr.collection.HashMap.ofAll(circuitBreakerProperties.getTags()));\n+        return CircuitBreakerRegistry.of(configs, circuitBreakerRegistryEventConsumer, circuitBreakerProperties.getTags());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ea24b51f73bb1439ac4b7cbb979d95655617f82"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjgwOTMwMA==", "bodyText": "I think we should create a defensive copy of the Map", "url": "https://github.com/resilience4j/resilience4j/pull/1121#discussion_r472809300", "createdAt": "2020-08-19T07:35:10Z", "author": {"login": "RobWin"}, "path": "resilience4j-spring/src/main/java/io/github/resilience4j/bulkhead/configure/threadpool/ThreadPoolBulkheadConfiguration.java", "diffHunk": "@@ -102,8 +102,7 @@ private ThreadPoolBulkheadRegistry createBulkheadRegistry(\n                 entry -> threadPoolBulkheadConfigurationProperties\n                     .createThreadPoolBulkheadConfig(entry.getValue(),\n                         compositeThreadPoolBulkheadCustomizer, entry.getKey())));\n-        return ThreadPoolBulkheadRegistry.of(configs, threadPoolBulkheadRegistryEventConsumer,\n-            io.vavr.collection.HashMap.ofAll(threadPoolBulkheadConfigurationProperties.getTags()));\n+        return ThreadPoolBulkheadRegistry.of(configs, threadPoolBulkheadRegistryEventConsumer, threadPoolBulkheadConfigurationProperties.getTags());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ea24b51f73bb1439ac4b7cbb979d95655617f82"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjgwOTc5Nw==", "bodyText": "I think we should create a defensive copy of the Map", "url": "https://github.com/resilience4j/resilience4j/pull/1121#discussion_r472809797", "createdAt": "2020-08-19T07:35:43Z", "author": {"login": "RobWin"}, "path": "resilience4j-spring/src/main/java/io/github/resilience4j/timelimiter/configure/TimeLimiterConfiguration.java", "diffHunk": "@@ -131,8 +131,7 @@ private static TimeLimiterRegistry createTimeLimiterRegistry(\n                         entry -> timeLimiterConfigurationProperties.createTimeLimiterConfig(\n                             entry.getKey(), entry.getValue(), compositeTimeLimiterCustomizer)));\n \n-        return TimeLimiterRegistry.of(configs, timeLimiterRegistryEventConsumer,\n-            HashMap.ofAll(timeLimiterConfigurationProperties.getTags()));\n+        return TimeLimiterRegistry.of(configs, timeLimiterRegistryEventConsumer, timeLimiterConfigurationProperties.getTags());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ea24b51f73bb1439ac4b7cbb979d95655617f82"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjgwOTg5OQ==", "bodyText": "I think we should create a defensive copy of the Map", "url": "https://github.com/resilience4j/resilience4j/pull/1121#discussion_r472809899", "createdAt": "2020-08-19T07:35:50Z", "author": {"login": "RobWin"}, "path": "resilience4j-spring/src/main/java/io/github/resilience4j/retry/configure/RetryConfiguration.java", "diffHunk": "@@ -103,8 +103,7 @@ private RetryRegistry createRetryRegistry(\n                     .createRetryConfig(entry.getValue(), compositeRetryCustomizer,\n                         entry.getKey())));\n \n-        return RetryRegistry.of(configs, retryRegistryEventConsumer,\n-            io.vavr.collection.HashMap.ofAll(retryConfigurationProperties.getTags()));\n+        return RetryRegistry.of(configs, retryRegistryEventConsumer, retryConfigurationProperties.getTags());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ea24b51f73bb1439ac4b7cbb979d95655617f82"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af8bff08eecd0aee0b4c3f66c370094db039916b", "author": {"user": null}, "url": "https://github.com/resilience4j/resilience4j/commit/af8bff08eecd0aee0b4c3f66c370094db039916b", "committedDate": "2020-08-20T07:16:53Z", "message": "changed the map to return unmodifiable map from configuration classes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxNjExMTMx", "url": "https://github.com/resilience4j/resilience4j/pull/1121#pullrequestreview-471611131", "createdAt": "2020-08-20T13:25:30Z", "commit": {"oid": "af8bff08eecd0aee0b4c3f66c370094db039916b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1764, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}