{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4NDY0NDIw", "number": 882, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNTozNzoxNFrODiXxxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNTozNzoxNFrODiXxxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MzY3NzUwOnYy", "diffSide": "RIGHT", "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerRegistry.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNTozNzoxNFrOFtlG-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNzoyOToxMVrOFugmgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMzODIzMg==", "bodyText": "withCircuitBreakerConfigDefaults is not necessary.  If the config map is empty, the InMemoryCircuitBreakerRegistry creates a default config.", "url": "https://github.com/resilience4j/resilience4j/pull/882#discussion_r383338232", "createdAt": "2020-02-24T15:37:14Z", "author": {"login": "RobWin"}, "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerRegistry.java", "diffHunk": "@@ -261,4 +263,60 @@ CircuitBreaker circuitBreaker(String name,\n         Supplier<CircuitBreakerConfig> circuitBreakerConfigSupplier,\n         io.vavr.collection.Map<String, String> tags);\n \n+    static Builder custom() {\n+        return new Builder();\n+    }\n+\n+    class Builder {\n+\n+        private static final String DEFAULT_CONFIG = \"default\";\n+        private RegistryStore registryStore;\n+        private Map<String, CircuitBreakerConfig> circuitBreakerConfigsMap;\n+        private List<RegistryEventConsumer<CircuitBreaker>> registryEventConsumers;\n+        private io.vavr.collection.Map<String, String> tags;\n+\n+        public Builder() {\n+            this.circuitBreakerConfigsMap = new java.util.HashMap<>();\n+            this.registryEventConsumers = new ArrayList<>();\n+        }\n+\n+        public Builder withRegistryStore(RegistryStore registryStore) {\n+            this.registryStore = registryStore;\n+            return this;\n+        }\n+\n+        public Builder withCircuitBreakerConfig(CircuitBreakerConfig circuitBreakerConfig) {\n+            circuitBreakerConfigsMap.put(DEFAULT_CONFIG, circuitBreakerConfig);\n+            return this;\n+        }\n+\n+        public Builder withCircuitBreakerConfigDefaults() {\n+            circuitBreakerConfigsMap.put(DEFAULT_CONFIG, CircuitBreakerConfig.ofDefaults());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c94cf03e43ba94cedf9500d4f164f5ca1031abf"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzcyNTcxOA==", "bodyText": "@RobWin  I agree that if the config map is empty, InMemoryCircuitBreakerRegistry creates a default config but I implemented this method so that user can take conscious decision to create CircuitBreakerRegistry configs by default and does not leave the hashmap empty unknowingly. Let me know if that makes sense, I will remove the method otherwise.", "url": "https://github.com/resilience4j/resilience4j/pull/882#discussion_r383725718", "createdAt": "2020-02-25T08:35:26Z", "author": {"login": "KrnSaurabh"}, "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerRegistry.java", "diffHunk": "@@ -261,4 +263,60 @@ CircuitBreaker circuitBreaker(String name,\n         Supplier<CircuitBreakerConfig> circuitBreakerConfigSupplier,\n         io.vavr.collection.Map<String, String> tags);\n \n+    static Builder custom() {\n+        return new Builder();\n+    }\n+\n+    class Builder {\n+\n+        private static final String DEFAULT_CONFIG = \"default\";\n+        private RegistryStore registryStore;\n+        private Map<String, CircuitBreakerConfig> circuitBreakerConfigsMap;\n+        private List<RegistryEventConsumer<CircuitBreaker>> registryEventConsumers;\n+        private io.vavr.collection.Map<String, String> tags;\n+\n+        public Builder() {\n+            this.circuitBreakerConfigsMap = new java.util.HashMap<>();\n+            this.registryEventConsumers = new ArrayList<>();\n+        }\n+\n+        public Builder withRegistryStore(RegistryStore registryStore) {\n+            this.registryStore = registryStore;\n+            return this;\n+        }\n+\n+        public Builder withCircuitBreakerConfig(CircuitBreakerConfig circuitBreakerConfig) {\n+            circuitBreakerConfigsMap.put(DEFAULT_CONFIG, circuitBreakerConfig);\n+            return this;\n+        }\n+\n+        public Builder withCircuitBreakerConfigDefaults() {\n+            circuitBreakerConfigsMap.put(DEFAULT_CONFIG, CircuitBreakerConfig.ofDefaults());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMzODIzMg=="}, "originalCommit": {"oid": "3c94cf03e43ba94cedf9500d4f164f5ca1031abf"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMxMjk2MQ==", "bodyText": "A CircuitBreakerRegistry always has a default CircuitBreakerConfig. It doesn't really matter if the user invokes withCircuitBreakerConfigDefaults or not.\nIf this method exists, it might be confusing for a users that a CircuitBreakerRegistry has defaults, even if the user didn't invoke the method. I think we should remove it.", "url": "https://github.com/resilience4j/resilience4j/pull/882#discussion_r384312961", "createdAt": "2020-02-26T07:29:11Z", "author": {"login": "RobWin"}, "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerRegistry.java", "diffHunk": "@@ -261,4 +263,60 @@ CircuitBreaker circuitBreaker(String name,\n         Supplier<CircuitBreakerConfig> circuitBreakerConfigSupplier,\n         io.vavr.collection.Map<String, String> tags);\n \n+    static Builder custom() {\n+        return new Builder();\n+    }\n+\n+    class Builder {\n+\n+        private static final String DEFAULT_CONFIG = \"default\";\n+        private RegistryStore registryStore;\n+        private Map<String, CircuitBreakerConfig> circuitBreakerConfigsMap;\n+        private List<RegistryEventConsumer<CircuitBreaker>> registryEventConsumers;\n+        private io.vavr.collection.Map<String, String> tags;\n+\n+        public Builder() {\n+            this.circuitBreakerConfigsMap = new java.util.HashMap<>();\n+            this.registryEventConsumers = new ArrayList<>();\n+        }\n+\n+        public Builder withRegistryStore(RegistryStore registryStore) {\n+            this.registryStore = registryStore;\n+            return this;\n+        }\n+\n+        public Builder withCircuitBreakerConfig(CircuitBreakerConfig circuitBreakerConfig) {\n+            circuitBreakerConfigsMap.put(DEFAULT_CONFIG, circuitBreakerConfig);\n+            return this;\n+        }\n+\n+        public Builder withCircuitBreakerConfigDefaults() {\n+            circuitBreakerConfigsMap.put(DEFAULT_CONFIG, CircuitBreakerConfig.ofDefaults());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMzODIzMg=="}, "originalCommit": {"oid": "3c94cf03e43ba94cedf9500d4f164f5ca1031abf"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 63, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}