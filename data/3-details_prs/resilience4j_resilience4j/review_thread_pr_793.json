{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwMjA5NDUz", "number": 793, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QyMzo0NDo0MFrODWZvnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QyMzo0NTozN1rODWZwSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0ODE3MDUzOnYy", "diffSide": "RIGHT", "path": "resilience4j-framework-common/src/main/java/io/github/resilience4j/common/ratelimiter/configuration/CompositeRateLimiterCustomizer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QyMzo0NDo0MFrOFbJJJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QyMzo0NDo0MFrOFbJJJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDAwNTY2OQ==", "bodyText": "Please fix typo\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * the composite  of any circuit breaker {@link RateLimiterConfigCustomizer} implementations.\n          \n          \n            \n             * the composite  of any rate limiter {@link RateLimiterConfigCustomizer} implementations.", "url": "https://github.com/resilience4j/resilience4j/pull/793#discussion_r364005669", "createdAt": "2020-01-07T23:44:40Z", "author": {"login": "dlsrb6342"}, "path": "resilience4j-framework-common/src/main/java/io/github/resilience4j/common/ratelimiter/configuration/CompositeRateLimiterCustomizer.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package io.github.resilience4j.common.ratelimiter.configuration;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * the composite  of any circuit breaker {@link RateLimiterConfigCustomizer} implementations.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d65ba2abb05815704ccce881fd1c2fde3e04a250"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0ODE3MjI0OnYy", "diffSide": "RIGHT", "path": "resilience4j-framework-common/src/main/java/io/github/resilience4j/common/ratelimiter/configuration/CompositeRateLimiterCustomizer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QyMzo0NTozN1rOFbJKMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwODoxNDozOVrOFbtq1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDAwNTkzOA==", "bodyText": "Don't we need to check that there are multiple customizer for same name?", "url": "https://github.com/resilience4j/resilience4j/pull/793#discussion_r364005938", "createdAt": "2020-01-07T23:45:37Z", "author": {"login": "dlsrb6342"}, "path": "resilience4j-framework-common/src/main/java/io/github/resilience4j/common/ratelimiter/configuration/CompositeRateLimiterCustomizer.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package io.github.resilience4j.common.ratelimiter.configuration;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * the composite  of any circuit breaker {@link RateLimiterConfigCustomizer} implementations.\n+ */\n+public class CompositeRateLimiterCustomizer {\n+\n+    private final Map<String, RateLimiterConfigCustomizer> customizerMap = new HashMap<>();\n+\n+    public CompositeRateLimiterCustomizer(List<RateLimiterConfigCustomizer> customizers) {\n+        if (customizers != null && !customizers.isEmpty()) {\n+            customizerMap.putAll(customizers.stream()\n+                .collect(\n+                    Collectors.toMap(RateLimiterConfigCustomizer::name, Function.identity())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d65ba2abb05815704ccce881fd1c2fde3e04a250"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDEyMTg4Ng==", "bodyText": "we can throw an exception to show that is not allowed to have more than one customizer per instance name , is this what u r asking for :) ? or i misunderstood ?", "url": "https://github.com/resilience4j/resilience4j/pull/793#discussion_r364121886", "createdAt": "2020-01-08T08:57:38Z", "author": {"login": "Romeh"}, "path": "resilience4j-framework-common/src/main/java/io/github/resilience4j/common/ratelimiter/configuration/CompositeRateLimiterCustomizer.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package io.github.resilience4j.common.ratelimiter.configuration;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * the composite  of any circuit breaker {@link RateLimiterConfigCustomizer} implementations.\n+ */\n+public class CompositeRateLimiterCustomizer {\n+\n+    private final Map<String, RateLimiterConfigCustomizer> customizerMap = new HashMap<>();\n+\n+    public CompositeRateLimiterCustomizer(List<RateLimiterConfigCustomizer> customizers) {\n+        if (customizers != null && !customizers.isEmpty()) {\n+            customizerMap.putAll(customizers.stream()\n+                .collect(\n+                    Collectors.toMap(RateLimiterConfigCustomizer::name, Function.identity())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDAwNTkzOA=="}, "originalCommit": {"oid": "d65ba2abb05815704ccce881fd1c2fde3e04a250"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDYwNDExNw==", "bodyText": "Yes right. We can throw an exception or write on docs about supporting just one customizer per instance name.", "url": "https://github.com/resilience4j/resilience4j/pull/793#discussion_r364604117", "createdAt": "2020-01-09T08:14:39Z", "author": {"login": "dlsrb6342"}, "path": "resilience4j-framework-common/src/main/java/io/github/resilience4j/common/ratelimiter/configuration/CompositeRateLimiterCustomizer.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package io.github.resilience4j.common.ratelimiter.configuration;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * the composite  of any circuit breaker {@link RateLimiterConfigCustomizer} implementations.\n+ */\n+public class CompositeRateLimiterCustomizer {\n+\n+    private final Map<String, RateLimiterConfigCustomizer> customizerMap = new HashMap<>();\n+\n+    public CompositeRateLimiterCustomizer(List<RateLimiterConfigCustomizer> customizers) {\n+        if (customizers != null && !customizers.isEmpty()) {\n+            customizerMap.putAll(customizers.stream()\n+                .collect(\n+                    Collectors.toMap(RateLimiterConfigCustomizer::name, Function.identity())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDAwNTkzOA=="}, "originalCommit": {"oid": "d65ba2abb05815704ccce881fd1c2fde3e04a250"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 43, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}