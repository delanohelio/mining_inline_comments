{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwNjQ4NTY1", "number": 1200, "title": "Issue #1043 Added IntervalBiFunction to calculate wait duration based on result/exception", "bodyText": "Pull request for issue #1043\nAdded interface IntervalBiFunction<T> extends BiFunction<Integer, Either<T, Throwable>, Long> to calculate retry wait interval on result or exception. When IntervalBiFunction is not set then the it will use the IntervalFunction as fallback.\nAn use case for this feature is to be able to respect HTTP Retry-After header.\nQuestions:\n\nIntervalBiFunction should be placed in resilience4j-core or resilience4j-retry?\nRetryConfig.intervalFunction should be marked as deprecated? RetryConfig.IntervalBiFunction is the only one used to build a Retry instance. -> yes", "createdAt": "2020-10-09T14:58:32Z", "url": "https://github.com/resilience4j/resilience4j/pull/1200", "merged": true, "mergeCommit": {"oid": "7952a615b232cbf6e78c4dbbaedc29157c471475"}, "closed": true, "closedAt": "2020-10-26T08:51:27Z", "author": {"login": "cosminseceleanu"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdQ3WcZgH2gAyNTAwNjQ4NTY1OjAzYWUyOTczMzdkNDI0NzFjNzgzNmU4MTc2Y2Q1M2M1MGMwYzFmZDE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdWQZyYgFqTUxNjU2Njg2OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "03ae297337d42471c7836e8176cd53c50c0c1fd1", "author": {"user": {"login": "cosminseceleanu", "name": "Cosmin Seceleanu"}}, "url": "https://github.com/resilience4j/resilience4j/commit/03ae297337d42471c7836e8176cd53c50c0c1fd1", "committedDate": "2020-10-09T14:49:19Z", "message": "Issue #1043 Added IntervalBiFunction to calculate wait duration from result or exception"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4MTI2ODY0", "url": "https://github.com/resilience4j/resilience4j/pull/1200#pullrequestreview-508126864", "createdAt": "2020-10-14T08:47:10Z", "commit": {"oid": "03ae297337d42471c7836e8176cd53c50c0c1fd1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwODo0NzoxMFrOHhItbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwODo0NzoxMFrOHhItbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUwNzc1OQ==", "bodyText": "By convention, Either's Left represents a failure case and the Right represents a success.\nT and Throwable must be switched.", "url": "https://github.com/resilience4j/resilience4j/pull/1200#discussion_r504507759", "createdAt": "2020-10-14T08:47:10Z", "author": {"login": "RobWin"}, "path": "resilience4j-core/src/main/java/io/github/resilience4j/core/IntervalBiFunction.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package io.github.resilience4j.core;\n+\n+import io.vavr.control.Either;\n+\n+import java.util.function.BiFunction;\n+\n+/**\n+ * An IntervalBiFunction which can be used to calculate the wait interval. The input parameters of the bi\n+ * function is the number of attempts (attempt) and either result or exception, the output parameter is the wait interval in\n+ * milliseconds. The attempt parameter starts at 1 and increases with every further attempt.\n+ */\n+@FunctionalInterface\n+public interface IntervalBiFunction<T> extends BiFunction<Integer, Either<T, Throwable>, Long> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03ae297337d42471c7836e8176cd53c50c0c1fd1"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9d072ccad348c227de5a45bf85325237672189b", "author": {"user": {"login": "cosminseceleanu", "name": "Cosmin Seceleanu"}}, "url": "https://github.com/resilience4j/resilience4j/commit/f9d072ccad348c227de5a45bf85325237672189b", "committedDate": "2020-10-16T10:49:40Z", "message": "Code review updates"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExNDk0Mjkx", "url": "https://github.com/resilience4j/resilience4j/pull/1200#pullrequestreview-511494291", "createdAt": "2020-10-19T07:51:08Z", "commit": {"oid": "f9d072ccad348c227de5a45bf85325237672189b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMzU4NzM3", "url": "https://github.com/resilience4j/resilience4j/pull/1200#pullrequestreview-512358737", "createdAt": "2020-10-20T06:11:20Z", "commit": {"oid": "f9d072ccad348c227de5a45bf85325237672189b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMzYzNDQ0", "url": "https://github.com/resilience4j/resilience4j/pull/1200#pullrequestreview-512363444", "createdAt": "2020-10-20T06:21:25Z", "commit": {"oid": "f9d072ccad348c227de5a45bf85325237672189b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNjoyMToyNVrOHksR4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNjoyMToyNVrOHksR4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIzNjI1Nw==", "bodyText": "We are trying to remove vavr dependency in 2.0 branch.\nIs there any substitute forEither?", "url": "https://github.com/resilience4j/resilience4j/pull/1200#discussion_r508236257", "createdAt": "2020-10-20T06:21:25Z", "author": {"login": "dlsrb6342"}, "path": "resilience4j-core/src/main/java/io/github/resilience4j/core/IntervalBiFunction.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package io.github.resilience4j.core;\n+\n+import io.vavr.control.Either;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9d072ccad348c227de5a45bf85325237672189b"}, "originalPosition": 3}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyNTg2Nzgw", "url": "https://github.com/resilience4j/resilience4j/pull/1200#pullrequestreview-512586780", "createdAt": "2020-10-20T11:03:32Z", "commit": {"oid": "55d37aebd8aa80059f8b456a64eb7a3b32955e75"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMTowMzozMlrOHk20sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMTowMzozMlrOHk20sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQwOTAwOA==", "bodyText": "is this considered a breaking change?\nI think it was copy pasted from circuit breaker \ud83d\ude04", "url": "https://github.com/resilience4j/resilience4j/pull/1200#discussion_r508409008", "createdAt": "2020-10-20T11:03:32Z", "author": {"login": "cosminseceleanu"}, "path": "resilience4j-retry/src/main/java/io/github/resilience4j/retry/RetryConfig.java", "diffHunk": "@@ -150,7 +171,7 @@ public Builder(RetryConfig baseConfig) {\n                 this.intervalFunction = (x) -> waitDuration.toMillis();\n             } else {\n                 throw new IllegalArgumentException(\n-                    \"waitDurationInOpenState must be a positive value\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55d37aebd8aa80059f8b456a64eb7a3b32955e75"}, "originalPosition": 85}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "55d37aebd8aa80059f8b456a64eb7a3b32955e75", "author": {"user": {"login": "cosminseceleanu", "name": "Cosmin Seceleanu"}}, "url": "https://github.com/resilience4j/resilience4j/commit/55d37aebd8aa80059f8b456a64eb7a3b32955e75", "committedDate": "2020-10-20T11:02:11Z", "message": "Issue #1043: Added validation for intervalFunction and intervalBiFunction when used together"}, "afterCommit": {"oid": "3eddbe000694405e82e283dbc0ddaf9fdf71c17f", "author": {"user": {"login": "cosminseceleanu", "name": "Cosmin Seceleanu"}}, "url": "https://github.com/resilience4j/resilience4j/commit/3eddbe000694405e82e283dbc0ddaf9fdf71c17f", "committedDate": "2020-10-20T12:13:20Z", "message": "Issue #1043: Added validation for intervalFunction and intervalBiFunction when used together"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyNjQ1MzYy", "url": "https://github.com/resilience4j/resilience4j/pull/1200#pullrequestreview-512645362", "createdAt": "2020-10-20T12:21:57Z", "commit": {"oid": "3eddbe000694405e82e283dbc0ddaf9fdf71c17f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMjoyMTo1N1rOHk5kTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMjoyMTo1N1rOHk5kTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ1Mzk2NQ==", "bodyText": "I think we should deprecate getIntervalFunction, since it shouldn't be used anymore in our  RetryImpl. Makes it more obvious where it is still used.\nComparable to getWaitDurationInOpenState in CircuitBreakerConfig", "url": "https://github.com/resilience4j/resilience4j/pull/1200#discussion_r508453965", "createdAt": "2020-10-20T12:21:57Z", "author": {"login": "RobWin"}, "path": "resilience4j-retry/src/main/java/io/github/resilience4j/retry/RetryConfig.java", "diffHunk": "@@ -90,6 +95,18 @@ public int getMaxAttempts() {\n         return intervalFunction;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eddbe000694405e82e283dbc0ddaf9fdf71c17f"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzNDEwOTQx", "url": "https://github.com/resilience4j/resilience4j/pull/1200#pullrequestreview-513410941", "createdAt": "2020-10-21T08:07:34Z", "commit": {"oid": "3eddbe000694405e82e283dbc0ddaf9fdf71c17f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwODowNzozNFrOHlfXnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwODowNzozNFrOHlfXnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA3MzMwOA==", "bodyText": "Could you please add a final test that if neither intervalBiFunction nor intervalFunction is set, that the default setting is used in the RetryConfig?", "url": "https://github.com/resilience4j/resilience4j/pull/1200#discussion_r509073308", "createdAt": "2020-10-21T08:07:34Z", "author": {"login": "RobWin"}, "path": "resilience4j-retry/src/test/java/io/github/resilience4j/retry/RetryConfigBuilderTest.java", "diffHunk": "@@ -168,6 +181,13 @@ public void shouldBuilderCreateConfigEveryTime() {\n         assertThat(config1.getMaxAttempts()).isEqualTo(5);\n     }\n \n+    @Test(expected = IllegalStateException.class)\n+    public void intervalFunctionUsedWithIntervalBiFunctionShouldFail() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eddbe000694405e82e283dbc0ddaf9fdf71c17f"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzNDE5OTI5", "url": "https://github.com/resilience4j/resilience4j/pull/1200#pullrequestreview-513419929", "createdAt": "2020-10-21T08:18:18Z", "commit": {"oid": "3eddbe000694405e82e283dbc0ddaf9fdf71c17f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwODoxODoxOFrOHlfzjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwODoyMzowNFrOHlgA1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4MDQ2MQ==", "bodyText": "I think this is unused import.", "url": "https://github.com/resilience4j/resilience4j/pull/1200#discussion_r509080461", "createdAt": "2020-10-21T08:18:18Z", "author": {"login": "dlsrb6342"}, "path": "resilience4j-retry/src/main/java/io/github/resilience4j/retry/internal/RetryImpl.java", "diffHunk": "@@ -24,19 +24,21 @@\n import io.github.resilience4j.retry.MaxRetriesExceeded;\n import io.github.resilience4j.retry.Retry;\n import io.github.resilience4j.retry.RetryConfig;\n+import io.github.resilience4j.core.IntervalBiFunction;\n import io.github.resilience4j.retry.event.*;\n import io.vavr.CheckedConsumer;\n import io.vavr.collection.HashMap;\n import io.vavr.collection.Map;\n+import io.vavr.control.Either;\n import io.vavr.control.Option;\n import io.vavr.control.Try;\n \n+import java.util.Optional;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eddbe000694405e82e283dbc0ddaf9fdf71c17f"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4Mzg2MA==", "bodyText": "config.intervalFunction isn't used anymore in RetryImpl.\nIf set only IntervalFunction, I think code should be like following\nconfig.intervalBiFunction = Optional.ofNullable(intervalBiFunction)\n                                    .orElse(IntervalBiFunction.ofIntervalFunction(intervalFunction));", "url": "https://github.com/resilience4j/resilience4j/pull/1200#discussion_r509083860", "createdAt": "2020-10-21T08:23:04Z", "author": {"login": "dlsrb6342"}, "path": "resilience4j-retry/src/main/java/io/github/resilience4j/retry/RetryConfig.java", "diffHunk": "@@ -243,14 +280,19 @@ public Builder(RetryConfig baseConfig) {\n         }\n \n         public RetryConfig build() {\n+            if (intervalFunction != null && intervalBiFunction != null) {\n+                throw new IllegalStateException(\"The intervalFunction was configured twice which could result in an\" +\n+                    \" undesired state. Please use either intervalFunction or intervalBiFunction.\");\n+            }\n             RetryConfig config = new RetryConfig();\n-            config.intervalFunction = intervalFunction;\n+            config.intervalFunction = Optional.ofNullable(intervalFunction).orElse(IntervalFunction.ofDefaults());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eddbe000694405e82e283dbc0ddaf9fdf71c17f"}, "originalPosition": 114}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1931fa65fbbe9f0eff5f1310c5615975dd7cde0b", "author": {"user": {"login": "cosminseceleanu", "name": "Cosmin Seceleanu"}}, "url": "https://github.com/resilience4j/resilience4j/commit/1931fa65fbbe9f0eff5f1310c5615975dd7cde0b", "committedDate": "2020-10-22T15:15:32Z", "message": "Issue #1043: Added validation for intervalFunction and intervalBiFunction when used together"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3eddbe000694405e82e283dbc0ddaf9fdf71c17f", "author": {"user": {"login": "cosminseceleanu", "name": "Cosmin Seceleanu"}}, "url": "https://github.com/resilience4j/resilience4j/commit/3eddbe000694405e82e283dbc0ddaf9fdf71c17f", "committedDate": "2020-10-20T12:13:20Z", "message": "Issue #1043: Added validation for intervalFunction and intervalBiFunction when used together"}, "afterCommit": {"oid": "1931fa65fbbe9f0eff5f1310c5615975dd7cde0b", "author": {"user": {"login": "cosminseceleanu", "name": "Cosmin Seceleanu"}}, "url": "https://github.com/resilience4j/resilience4j/commit/1931fa65fbbe9f0eff5f1310c5615975dd7cde0b", "committedDate": "2020-10-22T15:15:32Z", "message": "Issue #1043: Added validation for intervalFunction and intervalBiFunction when used together"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1MjUwNTYz", "url": "https://github.com/resilience4j/resilience4j/pull/1200#pullrequestreview-515250563", "createdAt": "2020-10-23T03:20:15Z", "commit": {"oid": "1931fa65fbbe9f0eff5f1310c5615975dd7cde0b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMzoyMDoxNVrOHm60mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMzoyMDoxNVrOHm60mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU3MTY3NA==", "bodyText": "Doesn't need to set IntervalBiFunction?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            this.intervalFunction = (x) -> waitDuration.toMillis();\n          \n          \n            \n                            this.intervalBiFunction = (attempt, either) -> waitDuration.toMillis();", "url": "https://github.com/resilience4j/resilience4j/pull/1200#discussion_r510571674", "createdAt": "2020-10-23T03:20:15Z", "author": {"login": "dlsrb6342"}, "path": "resilience4j-retry/src/main/java/io/github/resilience4j/retry/RetryConfig.java", "diffHunk": "@@ -150,7 +182,7 @@ public Builder(RetryConfig baseConfig) {\n                 this.intervalFunction = (x) -> waitDuration.toMillis();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1931fa65fbbe9f0eff5f1310c5615975dd7cde0b"}, "originalPosition": 101}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6752338ee9142a9ba90fee6100a0b07f3d8fcb5", "author": {"user": {"login": "cosminseceleanu", "name": "Cosmin Seceleanu"}}, "url": "https://github.com/resilience4j/resilience4j/commit/b6752338ee9142a9ba90fee6100a0b07f3d8fcb5", "committedDate": "2020-10-23T07:59:07Z", "message": "Issue #1043 create intervalBiFunction from waitDuration"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a299239e0f3e46de43d5128a524845838d7e4219", "author": {"user": {"login": "cosminseceleanu", "name": "Cosmin Seceleanu"}}, "url": "https://github.com/resilience4j/resilience4j/commit/a299239e0f3e46de43d5128a524845838d7e4219", "committedDate": "2020-10-23T07:35:49Z", "message": "Issue #1043 create intervalBiFunction from waitDuration"}, "afterCommit": {"oid": "b6752338ee9142a9ba90fee6100a0b07f3d8fcb5", "author": {"user": {"login": "cosminseceleanu", "name": "Cosmin Seceleanu"}}, "url": "https://github.com/resilience4j/resilience4j/commit/b6752338ee9142a9ba90fee6100a0b07f3d8fcb5", "committedDate": "2020-10-23T07:59:07Z", "message": "Issue #1043 create intervalBiFunction from waitDuration"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2NTY2ODY4", "url": "https://github.com/resilience4j/resilience4j/pull/1200#pullrequestreview-516566868", "createdAt": "2020-10-26T08:50:13Z", "commit": {"oid": "b6752338ee9142a9ba90fee6100a0b07f3d8fcb5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1804, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}