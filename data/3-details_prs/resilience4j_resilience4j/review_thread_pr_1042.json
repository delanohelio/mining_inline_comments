{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4NTkxNDE3", "number": 1042, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMDozNjowOVrOEIT84g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMzo1ODozM1rOEIxevQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTUwOTQ2OnYy", "diffSide": "RIGHT", "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMDozNjowOVrOGoMkmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMDozNjowOVrOGoMkmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgwMjIwMQ==", "bodyText": "circuitBreaker: Please upper case.", "url": "https://github.com/resilience4j/resilience4j/pull/1042#discussion_r444802201", "createdAt": "2020-06-24T10:36:09Z", "author": {"login": "RobWin"}, "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java", "diffHunk": "@@ -363,6 +373,28 @@ public Builder slowCallDurationThreshold(Duration slowCallDurationThreshold) {\n             return this;\n         }\n \n+        /**\n+         * Configures CircuitBreaker with a fixed wait duration which controls how long the\n+         * CircuitBreaker should stay in Half Open state, before it switches to open. This is an\n+         * Optional parameter.\n+         *\n+         * By default circuitBreaker will stay in Half Open state until", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd7596cede94556415dfbda44d5865b020c9ab25"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTUwOTkzOnYy", "diffSide": "RIGHT", "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMDozNjoxOFrOGoMk5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMDozNjoxOFrOGoMk5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgwMjI3Nw==", "bodyText": "Optional please lower case", "url": "https://github.com/resilience4j/resilience4j/pull/1042#discussion_r444802277", "createdAt": "2020-06-24T10:36:18Z", "author": {"login": "RobWin"}, "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java", "diffHunk": "@@ -363,6 +373,28 @@ public Builder slowCallDurationThreshold(Duration slowCallDurationThreshold) {\n             return this;\n         }\n \n+        /**\n+         * Configures CircuitBreaker with a fixed wait duration which controls how long the\n+         * CircuitBreaker should stay in Half Open state, before it switches to open. This is an\n+         * Optional parameter.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd7596cede94556415dfbda44d5865b020c9ab25"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTYwNTMwOnYy", "diffSide": "RIGHT", "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMTowNzoxN1rOGoNfoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMTowNzoxN1rOGoNfoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgxNzMxMg==", "bodyText": "I think waitDurationInHalfOpenState can be smaller than 1000ms like waitDurationInOpenState.\n\n  \n    \n      resilience4j/resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java\n    \n    \n        Lines 322 to 330\n      in\n      13bdd4b\n    \n    \n    \n    \n\n        \n          \n           public Builder waitDurationInOpenState(Duration waitDurationInOpenState) { \n        \n\n        \n          \n               long waitDurationInMillis = waitDurationInOpenState.toMillis(); \n        \n\n        \n          \n               if (waitDurationInMillis < 1) { \n        \n\n        \n          \n                   throw new IllegalArgumentException( \n        \n\n        \n          \n                       \"waitDurationInOpenState must be at least 1[ms]\"); \n        \n\n        \n          \n               } \n        \n\n        \n          \n               this.waitIntervalFunctionInOpenState = IntervalFunction.of(waitDurationInMillis); \n        \n\n        \n          \n               return this; \n        \n\n        \n          \n           }", "url": "https://github.com/resilience4j/resilience4j/pull/1042#discussion_r444817312", "createdAt": "2020-06-24T11:07:17Z", "author": {"login": "dlsrb6342"}, "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java", "diffHunk": "@@ -363,6 +373,28 @@ public Builder slowCallDurationThreshold(Duration slowCallDurationThreshold) {\n             return this;\n         }\n \n+        /**\n+         * Configures CircuitBreaker with a fixed wait duration which controls how long the\n+         * CircuitBreaker should stay in Half Open state, before it switches to open. This is an\n+         * Optional parameter.\n+         *\n+         * By default circuitBreaker will stay in Half Open state until\n+         * {@code minimumNumberOfCalls} is completed with either success or failure.\n+         *\n+         * @param waitDurationInHalfOpenState the wait duration which specifies how long the\n+         *                                CircuitBreaker should stay in Half Open\n+         * @return the CircuitBreakerConfig.Builder\n+         * @throws IllegalArgumentException if {@code waitDurationInOpenState.toMillis() < 1000}\n+         */\n+        public Builder waitDurationInHalfOpenState(Duration waitDurationInHalfOpenState) {\n+            if (waitDurationInHalfOpenState.toMillis() < 1000) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd7596cede94556415dfbda44d5865b020c9ab25"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjM0NzQ5OnYy", "diffSide": "RIGHT", "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMzo1ODozM1rOGo8BIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNDoyNDoyOVrOGo9KkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU3OTU1Mg==", "bodyText": "I think we should rename it to maxWaitDurationInHalfOpenState? Because the wait duration is shorter if minimumNumberOfCalls have been processed.", "url": "https://github.com/resilience4j/resilience4j/pull/1042#discussion_r445579552", "createdAt": "2020-06-25T13:58:33Z", "author": {"login": "RobWin"}, "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java", "diffHunk": "@@ -363,6 +373,28 @@ public Builder slowCallDurationThreshold(Duration slowCallDurationThreshold) {\n             return this;\n         }\n \n+        /**\n+         * Configures CircuitBreaker with a fixed wait duration which controls how long the\n+         * CircuitBreaker should stay in Half Open state, before it switches to open. This is an\n+         * optional parameter.\n+         *\n+         * By default CircuitBreaker will stay in Half Open state until\n+         * {@code minimumNumberOfCalls} is completed with either success or failure.\n+         *\n+         * @param waitDurationInHalfOpenState the wait duration which specifies how long the\n+         *                                CircuitBreaker should stay in Half Open\n+         * @return the CircuitBreakerConfig.Builder\n+         * @throws IllegalArgumentException if {@code waitDurationInOpenState.toMillis() < 1000}\n+         */\n+        public Builder waitDurationInHalfOpenState(Duration waitDurationInHalfOpenState) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39c820e2b1ba15111a3c4bb83797144161d27011"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5ODM1Mg==", "bodyText": "sure make sense.", "url": "https://github.com/resilience4j/resilience4j/pull/1042#discussion_r445598352", "createdAt": "2020-06-25T14:24:29Z", "author": {"login": "KrnSaurabh"}, "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java", "diffHunk": "@@ -363,6 +373,28 @@ public Builder slowCallDurationThreshold(Duration slowCallDurationThreshold) {\n             return this;\n         }\n \n+        /**\n+         * Configures CircuitBreaker with a fixed wait duration which controls how long the\n+         * CircuitBreaker should stay in Half Open state, before it switches to open. This is an\n+         * optional parameter.\n+         *\n+         * By default CircuitBreaker will stay in Half Open state until\n+         * {@code minimumNumberOfCalls} is completed with either success or failure.\n+         *\n+         * @param waitDurationInHalfOpenState the wait duration which specifies how long the\n+         *                                CircuitBreaker should stay in Half Open\n+         * @return the CircuitBreakerConfig.Builder\n+         * @throws IllegalArgumentException if {@code waitDurationInOpenState.toMillis() < 1000}\n+         */\n+        public Builder waitDurationInHalfOpenState(Duration waitDurationInHalfOpenState) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU3OTU1Mg=="}, "originalCommit": {"oid": "39c820e2b1ba15111a3c4bb83797144161d27011"}, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4973, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}