{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgxMTY3MTQw", "number": 1156, "title": "Phase-3 Removal vavr dependency", "bodyText": "This PR is in continuation of Removing vavr dependency Resilience4j.", "createdAt": "2020-09-07T08:08:11Z", "url": "https://github.com/resilience4j/resilience4j/pull/1156", "merged": true, "mergeCommit": {"oid": "d0e9049877101d52c6b6a35120ebddf06f06b11a"}, "closed": true, "closedAt": "2020-09-16T06:31:11Z", "author": {"login": "KrnSaurabh"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdGeX-NgH2gAyNDgxMTY3MTQwOjk5YTQxZDFmMTU1MmRlMjg4MzAyNzdkNmM2NWYyYmZmZjM4YTQ0MjI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdJWbwdgFqTQ4OTMxMTUxMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "99a41d1f1552de28830277d6c65f2bfff38a4422", "author": {"user": null}, "url": "https://github.com/resilience4j/resilience4j/commit/99a41d1f1552de28830277d6c65f2bfff38a4422", "committedDate": "2020-09-07T08:04:07Z", "message": "Phase-3 Removal vavr dependency"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzNjYyODEw", "url": "https://github.com/resilience4j/resilience4j/pull/1156#pullrequestreview-483662810", "createdAt": "2020-09-07T16:43:07Z", "commit": {"oid": "99a41d1f1552de28830277d6c65f2bfff38a4422"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNjo0MzowOFrOHOEsRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNzo0NTo1NVrOHOFk3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUxODk4Mg==", "bodyText": "What is the plan for a backward-compatibility?\nEg. we can consider replacement by custom io.github.resilience4j.CheckedRunnable /CheckedFunction* implementations when java.util.function.* isn't applicable...", "url": "https://github.com/resilience4j/resilience4j/pull/1156#discussion_r484518982", "createdAt": "2020-09-07T16:43:08Z", "author": {"login": "hexmind"}, "path": "resilience4j-all/src/main/java/io/github/resilience4j/decorators/Decorators.java", "diffHunk": "@@ -67,18 +58,6 @@ static DecorateRunnable ofRunnable(Runnable runnable) {\n         return new DecorateCallable<>(callable);\n     }\n \n-    static <T> DecorateCheckedSupplier<T> ofCheckedSupplier(CheckedFunction0<T> supplier) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99a41d1f1552de28830277d6c65f2bfff38a4422"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUyMjg2MQ==", "bodyText": "What is a reason for copying anonymous list created a moment ago?", "url": "https://github.com/resilience4j/resilience4j/pull/1156#discussion_r484522861", "createdAt": "2020-09-07T16:57:45Z", "author": {"login": "hexmind"}, "path": "resilience4j-circularbuffer/src/main/java/io/github/resilience4j/circularbuffer/ConcurrentCircularFifoBuffer.java", "diffHunk": "@@ -74,7 +73,7 @@ public boolean isFull() {\n     @SuppressWarnings(\"unchecked\")\n     public List<T> toList() {\n         T[] elementsArray = (T[]) queue.toArray();\n-        return List.ofAll(Arrays.asList(elementsArray));\n+        return List.copyOf(Arrays.asList(elementsArray));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99a41d1f1552de28830277d6c65f2bfff38a4422"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUyNDMwMw==", "bodyText": "It is wrong because Interface for immutable sequential data structures isn't the same what Set is. Only names are similar ;)", "url": "https://github.com/resilience4j/resilience4j/pull/1156#discussion_r484524303", "createdAt": "2020-09-07T17:03:33Z", "author": {"login": "hexmind"}, "path": "resilience4j-consumer/src/main/java/io/github/resilience4j/consumer/EventConsumerRegistry.java", "diffHunk": "@@ -44,5 +45,5 @@\n      *\n      * @return all EventConsumer instances\n      */\n-    Seq<CircularEventConsumer<T>> getAllEventConsumer();\n+    Set<CircularEventConsumer<T>> getAllEventConsumer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99a41d1f1552de28830277d6c65f2bfff38a4422"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUyNTcxMg==", "bodyText": "https://www.logicbig.com/how-to/code-snippets/jcode-java-8-streams-longstream-iterate.html", "url": "https://github.com/resilience4j/resilience4j/pull/1156#discussion_r484525712", "createdAt": "2020-09-07T17:09:33Z", "author": {"login": "hexmind"}, "path": "resilience4j-core/src/main/java/io/github/resilience4j/core/IntervalFunction.java", "diffHunk": "@@ -35,7 +33,15 @@ static IntervalFunction of(long intervalMillis, Function<Long, Long> backoffFunc\n \n         return (attempt) -> {\n             checkAttempt(attempt);\n-            return Stream.iterate(intervalMillis, backoffFunction).get(attempt - 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99a41d1f1552de28830277d6c65f2bfff38a4422"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUyODkxNg==", "bodyText": "Could you rename this method?", "url": "https://github.com/resilience4j/resilience4j/pull/1156#discussion_r484528916", "createdAt": "2020-09-07T17:23:42Z", "author": {"login": "hexmind"}, "path": "resilience4j-ratpack/src/main/java/io/github/resilience4j/ratpack/bulkhead/monitoring/endpoint/BulkheadChain.java", "diffHunk": "@@ -45,6 +45,10 @@ public BulkheadChain(EventConsumerRegistry<BulkheadEvent> eventConsumerRegistry)\n         this.eventConsumerRegistry = eventConsumerRegistry;\n     }\n \n+    private static Flux<BulkheadEvent> apply(CircularEventConsumer<BulkheadEvent> bulkheadEventCircularEventConsumer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99a41d1f1552de28830277d6c65f2bfff38a4422"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUzMDQ0NA==", "bodyText": "maybe .flatMap(CircularEventConsumer::streamBufferedEvents)?\nI am not sure if CircularEventConsumer::fluxBufferedEvents) would be also possible (dependencies)...", "url": "https://github.com/resilience4j/resilience4j/pull/1156#discussion_r484530444", "createdAt": "2020-09-07T17:31:03Z", "author": {"login": "hexmind"}, "path": "resilience4j-ratpack/src/main/java/io/github/resilience4j/ratpack/circuitbreaker/monitoring/endpoint/CircuitBreakerChain.java", "diffHunk": "@@ -108,10 +107,13 @@ public void execute(Chain chain) throws Exception {\n                     CircuitBreakerEventsEndpointResponse response = new CircuitBreakerEventsEndpointResponse(\n                         eventConsumerRegistry\n                             .getAllEventConsumer()\n-                            .flatMap(CircularEventConsumer::getBufferedEvents)\n+                            .stream()\n+                            .flatMap(circuitBreakerEventCircularEventConsumer -> circuitBreakerEventCircularEventConsumer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99a41d1f1552de28830277d6c65f2bfff38a4422"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUzMTYzOA==", "bodyText": "remove qualified name", "url": "https://github.com/resilience4j/resilience4j/pull/1156#discussion_r484531638", "createdAt": "2020-09-07T17:37:14Z", "author": {"login": "hexmind"}, "path": "resilience4j-spring-boot2/src/main/java/io/github/resilience4j/bulkhead/monitoring/endpoint/BulkheadEventsEndpoint.java", "diffHunk": "@@ -40,33 +42,34 @@ public BulkheadEventsEndpoint(EventConsumerRegistry<BulkheadEvent> eventConsumer\n \n     @ReadOperation\n     public BulkheadEventsEndpointResponse getAllBulkheadEvents() {\n-        java.util.List<BulkheadEventDTO> response = eventConsumerRegistry.getAllEventConsumer()\n-            .flatMap(CircularEventConsumer::getBufferedEvents)\n+        List<BulkheadEventDTO> response = eventConsumerRegistry.getAllEventConsumer().stream()\n+            .flatMap(bulkheadEventCircularEventConsumer -> bulkheadEventCircularEventConsumer\n+                .getBufferedEvents()\n+                .stream())\n             .sorted(Comparator.comparing(BulkheadEvent::getCreationTime))\n             .map(BulkheadEventDTOFactory::createBulkheadEventDTO)\n-            .toJavaList();\n-\n+            .collect(Collectors.toUnmodifiableList());\n         return new BulkheadEventsEndpointResponse(response);\n     }\n \n     @ReadOperation\n     public BulkheadEventsEndpointResponse getEventsFilteredByBulkheadName(\n         @Selector String bulkheadName) {\n-        java.util.List<BulkheadEventDTO> response = getBulkheadEvent(bulkheadName)\n+        java.util.List<BulkheadEventDTO> response = getBulkheadEvent(bulkheadName).stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99a41d1f1552de28830277d6c65f2bfff38a4422"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUzMTc5Ng==", "bodyText": "it looks that only here is toUnmodifiableList called", "url": "https://github.com/resilience4j/resilience4j/pull/1156#discussion_r484531796", "createdAt": "2020-09-07T17:37:56Z", "author": {"login": "hexmind"}, "path": "resilience4j-spring-boot2/src/main/java/io/github/resilience4j/bulkhead/monitoring/endpoint/BulkheadEventsEndpoint.java", "diffHunk": "@@ -40,33 +42,34 @@ public BulkheadEventsEndpoint(EventConsumerRegistry<BulkheadEvent> eventConsumer\n \n     @ReadOperation\n     public BulkheadEventsEndpointResponse getAllBulkheadEvents() {\n-        java.util.List<BulkheadEventDTO> response = eventConsumerRegistry.getAllEventConsumer()\n-            .flatMap(CircularEventConsumer::getBufferedEvents)\n+        List<BulkheadEventDTO> response = eventConsumerRegistry.getAllEventConsumer().stream()\n+            .flatMap(bulkheadEventCircularEventConsumer -> bulkheadEventCircularEventConsumer\n+                .getBufferedEvents()\n+                .stream())\n             .sorted(Comparator.comparing(BulkheadEvent::getCreationTime))\n             .map(BulkheadEventDTOFactory::createBulkheadEventDTO)\n-            .toJavaList();\n-\n+            .collect(Collectors.toUnmodifiableList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99a41d1f1552de28830277d6c65f2bfff38a4422"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUzMjI1Mg==", "bodyText": "\\n.collect", "url": "https://github.com/resilience4j/resilience4j/pull/1156#discussion_r484532252", "createdAt": "2020-09-07T17:40:18Z", "author": {"login": "hexmind"}, "path": "resilience4j-spring-boot2/src/main/java/io/github/resilience4j/ratelimiter/monitoring/endpoint/RateLimiterEventsEndpoint.java", "diffHunk": "@@ -39,37 +41,40 @@ public RateLimiterEventsEndpoint(\n \n     @ReadOperation\n     public RateLimiterEventsEndpointResponse getAllRateLimiterEvents() {\n-        return new RateLimiterEventsEndpointResponse(eventsConsumerRegistry.getAllEventConsumer()\n-            .flatMap(CircularEventConsumer::getBufferedEvents)\n+        return new RateLimiterEventsEndpointResponse(eventsConsumerRegistry.getAllEventConsumer().stream()\n+            .flatMap(rateLimiterEventCircularEventConsumer ->\n+                rateLimiterEventCircularEventConsumer.getBufferedEvents().stream())\n             .sorted(Comparator.comparing(RateLimiterEvent::getCreationTime))\n-            .map(RateLimiterEventDTO::createRateLimiterEventDTO).toJavaList());\n+            .map(RateLimiterEventDTO::createRateLimiterEventDTO)\n+            .collect(Collectors.toList()));\n     }\n \n     @ReadOperation\n     public RateLimiterEventsEndpointResponse getEventsFilteredByRateLimiterName(\n         @Selector String name) {\n-        return new RateLimiterEventsEndpointResponse(getRateLimiterEvents(name)\n-            .map(RateLimiterEventDTO::createRateLimiterEventDTO).toJavaList());\n+        return new RateLimiterEventsEndpointResponse(getRateLimiterEvents(name).stream()\n+            .map(RateLimiterEventDTO::createRateLimiterEventDTO).collect(Collectors.toList()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99a41d1f1552de28830277d6c65f2bfff38a4422"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUzMzQ2OQ==", "bodyText": "Maybe we could keep removed tests and, add Vavr as test-only dependency and use VavrDecorators as a glue?\nWe use Vavr eg. Try class a lot in tests...", "url": "https://github.com/resilience4j/resilience4j/pull/1156#discussion_r484533469", "createdAt": "2020-09-07T17:45:55Z", "author": {"login": "hexmind"}, "path": "resilience4j-vavr/src/main/java/io/github/resilience4j/decorators/VavrDecorators.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ *\n+ *  Copyright 2020: KrnSaurabh\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ *\n+ */\n+package io.github.resilience4j.decorators;\n+\n+import io.github.resilience4j.bulkhead.Bulkhead;\n+import io.github.resilience4j.bulkhead.VavrBulkhead;\n+import io.github.resilience4j.cache.Cache;\n+import io.github.resilience4j.cache.VavrCache;\n+import io.github.resilience4j.circuitbreaker.CircuitBreaker;\n+import io.github.resilience4j.circuitbreaker.VavrCircuitBreaker;\n+import io.github.resilience4j.core.CheckFunctionUtils;\n+import io.github.resilience4j.ratelimiter.RateLimiter;\n+import io.github.resilience4j.ratelimiter.VavrRateLimiter;\n+import io.github.resilience4j.retry.Retry;\n+import io.github.resilience4j.retry.VavrRetry;\n+import io.vavr.CheckedFunction0;\n+import io.vavr.CheckedFunction1;\n+import io.vavr.CheckedFunction2;\n+import io.vavr.CheckedRunnable;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+\n+public interface VavrDecorators {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99a41d1f1552de28830277d6c65f2bfff38a4422"}, "originalPosition": 41}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af171659bf52029f26a14e9d52559b92c298d3bf", "author": {"user": null}, "url": "https://github.com/resilience4j/resilience4j/commit/af171659bf52029f26a14e9d52559b92c298d3bf", "committedDate": "2020-09-09T08:29:15Z", "message": "Added getBufferedEventsStream method and addresses few review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf68f5101142f37f1aae9e4fb4197fd9e9b1c436", "author": {"user": null}, "url": "https://github.com/resilience4j/resilience4j/commit/bf68f5101142f37f1aae9e4fb4197fd9e9b1c436", "committedDate": "2020-09-10T18:21:27Z", "message": "Changed java.util.Set to List to replace vavr Seq"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1cdff0bd63820339b81830e2d4e712a810f8f110", "author": {"user": null}, "url": "https://github.com/resilience4j/resilience4j/commit/1cdff0bd63820339b81830e2d4e712a810f8f110", "committedDate": "2020-09-15T12:10:51Z", "message": "Replaced Collectors.toUnmodifiableList to Collectors.toList"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5MzExNTEx", "url": "https://github.com/resilience4j/resilience4j/pull/1156#pullrequestreview-489311511", "createdAt": "2020-09-16T06:30:47Z", "commit": {"oid": "1cdff0bd63820339b81830e2d4e712a810f8f110"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1786, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}