{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1OTI0NjY0", "number": 1216, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMzozNjo1N1rOEvUU7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNzoxMToyOVrOExxdsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MDUxNTY3OnYy", "diffSide": "RIGHT", "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMzozNjo1N1rOHkOuRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMzozODoyN1rOHkOycw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc1MjAwNg==", "bodyText": "If I set config like below, doesn't it throw exception?\n    CircuitBreakerConfig.custom()\n            .waitDurationInOpenState(Duration.ofMillis(3333))\n            .build();", "url": "https://github.com/resilience4j/resilience4j/pull/1216#discussion_r507752006", "createdAt": "2020-10-19T13:36:57Z", "author": {"login": "dlsrb6342"}, "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java", "diffHunk": "@@ -749,5 +760,13 @@ public CircuitBreakerConfig build() {\n                 .orElseGet(() -> recordExceptionPredicate != null ? recordExceptionPredicate\n                     : DEFAULT_RECORD_EXCEPTION_PREDICATE);\n         }\n+\n+        private IntervalFunction validateWaitIntervalFunctionInOpenState() {\n+            if (waitIntervalFunctionInOpenStateAlreadySet) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9179f54a37fc8d61ddbfb51b49b0226c740c0c7"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc1MzA3NQ==", "bodyText": "give me time i will fix it today", "url": "https://github.com/resilience4j/resilience4j/pull/1216#discussion_r507753075", "createdAt": "2020-10-19T13:38:27Z", "author": {"login": "likhoman"}, "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java", "diffHunk": "@@ -749,5 +760,13 @@ public CircuitBreakerConfig build() {\n                 .orElseGet(() -> recordExceptionPredicate != null ? recordExceptionPredicate\n                     : DEFAULT_RECORD_EXCEPTION_PREDICATE);\n         }\n+\n+        private IntervalFunction validateWaitIntervalFunctionInOpenState() {\n+            if (waitIntervalFunctionInOpenStateAlreadySet) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc1MjAwNg=="}, "originalCommit": {"oid": "c9179f54a37fc8d61ddbfb51b49b0226c740c0c7"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MDg0MTg3OnYy", "diffSide": "RIGHT", "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNDozNTo1NVrOHkR7Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNDozNTo1NVrOHkR7Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgwNDUxNQ==", "bodyText": "This ATTENTION!!! is too strong :)\nI would remove it or replace with more formal \"Be aware that ...\"", "url": "https://github.com/resilience4j/resilience4j/pull/1216#discussion_r507804515", "createdAt": "2020-10-19T14:35:55Z", "author": {"login": "hexmind"}, "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java", "diffHunk": "@@ -342,6 +343,10 @@ public Builder writableStackTraceEnabled(boolean writableStackTraceEnabled) {\n          * Configures an interval function with a fixed wait duration which controls how long the\n          * CircuitBreaker should stay open, before it switches to half open. Default value is 60\n          * seconds.\n+         * <p>\n+         * <b>ATTENTION!!!</b> Do not use with {@link #waitIntervalFunctionInOpenState(IntervalFunction)}!", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9179f54a37fc8d61ddbfb51b49b0226c740c0c7"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MzYyOTA3OnYy", "diffSide": "RIGHT", "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNjoxNzo1NVrOHksMpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNjoxNzo1NVrOHksMpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIzNDkxNg==", "bodyText": "Could you please change the message to:\n\"The waitIntervalFunction was configured twice which could result in an undesired state. Please use either waitIntervalFunctionInOpenState or  waitDurationInOpenState.\"", "url": "https://github.com/resilience4j/resilience4j/pull/1216#discussion_r508234916", "createdAt": "2020-10-20T06:17:55Z", "author": {"login": "RobWin"}, "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java", "diffHunk": "@@ -749,5 +761,13 @@ public CircuitBreakerConfig build() {\n                 .orElseGet(() -> recordExceptionPredicate != null ? recordExceptionPredicate\n                     : DEFAULT_RECORD_EXCEPTION_PREDICATE);\n         }\n+\n+        private IntervalFunction validateWaitIntervalFunctionInOpenState() {\n+            if (setWaitInOpenStateCounter > 1) {\n+                throw new IllegalStateException(\"You have already the durationInOpenState value from the waitDurationInOpenState method.\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d861f8c3882dc027e69fb4c0c5e60c1b6ce1fcff"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTA2MTE2OnYy", "diffSide": "RIGHT", "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java", "isResolved": true, "comments": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwODoyODowM1rOHlgO4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMzoxNjozM1rOHmhPDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4NzQ1OQ==", "bodyText": "How about use Duration waitDurationInOpenState field and check like if (waitDurationInOpenState != null && waitIntervalFunctionInOpenState != null) at build()?", "url": "https://github.com/resilience4j/resilience4j/pull/1216#discussion_r509087459", "createdAt": "2020-10-21T08:28:03Z", "author": {"login": "dlsrb6342"}, "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java", "diffHunk": "@@ -251,6 +251,7 @@ public String toString() {\n             .ofSeconds(DEFAULT_SLOW_CALL_DURATION_THRESHOLD);\n         private Duration maxWaitDurationInHalfOpenState = Duration\n             .ofSeconds(DEFAULT_WAIT_DURATION_IN_HALF_OPEN_STATE);\n+        private byte setWaitInOpenStateCounter = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "948b884e5b6f2164be41d3848a90762caa33fa44"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTExOTE4Ng==", "bodyText": "Maybe i  can move the initialization  of waitIntervalFunctionInOpenState in builder() and rename validateWaitIntervalFunctionInOpenState to createWaitIntervalFunctionInOpenState?\n private IntervalFunction createWaitIntervalFunctionInOpenState() {\n            if (waitDurationInOpenState != null && waitIntervalFunctionInOpenState != null ) {\n                throw new IllegalStateException(\"The waitIntervalFunction was configured twice which could result in an undesired state. \" +\n                    \"Please use either waitIntervalFunctionInOpenState or waitDurationInOpenState.\");\n            }\n            return waitDurationInOpenState != null ? IntervalFunction.of(waitDurationInOpenState.toMillis()) : waitIntervalFunctionInOpenState;\n        }", "url": "https://github.com/resilience4j/resilience4j/pull/1216#discussion_r509119186", "createdAt": "2020-10-21T09:13:43Z", "author": {"login": "likhoman"}, "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java", "diffHunk": "@@ -251,6 +251,7 @@ public String toString() {\n             .ofSeconds(DEFAULT_SLOW_CALL_DURATION_THRESHOLD);\n         private Duration maxWaitDurationInHalfOpenState = Duration\n             .ofSeconds(DEFAULT_WAIT_DURATION_IN_HALF_OPEN_STATE);\n+        private byte setWaitInOpenStateCounter = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4NzQ1OQ=="}, "originalCommit": {"oid": "948b884e5b6f2164be41d3848a90762caa33fa44"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEyNTM3NQ==", "bodyText": "Yes, seems fine to me.", "url": "https://github.com/resilience4j/resilience4j/pull/1216#discussion_r509125375", "createdAt": "2020-10-21T09:22:23Z", "author": {"login": "RobWin"}, "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java", "diffHunk": "@@ -251,6 +251,7 @@ public String toString() {\n             .ofSeconds(DEFAULT_SLOW_CALL_DURATION_THRESHOLD);\n         private Duration maxWaitDurationInHalfOpenState = Duration\n             .ofSeconds(DEFAULT_WAIT_DURATION_IN_HALF_OPEN_STATE);\n+        private byte setWaitInOpenStateCounter = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4NzQ1OQ=="}, "originalCommit": {"oid": "948b884e5b6f2164be41d3848a90762caa33fa44"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEyNTg4Ng==", "bodyText": "Yes exactly.", "url": "https://github.com/resilience4j/resilience4j/pull/1216#discussion_r509125886", "createdAt": "2020-10-21T09:23:09Z", "author": {"login": "dlsrb6342"}, "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java", "diffHunk": "@@ -251,6 +251,7 @@ public String toString() {\n             .ofSeconds(DEFAULT_SLOW_CALL_DURATION_THRESHOLD);\n         private Duration maxWaitDurationInHalfOpenState = Duration\n             .ofSeconds(DEFAULT_WAIT_DURATION_IN_HALF_OPEN_STATE);\n+        private byte setWaitInOpenStateCounter = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4NzQ1OQ=="}, "originalCommit": {"oid": "948b884e5b6f2164be41d3848a90762caa33fa44"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE0MTYzNQ==", "bodyText": "Sorry, i have to clarify one more solution\nI want use  private long waitDurationInMillis = -1L; instead of Duration waitDurationInOpenState.\nWhat would will not calculate waitDurationInOpenState.toMillis() twice.\nBecause in public Builder waitDurationInOpenState(Duration waitDurationInOpenState)  need validation waitDurationInMillis < 1 what would rise throw developer can saw where method throw exception  in stack trace.\nprivate IntervalFunction createWaitIntervalFunctionInOpenState() {\n            final boolean wasItSetToWaitDurationInMillis = waitDurationInMillis > 0;\n            if (wasItSetToWaitDurationInMillis && waitIntervalFunctionInOpenState != null ) {\n                throw new IllegalStateException(\"The waitIntervalFunction was configured twice which could result in an undesired state. \" +\n                    \"Please use either waitIntervalFunctionInOpenState or waitDurationInOpenState.\");\n            }\n            return wasItSetToWaitDurationInMillis ? IntervalFunction.of(waitDurationInMillis) : waitIntervalFunctionInOpenState;\n        }", "url": "https://github.com/resilience4j/resilience4j/pull/1216#discussion_r509141635", "createdAt": "2020-10-21T09:46:58Z", "author": {"login": "likhoman"}, "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java", "diffHunk": "@@ -251,6 +251,7 @@ public String toString() {\n             .ofSeconds(DEFAULT_SLOW_CALL_DURATION_THRESHOLD);\n         private Duration maxWaitDurationInHalfOpenState = Duration\n             .ofSeconds(DEFAULT_WAIT_DURATION_IN_HALF_OPEN_STATE);\n+        private byte setWaitInOpenStateCounter = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4NzQ1OQ=="}, "originalCommit": {"oid": "948b884e5b6f2164be41d3848a90762caa33fa44"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE1NTM2MA==", "bodyText": "I think this optimization is not needed. Shouldn't be performance critical.\nYour prev. snippet is fine for me", "url": "https://github.com/resilience4j/resilience4j/pull/1216#discussion_r509155360", "createdAt": "2020-10-21T10:08:43Z", "author": {"login": "RobWin"}, "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java", "diffHunk": "@@ -251,6 +251,7 @@ public String toString() {\n             .ofSeconds(DEFAULT_SLOW_CALL_DURATION_THRESHOLD);\n         private Duration maxWaitDurationInHalfOpenState = Duration\n             .ofSeconds(DEFAULT_WAIT_DURATION_IN_HALF_OPEN_STATE);\n+        private byte setWaitInOpenStateCounter = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4NzQ1OQ=="}, "originalCommit": {"oid": "948b884e5b6f2164be41d3848a90762caa33fa44"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTIxMzQ4Ng==", "bodyText": "Agree with Robert.", "url": "https://github.com/resilience4j/resilience4j/pull/1216#discussion_r509213486", "createdAt": "2020-10-21T11:51:34Z", "author": {"login": "dlsrb6342"}, "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java", "diffHunk": "@@ -251,6 +251,7 @@ public String toString() {\n             .ofSeconds(DEFAULT_SLOW_CALL_DURATION_THRESHOLD);\n         private Duration maxWaitDurationInHalfOpenState = Duration\n             .ofSeconds(DEFAULT_WAIT_DURATION_IN_HALF_OPEN_STATE);\n+        private byte setWaitInOpenStateCounter = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4NzQ1OQ=="}, "originalCommit": {"oid": "948b884e5b6f2164be41d3848a90762caa33fa44"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI4NDA2Nw==", "bodyText": "one more clarification, again) sorry\nCould remind you that waitIntervalFunctionInOpenState has default value.\nAnd if we use if (wasItSetToWaitDurationInMillis && waitIntervalFunctionInOpenState != null )  we should remove default value for waitIntervalFunctionInOpenState.\nMy attempt\n        private IntervalFunction createWaitIntervalFunctionInOpenState() {\n            if (waitDurationInOpenState != null && waitIntervalFunctionInOpenState != null) {\n                throw new IllegalStateException(\"The waitIntervalFunction was configured twice which could result in an undesired state. \" +\n                    \"Please use either waitIntervalFunctionInOpenState or waitDurationInOpenState.\");\n            }\n\n            if (waitDurationInOpenState != null) {\n                return IntervalFunction.of(waitDurationInOpenState.toMillis());\n            }\n\n            return waitIntervalFunctionInOpenState == null\n                ? IntervalFunction.of(Duration.ofSeconds(DEFAULT_SLOW_CALL_DURATION_THRESHOLD))\n                : waitIntervalFunctionInOpenState;\n        }\nBut, when we use CircuitBreakerConfig.from(CircuitBreakerConfig config)\n        CircuitBreakerConfig baseConfig = custom()\n            .waitDurationInOpenState(Duration.ofSeconds(100))\n            .slidingWindowSize(1000)\n            .permittedNumberOfCallsInHalfOpenState(100)\n            .writableStackTraceEnabled(false)\n            .automaticTransitionFromOpenToHalfOpenEnabled(true)\n            .failureRateThreshold(20f).build();\n\n        CircuitBreakerConfig extendedConfig = from(baseConfig)\n            .waitDurationInOpenState(Duration.ofSeconds(20))\n            .build();\nWe get Fail. If we remove default value for waitIntervalFunctionInOpenState we can loose backwards-compatibility.\nI could try something else for the proposed solution... What you think?", "url": "https://github.com/resilience4j/resilience4j/pull/1216#discussion_r509284067", "createdAt": "2020-10-21T13:30:49Z", "author": {"login": "likhoman"}, "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java", "diffHunk": "@@ -251,6 +251,7 @@ public String toString() {\n             .ofSeconds(DEFAULT_SLOW_CALL_DURATION_THRESHOLD);\n         private Duration maxWaitDurationInHalfOpenState = Duration\n             .ofSeconds(DEFAULT_WAIT_DURATION_IN_HALF_OPEN_STATE);\n+        private byte setWaitInOpenStateCounter = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4NzQ1OQ=="}, "originalCommit": {"oid": "948b884e5b6f2164be41d3848a90762caa33fa44"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMzOTg3Ng==", "bodyText": "Yes, we must not loose  backwards-compatibility", "url": "https://github.com/resilience4j/resilience4j/pull/1216#discussion_r509339876", "createdAt": "2020-10-21T14:32:25Z", "author": {"login": "RobWin"}, "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java", "diffHunk": "@@ -251,6 +251,7 @@ public String toString() {\n             .ofSeconds(DEFAULT_SLOW_CALL_DURATION_THRESHOLD);\n         private Duration maxWaitDurationInHalfOpenState = Duration\n             .ofSeconds(DEFAULT_WAIT_DURATION_IN_HALF_OPEN_STATE);\n+        private byte setWaitInOpenStateCounter = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4NzQ1OQ=="}, "originalCommit": {"oid": "948b884e5b6f2164be41d3848a90762caa33fa44"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk4NzA3Mg==", "bodyText": "Maybe we just go back and use an int counter. If the counter == 2, then the user has used both methods.", "url": "https://github.com/resilience4j/resilience4j/pull/1216#discussion_r509987072", "createdAt": "2020-10-22T08:46:26Z", "author": {"login": "RobWin"}, "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java", "diffHunk": "@@ -251,6 +251,7 @@ public String toString() {\n             .ofSeconds(DEFAULT_SLOW_CALL_DURATION_THRESHOLD);\n         private Duration maxWaitDurationInHalfOpenState = Duration\n             .ofSeconds(DEFAULT_WAIT_DURATION_IN_HALF_OPEN_STATE);\n+        private byte setWaitInOpenStateCounter = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4NzQ1OQ=="}, "originalCommit": {"oid": "948b884e5b6f2164be41d3848a90762caa33fa44"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk5NzUzNw==", "bodyText": "How about two boolean values like isWaitDurationInOpenStateSet and isWaitIntervalFunctionInOpenStateSet?", "url": "https://github.com/resilience4j/resilience4j/pull/1216#discussion_r509997537", "createdAt": "2020-10-22T09:01:30Z", "author": {"login": "dlsrb6342"}, "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java", "diffHunk": "@@ -251,6 +251,7 @@ public String toString() {\n             .ofSeconds(DEFAULT_SLOW_CALL_DURATION_THRESHOLD);\n         private Duration maxWaitDurationInHalfOpenState = Duration\n             .ofSeconds(DEFAULT_WAIT_DURATION_IN_HALF_OPEN_STATE);\n+        private byte setWaitInOpenStateCounter = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4NzQ1OQ=="}, "originalCommit": {"oid": "948b884e5b6f2164be41d3848a90762caa33fa44"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAwNDkxMg==", "bodyText": "Counter seems simpler to me :)", "url": "https://github.com/resilience4j/resilience4j/pull/1216#discussion_r510004912", "createdAt": "2020-10-22T09:12:26Z", "author": {"login": "RobWin"}, "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java", "diffHunk": "@@ -251,6 +251,7 @@ public String toString() {\n             .ofSeconds(DEFAULT_SLOW_CALL_DURATION_THRESHOLD);\n         private Duration maxWaitDurationInHalfOpenState = Duration\n             .ofSeconds(DEFAULT_WAIT_DURATION_IN_HALF_OPEN_STATE);\n+        private byte setWaitInOpenStateCounter = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4NzQ1OQ=="}, "originalCommit": {"oid": "948b884e5b6f2164be41d3848a90762caa33fa44"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAwNzEzNg==", "bodyText": "Maybe we add a waitIntervalBiFunction in the future as well, comparable to Retry.", "url": "https://github.com/resilience4j/resilience4j/pull/1216#discussion_r510007136", "createdAt": "2020-10-22T09:15:47Z", "author": {"login": "RobWin"}, "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java", "diffHunk": "@@ -251,6 +251,7 @@ public String toString() {\n             .ofSeconds(DEFAULT_SLOW_CALL_DURATION_THRESHOLD);\n         private Duration maxWaitDurationInHalfOpenState = Duration\n             .ofSeconds(DEFAULT_WAIT_DURATION_IN_HALF_OPEN_STATE);\n+        private byte setWaitInOpenStateCounter = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4NzQ1OQ=="}, "originalCommit": {"oid": "948b884e5b6f2164be41d3848a90762caa33fa44"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAwNzE5Nw==", "bodyText": "I just worried about set same value twice like following. This is not a normal case.\nCircuitBreakerConfig.custom()\n    .waitDurationInOpenState(Duration.ofSeconds(100))\n    .waitDurationInOpenState(Duration.ofSeconds(200))\n    .build()\n\nIf it is ok, counter is also fine to me.", "url": "https://github.com/resilience4j/resilience4j/pull/1216#discussion_r510007197", "createdAt": "2020-10-22T09:15:53Z", "author": {"login": "dlsrb6342"}, "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java", "diffHunk": "@@ -251,6 +251,7 @@ public String toString() {\n             .ofSeconds(DEFAULT_SLOW_CALL_DURATION_THRESHOLD);\n         private Duration maxWaitDurationInHalfOpenState = Duration\n             .ofSeconds(DEFAULT_WAIT_DURATION_IN_HALF_OPEN_STATE);\n+        private byte setWaitInOpenStateCounter = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4NzQ1OQ=="}, "originalCommit": {"oid": "948b884e5b6f2164be41d3848a90762caa33fa44"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAwODEwMw==", "bodyText": "Ok, I think we should not check this, because this could be done on any config property. If he overrides the same property, it's the fault of the user ;)\nOtherwise it would mean that we have to add a check for this on any config property.", "url": "https://github.com/resilience4j/resilience4j/pull/1216#discussion_r510008103", "createdAt": "2020-10-22T09:17:08Z", "author": {"login": "RobWin"}, "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java", "diffHunk": "@@ -251,6 +251,7 @@ public String toString() {\n             .ofSeconds(DEFAULT_SLOW_CALL_DURATION_THRESHOLD);\n         private Duration maxWaitDurationInHalfOpenState = Duration\n             .ofSeconds(DEFAULT_WAIT_DURATION_IN_HALF_OPEN_STATE);\n+        private byte setWaitInOpenStateCounter = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4NzQ1OQ=="}, "originalCommit": {"oid": "948b884e5b6f2164be41d3848a90762caa33fa44"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDEzNTY0Ng==", "bodyText": "Please could you consider combining the two solutions together:\n  private IntervalFunction createWaitIntervalFunctionInOpenState() {\n            if (setWaitInOpenStateCounter > 1) {\n                if (waitDurationInOpenState != null && waitIntervalFunctionInOpenState != null) {\n                    throw new IllegalStateException(\"The waitIntervalFunction was configured twice which could result in an undesired state. \" +\n                        \"Please use either waitIntervalFunctionInOpenState or waitDurationInOpenState.\");\n                }\n            }\n            if (waitDurationInOpenState != null) {\n                return IntervalFunction.of(waitDurationInOpenState.toMillis());\n            }\n\n            return waitIntervalFunctionInOpenState == null\n                ? IntervalFunction.of(Duration.ofSeconds(DEFAULT_SLOW_CALL_DURATION_THRESHOLD))\n                : waitIntervalFunctionInOpenState;\n        }\nFirst setWaitInOpenStateCounter > 1 avoid overridden Second waitDurationInOpenState != null && waitIntervalFunctionInOpenState != null avoid case which described @dlsrb6342", "url": "https://github.com/resilience4j/resilience4j/pull/1216#discussion_r510135646", "createdAt": "2020-10-22T12:53:12Z", "author": {"login": "likhoman"}, "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java", "diffHunk": "@@ -251,6 +251,7 @@ public String toString() {\n             .ofSeconds(DEFAULT_SLOW_CALL_DURATION_THRESHOLD);\n         private Duration maxWaitDurationInHalfOpenState = Duration\n             .ofSeconds(DEFAULT_WAIT_DURATION_IN_HALF_OPEN_STATE);\n+        private byte setWaitInOpenStateCounter = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4NzQ1OQ=="}, "originalCommit": {"oid": "948b884e5b6f2164be41d3848a90762caa33fa44"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE0MjY1NA==", "bodyText": "oh, my bad(", "url": "https://github.com/resilience4j/resilience4j/pull/1216#discussion_r510142654", "createdAt": "2020-10-22T13:02:40Z", "author": {"login": "likhoman"}, "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java", "diffHunk": "@@ -251,6 +251,7 @@ public String toString() {\n             .ofSeconds(DEFAULT_SLOW_CALL_DURATION_THRESHOLD);\n         private Duration maxWaitDurationInHalfOpenState = Duration\n             .ofSeconds(DEFAULT_WAIT_DURATION_IN_HALF_OPEN_STATE);\n+        private byte setWaitInOpenStateCounter = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4NzQ1OQ=="}, "originalCommit": {"oid": "948b884e5b6f2164be41d3848a90762caa33fa44"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE0NDE3Mg==", "bodyText": "Let's keep it simple.\nwaitIntervalFunctionInOpenState has a default value.\nIt can be overwritten, but we check a counter and if counter > 1, then throw an exception in the build method.\nWe don't have to handle @dlsrb6342 case.", "url": "https://github.com/resilience4j/resilience4j/pull/1216#discussion_r510144172", "createdAt": "2020-10-22T13:04:56Z", "author": {"login": "RobWin"}, "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java", "diffHunk": "@@ -251,6 +251,7 @@ public String toString() {\n             .ofSeconds(DEFAULT_SLOW_CALL_DURATION_THRESHOLD);\n         private Duration maxWaitDurationInHalfOpenState = Duration\n             .ofSeconds(DEFAULT_WAIT_DURATION_IN_HALF_OPEN_STATE);\n+        private byte setWaitInOpenStateCounter = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4NzQ1OQ=="}, "originalCommit": {"oid": "948b884e5b6f2164be41d3848a90762caa33fa44"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE0NTg4OA==", "bodyText": "@RobWin let's focus on the solution with counter, equal 2 or greater than 1?", "url": "https://github.com/resilience4j/resilience4j/pull/1216#discussion_r510145888", "createdAt": "2020-10-22T13:07:17Z", "author": {"login": "likhoman"}, "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java", "diffHunk": "@@ -251,6 +251,7 @@ public String toString() {\n             .ofSeconds(DEFAULT_SLOW_CALL_DURATION_THRESHOLD);\n         private Duration maxWaitDurationInHalfOpenState = Duration\n             .ofSeconds(DEFAULT_WAIT_DURATION_IN_HALF_OPEN_STATE);\n+        private byte setWaitInOpenStateCounter = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4NzQ1OQ=="}, "originalCommit": {"oid": "948b884e5b6f2164be41d3848a90762caa33fa44"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE0NzM4Nw==", "bodyText": "Greater than 1 is fine.\nWe can change it to The waitIntervalFunction was configured multime times which could result in an undesired state. Please verify that waitIntervalFunctionInOpenState and waitDurationInOpenState are not used together.", "url": "https://github.com/resilience4j/resilience4j/pull/1216#discussion_r510147387", "createdAt": "2020-10-22T13:09:30Z", "author": {"login": "RobWin"}, "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java", "diffHunk": "@@ -251,6 +251,7 @@ public String toString() {\n             .ofSeconds(DEFAULT_SLOW_CALL_DURATION_THRESHOLD);\n         private Duration maxWaitDurationInHalfOpenState = Duration\n             .ofSeconds(DEFAULT_WAIT_DURATION_IN_HALF_OPEN_STATE);\n+        private byte setWaitInOpenStateCounter = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4NzQ1OQ=="}, "originalCommit": {"oid": "948b884e5b6f2164be41d3848a90762caa33fa44"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE1MTc3Mg==", "bodyText": "@RobWin what did you mean multime? Maybe you mean multiple?", "url": "https://github.com/resilience4j/resilience4j/pull/1216#discussion_r510151772", "createdAt": "2020-10-22T13:15:37Z", "author": {"login": "likhoman"}, "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java", "diffHunk": "@@ -251,6 +251,7 @@ public String toString() {\n             .ofSeconds(DEFAULT_SLOW_CALL_DURATION_THRESHOLD);\n         private Duration maxWaitDurationInHalfOpenState = Duration\n             .ofSeconds(DEFAULT_WAIT_DURATION_IN_HALF_OPEN_STATE);\n+        private byte setWaitInOpenStateCounter = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4NzQ1OQ=="}, "originalCommit": {"oid": "948b884e5b6f2164be41d3848a90762caa33fa44"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE1MjA3NA==", "bodyText": "Yes, sorry ;)\n\ud83e\udde0  --> \u2615", "url": "https://github.com/resilience4j/resilience4j/pull/1216#discussion_r510152074", "createdAt": "2020-10-22T13:16:02Z", "author": {"login": "RobWin"}, "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java", "diffHunk": "@@ -251,6 +251,7 @@ public String toString() {\n             .ofSeconds(DEFAULT_SLOW_CALL_DURATION_THRESHOLD);\n         private Duration maxWaitDurationInHalfOpenState = Duration\n             .ofSeconds(DEFAULT_WAIT_DURATION_IN_HALF_OPEN_STATE);\n+        private byte setWaitInOpenStateCounter = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4NzQ1OQ=="}, "originalCommit": {"oid": "948b884e5b6f2164be41d3848a90762caa33fa44"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE1MjQ2Mg==", "bodyText": "Thanks", "url": "https://github.com/resilience4j/resilience4j/pull/1216#discussion_r510152462", "createdAt": "2020-10-22T13:16:33Z", "author": {"login": "likhoman"}, "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java", "diffHunk": "@@ -251,6 +251,7 @@ public String toString() {\n             .ofSeconds(DEFAULT_SLOW_CALL_DURATION_THRESHOLD);\n         private Duration maxWaitDurationInHalfOpenState = Duration\n             .ofSeconds(DEFAULT_WAIT_DURATION_IN_HALF_OPEN_STATE);\n+        private byte setWaitInOpenStateCounter = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4NzQ1OQ=="}, "originalCommit": {"oid": "948b884e5b6f2164be41d3848a90762caa33fa44"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjI2MDk4OnYy", "diffSide": "RIGHT", "path": "resilience4j-circuitbreaker/src/test/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfigTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNzoxMToyOVrOHoC9bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNzoxMToyOVrOHoC9bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc1MzU4Mw==", "bodyText": "Could you please rename or delete this test?", "url": "https://github.com/resilience4j/resilience4j/pull/1216#discussion_r511753583", "createdAt": "2020-10-26T07:11:29Z", "author": {"login": "RobWin"}, "path": "resilience4j-circuitbreaker/src/test/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfigTest.java", "diffHunk": "@@ -443,6 +443,39 @@ public void testToString() {\n         assertThat(result).endsWith(\"}\");\n     }\n \n+    @Test(expected = IllegalStateException.class)\n+    public void shouldNotUseWitIntervalFunctionInOpenStateAndWaitDurationInOpenStateTogether() {\n+        custom()\n+            .waitDurationInOpenState(Duration.ofMillis(3333))\n+            .waitIntervalFunctionInOpenState(IntervalFunction.of(Duration.ofMillis(1234)))\n+            .build();\n+    }\n+\n+    @Test\n+    public void test2() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e9c46ff5ea6245b5b7ec7f73cb1f90af4f1820a"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 30, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}