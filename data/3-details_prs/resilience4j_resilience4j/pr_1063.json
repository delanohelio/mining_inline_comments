{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzNzA2OTg4", "number": 1063, "title": "#734 Modified CircuitBreaker to use clock to calculate duration", "bodyText": "As per #734 , CircuitBreaker now uses clock from CircuitBreakerStateMachine to calculate duration of the call so that clock can be easily mocked while writing unit test cases.\n@RobWin Kindly review.", "createdAt": "2020-07-02T19:37:05Z", "url": "https://github.com/resilience4j/resilience4j/pull/1063", "merged": true, "mergeCommit": {"oid": "89bc16d993102e25dc3726b6aa3f9405b74ad025"}, "closed": true, "closedAt": "2020-07-15T06:56:54Z", "author": {"login": "KrnSaurabh"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcyTgihAFqTQ0MzIxMjcwNw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc1FCkcAFqTQ0ODY3NzE5Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzMjEyNzA3", "url": "https://github.com/resilience4j/resilience4j/pull/1063#pullrequestreview-443212707", "createdAt": "2020-07-06T16:05:51Z", "commit": {"oid": "94b325afe47e23e847c3a88f07971c5945841dc4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNjowNTo1MlrOGtdujA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNjowNTo1MlrOGtdujA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDMyNjE1Ng==", "bodyText": "it is not better to use Clock.systemDefaultZone() instead ?", "url": "https://github.com/resilience4j/resilience4j/pull/1063#discussion_r450326156", "createdAt": "2020-07-06T16:05:52Z", "author": {"login": "Romeh"}, "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreaker.java", "diffHunk": "@@ -1119,17 +1151,17 @@ EventPublisher onSlowCallRateExceeded(\n \n         final private Future<T> future;\n         final private OnceConsumer<CircuitBreaker> onceToCircuitbreaker;\n-        final private long start;\n+        final private Clock clock;\n \n         CircuitBreakerFuture(CircuitBreaker circuitBreaker, Future<T> future) {\n-            this(circuitBreaker, future, System.nanoTime());\n+            this(circuitBreaker, future, Clock.systemUTC());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94b325afe47e23e847c3a88f07971c5945841dc4"}, "originalPosition": 285}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3908c830a27c25cf960089f0ac5e47bd2551a1f5", "author": {"user": {"login": "KrnSaurabh", "name": null}}, "url": "https://github.com/resilience4j/resilience4j/commit/3908c830a27c25cf960089f0ac5e47bd2551a1f5", "committedDate": "2020-07-13T09:52:22Z", "message": "Merge pull request #1 from resilience4j/master\n\nMerge from Master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "476459f98a0e39fb220260c89696c5f3e9cb3e07", "author": {"user": null}, "url": "https://github.com/resilience4j/resilience4j/commit/476459f98a0e39fb220260c89696c5f3e9cb3e07", "committedDate": "2020-07-13T14:39:49Z", "message": "#734 Added CircuitBreakerElapsedFunction"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0NDU3NTk4", "url": "https://github.com/resilience4j/resilience4j/pull/1063#pullrequestreview-444457598", "createdAt": "2020-07-08T06:52:26Z", "commit": {"oid": "94b325afe47e23e847c3a88f07971c5945841dc4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNjo1MjoyNlrOGuabtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwODoxMToyMlrOGxJB_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMyMDc1OQ==", "bodyText": "We tried to avoid creating too many Instant classes to measure timings in order to reduce GC pressure.", "url": "https://github.com/resilience4j/resilience4j/pull/1063#discussion_r451320759", "createdAt": "2020-07-08T06:52:26Z", "author": {"login": "RobWin"}, "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreaker.java", "diffHunk": "@@ -68,16 +71,17 @@\n         CheckedFunction0<T> supplier) {\n         return () -> {\n             circuitBreaker.acquirePermission();\n-            long start = System.nanoTime();\n+            Instant start = circuitBreaker.getClock().instant();\n             try {\n                 T returnValue = supplier.apply();\n-\n-                long durationInNanos = System.nanoTime() - start;\n+                Instant end = circuitBreaker.getClock().instant();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94b325afe47e23e847c3a88f07971c5945841dc4"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMyMjY1OQ==", "bodyText": "I think for measuring only a duration the timezone plays no role.", "url": "https://github.com/resilience4j/resilience4j/pull/1063#discussion_r451322659", "createdAt": "2020-07-08T06:56:41Z", "author": {"login": "RobWin"}, "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreaker.java", "diffHunk": "@@ -1119,17 +1151,17 @@ EventPublisher onSlowCallRateExceeded(\n \n         final private Future<T> future;\n         final private OnceConsumer<CircuitBreaker> onceToCircuitbreaker;\n-        final private long start;\n+        final private Clock clock;\n \n         CircuitBreakerFuture(CircuitBreaker circuitBreaker, Future<T> future) {\n-            this(circuitBreaker, future, System.nanoTime());\n+            this(circuitBreaker, future, Clock.systemUTC());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDMyNjE1Ng=="}, "originalCommit": {"oid": "94b325afe47e23e847c3a88f07971c5945841dc4"}, "originalPosition": 285}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE3ODEwMQ==", "bodyText": "\"@return the timeUnit of current timestamp\"", "url": "https://github.com/resilience4j/resilience4j/pull/1063#discussion_r454178101", "createdAt": "2020-07-14T08:05:08Z", "author": {"login": "RobWin"}, "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreaker.java", "diffHunk": "@@ -665,6 +664,22 @@ static CircuitBreaker of(String name,\n      */\n     EventPublisher getEventPublisher();\n \n+    /**\n+     * Returns the current time with respect to the CircuitBreaker currentTimeFunction.\n+     * Returns System.nanoTime() by default.\n+     *\n+     * @return current timestamp\n+     */\n+    long getCurrentTime();\n+\n+    /**\n+     * Returns the timeUnit of current timestamp.\n+     * Default is TimeUnit.NANOSECONDS.\n+     *\n+     * @return current timestamp", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "476459f98a0e39fb220260c89696c5f3e9cb3e07"}, "originalPosition": 297}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE3ODg5NQ==", "bodyText": "Let's rename it to getCurrentTimestamp", "url": "https://github.com/resilience4j/resilience4j/pull/1063#discussion_r454178895", "createdAt": "2020-07-14T08:06:40Z", "author": {"login": "RobWin"}, "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreaker.java", "diffHunk": "@@ -665,6 +664,22 @@ static CircuitBreaker of(String name,\n      */\n     EventPublisher getEventPublisher();\n \n+    /**\n+     * Returns the current time with respect to the CircuitBreaker currentTimeFunction.\n+     * Returns System.nanoTime() by default.\n+     *\n+     * @return current timestamp\n+     */\n+    long getCurrentTime();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "476459f98a0e39fb220260c89696c5f3e9cb3e07"}, "originalPosition": 291}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE3OTM2OQ==", "bodyText": "Let's rename it to getTimestampUnit", "url": "https://github.com/resilience4j/resilience4j/pull/1063#discussion_r454179369", "createdAt": "2020-07-14T08:07:28Z", "author": {"login": "RobWin"}, "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreaker.java", "diffHunk": "@@ -665,6 +664,22 @@ static CircuitBreaker of(String name,\n      */\n     EventPublisher getEventPublisher();\n \n+    /**\n+     * Returns the current time with respect to the CircuitBreaker currentTimeFunction.\n+     * Returns System.nanoTime() by default.\n+     *\n+     * @return current timestamp\n+     */\n+    long getCurrentTime();\n+\n+    /**\n+     * Returns the timeUnit of current timestamp.\n+     * Default is TimeUnit.NANOSECONDS.\n+     *\n+     * @return current timestamp\n+     */\n+    TimeUnit getCurrentTimeUnit();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "476459f98a0e39fb220260c89696c5f3e9cb3e07"}, "originalPosition": 299}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE3OTY4Ng==", "bodyText": "Let's rename it to DEFAULT_TIMESTAMP_FUNCTION", "url": "https://github.com/resilience4j/resilience4j/pull/1063#discussion_r454179686", "createdAt": "2020-07-14T08:08:08Z", "author": {"login": "RobWin"}, "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java", "diffHunk": "@@ -44,10 +47,15 @@\n     public static final boolean DEFAULT_WRITABLE_STACK_TRACE_ENABLED = true;\n     private static final Predicate<Throwable> DEFAULT_RECORD_EXCEPTION_PREDICATE = throwable -> true;\n     private static final Predicate<Throwable> DEFAULT_IGNORE_EXCEPTION_PREDICATE = throwable -> false;\n+    // The default Function to return current time\n+    private static final Function<Clock, Long> DEFAULT_CURRENT_TIME_FUNCTION = clock -> System.nanoTime();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "476459f98a0e39fb220260c89696c5f3e9cb3e07"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE4MDQ1Mg==", "bodyText": "Let's rename it to DEFAULT_TIMESTAMP_UNIT", "url": "https://github.com/resilience4j/resilience4j/pull/1063#discussion_r454180452", "createdAt": "2020-07-14T08:09:42Z", "author": {"login": "RobWin"}, "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java", "diffHunk": "@@ -44,10 +47,15 @@\n     public static final boolean DEFAULT_WRITABLE_STACK_TRACE_ENABLED = true;\n     private static final Predicate<Throwable> DEFAULT_RECORD_EXCEPTION_PREDICATE = throwable -> true;\n     private static final Predicate<Throwable> DEFAULT_IGNORE_EXCEPTION_PREDICATE = throwable -> false;\n+    // The default Function to return current time\n+    private static final Function<Clock, Long> DEFAULT_CURRENT_TIME_FUNCTION = clock -> System.nanoTime();\n+    private static final TimeUnit DEFAULT_CURRENT_TIME_UNIT = TimeUnit.NANOSECONDS;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "476459f98a0e39fb220260c89696c5f3e9cb3e07"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE4MDcwNQ==", "bodyText": "Let's rename it to timestampUnit", "url": "https://github.com/resilience4j/resilience4j/pull/1063#discussion_r454180705", "createdAt": "2020-07-14T08:10:06Z", "author": {"login": "RobWin"}, "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java", "diffHunk": "@@ -44,10 +47,15 @@\n     public static final boolean DEFAULT_WRITABLE_STACK_TRACE_ENABLED = true;\n     private static final Predicate<Throwable> DEFAULT_RECORD_EXCEPTION_PREDICATE = throwable -> true;\n     private static final Predicate<Throwable> DEFAULT_IGNORE_EXCEPTION_PREDICATE = throwable -> false;\n+    // The default Function to return current time\n+    private static final Function<Clock, Long> DEFAULT_CURRENT_TIME_FUNCTION = clock -> System.nanoTime();\n+    private static final TimeUnit DEFAULT_CURRENT_TIME_UNIT = TimeUnit.NANOSECONDS;\n     // The default exception predicate counts all exceptions as failures.\n     private Predicate<Throwable> recordExceptionPredicate = DEFAULT_RECORD_EXCEPTION_PREDICATE;\n     // The default exception predicate ignores no exceptions.\n     private Predicate<Throwable> ignoreExceptionPredicate = DEFAULT_IGNORE_EXCEPTION_PREDICATE;\n+    private Function<Clock, Long> currentTimeFunction = DEFAULT_CURRENT_TIME_FUNCTION;\n+    private TimeUnit currentTimeUnit = DEFAULT_CURRENT_TIME_UNIT;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "476459f98a0e39fb220260c89696c5f3e9cb3e07"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE4MDg2MQ==", "bodyText": "Let's rename it to currentTimestampFunction", "url": "https://github.com/resilience4j/resilience4j/pull/1063#discussion_r454180861", "createdAt": "2020-07-14T08:10:22Z", "author": {"login": "RobWin"}, "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java", "diffHunk": "@@ -44,10 +47,15 @@\n     public static final boolean DEFAULT_WRITABLE_STACK_TRACE_ENABLED = true;\n     private static final Predicate<Throwable> DEFAULT_RECORD_EXCEPTION_PREDICATE = throwable -> true;\n     private static final Predicate<Throwable> DEFAULT_IGNORE_EXCEPTION_PREDICATE = throwable -> false;\n+    // The default Function to return current time\n+    private static final Function<Clock, Long> DEFAULT_CURRENT_TIME_FUNCTION = clock -> System.nanoTime();\n+    private static final TimeUnit DEFAULT_CURRENT_TIME_UNIT = TimeUnit.NANOSECONDS;\n     // The default exception predicate counts all exceptions as failures.\n     private Predicate<Throwable> recordExceptionPredicate = DEFAULT_RECORD_EXCEPTION_PREDICATE;\n     // The default exception predicate ignores no exceptions.\n     private Predicate<Throwable> ignoreExceptionPredicate = DEFAULT_IGNORE_EXCEPTION_PREDICATE;\n+    private Function<Clock, Long> currentTimeFunction = DEFAULT_CURRENT_TIME_FUNCTION;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "476459f98a0e39fb220260c89696c5f3e9cb3e07"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE4MTM3NA==", "bodyText": "currentTimestampFunction", "url": "https://github.com/resilience4j/resilience4j/pull/1063#discussion_r454181374", "createdAt": "2020-07-14T08:11:22Z", "author": {"login": "RobWin"}, "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java", "diffHunk": "@@ -581,6 +597,21 @@ public Builder recordException(Predicate<Throwable> predicate) {\n             this.recordExceptionPredicate = predicate;\n             return this;\n         }\n+        /**\n+         * Configures a function that returns current timestamp for CircuitBreaker.\n+         * Default implementation uses System.nanoTime() to compute current timestamp.\n+         * Configure currentTimeFunction to provide different implementation to compute current timestamp.\n+         * <p>\n+         *\n+         * @param currentTimeFunction function that computes current timestamp.\n+         * @param timeUnit TimeUnit of timestamp returned by the function.\n+         * @return the CircuitBreakerConfig.Builder\n+         */\n+        public Builder currentTimeFunction(Function<Clock, Long> currentTimeFunction, TimeUnit timeUnit) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "476459f98a0e39fb220260c89696c5f3e9cb3e07"}, "originalPosition": 71}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7452eca2a48f55a07e9c70770cabf11a818ab9c", "author": {"user": null}, "url": "https://github.com/resilience4j/resilience4j/commit/a7452eca2a48f55a07e9c70770cabf11a818ab9c", "committedDate": "2020-07-14T12:05:57Z", "message": "#734 Resolved review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a8886dfc4497e68a0b35a5cfda0bbced511c769", "author": {"user": null}, "url": "https://github.com/resilience4j/resilience4j/commit/2a8886dfc4497e68a0b35a5cfda0bbced511c769", "committedDate": "2020-07-14T14:08:16Z", "message": "#734 Renamed local variable durationInNanos"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4Njc3MTkz", "url": "https://github.com/resilience4j/resilience4j/pull/1063#pullrequestreview-448677193", "createdAt": "2020-07-15T06:56:24Z", "commit": {"oid": "2a8886dfc4497e68a0b35a5cfda0bbced511c769"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1752, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}