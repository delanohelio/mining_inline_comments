{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2Njg3MjQw", "number": 817, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNzowNzoxNFrODaZnIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNzowNzoxNFrODaZnIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDA5MTg2OnYy", "diffSide": "RIGHT", "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/internal/CircuitBreakerStateMachine.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNzowNzoxNFrOFhVUog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMjo0MzoxMVrOFhciJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ5NjY3NA==", "bodyText": "Must be metrics.getSlowCallRate()", "url": "https://github.com/resilience4j/resilience4j/pull/817#discussion_r370496674", "createdAt": "2020-01-24T07:07:14Z", "author": {"login": "RobWin"}, "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/internal/CircuitBreakerStateMachine.java", "diffHunk": "@@ -387,6 +390,27 @@ private void publishCircuitIgnoredErrorEvent(String name, long duration, TimeUni\n         publishEventIfPossible(event);\n     }\n \n+    private void publishCircuitFailureRateExceededEvent(String name, float failureRate) {\n+        final CircuitBreakerOnFailureRateExceededEvent event = new CircuitBreakerOnFailureRateExceededEvent(name,\n+            failureRate);\n+        publishEventIfPossible(event);\n+    }\n+\n+    private void publishCircuitSlowCallRateExceededEvent(String name, float slowCallRate) {\n+        final CircuitBreakerOnSlowCallRateExceededEvent event = new CircuitBreakerOnSlowCallRateExceededEvent(name,\n+            slowCallRate);\n+        publishEventIfPossible(event);\n+    }\n+\n+    private void publishCircuitThresholdsExceededEvent(Result result, CircuitBreakerMetrics metrics) {\n+        if (Result.hasFailureRateExceededThreshold(result)) {\n+            publishCircuitFailureRateExceededEvent(getName(), metrics.getFailureRate());\n+        }\n+        if (Result.hasSlowCallRateExceededThreshold(result)) {\n+            publishCircuitSlowCallRateExceededEvent(getName(), metrics.getFailureRate());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "811abac907175621e9558532e6e113789de97530"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYxNDgyMw==", "bodyText": "Fixed the typo", "url": "https://github.com/resilience4j/resilience4j/pull/817#discussion_r370614823", "createdAt": "2020-01-24T12:43:11Z", "author": {"login": "laksnv"}, "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/internal/CircuitBreakerStateMachine.java", "diffHunk": "@@ -387,6 +390,27 @@ private void publishCircuitIgnoredErrorEvent(String name, long duration, TimeUni\n         publishEventIfPossible(event);\n     }\n \n+    private void publishCircuitFailureRateExceededEvent(String name, float failureRate) {\n+        final CircuitBreakerOnFailureRateExceededEvent event = new CircuitBreakerOnFailureRateExceededEvent(name,\n+            failureRate);\n+        publishEventIfPossible(event);\n+    }\n+\n+    private void publishCircuitSlowCallRateExceededEvent(String name, float slowCallRate) {\n+        final CircuitBreakerOnSlowCallRateExceededEvent event = new CircuitBreakerOnSlowCallRateExceededEvent(name,\n+            slowCallRate);\n+        publishEventIfPossible(event);\n+    }\n+\n+    private void publishCircuitThresholdsExceededEvent(Result result, CircuitBreakerMetrics metrics) {\n+        if (Result.hasFailureRateExceededThreshold(result)) {\n+            publishCircuitFailureRateExceededEvent(getName(), metrics.getFailureRate());\n+        }\n+        if (Result.hasSlowCallRateExceededThreshold(result)) {\n+            publishCircuitSlowCallRateExceededEvent(getName(), metrics.getFailureRate());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ5NjY3NA=="}, "originalCommit": {"oid": "811abac907175621e9558532e6e113789de97530"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 44, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}