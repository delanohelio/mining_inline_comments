{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyMzc5NDU4", "number": 899, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDoyMTo0NVrODkSLqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDoyMTo0NVrODkSLqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzczMjI2OnYy", "diffSide": "RIGHT", "path": "resilience4j-spring-cloud2/src/main/java/io/github/resilience4j/bulkhead/autoconfigure/RefreshScopedBulkheadAutoConfiguration.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDoyMTo0NVrOFwhNHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwOToxNTo0MVrOFw9oIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQxOTk5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @org.springframework.cloud.context.config.annotation.RefreshScope\n          \n          \n            \n                @RefreshScope\n          \n      \n    \n    \n  \n\nand Please import RefreshScope. Others are same too.", "url": "https://github.com/resilience4j/resilience4j/pull/899#discussion_r386419998", "createdAt": "2020-03-02T14:21:45Z", "author": {"login": "dlsrb6342"}, "path": "resilience4j-spring-cloud2/src/main/java/io/github/resilience4j/bulkhead/autoconfigure/RefreshScopedBulkheadAutoConfiguration.java", "diffHunk": "@@ -1,19 +1,78 @@\n package io.github.resilience4j.bulkhead.autoconfigure;\n \n import io.github.resilience4j.bulkhead.Bulkhead;\n+import io.github.resilience4j.bulkhead.BulkheadRegistry;\n+import io.github.resilience4j.bulkhead.ThreadPoolBulkhead;\n+import io.github.resilience4j.bulkhead.ThreadPoolBulkheadRegistry;\n+import io.github.resilience4j.bulkhead.configure.BulkheadConfiguration;\n+import io.github.resilience4j.bulkhead.configure.BulkheadConfigurationProperties;\n+import io.github.resilience4j.bulkhead.configure.threadpool.ThreadPoolBulkheadConfiguration;\n+import io.github.resilience4j.bulkhead.event.BulkheadEvent;\n+import io.github.resilience4j.common.CompositeCustomizer;\n+import io.github.resilience4j.common.bulkhead.configuration.BulkheadConfigCustomizer;\n+import io.github.resilience4j.common.bulkhead.configuration.ThreadPoolBulkheadConfigCustomizer;\n+import io.github.resilience4j.common.bulkhead.configuration.ThreadPoolBulkheadConfigurationProperties;\n+import io.github.resilience4j.consumer.EventConsumerRegistry;\n+import io.github.resilience4j.core.registry.RegistryEventConsumer;\n+import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.cloud.autoconfigure.RefreshAutoConfiguration;\n import org.springframework.cloud.context.scope.refresh.RefreshScope;\n+import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n \n @Configuration\n @ConditionalOnClass({Bulkhead.class, RefreshScope.class})\n @AutoConfigureAfter(RefreshAutoConfiguration.class)\n @AutoConfigureBefore(BulkheadAutoConfiguration.class)\n-public class RefreshScopedBulkheadAutoConfiguration extends\n-    AbstractRefreshScopedBulkheadConfiguration {\n+public class RefreshScopedBulkheadAutoConfiguration {\n+    protected final BulkheadConfiguration bulkheadConfiguration;\n+    protected final ThreadPoolBulkheadConfiguration threadPoolBulkheadConfiguration;\n \n+    protected RefreshScopedBulkheadAutoConfiguration() {\n+        this.threadPoolBulkheadConfiguration = new ThreadPoolBulkheadConfiguration();\n+        this.bulkheadConfiguration = new BulkheadConfiguration();\n+    }\n+\n+    /**\n+     * @param bulkheadConfigurationProperties bulkhead spring configuration properties\n+     * @param bulkheadEventConsumerRegistry   the bulkhead event consumer registry\n+     * @return the RefreshScoped BulkheadRegistry\n+     */\n+    @Bean\n+    @org.springframework.cloud.context.config.annotation.RefreshScope\n+    @ConditionalOnMissingBean\n+    public BulkheadRegistry bulkheadRegistry(\n+        BulkheadConfigurationProperties bulkheadConfigurationProperties,\n+        EventConsumerRegistry<BulkheadEvent> bulkheadEventConsumerRegistry,\n+        RegistryEventConsumer<Bulkhead> bulkheadRegistryEventConsumer,\n+        @Qualifier(\"compositeBulkheadCustomizer\") CompositeCustomizer<BulkheadConfigCustomizer> compositeBulkheadCustomizer) {\n+        return bulkheadConfiguration\n+            .bulkheadRegistry(bulkheadConfigurationProperties, bulkheadEventConsumerRegistry,\n+                bulkheadRegistryEventConsumer, compositeBulkheadCustomizer);\n+    }\n+\n+    /**\n+     * @param threadPoolBulkheadConfigurationProperties thread pool bulkhead spring configuration\n+     *                                                  properties\n+     * @param bulkheadEventConsumerRegistry             the bulk head event consumer registry\n+     * @return the RefreshScoped ThreadPoolBulkheadRegistry\n+     */\n+    @Bean\n+    @org.springframework.cloud.context.config.annotation.RefreshScope", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34b09eaf8b7c507edbe99484f0f6864e0f1c0033"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg3OTkyNg==", "bodyText": "I can not as there are 2 RefreshScope in the same class , one for the context imple and one for the annotation so u need to differentiate between them otherwise u will have import conflict", "url": "https://github.com/resilience4j/resilience4j/pull/899#discussion_r386879926", "createdAt": "2020-03-03T09:05:11Z", "author": {"login": "Romeh"}, "path": "resilience4j-spring-cloud2/src/main/java/io/github/resilience4j/bulkhead/autoconfigure/RefreshScopedBulkheadAutoConfiguration.java", "diffHunk": "@@ -1,19 +1,78 @@\n package io.github.resilience4j.bulkhead.autoconfigure;\n \n import io.github.resilience4j.bulkhead.Bulkhead;\n+import io.github.resilience4j.bulkhead.BulkheadRegistry;\n+import io.github.resilience4j.bulkhead.ThreadPoolBulkhead;\n+import io.github.resilience4j.bulkhead.ThreadPoolBulkheadRegistry;\n+import io.github.resilience4j.bulkhead.configure.BulkheadConfiguration;\n+import io.github.resilience4j.bulkhead.configure.BulkheadConfigurationProperties;\n+import io.github.resilience4j.bulkhead.configure.threadpool.ThreadPoolBulkheadConfiguration;\n+import io.github.resilience4j.bulkhead.event.BulkheadEvent;\n+import io.github.resilience4j.common.CompositeCustomizer;\n+import io.github.resilience4j.common.bulkhead.configuration.BulkheadConfigCustomizer;\n+import io.github.resilience4j.common.bulkhead.configuration.ThreadPoolBulkheadConfigCustomizer;\n+import io.github.resilience4j.common.bulkhead.configuration.ThreadPoolBulkheadConfigurationProperties;\n+import io.github.resilience4j.consumer.EventConsumerRegistry;\n+import io.github.resilience4j.core.registry.RegistryEventConsumer;\n+import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.cloud.autoconfigure.RefreshAutoConfiguration;\n import org.springframework.cloud.context.scope.refresh.RefreshScope;\n+import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n \n @Configuration\n @ConditionalOnClass({Bulkhead.class, RefreshScope.class})\n @AutoConfigureAfter(RefreshAutoConfiguration.class)\n @AutoConfigureBefore(BulkheadAutoConfiguration.class)\n-public class RefreshScopedBulkheadAutoConfiguration extends\n-    AbstractRefreshScopedBulkheadConfiguration {\n+public class RefreshScopedBulkheadAutoConfiguration {\n+    protected final BulkheadConfiguration bulkheadConfiguration;\n+    protected final ThreadPoolBulkheadConfiguration threadPoolBulkheadConfiguration;\n \n+    protected RefreshScopedBulkheadAutoConfiguration() {\n+        this.threadPoolBulkheadConfiguration = new ThreadPoolBulkheadConfiguration();\n+        this.bulkheadConfiguration = new BulkheadConfiguration();\n+    }\n+\n+    /**\n+     * @param bulkheadConfigurationProperties bulkhead spring configuration properties\n+     * @param bulkheadEventConsumerRegistry   the bulkhead event consumer registry\n+     * @return the RefreshScoped BulkheadRegistry\n+     */\n+    @Bean\n+    @org.springframework.cloud.context.config.annotation.RefreshScope\n+    @ConditionalOnMissingBean\n+    public BulkheadRegistry bulkheadRegistry(\n+        BulkheadConfigurationProperties bulkheadConfigurationProperties,\n+        EventConsumerRegistry<BulkheadEvent> bulkheadEventConsumerRegistry,\n+        RegistryEventConsumer<Bulkhead> bulkheadRegistryEventConsumer,\n+        @Qualifier(\"compositeBulkheadCustomizer\") CompositeCustomizer<BulkheadConfigCustomizer> compositeBulkheadCustomizer) {\n+        return bulkheadConfiguration\n+            .bulkheadRegistry(bulkheadConfigurationProperties, bulkheadEventConsumerRegistry,\n+                bulkheadRegistryEventConsumer, compositeBulkheadCustomizer);\n+    }\n+\n+    /**\n+     * @param threadPoolBulkheadConfigurationProperties thread pool bulkhead spring configuration\n+     *                                                  properties\n+     * @param bulkheadEventConsumerRegistry             the bulk head event consumer registry\n+     * @return the RefreshScoped ThreadPoolBulkheadRegistry\n+     */\n+    @Bean\n+    @org.springframework.cloud.context.config.annotation.RefreshScope", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQxOTk5OA=="}, "originalCommit": {"oid": "34b09eaf8b7c507edbe99484f0f6864e0f1c0033"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg4NTY2Nw==", "bodyText": "resilience4j/resilience4j-spring-cloud2/src/main/java/io/github/resilience4j/bulkhead/autoconfigure/RefreshScopedBulkheadAutoConfiguration.java\n    \n    \n         Line 13\n      in\n      577025d\n    \n    \n    \n    \n\n        \n          \n           @ConditionalOnClass({Bulkhead.class, RefreshScope.class}) \n        \n    \n  \n\n\nOh You mean this line, right?  I missed it.", "url": "https://github.com/resilience4j/resilience4j/pull/899#discussion_r386885667", "createdAt": "2020-03-03T09:15:41Z", "author": {"login": "dlsrb6342"}, "path": "resilience4j-spring-cloud2/src/main/java/io/github/resilience4j/bulkhead/autoconfigure/RefreshScopedBulkheadAutoConfiguration.java", "diffHunk": "@@ -1,19 +1,78 @@\n package io.github.resilience4j.bulkhead.autoconfigure;\n \n import io.github.resilience4j.bulkhead.Bulkhead;\n+import io.github.resilience4j.bulkhead.BulkheadRegistry;\n+import io.github.resilience4j.bulkhead.ThreadPoolBulkhead;\n+import io.github.resilience4j.bulkhead.ThreadPoolBulkheadRegistry;\n+import io.github.resilience4j.bulkhead.configure.BulkheadConfiguration;\n+import io.github.resilience4j.bulkhead.configure.BulkheadConfigurationProperties;\n+import io.github.resilience4j.bulkhead.configure.threadpool.ThreadPoolBulkheadConfiguration;\n+import io.github.resilience4j.bulkhead.event.BulkheadEvent;\n+import io.github.resilience4j.common.CompositeCustomizer;\n+import io.github.resilience4j.common.bulkhead.configuration.BulkheadConfigCustomizer;\n+import io.github.resilience4j.common.bulkhead.configuration.ThreadPoolBulkheadConfigCustomizer;\n+import io.github.resilience4j.common.bulkhead.configuration.ThreadPoolBulkheadConfigurationProperties;\n+import io.github.resilience4j.consumer.EventConsumerRegistry;\n+import io.github.resilience4j.core.registry.RegistryEventConsumer;\n+import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.cloud.autoconfigure.RefreshAutoConfiguration;\n import org.springframework.cloud.context.scope.refresh.RefreshScope;\n+import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n \n @Configuration\n @ConditionalOnClass({Bulkhead.class, RefreshScope.class})\n @AutoConfigureAfter(RefreshAutoConfiguration.class)\n @AutoConfigureBefore(BulkheadAutoConfiguration.class)\n-public class RefreshScopedBulkheadAutoConfiguration extends\n-    AbstractRefreshScopedBulkheadConfiguration {\n+public class RefreshScopedBulkheadAutoConfiguration {\n+    protected final BulkheadConfiguration bulkheadConfiguration;\n+    protected final ThreadPoolBulkheadConfiguration threadPoolBulkheadConfiguration;\n \n+    protected RefreshScopedBulkheadAutoConfiguration() {\n+        this.threadPoolBulkheadConfiguration = new ThreadPoolBulkheadConfiguration();\n+        this.bulkheadConfiguration = new BulkheadConfiguration();\n+    }\n+\n+    /**\n+     * @param bulkheadConfigurationProperties bulkhead spring configuration properties\n+     * @param bulkheadEventConsumerRegistry   the bulkhead event consumer registry\n+     * @return the RefreshScoped BulkheadRegistry\n+     */\n+    @Bean\n+    @org.springframework.cloud.context.config.annotation.RefreshScope\n+    @ConditionalOnMissingBean\n+    public BulkheadRegistry bulkheadRegistry(\n+        BulkheadConfigurationProperties bulkheadConfigurationProperties,\n+        EventConsumerRegistry<BulkheadEvent> bulkheadEventConsumerRegistry,\n+        RegistryEventConsumer<Bulkhead> bulkheadRegistryEventConsumer,\n+        @Qualifier(\"compositeBulkheadCustomizer\") CompositeCustomizer<BulkheadConfigCustomizer> compositeBulkheadCustomizer) {\n+        return bulkheadConfiguration\n+            .bulkheadRegistry(bulkheadConfigurationProperties, bulkheadEventConsumerRegistry,\n+                bulkheadRegistryEventConsumer, compositeBulkheadCustomizer);\n+    }\n+\n+    /**\n+     * @param threadPoolBulkheadConfigurationProperties thread pool bulkhead spring configuration\n+     *                                                  properties\n+     * @param bulkheadEventConsumerRegistry             the bulk head event consumer registry\n+     * @return the RefreshScoped ThreadPoolBulkheadRegistry\n+     */\n+    @Bean\n+    @org.springframework.cloud.context.config.annotation.RefreshScope", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQxOTk5OA=="}, "originalCommit": {"oid": "34b09eaf8b7c507edbe99484f0f6864e0f1c0033"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 66, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}