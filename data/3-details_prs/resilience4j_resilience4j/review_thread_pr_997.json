{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5ODYzMDI4", "number": 997, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNTo0Mzo1OFrOD_8Vtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwODozODoxNFrOEAae-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4Mzc1NDc4OnYy", "diffSide": "RIGHT", "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/internal/CircuitBreakerStateMachine.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNTo0Mzo1OFrOGa6Lxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNjowODozMVrOGa6q3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg2OTQ0Ng==", "bodyText": "I'm not happy that this state-specific code is in generic method of the CircuitBreakerStateMachine.\nMaybe we can add a postTransitionHook or preTransitionHook to states which are invoked here in a generic form?", "url": "https://github.com/resilience4j/resilience4j/pull/997#discussion_r430869446", "createdAt": "2020-05-27T05:43:58Z", "author": {"login": "RobWin"}, "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/internal/CircuitBreakerStateMachine.java", "diffHunk": "@@ -293,6 +291,9 @@ private void stateTransition(State newState,\n         UnaryOperator<CircuitBreakerState> newStateGenerator) {\n         CircuitBreakerState previousState = stateReference.getAndUpdate(currentState -> {\n             StateTransition.transitionBetween(getName(), currentState.getState(), newState);\n+            if (currentState instanceof OpenState) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a075e6cd0ecf5543e67a31224c563b42d0a8e4ba"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg3NzQwNA==", "bodyText": "Yes right. that would be better. I'll add preTransitionHook.", "url": "https://github.com/resilience4j/resilience4j/pull/997#discussion_r430877404", "createdAt": "2020-05-27T06:08:31Z", "author": {"login": "dlsrb6342"}, "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/internal/CircuitBreakerStateMachine.java", "diffHunk": "@@ -293,6 +291,9 @@ private void stateTransition(State newState,\n         UnaryOperator<CircuitBreakerState> newStateGenerator) {\n         CircuitBreakerState previousState = stateReference.getAndUpdate(currentState -> {\n             StateTransition.transitionBetween(getName(), currentState.getState(), newState);\n+            if (currentState instanceof OpenState) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg2OTQ0Ng=="}, "originalCommit": {"oid": "a075e6cd0ecf5543e67a31224c563b42d0a8e4ba"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODY5MzY5OnYy", "diffSide": "RIGHT", "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/internal/CircuitBreakerStateMachine.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwODozODoxNFrOGbrRBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwOTowNDoyNVrOGbsOFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY3MzYwNw==", "bodyText": "what happens if the future is already completed?", "url": "https://github.com/resilience4j/resilience4j/pull/997#discussion_r431673607", "createdAt": "2020-05-28T08:38:14Z", "author": {"login": "RobWin"}, "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/internal/CircuitBreakerStateMachine.java", "diffHunk": "@@ -695,12 +706,23 @@ public CircuitBreakerMetrics getMetrics() {\n             return circuitBreakerMetrics;\n         }\n \n+        @Override\n+        public void preTransitionHook() {\n+            cancelAutomaticTransitionToHalfOpen();\n+        }\n+\n         private void toHalfOpenState() {\n             if (isOpen.compareAndSet(true, false)) {\n                 transitionToHalfOpenState();\n             }\n         }\n \n+        private void cancelAutomaticTransitionToHalfOpen() {\n+            if (transitionToHalfOpenFuture != null) {\n+                transitionToHalfOpenFuture.cancel(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd02830859bc9359b5fbedcc3ad4abe4b9b8c914"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY4OTIzOA==", "bodyText": "Yes. Needed to check whether it is done or is cancelled already.\nThank you.", "url": "https://github.com/resilience4j/resilience4j/pull/997#discussion_r431689238", "createdAt": "2020-05-28T09:04:25Z", "author": {"login": "dlsrb6342"}, "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/internal/CircuitBreakerStateMachine.java", "diffHunk": "@@ -695,12 +706,23 @@ public CircuitBreakerMetrics getMetrics() {\n             return circuitBreakerMetrics;\n         }\n \n+        @Override\n+        public void preTransitionHook() {\n+            cancelAutomaticTransitionToHalfOpen();\n+        }\n+\n         private void toHalfOpenState() {\n             if (isOpen.compareAndSet(true, false)) {\n                 transitionToHalfOpenState();\n             }\n         }\n \n+        private void cancelAutomaticTransitionToHalfOpen() {\n+            if (transitionToHalfOpenFuture != null) {\n+                transitionToHalfOpenFuture.cancel(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY3MzYwNw=="}, "originalCommit": {"oid": "cd02830859bc9359b5fbedcc3ad4abe4b9b8c914"}, "originalPosition": 81}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 79, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}