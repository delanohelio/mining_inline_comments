{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4NDY0NDIw", "number": 882, "title": "WIP: #703 -Added custom RegistryStore and builder", "bodyText": "This PR is WIP for #703  and created to get initial review. I have added RegistryStore Interface and its default implementation that replaces the Concurrent HashMap in AbstractRegistry Class. Also I have added builder methods in CircuitBreakerRegistry so that any custom implementation of RegistryStore can be added to the CircuitBreakerRegistry.\nI am still working on unit tests/ comments/ javadocs.", "createdAt": "2020-02-21T20:42:31Z", "url": "https://github.com/resilience4j/resilience4j/pull/882", "merged": true, "mergeCommit": {"oid": "6b30b2c64500366bdb5e08690e0669e5d1620cb8"}, "closed": true, "closedAt": "2020-03-04T09:11:04Z", "author": {"login": "KrnSaurabh"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcGlr_hAH2gAyMzc4NDY0NDIwOjNjOTRjZjAzZTQzYmE5NGNlZGY5NTAwZDRmMTY0ZjVjYTEwMzFhYmY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcKTPd-gFqTM2ODYwNzA2Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3c94cf03e43ba94cedf9500d4f164f5ca1031abf", "author": {"user": null}, "url": "https://github.com/resilience4j/resilience4j/commit/3c94cf03e43ba94cedf9500d4f164f5ca1031abf", "committedDate": "2020-02-21T20:24:10Z", "message": "WIP: Issue#703 -Added custom Registry Store and builds for CircuitBreakerRegistry"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNDgxOTg4", "url": "https://github.com/resilience4j/resilience4j/pull/882#pullrequestreview-363481988", "createdAt": "2020-02-24T15:37:14Z", "commit": {"oid": "3c94cf03e43ba94cedf9500d4f164f5ca1031abf"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNTozNzoxNFrOFtlG-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNTozNzoxNFrOFtlG-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMzODIzMg==", "bodyText": "withCircuitBreakerConfigDefaults is not necessary.  If the config map is empty, the InMemoryCircuitBreakerRegistry creates a default config.", "url": "https://github.com/resilience4j/resilience4j/pull/882#discussion_r383338232", "createdAt": "2020-02-24T15:37:14Z", "author": {"login": "RobWin"}, "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerRegistry.java", "diffHunk": "@@ -261,4 +263,60 @@ CircuitBreaker circuitBreaker(String name,\n         Supplier<CircuitBreakerConfig> circuitBreakerConfigSupplier,\n         io.vavr.collection.Map<String, String> tags);\n \n+    static Builder custom() {\n+        return new Builder();\n+    }\n+\n+    class Builder {\n+\n+        private static final String DEFAULT_CONFIG = \"default\";\n+        private RegistryStore registryStore;\n+        private Map<String, CircuitBreakerConfig> circuitBreakerConfigsMap;\n+        private List<RegistryEventConsumer<CircuitBreaker>> registryEventConsumers;\n+        private io.vavr.collection.Map<String, String> tags;\n+\n+        public Builder() {\n+            this.circuitBreakerConfigsMap = new java.util.HashMap<>();\n+            this.registryEventConsumers = new ArrayList<>();\n+        }\n+\n+        public Builder withRegistryStore(RegistryStore registryStore) {\n+            this.registryStore = registryStore;\n+            return this;\n+        }\n+\n+        public Builder withCircuitBreakerConfig(CircuitBreakerConfig circuitBreakerConfig) {\n+            circuitBreakerConfigsMap.put(DEFAULT_CONFIG, circuitBreakerConfig);\n+            return this;\n+        }\n+\n+        public Builder withCircuitBreakerConfigDefaults() {\n+            circuitBreakerConfigsMap.put(DEFAULT_CONFIG, CircuitBreakerConfig.ofDefaults());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c94cf03e43ba94cedf9500d4f164f5ca1031abf"}, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd74563063895302c54d3d664d7c010356391aed", "author": {"user": null}, "url": "https://github.com/resilience4j/resilience4j/commit/bd74563063895302c54d3d664d7c010356391aed", "committedDate": "2020-03-01T12:40:18Z", "message": "#703 Added unit tests and code refactor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3ODE0NTAz", "url": "https://github.com/resilience4j/resilience4j/pull/882#pullrequestreview-367814503", "createdAt": "2020-03-03T09:22:40Z", "commit": {"oid": "bd74563063895302c54d3d664d7c010356391aed"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NjA3MDYz", "url": "https://github.com/resilience4j/resilience4j/pull/882#pullrequestreview-368607063", "createdAt": "2020-03-04T09:10:25Z", "commit": {"oid": "bd74563063895302c54d3d664d7c010356391aed"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1850, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}