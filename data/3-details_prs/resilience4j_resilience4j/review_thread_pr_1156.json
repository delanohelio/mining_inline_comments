{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgxMTY3MTQw", "number": 1156, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNjo0MzowOFrOEg_aEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNzo0NTo1NVrOEhACQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMDI4NzUyOnYy", "diffSide": "LEFT", "path": "resilience4j-all/src/main/java/io/github/resilience4j/decorators/Decorators.java", "isResolved": true, "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNjo0MzowOFrOHOEsRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMjoyNzoxOFrOHR_TuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUxODk4Mg==", "bodyText": "What is the plan for a backward-compatibility?\nEg. we can consider replacement by custom io.github.resilience4j.CheckedRunnable /CheckedFunction* implementations when java.util.function.* isn't applicable...", "url": "https://github.com/resilience4j/resilience4j/pull/1156#discussion_r484518982", "createdAt": "2020-09-07T16:43:08Z", "author": {"login": "hexmind"}, "path": "resilience4j-all/src/main/java/io/github/resilience4j/decorators/Decorators.java", "diffHunk": "@@ -67,18 +58,6 @@ static DecorateRunnable ofRunnable(Runnable runnable) {\n         return new DecorateCallable<>(callable);\n     }\n \n-    static <T> DecorateCheckedSupplier<T> ofCheckedSupplier(CheckedFunction0<T> supplier) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99a41d1f1552de28830277d6c65f2bfff38a4422"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQzNzE1OQ==", "bodyText": "I am not sure but I think we assumed that 2.0 is going to have few contract breaking changes since we have made similar changes in previous PRs like VavrCircuitBreaker, VavrRatelimiter etc. @RobWin correct me if I am wrong.", "url": "https://github.com/resilience4j/resilience4j/pull/1156#discussion_r485437159", "createdAt": "2020-09-09T08:36:39Z", "author": {"login": "KrnSaurabh"}, "path": "resilience4j-all/src/main/java/io/github/resilience4j/decorators/Decorators.java", "diffHunk": "@@ -67,18 +58,6 @@ static DecorateRunnable ofRunnable(Runnable runnable) {\n         return new DecorateCallable<>(callable);\n     }\n \n-    static <T> DecorateCheckedSupplier<T> ofCheckedSupplier(CheckedFunction0<T> supplier) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUxODk4Mg=="}, "originalCommit": {"oid": "99a41d1f1552de28830277d6c65f2bfff38a4422"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU3MzAxMA==", "bodyText": "Yes, breacking changes for 2.0 are fine", "url": "https://github.com/resilience4j/resilience4j/pull/1156#discussion_r488573010", "createdAt": "2020-09-15T10:54:36Z", "author": {"login": "RobWin"}, "path": "resilience4j-all/src/main/java/io/github/resilience4j/decorators/Decorators.java", "diffHunk": "@@ -67,18 +58,6 @@ static DecorateRunnable ofRunnable(Runnable runnable) {\n         return new DecorateCallable<>(callable);\n     }\n \n-    static <T> DecorateCheckedSupplier<T> ofCheckedSupplier(CheckedFunction0<T> supplier) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUxODk4Mg=="}, "originalCommit": {"oid": "99a41d1f1552de28830277d6c65f2bfff38a4422"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU3MzcwOQ==", "bodyText": "But I like the idea to add our own CheckedRunnable and CheckedFunction interfaces is a good idea. That means, if someone just uses Lambas, he does not even have to migrate the code.", "url": "https://github.com/resilience4j/resilience4j/pull/1156#discussion_r488573709", "createdAt": "2020-09-15T10:55:42Z", "author": {"login": "RobWin"}, "path": "resilience4j-all/src/main/java/io/github/resilience4j/decorators/Decorators.java", "diffHunk": "@@ -67,18 +58,6 @@ static DecorateRunnable ofRunnable(Runnable runnable) {\n         return new DecorateCallable<>(callable);\n     }\n \n-    static <T> DecorateCheckedSupplier<T> ofCheckedSupplier(CheckedFunction0<T> supplier) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUxODk4Mg=="}, "originalCommit": {"oid": "99a41d1f1552de28830277d6c65f2bfff38a4422"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU4NzIwNg==", "bodyText": "But we can do this in another PR", "url": "https://github.com/resilience4j/resilience4j/pull/1156#discussion_r488587206", "createdAt": "2020-09-15T11:21:04Z", "author": {"login": "RobWin"}, "path": "resilience4j-all/src/main/java/io/github/resilience4j/decorators/Decorators.java", "diffHunk": "@@ -67,18 +58,6 @@ static DecorateRunnable ofRunnable(Runnable runnable) {\n         return new DecorateCallable<>(callable);\n     }\n \n-    static <T> DecorateCheckedSupplier<T> ofCheckedSupplier(CheckedFunction0<T> supplier) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUxODk4Mg=="}, "originalCommit": {"oid": "99a41d1f1552de28830277d6c65f2bfff38a4422"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU5NzI4MQ==", "bodyText": "This way we could keep existing tests.", "url": "https://github.com/resilience4j/resilience4j/pull/1156#discussion_r488597281", "createdAt": "2020-09-15T11:39:12Z", "author": {"login": "hexmind"}, "path": "resilience4j-all/src/main/java/io/github/resilience4j/decorators/Decorators.java", "diffHunk": "@@ -67,18 +58,6 @@ static DecorateRunnable ofRunnable(Runnable runnable) {\n         return new DecorateCallable<>(callable);\n     }\n \n-    static <T> DecorateCheckedSupplier<T> ofCheckedSupplier(CheckedFunction0<T> supplier) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUxODk4Mg=="}, "originalCommit": {"oid": "99a41d1f1552de28830277d6c65f2bfff38a4422"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODYxMTcxNg==", "bodyText": "Since it's Phase-3, we are already too late ;)\nWe can copy the tests later? wdyt?", "url": "https://github.com/resilience4j/resilience4j/pull/1156#discussion_r488611716", "createdAt": "2020-09-15T12:04:14Z", "author": {"login": "RobWin"}, "path": "resilience4j-all/src/main/java/io/github/resilience4j/decorators/Decorators.java", "diffHunk": "@@ -67,18 +58,6 @@ static DecorateRunnable ofRunnable(Runnable runnable) {\n         return new DecorateCallable<>(callable);\n     }\n \n-    static <T> DecorateCheckedSupplier<T> ofCheckedSupplier(CheckedFunction0<T> supplier) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUxODk4Mg=="}, "originalCommit": {"oid": "99a41d1f1552de28830277d6c65f2bfff38a4422"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODYxNDI3MA==", "bodyText": "I would add interfaces now and keep tests at the same time.", "url": "https://github.com/resilience4j/resilience4j/pull/1156#discussion_r488614270", "createdAt": "2020-09-15T12:08:49Z", "author": {"login": "hexmind"}, "path": "resilience4j-all/src/main/java/io/github/resilience4j/decorators/Decorators.java", "diffHunk": "@@ -67,18 +58,6 @@ static DecorateRunnable ofRunnable(Runnable runnable) {\n         return new DecorateCallable<>(callable);\n     }\n \n-    static <T> DecorateCheckedSupplier<T> ofCheckedSupplier(CheckedFunction0<T> supplier) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUxODk4Mg=="}, "originalCommit": {"oid": "99a41d1f1552de28830277d6c65f2bfff38a4422"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODYxODU3NA==", "bodyText": "Meanwhile I was working on the next PR and have already added  our own CheckedFunction CheckedRunnable etc. It would be easy for me to do it in next PR.", "url": "https://github.com/resilience4j/resilience4j/pull/1156#discussion_r488618574", "createdAt": "2020-09-15T12:16:19Z", "author": {"login": "KrnSaurabh"}, "path": "resilience4j-all/src/main/java/io/github/resilience4j/decorators/Decorators.java", "diffHunk": "@@ -67,18 +58,6 @@ static DecorateRunnable ofRunnable(Runnable runnable) {\n         return new DecorateCallable<>(callable);\n     }\n \n-    static <T> DecorateCheckedSupplier<T> ofCheckedSupplier(CheckedFunction0<T> supplier) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUxODk4Mg=="}, "originalCommit": {"oid": "99a41d1f1552de28830277d6c65f2bfff38a4422"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODYyNTA4MQ==", "bodyText": "@hexmind @RobWin let me know if that's fine. I should have foreseen the need but while working on next the PR I realised the need of having our own checkedFunction and other checked interfaces. hence I have added the same in upcoming PR.", "url": "https://github.com/resilience4j/resilience4j/pull/1156#discussion_r488625081", "createdAt": "2020-09-15T12:27:18Z", "author": {"login": "KrnSaurabh"}, "path": "resilience4j-all/src/main/java/io/github/resilience4j/decorators/Decorators.java", "diffHunk": "@@ -67,18 +58,6 @@ static DecorateRunnable ofRunnable(Runnable runnable) {\n         return new DecorateCallable<>(callable);\n     }\n \n-    static <T> DecorateCheckedSupplier<T> ofCheckedSupplier(CheckedFunction0<T> supplier) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUxODk4Mg=="}, "originalCommit": {"oid": "99a41d1f1552de28830277d6c65f2bfff38a4422"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMDMxNDQ3OnYy", "diffSide": "RIGHT", "path": "resilience4j-circularbuffer/src/main/java/io/github/resilience4j/circularbuffer/ConcurrentCircularFifoBuffer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNjo1Nzo0NVrOHOE7bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwODozNTo0N1rOHO8smw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUyMjg2MQ==", "bodyText": "What is a reason for copying anonymous list created a moment ago?", "url": "https://github.com/resilience4j/resilience4j/pull/1156#discussion_r484522861", "createdAt": "2020-09-07T16:57:45Z", "author": {"login": "hexmind"}, "path": "resilience4j-circularbuffer/src/main/java/io/github/resilience4j/circularbuffer/ConcurrentCircularFifoBuffer.java", "diffHunk": "@@ -74,7 +73,7 @@ public boolean isFull() {\n     @SuppressWarnings(\"unchecked\")\n     public List<T> toList() {\n         T[] elementsArray = (T[]) queue.toArray();\n-        return List.ofAll(Arrays.asList(elementsArray));\n+        return List.copyOf(Arrays.asList(elementsArray));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99a41d1f1552de28830277d6c65f2bfff38a4422"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQzNjU3MQ==", "bodyText": "Yeah right. It doesn't make sense. I have changed it to simply return defensive copy of queue.", "url": "https://github.com/resilience4j/resilience4j/pull/1156#discussion_r485436571", "createdAt": "2020-09-09T08:35:47Z", "author": {"login": "KrnSaurabh"}, "path": "resilience4j-circularbuffer/src/main/java/io/github/resilience4j/circularbuffer/ConcurrentCircularFifoBuffer.java", "diffHunk": "@@ -74,7 +73,7 @@ public boolean isFull() {\n     @SuppressWarnings(\"unchecked\")\n     public List<T> toList() {\n         T[] elementsArray = (T[]) queue.toArray();\n-        return List.ofAll(Arrays.asList(elementsArray));\n+        return List.copyOf(Arrays.asList(elementsArray));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUyMjg2MQ=="}, "originalCommit": {"oid": "99a41d1f1552de28830277d6c65f2bfff38a4422"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMDMyNDY2OnYy", "diffSide": "RIGHT", "path": "resilience4j-consumer/src/main/java/io/github/resilience4j/consumer/EventConsumerRegistry.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNzowMzozM1rOHOFBDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxODoyMzozMlrOHQAeXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUyNDMwMw==", "bodyText": "It is wrong because Interface for immutable sequential data structures isn't the same what Set is. Only names are similar ;)", "url": "https://github.com/resilience4j/resilience4j/pull/1156#discussion_r484524303", "createdAt": "2020-09-07T17:03:33Z", "author": {"login": "hexmind"}, "path": "resilience4j-consumer/src/main/java/io/github/resilience4j/consumer/EventConsumerRegistry.java", "diffHunk": "@@ -44,5 +45,5 @@\n      *\n      * @return all EventConsumer instances\n      */\n-    Seq<CircularEventConsumer<T>> getAllEventConsumer();\n+    Set<CircularEventConsumer<T>> getAllEventConsumer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99a41d1f1552de28830277d6c65f2bfff38a4422"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ0ODUyNQ==", "bodyText": "Thats correct :) Set is not exact replacement of Seq although names looked similar. I could choose between Set for unique values or List but there is no equivalent data structure in terms of immutability. Let me know if you suggest other collection instead.", "url": "https://github.com/resilience4j/resilience4j/pull/1156#discussion_r485448525", "createdAt": "2020-09-09T08:53:02Z", "author": {"login": "KrnSaurabh"}, "path": "resilience4j-consumer/src/main/java/io/github/resilience4j/consumer/EventConsumerRegistry.java", "diffHunk": "@@ -44,5 +45,5 @@\n      *\n      * @return all EventConsumer instances\n      */\n-    Seq<CircularEventConsumer<T>> getAllEventConsumer();\n+    Set<CircularEventConsumer<T>> getAllEventConsumer();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUyNDMwMw=="}, "originalCommit": {"oid": "99a41d1f1552de28830277d6c65f2bfff38a4422"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjExNTkxOA==", "bodyText": "You won't find immutable interface.\nAfter this change from Seq to Set you lose duplicates and what is even more important an order.", "url": "https://github.com/resilience4j/resilience4j/pull/1156#discussion_r486115918", "createdAt": "2020-09-10T07:14:03Z", "author": {"login": "hexmind"}, "path": "resilience4j-consumer/src/main/java/io/github/resilience4j/consumer/EventConsumerRegistry.java", "diffHunk": "@@ -44,5 +45,5 @@\n      *\n      * @return all EventConsumer instances\n      */\n-    Seq<CircularEventConsumer<T>> getAllEventConsumer();\n+    Set<CircularEventConsumer<T>> getAllEventConsumer();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUyNDMwMw=="}, "originalCommit": {"oid": "99a41d1f1552de28830277d6c65f2bfff38a4422"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU0NzAzOQ==", "bodyText": "Changed java.util.Set to List to retain order of elements.", "url": "https://github.com/resilience4j/resilience4j/pull/1156#discussion_r486547039", "createdAt": "2020-09-10T18:23:32Z", "author": {"login": "KrnSaurabh"}, "path": "resilience4j-consumer/src/main/java/io/github/resilience4j/consumer/EventConsumerRegistry.java", "diffHunk": "@@ -44,5 +45,5 @@\n      *\n      * @return all EventConsumer instances\n      */\n-    Seq<CircularEventConsumer<T>> getAllEventConsumer();\n+    Set<CircularEventConsumer<T>> getAllEventConsumer();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUyNDMwMw=="}, "originalCommit": {"oid": "99a41d1f1552de28830277d6c65f2bfff38a4422"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMDMzNDEwOnYy", "diffSide": "LEFT", "path": "resilience4j-core/src/main/java/io/github/resilience4j/core/IntervalFunction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNzowOTozM1rOHOFGkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwODozNzo1OVrOHO8yNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUyNTcxMg==", "bodyText": "https://www.logicbig.com/how-to/code-snippets/jcode-java-8-streams-longstream-iterate.html", "url": "https://github.com/resilience4j/resilience4j/pull/1156#discussion_r484525712", "createdAt": "2020-09-07T17:09:33Z", "author": {"login": "hexmind"}, "path": "resilience4j-core/src/main/java/io/github/resilience4j/core/IntervalFunction.java", "diffHunk": "@@ -35,7 +33,15 @@ static IntervalFunction of(long intervalMillis, Function<Long, Long> backoffFunc\n \n         return (attempt) -> {\n             checkAttempt(attempt);\n-            return Stream.iterate(intervalMillis, backoffFunction).get(attempt - 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99a41d1f1552de28830277d6c65f2bfff38a4422"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQzODAwNA==", "bodyText": "I have refactored the code here.", "url": "https://github.com/resilience4j/resilience4j/pull/1156#discussion_r485438004", "createdAt": "2020-09-09T08:37:59Z", "author": {"login": "KrnSaurabh"}, "path": "resilience4j-core/src/main/java/io/github/resilience4j/core/IntervalFunction.java", "diffHunk": "@@ -35,7 +33,15 @@ static IntervalFunction of(long intervalMillis, Function<Long, Long> backoffFunc\n \n         return (attempt) -> {\n             checkAttempt(attempt);\n-            return Stream.iterate(intervalMillis, backoffFunction).get(attempt - 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUyNTcxMg=="}, "originalCommit": {"oid": "99a41d1f1552de28830277d6c65f2bfff38a4422"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMDM1NzA4OnYy", "diffSide": "RIGHT", "path": "resilience4j-ratpack/src/main/java/io/github/resilience4j/ratpack/bulkhead/monitoring/endpoint/BulkheadChain.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNzoyMzo0MlrOHOFTFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNzoyMzo0MlrOHOFTFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUyODkxNg==", "bodyText": "Could you rename this method?", "url": "https://github.com/resilience4j/resilience4j/pull/1156#discussion_r484528916", "createdAt": "2020-09-07T17:23:42Z", "author": {"login": "hexmind"}, "path": "resilience4j-ratpack/src/main/java/io/github/resilience4j/ratpack/bulkhead/monitoring/endpoint/BulkheadChain.java", "diffHunk": "@@ -45,6 +45,10 @@ public BulkheadChain(EventConsumerRegistry<BulkheadEvent> eventConsumerRegistry)\n         this.eventConsumerRegistry = eventConsumerRegistry;\n     }\n \n+    private static Flux<BulkheadEvent> apply(CircularEventConsumer<BulkheadEvent> bulkheadEventCircularEventConsumer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99a41d1f1552de28830277d6c65f2bfff38a4422"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMDM2ODEyOnYy", "diffSide": "RIGHT", "path": "resilience4j-ratpack/src/main/java/io/github/resilience4j/ratpack/circuitbreaker/monitoring/endpoint/CircuitBreakerChain.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNzozMTowM1rOHOFZDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwODozOTo0M1rOHO82gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUzMDQ0NA==", "bodyText": "maybe .flatMap(CircularEventConsumer::streamBufferedEvents)?\nI am not sure if CircularEventConsumer::fluxBufferedEvents) would be also possible (dependencies)...", "url": "https://github.com/resilience4j/resilience4j/pull/1156#discussion_r484530444", "createdAt": "2020-09-07T17:31:03Z", "author": {"login": "hexmind"}, "path": "resilience4j-ratpack/src/main/java/io/github/resilience4j/ratpack/circuitbreaker/monitoring/endpoint/CircuitBreakerChain.java", "diffHunk": "@@ -108,10 +107,13 @@ public void execute(Chain chain) throws Exception {\n                     CircuitBreakerEventsEndpointResponse response = new CircuitBreakerEventsEndpointResponse(\n                         eventConsumerRegistry\n                             .getAllEventConsumer()\n-                            .flatMap(CircularEventConsumer::getBufferedEvents)\n+                            .stream()\n+                            .flatMap(circuitBreakerEventCircularEventConsumer -> circuitBreakerEventCircularEventConsumer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99a41d1f1552de28830277d6c65f2bfff38a4422"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQzOTEwNQ==", "bodyText": "Added a method to return stream of BufferedEvents and reused it. Couldn't create similar method to return flux since reactor dependency is not present in the project.", "url": "https://github.com/resilience4j/resilience4j/pull/1156#discussion_r485439105", "createdAt": "2020-09-09T08:39:43Z", "author": {"login": "KrnSaurabh"}, "path": "resilience4j-ratpack/src/main/java/io/github/resilience4j/ratpack/circuitbreaker/monitoring/endpoint/CircuitBreakerChain.java", "diffHunk": "@@ -108,10 +107,13 @@ public void execute(Chain chain) throws Exception {\n                     CircuitBreakerEventsEndpointResponse response = new CircuitBreakerEventsEndpointResponse(\n                         eventConsumerRegistry\n                             .getAllEventConsumer()\n-                            .flatMap(CircularEventConsumer::getBufferedEvents)\n+                            .stream()\n+                            .flatMap(circuitBreakerEventCircularEventConsumer -> circuitBreakerEventCircularEventConsumer", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUzMDQ0NA=="}, "originalCommit": {"oid": "99a41d1f1552de28830277d6c65f2bfff38a4422"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMDM3NzA3OnYy", "diffSide": "RIGHT", "path": "resilience4j-spring-boot2/src/main/java/io/github/resilience4j/bulkhead/monitoring/endpoint/BulkheadEventsEndpoint.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNzozNzoxNFrOHOFdtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNzozNzoxNFrOHOFdtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUzMTYzOA==", "bodyText": "remove qualified name", "url": "https://github.com/resilience4j/resilience4j/pull/1156#discussion_r484531638", "createdAt": "2020-09-07T17:37:14Z", "author": {"login": "hexmind"}, "path": "resilience4j-spring-boot2/src/main/java/io/github/resilience4j/bulkhead/monitoring/endpoint/BulkheadEventsEndpoint.java", "diffHunk": "@@ -40,33 +42,34 @@ public BulkheadEventsEndpoint(EventConsumerRegistry<BulkheadEvent> eventConsumer\n \n     @ReadOperation\n     public BulkheadEventsEndpointResponse getAllBulkheadEvents() {\n-        java.util.List<BulkheadEventDTO> response = eventConsumerRegistry.getAllEventConsumer()\n-            .flatMap(CircularEventConsumer::getBufferedEvents)\n+        List<BulkheadEventDTO> response = eventConsumerRegistry.getAllEventConsumer().stream()\n+            .flatMap(bulkheadEventCircularEventConsumer -> bulkheadEventCircularEventConsumer\n+                .getBufferedEvents()\n+                .stream())\n             .sorted(Comparator.comparing(BulkheadEvent::getCreationTime))\n             .map(BulkheadEventDTOFactory::createBulkheadEventDTO)\n-            .toJavaList();\n-\n+            .collect(Collectors.toUnmodifiableList());\n         return new BulkheadEventsEndpointResponse(response);\n     }\n \n     @ReadOperation\n     public BulkheadEventsEndpointResponse getEventsFilteredByBulkheadName(\n         @Selector String bulkheadName) {\n-        java.util.List<BulkheadEventDTO> response = getBulkheadEvent(bulkheadName)\n+        java.util.List<BulkheadEventDTO> response = getBulkheadEvent(bulkheadName).stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99a41d1f1552de28830277d6c65f2bfff38a4422"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMDM3ODE0OnYy", "diffSide": "RIGHT", "path": "resilience4j-spring-boot2/src/main/java/io/github/resilience4j/bulkhead/monitoring/endpoint/BulkheadEventsEndpoint.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNzozNzo1NlrOHOFeVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMDo1ODozM1rOHR8Q-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUzMTc5Ng==", "bodyText": "it looks that only here is toUnmodifiableList called", "url": "https://github.com/resilience4j/resilience4j/pull/1156#discussion_r484531796", "createdAt": "2020-09-07T17:37:56Z", "author": {"login": "hexmind"}, "path": "resilience4j-spring-boot2/src/main/java/io/github/resilience4j/bulkhead/monitoring/endpoint/BulkheadEventsEndpoint.java", "diffHunk": "@@ -40,33 +42,34 @@ public BulkheadEventsEndpoint(EventConsumerRegistry<BulkheadEvent> eventConsumer\n \n     @ReadOperation\n     public BulkheadEventsEndpointResponse getAllBulkheadEvents() {\n-        java.util.List<BulkheadEventDTO> response = eventConsumerRegistry.getAllEventConsumer()\n-            .flatMap(CircularEventConsumer::getBufferedEvents)\n+        List<BulkheadEventDTO> response = eventConsumerRegistry.getAllEventConsumer().stream()\n+            .flatMap(bulkheadEventCircularEventConsumer -> bulkheadEventCircularEventConsumer\n+                .getBufferedEvents()\n+                .stream())\n             .sorted(Comparator.comparing(BulkheadEvent::getCreationTime))\n             .map(BulkheadEventDTOFactory::createBulkheadEventDTO)\n-            .toJavaList();\n-\n+            .collect(Collectors.toUnmodifiableList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99a41d1f1552de28830277d6c65f2bfff38a4422"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ0MTkzOA==", "bodyText": "I wasn't too sure to always use toUnmodifiableList() or simply Collectors.toList(). Although later I used Collectors.toList() mostly. Let me know if using toUnmodifiableList() seems more appropriate instead.", "url": "https://github.com/resilience4j/resilience4j/pull/1156#discussion_r485441938", "createdAt": "2020-09-09T08:43:33Z", "author": {"login": "KrnSaurabh"}, "path": "resilience4j-spring-boot2/src/main/java/io/github/resilience4j/bulkhead/monitoring/endpoint/BulkheadEventsEndpoint.java", "diffHunk": "@@ -40,33 +42,34 @@ public BulkheadEventsEndpoint(EventConsumerRegistry<BulkheadEvent> eventConsumer\n \n     @ReadOperation\n     public BulkheadEventsEndpointResponse getAllBulkheadEvents() {\n-        java.util.List<BulkheadEventDTO> response = eventConsumerRegistry.getAllEventConsumer()\n-            .flatMap(CircularEventConsumer::getBufferedEvents)\n+        List<BulkheadEventDTO> response = eventConsumerRegistry.getAllEventConsumer().stream()\n+            .flatMap(bulkheadEventCircularEventConsumer -> bulkheadEventCircularEventConsumer\n+                .getBufferedEvents()\n+                .stream())\n             .sorted(Comparator.comparing(BulkheadEvent::getCreationTime))\n             .map(BulkheadEventDTOFactory::createBulkheadEventDTO)\n-            .toJavaList();\n-\n+            .collect(Collectors.toUnmodifiableList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUzMTc5Ng=="}, "originalCommit": {"oid": "99a41d1f1552de28830277d6c65f2bfff38a4422"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU3NDkzNg==", "bodyText": "I think it doesn't really matter, since it's not a public method which is used outside of Spring Actuator.", "url": "https://github.com/resilience4j/resilience4j/pull/1156#discussion_r488574936", "createdAt": "2020-09-15T10:58:02Z", "author": {"login": "RobWin"}, "path": "resilience4j-spring-boot2/src/main/java/io/github/resilience4j/bulkhead/monitoring/endpoint/BulkheadEventsEndpoint.java", "diffHunk": "@@ -40,33 +42,34 @@ public BulkheadEventsEndpoint(EventConsumerRegistry<BulkheadEvent> eventConsumer\n \n     @ReadOperation\n     public BulkheadEventsEndpointResponse getAllBulkheadEvents() {\n-        java.util.List<BulkheadEventDTO> response = eventConsumerRegistry.getAllEventConsumer()\n-            .flatMap(CircularEventConsumer::getBufferedEvents)\n+        List<BulkheadEventDTO> response = eventConsumerRegistry.getAllEventConsumer().stream()\n+            .flatMap(bulkheadEventCircularEventConsumer -> bulkheadEventCircularEventConsumer\n+                .getBufferedEvents()\n+                .stream())\n             .sorted(Comparator.comparing(BulkheadEvent::getCreationTime))\n             .map(BulkheadEventDTOFactory::createBulkheadEventDTO)\n-            .toJavaList();\n-\n+            .collect(Collectors.toUnmodifiableList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUzMTc5Ng=="}, "originalCommit": {"oid": "99a41d1f1552de28830277d6c65f2bfff38a4422"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU3NTIyNA==", "bodyText": "if you usually use Collectors.toList()`, please also use it here.", "url": "https://github.com/resilience4j/resilience4j/pull/1156#discussion_r488575224", "createdAt": "2020-09-15T10:58:33Z", "author": {"login": "RobWin"}, "path": "resilience4j-spring-boot2/src/main/java/io/github/resilience4j/bulkhead/monitoring/endpoint/BulkheadEventsEndpoint.java", "diffHunk": "@@ -40,33 +42,34 @@ public BulkheadEventsEndpoint(EventConsumerRegistry<BulkheadEvent> eventConsumer\n \n     @ReadOperation\n     public BulkheadEventsEndpointResponse getAllBulkheadEvents() {\n-        java.util.List<BulkheadEventDTO> response = eventConsumerRegistry.getAllEventConsumer()\n-            .flatMap(CircularEventConsumer::getBufferedEvents)\n+        List<BulkheadEventDTO> response = eventConsumerRegistry.getAllEventConsumer().stream()\n+            .flatMap(bulkheadEventCircularEventConsumer -> bulkheadEventCircularEventConsumer\n+                .getBufferedEvents()\n+                .stream())\n             .sorted(Comparator.comparing(BulkheadEvent::getCreationTime))\n             .map(BulkheadEventDTOFactory::createBulkheadEventDTO)\n-            .toJavaList();\n-\n+            .collect(Collectors.toUnmodifiableList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUzMTc5Ng=="}, "originalCommit": {"oid": "99a41d1f1552de28830277d6c65f2bfff38a4422"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMDM4MTM3OnYy", "diffSide": "RIGHT", "path": "resilience4j-spring-boot2/src/main/java/io/github/resilience4j/ratelimiter/monitoring/endpoint/RateLimiterEventsEndpoint.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNzo0MDoxOFrOHOFgHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNzo0MDoxOFrOHOFgHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUzMjI1Mg==", "bodyText": "\\n.collect", "url": "https://github.com/resilience4j/resilience4j/pull/1156#discussion_r484532252", "createdAt": "2020-09-07T17:40:18Z", "author": {"login": "hexmind"}, "path": "resilience4j-spring-boot2/src/main/java/io/github/resilience4j/ratelimiter/monitoring/endpoint/RateLimiterEventsEndpoint.java", "diffHunk": "@@ -39,37 +41,40 @@ public RateLimiterEventsEndpoint(\n \n     @ReadOperation\n     public RateLimiterEventsEndpointResponse getAllRateLimiterEvents() {\n-        return new RateLimiterEventsEndpointResponse(eventsConsumerRegistry.getAllEventConsumer()\n-            .flatMap(CircularEventConsumer::getBufferedEvents)\n+        return new RateLimiterEventsEndpointResponse(eventsConsumerRegistry.getAllEventConsumer().stream()\n+            .flatMap(rateLimiterEventCircularEventConsumer ->\n+                rateLimiterEventCircularEventConsumer.getBufferedEvents().stream())\n             .sorted(Comparator.comparing(RateLimiterEvent::getCreationTime))\n-            .map(RateLimiterEventDTO::createRateLimiterEventDTO).toJavaList());\n+            .map(RateLimiterEventDTO::createRateLimiterEventDTO)\n+            .collect(Collectors.toList()));\n     }\n \n     @ReadOperation\n     public RateLimiterEventsEndpointResponse getEventsFilteredByRateLimiterName(\n         @Selector String name) {\n-        return new RateLimiterEventsEndpointResponse(getRateLimiterEvents(name)\n-            .map(RateLimiterEventDTO::createRateLimiterEventDTO).toJavaList());\n+        return new RateLimiterEventsEndpointResponse(getRateLimiterEvents(name).stream()\n+            .map(RateLimiterEventDTO::createRateLimiterEventDTO).collect(Collectors.toList()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99a41d1f1552de28830277d6c65f2bfff38a4422"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMDM5MDQzOnYy", "diffSide": "RIGHT", "path": "resilience4j-vavr/src/main/java/io/github/resilience4j/decorators/VavrDecorators.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNzo0NTo1NVrOHOFk3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwODo1ODoxMlrOHO9o_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUzMzQ2OQ==", "bodyText": "Maybe we could keep removed tests and, add Vavr as test-only dependency and use VavrDecorators as a glue?\nWe use Vavr eg. Try class a lot in tests...", "url": "https://github.com/resilience4j/resilience4j/pull/1156#discussion_r484533469", "createdAt": "2020-09-07T17:45:55Z", "author": {"login": "hexmind"}, "path": "resilience4j-vavr/src/main/java/io/github/resilience4j/decorators/VavrDecorators.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ *\n+ *  Copyright 2020: KrnSaurabh\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ *\n+ */\n+package io.github.resilience4j.decorators;\n+\n+import io.github.resilience4j.bulkhead.Bulkhead;\n+import io.github.resilience4j.bulkhead.VavrBulkhead;\n+import io.github.resilience4j.cache.Cache;\n+import io.github.resilience4j.cache.VavrCache;\n+import io.github.resilience4j.circuitbreaker.CircuitBreaker;\n+import io.github.resilience4j.circuitbreaker.VavrCircuitBreaker;\n+import io.github.resilience4j.core.CheckFunctionUtils;\n+import io.github.resilience4j.ratelimiter.RateLimiter;\n+import io.github.resilience4j.ratelimiter.VavrRateLimiter;\n+import io.github.resilience4j.retry.Retry;\n+import io.github.resilience4j.retry.VavrRetry;\n+import io.vavr.CheckedFunction0;\n+import io.vavr.CheckedFunction1;\n+import io.vavr.CheckedFunction2;\n+import io.vavr.CheckedRunnable;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+\n+public interface VavrDecorators {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99a41d1f1552de28830277d6c65f2bfff38a4422"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ1MjAyOA==", "bodyText": "I have added resilience4j-vavr module as test dependency wherever needed. Here since we moved vavr related decorators in resilience4j-vavr, I thought its better to move related tests along for the ease of visibility.", "url": "https://github.com/resilience4j/resilience4j/pull/1156#discussion_r485452028", "createdAt": "2020-09-09T08:58:12Z", "author": {"login": "KrnSaurabh"}, "path": "resilience4j-vavr/src/main/java/io/github/resilience4j/decorators/VavrDecorators.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ *\n+ *  Copyright 2020: KrnSaurabh\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ *\n+ */\n+package io.github.resilience4j.decorators;\n+\n+import io.github.resilience4j.bulkhead.Bulkhead;\n+import io.github.resilience4j.bulkhead.VavrBulkhead;\n+import io.github.resilience4j.cache.Cache;\n+import io.github.resilience4j.cache.VavrCache;\n+import io.github.resilience4j.circuitbreaker.CircuitBreaker;\n+import io.github.resilience4j.circuitbreaker.VavrCircuitBreaker;\n+import io.github.resilience4j.core.CheckFunctionUtils;\n+import io.github.resilience4j.ratelimiter.RateLimiter;\n+import io.github.resilience4j.ratelimiter.VavrRateLimiter;\n+import io.github.resilience4j.retry.Retry;\n+import io.github.resilience4j.retry.VavrRetry;\n+import io.vavr.CheckedFunction0;\n+import io.vavr.CheckedFunction1;\n+import io.vavr.CheckedFunction2;\n+import io.vavr.CheckedRunnable;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+\n+public interface VavrDecorators {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUzMzQ2OQ=="}, "originalCommit": {"oid": "99a41d1f1552de28830277d6c65f2bfff38a4422"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 6, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}