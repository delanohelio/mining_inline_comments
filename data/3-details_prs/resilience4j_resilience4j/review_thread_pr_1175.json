{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwMjcyMTc2", "number": 1175, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxOTozMzoxM1rOEmPCsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxOTozMzoxM1rOEmPCsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTI3Nzk1OnYy", "diffSide": "RIGHT", "path": "resilience4j-spring/src/test/java/io/github/resilience4j/fallback/FallbackMethodTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxOTozMzoxM1rOHWJX4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMDowOToxMlrOHWjGeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk4NDI4OQ==", "bodyText": "just cosmetic/convention changes (empty lines):\nFallbackMethod fallbackMethod = FallbackMethod\n            .create(\"fallbackMethod\", testMethod, new Object[]{\"test\", \"test\"}, target);\n\nString fallback = fallbackMethod.fallback(new IllegalStateException(\"err\");\n\n assertThat(fallback)).isEqualTo(\"recovered-IllegalStateException\");", "url": "https://github.com/resilience4j/resilience4j/pull/1175#discussion_r492984289", "createdAt": "2020-09-22T19:33:13Z", "author": {"login": "hexmind"}, "path": "resilience4j-spring/src/test/java/io/github/resilience4j/fallback/FallbackMethodTest.java", "diffHunk": "@@ -56,6 +56,16 @@ public void fallbackGlobalExceptionWithSameMethodReturnType() throws Throwable {\n             .isEqualTo(\"recovered-IllegalStateException\");\n     }\n \n+    @Test\n+    public void fallbackGlobalExceptionWithSameMethodReturnTypeAndMultipleParameters() throws Throwable {\n+        FallbackMethodTest target = new FallbackMethodTest();\n+        Method testMethod = target.getClass().getMethod(\"multipleParameterTestMethod\", String.class, String.class);\n+        FallbackMethod fallbackMethod = FallbackMethod\n+            .create(\"fallbackMethod\", testMethod, new Object[]{\"test\", \"test\"}, target);\n+        assertThat(fallbackMethod.fallback(new IllegalStateException(\"err\")))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30bff8f62b649e5172863f3a777fb85cdae90746"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQwNTgxOA==", "bodyText": "Added the empty lines. Also I had it tested with the previous implementation to see that the test fails \ud83d\ude42", "url": "https://github.com/resilience4j/resilience4j/pull/1175#discussion_r493405818", "createdAt": "2020-09-23T10:09:12Z", "author": {"login": "vanadzins"}, "path": "resilience4j-spring/src/test/java/io/github/resilience4j/fallback/FallbackMethodTest.java", "diffHunk": "@@ -56,6 +56,16 @@ public void fallbackGlobalExceptionWithSameMethodReturnType() throws Throwable {\n             .isEqualTo(\"recovered-IllegalStateException\");\n     }\n \n+    @Test\n+    public void fallbackGlobalExceptionWithSameMethodReturnTypeAndMultipleParameters() throws Throwable {\n+        FallbackMethodTest target = new FallbackMethodTest();\n+        Method testMethod = target.getClass().getMethod(\"multipleParameterTestMethod\", String.class, String.class);\n+        FallbackMethod fallbackMethod = FallbackMethod\n+            .create(\"fallbackMethod\", testMethod, new Object[]{\"test\", \"test\"}, target);\n+        assertThat(fallbackMethod.fallback(new IllegalStateException(\"err\")))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk4NDI4OQ=="}, "originalCommit": {"oid": "30bff8f62b649e5172863f3a777fb85cdae90746"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 8, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}