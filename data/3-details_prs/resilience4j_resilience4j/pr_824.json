{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4MjY1MzU4", "number": 824, "title": "Fix wait time calculation in AtomicRateLimiter", "bodyText": "Bug fix of issue #822. Issue was introduced in PR #672.\nAffected versions: 1.2.0\nSummary: during concurrent permission reservations we were rounding down count of full cycles to wait for next permissions. So it was possible to get permissionsPerCycle - 1 more permissions in the same cycle", "createdAt": "2020-01-28T22:21:55Z", "url": "https://github.com/resilience4j/resilience4j/pull/824", "merged": true, "mergeCommit": {"oid": "2508cd05d3bf2dd9a91f273f0b6787b1073ec989"}, "closed": true, "closedAt": "2020-01-29T10:00:43Z", "author": {"login": "storozhukBM"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb-4-rrgH2gAyMzY4MjY1MzU4OmM5MzhiOTU4MWZiY2NlZjg2YjM2ZmEyNDVlNTdmNjM3MDg0YzIyNGQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb_C-yegFqTM0OTk4NDk1MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c938b9581fbccef86b36fa245e57f637084c224d", "author": {"user": {"login": "storozhukBM", "name": "Bohdan Storozhuk"}}, "url": "https://github.com/resilience4j/resilience4j/commit/c938b9581fbccef86b36fa245e57f637084c224d", "committedDate": "2020-01-28T22:21:23Z", "message": "Fix wait time calculation in AtomicRateLimiter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5OTA1NTY0", "url": "https://github.com/resilience4j/resilience4j/pull/824#pullrequestreview-349905564", "createdAt": "2020-01-29T07:29:57Z", "commit": {"oid": "c938b9581fbccef86b36fa245e57f637084c224d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNzoyOTo1OFrOFi-z8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNzoyOTo1OFrOFi-z8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIyNTAxMA==", "bodyText": "Could you please remove the System.out.println from the test?", "url": "https://github.com/resilience4j/resilience4j/pull/824#discussion_r372225010", "createdAt": "2020-01-29T07:29:58Z", "author": {"login": "RobWin"}, "path": "resilience4j-ratelimiter/src/test/java/io/github/resilience4j/ratelimiter/internal/RateLimitersImplementationTest.java", "diffHunk": "@@ -66,8 +74,62 @@ public void tryAquiringBigNumberOfPermitsAtEndOfCycleTest() {\n         then(retryInSecondCyclePermission).isTrue();\n     }\n \n+    @Test\n+    public void reservePermissionsUpfront() throws InterruptedException {\n+        final int limitForPeriod = 3;\n+        final int tasksNum = 9;\n+        Duration limitRefreshPeriod = Duration.ofMillis(1000);\n+        Duration timeoutDuration = Duration.ofMillis(1200);\n+\n+        Duration durationToWait = limitRefreshPeriod.multipliedBy((long) ceil(((double) tasksNum) / limitForPeriod));\n+\n+        RateLimiterConfig config = RateLimiterConfig.custom()\n+            .limitForPeriod(limitForPeriod)\n+            .limitRefreshPeriod(limitRefreshPeriod)\n+            .timeoutDuration(timeoutDuration)\n+            .build();\n+\n+        ExecutorService executorService = Executors.newFixedThreadPool(tasksNum);\n+        List<Duration> times = synchronizedList(new ArrayList<>(9));\n+\n+        RateLimiter limiter = buildRateLimiter(config);\n+        RateLimiter.Metrics metrics = limiter.getMetrics();\n+        waitForRefresh(metrics, config, '$');\n+\n+        LocalDateTime testStart = LocalDateTime.now();\n+        Runnable runnable = RateLimiter.decorateRunnable(limiter, () -> {\n+            times.add(Duration.between(testStart, LocalDateTime.now()));\n+        });\n+        for (int i = 0; i < tasksNum; i++) {\n+            executorService.submit(runnable);\n+        }\n+\n+        executorService.shutdown();\n+        boolean terminated = executorService.awaitTermination(durationToWait.toMillis(), TimeUnit.MILLISECONDS);\n+        then(terminated).isTrue();\n+\n+\n+        ArrayList<Long> runningDeltas = new ArrayList<>();\n+        long previousDuration = times.get(0).toMillis();\n+        for (Duration time : times) {\n+            long current = time.toMillis();\n+            long delta = Math.abs(previousDuration - current);\n+            runningDeltas.add(delta);\n+            System.out.println(\"\" + current + \" [\" + delta + \"]\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c938b9581fbccef86b36fa245e57f637084c224d"}, "originalPosition": 62}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c517aba2ffa6642f79c4b01d76d53be360b526ca", "author": {"user": {"login": "storozhukBM", "name": "Bohdan Storozhuk"}}, "url": "https://github.com/resilience4j/resilience4j/commit/c517aba2ffa6642f79c4b01d76d53be360b526ca", "committedDate": "2020-01-29T09:00:04Z", "message": "Fix review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5OTg0OTUx", "url": "https://github.com/resilience4j/resilience4j/pull/824#pullrequestreview-349984951", "createdAt": "2020-01-29T10:00:33Z", "commit": {"oid": "c517aba2ffa6642f79c4b01d76d53be360b526ca"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1826, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}