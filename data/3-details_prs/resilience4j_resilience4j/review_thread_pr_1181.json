{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0ODM0MDA4", "number": 1181, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwNzo0NDo1NVrOEo6JuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwOToyNToxNlrOEo8jOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMzMxMjU3OnYy", "diffSide": "RIGHT", "path": "resilience4j-kotlin/src/main/kotlin/io/github/resilience4j/kotlin/timelimiter/TimeLimiter.kt", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwNzo0NDo1NVrOHaRL-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwODo0MToyNFrOHaTS-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzMwNjYxOA==", "bodyText": "Would it even make sense to rethrow a  TimeoutException? That means:  Map a kotlinx.coroutines.TimeoutCancellationException to a java.util.concurrent.TimeoutException?\nIt might solve the following issue -> #1123", "url": "https://github.com/resilience4j/resilience4j/pull/1181#discussion_r497306618", "createdAt": "2020-09-30T07:44:55Z", "author": {"login": "RobWin"}, "path": "resilience4j-kotlin/src/main/kotlin/io/github/resilience4j/kotlin/timelimiter/TimeLimiter.kt", "diffHunk": "@@ -45,9 +46,9 @@ suspend fun <T> TimeLimiter.executeSuspendFunction(block: suspend () -> T): T =\n         }\n     } catch (t: Throwable) {\n         if (isCancellation(coroutineContext, t)) {\n-            onError(t)\n+            onError(TimeoutException(t.message))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd81b1f1f571ab4a66fb0ef80826c4f07a3017ca"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzMzMTg4MQ==", "bodyText": "The nesting part in Kotlin is indeed a problem. It's something that I solved locally in my application as not to mess the timeLimiter error signals, which, as the comments in the code suggest actually throw a coroutine TimeoutCancellationException.\nCatching the exception and mapping it to a java.util.concurrent.TimeoutException does change the behaviour, and people currently handling CancellationExceptions should be made aware of this change.\nNevertheless, I am in favor of this change, which would also allow me to get rid of the helper function that I wrote here: #1168 (comment)", "url": "https://github.com/resilience4j/resilience4j/pull/1181#discussion_r497331881", "createdAt": "2020-09-30T08:26:49Z", "author": {"login": "ZzAve"}, "path": "resilience4j-kotlin/src/main/kotlin/io/github/resilience4j/kotlin/timelimiter/TimeLimiter.kt", "diffHunk": "@@ -45,9 +46,9 @@ suspend fun <T> TimeLimiter.executeSuspendFunction(block: suspend () -> T): T =\n         }\n     } catch (t: Throwable) {\n         if (isCancellation(coroutineContext, t)) {\n-            onError(t)\n+            onError(TimeoutException(t.message))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzMwNjYxOA=="}, "originalCommit": {"oid": "cd81b1f1f571ab4a66fb0ef80826c4f07a3017ca"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM0MTE3OQ==", "bodyText": "Yes, we have to document this behavior in the JavaDoc.\nI think it makes sense to map TimeoutCancellationException  to a TimeoutException, if we also record it as a TimeoutException.\nI guess this problem is related to issue #758", "url": "https://github.com/resilience4j/resilience4j/pull/1181#discussion_r497341179", "createdAt": "2020-09-30T08:41:24Z", "author": {"login": "RobWin"}, "path": "resilience4j-kotlin/src/main/kotlin/io/github/resilience4j/kotlin/timelimiter/TimeLimiter.kt", "diffHunk": "@@ -45,9 +46,9 @@ suspend fun <T> TimeLimiter.executeSuspendFunction(block: suspend () -> T): T =\n         }\n     } catch (t: Throwable) {\n         if (isCancellation(coroutineContext, t)) {\n-            onError(t)\n+            onError(TimeoutException(t.message))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzMwNjYxOA=="}, "originalCommit": {"oid": "cd81b1f1f571ab4a66fb0ef80826c4f07a3017ca"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMzcwNTUyOnYy", "diffSide": "RIGHT", "path": "resilience4j-kotlin/src/main/kotlin/io/github/resilience4j/kotlin/timelimiter/TimeLimiter.kt", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwOToyNToxNlrOHaU-XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMDoxMzoxMVrOHaWt-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM2ODY2OA==", "bodyText": "I think we should not shed the root cause (stack) here, or?\nCan you use TimeoutException(t).\nDoes that work in Kotlin?", "url": "https://github.com/resilience4j/resilience4j/pull/1181#discussion_r497368668", "createdAt": "2020-09-30T09:25:16Z", "author": {"login": "RobWin"}, "path": "resilience4j-kotlin/src/main/kotlin/io/github/resilience4j/kotlin/timelimiter/TimeLimiter.kt", "diffHunk": "@@ -45,10 +47,12 @@ suspend fun <T> TimeLimiter.executeSuspendFunction(block: suspend () -> T): T =\n         }\n     } catch (t: Throwable) {\n         if (isCancellation(coroutineContext, t)) {\n-            onError(t)\n-        } else {\n-            onSuccess()\n+            val timeoutException = TimeoutException(t.message)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5281dcb883317da294ce15e95d75f979a28473a"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM4MDExMw==", "bodyText": "Do we need to add @Throws(TimeoutException::class) to the function? I guess it's not necessary, because the function will never be used directly in Java code.", "url": "https://github.com/resilience4j/resilience4j/pull/1181#discussion_r497380113", "createdAt": "2020-09-30T09:44:13Z", "author": {"login": "RobWin"}, "path": "resilience4j-kotlin/src/main/kotlin/io/github/resilience4j/kotlin/timelimiter/TimeLimiter.kt", "diffHunk": "@@ -45,10 +47,12 @@ suspend fun <T> TimeLimiter.executeSuspendFunction(block: suspend () -> T): T =\n         }\n     } catch (t: Throwable) {\n         if (isCancellation(coroutineContext, t)) {\n-            onError(t)\n-        } else {\n-            onSuccess()\n+            val timeoutException = TimeoutException(t.message)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM2ODY2OA=="}, "originalCommit": {"oid": "a5281dcb883317da294ce15e95d75f979a28473a"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM4NjU4MA==", "bodyText": "TimeoutException only has two constructors:\n    public TimeoutException() \n    public TimeoutException(String message) \n\nNot really any way to add a cause or anything to it. That is a bit unfortunate though.  and I agree a stack trace would be very valuable.\nOf course, we can always use extension since TimeoutException extends Exception , which does have a 'cause' variable.", "url": "https://github.com/resilience4j/resilience4j/pull/1181#discussion_r497386580", "createdAt": "2020-09-30T09:54:37Z", "author": {"login": "ZzAve"}, "path": "resilience4j-kotlin/src/main/kotlin/io/github/resilience4j/kotlin/timelimiter/TimeLimiter.kt", "diffHunk": "@@ -45,10 +47,12 @@ suspend fun <T> TimeLimiter.executeSuspendFunction(block: suspend () -> T): T =\n         }\n     } catch (t: Throwable) {\n         if (isCancellation(coroutineContext, t)) {\n-            onError(t)\n-        } else {\n-            onSuccess()\n+            val timeoutException = TimeoutException(t.message)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM2ODY2OA=="}, "originalCommit": {"oid": "a5281dcb883317da294ce15e95d75f979a28473a"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM5NzI0Mg==", "bodyText": "True.\nWe could do\nval timeoutException = TimeoutException(String.format(\"TimeLimiter '%s' recorded a timeout exception.\" , name))\ntimeoutException.stackTrace = t.stackTrace\n\nWe are doing a similar thing in https://github.com/resilience4j/resilience4j/blob/master/resilience4j-timelimiter/src/main/java/io/github/resilience4j/timelimiter/internal/TimeLimiterImpl.java#L52 and also add the TimeLimiter name to the exception.\nI think we should match this behavior, if possible.", "url": "https://github.com/resilience4j/resilience4j/pull/1181#discussion_r497397242", "createdAt": "2020-09-30T10:13:11Z", "author": {"login": "RobWin"}, "path": "resilience4j-kotlin/src/main/kotlin/io/github/resilience4j/kotlin/timelimiter/TimeLimiter.kt", "diffHunk": "@@ -45,10 +47,12 @@ suspend fun <T> TimeLimiter.executeSuspendFunction(block: suspend () -> T): T =\n         }\n     } catch (t: Throwable) {\n         if (isCancellation(coroutineContext, t)) {\n-            onError(t)\n-        } else {\n-            onSuccess()\n+            val timeoutException = TimeoutException(t.message)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM2ODY2OA=="}, "originalCommit": {"oid": "a5281dcb883317da294ce15e95d75f979a28473a"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 16, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}