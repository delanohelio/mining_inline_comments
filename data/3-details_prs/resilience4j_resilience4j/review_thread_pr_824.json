{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4MjY1MzU4", "number": 824, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNzoyOTo1OFrODbebrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNzoyOTo1OFrODbebrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMTM2NzUxOnYy", "diffSide": "RIGHT", "path": "resilience4j-ratelimiter/src/test/java/io/github/resilience4j/ratelimiter/internal/RateLimitersImplementationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNzoyOTo1OFrOFi-z8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNzoyOTo1OFrOFi-z8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIyNTAxMA==", "bodyText": "Could you please remove the System.out.println from the test?", "url": "https://github.com/resilience4j/resilience4j/pull/824#discussion_r372225010", "createdAt": "2020-01-29T07:29:58Z", "author": {"login": "RobWin"}, "path": "resilience4j-ratelimiter/src/test/java/io/github/resilience4j/ratelimiter/internal/RateLimitersImplementationTest.java", "diffHunk": "@@ -66,8 +74,62 @@ public void tryAquiringBigNumberOfPermitsAtEndOfCycleTest() {\n         then(retryInSecondCyclePermission).isTrue();\n     }\n \n+    @Test\n+    public void reservePermissionsUpfront() throws InterruptedException {\n+        final int limitForPeriod = 3;\n+        final int tasksNum = 9;\n+        Duration limitRefreshPeriod = Duration.ofMillis(1000);\n+        Duration timeoutDuration = Duration.ofMillis(1200);\n+\n+        Duration durationToWait = limitRefreshPeriod.multipliedBy((long) ceil(((double) tasksNum) / limitForPeriod));\n+\n+        RateLimiterConfig config = RateLimiterConfig.custom()\n+            .limitForPeriod(limitForPeriod)\n+            .limitRefreshPeriod(limitRefreshPeriod)\n+            .timeoutDuration(timeoutDuration)\n+            .build();\n+\n+        ExecutorService executorService = Executors.newFixedThreadPool(tasksNum);\n+        List<Duration> times = synchronizedList(new ArrayList<>(9));\n+\n+        RateLimiter limiter = buildRateLimiter(config);\n+        RateLimiter.Metrics metrics = limiter.getMetrics();\n+        waitForRefresh(metrics, config, '$');\n+\n+        LocalDateTime testStart = LocalDateTime.now();\n+        Runnable runnable = RateLimiter.decorateRunnable(limiter, () -> {\n+            times.add(Duration.between(testStart, LocalDateTime.now()));\n+        });\n+        for (int i = 0; i < tasksNum; i++) {\n+            executorService.submit(runnable);\n+        }\n+\n+        executorService.shutdown();\n+        boolean terminated = executorService.awaitTermination(durationToWait.toMillis(), TimeUnit.MILLISECONDS);\n+        then(terminated).isTrue();\n+\n+\n+        ArrayList<Long> runningDeltas = new ArrayList<>();\n+        long previousDuration = times.get(0).toMillis();\n+        for (Duration time : times) {\n+            long current = time.toMillis();\n+            long delta = Math.abs(previousDuration - current);\n+            runningDeltas.add(delta);\n+            System.out.println(\"\" + current + \" [\" + delta + \"]\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c938b9581fbccef86b36fa245e57f637084c224d"}, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 47, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}