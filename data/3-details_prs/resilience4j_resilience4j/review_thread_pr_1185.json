{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2MDQxMTg5", "number": 1185, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMzowNTo1OFrOEpdyhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMzowNTo1OFrOEpdyhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTE1MTQxOnYy", "diffSide": "RIGHT", "path": "resilience4j-framework-common/src/main/java/io/github/resilience4j/common/retry/configuration/RetryConfigurationProperties.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMzowNTo1OFrOHbJckA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxODo0NzozOVrOHbW2RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIyODM2OA==", "bodyText": "Can we use Duration and call it exponentialMaxWaitDuration?", "url": "https://github.com/resilience4j/resilience4j/pull/1185#discussion_r498228368", "createdAt": "2020-10-01T13:05:58Z", "author": {"login": "RobWin"}, "path": "resilience4j-framework-common/src/main/java/io/github/resilience4j/common/retry/configuration/RetryConfigurationProperties.java", "diffHunk": "@@ -231,49 +252,62 @@ private void configureRetryIntervalFunction(InstanceProperties properties,\n \n         @Nullable\n         private Integer maxAttempts;\n-        /*\n+\n+        /**\n          * retry exception predicate class to be used to evaluate the exception to retry or not\n          */\n         @Nullable\n         private Class<? extends Predicate<Throwable>> retryExceptionPredicate;\n-        /*\n+\n+        /**\n          * retry setResultPredicate predicate class to be used to evaluate the result to retry or not\n          */\n         @Nullable\n         private Class<? extends Predicate<Object>> resultPredicate;\n-        /*\n+\n+        /**\n          * list of retry exception classes\n          */\n         @SuppressWarnings(\"unchecked\")\n         @Nullable\n         private Class<? extends Throwable>[] retryExceptions;\n-        /*\n+\n+        /**\n          * list of retry ignored exception classes\n          */\n         @SuppressWarnings(\"unchecked\")\n         @Nullable\n         private Class<? extends Throwable>[] ignoreExceptions;\n-        /*\n+\n+        /**\n          * event buffer size for generated retry events\n          */\n         @Nullable\n         private Integer eventConsumerBufferSize;\n-        /*\n+\n+        /**\n          * flag to enable Exponential backoff policy or not for retry policy delay\n          */\n         @Nullable\n         private Boolean enableExponentialBackoff;\n-        /*\n+\n+        /**\n          * exponential backoff multiplier value\n          */\n         private Double exponentialBackoffMultiplier;\n \n-        /*\n+        /**\n+         * exponential max interval value\n+         */\n+        private Long exponentialMaxIntervalMillis;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3b428e513cc6b82f1625eaebfd8a801a11c9f30"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ0Nzk0MA==", "bodyText": "good idea, done", "url": "https://github.com/resilience4j/resilience4j/pull/1185#discussion_r498447940", "createdAt": "2020-10-01T18:47:39Z", "author": {"login": "hexmind"}, "path": "resilience4j-framework-common/src/main/java/io/github/resilience4j/common/retry/configuration/RetryConfigurationProperties.java", "diffHunk": "@@ -231,49 +252,62 @@ private void configureRetryIntervalFunction(InstanceProperties properties,\n \n         @Nullable\n         private Integer maxAttempts;\n-        /*\n+\n+        /**\n          * retry exception predicate class to be used to evaluate the exception to retry or not\n          */\n         @Nullable\n         private Class<? extends Predicate<Throwable>> retryExceptionPredicate;\n-        /*\n+\n+        /**\n          * retry setResultPredicate predicate class to be used to evaluate the result to retry or not\n          */\n         @Nullable\n         private Class<? extends Predicate<Object>> resultPredicate;\n-        /*\n+\n+        /**\n          * list of retry exception classes\n          */\n         @SuppressWarnings(\"unchecked\")\n         @Nullable\n         private Class<? extends Throwable>[] retryExceptions;\n-        /*\n+\n+        /**\n          * list of retry ignored exception classes\n          */\n         @SuppressWarnings(\"unchecked\")\n         @Nullable\n         private Class<? extends Throwable>[] ignoreExceptions;\n-        /*\n+\n+        /**\n          * event buffer size for generated retry events\n          */\n         @Nullable\n         private Integer eventConsumerBufferSize;\n-        /*\n+\n+        /**\n          * flag to enable Exponential backoff policy or not for retry policy delay\n          */\n         @Nullable\n         private Boolean enableExponentialBackoff;\n-        /*\n+\n+        /**\n          * exponential backoff multiplier value\n          */\n         private Double exponentialBackoffMultiplier;\n \n-        /*\n+        /**\n+         * exponential max interval value\n+         */\n+        private Long exponentialMaxIntervalMillis;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIyODM2OA=="}, "originalCommit": {"oid": "f3b428e513cc6b82f1625eaebfd8a801a11c9f30"}, "originalPosition": 169}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 20, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}