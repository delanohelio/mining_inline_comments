{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczODA5NDQ5", "number": 902, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMjo1MTo0NlrOEcj2WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMDoxNzo1NFrOEdJ-2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MzgyOTM3OnYy", "diffSide": "RIGHT", "path": "optaplanner-build-parent/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMjo1MTo0NlrOHHKlHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMjo1MTo0NlrOHHKlHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI3NTQyMw==", "bodyText": "This is the single namespace we have for both the <solver/> and <benchmark/>.", "url": "https://github.com/kiegroup/optaplanner/pull/902#discussion_r477275423", "createdAt": "2020-08-26T12:51:46Z", "author": {"login": "rsynek"}, "path": "optaplanner-build-parent/pom.xml", "diffHunk": "@@ -840,6 +840,31 @@\n             </execution>\n           </executions>\n         </plugin>\n+        <plugin>\n+          <groupId>org.codehaus.mojo</groupId>\n+          <artifactId>jaxb2-maven-plugin</artifactId>\n+          <version>2.5.0</version>\n+          <executions>\n+            <execution>\n+              <id>schemagen</id>\n+              <goals>\n+                <goal>schemagen</goal>\n+              </goals>\n+            </execution>\n+          </executions>\n+          <configuration>\n+            <clearOutputDir>true</clearOutputDir>\n+            <createJavaDocAnnotations>false</createJavaDocAnnotations>\n+            <generateEpisode>false</generateEpisode>\n+            <outputDirectory>${project.build.outputDirectory}</outputDirectory>\n+            <transformSchemas>\n+              <transformSchema>\n+                <uri>https://www.optaplanner.org/xsd/optaplanner</uri>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "865139133529354fcd086b6376470417a27d715f"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MzkxMzYyOnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/io/jaxb/GenericJaxbIO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMzoxMjo0NVrOHHLZgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMzoxMjo0NVrOHHLZgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI4ODgzMg==", "bodyText": "As we agreed, we don't validate the input solver config XML. We use the validation just in tests to make sure the solver config XML is valid by the generated XSD.", "url": "https://github.com/kiegroup/optaplanner/pull/902#discussion_r477288832", "createdAt": "2020-08-26T13:12:45Z", "author": {"login": "rsynek"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/io/jaxb/GenericJaxbIO.java", "diffHunk": "@@ -0,0 +1,318 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.io.jaxb;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.Deque;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.bind.JAXBContext;\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Marshaller;\n+import javax.xml.bind.Unmarshaller;\n+import javax.xml.bind.UnmarshallerHandler;\n+import javax.xml.bind.ValidationEvent;\n+import javax.xml.bind.util.ValidationEventCollector;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMResult;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.transform.stream.StreamSource;\n+import javax.xml.validation.Schema;\n+import javax.xml.validation.SchemaFactory;\n+\n+import org.optaplanner.core.impl.io.OptaPlannerXmlSerializationException;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.XMLFilter;\n+import org.xml.sax.XMLReader;\n+import org.xml.sax.helpers.XMLFilterImpl;\n+\n+public final class GenericJaxbIO<T> implements JaxbIO<T> {\n+    private static final int DEFAULT_INDENTATION = 2;\n+\n+    private static final String ERR_MSG_WRITE = \"Unable to write the %s to XML.\";\n+    private static final String ERR_MSG_READ = \"Unable to read the (%s) from XML.\";\n+\n+    private final JAXBContext jaxbContext;\n+    private final Marshaller marshaller;\n+    private final Class<T> rootClass;\n+    private final int indentation;\n+\n+    public GenericJaxbIO(Class<T> rootClass) {\n+        this(rootClass, DEFAULT_INDENTATION);\n+    }\n+\n+    public GenericJaxbIO(Class<T> rootClass, int indentation) {\n+        Objects.requireNonNull(rootClass);\n+        this.rootClass = rootClass;\n+        this.indentation = indentation;\n+        try {\n+            jaxbContext = JAXBContext.newInstance(rootClass);\n+            marshaller = jaxbContext.createMarshaller();\n+            marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);\n+            marshaller.setProperty(Marshaller.JAXB_ENCODING, StandardCharsets.UTF_8.toString());\n+        } catch (JAXBException jaxbException) {\n+            String errMessage = String.format(\"Unable to create JAXB Marshaller for a root element class (%s).\",\n+                    rootClass.getName());\n+            throw new OptaPlannerXmlSerializationException(errMessage, jaxbException);\n+        }\n+    }\n+\n+    @Override\n+    public T read(Reader reader) {\n+        Objects.requireNonNull(reader);\n+        try {\n+            return (T) createUnmarshaller().unmarshal(reader);\n+        } catch (JAXBException jaxbException) {\n+            String errMessage = String.format(ERR_MSG_READ, rootClass.getName());\n+            throw new OptaPlannerXmlSerializationException(errMessage, jaxbException);\n+        }\n+    }\n+\n+    public T readAndValidate(Reader reader, String schemaResource) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "865139133529354fcd086b6376470417a27d715f"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4OTk2Nzg0OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/io/jaxb/GenericJaxbIO.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwOTo0ODoxN1rOHIIyTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMjoxNTo1NVrOHINk8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI5NDYwNw==", "bodyText": "soft: I think putting error messages in a constant - if it's only used once - is a form of unneeded indirection, making the code harder to read (code is read 10 times more than it it written) because it reduces \"vertical density\" (that which belongs together is together).\nIn this case, the ERR_MSG_READ is used more than once, but that's often a sign that multiple different error causes are being reported as the same error, providing less information to the user. See examples below.", "url": "https://github.com/kiegroup/optaplanner/pull/902#discussion_r478294607", "createdAt": "2020-08-27T09:48:17Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/io/jaxb/GenericJaxbIO.java", "diffHunk": "@@ -0,0 +1,318 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.io.jaxb;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.Deque;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.bind.JAXBContext;\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Marshaller;\n+import javax.xml.bind.Unmarshaller;\n+import javax.xml.bind.UnmarshallerHandler;\n+import javax.xml.bind.ValidationEvent;\n+import javax.xml.bind.util.ValidationEventCollector;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMResult;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.transform.stream.StreamSource;\n+import javax.xml.validation.Schema;\n+import javax.xml.validation.SchemaFactory;\n+\n+import org.optaplanner.core.impl.io.OptaPlannerXmlSerializationException;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.XMLFilter;\n+import org.xml.sax.XMLReader;\n+import org.xml.sax.helpers.XMLFilterImpl;\n+\n+public final class GenericJaxbIO<T> implements JaxbIO<T> {\n+    private static final int DEFAULT_INDENTATION = 2;\n+\n+    private static final String ERR_MSG_WRITE = \"Unable to write the %s to XML.\";\n+    private static final String ERR_MSG_READ = \"Unable to read the (%s) from XML.\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d0bed8beead1d5dbf6e20bd8eb5556f77321596"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI5ODczMA==", "bodyText": "These error message formatting are not consistent with our normal formatting \"... parameterName (parameterValue) ...\"\nSo\n\"Unable to write the %s to XML.\"\n=> \"Unable to write rootClass (%s) to XML.\"", "url": "https://github.com/kiegroup/optaplanner/pull/902#discussion_r478298730", "createdAt": "2020-08-27T09:55:28Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/io/jaxb/GenericJaxbIO.java", "diffHunk": "@@ -0,0 +1,318 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.io.jaxb;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.Deque;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.bind.JAXBContext;\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Marshaller;\n+import javax.xml.bind.Unmarshaller;\n+import javax.xml.bind.UnmarshallerHandler;\n+import javax.xml.bind.ValidationEvent;\n+import javax.xml.bind.util.ValidationEventCollector;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMResult;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.transform.stream.StreamSource;\n+import javax.xml.validation.Schema;\n+import javax.xml.validation.SchemaFactory;\n+\n+import org.optaplanner.core.impl.io.OptaPlannerXmlSerializationException;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.XMLFilter;\n+import org.xml.sax.XMLReader;\n+import org.xml.sax.helpers.XMLFilterImpl;\n+\n+public final class GenericJaxbIO<T> implements JaxbIO<T> {\n+    private static final int DEFAULT_INDENTATION = 2;\n+\n+    private static final String ERR_MSG_WRITE = \"Unable to write the %s to XML.\";\n+    private static final String ERR_MSG_READ = \"Unable to read the (%s) from XML.\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI5NDYwNw=="}, "originalCommit": {"oid": "1d0bed8beead1d5dbf6e20bd8eb5556f77321596"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI5OTYwNQ==", "bodyText": "A rootClass isn't written to XML, it's marshalled to XML.\nWe typically favor \"Failed to\" instead of \"Unable to\".\n=> \"Failed to marshall rootClass (%s) to XML.\"", "url": "https://github.com/kiegroup/optaplanner/pull/902#discussion_r478299605", "createdAt": "2020-08-27T09:56:59Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/io/jaxb/GenericJaxbIO.java", "diffHunk": "@@ -0,0 +1,318 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.io.jaxb;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.Deque;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.bind.JAXBContext;\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Marshaller;\n+import javax.xml.bind.Unmarshaller;\n+import javax.xml.bind.UnmarshallerHandler;\n+import javax.xml.bind.ValidationEvent;\n+import javax.xml.bind.util.ValidationEventCollector;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMResult;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.transform.stream.StreamSource;\n+import javax.xml.validation.Schema;\n+import javax.xml.validation.SchemaFactory;\n+\n+import org.optaplanner.core.impl.io.OptaPlannerXmlSerializationException;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.XMLFilter;\n+import org.xml.sax.XMLReader;\n+import org.xml.sax.helpers.XMLFilterImpl;\n+\n+public final class GenericJaxbIO<T> implements JaxbIO<T> {\n+    private static final int DEFAULT_INDENTATION = 2;\n+\n+    private static final String ERR_MSG_WRITE = \"Unable to write the %s to XML.\";\n+    private static final String ERR_MSG_READ = \"Unable to read the (%s) from XML.\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI5NDYwNw=="}, "originalCommit": {"oid": "1d0bed8beead1d5dbf6e20bd8eb5556f77321596"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM3MzEwNA==", "bodyText": "Only messages that repeat are defined as constants. However, I changed the message in a couple of places to make it more specific.\nThanks.", "url": "https://github.com/kiegroup/optaplanner/pull/902#discussion_r478373104", "createdAt": "2020-08-27T12:15:55Z", "author": {"login": "rsynek"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/io/jaxb/GenericJaxbIO.java", "diffHunk": "@@ -0,0 +1,318 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.io.jaxb;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.Deque;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.bind.JAXBContext;\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Marshaller;\n+import javax.xml.bind.Unmarshaller;\n+import javax.xml.bind.UnmarshallerHandler;\n+import javax.xml.bind.ValidationEvent;\n+import javax.xml.bind.util.ValidationEventCollector;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMResult;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.transform.stream.StreamSource;\n+import javax.xml.validation.Schema;\n+import javax.xml.validation.SchemaFactory;\n+\n+import org.optaplanner.core.impl.io.OptaPlannerXmlSerializationException;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.XMLFilter;\n+import org.xml.sax.XMLReader;\n+import org.xml.sax.helpers.XMLFilterImpl;\n+\n+public final class GenericJaxbIO<T> implements JaxbIO<T> {\n+    private static final int DEFAULT_INDENTATION = 2;\n+\n+    private static final String ERR_MSG_WRITE = \"Unable to write the %s to XML.\";\n+    private static final String ERR_MSG_READ = \"Unable to read the (%s) from XML.\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI5NDYwNw=="}, "originalCommit": {"oid": "1d0bed8beead1d5dbf6e20bd8eb5556f77321596"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4OTk3NTkzOnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/io/jaxb/GenericJaxbIO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwOTo1MDoyOFrOHII3HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwOTo1MDoyOFrOHII3HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI5NTgzNw==", "bodyText": "DRY with the first few lines of write(T root, Writer writer).", "url": "https://github.com/kiegroup/optaplanner/pull/902#discussion_r478295837", "createdAt": "2020-08-27T09:50:28Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/io/jaxb/GenericJaxbIO.java", "diffHunk": "@@ -0,0 +1,318 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.io.jaxb;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.Deque;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.bind.JAXBContext;\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Marshaller;\n+import javax.xml.bind.Unmarshaller;\n+import javax.xml.bind.UnmarshallerHandler;\n+import javax.xml.bind.ValidationEvent;\n+import javax.xml.bind.util.ValidationEventCollector;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMResult;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.transform.stream.StreamSource;\n+import javax.xml.validation.Schema;\n+import javax.xml.validation.SchemaFactory;\n+\n+import org.optaplanner.core.impl.io.OptaPlannerXmlSerializationException;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.XMLFilter;\n+import org.xml.sax.XMLReader;\n+import org.xml.sax.helpers.XMLFilterImpl;\n+\n+public final class GenericJaxbIO<T> implements JaxbIO<T> {\n+    private static final int DEFAULT_INDENTATION = 2;\n+\n+    private static final String ERR_MSG_WRITE = \"Unable to write the %s to XML.\";\n+    private static final String ERR_MSG_READ = \"Unable to read the (%s) from XML.\";\n+\n+    private final JAXBContext jaxbContext;\n+    private final Marshaller marshaller;\n+    private final Class<T> rootClass;\n+    private final int indentation;\n+\n+    public GenericJaxbIO(Class<T> rootClass) {\n+        this(rootClass, DEFAULT_INDENTATION);\n+    }\n+\n+    public GenericJaxbIO(Class<T> rootClass, int indentation) {\n+        Objects.requireNonNull(rootClass);\n+        this.rootClass = rootClass;\n+        this.indentation = indentation;\n+        try {\n+            jaxbContext = JAXBContext.newInstance(rootClass);\n+            marshaller = jaxbContext.createMarshaller();\n+            marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);\n+            marshaller.setProperty(Marshaller.JAXB_ENCODING, StandardCharsets.UTF_8.toString());\n+        } catch (JAXBException jaxbException) {\n+            String errMessage = String.format(\"Unable to create JAXB Marshaller for a root element class (%s).\",\n+                    rootClass.getName());\n+            throw new OptaPlannerXmlSerializationException(errMessage, jaxbException);\n+        }\n+    }\n+\n+    @Override\n+    public T read(Reader reader) {\n+        Objects.requireNonNull(reader);\n+        try {\n+            return (T) createUnmarshaller().unmarshal(reader);\n+        } catch (JAXBException jaxbException) {\n+            String errMessage = String.format(ERR_MSG_READ, rootClass.getName());\n+            throw new OptaPlannerXmlSerializationException(errMessage, jaxbException);\n+        }\n+    }\n+\n+    public T readAndValidate(Reader reader, String schemaResource) {\n+        Objects.requireNonNull(reader);\n+        String nonNullSchemaResource = Objects.requireNonNull(schemaResource);\n+        SchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\n+        Schema schema;\n+        try {\n+            schema = schemaFactory.newSchema(GenericJaxbIO.class.getResource(nonNullSchemaResource));\n+        } catch (SAXException e) {\n+            throw new IllegalArgumentException(\"Unable to read input schema resource (\" + nonNullSchemaResource + \")\", e);\n+        }\n+\n+        Unmarshaller unmarshaller = createUnmarshaller();\n+        unmarshaller.setSchema(schema);\n+        ValidationEventStringCollector validationEventHandler = new ValidationEventStringCollector();\n+\n+        try {\n+            unmarshaller.setEventHandler(validationEventHandler);\n+        } catch (JAXBException jaxbException) {\n+            String errMessage = String.format(\"Unable to set validation event handler to the unmarshaller for \"\n+                    + \"a root element class (%s).\", rootClass.getName());\n+            throw new OptaPlannerXmlSerializationException(errMessage, jaxbException);\n+        }\n+\n+        try {\n+            return (T) unmarshaller.unmarshal(reader);\n+        } catch (JAXBException jaxbException) {\n+            String errMessage = String.format(ERR_MSG_READ, rootClass.getName());\n+            if (validationEventHandler.hasEvents()) {\n+                String errMessageWithValidationEvents = errMessage + \"\\n\" + validationEventHandler.reportAll();\n+                throw new OptaPlannerXmlSerializationException(errMessageWithValidationEvents, jaxbException);\n+            } else {\n+                throw new OptaPlannerXmlSerializationException(errMessage, jaxbException);\n+            }\n+        }\n+    }\n+\n+    private Unmarshaller createUnmarshaller() {\n+        try {\n+            return jaxbContext.createUnmarshaller();\n+        } catch (JAXBException e) {\n+            String errMessage = String.format(\"Unable to create JAXB unmarshaller for a root element class (%s).\",\n+                    rootClass.getName());\n+            throw new OptaPlannerXmlSerializationException(errMessage, e);\n+        }\n+    }\n+\n+    /**\n+     * Reads the input XML using the {@link Reader} overriding elements namespaces. If an element already has a namespace and\n+     * a {@link ElementNamespaceOverride} is defined for this element, its namespace is overridden. In case the element has no\n+     * namespace, new namespace defined in the {@link ElementNamespaceOverride} is added.\n+     * \n+     * @param reader input XML {@link Reader}; never null\n+     * @param elementNamespaceOverrides never null\n+     * @return deserialized object representation of the XML.\n+     */\n+    public T readOverridingNamespace(Reader reader, ElementNamespaceOverride... elementNamespaceOverrides) {\n+        Objects.requireNonNull(reader);\n+        Objects.requireNonNull(elementNamespaceOverrides);\n+\n+        final String errMessage = String.format(\"Unable to read the (%s) from XML with overriding elements' namespaces: %s.\",\n+                rootClass.getName(), Arrays.toString(elementNamespaceOverrides));\n+\n+        // Create a SAXParser to use its XMLReader on the XMLFilter\n+        SAXParserFactory saxParserFactory = SAXParserFactory.newInstance();\n+        SAXParser saxParser;\n+        try {\n+            // Protect the parser against the XXE attack\n+            // https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A4-XML_External_Entities_(XXE)\n+            saxParserFactory.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n+            saxParser = saxParserFactory.newSAXParser();\n+        } catch (ParserConfigurationException | SAXException e) {\n+            throw new OptaPlannerXmlSerializationException(errMessage, e);\n+        }\n+        XMLReader xmlReader;\n+        try {\n+            xmlReader = saxParser.getXMLReader();\n+        } catch (SAXException e) {\n+            throw new OptaPlannerXmlSerializationException(errMessage, e);\n+        }\n+\n+        XMLFilter namespaceOverridingXmlFilter = new NamespaceOverridingXmlFilter(xmlReader, elementNamespaceOverrides);\n+        namespaceOverridingXmlFilter.setParent(xmlReader);\n+\n+        // Use UnmarshallerHandler as a content handler for the XML filter.\n+        Unmarshaller unmarshaller = createUnmarshaller();\n+        UnmarshallerHandler unmarshallerHandler = unmarshaller.getUnmarshallerHandler();\n+        namespaceOverridingXmlFilter.setContentHandler(unmarshallerHandler);\n+\n+        InputSource xmlInputSource = new InputSource(reader);\n+        try {\n+            // Parse the XML to feed its content into the UnmarshallerHandler.\n+            namespaceOverridingXmlFilter.parse(xmlInputSource);\n+        } catch (IOException | SAXException e) {\n+            throw new OptaPlannerXmlSerializationException(errMessage, e);\n+        }\n+\n+        try {\n+            return (T) unmarshallerHandler.getResult();\n+        } catch (JAXBException e) {\n+            throw new OptaPlannerXmlSerializationException(errMessage, e);\n+        }\n+    }\n+\n+    @Override\n+    public void write(T root, Writer writer) {\n+        Objects.requireNonNull(root);\n+        Objects.requireNonNull(writer);\n+        DOMResult domResult = new DOMResult();\n+        try {\n+            marshaller.marshal(root, domResult);\n+        } catch (JAXBException jaxbException) {\n+            String errMessage = String.format(ERR_MSG_WRITE, rootClass.getName());\n+            throw new OptaPlannerXmlSerializationException(errMessage, jaxbException);\n+        }\n+\n+        formatXml(new DOMSource(domResult.getNode()), null, writer);\n+    }\n+\n+    public void writeWithoutNamespaces(T root, Writer writer) {\n+        Objects.requireNonNull(root);\n+        Objects.requireNonNull(writer);\n+        DOMResult domResult = new DOMResult();\n+        final String errMessage = String.format(ERR_MSG_WRITE, rootClass.getName());\n+        try {\n+            marshaller.marshal(root, domResult);\n+        } catch (JAXBException jaxbException) {\n+            throw new OptaPlannerXmlSerializationException(errMessage, jaxbException);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d0bed8beead1d5dbf6e20bd8eb5556f77321596"}, "originalPosition": 231}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4OTk4NDE0OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/io/jaxb/GenericJaxbIO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwOTo1MjozOVrOHII8Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwOTo1MjozOVrOHII8Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI5NzA5MQ==", "bodyText": "The errorMessage String should only be created if it actually fails, so inside the catch", "url": "https://github.com/kiegroup/optaplanner/pull/902#discussion_r478297091", "createdAt": "2020-08-27T09:52:39Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/io/jaxb/GenericJaxbIO.java", "diffHunk": "@@ -0,0 +1,318 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.io.jaxb;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.Deque;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.bind.JAXBContext;\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Marshaller;\n+import javax.xml.bind.Unmarshaller;\n+import javax.xml.bind.UnmarshallerHandler;\n+import javax.xml.bind.ValidationEvent;\n+import javax.xml.bind.util.ValidationEventCollector;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMResult;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.transform.stream.StreamSource;\n+import javax.xml.validation.Schema;\n+import javax.xml.validation.SchemaFactory;\n+\n+import org.optaplanner.core.impl.io.OptaPlannerXmlSerializationException;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.XMLFilter;\n+import org.xml.sax.XMLReader;\n+import org.xml.sax.helpers.XMLFilterImpl;\n+\n+public final class GenericJaxbIO<T> implements JaxbIO<T> {\n+    private static final int DEFAULT_INDENTATION = 2;\n+\n+    private static final String ERR_MSG_WRITE = \"Unable to write the %s to XML.\";\n+    private static final String ERR_MSG_READ = \"Unable to read the (%s) from XML.\";\n+\n+    private final JAXBContext jaxbContext;\n+    private final Marshaller marshaller;\n+    private final Class<T> rootClass;\n+    private final int indentation;\n+\n+    public GenericJaxbIO(Class<T> rootClass) {\n+        this(rootClass, DEFAULT_INDENTATION);\n+    }\n+\n+    public GenericJaxbIO(Class<T> rootClass, int indentation) {\n+        Objects.requireNonNull(rootClass);\n+        this.rootClass = rootClass;\n+        this.indentation = indentation;\n+        try {\n+            jaxbContext = JAXBContext.newInstance(rootClass);\n+            marshaller = jaxbContext.createMarshaller();\n+            marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);\n+            marshaller.setProperty(Marshaller.JAXB_ENCODING, StandardCharsets.UTF_8.toString());\n+        } catch (JAXBException jaxbException) {\n+            String errMessage = String.format(\"Unable to create JAXB Marshaller for a root element class (%s).\",\n+                    rootClass.getName());\n+            throw new OptaPlannerXmlSerializationException(errMessage, jaxbException);\n+        }\n+    }\n+\n+    @Override\n+    public T read(Reader reader) {\n+        Objects.requireNonNull(reader);\n+        try {\n+            return (T) createUnmarshaller().unmarshal(reader);\n+        } catch (JAXBException jaxbException) {\n+            String errMessage = String.format(ERR_MSG_READ, rootClass.getName());\n+            throw new OptaPlannerXmlSerializationException(errMessage, jaxbException);\n+        }\n+    }\n+\n+    public T readAndValidate(Reader reader, String schemaResource) {\n+        Objects.requireNonNull(reader);\n+        String nonNullSchemaResource = Objects.requireNonNull(schemaResource);\n+        SchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\n+        Schema schema;\n+        try {\n+            schema = schemaFactory.newSchema(GenericJaxbIO.class.getResource(nonNullSchemaResource));\n+        } catch (SAXException e) {\n+            throw new IllegalArgumentException(\"Unable to read input schema resource (\" + nonNullSchemaResource + \")\", e);\n+        }\n+\n+        Unmarshaller unmarshaller = createUnmarshaller();\n+        unmarshaller.setSchema(schema);\n+        ValidationEventStringCollector validationEventHandler = new ValidationEventStringCollector();\n+\n+        try {\n+            unmarshaller.setEventHandler(validationEventHandler);\n+        } catch (JAXBException jaxbException) {\n+            String errMessage = String.format(\"Unable to set validation event handler to the unmarshaller for \"\n+                    + \"a root element class (%s).\", rootClass.getName());\n+            throw new OptaPlannerXmlSerializationException(errMessage, jaxbException);\n+        }\n+\n+        try {\n+            return (T) unmarshaller.unmarshal(reader);\n+        } catch (JAXBException jaxbException) {\n+            String errMessage = String.format(ERR_MSG_READ, rootClass.getName());\n+            if (validationEventHandler.hasEvents()) {\n+                String errMessageWithValidationEvents = errMessage + \"\\n\" + validationEventHandler.reportAll();\n+                throw new OptaPlannerXmlSerializationException(errMessageWithValidationEvents, jaxbException);\n+            } else {\n+                throw new OptaPlannerXmlSerializationException(errMessage, jaxbException);\n+            }\n+        }\n+    }\n+\n+    private Unmarshaller createUnmarshaller() {\n+        try {\n+            return jaxbContext.createUnmarshaller();\n+        } catch (JAXBException e) {\n+            String errMessage = String.format(\"Unable to create JAXB unmarshaller for a root element class (%s).\",\n+                    rootClass.getName());\n+            throw new OptaPlannerXmlSerializationException(errMessage, e);\n+        }\n+    }\n+\n+    /**\n+     * Reads the input XML using the {@link Reader} overriding elements namespaces. If an element already has a namespace and\n+     * a {@link ElementNamespaceOverride} is defined for this element, its namespace is overridden. In case the element has no\n+     * namespace, new namespace defined in the {@link ElementNamespaceOverride} is added.\n+     * \n+     * @param reader input XML {@link Reader}; never null\n+     * @param elementNamespaceOverrides never null\n+     * @return deserialized object representation of the XML.\n+     */\n+    public T readOverridingNamespace(Reader reader, ElementNamespaceOverride... elementNamespaceOverrides) {\n+        Objects.requireNonNull(reader);\n+        Objects.requireNonNull(elementNamespaceOverrides);\n+\n+        final String errMessage = String.format(\"Unable to read the (%s) from XML with overriding elements' namespaces: %s.\",\n+                rootClass.getName(), Arrays.toString(elementNamespaceOverrides));\n+\n+        // Create a SAXParser to use its XMLReader on the XMLFilter\n+        SAXParserFactory saxParserFactory = SAXParserFactory.newInstance();\n+        SAXParser saxParser;\n+        try {\n+            // Protect the parser against the XXE attack\n+            // https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A4-XML_External_Entities_(XXE)\n+            saxParserFactory.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n+            saxParser = saxParserFactory.newSAXParser();\n+        } catch (ParserConfigurationException | SAXException e) {\n+            throw new OptaPlannerXmlSerializationException(errMessage, e);\n+        }\n+        XMLReader xmlReader;\n+        try {\n+            xmlReader = saxParser.getXMLReader();\n+        } catch (SAXException e) {\n+            throw new OptaPlannerXmlSerializationException(errMessage, e);\n+        }\n+\n+        XMLFilter namespaceOverridingXmlFilter = new NamespaceOverridingXmlFilter(xmlReader, elementNamespaceOverrides);\n+        namespaceOverridingXmlFilter.setParent(xmlReader);\n+\n+        // Use UnmarshallerHandler as a content handler for the XML filter.\n+        Unmarshaller unmarshaller = createUnmarshaller();\n+        UnmarshallerHandler unmarshallerHandler = unmarshaller.getUnmarshallerHandler();\n+        namespaceOverridingXmlFilter.setContentHandler(unmarshallerHandler);\n+\n+        InputSource xmlInputSource = new InputSource(reader);\n+        try {\n+            // Parse the XML to feed its content into the UnmarshallerHandler.\n+            namespaceOverridingXmlFilter.parse(xmlInputSource);\n+        } catch (IOException | SAXException e) {\n+            throw new OptaPlannerXmlSerializationException(errMessage, e);\n+        }\n+\n+        try {\n+            return (T) unmarshallerHandler.getResult();\n+        } catch (JAXBException e) {\n+            throw new OptaPlannerXmlSerializationException(errMessage, e);\n+        }\n+    }\n+\n+    @Override\n+    public void write(T root, Writer writer) {\n+        Objects.requireNonNull(root);\n+        Objects.requireNonNull(writer);\n+        DOMResult domResult = new DOMResult();\n+        try {\n+            marshaller.marshal(root, domResult);\n+        } catch (JAXBException jaxbException) {\n+            String errMessage = String.format(ERR_MSG_WRITE, rootClass.getName());\n+            throw new OptaPlannerXmlSerializationException(errMessage, jaxbException);\n+        }\n+\n+        formatXml(new DOMSource(domResult.getNode()), null, writer);\n+    }\n+\n+    public void writeWithoutNamespaces(T root, Writer writer) {\n+        Objects.requireNonNull(root);\n+        Objects.requireNonNull(writer);\n+        DOMResult domResult = new DOMResult();\n+        final String errMessage = String.format(ERR_MSG_WRITE, rootClass.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d0bed8beead1d5dbf6e20bd8eb5556f77321596"}, "originalPosition": 226}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MDAwNjg0OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/io/jaxb/GenericJaxbIO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwOTo1ODo0NVrOHIJJyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwOTo1ODo0NVrOHIJJyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMwMDYxNg==", "bodyText": "Here, it didn't fail to marshall the rootClass to XML, so the error message should be different.\n=> \"Failed to format XML for rootClass(...).\" maybe?", "url": "https://github.com/kiegroup/optaplanner/pull/902#discussion_r478300616", "createdAt": "2020-08-27T09:58:45Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/io/jaxb/GenericJaxbIO.java", "diffHunk": "@@ -0,0 +1,318 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.io.jaxb;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.Deque;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.bind.JAXBContext;\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Marshaller;\n+import javax.xml.bind.Unmarshaller;\n+import javax.xml.bind.UnmarshallerHandler;\n+import javax.xml.bind.ValidationEvent;\n+import javax.xml.bind.util.ValidationEventCollector;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMResult;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.transform.stream.StreamSource;\n+import javax.xml.validation.Schema;\n+import javax.xml.validation.SchemaFactory;\n+\n+import org.optaplanner.core.impl.io.OptaPlannerXmlSerializationException;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.XMLFilter;\n+import org.xml.sax.XMLReader;\n+import org.xml.sax.helpers.XMLFilterImpl;\n+\n+public final class GenericJaxbIO<T> implements JaxbIO<T> {\n+    private static final int DEFAULT_INDENTATION = 2;\n+\n+    private static final String ERR_MSG_WRITE = \"Unable to write the %s to XML.\";\n+    private static final String ERR_MSG_READ = \"Unable to read the (%s) from XML.\";\n+\n+    private final JAXBContext jaxbContext;\n+    private final Marshaller marshaller;\n+    private final Class<T> rootClass;\n+    private final int indentation;\n+\n+    public GenericJaxbIO(Class<T> rootClass) {\n+        this(rootClass, DEFAULT_INDENTATION);\n+    }\n+\n+    public GenericJaxbIO(Class<T> rootClass, int indentation) {\n+        Objects.requireNonNull(rootClass);\n+        this.rootClass = rootClass;\n+        this.indentation = indentation;\n+        try {\n+            jaxbContext = JAXBContext.newInstance(rootClass);\n+            marshaller = jaxbContext.createMarshaller();\n+            marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);\n+            marshaller.setProperty(Marshaller.JAXB_ENCODING, StandardCharsets.UTF_8.toString());\n+        } catch (JAXBException jaxbException) {\n+            String errMessage = String.format(\"Unable to create JAXB Marshaller for a root element class (%s).\",\n+                    rootClass.getName());\n+            throw new OptaPlannerXmlSerializationException(errMessage, jaxbException);\n+        }\n+    }\n+\n+    @Override\n+    public T read(Reader reader) {\n+        Objects.requireNonNull(reader);\n+        try {\n+            return (T) createUnmarshaller().unmarshal(reader);\n+        } catch (JAXBException jaxbException) {\n+            String errMessage = String.format(ERR_MSG_READ, rootClass.getName());\n+            throw new OptaPlannerXmlSerializationException(errMessage, jaxbException);\n+        }\n+    }\n+\n+    public T readAndValidate(Reader reader, String schemaResource) {\n+        Objects.requireNonNull(reader);\n+        String nonNullSchemaResource = Objects.requireNonNull(schemaResource);\n+        SchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\n+        Schema schema;\n+        try {\n+            schema = schemaFactory.newSchema(GenericJaxbIO.class.getResource(nonNullSchemaResource));\n+        } catch (SAXException e) {\n+            throw new IllegalArgumentException(\"Unable to read input schema resource (\" + nonNullSchemaResource + \")\", e);\n+        }\n+\n+        Unmarshaller unmarshaller = createUnmarshaller();\n+        unmarshaller.setSchema(schema);\n+        ValidationEventStringCollector validationEventHandler = new ValidationEventStringCollector();\n+\n+        try {\n+            unmarshaller.setEventHandler(validationEventHandler);\n+        } catch (JAXBException jaxbException) {\n+            String errMessage = String.format(\"Unable to set validation event handler to the unmarshaller for \"\n+                    + \"a root element class (%s).\", rootClass.getName());\n+            throw new OptaPlannerXmlSerializationException(errMessage, jaxbException);\n+        }\n+\n+        try {\n+            return (T) unmarshaller.unmarshal(reader);\n+        } catch (JAXBException jaxbException) {\n+            String errMessage = String.format(ERR_MSG_READ, rootClass.getName());\n+            if (validationEventHandler.hasEvents()) {\n+                String errMessageWithValidationEvents = errMessage + \"\\n\" + validationEventHandler.reportAll();\n+                throw new OptaPlannerXmlSerializationException(errMessageWithValidationEvents, jaxbException);\n+            } else {\n+                throw new OptaPlannerXmlSerializationException(errMessage, jaxbException);\n+            }\n+        }\n+    }\n+\n+    private Unmarshaller createUnmarshaller() {\n+        try {\n+            return jaxbContext.createUnmarshaller();\n+        } catch (JAXBException e) {\n+            String errMessage = String.format(\"Unable to create JAXB unmarshaller for a root element class (%s).\",\n+                    rootClass.getName());\n+            throw new OptaPlannerXmlSerializationException(errMessage, e);\n+        }\n+    }\n+\n+    /**\n+     * Reads the input XML using the {@link Reader} overriding elements namespaces. If an element already has a namespace and\n+     * a {@link ElementNamespaceOverride} is defined for this element, its namespace is overridden. In case the element has no\n+     * namespace, new namespace defined in the {@link ElementNamespaceOverride} is added.\n+     * \n+     * @param reader input XML {@link Reader}; never null\n+     * @param elementNamespaceOverrides never null\n+     * @return deserialized object representation of the XML.\n+     */\n+    public T readOverridingNamespace(Reader reader, ElementNamespaceOverride... elementNamespaceOverrides) {\n+        Objects.requireNonNull(reader);\n+        Objects.requireNonNull(elementNamespaceOverrides);\n+\n+        final String errMessage = String.format(\"Unable to read the (%s) from XML with overriding elements' namespaces: %s.\",\n+                rootClass.getName(), Arrays.toString(elementNamespaceOverrides));\n+\n+        // Create a SAXParser to use its XMLReader on the XMLFilter\n+        SAXParserFactory saxParserFactory = SAXParserFactory.newInstance();\n+        SAXParser saxParser;\n+        try {\n+            // Protect the parser against the XXE attack\n+            // https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A4-XML_External_Entities_(XXE)\n+            saxParserFactory.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n+            saxParser = saxParserFactory.newSAXParser();\n+        } catch (ParserConfigurationException | SAXException e) {\n+            throw new OptaPlannerXmlSerializationException(errMessage, e);\n+        }\n+        XMLReader xmlReader;\n+        try {\n+            xmlReader = saxParser.getXMLReader();\n+        } catch (SAXException e) {\n+            throw new OptaPlannerXmlSerializationException(errMessage, e);\n+        }\n+\n+        XMLFilter namespaceOverridingXmlFilter = new NamespaceOverridingXmlFilter(xmlReader, elementNamespaceOverrides);\n+        namespaceOverridingXmlFilter.setParent(xmlReader);\n+\n+        // Use UnmarshallerHandler as a content handler for the XML filter.\n+        Unmarshaller unmarshaller = createUnmarshaller();\n+        UnmarshallerHandler unmarshallerHandler = unmarshaller.getUnmarshallerHandler();\n+        namespaceOverridingXmlFilter.setContentHandler(unmarshallerHandler);\n+\n+        InputSource xmlInputSource = new InputSource(reader);\n+        try {\n+            // Parse the XML to feed its content into the UnmarshallerHandler.\n+            namespaceOverridingXmlFilter.parse(xmlInputSource);\n+        } catch (IOException | SAXException e) {\n+            throw new OptaPlannerXmlSerializationException(errMessage, e);\n+        }\n+\n+        try {\n+            return (T) unmarshallerHandler.getResult();\n+        } catch (JAXBException e) {\n+            throw new OptaPlannerXmlSerializationException(errMessage, e);\n+        }\n+    }\n+\n+    @Override\n+    public void write(T root, Writer writer) {\n+        Objects.requireNonNull(root);\n+        Objects.requireNonNull(writer);\n+        DOMResult domResult = new DOMResult();\n+        try {\n+            marshaller.marshal(root, domResult);\n+        } catch (JAXBException jaxbException) {\n+            String errMessage = String.format(ERR_MSG_WRITE, rootClass.getName());\n+            throw new OptaPlannerXmlSerializationException(errMessage, jaxbException);\n+        }\n+\n+        formatXml(new DOMSource(domResult.getNode()), null, writer);\n+    }\n+\n+    public void writeWithoutNamespaces(T root, Writer writer) {\n+        Objects.requireNonNull(root);\n+        Objects.requireNonNull(writer);\n+        DOMResult domResult = new DOMResult();\n+        final String errMessage = String.format(ERR_MSG_WRITE, rootClass.getName());\n+        try {\n+            marshaller.marshal(root, domResult);\n+        } catch (JAXBException jaxbException) {\n+            throw new OptaPlannerXmlSerializationException(errMessage, jaxbException);\n+        }\n+\n+        try (InputStream xsltInputStream = getClass().getResourceAsStream(\"removeNamespaces.xslt\")) {\n+            formatXml(new DOMSource(domResult.getNode()), new StreamSource(xsltInputStream), writer);\n+        } catch (IOException e) {\n+            throw new OptaPlannerXmlSerializationException(errMessage, e);\n+        }\n+    }\n+\n+    private void formatXml(Source source, Source transformationTemplate, Writer writer) {\n+        /*\n+         * The code is not vulnerable to XXE-based attacks as it does not process any external XML nor XSL input.\n+         * Should the transformerFactory be used for such purposes, it has to be appropriately secured:\n+         * https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A4-XML_External_Entities_(XXE)\n+         */\n+        @SuppressWarnings({ \"java:S2755\", \"java:S4435\" })\n+        TransformerFactory transformerFactory = TransformerFactory.newInstance();\n+        try {\n+            Transformer transformer = transformationTemplate == null ? transformerFactory.newTransformer()\n+                    : transformerFactory.newTransformer(transformationTemplate);\n+            // See https://stackoverflow.com/questions/46708498/jaxb-marshaller-indentation.\n+            transformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n+            transformer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\", String.valueOf(indentation));\n+            transformer.transform(source, new StreamResult(writer));\n+        } catch (TransformerException transformerException) {\n+            String errMessage = String.format(ERR_MSG_WRITE, rootClass.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d0bed8beead1d5dbf6e20bd8eb5556f77321596"}, "originalPosition": 256}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MDAxNTU1OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/io/jaxb/GenericJaxbIO.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMDowMTowNFrOHIJPQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMDoyMTo1MlrOHIJ76g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMwMjAxOQ==", "bodyText": "Do we need to bring in an XSLT formatter to format the JAXB output?\nCan we not use this instead?\nmarshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);\nLess XSLT is always better ;-)", "url": "https://github.com/kiegroup/optaplanner/pull/902#discussion_r478302019", "createdAt": "2020-08-27T10:01:04Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/io/jaxb/GenericJaxbIO.java", "diffHunk": "@@ -0,0 +1,318 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.io.jaxb;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.Deque;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.bind.JAXBContext;\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Marshaller;\n+import javax.xml.bind.Unmarshaller;\n+import javax.xml.bind.UnmarshallerHandler;\n+import javax.xml.bind.ValidationEvent;\n+import javax.xml.bind.util.ValidationEventCollector;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMResult;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.transform.stream.StreamSource;\n+import javax.xml.validation.Schema;\n+import javax.xml.validation.SchemaFactory;\n+\n+import org.optaplanner.core.impl.io.OptaPlannerXmlSerializationException;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.XMLFilter;\n+import org.xml.sax.XMLReader;\n+import org.xml.sax.helpers.XMLFilterImpl;\n+\n+public final class GenericJaxbIO<T> implements JaxbIO<T> {\n+    private static final int DEFAULT_INDENTATION = 2;\n+\n+    private static final String ERR_MSG_WRITE = \"Unable to write the %s to XML.\";\n+    private static final String ERR_MSG_READ = \"Unable to read the (%s) from XML.\";\n+\n+    private final JAXBContext jaxbContext;\n+    private final Marshaller marshaller;\n+    private final Class<T> rootClass;\n+    private final int indentation;\n+\n+    public GenericJaxbIO(Class<T> rootClass) {\n+        this(rootClass, DEFAULT_INDENTATION);\n+    }\n+\n+    public GenericJaxbIO(Class<T> rootClass, int indentation) {\n+        Objects.requireNonNull(rootClass);\n+        this.rootClass = rootClass;\n+        this.indentation = indentation;\n+        try {\n+            jaxbContext = JAXBContext.newInstance(rootClass);\n+            marshaller = jaxbContext.createMarshaller();\n+            marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);\n+            marshaller.setProperty(Marshaller.JAXB_ENCODING, StandardCharsets.UTF_8.toString());\n+        } catch (JAXBException jaxbException) {\n+            String errMessage = String.format(\"Unable to create JAXB Marshaller for a root element class (%s).\",\n+                    rootClass.getName());\n+            throw new OptaPlannerXmlSerializationException(errMessage, jaxbException);\n+        }\n+    }\n+\n+    @Override\n+    public T read(Reader reader) {\n+        Objects.requireNonNull(reader);\n+        try {\n+            return (T) createUnmarshaller().unmarshal(reader);\n+        } catch (JAXBException jaxbException) {\n+            String errMessage = String.format(ERR_MSG_READ, rootClass.getName());\n+            throw new OptaPlannerXmlSerializationException(errMessage, jaxbException);\n+        }\n+    }\n+\n+    public T readAndValidate(Reader reader, String schemaResource) {\n+        Objects.requireNonNull(reader);\n+        String nonNullSchemaResource = Objects.requireNonNull(schemaResource);\n+        SchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\n+        Schema schema;\n+        try {\n+            schema = schemaFactory.newSchema(GenericJaxbIO.class.getResource(nonNullSchemaResource));\n+        } catch (SAXException e) {\n+            throw new IllegalArgumentException(\"Unable to read input schema resource (\" + nonNullSchemaResource + \")\", e);\n+        }\n+\n+        Unmarshaller unmarshaller = createUnmarshaller();\n+        unmarshaller.setSchema(schema);\n+        ValidationEventStringCollector validationEventHandler = new ValidationEventStringCollector();\n+\n+        try {\n+            unmarshaller.setEventHandler(validationEventHandler);\n+        } catch (JAXBException jaxbException) {\n+            String errMessage = String.format(\"Unable to set validation event handler to the unmarshaller for \"\n+                    + \"a root element class (%s).\", rootClass.getName());\n+            throw new OptaPlannerXmlSerializationException(errMessage, jaxbException);\n+        }\n+\n+        try {\n+            return (T) unmarshaller.unmarshal(reader);\n+        } catch (JAXBException jaxbException) {\n+            String errMessage = String.format(ERR_MSG_READ, rootClass.getName());\n+            if (validationEventHandler.hasEvents()) {\n+                String errMessageWithValidationEvents = errMessage + \"\\n\" + validationEventHandler.reportAll();\n+                throw new OptaPlannerXmlSerializationException(errMessageWithValidationEvents, jaxbException);\n+            } else {\n+                throw new OptaPlannerXmlSerializationException(errMessage, jaxbException);\n+            }\n+        }\n+    }\n+\n+    private Unmarshaller createUnmarshaller() {\n+        try {\n+            return jaxbContext.createUnmarshaller();\n+        } catch (JAXBException e) {\n+            String errMessage = String.format(\"Unable to create JAXB unmarshaller for a root element class (%s).\",\n+                    rootClass.getName());\n+            throw new OptaPlannerXmlSerializationException(errMessage, e);\n+        }\n+    }\n+\n+    /**\n+     * Reads the input XML using the {@link Reader} overriding elements namespaces. If an element already has a namespace and\n+     * a {@link ElementNamespaceOverride} is defined for this element, its namespace is overridden. In case the element has no\n+     * namespace, new namespace defined in the {@link ElementNamespaceOverride} is added.\n+     * \n+     * @param reader input XML {@link Reader}; never null\n+     * @param elementNamespaceOverrides never null\n+     * @return deserialized object representation of the XML.\n+     */\n+    public T readOverridingNamespace(Reader reader, ElementNamespaceOverride... elementNamespaceOverrides) {\n+        Objects.requireNonNull(reader);\n+        Objects.requireNonNull(elementNamespaceOverrides);\n+\n+        final String errMessage = String.format(\"Unable to read the (%s) from XML with overriding elements' namespaces: %s.\",\n+                rootClass.getName(), Arrays.toString(elementNamespaceOverrides));\n+\n+        // Create a SAXParser to use its XMLReader on the XMLFilter\n+        SAXParserFactory saxParserFactory = SAXParserFactory.newInstance();\n+        SAXParser saxParser;\n+        try {\n+            // Protect the parser against the XXE attack\n+            // https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A4-XML_External_Entities_(XXE)\n+            saxParserFactory.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n+            saxParser = saxParserFactory.newSAXParser();\n+        } catch (ParserConfigurationException | SAXException e) {\n+            throw new OptaPlannerXmlSerializationException(errMessage, e);\n+        }\n+        XMLReader xmlReader;\n+        try {\n+            xmlReader = saxParser.getXMLReader();\n+        } catch (SAXException e) {\n+            throw new OptaPlannerXmlSerializationException(errMessage, e);\n+        }\n+\n+        XMLFilter namespaceOverridingXmlFilter = new NamespaceOverridingXmlFilter(xmlReader, elementNamespaceOverrides);\n+        namespaceOverridingXmlFilter.setParent(xmlReader);\n+\n+        // Use UnmarshallerHandler as a content handler for the XML filter.\n+        Unmarshaller unmarshaller = createUnmarshaller();\n+        UnmarshallerHandler unmarshallerHandler = unmarshaller.getUnmarshallerHandler();\n+        namespaceOverridingXmlFilter.setContentHandler(unmarshallerHandler);\n+\n+        InputSource xmlInputSource = new InputSource(reader);\n+        try {\n+            // Parse the XML to feed its content into the UnmarshallerHandler.\n+            namespaceOverridingXmlFilter.parse(xmlInputSource);\n+        } catch (IOException | SAXException e) {\n+            throw new OptaPlannerXmlSerializationException(errMessage, e);\n+        }\n+\n+        try {\n+            return (T) unmarshallerHandler.getResult();\n+        } catch (JAXBException e) {\n+            throw new OptaPlannerXmlSerializationException(errMessage, e);\n+        }\n+    }\n+\n+    @Override\n+    public void write(T root, Writer writer) {\n+        Objects.requireNonNull(root);\n+        Objects.requireNonNull(writer);\n+        DOMResult domResult = new DOMResult();\n+        try {\n+            marshaller.marshal(root, domResult);\n+        } catch (JAXBException jaxbException) {\n+            String errMessage = String.format(ERR_MSG_WRITE, rootClass.getName());\n+            throw new OptaPlannerXmlSerializationException(errMessage, jaxbException);\n+        }\n+\n+        formatXml(new DOMSource(domResult.getNode()), null, writer);\n+    }\n+\n+    public void writeWithoutNamespaces(T root, Writer writer) {\n+        Objects.requireNonNull(root);\n+        Objects.requireNonNull(writer);\n+        DOMResult domResult = new DOMResult();\n+        final String errMessage = String.format(ERR_MSG_WRITE, rootClass.getName());\n+        try {\n+            marshaller.marshal(root, domResult);\n+        } catch (JAXBException jaxbException) {\n+            throw new OptaPlannerXmlSerializationException(errMessage, jaxbException);\n+        }\n+\n+        try (InputStream xsltInputStream = getClass().getResourceAsStream(\"removeNamespaces.xslt\")) {\n+            formatXml(new DOMSource(domResult.getNode()), new StreamSource(xsltInputStream), writer);\n+        } catch (IOException e) {\n+            throw new OptaPlannerXmlSerializationException(errMessage, e);\n+        }\n+    }\n+\n+    private void formatXml(Source source, Source transformationTemplate, Writer writer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d0bed8beead1d5dbf6e20bd8eb5556f77321596"}, "originalPosition": 240}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMxMzQ1MA==", "bodyText": "Unfortunately, the Marshaller.JAXB_FORMATTED_OUTPUT does always 4 spaces of indentation. We use the XSLT to make it 2 (or any other number, if needed).\nFor the \"backward compatibility mode\", when writing the elements, we remove their namespaces via an XSLT, so we need a transformation anyway.", "url": "https://github.com/kiegroup/optaplanner/pull/902#discussion_r478313450", "createdAt": "2020-08-27T10:21:52Z", "author": {"login": "rsynek"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/io/jaxb/GenericJaxbIO.java", "diffHunk": "@@ -0,0 +1,318 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.io.jaxb;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.Deque;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.bind.JAXBContext;\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Marshaller;\n+import javax.xml.bind.Unmarshaller;\n+import javax.xml.bind.UnmarshallerHandler;\n+import javax.xml.bind.ValidationEvent;\n+import javax.xml.bind.util.ValidationEventCollector;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMResult;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.transform.stream.StreamSource;\n+import javax.xml.validation.Schema;\n+import javax.xml.validation.SchemaFactory;\n+\n+import org.optaplanner.core.impl.io.OptaPlannerXmlSerializationException;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.XMLFilter;\n+import org.xml.sax.XMLReader;\n+import org.xml.sax.helpers.XMLFilterImpl;\n+\n+public final class GenericJaxbIO<T> implements JaxbIO<T> {\n+    private static final int DEFAULT_INDENTATION = 2;\n+\n+    private static final String ERR_MSG_WRITE = \"Unable to write the %s to XML.\";\n+    private static final String ERR_MSG_READ = \"Unable to read the (%s) from XML.\";\n+\n+    private final JAXBContext jaxbContext;\n+    private final Marshaller marshaller;\n+    private final Class<T> rootClass;\n+    private final int indentation;\n+\n+    public GenericJaxbIO(Class<T> rootClass) {\n+        this(rootClass, DEFAULT_INDENTATION);\n+    }\n+\n+    public GenericJaxbIO(Class<T> rootClass, int indentation) {\n+        Objects.requireNonNull(rootClass);\n+        this.rootClass = rootClass;\n+        this.indentation = indentation;\n+        try {\n+            jaxbContext = JAXBContext.newInstance(rootClass);\n+            marshaller = jaxbContext.createMarshaller();\n+            marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);\n+            marshaller.setProperty(Marshaller.JAXB_ENCODING, StandardCharsets.UTF_8.toString());\n+        } catch (JAXBException jaxbException) {\n+            String errMessage = String.format(\"Unable to create JAXB Marshaller for a root element class (%s).\",\n+                    rootClass.getName());\n+            throw new OptaPlannerXmlSerializationException(errMessage, jaxbException);\n+        }\n+    }\n+\n+    @Override\n+    public T read(Reader reader) {\n+        Objects.requireNonNull(reader);\n+        try {\n+            return (T) createUnmarshaller().unmarshal(reader);\n+        } catch (JAXBException jaxbException) {\n+            String errMessage = String.format(ERR_MSG_READ, rootClass.getName());\n+            throw new OptaPlannerXmlSerializationException(errMessage, jaxbException);\n+        }\n+    }\n+\n+    public T readAndValidate(Reader reader, String schemaResource) {\n+        Objects.requireNonNull(reader);\n+        String nonNullSchemaResource = Objects.requireNonNull(schemaResource);\n+        SchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\n+        Schema schema;\n+        try {\n+            schema = schemaFactory.newSchema(GenericJaxbIO.class.getResource(nonNullSchemaResource));\n+        } catch (SAXException e) {\n+            throw new IllegalArgumentException(\"Unable to read input schema resource (\" + nonNullSchemaResource + \")\", e);\n+        }\n+\n+        Unmarshaller unmarshaller = createUnmarshaller();\n+        unmarshaller.setSchema(schema);\n+        ValidationEventStringCollector validationEventHandler = new ValidationEventStringCollector();\n+\n+        try {\n+            unmarshaller.setEventHandler(validationEventHandler);\n+        } catch (JAXBException jaxbException) {\n+            String errMessage = String.format(\"Unable to set validation event handler to the unmarshaller for \"\n+                    + \"a root element class (%s).\", rootClass.getName());\n+            throw new OptaPlannerXmlSerializationException(errMessage, jaxbException);\n+        }\n+\n+        try {\n+            return (T) unmarshaller.unmarshal(reader);\n+        } catch (JAXBException jaxbException) {\n+            String errMessage = String.format(ERR_MSG_READ, rootClass.getName());\n+            if (validationEventHandler.hasEvents()) {\n+                String errMessageWithValidationEvents = errMessage + \"\\n\" + validationEventHandler.reportAll();\n+                throw new OptaPlannerXmlSerializationException(errMessageWithValidationEvents, jaxbException);\n+            } else {\n+                throw new OptaPlannerXmlSerializationException(errMessage, jaxbException);\n+            }\n+        }\n+    }\n+\n+    private Unmarshaller createUnmarshaller() {\n+        try {\n+            return jaxbContext.createUnmarshaller();\n+        } catch (JAXBException e) {\n+            String errMessage = String.format(\"Unable to create JAXB unmarshaller for a root element class (%s).\",\n+                    rootClass.getName());\n+            throw new OptaPlannerXmlSerializationException(errMessage, e);\n+        }\n+    }\n+\n+    /**\n+     * Reads the input XML using the {@link Reader} overriding elements namespaces. If an element already has a namespace and\n+     * a {@link ElementNamespaceOverride} is defined for this element, its namespace is overridden. In case the element has no\n+     * namespace, new namespace defined in the {@link ElementNamespaceOverride} is added.\n+     * \n+     * @param reader input XML {@link Reader}; never null\n+     * @param elementNamespaceOverrides never null\n+     * @return deserialized object representation of the XML.\n+     */\n+    public T readOverridingNamespace(Reader reader, ElementNamespaceOverride... elementNamespaceOverrides) {\n+        Objects.requireNonNull(reader);\n+        Objects.requireNonNull(elementNamespaceOverrides);\n+\n+        final String errMessage = String.format(\"Unable to read the (%s) from XML with overriding elements' namespaces: %s.\",\n+                rootClass.getName(), Arrays.toString(elementNamespaceOverrides));\n+\n+        // Create a SAXParser to use its XMLReader on the XMLFilter\n+        SAXParserFactory saxParserFactory = SAXParserFactory.newInstance();\n+        SAXParser saxParser;\n+        try {\n+            // Protect the parser against the XXE attack\n+            // https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A4-XML_External_Entities_(XXE)\n+            saxParserFactory.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n+            saxParser = saxParserFactory.newSAXParser();\n+        } catch (ParserConfigurationException | SAXException e) {\n+            throw new OptaPlannerXmlSerializationException(errMessage, e);\n+        }\n+        XMLReader xmlReader;\n+        try {\n+            xmlReader = saxParser.getXMLReader();\n+        } catch (SAXException e) {\n+            throw new OptaPlannerXmlSerializationException(errMessage, e);\n+        }\n+\n+        XMLFilter namespaceOverridingXmlFilter = new NamespaceOverridingXmlFilter(xmlReader, elementNamespaceOverrides);\n+        namespaceOverridingXmlFilter.setParent(xmlReader);\n+\n+        // Use UnmarshallerHandler as a content handler for the XML filter.\n+        Unmarshaller unmarshaller = createUnmarshaller();\n+        UnmarshallerHandler unmarshallerHandler = unmarshaller.getUnmarshallerHandler();\n+        namespaceOverridingXmlFilter.setContentHandler(unmarshallerHandler);\n+\n+        InputSource xmlInputSource = new InputSource(reader);\n+        try {\n+            // Parse the XML to feed its content into the UnmarshallerHandler.\n+            namespaceOverridingXmlFilter.parse(xmlInputSource);\n+        } catch (IOException | SAXException e) {\n+            throw new OptaPlannerXmlSerializationException(errMessage, e);\n+        }\n+\n+        try {\n+            return (T) unmarshallerHandler.getResult();\n+        } catch (JAXBException e) {\n+            throw new OptaPlannerXmlSerializationException(errMessage, e);\n+        }\n+    }\n+\n+    @Override\n+    public void write(T root, Writer writer) {\n+        Objects.requireNonNull(root);\n+        Objects.requireNonNull(writer);\n+        DOMResult domResult = new DOMResult();\n+        try {\n+            marshaller.marshal(root, domResult);\n+        } catch (JAXBException jaxbException) {\n+            String errMessage = String.format(ERR_MSG_WRITE, rootClass.getName());\n+            throw new OptaPlannerXmlSerializationException(errMessage, jaxbException);\n+        }\n+\n+        formatXml(new DOMSource(domResult.getNode()), null, writer);\n+    }\n+\n+    public void writeWithoutNamespaces(T root, Writer writer) {\n+        Objects.requireNonNull(root);\n+        Objects.requireNonNull(writer);\n+        DOMResult domResult = new DOMResult();\n+        final String errMessage = String.format(ERR_MSG_WRITE, rootClass.getName());\n+        try {\n+            marshaller.marshal(root, domResult);\n+        } catch (JAXBException jaxbException) {\n+            throw new OptaPlannerXmlSerializationException(errMessage, jaxbException);\n+        }\n+\n+        try (InputStream xsltInputStream = getClass().getResourceAsStream(\"removeNamespaces.xslt\")) {\n+            formatXml(new DOMSource(domResult.getNode()), new StreamSource(xsltInputStream), writer);\n+        } catch (IOException e) {\n+            throw new OptaPlannerXmlSerializationException(errMessage, e);\n+        }\n+    }\n+\n+    private void formatXml(Source source, Source transformationTemplate, Writer writer) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMwMjAxOQ=="}, "originalCommit": {"oid": "1d0bed8beead1d5dbf6e20bd8eb5556f77321596"}, "originalPosition": 240}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MDAyNjQ4OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/io/jaxb/GenericJaxbIO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMDowNDowMlrOHIJVqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMDowNDowMlrOHIJVqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMwMzY1OA==", "bodyText": "error style, always use braces to mention values at runtime.\n=> \"... rootClass (%s) ... namespaces (%s).\"", "url": "https://github.com/kiegroup/optaplanner/pull/902#discussion_r478303658", "createdAt": "2020-08-27T10:04:02Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/io/jaxb/GenericJaxbIO.java", "diffHunk": "@@ -0,0 +1,318 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.io.jaxb;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.Deque;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.bind.JAXBContext;\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Marshaller;\n+import javax.xml.bind.Unmarshaller;\n+import javax.xml.bind.UnmarshallerHandler;\n+import javax.xml.bind.ValidationEvent;\n+import javax.xml.bind.util.ValidationEventCollector;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMResult;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.transform.stream.StreamSource;\n+import javax.xml.validation.Schema;\n+import javax.xml.validation.SchemaFactory;\n+\n+import org.optaplanner.core.impl.io.OptaPlannerXmlSerializationException;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.XMLFilter;\n+import org.xml.sax.XMLReader;\n+import org.xml.sax.helpers.XMLFilterImpl;\n+\n+public final class GenericJaxbIO<T> implements JaxbIO<T> {\n+    private static final int DEFAULT_INDENTATION = 2;\n+\n+    private static final String ERR_MSG_WRITE = \"Unable to write the %s to XML.\";\n+    private static final String ERR_MSG_READ = \"Unable to read the (%s) from XML.\";\n+\n+    private final JAXBContext jaxbContext;\n+    private final Marshaller marshaller;\n+    private final Class<T> rootClass;\n+    private final int indentation;\n+\n+    public GenericJaxbIO(Class<T> rootClass) {\n+        this(rootClass, DEFAULT_INDENTATION);\n+    }\n+\n+    public GenericJaxbIO(Class<T> rootClass, int indentation) {\n+        Objects.requireNonNull(rootClass);\n+        this.rootClass = rootClass;\n+        this.indentation = indentation;\n+        try {\n+            jaxbContext = JAXBContext.newInstance(rootClass);\n+            marshaller = jaxbContext.createMarshaller();\n+            marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);\n+            marshaller.setProperty(Marshaller.JAXB_ENCODING, StandardCharsets.UTF_8.toString());\n+        } catch (JAXBException jaxbException) {\n+            String errMessage = String.format(\"Unable to create JAXB Marshaller for a root element class (%s).\",\n+                    rootClass.getName());\n+            throw new OptaPlannerXmlSerializationException(errMessage, jaxbException);\n+        }\n+    }\n+\n+    @Override\n+    public T read(Reader reader) {\n+        Objects.requireNonNull(reader);\n+        try {\n+            return (T) createUnmarshaller().unmarshal(reader);\n+        } catch (JAXBException jaxbException) {\n+            String errMessage = String.format(ERR_MSG_READ, rootClass.getName());\n+            throw new OptaPlannerXmlSerializationException(errMessage, jaxbException);\n+        }\n+    }\n+\n+    public T readAndValidate(Reader reader, String schemaResource) {\n+        Objects.requireNonNull(reader);\n+        String nonNullSchemaResource = Objects.requireNonNull(schemaResource);\n+        SchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\n+        Schema schema;\n+        try {\n+            schema = schemaFactory.newSchema(GenericJaxbIO.class.getResource(nonNullSchemaResource));\n+        } catch (SAXException e) {\n+            throw new IllegalArgumentException(\"Unable to read input schema resource (\" + nonNullSchemaResource + \")\", e);\n+        }\n+\n+        Unmarshaller unmarshaller = createUnmarshaller();\n+        unmarshaller.setSchema(schema);\n+        ValidationEventStringCollector validationEventHandler = new ValidationEventStringCollector();\n+\n+        try {\n+            unmarshaller.setEventHandler(validationEventHandler);\n+        } catch (JAXBException jaxbException) {\n+            String errMessage = String.format(\"Unable to set validation event handler to the unmarshaller for \"\n+                    + \"a root element class (%s).\", rootClass.getName());\n+            throw new OptaPlannerXmlSerializationException(errMessage, jaxbException);\n+        }\n+\n+        try {\n+            return (T) unmarshaller.unmarshal(reader);\n+        } catch (JAXBException jaxbException) {\n+            String errMessage = String.format(ERR_MSG_READ, rootClass.getName());\n+            if (validationEventHandler.hasEvents()) {\n+                String errMessageWithValidationEvents = errMessage + \"\\n\" + validationEventHandler.reportAll();\n+                throw new OptaPlannerXmlSerializationException(errMessageWithValidationEvents, jaxbException);\n+            } else {\n+                throw new OptaPlannerXmlSerializationException(errMessage, jaxbException);\n+            }\n+        }\n+    }\n+\n+    private Unmarshaller createUnmarshaller() {\n+        try {\n+            return jaxbContext.createUnmarshaller();\n+        } catch (JAXBException e) {\n+            String errMessage = String.format(\"Unable to create JAXB unmarshaller for a root element class (%s).\",\n+                    rootClass.getName());\n+            throw new OptaPlannerXmlSerializationException(errMessage, e);\n+        }\n+    }\n+\n+    /**\n+     * Reads the input XML using the {@link Reader} overriding elements namespaces. If an element already has a namespace and\n+     * a {@link ElementNamespaceOverride} is defined for this element, its namespace is overridden. In case the element has no\n+     * namespace, new namespace defined in the {@link ElementNamespaceOverride} is added.\n+     * \n+     * @param reader input XML {@link Reader}; never null\n+     * @param elementNamespaceOverrides never null\n+     * @return deserialized object representation of the XML.\n+     */\n+    public T readOverridingNamespace(Reader reader, ElementNamespaceOverride... elementNamespaceOverrides) {\n+        Objects.requireNonNull(reader);\n+        Objects.requireNonNull(elementNamespaceOverrides);\n+\n+        final String errMessage = String.format(\"Unable to read the (%s) from XML with overriding elements' namespaces: %s.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d0bed8beead1d5dbf6e20bd8eb5556f77321596"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MDA0MjU0OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/io/jaxb/GenericJaxbIO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMDowNzo0MVrOHIJfQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMDowNzo0MVrOHIJfQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMwNjExMw==", "bodyText": "Do we need a custom class for this?\nWe can probably just do\nString s = validationEventCollector.getEvents().stream().map(Event::getMessage).collect(Collectors.joining(\"\\n\"))", "url": "https://github.com/kiegroup/optaplanner/pull/902#discussion_r478306113", "createdAt": "2020-08-27T10:07:41Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/io/jaxb/GenericJaxbIO.java", "diffHunk": "@@ -0,0 +1,318 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.io.jaxb;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.Deque;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.bind.JAXBContext;\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Marshaller;\n+import javax.xml.bind.Unmarshaller;\n+import javax.xml.bind.UnmarshallerHandler;\n+import javax.xml.bind.ValidationEvent;\n+import javax.xml.bind.util.ValidationEventCollector;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMResult;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.transform.stream.StreamSource;\n+import javax.xml.validation.Schema;\n+import javax.xml.validation.SchemaFactory;\n+\n+import org.optaplanner.core.impl.io.OptaPlannerXmlSerializationException;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.XMLFilter;\n+import org.xml.sax.XMLReader;\n+import org.xml.sax.helpers.XMLFilterImpl;\n+\n+public final class GenericJaxbIO<T> implements JaxbIO<T> {\n+    private static final int DEFAULT_INDENTATION = 2;\n+\n+    private static final String ERR_MSG_WRITE = \"Unable to write the %s to XML.\";\n+    private static final String ERR_MSG_READ = \"Unable to read the (%s) from XML.\";\n+\n+    private final JAXBContext jaxbContext;\n+    private final Marshaller marshaller;\n+    private final Class<T> rootClass;\n+    private final int indentation;\n+\n+    public GenericJaxbIO(Class<T> rootClass) {\n+        this(rootClass, DEFAULT_INDENTATION);\n+    }\n+\n+    public GenericJaxbIO(Class<T> rootClass, int indentation) {\n+        Objects.requireNonNull(rootClass);\n+        this.rootClass = rootClass;\n+        this.indentation = indentation;\n+        try {\n+            jaxbContext = JAXBContext.newInstance(rootClass);\n+            marshaller = jaxbContext.createMarshaller();\n+            marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);\n+            marshaller.setProperty(Marshaller.JAXB_ENCODING, StandardCharsets.UTF_8.toString());\n+        } catch (JAXBException jaxbException) {\n+            String errMessage = String.format(\"Unable to create JAXB Marshaller for a root element class (%s).\",\n+                    rootClass.getName());\n+            throw new OptaPlannerXmlSerializationException(errMessage, jaxbException);\n+        }\n+    }\n+\n+    @Override\n+    public T read(Reader reader) {\n+        Objects.requireNonNull(reader);\n+        try {\n+            return (T) createUnmarshaller().unmarshal(reader);\n+        } catch (JAXBException jaxbException) {\n+            String errMessage = String.format(ERR_MSG_READ, rootClass.getName());\n+            throw new OptaPlannerXmlSerializationException(errMessage, jaxbException);\n+        }\n+    }\n+\n+    public T readAndValidate(Reader reader, String schemaResource) {\n+        Objects.requireNonNull(reader);\n+        String nonNullSchemaResource = Objects.requireNonNull(schemaResource);\n+        SchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\n+        Schema schema;\n+        try {\n+            schema = schemaFactory.newSchema(GenericJaxbIO.class.getResource(nonNullSchemaResource));\n+        } catch (SAXException e) {\n+            throw new IllegalArgumentException(\"Unable to read input schema resource (\" + nonNullSchemaResource + \")\", e);\n+        }\n+\n+        Unmarshaller unmarshaller = createUnmarshaller();\n+        unmarshaller.setSchema(schema);\n+        ValidationEventStringCollector validationEventHandler = new ValidationEventStringCollector();\n+\n+        try {\n+            unmarshaller.setEventHandler(validationEventHandler);\n+        } catch (JAXBException jaxbException) {\n+            String errMessage = String.format(\"Unable to set validation event handler to the unmarshaller for \"\n+                    + \"a root element class (%s).\", rootClass.getName());\n+            throw new OptaPlannerXmlSerializationException(errMessage, jaxbException);\n+        }\n+\n+        try {\n+            return (T) unmarshaller.unmarshal(reader);\n+        } catch (JAXBException jaxbException) {\n+            String errMessage = String.format(ERR_MSG_READ, rootClass.getName());\n+            if (validationEventHandler.hasEvents()) {\n+                String errMessageWithValidationEvents = errMessage + \"\\n\" + validationEventHandler.reportAll();\n+                throw new OptaPlannerXmlSerializationException(errMessageWithValidationEvents, jaxbException);\n+            } else {\n+                throw new OptaPlannerXmlSerializationException(errMessage, jaxbException);\n+            }\n+        }\n+    }\n+\n+    private Unmarshaller createUnmarshaller() {\n+        try {\n+            return jaxbContext.createUnmarshaller();\n+        } catch (JAXBException e) {\n+            String errMessage = String.format(\"Unable to create JAXB unmarshaller for a root element class (%s).\",\n+                    rootClass.getName());\n+            throw new OptaPlannerXmlSerializationException(errMessage, e);\n+        }\n+    }\n+\n+    /**\n+     * Reads the input XML using the {@link Reader} overriding elements namespaces. If an element already has a namespace and\n+     * a {@link ElementNamespaceOverride} is defined for this element, its namespace is overridden. In case the element has no\n+     * namespace, new namespace defined in the {@link ElementNamespaceOverride} is added.\n+     * \n+     * @param reader input XML {@link Reader}; never null\n+     * @param elementNamespaceOverrides never null\n+     * @return deserialized object representation of the XML.\n+     */\n+    public T readOverridingNamespace(Reader reader, ElementNamespaceOverride... elementNamespaceOverrides) {\n+        Objects.requireNonNull(reader);\n+        Objects.requireNonNull(elementNamespaceOverrides);\n+\n+        final String errMessage = String.format(\"Unable to read the (%s) from XML with overriding elements' namespaces: %s.\",\n+                rootClass.getName(), Arrays.toString(elementNamespaceOverrides));\n+\n+        // Create a SAXParser to use its XMLReader on the XMLFilter\n+        SAXParserFactory saxParserFactory = SAXParserFactory.newInstance();\n+        SAXParser saxParser;\n+        try {\n+            // Protect the parser against the XXE attack\n+            // https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A4-XML_External_Entities_(XXE)\n+            saxParserFactory.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n+            saxParser = saxParserFactory.newSAXParser();\n+        } catch (ParserConfigurationException | SAXException e) {\n+            throw new OptaPlannerXmlSerializationException(errMessage, e);\n+        }\n+        XMLReader xmlReader;\n+        try {\n+            xmlReader = saxParser.getXMLReader();\n+        } catch (SAXException e) {\n+            throw new OptaPlannerXmlSerializationException(errMessage, e);\n+        }\n+\n+        XMLFilter namespaceOverridingXmlFilter = new NamespaceOverridingXmlFilter(xmlReader, elementNamespaceOverrides);\n+        namespaceOverridingXmlFilter.setParent(xmlReader);\n+\n+        // Use UnmarshallerHandler as a content handler for the XML filter.\n+        Unmarshaller unmarshaller = createUnmarshaller();\n+        UnmarshallerHandler unmarshallerHandler = unmarshaller.getUnmarshallerHandler();\n+        namespaceOverridingXmlFilter.setContentHandler(unmarshallerHandler);\n+\n+        InputSource xmlInputSource = new InputSource(reader);\n+        try {\n+            // Parse the XML to feed its content into the UnmarshallerHandler.\n+            namespaceOverridingXmlFilter.parse(xmlInputSource);\n+        } catch (IOException | SAXException e) {\n+            throw new OptaPlannerXmlSerializationException(errMessage, e);\n+        }\n+\n+        try {\n+            return (T) unmarshallerHandler.getResult();\n+        } catch (JAXBException e) {\n+            throw new OptaPlannerXmlSerializationException(errMessage, e);\n+        }\n+    }\n+\n+    @Override\n+    public void write(T root, Writer writer) {\n+        Objects.requireNonNull(root);\n+        Objects.requireNonNull(writer);\n+        DOMResult domResult = new DOMResult();\n+        try {\n+            marshaller.marshal(root, domResult);\n+        } catch (JAXBException jaxbException) {\n+            String errMessage = String.format(ERR_MSG_WRITE, rootClass.getName());\n+            throw new OptaPlannerXmlSerializationException(errMessage, jaxbException);\n+        }\n+\n+        formatXml(new DOMSource(domResult.getNode()), null, writer);\n+    }\n+\n+    public void writeWithoutNamespaces(T root, Writer writer) {\n+        Objects.requireNonNull(root);\n+        Objects.requireNonNull(writer);\n+        DOMResult domResult = new DOMResult();\n+        final String errMessage = String.format(ERR_MSG_WRITE, rootClass.getName());\n+        try {\n+            marshaller.marshal(root, domResult);\n+        } catch (JAXBException jaxbException) {\n+            throw new OptaPlannerXmlSerializationException(errMessage, jaxbException);\n+        }\n+\n+        try (InputStream xsltInputStream = getClass().getResourceAsStream(\"removeNamespaces.xslt\")) {\n+            formatXml(new DOMSource(domResult.getNode()), new StreamSource(xsltInputStream), writer);\n+        } catch (IOException e) {\n+            throw new OptaPlannerXmlSerializationException(errMessage, e);\n+        }\n+    }\n+\n+    private void formatXml(Source source, Source transformationTemplate, Writer writer) {\n+        /*\n+         * The code is not vulnerable to XXE-based attacks as it does not process any external XML nor XSL input.\n+         * Should the transformerFactory be used for such purposes, it has to be appropriately secured:\n+         * https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A4-XML_External_Entities_(XXE)\n+         */\n+        @SuppressWarnings({ \"java:S2755\", \"java:S4435\" })\n+        TransformerFactory transformerFactory = TransformerFactory.newInstance();\n+        try {\n+            Transformer transformer = transformationTemplate == null ? transformerFactory.newTransformer()\n+                    : transformerFactory.newTransformer(transformationTemplate);\n+            // See https://stackoverflow.com/questions/46708498/jaxb-marshaller-indentation.\n+            transformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n+            transformer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\", String.valueOf(indentation));\n+            transformer.transform(source, new StreamResult(writer));\n+        } catch (TransformerException transformerException) {\n+            String errMessage = String.format(ERR_MSG_WRITE, rootClass.getName());\n+            throw new OptaPlannerXmlSerializationException(errMessage, transformerException);\n+        }\n+    }\n+\n+    /**\n+     * Overrides namespace of every XML element by the namespace defined in the {@link ElementNamespaceOverride}.\n+     */\n+    private static final class NamespaceOverridingXmlFilter extends XMLFilterImpl {\n+\n+        private final Deque<String> activeNamespace = new ArrayDeque<>();\n+        private final Map<String, String> elementNamespaceOverridesMap = new HashMap<>();\n+\n+        public NamespaceOverridingXmlFilter(XMLReader xmlReader, ElementNamespaceOverride... elementNamespaceOverrides) {\n+            super(xmlReader);\n+            Objects.requireNonNull(elementNamespaceOverrides);\n+            for (ElementNamespaceOverride namespaceOverride : elementNamespaceOverrides) {\n+                elementNamespaceOverridesMap.put(namespaceOverride.getElementLocalName(),\n+                        namespaceOverride.getNamespaceOverride());\n+            }\n+        }\n+\n+        @Override\n+        public void endElement(String uri, String localName, String qName) throws SAXException {\n+            String resultingUri = activeNamespace.isEmpty() ? uri : activeNamespace.peek();\n+            if (elementNamespaceOverridesMap.containsKey(qName)) {\n+                activeNamespace.pop();\n+            }\n+            super.endElement(resultingUri, localName, qName);\n+        }\n+\n+        @Override\n+        public void startElement(String uri, String localName, String qName, Attributes atts) throws SAXException {\n+            String namespaceOverride = elementNamespaceOverridesMap.get(qName);\n+            if (namespaceOverride != null) {\n+                activeNamespace.push(namespaceOverride);\n+            }\n+\n+            String resultingUri = activeNamespace.isEmpty() ? uri : activeNamespace.peek();\n+            super.startElement(resultingUri, localName, qName, atts);\n+        }\n+\n+    }\n+\n+    private static final class ValidationEventStringCollector extends ValidationEventCollector {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d0bed8beead1d5dbf6e20bd8eb5556f77321596"}, "originalPosition": 300}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MDA1NjE4OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/io/OptaPlannerXmlSerializationException.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMDoxMToyM1rOHIJnVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMDozODoyNFrOHIKeYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMwODE4MA==", "bodyText": "open question (maybe for another PR): Is this public API? Should SolverFactory.createFromXmlResource()'s javadoc have a \"@throws OptaPlannerXmlSerializationException\" ? In that case we might want to move it into the api package.", "url": "https://github.com/kiegroup/optaplanner/pull/902#discussion_r478308180", "createdAt": "2020-08-27T10:11:23Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/io/OptaPlannerXmlSerializationException.java", "diffHunk": "@@ -16,21 +16,21 @@\n \n package org.optaplanner.core.impl.io;\n \n-public class XmlUnmarshallingException extends RuntimeException {\n+public class OptaPlannerXmlSerializationException extends RuntimeException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d0bed8beead1d5dbf6e20bd8eb5556f77321596"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMwODgwNw==", "bodyText": "Naming:\n\nWe avoid class names that contain the word \"OptaPlanner\" because everything in our repository is about OptaPlanner.\nIs it Serialization or Marshalling? Much of the other code naming and error messages seem to talk about marshalling, not serialization. Let's use one term and stick with that.", "url": "https://github.com/kiegroup/optaplanner/pull/902#discussion_r478308807", "createdAt": "2020-08-27T10:12:38Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/io/OptaPlannerXmlSerializationException.java", "diffHunk": "@@ -16,21 +16,21 @@\n \n package org.optaplanner.core.impl.io;\n \n-public class XmlUnmarshallingException extends RuntimeException {\n+public class OptaPlannerXmlSerializationException extends RuntimeException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMwODE4MA=="}, "originalCommit": {"oid": "1d0bed8beead1d5dbf6e20bd8eb5556f77321596"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMyMjI3NA==", "bodyText": "The same question applies to all the fail-fast checks: should we mention there the IllegalArgumentException? Maybe it should. In that case, I would definitely do it in a separate PR.", "url": "https://github.com/kiegroup/optaplanner/pull/902#discussion_r478322274", "createdAt": "2020-08-27T10:38:24Z", "author": {"login": "rsynek"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/io/OptaPlannerXmlSerializationException.java", "diffHunk": "@@ -16,21 +16,21 @@\n \n package org.optaplanner.core.impl.io;\n \n-public class XmlUnmarshallingException extends RuntimeException {\n+public class OptaPlannerXmlSerializationException extends RuntimeException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMwODE4MA=="}, "originalCommit": {"oid": "1d0bed8beead1d5dbf6e20bd8eb5556f77321596"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MDA2Nzc4OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/io/jaxb/GenericJaxbIO.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMDoxNTowMVrOHIJujg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMDozNToyN1rOHIKYnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMxMDAzMA==", "bodyText": "Naming consistency: the only implementation of an interface Foo is normally called DefaultFoo in the rest of the optaplanner repo. This makes it easier to guess when doing ctrl-n.\n=> rename GenericJaxbIO to DefaultJaxbIO", "url": "https://github.com/kiegroup/optaplanner/pull/902#discussion_r478310030", "createdAt": "2020-08-27T10:15:01Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/io/jaxb/GenericJaxbIO.java", "diffHunk": "@@ -0,0 +1,318 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.io.jaxb;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.Deque;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.bind.JAXBContext;\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Marshaller;\n+import javax.xml.bind.Unmarshaller;\n+import javax.xml.bind.UnmarshallerHandler;\n+import javax.xml.bind.ValidationEvent;\n+import javax.xml.bind.util.ValidationEventCollector;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMResult;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.transform.stream.StreamSource;\n+import javax.xml.validation.Schema;\n+import javax.xml.validation.SchemaFactory;\n+\n+import org.optaplanner.core.impl.io.OptaPlannerXmlSerializationException;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.XMLFilter;\n+import org.xml.sax.XMLReader;\n+import org.xml.sax.helpers.XMLFilterImpl;\n+\n+public final class GenericJaxbIO<T> implements JaxbIO<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d0bed8beead1d5dbf6e20bd8eb5556f77321596"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMyMDc5Nw==", "bodyText": "It's not the only implementation; it's just the only one that takes a generic type parameter. Other implementations deal e.g. with the SolverConfig and use this generic one under the hood.", "url": "https://github.com/kiegroup/optaplanner/pull/902#discussion_r478320797", "createdAt": "2020-08-27T10:35:27Z", "author": {"login": "rsynek"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/io/jaxb/GenericJaxbIO.java", "diffHunk": "@@ -0,0 +1,318 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.io.jaxb;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.Deque;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.bind.JAXBContext;\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Marshaller;\n+import javax.xml.bind.Unmarshaller;\n+import javax.xml.bind.UnmarshallerHandler;\n+import javax.xml.bind.ValidationEvent;\n+import javax.xml.bind.util.ValidationEventCollector;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMResult;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.transform.stream.StreamSource;\n+import javax.xml.validation.Schema;\n+import javax.xml.validation.SchemaFactory;\n+\n+import org.optaplanner.core.impl.io.OptaPlannerXmlSerializationException;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.XMLFilter;\n+import org.xml.sax.XMLReader;\n+import org.xml.sax.helpers.XMLFilterImpl;\n+\n+public final class GenericJaxbIO<T> implements JaxbIO<T> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMxMDAzMA=="}, "originalCommit": {"oid": "1d0bed8beead1d5dbf6e20bd8eb5556f77321596"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MDA3NzA0OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/io/jaxb/GenericJaxbIO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMDoxNzo1NFrOHIJ0UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMDoxNzo1NFrOHIJ0UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMxMTUwNA==", "bodyText": "Read didn't fail here. Validation failed. Or if read includes validation, then actually stating \"validation failed\" is more specific. The error message should reflect that, so users don't think that the file wasn't found.", "url": "https://github.com/kiegroup/optaplanner/pull/902#discussion_r478311504", "createdAt": "2020-08-27T10:17:54Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/io/jaxb/GenericJaxbIO.java", "diffHunk": "@@ -0,0 +1,318 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.io.jaxb;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.Deque;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.bind.JAXBContext;\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Marshaller;\n+import javax.xml.bind.Unmarshaller;\n+import javax.xml.bind.UnmarshallerHandler;\n+import javax.xml.bind.ValidationEvent;\n+import javax.xml.bind.util.ValidationEventCollector;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMResult;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.transform.stream.StreamSource;\n+import javax.xml.validation.Schema;\n+import javax.xml.validation.SchemaFactory;\n+\n+import org.optaplanner.core.impl.io.OptaPlannerXmlSerializationException;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.XMLFilter;\n+import org.xml.sax.XMLReader;\n+import org.xml.sax.helpers.XMLFilterImpl;\n+\n+public final class GenericJaxbIO<T> implements JaxbIO<T> {\n+    private static final int DEFAULT_INDENTATION = 2;\n+\n+    private static final String ERR_MSG_WRITE = \"Unable to write the %s to XML.\";\n+    private static final String ERR_MSG_READ = \"Unable to read the (%s) from XML.\";\n+\n+    private final JAXBContext jaxbContext;\n+    private final Marshaller marshaller;\n+    private final Class<T> rootClass;\n+    private final int indentation;\n+\n+    public GenericJaxbIO(Class<T> rootClass) {\n+        this(rootClass, DEFAULT_INDENTATION);\n+    }\n+\n+    public GenericJaxbIO(Class<T> rootClass, int indentation) {\n+        Objects.requireNonNull(rootClass);\n+        this.rootClass = rootClass;\n+        this.indentation = indentation;\n+        try {\n+            jaxbContext = JAXBContext.newInstance(rootClass);\n+            marshaller = jaxbContext.createMarshaller();\n+            marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);\n+            marshaller.setProperty(Marshaller.JAXB_ENCODING, StandardCharsets.UTF_8.toString());\n+        } catch (JAXBException jaxbException) {\n+            String errMessage = String.format(\"Unable to create JAXB Marshaller for a root element class (%s).\",\n+                    rootClass.getName());\n+            throw new OptaPlannerXmlSerializationException(errMessage, jaxbException);\n+        }\n+    }\n+\n+    @Override\n+    public T read(Reader reader) {\n+        Objects.requireNonNull(reader);\n+        try {\n+            return (T) createUnmarshaller().unmarshal(reader);\n+        } catch (JAXBException jaxbException) {\n+            String errMessage = String.format(ERR_MSG_READ, rootClass.getName());\n+            throw new OptaPlannerXmlSerializationException(errMessage, jaxbException);\n+        }\n+    }\n+\n+    public T readAndValidate(Reader reader, String schemaResource) {\n+        Objects.requireNonNull(reader);\n+        String nonNullSchemaResource = Objects.requireNonNull(schemaResource);\n+        SchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\n+        Schema schema;\n+        try {\n+            schema = schemaFactory.newSchema(GenericJaxbIO.class.getResource(nonNullSchemaResource));\n+        } catch (SAXException e) {\n+            throw new IllegalArgumentException(\"Unable to read input schema resource (\" + nonNullSchemaResource + \")\", e);\n+        }\n+\n+        Unmarshaller unmarshaller = createUnmarshaller();\n+        unmarshaller.setSchema(schema);\n+        ValidationEventStringCollector validationEventHandler = new ValidationEventStringCollector();\n+\n+        try {\n+            unmarshaller.setEventHandler(validationEventHandler);\n+        } catch (JAXBException jaxbException) {\n+            String errMessage = String.format(\"Unable to set validation event handler to the unmarshaller for \"\n+                    + \"a root element class (%s).\", rootClass.getName());\n+            throw new OptaPlannerXmlSerializationException(errMessage, jaxbException);\n+        }\n+\n+        try {\n+            return (T) unmarshaller.unmarshal(reader);\n+        } catch (JAXBException jaxbException) {\n+            String errMessage = String.format(ERR_MSG_READ, rootClass.getName());\n+            if (validationEventHandler.hasEvents()) {\n+                String errMessageWithValidationEvents = errMessage + \"\\n\" + validationEventHandler.reportAll();\n+                throw new OptaPlannerXmlSerializationException(errMessageWithValidationEvents, jaxbException);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d0bed8beead1d5dbf6e20bd8eb5556f77321596"}, "originalPosition": 133}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4212, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}