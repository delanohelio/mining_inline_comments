{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2NjAxMzUy", "number": 877, "title": "PLANNER-1688 Extract build methods from Config", "bodyText": "This PR covers SolverConfig, PhaseConfig, and ScoreDirectorFactoryConfig.", "createdAt": "2020-08-12T08:13:28Z", "url": "https://github.com/kiegroup/optaplanner/pull/877", "merged": true, "mergeCommit": {"oid": "8b579cefec4c095993c70cd086645fcfec75f1b9"}, "closed": true, "closedAt": "2020-08-12T14:10:09Z", "author": {"login": "rsynek"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-G8QbAH2gAyNDY2NjAxMzUyOjdlZmQ1NmNlNTEyZjlkYTNhYWQ1MmQ1NzE5MGVjNDRiYjk4Yzg3ZjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-LfwrAFqTQ2NTkxOTQ5NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7efd56ce512f9da3aad52d57190ec44bb98c87f5", "author": {"user": {"login": "rsynek", "name": "Radovan Synek"}}, "url": "https://github.com/kiegroup/optaplanner/commit/7efd56ce512f9da3aad52d57190ec44bb98c87f5", "committedDate": "2020-08-12T08:14:38Z", "message": "PLANNER-1688 Extract build methods from Config\n\nThis commit covers SolverConfig, PhaseConfig and ScoreDirectorFactoryConfig."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "77430c9a0314b8f23a9cee3696f1dc14c71dde52", "author": {"user": {"login": "rsynek", "name": "Radovan Synek"}}, "url": "https://github.com/kiegroup/optaplanner/commit/77430c9a0314b8f23a9cee3696f1dc14c71dde52", "committedDate": "2020-08-12T08:00:39Z", "message": "PLANNMER-1688 Extract build methods from Config\n\nThis commit covers SolverConfig, PhaseConfig and ScoreDirectorFactoryConfig."}, "afterCommit": {"oid": "7efd56ce512f9da3aad52d57190ec44bb98c87f5", "author": {"user": {"login": "rsynek", "name": "Radovan Synek"}}, "url": "https://github.com/kiegroup/optaplanner/commit/7efd56ce512f9da3aad52d57190ec44bb98c87f5", "committedDate": "2020-08-12T08:14:38Z", "message": "PLANNER-1688 Extract build methods from Config\n\nThis commit covers SolverConfig, PhaseConfig and ScoreDirectorFactoryConfig."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NjkyOTMy", "url": "https://github.com/kiegroup/optaplanner/pull/877#pullrequestreview-465692932", "createdAt": "2020-08-12T08:21:14Z", "commit": {"oid": "7efd56ce512f9da3aad52d57190ec44bb98c87f5"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODoyMToxNFrOG_W4LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODoyMToxNFrOG_W4LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA4ODMwMQ==", "bodyText": "I'd put this as a static method on AbstractPhaseFactory.", "url": "https://github.com/kiegroup/optaplanner/pull/877#discussion_r469088301", "createdAt": "2020-08-12T08:21:14Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/phase/PhaseFactoryProvider.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.phase;\n+\n+import org.optaplanner.core.config.constructionheuristic.ConstructionHeuristicPhaseConfig;\n+import org.optaplanner.core.config.exhaustivesearch.ExhaustiveSearchPhaseConfig;\n+import org.optaplanner.core.config.localsearch.LocalSearchPhaseConfig;\n+import org.optaplanner.core.config.partitionedsearch.PartitionedSearchPhaseConfig;\n+import org.optaplanner.core.config.phase.NoChangePhaseConfig;\n+import org.optaplanner.core.config.phase.PhaseConfig;\n+import org.optaplanner.core.config.phase.custom.CustomPhaseConfig;\n+import org.optaplanner.core.impl.constructionheuristic.DefaultConstructionHeuristicPhaseFactory;\n+import org.optaplanner.core.impl.exhaustivesearch.DefaultExhaustiveSearchPhaseFactory;\n+import org.optaplanner.core.impl.localsearch.DefaultLocalSearchPhaseFactory;\n+import org.optaplanner.core.impl.partitionedsearch.DefaultPartitionedSearchPhaseFactory;\n+import org.optaplanner.core.impl.phase.custom.DefaultCustomPhaseFactory;\n+\n+public class PhaseFactoryProvider<Solution_> {\n+\n+    public AbstractPhaseFactory createPhaseFactory(PhaseConfig<?> phaseConfig) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7efd56ce512f9da3aad52d57190ec44bb98c87f5"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NzMyODI2", "url": "https://github.com/kiegroup/optaplanner/pull/877#pullrequestreview-465732826", "createdAt": "2020-08-12T09:11:55Z", "commit": {"oid": "7efd56ce512f9da3aad52d57190ec44bb98c87f5"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwOToxMTo1NlrOG_YvrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMDo1MzoxN1rOG_cGZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTExODg5Mg==", "bodyText": "Nitpicking: Integer.valueOf() is redundant here.", "url": "https://github.com/kiegroup/optaplanner/pull/877#discussion_r469118892", "createdAt": "2020-08-12T09:11:56Z", "author": {"login": "yurloc"}, "path": "optaplanner-core/src/test/java/org/optaplanner/core/impl/solver/DefaultSolverFactoryTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.solver;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.when;\n+\n+import org.junit.jupiter.api.Test;\n+import org.optaplanner.core.config.solver.SolverConfig;\n+\n+class DefaultSolverFactoryTest {\n+\n+    @Test\n+    void moveThreadCountAutoIsCorrectlyResolvedWhenCpuCountIsPositive() {\n+        final int cpuCount = 16;\n+        assertThat(mockMoveThreadCountResolverAuto(cpuCount)).isEqualTo(Integer.valueOf(cpuCount - 2));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7efd56ce512f9da3aad52d57190ec44bb98c87f5"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEyMjY3MQ==", "bodyText": "Instead of using spy() you can extend the resolver with an anonymous class and override the method to return mockCpuCount:\nDefaultSolverFactory.MoveThreadCountResolver moveThreadCountResolver =\n        new DefaultSolverFactory.MoveThreadCountResolver() {\n            @Override\n            protected int getAvailableProcessors() {\n                return mockCpuCount;\n            }\n        };\nJust an idea.", "url": "https://github.com/kiegroup/optaplanner/pull/877#discussion_r469122671", "createdAt": "2020-08-12T09:18:12Z", "author": {"login": "yurloc"}, "path": "optaplanner-core/src/test/java/org/optaplanner/core/impl/solver/DefaultSolverFactoryTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.solver;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.when;\n+\n+import org.junit.jupiter.api.Test;\n+import org.optaplanner.core.config.solver.SolverConfig;\n+\n+class DefaultSolverFactoryTest {\n+\n+    @Test\n+    void moveThreadCountAutoIsCorrectlyResolvedWhenCpuCountIsPositive() {\n+        final int cpuCount = 16;\n+        assertThat(mockMoveThreadCountResolverAuto(cpuCount)).isEqualTo(Integer.valueOf(cpuCount - 2));\n+    }\n+\n+    @Test\n+    void moveThreadCountAutoIsResolvedToNullWhenCpuCountIsNegative() {\n+        assertThat(mockMoveThreadCountResolverAuto(-1)).isNull();\n+    }\n+\n+    private Integer mockMoveThreadCountResolverAuto(int mockCpuCount) {\n+        DefaultSolverFactory.MoveThreadCountResolver moveThreadCountResolver =\n+                spy(new DefaultSolverFactory.MoveThreadCountResolver());\n+        when(moveThreadCountResolver.getAvailableProcessors()).thenReturn(mockCpuCount);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7efd56ce512f9da3aad52d57190ec44bb98c87f5"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NDA4NQ==", "bodyText": "Maybe move this to DefaultSolverFactory.", "url": "https://github.com/kiegroup/optaplanner/pull/877#discussion_r469164085", "createdAt": "2020-08-12T10:32:49Z", "author": {"login": "yurloc"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/config/solver/SolverConfig.java", "diffHunk": "@@ -211,9 +196,7 @@ public static SolverConfig createFromXmlReader(Reader reader, ClassLoader classL\n \n     public static final String MOVE_THREAD_COUNT_NONE = \"NONE\";\n     public static final String MOVE_THREAD_COUNT_AUTO = \"AUTO\";\n-    protected static final long DEFAULT_RANDOM_SEED = 0L;\n-\n-    private static final Logger logger = LoggerFactory.getLogger(SolverConfig.class);\n+    public static final long DEFAULT_RANDOM_SEED = 0L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7efd56ce512f9da3aad52d57190ec44bb98c87f5"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE3Mzg2Mg==", "bodyText": "Should be ScoreDirectorFactoryFactory.\nThe current convention seems to be that FooFactory takes FooConfig and build Foo.", "url": "https://github.com/kiegroup/optaplanner/pull/877#discussion_r469173862", "createdAt": "2020-08-12T10:53:17Z", "author": {"login": "yurloc"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/director/ScoreDirectorFactoryCreator.java", "diffHunk": "@@ -0,0 +1,318 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.score.director;\n+\n+import static org.apache.commons.lang3.ObjectUtils.defaultIfNull;\n+\n+import java.io.File;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Stream;\n+\n+import org.kie.api.KieBase;\n+import org.kie.api.KieBaseConfiguration;\n+import org.kie.api.KieServices;\n+import org.kie.api.builder.KieBuilder;\n+import org.kie.api.builder.KieFileSystem;\n+import org.kie.api.builder.Message;\n+import org.kie.api.builder.Results;\n+import org.kie.api.builder.model.KieModuleModel;\n+import org.kie.api.io.KieResources;\n+import org.kie.api.runtime.KieContainer;\n+import org.kie.internal.builder.conf.PropertySpecificOption;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.core.api.score.stream.ConstraintStreamImplType;\n+import org.optaplanner.core.config.score.director.ScoreDirectorFactoryConfig;\n+import org.optaplanner.core.config.score.trend.InitializingScoreTrendLevel;\n+import org.optaplanner.core.config.solver.EnvironmentMode;\n+import org.optaplanner.core.config.util.ConfigUtils;\n+import org.optaplanner.core.impl.domain.solution.descriptor.SolutionDescriptor;\n+import org.optaplanner.core.impl.score.director.drools.DroolsScoreDirectorFactory;\n+import org.optaplanner.core.impl.score.director.drools.testgen.TestGenDroolsScoreDirectorFactory;\n+import org.optaplanner.core.impl.score.director.easy.EasyScoreCalculator;\n+import org.optaplanner.core.impl.score.director.easy.EasyScoreDirectorFactory;\n+import org.optaplanner.core.impl.score.director.incremental.IncrementalScoreCalculator;\n+import org.optaplanner.core.impl.score.director.incremental.IncrementalScoreDirectorFactory;\n+import org.optaplanner.core.impl.score.director.stream.ConstraintStreamScoreDirectorFactory;\n+import org.optaplanner.core.impl.score.trend.InitializingScoreTrend;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ScoreDirectorFactoryCreator<Solution_> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7efd56ce512f9da3aad52d57190ec44bb98c87f5"}, "originalPosition": 58}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5006bc01c633fda6cd496ba2885c04e57efd7c22", "author": {"user": {"login": "rsynek", "name": "Radovan Synek"}}, "url": "https://github.com/kiegroup/optaplanner/commit/5006bc01c633fda6cd496ba2885c04e57efd7c22", "committedDate": "2020-08-12T11:33:17Z", "message": "Remove explicit boxing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8534a2833871df9f85504a78e535fb8681b860c", "author": {"user": {"login": "rsynek", "name": "Radovan Synek"}}, "url": "https://github.com/kiegroup/optaplanner/commit/c8534a2833871df9f85504a78e535fb8681b860c", "committedDate": "2020-08-12T11:38:22Z", "message": "Make SolverFactory an interface"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f78f09cae8471020deb04098b21664931efdabf8", "author": {"user": {"login": "rsynek", "name": "Radovan Synek"}}, "url": "https://github.com/kiegroup/optaplanner/commit/f78f09cae8471020deb04098b21664931efdabf8", "committedDate": "2020-08-12T11:41:43Z", "message": "Move a constant to factory class from SolverConfig"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74abbc2d3753fd75e3fcda3a17710369dd535f4f", "author": {"user": {"login": "rsynek", "name": "Radovan Synek"}}, "url": "https://github.com/kiegroup/optaplanner/commit/74abbc2d3753fd75e3fcda3a17710369dd535f4f", "committedDate": "2020-08-12T11:44:57Z", "message": "Rename ScoreDirectorFactoryCreator\n\nMotivation: consistency with other factory methods."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e5391631d78ef76bff01f72cf442a94e89d5d0d", "author": {"user": {"login": "rsynek", "name": "Radovan Synek"}}, "url": "https://github.com/kiegroup/optaplanner/commit/1e5391631d78ef76bff01f72cf442a94e89d5d0d", "committedDate": "2020-08-12T11:48:18Z", "message": "Replace spy() by anonymous class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4a84e7833621279799ad7946a414f2f9ffadf13", "author": {"user": {"login": "rsynek", "name": "Radovan Synek"}}, "url": "https://github.com/kiegroup/optaplanner/commit/b4a84e7833621279799ad7946a414f2f9ffadf13", "committedDate": "2020-08-12T11:57:26Z", "message": "Update revapi ignores"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "880df501b9219e4dc8014f6063b01cd57625ccba", "author": {"user": {"login": "rsynek", "name": "Radovan Synek"}}, "url": "https://github.com/kiegroup/optaplanner/commit/880df501b9219e4dc8014f6063b01cd57625ccba", "committedDate": "2020-08-12T12:32:15Z", "message": "Simplify generic type parameters of PhaseFactories"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1ODkwNzEy", "url": "https://github.com/kiegroup/optaplanner/pull/877#pullrequestreview-465890712", "createdAt": "2020-08-12T12:59:26Z", "commit": {"oid": "880df501b9219e4dc8014f6063b01cd57625ccba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMjo1OToyNlrOG_gIxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMjo1OToyNlrOG_gIxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0MDAwNQ==", "bodyText": "This should be a factory method on the PhaseFactory interface. Same pattern as with SolutionFactory.", "url": "https://github.com/kiegroup/optaplanner/pull/877#discussion_r469240005", "createdAt": "2020-08-12T12:59:26Z", "author": {"login": "yurloc"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/phase/PhaseFactoryProvider.java", "diffHunk": "@@ -29,21 +29,26 @@\n import org.optaplanner.core.impl.partitionedsearch.DefaultPartitionedSearchPhaseFactory;\n import org.optaplanner.core.impl.phase.custom.DefaultCustomPhaseFactory;\n \n-public class PhaseFactoryProvider<Solution_> {\n+public class PhaseFactoryProvider {\n \n-    public AbstractPhaseFactory createPhaseFactory(PhaseConfig<?> phaseConfig) {\n+    private PhaseFactoryProvider() {\n+        throw new UnsupportedOperationException(\n+                String.format(\"The class (%s) should not be instantiated.\", PhaseFactoryProvider.class));\n+    }\n+\n+    public static <Solution_> PhaseFactory<Solution_> createPhaseFactory(PhaseConfig<?> phaseConfig) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "880df501b9219e4dc8014f6063b01cd57625ccba"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d78154788fa74ab24f3fb659428b75ca0546bc0b", "author": {"user": {"login": "rsynek", "name": "Radovan Synek"}}, "url": "https://github.com/kiegroup/optaplanner/commit/d78154788fa74ab24f3fb659428b75ca0546bc0b", "committedDate": "2020-08-12T13:12:36Z", "message": "Remove redundant PhaseFactoryProvider"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1OTE5NDk1", "url": "https://github.com/kiegroup/optaplanner/pull/877#pullrequestreview-465919495", "createdAt": "2020-08-12T13:33:02Z", "commit": {"oid": "d78154788fa74ab24f3fb659428b75ca0546bc0b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3394, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}