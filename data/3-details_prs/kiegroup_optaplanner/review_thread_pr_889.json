{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwNjQ2NTUy", "number": 889, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNjo0Njo0MFrOEaWI8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNjo1NzozOVrOEaWdPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MDYxMTY4OnYy", "diffSide": "RIGHT", "path": "optaplanner-quickstarts/quarkus-maintenance-scheduling/src/main/java/org/acme/maintenancescheduling/bootstrap/DemoDataGenerator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNjo0Njo0MFrOHDt3eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNDowNDo0NlrOHEDN4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY1OTI1OA==", "bodyText": "Do we have a XML or JSON serialization mechanism? I think it'll be very useful for people to have this option. But we can merge without it.", "url": "https://github.com/kiegroup/optaplanner/pull/889#discussion_r473659258", "createdAt": "2020-08-20T06:46:40Z", "author": {"login": "triceo"}, "path": "optaplanner-quickstarts/quarkus-maintenance-scheduling/src/main/java/org/acme/maintenancescheduling/bootstrap/DemoDataGenerator.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.acme.maintenancescheduling.bootstrap;\n+\n+import io.quarkus.runtime.StartupEvent;\n+import org.acme.maintenancescheduling.domain.MaintainableUnit;\n+import org.acme.maintenancescheduling.domain.MaintenanceCrew;\n+import org.acme.maintenancescheduling.domain.MaintenanceJob;\n+import org.acme.maintenancescheduling.domain.MutuallyExclusiveJobs;\n+import org.acme.maintenancescheduling.domain.TimeGrain;\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Observes;\n+import javax.transaction.Transactional;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+@ApplicationScoped\n+public class DemoDataGenerator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e883b285e8e370a1f0a483f3a3eb320dcdc6daa"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk3Mjc3Nw==", "bodyText": "What would a serialization mechanism look like in this class? JSON serialization is already used to serialize entities to be passed in the REST resources, not sure I understand why users would want it here.", "url": "https://github.com/kiegroup/optaplanner/pull/889#discussion_r473972777", "createdAt": "2020-08-20T13:28:52Z", "author": {"login": "cuijulian"}, "path": "optaplanner-quickstarts/quarkus-maintenance-scheduling/src/main/java/org/acme/maintenancescheduling/bootstrap/DemoDataGenerator.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.acme.maintenancescheduling.bootstrap;\n+\n+import io.quarkus.runtime.StartupEvent;\n+import org.acme.maintenancescheduling.domain.MaintainableUnit;\n+import org.acme.maintenancescheduling.domain.MaintenanceCrew;\n+import org.acme.maintenancescheduling.domain.MaintenanceJob;\n+import org.acme.maintenancescheduling.domain.MutuallyExclusiveJobs;\n+import org.acme.maintenancescheduling.domain.TimeGrain;\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Observes;\n+import javax.transaction.Transactional;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+@ApplicationScoped\n+public class DemoDataGenerator {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY1OTI1OA=="}, "originalCommit": {"oid": "6e883b285e8e370a1f0a483f3a3eb320dcdc6daa"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDAwOTA1Nw==", "bodyText": "I mean I'd like to see XML serialization of data sets, much like in optaplanner-examples. In the absence of any UI, this sort of importing data becomes more important. But as I was saying, not necessary right now.", "url": "https://github.com/kiegroup/optaplanner/pull/889#discussion_r474009057", "createdAt": "2020-08-20T14:04:46Z", "author": {"login": "triceo"}, "path": "optaplanner-quickstarts/quarkus-maintenance-scheduling/src/main/java/org/acme/maintenancescheduling/bootstrap/DemoDataGenerator.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.acme.maintenancescheduling.bootstrap;\n+\n+import io.quarkus.runtime.StartupEvent;\n+import org.acme.maintenancescheduling.domain.MaintainableUnit;\n+import org.acme.maintenancescheduling.domain.MaintenanceCrew;\n+import org.acme.maintenancescheduling.domain.MaintenanceJob;\n+import org.acme.maintenancescheduling.domain.MutuallyExclusiveJobs;\n+import org.acme.maintenancescheduling.domain.TimeGrain;\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Observes;\n+import javax.transaction.Transactional;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+@ApplicationScoped\n+public class DemoDataGenerator {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY1OTI1OA=="}, "originalCommit": {"oid": "6e883b285e8e370a1f0a483f3a3eb320dcdc6daa"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MDYyNzE2OnYy", "diffSide": "RIGHT", "path": "optaplanner-quickstarts/quarkus-maintenance-scheduling/src/main/java/org/acme/maintenancescheduling/bootstrap/DemoDataGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNjo1MDowMVrOHDuBeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNjo1MDowMVrOHDuBeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY2MTgxNg==", "bodyText": "I'd choose a more varied list of units. Say, Track, Switch and Yard?\nI wouldn't add Train, as the use case deal with pathway maintenance, and not necessarily machinery.", "url": "https://github.com/kiegroup/optaplanner/pull/889#discussion_r473661816", "createdAt": "2020-08-20T06:50:01Z", "author": {"login": "triceo"}, "path": "optaplanner-quickstarts/quarkus-maintenance-scheduling/src/main/java/org/acme/maintenancescheduling/bootstrap/DemoDataGenerator.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.acme.maintenancescheduling.bootstrap;\n+\n+import io.quarkus.runtime.StartupEvent;\n+import org.acme.maintenancescheduling.domain.MaintainableUnit;\n+import org.acme.maintenancescheduling.domain.MaintenanceCrew;\n+import org.acme.maintenancescheduling.domain.MaintenanceJob;\n+import org.acme.maintenancescheduling.domain.MutuallyExclusiveJobs;\n+import org.acme.maintenancescheduling.domain.TimeGrain;\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Observes;\n+import javax.transaction.Transactional;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+@ApplicationScoped\n+public class DemoDataGenerator {\n+\n+    @ConfigProperty(name = \"schedule.demoData\", defaultValue = \"SMALL\")\n+    public DemoData demoData;\n+\n+    public enum DemoData {\n+        NONE,\n+        SMALL,\n+        LARGE\n+    }\n+\n+    @Transactional\n+    public void generateDemoData(@Observes StartupEvent startupEvent) {\n+        if (demoData == DemoData.NONE) {\n+            return;\n+        }\n+\n+        List<MaintainableUnit> maintainableUnitList = new ArrayList<>();\n+        maintainableUnitList.add(new MaintainableUnit(\"Track 1\"));\n+        maintainableUnitList.add(new MaintainableUnit(\"Track 2\"));\n+        maintainableUnitList.add(new MaintainableUnit(\"Track 3\"));\n+        maintainableUnitList.add(new MaintainableUnit(\"Train 1\"));\n+        maintainableUnitList.add(new MaintainableUnit(\"Train 2\"));\n+        maintainableUnitList.add(new MaintainableUnit(\"Train 3\"));\n+        if (demoData == DemoData.LARGE) {\n+            maintainableUnitList.add(new MaintainableUnit(\"Track 4\"));\n+            maintainableUnitList.add(new MaintainableUnit(\"Track 5\"));\n+            maintainableUnitList.add(new MaintainableUnit(\"Track 6\"));\n+            maintainableUnitList.add(new MaintainableUnit(\"Train 4\"));\n+            maintainableUnitList.add(new MaintainableUnit(\"Train 5\"));\n+            maintainableUnitList.add(new MaintainableUnit(\"Train 6\"));\n+        }\n+        MaintainableUnit.persist(maintainableUnitList);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e883b285e8e370a1f0a483f3a3eb320dcdc6daa"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MDYzMDIzOnYy", "diffSide": "RIGHT", "path": "optaplanner-quickstarts/quarkus-maintenance-scheduling/src/main/java/org/acme/maintenancescheduling/bootstrap/DemoDataGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNjo1MDozN1rOHDuDYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNjo1MDozN1rOHDuDYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY2MjMwNg==", "bodyText": "Considering how many grains there are, perhaps a for loop would be better suited here?", "url": "https://github.com/kiegroup/optaplanner/pull/889#discussion_r473662306", "createdAt": "2020-08-20T06:50:37Z", "author": {"login": "triceo"}, "path": "optaplanner-quickstarts/quarkus-maintenance-scheduling/src/main/java/org/acme/maintenancescheduling/bootstrap/DemoDataGenerator.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.acme.maintenancescheduling.bootstrap;\n+\n+import io.quarkus.runtime.StartupEvent;\n+import org.acme.maintenancescheduling.domain.MaintainableUnit;\n+import org.acme.maintenancescheduling.domain.MaintenanceCrew;\n+import org.acme.maintenancescheduling.domain.MaintenanceJob;\n+import org.acme.maintenancescheduling.domain.MutuallyExclusiveJobs;\n+import org.acme.maintenancescheduling.domain.TimeGrain;\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Observes;\n+import javax.transaction.Transactional;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+@ApplicationScoped\n+public class DemoDataGenerator {\n+\n+    @ConfigProperty(name = \"schedule.demoData\", defaultValue = \"SMALL\")\n+    public DemoData demoData;\n+\n+    public enum DemoData {\n+        NONE,\n+        SMALL,\n+        LARGE\n+    }\n+\n+    @Transactional\n+    public void generateDemoData(@Observes StartupEvent startupEvent) {\n+        if (demoData == DemoData.NONE) {\n+            return;\n+        }\n+\n+        List<MaintainableUnit> maintainableUnitList = new ArrayList<>();\n+        maintainableUnitList.add(new MaintainableUnit(\"Track 1\"));\n+        maintainableUnitList.add(new MaintainableUnit(\"Track 2\"));\n+        maintainableUnitList.add(new MaintainableUnit(\"Track 3\"));\n+        maintainableUnitList.add(new MaintainableUnit(\"Train 1\"));\n+        maintainableUnitList.add(new MaintainableUnit(\"Train 2\"));\n+        maintainableUnitList.add(new MaintainableUnit(\"Train 3\"));\n+        if (demoData == DemoData.LARGE) {\n+            maintainableUnitList.add(new MaintainableUnit(\"Track 4\"));\n+            maintainableUnitList.add(new MaintainableUnit(\"Track 5\"));\n+            maintainableUnitList.add(new MaintainableUnit(\"Track 6\"));\n+            maintainableUnitList.add(new MaintainableUnit(\"Train 4\"));\n+            maintainableUnitList.add(new MaintainableUnit(\"Train 5\"));\n+            maintainableUnitList.add(new MaintainableUnit(\"Train 6\"));\n+        }\n+        MaintainableUnit.persist(maintainableUnitList);\n+\n+        List<MaintenanceCrew> maintenanceCrewList = new ArrayList<>();\n+        maintenanceCrewList.add(new MaintenanceCrew(\"Crew 1\"));\n+        maintenanceCrewList.add(new MaintenanceCrew(\"Crew 2\"));\n+        maintenanceCrewList.add(new MaintenanceCrew(\"Crew 3\"));\n+        if (demoData == DemoData.LARGE) {\n+            maintenanceCrewList.add(new MaintenanceCrew(\"Crew 4\"));\n+            maintenanceCrewList.add(new MaintenanceCrew(\"Crew 5\"));\n+            maintenanceCrewList.add(new MaintenanceCrew(\"Crew 6\"));\n+        }\n+        MaintenanceCrew.persist(maintenanceCrewList);\n+\n+        List<TimeGrain> timeGrainList = new ArrayList<>();\n+        timeGrainList.add(new TimeGrain(0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e883b285e8e370a1f0a483f3a3eb320dcdc6daa"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MDYzODcwOnYy", "diffSide": "RIGHT", "path": "optaplanner-quickstarts/quarkus-maintenance-scheduling/src/main/java/org/acme/maintenancescheduling/bootstrap/DemoDataGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNjo1MjoyM1rOHDuIkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMzozOToxNFrOHEBrKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY2MzYzNA==", "bodyText": "I'd avoid calling the data set LARGE, as in the greater context of things, it's still pretty small. :-) That said, what else to call it? How about SMALLEST and SMALL?", "url": "https://github.com/kiegroup/optaplanner/pull/889#discussion_r473663634", "createdAt": "2020-08-20T06:52:23Z", "author": {"login": "triceo"}, "path": "optaplanner-quickstarts/quarkus-maintenance-scheduling/src/main/java/org/acme/maintenancescheduling/bootstrap/DemoDataGenerator.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.acme.maintenancescheduling.bootstrap;\n+\n+import io.quarkus.runtime.StartupEvent;\n+import org.acme.maintenancescheduling.domain.MaintainableUnit;\n+import org.acme.maintenancescheduling.domain.MaintenanceCrew;\n+import org.acme.maintenancescheduling.domain.MaintenanceJob;\n+import org.acme.maintenancescheduling.domain.MutuallyExclusiveJobs;\n+import org.acme.maintenancescheduling.domain.TimeGrain;\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Observes;\n+import javax.transaction.Transactional;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+@ApplicationScoped\n+public class DemoDataGenerator {\n+\n+    @ConfigProperty(name = \"schedule.demoData\", defaultValue = \"SMALL\")\n+    public DemoData demoData;\n+\n+    public enum DemoData {\n+        NONE,\n+        SMALL,\n+        LARGE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e883b285e8e370a1f0a483f3a3eb320dcdc6daa"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk4Mzc4Ng==", "bodyText": "Hmm, interesting word choice. I used NONE, SMALL, LARGE to keep consistent with the quarkus-school-timetabling example. I don't have a strong opinion on this, and your reasoning makes sense, so I'll change it.", "url": "https://github.com/kiegroup/optaplanner/pull/889#discussion_r473983786", "createdAt": "2020-08-20T13:39:14Z", "author": {"login": "cuijulian"}, "path": "optaplanner-quickstarts/quarkus-maintenance-scheduling/src/main/java/org/acme/maintenancescheduling/bootstrap/DemoDataGenerator.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.acme.maintenancescheduling.bootstrap;\n+\n+import io.quarkus.runtime.StartupEvent;\n+import org.acme.maintenancescheduling.domain.MaintainableUnit;\n+import org.acme.maintenancescheduling.domain.MaintenanceCrew;\n+import org.acme.maintenancescheduling.domain.MaintenanceJob;\n+import org.acme.maintenancescheduling.domain.MutuallyExclusiveJobs;\n+import org.acme.maintenancescheduling.domain.TimeGrain;\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Observes;\n+import javax.transaction.Transactional;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+@ApplicationScoped\n+public class DemoDataGenerator {\n+\n+    @ConfigProperty(name = \"schedule.demoData\", defaultValue = \"SMALL\")\n+    public DemoData demoData;\n+\n+    public enum DemoData {\n+        NONE,\n+        SMALL,\n+        LARGE", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY2MzYzNA=="}, "originalCommit": {"oid": "6e883b285e8e370a1f0a483f3a3eb320dcdc6daa"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MDY0NDYzOnYy", "diffSide": "RIGHT", "path": "optaplanner-quickstarts/quarkus-maintenance-scheduling/src/main/java/org/acme/maintenancescheduling/bootstrap/DemoDataGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNjo1MzozM1rOHDuMUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNjo1MzozM1rOHDuMUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY2NDU5NQ==", "bodyText": "You could have made your life a bit easier here if MutuallyExclusiveJobs has a varargs constructor argument, instead of a List.", "url": "https://github.com/kiegroup/optaplanner/pull/889#discussion_r473664595", "createdAt": "2020-08-20T06:53:33Z", "author": {"login": "triceo"}, "path": "optaplanner-quickstarts/quarkus-maintenance-scheduling/src/main/java/org/acme/maintenancescheduling/bootstrap/DemoDataGenerator.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.acme.maintenancescheduling.bootstrap;\n+\n+import io.quarkus.runtime.StartupEvent;\n+import org.acme.maintenancescheduling.domain.MaintainableUnit;\n+import org.acme.maintenancescheduling.domain.MaintenanceCrew;\n+import org.acme.maintenancescheduling.domain.MaintenanceJob;\n+import org.acme.maintenancescheduling.domain.MutuallyExclusiveJobs;\n+import org.acme.maintenancescheduling.domain.TimeGrain;\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Observes;\n+import javax.transaction.Transactional;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+@ApplicationScoped\n+public class DemoDataGenerator {\n+\n+    @ConfigProperty(name = \"schedule.demoData\", defaultValue = \"SMALL\")\n+    public DemoData demoData;\n+\n+    public enum DemoData {\n+        NONE,\n+        SMALL,\n+        LARGE\n+    }\n+\n+    @Transactional\n+    public void generateDemoData(@Observes StartupEvent startupEvent) {\n+        if (demoData == DemoData.NONE) {\n+            return;\n+        }\n+\n+        List<MaintainableUnit> maintainableUnitList = new ArrayList<>();\n+        maintainableUnitList.add(new MaintainableUnit(\"Track 1\"));\n+        maintainableUnitList.add(new MaintainableUnit(\"Track 2\"));\n+        maintainableUnitList.add(new MaintainableUnit(\"Track 3\"));\n+        maintainableUnitList.add(new MaintainableUnit(\"Train 1\"));\n+        maintainableUnitList.add(new MaintainableUnit(\"Train 2\"));\n+        maintainableUnitList.add(new MaintainableUnit(\"Train 3\"));\n+        if (demoData == DemoData.LARGE) {\n+            maintainableUnitList.add(new MaintainableUnit(\"Track 4\"));\n+            maintainableUnitList.add(new MaintainableUnit(\"Track 5\"));\n+            maintainableUnitList.add(new MaintainableUnit(\"Track 6\"));\n+            maintainableUnitList.add(new MaintainableUnit(\"Train 4\"));\n+            maintainableUnitList.add(new MaintainableUnit(\"Train 5\"));\n+            maintainableUnitList.add(new MaintainableUnit(\"Train 6\"));\n+        }\n+        MaintainableUnit.persist(maintainableUnitList);\n+\n+        List<MaintenanceCrew> maintenanceCrewList = new ArrayList<>();\n+        maintenanceCrewList.add(new MaintenanceCrew(\"Crew 1\"));\n+        maintenanceCrewList.add(new MaintenanceCrew(\"Crew 2\"));\n+        maintenanceCrewList.add(new MaintenanceCrew(\"Crew 3\"));\n+        if (demoData == DemoData.LARGE) {\n+            maintenanceCrewList.add(new MaintenanceCrew(\"Crew 4\"));\n+            maintenanceCrewList.add(new MaintenanceCrew(\"Crew 5\"));\n+            maintenanceCrewList.add(new MaintenanceCrew(\"Crew 6\"));\n+        }\n+        MaintenanceCrew.persist(maintenanceCrewList);\n+\n+        List<TimeGrain> timeGrainList = new ArrayList<>();\n+        timeGrainList.add(new TimeGrain(0));\n+        timeGrainList.add(new TimeGrain(1));\n+        timeGrainList.add(new TimeGrain(2));\n+        timeGrainList.add(new TimeGrain(3));\n+        timeGrainList.add(new TimeGrain(4));\n+        timeGrainList.add(new TimeGrain(5));\n+        timeGrainList.add(new TimeGrain(6));\n+        timeGrainList.add(new TimeGrain(7));\n+        timeGrainList.add(new TimeGrain(8));\n+        timeGrainList.add(new TimeGrain(9));\n+        timeGrainList.add(new TimeGrain(10));\n+        timeGrainList.add(new TimeGrain(11));\n+        timeGrainList.add(new TimeGrain(12));\n+        timeGrainList.add(new TimeGrain(13));\n+        timeGrainList.add(new TimeGrain(14));\n+        timeGrainList.add(new TimeGrain(15));\n+        timeGrainList.add(new TimeGrain(16));\n+        timeGrainList.add(new TimeGrain(17));\n+        timeGrainList.add(new TimeGrain(18));\n+        timeGrainList.add(new TimeGrain(19));\n+        timeGrainList.add(new TimeGrain(20));\n+        timeGrainList.add(new TimeGrain(21));\n+        timeGrainList.add(new TimeGrain(22));\n+        timeGrainList.add(new TimeGrain(23));\n+        timeGrainList.add(new TimeGrain(24));\n+        if (demoData == DemoData.LARGE) {\n+            timeGrainList.add(new TimeGrain(25));\n+            timeGrainList.add(new TimeGrain(26));\n+            timeGrainList.add(new TimeGrain(27));\n+            timeGrainList.add(new TimeGrain(28));\n+            timeGrainList.add(new TimeGrain(29));\n+            timeGrainList.add(new TimeGrain(30));\n+            timeGrainList.add(new TimeGrain(31));\n+            timeGrainList.add(new TimeGrain(32));\n+            timeGrainList.add(new TimeGrain(33));\n+            timeGrainList.add(new TimeGrain(34));\n+            timeGrainList.add(new TimeGrain(35));\n+            timeGrainList.add(new TimeGrain(36));\n+            timeGrainList.add(new TimeGrain(37));\n+            timeGrainList.add(new TimeGrain(38));\n+            timeGrainList.add(new TimeGrain(39));\n+            timeGrainList.add(new TimeGrain(40));\n+            timeGrainList.add(new TimeGrain(41));\n+            timeGrainList.add(new TimeGrain(42));\n+            timeGrainList.add(new TimeGrain(43));\n+            timeGrainList.add(new TimeGrain(44));\n+            timeGrainList.add(new TimeGrain(45));\n+            timeGrainList.add(new TimeGrain(46));\n+            timeGrainList.add(new TimeGrain(47));\n+            timeGrainList.add(new TimeGrain(48));\n+        }\n+        TimeGrain.persist(timeGrainList);\n+\n+        List<MaintenanceJob> maintenanceJobList = new ArrayList<>();\n+        maintenanceJobList.add(new MaintenanceJob(\"Bolt tightening 1\", maintainableUnitList.get(0), 0, 24, 1, true));\n+        maintenanceJobList.add(new MaintenanceJob(\"Bolt tightening 2\", maintainableUnitList.get(1), 0, 24, 1, true));\n+        maintenanceJobList.add(new MaintenanceJob(\"Bolt tightening 3\", maintainableUnitList.get(2), 0, 24, 1, true));\n+        maintenanceJobList.add(new MaintenanceJob(\"Track cleaning 1\", maintainableUnitList.get(0), 8, 24, 2, true));\n+        maintenanceJobList.add(new MaintenanceJob(\"Track cleaning 2\", maintainableUnitList.get(1), 8, 24, 2, true));\n+        maintenanceJobList.add(new MaintenanceJob(\"Track cleaning 3\", maintainableUnitList.get(2), 8, 24, 2, true));\n+        maintenanceJobList.add(new MaintenanceJob(\"Train inspection 1\", maintainableUnitList.get(3), 0, 24, 4, true));\n+        maintenanceJobList.add(new MaintenanceJob(\"Train inspection 2\", maintainableUnitList.get(4), 0, 24, 4, true));\n+        maintenanceJobList.add(new MaintenanceJob(\"Train inspection 3\", maintainableUnitList.get(5), 0, 24, 4, true));\n+        maintenanceJobList.add(new MaintenanceJob(\"Track replacement 1\", maintainableUnitList.get(0), 0, 24, 8, true));\n+        if (demoData == DemoData.LARGE) {\n+            maintenanceJobList.add(new MaintenanceJob(\"Bolt tightening 4\", maintainableUnitList.get(6), 24, 48, 1, true));\n+            maintenanceJobList.add(new MaintenanceJob(\"Bolt tightening 5\", maintainableUnitList.get(7), 24, 48, 1, true));\n+            maintenanceJobList.add(new MaintenanceJob(\"Bolt tightening 6\", maintainableUnitList.get(8), 24, 48, 1, true));\n+            maintenanceJobList.add(new MaintenanceJob(\"Track cleaning 4\", maintainableUnitList.get(6), 32, 48, 2, true));\n+            maintenanceJobList.add(new MaintenanceJob(\"Track cleaning 5\", maintainableUnitList.get(7), 32, 48, 2, true));\n+            maintenanceJobList.add(new MaintenanceJob(\"Track cleaning 6\", maintainableUnitList.get(8), 32, 48, 2, true));\n+            maintenanceJobList.add(new MaintenanceJob(\"Train inspection 4\", maintainableUnitList.get(9), 24, 48, 4, true));\n+            maintenanceJobList.add(new MaintenanceJob(\"Train inspection 5\", maintainableUnitList.get(10), 24, 48, 4, true));\n+            maintenanceJobList.add(new MaintenanceJob(\"Train inspection 6\", maintainableUnitList.get(11), 24, 48, 4, true));\n+            maintenanceJobList.add(new MaintenanceJob(\"Track replacement 2\", maintainableUnitList.get(6), 24, 48, 8, true));\n+\n+            maintenanceJobList.add(new MaintenanceJob(\"Bolt tightening 7\", maintainableUnitList.get(0), 0, 48, 1, false));\n+            maintenanceJobList.add(new MaintenanceJob(\"Bolt tightening 8\", maintainableUnitList.get(1), 0, 48, 1, false));\n+            maintenanceJobList.add(new MaintenanceJob(\"Bolt tightening 9\", maintainableUnitList.get(2), 0, 48, 1, false));\n+            maintenanceJobList.add(new MaintenanceJob(\"Track cleaning 7\", maintainableUnitList.get(0), 8, 48, 2, false));\n+            maintenanceJobList.add(new MaintenanceJob(\"Track cleaning 8\", maintainableUnitList.get(1), 8, 48, 2, false));\n+            maintenanceJobList.add(new MaintenanceJob(\"Track cleaning 9\", maintainableUnitList.get(2), 8, 48, 2, false));\n+            maintenanceJobList.add(new MaintenanceJob(\"Train inspection 7\", maintainableUnitList.get(3), 0, 48, 4, false));\n+            maintenanceJobList.add(new MaintenanceJob(\"Train inspection 8\", maintainableUnitList.get(4), 0, 48, 4, false));\n+            maintenanceJobList.add(new MaintenanceJob(\"Train inspection 9\", maintainableUnitList.get(5), 0, 48, 4, false));\n+            maintenanceJobList.add(new MaintenanceJob(\"Track replacement 3\", maintainableUnitList.get(0), 0, 48, 8, false));\n+        }\n+        MaintenanceJob.persist(maintenanceJobList);\n+\n+        List<MutuallyExclusiveJobs> mutuallyExclusiveJobsList = new ArrayList<>();\n+        mutuallyExclusiveJobsList.add(new MutuallyExclusiveJobs(\n+                Arrays.asList(maintenanceJobList.get(0), maintenanceJobList.get(1))));\n+        mutuallyExclusiveJobsList.add(new MutuallyExclusiveJobs(Arrays.asList(maintenanceJobList.get(3),\n+                maintenanceJobList.get(4), maintenanceJobList.get(5))));\n+        mutuallyExclusiveJobsList.add(new MutuallyExclusiveJobs(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e883b285e8e370a1f0a483f3a3eb320dcdc6daa"}, "originalPosition": 175}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MDY2MzY1OnYy", "diffSide": "RIGHT", "path": "optaplanner-quickstarts/quarkus-maintenance-scheduling/src/main/java/org/acme/maintenancescheduling/solver/MaintenanceScheduleConstraintProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNjo1NzozOVrOHDuYfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjoxNjowM1rOHEJHaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY2NzcxMQ==", "bodyText": "If TimeGrain were Comparable, this could be made a bit nicer.", "url": "https://github.com/kiegroup/optaplanner/pull/889#discussion_r473667711", "createdAt": "2020-08-20T06:57:39Z", "author": {"login": "triceo"}, "path": "optaplanner-quickstarts/quarkus-maintenance-scheduling/src/main/java/org/acme/maintenancescheduling/solver/MaintenanceScheduleConstraintProvider.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.acme.maintenancescheduling.solver;\n+\n+import static org.optaplanner.core.api.score.stream.Joiners.equal;\n+import static org.optaplanner.core.api.score.stream.Joiners.filtering;\n+import static org.optaplanner.core.api.score.stream.Joiners.lessThan;\n+\n+import org.acme.maintenancescheduling.domain.MaintenanceJob;\n+import org.acme.maintenancescheduling.domain.MutuallyExclusiveJobs;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+\n+public class MaintenanceScheduleConstraintProvider implements ConstraintProvider {\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n+        return new Constraint[] {\n+                // Hard constraints\n+                jobsMustStartAfterReadyTimeGrain(constraintFactory),\n+                jobsMustFinishBeforeDeadline(constraintFactory),\n+                assignAllCriticalJobs(constraintFactory),\n+                oneJobPerCrewPerPeriod(constraintFactory),\n+                mutuallyExclusiveJobs(constraintFactory),\n+                oneJobPerUnitPerPeriod(constraintFactory),\n+                // Soft constraints\n+                assignAllNonCriticalJobs(constraintFactory)\n+        };\n+    }\n+\n+    // ************************************************************************\n+    // Hard constraints\n+    // ************************************************************************\n+\n+    public Constraint jobsMustStartAfterReadyTimeGrain(ConstraintFactory constraintFactory) {\n+        return constraintFactory.fromUnfiltered(MaintenanceJob.class)\n+                .filter(maintenanceJob -> maintenanceJob.getStartingTimeGrain() != null\n+                        && maintenanceJob.getStartingTimeGrain().getGrainIndex() < maintenanceJob.getReadyGrainIndex())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e883b285e8e370a1f0a483f3a3eb320dcdc6daa"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEwNTcwNQ==", "bodyText": "The readyGrainIndex field is an int, so to do this we would need to make it a TimeGrain field to compare it to maintenanceJob.getStartingTimeGrain(). I don't see a need to add additional code to compare TimeGrains, it's simple enough imo.", "url": "https://github.com/kiegroup/optaplanner/pull/889#discussion_r474105705", "createdAt": "2020-08-20T16:16:03Z", "author": {"login": "cuijulian"}, "path": "optaplanner-quickstarts/quarkus-maintenance-scheduling/src/main/java/org/acme/maintenancescheduling/solver/MaintenanceScheduleConstraintProvider.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.acme.maintenancescheduling.solver;\n+\n+import static org.optaplanner.core.api.score.stream.Joiners.equal;\n+import static org.optaplanner.core.api.score.stream.Joiners.filtering;\n+import static org.optaplanner.core.api.score.stream.Joiners.lessThan;\n+\n+import org.acme.maintenancescheduling.domain.MaintenanceJob;\n+import org.acme.maintenancescheduling.domain.MutuallyExclusiveJobs;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+\n+public class MaintenanceScheduleConstraintProvider implements ConstraintProvider {\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n+        return new Constraint[] {\n+                // Hard constraints\n+                jobsMustStartAfterReadyTimeGrain(constraintFactory),\n+                jobsMustFinishBeforeDeadline(constraintFactory),\n+                assignAllCriticalJobs(constraintFactory),\n+                oneJobPerCrewPerPeriod(constraintFactory),\n+                mutuallyExclusiveJobs(constraintFactory),\n+                oneJobPerUnitPerPeriod(constraintFactory),\n+                // Soft constraints\n+                assignAllNonCriticalJobs(constraintFactory)\n+        };\n+    }\n+\n+    // ************************************************************************\n+    // Hard constraints\n+    // ************************************************************************\n+\n+    public Constraint jobsMustStartAfterReadyTimeGrain(ConstraintFactory constraintFactory) {\n+        return constraintFactory.fromUnfiltered(MaintenanceJob.class)\n+                .filter(maintenanceJob -> maintenanceJob.getStartingTimeGrain() != null\n+                        && maintenanceJob.getStartingTimeGrain().getGrainIndex() < maintenanceJob.getReadyGrainIndex())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY2NzcxMQ=="}, "originalCommit": {"oid": "6e883b285e8e370a1f0a483f3a3eb320dcdc6daa"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4413, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}