{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2NjY5NDY0", "number": 776, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMTo1NjowMlrOD7naig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNToyMDozM1rOD7s75Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzODM4MzQ2OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/Score.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMTo1NjowMlrOGUDCcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMTo1NjowMlrOGUDCcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY3NDQ4Mw==", "bodyText": "I was able to replace methods on the individual Score implementations with this one.", "url": "https://github.com/kiegroup/optaplanner/pull/776#discussion_r423674483", "createdAt": "2020-05-12T11:56:02Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/Score.java", "diffHunk": "@@ -60,15 +63,22 @@\n      * For example {@code -7init/0hard/-8soft} returns {@code 0hard/-8soft}.\n      *\n      * @return equal score except that {@link #getInitScore()} is {@code 0}.\n+     * @deprecated Use {@link #withInitScore(int)} with 0 as the argument.\n      */\n-    Score_ toInitializedScore();\n+    @Deprecated\n+    default Score_ toInitializedScore() {\n+        if (isSolutionInitialized()) {\n+            return (Score_) this;\n+        } else {\n+            return withInitScore(0);\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd2c6a9b7806a20370b5288379d60fe2d318b088"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzODM4NDM2OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/Score.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMTo1NjoyMlrOGUDDBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNToxMjo1N1rOGULmLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY3NDYzMQ==", "bodyText": "Noteworthy, I anticipate comments here.", "url": "https://github.com/kiegroup/optaplanner/pull/776#discussion_r423674631", "createdAt": "2020-05-12T11:56:22Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/Score.java", "diffHunk": "@@ -155,6 +165,22 @@\n      */\n     boolean isCompatibleArithmeticArgument(Score otherScore);\n \n+    /**\n+     * A {@link PlanningSolution} is feasible if it has no broken hard constraints\n+     * and {@link #isSolutionInitialized()} is true.\n+     *\n+     * Simple scores ({@link SimpleScore}, {@link SimpleLongScore}, {@link SimpleBigDecimalScore}) are always feasible.\n+     *\n+     * @return true if the hard score is 0 or higher and the {@link #getInitScore()} is 0.\n+     */\n+    default boolean isFeasible() {\n+        /*\n+         * This exception will only be thrown for custom scores that did not implement FeasibilityScore.\n+         * TODO Safe to remove this default implementation once FeasibilityScore has been removed in 8.0.\n+         */\n+        throw new UnsupportedOperationException();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd2c6a9b7806a20370b5288379d60fe2d318b088"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgxNDcwMQ==", "bodyText": "I am fine with this approach. When I added toShortString() in FEB 2017 I should have probably done it this way too with a default method until 8.0 is.\nPlease add this in the list of PLANNER-750 TODO's, to make this method abstract again.", "url": "https://github.com/kiegroup/optaplanner/pull/776#discussion_r423814701", "createdAt": "2020-05-12T15:12:57Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/Score.java", "diffHunk": "@@ -155,6 +165,22 @@\n      */\n     boolean isCompatibleArithmeticArgument(Score otherScore);\n \n+    /**\n+     * A {@link PlanningSolution} is feasible if it has no broken hard constraints\n+     * and {@link #isSolutionInitialized()} is true.\n+     *\n+     * Simple scores ({@link SimpleScore}, {@link SimpleLongScore}, {@link SimpleBigDecimalScore}) are always feasible.\n+     *\n+     * @return true if the hard score is 0 or higher and the {@link #getInitScore()} is 0.\n+     */\n+    default boolean isFeasible() {\n+        /*\n+         * This exception will only be thrown for custom scores that did not implement FeasibilityScore.\n+         * TODO Safe to remove this default implementation once FeasibilityScore has been removed in 8.0.\n+         */\n+        throw new UnsupportedOperationException();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY3NDYzMQ=="}, "originalCommit": {"oid": "cd2c6a9b7806a20370b5288379d60fe2d318b088"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzODM4NTY4OnYy", "diffSide": "LEFT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/Score.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMTo1Njo0OFrOGUDD5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNTowODoyMlrOGULYtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY3NDg1NA==", "bodyText": "Technically this is a backwards incompatible change. Used to throw, doesn't anymore. I think it should be fine.", "url": "https://github.com/kiegroup/optaplanner/pull/776#discussion_r423674854", "createdAt": "2020-05-12T11:56:48Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/Score.java", "diffHunk": "@@ -60,15 +63,22 @@\n      * For example {@code -7init/0hard/-8soft} returns {@code 0hard/-8soft}.\n      *\n      * @return equal score except that {@link #getInitScore()} is {@code 0}.\n+     * @deprecated Use {@link #withInitScore(int)} with 0 as the argument.\n      */\n-    Score_ toInitializedScore();\n+    @Deprecated\n+    default Score_ toInitializedScore() {\n+        if (isSolutionInitialized()) {\n+            return (Score_) this;\n+        } else {\n+            return withInitScore(0);\n+        }\n+    }\n \n     /**\n      * For example {@code 0hard/-8soft} with {@code -7} returns {@code -7init/0hard/-8soft}.\n      *\n      * @param newInitScore always negative (except in statistical calculations), 0 if all planning variables are initialized\n      * @return equals score except that {@link #getInitScore()} is set to {@code newInitScore}\n-     * @throws IllegalStateException if the original {@link #getInitScore()} is not 0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd2c6a9b7806a20370b5288379d60fe2d318b088"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgxMDM3OQ==", "bodyText": "EasyScoreDirector and IncrementalScoreDirector should fail fast if the EasyScoreCalculator etc return a Score with a non zero initScore. Before they did, now they don't I believe.", "url": "https://github.com/kiegroup/optaplanner/pull/776#discussion_r423810379", "createdAt": "2020-05-12T15:07:20Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/Score.java", "diffHunk": "@@ -60,15 +63,22 @@\n      * For example {@code -7init/0hard/-8soft} returns {@code 0hard/-8soft}.\n      *\n      * @return equal score except that {@link #getInitScore()} is {@code 0}.\n+     * @deprecated Use {@link #withInitScore(int)} with 0 as the argument.\n      */\n-    Score_ toInitializedScore();\n+    @Deprecated\n+    default Score_ toInitializedScore() {\n+        if (isSolutionInitialized()) {\n+            return (Score_) this;\n+        } else {\n+            return withInitScore(0);\n+        }\n+    }\n \n     /**\n      * For example {@code 0hard/-8soft} with {@code -7} returns {@code -7init/0hard/-8soft}.\n      *\n      * @param newInitScore always negative (except in statistical calculations), 0 if all planning variables are initialized\n      * @return equals score except that {@link #getInitScore()} is set to {@code newInitScore}\n-     * @throws IllegalStateException if the original {@link #getInitScore()} is not 0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY3NDg1NA=="}, "originalCommit": {"oid": "cd2c6a9b7806a20370b5288379d60fe2d318b088"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgxMTI1Mw==", "bodyText": "I'd add a fail-fast check in both those directors, if the score returned by calculateScore() has a non-zero initScore.", "url": "https://github.com/kiegroup/optaplanner/pull/776#discussion_r423811253", "createdAt": "2020-05-12T15:08:22Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/Score.java", "diffHunk": "@@ -60,15 +63,22 @@\n      * For example {@code -7init/0hard/-8soft} returns {@code 0hard/-8soft}.\n      *\n      * @return equal score except that {@link #getInitScore()} is {@code 0}.\n+     * @deprecated Use {@link #withInitScore(int)} with 0 as the argument.\n      */\n-    Score_ toInitializedScore();\n+    @Deprecated\n+    default Score_ toInitializedScore() {\n+        if (isSolutionInitialized()) {\n+            return (Score_) this;\n+        } else {\n+            return withInitScore(0);\n+        }\n+    }\n \n     /**\n      * For example {@code 0hard/-8soft} with {@code -7} returns {@code -7init/0hard/-8soft}.\n      *\n      * @param newInitScore always negative (except in statistical calculations), 0 if all planning variables are initialized\n      * @return equals score except that {@link #getInitScore()} is set to {@code newInitScore}\n-     * @throws IllegalStateException if the original {@link #getInitScore()} is not 0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY3NDg1NA=="}, "originalCommit": {"oid": "cd2c6a9b7806a20370b5288379d60fe2d318b088"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzOTIzNjcyOnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/Score.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNTowOTo0MFrOGULcNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNTowOTo0MFrOGULcNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgxMjE1MQ==", "bodyText": "not sure if it's worth adding, but \"(unless their {@link #getInitScore()} isn't 0)\"", "url": "https://github.com/kiegroup/optaplanner/pull/776#discussion_r423812151", "createdAt": "2020-05-12T15:09:40Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/Score.java", "diffHunk": "@@ -155,6 +165,22 @@\n      */\n     boolean isCompatibleArithmeticArgument(Score otherScore);\n \n+    /**\n+     * A {@link PlanningSolution} is feasible if it has no broken hard constraints\n+     * and {@link #isSolutionInitialized()} is true.\n+     *\n+     * Simple scores ({@link SimpleScore}, {@link SimpleLongScore}, {@link SimpleBigDecimalScore}) are always feasible.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55296c27897b7a14a9fd8a1791953133ead2d9b3"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzOTI2NzU4OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/comparator/NaturalScoreComparator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNToxNjowMlrOGULvQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNToxODoxNFrOGUL1jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgxNzAyNw==", "bodyText": "\"it is trivial to implement\" says the rocket engineer on how to build a V2 missle :)\nMaybe mention how to build a comparator on natural comparison? Especially in the upgrade recipe, to save users from have to look that up on SO.", "url": "https://github.com/kiegroup/optaplanner/pull/776#discussion_r423817027", "createdAt": "2020-05-12T15:16:02Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/comparator/NaturalScoreComparator.java", "diffHunk": "@@ -23,7 +23,10 @@\n \n /**\n  * Compares by the natural order of {@link Score}s.\n+ * \n+ * @deprecated If you need this, it is trivial to implement.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55296c27897b7a14a9fd8a1791953133ead2d9b3"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgxODYzOA==", "bodyText": "Ah, its just Comparable::compareTo apparently?", "url": "https://github.com/kiegroup/optaplanner/pull/776#discussion_r423818638", "createdAt": "2020-05-12T15:18:14Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/comparator/NaturalScoreComparator.java", "diffHunk": "@@ -23,7 +23,10 @@\n \n /**\n  * Compares by the natural order of {@link Score}s.\n+ * \n+ * @deprecated If you need this, it is trivial to implement.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgxNzAyNw=="}, "originalCommit": {"oid": "55296c27897b7a14a9fd8a1791953133ead2d9b3"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzOTI4MzQxOnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/buildin/hardmediumsoft/HardMediumSoftScoreDefinition.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNToxOTozOFrOGUL5zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNToxOTozOFrOGUL5zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgxOTcyNg==", "bodyText": "AbstractScoreDefinition implements ScoreDefinition, no need to mention it twice. Remove the \"implements\".\nSame in other files.", "url": "https://github.com/kiegroup/optaplanner/pull/776#discussion_r423819726", "createdAt": "2020-05-12T15:19:38Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/buildin/hardmediumsoft/HardMediumSoftScoreDefinition.java", "diffHunk": "@@ -21,11 +21,13 @@\n import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScore;\n import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScoreHolder;\n import org.optaplanner.core.config.score.trend.InitializingScoreTrendLevel;\n-import org.optaplanner.core.impl.score.definition.AbstractFeasibilityScoreDefinition;\n+import org.optaplanner.core.impl.score.definition.AbstractScoreDefinition;\n+import org.optaplanner.core.impl.score.definition.ScoreDefinition;\n import org.optaplanner.core.impl.score.inliner.ScoreInliner;\n import org.optaplanner.core.impl.score.trend.InitializingScoreTrend;\n \n-public class HardMediumSoftScoreDefinition extends AbstractFeasibilityScoreDefinition<HardMediumSoftScore> {\n+public class HardMediumSoftScoreDefinition extends AbstractScoreDefinition<HardMediumSoftScore>\n+        implements ScoreDefinition<HardMediumSoftScore> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55296c27897b7a14a9fd8a1791953133ead2d9b3"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzOTI4ODA1OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/definition/AbstractBendableScoreDefinition.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNToyMDozM1rOGUL8qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNToyMDozM1rOGUL8qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgyMDQ1Nw==", "bodyText": "same here, AbstractScoreDefinition already implements it", "url": "https://github.com/kiegroup/optaplanner/pull/776#discussion_r423820457", "createdAt": "2020-05-12T15:20:33Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/definition/AbstractBendableScoreDefinition.java", "diffHunk": "@@ -18,8 +18,8 @@\n \n import org.optaplanner.core.api.score.FeasibilityScore;\n \n-public abstract class AbstractBendableScoreDefinition<S extends FeasibilityScore<S>>\n-        extends AbstractFeasibilityScoreDefinition<S> {\n+public abstract class AbstractBendableScoreDefinition<S extends FeasibilityScore<S>> extends AbstractScoreDefinition<S>\n+        implements ScoreDefinition<S> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55296c27897b7a14a9fd8a1791953133ead2d9b3"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4528, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}