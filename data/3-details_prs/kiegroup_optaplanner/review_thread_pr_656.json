{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyNTgwNDg0", "number": 656, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwOTowNTo0M1rODYGngg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMTowNTo1MFrODYd3Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NjAwODM0OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/uni/UniConstraintStream.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwOTowNTo0M1rOFdxQXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwODoxNzozNVrOFexjng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc2MDAyOQ==", "bodyText": "This is a good reason to think long and hard if we want to support PentaConstraintStreams.\nQuadsStreams are still needed, definitely, despite this. It's worth it. Absolutely.", "url": "https://github.com/kiegroup/optaplanner/pull/656#discussion_r366760029", "createdAt": "2020-01-15T09:05:43Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/uni/UniConstraintStream.java", "diffHunk": "@@ -258,6 +259,31 @@\n             Function<A, GroupKeyA_> groupKeyAMapping, Function<A, GroupKeyB_> groupKeyBMapping,\n             UniConstraintCollector<A, ResultContainer_, Result_> collector);\n \n+    /**\n+     * Combines the semantics of {@link #groupBy(Function, Function)} and {@link #groupBy(UniConstraintCollector)}.\n+     * That is, the first and second facts in the tuple follow the {@link #groupBy(Function, Function)} semantics.\n+     * The third fact is the result of applying the first {@link UniConstraintCollector#finisher()} on all the tuples\n+     * of the original {@link UniConstraintStream} that belong to the group.\n+     * The fourth fact is the result of applying the second {@link UniConstraintCollector#finisher()} on all the tuples\n+     * of the original {@link UniConstraintStream} that belong to the group\n+     * @param groupKeyAMapping never null, function to convert the original tuple into a first fact\n+     * @param groupKeyBMapping never null, function to convert the original tuple into a second fact\n+     * @param collectorC never null, the collector to perform the first grouping operation with\n+     * @param collectorD never null, the collector to perform the first grouping operation with\n+     * @param <GroupKeyA_> the type of the first fact in the destination {@link QuadConstraintStream}'s tuple\n+     * @param <GroupKeyB_> the type of the second fact in the destination {@link QuadConstraintStream}'s tuple\n+     * @param <ResultContainerC_> the mutable accumulation type (often hidden as an implementation detail)\n+     * @param <ResultC_> the type of the third fact in the destination {@link QuadConstraintStream}'s tuple\n+     * @param <ResultContainerD_> the mutable accumulation type (often hidden as an implementation detail)\n+     * @param <ResultD_> the type of the fourth fact in the destination {@link QuadConstraintStream}'s tuple\n+     * @return never null\n+     */\n+    <GroupKeyA_, GroupKeyB_, ResultContainerC_, ResultC_, ResultContainerD_, ResultD_>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "403be23f358738ebd72de21a219e3aec7aa5cef4"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc2MjU5NQ==", "bodyText": "My thinking on this:\n\nThe number of use cases for n-streams will be decreasing as n is increasing. Therefore when (if) we do penta, hexa will bring even more diminishing results.\nThis could all be solved with dynamic cardinality streams, that can handle any number of parameters. (Essentially varargs.)\nHowever, that would not be done with Java generics. In this kind of work, generics is the one thing that keeps me sane. If all I had throughout constraint streams were Objects, I would have gone mad.\n\nAll in all, if we have to add more streams, I'd much rather go for Penta than for Dynamic.", "url": "https://github.com/kiegroup/optaplanner/pull/656#discussion_r366762595", "createdAt": "2020-01-15T09:11:11Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/uni/UniConstraintStream.java", "diffHunk": "@@ -258,6 +259,31 @@\n             Function<A, GroupKeyA_> groupKeyAMapping, Function<A, GroupKeyB_> groupKeyBMapping,\n             UniConstraintCollector<A, ResultContainer_, Result_> collector);\n \n+    /**\n+     * Combines the semantics of {@link #groupBy(Function, Function)} and {@link #groupBy(UniConstraintCollector)}.\n+     * That is, the first and second facts in the tuple follow the {@link #groupBy(Function, Function)} semantics.\n+     * The third fact is the result of applying the first {@link UniConstraintCollector#finisher()} on all the tuples\n+     * of the original {@link UniConstraintStream} that belong to the group.\n+     * The fourth fact is the result of applying the second {@link UniConstraintCollector#finisher()} on all the tuples\n+     * of the original {@link UniConstraintStream} that belong to the group\n+     * @param groupKeyAMapping never null, function to convert the original tuple into a first fact\n+     * @param groupKeyBMapping never null, function to convert the original tuple into a second fact\n+     * @param collectorC never null, the collector to perform the first grouping operation with\n+     * @param collectorD never null, the collector to perform the first grouping operation with\n+     * @param <GroupKeyA_> the type of the first fact in the destination {@link QuadConstraintStream}'s tuple\n+     * @param <GroupKeyB_> the type of the second fact in the destination {@link QuadConstraintStream}'s tuple\n+     * @param <ResultContainerC_> the mutable accumulation type (often hidden as an implementation detail)\n+     * @param <ResultC_> the type of the third fact in the destination {@link QuadConstraintStream}'s tuple\n+     * @param <ResultContainerD_> the mutable accumulation type (often hidden as an implementation detail)\n+     * @param <ResultD_> the type of the fourth fact in the destination {@link QuadConstraintStream}'s tuple\n+     * @return never null\n+     */\n+    <GroupKeyA_, GroupKeyB_, ResultContainerC_, ResultC_, ResultContainerD_, ResultD_>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc2MDAyOQ=="}, "originalCommit": {"oid": "403be23f358738ebd72de21a219e3aec7aa5cef4"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMxMTkyNg==", "bodyText": "One more thing to note - with dynamic cardinality streams not only would Lukas lose the type safety, but users as well.", "url": "https://github.com/kiegroup/optaplanner/pull/656#discussion_r367311926", "createdAt": "2020-01-16T09:28:19Z", "author": {"login": "rsynek"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/uni/UniConstraintStream.java", "diffHunk": "@@ -258,6 +259,31 @@\n             Function<A, GroupKeyA_> groupKeyAMapping, Function<A, GroupKeyB_> groupKeyBMapping,\n             UniConstraintCollector<A, ResultContainer_, Result_> collector);\n \n+    /**\n+     * Combines the semantics of {@link #groupBy(Function, Function)} and {@link #groupBy(UniConstraintCollector)}.\n+     * That is, the first and second facts in the tuple follow the {@link #groupBy(Function, Function)} semantics.\n+     * The third fact is the result of applying the first {@link UniConstraintCollector#finisher()} on all the tuples\n+     * of the original {@link UniConstraintStream} that belong to the group.\n+     * The fourth fact is the result of applying the second {@link UniConstraintCollector#finisher()} on all the tuples\n+     * of the original {@link UniConstraintStream} that belong to the group\n+     * @param groupKeyAMapping never null, function to convert the original tuple into a first fact\n+     * @param groupKeyBMapping never null, function to convert the original tuple into a second fact\n+     * @param collectorC never null, the collector to perform the first grouping operation with\n+     * @param collectorD never null, the collector to perform the first grouping operation with\n+     * @param <GroupKeyA_> the type of the first fact in the destination {@link QuadConstraintStream}'s tuple\n+     * @param <GroupKeyB_> the type of the second fact in the destination {@link QuadConstraintStream}'s tuple\n+     * @param <ResultContainerC_> the mutable accumulation type (often hidden as an implementation detail)\n+     * @param <ResultC_> the type of the third fact in the destination {@link QuadConstraintStream}'s tuple\n+     * @param <ResultContainerD_> the mutable accumulation type (often hidden as an implementation detail)\n+     * @param <ResultD_> the type of the fourth fact in the destination {@link QuadConstraintStream}'s tuple\n+     * @return never null\n+     */\n+    <GroupKeyA_, GroupKeyB_, ResultContainerC_, ResultC_, ResultContainerD_, ResultD_>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc2MDAyOQ=="}, "originalCommit": {"oid": "403be23f358738ebd72de21a219e3aec7aa5cef4"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgwNTk1MQ==", "bodyText": "At some point, we will need to support dynamic cardinality streams. We can argue whether that's at Penta, Hexa, septi, octo, novem, ..., novemnonagint, centi or higher ;) As indeed users lose type safetly.\nAs for the design, I was thinking of PolyConstraintStream extends AbstractConstraintStream<Object[]>. Either way: out of scope for now (poly and penta).", "url": "https://github.com/kiegroup/optaplanner/pull/656#discussion_r367805951", "createdAt": "2020-01-17T07:52:39Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/uni/UniConstraintStream.java", "diffHunk": "@@ -258,6 +259,31 @@\n             Function<A, GroupKeyA_> groupKeyAMapping, Function<A, GroupKeyB_> groupKeyBMapping,\n             UniConstraintCollector<A, ResultContainer_, Result_> collector);\n \n+    /**\n+     * Combines the semantics of {@link #groupBy(Function, Function)} and {@link #groupBy(UniConstraintCollector)}.\n+     * That is, the first and second facts in the tuple follow the {@link #groupBy(Function, Function)} semantics.\n+     * The third fact is the result of applying the first {@link UniConstraintCollector#finisher()} on all the tuples\n+     * of the original {@link UniConstraintStream} that belong to the group.\n+     * The fourth fact is the result of applying the second {@link UniConstraintCollector#finisher()} on all the tuples\n+     * of the original {@link UniConstraintStream} that belong to the group\n+     * @param groupKeyAMapping never null, function to convert the original tuple into a first fact\n+     * @param groupKeyBMapping never null, function to convert the original tuple into a second fact\n+     * @param collectorC never null, the collector to perform the first grouping operation with\n+     * @param collectorD never null, the collector to perform the first grouping operation with\n+     * @param <GroupKeyA_> the type of the first fact in the destination {@link QuadConstraintStream}'s tuple\n+     * @param <GroupKeyB_> the type of the second fact in the destination {@link QuadConstraintStream}'s tuple\n+     * @param <ResultContainerC_> the mutable accumulation type (often hidden as an implementation detail)\n+     * @param <ResultC_> the type of the third fact in the destination {@link QuadConstraintStream}'s tuple\n+     * @param <ResultContainerD_> the mutable accumulation type (often hidden as an implementation detail)\n+     * @param <ResultD_> the type of the fourth fact in the destination {@link QuadConstraintStream}'s tuple\n+     * @return never null\n+     */\n+    <GroupKeyA_, GroupKeyB_, ResultContainerC_, ResultC_, ResultContainerD_, ResultD_>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc2MDAyOQ=="}, "originalCommit": {"oid": "403be23f358738ebd72de21a219e3aec7aa5cef4"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgwNjM1Mg==", "bodyText": "Just think about it for a second.\nNovemnonagintConstraintStream<A, B, C, D, E, F, G, ... 99 in total>", "url": "https://github.com/kiegroup/optaplanner/pull/656#discussion_r367806352", "createdAt": "2020-01-17T07:53:59Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/uni/UniConstraintStream.java", "diffHunk": "@@ -258,6 +259,31 @@\n             Function<A, GroupKeyA_> groupKeyAMapping, Function<A, GroupKeyB_> groupKeyBMapping,\n             UniConstraintCollector<A, ResultContainer_, Result_> collector);\n \n+    /**\n+     * Combines the semantics of {@link #groupBy(Function, Function)} and {@link #groupBy(UniConstraintCollector)}.\n+     * That is, the first and second facts in the tuple follow the {@link #groupBy(Function, Function)} semantics.\n+     * The third fact is the result of applying the first {@link UniConstraintCollector#finisher()} on all the tuples\n+     * of the original {@link UniConstraintStream} that belong to the group.\n+     * The fourth fact is the result of applying the second {@link UniConstraintCollector#finisher()} on all the tuples\n+     * of the original {@link UniConstraintStream} that belong to the group\n+     * @param groupKeyAMapping never null, function to convert the original tuple into a first fact\n+     * @param groupKeyBMapping never null, function to convert the original tuple into a second fact\n+     * @param collectorC never null, the collector to perform the first grouping operation with\n+     * @param collectorD never null, the collector to perform the first grouping operation with\n+     * @param <GroupKeyA_> the type of the first fact in the destination {@link QuadConstraintStream}'s tuple\n+     * @param <GroupKeyB_> the type of the second fact in the destination {@link QuadConstraintStream}'s tuple\n+     * @param <ResultContainerC_> the mutable accumulation type (often hidden as an implementation detail)\n+     * @param <ResultC_> the type of the third fact in the destination {@link QuadConstraintStream}'s tuple\n+     * @param <ResultContainerD_> the mutable accumulation type (often hidden as an implementation detail)\n+     * @param <ResultD_> the type of the fourth fact in the destination {@link QuadConstraintStream}'s tuple\n+     * @return never null\n+     */\n+    <GroupKeyA_, GroupKeyB_, ResultContainerC_, ResultC_, ResultContainerD_, ResultD_>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc2MDAyOQ=="}, "originalCommit": {"oid": "403be23f358738ebd72de21a219e3aec7aa5cef4"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgxMzUzNA==", "bodyText": "@ge0ffrey The biggest pain seems to be the combinatorial explosion of grouping operations => too many possible groupKeys and collectors that bring you to/from stream of a different arity.", "url": "https://github.com/kiegroup/optaplanner/pull/656#discussion_r367813534", "createdAt": "2020-01-17T08:17:35Z", "author": {"login": "rsynek"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/uni/UniConstraintStream.java", "diffHunk": "@@ -258,6 +259,31 @@\n             Function<A, GroupKeyA_> groupKeyAMapping, Function<A, GroupKeyB_> groupKeyBMapping,\n             UniConstraintCollector<A, ResultContainer_, Result_> collector);\n \n+    /**\n+     * Combines the semantics of {@link #groupBy(Function, Function)} and {@link #groupBy(UniConstraintCollector)}.\n+     * That is, the first and second facts in the tuple follow the {@link #groupBy(Function, Function)} semantics.\n+     * The third fact is the result of applying the first {@link UniConstraintCollector#finisher()} on all the tuples\n+     * of the original {@link UniConstraintStream} that belong to the group.\n+     * The fourth fact is the result of applying the second {@link UniConstraintCollector#finisher()} on all the tuples\n+     * of the original {@link UniConstraintStream} that belong to the group\n+     * @param groupKeyAMapping never null, function to convert the original tuple into a first fact\n+     * @param groupKeyBMapping never null, function to convert the original tuple into a second fact\n+     * @param collectorC never null, the collector to perform the first grouping operation with\n+     * @param collectorD never null, the collector to perform the first grouping operation with\n+     * @param <GroupKeyA_> the type of the first fact in the destination {@link QuadConstraintStream}'s tuple\n+     * @param <GroupKeyB_> the type of the second fact in the destination {@link QuadConstraintStream}'s tuple\n+     * @param <ResultContainerC_> the mutable accumulation type (often hidden as an implementation detail)\n+     * @param <ResultC_> the type of the third fact in the destination {@link QuadConstraintStream}'s tuple\n+     * @param <ResultContainerD_> the mutable accumulation type (often hidden as an implementation detail)\n+     * @param <ResultD_> the type of the fourth fact in the destination {@link QuadConstraintStream}'s tuple\n+     * @return never null\n+     */\n+    <GroupKeyA_, GroupKeyB_, ResultContainerC_, ResultC_, ResultContainerD_, ResultD_>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc2MDAyOQ=="}, "originalCommit": {"oid": "403be23f358738ebd72de21a219e3aec7aa5cef4"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NjAxNDM2OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/drools/common/QuadTuple.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwOTowNzo0OFrOFdxT-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwODowMTozM1rOFexQrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc2MDk1Mg==", "bodyText": "Maybe this QuadTuple can also belongs in the quad package?\nBavet's impl does that: it's UniTuple is in the uni package, same for bi, etc.", "url": "https://github.com/kiegroup/optaplanner/pull/656#discussion_r366760952", "createdAt": "2020-01-15T09:07:48Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/drools/common/QuadTuple.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.score.stream.drools.common;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "403be23f358738ebd72de21a219e3aec7aa5cef4"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc2MzU3Ng==", "bodyText": "If you open the code in the IDE, you'll see that some of these tuples are being used from more than just one package - therefore I put them all in common for the sake of consistency.", "url": "https://github.com/kiegroup/optaplanner/pull/656#discussion_r366763576", "createdAt": "2020-01-15T09:13:18Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/drools/common/QuadTuple.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.score.stream.drools.common;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc2MDk1Mg=="}, "originalCommit": {"oid": "403be23f358738ebd72de21a219e3aec7aa5cef4"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgwODY4Ng==", "bodyText": "I wonder where the natural conclusion of these PRs (bi, tri, quad, pent..) will be!??\n\nI guess either a future Java release supports dynamic number of generic parameters or we reach the largest natural number. Whatever comes first ;-)\nThe pain we go through so our users can have a strongly typed API... :)", "url": "https://github.com/kiegroup/optaplanner/pull/656#discussion_r367808686", "createdAt": "2020-01-17T08:01:33Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/drools/common/QuadTuple.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.score.stream.drools.common;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc2MDk1Mg=="}, "originalCommit": {"oid": "403be23f358738ebd72de21a219e3aec7aa5cef4"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTYwMTUzOnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/bi/BiConstraintStream.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwOTo1MzozNFrOFeTsaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwOTo1MzozNFrOFeTsaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyNDI2NQ==", "bodyText": "\"the a fact\"", "url": "https://github.com/kiegroup/optaplanner/pull/656#discussion_r367324265", "createdAt": "2020-01-16T09:53:34Z", "author": {"login": "rsynek"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/bi/BiConstraintStream.java", "diffHunk": "@@ -224,9 +225,9 @@\n      * Convert the {@link BiConstraintStream} to a different {@link BiConstraintStream}, consisting of unique tuples.\n      * <p>\n      * The first fact is the return value of the first group key mapping function, applied on the incoming tuple.\n-     * The second fact is the return value of a given {@link BiConstraintCollector} applied on incoming tuples with the\n-     * same first fact.\n-     * @param groupKeyMapping never null, function to convert a fact in original tuple to a different fact\n+     * The second fact is the return value of a given {@link BiConstraintCollector} applied on all incoming tuples with\n+     * the same first fact.\n+     * @param groupKeyMapping never null, function to convert the a fact in original tuple to a different fact", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6816e5e2ce9dddd26ee0bb4ae7f22db369c95f0"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTgxNjgyOnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/quad/QuadConstraintStream.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMTowNTo1MFrOFeVxIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMTowNTo1MFrOFeVxIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM1ODI0Mg==", "bodyText": "I noticed there is a potential for some other combinations, e.g.:\n\n3 grouping functions, no collector => TriStream\n3 grouping functions, 1 collector => QuadStream\n\nBut as discussed, these might be added later.", "url": "https://github.com/kiegroup/optaplanner/pull/656#discussion_r367358242", "createdAt": "2020-01-16T11:05:50Z", "author": {"login": "rsynek"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/quad/QuadConstraintStream.java", "diffHunk": "@@ -61,6 +63,111 @@\n      */\n     QuadConstraintStream<A, B, C, D> filter(QuadPredicate<A, B, C, D> predicate);\n \n+    // ************************************************************************\n+    // Group by\n+    // ************************************************************************\n+\n+    /**\n+     * Convert the {@link QuadConstraintStream} to a {@link UniConstraintStream}, containing only a single tuple, the\n+     * result of applying {@link QuadConstraintCollector}.\n+     * {@link UniConstraintStream} which only has a single tuple, the result of applying\n+     * {@link QuadConstraintCollector}.\n+     * @param collector never null, the collector to perform the grouping operation with\n+     * @param <ResultContainer_> the mutable accumulation type (often hidden as an implementation detail)\n+     * @param <Result_> the type of a fact in the destination {@link UniConstraintStream}'s tuple\n+     * @return never null\n+     */\n+    <ResultContainer_, Result_> UniConstraintStream<Result_> groupBy(\n+            QuadConstraintCollector<A, B, C, D, ResultContainer_, Result_> collector);\n+\n+    /**\n+     * Convert the {@link QuadConstraintStream} to a {@link UniConstraintStream}, containing the set of tuples resulting\n+     * from applying the group key mapping function on all tuples of the original stream.\n+     * Neither tuple of the new stream {@link Objects#equals(Object, Object)} any other.\n+     * @param groupKeyMapping never null, mapping function to convert each element in the stream to a different element\n+     * @param <GroupKey_> the type of a fact in the destination {@link UniConstraintStream}'s tuple\n+     * @return never null\n+     */\n+    <GroupKey_> UniConstraintStream<GroupKey_> groupBy(QuadFunction<A, B, C, D, GroupKey_> groupKeyMapping);\n+\n+    /**\n+     * Convert the {@link QuadConstraintStream} to a {@link BiConstraintStream}, consisting of unique tuples.\n+     * <p>\n+     * The first fact is the return value of the first group key mapping function, applied on the incoming tuple.\n+     * The second fact is the return value of a given {@link QuadConstraintCollector} applied on all incoming tuples\n+     * with the same first fact.\n+     * @param groupKeyMapping never null, function to convert the a fact in original tuple to a different fact\n+     * @param <GroupKey_> the type of the first fact in the destination {@link BiConstraintStream}'s tuple\n+     * @param <ResultContainer_> the mutable accumulation type (often hidden as an implementation detail)\n+     * @param <Result_> the type of the second fact in the destination {@link BiConstraintStream}'s tuple\n+     * @return never null\n+     */\n+    <GroupKey_, ResultContainer_, Result_> BiConstraintStream<GroupKey_, Result_> groupBy(\n+            QuadFunction<A, B, C, D, GroupKey_> groupKeyMapping,\n+            QuadConstraintCollector<A, B, C, D, ResultContainer_, Result_> collector);\n+\n+    /**\n+     * Convert the {@link QuadConstraintStream} to a {@link BiConstraintStream}, consisting of unique tuples.\n+     * <p>\n+     * The first fact is the return value of the first group key mapping function, applied on the incoming tuple.\n+     * The second fact is the return value of the second group key mapping function, applied on all incoming tuples with\n+     * the same first fact.\n+     * @param groupKeyAMapping never null, function to convert the facts in the original tuple to a new fact\n+     * @param groupKeyBMapping never null, function to convert the facts in the original tuple to another new fact\n+     * @param <GroupKeyA_> the type of the first fact in the destination {@link BiConstraintStream}'s tuple\n+     * @param <GroupKeyB_> the type of the second fact in the destination {@link BiConstraintStream}'s tuple\n+     * @return never null\n+     */\n+    <GroupKeyA_, GroupKeyB_> BiConstraintStream<GroupKeyA_, GroupKeyB_> groupBy(\n+            QuadFunction<A, B, C, D, GroupKeyA_> groupKeyAMapping, QuadFunction<A, B, C, D, GroupKeyB_> groupKeyBMapping);\n+\n+    /**\n+     * Combines the semantics of {@link #groupBy(QuadFunction, QuadFunction)} and\n+     * {@link #groupBy(QuadConstraintCollector)}.\n+     * That is, the first and second facts in the tuple follow the {@link #groupBy(QuadFunction, QuadFunction)}\n+     * semantics,\n+     * and the third fact is the result of applying {@link QuadConstraintCollector#finisher()} on all the tuples of the\n+     * original {@link UniConstraintStream} that belong to the group.\n+     * @param groupKeyAMapping never null, function to convert the original tuple into a first fact\n+     * @param groupKeyBMapping never null, function to convert the original tuple into a second fact\n+     * @param collector never null, the collector to perform the grouping operation with\n+     * @param <GroupKeyA_> the type of the first fact in the destination {@link TriConstraintStream}'s tuple\n+     * @param <GroupKeyB_> the type of the second fact in the destination {@link TriConstraintStream}'s tuple\n+     * @param <ResultContainer_> the mutable accumulation type (often hidden as an implementation detail)\n+     * @param <Result_> the type of the third fact in the destination {@link TriConstraintStream}'s tuple\n+     * @return never null\n+     */\n+    <GroupKeyA_, GroupKeyB_, ResultContainer_, Result_> TriConstraintStream<GroupKeyA_, GroupKeyB_, Result_> groupBy(\n+            QuadFunction<A, B, C, D, GroupKeyA_> groupKeyAMapping, QuadFunction<A, B, C, D, GroupKeyB_> groupKeyBMapping,\n+            QuadConstraintCollector<A, B, C, D, ResultContainer_, Result_> collector);\n+\n+    /**\n+     * Combines the semantics of {@link #groupBy(QuadFunction, QuadFunction)} and\n+     * {@link #groupBy(QuadConstraintCollector)}.\n+     * That is, the first and second facts in the tuple follow the {@link #groupBy(QuadFunction, QuadFunction)}\n+     * semantics.\n+     * The third fact is the result of applying the first {@link QuadConstraintCollector#finisher()} on all the tuples\n+     * of the original {@link QuadConstraintStream} that belong to the group.\n+     * The fourth fact is the result of applying the second {@link QuadConstraintCollector#finisher()} on all the tuples\n+     * of the original {@link QuadConstraintStream} that belong to the group\n+     * @param groupKeyAMapping never null, function to convert the original tuple into a first fact\n+     * @param groupKeyBMapping never null, function to convert the original tuple into a second fact\n+     * @param collectorC never null, the collector to perform the first grouping operation with\n+     * @param collectorD never null, the collector to perform the first grouping operation with\n+     * @param <GroupKeyA_> the type of the first fact in the destination {@link QuadConstraintStream}'s tuple\n+     * @param <GroupKeyB_> the type of the second fact in the destination {@link QuadConstraintStream}'s tuple\n+     * @param <ResultContainerC_> the mutable accumulation type (often hidden as an implementation detail)\n+     * @param <ResultC_> the type of the third fact in the destination {@link QuadConstraintStream}'s tuple\n+     * @param <ResultContainerD_> the mutable accumulation type (often hidden as an implementation detail)\n+     * @param <ResultD_> the type of the fourth fact in the destination {@link QuadConstraintStream}'s tuple\n+     * @return never null\n+     */\n+    <GroupKeyA_, GroupKeyB_, ResultContainerC_, ResultC_, ResultContainerD_, ResultD_>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6816e5e2ce9dddd26ee0bb4ae7f22db369c95f0"}, "originalPosition": 126}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4573, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}