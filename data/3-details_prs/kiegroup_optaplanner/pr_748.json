{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzNjIxNjY1", "number": 748, "title": "PLANNER-1861 Prioritizing CS in docs and Javadocs", "bodyText": "", "createdAt": "2020-04-15T08:40:13Z", "url": "https://github.com/kiegroup/optaplanner/pull/748", "merged": true, "mergeCommit": {"oid": "3d04cb34e381870ed87dd50e316abaf168842695"}, "closed": true, "closedAt": "2020-04-15T11:52:14Z", "author": {"login": "triceo"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcXz-CyAH2gAyNDAzNjIxNjY1OjNmNTBjZjUxZWM1Y2M1N2JkNDEwNTBjZjc5MjAyMDdmMTk1MGRjNzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcX2roKAH2gAyNDAzNjIxNjY1OjFmOWVkYmY0YzE1YjgxOTRiZDJhMGM1OWJkZWRkYjFlZDYxYWNiYTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3f50cf51ec5cc57bd41050cf7920207f1950dc70", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/3f50cf51ec5cc57bd41050cf7920207f1950dc70", "committedDate": "2020-04-15T08:39:16Z", "message": "PLANNER-1861 Prioritizing CS in docs and Javadocs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "385ecadddea84337cfad1c25e2141ac677914bc1", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/385ecadddea84337cfad1c25e2141ac677914bc1", "committedDate": "2020-04-15T08:47:32Z", "message": "Less duplication"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5dca3c83183dfcf359c7ea8d94665491fffcb130", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/5dca3c83183dfcf359c7ea8d94665491fffcb130", "committedDate": "2020-04-15T08:49:05Z", "message": "Don't use \"we\""}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzNTkyODQ2", "url": "https://github.com/kiegroup/optaplanner/pull/748#pullrequestreview-393592846", "createdAt": "2020-04-15T09:10:23Z", "commit": {"oid": "5dca3c83183dfcf359c7ea8d94665491fffcb130"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOToxMDoyM1rOGFwwfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOToxMDoyM1rOGFwwfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5NDkxMA==", "bodyText": "\"we\"", "url": "https://github.com/kiegroup/optaplanner/pull/748#discussion_r408694910", "createdAt": "2020-04-15T09:10:23Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-docs/src/main/asciidoc/DroolsScoreCalculation/DroolsScoreCalculation-chapter.adoc", "diffHunk": "@@ -301,3 +301,98 @@ end\n Notice how `addSoftConstraintMatch()` specifies that it's a soft constraint,\n and needs a negative number to penalize each match. Otherwise it would reward such matches.\n The parameter `($capacity - $studentSize)` always results in a negative number because `studentSize > $capacity`.\n+\n+\n+[[testingDroolsConstraints]]\n+== Testing Drools-based constraints\n+\n+Drools-based constraints come with a unit testing harness.\n+To use it, first add a test scoped dependency to the `optaplanner-test` jar to take advantage of the JUnit integration\n+and use the `ScoreVerifier` classes to test score rules in DRL (or a constraint match aware incremental score calculator).\n+For example, suppose we want to test these score rules:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dca3c83183dfcf359c7ea8d94665491fffcb130"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzNTk0Mzg4", "url": "https://github.com/kiegroup/optaplanner/pull/748#pullrequestreview-393594388", "createdAt": "2020-04-15T09:12:28Z", "commit": {"oid": "5dca3c83183dfcf359c7ea8d94665491fffcb130"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOToxMjoyOFrOGFw1OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOToxMjoyOFrOGFw1OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5NjEyMQ==", "bodyText": "\"we have a ...\" -> \"create a ...\"", "url": "https://github.com/kiegroup/optaplanner/pull/748#discussion_r408696121", "createdAt": "2020-04-15T09:12:28Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-docs/src/main/asciidoc/DroolsScoreCalculation/DroolsScoreCalculation-chapter.adoc", "diffHunk": "@@ -301,3 +301,98 @@ end\n Notice how `addSoftConstraintMatch()` specifies that it's a soft constraint,\n and needs a negative number to penalize each match. Otherwise it would reward such matches.\n The parameter `($capacity - $studentSize)` always results in a negative number because `studentSize > $capacity`.\n+\n+\n+[[testingDroolsConstraints]]\n+== Testing Drools-based constraints\n+\n+Drools-based constraints come with a unit testing harness.\n+To use it, first add a test scoped dependency to the `optaplanner-test` jar to take advantage of the JUnit integration\n+and use the `ScoreVerifier` classes to test score rules in DRL (or a constraint match aware incremental score calculator).\n+For example, suppose we want to test these score rules:\n+\n+[source,options=\"nowrap\"]\n+----\n+global HardSoftScoreHolder scoreHolder;\n+\n+rule \"requiredCpuPowerTotal\"\n+    when\n+        ...\n+    then\n+        scoreHolder.addHardConstraintMatch(...);\n+end\n+\n+...\n+\n+rule \"computerCost\"\n+    when\n+        ...\n+    then\n+        scoreHolder.addSoftConstraintMatch(...);\n+end\n+----\n+\n+For each score rule, we have a separate `@Test` that only tests the effect of that score rule on the score:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dca3c83183dfcf359c7ea8d94665491fffcb130"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzNTk0NTgy", "url": "https://github.com/kiegroup/optaplanner/pull/748#pullrequestreview-393594582", "createdAt": "2020-04-15T09:12:45Z", "commit": {"oid": "5dca3c83183dfcf359c7ea8d94665491fffcb130"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f9edbf4c15b8194bd2a0c59bdeddb1ed61acba3", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/1f9edbf4c15b8194bd2a0c59bdeddb1ed61acba3", "committedDate": "2020-04-15T11:48:52Z", "message": "Code review comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2933, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}