{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5MjI3Nzc5", "number": 814, "title": "PLANNER-2011 Somewhat improve Examination Constraint Provider performance", "bodyText": "Minor improvements in index performance. Also re-implements parts of the constraint provider to do the same thing as DRL does.\nThis speeds up Examination from 6 to ~140. So still bad, but not apocalyptic anymore.", "createdAt": "2020-06-24T14:01:02Z", "url": "https://github.com/kiegroup/optaplanner/pull/814", "merged": true, "mergeCommit": {"oid": "5277ce4dc7eb9cf86d96b43e3d9094394e169ae9"}, "closed": true, "closedAt": "2020-06-25T13:48:38Z", "author": {"login": "triceo"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcuaiWbgFqTQzNjY3NjUyMQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcuut7kABqjM0ODI0MDc3NDc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2Njc2NTIx", "url": "https://github.com/kiegroup/optaplanner/pull/814#pullrequestreview-436676521", "createdAt": "2020-06-24T14:01:39Z", "commit": {"oid": "57282228ac0511dfaffbd307530dc69e8c87cbd9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNDowMTozOVrOGoThpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNDowMTozOVrOGoThpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkxNjEzMw==", "bodyText": "I am removing this as it just replaces an exception with another one.\nThis brings no value and costs precious time on the CS-D hot path.", "url": "https://github.com/kiegroup/optaplanner/pull/814#discussion_r444916133", "createdAt": "2020-06-24T14:01:39Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/common/AbstractJoiner.java", "diffHunk": "@@ -18,14 +18,6 @@\n \n public abstract class AbstractJoiner {\n \n-    protected void assertMappingIndex(int index) {\n-        int mappingCount = getJoinerTypes().length;\n-        if (index >= mappingCount) {\n-            throw new IllegalArgumentException(\n-                    \"Joiner only has (\" + mappingCount + \") mappings, requested index (\" + index + \")\");\n-        }\n-    }\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57282228ac0511dfaffbd307530dc69e8c87cbd9"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3Mzg2NTQ2", "url": "https://github.com/kiegroup/optaplanner/pull/814#pullrequestreview-437386546", "createdAt": "2020-06-25T11:01:37Z", "commit": {"oid": "3341568cae7d199a329bd955e3d2a464e3b84b7a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMTowMTozN1rOGo1xAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMTowMTozN1rOGo1xAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ3NzEyMQ==", "bodyText": "Why can we get rid of these fail fasts? Because it throws an ArrayOutOfBoundsException?\nIf only OptaPlanner code can trigger that, then the ArrayOutOfBoundsException is certainly fine. If a user can do something wrong that easily triggers it, it might not be ideal. But I can't immediately think of something, so +1 to remove the assert.", "url": "https://github.com/kiegroup/optaplanner/pull/814#discussion_r445477121", "createdAt": "2020-06-25T11:01:37Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bi/CompositeBiJoiner.java", "diffHunk": "@@ -52,39 +55,29 @@\n \n     @Override\n     public Function<A, Object> getLeftMapping(int index) {\n-        assertMappingIndex(index);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3341568cae7d199a329bd955e3d2a464e3b84b7a"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3Mzg5MzQy", "url": "https://github.com/kiegroup/optaplanner/pull/814#pullrequestreview-437389342", "createdAt": "2020-06-25T11:06:13Z", "commit": {"oid": "3341568cae7d199a329bd955e3d2a464e3b84b7a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMTowNjoxM1rOGo15bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMTowNjoxM1rOGo15bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ3OTI3OQ==", "bodyText": "a from() guarantees that all genuine planning variables aren't null.\nSo the room filter is definitely obsolete, because room is a planning variable on Exam.\nFor period its more complex. It's a genuine planning variable on LeadingExam, and a shadow variable on FollowingExam - and nothing on Exam. So I think it doesn't get filtered by default, because we're doing \"from\" Exam.\nI would recommend adding a comment above that filter, to signal why were're filtering it.", "url": "https://github.com/kiegroup/optaplanner/pull/814#discussion_r445479279", "createdAt": "2020-06-25T11:06:13Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/examination/solver/score/ExaminationConstraintProvider.java", "diffHunk": "@@ -65,12 +83,10 @@ protected Constraint periodDurationTooShort(ConstraintFactory constraintFactory)\n     }\n \n     protected Constraint roomCapacityTooSmall(ConstraintFactory constraintFactory) {\n-        return constraintFactory.from(Room.class)\n-                .join(Exam.class, equal(Function.identity(), Exam::getRoom))\n-                .join(Period.class, equal((room, exam) -> exam.getPeriod(), Function.identity()))\n-                .groupBy((room, exam, period) -> room,\n-                        (room, exam, period) -> period,\n-                        ConstraintCollectors.sum((period, exam, room) -> exam.getTopicStudentSize()))\n+        return constraintFactory.from(Exam.class)\n+                .filter(exam -> exam.getRoom() != null)\n+                .filter(exam -> exam.getPeriod() != null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3341568cae7d199a329bd955e3d2a464e3b84b7a"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MzkwNjY2", "url": "https://github.com/kiegroup/optaplanner/pull/814#pullrequestreview-437390666", "createdAt": "2020-06-25T11:08:24Z", "commit": {"oid": "3341568cae7d199a329bd955e3d2a464e3b84b7a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMTowODoyNVrOGo19jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMTowODoyNVrOGo19jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ4MDMzMw==", "bodyText": "2 lines above says that the leftExam's period isn't null.\nThe line above says that the rightExam period is the same one.\nTherefore, checking if the rightExam isn't null is obsolete.\nIf A != null && A == B then B != null", "url": "https://github.com/kiegroup/optaplanner/pull/814#discussion_r445480333", "createdAt": "2020-06-25T11:08:25Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/examination/solver/score/ExaminationConstraintProvider.java", "diffHunk": "@@ -99,8 +115,8 @@ protected Constraint periodPenaltyExclusion(ConstraintFactory constraintFactory)\n                         filtering((periodPenalty, leftExam) -> leftExam.getPeriod() != null))\n                 .join(Exam.class,\n                         equal((periodPenalty, leftExam) -> periodPenalty.getRightTopic(), Exam::getTopic),\n-                        filtering((periodPenalty, leftExam, rightExam) -> rightExam.getPeriod() != null),\n-                        filtering((periodPenalty, leftExam, rightExam) -> leftExam.getPeriod().equals(rightExam.getPeriod())))\n+                        equal((periodPenalty, leftExam) -> leftExam.getPeriod(), Exam::getPeriod),\n+                        filtering((periodPenalty, leftExam, rightExam) -> rightExam.getPeriod() != null))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3341568cae7d199a329bd955e3d2a464e3b84b7a"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MzkyNDM5", "url": "https://github.com/kiegroup/optaplanner/pull/814#pullrequestreview-437392439", "createdAt": "2020-06-25T11:11:15Z", "commit": {"oid": "3341568cae7d199a329bd955e3d2a464e3b84b7a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMToxMToxNVrOGo2Cow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMToxMToxNVrOGo2Cow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ4MTYzNQ==", "bodyText": "Doesn't this crash? rightExam.getPeriodIndex() can throw an NPE, right? Or return null that isn't Comparable?\nI think it might be \"lucky\" that the topic equality protects you from exposing that bug?\nIdeally, the rightExam period != null filtering must happen before the join:\n.join(f.from(Exam).filter(exam.getPeriod != null)),\n       lessThanOrEqual(....)", "url": "https://github.com/kiegroup/optaplanner/pull/814#discussion_r445481635", "createdAt": "2020-06-25T11:11:15Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/examination/solver/score/ExaminationConstraintProvider.java", "diffHunk": "@@ -114,9 +130,8 @@ protected Constraint periodPenaltyAfter(ConstraintFactory constraintFactory) {\n                         filtering((periodPenalty, leftExam) -> leftExam.getPeriod() != null))\n                 .join(Exam.class,\n                         equal((periodPenalty, leftExam) -> periodPenalty.getRightTopic(), Exam::getTopic),\n-                        filtering((periodPenalty, leftExam, rightExam) -> rightExam.getPeriod() != null),\n-                        filtering((periodPenalty, leftExam,\n-                                rightExam) -> leftExam.getPeriod().getPeriodIndex() <= rightExam.getPeriod().getPeriodIndex()))\n+                        lessThanOrEqual((periodPenalty, leftExam) -> leftExam.getPeriodIndex(), Exam::getPeriodIndex),\n+                        filtering((periodPenalty, leftExam, rightExam) -> rightExam.getPeriod() != null))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3341568cae7d199a329bd955e3d2a464e3b84b7a"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3Mzk3NTQ0", "url": "https://github.com/kiegroup/optaplanner/pull/814#pullrequestreview-437397544", "createdAt": "2020-06-25T11:19:32Z", "commit": {"oid": "3341568cae7d199a329bd955e3d2a464e3b84b7a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMToxOTozMlrOGo2RnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMToxOTozMlrOGo2RnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ4NTQ2OQ==", "bodyText": "I'd keep this comment.\nIt's the only reason why this rule is so complex, because of the ITC 2007 spec. Otherwise, we won't understand it in the future.\nNormally, this would result in 5 penalties, probably mutliplied by the number of students.", "url": "https://github.com/kiegroup/optaplanner/pull/814#discussion_r445485469", "createdAt": "2020-06-25T11:19:32Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/examination/solver/score/ExaminationConstraintProvider.java", "diffHunk": "@@ -170,30 +185,31 @@ protected Constraint periodSpread(ConstraintFactory constraintFactory) {\n                 .join(Exam.class,\n                         equal((config, topicConflict) -> topicConflict.getLeftTopic(), Exam::getTopic),\n                         filtering((config, topicConflict, leftExam) -> leftExam.getPeriod() != null))\n-                .ifExists(Exam.class,\n+                .join(Exam.class,\n                         equal((config, topicConflict, leftExam) -> topicConflict.getRightTopic(), Exam::getTopic),\n                         filtering((config, topicConflict, leftExam, rightExam) -> rightExam.getPeriod() != null),\n                         filtering((config, topicConflict, leftExam,\n                                 rightExam) -> getPeriodIndexDifferenceBetweenExams(leftExam,\n                                         rightExam) < (config.getPeriodSpreadLength() + 1)))\n                 .penalizeConfigurable(\"periodSpread\",\n-                        (config, topicConflict, leftExam) -> topicConflict.getStudentSize());\n+                        (config, topicConflict, leftExam, rightExam) -> topicConflict.getStudentSize());\n     }\n \n     protected Constraint mixedDurations(ConstraintFactory constraintFactory) {\n-        // 4 mixed durations of 100, 150, 200 and 200 should only result in 2 penalties (for 100&150 and 100&200).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3341568cae7d199a329bd955e3d2a464e3b84b7a"}, "originalPosition": 121}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3Mzk4NDk3", "url": "https://github.com/kiegroup/optaplanner/pull/814#pullrequestreview-437398497", "createdAt": "2020-06-25T11:21:04Z", "commit": {"oid": "3341568cae7d199a329bd955e3d2a464e3b84b7a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMToyMTowNFrOGo2Ulw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMToyMTowNFrOGo2Ulw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ4NjIzMQ==", "bodyText": "I prefer the original rule.\nIt reads better and it's probably faster too (no joins).", "url": "https://github.com/kiegroup/optaplanner/pull/814#discussion_r445486231", "createdAt": "2020-06-25T11:21:04Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/examination/solver/score/ExaminationConstraintProvider.java", "diffHunk": "@@ -207,15 +223,19 @@ protected Constraint frontLoad(ConstraintFactory constraintFactory) {\n     }\n \n     protected Constraint periodPenalty(ConstraintFactory constraintFactory) {\n-        return constraintFactory.from(Exam.class)\n-                .filter(exam -> exam.getPeriod().getPenalty() != 0)\n-                .penalizeConfigurable(\"periodPenalty\", exam -> exam.getPeriod().getPenalty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3341568cae7d199a329bd955e3d2a464e3b84b7a"}, "originalPosition": 155}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3Mzk5NTA5", "url": "https://github.com/kiegroup/optaplanner/pull/814#pullrequestreview-437399509", "createdAt": "2020-06-25T11:22:47Z", "commit": {"oid": "3341568cae7d199a329bd955e3d2a464e3b84b7a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMToyMjo0N1rOGo2Xmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMToyMjo0N1rOGo2Xmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ4NzAwMg==", "bodyText": "Same here, see zulip \"perf guidlines writing CS\"", "url": "https://github.com/kiegroup/optaplanner/pull/814#discussion_r445487002", "createdAt": "2020-06-25T11:22:47Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/examination/solver/score/ExaminationConstraintProvider.java", "diffHunk": "@@ -207,15 +223,19 @@ protected Constraint frontLoad(ConstraintFactory constraintFactory) {\n     }\n \n     protected Constraint periodPenalty(ConstraintFactory constraintFactory) {\n-        return constraintFactory.from(Exam.class)\n-                .filter(exam -> exam.getPeriod().getPenalty() != 0)\n-                .penalizeConfigurable(\"periodPenalty\", exam -> exam.getPeriod().getPenalty());\n+        return constraintFactory.from(Period.class)\n+                .filter(period -> period.getPenalty() != 0)\n+                .join(Exam.class,\n+                        equal(Function.identity(), Exam::getPeriod))\n+                .penalizeConfigurable(\"periodPenalty\", (period, exam) -> period.getPenalty());\n     }\n \n     protected Constraint roomPenalty(ConstraintFactory constraintFactory) {\n-        return constraintFactory.from(Exam.class)\n-                .filter(exam -> exam.getRoom().getPenalty() != 0)\n-                .penalizeConfigurable(\"roomPenalty\", exam -> exam.getRoom().getPenalty());\n+        return constraintFactory.from(Room.class)\n+                .filter(room -> room.getPenalty() != 0)\n+                .join(Exam.class,\n+                        equal(Function.identity(), Exam::getRoom))\n+                .penalizeConfigurable(\"roomPenalty\", (room, exam) -> room.getPenalty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3341568cae7d199a329bd955e3d2a464e3b84b7a"}, "originalPosition": 171}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3Mzk5NzQ1", "url": "https://github.com/kiegroup/optaplanner/pull/814#pullrequestreview-437399745", "createdAt": "2020-06-25T11:23:11Z", "commit": {"oid": "3341568cae7d199a329bd955e3d2a464e3b84b7a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f11be7f4739edc4fa95aa41259f59110373fc611", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/f11be7f4739edc4fa95aa41259f59110373fc611", "committedDate": "2020-06-25T13:24:29Z", "message": "Performance improvements to Joiners"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "483a3a2fc8da7edd6fb2e3302cc38229b5f33456", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/483a3a2fc8da7edd6fb2e3302cc38229b5f33456", "committedDate": "2020-06-25T13:24:29Z", "message": "Fix typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80d8bd733cde43b51bf0ce2b28f0a160e5a2c3ff", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/80d8bd733cde43b51bf0ce2b28f0a160e5a2c3ff", "committedDate": "2020-06-25T13:24:29Z", "message": "Remove needless bounds checking"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09b30c7d98f429c966a95f5c57e77fb3a3060698", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/09b30c7d98f429c966a95f5c57e77fb3a3060698", "committedDate": "2020-06-25T13:24:29Z", "message": "Improve performance of the Examination constraint provider"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2c4e6fc015bfcfd6a41531faddfa3386b005cf6", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/e2c4e6fc015bfcfd6a41531faddfa3386b005cf6", "committedDate": "2020-06-25T13:24:29Z", "message": "Bring performance of Constraint Providers more in line with DRL"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0672f1b72f64a2f731fe82355d276cd5aff70b73", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/0672f1b72f64a2f731fe82355d276cd5aff70b73", "committedDate": "2020-06-25T13:24:30Z", "message": "Don't change what doesn't need changing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33194820ffd0a5e45a0aaba7e509bef544148654", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/33194820ffd0a5e45a0aaba7e509bef544148654", "committedDate": "2020-06-25T13:24:30Z", "message": "Don't change what doesn't need changing, part 2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1d049494816e563d913345e5db3c2f80f5b5c3b", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/b1d049494816e563d913345e5db3c2f80f5b5c3b", "committedDate": "2020-06-25T13:24:30Z", "message": "Fix formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20e48cf210736d514a0a754bde67a0b2c3644d59", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/20e48cf210736d514a0a754bde67a0b2c3644d59", "committedDate": "2020-06-25T13:24:30Z", "message": "Address some review comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3341568cae7d199a329bd955e3d2a464e3b84b7a", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/3341568cae7d199a329bd955e3d2a464e3b84b7a", "committedDate": "2020-06-25T06:58:50Z", "message": "Fix formatting"}, "afterCommit": {"oid": "20e48cf210736d514a0a754bde67a0b2c3644d59", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/20e48cf210736d514a0a754bde67a0b2c3644d59", "committedDate": "2020-06-25T13:24:30Z", "message": "Address some review comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3303, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}