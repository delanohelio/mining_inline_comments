{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3MTQ1NTA5", "number": 955, "title": "Implemented a JsonSolutionFileIO for benchmark input solution files", "bodyText": "Hello,\nI was working on using json formatted files as input solution files for benchmarking. I implemented a custom SolutionFileIO implementation and thought that a extendable JsonSolutionFileIO would be a good contribution.\nFrom my understanding there are changes for benchmark configurations in the upcoming 8.0.0.\nTherefore, since xStreamAnnotatedClass has been removed, creating a configurable JacksonAnnotatedClass would not be desirable.\nSo, I aimed to make JsonSolutionFileIO heavily influenced by XStreamSolutionFileIO.\nThe only difference would be that the JsonSolutionFileIO lets the Jackson ObjectMapper to be created by the client in order to provide a high customizable ObjectMapper according to the clients desire.\nI could provide the documentation in how to use the JsonSolutionFileIO such as\npublic class MySolutionFileIO extends JsonSolutionFileIO<TimeTable> {\n\n    public MySolutionFileIO() {\n        super(Solution.class,\n                new ObjectMapper()\n                        .registerModule(new JavaTimeModule())\n                        .disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)\n                );\n    }\n}\n\nAlso, would the implementation name JacksonSolutionFileIO be better name for this SolitionFileIO implementation.\n\nJIRA\nCould create ticket if required.\n\n\n\n\nChecklist\n\n Documentation updated if applicable.\n Upgrade recipe provided if applicable.\n\n\n\nHow to retest this PR or trigger a specific build:\n\n\nfor a pull request build please add comment: Jenkins retest this\nfor a full downstream build please add comment: Jenkins run fdb\nfor a compile downstream build please add comment: Jenkins run cdb\nfor a full production downstream build please add comment: Jenkins execute product fdb\nfor an upstream build please add comment: Jenkins run upstream", "createdAt": "2020-10-02T21:33:59Z", "url": "https://github.com/kiegroup/optaplanner/pull/955", "merged": true, "mergeCommit": {"oid": "5770487ff7cb1d670fc010e37150c9715109609b"}, "closed": true, "closedAt": "2020-10-06T16:27:14Z", "author": {"login": "cemnura"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdO7b9ngFqTUwMTU0OTg3MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdP6TfegH2gAyNDk3MTQ1NTA5OmU2NDdlNmRmODRmODQ3NGM4MzZlNGU0ZjFkZGQxNzczYjBiMDk4YTE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNTQ5ODcw", "url": "https://github.com/kiegroup/optaplanner/pull/955#pullrequestreview-501549870", "createdAt": "2020-10-03T14:27:06Z", "commit": {"oid": "5f54e3081b0aaba03ee83fbbe32c3a5884522bc9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QxNDoyNzowN1rOHcB16g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QxNDoyNzowN1rOHcB16g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE1MjM2Mg==", "bodyText": "Naming wise, let's use the word Jackson in here, in case we build a Jsonb version too.", "url": "https://github.com/kiegroup/optaplanner/pull/955#discussion_r499152362", "createdAt": "2020-10-03T14:27:07Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-persistence/optaplanner-persistence-jackson/src/main/java/org/optaplanner/persistence/jackson/impl/domain/solution/JsonSolutionFileIO.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.optaplanner.persistence.jackson.impl.domain.solution;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import org.optaplanner.core.api.domain.solution.PlanningSolution;\n+import org.optaplanner.persistence.common.api.domain.solution.SolutionFileIO;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;\n+\n+/**\n+ *\n+ * @param <Solution_> the solution type, the class with the {@link PlanningSolution} annotation\n+ */\n+public class JsonSolutionFileIO<Solution_> implements SolutionFileIO<Solution_> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f54e3081b0aaba03ee83fbbe32c3a5884522bc9"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNDYxMjE5", "url": "https://github.com/kiegroup/optaplanner/pull/955#pullrequestreview-501461219", "createdAt": "2020-10-02T21:36:33Z", "commit": {"oid": "5f54e3081b0aaba03ee83fbbe32c3a5884522bc9"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMTozNjozM1rOHb8QUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMTozNzoyMlrOHb8RVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2MDgxNg==", "bodyText": "This was the only assertion that this SolutionFileIO unit test had.\nI am not sure how to make these the same objects with Jackson", "url": "https://github.com/kiegroup/optaplanner/pull/955#discussion_r499060816", "createdAt": "2020-10-02T21:36:33Z", "author": {"login": "cemnura"}, "path": "optaplanner-persistence/optaplanner-persistence-jackson/src/test/java/org/optaplanner/persistence/jackson/impl/domain/solution/JsonSolutionFileIOTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.persistence.jackson.impl.domain.solution;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.optaplanner.core.impl.testdata.util.PlannerAssert.assertAllCodesOfIterator;\n+import static org.optaplanner.core.impl.testdata.util.PlannerAssert.assertCode;\n+\n+import java.io.File;\n+import java.util.Arrays;\n+\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.optaplanner.core.api.score.buildin.simple.SimpleScore;\n+import org.optaplanner.persistence.jackson.impl.testdata.domain.JacksonTestdataEntity;\n+import org.optaplanner.persistence.jackson.impl.testdata.domain.JacksonTestdataSolution;\n+import org.optaplanner.persistence.jackson.impl.testdata.domain.JacksonTestdataValue;\n+\n+public class JsonSolutionFileIOTest {\n+\n+    private static File solutionTestDir;\n+\n+    @BeforeAll\n+    public static void setup() {\n+        solutionTestDir = new File(\"target/solutionTest/\");\n+        solutionTestDir.mkdirs();\n+    }\n+\n+    @Test\n+    public void readAndWrite() {\n+        JsonSolutionFileIO<JacksonTestdataSolution> solutionFileIO = new JsonSolutionFileIO<>();\n+        File file = new File(solutionTestDir, \"testdataSolution.json\");\n+\n+        JacksonTestdataSolution original = new JacksonTestdataSolution(\"s1\");\n+        JacksonTestdataValue originalV1 = new JacksonTestdataValue(\"v1\");\n+        original.setValueList(Arrays.asList(originalV1, new JacksonTestdataValue(\"v2\")));\n+        original.setEntityList(Arrays.asList(\n+                new JacksonTestdataEntity(\"e1\"), new JacksonTestdataEntity(\"e2\", originalV1), new JacksonTestdataEntity(\"e3\")));\n+        original.setScore(SimpleScore.of(-321));\n+        solutionFileIO.write(original, file);\n+        JacksonTestdataSolution copy = solutionFileIO.read(file);\n+\n+        assertThat(copy).isNotSameAs(original);\n+        assertCode(\"s1\", copy);\n+        assertAllCodesOfIterator(copy.getValueList().iterator(), \"v1\", \"v2\");\n+        assertAllCodesOfIterator(copy.getEntityList().iterator(), \"e1\", \"e2\", \"e3\");\n+        JacksonTestdataValue copyV1 = copy.getValueList().get(0);\n+        JacksonTestdataEntity copyE2 = copy.getEntityList().get(1);\n+        assertCode(\"v1\", copyE2.getValue());\n+        //        assertThat(copyE2.getValue()).isSameAs(copyV1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f54e3081b0aaba03ee83fbbe32c3a5884522bc9"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2MTA3Nw==", "bodyText": "Could provide more documentation to explain the construction with Jackson ObjectMapper", "url": "https://github.com/kiegroup/optaplanner/pull/955#discussion_r499061077", "createdAt": "2020-10-02T21:37:22Z", "author": {"login": "cemnura"}, "path": "optaplanner-persistence/optaplanner-persistence-jackson/src/main/java/org/optaplanner/persistence/jackson/impl/domain/solution/JsonSolutionFileIO.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.optaplanner.persistence.jackson.impl.domain.solution;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import org.optaplanner.core.api.domain.solution.PlanningSolution;\n+import org.optaplanner.persistence.common.api.domain.solution.SolutionFileIO;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;\n+\n+/**\n+ *\n+ * @param <Solution_> the solution type, the class with the {@link PlanningSolution} annotation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f54e3081b0aaba03ee83fbbe32c3a5884522bc9"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8905596ed1828f919fde7da21fd2984a5315e265", "author": {"user": {"login": "cemnura", "name": "Cem Nura"}}, "url": "https://github.com/kiegroup/optaplanner/commit/8905596ed1828f919fde7da21fd2984a5315e265", "committedDate": "2020-10-03T16:56:19Z", "message": "Implemented a JsonSolutionFileIO for benchmark input solution files\n\nSigned-off-by: Cem Nura <cem.nura@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5f54e3081b0aaba03ee83fbbe32c3a5884522bc9", "author": {"user": {"login": "cemnura", "name": "Cem Nura"}}, "url": "https://github.com/kiegroup/optaplanner/commit/5f54e3081b0aaba03ee83fbbe32c3a5884522bc9", "committedDate": "2020-10-02T21:09:34Z", "message": "Implemented a JsonSolutionFileIO for benchmark input solution files\n\nSigned-off-by: Cem Nura <cem.nura@gmail.com>"}, "afterCommit": {"oid": "8905596ed1828f919fde7da21fd2984a5315e265", "author": {"user": {"login": "cemnura", "name": "Cem Nura"}}, "url": "https://github.com/kiegroup/optaplanner/commit/8905596ed1828f919fde7da21fd2984a5315e265", "committedDate": "2020-10-03T16:56:19Z", "message": "Implemented a JsonSolutionFileIO for benchmark input solution files\n\nSigned-off-by: Cem Nura <cem.nura@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6cff1607e627e3096f5bdfcb730afdd99fe45143", "author": {"user": {"login": "cemnura", "name": "Cem Nura"}}, "url": "https://github.com/kiegroup/optaplanner/commit/6cff1607e627e3096f5bdfcb730afdd99fe45143", "committedDate": "2020-10-03T17:40:57Z", "message": "Added usage documentation for JsonSolutionFileIO\n\nSigned-off-by: Cem Nura <cem.nura@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50343139a3069c6412d2e08809f6862a41812685", "author": {"user": {"login": "cemnura", "name": "Cem Nura"}}, "url": "https://github.com/kiegroup/optaplanner/commit/50343139a3069c6412d2e08809f6862a41812685", "committedDate": "2020-10-03T17:52:09Z", "message": "Fixed format violation\n\nSigned-off-by: Cem Nura <cem.nura@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0bc62e916d5d21265676fc25e11d70975d5477f", "author": {"user": {"login": "cemnura", "name": "Cem Nura"}}, "url": "https://github.com/kiegroup/optaplanner/commit/e0bc62e916d5d21265676fc25e11d70975d5477f", "committedDate": "2020-10-03T18:44:25Z", "message": "Removed redundant cast\n\nSigned-off-by: Cem Nura <cem.nura@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNzY0MTE2", "url": "https://github.com/kiegroup/optaplanner/pull/955#pullrequestreview-501764116", "createdAt": "2020-10-05T06:57:52Z", "commit": {"oid": "e0bc62e916d5d21265676fc25e11d70975d5477f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwNjo1Nzo1MlrOHcPpFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwNzowNDozNVrOHcPzsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM3ODQ1Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If the JSON file requires specific Jackson modules and features to be enabled/disabled.\n          \n          \n            \n            You could create your desired object mapper as an dependency to the JacksonSolutionFileIO as the following.\n          \n          \n            \n            \n          \n          \n            \n            If the JSON file requires specific Jackson modules and features to be enabled/disabled.\n          \n          \n            \n            You could create your desired object mapper as a dependency to the JacksonSolutionFileIO as follows:", "url": "https://github.com/kiegroup/optaplanner/pull/955#discussion_r499378452", "createdAt": "2020-10-05T06:57:52Z", "author": {"login": "triceo"}, "path": "optaplanner-docs/src/main/asciidoc/BenchmarkingAndTweaking/BenchmarkingAndTweaking-chapter.adoc", "diffHunk": "@@ -240,6 +240,47 @@ Regardless, XML is still a very verbose format.\n Reading or writing large datasets in this format can cause an `OutOfMemoryError`, `StackOverflowError`\n or large performance degradation.\n \n+[[JacksonSolutionFileIO]]\n+==== `JacksonSolutionFileIO`: serialize to and from an JSON format\n+\n+To read and write solutions in JSON format via Jackson, extend the `JacksonSolutionFileIO`:\n+\n+[source,java,options=\"nowrap\"]\n+----\n+public class NQueensJsonSolutionFileIO extends JacksonSolutionFileIO<NQueens> {\n+    public NQueensJsonSolutionFileIO() {\n+        // NQueens is the @PlanningSolution class.\n+        super(NQueens.class);\n+    }\n+}\n+----\n+If the JSON file requires specific Jackson modules and features to be enabled/disabled.\n+You could create your desired object mapper as an dependency to the JacksonSolutionFileIO as the following.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0bc62e916d5d21265676fc25e11d70975d5477f"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM3ODU3OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            and use it in the benchmark configuration:\n          \n          \n            \n            Then use it in the benchmark configuration like so:", "url": "https://github.com/kiegroup/optaplanner/pull/955#discussion_r499378578", "createdAt": "2020-10-05T06:58:11Z", "author": {"login": "triceo"}, "path": "optaplanner-docs/src/main/asciidoc/BenchmarkingAndTweaking/BenchmarkingAndTweaking-chapter.adoc", "diffHunk": "@@ -240,6 +240,47 @@ Regardless, XML is still a very verbose format.\n Reading or writing large datasets in this format can cause an `OutOfMemoryError`, `StackOverflowError`\n or large performance degradation.\n \n+[[JacksonSolutionFileIO]]\n+==== `JacksonSolutionFileIO`: serialize to and from an JSON format\n+\n+To read and write solutions in JSON format via Jackson, extend the `JacksonSolutionFileIO`:\n+\n+[source,java,options=\"nowrap\"]\n+----\n+public class NQueensJsonSolutionFileIO extends JacksonSolutionFileIO<NQueens> {\n+    public NQueensJsonSolutionFileIO() {\n+        // NQueens is the @PlanningSolution class.\n+        super(NQueens.class);\n+    }\n+}\n+----\n+If the JSON file requires specific Jackson modules and features to be enabled/disabled.\n+You could create your desired object mapper as an dependency to the JacksonSolutionFileIO as the following.\n+[source,java,options=\"nowrap\"]\n+----\n+public class NQueensJsonSolutionFileIO extends JacksonSolutionFileIO<NQueens> {\n+    public NQueensJsonSolutionFileIO() {\n+        // NQueens is the @PlanningSolution class.\n+        super(NQueens.class,\n+                new ObjectMapper()\n+                        .registerModule(new JavaTimeModule())\n+                        .disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)\n+        );\n+    }\n+\n+}\n+----\n+\n+and use it in the benchmark configuration:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0bc62e916d5d21265676fc25e11d70975d5477f"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM4MDU2MA==", "bodyText": "Please make the class final, the fields private final.", "url": "https://github.com/kiegroup/optaplanner/pull/955#discussion_r499380560", "createdAt": "2020-10-05T07:03:01Z", "author": {"login": "triceo"}, "path": "optaplanner-persistence/optaplanner-persistence-jackson/src/main/java/org/optaplanner/persistence/jackson/impl/domain/solution/JacksonSolutionFileIO.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package org.optaplanner.persistence.jackson.impl.domain.solution;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import org.optaplanner.core.api.domain.solution.PlanningSolution;\n+import org.optaplanner.persistence.common.api.domain.solution.SolutionFileIO;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+/**\n+ *\n+ * @param <Solution_> the solution type, the class with the {@link PlanningSolution} annotation\n+ */\n+public class JacksonSolutionFileIO<Solution_> implements SolutionFileIO<Solution_> {\n+\n+    protected Class<Solution_> clazz;\n+    protected ObjectMapper mapper;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0bc62e916d5d21265676fc25e11d70975d5477f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM4MTE2OQ==", "bodyText": "I would like to see a proof of concept that this actually works. The following article suggests that it is possible with some extra annotations on the data model:\nhttps://stackoverflow.com/questions/18306040/jackson-deserialize-jsonidentityreference-alwaysasid-true/29742035#29742035\nYou may need to adapt JacksonTestdataSolution to get it done.", "url": "https://github.com/kiegroup/optaplanner/pull/955#discussion_r499381169", "createdAt": "2020-10-05T07:04:35Z", "author": {"login": "triceo"}, "path": "optaplanner-persistence/optaplanner-persistence-jackson/src/test/java/org/optaplanner/persistence/jackson/impl/domain/solution/JacksonSolutionFileIOTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.persistence.jackson.impl.domain.solution;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.optaplanner.core.impl.testdata.util.PlannerAssert.assertAllCodesOfIterator;\n+import static org.optaplanner.core.impl.testdata.util.PlannerAssert.assertCode;\n+\n+import java.io.File;\n+import java.util.Arrays;\n+\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.optaplanner.core.api.score.buildin.simple.SimpleScore;\n+import org.optaplanner.persistence.jackson.impl.testdata.domain.JacksonTestdataEntity;\n+import org.optaplanner.persistence.jackson.impl.testdata.domain.JacksonTestdataSolution;\n+import org.optaplanner.persistence.jackson.impl.testdata.domain.JacksonTestdataValue;\n+\n+public class JacksonSolutionFileIOTest {\n+\n+    private static File solutionTestDir;\n+\n+    @BeforeAll\n+    public static void setup() {\n+        solutionTestDir = new File(\"target/solutionTest/\");\n+        solutionTestDir.mkdirs();\n+    }\n+\n+    @Test\n+    public void readAndWrite() {\n+        JacksonSolutionFileIO<JacksonTestdataSolution> solutionFileIO =\n+                new JacksonSolutionFileIO<>(JacksonTestdataSolution.class);\n+        File file = new File(solutionTestDir, \"testdataSolution.json\");\n+\n+        JacksonTestdataSolution original = new JacksonTestdataSolution(\"s1\");\n+        JacksonTestdataValue originalV1 = new JacksonTestdataValue(\"v1\");\n+        original.setValueList(Arrays.asList(originalV1, new JacksonTestdataValue(\"v2\")));\n+        original.setEntityList(Arrays.asList(\n+                new JacksonTestdataEntity(\"e1\"), new JacksonTestdataEntity(\"e2\", originalV1), new JacksonTestdataEntity(\"e3\")));\n+        original.setScore(SimpleScore.of(-321));\n+        solutionFileIO.write(original, file);\n+        JacksonTestdataSolution copy = solutionFileIO.read(file);\n+\n+        assertThat(copy).isNotSameAs(original);\n+        assertCode(\"s1\", copy);\n+        assertAllCodesOfIterator(copy.getValueList().iterator(), \"v1\", \"v2\");\n+        assertAllCodesOfIterator(copy.getEntityList().iterator(), \"e1\", \"e2\", \"e3\");\n+        JacksonTestdataValue copyV1 = copy.getValueList().get(0);\n+        JacksonTestdataEntity copyE2 = copy.getEntityList().get(1);\n+        assertCode(\"v1\", copyE2.getValue());\n+        //        assertThat(copyE2.getValue()).isSameAs(copyV1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0bc62e916d5d21265676fc25e11d70975d5477f"}, "originalPosition": 65}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3dd1b55335e3071a263da8884841bfbdd6b4ba0d", "author": {"user": {"login": "cemnura", "name": "Cem Nura"}}, "url": "https://github.com/kiegroup/optaplanner/commit/3dd1b55335e3071a263da8884841bfbdd6b4ba0d", "committedDate": "2020-10-05T18:51:02Z", "message": "Update optaplanner-docs/src/main/asciidoc/BenchmarkingAndTweaking/BenchmarkingAndTweaking-chapter.adoc\n\nCo-authored-by: Luk\u00e1\u0161 Petrovick\u00fd <lukas@petrovicky.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2558d61149a0257015751c78fe5585f9f429c92a", "author": {"user": {"login": "cemnura", "name": "Cem Nura"}}, "url": "https://github.com/kiegroup/optaplanner/commit/2558d61149a0257015751c78fe5585f9f429c92a", "committedDate": "2020-10-05T18:51:12Z", "message": "Update optaplanner-docs/src/main/asciidoc/BenchmarkingAndTweaking/BenchmarkingAndTweaking-chapter.adoc\n\nCo-authored-by: Luk\u00e1\u0161 Petrovick\u00fd <lukas@petrovicky.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76033b3d0de78212dfbffd0ab50dc964d1b047e4", "author": {"user": {"login": "cemnura", "name": "Cem Nura"}}, "url": "https://github.com/kiegroup/optaplanner/commit/76033b3d0de78212dfbffd0ab50dc964d1b047e4", "committedDate": "2020-10-05T19:27:21Z", "message": "Converted fields to private final\n\nSigned-off-by: Cem Nura <cem.nura@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d425e8dda5c561c4d6c9b371c9293f61e2d09b8", "author": {"user": {"login": "cemnura", "name": "Cem Nura"}}, "url": "https://github.com/kiegroup/optaplanner/commit/7d425e8dda5c561c4d6c9b371c9293f61e2d09b8", "committedDate": "2020-10-05T20:06:18Z", "message": "Enabled same string values to be the same object when Jackson deserialization\n\nSigned-off-by: Cem Nura <cem.nura@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyNjQ3Njcx", "url": "https://github.com/kiegroup/optaplanner/pull/955#pullrequestreview-502647671", "createdAt": "2020-10-06T07:19:49Z", "commit": {"oid": "7d425e8dda5c561c4d6c9b371c9293f61e2d09b8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a32aa83dc9054c753c5be63e7dccdcbfa77c4254", "author": {"user": {"login": "cemnura", "name": "Cem Nura"}}, "url": "https://github.com/kiegroup/optaplanner/commit/a32aa83dc9054c753c5be63e7dccdcbfa77c4254", "committedDate": "2020-10-06T09:38:51Z", "message": "Fixed format violation\n\nSigned-off-by: Cem Nura <cem.nura@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e647e6df84f8474c836e4e4f1ddd1773b0b098a1", "author": {"user": {"login": "cemnura", "name": "Cem Nura"}}, "url": "https://github.com/kiegroup/optaplanner/commit/e647e6df84f8474c836e4e4f1ddd1773b0b098a1", "committedDate": "2020-10-06T15:41:53Z", "message": "Enabled jackson-annotations dependency to be test scoped\n\nSigned-off-by: Cem Nura <cem.nura@gmail.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3241, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}