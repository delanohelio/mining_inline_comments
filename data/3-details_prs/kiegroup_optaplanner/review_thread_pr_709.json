{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwMzQxNzQz", "number": 709, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNTo1MjowNFrODjIb2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNTo1OTo0NlrODjIpwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MTY0OTU0OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/bi/BiConstraintStream.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNTo1MjowNVrOFuxJyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNTo1MjowNVrOFuxJyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU4NDEzNg==", "bodyText": "soft suggestions:\n\nI'd remove the braces: \"(See\" -> \"See\"\n\"for a selection of ready-made collectors.\": I'd avoid the use of the word \"selection\" when it's not \"move selection\" or \"entity selection\" or something like that. \"ready-made\" is a tautology. Also, I 'd mention \"count()\" and \"sum()\" as that's much more tangible as to what I can find there (and what a collector actually is).\nSo suggestion => \"See ConstraintCollectors for common operations, such as count(), sum() and others\".", "url": "https://github.com/kiegroup/optaplanner/pull/709#discussion_r384584136", "createdAt": "2020-02-26T15:52:05Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/bi/BiConstraintStream.java", "diffHunk": "@@ -368,6 +369,7 @@\n      * Runs all tuples of the stream through a given @{@link BiConstraintCollector} and converts them into a new\n      * {@link UniConstraintStream} which only has a single tuple, the result of applying {@link BiConstraintCollector}.\n      * @param collector never null, the collector to perform the grouping operation with\n+     * (See {@link ConstraintCollectors} for a selection of ready-made collectors.)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed6849e3ddd13248a9df57bddb897a1adb6ea5b1"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MTY4NTEyOnYy", "diffSide": "RIGHT", "path": "optaplanner-docs/src/main/asciidoc/ConstraintStreams/ConstraintStreams-chapter.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNTo1OTo0N1rOFuxgKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNTo1OTo0N1rOFuxgKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU4OTg2NQ==", "bodyText": "\"a particlar fact\": is that the first or the second fact?\n\"you don't need to\" etc can be more concise I think.\nAlso we need to mention the \"one or more\" difference. For me, that is the key, defining difference.\nHow about something like:\n\"If the other stream might match multiple times, but it must only impact the score once (for each element of the original stream), use <<constraintStreamsConditionalPropagation,ifExists>> instead. \"", "url": "https://github.com/kiegroup/optaplanner/pull/709#discussion_r384589865", "createdAt": "2020-02-26T15:59:47Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-docs/src/main/asciidoc/ConstraintStreams/ConstraintStreams-chapter.adoc", "diffHunk": "@@ -338,6 +338,13 @@ the prescribed ordering.\n For a full list of all supported `Joiner` implementations and their various overloads, refer to the\n `org.optaplanner.core.api.score.stream.Joiners` class.\n \n+[NOTE]\n+====\n+In case you only need to act when a particular fact exists, and you don't need to access the fact itself, use", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed6849e3ddd13248a9df57bddb897a1adb6ea5b1"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4443, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}