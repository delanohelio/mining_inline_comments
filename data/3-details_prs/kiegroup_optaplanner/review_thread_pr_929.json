{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4MTIzODQ4", "number": 929, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMDo1ODoxMFrOEkPN1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNTozNDo0OFrOEkmTPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NDMzNDkyOnYy", "diffSide": "RIGHT", "path": "optaplanner-benchmark/src/main/java/org/optaplanner/benchmark/config/PlannerBenchmarkConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMDo1ODoxMFrOHTD-Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwODo0MDowNlrOHTXofA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc1MDA2Ng==", "bodyText": "Both changes in this file appear unnecessary.", "url": "https://github.com/kiegroup/optaplanner/pull/929#discussion_r489750066", "createdAt": "2020-09-16T20:58:10Z", "author": {"login": "triceo"}, "path": "optaplanner-benchmark/src/main/java/org/optaplanner/benchmark/config/PlannerBenchmarkConfig.java", "diffHunk": "@@ -158,8 +158,8 @@ public static PlannerBenchmarkConfig createFromXmlResource(String benchmarkConfi\n             }\n             return createFromXmlInputStream(in, classLoader);\n         } catch (OptaPlannerXmlSerializationException e) {\n-            throw new IllegalArgumentException(\"Unmarshalling of benchmarkConfigResource (\" + benchmarkConfigResource\n-                    + \") fails.\", e);\n+            throw new IllegalArgumentException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48c1e3dc683fc6c08b6ea43b6a734751ad3a6d7f"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA3MjE4OA==", "bodyText": "Thanks, however, I am keeping the second formatting change as now it fits a single line.", "url": "https://github.com/kiegroup/optaplanner/pull/929#discussion_r490072188", "createdAt": "2020-09-17T08:40:06Z", "author": {"login": "rsynek"}, "path": "optaplanner-benchmark/src/main/java/org/optaplanner/benchmark/config/PlannerBenchmarkConfig.java", "diffHunk": "@@ -158,8 +158,8 @@ public static PlannerBenchmarkConfig createFromXmlResource(String benchmarkConfi\n             }\n             return createFromXmlInputStream(in, classLoader);\n         } catch (OptaPlannerXmlSerializationException e) {\n-            throw new IllegalArgumentException(\"Unmarshalling of benchmarkConfigResource (\" + benchmarkConfigResource\n-                    + \") fails.\", e);\n+            throw new IllegalArgumentException(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc1MDA2Ng=="}, "originalCommit": {"oid": "48c1e3dc683fc6c08b6ea43b6a734751ad3a6d7f"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NDM0ODQ1OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/io/jaxb/GenericJaxbIO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMTowMjoyNlrOHTEGhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwODozNDoyNFrOHTXaQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc1MjE5OA==", "bodyText": "Shouldn't the reader be in try (...) ?", "url": "https://github.com/kiegroup/optaplanner/pull/929#discussion_r489752198", "createdAt": "2020-09-16T21:02:26Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/io/jaxb/GenericJaxbIO.java", "diffHunk": "@@ -129,119 +155,141 @@ public T readAndValidate(Reader reader, Schema schema) {\n         try {\n             unmarshaller.setEventHandler(validationEventCollector);\n         } catch (JAXBException jaxbException) {\n-            String errMessage = String.format(\"Failed to set a validation event handler to the unmarshaller for \"\n-                    + \"a root element class (%s).\", rootClass.getName());\n-            throw new OptaPlannerXmlSerializationException(errMessage, jaxbException);\n+            String errorMessage = String.format(\"Failed to set a validation event handler to the %s for \"\n+                    + \"a root element class (%s).\", Unmarshaller.class.getSimpleName(), rootClass.getName());\n+            throw new OptaPlannerXmlSerializationException(errorMessage, jaxbException);\n         }\n \n         try {\n-            return (T) unmarshaller.unmarshal(nonNullReader);\n+            return (T) unmarshaller.unmarshal(nonNullDocument);\n         } catch (JAXBException jaxbException) {\n             if (validationEventCollector.hasEvents()) {\n-                String errMessage =\n+                String errorMessage =\n                         String.format(\"XML validation failed for a root element class (%s).\", rootClass.getName());\n                 String validationErrors = Stream.of(validationEventCollector.getEvents())\n                         .map(ValidationEvent::getMessage)\n                         .collect(Collectors.joining(\"\\n\"));\n-                String errMessageWithValidationEvents = errMessage + \"\\n\" + validationErrors;\n-                throw new OptaPlannerXmlSerializationException(errMessageWithValidationEvents, jaxbException);\n+                String errorMessageWithValidationEvents = errorMessage + \"\\n\" + validationErrors;\n+                throw new OptaPlannerXmlSerializationException(errorMessageWithValidationEvents, jaxbException);\n             } else {\n-                String errMessage = String.format(ERR_MSG_READ, rootClass.getName());\n-                throw new OptaPlannerXmlSerializationException(errMessage, jaxbException);\n+                String errorMessage = String.format(ERR_MSG_READ, rootClass.getName());\n+                throw new OptaPlannerXmlSerializationException(errorMessage, jaxbException);\n             }\n         }\n     }\n \n-    private Unmarshaller createUnmarshaller() {\n-        try {\n-            return jaxbContext.createUnmarshaller();\n-        } catch (JAXBException e) {\n-            String errMessage = String.format(\"Failed to create JAXB unmarshaller for a root element class (%s).\",\n-                    rootClass.getName());\n-            throw new OptaPlannerXmlSerializationException(errMessage, e);\n-        }\n-    }\n-\n     /**\n      * Reads the input XML using the {@link Reader} overriding elements namespaces. If an element already has a namespace and\n      * a {@link ElementNamespaceOverride} is defined for this element, its namespace is overridden. In case the element has no\n      * namespace, new namespace defined in the {@link ElementNamespaceOverride} is added.\n-     * \n+     *\n      * @param reader input XML {@link Reader}; never null\n      * @param elementNamespaceOverrides never null\n      * @return deserialized object representation of the XML.\n      */\n     public T readOverridingNamespace(Reader reader, ElementNamespaceOverride... elementNamespaceOverrides) {\n         Objects.requireNonNull(reader);\n         Objects.requireNonNull(elementNamespaceOverrides);\n+        return readOverridingNamespace(parseXml(reader), elementNamespaceOverrides);\n+    }\n \n-        // Create a SAXParser to use its XMLReader on the XMLFilter\n-        SAXParserFactory saxParserFactory = SAXParserFactory.newInstance();\n-        SAXParser saxParser;\n+    /**\n+     * Reads the input XML {@link Document} overriding namespaces. If an element already has a namespace and\n+     * a {@link ElementNamespaceOverride} is defined for this element, its namespace is overridden. In case the element has no\n+     * namespace a new namespace defined in the {@link ElementNamespaceOverride} is added.\n+     *\n+     * @param document input XML {@link Document}; never null\n+     * @param elementNamespaceOverrides never null\n+     * @return deserialized object representation of the XML.\n+     */\n+    public T readOverridingNamespace(Document document, ElementNamespaceOverride... elementNamespaceOverrides) {\n+        Document translatedDocument =\n+                overrideNamespaces(Objects.requireNonNull(document), Objects.requireNonNull(elementNamespaceOverrides));\n         try {\n-            // Protect the parser against the XXE attack\n-            // https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A4-XML_External_Entities_(XXE)\n-            saxParserFactory.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n-            saxParser = saxParserFactory.newSAXParser();\n-        } catch (ParserConfigurationException | SAXException e) {\n-            final String errMessage = String.format(ERR_MSG_READ_OVERRIDE_NAMESPACE, rootClass.getName(),\n+            return (T) createUnmarshaller().unmarshal(translatedDocument);\n+        } catch (JAXBException e) {\n+            final String errorMessage = String.format(ERR_MSG_READ_OVERRIDE_NAMESPACE, rootClass.getName(),\n                     Arrays.toString(elementNamespaceOverrides));\n-            throw new OptaPlannerXmlSerializationException(errMessage, e);\n+            throw new OptaPlannerXmlSerializationException(errorMessage, e);\n         }\n-        XMLReader xmlReader;\n+    }\n+\n+    public Document parseXml(Reader reader) {\n+        Reader nonNullReader = Objects.requireNonNull(reader);\n+        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();\n+        documentBuilderFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\");\n+        documentBuilderFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_SCHEMA, \"\");\n+        documentBuilderFactory.setNamespaceAware(true);\n+        DocumentBuilder builder;\n         try {\n-            xmlReader = saxParser.getXMLReader();\n-        } catch (SAXException e) {\n-            final String errMessage = String.format(ERR_MSG_READ_OVERRIDE_NAMESPACE, rootClass.getName(),\n-                    Arrays.toString(elementNamespaceOverrides));\n-            throw new OptaPlannerXmlSerializationException(errMessage, e);\n+            builder = documentBuilderFactory.newDocumentBuilder();\n+        } catch (ParserConfigurationException e) {\n+            String errorMessage = String.format(\"Failed to create a %s instance to parse an XML for a root class (%s).\",\n+                    DocumentBuilder.class.getSimpleName(), rootClass.getName());\n+            throw new OptaPlannerXmlSerializationException(errorMessage, e);\n         }\n \n-        XMLFilter namespaceOverridingXmlFilter = new NamespaceOverridingXmlFilter(xmlReader, elementNamespaceOverrides);\n-        namespaceOverridingXmlFilter.setParent(xmlReader);\n-\n-        // Use UnmarshallerHandler as a content handler for the XML filter.\n-        Unmarshaller unmarshaller = createUnmarshaller();\n-        UnmarshallerHandler unmarshallerHandler = unmarshaller.getUnmarshallerHandler();\n-        namespaceOverridingXmlFilter.setContentHandler(unmarshallerHandler);\n-\n-        InputSource xmlInputSource = new InputSource(reader);\n         try {\n-            // Parse the XML to feed its content into the UnmarshallerHandler.\n-            namespaceOverridingXmlFilter.parse(xmlInputSource);\n-        } catch (IOException | SAXException e) {\n-            final String errMessage = String.format(ERR_MSG_READ_OVERRIDE_NAMESPACE, rootClass.getName(),\n-                    Arrays.toString(elementNamespaceOverrides));\n-            throw new OptaPlannerXmlSerializationException(errMessage, e);\n+            return builder.parse(new InputSource(nonNullReader));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48c1e3dc683fc6c08b6ea43b6a734751ad3a6d7f"}, "originalPosition": 253}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA2ODU0NQ==", "bodyText": "Good question. The reader is created outside the method, usually from a stream (which is created inside a try-with-resources).\nBut it doesn't hurt to make sure it's closed even here.", "url": "https://github.com/kiegroup/optaplanner/pull/929#discussion_r490068545", "createdAt": "2020-09-17T08:34:24Z", "author": {"login": "rsynek"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/io/jaxb/GenericJaxbIO.java", "diffHunk": "@@ -129,119 +155,141 @@ public T readAndValidate(Reader reader, Schema schema) {\n         try {\n             unmarshaller.setEventHandler(validationEventCollector);\n         } catch (JAXBException jaxbException) {\n-            String errMessage = String.format(\"Failed to set a validation event handler to the unmarshaller for \"\n-                    + \"a root element class (%s).\", rootClass.getName());\n-            throw new OptaPlannerXmlSerializationException(errMessage, jaxbException);\n+            String errorMessage = String.format(\"Failed to set a validation event handler to the %s for \"\n+                    + \"a root element class (%s).\", Unmarshaller.class.getSimpleName(), rootClass.getName());\n+            throw new OptaPlannerXmlSerializationException(errorMessage, jaxbException);\n         }\n \n         try {\n-            return (T) unmarshaller.unmarshal(nonNullReader);\n+            return (T) unmarshaller.unmarshal(nonNullDocument);\n         } catch (JAXBException jaxbException) {\n             if (validationEventCollector.hasEvents()) {\n-                String errMessage =\n+                String errorMessage =\n                         String.format(\"XML validation failed for a root element class (%s).\", rootClass.getName());\n                 String validationErrors = Stream.of(validationEventCollector.getEvents())\n                         .map(ValidationEvent::getMessage)\n                         .collect(Collectors.joining(\"\\n\"));\n-                String errMessageWithValidationEvents = errMessage + \"\\n\" + validationErrors;\n-                throw new OptaPlannerXmlSerializationException(errMessageWithValidationEvents, jaxbException);\n+                String errorMessageWithValidationEvents = errorMessage + \"\\n\" + validationErrors;\n+                throw new OptaPlannerXmlSerializationException(errorMessageWithValidationEvents, jaxbException);\n             } else {\n-                String errMessage = String.format(ERR_MSG_READ, rootClass.getName());\n-                throw new OptaPlannerXmlSerializationException(errMessage, jaxbException);\n+                String errorMessage = String.format(ERR_MSG_READ, rootClass.getName());\n+                throw new OptaPlannerXmlSerializationException(errorMessage, jaxbException);\n             }\n         }\n     }\n \n-    private Unmarshaller createUnmarshaller() {\n-        try {\n-            return jaxbContext.createUnmarshaller();\n-        } catch (JAXBException e) {\n-            String errMessage = String.format(\"Failed to create JAXB unmarshaller for a root element class (%s).\",\n-                    rootClass.getName());\n-            throw new OptaPlannerXmlSerializationException(errMessage, e);\n-        }\n-    }\n-\n     /**\n      * Reads the input XML using the {@link Reader} overriding elements namespaces. If an element already has a namespace and\n      * a {@link ElementNamespaceOverride} is defined for this element, its namespace is overridden. In case the element has no\n      * namespace, new namespace defined in the {@link ElementNamespaceOverride} is added.\n-     * \n+     *\n      * @param reader input XML {@link Reader}; never null\n      * @param elementNamespaceOverrides never null\n      * @return deserialized object representation of the XML.\n      */\n     public T readOverridingNamespace(Reader reader, ElementNamespaceOverride... elementNamespaceOverrides) {\n         Objects.requireNonNull(reader);\n         Objects.requireNonNull(elementNamespaceOverrides);\n+        return readOverridingNamespace(parseXml(reader), elementNamespaceOverrides);\n+    }\n \n-        // Create a SAXParser to use its XMLReader on the XMLFilter\n-        SAXParserFactory saxParserFactory = SAXParserFactory.newInstance();\n-        SAXParser saxParser;\n+    /**\n+     * Reads the input XML {@link Document} overriding namespaces. If an element already has a namespace and\n+     * a {@link ElementNamespaceOverride} is defined for this element, its namespace is overridden. In case the element has no\n+     * namespace a new namespace defined in the {@link ElementNamespaceOverride} is added.\n+     *\n+     * @param document input XML {@link Document}; never null\n+     * @param elementNamespaceOverrides never null\n+     * @return deserialized object representation of the XML.\n+     */\n+    public T readOverridingNamespace(Document document, ElementNamespaceOverride... elementNamespaceOverrides) {\n+        Document translatedDocument =\n+                overrideNamespaces(Objects.requireNonNull(document), Objects.requireNonNull(elementNamespaceOverrides));\n         try {\n-            // Protect the parser against the XXE attack\n-            // https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A4-XML_External_Entities_(XXE)\n-            saxParserFactory.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n-            saxParser = saxParserFactory.newSAXParser();\n-        } catch (ParserConfigurationException | SAXException e) {\n-            final String errMessage = String.format(ERR_MSG_READ_OVERRIDE_NAMESPACE, rootClass.getName(),\n+            return (T) createUnmarshaller().unmarshal(translatedDocument);\n+        } catch (JAXBException e) {\n+            final String errorMessage = String.format(ERR_MSG_READ_OVERRIDE_NAMESPACE, rootClass.getName(),\n                     Arrays.toString(elementNamespaceOverrides));\n-            throw new OptaPlannerXmlSerializationException(errMessage, e);\n+            throw new OptaPlannerXmlSerializationException(errorMessage, e);\n         }\n-        XMLReader xmlReader;\n+    }\n+\n+    public Document parseXml(Reader reader) {\n+        Reader nonNullReader = Objects.requireNonNull(reader);\n+        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();\n+        documentBuilderFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\");\n+        documentBuilderFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_SCHEMA, \"\");\n+        documentBuilderFactory.setNamespaceAware(true);\n+        DocumentBuilder builder;\n         try {\n-            xmlReader = saxParser.getXMLReader();\n-        } catch (SAXException e) {\n-            final String errMessage = String.format(ERR_MSG_READ_OVERRIDE_NAMESPACE, rootClass.getName(),\n-                    Arrays.toString(elementNamespaceOverrides));\n-            throw new OptaPlannerXmlSerializationException(errMessage, e);\n+            builder = documentBuilderFactory.newDocumentBuilder();\n+        } catch (ParserConfigurationException e) {\n+            String errorMessage = String.format(\"Failed to create a %s instance to parse an XML for a root class (%s).\",\n+                    DocumentBuilder.class.getSimpleName(), rootClass.getName());\n+            throw new OptaPlannerXmlSerializationException(errorMessage, e);\n         }\n \n-        XMLFilter namespaceOverridingXmlFilter = new NamespaceOverridingXmlFilter(xmlReader, elementNamespaceOverrides);\n-        namespaceOverridingXmlFilter.setParent(xmlReader);\n-\n-        // Use UnmarshallerHandler as a content handler for the XML filter.\n-        Unmarshaller unmarshaller = createUnmarshaller();\n-        UnmarshallerHandler unmarshallerHandler = unmarshaller.getUnmarshallerHandler();\n-        namespaceOverridingXmlFilter.setContentHandler(unmarshallerHandler);\n-\n-        InputSource xmlInputSource = new InputSource(reader);\n         try {\n-            // Parse the XML to feed its content into the UnmarshallerHandler.\n-            namespaceOverridingXmlFilter.parse(xmlInputSource);\n-        } catch (IOException | SAXException e) {\n-            final String errMessage = String.format(ERR_MSG_READ_OVERRIDE_NAMESPACE, rootClass.getName(),\n-                    Arrays.toString(elementNamespaceOverrides));\n-            throw new OptaPlannerXmlSerializationException(errMessage, e);\n+            return builder.parse(new InputSource(nonNullReader));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc1MjE5OA=="}, "originalCommit": {"oid": "48c1e3dc683fc6c08b6ea43b6a734751ad3a6d7f"}, "originalPosition": 253}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2Njk3NzUyOnYy", "diffSide": "RIGHT", "path": "optaplanner-benchmark/src/main/java/org/optaplanner/benchmark/impl/io/PlannerBenchmarkConfigIO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMToyODoyNFrOHTdkYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMToyODoyNFrOHTdkYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE2OTQ0MQ==", "bodyText": "Nitpick: in other cases in this PR, that errMsg is called errorMessage.\nPersonally, I'd just inline that String every time into the call to the *Exception constructor.", "url": "https://github.com/kiegroup/optaplanner/pull/929#discussion_r490169441", "createdAt": "2020-09-17T11:28:24Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-benchmark/src/main/java/org/optaplanner/benchmark/impl/io/PlannerBenchmarkConfigIO.java", "diffHunk": "@@ -24,16 +24,36 @@\n import org.optaplanner.core.impl.io.jaxb.ElementNamespaceOverride;\n import org.optaplanner.core.impl.io.jaxb.GenericJaxbIO;\n import org.optaplanner.core.impl.io.jaxb.JaxbIO;\n+import org.w3c.dom.Document;\n \n public class PlannerBenchmarkConfigIO implements JaxbIO<PlannerBenchmarkConfig> {\n \n+    private static final String BENCHMARK_XSD_RESOURCE = \"/benchmark.xsd\";\n     private final GenericJaxbIO<PlannerBenchmarkConfig> genericJaxbIO = new GenericJaxbIO<>(PlannerBenchmarkConfig.class);\n \n     @Override\n     public PlannerBenchmarkConfig read(Reader reader) {\n-        return genericJaxbIO.readOverridingNamespace(reader,\n-                ElementNamespaceOverride.of(PlannerBenchmarkConfig.XML_ELEMENT_NAME, PlannerBenchmarkConfig.XML_NAMESPACE),\n-                ElementNamespaceOverride.of(SolverConfig.XML_ELEMENT_NAME, SolverConfig.XML_NAMESPACE));\n+        Document document = genericJaxbIO.parseXml(reader);\n+        String rootElementNamespace = document.getDocumentElement().getNamespaceURI();\n+        if (PlannerBenchmarkConfig.XML_NAMESPACE.equals(rootElementNamespace)) { // If there is the correct namespace, validate.\n+            genericJaxbIO.validate(document, BENCHMARK_XSD_RESOURCE);\n+            /*\n+             * In JAXB annotations the SolverConfig belongs to a different namespace than the PlannerBenchmarkConfig.\n+             * However, benchmark.xsd merges both namespaces into a single one. As a result, JAXB is incapable of matching\n+             * the solver element in benchmark configuration and thus the solver element's namespace needs to be overridden.\n+             */\n+            return genericJaxbIO.readOverridingNamespace(document,\n+                    ElementNamespaceOverride.of(SolverConfig.XML_ELEMENT_NAME, SolverConfig.XML_NAMESPACE));\n+        } else if (rootElementNamespace == null || rootElementNamespace.isEmpty()) {\n+            // If not, add the missing namespace to maintain backward compatibility.\n+            return genericJaxbIO.readOverridingNamespace(document,\n+                    ElementNamespaceOverride.of(PlannerBenchmarkConfig.XML_ELEMENT_NAME, PlannerBenchmarkConfig.XML_NAMESPACE),\n+                    ElementNamespaceOverride.of(SolverConfig.XML_ELEMENT_NAME, SolverConfig.XML_NAMESPACE));\n+        } else { // If there is an unexpected namespace, fail fast.\n+            String errMsg = String.format(\"The <%s/> element belongs to a different namespace (%s) than expected (%s).\",\n+                    PlannerBenchmarkConfig.XML_ELEMENT_NAME, rootElementNamespace, PlannerBenchmarkConfig.XML_NAMESPACE);\n+            throw new IllegalArgumentException(errMsg);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbe9ca43850f0ac923f5335f52f9db93e956a601"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODExNzA5OnYy", "diffSide": "RIGHT", "path": "optaplanner-docs/src/main/asciidoc/BenchmarkingAndTweaking/BenchmarkingAndTweaking-chapter.adoc", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNTozNDo0OFrOHToeag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMToxNzoxN1rOHUIzZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM0ODEzOA==", "bodyText": "This is kind of insane. I understand that we want to nudge people towards XSD, and that we want them to copy-paste this, but had I seen this for the first time, I'd run scared.\nSolutions? I don't have any. :-(", "url": "https://github.com/kiegroup/optaplanner/pull/929#discussion_r490348138", "createdAt": "2020-09-17T15:34:48Z", "author": {"login": "triceo"}, "path": "optaplanner-docs/src/main/asciidoc/BenchmarkingAndTweaking/BenchmarkingAndTweaking-chapter.adoc", "diffHunk": "@@ -95,7 +95,8 @@ A benchmark configuration XML file looks like this:\n [source,xml,options=\"nowrap\"]\n ----\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<plannerBenchmark>\n+<plannerBenchmark xmlns=\"https://www.optaplanner.org/xsd/benchmark\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"https://www.optaplanner.org/xsd/benchmark https://www.optaplanner.org/xsd/benchmark/benchmark.xsd\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f305b9bbfaac2863771be0dd3fc6f8c5a73e1809"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM5ODQxNg==", "bodyText": "One option I see is taking a shortcut:\n\nwe change any reference to  and  to <plannerBenchmark xmlns=\"https://www.optaplanner.org/xsd/benchmark\"> or <solver xmlns=\"https://www.optaplanner.org/xsd/solver\"> without the XSD location\nwe show the full root element declaration in the Configuration chapter.\n\nAs a result, if someone copies such an incomplete declaration into a project, the IDE won't be able to download the XSD from the website. In such a situation IntelliJ IDEA looks for the XSD on the classpath.", "url": "https://github.com/kiegroup/optaplanner/pull/929#discussion_r490398416", "createdAt": "2020-09-17T16:29:19Z", "author": {"login": "rsynek"}, "path": "optaplanner-docs/src/main/asciidoc/BenchmarkingAndTweaking/BenchmarkingAndTweaking-chapter.adoc", "diffHunk": "@@ -95,7 +95,8 @@ A benchmark configuration XML file looks like this:\n [source,xml,options=\"nowrap\"]\n ----\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<plannerBenchmark>\n+<plannerBenchmark xmlns=\"https://www.optaplanner.org/xsd/benchmark\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"https://www.optaplanner.org/xsd/benchmark https://www.optaplanner.org/xsd/benchmark/benchmark.xsd\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM0ODEzOA=="}, "originalCommit": {"oid": "f305b9bbfaac2863771be0dd3fc6f8c5a73e1809"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM5OTMxMg==", "bodyText": "That could work.", "url": "https://github.com/kiegroup/optaplanner/pull/929#discussion_r490399312", "createdAt": "2020-09-17T16:30:46Z", "author": {"login": "triceo"}, "path": "optaplanner-docs/src/main/asciidoc/BenchmarkingAndTweaking/BenchmarkingAndTweaking-chapter.adoc", "diffHunk": "@@ -95,7 +95,8 @@ A benchmark configuration XML file looks like this:\n [source,xml,options=\"nowrap\"]\n ----\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<plannerBenchmark>\n+<plannerBenchmark xmlns=\"https://www.optaplanner.org/xsd/benchmark\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"https://www.optaplanner.org/xsd/benchmark https://www.optaplanner.org/xsd/benchmark/benchmark.xsd\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM0ODEzOA=="}, "originalCommit": {"oid": "f305b9bbfaac2863771be0dd3fc6f8c5a73e1809"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQwODQzMg==", "bodyText": "@ge0ffrey what is your opinion on this? Which way would you prefer?", "url": "https://github.com/kiegroup/optaplanner/pull/929#discussion_r490408432", "createdAt": "2020-09-17T16:45:03Z", "author": {"login": "rsynek"}, "path": "optaplanner-docs/src/main/asciidoc/BenchmarkingAndTweaking/BenchmarkingAndTweaking-chapter.adoc", "diffHunk": "@@ -95,7 +95,8 @@ A benchmark configuration XML file looks like this:\n [source,xml,options=\"nowrap\"]\n ----\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<plannerBenchmark>\n+<plannerBenchmark xmlns=\"https://www.optaplanner.org/xsd/benchmark\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"https://www.optaplanner.org/xsd/benchmark https://www.optaplanner.org/xsd/benchmark/benchmark.xsd\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM0ODEzOA=="}, "originalCommit": {"oid": "f305b9bbfaac2863771be0dd3fc6f8c5a73e1809"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg3MTc2MA==", "bodyText": "We need the full declaration as in this PR, I believe. People will just copy paste it, they do it for pom.xml headings too, I am not to worried about it looking scary.\nWhy not just the \"xmlns\"? Then the IDE doesn't know where to download the xsd from.\nWhy not without any xmlns? Then they have no code completion nor xml validation while typing.", "url": "https://github.com/kiegroup/optaplanner/pull/929#discussion_r490871760", "createdAt": "2020-09-18T11:05:00Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-docs/src/main/asciidoc/BenchmarkingAndTweaking/BenchmarkingAndTweaking-chapter.adoc", "diffHunk": "@@ -95,7 +95,8 @@ A benchmark configuration XML file looks like this:\n [source,xml,options=\"nowrap\"]\n ----\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<plannerBenchmark>\n+<plannerBenchmark xmlns=\"https://www.optaplanner.org/xsd/benchmark\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"https://www.optaplanner.org/xsd/benchmark https://www.optaplanner.org/xsd/benchmark/benchmark.xsd\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM0ODEzOA=="}, "originalCommit": {"oid": "f305b9bbfaac2863771be0dd3fc6f8c5a73e1809"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg3MjM4MQ==", "bodyText": "One could argue that the XSD in xml spec has made that unnecessarily verbose - and I'd agree - but it is what it is.", "url": "https://github.com/kiegroup/optaplanner/pull/929#discussion_r490872381", "createdAt": "2020-09-18T11:06:18Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-docs/src/main/asciidoc/BenchmarkingAndTweaking/BenchmarkingAndTweaking-chapter.adoc", "diffHunk": "@@ -95,7 +95,8 @@ A benchmark configuration XML file looks like this:\n [source,xml,options=\"nowrap\"]\n ----\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<plannerBenchmark>\n+<plannerBenchmark xmlns=\"https://www.optaplanner.org/xsd/benchmark\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"https://www.optaplanner.org/xsd/benchmark https://www.optaplanner.org/xsd/benchmark/benchmark.xsd\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM0ODEzOA=="}, "originalCommit": {"oid": "f305b9bbfaac2863771be0dd3fc6f8c5a73e1809"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg3Nzc5Nw==", "bodyText": "A summary:\n\nother IDE than IDEA might not be able to handle the incomplete declaration gracefully\nthis is how the declaration looks like \"by the book\"\n\nThese points outweigh the concern regarding the rather long and ugly declaration.", "url": "https://github.com/kiegroup/optaplanner/pull/929#discussion_r490877797", "createdAt": "2020-09-18T11:17:17Z", "author": {"login": "rsynek"}, "path": "optaplanner-docs/src/main/asciidoc/BenchmarkingAndTweaking/BenchmarkingAndTweaking-chapter.adoc", "diffHunk": "@@ -95,7 +95,8 @@ A benchmark configuration XML file looks like this:\n [source,xml,options=\"nowrap\"]\n ----\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<plannerBenchmark>\n+<plannerBenchmark xmlns=\"https://www.optaplanner.org/xsd/benchmark\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"https://www.optaplanner.org/xsd/benchmark https://www.optaplanner.org/xsd/benchmark/benchmark.xsd\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM0ODEzOA=="}, "originalCommit": {"oid": "f305b9bbfaac2863771be0dd3fc6f8c5a73e1809"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4238, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}