{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwMzc0Mjcx", "number": 652, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDo0OToxOFrODXexGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMTowMzoyNVrODXfATw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTQ3OTMxOnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/bi/BiConstraintStream.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDo0OToxOFrOFczChg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDo0OToxOFrOFczChg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc0MDY3OA==", "bodyText": "suggestion: \"fall in\" -> \"belong to\"?\n\"fall in\" sounds like a non-english expression translated word by word (happens a lot from Dutch too).", "url": "https://github.com/kiegroup/optaplanner/pull/652#discussion_r365740678", "createdAt": "2020-01-13T10:49:18Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/bi/BiConstraintStream.java", "diffHunk": "@@ -251,14 +251,23 @@\n     <GroupKeyA_, GroupKeyB_> BiConstraintStream<GroupKeyA_, GroupKeyB_> groupBy(\n             BiFunction<A, B, GroupKeyA_> groupKeyAMapping, BiFunction<A, B, GroupKeyB_> groupKeyBMapping);\n \n-    /*\n-    // TODO implement this\n-    <GroupKeyA_, GroupKeyB_, ResultContainer_, Result_>\n-    TriConstraintStream<GroupKeyA_, GroupKeyB_, Result_> groupBy(\n-            BiFunction<A, B, GroupKeyA_> groupKeyAMapping,\n-            BiFunction<A, B, GroupKeyB_> groupKeyBMapping,\n-            BiConstraintCollector<A, B, ResultContainer_, Result_> collector);\n+    /**\n+     * Combines the semantics of {@link #groupBy(BiFunction, BiFunction)} and {@link #groupBy(BiConstraintCollector)}.\n+     * That is, the first and second facts in the tuple follow the {@link #groupBy(BiFunction, BiFunction)} semantics,\n+     * and the third fact is the result of applying {@link BiConstraintCollector#finisher()} on all the tuples of the\n+     * original {@link UniConstraintStream} that fall in the group.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d1c157d40fc6b4a76ff78fd3be06a5482267d69"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTQ5NDE1OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/bi/BiConstraintStream.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDo1NDozMlrOFczLfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDo1NDozMlrOFczLfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc0Mjk3NQ==", "bodyText": "missing \"the\" before \"first fact\"\nThese 2 lines are incorrect:\n\"... to convert the first fact in the original tuple ...\" and \"... the second fact ...\"\nEach groupMaping converts the entire tuple, not a fact of it. They both get A and B as input.\n=> \"groupKeyAMapping never null, function to convert the original tuple into a first fact\"\n\"groupKeyBMapping never null, function to convert the original tuple into a second fact\"", "url": "https://github.com/kiegroup/optaplanner/pull/652#discussion_r365742975", "createdAt": "2020-01-13T10:54:32Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/bi/BiConstraintStream.java", "diffHunk": "@@ -251,14 +251,23 @@\n     <GroupKeyA_, GroupKeyB_> BiConstraintStream<GroupKeyA_, GroupKeyB_> groupBy(\n             BiFunction<A, B, GroupKeyA_> groupKeyAMapping, BiFunction<A, B, GroupKeyB_> groupKeyBMapping);\n \n-    /*\n-    // TODO implement this\n-    <GroupKeyA_, GroupKeyB_, ResultContainer_, Result_>\n-    TriConstraintStream<GroupKeyA_, GroupKeyB_, Result_> groupBy(\n-            BiFunction<A, B, GroupKeyA_> groupKeyAMapping,\n-            BiFunction<A, B, GroupKeyB_> groupKeyBMapping,\n-            BiConstraintCollector<A, B, ResultContainer_, Result_> collector);\n+    /**\n+     * Combines the semantics of {@link #groupBy(BiFunction, BiFunction)} and {@link #groupBy(BiConstraintCollector)}.\n+     * That is, the first and second facts in the tuple follow the {@link #groupBy(BiFunction, BiFunction)} semantics,\n+     * and the third fact is the result of applying {@link BiConstraintCollector#finisher()} on all the tuples of the\n+     * original {@link UniConstraintStream} that fall in the group.\n+     * @param groupKeyAMapping never null, function to convert first fact in the original tuple to a different fact\n+     * @param groupKeyBMapping never null, function to convert second fact in the original tuple to a different fact", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d1c157d40fc6b4a76ff78fd3be06a5482267d69"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTQ5NzAyOnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/tri/TriConstraintCollector.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDo1NToyN1rOFczNPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDo1NToyN1rOFczNPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc0MzQyMA==", "bodyText": "Where's C?", "url": "https://github.com/kiegroup/optaplanner/pull/652#discussion_r365743420", "createdAt": "2020-01-13T10:55:27Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/tri/TriConstraintCollector.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.api.score.stream.tri;\n+\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.stream.Collector;\n+\n+import org.optaplanner.core.api.function.QuadFunction;\n+import org.optaplanner.core.api.function.TriFunction;\n+import org.optaplanner.core.api.score.stream.ConstraintCollectors;\n+import org.optaplanner.core.api.score.stream.ConstraintStream;\n+\n+/**\n+ * Usually created with {@link ConstraintCollectors}.\n+ * Used by {@link TriConstraintStream#groupBy(TriFunction, TriConstraintCollector)}, ...\n+ * <p>\n+ * Loosely based on JDK's {@link Collector}, but it returns an undo operation for each accumulation\n+ * to enable incremental score calculation in {@link ConstraintStream constraint streams}.\n+ * @param <A> the type of the first fact of the tuple in the source {@link TriConstraintStream}\n+ * @param <B> the type of the second fact of the tuple in the source {@link TriConstraintStream}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d1c157d40fc6b4a76ff78fd3be06a5482267d69"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTUwMzYyOnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/tri/TriConstraintStream.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDo1Nzo1MFrOFczRSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDo1Nzo1MFrOFczRSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc0NDQ1OQ==", "bodyText": "the other javadocs start with \"convert tri into uni\".\nFor maintenance, I recommend we keep the javadocs in the same same structure, same order (as much copy pasted as possible even maybe), so \"convert into what\" before \"how\" (like in other javadocs, this javadocs does it in reverse order).", "url": "https://github.com/kiegroup/optaplanner/pull/652#discussion_r365744459", "createdAt": "2020-01-13T10:57:50Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/tri/TriConstraintStream.java", "diffHunk": "@@ -196,6 +198,80 @@\n         return join(otherClass, AbstractQuadJoiner.merge(joiners));\n     }\n \n+    // ************************************************************************\n+    // Group by\n+    // ************************************************************************\n+\n+    /**\n+     * Runs all tuples of the stream through a given @{@link TriConstraintCollector} and converts them into a new", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d1c157d40fc6b4a76ff78fd3be06a5482267d69"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTUwOTE0OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/tri/TriConstraintStream.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDo1OTo1N1rOFczUsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDo1OTo1N1rOFczUsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc0NTMzMA==", "bodyText": "avoid future tense \"will\".\nNice to have: in a javadoc, if a line ends, start a new line for the next one (so \\n before between \"stream.\" and \"Neither\". The javadocs html puts them together anyway, but this gives us \"ventilated proze\" in the source file, which is easier to author and maintain.", "url": "https://github.com/kiegroup/optaplanner/pull/652#discussion_r365745330", "createdAt": "2020-01-13T10:59:57Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/tri/TriConstraintStream.java", "diffHunk": "@@ -196,6 +198,80 @@\n         return join(otherClass, AbstractQuadJoiner.merge(joiners));\n     }\n \n+    // ************************************************************************\n+    // Group by\n+    // ************************************************************************\n+\n+    /**\n+     * Runs all tuples of the stream through a given @{@link TriConstraintCollector} and converts them into a new\n+     * {@link UniConstraintStream} which only has a single tuple, the result of applying {@link TriConstraintCollector}.\n+     * @param collector never null, the collector to perform the grouping operation with\n+     * @param <ResultContainer_> the mutable accumulation type (often hidden as an implementation detail)\n+     * @param <Result_> the type of a fact in the destination {@link UniConstraintStream}'s tuple\n+     * @return never null\n+     */\n+    <ResultContainer_, Result_> UniConstraintStream<Result_> groupBy(\n+            TriConstraintCollector<A, B, C, ResultContainer_, Result_> collector);\n+\n+    /**\n+     * Convert the {@link TriConstraintStream} to a {@link UniConstraintStream}, containing the set of tuples resulting\n+     * from applying the group key mapping function on all tuples of the original stream. Neither tuple of the new\n+     * stream will {@link Objects#equals(Object, Object)} any other.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d1c157d40fc6b4a76ff78fd3be06a5482267d69"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTUxMjkxOnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/tri/TriConstraintStream.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMTowMToxN1rOFczW6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMTowMToxN1rOFczW6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc0NTg5Ng==", "bodyText": "\"incoming tuple\" first line, \"incoming tuples\" second line. Either both singular or both plural (across all javadocs)", "url": "https://github.com/kiegroup/optaplanner/pull/652#discussion_r365745896", "createdAt": "2020-01-13T11:01:17Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/tri/TriConstraintStream.java", "diffHunk": "@@ -196,6 +198,80 @@\n         return join(otherClass, AbstractQuadJoiner.merge(joiners));\n     }\n \n+    // ************************************************************************\n+    // Group by\n+    // ************************************************************************\n+\n+    /**\n+     * Runs all tuples of the stream through a given @{@link TriConstraintCollector} and converts them into a new\n+     * {@link UniConstraintStream} which only has a single tuple, the result of applying {@link TriConstraintCollector}.\n+     * @param collector never null, the collector to perform the grouping operation with\n+     * @param <ResultContainer_> the mutable accumulation type (often hidden as an implementation detail)\n+     * @param <Result_> the type of a fact in the destination {@link UniConstraintStream}'s tuple\n+     * @return never null\n+     */\n+    <ResultContainer_, Result_> UniConstraintStream<Result_> groupBy(\n+            TriConstraintCollector<A, B, C, ResultContainer_, Result_> collector);\n+\n+    /**\n+     * Convert the {@link TriConstraintStream} to a {@link UniConstraintStream}, containing the set of tuples resulting\n+     * from applying the group key mapping function on all tuples of the original stream. Neither tuple of the new\n+     * stream will {@link Objects#equals(Object, Object)} any other.\n+     * @param groupKeyMapping never null, mapping function to convert each element in the stream to a different element\n+     * @param <GroupKey_> the type of a fact in the destination {@link UniConstraintStream}'s tuple\n+     * @return never null\n+     */\n+    <GroupKey_> UniConstraintStream<GroupKey_> groupBy(TriFunction<A, B, C, GroupKey_> groupKeyMapping);\n+\n+    /**\n+     * Convert the {@link TriConstraintStream} to a {@link BiConstraintStream}, consisting of unique tuples.\n+     * <p>\n+     * The first fact is the return value of the first group key mapping function, applied on the incoming tuple.\n+     * The second fact is the return value of a given {@link TriConstraintCollector} applied on incoming tuples with the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d1c157d40fc6b4a76ff78fd3be06a5482267d69"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTUxODIzOnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/drools/common/BiTuple.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMTowMzoyNVrOFczaGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMjowMjoyNFrOFc0uzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc0NjcxMg==", "bodyText": "Why not use variable names \"a\" and \"b\" instead of \"_1\" and \"_2\"?", "url": "https://github.com/kiegroup/optaplanner/pull/652#discussion_r365746712", "createdAt": "2020-01-13T11:03:25Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/drools/common/BiTuple.java", "diffHunk": "@@ -18,15 +18,15 @@\n \n import java.util.Objects;\n \n-public final class BiTuple<K,V> {\n-    public final K key;\n-    public final V value;\n+public final class BiTuple<A, B> {\n+    public final A _1;\n+    public final B _2;\n     private final int hashCode;\n \n-    public BiTuple(K key, V value) {\n-        this.key = key;\n-        this.value = value;\n-        this.hashCode = Objects.hash(key, value);\n+    public BiTuple(A _1, B _2) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d1c157d40fc6b4a76ff78fd3be06a5482267d69"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc2ODM5OA==", "bodyText": "It's all the same to me. I can change it.", "url": "https://github.com/kiegroup/optaplanner/pull/652#discussion_r365768398", "createdAt": "2020-01-13T12:02:24Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/drools/common/BiTuple.java", "diffHunk": "@@ -18,15 +18,15 @@\n \n import java.util.Objects;\n \n-public final class BiTuple<K,V> {\n-    public final K key;\n-    public final V value;\n+public final class BiTuple<A, B> {\n+    public final A _1;\n+    public final B _2;\n     private final int hashCode;\n \n-    public BiTuple(K key, V value) {\n-        this.key = key;\n-        this.value = value;\n-        this.hashCode = Objects.hash(key, value);\n+    public BiTuple(A _1, B _2) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc0NjcxMg=="}, "originalCommit": {"oid": "5d1c157d40fc6b4a76ff78fd3be06a5482267d69"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4567, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}