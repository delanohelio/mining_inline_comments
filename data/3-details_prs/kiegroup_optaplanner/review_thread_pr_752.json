{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3NDkzNzY5", "number": 752, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNDoxNDowMFrOD6RMFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNjo0Mzo1NFrOEA9nVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNDI1NjIzOnYy", "diffSide": "RIGHT", "path": "optaplanner-persistence/optaplanner-persistence-jpa/src/test/java/org/optaplanner/persistence/jpa/impl/score/AbstractScoreConverterTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNDoxNDowMFrOGSAloA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNDoxNDowMFrOGSAloA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUzNzE4NA==", "bodyText": "Should be org.junit.jupiter.api.BeforeEach", "url": "https://github.com/kiegroup/optaplanner/pull/752#discussion_r421537184", "createdAt": "2020-05-07T14:14:00Z", "author": {"login": "rsynek"}, "path": "optaplanner-persistence/optaplanner-persistence-jpa/src/test/java/org/optaplanner/persistence/jpa/impl/score/AbstractScoreConverterTest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2015 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.persistence.jpa.impl.score;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.util.Map;\n+\n+import javax.naming.InitialContext;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.MappedSuperclass;\n+import javax.transaction.HeuristicMixedException;\n+import javax.transaction.HeuristicRollbackException;\n+import javax.transaction.NotSupportedException;\n+import javax.transaction.RollbackException;\n+import javax.transaction.SystemException;\n+import javax.transaction.TransactionManager;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.kie.test.util.db.PersistenceUtil;\n+import org.optaplanner.core.api.score.Score;\n+\n+public abstract class AbstractScoreConverterTest {\n+\n+    protected Map<String, Object> context;\n+    protected EntityManagerFactory entityManagerFactory;\n+    protected TransactionManager transactionManager;\n+\n+    @Before", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c28ab89e02d21ac667e336a10d3087517443d15"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNDI1NzgwOnYy", "diffSide": "RIGHT", "path": "optaplanner-persistence/optaplanner-persistence-jpa/src/test/java/org/optaplanner/persistence/jpa/impl/score/AbstractScoreConverterTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNDoxNDoyMFrOGSAmnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNDoxNDoyMFrOGSAmnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUzNzQzNg==", "bodyText": "Should be org.junit.jupiter.api.AfterEach", "url": "https://github.com/kiegroup/optaplanner/pull/752#discussion_r421537436", "createdAt": "2020-05-07T14:14:20Z", "author": {"login": "rsynek"}, "path": "optaplanner-persistence/optaplanner-persistence-jpa/src/test/java/org/optaplanner/persistence/jpa/impl/score/AbstractScoreConverterTest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2015 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.persistence.jpa.impl.score;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.util.Map;\n+\n+import javax.naming.InitialContext;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.MappedSuperclass;\n+import javax.transaction.HeuristicMixedException;\n+import javax.transaction.HeuristicRollbackException;\n+import javax.transaction.NotSupportedException;\n+import javax.transaction.RollbackException;\n+import javax.transaction.SystemException;\n+import javax.transaction.TransactionManager;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.kie.test.util.db.PersistenceUtil;\n+import org.optaplanner.core.api.score.Score;\n+\n+public abstract class AbstractScoreConverterTest {\n+\n+    protected Map<String, Object> context;\n+    protected EntityManagerFactory entityManagerFactory;\n+    protected TransactionManager transactionManager;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        context = PersistenceUtil.setupWithPoolingDataSource(\"org.optaplanner.persistence.jpa.converter.test\");\n+        entityManagerFactory = (EntityManagerFactory) context.get(PersistenceUtil.ENTITY_MANAGER_FACTORY);\n+        transactionManager = (TransactionManager) InitialContext.doLookup(\"java:comp/TransactionManager\");\n+    }\n+\n+    @After", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c28ab89e02d21ac667e336a10d3087517443d15"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNDI4NDgxOnYy", "diffSide": "RIGHT", "path": "optaplanner-persistence/optaplanner-persistence-jpa/src/test/java/org/optaplanner/persistence/jpa/impl/score/buildin/bendable/BendableScoreConverterTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNDoxOTo1NVrOGSA3iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNDoxOTo1NVrOGSA3iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU0MTc2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import org.junit.Test;\n          \n          \n            \n            import org.junit.jupiter.api.Test;", "url": "https://github.com/kiegroup/optaplanner/pull/752#discussion_r421541769", "createdAt": "2020-05-07T14:19:55Z", "author": {"login": "rsynek"}, "path": "optaplanner-persistence/optaplanner-persistence-jpa/src/test/java/org/optaplanner/persistence/jpa/impl/score/buildin/bendable/BendableScoreConverterTest.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.persistence.jpa.impl.score.buildin.bendable;\n+\n+import javax.persistence.Convert;\n+import javax.persistence.Entity;\n+\n+import org.junit.Test;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c28ab89e02d21ac667e336a10d3087517443d15"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNDMwOTU2OnYy", "diffSide": "RIGHT", "path": "optaplanner-persistence/optaplanner-persistence-jpa/src/test/java/org/optaplanner/persistence/jpa/impl/score/AbstractScoreConverterTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNDoyNDo0N1rOGSBG6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNDoyNDo0N1rOGSBG6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU0NTcwNA==", "bodyText": "Redundant type casting since Java 8.", "url": "https://github.com/kiegroup/optaplanner/pull/752#discussion_r421545704", "createdAt": "2020-05-07T14:24:47Z", "author": {"login": "rsynek"}, "path": "optaplanner-persistence/optaplanner-persistence-jpa/src/test/java/org/optaplanner/persistence/jpa/impl/score/AbstractScoreConverterTest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2015 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.persistence.jpa.impl.score;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.util.Map;\n+\n+import javax.naming.InitialContext;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.MappedSuperclass;\n+import javax.transaction.HeuristicMixedException;\n+import javax.transaction.HeuristicRollbackException;\n+import javax.transaction.NotSupportedException;\n+import javax.transaction.RollbackException;\n+import javax.transaction.SystemException;\n+import javax.transaction.TransactionManager;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.kie.test.util.db.PersistenceUtil;\n+import org.optaplanner.core.api.score.Score;\n+\n+public abstract class AbstractScoreConverterTest {\n+\n+    protected Map<String, Object> context;\n+    protected EntityManagerFactory entityManagerFactory;\n+    protected TransactionManager transactionManager;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        context = PersistenceUtil.setupWithPoolingDataSource(\"org.optaplanner.persistence.jpa.converter.test\");\n+        entityManagerFactory = (EntityManagerFactory) context.get(PersistenceUtil.ENTITY_MANAGER_FACTORY);\n+        transactionManager = (TransactionManager) InitialContext.doLookup(\"java:comp/TransactionManager\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c28ab89e02d21ac667e336a10d3087517443d15"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNDM2OTQ2OnYy", "diffSide": "RIGHT", "path": "optaplanner-persistence/optaplanner-persistence-jpa/src/test/java/org/optaplanner/persistence/jpa/impl/score/AbstractScoreConverterTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNDozNTo1NFrOGSBrMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMDozNDoxNVrOGSyzrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU1NDk5Mw==", "bodyText": "The class is identical to AbstractScoreHibernateTypeTest with only a single difference: the AbstractTestJpaEntity. I wonder if the code can be reused - e.g. by just providing different abstract entity classes.", "url": "https://github.com/kiegroup/optaplanner/pull/752#discussion_r421554993", "createdAt": "2020-05-07T14:35:54Z", "author": {"login": "rsynek"}, "path": "optaplanner-persistence/optaplanner-persistence-jpa/src/test/java/org/optaplanner/persistence/jpa/impl/score/AbstractScoreConverterTest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2015 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.persistence.jpa.impl.score;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.util.Map;\n+\n+import javax.naming.InitialContext;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.MappedSuperclass;\n+import javax.transaction.HeuristicMixedException;\n+import javax.transaction.HeuristicRollbackException;\n+import javax.transaction.NotSupportedException;\n+import javax.transaction.RollbackException;\n+import javax.transaction.SystemException;\n+import javax.transaction.TransactionManager;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.kie.test.util.db.PersistenceUtil;\n+import org.optaplanner.core.api.score.Score;\n+\n+public abstract class AbstractScoreConverterTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c28ab89e02d21ac667e336a10d3087517443d15"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM1OTk4Mg==", "bodyText": "Removed the code duplication by abstracting the test entity and methods in AbstractScoreJpaTest (naming and approach is open for discussion). @ge0ffrey thoughts?", "url": "https://github.com/kiegroup/optaplanner/pull/752#discussion_r422359982", "createdAt": "2020-05-08T20:34:15Z", "author": {"login": "cuijulian"}, "path": "optaplanner-persistence/optaplanner-persistence-jpa/src/test/java/org/optaplanner/persistence/jpa/impl/score/AbstractScoreConverterTest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2015 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.persistence.jpa.impl.score;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.util.Map;\n+\n+import javax.naming.InitialContext;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.MappedSuperclass;\n+import javax.transaction.HeuristicMixedException;\n+import javax.transaction.HeuristicRollbackException;\n+import javax.transaction.NotSupportedException;\n+import javax.transaction.RollbackException;\n+import javax.transaction.SystemException;\n+import javax.transaction.TransactionManager;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.kie.test.util.db.PersistenceUtil;\n+import org.optaplanner.core.api.score.Score;\n+\n+public abstract class AbstractScoreConverterTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU1NDk5Mw=="}, "originalCommit": {"oid": "4c28ab89e02d21ac667e336a10d3087517443d15"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MTk5MTAxOnYy", "diffSide": "RIGHT", "path": "optaplanner-persistence/optaplanner-persistence-jpa/src/main/java/org/optaplanner/persistence/jpa/impl/score/buildin/bendable/BendableScoreConverter.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNToxNzo1NFrOGWJNsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMjowNDoyOVrOGXdK8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg3MjgxNw==", "bodyText": "This should not be in the \"impl\" package, but the \"api\" instead.\nSo org.optaplanner.persistence.jpa.api.score.buildin.bendable.\n@triceo I 'd even argue we want to drop the \".persistence\" part in that url.\nSo org.optaplanner.jpa.api.score.buildin.bendable.", "url": "https://github.com/kiegroup/optaplanner/pull/752#discussion_r425872817", "createdAt": "2020-05-15T15:17:54Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-persistence/optaplanner-persistence-jpa/src/main/java/org/optaplanner/persistence/jpa/impl/score/buildin/bendable/BendableScoreConverter.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.persistence.jpa.impl.score.buildin.bendable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c6cec49244baa6ebbbbd4f6c9eda2be1d039c02"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg3NDM3Mw==", "bodyText": "@cuijulian For this PR, just put the scores in org.optaplanner.persistence.jpa.api.score.buildin...\nThe .persistence discussion is out of scope for this PR.", "url": "https://github.com/kiegroup/optaplanner/pull/752#discussion_r425874373", "createdAt": "2020-05-15T15:20:23Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-persistence/optaplanner-persistence-jpa/src/main/java/org/optaplanner/persistence/jpa/impl/score/buildin/bendable/BendableScoreConverter.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.persistence.jpa.impl.score.buildin.bendable;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg3MjgxNw=="}, "originalCommit": {"oid": "4c6cec49244baa6ebbbbd4f6c9eda2be1d039c02"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg5ODkwNA==", "bodyText": "Will this also apply to the *HibernateType classes?\nEDIT: After some thought, I think not. HibernateTypes belong to impl.", "url": "https://github.com/kiegroup/optaplanner/pull/752#discussion_r425898904", "createdAt": "2020-05-15T16:01:17Z", "author": {"login": "cuijulian"}, "path": "optaplanner-persistence/optaplanner-persistence-jpa/src/main/java/org/optaplanner/persistence/jpa/impl/score/buildin/bendable/BendableScoreConverter.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.persistence.jpa.impl.score.buildin.bendable;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg3MjgxNw=="}, "originalCommit": {"oid": "4c6cec49244baa6ebbbbd4f6c9eda2be1d039c02"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQwNzM2NQ==", "bodyText": "If these classes are becoming a part of our API, let's also make sure we maintain backward compatibility by adding revapi config file like we have for optaplanner-core:\nhttps://github.com/kiegroup/optaplanner/blob/master/optaplanner-core/src/build/revapi-config.json", "url": "https://github.com/kiegroup/optaplanner/pull/752#discussion_r426407365", "createdAt": "2020-05-18T07:02:08Z", "author": {"login": "rsynek"}, "path": "optaplanner-persistence/optaplanner-persistence-jpa/src/main/java/org/optaplanner/persistence/jpa/impl/score/buildin/bendable/BendableScoreConverter.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.persistence.jpa.impl.score.buildin.bendable;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg3MjgxNw=="}, "originalCommit": {"oid": "4c6cec49244baa6ebbbbd4f6c9eda2be1d039c02"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI0ODM3MA==", "bodyText": "@rsynek Added in latest commit.", "url": "https://github.com/kiegroup/optaplanner/pull/752#discussion_r427248370", "createdAt": "2020-05-19T12:04:29Z", "author": {"login": "cuijulian"}, "path": "optaplanner-persistence/optaplanner-persistence-jpa/src/main/java/org/optaplanner/persistence/jpa/impl/score/buildin/bendable/BendableScoreConverter.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.persistence.jpa.impl.score.buildin.bendable;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg3MjgxNw=="}, "originalCommit": {"oid": "4c6cec49244baa6ebbbbd4f6c9eda2be1d039c02"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MjAzNjQxOnYy", "diffSide": "RIGHT", "path": "optaplanner-persistence/optaplanner-persistence-jpa/src/test/filtered-resources/META-INF/persistence.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNToyOToxMFrOGWJpaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMDoyNzo0MFrOGWS4FQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg3OTkxMg==", "bodyText": "Less is more. Less code is more maintenable. Why do we need all these extra lines?", "url": "https://github.com/kiegroup/optaplanner/pull/752#discussion_r425879912", "createdAt": "2020-05-15T15:29:10Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-persistence/optaplanner-persistence-jpa/src/test/filtered-resources/META-INF/persistence.xml", "diffHunk": "@@ -34,4 +34,37 @@\n       <property name=\"hibernate.transaction.jta.platform\" value=\"org.hibernate.service.jta.platform.internal.JBossStandAloneJtaPlatform\" />\n     </properties>\n   </persistence-unit>\n+\n+  <persistence-unit name=\"org.optaplanner.persistence.jpa.converter.test\" transaction-type=\"JTA\">\n+    <provider>org.hibernate.jpa.HibernatePersistenceProvider</provider>\n+    <jta-data-source>jdbc/testDS1</jta-data-source>\n+\n+    <class>org.optaplanner.persistence.jpa.impl.score.buildin.bendable.BendableScoreConverterTest$TestJpaEntity</class>\n+    <class>org.optaplanner.persistence.jpa.impl.score.buildin.bendablebigdecimal.BendableBigDecimalScoreConverterTest$TestJpaEntity</class>\n+    <class>org.optaplanner.persistence.jpa.impl.score.buildin.bendablelong.BendableLongScoreConverterTest$TestJpaEntity</class>\n+    <class>org.optaplanner.persistence.jpa.impl.score.buildin.hardmediumsoft.HardMediumSoftScoreConverterTest$TestJpaEntity</class>\n+    <class>org.optaplanner.persistence.jpa.impl.score.buildin.hardmediumsoftbigdecimal.HardMediumSoftBigDecimalScoreConverterTest$TestJpaEntity</class>\n+    <class>org.optaplanner.persistence.jpa.impl.score.buildin.hardmediumsoftlong.HardMediumSoftLongScoreConverterTest$TestJpaEntity</class>\n+    <class>org.optaplanner.persistence.jpa.impl.score.buildin.hardsoft.HardSoftScoreConverterTest$TestJpaEntity</class>\n+    <class>org.optaplanner.persistence.jpa.impl.score.buildin.hardsoftbigdecimal.HardSoftBigDecimalScoreConverterTest$TestJpaEntity</class>\n+    <class>org.optaplanner.persistence.jpa.impl.score.buildin.hardsoftdouble.HardSoftDoubleScoreConverterTest$TestJpaEntity</class>\n+    <class>org.optaplanner.persistence.jpa.impl.score.buildin.hardsoftlong.HardSoftLongScoreConverterTest$TestJpaEntity</class>\n+    <class>org.optaplanner.persistence.jpa.impl.score.buildin.simple.SimpleScoreConverterTest$TestJpaEntity</class>\n+    <class>org.optaplanner.persistence.jpa.impl.score.buildin.simplebigdecimal.SimpleBigDecimalScoreConverterTest$TestJpaEntity</class>\n+    <class>org.optaplanner.persistence.jpa.impl.score.buildin.simpledouble.SimpleDoubleScoreConverterTest$TestJpaEntity</class>\n+    <class>org.optaplanner.persistence.jpa.impl.score.buildin.simplelong.SimpleLongScoreConverterTest$TestJpaEntity</class>\n+    <exclude-unlisted-classes>true</exclude-unlisted-classes>\n+\n+    <properties>\n+      <property name=\"hibernate.max_fetch_depth\" value=\"3\"/>\n+      <property name=\"hibernate.hbm2ddl.auto\" value=\"update\" />\n+      <property name=\"hibernate.show_sql\" value=\"false\" />\n+\n+      <property name=\"hibernate.dialect\" value=\"${maven.hibernate.dialect}\"/>\n+      <property name=\"hibernate.default_schema\" value=\"${maven.jdbc.schema}\"/>\n+\n+      <!-- The following line is what's used in Hibernate 4 instead of a TransactionManagerLookup class -->\n+      <property name=\"hibernate.transaction.jta.platform\" value=\"org.hibernate.service.jta.platform.internal.JBossStandAloneJtaPlatform\" />\n+    </properties>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c6cec49244baa6ebbbbd4f6c9eda2be1d039c02"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAzMTEyNQ==", "bodyText": "Hmm, I did this to separate the AttributeConverter tests from the HibernateType tests in a separate persistence unit, but it does result in a lot of duplication. Turns out this is not necessary! I'll refactor these tests.", "url": "https://github.com/kiegroup/optaplanner/pull/752#discussion_r426031125", "createdAt": "2020-05-15T20:27:40Z", "author": {"login": "cuijulian"}, "path": "optaplanner-persistence/optaplanner-persistence-jpa/src/test/filtered-resources/META-INF/persistence.xml", "diffHunk": "@@ -34,4 +34,37 @@\n       <property name=\"hibernate.transaction.jta.platform\" value=\"org.hibernate.service.jta.platform.internal.JBossStandAloneJtaPlatform\" />\n     </properties>\n   </persistence-unit>\n+\n+  <persistence-unit name=\"org.optaplanner.persistence.jpa.converter.test\" transaction-type=\"JTA\">\n+    <provider>org.hibernate.jpa.HibernatePersistenceProvider</provider>\n+    <jta-data-source>jdbc/testDS1</jta-data-source>\n+\n+    <class>org.optaplanner.persistence.jpa.impl.score.buildin.bendable.BendableScoreConverterTest$TestJpaEntity</class>\n+    <class>org.optaplanner.persistence.jpa.impl.score.buildin.bendablebigdecimal.BendableBigDecimalScoreConverterTest$TestJpaEntity</class>\n+    <class>org.optaplanner.persistence.jpa.impl.score.buildin.bendablelong.BendableLongScoreConverterTest$TestJpaEntity</class>\n+    <class>org.optaplanner.persistence.jpa.impl.score.buildin.hardmediumsoft.HardMediumSoftScoreConverterTest$TestJpaEntity</class>\n+    <class>org.optaplanner.persistence.jpa.impl.score.buildin.hardmediumsoftbigdecimal.HardMediumSoftBigDecimalScoreConverterTest$TestJpaEntity</class>\n+    <class>org.optaplanner.persistence.jpa.impl.score.buildin.hardmediumsoftlong.HardMediumSoftLongScoreConverterTest$TestJpaEntity</class>\n+    <class>org.optaplanner.persistence.jpa.impl.score.buildin.hardsoft.HardSoftScoreConverterTest$TestJpaEntity</class>\n+    <class>org.optaplanner.persistence.jpa.impl.score.buildin.hardsoftbigdecimal.HardSoftBigDecimalScoreConverterTest$TestJpaEntity</class>\n+    <class>org.optaplanner.persistence.jpa.impl.score.buildin.hardsoftdouble.HardSoftDoubleScoreConverterTest$TestJpaEntity</class>\n+    <class>org.optaplanner.persistence.jpa.impl.score.buildin.hardsoftlong.HardSoftLongScoreConverterTest$TestJpaEntity</class>\n+    <class>org.optaplanner.persistence.jpa.impl.score.buildin.simple.SimpleScoreConverterTest$TestJpaEntity</class>\n+    <class>org.optaplanner.persistence.jpa.impl.score.buildin.simplebigdecimal.SimpleBigDecimalScoreConverterTest$TestJpaEntity</class>\n+    <class>org.optaplanner.persistence.jpa.impl.score.buildin.simpledouble.SimpleDoubleScoreConverterTest$TestJpaEntity</class>\n+    <class>org.optaplanner.persistence.jpa.impl.score.buildin.simplelong.SimpleLongScoreConverterTest$TestJpaEntity</class>\n+    <exclude-unlisted-classes>true</exclude-unlisted-classes>\n+\n+    <properties>\n+      <property name=\"hibernate.max_fetch_depth\" value=\"3\"/>\n+      <property name=\"hibernate.hbm2ddl.auto\" value=\"update\" />\n+      <property name=\"hibernate.show_sql\" value=\"false\" />\n+\n+      <property name=\"hibernate.dialect\" value=\"${maven.hibernate.dialect}\"/>\n+      <property name=\"hibernate.default_schema\" value=\"${maven.jdbc.schema}\"/>\n+\n+      <!-- The following line is what's used in Hibernate 4 instead of a TransactionManagerLookup class -->\n+      <property name=\"hibernate.transaction.jta.platform\" value=\"org.hibernate.service.jta.platform.internal.JBossStandAloneJtaPlatform\" />\n+    </properties>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg3OTkxMg=="}, "originalCommit": {"oid": "4c6cec49244baa6ebbbbd4f6c9eda2be1d039c02"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDA2OTI3OnYy", "diffSide": "RIGHT", "path": "optaplanner-persistence/optaplanner-persistence-jpa/src/main/java/org/optaplanner/persistence/jpa/api/score/buildin/hardsoftdouble/HardSoftDoubleScoreConverter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDo1OToxNVrOGcgdzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDo1OToxNVrOGcgdzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU0NTIyOA==", "bodyText": "Let's not add anything for Double scores, as they're getting deprecated (for removal in 8.0). CC @triceo", "url": "https://github.com/kiegroup/optaplanner/pull/752#discussion_r432545228", "createdAt": "2020-05-29T14:59:15Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-persistence/optaplanner-persistence-jpa/src/main/java/org/optaplanner/persistence/jpa/api/score/buildin/hardsoftdouble/HardSoftDoubleScoreConverter.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.persistence.jpa.api.score.buildin.hardsoftdouble;\n+\n+import javax.persistence.AttributeConverter;\n+import javax.persistence.Converter;\n+\n+import org.optaplanner.core.api.score.buildin.hardsoftdouble.HardSoftDoubleScore;\n+\n+@Converter\n+public class HardSoftDoubleScoreConverter implements AttributeConverter<HardSoftDoubleScore, String> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bad70b93d0c989ab136555106143ddc000705fa"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDA3MDI1OnYy", "diffSide": "RIGHT", "path": "optaplanner-persistence/optaplanner-persistence-jpa/src/main/java/org/optaplanner/persistence/jpa/api/score/buildin/simpledouble/SimpleDoubleScoreConverter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDo1OTozMVrOGcgecA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDo1OTozMVrOGcgecA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU0NTM5Mg==", "bodyText": "Let's not add anything for Double scores, as they're getting deprecated (for removal in 8.0).", "url": "https://github.com/kiegroup/optaplanner/pull/752#discussion_r432545392", "createdAt": "2020-05-29T14:59:31Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-persistence/optaplanner-persistence-jpa/src/main/java/org/optaplanner/persistence/jpa/api/score/buildin/simpledouble/SimpleDoubleScoreConverter.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.persistence.jpa.api.score.buildin.simpledouble;\n+\n+import javax.persistence.AttributeConverter;\n+import javax.persistence.Converter;\n+\n+import org.optaplanner.core.api.score.buildin.simpledouble.SimpleDoubleScore;\n+\n+@Converter\n+public class SimpleDoubleScoreConverter implements AttributeConverter<SimpleDoubleScore, String> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bad70b93d0c989ab136555106143ddc000705fa"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDQ0NTE3OnYy", "diffSide": "RIGHT", "path": "optaplanner-persistence/optaplanner-persistence-jpa/src/test/filtered-resources/META-INF/persistence.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNjo0MjozNlrOGckNVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNjo0MjozNlrOGckNVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYwNjU0OA==", "bodyText": "soft suggestion: I'd put the \"api\" ones before the \"impl\" ones as they 're the most important ones now", "url": "https://github.com/kiegroup/optaplanner/pull/752#discussion_r432606548", "createdAt": "2020-05-29T16:42:36Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-persistence/optaplanner-persistence-jpa/src/test/filtered-resources/META-INF/persistence.xml", "diffHunk": "@@ -20,6 +20,21 @@\n     <class>org.optaplanner.persistence.jpa.impl.score.buildin.bendable.BendableScoreHibernateTypeTest$TestJpaEntity</class>\n     <class>org.optaplanner.persistence.jpa.impl.score.buildin.bendablelong.BendableLongScoreHibernateTypeTest$TestJpaEntity</class>\n     <class>org.optaplanner.persistence.jpa.impl.score.buildin.bendablebigdecimal.BendableBigDecimalScoreHibernateTypeTest$TestJpaEntity</class>\n+\n+    <class>org.optaplanner.persistence.jpa.api.score.buildin.bendable.BendableScoreConverterTest$TestJpaEntity</class>\n+    <class>org.optaplanner.persistence.jpa.api.score.buildin.bendablebigdecimal.BendableBigDecimalScoreConverterTest$TestJpaEntity</class>\n+    <class>org.optaplanner.persistence.jpa.api.score.buildin.bendablelong.BendableLongScoreConverterTest$TestJpaEntity</class>\n+    <class>org.optaplanner.persistence.jpa.api.score.buildin.hardmediumsoft.HardMediumSoftScoreConverterTest$TestJpaEntity</class>\n+    <class>org.optaplanner.persistence.jpa.api.score.buildin.hardmediumsoftbigdecimal.HardMediumSoftBigDecimalScoreConverterTest$TestJpaEntity</class>\n+    <class>org.optaplanner.persistence.jpa.api.score.buildin.hardmediumsoftlong.HardMediumSoftLongScoreConverterTest$TestJpaEntity</class>\n+    <class>org.optaplanner.persistence.jpa.api.score.buildin.hardsoft.HardSoftScoreConverterTest$TestJpaEntity</class>\n+    <class>org.optaplanner.persistence.jpa.api.score.buildin.hardsoftbigdecimal.HardSoftBigDecimalScoreConverterTest$TestJpaEntity</class>\n+    <class>org.optaplanner.persistence.jpa.api.score.buildin.hardsoftdouble.HardSoftDoubleScoreConverterTest$TestJpaEntity</class>\n+    <class>org.optaplanner.persistence.jpa.api.score.buildin.hardsoftlong.HardSoftLongScoreConverterTest$TestJpaEntity</class>\n+    <class>org.optaplanner.persistence.jpa.api.score.buildin.simple.SimpleScoreConverterTest$TestJpaEntity</class>\n+    <class>org.optaplanner.persistence.jpa.api.score.buildin.simplebigdecimal.SimpleBigDecimalScoreConverterTest$TestJpaEntity</class>\n+    <class>org.optaplanner.persistence.jpa.api.score.buildin.simpledouble.SimpleDoubleScoreConverterTest$TestJpaEntity</class>\n+    <class>org.optaplanner.persistence.jpa.api.score.buildin.simplelong.SimpleLongScoreConverterTest$TestJpaEntity</class>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bad70b93d0c989ab136555106143ddc000705fa"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDQ0OTUxOnYy", "diffSide": "LEFT", "path": "optaplanner-persistence/optaplanner-persistence-jpa/src/test/java/org/optaplanner/persistence/jpa/AbstractScoreJpaTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNjo0Mzo1NFrOGckP-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNjo1ODo0MFrOGck0sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYwNzIyNg==", "bodyText": "Is this intentionally removed? I relates to a java warnings that S... newScores otherwises gives", "url": "https://github.com/kiegroup/optaplanner/pull/752#discussion_r432607226", "createdAt": "2020-05-29T16:43:54Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-persistence/optaplanner-persistence-jpa/src/test/java/org/optaplanner/persistence/jpa/AbstractScoreJpaTest.java", "diffHunk": "@@ -74,7 +73,6 @@ public void tearDown() throws Exception {\n         return id;\n     }\n \n-    @SafeVarargs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bad70b93d0c989ab136555106143ddc000705fa"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYxNjYyNA==", "bodyText": "Oops, must have slipped during the refactor. I'll add it back.", "url": "https://github.com/kiegroup/optaplanner/pull/752#discussion_r432616624", "createdAt": "2020-05-29T16:58:40Z", "author": {"login": "cuijulian"}, "path": "optaplanner-persistence/optaplanner-persistence-jpa/src/test/java/org/optaplanner/persistence/jpa/AbstractScoreJpaTest.java", "diffHunk": "@@ -74,7 +73,6 @@ public void tearDown() throws Exception {\n         return id;\n     }\n \n-    @SafeVarargs", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYwNzIyNg=="}, "originalCommit": {"oid": "0bad70b93d0c989ab136555106143ddc000705fa"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4500, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}