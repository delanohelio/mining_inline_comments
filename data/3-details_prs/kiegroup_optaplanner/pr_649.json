{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5ODgwNjQ3", "number": 649, "title": "PLANNER-1684 First BiGroup operation", "bodyText": "Also includes:\n\nA lot of refactoring, hopefully leading to a code that is easier to understand.\nA ban on repeated groupBy() operations.", "createdAt": "2020-01-07T08:32:27Z", "url": "https://github.com/kiegroup/optaplanner/pull/649", "merged": true, "mergeCommit": {"oid": "8ae86531a504d4d0860d0e7e7987d470687948ee"}, "closed": true, "closedAt": "2020-01-07T09:42:18Z", "author": {"login": "triceo"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABbxLXKAAH2gAyMzU5ODgwNjQ3OmYxYmMzZTM2MmE2MDFmZTRkODI5ZThmNTQzYTNmOTczMzcwOTY5OWU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb39guXgFqTMzOTEyNTY3OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f1bc3e362a601fe4d829e8f543a3f9733709699e", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/f1bc3e362a601fe4d829e8f543a3f9733709699e", "committedDate": "2019-12-17T07:51:28Z", "message": "Add new API method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4b69fe5090da98e2f943c79893f20723f661d4a", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/d4b69fe5090da98e2f943c79893f20723f661d4a", "committedDate": "2019-12-17T07:51:28Z", "message": "Implement the new API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c72e78d2fb67f8e34c52f30a8fd9bdf9236e137", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/6c72e78d2fb67f8e34c52f30a8fd9bdf9236e137", "committedDate": "2019-12-17T07:51:29Z", "message": "Improve one example"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "541606b9bf611515d95f40c1f889d53146793b01", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/541606b9bf611515d95f40c1f889d53146793b01", "committedDate": "2019-12-17T07:51:29Z", "message": "Implement first biGroup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea4863839b8989f0987c8d4019ec7bceaa9a72dc", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/ea4863839b8989f0987c8d4019ec7bceaa9a72dc", "committedDate": "2019-12-17T07:51:29Z", "message": "WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69ced52421669a802d5d1a89922ff2a852860428", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/69ced52421669a802d5d1a89922ff2a852860428", "committedDate": "2019-12-17T07:51:29Z", "message": "Add equality and sameness test for CS"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0273d0527de8079d57f39efcd4931e156249a7f", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/e0273d0527de8079d57f39efcd4931e156249a7f", "committedDate": "2019-12-17T07:51:29Z", "message": "Revert \"WIP\"\n\nThis reverts commit 26bdd46c"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf73f632f53c4dbe3070fe523daf95e26b98fe89", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/bf73f632f53c4dbe3070fe523daf95e26b98fe89", "committedDate": "2019-12-17T07:51:29Z", "message": "Fix biregrouping"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1ac4a45fcffe3df9f3fc967eff6f81912cb2889", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/c1ac4a45fcffe3df9f3fc967eff6f81912cb2889", "committedDate": "2019-12-17T07:51:30Z", "message": "Refactor how rules are constructed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3dad6a1c747559d6b24b23d7d514f28526a7bb6f", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/3dad6a1c747559d6b24b23d7d514f28526a7bb6f", "committedDate": "2019-12-17T07:51:30Z", "message": "UniRuleStructure only created from within"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b520eb4407fd5def8c1ab56cdc8b419b78a3a21", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/4b520eb4407fd5def8c1ab56cdc8b419b78a3a21", "committedDate": "2019-12-18T13:12:13Z", "message": "Even more rule structure unification"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "718a04f4fc1df5f8580661f4ef1312b9ed5adc37", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/718a04f4fc1df5f8580661f4ef1312b9ed5adc37", "committedDate": "2020-01-04T11:56:08Z", "message": "Add another test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef8f2f74780eb26e181094b0ba9b26ef80a4ce75", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/ef8f2f74780eb26e181094b0ba9b26ef80a4ce75", "committedDate": "2020-01-07T08:27:07Z", "message": "Remove support for regrouping"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac948fcc8a287c3b6ff2892934218511179ec985", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/ac948fcc8a287c3b6ff2892934218511179ec985", "committedDate": "2020-01-07T08:30:31Z", "message": "Remove unimplemented methods"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5MDkzMzY0", "url": "https://github.com/kiegroup/optaplanner/pull/649#pullrequestreview-339093364", "createdAt": "2020-01-07T08:36:28Z", "commit": {"oid": "ac948fcc8a287c3b6ff2892934218511179ec985"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwODozNjoyOFrOFayzGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwODozNjoyOFrOFayzGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzYzOTU3Nw==", "bodyText": "Shall we immediately add the javadoc if we uncomment it?", "url": "https://github.com/kiegroup/optaplanner/pull/649#discussion_r363639577", "createdAt": "2020-01-07T08:36:28Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/bi/BiConstraintStream.java", "diffHunk": "@@ -195,21 +195,27 @@\n     }\n \n     // ************************************************************************\n-    // Group by (TODO implement these)\n+    // Group by\n     // ************************************************************************\n \n-    /*\n-    <GroupKey_> UniConstraintStream<GroupKey_> groupBy(\n-            BiFunction<A, B, GroupKey_> groupKeyMapping);\n+    <GroupKey_> UniConstraintStream<GroupKey_> groupBy(BiFunction<A, B, GroupKey_> groupKeyMapping);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac948fcc8a287c3b6ff2892934218511179ec985"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5MDk1NjYz", "url": "https://github.com/kiegroup/optaplanner/pull/649#pullrequestreview-339095663", "createdAt": "2020-01-07T08:41:32Z", "commit": {"oid": "ac948fcc8a287c3b6ff2892934218511179ec985"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwODo0MTozMlrOFay5lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwODo0MTozMlrOFay5lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzY0MTIzNg==", "bodyText": "In toString() and log messages,\nwe use \"[\" to denote lists, collections, arrays, etc.\nWe use \"(\" to denote fields.\nSo let's change this into: return \"Pair(\" + key + \", \" + value + \")\";", "url": "https://github.com/kiegroup/optaplanner/pull/649#discussion_r363641236", "createdAt": "2020-01-07T08:41:32Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/drools/uni/DroolsValuePair.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.score.stream.drools.uni;\n+\n+import java.util.Objects;\n+\n+public final class DroolsValuePair<K,V> {\n+    public final K key;\n+    public final V value;\n+    private final int hashCode;\n+\n+    public DroolsValuePair(K key, V value) {\n+        this.key = key;\n+        this.value = value;\n+        this.hashCode = Objects.hash(key, value);\n+    }\n+\n+    @Override\n+    public boolean equals(final Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || !Objects.equals(getClass(), o.getClass())) {\n+            return false;\n+        }\n+        final DroolsValuePair<?, ?> pair = (DroolsValuePair<?, ?>) o;\n+        return Objects.equals(key, pair.key) &&\n+                Objects.equals(value, pair.value);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return hashCode;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Pair[\" + key + \", \" + value + \"]\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac948fcc8a287c3b6ff2892934218511179ec985"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5MDk4NzMx", "url": "https://github.com/kiegroup/optaplanner/pull/649#pullrequestreview-339098731", "createdAt": "2020-01-07T08:48:17Z", "commit": {"oid": "ac948fcc8a287c3b6ff2892934218511179ec985"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwODo0ODoxN1rOFazCcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwODo0ODoxN1rOFazCcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzY0MzUwNQ==", "bodyText": "Assorted?\nI don't like \"Assorted\"Test. It's like Drools's notorious \"Misc\"Test (and Misc2Test and Misc3Test). It's like a \"lost+find\" directory - tests that haven't been sorted yet.\nSo far, the \"where can I find it\" logic in the tests has been:\nif the final stream is a Uni stream, in the UniTest, if it's a Bi then in the BiTest, etc.\nBut if you think it makes more sense to put some of these grouping tests into a (Advanced)GroupByConstraintStreamTest, etc to avoid bloating the BiTest etc, I am ok with that.\nVeto on naming a test \"Assorted\" or \"Misc\" Test. It's too broad.", "url": "https://github.com/kiegroup/optaplanner/pull/649#discussion_r363643505", "createdAt": "2020-01-07T08:48:17Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/test/java/org/optaplanner/core/api/score/stream/AssortedConstraintStreamTest.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.api.score.stream;\n+\n+import java.util.function.Function;\n+import java.util.stream.Stream;\n+\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.optaplanner.core.api.score.buildin.simple.SimpleScore;\n+import org.optaplanner.core.impl.score.director.InnerScoreDirector;\n+import org.optaplanner.core.impl.testdata.domain.score.lavish.TestdataLavishEntity;\n+import org.optaplanner.core.impl.testdata.domain.score.lavish.TestdataLavishEntityGroup;\n+import org.optaplanner.core.impl.testdata.domain.score.lavish.TestdataLavishSolution;\n+\n+import static org.optaplanner.core.api.score.stream.Joiners.equal;\n+\n+public class AssortedConstraintStreamTest extends AbstractConstraintStreamTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac948fcc8a287c3b6ff2892934218511179ec985"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5MTAwMTA2", "url": "https://github.com/kiegroup/optaplanner/pull/649#pullrequestreview-339100106", "createdAt": "2020-01-07T08:51:06Z", "commit": {"oid": "ac948fcc8a287c3b6ff2892934218511179ec985"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwODo1MTowNlrOFazGeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwODo1MTowNlrOFazGeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzY0NDUzNg==", "bodyText": "I am not sure if these javadocs can't be made more \"simple & clear\".\nAlso notice the big out-of-sync between the javadoc of groupBy(Function) and groupBy(Function, Collector). Those must be brought in sync as much as possible", "url": "https://github.com/kiegroup/optaplanner/pull/649#discussion_r363644536", "createdAt": "2020-01-07T08:51:06Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/uni/UniConstraintStream.java", "diffHunk": "@@ -197,8 +197,8 @@\n             UniConstraintCollector<A, ResultContainer_, Result_> collector);\n \n     /**\n-     * Convert the {@link UniConstraintStream} to a different {@link UniConstraintStream}, containing of the set of\n-     * tuples resulting from applying the group key mapping function on all tuples of the original stream.\n+     * Convert the {@link UniConstraintStream} to a different {@link UniConstraintStream}, containing the set of tuples\n+     * resulting from applying the group key mapping function on all tuples of the original stream.\n      * Neither tuple of the new stream will {@link Objects#equals(Object, Object)} any other.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac948fcc8a287c3b6ff2892934218511179ec985"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "977c5845ba1a3049dd8af7bf9571fd71f27ead4e", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/977c5845ba1a3049dd8af7bf9571fd71f27ead4e", "committedDate": "2020-01-07T09:00:29Z", "message": "Fix value pair toString"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ab9a98ec56137eae65c46db49fb49f00571e6d7", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/6ab9a98ec56137eae65c46db49fb49f00571e6d7", "committedDate": "2020-01-07T09:00:47Z", "message": "Rename test class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ba59e88c1b2fefb4cf1cb3f81dc36b07efbbe2f", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/0ba59e88c1b2fefb4cf1cb3f81dc36b07efbbe2f", "committedDate": "2020-01-07T09:06:37Z", "message": "Add a regrouping note to the docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73f60a0b1db48e3f8a3d0b9aa5bd856de6aa0c4d", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/73f60a0b1db48e3f8a3d0b9aa5bd856de6aa0c4d", "committedDate": "2020-01-07T09:32:34Z", "message": "Adjust Javadocs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5MTI1Njc5", "url": "https://github.com/kiegroup/optaplanner/pull/649#pullrequestreview-339125679", "createdAt": "2020-01-07T09:40:43Z", "commit": {"oid": "73f60a0b1db48e3f8a3d0b9aa5bd856de6aa0c4d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3024, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}