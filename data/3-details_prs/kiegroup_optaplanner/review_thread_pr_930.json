{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4NDg4Mzg1", "number": 930, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDowODoyNlrOEqwHzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNzoyMDo0N1rOErC38g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMjY0MDc3OnYy", "diffSide": "RIGHT", "path": "optaplanner-examples/src/test/java/org/optaplanner/examples/cloudbalancing/optional/score/CloudBalancingConstraintProviderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDowODoyNlrOHdItkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDowODoyNlrOHdItkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMxMzQ5MQ==", "bodyText": "I added this to maximize test cases for CS-D.", "url": "https://github.com/kiegroup/optaplanner/pull/930#discussion_r500313491", "createdAt": "2020-10-06T14:08:26Z", "author": {"login": "triceo"}, "path": "optaplanner-examples/src/test/java/org/optaplanner/examples/cloudbalancing/optional/score/CloudBalancingConstraintProviderTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.cloudbalancing.optional.score;\n+\n+import org.junit.jupiter.api.Test;\n+import org.optaplanner.examples.cloudbalancing.domain.CloudBalance;\n+import org.optaplanner.examples.cloudbalancing.domain.CloudComputer;\n+import org.optaplanner.examples.cloudbalancing.domain.CloudProcess;\n+import org.optaplanner.test.api.score.stream.ConstraintVerifier;\n+\n+public class CloudBalancingConstraintProviderTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbbfa6949885b453f0a8361993d7ec790392fe2e"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMjk3NDYzOnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/drools/DroolsConstraintSessionFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNTowMzoxNVrOHdL9jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNzoyNzo0MlrOHdmBhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM2NjczNA==", "bodyText": "This looks like a nice unit with clear inputs, outputs, and no side-effects. Given the increasing complexity of the matchJustificationsToOutput, do you think that moving this code to a separate private method would pay off?", "url": "https://github.com/kiegroup/optaplanner/pull/930#discussion_r500366734", "createdAt": "2020-10-06T15:03:15Z", "author": {"login": "rsynek"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/drools/DroolsConstraintSessionFactory.java", "diffHunk": "@@ -103,30 +107,54 @@ public DroolsConstraintSessionFactory(SolutionDescriptor<Solution_> solutionDesc\n         if (expectedTypes.length == 0) {\n             throw new IllegalStateException(\"Impossible: there are no 0-cardinality constraint streams.\");\n         }\n+        // Send all groupKey instances to the beginning of the justification list as we can not rely on Drools putting\n+        // them there for us.\n+        Predicate<Object> isGroupKey = o -> o instanceof GroupKey;\n+        Stream<Object> groupKeyValues = justificationList.stream()\n+                .filter(isGroupKey)\n+                .flatMap(groupKey -> {\n+                    Object ungrouped = ((GroupKey) groupKey).getKey();\n+                    if (ungrouped instanceof FactTuple) {\n+                        FactTuple factTuple = (FactTuple) ungrouped;\n+                        return factTuple.asList().stream();\n+                    }\n+                    return Stream.of(ungrouped);\n+                });\n+        Stream<Object> otherValues = justificationList.stream()\n+                .filter(o -> !isGroupKey.test(o))\n+                .flatMap(o -> {\n+                    if (o instanceof Object[]) { // Double accumulates return results as arrays of two objects.\n+                        return Arrays.stream((Object[]) o);\n+                    } else {\n+                        return Stream.of(o);\n+                    }\n+                });\n+        List<Object> ungroupedJustificationList = Stream.concat(groupKeyValues, otherValues)\n+                .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbbfa6949885b453f0a8361993d7ec790392fe2e"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc5MzczMg==", "bodyText": "Sure, it doesn't hurt. But I do hope that it will be trimmed down significantly in a few sprints' time.", "url": "https://github.com/kiegroup/optaplanner/pull/930#discussion_r500793732", "createdAt": "2020-10-07T07:27:42Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/drools/DroolsConstraintSessionFactory.java", "diffHunk": "@@ -103,30 +107,54 @@ public DroolsConstraintSessionFactory(SolutionDescriptor<Solution_> solutionDesc\n         if (expectedTypes.length == 0) {\n             throw new IllegalStateException(\"Impossible: there are no 0-cardinality constraint streams.\");\n         }\n+        // Send all groupKey instances to the beginning of the justification list as we can not rely on Drools putting\n+        // them there for us.\n+        Predicate<Object> isGroupKey = o -> o instanceof GroupKey;\n+        Stream<Object> groupKeyValues = justificationList.stream()\n+                .filter(isGroupKey)\n+                .flatMap(groupKey -> {\n+                    Object ungrouped = ((GroupKey) groupKey).getKey();\n+                    if (ungrouped instanceof FactTuple) {\n+                        FactTuple factTuple = (FactTuple) ungrouped;\n+                        return factTuple.asList().stream();\n+                    }\n+                    return Stream.of(ungrouped);\n+                });\n+        Stream<Object> otherValues = justificationList.stream()\n+                .filter(o -> !isGroupKey.test(o))\n+                .flatMap(o -> {\n+                    if (o instanceof Object[]) { // Double accumulates return results as arrays of two objects.\n+                        return Arrays.stream((Object[]) o);\n+                    } else {\n+                        return Stream.of(o);\n+                    }\n+                });\n+        List<Object> ungroupedJustificationList = Stream.concat(groupKeyValues, otherValues)\n+                .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM2NjczNA=="}, "originalCommit": {"oid": "cbbfa6949885b453f0a8361993d7ec790392fe2e"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNTcxMzE0OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/drools/common/rules/QuadGroupBy2Map1CollectFastMutator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNzoyMDo0N1rOHdly_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNzoyODowOVrOHdmClA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc5MDAxMw==", "bodyText": "Is the variable name \"newB\" by any chance a copy&paste mistake?", "url": "https://github.com/kiegroup/optaplanner/pull/930#discussion_r500790013", "createdAt": "2020-10-07T07:20:47Z", "author": {"login": "rsynek"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/drools/common/rules/QuadGroupBy2Map1CollectFastMutator.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.score.stream.drools.common.rules;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static org.drools.model.DSL.accFunction;\n+import static org.drools.model.PatternDSL.from;\n+import static org.drools.model.PatternDSL.groupBy;\n+import static org.drools.model.PatternDSL.pattern;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.drools.model.PatternDSL;\n+import org.drools.model.Variable;\n+import org.drools.model.view.ViewItem;\n+import org.optaplanner.core.api.function.QuadFunction;\n+import org.optaplanner.core.api.score.stream.quad.QuadConstraintCollector;\n+import org.optaplanner.core.impl.score.stream.drools.common.BiTuple;\n+import org.optaplanner.core.impl.score.stream.drools.quad.DroolsQuadAccumulateFunction;\n+\n+final class QuadGroupBy2Map1CollectFastMutator<A, B, C, D, NewA, NewB, NewC> extends AbstractQuadGroupByMutator {\n+\n+    private final QuadFunction<A, B, C, D, NewA> groupKeyMappingA;\n+    private final QuadFunction<A, B, C, D, NewB> groupKeyMappingB;\n+    private final QuadConstraintCollector<A, B, C, D, ?, NewC> collectorC;\n+\n+    public QuadGroupBy2Map1CollectFastMutator(QuadFunction<A, B, C, D, NewA> groupKeyMappingA,\n+            QuadFunction<A, B, C, D, NewB> groupKeyMappingB, QuadConstraintCollector<A, B, C, D, ?, NewC> collectorC) {\n+        this.groupKeyMappingA = groupKeyMappingA;\n+        this.groupKeyMappingB = groupKeyMappingB;\n+        this.collectorC = collectorC;\n+    }\n+\n+    @Override\n+    public AbstractRuleAssembler apply(AbstractRuleAssembler ruleAssembler) {\n+        ruleAssembler.applyFilterToLastPrimaryPattern();\n+        Variable<A> inputA = ruleAssembler.getVariable(0);\n+        Variable<B> inputB = ruleAssembler.getVariable(1);\n+        Variable<C> inputC = ruleAssembler.getVariable(2);\n+        Variable<D> inputD = ruleAssembler.getVariable(3);\n+        Variable<BiTuple<NewA, NewB>> groupKey = ruleAssembler.createVariable(BiTuple.class, \"groupKey\");\n+        Variable<NewC> output = ruleAssembler.createVariable(\"output\");\n+        ViewItem groupByPattern = groupBy(getInnerAccumulatePattern(ruleAssembler), inputA, inputB, inputC, inputD,\n+                groupKey, (a, b, c, d) -> new BiTuple<>(groupKeyMappingA.apply(a, b, c, d),\n+                        groupKeyMappingB.apply(a, b, c, d)),\n+                accFunction(() -> new DroolsQuadAccumulateFunction<>(collectorC)).as(output));\n+        List<ViewItem> newFinishedExpressions = new ArrayList<>(ruleAssembler.getFinishedExpressions());\n+        newFinishedExpressions.add(groupByPattern); // The last pattern is added here.\n+        Variable<NewA> newA = ruleAssembler.createVariable(\"newA\", from(groupKey, k -> k.a));\n+        Variable<NewB> newB = ruleAssembler.createVariable(\"newB\", from(groupKey, k -> k.b));\n+        Variable<NewC> newC = ruleAssembler.createVariable(\"newB\", from(output));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e655f91a6325fd4aee768cb7f8ec5949e213e36"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc5NDAwNA==", "bodyText": "Good catch. That said, this is not a bug, since createVariable(...) makes the var names unique anyway.", "url": "https://github.com/kiegroup/optaplanner/pull/930#discussion_r500794004", "createdAt": "2020-10-07T07:28:09Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/drools/common/rules/QuadGroupBy2Map1CollectFastMutator.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.score.stream.drools.common.rules;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static org.drools.model.DSL.accFunction;\n+import static org.drools.model.PatternDSL.from;\n+import static org.drools.model.PatternDSL.groupBy;\n+import static org.drools.model.PatternDSL.pattern;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.drools.model.PatternDSL;\n+import org.drools.model.Variable;\n+import org.drools.model.view.ViewItem;\n+import org.optaplanner.core.api.function.QuadFunction;\n+import org.optaplanner.core.api.score.stream.quad.QuadConstraintCollector;\n+import org.optaplanner.core.impl.score.stream.drools.common.BiTuple;\n+import org.optaplanner.core.impl.score.stream.drools.quad.DroolsQuadAccumulateFunction;\n+\n+final class QuadGroupBy2Map1CollectFastMutator<A, B, C, D, NewA, NewB, NewC> extends AbstractQuadGroupByMutator {\n+\n+    private final QuadFunction<A, B, C, D, NewA> groupKeyMappingA;\n+    private final QuadFunction<A, B, C, D, NewB> groupKeyMappingB;\n+    private final QuadConstraintCollector<A, B, C, D, ?, NewC> collectorC;\n+\n+    public QuadGroupBy2Map1CollectFastMutator(QuadFunction<A, B, C, D, NewA> groupKeyMappingA,\n+            QuadFunction<A, B, C, D, NewB> groupKeyMappingB, QuadConstraintCollector<A, B, C, D, ?, NewC> collectorC) {\n+        this.groupKeyMappingA = groupKeyMappingA;\n+        this.groupKeyMappingB = groupKeyMappingB;\n+        this.collectorC = collectorC;\n+    }\n+\n+    @Override\n+    public AbstractRuleAssembler apply(AbstractRuleAssembler ruleAssembler) {\n+        ruleAssembler.applyFilterToLastPrimaryPattern();\n+        Variable<A> inputA = ruleAssembler.getVariable(0);\n+        Variable<B> inputB = ruleAssembler.getVariable(1);\n+        Variable<C> inputC = ruleAssembler.getVariable(2);\n+        Variable<D> inputD = ruleAssembler.getVariable(3);\n+        Variable<BiTuple<NewA, NewB>> groupKey = ruleAssembler.createVariable(BiTuple.class, \"groupKey\");\n+        Variable<NewC> output = ruleAssembler.createVariable(\"output\");\n+        ViewItem groupByPattern = groupBy(getInnerAccumulatePattern(ruleAssembler), inputA, inputB, inputC, inputD,\n+                groupKey, (a, b, c, d) -> new BiTuple<>(groupKeyMappingA.apply(a, b, c, d),\n+                        groupKeyMappingB.apply(a, b, c, d)),\n+                accFunction(() -> new DroolsQuadAccumulateFunction<>(collectorC)).as(output));\n+        List<ViewItem> newFinishedExpressions = new ArrayList<>(ruleAssembler.getFinishedExpressions());\n+        newFinishedExpressions.add(groupByPattern); // The last pattern is added here.\n+        Variable<NewA> newA = ruleAssembler.createVariable(\"newA\", from(groupKey, k -> k.a));\n+        Variable<NewB> newB = ruleAssembler.createVariable(\"newB\", from(groupKey, k -> k.b));\n+        Variable<NewC> newC = ruleAssembler.createVariable(\"newB\", from(output));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc5MDAxMw=="}, "originalCommit": {"oid": "8e655f91a6325fd4aee768cb7f8ec5949e213e36"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4242, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}