{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3MzQ2NjE4", "number": 718, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNjowNjoxMFrODoyVZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODoxNDoyMlrODs_s4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDk0MzA5OnYy", "diffSide": "LEFT", "path": "optaplanner-persistence/optaplanner-persistence-jaxb/src/test/java/org/optaplanner/persistence/jaxb/api/score/AbstractScoreJaxbXmlAdapterTest.java", "isResolved": false, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNjowNjoxMFrOF3jOEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMzoyNzowMVrOF-VuaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc5MzA0MA==", "bodyText": "Proposal B)\nHow about we use \"\\r?\\n\" instead of \"\\n\"?\nProposal C) Why do we assert the formatting of the text? Is that needed?\nNormally \"\\s*\" includes all whitespace, including \\r and \\n.\nDoes this regex work for those 2 lines?\nregex = \"\\\\{\\\\s*\\\"([\\\\w]+)\\\"\\\\s:\\\\s\\\\{\"\n + ...", "url": "https://github.com/kiegroup/optaplanner/pull/718#discussion_r393793040", "createdAt": "2020-03-17T16:06:10Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-persistence/optaplanner-persistence-jaxb/src/test/java/org/optaplanner/persistence/jaxb/api/score/AbstractScoreJaxbXmlAdapterTest.java", "diffHunk": "@@ -103,22 +106,25 @@\n             throw new IllegalStateException(\"Marshalling or unmarshalling for input (\" + input + \") failed.\", e);\n         }\n         assertEquals(expectedScore, output.getScore());\n+\n+        String newLine = System.lineSeparator();\n         String regex;\n         if (expectedScore != null) {\n-            regex = \"\\\\{\\n\" // Opening bracket", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "406c22ea03fcca7dc20b479525614e9341e57fe7"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc5NDkwNA==", "bodyText": "If C) works, can we go with that? I don't think we need to test for formatting.\n\"\\s*\" (which is escaped written as \"\\s*\"), means 0 or more whitespace characters.", "url": "https://github.com/kiegroup/optaplanner/pull/718#discussion_r393794904", "createdAt": "2020-03-17T16:08:35Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-persistence/optaplanner-persistence-jaxb/src/test/java/org/optaplanner/persistence/jaxb/api/score/AbstractScoreJaxbXmlAdapterTest.java", "diffHunk": "@@ -103,22 +106,25 @@\n             throw new IllegalStateException(\"Marshalling or unmarshalling for input (\" + input + \") failed.\", e);\n         }\n         assertEquals(expectedScore, output.getScore());\n+\n+        String newLine = System.lineSeparator();\n         String regex;\n         if (expectedScore != null) {\n-            regex = \"\\\\{\\n\" // Opening bracket", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc5MzA0MA=="}, "originalCommit": {"oid": "406c22ea03fcca7dc20b479525614e9341e57fe7"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc5NTU1Ng==", "bodyText": "Or Proposal D): The official Java regex for newline since Java 8: \"\\R\" (https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html#lineending)", "url": "https://github.com/kiegroup/optaplanner/pull/718#discussion_r393795556", "createdAt": "2020-03-17T16:09:28Z", "author": {"login": "Christopher-Chianelli"}, "path": "optaplanner-persistence/optaplanner-persistence-jaxb/src/test/java/org/optaplanner/persistence/jaxb/api/score/AbstractScoreJaxbXmlAdapterTest.java", "diffHunk": "@@ -103,22 +106,25 @@\n             throw new IllegalStateException(\"Marshalling or unmarshalling for input (\" + input + \") failed.\", e);\n         }\n         assertEquals(expectedScore, output.getScore());\n+\n+        String newLine = System.lineSeparator();\n         String regex;\n         if (expectedScore != null) {\n-            regex = \"\\\\{\\n\" // Opening bracket", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc5MzA0MA=="}, "originalCommit": {"oid": "406c22ea03fcca7dc20b479525614e9341e57fe7"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgwMzAzNA==", "bodyText": "Wouldn't using jackson ObjectMapper (or similar) make sense here? We don't really care about how the JSON looks like, just that the JSON has certain fields/properties (which we can check via ObjectMapper:\nJsonNode parent= new ObjectMapper().readTree(json);\nString score = parent.get(\"score\").asText();", "url": "https://github.com/kiegroup/optaplanner/pull/718#discussion_r393803034", "createdAt": "2020-03-17T16:20:02Z", "author": {"login": "Christopher-Chianelli"}, "path": "optaplanner-persistence/optaplanner-persistence-jaxb/src/test/java/org/optaplanner/persistence/jaxb/api/score/AbstractScoreJaxbXmlAdapterTest.java", "diffHunk": "@@ -103,22 +106,25 @@\n             throw new IllegalStateException(\"Marshalling or unmarshalling for input (\" + input + \") failed.\", e);\n         }\n         assertEquals(expectedScore, output.getScore());\n+\n+        String newLine = System.lineSeparator();\n         String regex;\n         if (expectedScore != null) {\n-            regex = \"\\\\{\\n\" // Opening bracket", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc5MzA0MA=="}, "originalCommit": {"oid": "406c22ea03fcca7dc20b479525614e9341e57fe7"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkwMjM3OQ==", "bodyText": "+1 to using \\R for Java regex. What would we use for new line characters in the error messages?\n-1 to using ObjectMapper, I don't think we should introduce Jackson dependencies since this code deals with the JAXB JSON standard. We do use ObjectMapper in the optaplanner-persistence-jackson module. If we do decide to use it, it's outside the scope of this PR.", "url": "https://github.com/kiegroup/optaplanner/pull/718#discussion_r393902379", "createdAt": "2020-03-17T18:56:57Z", "author": {"login": "cuijulian"}, "path": "optaplanner-persistence/optaplanner-persistence-jaxb/src/test/java/org/optaplanner/persistence/jaxb/api/score/AbstractScoreJaxbXmlAdapterTest.java", "diffHunk": "@@ -103,22 +106,25 @@\n             throw new IllegalStateException(\"Marshalling or unmarshalling for input (\" + input + \") failed.\", e);\n         }\n         assertEquals(expectedScore, output.getScore());\n+\n+        String newLine = System.lineSeparator();\n         String regex;\n         if (expectedScore != null) {\n-            regex = \"\\\\{\\n\" // Opening bracket", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc5MzA0MA=="}, "originalCommit": {"oid": "406c22ea03fcca7dc20b479525614e9341e57fe7"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkwNTU1Nw==", "bodyText": "String.format(...) is a thing, and use \"%n\" (https://dzone.com/articles/java-string-format-examples) (note it varargs are not type safe, it basically sprintf).\nHow about using JAXBContext to create a new unmarshaller to read the json?", "url": "https://github.com/kiegroup/optaplanner/pull/718#discussion_r393905557", "createdAt": "2020-03-17T19:02:54Z", "author": {"login": "Christopher-Chianelli"}, "path": "optaplanner-persistence/optaplanner-persistence-jaxb/src/test/java/org/optaplanner/persistence/jaxb/api/score/AbstractScoreJaxbXmlAdapterTest.java", "diffHunk": "@@ -103,22 +106,25 @@\n             throw new IllegalStateException(\"Marshalling or unmarshalling for input (\" + input + \") failed.\", e);\n         }\n         assertEquals(expectedScore, output.getScore());\n+\n+        String newLine = System.lineSeparator();\n         String regex;\n         if (expectedScore != null) {\n-            regex = \"\\\\{\\n\" // Opening bracket", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc5MzA0MA=="}, "originalCommit": {"oid": "406c22ea03fcca7dc20b479525614e9341e57fe7"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk4MTUwOA==", "bodyText": "%n looks reasonable. Let's see if we can get consensus on which newline char to use. As for the rest, a bit of scope creep here, the purpose of this PR was to fix the broken Windows tests. We can address how we assert the Json output in a separate PR.", "url": "https://github.com/kiegroup/optaplanner/pull/718#discussion_r393981508", "createdAt": "2020-03-17T21:28:54Z", "author": {"login": "cuijulian"}, "path": "optaplanner-persistence/optaplanner-persistence-jaxb/src/test/java/org/optaplanner/persistence/jaxb/api/score/AbstractScoreJaxbXmlAdapterTest.java", "diffHunk": "@@ -103,22 +106,25 @@\n             throw new IllegalStateException(\"Marshalling or unmarshalling for input (\" + input + \") failed.\", e);\n         }\n         assertEquals(expectedScore, output.getScore());\n+\n+        String newLine = System.lineSeparator();\n         String regex;\n         if (expectedScore != null) {\n-            regex = \"\\\\{\\n\" // Opening bracket", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc5MzA0MA=="}, "originalCommit": {"oid": "406c22ea03fcca7dc20b479525614e9341e57fe7"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczMDI4OQ==", "bodyText": "The JSON format is whitespace (and therefore newline) agnostic. Whether one puts newlines and 4 space indents into a JSON file is a matter of taste (= code style).\nWe need to test if it's formatted as JSON.\nDo we need to test if the JSON \"code style\" is adhered too? I am not sure. If we don't, then we can just put \\\\s*, this will match all and any whitespacing (including linefeed and newline characters). If we do want to test it, then this is fine.\nEither way, +1 to merge.", "url": "https://github.com/kiegroup/optaplanner/pull/718#discussion_r400730289", "createdAt": "2020-03-31T08:25:22Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-persistence/optaplanner-persistence-jaxb/src/test/java/org/optaplanner/persistence/jaxb/api/score/AbstractScoreJaxbXmlAdapterTest.java", "diffHunk": "@@ -103,22 +106,25 @@\n             throw new IllegalStateException(\"Marshalling or unmarshalling for input (\" + input + \") failed.\", e);\n         }\n         assertEquals(expectedScore, output.getScore());\n+\n+        String newLine = System.lineSeparator();\n         String regex;\n         if (expectedScore != null) {\n-            regex = \"\\\\{\\n\" // Opening bracket", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc5MzA0MA=="}, "originalCommit": {"oid": "406c22ea03fcca7dc20b479525614e9341e57fe7"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDkxMTk3Nw==", "bodyText": "Hmm, good points. I don't see why we shouldn't test for JSON code style. If anything it's a more strict test, so I am in favour of keeping it. Are there any examples where testing for \"style\" rather than just \"format\" is not a good choice?", "url": "https://github.com/kiegroup/optaplanner/pull/718#discussion_r400911977", "createdAt": "2020-03-31T13:27:01Z", "author": {"login": "cuijulian"}, "path": "optaplanner-persistence/optaplanner-persistence-jaxb/src/test/java/org/optaplanner/persistence/jaxb/api/score/AbstractScoreJaxbXmlAdapterTest.java", "diffHunk": "@@ -103,22 +106,25 @@\n             throw new IllegalStateException(\"Marshalling or unmarshalling for input (\" + input + \") failed.\", e);\n         }\n         assertEquals(expectedScore, output.getScore());\n+\n+        String newLine = System.lineSeparator();\n         String regex;\n         if (expectedScore != null) {\n-            regex = \"\\\\{\\n\" // Opening bracket", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc5MzA0MA=="}, "originalCommit": {"oid": "406c22ea03fcca7dc20b479525614e9341e57fe7"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDk0ODI4OnYy", "diffSide": "RIGHT", "path": "optaplanner-persistence/optaplanner-persistence-jaxb/src/test/java/org/optaplanner/persistence/jaxb/api/score/AbstractScoreJaxbXmlAdapterTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNjowNzoxMVrOF3jRPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNzoyNTo0OVrOF3mhbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc5Mzg1NQ==", "bodyText": "Using System.lineSeperator() makes me cringe. Can't remember/motivate why though... For some reason, it's taboo.", "url": "https://github.com/kiegroup/optaplanner/pull/718#discussion_r393793855", "createdAt": "2020-03-17T16:07:11Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-persistence/optaplanner-persistence-jaxb/src/test/java/org/optaplanner/persistence/jaxb/api/score/AbstractScoreJaxbXmlAdapterTest.java", "diffHunk": "@@ -103,22 +106,25 @@\n             throw new IllegalStateException(\"Marshalling or unmarshalling for input (\" + input + \") failed.\", e);\n         }\n         assertEquals(expectedScore, output.getScore());\n+\n+        String newLine = System.lineSeparator();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "406c22ea03fcca7dc20b479525614e9341e57fe7"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg0NzE1MQ==", "bodyText": "I haven't found anything wrong about it. Even OpenJDK seems to be switching to it:\nhttps://bugs.openjdk.java.net/browse/JDK-8198645", "url": "https://github.com/kiegroup/optaplanner/pull/718#discussion_r393847151", "createdAt": "2020-03-17T17:25:49Z", "author": {"login": "rsynek"}, "path": "optaplanner-persistence/optaplanner-persistence-jaxb/src/test/java/org/optaplanner/persistence/jaxb/api/score/AbstractScoreJaxbXmlAdapterTest.java", "diffHunk": "@@ -103,22 +106,25 @@\n             throw new IllegalStateException(\"Marshalling or unmarshalling for input (\" + input + \") failed.\", e);\n         }\n         assertEquals(expectedScore, output.getScore());\n+\n+        String newLine = System.lineSeparator();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc5Mzg1NQ=="}, "originalCommit": {"oid": "406c22ea03fcca7dc20b479525614e9341e57fe7"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTA3NjE5OnYy", "diffSide": "RIGHT", "path": "optaplanner-persistence/optaplanner-persistence-jaxb/src/test/java/org/optaplanner/persistence/jaxb/api/score/AbstractScoreJaxbXmlAdapterTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODoxNDoyMlrOF-KN7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODoxNDoyMlrOF-KN7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcyMzQzNw==", "bodyText": "If you use format, don't use concatenate +: format(\"... Expected regular expression (%s) ...\", regex)", "url": "https://github.com/kiegroup/optaplanner/pull/718#discussion_r400723437", "createdAt": "2020-03-31T08:14:22Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-persistence/optaplanner-persistence-jaxb/src/test/java/org/optaplanner/persistence/jaxb/api/score/AbstractScoreJaxbXmlAdapterTest.java", "diffHunk": "@@ -71,7 +71,8 @@\n                     + \"<([\\\\w\\\\-\\\\.]+)/>\"; // Start and end of element\n         }\n         if (!xmlString.matches(regex)) {\n-            fail(\"Regular expression match failed.\\nExpected regular expression: \" + regex + \"\\nActual string: \" + xmlString);\n+            fail(String.format(\"Regular expression match failed.%nExpected regular expression: \" + regex +\n+                                       \"%nActual string: \" + xmlString));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56c9783768642e55bb2caff51137c55770674f7d"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4457, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}