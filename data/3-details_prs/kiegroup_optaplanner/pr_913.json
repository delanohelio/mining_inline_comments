{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc5NzM4ODU5", "number": 913, "title": "Multi-stage planning: docs", "bodyText": "", "createdAt": "2020-09-04T14:28:58Z", "url": "https://github.com/kiegroup/optaplanner/pull/913", "merged": true, "mergeCommit": {"oid": "0140a0e310835d1f35b09e023d221e52cfdd3520"}, "closed": true, "closedAt": "2020-09-09T16:33:16Z", "author": {"login": "ge0ffrey"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdFmEOkAH2gAyNDc5NzM4ODU5OjJlZTk5OGY4ZGIwZWQyNjA5YmFkN2NmMTAxM2UzM2VmNWEwM2FkNmI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdHkdqMgFqTQ4NjE2MTY4MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2ee998f8db0ed2609bad7cf1013e33ef5a03ad6b", "author": {"user": {"login": "ge0ffrey", "name": "Geoffrey De Smet"}}, "url": "https://github.com/kiegroup/optaplanner/commit/2ee998f8db0ed2609bad7cf1013e33ef5a03ad6b", "committedDate": "2020-09-04T14:27:52Z", "message": "Multi-stage planning: docs + website"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzMjc4NTM3", "url": "https://github.com/kiegroup/optaplanner/pull/913#pullrequestreview-483278537", "createdAt": "2020-09-07T06:43:52Z", "commit": {"oid": "2ee998f8db0ed2609bad7cf1013e33ef5a03ad6b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MTYxNjgx", "url": "https://github.com/kiegroup/optaplanner/pull/913#pullrequestreview-486161681", "createdAt": "2020-09-10T17:35:15Z", "commit": {"oid": "2ee998f8db0ed2609bad7cf1013e33ef5a03ad6b"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNzozNToxNlrOHP-p6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNzo0MzozNFrOHP-8-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUxNzIyNQ==", "bodyText": "planning", "url": "https://github.com/kiegroup/optaplanner/pull/913#discussion_r486517225", "createdAt": "2020-09-10T17:35:16Z", "author": {"login": "emmurphy1"}, "path": "optaplanner-docs/src/main/asciidoc/RepeatedPlanning/RepeatedPlanning-chapter.adoc", "diffHunk": "@@ -488,3 +488,24 @@ A `BestSolutionChangedEvent` does not guarantee that every `ProblemFactChange` h\n ----\n \n . Use `Score.isSolutionInitialized()` instead of `Score.isFeasible()` to only ignore uninitialized solutions, but do accept infeasible solutions too.\n+\n+[[multiStagePlanning]]\n+== Multi-stage Planning", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ee998f8db0ed2609bad7cf1013e33ef5a03ad6b"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUxNzQ1Mw==", "bodyText": "Remove comma after depart.", "url": "https://github.com/kiegroup/optaplanner/pull/913#discussion_r486517453", "createdAt": "2020-09-10T17:35:38Z", "author": {"login": "emmurphy1"}, "path": "optaplanner-docs/src/main/asciidoc/RepeatedPlanning/RepeatedPlanning-chapter.adoc", "diffHunk": "@@ -488,3 +488,24 @@ A `BestSolutionChangedEvent` does not guarantee that every `ProblemFactChange` h\n ----\n \n . Use `Score.isSolutionInitialized()` instead of `Score.isFeasible()` to only ignore uninitialized solutions, but do accept infeasible solutions too.\n+\n+[[multiStagePlanning]]\n+== Multi-stage Planning\n+\n+In multi-stage planning, complex planning problems are broken down in multiple stages.\n+A typical example is train scheduling, where one department decides where and when a train will arrive or depart,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ee998f8db0ed2609bad7cf1013e33ef5a03ad6b"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUxODcwNQ==", "bodyText": "replace / with and or or:\ncars and locamotives\ncars or locamotives.", "url": "https://github.com/kiegroup/optaplanner/pull/913#discussion_r486518705", "createdAt": "2020-09-10T17:37:40Z", "author": {"login": "emmurphy1"}, "path": "optaplanner-docs/src/main/asciidoc/RepeatedPlanning/RepeatedPlanning-chapter.adoc", "diffHunk": "@@ -488,3 +488,24 @@ A `BestSolutionChangedEvent` does not guarantee that every `ProblemFactChange` h\n ----\n \n . Use `Score.isSolutionInitialized()` instead of `Score.isFeasible()` to only ignore uninitialized solutions, but do accept infeasible solutions too.\n+\n+[[multiStagePlanning]]\n+== Multi-stage Planning\n+\n+In multi-stage planning, complex planning problems are broken down in multiple stages.\n+A typical example is train scheduling, where one department decides where and when a train will arrive or depart,\n+and another department assigns the operators to the actual train cars/locomotives.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ee998f8db0ed2609bad7cf1013e33ef5a03ad6b"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUyMDY3MQ==", "bodyText": "But problems with the same publication deadline, solved by different organizational groups\nare also initially better off with multi-stage planning, because to Conway's law\nand the high risk associated with unifying such groups.\nIBM SG:\nbecause of prep\nUse \u201cbecause of,\u201d not \u201cdue to,\u201d in adverbial clauses.\nAlthough the use of \u201cdue to\u201d as a synonym of \u201cbecause of\u201d has some acceptance in modern English usage, it\nis imprecise and, therefore, not suited to technical writing. Incorrect: \u201cDue to the power failure, the update\nstopped.\u201d Correct: \u201cBecause of the power failure, the update stopped.\u201d", "url": "https://github.com/kiegroup/optaplanner/pull/913#discussion_r486520671", "createdAt": "2020-09-10T17:41:02Z", "author": {"login": "emmurphy1"}, "path": "optaplanner-docs/src/main/asciidoc/RepeatedPlanning/RepeatedPlanning-chapter.adoc", "diffHunk": "@@ -488,3 +488,24 @@ A `BestSolutionChangedEvent` does not guarantee that every `ProblemFactChange` h\n ----\n \n . Use `Score.isSolutionInitialized()` instead of `Score.isFeasible()` to only ignore uninitialized solutions, but do accept infeasible solutions too.\n+\n+[[multiStagePlanning]]\n+== Multi-stage Planning\n+\n+In multi-stage planning, complex planning problems are broken down in multiple stages.\n+A typical example is train scheduling, where one department decides where and when a train will arrive or depart,\n+and another department assigns the operators to the actual train cars/locomotives.\n+\n+Each stage has its own solver configuration (and therefore its own ``SolverFactory``):\n+\n+image::RepeatedPlanning/multiStagePlanning.png[align=\"center\"]\n+\n+Planning problems with different publication deadlines must use multi-stage planning.\n+But also problems with the same publication deadline, solved by different organizational groups", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ee998f8db0ed2609bad7cf1013e33ef5a03ad6b"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUyMjEwNw==", "bodyText": "it might be\nmay implies permission, might possibility\nNevertheless, it might be beneficial in order to simplify  maintenance and ownership and help to start a project.", "url": "https://github.com/kiegroup/optaplanner/pull/913#discussion_r486522107", "createdAt": "2020-09-10T17:43:34Z", "author": {"login": "emmurphy1"}, "path": "optaplanner-docs/src/main/asciidoc/RepeatedPlanning/RepeatedPlanning-chapter.adoc", "diffHunk": "@@ -488,3 +488,24 @@ A `BestSolutionChangedEvent` does not guarantee that every `ProblemFactChange` h\n ----\n \n . Use `Score.isSolutionInitialized()` instead of `Score.isFeasible()` to only ignore uninitialized solutions, but do accept infeasible solutions too.\n+\n+[[multiStagePlanning]]\n+== Multi-stage Planning\n+\n+In multi-stage planning, complex planning problems are broken down in multiple stages.\n+A typical example is train scheduling, where one department decides where and when a train will arrive or depart,\n+and another department assigns the operators to the actual train cars/locomotives.\n+\n+Each stage has its own solver configuration (and therefore its own ``SolverFactory``):\n+\n+image::RepeatedPlanning/multiStagePlanning.png[align=\"center\"]\n+\n+Planning problems with different publication deadlines must use multi-stage planning.\n+But also problems with the same publication deadline, solved by different organizational groups\n+are - at first - better off with multi-stage planning, due to Conway's law\n+and the high risk associated with unifying such groups.\n+\n+Similarly to <<partitionedSearch,Partitioned Search>>, multi-stage planning leads to suboptimal results.\n+Nevertheless, it may be beneficial in order to simplify the maintenance, ownership, and help to start a project.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ee998f8db0ed2609bad7cf1013e33ef5a03ad6b"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3186, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}