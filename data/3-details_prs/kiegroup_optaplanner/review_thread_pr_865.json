{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5NTY0Mjk0", "number": 865, "reviewThreads": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMDo1Nzo0OFrOET14Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMjo0NToyOVrOEjG4Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MjQxMTQyOnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/Joiners.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMDo1Nzo0OFrOG5zk7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNzoyMTo0N1rOG5-kDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI2NzA1NA==", "bodyText": "Considering that these are not simple Joiners anymore, I would:\n\nExtract their implementations into their own class.\nSo that the tests for each also get their own class.\nAnd in that class, I'd make sure I cover all the boundary conditions in different test methods.", "url": "https://github.com/kiegroup/optaplanner/pull/865#discussion_r463267054", "createdAt": "2020-07-30T20:57:48Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/Joiners.java", "diffHunk": "@@ -151,6 +152,23 @@\n     // join(..., planningVariableContainsCached(Talk::getPeriod, (Period a, Period b) -> a.overlaps(b)))\n     // get the period value range, does a cartesian product on it, so it maps every period to an overlapping periodList\n     // then keep an index from every period to all talks in an overlapping period (possible the same period)\n+    public static <A, B, Property_ extends Comparable<Property_>> BiJoiner<A, B> overlapsOrMeets(\n+            Function<A, Property_> leftStartMapping,\n+            Function<A, Property_> leftEndMapping,\n+            Function<B, Property_> rightStartMapping,\n+            Function<B, Property_> rightEndMapping) {\n+        return AbstractBiJoiner.merge(lessThanOrEqual(leftStartMapping, rightEndMapping),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83a13331d007733cf9e0ee81292d1f25719c8678"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMzMTE0OQ==", "bodyText": "But then how will people know these Joiners exists? People might already be used to all the Joiners being in the class Joiners. If we move it to a new class, we should at least mention it in the Javadocs of Joiners so they know there are other classes that contain Joiners (but not everyone read Javadocs; I suspect some people just use their IDE auto-complete which will hide the existence of these Joiners)", "url": "https://github.com/kiegroup/optaplanner/pull/865#discussion_r463331149", "createdAt": "2020-07-30T23:46:17Z", "author": {"login": "Christopher-Chianelli"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/Joiners.java", "diffHunk": "@@ -151,6 +152,23 @@\n     // join(..., planningVariableContainsCached(Talk::getPeriod, (Period a, Period b) -> a.overlaps(b)))\n     // get the period value range, does a cartesian product on it, so it maps every period to an overlapping periodList\n     // then keep an index from every period to all talks in an overlapping period (possible the same period)\n+    public static <A, B, Property_ extends Comparable<Property_>> BiJoiner<A, B> overlapsOrMeets(\n+            Function<A, Property_> leftStartMapping,\n+            Function<A, Property_> leftEndMapping,\n+            Function<B, Property_> rightStartMapping,\n+            Function<B, Property_> rightEndMapping) {\n+        return AbstractBiJoiner.merge(lessThanOrEqual(leftStartMapping, rightEndMapping),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI2NzA1NA=="}, "originalCommit": {"oid": "83a13331d007733cf9e0ee81292d1f25719c8678"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ0NzA1NQ==", "bodyText": "Don't get me wrong. I think that the factory methods should stay in this class. But the implementations of those Joiners should be outside.", "url": "https://github.com/kiegroup/optaplanner/pull/865#discussion_r463447055", "createdAt": "2020-07-31T07:21:47Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/Joiners.java", "diffHunk": "@@ -151,6 +152,23 @@\n     // join(..., planningVariableContainsCached(Talk::getPeriod, (Period a, Period b) -> a.overlaps(b)))\n     // get the period value range, does a cartesian product on it, so it maps every period to an overlapping periodList\n     // then keep an index from every period to all talks in an overlapping period (possible the same period)\n+    public static <A, B, Property_ extends Comparable<Property_>> BiJoiner<A, B> overlapsOrMeets(\n+            Function<A, Property_> leftStartMapping,\n+            Function<A, Property_> leftEndMapping,\n+            Function<B, Property_> rightStartMapping,\n+            Function<B, Property_> rightEndMapping) {\n+        return AbstractBiJoiner.merge(lessThanOrEqual(leftStartMapping, rightEndMapping),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI2NzA1NA=="}, "originalCommit": {"oid": "83a13331d007733cf9e0ee81292d1f25719c8678"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MjQzMTM1OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/test/java/org/optaplanner/core/api/score/stream/JoinersTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMTowNDowM1rOG5zxTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNzoyNDozOVrOG5-okg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI3MDIyMg==", "bodyText": "I think this a bit over-engineered. You don't need the factory, just use the Interval constructor directly.\nThese are tests - we're not looking for memory efficiency or performance, we're looking for maintainable code that is easy to understand.", "url": "https://github.com/kiegroup/optaplanner/pull/865#discussion_r463270222", "createdAt": "2020-07-30T21:04:03Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/test/java/org/optaplanner/core/api/score/stream/JoinersTest.java", "diffHunk": "@@ -300,9 +308,163 @@ public void greaterThanOrEqualPenta() {\n                 (AbstractPentaJoiner<BigInteger, BigInteger, BigInteger, BigInteger, BigDecimal>) Joiners\n                         .greaterThanOrEqual(leftMapping, rightMapping);\n         assertSoftly(softly -> {\n-            softly.assertThat(joiner.matches(TEN, ZERO, ZERO, ZERO, BigDecimal.TEN)).isTrue();\n-            softly.assertThat(joiner.matches(TEN, ZERO, ZERO, ZERO, BigDecimal.ONE)).isTrue();\n-            softly.assertThat(joiner.matches(ZERO, ZERO, ZERO, ZERO, BigDecimal.ONE)).isFalse();\n+            softly.assertThat(joiner.matches(BigInteger.TEN, BigInteger.ZERO, BigInteger.ZERO, BigInteger.ZERO,\n+                    BigDecimal.TEN)).isTrue();\n+            softly.assertThat(joiner.matches(BigInteger.TEN, BigInteger.ZERO, BigInteger.ZERO, BigInteger.ZERO,\n+                    BigDecimal.ONE)).isTrue();\n+            softly.assertThat(joiner.matches(BigInteger.ZERO, BigInteger.ZERO, BigInteger.ZERO, BigInteger.ZERO,\n+                    BigDecimal.ONE)).isFalse();\n+        });\n+    }\n+\n+    private static final class Interval<A, B> {\n+        final A start;\n+        final A end;\n+        final Function<A, B> map;\n+\n+        public Interval(A start, A end, Function<A, B> map) {\n+            this.start = start;\n+            this.end = end;\n+            this.map = map;\n+        }\n+\n+        public B getStart() {\n+            return map.apply(start);\n+        }\n+\n+        public B getEnd() {\n+            return map.apply(end);\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"(\" + start.toString() + \", \" + end.toString() + \")\";\n+        }\n+\n+        public static <A, B, C> IntervalFactory<A, B, C> createFactory(Function<C, A> constructorMap, Function<A, B> map) {\n+            return new IntervalFactory<A, B, C>(constructorMap, map);\n+        }\n+\n+        private final static class IntervalFactory<A, B, C> {\n+            final Function<C, A> constructorMap;\n+            final Function<A, B> map;\n+\n+            public IntervalFactory(Function<C, A> constructorMap, Function<A, B> map) {\n+                this.constructorMap = constructorMap;\n+                this.map = map;\n+            }\n+\n+            public Interval<A, B> of(C start, C end) {\n+                return new Interval<A, B>(constructorMap.apply(start), constructorMap.apply(end), map);\n+            }\n+        }\n+    }\n+\n+    private final Interval.IntervalFactory<BigInteger, Long, Long> bigIntInterval =\n+            Interval.createFactory(BigInteger::valueOf, BigInteger::longValue);\n+\n+    private final Interval.IntervalFactory<BigDecimal, Long, Long> bigDecimalInterval =\n+            Interval.createFactory(BigDecimal::valueOf, BigDecimal::longValue);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83a13331d007733cf9e0ee81292d1f25719c8678"}, "originalPosition": 323}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI3NTE3OQ==", "bodyText": "To clarify: I prefer BigDecimalInterval and BigIntegerInterval to the factory that effectively does the same thing, only with a level of indirection.\nIf you prefer not having so many specializations of the Interval class, just create a Interval.ofBigDecimal() method etc.", "url": "https://github.com/kiegroup/optaplanner/pull/865#discussion_r463275179", "createdAt": "2020-07-30T21:14:42Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/test/java/org/optaplanner/core/api/score/stream/JoinersTest.java", "diffHunk": "@@ -300,9 +308,163 @@ public void greaterThanOrEqualPenta() {\n                 (AbstractPentaJoiner<BigInteger, BigInteger, BigInteger, BigInteger, BigDecimal>) Joiners\n                         .greaterThanOrEqual(leftMapping, rightMapping);\n         assertSoftly(softly -> {\n-            softly.assertThat(joiner.matches(TEN, ZERO, ZERO, ZERO, BigDecimal.TEN)).isTrue();\n-            softly.assertThat(joiner.matches(TEN, ZERO, ZERO, ZERO, BigDecimal.ONE)).isTrue();\n-            softly.assertThat(joiner.matches(ZERO, ZERO, ZERO, ZERO, BigDecimal.ONE)).isFalse();\n+            softly.assertThat(joiner.matches(BigInteger.TEN, BigInteger.ZERO, BigInteger.ZERO, BigInteger.ZERO,\n+                    BigDecimal.TEN)).isTrue();\n+            softly.assertThat(joiner.matches(BigInteger.TEN, BigInteger.ZERO, BigInteger.ZERO, BigInteger.ZERO,\n+                    BigDecimal.ONE)).isTrue();\n+            softly.assertThat(joiner.matches(BigInteger.ZERO, BigInteger.ZERO, BigInteger.ZERO, BigInteger.ZERO,\n+                    BigDecimal.ONE)).isFalse();\n+        });\n+    }\n+\n+    private static final class Interval<A, B> {\n+        final A start;\n+        final A end;\n+        final Function<A, B> map;\n+\n+        public Interval(A start, A end, Function<A, B> map) {\n+            this.start = start;\n+            this.end = end;\n+            this.map = map;\n+        }\n+\n+        public B getStart() {\n+            return map.apply(start);\n+        }\n+\n+        public B getEnd() {\n+            return map.apply(end);\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"(\" + start.toString() + \", \" + end.toString() + \")\";\n+        }\n+\n+        public static <A, B, C> IntervalFactory<A, B, C> createFactory(Function<C, A> constructorMap, Function<A, B> map) {\n+            return new IntervalFactory<A, B, C>(constructorMap, map);\n+        }\n+\n+        private final static class IntervalFactory<A, B, C> {\n+            final Function<C, A> constructorMap;\n+            final Function<A, B> map;\n+\n+            public IntervalFactory(Function<C, A> constructorMap, Function<A, B> map) {\n+                this.constructorMap = constructorMap;\n+                this.map = map;\n+            }\n+\n+            public Interval<A, B> of(C start, C end) {\n+                return new Interval<A, B>(constructorMap.apply(start), constructorMap.apply(end), map);\n+            }\n+        }\n+    }\n+\n+    private final Interval.IntervalFactory<BigInteger, Long, Long> bigIntInterval =\n+            Interval.createFactory(BigInteger::valueOf, BigInteger::longValue);\n+\n+    private final Interval.IntervalFactory<BigDecimal, Long, Long> bigDecimalInterval =\n+            Interval.createFactory(BigDecimal::valueOf, BigDecimal::longValue);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI3MDIyMg=="}, "originalCommit": {"oid": "83a13331d007733cf9e0ee81292d1f25719c8678"}, "originalPosition": 323}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMzMDM1OA==", "bodyText": "I personally think calling assert with new Interval(...) doesn't look pretty, which was the main reason why I created the factories.", "url": "https://github.com/kiegroup/optaplanner/pull/865#discussion_r463330358", "createdAt": "2020-07-30T23:43:43Z", "author": {"login": "Christopher-Chianelli"}, "path": "optaplanner-core/src/test/java/org/optaplanner/core/api/score/stream/JoinersTest.java", "diffHunk": "@@ -300,9 +308,163 @@ public void greaterThanOrEqualPenta() {\n                 (AbstractPentaJoiner<BigInteger, BigInteger, BigInteger, BigInteger, BigDecimal>) Joiners\n                         .greaterThanOrEqual(leftMapping, rightMapping);\n         assertSoftly(softly -> {\n-            softly.assertThat(joiner.matches(TEN, ZERO, ZERO, ZERO, BigDecimal.TEN)).isTrue();\n-            softly.assertThat(joiner.matches(TEN, ZERO, ZERO, ZERO, BigDecimal.ONE)).isTrue();\n-            softly.assertThat(joiner.matches(ZERO, ZERO, ZERO, ZERO, BigDecimal.ONE)).isFalse();\n+            softly.assertThat(joiner.matches(BigInteger.TEN, BigInteger.ZERO, BigInteger.ZERO, BigInteger.ZERO,\n+                    BigDecimal.TEN)).isTrue();\n+            softly.assertThat(joiner.matches(BigInteger.TEN, BigInteger.ZERO, BigInteger.ZERO, BigInteger.ZERO,\n+                    BigDecimal.ONE)).isTrue();\n+            softly.assertThat(joiner.matches(BigInteger.ZERO, BigInteger.ZERO, BigInteger.ZERO, BigInteger.ZERO,\n+                    BigDecimal.ONE)).isFalse();\n+        });\n+    }\n+\n+    private static final class Interval<A, B> {\n+        final A start;\n+        final A end;\n+        final Function<A, B> map;\n+\n+        public Interval(A start, A end, Function<A, B> map) {\n+            this.start = start;\n+            this.end = end;\n+            this.map = map;\n+        }\n+\n+        public B getStart() {\n+            return map.apply(start);\n+        }\n+\n+        public B getEnd() {\n+            return map.apply(end);\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"(\" + start.toString() + \", \" + end.toString() + \")\";\n+        }\n+\n+        public static <A, B, C> IntervalFactory<A, B, C> createFactory(Function<C, A> constructorMap, Function<A, B> map) {\n+            return new IntervalFactory<A, B, C>(constructorMap, map);\n+        }\n+\n+        private final static class IntervalFactory<A, B, C> {\n+            final Function<C, A> constructorMap;\n+            final Function<A, B> map;\n+\n+            public IntervalFactory(Function<C, A> constructorMap, Function<A, B> map) {\n+                this.constructorMap = constructorMap;\n+                this.map = map;\n+            }\n+\n+            public Interval<A, B> of(C start, C end) {\n+                return new Interval<A, B>(constructorMap.apply(start), constructorMap.apply(end), map);\n+            }\n+        }\n+    }\n+\n+    private final Interval.IntervalFactory<BigInteger, Long, Long> bigIntInterval =\n+            Interval.createFactory(BigInteger::valueOf, BigInteger::longValue);\n+\n+    private final Interval.IntervalFactory<BigDecimal, Long, Long> bigDecimalInterval =\n+            Interval.createFactory(BigDecimal::valueOf, BigDecimal::longValue);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI3MDIyMg=="}, "originalCommit": {"oid": "83a13331d007733cf9e0ee81292d1f25719c8678"}, "originalPosition": 323}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ0ODIxMA==", "bodyText": "Therefore my second comment - if you create factory methods directly on Interval, the code will still be easier to understand. The current IntervalFactory approach creates indirection that is harder to see through.", "url": "https://github.com/kiegroup/optaplanner/pull/865#discussion_r463448210", "createdAt": "2020-07-31T07:24:39Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/test/java/org/optaplanner/core/api/score/stream/JoinersTest.java", "diffHunk": "@@ -300,9 +308,163 @@ public void greaterThanOrEqualPenta() {\n                 (AbstractPentaJoiner<BigInteger, BigInteger, BigInteger, BigInteger, BigDecimal>) Joiners\n                         .greaterThanOrEqual(leftMapping, rightMapping);\n         assertSoftly(softly -> {\n-            softly.assertThat(joiner.matches(TEN, ZERO, ZERO, ZERO, BigDecimal.TEN)).isTrue();\n-            softly.assertThat(joiner.matches(TEN, ZERO, ZERO, ZERO, BigDecimal.ONE)).isTrue();\n-            softly.assertThat(joiner.matches(ZERO, ZERO, ZERO, ZERO, BigDecimal.ONE)).isFalse();\n+            softly.assertThat(joiner.matches(BigInteger.TEN, BigInteger.ZERO, BigInteger.ZERO, BigInteger.ZERO,\n+                    BigDecimal.TEN)).isTrue();\n+            softly.assertThat(joiner.matches(BigInteger.TEN, BigInteger.ZERO, BigInteger.ZERO, BigInteger.ZERO,\n+                    BigDecimal.ONE)).isTrue();\n+            softly.assertThat(joiner.matches(BigInteger.ZERO, BigInteger.ZERO, BigInteger.ZERO, BigInteger.ZERO,\n+                    BigDecimal.ONE)).isFalse();\n+        });\n+    }\n+\n+    private static final class Interval<A, B> {\n+        final A start;\n+        final A end;\n+        final Function<A, B> map;\n+\n+        public Interval(A start, A end, Function<A, B> map) {\n+            this.start = start;\n+            this.end = end;\n+            this.map = map;\n+        }\n+\n+        public B getStart() {\n+            return map.apply(start);\n+        }\n+\n+        public B getEnd() {\n+            return map.apply(end);\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"(\" + start.toString() + \", \" + end.toString() + \")\";\n+        }\n+\n+        public static <A, B, C> IntervalFactory<A, B, C> createFactory(Function<C, A> constructorMap, Function<A, B> map) {\n+            return new IntervalFactory<A, B, C>(constructorMap, map);\n+        }\n+\n+        private final static class IntervalFactory<A, B, C> {\n+            final Function<C, A> constructorMap;\n+            final Function<A, B> map;\n+\n+            public IntervalFactory(Function<C, A> constructorMap, Function<A, B> map) {\n+                this.constructorMap = constructorMap;\n+                this.map = map;\n+            }\n+\n+            public Interval<A, B> of(C start, C end) {\n+                return new Interval<A, B>(constructorMap.apply(start), constructorMap.apply(end), map);\n+            }\n+        }\n+    }\n+\n+    private final Interval.IntervalFactory<BigInteger, Long, Long> bigIntInterval =\n+            Interval.createFactory(BigInteger::valueOf, BigInteger::longValue);\n+\n+    private final Interval.IntervalFactory<BigDecimal, Long, Long> bigDecimalInterval =\n+            Interval.createFactory(BigDecimal::valueOf, BigDecimal::longValue);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI3MDIyMg=="}, "originalCommit": {"oid": "83a13331d007733cf9e0ee81292d1f25719c8678"}, "originalPosition": 323}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MjQ0MTYyOnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/test/java/org/optaplanner/core/api/score/stream/JoinersTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMTowNzoyM1rOG5z3XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMTo0MToyMlrOG501bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI3MTc3Mg==", "bodyText": "Now that the Joiners are actually relatively complex, I think that the comment before these assertions (Case A = B) should instead be turned into .as(...) on the assertion itself. The assertion messages will become so much better for it.", "url": "https://github.com/kiegroup/optaplanner/pull/865#discussion_r463271772", "createdAt": "2020-07-30T21:07:23Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/test/java/org/optaplanner/core/api/score/stream/JoinersTest.java", "diffHunk": "@@ -300,9 +308,163 @@ public void greaterThanOrEqualPenta() {\n                 (AbstractPentaJoiner<BigInteger, BigInteger, BigInteger, BigInteger, BigDecimal>) Joiners\n                         .greaterThanOrEqual(leftMapping, rightMapping);\n         assertSoftly(softly -> {\n-            softly.assertThat(joiner.matches(TEN, ZERO, ZERO, ZERO, BigDecimal.TEN)).isTrue();\n-            softly.assertThat(joiner.matches(TEN, ZERO, ZERO, ZERO, BigDecimal.ONE)).isTrue();\n-            softly.assertThat(joiner.matches(ZERO, ZERO, ZERO, ZERO, BigDecimal.ONE)).isFalse();\n+            softly.assertThat(joiner.matches(BigInteger.TEN, BigInteger.ZERO, BigInteger.ZERO, BigInteger.ZERO,\n+                    BigDecimal.TEN)).isTrue();\n+            softly.assertThat(joiner.matches(BigInteger.TEN, BigInteger.ZERO, BigInteger.ZERO, BigInteger.ZERO,\n+                    BigDecimal.ONE)).isTrue();\n+            softly.assertThat(joiner.matches(BigInteger.ZERO, BigInteger.ZERO, BigInteger.ZERO, BigInteger.ZERO,\n+                    BigDecimal.ONE)).isFalse();\n+        });\n+    }\n+\n+    private static final class Interval<A, B> {\n+        final A start;\n+        final A end;\n+        final Function<A, B> map;\n+\n+        public Interval(A start, A end, Function<A, B> map) {\n+            this.start = start;\n+            this.end = end;\n+            this.map = map;\n+        }\n+\n+        public B getStart() {\n+            return map.apply(start);\n+        }\n+\n+        public B getEnd() {\n+            return map.apply(end);\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"(\" + start.toString() + \", \" + end.toString() + \")\";\n+        }\n+\n+        public static <A, B, C> IntervalFactory<A, B, C> createFactory(Function<C, A> constructorMap, Function<A, B> map) {\n+            return new IntervalFactory<A, B, C>(constructorMap, map);\n+        }\n+\n+        private final static class IntervalFactory<A, B, C> {\n+            final Function<C, A> constructorMap;\n+            final Function<A, B> map;\n+\n+            public IntervalFactory(Function<C, A> constructorMap, Function<A, B> map) {\n+                this.constructorMap = constructorMap;\n+                this.map = map;\n+            }\n+\n+            public Interval<A, B> of(C start, C end) {\n+                return new Interval<A, B>(constructorMap.apply(start), constructorMap.apply(end), map);\n+            }\n+        }\n+    }\n+\n+    private final Interval.IntervalFactory<BigInteger, Long, Long> bigIntInterval =\n+            Interval.createFactory(BigInteger::valueOf, BigInteger::longValue);\n+\n+    private final Interval.IntervalFactory<BigDecimal, Long, Long> bigDecimalInterval =\n+            Interval.createFactory(BigDecimal::valueOf, BigDecimal::longValue);\n+\n+    @Test\n+    public void overlapsBi() {\n+        Function<Interval<BigInteger, Long>, Long> leftStartMapping = Interval::getStart;\n+        Function<Interval<BigInteger, Long>, Long> leftEndMapping = Interval::getEnd;\n+        Function<Interval<BigDecimal, Long>, Long> rightStartMapping = Interval::getStart;\n+        Function<Interval<BigDecimal, Long>, Long> rightEndMapping = Interval::getEnd;\n+\n+        AbstractBiJoiner<Interval<BigInteger, Long>, Interval<BigDecimal, Long>> joiner =\n+                (AbstractBiJoiner<Interval<BigInteger, Long>, Interval<BigDecimal, Long>>) Joiners.overlaps(leftStartMapping,\n+                        leftEndMapping, rightStartMapping, rightEndMapping);\n+\n+        assertSoftly(softly -> {\n+            // Case A = B\n+            softly.assertThat(joiner.matches(bigIntInterval.of(1L, 5L),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83a13331d007733cf9e0ee81292d1f25719c8678"}, "originalPosition": 338}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI4NzY2MA==", "bodyText": "(Which wouldn't be necessary if each of the cases had their own properly named test methods, as I suggest above. Either is fine with me.)", "url": "https://github.com/kiegroup/optaplanner/pull/865#discussion_r463287660", "createdAt": "2020-07-30T21:41:22Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/test/java/org/optaplanner/core/api/score/stream/JoinersTest.java", "diffHunk": "@@ -300,9 +308,163 @@ public void greaterThanOrEqualPenta() {\n                 (AbstractPentaJoiner<BigInteger, BigInteger, BigInteger, BigInteger, BigDecimal>) Joiners\n                         .greaterThanOrEqual(leftMapping, rightMapping);\n         assertSoftly(softly -> {\n-            softly.assertThat(joiner.matches(TEN, ZERO, ZERO, ZERO, BigDecimal.TEN)).isTrue();\n-            softly.assertThat(joiner.matches(TEN, ZERO, ZERO, ZERO, BigDecimal.ONE)).isTrue();\n-            softly.assertThat(joiner.matches(ZERO, ZERO, ZERO, ZERO, BigDecimal.ONE)).isFalse();\n+            softly.assertThat(joiner.matches(BigInteger.TEN, BigInteger.ZERO, BigInteger.ZERO, BigInteger.ZERO,\n+                    BigDecimal.TEN)).isTrue();\n+            softly.assertThat(joiner.matches(BigInteger.TEN, BigInteger.ZERO, BigInteger.ZERO, BigInteger.ZERO,\n+                    BigDecimal.ONE)).isTrue();\n+            softly.assertThat(joiner.matches(BigInteger.ZERO, BigInteger.ZERO, BigInteger.ZERO, BigInteger.ZERO,\n+                    BigDecimal.ONE)).isFalse();\n+        });\n+    }\n+\n+    private static final class Interval<A, B> {\n+        final A start;\n+        final A end;\n+        final Function<A, B> map;\n+\n+        public Interval(A start, A end, Function<A, B> map) {\n+            this.start = start;\n+            this.end = end;\n+            this.map = map;\n+        }\n+\n+        public B getStart() {\n+            return map.apply(start);\n+        }\n+\n+        public B getEnd() {\n+            return map.apply(end);\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"(\" + start.toString() + \", \" + end.toString() + \")\";\n+        }\n+\n+        public static <A, B, C> IntervalFactory<A, B, C> createFactory(Function<C, A> constructorMap, Function<A, B> map) {\n+            return new IntervalFactory<A, B, C>(constructorMap, map);\n+        }\n+\n+        private final static class IntervalFactory<A, B, C> {\n+            final Function<C, A> constructorMap;\n+            final Function<A, B> map;\n+\n+            public IntervalFactory(Function<C, A> constructorMap, Function<A, B> map) {\n+                this.constructorMap = constructorMap;\n+                this.map = map;\n+            }\n+\n+            public Interval<A, B> of(C start, C end) {\n+                return new Interval<A, B>(constructorMap.apply(start), constructorMap.apply(end), map);\n+            }\n+        }\n+    }\n+\n+    private final Interval.IntervalFactory<BigInteger, Long, Long> bigIntInterval =\n+            Interval.createFactory(BigInteger::valueOf, BigInteger::longValue);\n+\n+    private final Interval.IntervalFactory<BigDecimal, Long, Long> bigDecimalInterval =\n+            Interval.createFactory(BigDecimal::valueOf, BigDecimal::longValue);\n+\n+    @Test\n+    public void overlapsBi() {\n+        Function<Interval<BigInteger, Long>, Long> leftStartMapping = Interval::getStart;\n+        Function<Interval<BigInteger, Long>, Long> leftEndMapping = Interval::getEnd;\n+        Function<Interval<BigDecimal, Long>, Long> rightStartMapping = Interval::getStart;\n+        Function<Interval<BigDecimal, Long>, Long> rightEndMapping = Interval::getEnd;\n+\n+        AbstractBiJoiner<Interval<BigInteger, Long>, Interval<BigDecimal, Long>> joiner =\n+                (AbstractBiJoiner<Interval<BigInteger, Long>, Interval<BigDecimal, Long>>) Joiners.overlaps(leftStartMapping,\n+                        leftEndMapping, rightStartMapping, rightEndMapping);\n+\n+        assertSoftly(softly -> {\n+            // Case A = B\n+            softly.assertThat(joiner.matches(bigIntInterval.of(1L, 5L),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI3MTc3Mg=="}, "originalCommit": {"oid": "83a13331d007733cf9e0ee81292d1f25719c8678"}, "originalPosition": 338}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MjQ1MTM4OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/Joiners.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMToxMDo0NlrOG5z9Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMToxMDo0NlrOG5z9Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI3MzMwMg==", "bodyText": "Let's make sure we have proper Javadocs for these factory methods. This is public API after all.", "url": "https://github.com/kiegroup/optaplanner/pull/865#discussion_r463273302", "createdAt": "2020-07-30T21:10:46Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/Joiners.java", "diffHunk": "@@ -151,6 +152,23 @@\n     // join(..., planningVariableContainsCached(Talk::getPeriod, (Period a, Period b) -> a.overlaps(b)))\n     // get the period value range, does a cartesian product on it, so it maps every period to an overlapping periodList\n     // then keep an index from every period to all talks in an overlapping period (possible the same period)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83a13331d007733cf9e0ee81292d1f25719c8678"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MjQ1NDkwOnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/Joiners.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMToxMTo1M1rOG5z_iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMDo1MTowMlrOG6V-bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI3Mzg2Nw==", "bodyText": "Did you consider any other way of specifying the intervals?\n(I'm not saying this one is bad. Just making sure we went over all the options before we picked a public API to be with us forever.)", "url": "https://github.com/kiegroup/optaplanner/pull/865#discussion_r463273867", "createdAt": "2020-07-30T21:11:53Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/Joiners.java", "diffHunk": "@@ -151,6 +152,23 @@\n     // join(..., planningVariableContainsCached(Talk::getPeriod, (Period a, Period b) -> a.overlaps(b)))\n     // get the period value range, does a cartesian product on it, so it maps every period to an overlapping periodList\n     // then keep an index from every period to all talks in an overlapping period (possible the same period)\n+    public static <A, B, Property_ extends Comparable<Property_>> BiJoiner<A, B> overlapsOrMeets(\n+            Function<A, Property_> leftStartMapping,\n+            Function<A, Property_> leftEndMapping,\n+            Function<B, Property_> rightStartMapping,\n+            Function<B, Property_> rightEndMapping) {\n+        return AbstractBiJoiner.merge(lessThanOrEqual(leftStartMapping, rightEndMapping),\n+                greaterThanOrEqual(leftEndMapping, rightStartMapping));\n+    }\n+\n+    public static <A, B, Property_ extends Comparable<Property_>> BiJoiner<A, B> overlaps(\n+            Function<A, Property_> leftStartMapping,\n+            Function<A, Property_> leftEndMapping,\n+            Function<B, Property_> rightStartMapping,\n+            Function<B, Property_> rightEndMapping) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83a13331d007733cf9e0ee81292d1f25719c8678"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMyOTU5OA==", "bodyText": "An other way would be startA, startB, endA, endB\nWhen generalizing this to higher cardinality, it looks like this:\noverlaps((a,b) -> a.start, c -> c.start, (a,b) -> a.end, c -> c.end)\n\nMeanwhile, with the current definition, it be generalized like this:\noverlaps((a,b) -> a.start, (a,b) -> a.end, c -> c.start, c -> c.end)\n\nI see these as the two main contenders if we use a Function -> Comparable API for the following reasons:\n\nThe other joiners have the \"main\" stream as the first argument (this eliminates (start2,  ...) (end2, ...))\nThe main convention I see in other code is either (start1,end1,start2,end2)  (first interval followed by second interval) or  (start1,start2,end1,end2) (start points followed by end points)\n\nThe alternative way of defining it is to have a \"Duration\" (ex: 2 hour shift that start at 3am), but that requires an additional method to \"add\" a point and the point must still be comparable, so I don't see any advantage to that approach.", "url": "https://github.com/kiegroup/optaplanner/pull/865#discussion_r463329598", "createdAt": "2020-07-30T23:40:55Z", "author": {"login": "Christopher-Chianelli"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/Joiners.java", "diffHunk": "@@ -151,6 +152,23 @@\n     // join(..., planningVariableContainsCached(Talk::getPeriod, (Period a, Period b) -> a.overlaps(b)))\n     // get the period value range, does a cartesian product on it, so it maps every period to an overlapping periodList\n     // then keep an index from every period to all talks in an overlapping period (possible the same period)\n+    public static <A, B, Property_ extends Comparable<Property_>> BiJoiner<A, B> overlapsOrMeets(\n+            Function<A, Property_> leftStartMapping,\n+            Function<A, Property_> leftEndMapping,\n+            Function<B, Property_> rightStartMapping,\n+            Function<B, Property_> rightEndMapping) {\n+        return AbstractBiJoiner.merge(lessThanOrEqual(leftStartMapping, rightEndMapping),\n+                greaterThanOrEqual(leftEndMapping, rightStartMapping));\n+    }\n+\n+    public static <A, B, Property_ extends Comparable<Property_>> BiJoiner<A, B> overlaps(\n+            Function<A, Property_> leftStartMapping,\n+            Function<A, Property_> leftEndMapping,\n+            Function<B, Property_> rightStartMapping,\n+            Function<B, Property_> rightEndMapping) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI3Mzg2Nw=="}, "originalCommit": {"oid": "83a13331d007733cf9e0ee81292d1f25719c8678"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ1MzY3NQ==", "bodyText": "The idea of (startA, durationA, startB, durationB) is intriguing. Not as the only option, but as an alternative API alongside the (start1, end1, start2, end2). The former can just delegate to the latter. Why?\nIn order to support a wider range of data models:\n\nPeople who have a data model with start date and job length, they use the former, without having to have complex lambdas like a -> // add duration to the start date.\nPeople who have a data model with a start/end dates, they use the latter.\n\nA win-win, I'd say.", "url": "https://github.com/kiegroup/optaplanner/pull/865#discussion_r463453675", "createdAt": "2020-07-31T07:38:12Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/Joiners.java", "diffHunk": "@@ -151,6 +152,23 @@\n     // join(..., planningVariableContainsCached(Talk::getPeriod, (Period a, Period b) -> a.overlaps(b)))\n     // get the period value range, does a cartesian product on it, so it maps every period to an overlapping periodList\n     // then keep an index from every period to all talks in an overlapping period (possible the same period)\n+    public static <A, B, Property_ extends Comparable<Property_>> BiJoiner<A, B> overlapsOrMeets(\n+            Function<A, Property_> leftStartMapping,\n+            Function<A, Property_> leftEndMapping,\n+            Function<B, Property_> rightStartMapping,\n+            Function<B, Property_> rightEndMapping) {\n+        return AbstractBiJoiner.merge(lessThanOrEqual(leftStartMapping, rightEndMapping),\n+                greaterThanOrEqual(leftEndMapping, rightStartMapping));\n+    }\n+\n+    public static <A, B, Property_ extends Comparable<Property_>> BiJoiner<A, B> overlaps(\n+            Function<A, Property_> leftStartMapping,\n+            Function<A, Property_> leftEndMapping,\n+            Function<B, Property_> rightStartMapping,\n+            Function<B, Property_> rightEndMapping) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI3Mzg2Nw=="}, "originalCommit": {"oid": "83a13331d007733cf9e0ee81292d1f25719c8678"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYxOTU4MQ==", "bodyText": "That requires the duration to be of type Duration. Some people might use int, doubles etc. for durations. So we need an 'add' method for this to be generic, or we need to create a Temporal, Duration special case.", "url": "https://github.com/kiegroup/optaplanner/pull/865#discussion_r463619581", "createdAt": "2020-07-31T13:44:56Z", "author": {"login": "Christopher-Chianelli"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/Joiners.java", "diffHunk": "@@ -151,6 +152,23 @@\n     // join(..., planningVariableContainsCached(Talk::getPeriod, (Period a, Period b) -> a.overlaps(b)))\n     // get the period value range, does a cartesian product on it, so it maps every period to an overlapping periodList\n     // then keep an index from every period to all talks in an overlapping period (possible the same period)\n+    public static <A, B, Property_ extends Comparable<Property_>> BiJoiner<A, B> overlapsOrMeets(\n+            Function<A, Property_> leftStartMapping,\n+            Function<A, Property_> leftEndMapping,\n+            Function<B, Property_> rightStartMapping,\n+            Function<B, Property_> rightEndMapping) {\n+        return AbstractBiJoiner.merge(lessThanOrEqual(leftStartMapping, rightEndMapping),\n+                greaterThanOrEqual(leftEndMapping, rightStartMapping));\n+    }\n+\n+    public static <A, B, Property_ extends Comparable<Property_>> BiJoiner<A, B> overlaps(\n+            Function<A, Property_> leftStartMapping,\n+            Function<A, Property_> leftEndMapping,\n+            Function<B, Property_> rightStartMapping,\n+            Function<B, Property_> rightEndMapping) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI3Mzg2Nw=="}, "originalCommit": {"oid": "83a13331d007733cf9e0ee81292d1f25719c8678"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgzMDYzNg==", "bodyText": "I think it's a safe bet that, if they have startDate  as OffsetDateTime, they'd have a job length as Duration. Otherwise, if it's just an int for example, they're making life harder for themselves - and the API will work for that anyway (Duration.of(...) or OffsetDateTime.plus(...)). So yes, I do think we should have a specialization for Duration. (I think we already do that in ConstraintCollectors.)", "url": "https://github.com/kiegroup/optaplanner/pull/865#discussion_r463830636", "createdAt": "2020-07-31T20:51:02Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/Joiners.java", "diffHunk": "@@ -151,6 +152,23 @@\n     // join(..., planningVariableContainsCached(Talk::getPeriod, (Period a, Period b) -> a.overlaps(b)))\n     // get the period value range, does a cartesian product on it, so it maps every period to an overlapping periodList\n     // then keep an index from every period to all talks in an overlapping period (possible the same period)\n+    public static <A, B, Property_ extends Comparable<Property_>> BiJoiner<A, B> overlapsOrMeets(\n+            Function<A, Property_> leftStartMapping,\n+            Function<A, Property_> leftEndMapping,\n+            Function<B, Property_> rightStartMapping,\n+            Function<B, Property_> rightEndMapping) {\n+        return AbstractBiJoiner.merge(lessThanOrEqual(leftStartMapping, rightEndMapping),\n+                greaterThanOrEqual(leftEndMapping, rightStartMapping));\n+    }\n+\n+    public static <A, B, Property_ extends Comparable<Property_>> BiJoiner<A, B> overlaps(\n+            Function<A, Property_> leftStartMapping,\n+            Function<A, Property_> leftEndMapping,\n+            Function<B, Property_> rightStartMapping,\n+            Function<B, Property_> rightEndMapping) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI3Mzg2Nw=="}, "originalCommit": {"oid": "83a13331d007733cf9e0ee81292d1f25719c8678"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzkwMDIzOnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/Joiners.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMDo1NTozN1rOHQFa-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMDo1NTozN1rOHQFa-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYyODA5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param leftStartMapping Maps the first argument to the first interval start point\n          \n          \n            \n                 * @param leftStartMapping maps the first argument to the first interval start point\n          \n      \n    \n    \n  \n\nI believe we don't treat these as sentences, therefore the first letter is not capitalized.", "url": "https://github.com/kiegroup/optaplanner/pull/865#discussion_r486628091", "createdAt": "2020-09-10T20:55:37Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/Joiners.java", "diffHunk": "@@ -147,10 +148,103 @@\n      * }\n      */\n \n-    // TODO\n-    // join(..., planningVariableContainsCached(Talk::getPeriod, (Period a, Period b) -> a.overlaps(b)))\n-    // get the period value range, does a cartesian product on it, so it maps every period to an overlapping periodList\n-    // then keep an index from every period to all talks in an overlapping period (possible the same period)\n+    /**\n+     * For pairs of intervals [a,b) and [c,d), returns only those\n+     * pairs where [a,b) and [c,d) overlap (or, in other\n+     * words, there exists an x such that x in [a,b) and\n+     * x in [c,d)). These are exactly the pairs where\n+     * a < d and b > c (or in other words, when the first\n+     * interval starts before the second one ends and the\n+     * first interval ends after the second interval begins).\n+     * \n+     * @param <A> The type of the first argument\n+     * @param <B> The type of the second argument\n+     * @param <Property_> The type used to define the interval, comparable\n+     * \n+     * @param leftStartMapping Maps the first argument to the first interval start point", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15b387f0a41ed13ee11809b59b3e5ecdc4c441c4"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzkwNzQ4OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/common/IntervalJoiners.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMDo1Nzo0OFrOHQFfjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMDo1Nzo0OFrOHQFfjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYyOTI2Mw==", "bodyText": "Considering that this is not a public API, I think we don't need such a comprehensive Javadoc.\nFeel free to keep it, but considering that everything important should be said on the public API already, this may be too much to maintain going forward, for little benefit.", "url": "https://github.com/kiegroup/optaplanner/pull/865#discussion_r486629263", "createdAt": "2020-09-10T20:57:48Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/common/IntervalJoiners.java", "diffHunk": "@@ -0,0 +1,314 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.score.stream.common;\n+\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+\n+import org.optaplanner.core.api.function.QuadFunction;\n+import org.optaplanner.core.api.function.TriFunction;\n+import org.optaplanner.core.api.score.stream.Joiners;\n+import org.optaplanner.core.api.score.stream.bi.BiJoiner;\n+import org.optaplanner.core.api.score.stream.penta.PentaJoiner;\n+import org.optaplanner.core.api.score.stream.quad.QuadJoiner;\n+import org.optaplanner.core.api.score.stream.tri.TriJoiner;\n+import org.optaplanner.core.impl.score.stream.bi.AbstractBiJoiner;\n+import org.optaplanner.core.impl.score.stream.penta.AbstractPentaJoiner;\n+import org.optaplanner.core.impl.score.stream.quad.AbstractQuadJoiner;\n+import org.optaplanner.core.impl.score.stream.tri.AbstractTriJoiner;\n+\n+/**\n+ * Creates an {@link BiJoiner}, {@link TriJoiner}, ... instance\n+ * for data types that can be described as intervals (for instance,\n+ * time slots and numeric ranges). Based on Allen's Interval Algebra.\n+ * See https://en.wikipedia.org/wiki/Allen%27s_interval_algebra\n+ */\n+public class IntervalJoiners {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15b387f0a41ed13ee11809b59b3e5ecdc4c441c4"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzkxNTI5OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/common/IntervalJoiners.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMTowMDoxOFrOHQFkbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNDowMTo1NVrOHQgI3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzMDUxMA==", "bodyText": "In fact, now that I see how little code there actually is in this class, makes me think that maybe IntervalJoiners class is unnecessary and the methods could just be inlined into Joiners?\nWhen I was making this suggestion, I was somehow expecting that there would be more code here.", "url": "https://github.com/kiegroup/optaplanner/pull/865#discussion_r486630510", "createdAt": "2020-09-10T21:00:18Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/common/IntervalJoiners.java", "diffHunk": "@@ -0,0 +1,314 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.score.stream.common;\n+\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+\n+import org.optaplanner.core.api.function.QuadFunction;\n+import org.optaplanner.core.api.function.TriFunction;\n+import org.optaplanner.core.api.score.stream.Joiners;\n+import org.optaplanner.core.api.score.stream.bi.BiJoiner;\n+import org.optaplanner.core.api.score.stream.penta.PentaJoiner;\n+import org.optaplanner.core.api.score.stream.quad.QuadJoiner;\n+import org.optaplanner.core.api.score.stream.tri.TriJoiner;\n+import org.optaplanner.core.impl.score.stream.bi.AbstractBiJoiner;\n+import org.optaplanner.core.impl.score.stream.penta.AbstractPentaJoiner;\n+import org.optaplanner.core.impl.score.stream.quad.AbstractQuadJoiner;\n+import org.optaplanner.core.impl.score.stream.tri.AbstractTriJoiner;\n+\n+/**\n+ * Creates an {@link BiJoiner}, {@link TriJoiner}, ... instance\n+ * for data types that can be described as intervals (for instance,\n+ * time slots and numeric ranges). Based on Allen's Interval Algebra.\n+ * See https://en.wikipedia.org/wiki/Allen%27s_interval_algebra\n+ */\n+public class IntervalJoiners {\n+\n+    // BiJoiners\n+\n+    /**\n+     * For pairs of intervals [a,b) and [c,d), returns only those\n+     * pairs where [a,b) and [c,d) overlap (or, in other\n+     * words, there exists an x such that x in [a,b) and\n+     * x in [c,d)). These are exactly the pairs where\n+     * a < d and b > c (or in other words, when the first\n+     * interval starts before the second one ends and the\n+     * first interval ends after the second interval begins).\n+     * \n+     * @param <A> The type of the first argument\n+     * @param <B> The type of the second argument\n+     * @param <Property_> The type used to define the interval, comparable\n+     * \n+     * @param leftStartMapping Maps the first argument to the first interval start point\n+     * @param leftEndMapping Maps the first argument to the first interval end point\n+     * @param rightStartMapping Maps the second argument to the second interval start point\n+     * @param rightEndMapping Maps the second argument to the second interval end point\n+     * \n+     * @return An indexed joiner that filters the constraint stream to only include\n+     *         elements (A,B) where A's and B's intervals (as defined by the function mapping)\n+     *         overlap.\n+     */\n+    public static <A, B, Property_ extends Comparable<Property_>> BiJoiner<A, B> overlaps(\n+            Function<A, Property_> leftStartMapping,\n+            Function<A, Property_> leftEndMapping,\n+            Function<B, Property_> rightStartMapping,\n+            Function<B, Property_> rightEndMapping) {\n+        return AbstractBiJoiner.merge(Joiners.lessThan(leftStartMapping, rightEndMapping),\n+                Joiners.greaterThan(leftEndMapping, rightStartMapping));\n+    }\n+\n+    /**\n+     * Syntactic sugar for {@link #overlaps(Function, Function, Function, Function)} where\n+     * both elements of the tuple (A,B) are the same type and have the same interval\n+     * defining function. Identical to\n+     * {@code overlaps(startMapping, endMapping, startMapping, endMapping)}.\n+     * \n+     * @param <A> The type of both the first and second argument\n+     * @param <Property_> The type used to define the interval, comparable\n+     * \n+     * @param startMapping Maps the argument to the start point of its interval\n+     * @param endMapping Maps the argument to the end point of its interval\n+     * \n+     * @return See {@link #overlaps(Function, Function, Function, Function)}\n+     */\n+    public static <A, Property_ extends Comparable<Property_>> BiJoiner<A, A> overlaps(\n+            Function<A, Property_> startMapping,\n+            Function<A, Property_> endMapping) {\n+        return overlaps(startMapping, endMapping, startMapping, endMapping);\n+    }\n+\n+    /**\n+     * For pairs of intervals [a,b) and [c,d), returns only those\n+     * pairs where [a,b) contains [c,d) (or, in other\n+     * words, for any x in [c, d), x is also in [a,b)). These are exactly the pairs\n+     * where a <= c and b >= d (or in other words, when the first\n+     * interval starts before the second one starts and the\n+     * first interval ends after the second interval ends).\n+     * \n+     * @param <A> The type of the first argument\n+     * @param <B> The type of the second argument\n+     * @param <Property_> The type used to define the interval, comparable\n+     * \n+     * @param leftStartMapping Maps the first argument to the first interval start point\n+     * @param leftEndMapping Maps the first argument to the first interval end point\n+     * @param rightStartMapping Maps the second argument to the second interval start point\n+     * @param rightEndMapping Maps the second argument to the second interval end point\n+     * \n+     * @return An indexed joiner that filters the constraint stream to only include\n+     *         elements (A,B) where A's interval contains B's interval (as defined by the function mapping)\n+     */\n+    public static <A, B, Property_ extends Comparable<Property_>> BiJoiner<A, B> during(\n+            Function<A, Property_> leftStartMapping,\n+            Function<A, Property_> leftEndMapping,\n+            Function<B, Property_> rightStartMapping,\n+            Function<B, Property_> rightEndMapping) {\n+        return AbstractBiJoiner.merge(Joiners.lessThanOrEqual(leftStartMapping, rightStartMapping),\n+                Joiners.greaterThanOrEqual(leftEndMapping, rightEndMapping));\n+    }\n+\n+    /**\n+     * Syntactic sugar for {@link #during(Function, Function, Function, Function)} where\n+     * both elements of the tuple (A,B) are the same type and have the same interval\n+     * defining function. Identical to\n+     * {@code during(startMapping, endMapping, startMapping, endMapping)}.\n+     * \n+     * @param <A> The type of both the first and second argument\n+     * @param <Property_> The type used to define the interval, comparable\n+     * \n+     * @param startMapping Maps the argument to the start point of its interval\n+     * @param endMapping Maps the argument to the end point of its interval\n+     * \n+     * @return See {@link #during(Function, Function, Function, Function)}\n+     */\n+    public static <A, Property_ extends Comparable<Property_>> BiJoiner<A, A> during(\n+            Function<A, Property_> startMapping,\n+            Function<A, Property_> endMapping) {\n+        return during(startMapping, endMapping, startMapping, endMapping);\n+    }\n+\n+    // TriJoiners\n+    /**\n+     * Like {@link #overlaps(Function, Function, Function, Function)}, but for\n+     * TriConstraintStream.\n+     * \n+     * @param <A> The type of the first argument\n+     * @param <B> The type of the second argument\n+     * @param <C> The type of the third argument\n+     * @param <Property_> The type used to define the interval, comparable\n+     * \n+     * @param leftStartMapping Maps the first and second arguments to the first interval start point\n+     * @param leftEndMapping Maps the first and second arguments to the first interval end point\n+     * @param rightStartMapping Maps the third argument to the second interval start point\n+     * @param rightEndMapping Maps the third argument to the second interval end point\n+     * \n+     * @return An indexed joiner that filters the constraint stream to only include\n+     *         elements (A,B,C) where (A,B)'s and C's intervals (as defined by the function mapping)\n+     *         overlap.\n+     */\n+    public static <A, B, C, Property_ extends Comparable<Property_>> TriJoiner<A, B, C> overlaps(\n+            BiFunction<A, B, Property_> leftStartMapping,\n+            BiFunction<A, B, Property_> leftEndMapping,\n+            Function<C, Property_> rightStartMapping,\n+            Function<C, Property_> rightEndMapping) {\n+        return AbstractTriJoiner.merge(Joiners.lessThan(leftStartMapping, rightEndMapping),\n+                Joiners.greaterThan(leftEndMapping, rightStartMapping));\n+    }\n+\n+    /**\n+     * Like {@link #during(Function, Function, Function, Function)}, but for\n+     * TriConstraintStream.\n+     * \n+     * @param <A> The type of the first argument\n+     * @param <B> The type of the second argument\n+     * @param <C> The type of the third argument\n+     * @param <Property_> The type used to define the interval, comparable\n+     * \n+     * @param leftStartMapping Maps the first and second arguments to the first interval start point\n+     * @param leftEndMapping Maps the first and second arguments to the first interval end point\n+     * @param rightStartMapping Maps the third argument to the second interval start point\n+     * @param rightEndMapping Maps the third argument to the second interval end point\n+     * \n+     * @return An indexed joiner that filters the constraint stream to only include\n+     *         elements (A,B,C) where (A,B)'s interval contains C's interval (as defined by the function mapping)\n+     */\n+    public static <A, B, C, Property_ extends Comparable<Property_>> TriJoiner<A, B, C> during(\n+            BiFunction<A, B, Property_> leftStartMapping,\n+            BiFunction<A, B, Property_> leftEndMapping,\n+            Function<C, Property_> rightStartMapping,\n+            Function<C, Property_> rightEndMapping) {\n+        return AbstractTriJoiner.merge(Joiners.lessThanOrEqual(leftStartMapping, rightStartMapping),\n+                Joiners.greaterThanOrEqual(leftEndMapping, rightEndMapping));\n+    }\n+\n+    // QuadJoiners\n+    /**\n+     * Like {@link #overlaps(Function, Function, Function, Function)}, but for\n+     * QuadConstraintStream.\n+     * \n+     * @param <A> The type of the first argument\n+     * @param <B> The type of the second argument\n+     * @param <C> The type of the third argument\n+     * @param <D> The type of the fourth argument\n+     * @param <Property_> The type used to define the interval, comparable\n+     * \n+     * @param leftStartMapping Maps the first, second and third arguments to the first interval start point\n+     * @param leftEndMapping Maps the first, second and third arguments to the first interval end point\n+     * @param rightStartMapping Maps the fourth argument to the second interval start point\n+     * @param rightEndMapping Maps the fourth argument to the second interval end point\n+     * \n+     * @return An indexed joiner that filters the constraint stream to only include\n+     *         elements (A,B,C,D) where (A,B,C)'s and D's intervals (as defined by the function mapping)\n+     *         overlap.\n+     */\n+    public static <A, B, C, D, Property_ extends Comparable<Property_>> QuadJoiner<A, B, C, D> overlaps(\n+            TriFunction<A, B, C, Property_> leftStartMapping,\n+            TriFunction<A, B, C, Property_> leftEndMapping,\n+            Function<D, Property_> rightStartMapping,\n+            Function<D, Property_> rightEndMapping) {\n+        return AbstractQuadJoiner.merge(Joiners.lessThan(leftStartMapping, rightEndMapping),\n+                Joiners.greaterThan(leftEndMapping, rightStartMapping));\n+    }\n+\n+    /**\n+     * Like {@link #during(Function, Function, Function, Function)}, but for\n+     * QuadConstraintStream.\n+     * \n+     * @param <A> The type of the first argument\n+     * @param <B> The type of the second argument\n+     * @param <C> The type of the third argument\n+     * @param <D> The type of the fourth argument\n+     * @param <Property_> The type used to define the interval, comparable\n+     * \n+     * @param leftStartMapping Maps the first, second and third arguments to the first interval start point\n+     * @param leftEndMapping Maps the first, second and third arguments to the first interval end point\n+     * @param rightStartMapping Maps the fourth argument to the second interval start point\n+     * @param rightEndMapping Maps the fourth argument to the second interval end point\n+     * \n+     * @return An indexed joiner that filters the constraint stream to only include\n+     *         elements (A,B,C,D) where (A,B,C)'s interval contains D's interval (as defined by the function mapping)\n+     */\n+    public static <A, B, C, D, Property_ extends Comparable<Property_>> QuadJoiner<A, B, C, D> during(\n+            TriFunction<A, B, C, Property_> leftStartMapping,\n+            TriFunction<A, B, C, Property_> leftEndMapping,\n+            Function<D, Property_> rightStartMapping,\n+            Function<D, Property_> rightEndMapping) {\n+        return AbstractQuadJoiner.merge(Joiners.lessThanOrEqual(leftStartMapping, rightStartMapping),\n+                Joiners.greaterThanOrEqual(leftEndMapping, rightEndMapping));\n+    }\n+\n+    // PentaJoiners\n+    /**\n+     * Like {@link #overlaps(Function, Function, Function, Function)}, but for\n+     * PentaConstraintStream.\n+     * \n+     * @param <A> The type of the first argument\n+     * @param <B> The type of the second argument\n+     * @param <C> The type of the third argument\n+     * @param <D> The type of the fourth argument\n+     * @param <E> The type of the fifth argument\n+     * @param <Property_> The type used to define the interval, comparable\n+     * \n+     * @param leftStartMapping Maps the first, second, third and fourth arguments to the first interval start point\n+     * @param leftEndMapping Maps the first, second, third and fourth arguments to the first interval end point\n+     * @param rightStartMapping Maps the fifth argument to the second interval start point\n+     * @param rightEndMapping Maps the fifth argument to the second interval end point\n+     * \n+     * @return An indexed joiner that filters the constraint stream to only include\n+     *         elements (A,B,C,D,E) where (A,B,C,D)'s and E's intervals (as defined by the function mapping)\n+     *         overlap.\n+     */\n+    public static <A, B, C, D, E, Property_ extends Comparable<Property_>> PentaJoiner<A, B, C, D, E> overlaps(\n+            QuadFunction<A, B, C, D, Property_> leftStartMapping,\n+            QuadFunction<A, B, C, D, Property_> leftEndMapping,\n+            Function<E, Property_> rightStartMapping,\n+            Function<E, Property_> rightEndMapping) {\n+        return AbstractPentaJoiner.merge(Joiners.lessThan(leftStartMapping, rightEndMapping),\n+                Joiners.greaterThan(leftEndMapping, rightStartMapping));\n+    }\n+\n+    /**\n+     * Like {@link #during(Function, Function, Function, Function)}, but for\n+     * PentaConstraintStream.\n+     * \n+     * @param <A> The type of the first argument\n+     * @param <B> The type of the second argument\n+     * @param <C> The type of the third argument\n+     * @param <D> The type of the fourth argument\n+     * @param <E> The type of the fifth argument\n+     * @param <Property_> The type used to define the interval, comparable\n+     * \n+     * @param leftStartMapping Maps the first, second, third and fourth arguments to the first interval start point\n+     * @param leftEndMapping Maps the first, second, third and fourth arguments to the first interval end point\n+     * @param rightStartMapping Maps the fifth argument to the second interval start point\n+     * @param rightEndMapping Maps the fifth argument to the second interval end point\n+     * \n+     * @return An indexed joiner that filters the constraint stream to only include\n+     *         elements (A,B,C,D,E) where (A,B,C,D)'s interval contains E's interval (as defined by the function mapping)\n+     */\n+    public static <A, B, C, D, E, Property_ extends Comparable<Property_>> PentaJoiner<A, B, C, D, E> during(\n+            QuadFunction<A, B, C, D, Property_> leftStartMapping,\n+            QuadFunction<A, B, C, D, Property_> leftEndMapping,\n+            Function<E, Property_> rightStartMapping,\n+            Function<E, Property_> rightEndMapping) {\n+        return AbstractPentaJoiner.merge(Joiners.lessThanOrEqual(leftStartMapping, rightStartMapping),\n+                Joiners.greaterThanOrEqual(leftEndMapping, rightEndMapping));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15b387f0a41ed13ee11809b59b3e5ecdc4c441c4"}, "originalPosition": 309}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA2NTgyMg==", "bodyText": "Probably from the 13 cases required to ensure full checking of joiner correctness (4! = 24, but pairs (a,b) where a > b are invalid, which cut it in half, and one additional case for equals). Simple code may not have so simple tests.", "url": "https://github.com/kiegroup/optaplanner/pull/865#discussion_r487065822", "createdAt": "2020-09-11T14:01:55Z", "author": {"login": "Christopher-Chianelli"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/common/IntervalJoiners.java", "diffHunk": "@@ -0,0 +1,314 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.score.stream.common;\n+\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+\n+import org.optaplanner.core.api.function.QuadFunction;\n+import org.optaplanner.core.api.function.TriFunction;\n+import org.optaplanner.core.api.score.stream.Joiners;\n+import org.optaplanner.core.api.score.stream.bi.BiJoiner;\n+import org.optaplanner.core.api.score.stream.penta.PentaJoiner;\n+import org.optaplanner.core.api.score.stream.quad.QuadJoiner;\n+import org.optaplanner.core.api.score.stream.tri.TriJoiner;\n+import org.optaplanner.core.impl.score.stream.bi.AbstractBiJoiner;\n+import org.optaplanner.core.impl.score.stream.penta.AbstractPentaJoiner;\n+import org.optaplanner.core.impl.score.stream.quad.AbstractQuadJoiner;\n+import org.optaplanner.core.impl.score.stream.tri.AbstractTriJoiner;\n+\n+/**\n+ * Creates an {@link BiJoiner}, {@link TriJoiner}, ... instance\n+ * for data types that can be described as intervals (for instance,\n+ * time slots and numeric ranges). Based on Allen's Interval Algebra.\n+ * See https://en.wikipedia.org/wiki/Allen%27s_interval_algebra\n+ */\n+public class IntervalJoiners {\n+\n+    // BiJoiners\n+\n+    /**\n+     * For pairs of intervals [a,b) and [c,d), returns only those\n+     * pairs where [a,b) and [c,d) overlap (or, in other\n+     * words, there exists an x such that x in [a,b) and\n+     * x in [c,d)). These are exactly the pairs where\n+     * a < d and b > c (or in other words, when the first\n+     * interval starts before the second one ends and the\n+     * first interval ends after the second interval begins).\n+     * \n+     * @param <A> The type of the first argument\n+     * @param <B> The type of the second argument\n+     * @param <Property_> The type used to define the interval, comparable\n+     * \n+     * @param leftStartMapping Maps the first argument to the first interval start point\n+     * @param leftEndMapping Maps the first argument to the first interval end point\n+     * @param rightStartMapping Maps the second argument to the second interval start point\n+     * @param rightEndMapping Maps the second argument to the second interval end point\n+     * \n+     * @return An indexed joiner that filters the constraint stream to only include\n+     *         elements (A,B) where A's and B's intervals (as defined by the function mapping)\n+     *         overlap.\n+     */\n+    public static <A, B, Property_ extends Comparable<Property_>> BiJoiner<A, B> overlaps(\n+            Function<A, Property_> leftStartMapping,\n+            Function<A, Property_> leftEndMapping,\n+            Function<B, Property_> rightStartMapping,\n+            Function<B, Property_> rightEndMapping) {\n+        return AbstractBiJoiner.merge(Joiners.lessThan(leftStartMapping, rightEndMapping),\n+                Joiners.greaterThan(leftEndMapping, rightStartMapping));\n+    }\n+\n+    /**\n+     * Syntactic sugar for {@link #overlaps(Function, Function, Function, Function)} where\n+     * both elements of the tuple (A,B) are the same type and have the same interval\n+     * defining function. Identical to\n+     * {@code overlaps(startMapping, endMapping, startMapping, endMapping)}.\n+     * \n+     * @param <A> The type of both the first and second argument\n+     * @param <Property_> The type used to define the interval, comparable\n+     * \n+     * @param startMapping Maps the argument to the start point of its interval\n+     * @param endMapping Maps the argument to the end point of its interval\n+     * \n+     * @return See {@link #overlaps(Function, Function, Function, Function)}\n+     */\n+    public static <A, Property_ extends Comparable<Property_>> BiJoiner<A, A> overlaps(\n+            Function<A, Property_> startMapping,\n+            Function<A, Property_> endMapping) {\n+        return overlaps(startMapping, endMapping, startMapping, endMapping);\n+    }\n+\n+    /**\n+     * For pairs of intervals [a,b) and [c,d), returns only those\n+     * pairs where [a,b) contains [c,d) (or, in other\n+     * words, for any x in [c, d), x is also in [a,b)). These are exactly the pairs\n+     * where a <= c and b >= d (or in other words, when the first\n+     * interval starts before the second one starts and the\n+     * first interval ends after the second interval ends).\n+     * \n+     * @param <A> The type of the first argument\n+     * @param <B> The type of the second argument\n+     * @param <Property_> The type used to define the interval, comparable\n+     * \n+     * @param leftStartMapping Maps the first argument to the first interval start point\n+     * @param leftEndMapping Maps the first argument to the first interval end point\n+     * @param rightStartMapping Maps the second argument to the second interval start point\n+     * @param rightEndMapping Maps the second argument to the second interval end point\n+     * \n+     * @return An indexed joiner that filters the constraint stream to only include\n+     *         elements (A,B) where A's interval contains B's interval (as defined by the function mapping)\n+     */\n+    public static <A, B, Property_ extends Comparable<Property_>> BiJoiner<A, B> during(\n+            Function<A, Property_> leftStartMapping,\n+            Function<A, Property_> leftEndMapping,\n+            Function<B, Property_> rightStartMapping,\n+            Function<B, Property_> rightEndMapping) {\n+        return AbstractBiJoiner.merge(Joiners.lessThanOrEqual(leftStartMapping, rightStartMapping),\n+                Joiners.greaterThanOrEqual(leftEndMapping, rightEndMapping));\n+    }\n+\n+    /**\n+     * Syntactic sugar for {@link #during(Function, Function, Function, Function)} where\n+     * both elements of the tuple (A,B) are the same type and have the same interval\n+     * defining function. Identical to\n+     * {@code during(startMapping, endMapping, startMapping, endMapping)}.\n+     * \n+     * @param <A> The type of both the first and second argument\n+     * @param <Property_> The type used to define the interval, comparable\n+     * \n+     * @param startMapping Maps the argument to the start point of its interval\n+     * @param endMapping Maps the argument to the end point of its interval\n+     * \n+     * @return See {@link #during(Function, Function, Function, Function)}\n+     */\n+    public static <A, Property_ extends Comparable<Property_>> BiJoiner<A, A> during(\n+            Function<A, Property_> startMapping,\n+            Function<A, Property_> endMapping) {\n+        return during(startMapping, endMapping, startMapping, endMapping);\n+    }\n+\n+    // TriJoiners\n+    /**\n+     * Like {@link #overlaps(Function, Function, Function, Function)}, but for\n+     * TriConstraintStream.\n+     * \n+     * @param <A> The type of the first argument\n+     * @param <B> The type of the second argument\n+     * @param <C> The type of the third argument\n+     * @param <Property_> The type used to define the interval, comparable\n+     * \n+     * @param leftStartMapping Maps the first and second arguments to the first interval start point\n+     * @param leftEndMapping Maps the first and second arguments to the first interval end point\n+     * @param rightStartMapping Maps the third argument to the second interval start point\n+     * @param rightEndMapping Maps the third argument to the second interval end point\n+     * \n+     * @return An indexed joiner that filters the constraint stream to only include\n+     *         elements (A,B,C) where (A,B)'s and C's intervals (as defined by the function mapping)\n+     *         overlap.\n+     */\n+    public static <A, B, C, Property_ extends Comparable<Property_>> TriJoiner<A, B, C> overlaps(\n+            BiFunction<A, B, Property_> leftStartMapping,\n+            BiFunction<A, B, Property_> leftEndMapping,\n+            Function<C, Property_> rightStartMapping,\n+            Function<C, Property_> rightEndMapping) {\n+        return AbstractTriJoiner.merge(Joiners.lessThan(leftStartMapping, rightEndMapping),\n+                Joiners.greaterThan(leftEndMapping, rightStartMapping));\n+    }\n+\n+    /**\n+     * Like {@link #during(Function, Function, Function, Function)}, but for\n+     * TriConstraintStream.\n+     * \n+     * @param <A> The type of the first argument\n+     * @param <B> The type of the second argument\n+     * @param <C> The type of the third argument\n+     * @param <Property_> The type used to define the interval, comparable\n+     * \n+     * @param leftStartMapping Maps the first and second arguments to the first interval start point\n+     * @param leftEndMapping Maps the first and second arguments to the first interval end point\n+     * @param rightStartMapping Maps the third argument to the second interval start point\n+     * @param rightEndMapping Maps the third argument to the second interval end point\n+     * \n+     * @return An indexed joiner that filters the constraint stream to only include\n+     *         elements (A,B,C) where (A,B)'s interval contains C's interval (as defined by the function mapping)\n+     */\n+    public static <A, B, C, Property_ extends Comparable<Property_>> TriJoiner<A, B, C> during(\n+            BiFunction<A, B, Property_> leftStartMapping,\n+            BiFunction<A, B, Property_> leftEndMapping,\n+            Function<C, Property_> rightStartMapping,\n+            Function<C, Property_> rightEndMapping) {\n+        return AbstractTriJoiner.merge(Joiners.lessThanOrEqual(leftStartMapping, rightStartMapping),\n+                Joiners.greaterThanOrEqual(leftEndMapping, rightEndMapping));\n+    }\n+\n+    // QuadJoiners\n+    /**\n+     * Like {@link #overlaps(Function, Function, Function, Function)}, but for\n+     * QuadConstraintStream.\n+     * \n+     * @param <A> The type of the first argument\n+     * @param <B> The type of the second argument\n+     * @param <C> The type of the third argument\n+     * @param <D> The type of the fourth argument\n+     * @param <Property_> The type used to define the interval, comparable\n+     * \n+     * @param leftStartMapping Maps the first, second and third arguments to the first interval start point\n+     * @param leftEndMapping Maps the first, second and third arguments to the first interval end point\n+     * @param rightStartMapping Maps the fourth argument to the second interval start point\n+     * @param rightEndMapping Maps the fourth argument to the second interval end point\n+     * \n+     * @return An indexed joiner that filters the constraint stream to only include\n+     *         elements (A,B,C,D) where (A,B,C)'s and D's intervals (as defined by the function mapping)\n+     *         overlap.\n+     */\n+    public static <A, B, C, D, Property_ extends Comparable<Property_>> QuadJoiner<A, B, C, D> overlaps(\n+            TriFunction<A, B, C, Property_> leftStartMapping,\n+            TriFunction<A, B, C, Property_> leftEndMapping,\n+            Function<D, Property_> rightStartMapping,\n+            Function<D, Property_> rightEndMapping) {\n+        return AbstractQuadJoiner.merge(Joiners.lessThan(leftStartMapping, rightEndMapping),\n+                Joiners.greaterThan(leftEndMapping, rightStartMapping));\n+    }\n+\n+    /**\n+     * Like {@link #during(Function, Function, Function, Function)}, but for\n+     * QuadConstraintStream.\n+     * \n+     * @param <A> The type of the first argument\n+     * @param <B> The type of the second argument\n+     * @param <C> The type of the third argument\n+     * @param <D> The type of the fourth argument\n+     * @param <Property_> The type used to define the interval, comparable\n+     * \n+     * @param leftStartMapping Maps the first, second and third arguments to the first interval start point\n+     * @param leftEndMapping Maps the first, second and third arguments to the first interval end point\n+     * @param rightStartMapping Maps the fourth argument to the second interval start point\n+     * @param rightEndMapping Maps the fourth argument to the second interval end point\n+     * \n+     * @return An indexed joiner that filters the constraint stream to only include\n+     *         elements (A,B,C,D) where (A,B,C)'s interval contains D's interval (as defined by the function mapping)\n+     */\n+    public static <A, B, C, D, Property_ extends Comparable<Property_>> QuadJoiner<A, B, C, D> during(\n+            TriFunction<A, B, C, Property_> leftStartMapping,\n+            TriFunction<A, B, C, Property_> leftEndMapping,\n+            Function<D, Property_> rightStartMapping,\n+            Function<D, Property_> rightEndMapping) {\n+        return AbstractQuadJoiner.merge(Joiners.lessThanOrEqual(leftStartMapping, rightStartMapping),\n+                Joiners.greaterThanOrEqual(leftEndMapping, rightEndMapping));\n+    }\n+\n+    // PentaJoiners\n+    /**\n+     * Like {@link #overlaps(Function, Function, Function, Function)}, but for\n+     * PentaConstraintStream.\n+     * \n+     * @param <A> The type of the first argument\n+     * @param <B> The type of the second argument\n+     * @param <C> The type of the third argument\n+     * @param <D> The type of the fourth argument\n+     * @param <E> The type of the fifth argument\n+     * @param <Property_> The type used to define the interval, comparable\n+     * \n+     * @param leftStartMapping Maps the first, second, third and fourth arguments to the first interval start point\n+     * @param leftEndMapping Maps the first, second, third and fourth arguments to the first interval end point\n+     * @param rightStartMapping Maps the fifth argument to the second interval start point\n+     * @param rightEndMapping Maps the fifth argument to the second interval end point\n+     * \n+     * @return An indexed joiner that filters the constraint stream to only include\n+     *         elements (A,B,C,D,E) where (A,B,C,D)'s and E's intervals (as defined by the function mapping)\n+     *         overlap.\n+     */\n+    public static <A, B, C, D, E, Property_ extends Comparable<Property_>> PentaJoiner<A, B, C, D, E> overlaps(\n+            QuadFunction<A, B, C, D, Property_> leftStartMapping,\n+            QuadFunction<A, B, C, D, Property_> leftEndMapping,\n+            Function<E, Property_> rightStartMapping,\n+            Function<E, Property_> rightEndMapping) {\n+        return AbstractPentaJoiner.merge(Joiners.lessThan(leftStartMapping, rightEndMapping),\n+                Joiners.greaterThan(leftEndMapping, rightStartMapping));\n+    }\n+\n+    /**\n+     * Like {@link #during(Function, Function, Function, Function)}, but for\n+     * PentaConstraintStream.\n+     * \n+     * @param <A> The type of the first argument\n+     * @param <B> The type of the second argument\n+     * @param <C> The type of the third argument\n+     * @param <D> The type of the fourth argument\n+     * @param <E> The type of the fifth argument\n+     * @param <Property_> The type used to define the interval, comparable\n+     * \n+     * @param leftStartMapping Maps the first, second, third and fourth arguments to the first interval start point\n+     * @param leftEndMapping Maps the first, second, third and fourth arguments to the first interval end point\n+     * @param rightStartMapping Maps the fifth argument to the second interval start point\n+     * @param rightEndMapping Maps the fifth argument to the second interval end point\n+     * \n+     * @return An indexed joiner that filters the constraint stream to only include\n+     *         elements (A,B,C,D,E) where (A,B,C,D)'s interval contains E's interval (as defined by the function mapping)\n+     */\n+    public static <A, B, C, D, E, Property_ extends Comparable<Property_>> PentaJoiner<A, B, C, D, E> during(\n+            QuadFunction<A, B, C, D, Property_> leftStartMapping,\n+            QuadFunction<A, B, C, D, Property_> leftEndMapping,\n+            Function<E, Property_> rightStartMapping,\n+            Function<E, Property_> rightEndMapping) {\n+        return AbstractPentaJoiner.merge(Joiners.lessThanOrEqual(leftStartMapping, rightStartMapping),\n+                Joiners.greaterThanOrEqual(leftEndMapping, rightEndMapping));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzMDUxMA=="}, "originalCommit": {"oid": "15b387f0a41ed13ee11809b59b3e5ecdc4c441c4"}, "originalPosition": 309}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzkyMzE2OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/Joiners.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMTowMjo0OFrOHQFpLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMTowMjo0OFrOHQFpLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzMTcyNw==", "bodyText": "Two rules for our Javadocs:\n\nUse the full line length, which is 120 chars.\nEach sentence starts on a new line.", "url": "https://github.com/kiegroup/optaplanner/pull/865#discussion_r486631727", "createdAt": "2020-09-10T21:02:48Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/Joiners.java", "diffHunk": "@@ -147,10 +148,103 @@\n      * }\n      */\n \n-    // TODO\n-    // join(..., planningVariableContainsCached(Talk::getPeriod, (Period a, Period b) -> a.overlaps(b)))\n-    // get the period value range, does a cartesian product on it, so it maps every period to an overlapping periodList\n-    // then keep an index from every period to all talks in an overlapping period (possible the same period)\n+    /**\n+     * For pairs of intervals [a,b) and [c,d), returns only those\n+     * pairs where [a,b) and [c,d) overlap (or, in other\n+     * words, there exists an x such that x in [a,b) and\n+     * x in [c,d)). These are exactly the pairs where\n+     * a < d and b > c (or in other words, when the first\n+     * interval starts before the second one ends and the\n+     * first interval ends after the second interval begins).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15b387f0a41ed13ee11809b59b3e5ecdc4c441c4"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzkyNjg3OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/Joiners.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMTowMzo1NFrOHQFrZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMTowMzo1NFrOHQFrZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzMjI5NA==", "bodyText": "We usually start with never null, an indexed joiner... And since it doesn't start with a capital letter, it doesn't end with a full stop.", "url": "https://github.com/kiegroup/optaplanner/pull/865#discussion_r486632294", "createdAt": "2020-09-10T21:03:54Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/Joiners.java", "diffHunk": "@@ -147,10 +148,103 @@\n      * }\n      */\n \n-    // TODO\n-    // join(..., planningVariableContainsCached(Talk::getPeriod, (Period a, Period b) -> a.overlaps(b)))\n-    // get the period value range, does a cartesian product on it, so it maps every period to an overlapping periodList\n-    // then keep an index from every period to all talks in an overlapping period (possible the same period)\n+    /**\n+     * For pairs of intervals [a,b) and [c,d), returns only those\n+     * pairs where [a,b) and [c,d) overlap (or, in other\n+     * words, there exists an x such that x in [a,b) and\n+     * x in [c,d)). These are exactly the pairs where\n+     * a < d and b > c (or in other words, when the first\n+     * interval starts before the second one ends and the\n+     * first interval ends after the second interval begins).\n+     * \n+     * @param <A> The type of the first argument\n+     * @param <B> The type of the second argument\n+     * @param <Property_> The type used to define the interval, comparable\n+     * \n+     * @param leftStartMapping Maps the first argument to the first interval start point\n+     * @param leftEndMapping Maps the first argument to the first interval end point\n+     * @param rightStartMapping Maps the second argument to the second interval start point\n+     * @param rightEndMapping Maps the second argument to the second interval end point\n+     * \n+     * @return An indexed joiner that filters the constraint stream to only include\n+     *         elements (A,B) where A's and B's intervals (as defined by the function mapping)\n+     *         overlap.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15b387f0a41ed13ee11809b59b3e5ecdc4c441c4"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NzA2MjcwOnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/Joiners.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNTozMDoxMVrOHQjoRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNTozMDoxMVrOHQjoRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEyMzAxNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param leftStartMapping maps the first argument to the first interval start point\n          \n          \n            \n                 * @param leftEndMapping maps the first argument to the first interval end point\n          \n          \n            \n                 * @param leftStartMapping maps the first argument to the first interval start point (inclusive)\n          \n          \n            \n                 * @param leftEndMapping maps the first argument to the first interval end point (exclusive)\n          \n      \n    \n    \n  \n\nOne last comment on the Javadocs: The method description marks the intervals [a, b), which is the correct mathematical notation for an interval open on the right, but let's make it crystal clear.", "url": "https://github.com/kiegroup/optaplanner/pull/865#discussion_r487123014", "createdAt": "2020-09-11T15:30:11Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/Joiners.java", "diffHunk": "@@ -147,10 +151,99 @@\n      * }\n      */\n \n-    // TODO\n-    // join(..., planningVariableContainsCached(Talk::getPeriod, (Period a, Period b) -> a.overlaps(b)))\n-    // get the period value range, does a cartesian product on it, so it maps every period to an overlapping periodList\n-    // then keep an index from every period to all talks in an overlapping period (possible the same period)\n+    /**\n+     * For pairs of intervals [a,b) and [c,d), returns only those pairs where [a,b) and [c,d) overlap (or, in other\n+     * words, there exists an x such that x in [a,b) and x in [c,d)).\n+     * These are exactly the pairs where {@code a < d} and {@code b > c} (or in other words, when the first interval\n+     * starts before the second one ends and the first interval ends after the second interval begins).\n+     * \n+     * @param <A> the type of the first argument\n+     * @param <B> the type of the second argument\n+     * @param <Property_> the type used to define the interval, comparable\n+     * \n+     * @param leftStartMapping maps the first argument to the first interval start point\n+     * @param leftEndMapping maps the first argument to the first interval end point", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35e0ee56541bffd50e5f1e8a0f49f8d2f460994f"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjM0ODMxOnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/Joiners.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMjoxMToxOFrOHRQxTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMjoxMToxOFrOHRQxTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg2MjYwNQ==", "bodyText": "style: type params are typically the last in the javadocs @ list", "url": "https://github.com/kiegroup/optaplanner/pull/865#discussion_r487862605", "createdAt": "2020-09-14T12:11:18Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/Joiners.java", "diffHunk": "@@ -147,10 +151,99 @@\n      * }\n      */\n \n-    // TODO\n-    // join(..., planningVariableContainsCached(Talk::getPeriod, (Period a, Period b) -> a.overlaps(b)))\n-    // get the period value range, does a cartesian product on it, so it maps every period to an overlapping periodList\n-    // then keep an index from every period to all talks in an overlapping period (possible the same period)\n+    /**\n+     * For pairs of intervals [a,b) and [c,d), returns only those pairs where [a,b) and [c,d) overlap (or, in other\n+     * words, there exists an x such that x in [a,b) and x in [c,d)).\n+     * These are exactly the pairs where {@code a < d} and {@code b > c} (or in other words, when the first interval\n+     * starts before the second one ends and the first interval ends after the second interval begins).\n+     * \n+     * @param <A> the type of the first argument\n+     * @param <B> the type of the second argument\n+     * @param <Property_> the type used to define the interval, comparable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "671103550e740d691524256ea572ffc5b1e642ee"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjM1NDA4OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/Joiners.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMjoxMjo1MVrOHRQ0tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMjoxMjo1MVrOHRQ0tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg2MzQ3OA==", "bodyText": "method name => overlapping (because it needs to be an adjective like other method names filtering, intersecting, equal, ...)", "url": "https://github.com/kiegroup/optaplanner/pull/865#discussion_r487863478", "createdAt": "2020-09-14T12:12:51Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/Joiners.java", "diffHunk": "@@ -147,10 +151,99 @@\n      * }\n      */\n \n-    // TODO\n-    // join(..., planningVariableContainsCached(Talk::getPeriod, (Period a, Period b) -> a.overlaps(b)))\n-    // get the period value range, does a cartesian product on it, so it maps every period to an overlapping periodList\n-    // then keep an index from every period to all talks in an overlapping period (possible the same period)\n+    /**\n+     * For pairs of intervals [a,b) and [c,d), returns only those pairs where [a,b) and [c,d) overlap (or, in other\n+     * words, there exists an x such that x in [a,b) and x in [c,d)).\n+     * These are exactly the pairs where {@code a < d} and {@code b > c} (or in other words, when the first interval\n+     * starts before the second one ends and the first interval ends after the second interval begins).\n+     * \n+     * @param <A> the type of the first argument\n+     * @param <B> the type of the second argument\n+     * @param <Property_> the type used to define the interval, comparable\n+     * \n+     * @param leftStartMapping maps the first argument to the first interval start point (inclusive)\n+     * @param leftEndMapping maps the first argument to the first interval end point (exclusive)\n+     * @param rightStartMapping maps the second argument to the second interval start point (inclusive)\n+     * @param rightEndMapping maps the second argument to the second interval end point (exclusive)\n+     * \n+     * @return never null, an indexed joiner that filters the constraint stream to only include elements (A,B) where\n+     *         A's and B's intervals (as defined by the function mapping) overlap\n+     */\n+    public static <A, B, Property_ extends Comparable<Property_>> BiJoiner<A, B> overlaps(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "671103550e740d691524256ea572ffc5b1e642ee"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjM1ODczOnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/Joiners.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMjoxNDoxNVrOHRQ3nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMjoxNDoxNVrOHRQ3nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg2NDIyMw==", "bodyText": "\"maps the first argument to the first interval start point \" the double \"first\" could be confusing, suggestion:\n=> maps the first argument to its interval start point\"", "url": "https://github.com/kiegroup/optaplanner/pull/865#discussion_r487864223", "createdAt": "2020-09-14T12:14:15Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/Joiners.java", "diffHunk": "@@ -147,10 +151,99 @@\n      * }\n      */\n \n-    // TODO\n-    // join(..., planningVariableContainsCached(Talk::getPeriod, (Period a, Period b) -> a.overlaps(b)))\n-    // get the period value range, does a cartesian product on it, so it maps every period to an overlapping periodList\n-    // then keep an index from every period to all talks in an overlapping period (possible the same period)\n+    /**\n+     * For pairs of intervals [a,b) and [c,d), returns only those pairs where [a,b) and [c,d) overlap (or, in other\n+     * words, there exists an x such that x in [a,b) and x in [c,d)).\n+     * These are exactly the pairs where {@code a < d} and {@code b > c} (or in other words, when the first interval\n+     * starts before the second one ends and the first interval ends after the second interval begins).\n+     * \n+     * @param <A> the type of the first argument\n+     * @param <B> the type of the second argument\n+     * @param <Property_> the type used to define the interval, comparable\n+     * \n+     * @param leftStartMapping maps the first argument to the first interval start point (inclusive)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "671103550e740d691524256ea572ffc5b1e642ee"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjM2MzczOnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/Joiners.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMjoxNTo0M1rOHRQ6oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMjoxNTo0M1rOHRQ6oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg2NDk5Mw==", "bodyText": "This second sentance seems to repeat the first sentence. I don't think it brings additional clarity, so I'd remove it.", "url": "https://github.com/kiegroup/optaplanner/pull/865#discussion_r487864993", "createdAt": "2020-09-14T12:15:43Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/Joiners.java", "diffHunk": "@@ -147,10 +151,99 @@\n      * }\n      */\n \n-    // TODO\n-    // join(..., planningVariableContainsCached(Talk::getPeriod, (Period a, Period b) -> a.overlaps(b)))\n-    // get the period value range, does a cartesian product on it, so it maps every period to an overlapping periodList\n-    // then keep an index from every period to all talks in an overlapping period (possible the same period)\n+    /**\n+     * For pairs of intervals [a,b) and [c,d), returns only those pairs where [a,b) and [c,d) overlap (or, in other\n+     * words, there exists an x such that x in [a,b) and x in [c,d)).\n+     * These are exactly the pairs where {@code a < d} and {@code b > c} (or in other words, when the first interval\n+     * starts before the second one ends and the first interval ends after the second interval begins).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "671103550e740d691524256ea572ffc5b1e642ee"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjM3NjI3OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/Joiners.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMjoxOToxN1rOHRRCOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMjoxOToxN1rOHRRCOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg2NjkzOQ==", "bodyText": "All joiners should probably have a first general line concept line, how about something like:\n\"Joins every A and B that overlap for an interval which is specified by a start and end property on both A and B.\"", "url": "https://github.com/kiegroup/optaplanner/pull/865#discussion_r487866939", "createdAt": "2020-09-14T12:19:17Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/Joiners.java", "diffHunk": "@@ -147,10 +151,99 @@\n      * }\n      */\n \n-    // TODO\n-    // join(..., planningVariableContainsCached(Talk::getPeriod, (Period a, Period b) -> a.overlaps(b)))\n-    // get the period value range, does a cartesian product on it, so it maps every period to an overlapping periodList\n-    // then keep an index from every period to all talks in an overlapping period (possible the same period)\n+    /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "671103550e740d691524256ea572ffc5b1e642ee"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjM4MjY1OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/Joiners.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMjoyMTowNVrOHRRGFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMjoyMTowNVrOHRRGFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg2NzkyNA==", "bodyText": "We should probably use the same trick here as we do for all overloaded methods in the UniConstraintStream API javadocs etc: the first one has the full javadoc, but the others simply put As defined by {@link #overlapping(...)}. and then still specify the @param and @return etc.", "url": "https://github.com/kiegroup/optaplanner/pull/865#discussion_r487867924", "createdAt": "2020-09-14T12:21:05Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/Joiners.java", "diffHunk": "@@ -147,10 +151,99 @@\n      * }\n      */\n \n-    // TODO\n-    // join(..., planningVariableContainsCached(Talk::getPeriod, (Period a, Period b) -> a.overlaps(b)))\n-    // get the period value range, does a cartesian product on it, so it maps every period to an overlapping periodList\n-    // then keep an index from every period to all talks in an overlapping period (possible the same period)\n+    /**\n+     * For pairs of intervals [a,b) and [c,d), returns only those pairs where [a,b) and [c,d) overlap (or, in other\n+     * words, there exists an x such that x in [a,b) and x in [c,d)).\n+     * These are exactly the pairs where {@code a < d} and {@code b > c} (or in other words, when the first interval\n+     * starts before the second one ends and the first interval ends after the second interval begins).\n+     * \n+     * @param <A> the type of the first argument\n+     * @param <B> the type of the second argument\n+     * @param <Property_> the type used to define the interval, comparable\n+     * \n+     * @param leftStartMapping maps the first argument to the first interval start point (inclusive)\n+     * @param leftEndMapping maps the first argument to the first interval end point (exclusive)\n+     * @param rightStartMapping maps the second argument to the second interval start point (inclusive)\n+     * @param rightEndMapping maps the second argument to the second interval end point (exclusive)\n+     * \n+     * @return never null, an indexed joiner that filters the constraint stream to only include elements (A,B) where\n+     *         A's and B's intervals (as defined by the function mapping) overlap\n+     */\n+    public static <A, B, Property_ extends Comparable<Property_>> BiJoiner<A, B> overlaps(\n+            Function<A, Property_> leftStartMapping,\n+            Function<A, Property_> leftEndMapping,\n+            Function<B, Property_> rightStartMapping,\n+            Function<B, Property_> rightEndMapping) {\n+        return AbstractBiJoiner.merge(Joiners.lessThan(leftStartMapping, rightEndMapping),\n+                Joiners.greaterThan(leftEndMapping, rightStartMapping));\n+    }\n+\n+    /**\n+     * Syntactic sugar for {@link #overlaps(Function, Function, Function, Function)} where\n+     * both elements of the tuple (A,B) are the same type and have the same interval\n+     * defining function. Identical to\n+     * {@code overlaps(startMapping, endMapping, startMapping, endMapping)}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "671103550e740d691524256ea572ffc5b1e642ee"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjM5MDczOnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/Joiners.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMjoyMzoyM1rOHRRK7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMjoyNDozNVrOHRROBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg2OTE2NQ==", "bodyText": "Method ordering: the other methods in the class such as equal(A) are ordered before equal(A, B). Let's keep that consistent for easier maintenance? So this method before the previous one.", "url": "https://github.com/kiegroup/optaplanner/pull/865#discussion_r487869165", "createdAt": "2020-09-14T12:23:23Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/Joiners.java", "diffHunk": "@@ -147,10 +151,99 @@\n      * }\n      */\n \n-    // TODO\n-    // join(..., planningVariableContainsCached(Talk::getPeriod, (Period a, Period b) -> a.overlaps(b)))\n-    // get the period value range, does a cartesian product on it, so it maps every period to an overlapping periodList\n-    // then keep an index from every period to all talks in an overlapping period (possible the same period)\n+    /**\n+     * For pairs of intervals [a,b) and [c,d), returns only those pairs where [a,b) and [c,d) overlap (or, in other\n+     * words, there exists an x such that x in [a,b) and x in [c,d)).\n+     * These are exactly the pairs where {@code a < d} and {@code b > c} (or in other words, when the first interval\n+     * starts before the second one ends and the first interval ends after the second interval begins).\n+     * \n+     * @param <A> the type of the first argument\n+     * @param <B> the type of the second argument\n+     * @param <Property_> the type used to define the interval, comparable\n+     * \n+     * @param leftStartMapping maps the first argument to the first interval start point (inclusive)\n+     * @param leftEndMapping maps the first argument to the first interval end point (exclusive)\n+     * @param rightStartMapping maps the second argument to the second interval start point (inclusive)\n+     * @param rightEndMapping maps the second argument to the second interval end point (exclusive)\n+     * \n+     * @return never null, an indexed joiner that filters the constraint stream to only include elements (A,B) where\n+     *         A's and B's intervals (as defined by the function mapping) overlap\n+     */\n+    public static <A, B, Property_ extends Comparable<Property_>> BiJoiner<A, B> overlaps(\n+            Function<A, Property_> leftStartMapping,\n+            Function<A, Property_> leftEndMapping,\n+            Function<B, Property_> rightStartMapping,\n+            Function<B, Property_> rightEndMapping) {\n+        return AbstractBiJoiner.merge(Joiners.lessThan(leftStartMapping, rightEndMapping),\n+                Joiners.greaterThan(leftEndMapping, rightStartMapping));\n+    }\n+\n+    /**\n+     * Syntactic sugar for {@link #overlaps(Function, Function, Function, Function)} where\n+     * both elements of the tuple (A,B) are the same type and have the same interval\n+     * defining function. Identical to\n+     * {@code overlaps(startMapping, endMapping, startMapping, endMapping)}.\n+     * \n+     * @param <A> the type of both the first and second argument\n+     * @param <Property_> the type used to define the interval, comparable\n+     * \n+     * @param startMapping maps the argument to the start point of its interval (inclusive)\n+     * @param endMapping maps the argument to the end point of its interval (exclusive)\n+     * \n+     * @return see {@link #overlaps(Function, Function, Function, Function)}\n+     */\n+    public static <A, Property_ extends Comparable<Property_>> BiJoiner<A, A> overlaps(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "671103550e740d691524256ea572ffc5b1e642ee"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg2OTk1Nw==", "bodyText": "Note that I expect that like equal, this method will be use far more than the (A, B) one, and therefor this deserves the javadoc and the other the \"as defined by\".", "url": "https://github.com/kiegroup/optaplanner/pull/865#discussion_r487869957", "createdAt": "2020-09-14T12:24:35Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/Joiners.java", "diffHunk": "@@ -147,10 +151,99 @@\n      * }\n      */\n \n-    // TODO\n-    // join(..., planningVariableContainsCached(Talk::getPeriod, (Period a, Period b) -> a.overlaps(b)))\n-    // get the period value range, does a cartesian product on it, so it maps every period to an overlapping periodList\n-    // then keep an index from every period to all talks in an overlapping period (possible the same period)\n+    /**\n+     * For pairs of intervals [a,b) and [c,d), returns only those pairs where [a,b) and [c,d) overlap (or, in other\n+     * words, there exists an x such that x in [a,b) and x in [c,d)).\n+     * These are exactly the pairs where {@code a < d} and {@code b > c} (or in other words, when the first interval\n+     * starts before the second one ends and the first interval ends after the second interval begins).\n+     * \n+     * @param <A> the type of the first argument\n+     * @param <B> the type of the second argument\n+     * @param <Property_> the type used to define the interval, comparable\n+     * \n+     * @param leftStartMapping maps the first argument to the first interval start point (inclusive)\n+     * @param leftEndMapping maps the first argument to the first interval end point (exclusive)\n+     * @param rightStartMapping maps the second argument to the second interval start point (inclusive)\n+     * @param rightEndMapping maps the second argument to the second interval end point (exclusive)\n+     * \n+     * @return never null, an indexed joiner that filters the constraint stream to only include elements (A,B) where\n+     *         A's and B's intervals (as defined by the function mapping) overlap\n+     */\n+    public static <A, B, Property_ extends Comparable<Property_>> BiJoiner<A, B> overlaps(\n+            Function<A, Property_> leftStartMapping,\n+            Function<A, Property_> leftEndMapping,\n+            Function<B, Property_> rightStartMapping,\n+            Function<B, Property_> rightEndMapping) {\n+        return AbstractBiJoiner.merge(Joiners.lessThan(leftStartMapping, rightEndMapping),\n+                Joiners.greaterThan(leftEndMapping, rightStartMapping));\n+    }\n+\n+    /**\n+     * Syntactic sugar for {@link #overlaps(Function, Function, Function, Function)} where\n+     * both elements of the tuple (A,B) are the same type and have the same interval\n+     * defining function. Identical to\n+     * {@code overlaps(startMapping, endMapping, startMapping, endMapping)}.\n+     * \n+     * @param <A> the type of both the first and second argument\n+     * @param <Property_> the type used to define the interval, comparable\n+     * \n+     * @param startMapping maps the argument to the start point of its interval (inclusive)\n+     * @param endMapping maps the argument to the end point of its interval (exclusive)\n+     * \n+     * @return see {@link #overlaps(Function, Function, Function, Function)}\n+     */\n+    public static <A, Property_ extends Comparable<Property_>> BiJoiner<A, A> overlaps(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg2OTE2NQ=="}, "originalCommit": {"oid": "671103550e740d691524256ea572ffc5b1e642ee"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjQwODc1OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/Joiners.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMjoyNzozMlrOHRRVOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMjoyNzozMlrOHRRVOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg3MTgwMg==", "bodyText": "Adding x complicates things. I am sure mathematicians love the \"for any x\" definition, but our audience, programmers, are better off with a simple statement a <= c and b <= d (or is it the other way around? see comment below), so no need for adding an x.", "url": "https://github.com/kiegroup/optaplanner/pull/865#discussion_r487871802", "createdAt": "2020-09-14T12:27:32Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/Joiners.java", "diffHunk": "@@ -147,10 +151,99 @@\n      * }\n      */\n \n-    // TODO\n-    // join(..., planningVariableContainsCached(Talk::getPeriod, (Period a, Period b) -> a.overlaps(b)))\n-    // get the period value range, does a cartesian product on it, so it maps every period to an overlapping periodList\n-    // then keep an index from every period to all talks in an overlapping period (possible the same period)\n+    /**\n+     * For pairs of intervals [a,b) and [c,d), returns only those pairs where [a,b) and [c,d) overlap (or, in other\n+     * words, there exists an x such that x in [a,b) and x in [c,d)).\n+     * These are exactly the pairs where {@code a < d} and {@code b > c} (or in other words, when the first interval\n+     * starts before the second one ends and the first interval ends after the second interval begins).\n+     * \n+     * @param <A> the type of the first argument\n+     * @param <B> the type of the second argument\n+     * @param <Property_> the type used to define the interval, comparable\n+     * \n+     * @param leftStartMapping maps the first argument to the first interval start point (inclusive)\n+     * @param leftEndMapping maps the first argument to the first interval end point (exclusive)\n+     * @param rightStartMapping maps the second argument to the second interval start point (inclusive)\n+     * @param rightEndMapping maps the second argument to the second interval end point (exclusive)\n+     * \n+     * @return never null, an indexed joiner that filters the constraint stream to only include elements (A,B) where\n+     *         A's and B's intervals (as defined by the function mapping) overlap\n+     */\n+    public static <A, B, Property_ extends Comparable<Property_>> BiJoiner<A, B> overlaps(\n+            Function<A, Property_> leftStartMapping,\n+            Function<A, Property_> leftEndMapping,\n+            Function<B, Property_> rightStartMapping,\n+            Function<B, Property_> rightEndMapping) {\n+        return AbstractBiJoiner.merge(Joiners.lessThan(leftStartMapping, rightEndMapping),\n+                Joiners.greaterThan(leftEndMapping, rightStartMapping));\n+    }\n+\n+    /**\n+     * Syntactic sugar for {@link #overlaps(Function, Function, Function, Function)} where\n+     * both elements of the tuple (A,B) are the same type and have the same interval\n+     * defining function. Identical to\n+     * {@code overlaps(startMapping, endMapping, startMapping, endMapping)}.\n+     * \n+     * @param <A> the type of both the first and second argument\n+     * @param <Property_> the type used to define the interval, comparable\n+     * \n+     * @param startMapping maps the argument to the start point of its interval (inclusive)\n+     * @param endMapping maps the argument to the end point of its interval (exclusive)\n+     * \n+     * @return see {@link #overlaps(Function, Function, Function, Function)}\n+     */\n+    public static <A, Property_ extends Comparable<Property_>> BiJoiner<A, A> overlaps(\n+            Function<A, Property_> startMapping,\n+            Function<A, Property_> endMapping) {\n+        return overlaps(startMapping, endMapping, startMapping, endMapping);\n+    }\n+\n+    /**\n+     * For pairs of intervals [a,b) and [c,d), returns only those pairs where [a,b) contains [c,d) (or, in other\n+     * words, for any x in [c, d), x is also in [a,b)).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "671103550e740d691524256ea572ffc5b1e642ee"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjQxNzYxOnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/Joiners.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMjoyOTozOVrOHRRaLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMjoyOTozOVrOHRRaLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg3MzA3MQ==", "bodyText": "Unlike in overlapping (and addition), for duration (like for substraction) it really important as to which is which.\nWhich of these is true?\n\nduring(summer 2020, year 2020)\nduring(year 2020, summer 2020)\n\nThe method name and the javadocs must make that crystal clear with no verbosity", "url": "https://github.com/kiegroup/optaplanner/pull/865#discussion_r487873071", "createdAt": "2020-09-14T12:29:39Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/Joiners.java", "diffHunk": "@@ -147,10 +151,99 @@\n      * }\n      */\n \n-    // TODO\n-    // join(..., planningVariableContainsCached(Talk::getPeriod, (Period a, Period b) -> a.overlaps(b)))\n-    // get the period value range, does a cartesian product on it, so it maps every period to an overlapping periodList\n-    // then keep an index from every period to all talks in an overlapping period (possible the same period)\n+    /**\n+     * For pairs of intervals [a,b) and [c,d), returns only those pairs where [a,b) and [c,d) overlap (or, in other\n+     * words, there exists an x such that x in [a,b) and x in [c,d)).\n+     * These are exactly the pairs where {@code a < d} and {@code b > c} (or in other words, when the first interval\n+     * starts before the second one ends and the first interval ends after the second interval begins).\n+     * \n+     * @param <A> the type of the first argument\n+     * @param <B> the type of the second argument\n+     * @param <Property_> the type used to define the interval, comparable\n+     * \n+     * @param leftStartMapping maps the first argument to the first interval start point (inclusive)\n+     * @param leftEndMapping maps the first argument to the first interval end point (exclusive)\n+     * @param rightStartMapping maps the second argument to the second interval start point (inclusive)\n+     * @param rightEndMapping maps the second argument to the second interval end point (exclusive)\n+     * \n+     * @return never null, an indexed joiner that filters the constraint stream to only include elements (A,B) where\n+     *         A's and B's intervals (as defined by the function mapping) overlap\n+     */\n+    public static <A, B, Property_ extends Comparable<Property_>> BiJoiner<A, B> overlaps(\n+            Function<A, Property_> leftStartMapping,\n+            Function<A, Property_> leftEndMapping,\n+            Function<B, Property_> rightStartMapping,\n+            Function<B, Property_> rightEndMapping) {\n+        return AbstractBiJoiner.merge(Joiners.lessThan(leftStartMapping, rightEndMapping),\n+                Joiners.greaterThan(leftEndMapping, rightStartMapping));\n+    }\n+\n+    /**\n+     * Syntactic sugar for {@link #overlaps(Function, Function, Function, Function)} where\n+     * both elements of the tuple (A,B) are the same type and have the same interval\n+     * defining function. Identical to\n+     * {@code overlaps(startMapping, endMapping, startMapping, endMapping)}.\n+     * \n+     * @param <A> the type of both the first and second argument\n+     * @param <Property_> the type used to define the interval, comparable\n+     * \n+     * @param startMapping maps the argument to the start point of its interval (inclusive)\n+     * @param endMapping maps the argument to the end point of its interval (exclusive)\n+     * \n+     * @return see {@link #overlaps(Function, Function, Function, Function)}\n+     */\n+    public static <A, Property_ extends Comparable<Property_>> BiJoiner<A, A> overlaps(\n+            Function<A, Property_> startMapping,\n+            Function<A, Property_> endMapping) {\n+        return overlaps(startMapping, endMapping, startMapping, endMapping);\n+    }\n+\n+    /**\n+     * For pairs of intervals [a,b) and [c,d), returns only those pairs where [a,b) contains [c,d) (or, in other\n+     * words, for any x in [c, d), x is also in [a,b)).\n+     * These are exactly the pairs where {@code a <= c} and {@code b >= d} (or in other words, when the first interval\n+     * starts before the second one starts and the first interval ends after the second interval ends).\n+     * \n+     * @param <A> the type of the first argument\n+     * @param <B> the type of the second argument\n+     * @param <Property_> the type used to define the interval, comparable\n+     * \n+     * @param leftStartMapping maps the first argument to the first interval start point (inclusive)\n+     * @param leftEndMapping maps the first argument to the first interval end point (exclusive)\n+     * @param rightStartMapping maps the second argument to the second interval start point (inclusive)\n+     * @param rightEndMapping maps the second argument to the second interval end point (exclusive)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "671103550e740d691524256ea572ffc5b1e642ee"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjQyNTcxOnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/Joiners.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMjozMToyOFrOHRReng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMjozMzo1OFrOHRRkoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg3NDIwNg==", "bodyText": "-1 on \"during\" as method name because it presumes the notion of time.\nThis method applies not just to LocalDate etc, but also Integer, Long, BigDecimal and anything else that is Comparable.\nNot just intervals, but any type of range.", "url": "https://github.com/kiegroup/optaplanner/pull/865#discussion_r487874206", "createdAt": "2020-09-14T12:31:28Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/Joiners.java", "diffHunk": "@@ -147,10 +151,99 @@\n      * }\n      */\n \n-    // TODO\n-    // join(..., planningVariableContainsCached(Talk::getPeriod, (Period a, Period b) -> a.overlaps(b)))\n-    // get the period value range, does a cartesian product on it, so it maps every period to an overlapping periodList\n-    // then keep an index from every period to all talks in an overlapping period (possible the same period)\n+    /**\n+     * For pairs of intervals [a,b) and [c,d), returns only those pairs where [a,b) and [c,d) overlap (or, in other\n+     * words, there exists an x such that x in [a,b) and x in [c,d)).\n+     * These are exactly the pairs where {@code a < d} and {@code b > c} (or in other words, when the first interval\n+     * starts before the second one ends and the first interval ends after the second interval begins).\n+     * \n+     * @param <A> the type of the first argument\n+     * @param <B> the type of the second argument\n+     * @param <Property_> the type used to define the interval, comparable\n+     * \n+     * @param leftStartMapping maps the first argument to the first interval start point (inclusive)\n+     * @param leftEndMapping maps the first argument to the first interval end point (exclusive)\n+     * @param rightStartMapping maps the second argument to the second interval start point (inclusive)\n+     * @param rightEndMapping maps the second argument to the second interval end point (exclusive)\n+     * \n+     * @return never null, an indexed joiner that filters the constraint stream to only include elements (A,B) where\n+     *         A's and B's intervals (as defined by the function mapping) overlap\n+     */\n+    public static <A, B, Property_ extends Comparable<Property_>> BiJoiner<A, B> overlaps(\n+            Function<A, Property_> leftStartMapping,\n+            Function<A, Property_> leftEndMapping,\n+            Function<B, Property_> rightStartMapping,\n+            Function<B, Property_> rightEndMapping) {\n+        return AbstractBiJoiner.merge(Joiners.lessThan(leftStartMapping, rightEndMapping),\n+                Joiners.greaterThan(leftEndMapping, rightStartMapping));\n+    }\n+\n+    /**\n+     * Syntactic sugar for {@link #overlaps(Function, Function, Function, Function)} where\n+     * both elements of the tuple (A,B) are the same type and have the same interval\n+     * defining function. Identical to\n+     * {@code overlaps(startMapping, endMapping, startMapping, endMapping)}.\n+     * \n+     * @param <A> the type of both the first and second argument\n+     * @param <Property_> the type used to define the interval, comparable\n+     * \n+     * @param startMapping maps the argument to the start point of its interval (inclusive)\n+     * @param endMapping maps the argument to the end point of its interval (exclusive)\n+     * \n+     * @return see {@link #overlaps(Function, Function, Function, Function)}\n+     */\n+    public static <A, Property_ extends Comparable<Property_>> BiJoiner<A, A> overlaps(\n+            Function<A, Property_> startMapping,\n+            Function<A, Property_> endMapping) {\n+        return overlaps(startMapping, endMapping, startMapping, endMapping);\n+    }\n+\n+    /**\n+     * For pairs of intervals [a,b) and [c,d), returns only those pairs where [a,b) contains [c,d) (or, in other\n+     * words, for any x in [c, d), x is also in [a,b)).\n+     * These are exactly the pairs where {@code a <= c} and {@code b >= d} (or in other words, when the first interval\n+     * starts before the second one starts and the first interval ends after the second interval ends).\n+     * \n+     * @param <A> the type of the first argument\n+     * @param <B> the type of the second argument\n+     * @param <Property_> the type used to define the interval, comparable\n+     * \n+     * @param leftStartMapping maps the first argument to the first interval start point (inclusive)\n+     * @param leftEndMapping maps the first argument to the first interval end point (exclusive)\n+     * @param rightStartMapping maps the second argument to the second interval start point (inclusive)\n+     * @param rightEndMapping maps the second argument to the second interval end point (exclusive)\n+     * \n+     * @return never null, an indexed joiner that filters the constraint stream to only include elements (A,B) where\n+     *         A's interval contains B's interval (as defined by the function mapping)\n+     */\n+    public static <A, B, Property_ extends Comparable<Property_>> BiJoiner<A, B> during(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "671103550e740d691524256ea572ffc5b1e642ee"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg3NTc0NA==", "bodyText": "I've opened a zulip chat on this, this is something we need to resolve before merging I think, as it gets written in stone in the API.", "url": "https://github.com/kiegroup/optaplanner/pull/865#discussion_r487875744", "createdAt": "2020-09-14T12:33:58Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/Joiners.java", "diffHunk": "@@ -147,10 +151,99 @@\n      * }\n      */\n \n-    // TODO\n-    // join(..., planningVariableContainsCached(Talk::getPeriod, (Period a, Period b) -> a.overlaps(b)))\n-    // get the period value range, does a cartesian product on it, so it maps every period to an overlapping periodList\n-    // then keep an index from every period to all talks in an overlapping period (possible the same period)\n+    /**\n+     * For pairs of intervals [a,b) and [c,d), returns only those pairs where [a,b) and [c,d) overlap (or, in other\n+     * words, there exists an x such that x in [a,b) and x in [c,d)).\n+     * These are exactly the pairs where {@code a < d} and {@code b > c} (or in other words, when the first interval\n+     * starts before the second one ends and the first interval ends after the second interval begins).\n+     * \n+     * @param <A> the type of the first argument\n+     * @param <B> the type of the second argument\n+     * @param <Property_> the type used to define the interval, comparable\n+     * \n+     * @param leftStartMapping maps the first argument to the first interval start point (inclusive)\n+     * @param leftEndMapping maps the first argument to the first interval end point (exclusive)\n+     * @param rightStartMapping maps the second argument to the second interval start point (inclusive)\n+     * @param rightEndMapping maps the second argument to the second interval end point (exclusive)\n+     * \n+     * @return never null, an indexed joiner that filters the constraint stream to only include elements (A,B) where\n+     *         A's and B's intervals (as defined by the function mapping) overlap\n+     */\n+    public static <A, B, Property_ extends Comparable<Property_>> BiJoiner<A, B> overlaps(\n+            Function<A, Property_> leftStartMapping,\n+            Function<A, Property_> leftEndMapping,\n+            Function<B, Property_> rightStartMapping,\n+            Function<B, Property_> rightEndMapping) {\n+        return AbstractBiJoiner.merge(Joiners.lessThan(leftStartMapping, rightEndMapping),\n+                Joiners.greaterThan(leftEndMapping, rightStartMapping));\n+    }\n+\n+    /**\n+     * Syntactic sugar for {@link #overlaps(Function, Function, Function, Function)} where\n+     * both elements of the tuple (A,B) are the same type and have the same interval\n+     * defining function. Identical to\n+     * {@code overlaps(startMapping, endMapping, startMapping, endMapping)}.\n+     * \n+     * @param <A> the type of both the first and second argument\n+     * @param <Property_> the type used to define the interval, comparable\n+     * \n+     * @param startMapping maps the argument to the start point of its interval (inclusive)\n+     * @param endMapping maps the argument to the end point of its interval (exclusive)\n+     * \n+     * @return see {@link #overlaps(Function, Function, Function, Function)}\n+     */\n+    public static <A, Property_ extends Comparable<Property_>> BiJoiner<A, A> overlaps(\n+            Function<A, Property_> startMapping,\n+            Function<A, Property_> endMapping) {\n+        return overlaps(startMapping, endMapping, startMapping, endMapping);\n+    }\n+\n+    /**\n+     * For pairs of intervals [a,b) and [c,d), returns only those pairs where [a,b) contains [c,d) (or, in other\n+     * words, for any x in [c, d), x is also in [a,b)).\n+     * These are exactly the pairs where {@code a <= c} and {@code b >= d} (or in other words, when the first interval\n+     * starts before the second one starts and the first interval ends after the second interval ends).\n+     * \n+     * @param <A> the type of the first argument\n+     * @param <B> the type of the second argument\n+     * @param <Property_> the type used to define the interval, comparable\n+     * \n+     * @param leftStartMapping maps the first argument to the first interval start point (inclusive)\n+     * @param leftEndMapping maps the first argument to the first interval end point (exclusive)\n+     * @param rightStartMapping maps the second argument to the second interval start point (inclusive)\n+     * @param rightEndMapping maps the second argument to the second interval end point (exclusive)\n+     * \n+     * @return never null, an indexed joiner that filters the constraint stream to only include elements (A,B) where\n+     *         A's interval contains B's interval (as defined by the function mapping)\n+     */\n+    public static <A, B, Property_ extends Comparable<Property_>> BiJoiner<A, B> during(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg3NDIwNg=="}, "originalCommit": {"oid": "671103550e740d691524256ea572ffc5b1e642ee"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjQ0NTE2OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/test/java/org/optaplanner/core/api/score/stream/IntervalJoinersTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMjozNjoxN1rOHRRp0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNjoxODo1MVrOHRcySQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg3NzA3NA==", "bodyText": "All unit tests for the class Joiners should be in JoinersTests normally, so it's easier to find them. It's harder to know that this class exists, because it's not classname +\"Test\"", "url": "https://github.com/kiegroup/optaplanner/pull/865#discussion_r487877074", "createdAt": "2020-09-14T12:36:17Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/test/java/org/optaplanner/core/api/score/stream/IntervalJoinersTest.java", "diffHunk": "@@ -0,0 +1,951 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.optaplanner.core.api.score.stream;\n+\n+import static org.assertj.core.api.SoftAssertions.assertSoftly;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+\n+import org.junit.jupiter.api.Test;\n+import org.optaplanner.core.api.function.QuadFunction;\n+import org.optaplanner.core.api.function.TriFunction;\n+import org.optaplanner.core.impl.score.stream.bi.AbstractBiJoiner;\n+import org.optaplanner.core.impl.score.stream.penta.AbstractPentaJoiner;\n+import org.optaplanner.core.impl.score.stream.quad.AbstractQuadJoiner;\n+import org.optaplanner.core.impl.score.stream.tri.AbstractTriJoiner;\n+\n+public class IntervalJoinersTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "671103550e740d691524256ea572ffc5b1e642ee"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA1OTQ2NQ==", "bodyText": "Issue is the Interval Joiner tests are a lot more complicated than the normal joiner tests as there are 13 test cases we need to go through instead of the typical 2. So adding it to JoinersTests will make it massive: ~800 lines. As we add more and more Joiners, eventually JoinersTests will be a couple thousand lines and get harder and harder to maintain. Since 800 isn't too bad, I'll merge it, but we should separate the tests if we add more joiners (in particular, those with non-trivial testing)", "url": "https://github.com/kiegroup/optaplanner/pull/865#discussion_r488059465", "createdAt": "2020-09-14T16:18:51Z", "author": {"login": "Christopher-Chianelli"}, "path": "optaplanner-core/src/test/java/org/optaplanner/core/api/score/stream/IntervalJoinersTest.java", "diffHunk": "@@ -0,0 +1,951 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.optaplanner.core.api.score.stream;\n+\n+import static org.assertj.core.api.SoftAssertions.assertSoftly;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+\n+import org.junit.jupiter.api.Test;\n+import org.optaplanner.core.api.function.QuadFunction;\n+import org.optaplanner.core.api.function.TriFunction;\n+import org.optaplanner.core.impl.score.stream.bi.AbstractBiJoiner;\n+import org.optaplanner.core.impl.score.stream.penta.AbstractPentaJoiner;\n+import org.optaplanner.core.impl.score.stream.quad.AbstractQuadJoiner;\n+import org.optaplanner.core.impl.score.stream.tri.AbstractTriJoiner;\n+\n+public class IntervalJoinersTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg3NzA3NA=="}, "originalCommit": {"oid": "671103550e740d691524256ea572ffc5b1e642ee"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjQ1MTY5OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/test/java/org/optaplanner/core/api/score/stream/IntervalJoinersTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMjozNzo1MlrOHRRtgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMjo0NjoxNVrOHRSCBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg3ODAxOQ==", "bodyText": "Please create a Testdata class for this instead, in the testdata package.\n@triceo Do we have any testdata classes already that are only for ConstraintStream testing and don't have any @planning* annotations?", "url": "https://github.com/kiegroup/optaplanner/pull/865#discussion_r487878019", "createdAt": "2020-09-14T12:37:52Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/test/java/org/optaplanner/core/api/score/stream/IntervalJoinersTest.java", "diffHunk": "@@ -0,0 +1,951 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.optaplanner.core.api.score.stream;\n+\n+import static org.assertj.core.api.SoftAssertions.assertSoftly;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+\n+import org.junit.jupiter.api.Test;\n+import org.optaplanner.core.api.function.QuadFunction;\n+import org.optaplanner.core.api.function.TriFunction;\n+import org.optaplanner.core.impl.score.stream.bi.AbstractBiJoiner;\n+import org.optaplanner.core.impl.score.stream.penta.AbstractPentaJoiner;\n+import org.optaplanner.core.impl.score.stream.quad.AbstractQuadJoiner;\n+import org.optaplanner.core.impl.score.stream.tri.AbstractTriJoiner;\n+\n+public class IntervalJoinersTest {\n+    private static final class Interval<A, B> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "671103550e740d691524256ea572ffc5b1e642ee"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg4MzI3MA==", "bodyText": "No, and personally I don't see the need to do that. I'd rather keep single use classes limited in scope to where they're declared.", "url": "https://github.com/kiegroup/optaplanner/pull/865#discussion_r487883270", "createdAt": "2020-09-14T12:46:15Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/test/java/org/optaplanner/core/api/score/stream/IntervalJoinersTest.java", "diffHunk": "@@ -0,0 +1,951 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.optaplanner.core.api.score.stream;\n+\n+import static org.assertj.core.api.SoftAssertions.assertSoftly;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+\n+import org.junit.jupiter.api.Test;\n+import org.optaplanner.core.api.function.QuadFunction;\n+import org.optaplanner.core.api.function.TriFunction;\n+import org.optaplanner.core.impl.score.stream.bi.AbstractBiJoiner;\n+import org.optaplanner.core.impl.score.stream.penta.AbstractPentaJoiner;\n+import org.optaplanner.core.impl.score.stream.quad.AbstractQuadJoiner;\n+import org.optaplanner.core.impl.score.stream.tri.AbstractTriJoiner;\n+\n+public class IntervalJoinersTest {\n+    private static final class Interval<A, B> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg3ODAxOQ=="}, "originalCommit": {"oid": "671103550e740d691524256ea572ffc5b1e642ee"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjQ1Njg3OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/test/java/org/optaplanner/core/api/score/stream/IntervalJoinersTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMjozOTowM1rOHRRwaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNjo1Mjo1MVrOHReIWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg3ODc2MA==", "bodyText": "How does overlapsBiShort() improve the test coverage over overlapsBi? What does the \"short\" mean?", "url": "https://github.com/kiegroup/optaplanner/pull/865#discussion_r487878760", "createdAt": "2020-09-14T12:39:03Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/test/java/org/optaplanner/core/api/score/stream/IntervalJoinersTest.java", "diffHunk": "@@ -0,0 +1,951 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.optaplanner.core.api.score.stream;\n+\n+import static org.assertj.core.api.SoftAssertions.assertSoftly;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+\n+import org.junit.jupiter.api.Test;\n+import org.optaplanner.core.api.function.QuadFunction;\n+import org.optaplanner.core.api.function.TriFunction;\n+import org.optaplanner.core.impl.score.stream.bi.AbstractBiJoiner;\n+import org.optaplanner.core.impl.score.stream.penta.AbstractPentaJoiner;\n+import org.optaplanner.core.impl.score.stream.quad.AbstractQuadJoiner;\n+import org.optaplanner.core.impl.score.stream.tri.AbstractTriJoiner;\n+\n+public class IntervalJoinersTest {\n+    private static final class Interval<A, B> {\n+        final A start;\n+        final A end;\n+        final Function<A, B> map;\n+\n+        public Interval(A start, A end, Function<A, B> map) {\n+            this.start = start;\n+            this.end = end;\n+            this.map = map;\n+        }\n+\n+        public B getStart() {\n+            return map.apply(start);\n+        }\n+\n+        public B getEnd() {\n+            return map.apply(end);\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"(\" + start.toString() + \", \" + end.toString() + \")\";\n+        }\n+\n+        public static Interval<Long, BigDecimal> ofBigDecimal(Long start, Long end) {\n+            return new Interval<>(start, end, BigDecimal::valueOf);\n+        }\n+\n+        public static Interval<Long, BigInteger> ofBigInt(Long start, Long end) {\n+            return new Interval<>(start, end, BigInteger::valueOf);\n+        }\n+    }\n+\n+    @Test\n+    public void overlapsBi() {\n+        Function<Interval<Long, BigInteger>, Long> leftStartMapping = interval -> interval.getStart().longValue();\n+        Function<Interval<Long, BigInteger>, Long> leftEndMapping = interval -> interval.getEnd().longValue();\n+        Function<Interval<Long, BigDecimal>, Long> rightStartMapping = interval -> interval.getStart().longValue();\n+        Function<Interval<Long, BigDecimal>, Long> rightEndMapping = interval -> interval.getEnd().longValue();\n+\n+        AbstractBiJoiner<Interval<Long, BigInteger>, Interval<Long, BigDecimal>> joiner =\n+                (AbstractBiJoiner<Interval<Long, BigInteger>, Interval<Long, BigDecimal>>) Joiners.overlaps(leftStartMapping,\n+                        leftEndMapping, rightStartMapping, rightEndMapping);\n+\n+        assertSoftly(softly -> {\n+            // True cases (equals, overlaps, contains, starts, ends)\n+            softly.assertThat(joiner.matches(Interval.ofBigInt(1L, 5L),\n+                    Interval.ofBigDecimal(1L, 5L)))\n+                    .as(\"Case A = B\").isTrue();\n+\n+            softly.assertThat(joiner.matches(Interval.ofBigInt(3L, 7L),\n+                    Interval.ofBigDecimal(1L, 5L)))\n+                    .as(\"B starts before A, A ends after B\").isTrue();\n+\n+            softly.assertThat(joiner.matches(Interval.ofBigInt(1L, 5L),\n+                    Interval.ofBigDecimal(3L, 7L)))\n+                    .as(\"A starts before B, B ends after A\").isTrue();\n+\n+            softly.assertThat(joiner.matches(Interval.ofBigInt(3L, 5L),\n+                    Interval.ofBigDecimal(1L, 7L)))\n+                    .as(\"B contains A\").isTrue();\n+\n+            softly.assertThat(joiner.matches(Interval.ofBigInt(1L, 7L),\n+                    Interval.ofBigDecimal(3L, 5L)))\n+                    .as(\"A contains B\").isTrue();\n+\n+            softly.assertThat(joiner.matches(Interval.ofBigInt(1L, 7L),\n+                    Interval.ofBigDecimal(1L, 3L)))\n+                    .as(\"A started by B\").isTrue();\n+\n+            softly.assertThat(joiner.matches(Interval.ofBigInt(1L, 3L),\n+                    Interval.ofBigDecimal(1L, 7L)))\n+                    .as(\"B started by A\").isTrue();\n+\n+            softly.assertThat(joiner.matches(Interval.ofBigInt(1L, 7L),\n+                    Interval.ofBigDecimal(3L, 7L)))\n+                    .as(\"A ended by B\").isTrue();\n+\n+            softly.assertThat(joiner.matches(Interval.ofBigInt(3L, 7L),\n+                    Interval.ofBigDecimal(1L, 7L)))\n+                    .as(\"B ended by A\").isTrue();\n+\n+            // False Cases (before, after, meets)\n+\n+            softly.assertThat(joiner.matches(Interval.ofBigInt(1L, 3L),\n+                    Interval.ofBigDecimal(5L, 7L)))\n+                    .as(\"A before B\").isFalse();\n+\n+            softly.assertThat(joiner.matches(Interval.ofBigInt(5L, 7L),\n+                    Interval.ofBigDecimal(1L, 3L)))\n+                    .as(\"B before A\").isFalse();\n+\n+            // This is false since typically, when overlaps is used,\n+            // end is exclusive, and start is inclusive,\n+            // so 0-5, 5-10 do not overlap\n+            softly.assertThat(joiner.matches(Interval.ofBigInt(1L, 3L),\n+                    Interval.ofBigDecimal(3L, 7L)))\n+                    .as(\"A meets B\").isFalse();\n+\n+            softly.assertThat(joiner.matches(Interval.ofBigInt(3L, 7L),\n+                    Interval.ofBigDecimal(1L, 3L)))\n+                    .as(\"B meets A\").isFalse();\n+        });\n+    }\n+\n+    @Test\n+    public void overlapsBiShort() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "671103550e740d691524256ea572ffc5b1e642ee"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA0Njk3MQ==", "bodyText": "It for the short form of the overlapping method for the same type (i.e. overlapping(Function, Function) NOT overlapping(Function, Function, Function, Function))", "url": "https://github.com/kiegroup/optaplanner/pull/865#discussion_r488046971", "createdAt": "2020-09-14T16:00:18Z", "author": {"login": "Christopher-Chianelli"}, "path": "optaplanner-core/src/test/java/org/optaplanner/core/api/score/stream/IntervalJoinersTest.java", "diffHunk": "@@ -0,0 +1,951 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.optaplanner.core.api.score.stream;\n+\n+import static org.assertj.core.api.SoftAssertions.assertSoftly;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+\n+import org.junit.jupiter.api.Test;\n+import org.optaplanner.core.api.function.QuadFunction;\n+import org.optaplanner.core.api.function.TriFunction;\n+import org.optaplanner.core.impl.score.stream.bi.AbstractBiJoiner;\n+import org.optaplanner.core.impl.score.stream.penta.AbstractPentaJoiner;\n+import org.optaplanner.core.impl.score.stream.quad.AbstractQuadJoiner;\n+import org.optaplanner.core.impl.score.stream.tri.AbstractTriJoiner;\n+\n+public class IntervalJoinersTest {\n+    private static final class Interval<A, B> {\n+        final A start;\n+        final A end;\n+        final Function<A, B> map;\n+\n+        public Interval(A start, A end, Function<A, B> map) {\n+            this.start = start;\n+            this.end = end;\n+            this.map = map;\n+        }\n+\n+        public B getStart() {\n+            return map.apply(start);\n+        }\n+\n+        public B getEnd() {\n+            return map.apply(end);\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"(\" + start.toString() + \", \" + end.toString() + \")\";\n+        }\n+\n+        public static Interval<Long, BigDecimal> ofBigDecimal(Long start, Long end) {\n+            return new Interval<>(start, end, BigDecimal::valueOf);\n+        }\n+\n+        public static Interval<Long, BigInteger> ofBigInt(Long start, Long end) {\n+            return new Interval<>(start, end, BigInteger::valueOf);\n+        }\n+    }\n+\n+    @Test\n+    public void overlapsBi() {\n+        Function<Interval<Long, BigInteger>, Long> leftStartMapping = interval -> interval.getStart().longValue();\n+        Function<Interval<Long, BigInteger>, Long> leftEndMapping = interval -> interval.getEnd().longValue();\n+        Function<Interval<Long, BigDecimal>, Long> rightStartMapping = interval -> interval.getStart().longValue();\n+        Function<Interval<Long, BigDecimal>, Long> rightEndMapping = interval -> interval.getEnd().longValue();\n+\n+        AbstractBiJoiner<Interval<Long, BigInteger>, Interval<Long, BigDecimal>> joiner =\n+                (AbstractBiJoiner<Interval<Long, BigInteger>, Interval<Long, BigDecimal>>) Joiners.overlaps(leftStartMapping,\n+                        leftEndMapping, rightStartMapping, rightEndMapping);\n+\n+        assertSoftly(softly -> {\n+            // True cases (equals, overlaps, contains, starts, ends)\n+            softly.assertThat(joiner.matches(Interval.ofBigInt(1L, 5L),\n+                    Interval.ofBigDecimal(1L, 5L)))\n+                    .as(\"Case A = B\").isTrue();\n+\n+            softly.assertThat(joiner.matches(Interval.ofBigInt(3L, 7L),\n+                    Interval.ofBigDecimal(1L, 5L)))\n+                    .as(\"B starts before A, A ends after B\").isTrue();\n+\n+            softly.assertThat(joiner.matches(Interval.ofBigInt(1L, 5L),\n+                    Interval.ofBigDecimal(3L, 7L)))\n+                    .as(\"A starts before B, B ends after A\").isTrue();\n+\n+            softly.assertThat(joiner.matches(Interval.ofBigInt(3L, 5L),\n+                    Interval.ofBigDecimal(1L, 7L)))\n+                    .as(\"B contains A\").isTrue();\n+\n+            softly.assertThat(joiner.matches(Interval.ofBigInt(1L, 7L),\n+                    Interval.ofBigDecimal(3L, 5L)))\n+                    .as(\"A contains B\").isTrue();\n+\n+            softly.assertThat(joiner.matches(Interval.ofBigInt(1L, 7L),\n+                    Interval.ofBigDecimal(1L, 3L)))\n+                    .as(\"A started by B\").isTrue();\n+\n+            softly.assertThat(joiner.matches(Interval.ofBigInt(1L, 3L),\n+                    Interval.ofBigDecimal(1L, 7L)))\n+                    .as(\"B started by A\").isTrue();\n+\n+            softly.assertThat(joiner.matches(Interval.ofBigInt(1L, 7L),\n+                    Interval.ofBigDecimal(3L, 7L)))\n+                    .as(\"A ended by B\").isTrue();\n+\n+            softly.assertThat(joiner.matches(Interval.ofBigInt(3L, 7L),\n+                    Interval.ofBigDecimal(1L, 7L)))\n+                    .as(\"B ended by A\").isTrue();\n+\n+            // False Cases (before, after, meets)\n+\n+            softly.assertThat(joiner.matches(Interval.ofBigInt(1L, 3L),\n+                    Interval.ofBigDecimal(5L, 7L)))\n+                    .as(\"A before B\").isFalse();\n+\n+            softly.assertThat(joiner.matches(Interval.ofBigInt(5L, 7L),\n+                    Interval.ofBigDecimal(1L, 3L)))\n+                    .as(\"B before A\").isFalse();\n+\n+            // This is false since typically, when overlaps is used,\n+            // end is exclusive, and start is inclusive,\n+            // so 0-5, 5-10 do not overlap\n+            softly.assertThat(joiner.matches(Interval.ofBigInt(1L, 3L),\n+                    Interval.ofBigDecimal(3L, 7L)))\n+                    .as(\"A meets B\").isFalse();\n+\n+            softly.assertThat(joiner.matches(Interval.ofBigInt(3L, 7L),\n+                    Interval.ofBigDecimal(1L, 3L)))\n+                    .as(\"B meets A\").isFalse();\n+        });\n+    }\n+\n+    @Test\n+    public void overlapsBiShort() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg3ODc2MA=="}, "originalCommit": {"oid": "671103550e740d691524256ea572ffc5b1e642ee"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA4MTQ5OQ==", "bodyText": "Changed to overlapsDifferentTypes and overlapsSameTypes", "url": "https://github.com/kiegroup/optaplanner/pull/865#discussion_r488081499", "createdAt": "2020-09-14T16:52:51Z", "author": {"login": "Christopher-Chianelli"}, "path": "optaplanner-core/src/test/java/org/optaplanner/core/api/score/stream/IntervalJoinersTest.java", "diffHunk": "@@ -0,0 +1,951 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.optaplanner.core.api.score.stream;\n+\n+import static org.assertj.core.api.SoftAssertions.assertSoftly;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+\n+import org.junit.jupiter.api.Test;\n+import org.optaplanner.core.api.function.QuadFunction;\n+import org.optaplanner.core.api.function.TriFunction;\n+import org.optaplanner.core.impl.score.stream.bi.AbstractBiJoiner;\n+import org.optaplanner.core.impl.score.stream.penta.AbstractPentaJoiner;\n+import org.optaplanner.core.impl.score.stream.quad.AbstractQuadJoiner;\n+import org.optaplanner.core.impl.score.stream.tri.AbstractTriJoiner;\n+\n+public class IntervalJoinersTest {\n+    private static final class Interval<A, B> {\n+        final A start;\n+        final A end;\n+        final Function<A, B> map;\n+\n+        public Interval(A start, A end, Function<A, B> map) {\n+            this.start = start;\n+            this.end = end;\n+            this.map = map;\n+        }\n+\n+        public B getStart() {\n+            return map.apply(start);\n+        }\n+\n+        public B getEnd() {\n+            return map.apply(end);\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"(\" + start.toString() + \", \" + end.toString() + \")\";\n+        }\n+\n+        public static Interval<Long, BigDecimal> ofBigDecimal(Long start, Long end) {\n+            return new Interval<>(start, end, BigDecimal::valueOf);\n+        }\n+\n+        public static Interval<Long, BigInteger> ofBigInt(Long start, Long end) {\n+            return new Interval<>(start, end, BigInteger::valueOf);\n+        }\n+    }\n+\n+    @Test\n+    public void overlapsBi() {\n+        Function<Interval<Long, BigInteger>, Long> leftStartMapping = interval -> interval.getStart().longValue();\n+        Function<Interval<Long, BigInteger>, Long> leftEndMapping = interval -> interval.getEnd().longValue();\n+        Function<Interval<Long, BigDecimal>, Long> rightStartMapping = interval -> interval.getStart().longValue();\n+        Function<Interval<Long, BigDecimal>, Long> rightEndMapping = interval -> interval.getEnd().longValue();\n+\n+        AbstractBiJoiner<Interval<Long, BigInteger>, Interval<Long, BigDecimal>> joiner =\n+                (AbstractBiJoiner<Interval<Long, BigInteger>, Interval<Long, BigDecimal>>) Joiners.overlaps(leftStartMapping,\n+                        leftEndMapping, rightStartMapping, rightEndMapping);\n+\n+        assertSoftly(softly -> {\n+            // True cases (equals, overlaps, contains, starts, ends)\n+            softly.assertThat(joiner.matches(Interval.ofBigInt(1L, 5L),\n+                    Interval.ofBigDecimal(1L, 5L)))\n+                    .as(\"Case A = B\").isTrue();\n+\n+            softly.assertThat(joiner.matches(Interval.ofBigInt(3L, 7L),\n+                    Interval.ofBigDecimal(1L, 5L)))\n+                    .as(\"B starts before A, A ends after B\").isTrue();\n+\n+            softly.assertThat(joiner.matches(Interval.ofBigInt(1L, 5L),\n+                    Interval.ofBigDecimal(3L, 7L)))\n+                    .as(\"A starts before B, B ends after A\").isTrue();\n+\n+            softly.assertThat(joiner.matches(Interval.ofBigInt(3L, 5L),\n+                    Interval.ofBigDecimal(1L, 7L)))\n+                    .as(\"B contains A\").isTrue();\n+\n+            softly.assertThat(joiner.matches(Interval.ofBigInt(1L, 7L),\n+                    Interval.ofBigDecimal(3L, 5L)))\n+                    .as(\"A contains B\").isTrue();\n+\n+            softly.assertThat(joiner.matches(Interval.ofBigInt(1L, 7L),\n+                    Interval.ofBigDecimal(1L, 3L)))\n+                    .as(\"A started by B\").isTrue();\n+\n+            softly.assertThat(joiner.matches(Interval.ofBigInt(1L, 3L),\n+                    Interval.ofBigDecimal(1L, 7L)))\n+                    .as(\"B started by A\").isTrue();\n+\n+            softly.assertThat(joiner.matches(Interval.ofBigInt(1L, 7L),\n+                    Interval.ofBigDecimal(3L, 7L)))\n+                    .as(\"A ended by B\").isTrue();\n+\n+            softly.assertThat(joiner.matches(Interval.ofBigInt(3L, 7L),\n+                    Interval.ofBigDecimal(1L, 7L)))\n+                    .as(\"B ended by A\").isTrue();\n+\n+            // False Cases (before, after, meets)\n+\n+            softly.assertThat(joiner.matches(Interval.ofBigInt(1L, 3L),\n+                    Interval.ofBigDecimal(5L, 7L)))\n+                    .as(\"A before B\").isFalse();\n+\n+            softly.assertThat(joiner.matches(Interval.ofBigInt(5L, 7L),\n+                    Interval.ofBigDecimal(1L, 3L)))\n+                    .as(\"B before A\").isFalse();\n+\n+            // This is false since typically, when overlaps is used,\n+            // end is exclusive, and start is inclusive,\n+            // so 0-5, 5-10 do not overlap\n+            softly.assertThat(joiner.matches(Interval.ofBigInt(1L, 3L),\n+                    Interval.ofBigDecimal(3L, 7L)))\n+                    .as(\"A meets B\").isFalse();\n+\n+            softly.assertThat(joiner.matches(Interval.ofBigInt(3L, 7L),\n+                    Interval.ofBigDecimal(1L, 3L)))\n+                    .as(\"B meets A\").isFalse();\n+        });\n+    }\n+\n+    @Test\n+    public void overlapsBiShort() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg3ODc2MA=="}, "originalCommit": {"oid": "671103550e740d691524256ea572ffc5b1e642ee"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjQ2NjY3OnYy", "diffSide": "RIGHT", "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/flightcrewscheduling/optional/score/FlightCrewSchedulingConstraintProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMjo0MToyMlrOHRR2Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMjo0MToyMlrOHRR2Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg4MDIxOQ==", "bodyText": "Great to see this!\nSmall suggestion: revmove Joiners. for consistency because the other ConstraintProviders seem to do a static import of all Joiners methods.", "url": "https://github.com/kiegroup/optaplanner/pull/865#discussion_r487880219", "createdAt": "2020-09-14T12:41:22Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/flightcrewscheduling/optional/score/FlightCrewSchedulingConstraintProvider.java", "diffHunk": "@@ -35,8 +35,9 @@ private Constraint requiredSkill(ConstraintFactory constraintFactory) {\n     }\n \n     private Constraint flightConflict(ConstraintFactory constraintFactory) {\n-        return constraintFactory.fromUniquePair(FlightAssignment.class, Joiners.equal(FlightAssignment::getEmployee))\n-                .filter((first, second) -> second.getFlight().overlaps(first.getFlight()))\n+        return constraintFactory.fromUniquePair(FlightAssignment.class, Joiners.equal(FlightAssignment::getEmployee),\n+                Joiners.overlaps(fa -> fa.getFlight().getDepartureUTCDateTime(),\n+                        fa -> fa.getFlight().getArrivalUTCDateTime()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "671103550e740d691524256ea572ffc5b1e642ee"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjQ4MzE4OnYy", "diffSide": "RIGHT", "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/meetingscheduling/optional/score/MeetingSchedulingConstraintProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMjo0NToyOVrOHRSAEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNjozODozMFrOHRdg1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg4Mjc3MA==", "bodyText": "(not a change request)\nThis brings up an interesting question: often the overlap is penalized. For example in conference scheduling, the overlap of 2 somehow conflicting talks is penalized.\nWe must have the overlap/duration API to allow for indexing. Should we also provide a helper method to calculate the overlap during penalization? Probably we can't: LocalDate and Integer don't have a common interface with a \"subtract\" method.", "url": "https://github.com/kiegroup/optaplanner/pull/865#discussion_r487882770", "createdAt": "2020-09-14T12:45:29Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/meetingscheduling/optional/score/MeetingSchedulingConstraintProvider.java", "diffHunk": "@@ -86,8 +89,12 @@ protected Constraint requiredAttendanceConflict(ConstraintFactory constraintFact\n                         equal((leftRequiredAttendance, rightRequiredAttendance, leftAssignment) -> rightRequiredAttendance\n                                 .getMeeting(),\n                                 MeetingAssignment::getMeeting),\n-                        filtering((leftRequiredAttendance, rightRequiredAttendance, leftAssignment,\n-                                rightAssignment) -> rightAssignment.calculateOverlap(leftAssignment) > 0))\n+                        overlaps((attendee1, attendee2, assignment) -> assignment.getStartingTimeGrain().getGrainIndex(),\n+                                (attendee1, attendee2, assignment) -> assignment.getStartingTimeGrain().getGrainIndex() +\n+                                        assignment.getMeeting().getDurationInGrains(),\n+                                assignment -> assignment.getStartingTimeGrain().getGrainIndex(),\n+                                assignment -> assignment.getStartingTimeGrain().getGrainIndex() +\n+                                        assignment.getMeeting().getDurationInGrains()))\n                 .penalizeConfigurable(\"Required attendance conflict\",\n                         (leftRequiredAttendance, rightRequiredAttendance, leftAssignment, rightAssignment) -> rightAssignment\n                                 .calculateOverlap(leftAssignment));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "671103550e740d691524256ea572ffc5b1e642ee"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA3MTM4MQ==", "bodyText": "If there was such an interface, it would have to allow the following operations: LocalDate - LocalDate -> Period, Integer - Integer -> Integer, LocalDateTime - LocalDateTime -> Duration, etc. overlapping can be done for any Comparable class, overlappingAmount cannot; it requires an additional interface difference(a,b). No such interface exists that all implement, although each class has their subtract method.\nWhat we can do is help something like this:\nPair<T,T> overlappingRange(interval1, interval2)\nwhich returns (max(A.start, B.start), min(A.end, B.end)) (which is the \"area\" of overlap). Then they can do the subtract operation on those two points (or can provide a function that that turns it into a number) See https://stackoverflow.com/a/36035369", "url": "https://github.com/kiegroup/optaplanner/pull/865#discussion_r488071381", "createdAt": "2020-09-14T16:38:30Z", "author": {"login": "Christopher-Chianelli"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/meetingscheduling/optional/score/MeetingSchedulingConstraintProvider.java", "diffHunk": "@@ -86,8 +89,12 @@ protected Constraint requiredAttendanceConflict(ConstraintFactory constraintFact\n                         equal((leftRequiredAttendance, rightRequiredAttendance, leftAssignment) -> rightRequiredAttendance\n                                 .getMeeting(),\n                                 MeetingAssignment::getMeeting),\n-                        filtering((leftRequiredAttendance, rightRequiredAttendance, leftAssignment,\n-                                rightAssignment) -> rightAssignment.calculateOverlap(leftAssignment) > 0))\n+                        overlaps((attendee1, attendee2, assignment) -> assignment.getStartingTimeGrain().getGrainIndex(),\n+                                (attendee1, attendee2, assignment) -> assignment.getStartingTimeGrain().getGrainIndex() +\n+                                        assignment.getMeeting().getDurationInGrains(),\n+                                assignment -> assignment.getStartingTimeGrain().getGrainIndex(),\n+                                assignment -> assignment.getStartingTimeGrain().getGrainIndex() +\n+                                        assignment.getMeeting().getDurationInGrains()))\n                 .penalizeConfigurable(\"Required attendance conflict\",\n                         (leftRequiredAttendance, rightRequiredAttendance, leftAssignment, rightAssignment) -> rightAssignment\n                                 .calculateOverlap(leftAssignment));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg4Mjc3MA=="}, "originalCommit": {"oid": "671103550e740d691524256ea572ffc5b1e642ee"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4386, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}