{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczMzEyODk4", "number": 679, "title": "PLANNER-1829: Add a ConstraintProvider for Scrabble", "bodyText": "Note: FAST_ASSERT passes, but FULL_ASSERT fails\n[ERROR] Tests run: 2, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 7.996 s <<< FAILURE! - in org.optaplanner.examples.scrabble.app.ScrabblePerformanceTest\n[ERROR] solveModel[0: NONE]  Time elapsed: 7.994 s  <<< ERROR!\njava.lang.IllegalStateException: \nScore corruption (4hard): the workingScore (-130init/2hard/0medium/-13soft) is not the uncorruptedScore (-130init/-2hard/0medium/-13soft) after completedAction ([ OPTAPLANNER  {HORIZONTAL -> HORIZONTAL},  OPTAPLANNER  {(1,20) -> (1,20)}]):\nScore corruption analysis:\n  The corrupted scoreDirector has 4 ConstraintMatch(s) which are in excess (and should not be there):\n    org.optaplanner.examples.scrabble.domain/Character confict/[(12,20)]=1hard/0medium/0soft\n    org.optaplanner.examples.scrabble.domain/Character confict/[(13,20)]=1hard/0medium/0soft\n    org.optaplanner.examples.scrabble.domain/Pull to the center/[ MICROCONTAINER ]=0hard/0medium/0soft\n    org.optaplanner.examples.scrabble.domain/Pull to the center/[ OPTAPLANNER ]=0hard/0medium/-13soft\n  The corrupted scoreDirector has 136 ConstraintMatch(s) which are missing:\n    org.optaplanner.examples.scrabble.solver/Character confict/[(12,20)]=-1hard/0medium/0soft\n    org.optaplanner.examples.scrabble.solver/Character confict/[(13,20)]=-1hard/0medium/0soft\n    org.optaplanner.examples.scrabble.solver/Maximize merges per word/[0,  AEROGEAR ]=0hard/0medium/0soft\n    org.optaplanner.examples.scrabble.solver/Maximize merges per word/[0,  ACTIVEMQ ]=0hard/0medium/0soft\n    org.optaplanner.examples.scrabble.solver/Maximize merges per word/[0,  CAMEL ]=0hard/0medium/0soft\n    org.optaplanner.examples.scrabble.solver/Maximize merges per word/[0,  CXF ]=0hard/0medium/0soft\n    org.optaplanner.examples.scrabble.solver/Maximize merges per word/[0,  KARAF ]=0hard/0medium/0soft\n    org.optaplanner.examples.scrabble.solver/Maximize merges per word/[0,  SERVICEMIX ]=0hard/0medium/0soft\n    ... 128 more\n  Maybe there is a bug in the score constraints of those ConstraintMatch(s).\n  Maybe a score constraint doesn't select all the entities it depends on, but finds some through a reference in a selected entity. This corrupts incremental score calculation, because the constraint is not re-evaluated if such a non-selected entity changes.\nShadow variable corruption in the corrupted scoreDirector:\n  None\n\tat org.optaplanner.core.impl.score.director.AbstractScoreDirector.assertScoreFromScratch(AbstractScoreDirector.java:663)\n\tat org.optaplanner.core.impl.score.director.AbstractScoreDirector.assertWorkingScoreFromScratch(AbstractScoreDirector.java:641)\n\tat org.optaplanner.core.impl.score.director.AbstractScoreDirector.doAndProcessMove(AbstractScoreDirector.java:191)\n\tat org.optaplanner.core.impl.constructionheuristic.decider.ConstructionHeuristicDecider.doMove(ConstructionHeuristicDecider.java:126)\n\tat org.optaplanner.core.impl.constructionheuristic.decider.ConstructionHeuristicDecider.decideNextStep(ConstructionHeuristicDecider.java:100)\n\tat org.optaplanner.core.impl.constructionheuristic.DefaultConstructionHeuristicPhase.solve(DefaultConstructionHeuristicPhase.java:74)\n\tat org.optaplanner.core.impl.solver.AbstractSolver.runPhases(AbstractSolver.java:98)\n\tat org.optaplanner.core.impl.solver.DefaultSolver.solve(DefaultSolver.java:189)\n\tat org.optaplanner.examples.common.app.SolverPerformanceTest.runSpeedTest(SolverPerformanceTest.java:98)\n\tat org.optaplanner.examples.scrabble.app.ScrabblePerformanceTest.solveModel(ScrabblePerformanceTest.java:44)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)\n\tat org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat java.lang.Thread.run(Thread.java:748)", "createdAt": "2020-02-10T19:34:25Z", "url": "https://github.com/kiegroup/optaplanner/pull/679", "merged": true, "mergeCommit": {"oid": "f5de42d6f2c09c43bf88367f1bc40c91f67f7bbd"}, "closed": true, "closedAt": "2020-02-18T07:40:22Z", "author": {"login": "Christopher-Chianelli"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcDCWENAH2gAyMzczMzEyODk4OmE0MTViYWRjNWEyMGYwYmI5YjFmMWYwOTFjYjgwYTYxNWVhNGE0ZWI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcETrrYgH2gAyMzczMzEyODk4OmRiOWYwYzAwNDNlNTkyODUwMzBhMmM3NDQzZmRmZjllYjk0YmY1N2Y=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a415badc5a20f0bb9b1f1f091cb80a615ea4a4eb", "author": {"user": {"login": "Christopher-Chianelli", "name": "Christopher Chianelli"}}, "url": "https://github.com/kiegroup/optaplanner/commit/a415badc5a20f0bb9b1f1f091cb80a615ea4a4eb", "committedDate": "2020-02-10T19:31:46Z", "message": "PLANNER-1829: Add a ConstraintProvider for Scrabble\n\nNote: FAST_ASSERT passes, but FULL_ASSERT fails"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MjA5OTQx", "url": "https://github.com/kiegroup/optaplanner/pull/679#pullrequestreview-356209941", "createdAt": "2020-02-10T19:40:49Z", "commit": {"oid": "a415badc5a20f0bb9b1f1f091cb80a615ea4a4eb"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOTo0MDo1MFrOFnzDvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOTo0MTo1MlrOFnzF6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI3NTMyNw==", "bodyText": "Some suggestions, for reasons of performance:\n\nThe first getX()/getY() comparisons should be done using Joiners.equal(...).\nI would consider first filtering out all the cells where c1.hasWordSet(...) and only then joining with c2.", "url": "https://github.com/kiegroup/optaplanner/pull/679#discussion_r377275327", "createdAt": "2020-02-10T19:40:50Z", "author": {"login": "triceo"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/scrabble/optional/score/ScrabbleConstraintProvider.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.optaplanner.examples.scrabble.optional.score;\n+\n+import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintCollectors;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.core.impl.score.stream.bi.FilteringBiJoiner;\n+import org.optaplanner.examples.scrabble.domain.ScrabbleWordDirection;\n+import org.optaplanner.examples.scrabble.domain.ScrabbleCell;\n+import org.optaplanner.examples.scrabble.domain.ScrabbleWordAssignment;\n+\n+public class ScrabbleConstraintProvider implements ConstraintProvider {\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n+        return new Constraint[]{\n+                                characterConflict(constraintFactory),\n+                                noParallelHorizontalNeighbours(constraintFactory),\n+                                noParallelVerticalNeighbours(constraintFactory),\n+                                outOfGrid(constraintFactory),\n+                                maximizeMergesPerWord(constraintFactory),\n+                                pullToCenter(constraintFactory)\n+        };\n+    }\n+\n+    private Constraint characterConflict(ConstraintFactory cf) {\n+        return cf.from(ScrabbleCell.class)\n+                 .filter(sc -> sc.getCharacterSet().size() >= 2)\n+                 .penalize(\"Character confict\", HardMediumSoftScore.ONE_HARD, sc -> 1 - sc.getCharacterSet().size());\n+    }\n+\n+    private Constraint noParallelHorizontalNeighbours(ConstraintFactory cf) {\n+        return cf.fromUniquePair(ScrabbleCell.class)\n+                 .filter((c1, c2) -> c1.getX() == c2.getX() &&\n+                                     Math.abs(c1.getY() - c2.getY()) == 1 &&\n+                                     c1.hasWordSet(ScrabbleWordDirection.HORIZONTAL) &&\n+                                     c2.hasWordSet(ScrabbleWordDirection.HORIZONTAL))\n+                 .penalize(\"No parallel horizontal neighbours\", HardMediumSoftScore.ONE_HARD);\n+    }\n+\n+    private Constraint noParallelVerticalNeighbours(ConstraintFactory cf) {\n+        return cf.fromUniquePair(ScrabbleCell.class)\n+                 .filter((c1, c2) -> c1.getY() == c2.getY() &&\n+                                     Math.abs(c1.getX() - c2.getX()) == 1 &&\n+                                     c1.hasWordSet(ScrabbleWordDirection.VERTICAL) &&\n+                                     c2.hasWordSet(ScrabbleWordDirection.VERTICAL))\n+                 .penalize(\"No parallel vertical neighbours\", HardMediumSoftScore.ONE_HARD);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a415badc5a20f0bb9b1f1f091cb80a615ea4a4eb"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI3NTg4MA==", "bodyText": "Please replace FilteringBiJoiner with Joiners.filtering(...).", "url": "https://github.com/kiegroup/optaplanner/pull/679#discussion_r377275880", "createdAt": "2020-02-10T19:41:52Z", "author": {"login": "triceo"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/scrabble/optional/score/ScrabbleConstraintProvider.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.optaplanner.examples.scrabble.optional.score;\n+\n+import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintCollectors;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.core.impl.score.stream.bi.FilteringBiJoiner;\n+import org.optaplanner.examples.scrabble.domain.ScrabbleWordDirection;\n+import org.optaplanner.examples.scrabble.domain.ScrabbleCell;\n+import org.optaplanner.examples.scrabble.domain.ScrabbleWordAssignment;\n+\n+public class ScrabbleConstraintProvider implements ConstraintProvider {\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n+        return new Constraint[]{\n+                                characterConflict(constraintFactory),\n+                                noParallelHorizontalNeighbours(constraintFactory),\n+                                noParallelVerticalNeighbours(constraintFactory),\n+                                outOfGrid(constraintFactory),\n+                                maximizeMergesPerWord(constraintFactory),\n+                                pullToCenter(constraintFactory)\n+        };\n+    }\n+\n+    private Constraint characterConflict(ConstraintFactory cf) {\n+        return cf.from(ScrabbleCell.class)\n+                 .filter(sc -> sc.getCharacterSet().size() >= 2)\n+                 .penalize(\"Character confict\", HardMediumSoftScore.ONE_HARD, sc -> 1 - sc.getCharacterSet().size());\n+    }\n+\n+    private Constraint noParallelHorizontalNeighbours(ConstraintFactory cf) {\n+        return cf.fromUniquePair(ScrabbleCell.class)\n+                 .filter((c1, c2) -> c1.getX() == c2.getX() &&\n+                                     Math.abs(c1.getY() - c2.getY()) == 1 &&\n+                                     c1.hasWordSet(ScrabbleWordDirection.HORIZONTAL) &&\n+                                     c2.hasWordSet(ScrabbleWordDirection.HORIZONTAL))\n+                 .penalize(\"No parallel horizontal neighbours\", HardMediumSoftScore.ONE_HARD);\n+    }\n+\n+    private Constraint noParallelVerticalNeighbours(ConstraintFactory cf) {\n+        return cf.fromUniquePair(ScrabbleCell.class)\n+                 .filter((c1, c2) -> c1.getY() == c2.getY() &&\n+                                     Math.abs(c1.getX() - c2.getX()) == 1 &&\n+                                     c1.hasWordSet(ScrabbleWordDirection.VERTICAL) &&\n+                                     c2.hasWordSet(ScrabbleWordDirection.VERTICAL))\n+                 .penalize(\"No parallel vertical neighbours\", HardMediumSoftScore.ONE_HARD);\n+    }\n+\n+    private Constraint outOfGrid(ConstraintFactory cf) {\n+        return cf.from(ScrabbleWordAssignment.class)\n+                 .filter(ScrabbleWordAssignment::isOutOfGrid)\n+                 .penalize(\"Out of grid\", HardMediumSoftScore.ONE_HARD, swa -> swa.getWord().length());\n+    }\n+\n+    private Constraint maximizeMergesPerWord(ConstraintFactory cf) {\n+        return cf.from(ScrabbleWordAssignment.class)\n+                 .join(ScrabbleCell.class, new FilteringBiJoiner<>((swa, sc) -> sc.getWordSet().contains(swa) && sc.hasMerge()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a415badc5a20f0bb9b1f1f091cb80a615ea4a4eb"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MjE3NjUz", "url": "https://github.com/kiegroup/optaplanner/pull/679#pullrequestreview-356217653", "createdAt": "2020-02-10T19:52:52Z", "commit": {"oid": "a415badc5a20f0bb9b1f1f091cb80a615ea4a4eb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOTo1Mjo1MlrOFnzbXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOTo1Mjo1MlrOFnzbXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI4MTM3NQ==", "bodyText": "@Christopher-Chianelli  This is where the score corruption is going to be. DRL does this:\nscoreHolder.addHardConstraintMatch(kcontext, 1 - $size);\n\nSo the number will be 0 or less. But that is because in DRL, you need to input a negative number to penalize.\nIn CS, you have the penalize() call, and that expects a positive number.\nTherefore I think that if you invert the logic of the match weigher here, this score corruption will go away.", "url": "https://github.com/kiegroup/optaplanner/pull/679#discussion_r377281375", "createdAt": "2020-02-10T19:52:52Z", "author": {"login": "triceo"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/scrabble/optional/score/ScrabbleConstraintProvider.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.optaplanner.examples.scrabble.optional.score;\n+\n+import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintCollectors;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.core.impl.score.stream.bi.FilteringBiJoiner;\n+import org.optaplanner.examples.scrabble.domain.ScrabbleWordDirection;\n+import org.optaplanner.examples.scrabble.domain.ScrabbleCell;\n+import org.optaplanner.examples.scrabble.domain.ScrabbleWordAssignment;\n+\n+public class ScrabbleConstraintProvider implements ConstraintProvider {\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n+        return new Constraint[]{\n+                                characterConflict(constraintFactory),\n+                                noParallelHorizontalNeighbours(constraintFactory),\n+                                noParallelVerticalNeighbours(constraintFactory),\n+                                outOfGrid(constraintFactory),\n+                                maximizeMergesPerWord(constraintFactory),\n+                                pullToCenter(constraintFactory)\n+        };\n+    }\n+\n+    private Constraint characterConflict(ConstraintFactory cf) {\n+        return cf.from(ScrabbleCell.class)\n+                 .filter(sc -> sc.getCharacterSet().size() >= 2)\n+                 .penalize(\"Character confict\", HardMediumSoftScore.ONE_HARD, sc -> 1 - sc.getCharacterSet().size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a415badc5a20f0bb9b1f1f091cb80a615ea4a4eb"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f41070583c35bac44a83f6640697cb999814c8f1", "author": {"user": {"login": "Christopher-Chianelli", "name": "Christopher Chianelli"}}, "url": "https://github.com/kiegroup/optaplanner/commit/f41070583c35bac44a83f6640697cb999814c8f1", "committedDate": "2020-02-10T20:54:52Z", "message": "Fix penalty for \"Character Conflict\" and reward for \"Maximize merges per word\"; optimize parallel constraints."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8313e66887e52cc13e3e7cc461cb54e7cae6eb0d", "author": {"user": {"login": "Christopher-Chianelli", "name": "Christopher Chianelli"}}, "url": "https://github.com/kiegroup/optaplanner/commit/8313e66887e52cc13e3e7cc461cb54e7cae6eb0d", "committedDate": "2020-02-10T21:39:00Z", "message": "Use method reference instead of lambda in pullToCenter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2NDU4NzUx", "url": "https://github.com/kiegroup/optaplanner/pull/679#pullrequestreview-356458751", "createdAt": "2020-02-11T07:47:37Z", "commit": {"oid": "8313e66887e52cc13e3e7cc461cb54e7cae6eb0d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwNzo0NzozN1rOFn_j4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwNzo0NzozN1rOFn_j4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ4MDE2Mg==", "bodyText": "Looking at the code now, the join().filter() could be replaced by ifExists(...) with the appropriate joiners. The performance of that would likely be the best - only not sure if it would match 1:1 with what the DRL does. If FULL_ASSERT passes, I say let's do it.", "url": "https://github.com/kiegroup/optaplanner/pull/679#discussion_r377480162", "createdAt": "2020-02-11T07:47:37Z", "author": {"login": "triceo"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/scrabble/optional/score/ScrabbleConstraintProvider.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.optaplanner.examples.scrabble.optional.score;\n+\n+import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintCollectors;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.core.api.score.stream.Joiners;\n+import org.optaplanner.examples.scrabble.domain.ScrabbleWordDirection;\n+import org.optaplanner.examples.scrabble.domain.ScrabbleCell;\n+import org.optaplanner.examples.scrabble.domain.ScrabbleWordAssignment;\n+\n+public class ScrabbleConstraintProvider implements ConstraintProvider {\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n+        return new Constraint[]{\n+                                characterConflict(constraintFactory),\n+                                noParallelHorizontalNeighbours(constraintFactory),\n+                                noParallelVerticalNeighbours(constraintFactory),\n+                                outOfGrid(constraintFactory),\n+                                maximizeMergesPerWord(constraintFactory),\n+                                pullToCenter(constraintFactory)\n+        };\n+    }\n+\n+    private Constraint characterConflict(ConstraintFactory cf) {\n+        return cf.from(ScrabbleCell.class)\n+                 .filter(sc -> sc.getCharacterSet().size() >= 2)\n+                 .penalize(\"Character confict\", HardMediumSoftScore.ONE_HARD, sc -> sc.getCharacterSet().size() - 1);\n+    }\n+\n+    private Constraint noParallelHorizontalNeighbours(ConstraintFactory cf) {\n+        return cf.from(ScrabbleCell.class).filter(sc -> sc.hasWordSet(ScrabbleWordDirection.HORIZONTAL))\n+                 .join(ScrabbleCell.class,\n+                       Joiners.equal(ScrabbleCell::getX), Joiners.lessThan(ScrabbleCell::getId),\n+                       Joiners.filtering((first, other) -> other.hasWordSet(ScrabbleWordDirection.HORIZONTAL)))\n+                 .filter((c1, c2) -> Math.abs(c1.getY() - c2.getY()) == 1)\n+                 .penalize(\"No parallel horizontal neighbours\", HardMediumSoftScore.ONE_HARD);\n+    }\n+\n+    private Constraint noParallelVerticalNeighbours(ConstraintFactory cf) {\n+        return cf.from(ScrabbleCell.class).filter(sc -> sc.hasWordSet(ScrabbleWordDirection.VERTICAL))\n+                 .join(ScrabbleCell.class,\n+                       Joiners.equal(ScrabbleCell::getY), Joiners.lessThan(ScrabbleCell::getId),\n+                       Joiners.filtering((first, other) -> other.hasWordSet(ScrabbleWordDirection.VERTICAL)))\n+                 .filter((c1, c2) -> Math.abs(c1.getX() - c2.getX()) == 1)\n+                 .penalize(\"No parallel vertical neighbours\", HardMediumSoftScore.ONE_HARD);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8313e66887e52cc13e3e7cc461cb54e7cae6eb0d"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2NDY0MTIw", "url": "https://github.com/kiegroup/optaplanner/pull/679#pullrequestreview-356464120", "createdAt": "2020-02-11T08:02:29Z", "commit": {"oid": "8313e66887e52cc13e3e7cc461cb54e7cae6eb0d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwODowMjoyOVrOFn_1XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwODowMjoyOVrOFn_1XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ4NDYzNg==", "bodyText": "When you're done with the constraint provider, please bring this in sync with the rest of the examples. (Only scoreDrl is enabled, the rest is commented out.)", "url": "https://github.com/kiegroup/optaplanner/pull/679#discussion_r377484636", "createdAt": "2020-02-11T08:02:29Z", "author": {"login": "triceo"}, "path": "optaplanner-examples/src/main/resources/org/optaplanner/examples/scrabble/solver/scrabbleSolverConfig.xml", "diffHunk": "@@ -6,10 +6,15 @@\n   <solutionClass>org.optaplanner.examples.scrabble.domain.ScrabbleSolution</solutionClass>\n   <entityClass>org.optaplanner.examples.scrabble.domain.ScrabbleWordAssignment</entityClass>\n   <entityClass>org.optaplanner.examples.scrabble.domain.ScrabbleCell</entityClass>\n+  <environmentMode>FULL_ASSERT</environmentMode>\n \n   <!-- Score configuration -->\n   <scoreDirectorFactory>\n-    <scoreDrl>org/optaplanner/examples/scrabble/solver/scrabbleScoreRules.drl</scoreDrl>\n+    <constraintProviderClass>org.optaplanner.examples.scrabble.optional.score.ScrabbleConstraintProvider</constraintProviderClass>\n     <initializingScoreTrend>ONLY_DOWN</initializingScoreTrend>\n+    <assertionScoreDirectorFactory>\n+      <scoreDrl>org/optaplanner/examples/scrabble/solver/scrabbleScoreRules.drl</scoreDrl>\n+      <initializingScoreTrend>ONLY_DOWN</initializingScoreTrend>\n+    </assertionScoreDirectorFactory>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8313e66887e52cc13e3e7cc461cb54e7cae6eb0d"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ff94274b96677ecf90f0a408c759b36e40475f0", "author": {"user": {"login": "Christopher-Chianelli", "name": "Christopher Chianelli"}}, "url": "https://github.com/kiegroup/optaplanner/commit/3ff94274b96677ecf90f0a408c759b36e40475f0", "committedDate": "2020-02-12T18:14:56Z", "message": "Use ifExists for parallel constraints in Scrabble, use Drools in Solver config."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3NzAwODcx", "url": "https://github.com/kiegroup/optaplanner/pull/679#pullrequestreview-357700871", "createdAt": "2020-02-12T18:51:15Z", "commit": {"oid": "3ff94274b96677ecf90f0a408c759b36e40475f0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxODo1MToxNVrOFo6dIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxODo1MToxNVrOFo6dIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ0NTA4OQ==", "bodyText": "One last thing, @Christopher-Chianelli, and then I'll merge: this isn't the proper code style, we don't do alignment on brackets. Please check the rest of the file as well, it's not the only place I see it.", "url": "https://github.com/kiegroup/optaplanner/pull/679#discussion_r378445089", "createdAt": "2020-02-12T18:51:15Z", "author": {"login": "triceo"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/scrabble/optional/score/ScrabbleConstraintProvider.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package org.optaplanner.examples.scrabble.optional.score;\n+\n+import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintCollectors;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.core.api.score.stream.Joiners;\n+import org.optaplanner.examples.scrabble.domain.ScrabbleWordDirection;\n+import org.optaplanner.examples.scrabble.domain.ScrabbleCell;\n+import org.optaplanner.examples.scrabble.domain.ScrabbleWordAssignment;\n+\n+public class ScrabbleConstraintProvider implements ConstraintProvider {\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n+        return new Constraint[]{\n+                                characterConflict(constraintFactory),\n+                                noParallelHorizontalNeighbours(constraintFactory),\n+                                noParallelVerticalNeighbours(constraintFactory),\n+                                outOfGrid(constraintFactory),\n+                                maximizeMergesPerWord(constraintFactory),\n+                                pullToCenter(constraintFactory)\n+        };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ff94274b96677ecf90f0a408c759b36e40475f0"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3NzAxOTA4", "url": "https://github.com/kiegroup/optaplanner/pull/679#pullrequestreview-357701908", "createdAt": "2020-02-12T18:52:43Z", "commit": {"oid": "3ff94274b96677ecf90f0a408c759b36e40475f0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxODo1Mjo0M1rOFo6gTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxODo1Mjo0M1rOFo6gTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ0NTkwMw==", "bodyText": "This needs to be commented out before merging.", "url": "https://github.com/kiegroup/optaplanner/pull/679#discussion_r378445903", "createdAt": "2020-02-12T18:52:43Z", "author": {"login": "triceo"}, "path": "optaplanner-examples/src/main/resources/org/optaplanner/examples/scrabble/solver/scrabbleSolverConfig.xml", "diffHunk": "@@ -6,10 +6,15 @@\n   <solutionClass>org.optaplanner.examples.scrabble.domain.ScrabbleSolution</solutionClass>\n   <entityClass>org.optaplanner.examples.scrabble.domain.ScrabbleWordAssignment</entityClass>\n   <entityClass>org.optaplanner.examples.scrabble.domain.ScrabbleCell</entityClass>\n+  <environmentMode>FULL_ASSERT</environmentMode>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ff94274b96677ecf90f0a408c759b36e40475f0"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2ffa9376f3e5eab49e8b1795e2bfce9eb37d290", "author": {"user": {"login": "Christopher-Chianelli", "name": "Christopher Chianelli"}}, "url": "https://github.com/kiegroup/optaplanner/commit/f2ffa9376f3e5eab49e8b1795e2bfce9eb37d290", "committedDate": "2020-02-12T20:38:51Z", "message": "Remove duplicate FULL_ASSERT line in Scrabble."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db9f0c0043e59285030a2c7443fdff9eb94bf57f", "author": {"user": {"login": "Christopher-Chianelli", "name": "Christopher Chianelli"}}, "url": "https://github.com/kiegroup/optaplanner/commit/db9f0c0043e59285030a2c7443fdff9eb94bf57f", "committedDate": "2020-02-14T18:17:41Z", "message": "Make the Scrabble Constraint Provider code match the IDEA Formatter."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3079, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}