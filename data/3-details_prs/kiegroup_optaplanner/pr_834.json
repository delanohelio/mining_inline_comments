{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4MzM0Mzcz", "number": 834, "title": "PLANNER-2024 Switch solver configuration from XStream to JAXB", "bodyText": "switch solver config to JAXB\n switch benchmark config to JAXB\n switch benchmark report to JAXB\n\nWhat is going to be addressed in a new PR:\n\nremove XStream annotations and dependency (otherwise, this PR would become too big and difficult to review)\nuse jakarta EE spec jars (and check corresponding implementation dependency)", "createdAt": "2020-07-13T15:36:37Z", "url": "https://github.com/kiegroup/optaplanner/pull/834", "merged": true, "mergeCommit": {"oid": "d83ab9c65b36881116546aa85271b6acae37bcb1"}, "closed": true, "closedAt": "2020-07-15T18:41:57Z", "author": {"login": "rsynek"}, "timelineItems": {"totalCount": 38, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc0wzX3ABqjM1NDI4MjQ4MzY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc1NuBRABqjM1NDk0NjYyNzE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0f762353fd1fb6b1ce374f45e76313292e35d87e", "author": {"user": {"login": "rsynek", "name": "Radovan Synek"}}, "url": "https://github.com/kiegroup/optaplanner/commit/0f762353fd1fb6b1ce374f45e76313292e35d87e", "committedDate": "2020-07-13T15:33:30Z", "message": "Convert benchmark results into JAXB"}, "afterCommit": {"oid": "3eaa5c60439b61368dc3276f9d61c44772353e5a", "author": {"user": {"login": "rsynek", "name": "Radovan Synek"}}, "url": "https://github.com/kiegroup/optaplanner/commit/3eaa5c60439b61368dc3276f9d61c44772353e5a", "committedDate": "2020-07-14T07:21:22Z", "message": "Remove unused XStreamConfigReader"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3ODUyNTg1", "url": "https://github.com/kiegroup/optaplanner/pull/834#pullrequestreview-447852585", "createdAt": "2020-07-14T07:23:53Z", "commit": {"oid": "3eaa5c60439b61368dc3276f9d61c44772353e5a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNzoyMzo1M1rOGxHe1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNzoyMzo1M1rOGxHe1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE1NTk5MA==", "bodyText": "TODO: check if we need such an adapter for JAXB too.", "url": "https://github.com/kiegroup/optaplanner/pull/834#discussion_r454155990", "createdAt": "2020-07-14T07:23:53Z", "author": {"login": "rsynek"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/solver/io/XStreamConfigReader.java", "diffHunk": "@@ -1,90 +0,0 @@\n-/*\n- * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.optaplanner.core.impl.solver.io;\n-\n-import java.io.File;\n-\n-import org.optaplanner.core.api.domain.solution.PlanningSolution;\n-import org.optaplanner.core.config.solver.SolverConfig;\n-\n-import com.thoughtworks.xstream.XStream;\n-import com.thoughtworks.xstream.converters.extended.FileConverter;\n-\n-public final class XStreamConfigReader {\n-\n-    /**\n-     * Builds the {@link XStream} setup which is used to read/write {@link SolverConfig solver configs} and benchmark configs.\n-     * It should never be used to read/write {@link PlanningSolution solutions}.\n-     * Use XStreamSolutionFileIO for that instead.\n-     *\n-     * @return never null.\n-     */\n-    public static XStream buildXStream() {\n-        XStream xStream = new XStream();\n-        xStream.setMode(XStream.ID_REFERENCES);\n-        xStream.aliasSystemAttribute(\"xStreamId\", \"id\");\n-        xStream.aliasSystemAttribute(\"xStreamRef\", \"reference\");\n-        xStream.processAnnotations(SolverConfig.class);\n-        XStream.setupDefaultSecurity(xStream);\n-        xStream.allowTypesByRegExp(new String[] { \"org\\\\.optaplanner\\\\.\\\\w+\\\\.config\\\\..*\" });\n-        return xStream;\n-    }\n-\n-    /**\n-     * As defined by {@link #buildXStream()}.\n-     *\n-     * @param classLoader sometimes null, ignored if null\n-     * @return never null\n-     */\n-    public static XStream buildXStream(ClassLoader classLoader) {\n-        XStream xStream = buildXStream();\n-        if (classLoader != null) {\n-            xStream.setClassLoader(classLoader);\n-        }\n-        return xStream;\n-    }\n-\n-    public static XStream buildXStream(ClassLoader classLoader, Class... xStreamAnnotations) {\n-        XStream xStream = buildXStream(classLoader);\n-        if (xStreamAnnotations.length > 0) {\n-            xStream.processAnnotations(xStreamAnnotations);\n-            xStream.allowTypes(xStreamAnnotations);\n-        }\n-        return xStream;\n-    }\n-\n-    public static XStream buildXStreamPortable(ClassLoader classLoader, Class... xStreamAnnotations) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eaa5c60439b61368dc3276f9d61c44772353e5a"}, "originalPosition": 70}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3ODU1Mzgz", "url": "https://github.com/kiegroup/optaplanner/pull/834#pullrequestreview-447855383", "createdAt": "2020-07-14T07:28:08Z", "commit": {"oid": "3eaa5c60439b61368dc3276f9d61c44772353e5a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNzoyODowOFrOGxHnqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNzoyODowOFrOGxHnqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE1ODI0OQ==", "bodyText": "I think that this is a reason to throw.", "url": "https://github.com/kiegroup/optaplanner/pull/834#discussion_r454158249", "createdAt": "2020-07-14T07:28:08Z", "author": {"login": "triceo"}, "path": "optaplanner-benchmark/src/main/java/org/optaplanner/benchmark/impl/io/jaxb/OffsetDateTimeJaxbAdapter.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.benchmark.impl.io.jaxb;\n+\n+import java.time.DateTimeException;\n+import java.time.OffsetDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeFormatterBuilder;\n+import java.time.temporal.ChronoField;\n+\n+import javax.xml.bind.annotation.adapters.XmlAdapter;\n+\n+public class OffsetDateTimeJaxbAdapter extends XmlAdapter<String, OffsetDateTime> {\n+    private final DateTimeFormatter formatter;\n+\n+    public OffsetDateTimeJaxbAdapter() {\n+        formatter = new DateTimeFormatterBuilder()\n+                .appendPattern(\"uuuu-MM-dd'T'HH:mm:ss\")\n+                .appendFraction(ChronoField.NANO_OF_SECOND, 0, 9, true)\n+                .appendOffsetId()\n+                .toFormatter();\n+    }\n+\n+    @Override\n+    public OffsetDateTime unmarshal(String offsetDateTimeString) {\n+        if (offsetDateTimeString == null || offsetDateTimeString.isEmpty()) {\n+            return null;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eaa5c60439b61368dc3276f9d61c44772353e5a"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3ODU1NjA3", "url": "https://github.com/kiegroup/optaplanner/pull/834#pullrequestreview-447855607", "createdAt": "2020-07-14T07:28:29Z", "commit": {"oid": "3eaa5c60439b61368dc3276f9d61c44772353e5a"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNzoyODoyOVrOGxHoSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNzo0MTowNFrOGxIByw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE1ODQxMA==", "bodyText": "Likewise.", "url": "https://github.com/kiegroup/optaplanner/pull/834#discussion_r454158410", "createdAt": "2020-07-14T07:28:29Z", "author": {"login": "triceo"}, "path": "optaplanner-benchmark/src/main/java/org/optaplanner/benchmark/impl/io/jaxb/OffsetDateTimeJaxbAdapter.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.benchmark.impl.io.jaxb;\n+\n+import java.time.DateTimeException;\n+import java.time.OffsetDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeFormatterBuilder;\n+import java.time.temporal.ChronoField;\n+\n+import javax.xml.bind.annotation.adapters.XmlAdapter;\n+\n+public class OffsetDateTimeJaxbAdapter extends XmlAdapter<String, OffsetDateTime> {\n+    private final DateTimeFormatter formatter;\n+\n+    public OffsetDateTimeJaxbAdapter() {\n+        formatter = new DateTimeFormatterBuilder()\n+                .appendPattern(\"uuuu-MM-dd'T'HH:mm:ss\")\n+                .appendFraction(ChronoField.NANO_OF_SECOND, 0, 9, true)\n+                .appendOffsetId()\n+                .toFormatter();\n+    }\n+\n+    @Override\n+    public OffsetDateTime unmarshal(String offsetDateTimeString) {\n+        if (offsetDateTimeString == null || offsetDateTimeString.isEmpty()) {\n+            return null;\n+        }\n+        try {\n+            return OffsetDateTime.from(formatter.parse(offsetDateTimeString));\n+        } catch (DateTimeException e) {\n+            throw new IllegalStateException(\"Failed to convert string (\" + offsetDateTimeString + \") to type (\"\n+                    + OffsetDateTime.class.getName() + \").\");\n+        }\n+    }\n+\n+    @Override\n+    public String marshal(OffsetDateTime offsetDateTimeObject) {\n+        if (offsetDateTimeObject == null) {\n+            return null;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eaa5c60439b61368dc3276f9d61c44772353e5a"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE1OTI5Mg==", "bodyText": "For the sake of consistency, I'd use Objects.equals() here as well.", "url": "https://github.com/kiegroup/optaplanner/pull/834#discussion_r454159292", "createdAt": "2020-07-14T07:30:06Z", "author": {"login": "triceo"}, "path": "optaplanner-benchmark/src/main/java/org/optaplanner/benchmark/impl/loader/InstanceProblemProvider.java", "diffHunk": "@@ -57,22 +67,24 @@ public void writeSolution(Solution_ solution, SubSingleBenchmarkResult subSingle\n     public boolean equals(Object o) {\n         if (this == o) {\n             return true;\n-        } else if (o instanceof InstanceProblemProvider) {\n-            InstanceProblemProvider other = (InstanceProblemProvider) o;\n-            return problem.equals(other.problem);\n-        } else {\n+        }\n+        if (!(o instanceof InstanceProblemProvider)) {\n             return false;\n         }\n+        InstanceProblemProvider<?> that = (InstanceProblemProvider<?>) o;\n+        return problemName.equals(that.problemName) &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eaa5c60439b61368dc3276f9d61c44772353e5a"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE2MTc4Ng==", "bodyText": "Are we sure JAXB doesn't already have an exception that could be used?", "url": "https://github.com/kiegroup/optaplanner/pull/834#discussion_r454161786", "createdAt": "2020-07-14T07:34:59Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/io/XmlUnmarshallingException.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.io;\n+\n+public class XmlUnmarshallingException extends RuntimeException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eaa5c60439b61368dc3276f9d61c44772353e5a"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE2MjI3Mw==", "bodyText": "Personally, I don't see a need for this. It's in impl, so we needn't worry about backwards compatibility or exposing public methods. You might've as well used the class directly.", "url": "https://github.com/kiegroup/optaplanner/pull/834#discussion_r454162273", "createdAt": "2020-07-14T07:35:49Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/io/XmlIO.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.io;\n+\n+import java.io.Reader;\n+import java.io.Writer;\n+\n+/**\n+ * Generic XML read/write facility.\n+ */\n+public interface XmlIO<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eaa5c60439b61368dc3276f9d61c44772353e5a"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE2MjcwMg==", "bodyText": "Again, I think that null and empty string is the incorrect input here. It should throw, not silently fail.", "url": "https://github.com/kiegroup/optaplanner/pull/834#discussion_r454162702", "createdAt": "2020-07-14T07:36:45Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/io/jaxb/JaxbDurationAdapter.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.io.jaxb;\n+\n+import java.time.Duration;\n+\n+import javax.xml.bind.annotation.adapters.XmlAdapter;\n+\n+public class JaxbDurationAdapter extends XmlAdapter<String, Duration> {\n+\n+    @Override\n+    public Duration unmarshal(String durationString) {\n+        if (durationString == null || durationString.isEmpty()) {\n+            return null;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eaa5c60439b61368dc3276f9d61c44772353e5a"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE2MzkwMg==", "bodyText": "Personally, I think that Objects.requireNonNull() at use site would sufficehere. You're just replacing one exception with another.", "url": "https://github.com/kiegroup/optaplanner/pull/834#discussion_r454163902", "createdAt": "2020-07-14T07:39:06Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/io/jaxb/JaxbIO.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.io.jaxb;\n+\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.nio.charset.StandardCharsets;\n+\n+import javax.xml.bind.JAXBContext;\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Marshaller;\n+import javax.xml.bind.Unmarshaller;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMResult;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+\n+import org.optaplanner.core.impl.io.XmlIO;\n+import org.optaplanner.core.impl.io.XmlUnmarshallingException;\n+\n+public final class JaxbIO<T> implements XmlIO<T> {\n+    private static final int DEFAULT_INDENTATION = 2;\n+\n+    private final Unmarshaller unmarshaller;\n+    private final Marshaller marshaller;\n+    private final Class<T> rootClass;\n+    private final int indentation;\n+\n+    public JaxbIO(Class<T> rootClass) {\n+        this(rootClass, DEFAULT_INDENTATION);\n+    }\n+\n+    public JaxbIO(Class<T> rootClass, int indentation) {\n+        if (rootClass == null) {\n+            throw new IllegalArgumentException(\"Root element class cannot be null.\");\n+        }\n+        this.rootClass = rootClass;\n+        this.indentation = indentation;\n+        try {\n+            JAXBContext jaxbContext = JAXBContext.newInstance(rootClass);\n+            unmarshaller = jaxbContext.createUnmarshaller();\n+            marshaller = jaxbContext.createMarshaller();\n+            marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);\n+            marshaller.setProperty(Marshaller.JAXB_ENCODING, StandardCharsets.UTF_8.toString());\n+        } catch (JAXBException jaxbException) {\n+            String errMessage = String.format(\"Unable to create JAXB marshaller or unmarshaller for a root element class %s.\",\n+                    rootClass.getName());\n+            throw new IllegalStateException(errMessage, jaxbException);\n+        }\n+    }\n+\n+    public T read(Reader reader) {\n+        if (reader == null) {\n+            throw new IllegalArgumentException(\"Reader cannot be null.\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eaa5c60439b61368dc3276f9d61c44772353e5a"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE2Mzk3Mg==", "bodyText": "Dtto.", "url": "https://github.com/kiegroup/optaplanner/pull/834#discussion_r454163972", "createdAt": "2020-07-14T07:39:14Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/io/jaxb/JaxbIO.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.io.jaxb;\n+\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.nio.charset.StandardCharsets;\n+\n+import javax.xml.bind.JAXBContext;\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Marshaller;\n+import javax.xml.bind.Unmarshaller;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMResult;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+\n+import org.optaplanner.core.impl.io.XmlIO;\n+import org.optaplanner.core.impl.io.XmlUnmarshallingException;\n+\n+public final class JaxbIO<T> implements XmlIO<T> {\n+    private static final int DEFAULT_INDENTATION = 2;\n+\n+    private final Unmarshaller unmarshaller;\n+    private final Marshaller marshaller;\n+    private final Class<T> rootClass;\n+    private final int indentation;\n+\n+    public JaxbIO(Class<T> rootClass) {\n+        this(rootClass, DEFAULT_INDENTATION);\n+    }\n+\n+    public JaxbIO(Class<T> rootClass, int indentation) {\n+        if (rootClass == null) {\n+            throw new IllegalArgumentException(\"Root element class cannot be null.\");\n+        }\n+        this.rootClass = rootClass;\n+        this.indentation = indentation;\n+        try {\n+            JAXBContext jaxbContext = JAXBContext.newInstance(rootClass);\n+            unmarshaller = jaxbContext.createUnmarshaller();\n+            marshaller = jaxbContext.createMarshaller();\n+            marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);\n+            marshaller.setProperty(Marshaller.JAXB_ENCODING, StandardCharsets.UTF_8.toString());\n+        } catch (JAXBException jaxbException) {\n+            String errMessage = String.format(\"Unable to create JAXB marshaller or unmarshaller for a root element class %s.\",\n+                    rootClass.getName());\n+            throw new IllegalStateException(errMessage, jaxbException);\n+        }\n+    }\n+\n+    public T read(Reader reader) {\n+        if (reader == null) {\n+            throw new IllegalArgumentException(\"Reader cannot be null.\");\n+        }\n+        try {\n+            return (T) unmarshaller.unmarshal(reader);\n+        } catch (JAXBException jaxbException) {\n+            String errMessage = String.format(\"Unable to read the %s from XML.\", rootClass.getName());\n+            throw new XmlUnmarshallingException(errMessage, jaxbException);\n+        }\n+    }\n+\n+    public void write(T root, Writer writer) {\n+        if (writer == null) {\n+            throw new IllegalArgumentException(\"Writer cannot be null.\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eaa5c60439b61368dc3276f9d61c44772353e5a"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE2NDIwOA==", "bodyText": "Same comment on Objects.requireNonNull().", "url": "https://github.com/kiegroup/optaplanner/pull/834#discussion_r454164208", "createdAt": "2020-07-14T07:39:42Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/io/jaxb/JaxbIO.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.io.jaxb;\n+\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.nio.charset.StandardCharsets;\n+\n+import javax.xml.bind.JAXBContext;\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Marshaller;\n+import javax.xml.bind.Unmarshaller;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMResult;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+\n+import org.optaplanner.core.impl.io.XmlIO;\n+import org.optaplanner.core.impl.io.XmlUnmarshallingException;\n+\n+public final class JaxbIO<T> implements XmlIO<T> {\n+    private static final int DEFAULT_INDENTATION = 2;\n+\n+    private final Unmarshaller unmarshaller;\n+    private final Marshaller marshaller;\n+    private final Class<T> rootClass;\n+    private final int indentation;\n+\n+    public JaxbIO(Class<T> rootClass) {\n+        this(rootClass, DEFAULT_INDENTATION);\n+    }\n+\n+    public JaxbIO(Class<T> rootClass, int indentation) {\n+        if (rootClass == null) {\n+            throw new IllegalArgumentException(\"Root element class cannot be null.\");\n+        }\n+        this.rootClass = rootClass;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eaa5c60439b61368dc3276f9d61c44772353e5a"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE2NDkzOQ==", "bodyText": "Wouldn't this warn of try-with-resources violation?\n(It's not an issue, since StringWriter can't leak anything, but I don't think IDEs are so smart.)", "url": "https://github.com/kiegroup/optaplanner/pull/834#discussion_r454164939", "createdAt": "2020-07-14T07:41:04Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/test/java/org/optaplanner/core/config/solver/SolverConfigTest.java", "diffHunk": "@@ -19,66 +19,43 @@\n import static org.assertj.core.api.Assertions.assertThat;\n \n import java.io.IOException;\n-import java.io.InputStream;\n+import java.io.InputStreamReader;\n import java.io.Reader;\n import java.io.StringReader;\n import java.io.StringWriter;\n import java.io.Writer;\n import java.nio.charset.StandardCharsets;\n \n-import javax.xml.bind.JAXBContext;\n-import javax.xml.bind.JAXBException;\n-import javax.xml.bind.Marshaller;\n-import javax.xml.bind.Unmarshaller;\n-import javax.xml.transform.OutputKeys;\n-import javax.xml.transform.Transformer;\n-import javax.xml.transform.TransformerException;\n-import javax.xml.transform.TransformerFactory;\n-import javax.xml.transform.dom.DOMResult;\n-import javax.xml.transform.dom.DOMSource;\n-import javax.xml.transform.stream.StreamResult;\n-\n import org.apache.commons.io.IOUtils;\n import org.junit.jupiter.api.Test;\n import org.optaplanner.core.api.score.stream.ConstraintProvider;\n-import org.optaplanner.core.api.solver.SolverFactory;\n import org.optaplanner.core.config.constructionheuristic.ConstructionHeuristicPhaseConfig;\n import org.optaplanner.core.config.heuristic.selector.move.generic.ChangeMoveSelectorConfig;\n import org.optaplanner.core.config.heuristic.selector.value.ValueSelectorConfig;\n import org.optaplanner.core.impl.heuristic.selector.common.decorator.SelectionFilter;\n import org.optaplanner.core.impl.heuristic.selector.move.factory.MoveIteratorFactory;\n import org.optaplanner.core.impl.heuristic.selector.move.factory.MoveListFactory;\n import org.optaplanner.core.impl.heuristic.selector.move.generic.ChangeMove;\n+import org.optaplanner.core.impl.io.XmlIO;\n+import org.optaplanner.core.impl.io.jaxb.JaxbIO;\n import org.optaplanner.core.impl.partitionedsearch.partitioner.SolutionPartitioner;\n import org.optaplanner.core.impl.score.director.easy.EasyScoreCalculator;\n import org.optaplanner.core.impl.score.director.incremental.IncrementalScoreCalculator;\n-import org.optaplanner.core.impl.solver.io.XStreamConfigReader;\n import org.optaplanner.core.impl.testdata.domain.TestdataEntity;\n import org.optaplanner.core.impl.testdata.domain.TestdataSolution;\n import org.optaplanner.core.impl.testdata.domain.TestdataValue;\n \n-import com.thoughtworks.xstream.XStream;\n-\n public class SolverConfigTest {\n     private static final String TEST_SOLVER_CONFIG = \"testSolverConfig.xml\";\n \n-    private final Unmarshaller unmarshaller;\n-    private final Marshaller marshaller;\n-\n-    public SolverConfigTest() throws JAXBException {\n-        JAXBContext jaxbContext = JAXBContext.newInstance(SolverConfig.class);\n-        unmarshaller = jaxbContext.createUnmarshaller();\n-        marshaller = jaxbContext.createMarshaller();\n-        marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);\n-        marshaller.setProperty(Marshaller.JAXB_ENCODING, StandardCharsets.UTF_8.toString());\n-    }\n+    private final XmlIO<SolverConfig> xmlIO = new JaxbIO<>(SolverConfig.class);\n \n     @Test\n     public void jaxbXmlConfigFileRemainsSameAfterReadWrite() throws IOException {\n         SolverConfig jaxbSolverConfig = unmarshallSolverConfigFromResource(TEST_SOLVER_CONFIG);\n \n         Writer stringWriter = new StringWriter();\n-        marshall(jaxbSolverConfig, stringWriter);\n+        xmlIO.write(jaxbSolverConfig, stringWriter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eaa5c60439b61368dc3276f9d61c44772353e5a"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3OTAxMDQy", "url": "https://github.com/kiegroup/optaplanner/pull/834#pullrequestreview-447901042", "createdAt": "2020-07-14T08:33:36Z", "commit": {"oid": "de0e77ee2c0bf169bc4a954c708b59a3daa570e3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwODozMzozNlrOGxJz9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwODozMzozNlrOGxJz9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE5NDE2NA==", "bodyText": "FYI you can use requireNonNull() like this:\nmarshaller.marshal(requireNonNull(root), domResult);", "url": "https://github.com/kiegroup/optaplanner/pull/834#discussion_r454194164", "createdAt": "2020-07-14T08:33:36Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/io/jaxb/JaxbIO.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.io.jaxb;\n+\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Objects;\n+\n+import javax.xml.bind.JAXBContext;\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Marshaller;\n+import javax.xml.bind.Unmarshaller;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMResult;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+\n+import org.optaplanner.core.impl.io.XmlIO;\n+import org.optaplanner.core.impl.io.XmlUnmarshallingException;\n+\n+public final class JaxbIO<T> implements XmlIO<T> {\n+    private static final int DEFAULT_INDENTATION = 2;\n+\n+    private final Unmarshaller unmarshaller;\n+    private final Marshaller marshaller;\n+    private final Class<T> rootClass;\n+    private final int indentation;\n+\n+    public JaxbIO(Class<T> rootClass) {\n+        this(rootClass, DEFAULT_INDENTATION);\n+    }\n+\n+    public JaxbIO(Class<T> rootClass, int indentation) {\n+        Objects.requireNonNull(rootClass);\n+        this.rootClass = rootClass;\n+        this.indentation = indentation;\n+        try {\n+            JAXBContext jaxbContext = JAXBContext.newInstance(rootClass);\n+            unmarshaller = jaxbContext.createUnmarshaller();\n+            marshaller = jaxbContext.createMarshaller();\n+            marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);\n+            marshaller.setProperty(Marshaller.JAXB_ENCODING, StandardCharsets.UTF_8.toString());\n+        } catch (JAXBException jaxbException) {\n+            String errMessage = String.format(\"Unable to create JAXB marshaller or unmarshaller for a root element class %s.\",\n+                    rootClass.getName());\n+            throw new IllegalStateException(errMessage, jaxbException);\n+        }\n+    }\n+\n+    public T read(Reader reader) {\n+        Objects.requireNonNull(reader);\n+        try {\n+            return (T) unmarshaller.unmarshal(reader);\n+        } catch (JAXBException jaxbException) {\n+            String errMessage = String.format(\"Unable to read the %s from XML.\", rootClass.getName());\n+            throw new XmlUnmarshallingException(errMessage, jaxbException);\n+        }\n+    }\n+\n+    public void write(T root, Writer writer) {\n+        Objects.requireNonNull(root);\n+        Objects.requireNonNull(writer);\n+        DOMResult domResult = new DOMResult();\n+        try {\n+            marshaller.marshal(root, domResult);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de0e77ee2c0bf169bc4a954c708b59a3daa570e3"}, "originalPosition": 83}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4MDEwMTgx", "url": "https://github.com/kiegroup/optaplanner/pull/834#pullrequestreview-448010181", "createdAt": "2020-07-14T11:11:29Z", "commit": {"oid": "2c27c17627a67956ebcc5d8cf2ed4dcf59c8410f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4ODEyNTY2", "url": "https://github.com/kiegroup/optaplanner/pull/834#pullrequestreview-448812566", "createdAt": "2020-07-15T10:07:07Z", "commit": {"oid": "2c27c17627a67956ebcc5d8cf2ed4dcf59c8410f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMDowNzowN1rOGx3W3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMDowNzowN1rOGx3W3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk0MDM4Mg==", "bodyText": "Is there any work being doing to support java.time out of the box in a new version of JAXB (maybe at Jakarta)?\nIf so, it would nice to have TODO comment with an expiration condition and an url link.", "url": "https://github.com/kiegroup/optaplanner/pull/834#discussion_r454940382", "createdAt": "2020-07-15T10:07:07Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-benchmark/src/main/java/org/optaplanner/benchmark/impl/io/jaxb/OffsetDateTimeJaxbAdapter.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.benchmark.impl.io.jaxb;\n+\n+import java.time.DateTimeException;\n+import java.time.OffsetDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeFormatterBuilder;\n+import java.time.temporal.ChronoField;\n+\n+import javax.xml.bind.annotation.adapters.XmlAdapter;\n+\n+public class OffsetDateTimeJaxbAdapter extends XmlAdapter<String, OffsetDateTime> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c27c17627a67956ebcc5d8cf2ed4dcf59c8410f"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4ODE2Mjg1", "url": "https://github.com/kiegroup/optaplanner/pull/834#pullrequestreview-448816285", "createdAt": "2020-07-15T10:12:39Z", "commit": {"oid": "2c27c17627a67956ebcc5d8cf2ed4dcf59c8410f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMDoxMjozOVrOGx3iVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMDoxMjozOVrOGx3iVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk0MzMxNg==", "bodyText": "(just thinking aloud, no action needed)\nThis is basically saying that all classes within the org.optaplanner namespace aren't exploitable.\nThat included org.optaplanner.examples, which did has this code in the dinner party example:\n  <customPhase>\n    <customPhaseCommandClass>org.optaplanner.examples.dinnerparty.solver.solution.initializer.DinnerPartySolutionInitializer</customPhaseCommandClass>\n  </customPhase>\n\nThat has test coverage, so all is well with JAXB, I presume?", "url": "https://github.com/kiegroup/optaplanner/pull/834#discussion_r454943316", "createdAt": "2020-07-15T10:12:39Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-benchmark/src/main/java/org/optaplanner/benchmark/impl/result/BenchmarkResultIO.java", "diffHunk": "@@ -33,36 +33,24 @@\n import org.optaplanner.benchmark.impl.statistic.ProblemStatistic;\n import org.optaplanner.benchmark.impl.statistic.PureSubSingleStatistic;\n import org.optaplanner.core.config.solver.SolverConfig;\n-import org.optaplanner.core.impl.solver.io.XStreamConfigReader;\n-import org.optaplanner.persistence.xstream.api.score.AbstractScoreXStreamConverter;\n+import org.optaplanner.core.impl.io.XmlUnmarshallingException;\n+import org.optaplanner.core.impl.io.jaxb.JaxbIO;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import com.thoughtworks.xstream.XStream;\n-import com.thoughtworks.xstream.XStreamException;\n-import com.thoughtworks.xstream.converters.ConversionException;\n-\n public class BenchmarkResultIO {\n \n     private static final String PLANNER_BENCHMARK_RESULT_FILENAME = \"plannerBenchmarkResult.xml\";\n \n     protected final transient Logger logger = LoggerFactory.getLogger(getClass());\n \n-    private final XStream xStream;\n-\n-    public BenchmarkResultIO() {\n-        xStream = XStreamConfigReader.buildXStream();\n-        xStream.processAnnotations(PlannerBenchmarkResult.class);\n-        xStream.allowTypesByRegExp(new String[] { \"org\\\\.optaplanner\\\\.\\\\w+\\\\.api\\\\..*\" });\n-        xStream.allowTypesByRegExp(new String[] { \"org\\\\.optaplanner\\\\.\\\\w+\\\\.impl\\\\..*\" });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c27c17627a67956ebcc5d8cf2ed4dcf59c8410f"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4ODE5MTE0", "url": "https://github.com/kiegroup/optaplanner/pull/834#pullrequestreview-448819114", "createdAt": "2020-07-15T10:16:57Z", "commit": {"oid": "2c27c17627a67956ebcc5d8cf2ed4dcf59c8410f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMDoxNjo1N1rOGx3rWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMDoxNjo1N1rOGx3rWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk0NTYyNA==", "bodyText": "(code style, very soft): the first letter after \"// \" should be a capital, so \"// Required ...\", even if it's not a sentance\nBasically same principles as javadocs.\n((If it's a sentence (subject + verb + ...), it must end with a \".\", otherwise it shouldn't. This is already correct.))", "url": "https://github.com/kiegroup/optaplanner/pull/834#discussion_r454945624", "createdAt": "2020-07-15T10:16:57Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-benchmark/src/main/java/org/optaplanner/benchmark/impl/result/SingleBenchmarkResult.java", "diffHunk": "@@ -46,13 +50,21 @@\n @XStreamAlias(\"singleBenchmarkResult\")\n public class SingleBenchmarkResult implements BenchmarkResult {\n \n-    private static final Logger logger = LoggerFactory.getLogger(SingleBenchmarkResult.class);\n+    // required by JAXB to refer to existing instances of this class", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c27c17627a67956ebcc5d8cf2ed4dcf59c8410f"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4ODIxMjQ5", "url": "https://github.com/kiegroup/optaplanner/pull/834#pullrequestreview-448821249", "createdAt": "2020-07-15T10:20:19Z", "commit": {"oid": "2c27c17627a67956ebcc5d8cf2ed4dcf59c8410f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMDoyMDoxOVrOGx3x6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMDoyMDoxOVrOGx3x6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk0NzMwNw==", "bodyText": "(thinking aloud, feel free to ignore)\nThis was there to avoid xstream ID references in the html report that shows the source XML.\nBasically, the source XML must be copyable and not introduce any changes from having been parsed and unparsed, except for inheriting the inheritedSolver of the benchmark xml.\nSo no id's add that weren't there, no null fields becoming defaulted fields etc.\nI presume this is all fine, as IIRC we do have a test that covers it.", "url": "https://github.com/kiegroup/optaplanner/pull/834#discussion_r454947307", "createdAt": "2020-07-15T10:20:19Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-benchmark/src/main/java/org/optaplanner/benchmark/impl/result/SolverBenchmarkResult.java", "diffHunk": "@@ -257,10 +266,11 @@ public SingleBenchmarkResult findSingleBenchmark(ProblemBenchmarkResult problemB\n     }\n \n     public String getSolverConfigAsHtmlEscapedXml() {\n-        // TODO reuse a single XStream instance for the entire report\n-        XStream xStream = XStreamConfigReader.buildXStream();\n-        xStream.setMode(XStream.NO_REFERENCES);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c27c17627a67956ebcc5d8cf2ed4dcf59c8410f"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4ODIyNDk2", "url": "https://github.com/kiegroup/optaplanner/pull/834#pullrequestreview-448822496", "createdAt": "2020-07-15T10:22:08Z", "commit": {"oid": "2c27c17627a67956ebcc5d8cf2ed4dcf59c8410f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMDoyMjowOFrOGx311g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMDoyMjowOFrOGx311g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk0ODMxMA==", "bodyText": "(soft) No space after \"//\", also nice to start with captical \"R\".", "url": "https://github.com/kiegroup/optaplanner/pull/834#discussion_r454948310", "createdAt": "2020-07-15T10:22:08Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-benchmark/src/main/java/org/optaplanner/benchmark/impl/result/SubSingleBenchmarkResult.java", "diffHunk": "@@ -73,6 +93,10 @@\n     // Constructors and simple getters/setters\n     // ************************************************************************\n \n+    private SubSingleBenchmarkResult() {\n+        //required by JAXB", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c27c17627a67956ebcc5d8cf2ed4dcf59c8410f"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4ODI2ODM2", "url": "https://github.com/kiegroup/optaplanner/pull/834#pullrequestreview-448826836", "createdAt": "2020-07-15T10:28:47Z", "commit": {"oid": "2c27c17627a67956ebcc5d8cf2ed4dcf59c8410f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMDoyODo0N1rOGx4DhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMDoyODo0N1rOGx4DhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk1MTgxMg==", "bodyText": "Do we want to normalize the newlines?\nThe XML in the benchmark report (so they can easily copy paste it from there into a solverConfig.xml) should contain linux line endings, even on windows.\nDo we want the xmlIO to always use linux line ending, regardless of the platform?", "url": "https://github.com/kiegroup/optaplanner/pull/834#discussion_r454951812", "createdAt": "2020-07-15T10:28:47Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-benchmark/src/test/java/org/optaplanner/benchmark/config/PlannerBenchmarkConfigTest.java", "diffHunk": "@@ -193,57 +167,21 @@ public void calculateWarmUpTimeMillisSpentLimit() {\n \n     @Test\n     public void xmlConfigFileRemainsSameAfterReadWrite() throws IOException {\n-        String benchmarkConfigResource = \"org/optaplanner/benchmark/config/testdataBenchmarkConfigNoInheritence.xml\";\n-        String originalXml = IOUtils.toString(\n-                getClass().getClassLoader().getResourceAsStream(benchmarkConfigResource), StandardCharsets.UTF_8);\n-        PlannerBenchmarkConfig benchmarkConfig = PlannerBenchmarkConfig.createFromXmlResource(benchmarkConfigResource);\n-        assertThat(PlannerBenchmarkFactory.create(benchmarkConfig).buildPlannerBenchmark(new TestdataSolution())).isNotNull();\n-        XStream xStream = XStreamConfigReader.buildXStreamPortable(getClass().getClassLoader(), PlannerBenchmarkConfig.class);\n-        xStream.setMode(XStream.NO_REFERENCES);\n-        String savedXml = xStream.toXML(benchmarkConfig);\n-        assertThat(savedXml.trim()).isEqualTo(originalXml.trim());\n-    }\n+        JaxbIO<PlannerBenchmarkConfig> xmlIO = new JaxbIO<>(PlannerBenchmarkConfig.class);\n+        PlannerBenchmarkConfig jaxbBenchmarkConfig;\n \n-    @Test\n-    public void jaxbXmlConfigFileRemainsSameAfterReadWrite() throws IOException {\n-        PlannerBenchmarkConfig jaxbBenchmarkConfig = unmarshallBenchmarkConfigFromResource(TEST_PLANNER_BENCHMARK_CONFIG);\n+        try (Reader reader =\n+                new InputStreamReader(PlannerBenchmarkConfigTest.class.getResourceAsStream(TEST_PLANNER_BENCHMARK_CONFIG))) {\n+            jaxbBenchmarkConfig = xmlIO.read(reader);\n+        }\n \n         Writer stringWriter = new StringWriter();\n-        marshall(jaxbBenchmarkConfig, stringWriter);\n+        xmlIO.write(jaxbBenchmarkConfig, stringWriter);\n         String jaxbString = stringWriter.toString();\n \n         String originalXml = IOUtils.toString(\n                 PlannerBenchmarkConfigTest.class.getResourceAsStream(TEST_PLANNER_BENCHMARK_CONFIG), StandardCharsets.UTF_8);\n \n         assertThat(jaxbString.trim()).isEqualToNormalizingNewlines(originalXml.trim());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c27c17627a67956ebcc5d8cf2ed4dcf59c8410f"}, "originalPosition": 87}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4ODI3ODA3", "url": "https://github.com/kiegroup/optaplanner/pull/834#pullrequestreview-448827807", "createdAt": "2020-07-15T10:30:13Z", "commit": {"oid": "2c27c17627a67956ebcc5d8cf2ed4dcf59c8410f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMDozMDoxNFrOGx4Glw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMDozMDoxNFrOGx4Glw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk1MjU5OQ==", "bodyText": "Should this be in optaplanner-persistence-jaxb's package instead? Definitely impl indeed", "url": "https://github.com/kiegroup/optaplanner/pull/834#discussion_r454952599", "createdAt": "2020-07-15T10:30:14Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-benchmark/src/test/java/org/optaplanner/benchmark/impl/io/jaxb/OffsetDateTimeJaxbAdapterTest.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.benchmark.impl.io.jaxb;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c27c17627a67956ebcc5d8cf2ed4dcf59c8410f"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4ODI5Njky", "url": "https://github.com/kiegroup/optaplanner/pull/834#pullrequestreview-448829692", "createdAt": "2020-07-15T10:33:04Z", "commit": {"oid": "2c27c17627a67956ebcc5d8cf2ed4dcf59c8410f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMDozMzowNFrOGx4Miw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMDozMzowNFrOGx4Miw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk1NDEyMw==", "bodyText": "this makes me worry.\nIn XStream, Jackson, etc, modern versions always support java.time out of the box, entirely.\nAre we using an old version of jaxb? Or is jaxb dead?", "url": "https://github.com/kiegroup/optaplanner/pull/834#discussion_r454954123", "createdAt": "2020-07-15T10:33:04Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/config/solver/termination/TerminationConfig.java", "diffHunk": "@@ -51,13 +53,15 @@\n \n     private TerminationCompositionStyle terminationCompositionStyle = null;\n \n+    @XmlJavaTypeAdapter(JaxbDurationAdapter.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c27c17627a67956ebcc5d8cf2ed4dcf59c8410f"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4ODMwOTgw", "url": "https://github.com/kiegroup/optaplanner/pull/834#pullrequestreview-448830980", "createdAt": "2020-07-15T10:35:02Z", "commit": {"oid": "2c27c17627a67956ebcc5d8cf2ed4dcf59c8410f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMDozNTowMlrOGx4QyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMDozNTowMlrOGx4QyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk1NTIwOA==", "bodyText": "(hard)\nThis might randomly break some tests I believe, if run on very slow machines. I recommend removing this new line.", "url": "https://github.com/kiegroup/optaplanner/pull/834#discussion_r454955208", "createdAt": "2020-07-15T10:35:02Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/test/resources/org/optaplanner/core/config/solver/testSolverConfig.xml", "diffHunk": "@@ -66,6 +66,7 @@\n   <localSearch>\n     <termination>\n       <terminationCompositionStyle>AND</terminationCompositionStyle>\n+      <spentLimit>PT2S</spentLimit>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c27c17627a67956ebcc5d8cf2ed4dcf59c8410f"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4ODMyMDE5", "url": "https://github.com/kiegroup/optaplanner/pull/834#pullrequestreview-448832019", "createdAt": "2020-07-15T10:36:37Z", "commit": {"oid": "2c27c17627a67956ebcc5d8cf2ed4dcf59c8410f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMDozNjozOFrOGx4T4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMDozNjozOFrOGx4T4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk1NjAwMQ==", "bodyText": "The jackson version of this is in package  org.optaplanner.persistence.jackson.api.score.\nSo not in \"buildin\".\nThat should be consistent. Let's move this one, one level up. Or the other one to the buildin package (= BC breaking... so rather not)", "url": "https://github.com/kiegroup/optaplanner/pull/834#discussion_r454956001", "createdAt": "2020-07-15T10:36:38Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-persistence/optaplanner-persistence-jaxb/src/main/java/org/optaplanner/persistence/jaxb/api/score/buildin/PolymorphicScoreJaxbAdapter.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.persistence.jaxb.api.score.buildin;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c27c17627a67956ebcc5d8cf2ed4dcf59c8410f"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4ODM0NTE4", "url": "https://github.com/kiegroup/optaplanner/pull/834#pullrequestreview-448834518", "createdAt": "2020-07-15T10:40:25Z", "commit": {"oid": "2c27c17627a67956ebcc5d8cf2ed4dcf59c8410f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4OTM4MDY0", "url": "https://github.com/kiegroup/optaplanner/pull/834#pullrequestreview-448938064", "createdAt": "2020-07-15T13:12:39Z", "commit": {"oid": "2c27c17627a67956ebcc5d8cf2ed4dcf59c8410f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f936fc250a35c89e11fc972e49c35eb133dc6b4", "author": {"user": {"login": "rsynek", "name": "Radovan Synek"}}, "url": "https://github.com/kiegroup/optaplanner/commit/9f936fc250a35c89e11fc972e49c35eb133dc6b4", "committedDate": "2020-07-15T16:30:54Z", "message": "Fix JAXB serialization of Duration type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11df4b4d7ea3dc09b5709eb2021e0e7aa8ea994b", "author": {"user": {"login": "rsynek", "name": "Radovan Synek"}}, "url": "https://github.com/kiegroup/optaplanner/commit/11df4b4d7ea3dc09b5709eb2021e0e7aa8ea994b", "committedDate": "2020-07-15T16:30:54Z", "message": "Introduce a generic XmlIO for JAXB"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1cd68851bbb85f03ac39257b410af749fa2e9d20", "author": {"user": {"login": "rsynek", "name": "Radovan Synek"}}, "url": "https://github.com/kiegroup/optaplanner/commit/1cd68851bbb85f03ac39257b410af749fa2e9d20", "committedDate": "2020-07-15T16:30:54Z", "message": "Move JAXB adapters to io.jaxb package"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e554aeaeebfbd627231ea420c32fbf800f780cb5", "author": {"user": {"login": "rsynek", "name": "Radovan Synek"}}, "url": "https://github.com/kiegroup/optaplanner/commit/e554aeaeebfbd627231ea420c32fbf800f780cb5", "committedDate": "2020-07-15T16:30:54Z", "message": "PLANNER-2024 Switch SolverConfig to JAXB"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a10ce3b035f8531bc8dddca2723fd60bddfd625", "author": {"user": {"login": "rsynek", "name": "Radovan Synek"}}, "url": "https://github.com/kiegroup/optaplanner/commit/4a10ce3b035f8531bc8dddca2723fd60bddfd625", "committedDate": "2020-07-15T16:30:54Z", "message": "Add JAXB adapter for score"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87c203c02b2e19fdc1b864522391c2f10cf3e430", "author": {"user": {"login": "rsynek", "name": "Radovan Synek"}}, "url": "https://github.com/kiegroup/optaplanner/commit/87c203c02b2e19fdc1b864522391c2f10cf3e430", "committedDate": "2020-07-15T16:30:54Z", "message": "Switch BenchmarkConfig to JAXB"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c4d9b15c915d7930a31e0de6353df6c0e531bb1", "author": {"user": {"login": "rsynek", "name": "Radovan Synek"}}, "url": "https://github.com/kiegroup/optaplanner/commit/1c4d9b15c915d7930a31e0de6353df6c0e531bb1", "committedDate": "2020-07-15T16:30:54Z", "message": "Convert benchmark results into JAXB"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93dc52ff143fbc846a03b5b17187e1bdda8705c7", "author": {"user": {"login": "rsynek", "name": "Radovan Synek"}}, "url": "https://github.com/kiegroup/optaplanner/commit/93dc52ff143fbc846a03b5b17187e1bdda8705c7", "committedDate": "2020-07-15T16:30:54Z", "message": "Remove unused method with deprecated call"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05dae873532835a3195f126f2bb5d2801add97be", "author": {"user": {"login": "rsynek", "name": "Radovan Synek"}}, "url": "https://github.com/kiegroup/optaplanner/commit/05dae873532835a3195f126f2bb5d2801add97be", "committedDate": "2020-07-15T16:30:54Z", "message": "Make XML indentation configurable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "284d6a7bda66464a16066099beae6dcee39b7bcc", "author": {"user": {"login": "rsynek", "name": "Radovan Synek"}}, "url": "https://github.com/kiegroup/optaplanner/commit/284d6a7bda66464a16066099beae6dcee39b7bcc", "committedDate": "2020-07-15T16:30:54Z", "message": "Remove unused XStreamConfigReader"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "783cb14864142fb5bd4a239ed8f260022b15d02e", "author": {"user": {"login": "rsynek", "name": "Radovan Synek"}}, "url": "https://github.com/kiegroup/optaplanner/commit/783cb14864142fb5bd4a239ed8f260022b15d02e", "committedDate": "2020-07-15T16:30:54Z", "message": "Return back the XML escaping\n\nIt turned out it's used by some of the .ftl benchmark templates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a1e9b9d7bb900c6437544df26602e21c5d6f365", "author": {"user": {"login": "rsynek", "name": "Radovan Synek"}}, "url": "https://github.com/kiegroup/optaplanner/commit/9a1e9b9d7bb900c6437544df26602e21c5d6f365", "committedDate": "2020-07-15T16:30:54Z", "message": "Replace null checks with Objects.requireNotNull"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01ccec399091aeb6920b702c2ed17cad0d06033b", "author": {"user": {"login": "rsynek", "name": "Radovan Synek"}}, "url": "https://github.com/kiegroup/optaplanner/commit/01ccec399091aeb6920b702c2ed17cad0d06033b", "committedDate": "2020-07-15T16:30:54Z", "message": "Use Objects.equals consistently"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9750c1dfc366ec60fcf5280b230b1e99a1e0dbd", "author": {"user": {"login": "rsynek", "name": "Radovan Synek"}}, "url": "https://github.com/kiegroup/optaplanner/commit/f9750c1dfc366ec60fcf5280b230b1e99a1e0dbd", "committedDate": "2020-07-15T16:30:54Z", "message": "Remove unnecessary prefix from a test method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "131e104a50f9fc93fa5edcf993135d00f335f3df", "author": {"user": {"login": "rsynek", "name": "Radovan Synek"}}, "url": "https://github.com/kiegroup/optaplanner/commit/131e104a50f9fc93fa5edcf993135d00f335f3df", "committedDate": "2020-07-15T16:30:54Z", "message": "Make java.time.* adapters more strict about input"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81dc793386612c790aeb68dba9ce7752a64e5739", "author": {"user": {"login": "rsynek", "name": "Radovan Synek"}}, "url": "https://github.com/kiegroup/optaplanner/commit/81dc793386612c790aeb68dba9ce7752a64e5739", "committedDate": "2020-07-15T16:30:54Z", "message": "Simplify toString() of InstanceProblemProvider"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1724016d31aed0b32d307e12c104d40dc191535", "author": {"user": {"login": "rsynek", "name": "Radovan Synek"}}, "url": "https://github.com/kiegroup/optaplanner/commit/f1724016d31aed0b32d307e12c104d40dc191535", "committedDate": "2020-07-15T16:30:54Z", "message": "Remove the XmlIO interface"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70709a5e82b52f8d1bcffa7e741a42cca22f312a", "author": {"user": {"login": "rsynek", "name": "Radovan Synek"}}, "url": "https://github.com/kiegroup/optaplanner/commit/70709a5e82b52f8d1bcffa7e741a42cca22f312a", "committedDate": "2020-07-15T16:30:54Z", "message": "Address review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe8e24c2597385198c416aed9aec0ab64308dea4", "author": {"user": {"login": "rsynek", "name": "Radovan Synek"}}, "url": "https://github.com/kiegroup/optaplanner/commit/fe8e24c2597385198c416aed9aec0ab64308dea4", "committedDate": "2020-07-15T16:30:54Z", "message": "Fix duplicate classes (enforcer)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "12020b8ddc69779f695ed5d7fa5b6517f76386d7", "author": {"user": {"login": "rsynek", "name": "Radovan Synek"}}, "url": "https://github.com/kiegroup/optaplanner/commit/12020b8ddc69779f695ed5d7fa5b6517f76386d7", "committedDate": "2020-07-15T13:43:47Z", "message": "Address review comments"}, "afterCommit": {"oid": "fe8e24c2597385198c416aed9aec0ab64308dea4", "author": {"user": {"login": "rsynek", "name": "Radovan Synek"}}, "url": "https://github.com/kiegroup/optaplanner/commit/fe8e24c2597385198c416aed9aec0ab64308dea4", "committedDate": "2020-07-15T16:30:54Z", "message": "Fix duplicate classes (enforcer)"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3330, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}