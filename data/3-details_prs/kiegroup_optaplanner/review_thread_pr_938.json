{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5MzY4OTIy", "number": 938, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwODowMzo1MFrOElitKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxOTo0Njo0MVrOEl0I5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3ODAxMzg0OnYy", "diffSide": "RIGHT", "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/coachshuttlegathering/domain/Shuttle.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwODowMzo1MFrOHVEgzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxOToyODozNVrOHVfX4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg1NjA3Ng==", "bodyText": "Something to try if it works: You might be able to move this @CustomShadowVariable of Coach and Shuttle to Bus. Even though the sources differ, just use the union of sources.", "url": "https://github.com/kiegroup/optaplanner/pull/938#discussion_r491856076", "createdAt": "2020-09-21T08:03:50Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/coachshuttlegathering/domain/Shuttle.java", "diffHunk": "@@ -51,6 +54,14 @@ public void setDestination(StopOrHub destination) {\n         this.destination = destination;\n     }\n \n+    @Override\n+    @CustomShadowVariable(variableListenerClass = ShuttlePassengerCountTotalUpdatingVariableListener.class,\n+            sources = { @PlanningVariableReference(entityClass = BusStop.class, variableName = \"bus\"),\n+                    @PlanningVariableReference(entityClass = Shuttle.class, variableName = \"destination\") })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fc4d458b7f3738a48b1a550b5b6a745f112b05a"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI5NjE2MQ==", "bodyText": "Can't do - leads to double counting it seems (despite code being exactly the same); was able to put it in an abstract class and have two variable listeners extend it (the abstract method is literally an instanceof check)", "url": "https://github.com/kiegroup/optaplanner/pull/938#discussion_r492296161", "createdAt": "2020-09-21T19:28:35Z", "author": {"login": "Christopher-Chianelli"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/coachshuttlegathering/domain/Shuttle.java", "diffHunk": "@@ -51,6 +54,14 @@ public void setDestination(StopOrHub destination) {\n         this.destination = destination;\n     }\n \n+    @Override\n+    @CustomShadowVariable(variableListenerClass = ShuttlePassengerCountTotalUpdatingVariableListener.class,\n+            sources = { @PlanningVariableReference(entityClass = BusStop.class, variableName = \"bus\"),\n+                    @PlanningVariableReference(entityClass = Shuttle.class, variableName = \"destination\") })", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg1NjA3Ng=="}, "originalCommit": {"oid": "8fc4d458b7f3738a48b1a550b5b6a745f112b05a"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3ODAxOTAzOnYy", "diffSide": "RIGHT", "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/coachshuttlegathering/domain/solver/CoachPassengerCountTotalUpdatingVariableListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwODowNToyOFrOHVEjyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwODowNToyOFrOHVEjyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg1Njg0MQ==", "bodyText": "Please follow the naming of the other VariableListeners for consistency across examples, such as ArrivalTimeUpdatingVariableListener. These 2 methods would be \"update...\" and be below the before/after calls.", "url": "https://github.com/kiegroup/optaplanner/pull/938#discussion_r491856841", "createdAt": "2020-09-21T08:05:28Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/coachshuttlegathering/domain/solver/CoachPassengerCountTotalUpdatingVariableListener.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.coachshuttlegathering.domain.solver;\n+\n+import org.optaplanner.core.api.score.director.ScoreDirector;\n+import org.optaplanner.core.impl.domain.variable.listener.VariableListener;\n+import org.optaplanner.examples.coachshuttlegathering.domain.Bus;\n+import org.optaplanner.examples.coachshuttlegathering.domain.BusStop;\n+import org.optaplanner.examples.coachshuttlegathering.domain.Coach;\n+import org.optaplanner.examples.coachshuttlegathering.domain.CoachShuttleGatheringSolution;\n+\n+public class CoachPassengerCountTotalUpdatingVariableListener implements VariableListener<BusStop> {\n+\n+    private static void adjustBus(ScoreDirector<CoachShuttleGatheringSolution> scoreDirector, Bus bus, int difference) {\n+        if (difference == 0) {\n+            return;\n+        }\n+        scoreDirector.beforeVariableChanged(bus, \"passengerQuantityTotal\");\n+        bus.setPassengerQuantityTotal(bus.getPassengerQuantityTotal() + difference);\n+        scoreDirector.afterVariableChanged(bus, \"passengerQuantityTotal\");\n+        if (bus.getPassengerQuantityTotal() < 0) {\n+            throw new IllegalStateException(\"Passenger quantity in \" + bus + \" got under zero here.\");\n+        }\n+    }\n+\n+    private static void adjust(ScoreDirector<CoachShuttleGatheringSolution> scoreDirector, BusStop busStop,\n+            boolean increase) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fc4d458b7f3738a48b1a550b5b6a745f112b05a"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3ODAyMzQ1OnYy", "diffSide": "RIGHT", "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/coachshuttlegathering/domain/solver/CoachPassengerCountTotalUpdatingVariableListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwODowNjo1MlrOHVEmdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwODowNjo1MlrOHVEmdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg1NzUyNw==", "bodyText": "method naming: increase/decrease what?\nAlso, I wouldn't extract them into separate methods, just call true/false directly from before/after.", "url": "https://github.com/kiegroup/optaplanner/pull/938#discussion_r491857527", "createdAt": "2020-09-21T08:06:52Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/coachshuttlegathering/domain/solver/CoachPassengerCountTotalUpdatingVariableListener.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.coachshuttlegathering.domain.solver;\n+\n+import org.optaplanner.core.api.score.director.ScoreDirector;\n+import org.optaplanner.core.impl.domain.variable.listener.VariableListener;\n+import org.optaplanner.examples.coachshuttlegathering.domain.Bus;\n+import org.optaplanner.examples.coachshuttlegathering.domain.BusStop;\n+import org.optaplanner.examples.coachshuttlegathering.domain.Coach;\n+import org.optaplanner.examples.coachshuttlegathering.domain.CoachShuttleGatheringSolution;\n+\n+public class CoachPassengerCountTotalUpdatingVariableListener implements VariableListener<BusStop> {\n+\n+    private static void adjustBus(ScoreDirector<CoachShuttleGatheringSolution> scoreDirector, Bus bus, int difference) {\n+        if (difference == 0) {\n+            return;\n+        }\n+        scoreDirector.beforeVariableChanged(bus, \"passengerQuantityTotal\");\n+        bus.setPassengerQuantityTotal(bus.getPassengerQuantityTotal() + difference);\n+        scoreDirector.afterVariableChanged(bus, \"passengerQuantityTotal\");\n+        if (bus.getPassengerQuantityTotal() < 0) {\n+            throw new IllegalStateException(\"Passenger quantity in \" + bus + \" got under zero here.\");\n+        }\n+    }\n+\n+    private static void adjust(ScoreDirector<CoachShuttleGatheringSolution> scoreDirector, BusStop busStop,\n+            boolean increase) {\n+        Bus bus = busStop.getBus();\n+        if (!(bus instanceof Coach)) {\n+            return;\n+        }\n+        adjustBus(scoreDirector, bus, increase ? busStop.getPassengerQuantity() : -busStop.getPassengerQuantity());\n+    }\n+\n+    private static void increase(ScoreDirector<CoachShuttleGatheringSolution> scoreDirector, BusStop busStop) {\n+        adjust(scoreDirector, busStop, true);\n+    }\n+\n+    private static void decrease(ScoreDirector<CoachShuttleGatheringSolution> scoreDirector, BusStop busStop) {\n+        adjust(scoreDirector, busStop, false);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fc4d458b7f3738a48b1a550b5b6a745f112b05a"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDg1NTI5OnYy", "diffSide": "RIGHT", "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/coachshuttlegathering/domain/solver/BusPassengerCountTotalUpdatingVariableListener.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxOTo0MjowMVrOHVfyyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxOTo1NzowNlrOHVgQxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMwMzA0OQ==", "bodyText": "We can probably improve this:\nint quantity = busStop.getPassengerQuantity();\nif (quantity == 0) {\n    return;\n}\nint difference = increase ? quantity : -quantity;\n\nIf this code is called often, this will bring a small perf improvement.", "url": "https://github.com/kiegroup/optaplanner/pull/938#discussion_r492303049", "createdAt": "2020-09-21T19:42:01Z", "author": {"login": "triceo"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/coachshuttlegathering/domain/solver/BusPassengerCountTotalUpdatingVariableListener.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.coachshuttlegathering.domain.solver;\n+\n+import org.optaplanner.core.api.score.director.ScoreDirector;\n+import org.optaplanner.core.impl.domain.variable.listener.VariableListener;\n+import org.optaplanner.examples.coachshuttlegathering.domain.Bus;\n+import org.optaplanner.examples.coachshuttlegathering.domain.BusStop;\n+import org.optaplanner.examples.coachshuttlegathering.domain.CoachShuttleGatheringSolution;\n+\n+public abstract class BusPassengerCountTotalUpdatingVariableListener implements VariableListener<Object> {\n+\n+    @Override\n+    public void beforeEntityAdded(ScoreDirector scoreDirector, Object busStop) {\n+        // Do nothing\n+    }\n+\n+    @Override\n+    public void afterEntityAdded(ScoreDirector scoreDirector, Object entity) {\n+        if (entity instanceof BusStop) {\n+            updateBusPassengerCount(scoreDirector, (BusStop) entity, true);\n+        }\n+    }\n+\n+    @Override\n+    public void beforeVariableChanged(ScoreDirector scoreDirector, Object entity) {\n+        if (entity instanceof BusStop) {\n+            updateBusPassengerCount(scoreDirector, (BusStop) entity, false);\n+        }\n+    }\n+\n+    @Override\n+    public void afterVariableChanged(ScoreDirector scoreDirector, Object entity) {\n+        if (entity instanceof BusStop) {\n+            updateBusPassengerCount(scoreDirector, (BusStop) entity, true);\n+        }\n+    }\n+\n+    @Override\n+    public void beforeEntityRemoved(ScoreDirector scoreDirector, Object entity) {\n+        // Do nothing\n+    }\n+\n+    @Override\n+    public void afterEntityRemoved(ScoreDirector scoreDirector, Object entity) {\n+        if (entity instanceof BusStop) {\n+            updateBusPassengerCount(scoreDirector, (BusStop) entity, false);\n+        }\n+    }\n+\n+    private void updateBusPassengerCount(ScoreDirector<CoachShuttleGatheringSolution> scoreDirector, BusStop busStop,\n+            boolean increase) {\n+        Bus bus = busStop.getBus();\n+        if (!isCorrectBusInstance(bus)) {\n+            return;\n+        }\n+        int difference = increase ? busStop.getPassengerQuantity() : -busStop.getPassengerQuantity();\n+        if (difference == 0) {\n+            return;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "310795edbdbb79f6519be13c8bb71cb055710134"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMwNzM1Mw==", "bodyText": "As a side note, can a bus stop have 0 passengers? I don't think it can (and if it does, it an error; passengerQuantity is NOT a shadow variable or a planning variable)", "url": "https://github.com/kiegroup/optaplanner/pull/938#discussion_r492307353", "createdAt": "2020-09-21T19:50:23Z", "author": {"login": "Christopher-Chianelli"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/coachshuttlegathering/domain/solver/BusPassengerCountTotalUpdatingVariableListener.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.coachshuttlegathering.domain.solver;\n+\n+import org.optaplanner.core.api.score.director.ScoreDirector;\n+import org.optaplanner.core.impl.domain.variable.listener.VariableListener;\n+import org.optaplanner.examples.coachshuttlegathering.domain.Bus;\n+import org.optaplanner.examples.coachshuttlegathering.domain.BusStop;\n+import org.optaplanner.examples.coachshuttlegathering.domain.CoachShuttleGatheringSolution;\n+\n+public abstract class BusPassengerCountTotalUpdatingVariableListener implements VariableListener<Object> {\n+\n+    @Override\n+    public void beforeEntityAdded(ScoreDirector scoreDirector, Object busStop) {\n+        // Do nothing\n+    }\n+\n+    @Override\n+    public void afterEntityAdded(ScoreDirector scoreDirector, Object entity) {\n+        if (entity instanceof BusStop) {\n+            updateBusPassengerCount(scoreDirector, (BusStop) entity, true);\n+        }\n+    }\n+\n+    @Override\n+    public void beforeVariableChanged(ScoreDirector scoreDirector, Object entity) {\n+        if (entity instanceof BusStop) {\n+            updateBusPassengerCount(scoreDirector, (BusStop) entity, false);\n+        }\n+    }\n+\n+    @Override\n+    public void afterVariableChanged(ScoreDirector scoreDirector, Object entity) {\n+        if (entity instanceof BusStop) {\n+            updateBusPassengerCount(scoreDirector, (BusStop) entity, true);\n+        }\n+    }\n+\n+    @Override\n+    public void beforeEntityRemoved(ScoreDirector scoreDirector, Object entity) {\n+        // Do nothing\n+    }\n+\n+    @Override\n+    public void afterEntityRemoved(ScoreDirector scoreDirector, Object entity) {\n+        if (entity instanceof BusStop) {\n+            updateBusPassengerCount(scoreDirector, (BusStop) entity, false);\n+        }\n+    }\n+\n+    private void updateBusPassengerCount(ScoreDirector<CoachShuttleGatheringSolution> scoreDirector, BusStop busStop,\n+            boolean increase) {\n+        Bus bus = busStop.getBus();\n+        if (!isCorrectBusInstance(bus)) {\n+            return;\n+        }\n+        int difference = increase ? busStop.getPassengerQuantity() : -busStop.getPassengerQuantity();\n+        if (difference == 0) {\n+            return;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMwMzA0OQ=="}, "originalCommit": {"oid": "310795edbdbb79f6519be13c8bb71cb055710134"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMxMDcyNg==", "bodyText": "Good point. Maybe we should remove that check altogether.", "url": "https://github.com/kiegroup/optaplanner/pull/938#discussion_r492310726", "createdAt": "2020-09-21T19:57:06Z", "author": {"login": "triceo"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/coachshuttlegathering/domain/solver/BusPassengerCountTotalUpdatingVariableListener.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.coachshuttlegathering.domain.solver;\n+\n+import org.optaplanner.core.api.score.director.ScoreDirector;\n+import org.optaplanner.core.impl.domain.variable.listener.VariableListener;\n+import org.optaplanner.examples.coachshuttlegathering.domain.Bus;\n+import org.optaplanner.examples.coachshuttlegathering.domain.BusStop;\n+import org.optaplanner.examples.coachshuttlegathering.domain.CoachShuttleGatheringSolution;\n+\n+public abstract class BusPassengerCountTotalUpdatingVariableListener implements VariableListener<Object> {\n+\n+    @Override\n+    public void beforeEntityAdded(ScoreDirector scoreDirector, Object busStop) {\n+        // Do nothing\n+    }\n+\n+    @Override\n+    public void afterEntityAdded(ScoreDirector scoreDirector, Object entity) {\n+        if (entity instanceof BusStop) {\n+            updateBusPassengerCount(scoreDirector, (BusStop) entity, true);\n+        }\n+    }\n+\n+    @Override\n+    public void beforeVariableChanged(ScoreDirector scoreDirector, Object entity) {\n+        if (entity instanceof BusStop) {\n+            updateBusPassengerCount(scoreDirector, (BusStop) entity, false);\n+        }\n+    }\n+\n+    @Override\n+    public void afterVariableChanged(ScoreDirector scoreDirector, Object entity) {\n+        if (entity instanceof BusStop) {\n+            updateBusPassengerCount(scoreDirector, (BusStop) entity, true);\n+        }\n+    }\n+\n+    @Override\n+    public void beforeEntityRemoved(ScoreDirector scoreDirector, Object entity) {\n+        // Do nothing\n+    }\n+\n+    @Override\n+    public void afterEntityRemoved(ScoreDirector scoreDirector, Object entity) {\n+        if (entity instanceof BusStop) {\n+            updateBusPassengerCount(scoreDirector, (BusStop) entity, false);\n+        }\n+    }\n+\n+    private void updateBusPassengerCount(ScoreDirector<CoachShuttleGatheringSolution> scoreDirector, BusStop busStop,\n+            boolean increase) {\n+        Bus bus = busStop.getBus();\n+        if (!isCorrectBusInstance(bus)) {\n+            return;\n+        }\n+        int difference = increase ? busStop.getPassengerQuantity() : -busStop.getPassengerQuantity();\n+        if (difference == 0) {\n+            return;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMwMzA0OQ=="}, "originalCommit": {"oid": "310795edbdbb79f6519be13c8bb71cb055710134"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDg1ODI2OnYy", "diffSide": "RIGHT", "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/coachshuttlegathering/solver/CoachShuttleGatheringConstraintProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxOTo0MzowM1rOHVf0rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxOTo0MzowM1rOHVf0rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMwMzUzMw==", "bodyText": "Let's import static ...ConstraintCollectors...\nAFAIK the other constraint providers do it too.", "url": "https://github.com/kiegroup/optaplanner/pull/938#discussion_r492303533", "createdAt": "2020-09-21T19:43:03Z", "author": {"login": "triceo"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/coachshuttlegathering/solver/CoachShuttleGatheringConstraintProvider.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package org.optaplanner.examples.coachshuttlegathering.solver;\n+\n+import java.util.function.Function;\n+\n+import org.optaplanner.core.api.score.buildin.hardsoftlong.HardSoftLongScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintCollectors;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.core.api.score.stream.Joiners;\n+import org.optaplanner.examples.coachshuttlegathering.domain.Bus;\n+import org.optaplanner.examples.coachshuttlegathering.domain.BusStop;\n+import org.optaplanner.examples.coachshuttlegathering.domain.Coach;\n+import org.optaplanner.examples.coachshuttlegathering.domain.Shuttle;\n+import org.optaplanner.examples.coachshuttlegathering.domain.StopOrHub;\n+\n+public class CoachShuttleGatheringConstraintProvider implements ConstraintProvider {\n+    final static String CONSTRAINT_PACKAGE = \"org.optaplanner.examples.coachshuttlegathering.solver\";\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n+        return new Constraint[] {\n+                coachStopLimit(constraintFactory),\n+                shuttleCapacity(constraintFactory),\n+                coachCapacity(constraintFactory),\n+                coachCapacityShuttleButNoShuttle(constraintFactory),\n+                coachCapacityCorrection(constraintFactory),\n+                transportTime(constraintFactory),\n+                shuttleDestinationIsCoachOrHub(constraintFactory),\n+                shuttleSetupCost(constraintFactory),\n+                distanceFromPrevious(constraintFactory),\n+                distanceBusStopToBusDestination(constraintFactory),\n+                distanceCoachDirectlyToDestination(constraintFactory)\n+        };\n+    }\n+\n+    Constraint coachStopLimit(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Coach.class)\n+                .join(BusStop.class, Joiners.equal(coach -> coach, BusStop::getBus))\n+                .groupBy((coach, busStop) -> coach, ConstraintCollectors.countBi())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "310795edbdbb79f6519be13c8bb71cb055710134"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDg2MDY4OnYy", "diffSide": "RIGHT", "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/coachshuttlegathering/solver/CoachShuttleGatheringConstraintProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxOTo0Mzo1NFrOHVf2UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxOTo1NzoyMVrOHVgRXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMwMzk1Mw==", "bodyText": "Not sure what the convention here is, but maybe import static ... HardSoftLongScore... as well?", "url": "https://github.com/kiegroup/optaplanner/pull/938#discussion_r492303953", "createdAt": "2020-09-21T19:43:54Z", "author": {"login": "triceo"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/coachshuttlegathering/solver/CoachShuttleGatheringConstraintProvider.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package org.optaplanner.examples.coachshuttlegathering.solver;\n+\n+import java.util.function.Function;\n+\n+import org.optaplanner.core.api.score.buildin.hardsoftlong.HardSoftLongScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintCollectors;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.core.api.score.stream.Joiners;\n+import org.optaplanner.examples.coachshuttlegathering.domain.Bus;\n+import org.optaplanner.examples.coachshuttlegathering.domain.BusStop;\n+import org.optaplanner.examples.coachshuttlegathering.domain.Coach;\n+import org.optaplanner.examples.coachshuttlegathering.domain.Shuttle;\n+import org.optaplanner.examples.coachshuttlegathering.domain.StopOrHub;\n+\n+public class CoachShuttleGatheringConstraintProvider implements ConstraintProvider {\n+    final static String CONSTRAINT_PACKAGE = \"org.optaplanner.examples.coachshuttlegathering.solver\";\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n+        return new Constraint[] {\n+                coachStopLimit(constraintFactory),\n+                shuttleCapacity(constraintFactory),\n+                coachCapacity(constraintFactory),\n+                coachCapacityShuttleButNoShuttle(constraintFactory),\n+                coachCapacityCorrection(constraintFactory),\n+                transportTime(constraintFactory),\n+                shuttleDestinationIsCoachOrHub(constraintFactory),\n+                shuttleSetupCost(constraintFactory),\n+                distanceFromPrevious(constraintFactory),\n+                distanceBusStopToBusDestination(constraintFactory),\n+                distanceCoachDirectlyToDestination(constraintFactory)\n+        };\n+    }\n+\n+    Constraint coachStopLimit(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Coach.class)\n+                .join(BusStop.class, Joiners.equal(coach -> coach, BusStop::getBus))\n+                .groupBy((coach, busStop) -> coach, ConstraintCollectors.countBi())\n+                .filter((coach, stopCount) -> stopCount > coach.getStopLimit())\n+                .penalizeLong(CONSTRAINT_PACKAGE, \"coachStopLimit\", HardSoftLongScore.ONE_HARD,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "310795edbdbb79f6519be13c8bb71cb055710134"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMxMDg3OQ==", "bodyText": "No, all constraint providers in optaplanner-examples use ScoreType.field, not a static import of field from ScoreType.", "url": "https://github.com/kiegroup/optaplanner/pull/938#discussion_r492310879", "createdAt": "2020-09-21T19:57:21Z", "author": {"login": "Christopher-Chianelli"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/coachshuttlegathering/solver/CoachShuttleGatheringConstraintProvider.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package org.optaplanner.examples.coachshuttlegathering.solver;\n+\n+import java.util.function.Function;\n+\n+import org.optaplanner.core.api.score.buildin.hardsoftlong.HardSoftLongScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintCollectors;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.core.api.score.stream.Joiners;\n+import org.optaplanner.examples.coachshuttlegathering.domain.Bus;\n+import org.optaplanner.examples.coachshuttlegathering.domain.BusStop;\n+import org.optaplanner.examples.coachshuttlegathering.domain.Coach;\n+import org.optaplanner.examples.coachshuttlegathering.domain.Shuttle;\n+import org.optaplanner.examples.coachshuttlegathering.domain.StopOrHub;\n+\n+public class CoachShuttleGatheringConstraintProvider implements ConstraintProvider {\n+    final static String CONSTRAINT_PACKAGE = \"org.optaplanner.examples.coachshuttlegathering.solver\";\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n+        return new Constraint[] {\n+                coachStopLimit(constraintFactory),\n+                shuttleCapacity(constraintFactory),\n+                coachCapacity(constraintFactory),\n+                coachCapacityShuttleButNoShuttle(constraintFactory),\n+                coachCapacityCorrection(constraintFactory),\n+                transportTime(constraintFactory),\n+                shuttleDestinationIsCoachOrHub(constraintFactory),\n+                shuttleSetupCost(constraintFactory),\n+                distanceFromPrevious(constraintFactory),\n+                distanceBusStopToBusDestination(constraintFactory),\n+                distanceCoachDirectlyToDestination(constraintFactory)\n+        };\n+    }\n+\n+    Constraint coachStopLimit(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Coach.class)\n+                .join(BusStop.class, Joiners.equal(coach -> coach, BusStop::getBus))\n+                .groupBy((coach, busStop) -> coach, ConstraintCollectors.countBi())\n+                .filter((coach, stopCount) -> stopCount > coach.getStopLimit())\n+                .penalizeLong(CONSTRAINT_PACKAGE, \"coachStopLimit\", HardSoftLongScore.ONE_HARD,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMwMzk1Mw=="}, "originalCommit": {"oid": "310795edbdbb79f6519be13c8bb71cb055710134"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDg2NjA1OnYy", "diffSide": "RIGHT", "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/coachshuttlegathering/solver/CoachShuttleGatheringConstraintProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxOTo0NToyMVrOHVf5nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxOTo0NToyMVrOHVf5nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMwNDc5OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Correct the double counting\n          \n          \n            \n                // Explanation: groupBy is like accumlate, but it doesn't trigger on empty streams.\n          \n          \n            \n                // We need something like\n          \n          \n            \n                // .accumlate(Function<ConstraintStream, UniConstraintStream<T>>, T defaultValue): ConstraintStream+1\n          \n          \n            \n                // To change it from 3 separate constraints (one for the normal case, one in the case of empty stream,\n          \n          \n            \n                // one to remove double counting)\n          \n          \n            \n                /* \n          \n          \n            \n                   Correct the double counting\n          \n          \n            \n                   Explanation: groupBy is like accumulate, but it doesn't trigger on empty streams.\n          \n          \n            \n                   We need something like\n          \n          \n            \n                    .accumulate(Function<ConstraintStream, UniConstraintStream<T>>, T defaultValue): ConstraintStream+1\n          \n          \n            \n                   To change it from 3 separate constraints (one for the normal case, one in the case of empty stream,\n          \n          \n            \n                   one to remove double counting).\n          \n          \n            \n                 */", "url": "https://github.com/kiegroup/optaplanner/pull/938#discussion_r492304799", "createdAt": "2020-09-21T19:45:21Z", "author": {"login": "triceo"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/coachshuttlegathering/solver/CoachShuttleGatheringConstraintProvider.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package org.optaplanner.examples.coachshuttlegathering.solver;\n+\n+import java.util.function.Function;\n+\n+import org.optaplanner.core.api.score.buildin.hardsoftlong.HardSoftLongScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintCollectors;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.core.api.score.stream.Joiners;\n+import org.optaplanner.examples.coachshuttlegathering.domain.Bus;\n+import org.optaplanner.examples.coachshuttlegathering.domain.BusStop;\n+import org.optaplanner.examples.coachshuttlegathering.domain.Coach;\n+import org.optaplanner.examples.coachshuttlegathering.domain.Shuttle;\n+import org.optaplanner.examples.coachshuttlegathering.domain.StopOrHub;\n+\n+public class CoachShuttleGatheringConstraintProvider implements ConstraintProvider {\n+    final static String CONSTRAINT_PACKAGE = \"org.optaplanner.examples.coachshuttlegathering.solver\";\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n+        return new Constraint[] {\n+                coachStopLimit(constraintFactory),\n+                shuttleCapacity(constraintFactory),\n+                coachCapacity(constraintFactory),\n+                coachCapacityShuttleButNoShuttle(constraintFactory),\n+                coachCapacityCorrection(constraintFactory),\n+                transportTime(constraintFactory),\n+                shuttleDestinationIsCoachOrHub(constraintFactory),\n+                shuttleSetupCost(constraintFactory),\n+                distanceFromPrevious(constraintFactory),\n+                distanceBusStopToBusDestination(constraintFactory),\n+                distanceCoachDirectlyToDestination(constraintFactory)\n+        };\n+    }\n+\n+    Constraint coachStopLimit(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Coach.class)\n+                .join(BusStop.class, Joiners.equal(coach -> coach, BusStop::getBus))\n+                .groupBy((coach, busStop) -> coach, ConstraintCollectors.countBi())\n+                .filter((coach, stopCount) -> stopCount > coach.getStopLimit())\n+                .penalizeLong(CONSTRAINT_PACKAGE, \"coachStopLimit\", HardSoftLongScore.ONE_HARD,\n+                        (coach, stopCount) -> (stopCount - coach.getStopLimit()) * 1000000L);\n+    }\n+\n+    Constraint shuttleCapacity(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Shuttle.class)\n+                .filter((bus) -> bus.getPassengerQuantityTotal() > bus.getCapacity())\n+                .penalizeLong(CONSTRAINT_PACKAGE, \"shuttleCapacity\", HardSoftLongScore.ONE_HARD,\n+                        (bus) -> (bus.getPassengerQuantityTotal() - bus.getCapacity()) * 1000L);\n+    }\n+\n+    Constraint coachCapacity(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Coach.class)\n+                .join(Shuttle.class)\n+                .join(BusStop.class, Joiners.equal((coach, shuttle) -> shuttle.getDestination(), stop -> stop),\n+                        Joiners.equal((coach, shuttle) -> coach, BusStop::getBus))\n+                .join(BusStop.class, Joiners.equal((coach, shuttle, stop) -> shuttle, BusStop::getBus))\n+                .groupBy((coach, shuttle, stop1, stop2) -> coach,\n+                        ConstraintCollectors.sum((coach, shuttle, stop1, stop2) -> stop2.getPassengerQuantity()))\n+                .filter((coach,\n+                        shuttlePassengerQuantityTotal) -> coach.getPassengerQuantityTotal()\n+                                + shuttlePassengerQuantityTotal > coach.getCapacity())\n+                .penalizeLong(CONSTRAINT_PACKAGE, \"coachCapacity\", HardSoftLongScore.ONE_HARD,\n+                        (coach, shuttlePassengerQuantityTotal) -> (coach.getPassengerQuantityTotal()\n+                                + shuttlePassengerQuantityTotal - coach.getCapacity()) * 1000L);\n+    }\n+\n+    // Correct the double counting\n+    // Explanation: groupBy is like accumlate, but it doesn't trigger on empty streams.\n+    // We need something like\n+    // .accumlate(Function<ConstraintStream, UniConstraintStream<T>>, T defaultValue): ConstraintStream+1\n+    // To change it from 3 separate constraints (one for the normal case, one in the case of empty stream,\n+    // one to remove double counting)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "310795edbdbb79f6519be13c8bb71cb055710134"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDg3MDE0OnYy", "diffSide": "RIGHT", "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/coachshuttlegathering/solver/CoachShuttleGatheringConstraintProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxOTo0Njo0MVrOHVf8Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxOTo0Njo0MVrOHVf8Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMwNTQzOQ==", "bodyText": "Another static import on Joiners?", "url": "https://github.com/kiegroup/optaplanner/pull/938#discussion_r492305439", "createdAt": "2020-09-21T19:46:41Z", "author": {"login": "triceo"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/coachshuttlegathering/solver/CoachShuttleGatheringConstraintProvider.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package org.optaplanner.examples.coachshuttlegathering.solver;\n+\n+import java.util.function.Function;\n+\n+import org.optaplanner.core.api.score.buildin.hardsoftlong.HardSoftLongScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintCollectors;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.core.api.score.stream.Joiners;\n+import org.optaplanner.examples.coachshuttlegathering.domain.Bus;\n+import org.optaplanner.examples.coachshuttlegathering.domain.BusStop;\n+import org.optaplanner.examples.coachshuttlegathering.domain.Coach;\n+import org.optaplanner.examples.coachshuttlegathering.domain.Shuttle;\n+import org.optaplanner.examples.coachshuttlegathering.domain.StopOrHub;\n+\n+public class CoachShuttleGatheringConstraintProvider implements ConstraintProvider {\n+    final static String CONSTRAINT_PACKAGE = \"org.optaplanner.examples.coachshuttlegathering.solver\";\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n+        return new Constraint[] {\n+                coachStopLimit(constraintFactory),\n+                shuttleCapacity(constraintFactory),\n+                coachCapacity(constraintFactory),\n+                coachCapacityShuttleButNoShuttle(constraintFactory),\n+                coachCapacityCorrection(constraintFactory),\n+                transportTime(constraintFactory),\n+                shuttleDestinationIsCoachOrHub(constraintFactory),\n+                shuttleSetupCost(constraintFactory),\n+                distanceFromPrevious(constraintFactory),\n+                distanceBusStopToBusDestination(constraintFactory),\n+                distanceCoachDirectlyToDestination(constraintFactory)\n+        };\n+    }\n+\n+    Constraint coachStopLimit(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Coach.class)\n+                .join(BusStop.class, Joiners.equal(coach -> coach, BusStop::getBus))\n+                .groupBy((coach, busStop) -> coach, ConstraintCollectors.countBi())\n+                .filter((coach, stopCount) -> stopCount > coach.getStopLimit())\n+                .penalizeLong(CONSTRAINT_PACKAGE, \"coachStopLimit\", HardSoftLongScore.ONE_HARD,\n+                        (coach, stopCount) -> (stopCount - coach.getStopLimit()) * 1000000L);\n+    }\n+\n+    Constraint shuttleCapacity(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Shuttle.class)\n+                .filter((bus) -> bus.getPassengerQuantityTotal() > bus.getCapacity())\n+                .penalizeLong(CONSTRAINT_PACKAGE, \"shuttleCapacity\", HardSoftLongScore.ONE_HARD,\n+                        (bus) -> (bus.getPassengerQuantityTotal() - bus.getCapacity()) * 1000L);\n+    }\n+\n+    Constraint coachCapacity(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Coach.class)\n+                .join(Shuttle.class)\n+                .join(BusStop.class, Joiners.equal((coach, shuttle) -> shuttle.getDestination(), stop -> stop),\n+                        Joiners.equal((coach, shuttle) -> coach, BusStop::getBus))\n+                .join(BusStop.class, Joiners.equal((coach, shuttle, stop) -> shuttle, BusStop::getBus))\n+                .groupBy((coach, shuttle, stop1, stop2) -> coach,\n+                        ConstraintCollectors.sum((coach, shuttle, stop1, stop2) -> stop2.getPassengerQuantity()))\n+                .filter((coach,\n+                        shuttlePassengerQuantityTotal) -> coach.getPassengerQuantityTotal()\n+                                + shuttlePassengerQuantityTotal > coach.getCapacity())\n+                .penalizeLong(CONSTRAINT_PACKAGE, \"coachCapacity\", HardSoftLongScore.ONE_HARD,\n+                        (coach, shuttlePassengerQuantityTotal) -> (coach.getPassengerQuantityTotal()\n+                                + shuttlePassengerQuantityTotal - coach.getCapacity()) * 1000L);\n+    }\n+\n+    // Correct the double counting\n+    // Explanation: groupBy is like accumlate, but it doesn't trigger on empty streams.\n+    // We need something like\n+    // .accumlate(Function<ConstraintStream, UniConstraintStream<T>>, T defaultValue): ConstraintStream+1\n+    // To change it from 3 separate constraints (one for the normal case, one in the case of empty stream,\n+    // one to remove double counting)\n+    Constraint coachCapacityCorrection(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Coach.class)\n+                .join(Shuttle.class)\n+                .join(BusStop.class, Joiners.equal((coach, shuttle) -> shuttle.getDestination(), stop -> stop),\n+                        Joiners.equal((coach, shuttle) -> coach, BusStop::getBus))\n+                .join(BusStop.class, Joiners.equal((coach, shuttle, stop) -> shuttle, BusStop::getBus))\n+                .groupBy((coach, shuttle, stop1, stop2) -> coach,\n+                        ConstraintCollectors.sum((coach, shuttle, stop1, stop2) -> stop2.getPassengerQuantity()))\n+                .filter((coach,\n+                        shuttlePassengerQuantityTotal) -> coach.getPassengerQuantityTotal() > coach.getCapacity())\n+                .rewardLong(CONSTRAINT_PACKAGE, \"coachCapacityCorrection\", HardSoftLongScore.ONE_HARD,\n+                        (coach, shuttlePassengerQuantityTotal) -> (coach.getPassengerQuantityTotal() - coach.getCapacity())\n+                                * 1000L);\n+    }\n+\n+    Constraint coachCapacityShuttleButNoShuttle(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Coach.class)\n+                .filter(coach -> coach.getPassengerQuantityTotal() > coach.getCapacity())\n+                .penalizeLong(CONSTRAINT_PACKAGE, \"coachCapacityShuttleButNoShuttle\", HardSoftLongScore.ONE_HARD,\n+                        coach -> (coach.getPassengerQuantityTotal() - coach.getCapacity()) * 1000L);\n+    }\n+\n+    Constraint transportTime(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BusStop.class)\n+                .filter((busStop) -> busStop.getTransportTimeToHub() != null && busStop.getTransportTimeRemainder() < 0)\n+                .penalizeLong(CONSTRAINT_PACKAGE, \"transportTime\", HardSoftLongScore.ONE_HARD,\n+                        (busStop) -> -busStop.getTransportTimeRemainder());\n+    }\n+\n+    Constraint shuttleDestinationIsCoachOrHub(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Shuttle.class)\n+                .filter((shuttle) -> shuttle.getDestination() != null)\n+                .join(StopOrHub.class, Joiners.equal(Shuttle::getDestination, Function.identity()))\n+                .filter((shuttle, stop) -> !stop.isVisitedByCoach())\n+                .penalizeLong(CONSTRAINT_PACKAGE, \"shuttleDestinationIsCoachOrHub\", HardSoftLongScore.ONE_HARD,\n+                        (bus, stop) -> 1000000000L);\n+    }\n+\n+    Constraint shuttleSetupCost(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Bus.class)\n+                .filter(bus -> bus.getNextStop() != null)\n+                .penalizeLong(CONSTRAINT_PACKAGE, \"shuttleSetupCost\", HardSoftLongScore.ONE_SOFT, Bus::getSetupCost);\n+    }\n+\n+    Constraint distanceFromPrevious(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BusStop.class)\n+                .filter(bus -> bus.getPreviousBusOrStop() != null)\n+                .penalizeLong(CONSTRAINT_PACKAGE, \"distanceFromPrevious\", HardSoftLongScore.ONE_SOFT,\n+                        BusStop::getDistanceFromPreviousCost);\n+    }\n+\n+    Constraint distanceBusStopToBusDestination(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BusStop.class)\n+                .filter(busStop -> busStop.getNextStop() == null)\n+                .join(Bus.class, Joiners.equal(BusStop::getBus, Function.identity()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "310795edbdbb79f6519be13c8bb71cb055710134"}, "originalPosition": 129}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4246, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}