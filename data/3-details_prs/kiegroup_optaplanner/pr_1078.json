{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ2MDAzMzY2", "number": 1078, "title": "PLANNER-2163 Use Drools groupBy node throughout CS-D", "bodyText": "Implements DROOLS-5875 in CS-D. This allows us to remove the vast majority of CS-D code, which until now had to deal with 3 different underlying groupBy implementations. CS-D is finally a thin wrapper around Drools executable model, as it always should have been.\nThis change is expected to bring some performance benefits to groupBy, both single and double, although double groupBy will never perform well in CS-D.\nThis code has been tested on FULL_ASSERT with nqueens, cloudbalancing and machinereassignment.\nThe PR depends on kiegroup/kogito-runtimes#990 to compile and test cleanly.", "createdAt": "2020-12-28T09:00:41Z", "url": "https://github.com/kiegroup/optaplanner/pull/1078", "merged": true, "mergeCommit": {"oid": "353a5cc60138db7e2d3384c44eae417f1a78966a"}, "closed": true, "closedAt": "2021-01-19T14:37:42Z", "author": {"login": "triceo"}, "timelineItems": {"totalCount": 45, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdqixuCABqjQxNTE1MTY5NzM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdwXSqWAH2gAyNTQ2MDAzMzY2OmI0ZGJhMmMyZWMwNDJmM2YzMDM3OWQ1M2E0ODk2MDM0YjhkNzA1MTc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f75a66b811c3166d0fbe1da99513b9d3316a0c3a", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/f75a66b811c3166d0fbe1da99513b9d3316a0c3a", "committedDate": "2020-12-28T09:29:48Z", "message": "Remove groupByCount"}, "afterCommit": {"oid": "a9070bdd50a30e61eda9025155328e054d66b9bd", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/a9070bdd50a30e61eda9025155328e054d66b9bd", "committedDate": "2020-12-28T09:32:47Z", "message": "Remove groupByCount"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a9070bdd50a30e61eda9025155328e054d66b9bd", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/a9070bdd50a30e61eda9025155328e054d66b9bd", "committedDate": "2020-12-28T09:32:47Z", "message": "Remove groupByCount"}, "afterCommit": {"oid": "113ecff0e3b4e8a62cbb3304474b55324f274c11", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/113ecff0e3b4e8a62cbb3304474b55324f274c11", "committedDate": "2020-12-30T17:26:59Z", "message": "Disable KieBase mutability"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "113ecff0e3b4e8a62cbb3304474b55324f274c11", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/113ecff0e3b4e8a62cbb3304474b55324f274c11", "committedDate": "2020-12-30T17:26:59Z", "message": "Disable KieBase mutability"}, "afterCommit": {"oid": "cf4d87031e245ea1bcba963e9a5613ea271d944f", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/cf4d87031e245ea1bcba963e9a5613ea271d944f", "committedDate": "2021-01-11T10:32:48Z", "message": "Plug LHS into assemblers"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY3MTUzOTU4", "url": "https://github.com/kiegroup/optaplanner/pull/1078#pullrequestreview-567153958", "createdAt": "2021-01-13T12:01:24Z", "commit": {"oid": "b472bff8831d224d02fc513c2c2f64803a20f20f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxMjowMToyNVrOISsNKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxMjowMToyNVrOISsNKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQ2OTU0NQ==", "bodyText": "Note to self: remove once Kogito has Drools 7.49.\nUntil then, the tests will be failing and I would therefore not get to see Sonar.", "url": "https://github.com/kiegroup/optaplanner/pull/1078#discussion_r556469545", "createdAt": "2021-01-13T12:01:25Z", "author": {"login": "triceo"}, "path": "Jenkinsfile", "diffHunk": "@@ -43,7 +43,7 @@ pipeline {\n         }\n         stage('Build OptaPlanner') {\n             steps {\n-                mavenCleanInstall('optaplanner', false, ['run-code-coverage'], '-Dfull')\n+                mavenCleanInstall('optaplanner', false, ['run-code-coverage'], '-Dfull -Dmaven.test.failure.ignore=true')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b472bff8831d224d02fc513c2c2f64803a20f20f"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY3MTU0ODIw", "url": "https://github.com/kiegroup/optaplanner/pull/1078#pullrequestreview-567154820", "createdAt": "2021-01-13T12:02:39Z", "commit": {"oid": "b472bff8831d224d02fc513c2c2f64803a20f20f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxMjowMjozOVrOISsPpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxMjowMjozOVrOISsPpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQ3MDE4MQ==", "bodyText": "Although technically unrelated, this change improves DRL performance by a couple percentage points, and I was doing the same thing for CS-D, so I decided to introduce it here, too.", "url": "https://github.com/kiegroup/optaplanner/pull/1078#discussion_r556470181", "createdAt": "2021-01-13T12:02:39Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/director/ScoreDirectorFactoryFactory.java", "diffHunk": "@@ -268,7 +269,7 @@ private void checkMultipleScoreDirectorFactoryTypes(EasyScoreDirectorFactory eas\n         }\n \n         try {\n-            KieBase kieBase = kieHelper.build(ExecutableModelProject.class);\n+            KieBase kieBase = kieHelper.build(ExecutableModelProject.class, KieBaseMutabilityOption.DISABLED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b472bff8831d224d02fc513c2c2f64803a20f20f"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6437804ce969d119b88a8894212d49760cc6bddd", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/6437804ce969d119b88a8894212d49760cc6bddd", "committedDate": "2021-01-13T13:51:10Z", "message": "Remove the old groupBy implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f56016e110a3909e98516c5147a930ce002a7a3", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/1f56016e110a3909e98516c5147a930ce002a7a3", "committedDate": "2021-01-13T13:51:10Z", "message": "Disable KieBase mutability"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e63eeba09b8ca39401b18f2fa1217155eacbab41", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/e63eeba09b8ca39401b18f2fa1217155eacbab41", "committedDate": "2021-01-13T13:51:10Z", "message": "No more expectedGroupByCount"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8b39f89b2d22733249c0045cf84d7e835f09b79", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/d8b39f89b2d22733249c0045cf84d7e835f09b79", "committedDate": "2021-01-13T13:51:10Z", "message": "Implement the left hand sides"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ccdc5c34ff47798f58478cfe59d5a4cfe51eb6b6", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/ccdc5c34ff47798f58478cfe59d5a4cfe51eb6b6", "committedDate": "2021-01-13T13:51:10Z", "message": "Plug LHS into assemblers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4a811e5e3073e05b2a2c9ce696ba4c9ce04fb3e", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/f4a811e5e3073e05b2a2c9ce696ba4c9ce04fb3e", "committedDate": "2021-01-13T13:51:10Z", "message": "Remove alpha indexing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c42ae01d15cc485ec220acdc27cc303ee104a58a", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/c42ae01d15cc485ec220acdc27cc303ee104a58a", "committedDate": "2021-01-13T13:51:11Z", "message": "Fix imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3da19a461dbcf4c5249726d5bea322ee1e0574a1", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/3da19a461dbcf4c5249726d5bea322ee1e0574a1", "committedDate": "2021-01-13T13:51:11Z", "message": "Try to get to Sonar"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d61cd849a477cc81a26b3a235d28e68b62974cb3", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/d61cd849a477cc81a26b3a235d28e68b62974cb3", "committedDate": "2021-01-13T13:51:11Z", "message": "Actually try to get to Sonar"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3360653b81a0f117f6dfd1b1734f45245f837ab5", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/3360653b81a0f117f6dfd1b1734f45245f837ab5", "committedDate": "2021-01-13T13:51:11Z", "message": "AbstractGroupByMutator is no more"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3a4d5ef9c6c88059858a4938ba48f8cf2402438", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/c3a4d5ef9c6c88059858a4938ba48f8cf2402438", "committedDate": "2021-01-13T13:51:11Z", "message": "Remove existence mutators"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29e815d6444043caabe6bf47e061b0142c61954e", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/29e815d6444043caabe6bf47e061b0142c61954e", "committedDate": "2021-01-13T13:51:11Z", "message": "Remove join mutators"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f845c5efc77b6a7b97b7b237bf4de2057100b9ed", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/f845c5efc77b6a7b97b7b237bf4de2057100b9ed", "committedDate": "2021-01-13T13:51:11Z", "message": "Unify grouping mutators"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bef90096048d06292d7d6e4591b865857fb4d0a3", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/bef90096048d06292d7d6e4591b865857fb4d0a3", "committedDate": "2021-01-13T13:51:11Z", "message": "Remove 01 mutator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "075907f995ea07b5d6ff393290d39e5f2befd41a", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/075907f995ea07b5d6ff393290d39e5f2befd41a", "committedDate": "2021-01-13T13:51:12Z", "message": "Remove 10 mutator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bce4ea4968e82fd657535c556125d287260c559a", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/bce4ea4968e82fd657535c556125d287260c559a", "committedDate": "2021-01-13T13:51:12Z", "message": "Remove 11 mutator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6334c174705559926d0880400b17ff30d6e4a0a", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/b6334c174705559926d0880400b17ff30d6e4a0a", "committedDate": "2021-01-13T13:51:12Z", "message": "Remove 20 mutator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "442d260d75537cb1d01d267d35e87fe9a319fab3", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/442d260d75537cb1d01d267d35e87fe9a319fab3", "committedDate": "2021-01-13T13:51:12Z", "message": "Remove 21 mutator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dcfdfa6e43d7fb5fa877316b1b3182db4d3c9f6b", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/dcfdfa6e43d7fb5fa877316b1b3182db4d3c9f6b", "committedDate": "2021-01-13T13:51:12Z", "message": "All mutators are gone"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be645d5e67e96e95b30b899e6dd2fa7fac86492d", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/be645d5e67e96e95b30b899e6dd2fa7fac86492d", "committedDate": "2021-01-13T13:51:12Z", "message": "Formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "661390f9c1055bb0f1b571d322ad6d7b4f8b4043", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/661390f9c1055bb0f1b571d322ad6d7b4f8b4043", "committedDate": "2021-01-13T13:51:12Z", "message": "Nodes move to the rules package"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52a9f4c2f9ab2036b0fd7792a43352a3af3defb1", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/52a9f4c2f9ab2036b0fd7792a43352a3af3defb1", "committedDate": "2021-01-13T13:51:13Z", "message": "Nodes get left hand side"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "577e1807bce93a6efacb94ee4b796b105a7132c1", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/577e1807bce93a6efacb94ee4b796b105a7132c1", "committedDate": "2021-01-13T13:51:13Z", "message": "Remove one level of Node construction indirection"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3de9c194314379094a22632260f2f86622f221bb", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/3de9c194314379094a22632260f2f86622f221bb", "committedDate": "2021-01-13T13:51:13Z", "message": "Convert streams to LHS"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed9ee481dbfeb59305334b02bffe6df4226fc8c5", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/ed9ee481dbfeb59305334b02bffe6df4226fc8c5", "committedDate": "2021-01-13T13:51:13Z", "message": "Finish the major refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "171b48c1c1f15baf43400de6fec04abf86797121", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/171b48c1c1f15baf43400de6fec04abf86797121", "committedDate": "2021-01-13T13:51:13Z", "message": "Hide what may be hidden"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49459a3d4260371fcf70c15d616f0d1249307072", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/49459a3d4260371fcf70c15d616f0d1249307072", "committedDate": "2021-01-13T13:51:13Z", "message": "Address some Sonar stuff"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b472bff8831d224d02fc513c2c2f64803a20f20f", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/b472bff8831d224d02fc513c2c2f64803a20f20f", "committedDate": "2021-01-13T11:49:19Z", "message": "Address some Sonar stuff"}, "afterCommit": {"oid": "49459a3d4260371fcf70c15d616f0d1249307072", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/49459a3d4260371fcf70c15d616f0d1249307072", "committedDate": "2021-01-13T13:51:13Z", "message": "Address some Sonar stuff"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY4MDY0MjA2", "url": "https://github.com/kiegroup/optaplanner/pull/1078#pullrequestreview-568064206", "createdAt": "2021-01-14T09:41:28Z", "commit": {"oid": "49459a3d4260371fcf70c15d616f0d1249307072"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f2502a4763afd7a5ded1bca3cae199905af6526", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/6f2502a4763afd7a5ded1bca3cae199905af6526", "committedDate": "2021-01-14T17:04:02Z", "message": "Fix star imports"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY3NDQzMjYw", "url": "https://github.com/kiegroup/optaplanner/pull/1078#pullrequestreview-567443260", "createdAt": "2021-01-13T17:11:51Z", "commit": {"oid": "49459a3d4260371fcf70c15d616f0d1249307072"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxNzoxMTo1MVrOIS5uhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxNzoxNTo1NVrOITutDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjY5MTA3OQ==", "bodyText": "Please check the star imports; I have seen them on multiple classes in the PR.", "url": "https://github.com/kiegroup/optaplanner/pull/1078#discussion_r556691079", "createdAt": "2021-01-13T17:11:51Z", "author": {"login": "rsynek"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/drools/DroolsConstraintFactory.java", "diffHunk": "@@ -18,11 +18,8 @@\n \n import static org.drools.model.DSL.globalOf;\n \n-import java.util.ArrayList;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n+import java.util.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49459a3d4260371fcf70c15d616f0d1249307072"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQ0MTYyNw==", "bodyText": "The code below seem to access to the first two items of the variables array. Can it contain more items?", "url": "https://github.com/kiegroup/optaplanner/pull/1078#discussion_r557441627", "createdAt": "2021-01-14T14:38:50Z", "author": {"login": "rsynek"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/drools/common/AbstractBiConstraintConsequence.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.score.stream.drools.common;\n+\n+import java.math.BigDecimal;\n+import java.util.function.BiFunction;\n+import java.util.function.Supplier;\n+import java.util.function.ToIntBiFunction;\n+import java.util.function.ToLongBiFunction;\n+\n+import org.drools.model.DSL;\n+import org.drools.model.Drools;\n+import org.drools.model.Global;\n+import org.drools.model.Variable;\n+import org.drools.model.consequences.ConsequenceBuilder;\n+import org.optaplanner.core.impl.score.holder.AbstractScoreHolder;\n+import org.optaplanner.core.impl.score.stream.drools.DroolsConstraint;\n+\n+abstract class AbstractBiConstraintConsequence<A, B> extends AbstractConstraintConsequence<BiLeftHandSide<A, B>> {\n+\n+    @Override\n+    public int getCardinality() {\n+        return 2;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * @return Null.\n+     *         When this method returns {@link ConsequenceMatchWeightType#INTEGER}, children of this class are\n+     *         guaranteed to implement {@link ToIntBiFunction}.\n+     *         When this method returns {@link ConsequenceMatchWeightType#LONG}, children of this class are guaranteed\n+     *         to implement {@link ToLongBiFunction}.\n+     *         When this method returns {@link ConsequenceMatchWeightType#BIG_DECIMAL}, children of this class are\n+     *         guaranteed to implement {@link BiFunction} to {@link BigDecimal}.\n+     */\n+    @Override\n+    public abstract ConsequenceMatchWeightType getMatchWeightType();\n+\n+    @Override\n+    protected final ConsequenceBuilder.ValidBuilder buildConsequence(DroolsConstraint constraint,\n+            Global<? extends AbstractScoreHolder<?>> scoreHolderGlobal, Variable... variables) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49459a3d4260371fcf70c15d616f0d1249307072"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzUzMzM3Mw==", "bodyText": "\"need want\"? Also not sure about using \"we\" in the comments and docs.", "url": "https://github.com/kiegroup/optaplanner/pull/1078#discussion_r557533373", "createdAt": "2021-01-14T16:39:02Z", "author": {"login": "rsynek"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/drools/common/PatternVariable.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.score.stream.drools.common;\n+\n+import static org.drools.model.PatternDSL.betaIndexedBy;\n+import static org.drools.model.PatternDSL.pattern;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.*;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.drools.model.BetaIndex;\n+import org.drools.model.PatternDSL;\n+import org.drools.model.Variable;\n+import org.drools.model.functions.Function1;\n+import org.drools.model.functions.Predicate2;\n+import org.drools.model.view.ViewItem;\n+import org.optaplanner.core.api.function.QuadFunction;\n+import org.optaplanner.core.api.function.QuadPredicate;\n+import org.optaplanner.core.api.function.TriFunction;\n+import org.optaplanner.core.api.function.TriPredicate;\n+import org.optaplanner.core.impl.score.stream.bi.AbstractBiJoiner;\n+import org.optaplanner.core.impl.score.stream.common.JoinerType;\n+\n+class PatternVariable<A> {\n+\n+    private final Variable<A> primaryVariable;\n+    // Patterns in Drools are mutable, yet we need want to share them. Therefore we need to create them on-demand.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49459a3d4260371fcf70c15d616f0d1249307072"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU1OTA1Mg==", "bodyText": "I think the trick with joining two columns into a BiTuple is worth documenting; mainly the motivation.", "url": "https://github.com/kiegroup/optaplanner/pull/1078#discussion_r557559052", "createdAt": "2021-01-14T17:15:55Z", "author": {"login": "rsynek"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/drools/common/BiLeftHandSide.java", "diffHunk": "@@ -0,0 +1,287 @@\n+/*\n+ * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.score.stream.drools.common;\n+\n+import static java.util.Collections.singletonList;\n+import static org.drools.model.DSL.*;\n+import static org.drools.model.PatternDSL.pattern;\n+\n+import java.math.BigDecimal;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.BiFunction;\n+import java.util.function.BiPredicate;\n+import java.util.function.ToIntBiFunction;\n+import java.util.function.ToLongBiFunction;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.drools.model.PatternDSL;\n+import org.drools.model.Variable;\n+import org.drools.model.view.ViewItem;\n+import org.optaplanner.core.api.function.TriPredicate;\n+import org.optaplanner.core.api.score.stream.bi.BiConstraintCollector;\n+import org.optaplanner.core.api.score.stream.tri.TriJoiner;\n+import org.optaplanner.core.impl.score.stream.drools.DroolsVariableFactory;\n+import org.optaplanner.core.impl.score.stream.tri.AbstractTriJoiner;\n+import org.optaplanner.core.impl.score.stream.tri.FilteringTriJoiner;\n+import org.optaplanner.core.impl.score.stream.tri.NoneTriJoiner;\n+\n+public final class BiLeftHandSide<A, B> extends AbstractLeftHandSide {\n+\n+    private final PatternVariable<A> patternVariableA;\n+    private final PatternVariable<B> patternVariableB;\n+\n+    protected BiLeftHandSide(PatternVariable<A> left, PatternVariable<B> right, DroolsVariableFactory variableFactory) {\n+        super(variableFactory);\n+        this.patternVariableA = left;\n+        this.patternVariableB = right;\n+    }\n+\n+    protected BiLeftHandSide(BiLeftHandSide<A, B> leftHandSide, PatternVariable<A> left, PatternVariable<B> right) {\n+        super(leftHandSide.variableFactory);\n+        this.patternVariableA = left;\n+        this.patternVariableB = right;\n+    }\n+\n+    protected PatternVariable<A> getPatternVariableA() {\n+        return patternVariableA;\n+    }\n+\n+    protected PatternVariable<B> getPatternVariableB() {\n+        return patternVariableB;\n+    }\n+\n+    public BiLeftHandSide<A, B> andFilter(BiPredicate<A, B> filter) {\n+        return new BiLeftHandSide<>(this, patternVariableA,\n+                patternVariableB.filter(filter, patternVariableA.getPrimaryVariable()));\n+    }\n+\n+    private <C> BiLeftHandSide<A, B> applyJoiners(Class<C> otherFactType, AbstractTriJoiner<A, B, C> joiner,\n+            TriPredicate<A, B, C> predicate, boolean shouldExist) {\n+        if (joiner == null) {\n+            return applyFilters(otherFactType, predicate, shouldExist);\n+        }\n+        // There is no gamma index in Drools, therefore we replace joining with a filter.\n+        TriPredicate<A, B, C> joinFilter = joiner::matches;\n+        TriPredicate<A, B, C> result = predicate == null ? joinFilter : joinFilter.and(predicate);\n+        // And finally we add the filter to the C pattern.\n+        return applyFilters(otherFactType, result, shouldExist);\n+    }\n+\n+    private <C> BiLeftHandSide<A, B> applyFilters(Class<C> otherFactType, TriPredicate<A, B, C> predicate,\n+            boolean shouldExist) {\n+        Variable<C> toExist = (Variable<C>) variableFactory.createVariable(otherFactType, \"biToExist\");\n+        PatternDSL.PatternDef<C> existencePattern = pattern(toExist);\n+        PatternDSL.PatternDef<C> possiblyFilteredExistencePattern = predicate == null ? existencePattern\n+                : existencePattern.expr(\"Filter using \" + predicate, patternVariableA.getPrimaryVariable(),\n+                        patternVariableB.getPrimaryVariable(), (c, a, b) -> predicate.test(a, b, c));\n+        ViewItem<?> existenceExpression = exists(possiblyFilteredExistencePattern);\n+        if (!shouldExist) {\n+            existenceExpression = not(possiblyFilteredExistencePattern);\n+        }\n+        return new BiLeftHandSide<>(this, patternVariableA, patternVariableB.addDependentExpression(existenceExpression));\n+    }\n+\n+    private <C> BiLeftHandSide<A, B> existsOrNot(Class<C> cClass, TriJoiner<A, B, C>[] joiners, boolean shouldExist) {\n+        int indexOfFirstFilter = -1;\n+        // Prepare the joiner and filter that will be used in the pattern\n+        AbstractTriJoiner<A, B, C> finalJoiner = null;\n+        TriPredicate<A, B, C> finalFilter = null;\n+        for (int i = 0; i < joiners.length; i++) {\n+            AbstractTriJoiner<A, B, C> joiner = (AbstractTriJoiner<A, B, C>) joiners[i];\n+            boolean hasAFilter = indexOfFirstFilter >= 0;\n+            if (joiner instanceof NoneTriJoiner && joiners.length > 1) {\n+                throw new IllegalStateException(\"If present, \" + NoneTriJoiner.class + \" must be the only joiner, got \"\n+                        + Arrays.toString(joiners) + \" instead.\");\n+            } else if (!(joiner instanceof FilteringTriJoiner)) {\n+                if (hasAFilter) {\n+                    throw new IllegalStateException(\"Indexing joiner (\" + joiner + \") must not follow a filtering joiner (\"\n+                            + joiners[indexOfFirstFilter] + \").\");\n+                } else { // Merge this Joiner with the existing Joiners.\n+                    finalJoiner = finalJoiner == null ? joiner : AbstractTriJoiner.merge(finalJoiner, joiner);\n+                }\n+            } else {\n+                if (!hasAFilter) { // From now on, we only allow filtering joiners.\n+                    indexOfFirstFilter = i;\n+                }\n+                // Merge all filters into one to avoid paying the penalty for lack of indexing more than once.\n+                finalFilter = finalFilter == null ? joiner.getFilter() : finalFilter.and(joiner.getFilter());\n+            }\n+        }\n+        return applyJoiners(cClass, finalJoiner, finalFilter, shouldExist);\n+    }\n+\n+    public <C> BiLeftHandSide<A, B> andExists(Class<C> cClass, TriJoiner<A, B, C>[] joiners) {\n+        return existsOrNot(cClass, joiners, true);\n+    }\n+\n+    public <C> BiLeftHandSide<A, B> andNotExists(Class<C> cClass, TriJoiner<A, B, C>[] joiners) {\n+        return existsOrNot(cClass, joiners, false);\n+    }\n+\n+    public <C> TriLeftHandSide<A, B, C> andJoin(UniLeftHandSide<C> right, TriJoiner<A, B, C> joiner) {\n+        AbstractTriJoiner<A, B, C> castJoiner = (AbstractTriJoiner<A, B, C>) joiner;\n+        PatternVariable<C> filteredRight = right.getPatternVariableA()\n+                .filter(castJoiner::matches, patternVariableA.getPrimaryVariable(),\n+                        patternVariableB.getPrimaryVariable());\n+        return new TriLeftHandSide<>(patternVariableA, patternVariableB, filteredRight, variableFactory);\n+    }\n+\n+    public <NewA> UniLeftHandSide<NewA> andGroupBy(BiFunction<A, B, NewA> keyMapping) {\n+        Variable<A> inputA = patternVariableA.getPrimaryVariable();\n+        Variable<B> inputB = patternVariableB.getPrimaryVariable();\n+        Variable<NewA> groupKey = variableFactory.createVariable(\"groupKey\");\n+        ViewItem<?> innerGroupByPattern = joinViewItemsWithLogicalAnd(patternVariableA, patternVariableB);\n+        ViewItem<?> groupByPattern = groupBy(innerGroupByPattern, inputA, inputB, groupKey,\n+                keyMapping::apply);\n+        Variable<NewA> newA = (Variable<NewA>) variableFactory.createVariable(\"newA\", from(groupKey));\n+        return new UniLeftHandSide<>(new PatternVariable<>(newA, singletonList(groupByPattern)), variableFactory);\n+    }\n+\n+    public <NewA> UniLeftHandSide<NewA> andGroupBy(BiConstraintCollector<A, B, ?, NewA> collector) {\n+        Variable<BiTuple<A, B>> accumulateSource =\n+                (Variable<BiTuple<A, B>>) variableFactory.createVariable(BiTuple.class, \"source\");\n+        PatternVariable<B> newPatternVariableB = patternVariableB.bind(accumulateSource,\n+                patternVariableA.getPrimaryVariable(), (b, a) -> new BiTuple<>(a, b));\n+        Variable<NewA> outputVariable = variableFactory.createVariable(\"collected\");\n+        ViewItem<?> innerAccumulatePattern = joinViewItemsWithLogicalAnd(patternVariableA, newPatternVariableB);\n+        ViewItem<?> outerAccumulatePattern = accumulate(innerAccumulatePattern,\n+                accFunction(() -> new DroolsBiAccumulateFunction<>(collector), accumulateSource).as(outputVariable));\n+        return new UniLeftHandSide<>(new PatternVariable<>(outputVariable, singletonList(outerAccumulatePattern)),\n+                variableFactory);\n+    }\n+\n+    public <NewA, NewB> BiLeftHandSide<NewA, NewB> andGroupBy(BiFunction<A, B, NewA> keyMappingA,\n+            BiFunction<A, B, NewB> keyMappingB) {\n+        Variable<A> inputA = patternVariableA.getPrimaryVariable();\n+        Variable<B> inputB = patternVariableB.getPrimaryVariable();\n+        Variable<BiTuple<NewA, NewB>> groupKey =\n+                (Variable<BiTuple<NewA, NewB>>) variableFactory.createVariable(BiTuple.class, \"groupKey\");\n+        ViewItem<?> innerGroupByPattern = joinViewItemsWithLogicalAnd(patternVariableA, patternVariableB);\n+        ViewItem<?> groupByPattern = groupBy(innerGroupByPattern, inputA, inputB, groupKey,\n+                (a, b) -> new BiTuple<>(keyMappingA.apply(a, b), keyMappingB.apply(a, b)));\n+        Variable<NewA> newA =\n+                (Variable<NewA>) variableFactory.createVariable(\"newA\", from(groupKey, k -> k.a));\n+        Variable<NewB> newB =\n+                (Variable<NewB>) variableFactory.createVariable(\"newB\", from(groupKey, k -> k.b));\n+        return new BiLeftHandSide<>(new PatternVariable<>(newA, singletonList(groupByPattern)),\n+                new PatternVariable<>(newB), variableFactory);\n+    }\n+\n+    public <NewA, NewB> BiLeftHandSide<NewA, NewB> andGroupBy(BiFunction<A, B, NewA> keyMappingA,\n+            BiConstraintCollector<A, B, ?, NewB> collectorB) {\n+        Variable<A> inputA = patternVariableA.getPrimaryVariable();\n+        Variable<B> inputB = patternVariableB.getPrimaryVariable();\n+        Variable<BiTuple<A, B>> accumulateSource =\n+                (Variable<BiTuple<A, B>>) variableFactory.createVariable(BiTuple.class, \"source\");\n+        PatternVariable<B> newPatternVariableB = patternVariableB.bind(accumulateSource, inputA,\n+                (b, a) -> new BiTuple<>(a, b));\n+        Variable<NewA> groupKey = variableFactory.createVariable(\"groupKey\");\n+        Variable<NewB> output = variableFactory.createVariable(\"output\");\n+        ViewItem<?> innerGroupByPattern = joinViewItemsWithLogicalAnd(patternVariableA, newPatternVariableB);\n+        ViewItem<?> groupByPattern = groupBy(innerGroupByPattern, inputA, inputB, groupKey,\n+                keyMappingA::apply,\n+                accFunction(() -> new DroolsBiAccumulateFunction<>(collectorB), accumulateSource).as(output));\n+        Variable<NewA> newA = (Variable<NewA>) variableFactory.createVariable(\"newA\", from(groupKey));\n+        Variable<NewB> newB = (Variable<NewB>) variableFactory.createVariable(\"newB\", from(output));\n+        return new BiLeftHandSide<>(new PatternVariable<>(newA, singletonList(groupByPattern)),\n+                new PatternVariable<>(newB), variableFactory);\n+    }\n+\n+    public <NewA, NewB, NewC> TriLeftHandSide<NewA, NewB, NewC> andGroupBy(BiFunction<A, B, NewA> keyMappingA,\n+            BiFunction<A, B, NewB> keyMappingB, BiConstraintCollector<A, B, ?, NewC> collectorC) {\n+        Variable<A> inputA = patternVariableA.getPrimaryVariable();\n+        Variable<B> inputB = patternVariableB.getPrimaryVariable();\n+        Variable<BiTuple<A, B>> accumulateSource =\n+                (Variable<BiTuple<A, B>>) variableFactory.createVariable(BiTuple.class, \"source\");\n+        PatternVariable<B> newPatternVariableB = patternVariableB.bind(accumulateSource, inputA,\n+                (b, a) -> new BiTuple<>(a, b));\n+        Variable<BiTuple<NewA, NewB>> groupKey =\n+                (Variable<BiTuple<NewA, NewB>>) variableFactory.createVariable(BiTuple.class, \"groupKey\");\n+        Variable<NewC> output = variableFactory.createVariable(\"output\");\n+        ViewItem<?> innerGroupByPattern = joinViewItemsWithLogicalAnd(patternVariableA, newPatternVariableB);\n+        ViewItem<?> groupByPattern = groupBy(innerGroupByPattern, inputA, inputB, groupKey,\n+                (a, b) -> new BiTuple<>(keyMappingA.apply(a, b), keyMappingB.apply(a, b)),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49459a3d4260371fcf70c15d616f0d1249307072"}, "originalPosition": 219}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9939ea2f15e53fc6e1cfd210a6c350d5dbd6f4d5", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/9939ea2f15e53fc6e1cfd210a6c350d5dbd6f4d5", "committedDate": "2021-01-14T17:51:41Z", "message": "Address some code review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY5MDE2NDU4", "url": "https://github.com/kiegroup/optaplanner/pull/1078#pullrequestreview-569016458", "createdAt": "2021-01-15T07:44:28Z", "commit": {"oid": "49459a3d4260371fcf70c15d616f0d1249307072"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwNzo0NDoyOFrOIUHT5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwNzo0NDoyOFrOIUHT5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzk2MjIxMg==", "bodyText": "Naming: I think the parameter should be called predicate:\n\nwe filter based on a predicate\nother methods (see applyJoiners) use that name for the same parameter too", "url": "https://github.com/kiegroup/optaplanner/pull/1078#discussion_r557962212", "createdAt": "2021-01-15T07:44:28Z", "author": {"login": "rsynek"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/drools/common/BiLeftHandSide.java", "diffHunk": "@@ -0,0 +1,287 @@\n+/*\n+ * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.score.stream.drools.common;\n+\n+import static java.util.Collections.singletonList;\n+import static org.drools.model.DSL.*;\n+import static org.drools.model.PatternDSL.pattern;\n+\n+import java.math.BigDecimal;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.BiFunction;\n+import java.util.function.BiPredicate;\n+import java.util.function.ToIntBiFunction;\n+import java.util.function.ToLongBiFunction;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.drools.model.PatternDSL;\n+import org.drools.model.Variable;\n+import org.drools.model.view.ViewItem;\n+import org.optaplanner.core.api.function.TriPredicate;\n+import org.optaplanner.core.api.score.stream.bi.BiConstraintCollector;\n+import org.optaplanner.core.api.score.stream.tri.TriJoiner;\n+import org.optaplanner.core.impl.score.stream.drools.DroolsVariableFactory;\n+import org.optaplanner.core.impl.score.stream.tri.AbstractTriJoiner;\n+import org.optaplanner.core.impl.score.stream.tri.FilteringTriJoiner;\n+import org.optaplanner.core.impl.score.stream.tri.NoneTriJoiner;\n+\n+public final class BiLeftHandSide<A, B> extends AbstractLeftHandSide {\n+\n+    private final PatternVariable<A> patternVariableA;\n+    private final PatternVariable<B> patternVariableB;\n+\n+    protected BiLeftHandSide(PatternVariable<A> left, PatternVariable<B> right, DroolsVariableFactory variableFactory) {\n+        super(variableFactory);\n+        this.patternVariableA = left;\n+        this.patternVariableB = right;\n+    }\n+\n+    protected BiLeftHandSide(BiLeftHandSide<A, B> leftHandSide, PatternVariable<A> left, PatternVariable<B> right) {\n+        super(leftHandSide.variableFactory);\n+        this.patternVariableA = left;\n+        this.patternVariableB = right;\n+    }\n+\n+    protected PatternVariable<A> getPatternVariableA() {\n+        return patternVariableA;\n+    }\n+\n+    protected PatternVariable<B> getPatternVariableB() {\n+        return patternVariableB;\n+    }\n+\n+    public BiLeftHandSide<A, B> andFilter(BiPredicate<A, B> filter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49459a3d4260371fcf70c15d616f0d1249307072"}, "originalPosition": 69}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1118d81505411a1391d915d0e484ae411adc0ee", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/d1118d81505411a1391d915d0e484ae411adc0ee", "committedDate": "2021-01-15T09:42:35Z", "message": "Standardize the creation of accumulate function"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ac4f2604ed2cd707b348ed90fbb68db3cc53a0c", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/4ac4f2604ed2cd707b348ed90fbb68db3cc53a0c", "committedDate": "2021-01-15T10:01:03Z", "message": "You gotta love generics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bed8fde8d0d1677ae092f7a59d635faf1acb4b01", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/bed8fde8d0d1677ae092f7a59d635faf1acb4b01", "committedDate": "2021-01-15T10:10:19Z", "message": "Standardize composite keys"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c0653612a0c0259d4ca4682111a4d89e117297c", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/2c0653612a0c0259d4ca4682111a4d89e117297c", "committedDate": "2021-01-15T10:11:47Z", "message": "Address another code review comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72897c90779653d47f1055fe49a3e8459504f6cb", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/72897c90779653d47f1055fe49a3e8459504f6cb", "committedDate": "2021-01-15T10:54:20Z", "message": "Some more Javadocs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9119e2e5ef72d60761f665741d1f8b691679d18d", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/9119e2e5ef72d60761f665741d1f8b691679d18d", "committedDate": "2021-01-15T10:57:19Z", "message": "Better name for impact methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4dba2c2ec042f3f30379d53a4896034b8d70517", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/b4dba2c2ec042f3f30379d53a4896034b8d70517", "committedDate": "2021-01-15T11:33:48Z", "message": "Finalize the PR"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3163, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}