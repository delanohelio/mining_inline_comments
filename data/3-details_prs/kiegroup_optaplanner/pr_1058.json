{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMxMDk3MDQy", "number": 1058, "title": "PLANNER-2269: Make CS-B Tuple a plain data carrier", "bodyText": "", "createdAt": "2020-12-02T15:29:51Z", "url": "https://github.com/kiegroup/optaplanner/pull/1058", "merged": true, "mergeCommit": {"oid": "c1ae163a8da99e8d74ea0bff63e75cfccda023d3"}, "closed": true, "closedAt": "2020-12-10T16:32:56Z", "author": {"login": "triceo"}, "timelineItems": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdiQY-KgFqTU0Mjk2MTQ4MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdk1NLIAH2gAyNTMxMDk3MDQyOjViNmZkNWFjYmY3YTZjNmE2NTc4ZjA2NmUyN2Y5OWQ1NzJhMWY2ZWE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyOTYxNDgw", "url": "https://github.com/kiegroup/optaplanner/pull/1058#pullrequestreview-542961480", "createdAt": "2020-12-02T15:36:25Z", "commit": {"oid": "4a2e3fea9fecf2d18f8cf1d3fb48487476d6dbf3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNTozNjoyNVrOH9g2rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNTozNjoyNVrOH9g2rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI2MzQ2OQ==", "bodyText": "This is not actually in use yet. The change to completely remove Node reference from Tuple seemed too invasive for this PR.", "url": "https://github.com/kiegroup/optaplanner/pull/1058#discussion_r534263469", "createdAt": "2020-12-02T15:36:25Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/BavetConstraintSession.java", "diffHunk": "@@ -48,34 +56,80 @@\n     private final ScoreInliner<Score_> scoreInliner;\n \n     private final Map<Class<?>, BavetFromUniNode<Object>> declaredClassToNodeMap;\n-    private final int nodeOrderSize;\n+    private final int nodeIndexSize;\n     private final Map<String, BavetScoringNode> constraintIdToScoringNodeMap;\n \n     private final Map<Class<?>, List<BavetFromUniNode<Object>>> effectiveClassToNodeListMap;\n \n-    private final List<Queue<BavetAbstractTuple>> nodeOrderedQueueList;\n+    private final List<BavetAbstractNode> nodeIndexToNodeMap;\n+    private final List<Queue<BavetAbstractTuple>> nodeIndexToDirtyTupleQueueMap;\n     private final Map<Object, List<BavetFromUniTuple<Object>>> fromTupleListMap;\n \n     public BavetConstraintSession(boolean constraintMatchEnabled, ScoreDefinition<Score_> scoreDefinition,\n             Map<BavetConstraint<Solution_>, Score_> constraintToWeightMap) {\n         this.constraintMatchEnabled = constraintMatchEnabled;\n-        this.zeroScore = scoreDefinition.getZeroScore();\n-        this.scoreInliner = scoreDefinition.buildScoreInliner(constraintMatchEnabled);\n+        zeroScore = scoreDefinition.getZeroScore();\n+        scoreInliner = scoreDefinition.buildScoreInliner(constraintMatchEnabled);\n         declaredClassToNodeMap = new HashMap<>(50);\n         BavetNodeBuildPolicy<Solution_> buildPolicy = new BavetNodeBuildPolicy<>(this, constraintToWeightMap.size());\n         constraintToWeightMap.forEach((constraint, constraintWeight) -> {\n             constraint.createNodes(buildPolicy, declaredClassToNodeMap, constraintWeight);\n         });\n-        this.nodeOrderSize = buildPolicy.getNodeOrderMaximum() + 1;\n+        nodeIndexSize = buildPolicy.getNodeIndexMaximum() + 1;\n         constraintIdToScoringNodeMap = buildPolicy.getConstraintIdToScoringNodeMap();\n         effectiveClassToNodeListMap = new HashMap<>(declaredClassToNodeMap.size());\n-        nodeOrderedQueueList = new ArrayList<>(nodeOrderSize);\n-        for (int i = 0; i < nodeOrderSize; i++) {\n-            nodeOrderedQueueList.add(new ArrayDeque<>(1000));\n+        nodeIndexToNodeMap = new ArrayList<>(this.nodeIndexSize);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a2e3fea9fecf2d18f8cf1d3fb48487476d6dbf3"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyOTYyMDk0", "url": "https://github.com/kiegroup/optaplanner/pull/1058#pullrequestreview-542962094", "createdAt": "2020-12-02T15:36:59Z", "commit": {"oid": "4a2e3fea9fecf2d18f8cf1d3fb48487476d6dbf3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNTozNjo1OVrOH9g44Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNTozNjo1OVrOH9g44Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI2NDAzMw==", "bodyText": "Why is NEW not dirty?", "url": "https://github.com/kiegroup/optaplanner/pull/1058#discussion_r534264033", "createdAt": "2020-12-02T15:36:59Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/common/BavetTupleState.java", "diffHunk": "@@ -17,20 +17,37 @@\n package org.optaplanner.core.impl.score.stream.bavet.common;\n \n public enum BavetTupleState {\n-    NEW,\n-    CREATING,\n-    UPDATING,\n-    OK,\n-    DYING,\n-    DEAD,\n-    ABORTING;\n+    NEW(false, true),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a2e3fea9fecf2d18f8cf1d3fb48487476d6dbf3"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzNjg5MDIy", "url": "https://github.com/kiegroup/optaplanner/pull/1058#pullrequestreview-543689022", "createdAt": "2020-12-03T08:01:30Z", "commit": {"oid": "4a2e3fea9fecf2d18f8cf1d3fb48487476d6dbf3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwODowMTozMFrOH-FZtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwODowMTozMFrOH-FZtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg2MjI2MQ==", "bodyText": "I guess this can be nodeSize? (the number of nodes)", "url": "https://github.com/kiegroup/optaplanner/pull/1058#discussion_r534862261", "createdAt": "2020-12-03T08:01:30Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/BavetConstraintSession.java", "diffHunk": "@@ -48,34 +56,80 @@\n     private final ScoreInliner<Score_> scoreInliner;\n \n     private final Map<Class<?>, BavetFromUniNode<Object>> declaredClassToNodeMap;\n-    private final int nodeOrderSize;\n+    private final int nodeIndexSize;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a2e3fea9fecf2d18f8cf1d3fb48487476d6dbf3"}, "originalPosition": 37}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4a2e3fea9fecf2d18f8cf1d3fb48487476d6dbf3", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/4a2e3fea9fecf2d18f8cf1d3fb48487476d6dbf3", "committedDate": "2020-12-02T15:28:56Z", "message": "Optimize tuple state"}, "afterCommit": {"oid": "c7db0d66348af735b744809ede7940554796c2c0", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/c7db0d66348af735b744809ede7940554796c2c0", "committedDate": "2020-12-07T14:12:55Z", "message": "Resolve problems after rebase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce526deae716eb41e00647e98595941413781fb4", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/ce526deae716eb41e00647e98595941413781fb4", "committedDate": "2020-12-09T15:16:36Z", "message": "Node order becomes node index"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "392cbd4a418e8b011634f6ec6707326d8db73bb6", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/392cbd4a418e8b011634f6ec6707326d8db73bb6", "committedDate": "2020-12-09T15:16:36Z", "message": "nodeIndexToDirtyTupleQueueMap"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae730912f5c190e992ce6249d77b20b2075c7d54", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/ae730912f5c190e992ce6249d77b20b2075c7d54", "committedDate": "2020-12-09T15:16:36Z", "message": "Refresh tuples externally"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2438cd8debb5de611060acf3aee4af0ce8e7c99b", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/2438cd8debb5de611060acf3aee4af0ce8e7c99b", "committedDate": "2020-12-09T15:16:37Z", "message": "nodeIndexToNodeMap"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c791d2ccd95e874b05f6f614592cdffeec8af871", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/c791d2ccd95e874b05f6f614592cdffeec8af871", "committedDate": "2020-12-09T15:16:37Z", "message": "Child tuples become the property of the tuple"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b01db5381a94ed0a4c8125dc556c775dbaa6233a", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/b01db5381a94ed0a4c8125dc556c775dbaa6233a", "committedDate": "2020-12-09T15:16:38Z", "message": "BavetAbstractNode now has a refresh() method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "314a6560fd643f2af8063b35c700549ab69dacb0", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/314a6560fd643f2af8063b35c700549ab69dacb0", "committedDate": "2020-12-09T15:16:39Z", "message": "Finally externalize tuple refresh"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c1c04178c9c3e45d81d1304ed0a23baef35ec0c", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/1c1c04178c9c3e45d81d1304ed0a23baef35ec0c", "committedDate": "2020-12-09T15:16:39Z", "message": "Optimize tuple state"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d11bdd131cd7a3e9216d0669d271db3978703aa", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/7d11bdd131cd7a3e9216d0669d271db3978703aa", "committedDate": "2020-12-09T15:16:40Z", "message": "Resolve problems after rebase"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c7db0d66348af735b744809ede7940554796c2c0", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/c7db0d66348af735b744809ede7940554796c2c0", "committedDate": "2020-12-07T14:12:55Z", "message": "Resolve problems after rebase"}, "afterCommit": {"oid": "7d11bdd131cd7a3e9216d0669d271db3978703aa", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/7d11bdd131cd7a3e9216d0669d271db3978703aa", "committedDate": "2020-12-09T15:16:40Z", "message": "Resolve problems after rebase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f0e8061a1d8dcd2a9437e2b251a99e5a95ca7bd", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/8f0e8061a1d8dcd2a9437e2b251a99e5a95ca7bd", "committedDate": "2020-12-09T15:20:24Z", "message": "BavetNode need not be Comparable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c62e4174f7d9b3a8b232583a0163d6a543922363", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/c62e4174f7d9b3a8b232583a0163d6a543922363", "committedDate": "2020-12-09T21:09:02Z", "message": "Revert sizing change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a550fe1daf07046019d7377bebc4aa63662ba0c", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/5a550fe1daf07046019d7377bebc4aa63662ba0c", "committedDate": "2020-12-09T21:17:25Z", "message": "List iteration is much faster"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "651a3c2c03a1218f2cd4138edcccd363e9bb0f2d", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/651a3c2c03a1218f2cd4138edcccd363e9bb0f2d", "committedDate": "2020-12-09T21:18:34Z", "message": "Fix formatting"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5MTY3MTkx", "url": "https://github.com/kiegroup/optaplanner/pull/1058#pullrequestreview-549167191", "createdAt": "2020-12-10T12:55:11Z", "commit": {"oid": "651a3c2c03a1218f2cd4138edcccd363e9bb0f2d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMjo1NToxMVrOIDH5dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMjo1NToxMVrOIDH5dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE0NjAzNw==", "bodyText": "Why doesn't getNode() return type BavetAbstractNode?", "url": "https://github.com/kiegroup/optaplanner/pull/1058#discussion_r540146037", "createdAt": "2020-12-10T12:55:11Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/BavetConstraintSession.java", "diffHunk": "@@ -88,6 +89,23 @@ public BavetConstraintSession(boolean constraintMatchEnabled, ScoreDefinition<Sc\n         return nodeIndexedNodeMap;\n     }\n \n+    private static void refreshTuple(BavetAbstractTuple tuple) {\n+        ((BavetAbstractNode) tuple.getNode()).refresh(tuple);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "651a3c2c03a1218f2cd4138edcccd363e9bb0f2d"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5MTY3NjIy", "url": "https://github.com/kiegroup/optaplanner/pull/1058#pullrequestreview-549167622", "createdAt": "2020-12-10T12:55:44Z", "commit": {"oid": "651a3c2c03a1218f2cd4138edcccd363e9bb0f2d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMjo1NTo0NVrOIDH60A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMjo1NTo0NVrOIDH60A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE0NjM4NA==", "bodyText": "Let's a default case that throws an exception?", "url": "https://github.com/kiegroup/optaplanner/pull/1058#discussion_r540146384", "createdAt": "2020-12-10T12:55:45Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/BavetConstraintSession.java", "diffHunk": "@@ -88,6 +89,23 @@ public BavetConstraintSession(boolean constraintMatchEnabled, ScoreDefinition<Sc\n         return nodeIndexedNodeMap;\n     }\n \n+    private static void refreshTuple(BavetAbstractTuple tuple) {\n+        ((BavetAbstractNode) tuple.getNode()).refresh(tuple);\n+        switch (tuple.getState()) {\n+            case CREATING:\n+            case UPDATING:\n+                tuple.setState(BavetTupleState.OK);\n+                return;\n+            case DYING:\n+            case ABORTING:\n+                tuple.setState(BavetTupleState.DEAD);\n+                return;\n+            case DEAD:\n+                throw new IllegalStateException(\n+                        \"The tuple (\" + tuple + \") is already in the dead state (\" + tuple.getState() + \").\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "651a3c2c03a1218f2cd4138edcccd363e9bb0f2d"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5MTcxMjc5", "url": "https://github.com/kiegroup/optaplanner/pull/1058#pullrequestreview-549171279", "createdAt": "2020-12-10T13:00:19Z", "commit": {"oid": "651a3c2c03a1218f2cd4138edcccd363e9bb0f2d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzowMDoxOVrOIDIGXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzowMDoxOVrOIDIGXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE0OTM0Mg==", "bodyText": "(important IMO)\nThe entire Bavet implementation is not public API. We don't need to wrap in unmodifiableList() etc, as that will only create perf loss and memory usage increase.", "url": "https://github.com/kiegroup/optaplanner/pull/1058#discussion_r540149342", "createdAt": "2020-12-10T13:00:19Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/bi/BavetFilterBiNode.java", "diffHunk": "@@ -43,6 +45,11 @@ public void addChildNode(BavetAbstractBiNode<A, B> childNode) {\n         childNodeList.add(childNode);\n     }\n \n+    @Override\n+    public List<BavetAbstractBiNode<A, B>> getChildNodes() {\n+        return Collections.unmodifiableList(childNodeList);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "651a3c2c03a1218f2cd4138edcccd363e9bb0f2d"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5MTczMjAw", "url": "https://github.com/kiegroup/optaplanner/pull/1058#pullrequestreview-549173200", "createdAt": "2020-12-10T13:02:42Z", "commit": {"oid": "651a3c2c03a1218f2cd4138edcccd363e9bb0f2d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzowMjo0MlrOIDIMyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzowMjo0MlrOIDIMyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE1MDk4Ng==", "bodyText": "For consistency sake, please call this method getChildNodeList().\nThe color of the curtains is pink, I know you hate it, but let's not mix colors of curtains - it's going to look ugly.", "url": "https://github.com/kiegroup/optaplanner/pull/1058#discussion_r540150986", "createdAt": "2020-12-10T13:02:42Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/bi/BavetGroupBiNode.java", "diffHunk": "@@ -40,6 +42,11 @@ public void addChildNode(BavetAbstractBiNode<GroupKey_, Result_> childNode) {\n         childNodeList.add(childNode);\n     }\n \n+    @Override\n+    public List<BavetAbstractBiNode<GroupKey_, Result_>> getChildNodes() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "651a3c2c03a1218f2cd4138edcccd363e9bb0f2d"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5MTczMzU1", "url": "https://github.com/kiegroup/optaplanner/pull/1058#pullrequestreview-549173355", "createdAt": "2020-12-10T13:02:54Z", "commit": {"oid": "651a3c2c03a1218f2cd4138edcccd363e9bb0f2d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzowMjo1NFrOIDINRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzowMjo1NFrOIDINRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE1MTEwOQ==", "bodyText": "see above, no need for unmodifiableList", "url": "https://github.com/kiegroup/optaplanner/pull/1058#discussion_r540151109", "createdAt": "2020-12-10T13:02:54Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/bi/BavetGroupBiNode.java", "diffHunk": "@@ -40,6 +42,11 @@ public void addChildNode(BavetAbstractBiNode<GroupKey_, Result_> childNode) {\n         childNodeList.add(childNode);\n     }\n \n+    @Override\n+    public List<BavetAbstractBiNode<GroupKey_, Result_>> getChildNodes() {\n+        return Collections.unmodifiableList(childNodeList);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "651a3c2c03a1218f2cd4138edcccd363e9bb0f2d"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5MTc0OTM1", "url": "https://github.com/kiegroup/optaplanner/pull/1058#pullrequestreview-549174935", "createdAt": "2020-12-10T13:04:53Z", "commit": {"oid": "651a3c2c03a1218f2cd4138edcccd363e9bb0f2d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzowNDo1M1rOIDIRuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzowNDo1M1rOIDIRuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE1MjI0OQ==", "bodyText": "This is intresting. The Set becomes a List (which is a good thing I think.)\nDid this bring a performance gain? If not, is it possible it was offset by the unmodifiable wrapping?\nProbably not, but OTH measuring is knowing... (and more work, yes ...) Wdyt?", "url": "https://github.com/kiegroup/optaplanner/pull/1058#discussion_r540152249", "createdAt": "2020-12-10T13:04:53Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/bi/BavetJoinBridgeBiTuple.java", "diffHunk": "@@ -16,19 +16,14 @@\n \n package org.optaplanner.core.impl.score.stream.bavet.bi;\n \n-import java.util.LinkedHashSet;\n-import java.util.Set;\n-\n import org.optaplanner.core.impl.score.stream.bavet.common.BavetJoinBridgeTuple;\n-import org.optaplanner.core.impl.score.stream.bavet.common.BavetJoinTuple;\n \n public final class BavetJoinBridgeBiTuple<A, B> extends BavetAbstractBiTuple<A, B>\n         implements BavetJoinBridgeTuple {\n \n     protected final BavetAbstractBiTuple<A, B> parentTuple;\n     private final BavetJoinBridgeBiNode<A, B> node;\n \n-    protected Set<BavetJoinTuple> childTupleSet = new LinkedHashSet<>(); // TODO capacity", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "651a3c2c03a1218f2cd4138edcccd363e9bb0f2d"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5MTc2NTc4", "url": "https://github.com/kiegroup/optaplanner/pull/1058#pullrequestreview-549176578", "createdAt": "2020-12-10T13:07:03Z", "commit": {"oid": "651a3c2c03a1218f2cd4138edcccd363e9bb0f2d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzowNzowM1rOIDIW9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzowNzowM1rOIDIW9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE1MzU4OQ==", "bodyText": "see above: method name + unmodifiableList", "url": "https://github.com/kiegroup/optaplanner/pull/1058#discussion_r540153589", "createdAt": "2020-12-10T13:07:03Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/tri/BavetJoinTriNode.java", "diffHunk": "@@ -49,6 +50,11 @@ public void addChildNode(BavetAbstractTriNode<A, B, C> childNode) {\n         childNodeList.add(childNode);\n     }\n \n+    @Override\n+    public List<BavetAbstractTriNode<A, B, C>> getChildNodes() {\n+        return Collections.unmodifiableList(childNodeList);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "651a3c2c03a1218f2cd4138edcccd363e9bb0f2d"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5MTc3Mjkw", "url": "https://github.com/kiegroup/optaplanner/pull/1058#pullrequestreview-549177290", "createdAt": "2020-12-10T13:08:01Z", "commit": {"oid": "651a3c2c03a1218f2cd4138edcccd363e9bb0f2d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e68114c9561a0d986bf0ef43751b0cf8c2a74271", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/e68114c9561a0d986bf0ef43751b0cf8c2a74271", "committedDate": "2020-12-10T15:08:28Z", "message": "BavetAbstractTuple should return BavetAbstractNode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d27281d315d8dace7701d32b98d2eb8af6ee467", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/2d27281d315d8dace7701d32b98d2eb8af6ee467", "committedDate": "2020-12-10T15:10:44Z", "message": "Child node lists"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b009f8f14a4279c74bacc4c26dac050f8eca27f6", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/b009f8f14a4279c74bacc4c26dac050f8eca27f6", "committedDate": "2020-12-10T15:31:50Z", "message": "Formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b6fd5acbf7a6c6a6578f066e27f99d572a1f6ea", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/5b6fd5acbf7a6c6a6578f066e27f99d572a1f6ea", "committedDate": "2020-12-10T15:37:52Z", "message": "Child node list again"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3143, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}