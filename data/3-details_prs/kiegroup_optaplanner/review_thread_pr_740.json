{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyMjEzMTI2", "number": 740, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxNjoyODoyN1rODw9mHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxNjoyOTo1M1rODw9mvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjY3NDIzOnYy", "diffSide": "RIGHT", "path": "optaplanner-test/src/main/java/org/optaplanner/test/api/score/stream/ConstraintVerifier.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxNjoyODoyN1rOGEOXKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxNjoyOTozM1rOGEOXxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA4Mjc5NQ==", "bodyText": "@triceo I merged these because of API's that would want to call this method.", "url": "https://github.com/kiegroup/optaplanner/pull/740#discussion_r407082795", "createdAt": "2020-04-11T16:28:27Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-test/src/main/java/org/optaplanner/test/api/score/stream/ConstraintVerifier.java", "diffHunk": "@@ -29,64 +28,70 @@\n \n import static java.util.Objects.requireNonNull;\n \n-public final class ConstraintVerifier<Solution_> {\n+public final class ConstraintVerifier<ConstraintProvider_ extends ConstraintProvider, Solution_> {\n \n+    private final ConstraintProvider_ constraintProvider;\n     private final SolutionDescriptor<Solution_> solutionDescriptor;\n     private ConstraintStreamImplType constraintStreamImplType = ConstraintStreamImplType.DROOLS;\n \n-    private ConstraintVerifier(SolutionDescriptor<Solution_> solutionDescriptor) {\n+    private ConstraintVerifier(ConstraintProvider_ constraintProvider, SolutionDescriptor<Solution_> solutionDescriptor) {\n+        this.constraintProvider = constraintProvider;\n         this.solutionDescriptor = solutionDescriptor;\n     }\n \n     /**\n      * Entry point to the API.\n+     * @param constraintProvider never null, {@link PlanningEntity} used by the {@link PlanningSolution}\n      * @param planningSolutionClass never null, {@link PlanningSolution}-annotated class associated with the constraints\n-     * @param firstPlanningEntityClass never null, {@link PlanningEntity} used by the {@link PlanningSolution}\n-     * @param otherPlanningEntityClasses optional, extra entity classes if {@link PlanningSolution} uses more than one\n+     * @param entityClasses never null, at least one, {@link PlanningEntity} types used by the {@link PlanningSolution}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c29d443a0ed9d3e3cbf7cb31ea1841750ae91997"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA4Mjk1MA==", "bodyText": "(and for consistency with the methods on SolutionDescriptor)", "url": "https://github.com/kiegroup/optaplanner/pull/740#discussion_r407082950", "createdAt": "2020-04-11T16:29:33Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-test/src/main/java/org/optaplanner/test/api/score/stream/ConstraintVerifier.java", "diffHunk": "@@ -29,64 +28,70 @@\n \n import static java.util.Objects.requireNonNull;\n \n-public final class ConstraintVerifier<Solution_> {\n+public final class ConstraintVerifier<ConstraintProvider_ extends ConstraintProvider, Solution_> {\n \n+    private final ConstraintProvider_ constraintProvider;\n     private final SolutionDescriptor<Solution_> solutionDescriptor;\n     private ConstraintStreamImplType constraintStreamImplType = ConstraintStreamImplType.DROOLS;\n \n-    private ConstraintVerifier(SolutionDescriptor<Solution_> solutionDescriptor) {\n+    private ConstraintVerifier(ConstraintProvider_ constraintProvider, SolutionDescriptor<Solution_> solutionDescriptor) {\n+        this.constraintProvider = constraintProvider;\n         this.solutionDescriptor = solutionDescriptor;\n     }\n \n     /**\n      * Entry point to the API.\n+     * @param constraintProvider never null, {@link PlanningEntity} used by the {@link PlanningSolution}\n      * @param planningSolutionClass never null, {@link PlanningSolution}-annotated class associated with the constraints\n-     * @param firstPlanningEntityClass never null, {@link PlanningEntity} used by the {@link PlanningSolution}\n-     * @param otherPlanningEntityClasses optional, extra entity classes if {@link PlanningSolution} uses more than one\n+     * @param entityClasses never null, at least one, {@link PlanningEntity} types used by the {@link PlanningSolution}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA4Mjc5NQ=="}, "originalCommit": {"oid": "c29d443a0ed9d3e3cbf7cb31ea1841750ae91997"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjY3NTgwOnYy", "diffSide": "RIGHT", "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/vehiclerouting/optional/score/VehicleRoutingConstraintProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxNjoyOTo1M1rOGEOX-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxNjoyOTo1M1rOGEOX-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA4MzAwMA==", "bodyText": "Any reason why this one is public, yet all the others are protected?", "url": "https://github.com/kiegroup/optaplanner/pull/740#discussion_r407083000", "createdAt": "2020-04-11T16:29:53Z", "author": {"login": "triceo"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/vehiclerouting/optional/score/VehicleRoutingConstraintProvider.java", "diffHunk": "@@ -41,7 +41,7 @@\n     // Hard constraints\n     // ************************************************************************\n \n-    private Constraint vehicleCapacity(ConstraintFactory factory) {\n+    public Constraint vehicleCapacity(ConstraintFactory factory) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c29d443a0ed9d3e3cbf7cb31ea1841750ae91997"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4479, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}