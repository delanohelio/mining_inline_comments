{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0NzMzNjU5", "number": 872, "title": "Planner-1823 Add ConstraintProvider for Patient Admission Scheduling example", "bodyText": "Created constraints based on drl rules\nhttp://github.com/dupliaka/optaplanner/blob/8a77adbe40cd58339450dc3ec51b8258fbb4dd2e/optaplanner-examples/src/main/resources/org/optaplanner/examples/pas/solver/patientAdmissionScheduleConstraints.drl#L1-L1\nPreviously all of the constraints were defined via a set of rules declared in drl file, but now we have  constraint streams.\nI repeated the drl constraints logic and created some tests + fixes abug in drl rule\nThe example doc\nPLANNER-1823\nNote:\nWill change patientAdmissionScheduleSolverConfig.xml  after approving to turn off constraints stream by default", "createdAt": "2020-08-07T17:40:43Z", "url": "https://github.com/kiegroup/optaplanner/pull/872", "merged": true, "mergeCommit": {"oid": "d87415e4358a2a6fc5f7d471800b44a6be38554d"}, "closed": true, "closedAt": "2020-08-10T18:08:28Z", "author": {"login": "dupliaka"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc58JB-AH2gAyNDY0NzMzNjU5OjVmNTk0Njg2YTY3MTI4YmQ3MmQ5N2U4MWUzNzI2ZTQ3MTVlNGQyYmQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc9lyCKAH2gAyNDY0NzMzNjU5OmU3YWVjNjIwZGJhZDdjZWQyMmM0NmZjODk1Mzg4NDZiNTRjZjA3NmM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5f594686a67128bd72d97e81e3726e4715e4d2bd", "author": {"user": {"login": "dupliaka", "name": null}}, "url": "https://github.com/kiegroup/optaplanner/commit/5f594686a67128bd72d97e81e3726e4715e4d2bd", "committedDate": "2020-07-30T09:23:56Z", "message": "Implement constraint stream based rule femaleInMaleRoomTest\n\nAdded new implementation of \"Gender limitation: Female in a male only room\" based on streams [1] without checking if that equals to drl score\n\nTo test if that is working you can run example with smaller\ndataset\n\nhttps://issues.redhat.com/secure/attachment/12482176/smallDataSet.txt\n\n[1] https://docs.optaplanner.org/latest/optaplanner-docs/html_single/index.html#constraintStreams"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed02700890d301057b6936b1adb516b59f173652", "author": {"user": {"login": "dupliaka", "name": null}}, "url": "https://github.com/kiegroup/optaplanner/commit/ed02700890d301057b6936b1adb516b59f173652", "committedDate": "2020-07-30T13:48:59Z", "message": "Involve drl assignment to check stream implementation\n\nTo decide if stream is working correctly I add configuration\nSo if stream implementation got different score it should throw an exception like\n\n``` Score corruption (2450hard): the workingScore (-250hard/0medium/0soft) is not the uncorruptedScore (-2700hard/0medium/0soft) after completedAction (Patient1(0-4) {11(0) -> 11(0)}):\nScore corruption analysis:\n  The corrupted scoreDirector has 1 ConstraintMatch(s) which are in excess (and should not be there):\n    org.optaplanner.examples.pas.domain/femaleInMaleRoom/[Patient1(0-4)]=-250hard/0medium/0soft\n  The corrupted scoreDirector has 1 ConstraintMatch(s) which are missing:\n    org.optaplanner.examples.pas.solver/femaleInMaleRoom/[Patient1(0-4)]=-2700hard/0medium/0soft\n  Maybe there is a bug in the score constraints of those ConstraintMatch(s).\n  Maybe a score constraint doesn't select all the entities it depends on, but finds some through a reference in a selected entity. This corrupts incremental score calculation, because the constraint is not re-evaluated if such a non-selected entity changes.```"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96a8dfb82c31693e0986b69789326dfed7ec8458", "author": {"user": {"login": "dupliaka", "name": null}}, "url": "https://github.com/kiegroup/optaplanner/commit/96a8dfb82c31693e0986b69789326dfed7ec8458", "committedDate": "2020-08-05T11:47:18Z", "message": "Implement sameBedInSameNightConstraint rule"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f89c3d59a06e8fa89ffb653e7f40e5caffec71fd", "author": {"user": {"login": "dupliaka", "name": null}}, "url": "https://github.com/kiegroup/optaplanner/commit/f89c3d59a06e8fa89ffb653e7f40e5caffec71fd", "committedDate": "2020-08-07T14:06:43Z", "message": "Implement the rest drl constraints\n\nPLANNER-2096"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a77adbe40cd58339450dc3ec51b8258fbb4dd2e", "author": {"user": {"login": "dupliaka", "name": null}}, "url": "https://github.com/kiegroup/optaplanner/commit/8a77adbe40cd58339450dc3ec51b8258fbb4dd2e", "committedDate": "2020-08-07T17:29:56Z", "message": "Cleanup constraints implementations\n\nDuring constraints implementation I used tests written in plain way, also I wrote constraints based on the tasks not on the current implementation in drl.\n\nI adjusted a bit constraints tested one by one and in integration with other constraints.\n\nI created test object BedDesignationDO so to make tests more readable"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNTAxOTk0", "url": "https://github.com/kiegroup/optaplanner/pull/872#pullrequestreview-463501994", "createdAt": "2020-08-07T17:59:37Z", "commit": {"oid": "8a77adbe40cd58339450dc3ec51b8258fbb4dd2e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzo1OTozN1rOG9i98Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODoxMDoxMVrOG9jRzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE4OTIzMw==", "bodyText": "This should probably never be commented. It has no relation to either DRL or CS-D.", "url": "https://github.com/kiegroup/optaplanner/pull/872#discussion_r467189233", "createdAt": "2020-08-07T17:59:37Z", "author": {"login": "triceo"}, "path": "optaplanner-examples/src/main/resources/org/optaplanner/examples/pas/solver/patientAdmissionScheduleSolverConfig.xml", "diffHunk": "@@ -1,13 +1,19 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <solver>\n-  <!--<environmentMode>FULL_ASSERT</environmentMode>--><!-- To slowly prove there are no bugs in this code -->\n+  <environmentMode>FULL_ASSERT</environmentMode>\n   <!--<moveThreadCount>AUTO</moveThreadCount>--><!-- To solve faster by saturating multiple CPU cores -->\n \n   <solutionClass>org.optaplanner.examples.pas.domain.PatientAdmissionSchedule</solutionClass>\n   <entityClass>org.optaplanner.examples.pas.domain.BedDesignation</entityClass>\n \n   <scoreDirectorFactory>\n-    <scoreDrl>org/optaplanner/examples/pas/solver/patientAdmissionScheduleConstraints.drl</scoreDrl>\n+<!--    <scoreDrl>org/optaplanner/examples/pas/solver/patientAdmissionScheduleConstraints.drl</scoreDrl>-->\n+<!--    Uncomment if you want to use constraints stream-->\n+<!--    <initializingScoreTrend>ONLY_DOWN</initializingScoreTrend>-->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a77adbe40cd58339450dc3ec51b8258fbb4dd2e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5MDUxNg==", "bodyText": "Personally, I see this class as unnecessary complexity - I'd simply change BedDesignation to add the constructors etc.\nThe other examples do it the same way, so I'd appreciate if we stayed consistent.", "url": "https://github.com/kiegroup/optaplanner/pull/872#discussion_r467190516", "createdAt": "2020-08-07T18:02:14Z", "author": {"login": "triceo"}, "path": "optaplanner-examples/src/test/java/org/optaplanner/examples/pas/solver/BedDesignationDO.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.optaplanner.examples.pas.solver;\n+\n+import org.optaplanner.examples.pas.domain.AdmissionPart;\n+import org.optaplanner.examples.pas.domain.Bed;\n+import org.optaplanner.examples.pas.domain.BedDesignation;\n+import org.optaplanner.examples.pas.domain.Night;\n+import org.optaplanner.examples.pas.domain.Patient;\n+import org.optaplanner.examples.pas.domain.Room;\n+import org.optaplanner.examples.pas.domain.Specialism;\n+\n+public class BedDesignationDO extends BedDesignation {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a77adbe40cd58339450dc3ec51b8258fbb4dd2e"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5MTkyMQ==", "bodyText": "null checks for planning variables are not necessary in Constraint Streams. fromUniquePair will make sure bed is never null.\nPlease check for this in the other constraints as well.", "url": "https://github.com/kiegroup/optaplanner/pull/872#discussion_r467191921", "createdAt": "2020-08-07T18:05:15Z", "author": {"login": "triceo"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/pas/solver/score/PatientAdmissionMoveConstraintProvider.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package org.optaplanner.examples.pas.solver.score;\n+\n+import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.examples.pas.domain.BedDesignation;\n+import org.optaplanner.examples.pas.domain.Department;\n+import org.optaplanner.examples.pas.domain.DepartmentSpecialism;\n+import org.optaplanner.examples.pas.domain.Gender;\n+import org.optaplanner.examples.pas.domain.GenderLimitation;\n+import org.optaplanner.examples.pas.domain.PreferredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RequiredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RoomEquipment;\n+import org.optaplanner.examples.pas.domain.RoomSpecialism;\n+\n+import static org.optaplanner.core.api.score.stream.Joiners.equal;\n+import static org.optaplanner.core.api.score.stream.Joiners.filtering;\n+import static org.optaplanner.core.api.score.stream.Joiners.lessThan;\n+\n+/*\n+ * This is constraints for Hospital Bed Planning\n+ * They are based on patientAdmissionScheduleConstraints.drl\n+ * Planning Entity: BedDesignation\n+ * Planning Variable: Bed(nullable) - would not be prefiltered on uninitialized solutions\n+ * Bed is nullable so in case you need to access it members check that planning value bed is not null\n+ */\n+\n+public class PatientAdmissionMoveConstraintProvider implements ConstraintProvider {\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n+        return new Constraint[]{\n+                sameBedInSameNightConstraint(constraintFactory),\n+                femaleInMaleRoomConstraint(constraintFactory),\n+                maleInFemaleRoomConstraint(constraintFactory),\n+                differentGenderInSameGenderRoomInSameNightConstraint(constraintFactory),\n+                departmentMinimumAgeConstraint(constraintFactory),\n+                departmentMaximumAgeConstraint(constraintFactory),\n+                requiredPatientEquipmentConstraint(constraintFactory),\n+                assignEveryPatientToABedConstraint(constraintFactory),\n+                preferredMaximumRoomCapacityConstraint(constraintFactory),\n+                departmentSpecialismConstraint(constraintFactory),\n+                roomSpecialismNotExistsConstraint(constraintFactory),\n+                roomSpecialismNotFirstPriorityConstraint(constraintFactory),\n+                preferredPatientEquipmentConstraint(constraintFactory)\n+        };\n+    }\n+\n+    public Constraint sameBedInSameNightConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.fromUniquePair(BedDesignation.class)\n+                .filter((left, right) -> left.getBed() != null\n+                        && right.getBed() != null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a77adbe40cd58339450dc3ec51b8258fbb4dd2e"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5MjE2Mg==", "bodyText": "Please use Joiners.equal(BedDesignation::getBed) for this.", "url": "https://github.com/kiegroup/optaplanner/pull/872#discussion_r467192162", "createdAt": "2020-08-07T18:05:48Z", "author": {"login": "triceo"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/pas/solver/score/PatientAdmissionMoveConstraintProvider.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package org.optaplanner.examples.pas.solver.score;\n+\n+import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.examples.pas.domain.BedDesignation;\n+import org.optaplanner.examples.pas.domain.Department;\n+import org.optaplanner.examples.pas.domain.DepartmentSpecialism;\n+import org.optaplanner.examples.pas.domain.Gender;\n+import org.optaplanner.examples.pas.domain.GenderLimitation;\n+import org.optaplanner.examples.pas.domain.PreferredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RequiredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RoomEquipment;\n+import org.optaplanner.examples.pas.domain.RoomSpecialism;\n+\n+import static org.optaplanner.core.api.score.stream.Joiners.equal;\n+import static org.optaplanner.core.api.score.stream.Joiners.filtering;\n+import static org.optaplanner.core.api.score.stream.Joiners.lessThan;\n+\n+/*\n+ * This is constraints for Hospital Bed Planning\n+ * They are based on patientAdmissionScheduleConstraints.drl\n+ * Planning Entity: BedDesignation\n+ * Planning Variable: Bed(nullable) - would not be prefiltered on uninitialized solutions\n+ * Bed is nullable so in case you need to access it members check that planning value bed is not null\n+ */\n+\n+public class PatientAdmissionMoveConstraintProvider implements ConstraintProvider {\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n+        return new Constraint[]{\n+                sameBedInSameNightConstraint(constraintFactory),\n+                femaleInMaleRoomConstraint(constraintFactory),\n+                maleInFemaleRoomConstraint(constraintFactory),\n+                differentGenderInSameGenderRoomInSameNightConstraint(constraintFactory),\n+                departmentMinimumAgeConstraint(constraintFactory),\n+                departmentMaximumAgeConstraint(constraintFactory),\n+                requiredPatientEquipmentConstraint(constraintFactory),\n+                assignEveryPatientToABedConstraint(constraintFactory),\n+                preferredMaximumRoomCapacityConstraint(constraintFactory),\n+                departmentSpecialismConstraint(constraintFactory),\n+                roomSpecialismNotExistsConstraint(constraintFactory),\n+                roomSpecialismNotFirstPriorityConstraint(constraintFactory),\n+                preferredPatientEquipmentConstraint(constraintFactory)\n+        };\n+    }\n+\n+    public Constraint sameBedInSameNightConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.fromUniquePair(BedDesignation.class)\n+                .filter((left, right) -> left.getBed() != null\n+                        && right.getBed() != null\n+                        && left.getBed() == right.getBed()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a77adbe40cd58339450dc3ec51b8258fbb4dd2e"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5MzQ5MA==", "bodyText": "Personally, I'd switch the order of operations to first do the ==, then != and only then do the calculateSameNightCount(...). This way, you make sure that the (possibly expensive) calculation is only done when the quick checks are already true, never wasting time.", "url": "https://github.com/kiegroup/optaplanner/pull/872#discussion_r467193490", "createdAt": "2020-08-07T18:08:33Z", "author": {"login": "triceo"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/pas/solver/score/PatientAdmissionMoveConstraintProvider.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package org.optaplanner.examples.pas.solver.score;\n+\n+import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.examples.pas.domain.BedDesignation;\n+import org.optaplanner.examples.pas.domain.Department;\n+import org.optaplanner.examples.pas.domain.DepartmentSpecialism;\n+import org.optaplanner.examples.pas.domain.Gender;\n+import org.optaplanner.examples.pas.domain.GenderLimitation;\n+import org.optaplanner.examples.pas.domain.PreferredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RequiredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RoomEquipment;\n+import org.optaplanner.examples.pas.domain.RoomSpecialism;\n+\n+import static org.optaplanner.core.api.score.stream.Joiners.equal;\n+import static org.optaplanner.core.api.score.stream.Joiners.filtering;\n+import static org.optaplanner.core.api.score.stream.Joiners.lessThan;\n+\n+/*\n+ * This is constraints for Hospital Bed Planning\n+ * They are based on patientAdmissionScheduleConstraints.drl\n+ * Planning Entity: BedDesignation\n+ * Planning Variable: Bed(nullable) - would not be prefiltered on uninitialized solutions\n+ * Bed is nullable so in case you need to access it members check that planning value bed is not null\n+ */\n+\n+public class PatientAdmissionMoveConstraintProvider implements ConstraintProvider {\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n+        return new Constraint[]{\n+                sameBedInSameNightConstraint(constraintFactory),\n+                femaleInMaleRoomConstraint(constraintFactory),\n+                maleInFemaleRoomConstraint(constraintFactory),\n+                differentGenderInSameGenderRoomInSameNightConstraint(constraintFactory),\n+                departmentMinimumAgeConstraint(constraintFactory),\n+                departmentMaximumAgeConstraint(constraintFactory),\n+                requiredPatientEquipmentConstraint(constraintFactory),\n+                assignEveryPatientToABedConstraint(constraintFactory),\n+                preferredMaximumRoomCapacityConstraint(constraintFactory),\n+                departmentSpecialismConstraint(constraintFactory),\n+                roomSpecialismNotExistsConstraint(constraintFactory),\n+                roomSpecialismNotFirstPriorityConstraint(constraintFactory),\n+                preferredPatientEquipmentConstraint(constraintFactory)\n+        };\n+    }\n+\n+    public Constraint sameBedInSameNightConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.fromUniquePair(BedDesignation.class)\n+                .filter((left, right) -> left.getBed() != null\n+                        && right.getBed() != null\n+                        && left.getBed() == right.getBed()\n+                        && left.getAdmissionPart().calculateSameNightCount(right.getAdmissionPart()) > 0)\n+                .penalize(\"sameBedInSameNight\", HardMediumSoftScore.ofHard(1000),\n+                        (leftBd, rightBd) -> leftBd.getAdmissionPart().calculateSameNightCount(rightBd.getAdmissionPart()));\n+    }\n+\n+    public Constraint femaleInMaleRoomConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BedDesignation.class)\n+                .filter(bd -> bd.getPatientGender() == Gender.FEMALE\n+                        && bd.getRoomGenderLimitation() == GenderLimitation.MALE_ONLY)\n+                .penalize(\"femaleInMaleRoom\", HardMediumSoftScore.ofHard(50), BedDesignation::getAdmissionPartNightCount);\n+    }\n+\n+    public Constraint maleInFemaleRoomConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BedDesignation.class)\n+                .filter(bd -> bd.getPatientGender() == Gender.MALE\n+                        && bd.getRoomGenderLimitation() == GenderLimitation.FEMALE_ONLY)\n+                .penalize(\"maleInFemaleRoom\", HardMediumSoftScore.ofHard(50), BedDesignation::getAdmissionPartNightCount);\n+    }\n+\n+    public Constraint differentGenderInSameGenderRoomInSameNightConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BedDesignation.class)\n+                .filter(bd -> bd.getRoomGenderLimitation() == GenderLimitation.SAME_GENDER\n+                        && bd.getBed() != null)\n+                .join(BedDesignation.class,\n+                        equal(BedDesignation::getRoom),\n+                        lessThan(BedDesignation::getId),\n+                        filtering((left, right) -> right.getRoomGenderLimitation() == GenderLimitation.SAME_GENDER\n+                                && left.getAdmissionPart().calculateSameNightCount(right.getAdmissionPart()) > 0\n+                                && left.getPatient().getGender() != right.getPatient().getGender()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a77adbe40cd58339450dc3ec51b8258fbb4dd2e"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5MzkzNw==", "bodyText": "Considering how often calculateSameNightCount() is used, I'd consider caching the calculation somehow. But maybe it's not a problem, doing a quick profiler run would tell you.", "url": "https://github.com/kiegroup/optaplanner/pull/872#discussion_r467193937", "createdAt": "2020-08-07T18:09:28Z", "author": {"login": "triceo"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/pas/solver/score/PatientAdmissionMoveConstraintProvider.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package org.optaplanner.examples.pas.solver.score;\n+\n+import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.examples.pas.domain.BedDesignation;\n+import org.optaplanner.examples.pas.domain.Department;\n+import org.optaplanner.examples.pas.domain.DepartmentSpecialism;\n+import org.optaplanner.examples.pas.domain.Gender;\n+import org.optaplanner.examples.pas.domain.GenderLimitation;\n+import org.optaplanner.examples.pas.domain.PreferredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RequiredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RoomEquipment;\n+import org.optaplanner.examples.pas.domain.RoomSpecialism;\n+\n+import static org.optaplanner.core.api.score.stream.Joiners.equal;\n+import static org.optaplanner.core.api.score.stream.Joiners.filtering;\n+import static org.optaplanner.core.api.score.stream.Joiners.lessThan;\n+\n+/*\n+ * This is constraints for Hospital Bed Planning\n+ * They are based on patientAdmissionScheduleConstraints.drl\n+ * Planning Entity: BedDesignation\n+ * Planning Variable: Bed(nullable) - would not be prefiltered on uninitialized solutions\n+ * Bed is nullable so in case you need to access it members check that planning value bed is not null\n+ */\n+\n+public class PatientAdmissionMoveConstraintProvider implements ConstraintProvider {\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n+        return new Constraint[]{\n+                sameBedInSameNightConstraint(constraintFactory),\n+                femaleInMaleRoomConstraint(constraintFactory),\n+                maleInFemaleRoomConstraint(constraintFactory),\n+                differentGenderInSameGenderRoomInSameNightConstraint(constraintFactory),\n+                departmentMinimumAgeConstraint(constraintFactory),\n+                departmentMaximumAgeConstraint(constraintFactory),\n+                requiredPatientEquipmentConstraint(constraintFactory),\n+                assignEveryPatientToABedConstraint(constraintFactory),\n+                preferredMaximumRoomCapacityConstraint(constraintFactory),\n+                departmentSpecialismConstraint(constraintFactory),\n+                roomSpecialismNotExistsConstraint(constraintFactory),\n+                roomSpecialismNotFirstPriorityConstraint(constraintFactory),\n+                preferredPatientEquipmentConstraint(constraintFactory)\n+        };\n+    }\n+\n+    public Constraint sameBedInSameNightConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.fromUniquePair(BedDesignation.class)\n+                .filter((left, right) -> left.getBed() != null\n+                        && right.getBed() != null\n+                        && left.getBed() == right.getBed()\n+                        && left.getAdmissionPart().calculateSameNightCount(right.getAdmissionPart()) > 0)\n+                .penalize(\"sameBedInSameNight\", HardMediumSoftScore.ofHard(1000),\n+                        (leftBd, rightBd) -> leftBd.getAdmissionPart().calculateSameNightCount(rightBd.getAdmissionPart()));\n+    }\n+\n+    public Constraint femaleInMaleRoomConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BedDesignation.class)\n+                .filter(bd -> bd.getPatientGender() == Gender.FEMALE\n+                        && bd.getRoomGenderLimitation() == GenderLimitation.MALE_ONLY)\n+                .penalize(\"femaleInMaleRoom\", HardMediumSoftScore.ofHard(50), BedDesignation::getAdmissionPartNightCount);\n+    }\n+\n+    public Constraint maleInFemaleRoomConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BedDesignation.class)\n+                .filter(bd -> bd.getPatientGender() == Gender.MALE\n+                        && bd.getRoomGenderLimitation() == GenderLimitation.FEMALE_ONLY)\n+                .penalize(\"maleInFemaleRoom\", HardMediumSoftScore.ofHard(50), BedDesignation::getAdmissionPartNightCount);\n+    }\n+\n+    public Constraint differentGenderInSameGenderRoomInSameNightConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BedDesignation.class)\n+                .filter(bd -> bd.getRoomGenderLimitation() == GenderLimitation.SAME_GENDER\n+                        && bd.getBed() != null)\n+                .join(BedDesignation.class,\n+                        equal(BedDesignation::getRoom),\n+                        lessThan(BedDesignation::getId),\n+                        filtering((left, right) -> right.getRoomGenderLimitation() == GenderLimitation.SAME_GENDER\n+                                && left.getAdmissionPart().calculateSameNightCount(right.getAdmissionPart()) > 0\n+                                && left.getPatient().getGender() != right.getPatient().getGender()))\n+                .penalize(\"differentGenderInSameGenderRoomInSameNight\", HardMediumSoftScore.ofHard(1000),\n+                        (left, right) -> left.getAdmissionPart().calculateSameNightCount(right.getAdmissionPart()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a77adbe40cd58339450dc3ec51b8258fbb4dd2e"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5NDMxOQ==", "bodyText": "Note: we have Joiners.lessThan(...).", "url": "https://github.com/kiegroup/optaplanner/pull/872#discussion_r467194319", "createdAt": "2020-08-07T18:10:11Z", "author": {"login": "triceo"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/pas/solver/score/PatientAdmissionMoveConstraintProvider.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package org.optaplanner.examples.pas.solver.score;\n+\n+import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.examples.pas.domain.BedDesignation;\n+import org.optaplanner.examples.pas.domain.Department;\n+import org.optaplanner.examples.pas.domain.DepartmentSpecialism;\n+import org.optaplanner.examples.pas.domain.Gender;\n+import org.optaplanner.examples.pas.domain.GenderLimitation;\n+import org.optaplanner.examples.pas.domain.PreferredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RequiredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RoomEquipment;\n+import org.optaplanner.examples.pas.domain.RoomSpecialism;\n+\n+import static org.optaplanner.core.api.score.stream.Joiners.equal;\n+import static org.optaplanner.core.api.score.stream.Joiners.filtering;\n+import static org.optaplanner.core.api.score.stream.Joiners.lessThan;\n+\n+/*\n+ * This is constraints for Hospital Bed Planning\n+ * They are based on patientAdmissionScheduleConstraints.drl\n+ * Planning Entity: BedDesignation\n+ * Planning Variable: Bed(nullable) - would not be prefiltered on uninitialized solutions\n+ * Bed is nullable so in case you need to access it members check that planning value bed is not null\n+ */\n+\n+public class PatientAdmissionMoveConstraintProvider implements ConstraintProvider {\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n+        return new Constraint[]{\n+                sameBedInSameNightConstraint(constraintFactory),\n+                femaleInMaleRoomConstraint(constraintFactory),\n+                maleInFemaleRoomConstraint(constraintFactory),\n+                differentGenderInSameGenderRoomInSameNightConstraint(constraintFactory),\n+                departmentMinimumAgeConstraint(constraintFactory),\n+                departmentMaximumAgeConstraint(constraintFactory),\n+                requiredPatientEquipmentConstraint(constraintFactory),\n+                assignEveryPatientToABedConstraint(constraintFactory),\n+                preferredMaximumRoomCapacityConstraint(constraintFactory),\n+                departmentSpecialismConstraint(constraintFactory),\n+                roomSpecialismNotExistsConstraint(constraintFactory),\n+                roomSpecialismNotFirstPriorityConstraint(constraintFactory),\n+                preferredPatientEquipmentConstraint(constraintFactory)\n+        };\n+    }\n+\n+    public Constraint sameBedInSameNightConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.fromUniquePair(BedDesignation.class)\n+                .filter((left, right) -> left.getBed() != null\n+                        && right.getBed() != null\n+                        && left.getBed() == right.getBed()\n+                        && left.getAdmissionPart().calculateSameNightCount(right.getAdmissionPart()) > 0)\n+                .penalize(\"sameBedInSameNight\", HardMediumSoftScore.ofHard(1000),\n+                        (leftBd, rightBd) -> leftBd.getAdmissionPart().calculateSameNightCount(rightBd.getAdmissionPart()));\n+    }\n+\n+    public Constraint femaleInMaleRoomConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BedDesignation.class)\n+                .filter(bd -> bd.getPatientGender() == Gender.FEMALE\n+                        && bd.getRoomGenderLimitation() == GenderLimitation.MALE_ONLY)\n+                .penalize(\"femaleInMaleRoom\", HardMediumSoftScore.ofHard(50), BedDesignation::getAdmissionPartNightCount);\n+    }\n+\n+    public Constraint maleInFemaleRoomConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BedDesignation.class)\n+                .filter(bd -> bd.getPatientGender() == Gender.MALE\n+                        && bd.getRoomGenderLimitation() == GenderLimitation.FEMALE_ONLY)\n+                .penalize(\"maleInFemaleRoom\", HardMediumSoftScore.ofHard(50), BedDesignation::getAdmissionPartNightCount);\n+    }\n+\n+    public Constraint differentGenderInSameGenderRoomInSameNightConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BedDesignation.class)\n+                .filter(bd -> bd.getRoomGenderLimitation() == GenderLimitation.SAME_GENDER\n+                        && bd.getBed() != null)\n+                .join(BedDesignation.class,\n+                        equal(BedDesignation::getRoom),\n+                        lessThan(BedDesignation::getId),\n+                        filtering((left, right) -> right.getRoomGenderLimitation() == GenderLimitation.SAME_GENDER\n+                                && left.getAdmissionPart().calculateSameNightCount(right.getAdmissionPart()) > 0\n+                                && left.getPatient().getGender() != right.getPatient().getGender()))\n+                .penalize(\"differentGenderInSameGenderRoomInSameNight\", HardMediumSoftScore.ofHard(1000),\n+                        (left, right) -> left.getAdmissionPart().calculateSameNightCount(right.getAdmissionPart()));\n+    }\n+\n+    public Constraint departmentMinimumAgeConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Department.class)\n+                .filter(d -> d.getMinimumAge() != null)\n+                .join(BedDesignation.class,\n+                        equal(d -> d, BedDesignation::getDepartment),\n+                        filtering((d, bd) -> bd.getPatientAge() < d.getMinimumAge()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a77adbe40cd58339450dc3ec51b8258fbb4dd2e"}, "originalPosition": 93}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNjQ3NzMy", "url": "https://github.com/kiegroup/optaplanner/pull/872#pullrequestreview-463647732", "createdAt": "2020-08-07T21:23:10Z", "commit": {"oid": "8a77adbe40cd58339450dc3ec51b8258fbb4dd2e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMToyMzoxMFrOG9oNXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMToyMzoxMFrOG9oNXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI3NTEwMA==", "bodyText": "d -> d should be the same as Function.identity().", "url": "https://github.com/kiegroup/optaplanner/pull/872#discussion_r467275100", "createdAt": "2020-08-07T21:23:10Z", "author": {"login": "triceo"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/pas/solver/score/PatientAdmissionMoveConstraintProvider.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package org.optaplanner.examples.pas.solver.score;\n+\n+import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.examples.pas.domain.BedDesignation;\n+import org.optaplanner.examples.pas.domain.Department;\n+import org.optaplanner.examples.pas.domain.DepartmentSpecialism;\n+import org.optaplanner.examples.pas.domain.Gender;\n+import org.optaplanner.examples.pas.domain.GenderLimitation;\n+import org.optaplanner.examples.pas.domain.PreferredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RequiredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RoomEquipment;\n+import org.optaplanner.examples.pas.domain.RoomSpecialism;\n+\n+import static org.optaplanner.core.api.score.stream.Joiners.equal;\n+import static org.optaplanner.core.api.score.stream.Joiners.filtering;\n+import static org.optaplanner.core.api.score.stream.Joiners.lessThan;\n+\n+/*\n+ * This is constraints for Hospital Bed Planning\n+ * They are based on patientAdmissionScheduleConstraints.drl\n+ * Planning Entity: BedDesignation\n+ * Planning Variable: Bed(nullable) - would not be prefiltered on uninitialized solutions\n+ * Bed is nullable so in case you need to access it members check that planning value bed is not null\n+ */\n+\n+public class PatientAdmissionMoveConstraintProvider implements ConstraintProvider {\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n+        return new Constraint[]{\n+                sameBedInSameNightConstraint(constraintFactory),\n+                femaleInMaleRoomConstraint(constraintFactory),\n+                maleInFemaleRoomConstraint(constraintFactory),\n+                differentGenderInSameGenderRoomInSameNightConstraint(constraintFactory),\n+                departmentMinimumAgeConstraint(constraintFactory),\n+                departmentMaximumAgeConstraint(constraintFactory),\n+                requiredPatientEquipmentConstraint(constraintFactory),\n+                assignEveryPatientToABedConstraint(constraintFactory),\n+                preferredMaximumRoomCapacityConstraint(constraintFactory),\n+                departmentSpecialismConstraint(constraintFactory),\n+                roomSpecialismNotExistsConstraint(constraintFactory),\n+                roomSpecialismNotFirstPriorityConstraint(constraintFactory),\n+                preferredPatientEquipmentConstraint(constraintFactory)\n+        };\n+    }\n+\n+    public Constraint sameBedInSameNightConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.fromUniquePair(BedDesignation.class)\n+                .filter((left, right) -> left.getBed() != null\n+                        && right.getBed() != null\n+                        && left.getBed() == right.getBed()\n+                        && left.getAdmissionPart().calculateSameNightCount(right.getAdmissionPart()) > 0)\n+                .penalize(\"sameBedInSameNight\", HardMediumSoftScore.ofHard(1000),\n+                        (leftBd, rightBd) -> leftBd.getAdmissionPart().calculateSameNightCount(rightBd.getAdmissionPart()));\n+    }\n+\n+    public Constraint femaleInMaleRoomConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BedDesignation.class)\n+                .filter(bd -> bd.getPatientGender() == Gender.FEMALE\n+                        && bd.getRoomGenderLimitation() == GenderLimitation.MALE_ONLY)\n+                .penalize(\"femaleInMaleRoom\", HardMediumSoftScore.ofHard(50), BedDesignation::getAdmissionPartNightCount);\n+    }\n+\n+    public Constraint maleInFemaleRoomConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BedDesignation.class)\n+                .filter(bd -> bd.getPatientGender() == Gender.MALE\n+                        && bd.getRoomGenderLimitation() == GenderLimitation.FEMALE_ONLY)\n+                .penalize(\"maleInFemaleRoom\", HardMediumSoftScore.ofHard(50), BedDesignation::getAdmissionPartNightCount);\n+    }\n+\n+    public Constraint differentGenderInSameGenderRoomInSameNightConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BedDesignation.class)\n+                .filter(bd -> bd.getRoomGenderLimitation() == GenderLimitation.SAME_GENDER\n+                        && bd.getBed() != null)\n+                .join(BedDesignation.class,\n+                        equal(BedDesignation::getRoom),\n+                        lessThan(BedDesignation::getId),\n+                        filtering((left, right) -> right.getRoomGenderLimitation() == GenderLimitation.SAME_GENDER\n+                                && left.getAdmissionPart().calculateSameNightCount(right.getAdmissionPart()) > 0\n+                                && left.getPatient().getGender() != right.getPatient().getGender()))\n+                .penalize(\"differentGenderInSameGenderRoomInSameNight\", HardMediumSoftScore.ofHard(1000),\n+                        (left, right) -> left.getAdmissionPart().calculateSameNightCount(right.getAdmissionPart()));\n+    }\n+\n+    public Constraint departmentMinimumAgeConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Department.class)\n+                .filter(d -> d.getMinimumAge() != null)\n+                .join(BedDesignation.class,\n+                        equal(d -> d, BedDesignation::getDepartment),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a77adbe40cd58339450dc3ec51b8258fbb4dd2e"}, "originalPosition": 92}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94c60080ed05dd144db456a18e268b029fdd3328", "author": {"user": {"login": "dupliaka", "name": null}}, "url": "https://github.com/kiegroup/optaplanner/commit/94c60080ed05dd144db456a18e268b029fdd3328", "committedDate": "2020-08-10T11:06:57Z", "message": "identify() + formatting CI + lessThen vs filter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7dd155181c6f1f7f867667d82eb53de3aa1d5a38", "author": {"user": {"login": "dupliaka", "name": null}}, "url": "https://github.com/kiegroup/optaplanner/commit/7dd155181c6f1f7f867667d82eb53de3aa1d5a38", "committedDate": "2020-08-10T12:49:31Z", "message": "PR review feedback changes\n\nRemove test data builder\nSwitch filter on join\nTurn on ONLY_DOWN"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0MjEwMDgy", "url": "https://github.com/kiegroup/optaplanner/pull/872#pullrequestreview-464210082", "createdAt": "2020-08-10T13:07:19Z", "commit": {"oid": "7dd155181c6f1f7f867667d82eb53de3aa1d5a38"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMzowNzoyMFrOG-Ns8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMzoxMjo1MFrOG-N5bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg4OTM5NA==", "bodyText": "In my original comment, I meant that these methods would simply become setters. That is public void set...(...).\nThis way, it becomes consistent with the other examples. (Although unfortunately the test code gets a bit uglier.)\nSorry for not being clear earlier.", "url": "https://github.com/kiegroup/optaplanner/pull/872#discussion_r467889394", "createdAt": "2020-08-10T13:07:20Z", "author": {"login": "triceo"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/pas/domain/BedDesignation.java", "diffHunk": "@@ -118,4 +118,49 @@ public String toString() {\n         return admissionPart.toString();\n     }\n \n+    //Testing builder\n+\n+    public BedDesignation build(){\n+        admissionPart = new AdmissionPart();\n+        bed = new Bed();\n+        return this;\n+    }\n+\n+    //Testing methods\n+\n+    public BedDesignation withNights(int first, int last) {\n+        Night firstNight = new Night();\n+        firstNight.setIndex(first);\n+        admissionPart.setFirstNight(firstNight);\n+        Night lastNight = new Night();\n+        lastNight.setIndex(last);\n+        admissionPart.setLastNight(lastNight);\n+        return this;\n+    }\n+\n+    public BedDesignation withId(Long id) {\n+        this.id = id;\n+        return this;\n+    }\n+\n+    public BedDesignation withPatient(Patient patient) {\n+        this.admissionPart.setPatient(patient);\n+        return this;\n+    }\n+\n+    public BedDesignation withBed(Bed bed) {\n+        this.bed = bed;\n+        return this;\n+    }\n+\n+    public BedDesignation withRoom(Room room) {\n+        this.bed.setRoom(room);\n+        return this;\n+    }\n+\n+    public BedDesignation withSpecialism(Specialism spec1) {\n+        this.admissionPart.setSpecialism(spec1);\n+        return this;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dd155181c6f1f7f867667d82eb53de3aa1d5a38"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg5MTE2OQ==", "bodyText": "Please put the null checks first in the filter.\nAlso, since BedDesignation::getBed is equal, you only need to check if left.getBed() != null.", "url": "https://github.com/kiegroup/optaplanner/pull/872#discussion_r467891169", "createdAt": "2020-08-10T13:10:17Z", "author": {"login": "triceo"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/pas/solver/score/PatientAdmissionMoveConstraintProvider.java", "diffHunk": "@@ -0,0 +1,182 @@\n+package org.optaplanner.examples.pas.solver.score;\n+\n+import static org.optaplanner.core.api.score.stream.Joiners.equal;\n+import static org.optaplanner.core.api.score.stream.Joiners.filtering;\n+import static org.optaplanner.core.api.score.stream.Joiners.greaterThan;\n+import static org.optaplanner.core.api.score.stream.Joiners.lessThan;\n+\n+import java.util.function.Function;\n+\n+import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.examples.pas.domain.BedDesignation;\n+import org.optaplanner.examples.pas.domain.Department;\n+import org.optaplanner.examples.pas.domain.DepartmentSpecialism;\n+import org.optaplanner.examples.pas.domain.Gender;\n+import org.optaplanner.examples.pas.domain.GenderLimitation;\n+import org.optaplanner.examples.pas.domain.PreferredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RequiredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RoomEquipment;\n+import org.optaplanner.examples.pas.domain.RoomSpecialism;\n+\n+/*\n+ * This is constraints for Hospital Bed Planning\n+ * They are based on patientAdmissionScheduleConstraints.drl\n+ * Planning Entity: BedDesignation\n+ * Planning Variable: Bed(nullable) - would not be prefiltered on uninitialized solutions\n+ * Bed is nullable so in case you need to access it members check that planning value bed is not null\n+ */\n+\n+public class PatientAdmissionMoveConstraintProvider implements ConstraintProvider {\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n+        return new Constraint[] {\n+                sameBedInSameNightConstraint(constraintFactory),\n+                femaleInMaleRoomConstraint(constraintFactory),\n+                maleInFemaleRoomConstraint(constraintFactory),\n+                differentGenderInSameGenderRoomInSameNightConstraint(constraintFactory),\n+                departmentMinimumAgeConstraint(constraintFactory),\n+                departmentMaximumAgeConstraint(constraintFactory),\n+                requiredPatientEquipmentConstraint(constraintFactory),\n+                assignEveryPatientToABedConstraint(constraintFactory),\n+                preferredMaximumRoomCapacityConstraint(constraintFactory),\n+                departmentSpecialismConstraint(constraintFactory),\n+                roomSpecialismNotExistsConstraint(constraintFactory),\n+                roomSpecialismNotFirstPriorityConstraint(constraintFactory),\n+                preferredPatientEquipmentConstraint(constraintFactory)\n+        };\n+    }\n+\n+    public Constraint sameBedInSameNightConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.fromUniquePair(BedDesignation.class,\n+                        equal(BedDesignation::getBed))\n+                .filter((left,right) -> left.getAdmissionPart().calculateSameNightCount(right.getAdmissionPart()) > 0\n+                && left.getBed()!=null && right.getBed()!=null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dd155181c6f1f7f867667d82eb53de3aa1d5a38"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg5MjU5MQ==", "bodyText": "Since bed is nullable, fromUnfiltered() is no different than from(). You might as well use from().", "url": "https://github.com/kiegroup/optaplanner/pull/872#discussion_r467892591", "createdAt": "2020-08-10T13:12:50Z", "author": {"login": "triceo"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/pas/solver/score/PatientAdmissionMoveConstraintProvider.java", "diffHunk": "@@ -0,0 +1,182 @@\n+package org.optaplanner.examples.pas.solver.score;\n+\n+import static org.optaplanner.core.api.score.stream.Joiners.equal;\n+import static org.optaplanner.core.api.score.stream.Joiners.filtering;\n+import static org.optaplanner.core.api.score.stream.Joiners.greaterThan;\n+import static org.optaplanner.core.api.score.stream.Joiners.lessThan;\n+\n+import java.util.function.Function;\n+\n+import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.examples.pas.domain.BedDesignation;\n+import org.optaplanner.examples.pas.domain.Department;\n+import org.optaplanner.examples.pas.domain.DepartmentSpecialism;\n+import org.optaplanner.examples.pas.domain.Gender;\n+import org.optaplanner.examples.pas.domain.GenderLimitation;\n+import org.optaplanner.examples.pas.domain.PreferredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RequiredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RoomEquipment;\n+import org.optaplanner.examples.pas.domain.RoomSpecialism;\n+\n+/*\n+ * This is constraints for Hospital Bed Planning\n+ * They are based on patientAdmissionScheduleConstraints.drl\n+ * Planning Entity: BedDesignation\n+ * Planning Variable: Bed(nullable) - would not be prefiltered on uninitialized solutions\n+ * Bed is nullable so in case you need to access it members check that planning value bed is not null\n+ */\n+\n+public class PatientAdmissionMoveConstraintProvider implements ConstraintProvider {\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n+        return new Constraint[] {\n+                sameBedInSameNightConstraint(constraintFactory),\n+                femaleInMaleRoomConstraint(constraintFactory),\n+                maleInFemaleRoomConstraint(constraintFactory),\n+                differentGenderInSameGenderRoomInSameNightConstraint(constraintFactory),\n+                departmentMinimumAgeConstraint(constraintFactory),\n+                departmentMaximumAgeConstraint(constraintFactory),\n+                requiredPatientEquipmentConstraint(constraintFactory),\n+                assignEveryPatientToABedConstraint(constraintFactory),\n+                preferredMaximumRoomCapacityConstraint(constraintFactory),\n+                departmentSpecialismConstraint(constraintFactory),\n+                roomSpecialismNotExistsConstraint(constraintFactory),\n+                roomSpecialismNotFirstPriorityConstraint(constraintFactory),\n+                preferredPatientEquipmentConstraint(constraintFactory)\n+        };\n+    }\n+\n+    public Constraint sameBedInSameNightConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.fromUniquePair(BedDesignation.class,\n+                        equal(BedDesignation::getBed))\n+                .filter((left,right) -> left.getAdmissionPart().calculateSameNightCount(right.getAdmissionPart()) > 0\n+                && left.getBed()!=null && right.getBed()!=null)\n+                .penalize(\"sameBedInSameNight\", HardMediumSoftScore.ofHard(1000),\n+                          (left,right) -> left.getAdmissionPart().calculateSameNightCount(right.getAdmissionPart()));\n+    }\n+\n+    public Constraint femaleInMaleRoomConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BedDesignation.class)\n+                .filter(bd -> bd.getPatientGender() == Gender.FEMALE\n+                        && bd.getRoomGenderLimitation() == GenderLimitation.MALE_ONLY)\n+                .penalize(\"femaleInMaleRoom\", HardMediumSoftScore.ofHard(50), BedDesignation::getAdmissionPartNightCount);\n+    }\n+\n+    public Constraint maleInFemaleRoomConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BedDesignation.class)\n+                .filter(bd -> bd.getPatientGender() == Gender.MALE\n+                        && bd.getRoomGenderLimitation() == GenderLimitation.FEMALE_ONLY)\n+                .penalize(\"maleInFemaleRoom\", HardMediumSoftScore.ofHard(50), BedDesignation::getAdmissionPartNightCount);\n+    }\n+\n+    public Constraint differentGenderInSameGenderRoomInSameNightConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BedDesignation.class)\n+                .filter(bd -> bd.getRoomGenderLimitation() == GenderLimitation.SAME_GENDER\n+                        && bd.getBed() != null)\n+                .join(BedDesignation.class,\n+                        equal(BedDesignation::getRoom),\n+                        lessThan(BedDesignation::getId),\n+                        filtering((left, right) -> right.getRoomGenderLimitation() == GenderLimitation.SAME_GENDER\n+                                && left.getPatient().getGender() != right.getPatient().getGender()\n+                                && left.getAdmissionPart().calculateSameNightCount(right.getAdmissionPart()) > 0))\n+                .penalize(\"differentGenderInSameGenderRoomInSameNight\", HardMediumSoftScore.ofHard(1000),\n+                        (left, right) -> left.getAdmissionPart().calculateSameNightCount(right.getAdmissionPart()));\n+    }\n+\n+    public Constraint departmentMinimumAgeConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Department.class)\n+                .filter(d -> d.getMinimumAge() != null)\n+                .join(BedDesignation.class,\n+                        equal(Function.identity(), BedDesignation::getDepartment),\n+                        greaterThan(Department::getMinimumAge, BedDesignation::getPatientAge))\n+                .penalize(\"departmentMinimumAge\", HardMediumSoftScore.ofHard(100),\n+                        (d, bd) -> bd.getAdmissionPartNightCount());\n+    }\n+\n+    public Constraint departmentMaximumAgeConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Department.class)\n+                .filter(d -> d.getMaximumAge() != null)\n+                .join(BedDesignation.class,\n+                        equal(Function.identity(), BedDesignation::getDepartment),\n+                        lessThan(Department::getMaximumAge, BedDesignation::getPatientAge))\n+                .penalize(\"departmentMaximumAge\", HardMediumSoftScore.ofHard(100),\n+                        (d, bd) -> bd.getAdmissionPartNightCount());\n+    }\n+\n+    public Constraint requiredPatientEquipmentConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(RequiredPatientEquipment.class)\n+                .join(BedDesignation.class,\n+                        equal(RequiredPatientEquipment::getPatient, BedDesignation::getPatient),\n+                        filtering((rpe, bd) -> bd.getBed() != null))\n+                .ifNotExists(RoomEquipment.class,\n+                        equal((rpe, bd) -> bd.getRoom(), RoomEquipment::getRoom),\n+                        equal((rpe, bd) -> rpe.getEquipment(), RoomEquipment::getEquipment))\n+                .penalize(\"requiredPatientEquipment\", HardMediumSoftScore.ofHard(50),\n+                        (rpe, bd) -> bd.getAdmissionPartNightCount());\n+    }\n+\n+    //Medium\n+    public Constraint assignEveryPatientToABedConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.fromUnfiltered(BedDesignation.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dd155181c6f1f7f867667d82eb53de3aa1d5a38"}, "originalPosition": 124}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f9f2b888293c0e1f544dfc79931c17386a57b41", "author": {"user": {"login": "dupliaka", "name": null}}, "url": "https://github.com/kiegroup/optaplanner/commit/1f9f2b888293c0e1f544dfc79931c17386a57b41", "committedDate": "2020-08-10T15:04:00Z", "message": "Pr review fixes\n\nChanged builder to set of constructors\nOptimize assignEveryPatientToABedConstraint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7586b263c5c25b865c86e20e1837a41e1b6dcecc", "author": {"user": {"login": "dupliaka", "name": null}}, "url": "https://github.com/kiegroup/optaplanner/commit/7586b263c5c25b865c86e20e1837a41e1b6dcecc", "committedDate": "2020-08-10T15:53:38Z", "message": "Change patientAdmissionScheduleSolverConfig to run drl by default"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0MzczNDkz", "url": "https://github.com/kiegroup/optaplanner/pull/872#pullrequestreview-464373493", "createdAt": "2020-08-10T16:09:44Z", "commit": {"oid": "7586b263c5c25b865c86e20e1837a41e1b6dcecc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c6827cb17acb0a61479e16c426b3a0bec883374", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/5c6827cb17acb0a61479e16c426b3a0bec883374", "committedDate": "2020-08-10T17:32:32Z", "message": "Fix the config to no longer hang"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "810af288705844447ad98f6107c3af9e05906ae4", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/810af288705844447ad98f6107c3af9e05906ae4", "committedDate": "2020-08-10T17:35:47Z", "message": "Rename the constraint provider to match the example name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7aec620dbad7ced22c46fc89538846b54cf076c", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/e7aec620dbad7ced22c46fc89538846b54cf076c", "committedDate": "2020-08-10T17:36:36Z", "message": "Fix formatting"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3380, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}