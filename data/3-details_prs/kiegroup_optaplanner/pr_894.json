{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxNDgyODcy", "number": 894, "title": "PLANNER-1868 SolverManager needs an API that allows a user to listen to both best solution and solver terminated events", "bodyText": "One of the RH field people is running to this too now, so I intend to backport it after review/merge too.", "createdAt": "2020-08-21T08:05:26Z", "url": "https://github.com/kiegroup/optaplanner/pull/894", "merged": true, "mergeCommit": {"oid": "c9fe3d3a1cedeba626f0b4322d1bc62926bbe9ae"}, "closed": true, "closedAt": "2020-08-21T10:22:29Z", "author": {"login": "ge0ffrey"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdBAL5KgH2gAyNDcxNDgyODcyOjliZGJkZjJmMjRjZWQ2YTZhOThlMDJiNWU1MGNmZjNjNTA0NDI2OTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdBB5_EAH2gAyNDcxNDgyODcyOjc2OWVkZjY3ZDI4YTZkMjNhZWFlMTVkZWIzODliZmE1NmZkMzllMWE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9bdbdf2f24ced6a6a98e02b5e50cff3c50442699", "author": {"user": {"login": "ge0ffrey", "name": "Geoffrey De Smet"}}, "url": "https://github.com/kiegroup/optaplanner/commit/9bdbdf2f24ced6a6a98e02b5e50cff3c50442699", "committedDate": "2020-08-21T08:04:09Z", "message": "PLANNER-1868 SolverManager needs an API that allows a user to listen to both best solution and solver terminated events"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyMzI5ODU3", "url": "https://github.com/kiegroup/optaplanner/pull/894#pullrequestreview-472329857", "createdAt": "2020-08-21T09:08:56Z", "commit": {"oid": "9bdbdf2f24ced6a6a98e02b5e50cff3c50442699"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwOTowODo1NlrOHEkqJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwOTowOTo1MFrOHEktTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDU1Njk2Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param problemId never null, a ID for each planning problem. This must be unique.\n          \n          \n            \n                 * @param problemId never null, an ID for each planning problem. This must be unique.", "url": "https://github.com/kiegroup/optaplanner/pull/894#discussion_r474556966", "createdAt": "2020-08-21T09:08:56Z", "author": {"login": "rsynek"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/solver/SolverManager.java", "diffHunk": "@@ -222,8 +223,39 @@\n      *        If null it defaults to logging the exception as an error.\n      * @return never null\n      */\n+    default SolverJob<Solution_, ProblemId_> solveAndListen(ProblemId_ problemId,\n+            Function<? super ProblemId_, ? extends Solution_> problemFinder,\n+            Consumer<? super Solution_> bestSolutionConsumer,\n+            BiConsumer<? super ProblemId_, ? super Throwable> exceptionHandler) {\n+        return solveAndListen(problemId, problemFinder, bestSolutionConsumer, null, exceptionHandler);\n+    }\n+\n+    /**\n+     * As defined by {@link #solveAndListen(Object, Function, Consumer)}.\n+     * <p>\n+     * The final best solution is delivered twice:\n+     * first to the {@code bestSolutionConsumer} when it is found\n+     * and then again to the {@code finalBestSolutionConsumer} when the solver terminates.\n+     * Do not store the solution twice.\n+     * This allows for use cases that only process the {@link Score} first (during best solution changed events)\n+     * and then store the solution upon termination.\n+     *\n+     * @param problemId never null, a ID for each planning problem. This must be unique.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bdbdf2f24ced6a6a98e02b5e50cff3c50442699"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDU1Nzc3Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param finalBestSolutionConsumer sometimes null, called only once, at the end, on a consumer thread,\n          \n          \n            \n                 * @param finalBestSolutionConsumer sometimes null, called only once, at the end, on a consumer thread.", "url": "https://github.com/kiegroup/optaplanner/pull/894#discussion_r474557773", "createdAt": "2020-08-21T09:09:50Z", "author": {"login": "rsynek"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/solver/SolverManager.java", "diffHunk": "@@ -222,8 +223,39 @@\n      *        If null it defaults to logging the exception as an error.\n      * @return never null\n      */\n+    default SolverJob<Solution_, ProblemId_> solveAndListen(ProblemId_ problemId,\n+            Function<? super ProblemId_, ? extends Solution_> problemFinder,\n+            Consumer<? super Solution_> bestSolutionConsumer,\n+            BiConsumer<? super ProblemId_, ? super Throwable> exceptionHandler) {\n+        return solveAndListen(problemId, problemFinder, bestSolutionConsumer, null, exceptionHandler);\n+    }\n+\n+    /**\n+     * As defined by {@link #solveAndListen(Object, Function, Consumer)}.\n+     * <p>\n+     * The final best solution is delivered twice:\n+     * first to the {@code bestSolutionConsumer} when it is found\n+     * and then again to the {@code finalBestSolutionConsumer} when the solver terminates.\n+     * Do not store the solution twice.\n+     * This allows for use cases that only process the {@link Score} first (during best solution changed events)\n+     * and then store the solution upon termination.\n+     *\n+     * @param problemId never null, a ID for each planning problem. This must be unique.\n+     *        Use this problemId to {@link #terminateEarly(Object) terminate} the solver early,\n+     *        {@link #getSolverStatus(Object) to get the status} or if the problem changes while solving.\n+     * @param problemFinder never null, function that returns a {@link PlanningSolution}, usually with uninitialized planning\n+     *        variables\n+     * @param bestSolutionConsumer never null, called multiple times, on a consumer thread\n+     * @param finalBestSolutionConsumer sometimes null, called only once, at the end, on a consumer thread,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bdbdf2f24ced6a6a98e02b5e50cff3c50442699"}, "originalPosition": 44}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa8c75039b4c25d20140b970fd51ba852eb86557", "author": {"user": {"login": "ge0ffrey", "name": "Geoffrey De Smet"}}, "url": "https://github.com/kiegroup/optaplanner/commit/fa8c75039b4c25d20140b970fd51ba852eb86557", "committedDate": "2020-08-21T10:03:51Z", "message": "Typo\n\nCo-authored-by: Radovan Synek <rsynek@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "769edf67d28a6d23aeae15deb389bfa56fd39e1a", "author": {"user": {"login": "ge0ffrey", "name": "Geoffrey De Smet"}}, "url": "https://github.com/kiegroup/optaplanner/commit/769edf67d28a6d23aeae15deb389bfa56fd39e1a", "committedDate": "2020-08-21T10:04:24Z", "message": "Typo\n\nCo-authored-by: Radovan Synek <rsynek@redhat.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3167, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}