{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5ODc2MTM3", "number": 939, "title": "PLANNER-1830 Add Constraint Provider for Tennis example", "bodyText": "FULL_ASSERT against score DRL passed.", "createdAt": "2020-09-20T08:49:02Z", "url": "https://github.com/kiegroup/optaplanner/pull/939", "merged": true, "mergeCommit": {"oid": "d15c03716700a4cdd63c15012ebf77c4d259ef81"}, "closed": true, "closedAt": "2020-09-22T17:17:21Z", "author": {"login": "triceo"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdKqxghAH2gAyNDg5ODc2MTM3OmU2MzM0M2VlZDVmM2I2Mzc5NTgzMzZmYjgyZWViNTkwMDNkOTAyNzU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLaoW-gH2gAyNDg5ODc2MTM3OjEwMjNlN2EyOTc5MWUxMDZkZDQ1N2E2M2VmNWNmNmQxOWQ0ZjZiZjc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e63343eed5f3b637958336fb82eeb59003d90275", "author": {"user": null}, "url": "https://github.com/kiegroup/optaplanner/commit/e63343eed5f3b637958336fb82eeb59003d90275", "committedDate": "2020-09-20T08:46:34Z", "message": "Convert Tennis example to Constraint Streams"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3d93a2151622c4d44b154c576fbdae6cc88ce3a", "author": {"user": null}, "url": "https://github.com/kiegroup/optaplanner/commit/b3d93a2151622c4d44b154c576fbdae6cc88ce3a", "committedDate": "2020-09-20T08:46:38Z", "message": "More Tennis CS work"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23003dfb1a97e35f233b6f75fd9433ad84942116", "author": {"user": null}, "url": "https://github.com/kiegroup/optaplanner/commit/23003dfb1a97e35f233b6f75fd9433ad84942116", "committedDate": "2020-09-20T08:46:39Z", "message": "Minor fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee86f10d35952478aa782a93fb61a42a7bb6b120", "author": {"user": null}, "url": "https://github.com/kiegroup/optaplanner/commit/ee86f10d35952478aa782a93fb61a42a7bb6b120", "committedDate": "2020-09-20T08:46:39Z", "message": "Fix penalizing for multiple conflicting assignments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMjAzMzcy", "url": "https://github.com/kiegroup/optaplanner/pull/939#pullrequestreview-492203372", "createdAt": "2020-09-20T15:48:13Z", "commit": {"oid": "ee86f10d35952478aa782a93fb61a42a7bb6b120"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQxNTo0ODoxM1rOHU7PMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQxNTo0ODoxM1rOHU7PMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcwNDExNQ==", "bodyText": "I am not sure if I am comfortable putting this into the API directly. I wouldn't mind having it in a TennisCollector first to let it ripe a bit :)", "url": "https://github.com/kiegroup/optaplanner/pull/939#discussion_r491704115", "createdAt": "2020-09-20T15:48:13Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/ConstraintCollectors.java", "diffHunk": "@@ -69,6 +69,21 @@\n  */\n public final class ConstraintCollectors {\n \n+    public static <A> DefaultUniConstraintCollector<A, ?, Object> loadBalanceByCount() {\n+        return new DefaultUniConstraintCollector<>(\n+                () -> new long[2],\n+                (resultContainer, a) -> {\n+                    resultContainer[0]++;\n+                    long count = resultContainer[0];\n+                    resultContainer[1] += (2 * count - 1);\n+                    return () -> {\n+                        resultContainer[1] -= (2 * resultContainer[0] - 1);\n+                        resultContainer[0]--;\n+                    };\n+                },\n+                resultContainer -> resultContainer);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee86f10d35952478aa782a93fb61a42a7bb6b120"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3d53bc6562acaabb21775adb59a84e2ac6e6748", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/e3d53bc6562acaabb21775adb59a84e2ac6e6748", "committedDate": "2020-09-21T09:24:31Z", "message": "Basic fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "abb9ea9c6d117c6a1293cee3b0303772dc5d032a", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/abb9ea9c6d117c6a1293cee3b0303772dc5d032a", "committedDate": "2020-09-21T10:35:33Z", "message": "FULL_ASSERT passes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3e29a18eb2c3392049adb09a23010b8c2376833", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/b3e29a18eb2c3392049adb09a23010b8c2376833", "committedDate": "2020-09-21T13:44:21Z", "message": "Add constraint provider test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzNTM3ODg1", "url": "https://github.com/kiegroup/optaplanner/pull/939#pullrequestreview-493537885", "createdAt": "2020-09-22T14:42:53Z", "commit": {"oid": "b3e29a18eb2c3392049adb09a23010b8c2376833"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNDo0Mjo1M1rOHV9pZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNDo0Mjo1M1rOHV9pZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc5MjE2NQ==", "bodyText": "Why do we need that for the tennis example, but not for CloudBalancingConstraintProvider which is also in the \"optional.score\" package?", "url": "https://github.com/kiegroup/optaplanner/pull/939#discussion_r492792165", "createdAt": "2020-09-22T14:42:53Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/tennis/optional/score/TennisConstraintProvider.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.tennis.optional.score;\n+\n+import static org.optaplanner.core.api.score.stream.Joiners.equal;\n+import static org.optaplanner.core.api.score.stream.Joiners.lessThan;\n+\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.core.impl.score.stream.bi.DefaultBiConstraintCollector;\n+import org.optaplanner.core.impl.score.stream.uni.DefaultUniConstraintCollector;\n+import org.optaplanner.examples.common.solver.drools.functions.LoadBalanceByCountAccumulateFunction;\n+import org.optaplanner.examples.common.solver.drools.functions.LoadBalanceByCountAccumulateFunction.LoadBalanceByCountData;\n+import org.optaplanner.examples.common.solver.drools.functions.LoadBalanceByCountAccumulateFunction.LoadBalanceByCountResult;\n+import org.optaplanner.examples.tennis.domain.TeamAssignment;\n+import org.optaplanner.examples.tennis.domain.UnavailabilityPenalty;\n+\n+public final class TennisConstraintProvider implements ConstraintProvider {\n+\n+    private static final String CONSTRAINT_PACKAGE = \"org.optaplanner.examples.tennis.solver\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3e29a18eb2c3392049adb09a23010b8c2376833"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzNTQxMjQy", "url": "https://github.com/kiegroup/optaplanner/pull/939#pullrequestreview-493541242", "createdAt": "2020-09-22T14:45:58Z", "commit": {"oid": "b3e29a18eb2c3392049adb09a23010b8c2376833"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNDo0NTo1OFrOHV9zjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNDo0NTo1OFrOHV9zjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc5NDc2Ng==", "bodyText": "This is ugly. Can we not simply duplicate LoadBalanceByCountData in here? Or use Pair<...> or something?\n(I can't wait for java records).", "url": "https://github.com/kiegroup/optaplanner/pull/939#discussion_r492794766", "createdAt": "2020-09-22T14:45:58Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/tennis/optional/score/TennisConstraintProvider.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.tennis.optional.score;\n+\n+import static org.optaplanner.core.api.score.stream.Joiners.equal;\n+import static org.optaplanner.core.api.score.stream.Joiners.lessThan;\n+\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.core.impl.score.stream.bi.DefaultBiConstraintCollector;\n+import org.optaplanner.core.impl.score.stream.uni.DefaultUniConstraintCollector;\n+import org.optaplanner.examples.common.solver.drools.functions.LoadBalanceByCountAccumulateFunction;\n+import org.optaplanner.examples.common.solver.drools.functions.LoadBalanceByCountAccumulateFunction.LoadBalanceByCountData;\n+import org.optaplanner.examples.common.solver.drools.functions.LoadBalanceByCountAccumulateFunction.LoadBalanceByCountResult;\n+import org.optaplanner.examples.tennis.domain.TeamAssignment;\n+import org.optaplanner.examples.tennis.domain.UnavailabilityPenalty;\n+\n+public final class TennisConstraintProvider implements ConstraintProvider {\n+\n+    private static final String CONSTRAINT_PACKAGE = \"org.optaplanner.examples.tennis.solver\";\n+\n+    private static <A> DefaultUniConstraintCollector<A, ?, LoadBalanceByCountResult>\n+            loadBalanceByCount(Function<A, Object> groupKey) {\n+        LoadBalanceByCountAccumulateFunction accumulateFunction = new LoadBalanceByCountAccumulateFunction();\n+        return new DefaultUniConstraintCollector<>(\n+                () -> {\n+                    LoadBalanceByCountData resultContainer = accumulateFunction.createContext();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3e29a18eb2c3392049adb09a23010b8c2376833"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzNTQyNzYz", "url": "https://github.com/kiegroup/optaplanner/pull/939#pullrequestreview-493542763", "createdAt": "2020-09-22T14:47:24Z", "commit": {"oid": "b3e29a18eb2c3392049adb09a23010b8c2376833"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53e73ef8d60711b4e7d58bb1dae7e2f095fac1cb", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/53e73ef8d60711b4e7d58bb1dae7e2f095fac1cb", "committedDate": "2020-09-22T15:11:44Z", "message": "Address review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46a55f493f077af1cf74507ffc2ae5f8b8eb1866", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/46a55f493f077af1cf74507ffc2ae5f8b8eb1866", "committedDate": "2020-09-22T15:38:45Z", "message": "Remove code smell"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aea9faca7c26abb4c8a7b336b574036e1caa56cc", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/aea9faca7c26abb4c8a7b336b574036e1caa56cc", "committedDate": "2020-09-22T16:22:26Z", "message": "Final fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1023e7a29791e106dd457a63ef5cf6d19d4f6bf7", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/1023e7a29791e106dd457a63ef5cf6d19d4f6bf7", "committedDate": "2020-09-22T16:32:01Z", "message": "Final optimization"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3216, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}