{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyNjc0NjY4", "number": 789, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMTo0NDo0M1rOD_W5Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzozMTozNFrOEA-pBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NzYxOTc0OnYy", "diffSide": "RIGHT", "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/nurserostering/domain/solver/MovableShiftAssignmentSelectionFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMTo0NDo0M1rOGZ-dvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMzo0NToxOVrOGaBpag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg5MTAwNQ==", "bodyText": "I have to say... I don't like the fact that, in order to filter moves in selectors, users need to implement this interface.\nIdeally, I'd like ScoreDirector to be an implementation detail. Yet, it keeps leaking.", "url": "https://github.com/kiegroup/optaplanner/pull/789#discussion_r429891005", "createdAt": "2020-05-25T11:44:43Z", "author": {"login": "triceo"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/nurserostering/domain/solver/MovableShiftAssignmentSelectionFilter.java", "diffHunk": "@@ -17,16 +17,19 @@\n package org.optaplanner.examples.nurserostering.domain.solver;\n \n import org.optaplanner.core.api.domain.entity.PinningFilter;\n+import org.optaplanner.core.impl.heuristic.selector.common.decorator.SelectionFilter;\n+import org.optaplanner.core.impl.score.director.ScoreDirector;\n import org.optaplanner.examples.nurserostering.domain.NurseRoster;\n import org.optaplanner.examples.nurserostering.domain.ShiftAssignment;\n-import org.optaplanner.examples.nurserostering.domain.ShiftDate;\n \n-public class MovableShiftAssignmentSelectionFilter implements PinningFilter<NurseRoster, ShiftAssignment> {\n+public class MovableShiftAssignmentSelectionFilter implements SelectionFilter<NurseRoster, ShiftAssignment> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27ccd78343cbbdfc965060cec3fe5f1c44f2e1fd"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk0MzE0Ng==", "bodyText": "Yea, sounds like maybe SelectionFilter, instead of creating a new type of Filter like PinningFilter that doesn't work on moves (and shouldn't due to naming).", "url": "https://github.com/kiegroup/optaplanner/pull/789#discussion_r429943146", "createdAt": "2020-05-25T13:45:19Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/nurserostering/domain/solver/MovableShiftAssignmentSelectionFilter.java", "diffHunk": "@@ -17,16 +17,19 @@\n package org.optaplanner.examples.nurserostering.domain.solver;\n \n import org.optaplanner.core.api.domain.entity.PinningFilter;\n+import org.optaplanner.core.impl.heuristic.selector.common.decorator.SelectionFilter;\n+import org.optaplanner.core.impl.score.director.ScoreDirector;\n import org.optaplanner.examples.nurserostering.domain.NurseRoster;\n import org.optaplanner.examples.nurserostering.domain.ShiftAssignment;\n-import org.optaplanner.examples.nurserostering.domain.ShiftDate;\n \n-public class MovableShiftAssignmentSelectionFilter implements PinningFilter<NurseRoster, ShiftAssignment> {\n+public class MovableShiftAssignmentSelectionFilter implements SelectionFilter<NurseRoster, ShiftAssignment> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg5MTAwNQ=="}, "originalCommit": {"oid": "27ccd78343cbbdfc965060cec3fe5f1c44f2e1fd"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3Nzg3NzEwOnYy", "diffSide": "RIGHT", "path": "optaplanner-benchmark/src/main/java/org/optaplanner/benchmark/impl/ranking/ResilientScoreComparator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMzoyMDo1NlrOGaA72A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMzo1MTozMVrOGaB08Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkzMTQ4MA==", "bodyText": "Are we sure about this?\nMost users don't know about ScoreDefinition.\nThis means most users can never use a ResilientScoreComparator.\nBut on the other hand, I presume they will never need it, so it's fine?", "url": "https://github.com/kiegroup/optaplanner/pull/789#discussion_r429931480", "createdAt": "2020-05-25T13:20:56Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-benchmark/src/main/java/org/optaplanner/benchmark/impl/ranking/ResilientScoreComparator.java", "diffHunk": "@@ -20,11 +20,18 @@\n import java.util.Comparator;\n \n import org.optaplanner.core.api.score.Score;\n+import org.optaplanner.core.impl.score.definition.ScoreDefinition;\n \n /**\n  * Able to compare {@link Score}s of different types or nulls.\n  */\n-public class ResilientScoreComparator implements Comparator<Score>, Serializable {\n+final class ResilientScoreComparator implements Comparator<Score>, Serializable {\n+\n+    private final ScoreDefinition aScoreDefinition;\n+\n+    public ResilientScoreComparator(ScoreDefinition aScoreDefinition) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27ccd78343cbbdfc965060cec3fe5f1c44f2e1fd"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk0NjA5Nw==", "bodyText": "This is no longer a public class. And even before now, it was not in public API.\nWe are fine.", "url": "https://github.com/kiegroup/optaplanner/pull/789#discussion_r429946097", "createdAt": "2020-05-25T13:51:31Z", "author": {"login": "triceo"}, "path": "optaplanner-benchmark/src/main/java/org/optaplanner/benchmark/impl/ranking/ResilientScoreComparator.java", "diffHunk": "@@ -20,11 +20,18 @@\n import java.util.Comparator;\n \n import org.optaplanner.core.api.score.Score;\n+import org.optaplanner.core.impl.score.definition.ScoreDefinition;\n \n /**\n  * Able to compare {@link Score}s of different types or nulls.\n  */\n-public class ResilientScoreComparator implements Comparator<Score>, Serializable {\n+final class ResilientScoreComparator implements Comparator<Score>, Serializable {\n+\n+    private final ScoreDefinition aScoreDefinition;\n+\n+    public ResilientScoreComparator(ScoreDefinition aScoreDefinition) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkzMTQ4MA=="}, "originalCommit": {"oid": "27ccd78343cbbdfc965060cec3fe5f1c44f2e1fd"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3Nzg5MjU4OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/domain/entity/PinningFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMzoyNjoxNFrOGaBFgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMzoyNjoxNFrOGaBFgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkzMzk1NA==", "bodyText": "\"an immovable\" => \"a pinned\"", "url": "https://github.com/kiegroup/optaplanner/pull/789#discussion_r429933954", "createdAt": "2020-05-25T13:26:14Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/domain/entity/PinningFilter.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.api.domain.entity;\n+\n+import org.optaplanner.core.api.domain.solution.PlanningSolution;\n+import org.optaplanner.core.impl.heuristic.move.Move;\n+\n+/**\n+ * Decides on accepting or discarding a {@link PlanningEntity}.\n+ * An immovable {@link PlanningEntity} is rejected and therefore never used in a {@link Move}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27ccd78343cbbdfc965060cec3fe5f1c44f2e1fd"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3Nzg5ODY5OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/domain/entity/PinningFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMzoyODoxN1rOGaBJSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMzoyODoxN1rOGaBJSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkzNDkyMQ==", "bodyText": "true if the entity's planning variables can change, false if the entity is pinned\n@triceo Red flag. accept() returns false if the entity is pinned in an interface called PinningFilter. this is a serious issue.", "url": "https://github.com/kiegroup/optaplanner/pull/789#discussion_r429934921", "createdAt": "2020-05-25T13:28:17Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/domain/entity/PinningFilter.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.api.domain.entity;\n+\n+import org.optaplanner.core.api.domain.solution.PlanningSolution;\n+import org.optaplanner.core.impl.heuristic.move.Move;\n+\n+/**\n+ * Decides on accepting or discarding a {@link PlanningEntity}.\n+ * An immovable {@link PlanningEntity} is rejected and therefore never used in a {@link Move}.\n+ *\n+ * @param <Solution_> the solution type, the class with the {@link PlanningSolution} annotation\n+ * @param <T> the entity type\n+ */\n+public interface PinningFilter<Solution_, T> {\n+\n+    /**\n+     * @param solution working solution to which the selection belongs or applies to\n+     * @param entity never null, a {@link PlanningEntity}\n+     * @return true if the entity it is movable, false if the entity is immovable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27ccd78343cbbdfc965060cec3fe5f1c44f2e1fd"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NzkwMjU3OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/domain/entity/PlanningEntity.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMzoyOTozM1rOGaBLrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMzoyOTozM1rOGaBLrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkzNTUzMg==", "bodyText": "find in path for all \"immovable\"", "url": "https://github.com/kiegroup/optaplanner/pull/789#discussion_r429935532", "createdAt": "2020-05-25T13:29:33Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/domain/entity/PlanningEntity.java", "diffHunk": "@@ -51,13 +51,34 @@\n      * if the selection entity is immovable and it returns true if the selection entity is movable\n      *\n      * @return {@link NullMovableEntitySelectionFilter} when it is null (workaround for annotation limitation)\n+     * @deprecated in favor of {@link #pinningFilter()}.\n      */\n+    @Deprecated(/* forRemoval = true */)\n     Class<? extends SelectionFilter> movableEntitySelectionFilter() default NullMovableEntitySelectionFilter.class;\n \n     /** Workaround for annotation limitation in {@link #movableEntitySelectionFilter()}. */\n+    @Deprecated(/* forRemoval = true */)\n     interface NullMovableEntitySelectionFilter extends SelectionFilter {\n     }\n \n+    /**\n+     * An immovable planning entity is never changed during planning,\n+     * this is useful in repeated planning use cases (such as continuous planning and real-time planning).\n+     * <p>\n+     * This applies to all the planning variables of this planning entity.\n+     * To make individual variables immovable, see https://issues.redhat.com/browse/PLANNER-124", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27ccd78343cbbdfc965060cec3fe5f1c44f2e1fd"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NzkxMzIyOnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/config/constructionheuristic/placer/QueuedValuePlacerConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMzozMzowOFrOGaBSVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMzozMzowOFrOGaBSVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkzNzIzOQ==", "bodyText": "Can we add a comment behind it \"for what\"? Mainly as an expiration date: when we can remove this line.\nFor example:\n@SuppressWarnings(\"deprecation\") // Remove in 8.0 when it doesn't call  foo.bar() any more", "url": "https://github.com/kiegroup/optaplanner/pull/789#discussion_r429937239", "createdAt": "2020-05-25T13:33:08Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/config/constructionheuristic/placer/QueuedValuePlacerConfig.java", "diffHunk": "@@ -87,6 +87,7 @@ public void setMoveSelectorConfig(MoveSelectorConfig moveSelectorConfig) {\n     // Builder methods\n     // ************************************************************************\n \n+    @SuppressWarnings(\"deprecation\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27ccd78343cbbdfc965060cec3fe5f1c44f2e1fd"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NzkyMjU0OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/config/score/director/ScoreDirectorFactoryConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMzozNjoxNlrOGaBYGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMzozNjoxNlrOGaBYGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkzODcxNA==", "bodyText": "This should be a simple setter (that is now deprecated). It shouldn't mess with the system property, in favor of which it is deprecated, because  System.setProperty() is dangerous: presume that a single JVM process runs 2 solver configs, constructed by java (not by xml) and the first one calls setGenerateDroolsTestOnError(true), but the second one doesn't. The second one would feel it too.\n=> remove that if-else block", "url": "https://github.com/kiegroup/optaplanner/pull/789#discussion_r429938714", "createdAt": "2020-05-25T13:36:16Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/config/score/director/ScoreDirectorFactoryConfig.java", "diffHunk": "@@ -332,11 +338,24 @@ public void setAssertionScoreDirectorFactory(ScoreDirectorFactoryConfig assertio\n         this.assertionScoreDirectorFactory = assertionScoreDirectorFactory;\n     }\n \n+    /**\n+     * @deprecated for removal.\n+     */\n+    @Deprecated(/* forRemoval = true */)\n     public Boolean isGenerateDroolsTestOnError() {\n         return generateDroolsTestOnError;\n     }\n \n+    /**\n+     * @deprecated for removal.\n+     */\n+    @Deprecated(/* forRemoval = true */)\n     public void setGenerateDroolsTestOnError(Boolean generateDroolsTestOnError) {\n+        if (BooleanUtils.isTrue(generateDroolsTestOnError)) {\n+            System.setProperty(GENERATE_DROOLS_TEST_ON_ERROR_PROPERTY_NAME, \"true\");\n+        } else {\n+            System.clearProperty(GENERATE_DROOLS_TEST_ON_ERROR_PROPERTY_NAME);\n+        }\n         this.generateDroolsTestOnError = generateDroolsTestOnError;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27ccd78343cbbdfc965060cec3fe5f1c44f2e1fd"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NzkzNzk2OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/domain/entity/descriptor/EntityDescriptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMzo0MTowNlrOGaBhkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMzo0MTowNlrOGaBhkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk0MTEzOA==", "bodyText": "Our error messages typically have 2 lines:\n\nline 1: what is wrong. This is always truth. It doesn't say how to fix it though. Ends with \"\\n\"\nline 2 (optional): How to fix it. This isn't always the way to fix it, it is a recommendation. Therefore, it starts with \"Maybe ...\"\n\nI'd also add a breadcrumb to @PlanningEntity\n=>\n            throw new IllegalStateException(\"The entityClass (\" + entityClass\n                    + \") uses both movableEntitySelectionFilter (\" + movableEntitySelectionFilterClass +\n                    \") and pinningFilter (\" + pinningFilterClass + \").\\n\" +\n                    \"Maybe use only pinningFilterClass on your @\" + PlanningEntity.class.getSimpleName() + \" annotation.\");", "url": "https://github.com/kiegroup/optaplanner/pull/789#discussion_r429941138", "createdAt": "2020-05-25T13:41:06Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/domain/entity/descriptor/EntityDescriptor.java", "diffHunk": "@@ -159,10 +160,27 @@ private void processEntityAnnotations(DescriptorPolicy descriptorPolicy) {\n \n     private void processMovable(DescriptorPolicy descriptorPolicy, PlanningEntity entityAnnotation) {\n         Class<? extends SelectionFilter> movableEntitySelectionFilterClass = entityAnnotation.movableEntitySelectionFilter();\n-        if (movableEntitySelectionFilterClass == PlanningEntity.NullMovableEntitySelectionFilter.class) {\n-            movableEntitySelectionFilterClass = null;\n-        }\n-        if (movableEntitySelectionFilterClass != null) {\n+        boolean hasSelectionFilter = movableEntitySelectionFilterClass != PlanningEntity.NullMovableEntitySelectionFilter.class;\n+        Class<? extends PinningFilter> pinningFilterClass = entityAnnotation.pinningFilter();\n+        boolean hasPinningFilter = pinningFilterClass != PlanningEntity.NullPinningFilter.class;\n+        if (hasPinningFilter && hasSelectionFilter) {\n+            throw new IllegalStateException(\"The entityClass (\" + entityClass\n+                    + \") uses both movableEntitySelectionFilter (\" + movableEntitySelectionFilterClass +\n+                    \") and pinningFilter (\" + pinningFilterClass + \"). \" +\n+                    \"Use pinningFilter exclusively.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27ccd78343cbbdfc965060cec3fe5f1c44f2e1fd"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MDIxNTgyOnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/config/score/director/ScoreDirectorFactoryConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwOTo1ODo1NFrOGaXNlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzoxNzowN1rOGclc6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI5NjQ2OA==", "bodyText": "I wonder... shouldn't this be deprecated too? We're deprecating kieBase already.", "url": "https://github.com/kiegroup/optaplanner/pull/789#discussion_r430296468", "createdAt": "2020-05-26T09:58:54Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/config/score/director/ScoreDirectorFactoryConfig.java", "diffHunk": "@@ -122,6 +122,10 @@\n     protected List<File> scoreDrlFileList = null;\n     @XStreamConverter(KeyAsElementMapConverter.class)\n     protected Map<String, String> kieBaseConfigurationProperties = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a377823d2b209d918c257c6f911a10596e2791c"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYyNjkyMw==", "bodyText": "I'd argue no, because they can also be used in combination with scoreDrl.\nFor example to switch that Drools property propagation from \"ALLOWED\" to \"ALWAYS\", which might perf benefits (at a very higher maitenance cost)", "url": "https://github.com/kiegroup/optaplanner/pull/789#discussion_r432626923", "createdAt": "2020-05-29T17:17:07Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/config/score/director/ScoreDirectorFactoryConfig.java", "diffHunk": "@@ -122,6 +122,10 @@\n     protected List<File> scoreDrlFileList = null;\n     @XStreamConverter(KeyAsElementMapConverter.class)\n     protected Map<String, String> kieBaseConfigurationProperties = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI5NjQ2OA=="}, "originalCommit": {"oid": "0a377823d2b209d918c257c6f911a10596e2791c"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDU1NzkwOnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/domain/entity/PinningFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzoxMzoyNlrOGclVxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzoxMzoyNlrOGclVxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYyNTA5Mw==", "bodyText": "(soft) Consistency with other code: Rename T to Entity_. It reads much clearer if that's the return type somewhere, or if someone needs to extend/implement this class.", "url": "https://github.com/kiegroup/optaplanner/pull/789#discussion_r432625093", "createdAt": "2020-05-29T17:13:26Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/domain/entity/PinningFilter.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.api.domain.entity;\n+\n+import org.optaplanner.core.api.domain.solution.PlanningSolution;\n+import org.optaplanner.core.impl.heuristic.move.Move;\n+\n+/**\n+ * Decides on accepting or discarding a {@link PlanningEntity}.\n+ * A pinned {@link PlanningEntity} is never used in a {@link Move}.\n+ *\n+ * @param <Solution_> the solution type, the class with the {@link PlanningSolution} annotation\n+ * @param <T> the entity type\n+ */\n+public interface PinningFilter<Solution_, T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a377823d2b209d918c257c6f911a10596e2791c"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDU2MjY4OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/domain/entity/PinningFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzoxNTowNVrOGclY7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzoxNTowNVrOGclY7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYyNTkwMg==", "bodyText": "(very soft) change to:\n@param <Entity_> the entity type, the class with the {@link PlanningEntity} annotation", "url": "https://github.com/kiegroup/optaplanner/pull/789#discussion_r432625902", "createdAt": "2020-05-29T17:15:05Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/domain/entity/PinningFilter.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.api.domain.entity;\n+\n+import org.optaplanner.core.api.domain.solution.PlanningSolution;\n+import org.optaplanner.core.impl.heuristic.move.Move;\n+\n+/**\n+ * Decides on accepting or discarding a {@link PlanningEntity}.\n+ * A pinned {@link PlanningEntity} is never used in a {@link Move}.\n+ *\n+ * @param <Solution_> the solution type, the class with the {@link PlanningSolution} annotation\n+ * @param <T> the entity type", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a377823d2b209d918c257c6f911a10596e2791c"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDU5OTY4OnYy", "diffSide": "RIGHT", "path": "optaplanner-docs/src/main/asciidoc/MoveAndNeighborhoodSelection/MoveAndNeighborhoodSelection-chapter.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzoyNjo0NVrOGclw4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzoyNjo0NVrOGclw4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYzMjAzMw==", "bodyText": "I believe this change is a typo. that space shouldn't disappear.", "url": "https://github.com/kiegroup/optaplanner/pull/789#discussion_r432632033", "createdAt": "2020-05-29T17:26:45Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-docs/src/main/asciidoc/MoveAndNeighborhoodSelection/MoveAndNeighborhoodSelection-chapter.adoc", "diffHunk": "@@ -927,7 +927,7 @@ public interface SelectionFilter<Solution_, T> {\n }\n ----\n \n-Implement the `accept` method to return `false` on a discarded `selection` (see below). Filtered selection can happen on any Selector in the selector tree, including any ``MoveSelector``, `EntitySelector` or ``ValueSelector``.\n+Implement the `accept` method to return `false` on a discarded `selection` (see below).Filtered selection can happen on any Selector in the selector tree, including any ``MoveSelector``, `EntitySelector` or ``ValueSelector``.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a377823d2b209d918c257c6f911a10596e2791c"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDYwNjIzOnYy", "diffSide": "RIGHT", "path": "optaplanner-docs/src/main/asciidoc/PlannerConfiguration/PlannerConfiguration-chapter.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzoyODoyNVrOGcl0wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzoyODoyNVrOGcl0wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYzMzAyNg==", "bodyText": "let's replace \"foo\" with something more meaningful, how about \"entitySelector1\"?", "url": "https://github.com/kiegroup/optaplanner/pull/789#discussion_r432633026", "createdAt": "2020-05-29T17:28:25Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-docs/src/main/asciidoc/PlannerConfiguration/PlannerConfiguration-chapter.adoc", "diffHunk": "@@ -523,24 +523,35 @@ Currently <<chainedPlanningVariable, chained>> planning variables are not compat\n ====\n \n <<repeatedPlanning,Repeated planning>> (especially <<realTimePlanning,real-time planning>>) does not mix well with a nullable planning variable.\n-Every time the Solver starts or a problem fact change is made,\n-the <<constructionHeuristics,Construction Heuristics>> will try to initialize all the `null` variables again, which can be a huge waste of time.\n-One way to deal with this, is to change when a planning entity should be reinitialized with an ``reinitializeVariableEntityFilter``:\n+Every time the Solver starts or a problem fact change is made, the <<constructionHeuristics,Construction Heuristics>>\n+will try to initialize all the `null` variables again, which can be a huge waste of time.\n+One way to deal with this is to filter the entity selector of the placer in the construction heuristic.\n \n-[source,java,options=\"nowrap\"]\n+[source,xml,options=\"nowrap\"]\n ----\n-    @PlanningVariable(..., nullable = true, reinitializeVariableEntityFilter = ReinitializeTaskFilter.class)\n-    public Worker getWorker() {\n-        return worker;\n-    }\n+<solverConfig>\n+  ...\n+  <constructionHeuristics>\n+    <queuedEntityPlacer>\n+      <entitySelector id=\"foo\">\n+        <filterClass>...</filterClass>\n+      </entitySelector>\n+    </queuedEntityPlacer>\n+    ...\n+    <changeMoveselector>\n+      <entitySelector mimicRef=\"foo\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a377823d2b209d918c257c6f911a10596e2791c"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDYxNzY2OnYy", "diffSide": "RIGHT", "path": "optaplanner-docs/src/main/asciidoc/RepeatedPlanning/continuousPlanningPatientAdmissionSchedule.svg", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzozMTozNFrOGcl7qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzozMTozNFrOGcl7qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYzNDc5Mg==", "bodyText": "(not for this PR) dpi is 96 these days - I 'll explain in one of our meetings, but don't worry about it for this PR.", "url": "https://github.com/kiegroup/optaplanner/pull/789#discussion_r432634792", "createdAt": "2020-05-29T17:31:34Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-docs/src/main/asciidoc/RepeatedPlanning/continuousPlanningPatientAdmissionSchedule.svg", "diffHunk": "@@ -2,32 +2,31 @@\n <!-- Created with Inkscape (http://www.inkscape.org/) -->\n \n <svg\n-   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n-   xmlns:cc=\"http://creativecommons.org/ns#\"\n-   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n-   xmlns:svg=\"http://www.w3.org/2000/svg\"\n-   xmlns=\"http://www.w3.org/2000/svg\"\n-   xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n-   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n-   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n-   width=\"800\"\n-   height=\"600\"\n-   id=\"svg2\"\n-   version=\"1.1\"\n-   inkscape:version=\"0.92.4 (unknown)\"\n-   sodipodi:docname=\"continuousPlanningPatientAdmissionSchedule.svg\"\n-   inkscape:export-filename=\"continuousPlanningPatientAdmissionSchedule.png\"\n-   inkscape:export-xdpi=\"90\"\n-   inkscape:export-ydpi=\"90\">\n+    xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n+    xmlns:cc=\"http://creativecommons.org/ns#\"\n+    xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n+    xmlns=\"http://www.w3.org/2000/svg\"\n+    xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n+    xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n+    xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n+    width=\"800\"\n+    height=\"600\"\n+    id=\"svg2\"\n+    version=\"1.1\"\n+    inkscape:version=\"0.92.4 (unknown)\"\n+    sodipodi:docname=\"continuousPlanningPatientAdmissionSchedule.svg\"\n+    inkscape:export-filename=\"continuousPlanningPatientAdmissionSchedule.png\"\n+    inkscape:export-xdpi=\"90\"\n+    inkscape:export-ydpi=\"90\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a377823d2b209d918c257c6f911a10596e2791c"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4552, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}