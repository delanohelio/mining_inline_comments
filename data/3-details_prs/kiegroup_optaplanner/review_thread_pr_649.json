{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5ODgwNjQ3", "number": 649, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwODozNjoyOFrODWLnQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwODo1MTowNlrODWLzmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NTg1NTM4OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/bi/BiConstraintStream.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwODozNjoyOFrOFayzGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwODo0NToyM1rOFay-qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzYzOTU3Nw==", "bodyText": "Shall we immediately add the javadoc if we uncomment it?", "url": "https://github.com/kiegroup/optaplanner/pull/649#discussion_r363639577", "createdAt": "2020-01-07T08:36:28Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/bi/BiConstraintStream.java", "diffHunk": "@@ -195,21 +195,27 @@\n     }\n \n     // ************************************************************************\n-    // Group by (TODO implement these)\n+    // Group by\n     // ************************************************************************\n \n-    /*\n-    <GroupKey_> UniConstraintStream<GroupKey_> groupBy(\n-            BiFunction<A, B, GroupKey_> groupKeyMapping);\n+    <GroupKey_> UniConstraintStream<GroupKey_> groupBy(BiFunction<A, B, GroupKey_> groupKeyMapping);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac948fcc8a287c3b6ff2892934218511179ec985"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzY0MjUzOQ==", "bodyText": "Good point, will add.", "url": "https://github.com/kiegroup/optaplanner/pull/649#discussion_r363642539", "createdAt": "2020-01-07T08:45:23Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/bi/BiConstraintStream.java", "diffHunk": "@@ -195,21 +195,27 @@\n     }\n \n     // ************************************************************************\n-    // Group by (TODO implement these)\n+    // Group by\n     // ************************************************************************\n \n-    /*\n-    <GroupKey_> UniConstraintStream<GroupKey_> groupBy(\n-            BiFunction<A, B, GroupKey_> groupKeyMapping);\n+    <GroupKey_> UniConstraintStream<GroupKey_> groupBy(BiFunction<A, B, GroupKey_> groupKeyMapping);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzYzOTU3Nw=="}, "originalCommit": {"oid": "ac948fcc8a287c3b6ff2892934218511179ec985"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NTg2NjA5OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/drools/uni/DroolsValuePair.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwODo0MTozMlrOFay5lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwODo0MTozMlrOFay5lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzY0MTIzNg==", "bodyText": "In toString() and log messages,\nwe use \"[\" to denote lists, collections, arrays, etc.\nWe use \"(\" to denote fields.\nSo let's change this into: return \"Pair(\" + key + \", \" + value + \")\";", "url": "https://github.com/kiegroup/optaplanner/pull/649#discussion_r363641236", "createdAt": "2020-01-07T08:41:32Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/drools/uni/DroolsValuePair.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.score.stream.drools.uni;\n+\n+import java.util.Objects;\n+\n+public final class DroolsValuePair<K,V> {\n+    public final K key;\n+    public final V value;\n+    private final int hashCode;\n+\n+    public DroolsValuePair(K key, V value) {\n+        this.key = key;\n+        this.value = value;\n+        this.hashCode = Objects.hash(key, value);\n+    }\n+\n+    @Override\n+    public boolean equals(final Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || !Objects.equals(getClass(), o.getClass())) {\n+            return false;\n+        }\n+        final DroolsValuePair<?, ?> pair = (DroolsValuePair<?, ?>) o;\n+        return Objects.equals(key, pair.key) &&\n+                Objects.equals(value, pair.value);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return hashCode;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Pair[\" + key + \", \" + value + \"]\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac948fcc8a287c3b6ff2892934218511179ec985"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NTg4MDQ0OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/test/java/org/optaplanner/core/api/score/stream/AssortedConstraintStreamTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwODo0ODoxN1rOFazCcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwODo0OTo0M1rOFazEmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzY0MzUwNQ==", "bodyText": "Assorted?\nI don't like \"Assorted\"Test. It's like Drools's notorious \"Misc\"Test (and Misc2Test and Misc3Test). It's like a \"lost+find\" directory - tests that haven't been sorted yet.\nSo far, the \"where can I find it\" logic in the tests has been:\nif the final stream is a Uni stream, in the UniTest, if it's a Bi then in the BiTest, etc.\nBut if you think it makes more sense to put some of these grouping tests into a (Advanced)GroupByConstraintStreamTest, etc to avoid bloating the BiTest etc, I am ok with that.\nVeto on naming a test \"Assorted\" or \"Misc\" Test. It's too broad.", "url": "https://github.com/kiegroup/optaplanner/pull/649#discussion_r363643505", "createdAt": "2020-01-07T08:48:17Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/test/java/org/optaplanner/core/api/score/stream/AssortedConstraintStreamTest.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.api.score.stream;\n+\n+import java.util.function.Function;\n+import java.util.stream.Stream;\n+\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.optaplanner.core.api.score.buildin.simple.SimpleScore;\n+import org.optaplanner.core.impl.score.director.InnerScoreDirector;\n+import org.optaplanner.core.impl.testdata.domain.score.lavish.TestdataLavishEntity;\n+import org.optaplanner.core.impl.testdata.domain.score.lavish.TestdataLavishEntityGroup;\n+import org.optaplanner.core.impl.testdata.domain.score.lavish.TestdataLavishSolution;\n+\n+import static org.optaplanner.core.api.score.stream.Joiners.equal;\n+\n+public class AssortedConstraintStreamTest extends AbstractConstraintStreamTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac948fcc8a287c3b6ff2892934218511179ec985"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzY0NDA1OQ==", "bodyText": "Yeah, this was one of the things I was going to \"clean up later before I submit the PR.\" :-)", "url": "https://github.com/kiegroup/optaplanner/pull/649#discussion_r363644059", "createdAt": "2020-01-07T08:49:43Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/test/java/org/optaplanner/core/api/score/stream/AssortedConstraintStreamTest.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.api.score.stream;\n+\n+import java.util.function.Function;\n+import java.util.stream.Stream;\n+\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.optaplanner.core.api.score.buildin.simple.SimpleScore;\n+import org.optaplanner.core.impl.score.director.InnerScoreDirector;\n+import org.optaplanner.core.impl.testdata.domain.score.lavish.TestdataLavishEntity;\n+import org.optaplanner.core.impl.testdata.domain.score.lavish.TestdataLavishEntityGroup;\n+import org.optaplanner.core.impl.testdata.domain.score.lavish.TestdataLavishSolution;\n+\n+import static org.optaplanner.core.api.score.stream.Joiners.equal;\n+\n+public class AssortedConstraintStreamTest extends AbstractConstraintStreamTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzY0MzUwNQ=="}, "originalCommit": {"oid": "ac948fcc8a287c3b6ff2892934218511179ec985"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NTg4Njk3OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/uni/UniConstraintStream.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwODo1MTowNlrOFazGeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwODo1MjowMVrOFazH1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzY0NDUzNg==", "bodyText": "I am not sure if these javadocs can't be made more \"simple & clear\".\nAlso notice the big out-of-sync between the javadoc of groupBy(Function) and groupBy(Function, Collector). Those must be brought in sync as much as possible", "url": "https://github.com/kiegroup/optaplanner/pull/649#discussion_r363644536", "createdAt": "2020-01-07T08:51:06Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/uni/UniConstraintStream.java", "diffHunk": "@@ -197,8 +197,8 @@\n             UniConstraintCollector<A, ResultContainer_, Result_> collector);\n \n     /**\n-     * Convert the {@link UniConstraintStream} to a different {@link UniConstraintStream}, containing of the set of\n-     * tuples resulting from applying the group key mapping function on all tuples of the original stream.\n+     * Convert the {@link UniConstraintStream} to a different {@link UniConstraintStream}, containing the set of tuples\n+     * resulting from applying the group key mapping function on all tuples of the original stream.\n      * Neither tuple of the new stream will {@link Objects#equals(Object, Object)} any other.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac948fcc8a287c3b6ff2892934218511179ec985"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzY0NDg4Nw==", "bodyText": "We should improve these (if possible), before copy-pasting it into the other streams cardinalities.", "url": "https://github.com/kiegroup/optaplanner/pull/649#discussion_r363644887", "createdAt": "2020-01-07T08:52:01Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/uni/UniConstraintStream.java", "diffHunk": "@@ -197,8 +197,8 @@\n             UniConstraintCollector<A, ResultContainer_, Result_> collector);\n \n     /**\n-     * Convert the {@link UniConstraintStream} to a different {@link UniConstraintStream}, containing of the set of\n-     * tuples resulting from applying the group key mapping function on all tuples of the original stream.\n+     * Convert the {@link UniConstraintStream} to a different {@link UniConstraintStream}, containing the set of tuples\n+     * resulting from applying the group key mapping function on all tuples of the original stream.\n      * Neither tuple of the new stream will {@link Objects#equals(Object, Object)} any other.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzY0NDUzNg=="}, "originalCommit": {"oid": "ac948fcc8a287c3b6ff2892934218511179ec985"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4564, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}