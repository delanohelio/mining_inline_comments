{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyNTgwNDg0", "number": 656, "title": "PLANNER-1765 groupBy() on QuadStreams", "bodyText": "", "createdAt": "2020-01-14T11:17:43Z", "url": "https://github.com/kiegroup/optaplanner/pull/656", "merged": true, "mergeCommit": {"oid": "5cc35ad47733026c3a551e6e7737dbca5108b4e4"}, "closed": true, "closedAt": "2020-01-17T08:18:29Z", "author": {"login": "triceo"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb6Mtw3gH2gAyMzYyNTgwNDg0OmExNTJlNGJlYWNiYjRmOTViMWViMjFlZDQ2ZjE0YWVkNjE3ZmYxNjc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb7KJNLAFqTM0Mzc4OTkwMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a152e4beacbb4f95b1eb21ed46f14aed617ff167", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/a152e4beacbb4f95b1eb21ed46f14aed617ff167", "committedDate": "2020-01-14T08:31:23Z", "message": "Add the basic APIs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "526d07a3a22956dea2ad9835a8d295dc5ffe6d8b", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/526d07a3a22956dea2ad9835a8d295dc5ffe6d8b", "committedDate": "2020-01-14T08:31:33Z", "message": "Finalize the constraint collectors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b9aec6911c1f54406f467d26a2e98ab1a557e26", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/0b9aec6911c1f54406f467d26a2e98ab1a557e26", "committedDate": "2020-01-14T08:31:50Z", "message": "Remove unusued code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d355235588a3667d1a91bf6f9c23f47ced345448", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/d355235588a3667d1a91bf6f9c23f47ced345448", "committedDate": "2020-01-14T08:32:01Z", "message": "Address Javadoc review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4849dc51bf1d714593c47cde7cf612cdd1bfff98", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/4849dc51bf1d714593c47cde7cf612cdd1bfff98", "committedDate": "2020-01-14T08:48:22Z", "message": "Collect"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "372a7b1c827e0b0bf963cb9119e8533520c0afec", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/372a7b1c827e0b0bf963cb9119e8533520c0afec", "committedDate": "2020-01-14T08:52:30Z", "message": "Single groupBy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe8bd1848d5e97316a7e6592f8e361ffab198663", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/fe8bd1848d5e97316a7e6592f8e361ffab198663", "committedDate": "2020-01-14T09:10:54Z", "message": "Group and collect"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "abde1390d4e81dd555c37eb073b5e21c41fb6014", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/abde1390d4e81dd555c37eb073b5e21c41fb6014", "committedDate": "2020-01-14T09:17:59Z", "message": "Bigroup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0bcc5251b788681e7e740a1b3ced5edef297a25b", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/0bcc5251b788681e7e740a1b3ced5edef297a25b", "committedDate": "2020-01-14T09:46:02Z", "message": "Bigroup with collect"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ce18c6ce9c8829f579ddff43a46dc19067aaba6", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/2ce18c6ce9c8829f579ddff43a46dc19067aaba6", "committedDate": "2020-01-14T12:24:19Z", "message": "Bigroup with bicollect"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e958fa0a27a94b417b80908a2225d6ff48463a6f", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/e958fa0a27a94b417b80908a2225d6ff48463a6f", "committedDate": "2020-01-14T13:12:53Z", "message": "Bigroup with bicollect for quad"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4901f0eeb61b6d5544999e49fde2deb689a1926", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/d4901f0eeb61b6d5544999e49fde2deb689a1926", "committedDate": "2020-01-14T13:26:12Z", "message": "Bigroup with bicollect for tri"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38567da875dbaf86ea10ad485e2a2ed0c8422bcd", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/38567da875dbaf86ea10ad485e2a2ed0c8422bcd", "committedDate": "2020-01-14T13:36:33Z", "message": "And it's done"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "403be23f358738ebd72de21a219e3aec7aa5cef4", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/403be23f358738ebd72de21a219e3aec7aa5cef4", "committedDate": "2020-01-14T13:41:31Z", "message": "Fix Revapi"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzMDY5Njg3", "url": "https://github.com/kiegroup/optaplanner/pull/656#pullrequestreview-343069687", "createdAt": "2020-01-15T09:05:43Z", "commit": {"oid": "403be23f358738ebd72de21a219e3aec7aa5cef4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwOTowNTo0M1rOFdxQXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwOTowNTo0M1rOFdxQXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc2MDAyOQ==", "bodyText": "This is a good reason to think long and hard if we want to support PentaConstraintStreams.\nQuadsStreams are still needed, definitely, despite this. It's worth it. Absolutely.", "url": "https://github.com/kiegroup/optaplanner/pull/656#discussion_r366760029", "createdAt": "2020-01-15T09:05:43Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/uni/UniConstraintStream.java", "diffHunk": "@@ -258,6 +259,31 @@\n             Function<A, GroupKeyA_> groupKeyAMapping, Function<A, GroupKeyB_> groupKeyBMapping,\n             UniConstraintCollector<A, ResultContainer_, Result_> collector);\n \n+    /**\n+     * Combines the semantics of {@link #groupBy(Function, Function)} and {@link #groupBy(UniConstraintCollector)}.\n+     * That is, the first and second facts in the tuple follow the {@link #groupBy(Function, Function)} semantics.\n+     * The third fact is the result of applying the first {@link UniConstraintCollector#finisher()} on all the tuples\n+     * of the original {@link UniConstraintStream} that belong to the group.\n+     * The fourth fact is the result of applying the second {@link UniConstraintCollector#finisher()} on all the tuples\n+     * of the original {@link UniConstraintStream} that belong to the group\n+     * @param groupKeyAMapping never null, function to convert the original tuple into a first fact\n+     * @param groupKeyBMapping never null, function to convert the original tuple into a second fact\n+     * @param collectorC never null, the collector to perform the first grouping operation with\n+     * @param collectorD never null, the collector to perform the first grouping operation with\n+     * @param <GroupKeyA_> the type of the first fact in the destination {@link QuadConstraintStream}'s tuple\n+     * @param <GroupKeyB_> the type of the second fact in the destination {@link QuadConstraintStream}'s tuple\n+     * @param <ResultContainerC_> the mutable accumulation type (often hidden as an implementation detail)\n+     * @param <ResultC_> the type of the third fact in the destination {@link QuadConstraintStream}'s tuple\n+     * @param <ResultContainerD_> the mutable accumulation type (often hidden as an implementation detail)\n+     * @param <ResultD_> the type of the fourth fact in the destination {@link QuadConstraintStream}'s tuple\n+     * @return never null\n+     */\n+    <GroupKeyA_, GroupKeyB_, ResultContainerC_, ResultC_, ResultContainerD_, ResultD_>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "403be23f358738ebd72de21a219e3aec7aa5cef4"}, "originalPosition": 91}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzMDcwODQ5", "url": "https://github.com/kiegroup/optaplanner/pull/656#pullrequestreview-343070849", "createdAt": "2020-01-15T09:07:48Z", "commit": {"oid": "403be23f358738ebd72de21a219e3aec7aa5cef4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwOTowNzo0OFrOFdxT-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwOTowNzo0OFrOFdxT-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc2MDk1Mg==", "bodyText": "Maybe this QuadTuple can also belongs in the quad package?\nBavet's impl does that: it's UniTuple is in the uni package, same for bi, etc.", "url": "https://github.com/kiegroup/optaplanner/pull/656#discussion_r366760952", "createdAt": "2020-01-15T09:07:48Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/drools/common/QuadTuple.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.score.stream.drools.common;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "403be23f358738ebd72de21a219e3aec7aa5cef4"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzMDcyNDM1", "url": "https://github.com/kiegroup/optaplanner/pull/656#pullrequestreview-343072435", "createdAt": "2020-01-15T09:10:34Z", "commit": {"oid": "403be23f358738ebd72de21a219e3aec7aa5cef4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45e07f7b2cc1a3d5101ad0d9053fc112314dfd67", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/45e07f7b2cc1a3d5101ad0d9053fc112314dfd67", "committedDate": "2020-01-15T09:39:55Z", "message": "Remove needless ResultContainer generic type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19c57a10b0e452a8a6a502eb6fad1f2b9d3ad7cd", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/19c57a10b0e452a8a6a502eb6fad1f2b9d3ad7cd", "committedDate": "2020-01-15T09:45:00Z", "message": "Rename pair to tuple"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2603c3bd797addffa2faa3742d26d8840b237ac6", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/2603c3bd797addffa2faa3742d26d8840b237ac6", "committedDate": "2020-01-16T09:31:46Z", "message": "Remove unused imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6816e5e2ce9dddd26ee0bb4ae7f22db369c95f0", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/e6816e5e2ce9dddd26ee0bb4ae7f22db369c95f0", "committedDate": "2020-01-16T09:40:00Z", "message": "Fix QuadTuple's toString()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13e246ee94b553e0bff039ad69eeb937a700eae9", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/13e246ee94b553e0bff039ad69eeb937a700eae9", "committedDate": "2020-01-16T11:51:38Z", "message": "Remove needless suppliers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4cc6fb3e58283fb0e402a4c4633e4abafd22fd26", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/4cc6fb3e58283fb0e402a4c4633e4abafd22fd26", "committedDate": "2020-01-16T20:49:59Z", "message": "Minor Javadoc spelling fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzNzg5OTAx", "url": "https://github.com/kiegroup/optaplanner/pull/656#pullrequestreview-343789901", "createdAt": "2020-01-16T09:53:34Z", "commit": {"oid": "e6816e5e2ce9dddd26ee0bb4ae7f22db369c95f0"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwOTo1MzozNFrOFeTsaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMTowNTo1MFrOFeVxIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyNDI2NQ==", "bodyText": "\"the a fact\"", "url": "https://github.com/kiegroup/optaplanner/pull/656#discussion_r367324265", "createdAt": "2020-01-16T09:53:34Z", "author": {"login": "rsynek"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/bi/BiConstraintStream.java", "diffHunk": "@@ -224,9 +225,9 @@\n      * Convert the {@link BiConstraintStream} to a different {@link BiConstraintStream}, consisting of unique tuples.\n      * <p>\n      * The first fact is the return value of the first group key mapping function, applied on the incoming tuple.\n-     * The second fact is the return value of a given {@link BiConstraintCollector} applied on incoming tuples with the\n-     * same first fact.\n-     * @param groupKeyMapping never null, function to convert a fact in original tuple to a different fact\n+     * The second fact is the return value of a given {@link BiConstraintCollector} applied on all incoming tuples with\n+     * the same first fact.\n+     * @param groupKeyMapping never null, function to convert the a fact in original tuple to a different fact", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6816e5e2ce9dddd26ee0bb4ae7f22db369c95f0"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM1ODI0Mg==", "bodyText": "I noticed there is a potential for some other combinations, e.g.:\n\n3 grouping functions, no collector => TriStream\n3 grouping functions, 1 collector => QuadStream\n\nBut as discussed, these might be added later.", "url": "https://github.com/kiegroup/optaplanner/pull/656#discussion_r367358242", "createdAt": "2020-01-16T11:05:50Z", "author": {"login": "rsynek"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/quad/QuadConstraintStream.java", "diffHunk": "@@ -61,6 +63,111 @@\n      */\n     QuadConstraintStream<A, B, C, D> filter(QuadPredicate<A, B, C, D> predicate);\n \n+    // ************************************************************************\n+    // Group by\n+    // ************************************************************************\n+\n+    /**\n+     * Convert the {@link QuadConstraintStream} to a {@link UniConstraintStream}, containing only a single tuple, the\n+     * result of applying {@link QuadConstraintCollector}.\n+     * {@link UniConstraintStream} which only has a single tuple, the result of applying\n+     * {@link QuadConstraintCollector}.\n+     * @param collector never null, the collector to perform the grouping operation with\n+     * @param <ResultContainer_> the mutable accumulation type (often hidden as an implementation detail)\n+     * @param <Result_> the type of a fact in the destination {@link UniConstraintStream}'s tuple\n+     * @return never null\n+     */\n+    <ResultContainer_, Result_> UniConstraintStream<Result_> groupBy(\n+            QuadConstraintCollector<A, B, C, D, ResultContainer_, Result_> collector);\n+\n+    /**\n+     * Convert the {@link QuadConstraintStream} to a {@link UniConstraintStream}, containing the set of tuples resulting\n+     * from applying the group key mapping function on all tuples of the original stream.\n+     * Neither tuple of the new stream {@link Objects#equals(Object, Object)} any other.\n+     * @param groupKeyMapping never null, mapping function to convert each element in the stream to a different element\n+     * @param <GroupKey_> the type of a fact in the destination {@link UniConstraintStream}'s tuple\n+     * @return never null\n+     */\n+    <GroupKey_> UniConstraintStream<GroupKey_> groupBy(QuadFunction<A, B, C, D, GroupKey_> groupKeyMapping);\n+\n+    /**\n+     * Convert the {@link QuadConstraintStream} to a {@link BiConstraintStream}, consisting of unique tuples.\n+     * <p>\n+     * The first fact is the return value of the first group key mapping function, applied on the incoming tuple.\n+     * The second fact is the return value of a given {@link QuadConstraintCollector} applied on all incoming tuples\n+     * with the same first fact.\n+     * @param groupKeyMapping never null, function to convert the a fact in original tuple to a different fact\n+     * @param <GroupKey_> the type of the first fact in the destination {@link BiConstraintStream}'s tuple\n+     * @param <ResultContainer_> the mutable accumulation type (often hidden as an implementation detail)\n+     * @param <Result_> the type of the second fact in the destination {@link BiConstraintStream}'s tuple\n+     * @return never null\n+     */\n+    <GroupKey_, ResultContainer_, Result_> BiConstraintStream<GroupKey_, Result_> groupBy(\n+            QuadFunction<A, B, C, D, GroupKey_> groupKeyMapping,\n+            QuadConstraintCollector<A, B, C, D, ResultContainer_, Result_> collector);\n+\n+    /**\n+     * Convert the {@link QuadConstraintStream} to a {@link BiConstraintStream}, consisting of unique tuples.\n+     * <p>\n+     * The first fact is the return value of the first group key mapping function, applied on the incoming tuple.\n+     * The second fact is the return value of the second group key mapping function, applied on all incoming tuples with\n+     * the same first fact.\n+     * @param groupKeyAMapping never null, function to convert the facts in the original tuple to a new fact\n+     * @param groupKeyBMapping never null, function to convert the facts in the original tuple to another new fact\n+     * @param <GroupKeyA_> the type of the first fact in the destination {@link BiConstraintStream}'s tuple\n+     * @param <GroupKeyB_> the type of the second fact in the destination {@link BiConstraintStream}'s tuple\n+     * @return never null\n+     */\n+    <GroupKeyA_, GroupKeyB_> BiConstraintStream<GroupKeyA_, GroupKeyB_> groupBy(\n+            QuadFunction<A, B, C, D, GroupKeyA_> groupKeyAMapping, QuadFunction<A, B, C, D, GroupKeyB_> groupKeyBMapping);\n+\n+    /**\n+     * Combines the semantics of {@link #groupBy(QuadFunction, QuadFunction)} and\n+     * {@link #groupBy(QuadConstraintCollector)}.\n+     * That is, the first and second facts in the tuple follow the {@link #groupBy(QuadFunction, QuadFunction)}\n+     * semantics,\n+     * and the third fact is the result of applying {@link QuadConstraintCollector#finisher()} on all the tuples of the\n+     * original {@link UniConstraintStream} that belong to the group.\n+     * @param groupKeyAMapping never null, function to convert the original tuple into a first fact\n+     * @param groupKeyBMapping never null, function to convert the original tuple into a second fact\n+     * @param collector never null, the collector to perform the grouping operation with\n+     * @param <GroupKeyA_> the type of the first fact in the destination {@link TriConstraintStream}'s tuple\n+     * @param <GroupKeyB_> the type of the second fact in the destination {@link TriConstraintStream}'s tuple\n+     * @param <ResultContainer_> the mutable accumulation type (often hidden as an implementation detail)\n+     * @param <Result_> the type of the third fact in the destination {@link TriConstraintStream}'s tuple\n+     * @return never null\n+     */\n+    <GroupKeyA_, GroupKeyB_, ResultContainer_, Result_> TriConstraintStream<GroupKeyA_, GroupKeyB_, Result_> groupBy(\n+            QuadFunction<A, B, C, D, GroupKeyA_> groupKeyAMapping, QuadFunction<A, B, C, D, GroupKeyB_> groupKeyBMapping,\n+            QuadConstraintCollector<A, B, C, D, ResultContainer_, Result_> collector);\n+\n+    /**\n+     * Combines the semantics of {@link #groupBy(QuadFunction, QuadFunction)} and\n+     * {@link #groupBy(QuadConstraintCollector)}.\n+     * That is, the first and second facts in the tuple follow the {@link #groupBy(QuadFunction, QuadFunction)}\n+     * semantics.\n+     * The third fact is the result of applying the first {@link QuadConstraintCollector#finisher()} on all the tuples\n+     * of the original {@link QuadConstraintStream} that belong to the group.\n+     * The fourth fact is the result of applying the second {@link QuadConstraintCollector#finisher()} on all the tuples\n+     * of the original {@link QuadConstraintStream} that belong to the group\n+     * @param groupKeyAMapping never null, function to convert the original tuple into a first fact\n+     * @param groupKeyBMapping never null, function to convert the original tuple into a second fact\n+     * @param collectorC never null, the collector to perform the first grouping operation with\n+     * @param collectorD never null, the collector to perform the first grouping operation with\n+     * @param <GroupKeyA_> the type of the first fact in the destination {@link QuadConstraintStream}'s tuple\n+     * @param <GroupKeyB_> the type of the second fact in the destination {@link QuadConstraintStream}'s tuple\n+     * @param <ResultContainerC_> the mutable accumulation type (often hidden as an implementation detail)\n+     * @param <ResultC_> the type of the third fact in the destination {@link QuadConstraintStream}'s tuple\n+     * @param <ResultContainerD_> the mutable accumulation type (often hidden as an implementation detail)\n+     * @param <ResultD_> the type of the fourth fact in the destination {@link QuadConstraintStream}'s tuple\n+     * @return never null\n+     */\n+    <GroupKeyA_, GroupKeyB_, ResultContainerC_, ResultC_, ResultContainerD_, ResultD_>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6816e5e2ce9dddd26ee0bb4ae7f22db369c95f0"}, "originalPosition": 126}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3041, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}