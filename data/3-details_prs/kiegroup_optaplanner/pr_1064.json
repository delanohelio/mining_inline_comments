{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMxODg2MDc0", "number": 1064, "title": "PLANNER-2269: Proper CS-B node indexing", "bodyText": "", "createdAt": "2020-12-03T15:53:40Z", "url": "https://github.com/kiegroup/optaplanner/pull/1064", "merged": true, "mergeCommit": {"oid": "780ee9cf62022ff336b083b63466a2401ecd50ed"}, "closed": true, "closedAt": "2020-12-09T10:28:06Z", "author": {"login": "triceo"}, "timelineItems": {"totalCount": 43, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdilQucgFqTU0NDEwOTQ2OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdkIbe1AH2gAyNTMxODg2MDc0OjY0YTA3Mzk2YzNhZmI3OWFkNDljNTE1MTNkZThjMjA4NGJkOGQ5YTA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0MTA5NDY4", "url": "https://github.com/kiegroup/optaplanner/pull/1064#pullrequestreview-544109468", "createdAt": "2020-12-03T15:55:24Z", "commit": {"oid": "1abadeb996e5d33f537da94ce7ec6014adff6489"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNTo1NToyNFrOH-jvMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNTo1NToyNFrOH-jvMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM1OTI4MQ==", "bodyText": "Don't like it, but I needed this for the test.\nThis is not public API, so we should be good.", "url": "https://github.com/kiegroup/optaplanner/pull/1064#discussion_r535359281", "createdAt": "2020-12-03T15:55:24Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/director/stream/ConstraintStreamScoreDirector.java", "diffHunk": "@@ -172,4 +172,11 @@ public void afterProblemFactRemoved(Object problemFact) {\n         super.afterProblemFactRemoved(problemFact);\n     }\n \n+    // ************************************************************************\n+    // Getters/setters\n+    // ************************************************************************\n+\n+    public ConstraintSession<Solution_, Score_> getSession() {\n+        return session;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1abadeb996e5d33f537da94ce7ec6014adff6489"}, "originalPosition": 10}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1abadeb996e5d33f537da94ce7ec6014adff6489", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/1abadeb996e5d33f537da94ce7ec6014adff6489", "committedDate": "2020-12-03T15:52:53Z", "message": "Finishing touches"}, "afterCommit": {"oid": "5edeb52291e18cf365daf34b7ad2a42958e47364", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/5edeb52291e18cf365daf34b7ad2a42958e47364", "committedDate": "2020-12-03T16:01:29Z", "message": "Finishing touches"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0MTE4MTg1", "url": "https://github.com/kiegroup/optaplanner/pull/1064#pullrequestreview-544118185", "createdAt": "2020-12-03T16:03:53Z", "commit": {"oid": "5edeb52291e18cf365daf34b7ad2a42958e47364"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNjowMzo1M1rOH-kJyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNjowMzo1M1rOH-kJyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM2NjA5MA==", "bodyText": "This is the test that checks, for a sufficiently complex stream, that the ordering is correct.", "url": "https://github.com/kiegroup/optaplanner/pull/1064#discussion_r535366090", "createdAt": "2020-12-03T16:03:53Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/test/java/org/optaplanner/core/impl/score/stream/bavet/BavetConstraintStreamNodeOrderingTest.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.score.stream.bavet;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.optaplanner.core.api.score.stream.Joiners.equal;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.optaplanner.core.api.score.buildin.simple.SimpleScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintCollectors;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintStreamImplType;\n+import org.optaplanner.core.impl.score.director.stream.ConstraintStreamScoreDirector;\n+import org.optaplanner.core.impl.score.director.stream.ConstraintStreamScoreDirectorFactory;\n+import org.optaplanner.core.impl.score.stream.bavet.common.BavetScoringNode;\n+import org.optaplanner.core.impl.score.stream.bavet.tri.BavetScoringTriNode;\n+import org.optaplanner.core.impl.score.stream.bavet.uni.BavetAbstractUniNode;\n+import org.optaplanner.core.impl.score.stream.bavet.uni.BavetFilterUniNode;\n+import org.optaplanner.core.impl.score.stream.bavet.uni.BavetFromUniNode;\n+import org.optaplanner.core.impl.score.stream.bavet.uni.BavetJoinBridgeUniNode;\n+import org.optaplanner.core.impl.testdata.domain.score.lavish.TestdataLavishEntity;\n+import org.optaplanner.core.impl.testdata.domain.score.lavish.TestdataLavishSolution;\n+import org.optaplanner.core.impl.testdata.domain.score.lavish.TestdataLavishValue;\n+import org.optaplanner.core.impl.testdata.domain.score.lavish.TestdataLavishValueGroup;\n+\n+public class BavetConstraintStreamNodeOrderingTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5edeb52291e18cf365daf34b7ad2a42958e47364"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0NTM1MDg4", "url": "https://github.com/kiegroup/optaplanner/pull/1064#pullrequestreview-544535088", "createdAt": "2020-12-03T23:04:37Z", "commit": {"oid": "611a3b2ef0f4b1804e06af4e17fc56e56daa8fcf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMzowNDozOFrOH-5NCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMzowNDozOFrOH-5NCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcxMDk4NA==", "bodyText": "This is not consistent with equals().", "url": "https://github.com/kiegroup/optaplanner/pull/1064#discussion_r535710984", "createdAt": "2020-12-03T23:04:38Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/common/BavetAbstractNode.java", "diffHunk": "@@ -21,20 +21,24 @@\n public class BavetAbstractNode implements BavetNode {\n \n     protected final BavetConstraintSession session;\n-    protected final int nodeOrder;\n+    protected final int nodeIndex;\n \n-    public BavetAbstractNode(BavetConstraintSession session, int nodeOrder) {\n+    public BavetAbstractNode(BavetConstraintSession session, int nodeIndex) {\n         this.session = session;\n-        this.nodeOrder = nodeOrder;\n+        this.nodeIndex = nodeIndex;\n     }\n \n     // ************************************************************************\n     // Getters/setters\n     // ************************************************************************\n \n     @Override\n-    public int getNodeOrder() {\n-        return nodeOrder;\n+    public int getNodeIndex() {\n+        return nodeIndex;\n     }\n \n+    @Override\n+    public int compareTo(BavetNode o) {\n+        return Integer.compare(this.nodeIndex, o.getNodeIndex());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "611a3b2ef0f4b1804e06af4e17fc56e56daa8fcf"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0NTM2MzI1", "url": "https://github.com/kiegroup/optaplanner/pull/1064#pullrequestreview-544536325", "createdAt": "2020-12-03T23:06:22Z", "commit": {"oid": "611a3b2ef0f4b1804e06af4e17fc56e56daa8fcf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMzowNjoyMlrOH-5SAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMzowNjoyMlrOH-5SAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcxMjI1OA==", "bodyText": "All node indexes are unique now. Therefore this fail-fast makes no sense anymore.", "url": "https://github.com/kiegroup/optaplanner/pull/1064#discussion_r535712258", "createdAt": "2020-12-03T23:06:22Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/common/BavetNodeBuildPolicy.java", "diffHunk": "@@ -37,18 +37,11 @@ public BavetNodeBuildPolicy(BavetConstraintSession session, int constraintCount)\n         constraintIdToScoringNodeMap = new LinkedHashMap<>(constraintCount);\n     }\n \n-    public void updateNodeOrderMaximum(int nodeOrder) {\n-        if (nodeOrderMaximum < nodeOrder) {\n-            nodeOrderMaximum = nodeOrder;\n-        }\n-    }\n-\n     public <Node_ extends BavetAbstractNode> Node_ retrieveSharedNode(Node_ node) {\n         Node_ sharedNode = (Node_) sharableNodeMap.computeIfAbsent(node, k -> node);\n-        if (node.getNodeOrder() != sharedNode.getNodeOrder()) {\n-            throw new IllegalStateException(\"Impossible state: the node (\" + node\n-                    + \")'s nodeOrder (\" + node.getNodeOrder() + \") differs from the sharedNode (\" + sharedNode\n-                    + \")'s nodeOrder (\" + sharedNode.getNodeOrder() + \").\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "611a3b2ef0f4b1804e06af4e17fc56e56daa8fcf"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1MDc5Mzcx", "url": "https://github.com/kiegroup/optaplanner/pull/1064#pullrequestreview-545079371", "createdAt": "2020-12-04T15:52:46Z", "commit": {"oid": "611a3b2ef0f4b1804e06af4e17fc56e56daa8fcf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNTo1Mjo0NlrOH_W6MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNTo1Mjo0NlrOH_W6MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE5NzY4MA==", "bodyText": "Actually, this is now just nodeSize (the number of nodes), I'd argue. Wdyt?", "url": "https://github.com/kiegroup/optaplanner/pull/1064#discussion_r536197680", "createdAt": "2020-12-04T15:52:46Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/BavetConstraintSession.java", "diffHunk": "@@ -48,12 +49,12 @@\n     private final ScoreInliner<Score_> scoreInliner;\n \n     private final Map<Class<?>, BavetFromUniNode<Object>> declaredClassToNodeMap;\n-    private final int nodeOrderSize;\n+    private final int nodeIndexSize;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "611a3b2ef0f4b1804e06af4e17fc56e56daa8fcf"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1MDk3NjE3", "url": "https://github.com/kiegroup/optaplanner/pull/1064#pullrequestreview-545097617", "createdAt": "2020-12-04T16:13:43Z", "commit": {"oid": "611a3b2ef0f4b1804e06af4e17fc56e56daa8fcf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjoxMzo0M1rOH_Xxzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjoxMzo0M1rOH_Xxzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIxMTkxOQ==", "bodyText": "I wouldn't write this as an else if because the 2 conditions are unrelated and it creates the confusion that they are.\nSuggestion: replace the else with a line break. - because the sharedNode check is a quick return (special condition for which the main content of this method doesn't apply).", "url": "https://github.com/kiegroup/optaplanner/pull/1064#discussion_r536211919", "createdAt": "2020-12-04T16:13:43Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/bi/BavetAbstractBiConstraintStream.java", "diffHunk": "@@ -277,39 +277,35 @@ public final Constraint impactScoreConfigurableBigDecimal(String constraintPacka\n     // ************************************************************************\n \n     public BavetAbstractBiNode<A, B> createNodeChain(BavetNodeBuildPolicy<Solution_> buildPolicy,\n-            Score<?> constraintWeight, int nodeOrder, BavetAbstractBiNode<A, B> parentNode) {\n-        BavetAbstractBiNode<A, B> node = createNode(buildPolicy, constraintWeight, nodeOrder, parentNode);\n-        node = processNode(buildPolicy, nodeOrder, parentNode, node);\n-        createChildNodeChains(buildPolicy, constraintWeight, nodeOrder, node);\n+            Score<?> constraintWeight, BavetAbstractBiNode<A, B> parentNode) {\n+        BavetAbstractBiNode<A, B> node = createNode(buildPolicy, constraintWeight, parentNode);\n+        node = processNode(buildPolicy, parentNode, node);\n+        createChildNodeChains(buildPolicy, constraintWeight, node);\n         return node;\n     }\n \n-    protected BavetAbstractBiNode<A, B> processNode(BavetNodeBuildPolicy<Solution_> buildPolicy, int nodeOrder,\n+    protected BavetAbstractBiNode<A, B> processNode(BavetNodeBuildPolicy<Solution_> buildPolicy,\n             BavetAbstractBiNode<A, B> parentNode, BavetAbstractBiNode<A, B> node) {\n-        buildPolicy.updateNodeOrderMaximum(nodeOrder);\n         BavetAbstractBiNode<A, B> sharedNode = buildPolicy.retrieveSharedNode(node);\n-        if (sharedNode != node) {\n-            // Share node\n-            node = sharedNode;\n-        } else {\n-            if (parentNode != null) { // TODO remove null check and don't go through this code like this for from and joins\n-                parentNode.addChildNode(node);\n-            }\n+        if (sharedNode != node) { // Share node\n+            return sharedNode;\n+        } else if (parentNode != null) { // TODO remove null check and don't go through this for from and joins", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "611a3b2ef0f4b1804e06af4e17fc56e56daa8fcf"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1MDk4OTMy", "url": "https://github.com/kiegroup/optaplanner/pull/1064#pullrequestreview-545098932", "createdAt": "2020-12-04T16:15:24Z", "commit": {"oid": "611a3b2ef0f4b1804e06af4e17fc56e56daa8fcf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjoxNToyNFrOH_X16A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjoxNToyNFrOH_X16A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIxMjk2OA==", "bodyText": "(important)\nThis is very wierd.\nI would expect the it take as the next Index from the buildPolicy.\nThis way the next Index doesn't increment. That's a bug I think?", "url": "https://github.com/kiegroup/optaplanner/pull/1064#discussion_r536212968", "createdAt": "2020-12-04T16:15:24Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/bi/BavetFilterBiConstraintStream.java", "diffHunk": "@@ -51,8 +51,8 @@ public BavetFilterBiConstraintStream(BavetConstraintFactory<Solution_> constrain\n \n     @Override\n     protected BavetFilterBiNode<A, B> createNode(BavetNodeBuildPolicy<Solution_> buildPolicy,\n-            Score<?> constraintWeight, int nodeOrder, BavetAbstractBiNode<A, B> parentNode) {\n-        return new BavetFilterBiNode<>(buildPolicy.getSession(), nodeOrder, parentNode, predicate);\n+            Score<?> constraintWeight, BavetAbstractBiNode<A, B> parentNode) {\n+        return new BavetFilterBiNode<>(buildPolicy.getSession(), buildPolicy.getNodeIndexMaximum() + 1, parentNode, predicate);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "611a3b2ef0f4b1804e06af4e17fc56e56daa8fcf"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1MDk5NDYy", "url": "https://github.com/kiegroup/optaplanner/pull/1064#pullrequestreview-545099462", "createdAt": "2020-12-04T16:16:01Z", "commit": {"oid": "611a3b2ef0f4b1804e06af4e17fc56e56daa8fcf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjoxNjowMVrOH_X3oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjoxNjowMVrOH_X3oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIxMzQwOQ==", "bodyText": "No. This appraoch won't work with composition approaches. For complex networks we can't predict the gaps.", "url": "https://github.com/kiegroup/optaplanner/pull/1064#discussion_r536213409", "createdAt": "2020-12-04T16:16:01Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/bi/BavetGroupBiConstraintStream.java", "diffHunk": "@@ -50,19 +50,20 @@ public BavetGroupBiConstraintStream(BavetConstraintFactory<Solution_> constraint\n \n     @Override\n     public BavetGroupBiNode<GroupKey_, ResultContainer_, Result_> createNodeChain(BavetNodeBuildPolicy<Solution_> buildPolicy,\n-            Score<?> constraintWeight, int nodeOrder, BavetAbstractBiNode<GroupKey_, Result_> parentNode) {\n+            Score<?> constraintWeight, BavetAbstractBiNode<GroupKey_, Result_> parentNode) {\n         return (BavetGroupBiNode<GroupKey_, ResultContainer_, Result_>) super.createNodeChain(buildPolicy, constraintWeight,\n-                nodeOrder, parentNode);\n+                parentNode);\n     }\n \n     @Override\n     protected BavetGroupBiNode<GroupKey_, ResultContainer_, Result_> createNode(BavetNodeBuildPolicy<Solution_> buildPolicy,\n-            Score<?> constraintWeight, int nodeOrder, BavetAbstractBiNode<GroupKey_, Result_> parentNode) {\n+            Score<?> constraintWeight, BavetAbstractBiNode<GroupKey_, Result_> parentNode) {\n         if (parentNode != null) {\n             throw new IllegalStateException(\"Impossible state: the stream (\" + this\n                     + \") cannot have a parentNode (\" + parentNode + \").\");\n         }\n-        return new BavetGroupBiNode<>(buildPolicy.getSession(), nodeOrder, finisher);\n+        // GroupBridgeNodes are created after GroupNodes, so increment by 2 to create room for the bridge inbetween.\n+        return new BavetGroupBiNode<>(buildPolicy.getSession(), buildPolicy.getNodeIndexMaximum() + 2, finisher);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "611a3b2ef0f4b1804e06af4e17fc56e56daa8fcf"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1MTAyNzQ1", "url": "https://github.com/kiegroup/optaplanner/pull/1064#pullrequestreview-545102745", "createdAt": "2020-12-04T16:19:41Z", "commit": {"oid": "611a3b2ef0f4b1804e06af4e17fc56e56daa8fcf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjoxOTo0MlrOH_YCGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjoxOTo0MlrOH_YCGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIxNjA5MQ==", "bodyText": "My suggestion is to remove this field and instead have\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private int nodeIndexMaximum = -1; // So that the first node starts at 0 when it increments.\n          \n          \n            \n                private int nextNodeIndex = 0;\n          \n          \n            \n                \n          \n          \n            \n                public int nextNodeIndex() {\n          \n          \n            \n                    return nextNodeIndex++;\n          \n          \n            \n                }\n          \n      \n    \n    \n  \n\nEvery time a new node is created, it call this method and automatically gets the next one.\nRemember that join nodes are created after both bridges are created, so a join will never be before it's bridges or anything before it (but we should test those nodeIndexes with a unit test).", "url": "https://github.com/kiegroup/optaplanner/pull/1064#discussion_r536216091", "createdAt": "2020-12-04T16:19:42Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/common/BavetNodeBuildPolicy.java", "diffHunk": "@@ -26,7 +26,7 @@\n \n     private final BavetConstraintSession session;\n \n-    private int nodeOrderMaximum = 0;\n+    private int nodeIndexMaximum = -1; // So that the first node starts at 0 when it increments.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "611a3b2ef0f4b1804e06af4e17fc56e56daa8fcf"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1MTA1MjM1", "url": "https://github.com/kiegroup/optaplanner/pull/1064#pullrequestreview-545105235", "createdAt": "2020-12-04T16:22:49Z", "commit": {"oid": "611a3b2ef0f4b1804e06af4e17fc56e56daa8fcf"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2MDc2Njg4", "url": "https://github.com/kiegroup/optaplanner/pull/1064#pullrequestreview-546076688", "createdAt": "2020-12-07T11:52:43Z", "commit": {"oid": "98513aa276d23bb2ceac3bfc7f897abc906c6777"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMTo1Mjo0NFrOIAjKog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMTo1Mjo0NFrOIAjKog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ0NzA3NA==", "bodyText": "This is heavy. Thankfully it is only ever used in BavetConstraintSession constructor.\nConsidering that it gives us a fail-fast on a pretty important thing, I say we need it.", "url": "https://github.com/kiegroup/optaplanner/pull/1064#discussion_r537447074", "createdAt": "2020-12-07T11:52:44Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/common/BavetNodeBuildPolicy.java", "diffHunk": "@@ -77,4 +86,22 @@ public int getNodeOrderMaximum() {\n         return joinConstraintStreamToJoinBridgeNodeMap;\n     }\n \n+    public List<BavetNode> getCreatedNodes() {\n+        // Make a sequential list of unique nodes.\n+        SortedMap<Integer, BavetNode> nodeIndexToNodeMap = Stream.concat(sharableNodeMap.keySet().stream(),\n+                constraintIdToScoringNodeMap.values().stream())\n+                .distinct()\n+                .collect(Collectors.toMap(k -> k.getNodeIndex(), Function.identity(), (a, b) -> {\n+                    throw new IllegalStateException(\"Impossible state: nodes (\" + a + \") and (\" + b + \") share index.\");\n+                }, TreeMap::new));\n+        // Ensure there are no gaps in that list.\n+        int maxNodeIndex = nodeIndexToNodeMap.lastKey();\n+        int expectedMaxNodeIndex = nodeIndexToNodeMap.size() - 1;\n+        if (maxNodeIndex != expectedMaxNodeIndex) {\n+            throw new IllegalStateException(\"Impossible state: maximum node index (\" + maxNodeIndex +\n+                    \") does not match the expected maximum node count (\" + expectedMaxNodeIndex + \").\");\n+        }\n+        return Collections.unmodifiableList(new ArrayList<>(nodeIndexToNodeMap.values()));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98513aa276d23bb2ceac3bfc7f897abc906c6777"}, "originalPosition": 99}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6dee0a469c93a206012d395d5b6cc72aca40b2fd", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/6dee0a469c93a206012d395d5b6cc72aca40b2fd", "committedDate": "2020-12-07T13:24:23Z", "message": "NodeOrder becomes NodeIndex"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27fa44052c64164d4601346b7943f38c78c21e4d", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/27fa44052c64164d4601346b7943f38c78c21e4d", "committedDate": "2020-12-07T13:24:24Z", "message": "BavetNode becomes Comparable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd73950f91e6330bbf5fb96b90ceaaa145b63c5e", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/fd73950f91e6330bbf5fb96b90ceaaa145b63c5e", "committedDate": "2020-12-07T13:24:24Z", "message": "Add a simple node index test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a577c40520644bf3c937f8264179be7ad88bfafe", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/a577c40520644bf3c937f8264179be7ad88bfafe", "committedDate": "2020-12-07T13:24:24Z", "message": "processNode() does not need node index"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05cd93dfd907bb33499b74c02647722c2cfda9e3", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/05cd93dfd907bb33499b74c02647722c2cfda9e3", "committedDate": "2020-12-07T13:24:24Z", "message": "internalize node order maximum updates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66eaceb994ffd49a63b1050212006a93c3b4fd35", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/66eaceb994ffd49a63b1050212006a93c3b4fd35", "committedDate": "2020-12-07T13:24:24Z", "message": "Order stuff properly"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "943539854e2fce9fb385cf7b038acf4d4af62eb2", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/943539854e2fce9fb385cf7b038acf4d4af62eb2", "committedDate": "2020-12-07T13:24:24Z", "message": "Finally remove all node index arguments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9eee086026884c89f406ef9ee9f3f5c06079d728", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/9eee086026884c89f406ef9ee9f3f5c06079d728", "committedDate": "2020-12-07T13:24:24Z", "message": "Finishing touches"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d85f892cacea8d12965a891b40927b62a70dfe8b", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/d85f892cacea8d12965a891b40927b62a70dfe8b", "committedDate": "2020-12-07T13:24:25Z", "message": "Remove a bit more code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c0e92a181a7ab0f4daa502ba16352430beb8513", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/4c0e92a181a7ab0f4daa502ba16352430beb8513", "committedDate": "2020-12-07T13:24:25Z", "message": "Remove some unused code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7d6e55179f5eb79667316b4b446af33b7e4b247", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/c7d6e55179f5eb79667316b4b446af33b7e4b247", "committedDate": "2020-12-07T13:24:25Z", "message": "Fix comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc41f88d9974326125ccaf02637d6d574378a1ac", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/fc41f88d9974326125ccaf02637d6d574378a1ac", "committedDate": "2020-12-07T13:24:25Z", "message": "Create group bridges in sequence"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6931a46f5fe4d2d5b83d735ab8ecdca95ebe3a0f", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/6931a46f5fe4d2d5b83d735ab8ecdca95ebe3a0f", "committedDate": "2020-12-07T13:24:25Z", "message": "Better node indexing algorithm"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5154a1a05c9a512d6a903ea5a685467b20af7cc", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/e5154a1a05c9a512d6a903ea5a685467b20af7cc", "committedDate": "2020-12-07T13:24:25Z", "message": "Fail fast on node indexing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb1fec593b0245fd99cd51eff63dacae9e947d32", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/fb1fec593b0245fd99cd51eff63dacae9e947d32", "committedDate": "2020-12-07T13:24:26Z", "message": "Make nodes available outside of the session"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dcd96290c8cdddb8ddbd7d07e9b791bcebc64cf4", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/dcd96290c8cdddb8ddbd7d07e9b791bcebc64cf4", "committedDate": "2020-12-07T13:24:26Z", "message": "Improve test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d356b05b228975847d87854ed088983cbbdc5e43", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/d356b05b228975847d87854ed088983cbbdc5e43", "committedDate": "2020-12-07T13:24:26Z", "message": "Address code review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71b570172a360afbf4a710a5ef20bef1cf2a2b41", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/71b570172a360afbf4a710a5ef20bef1cf2a2b41", "committedDate": "2020-12-07T13:24:26Z", "message": "Make the node list complete"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa8e08e69551986e0522a604deb3956a63936d09", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/fa8e08e69551986e0522a604deb3956a63936d09", "committedDate": "2020-12-07T13:24:26Z", "message": "Remove unused code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9a1e04141463e78f1a976ea90b6165268a2a710", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/f9a1e04141463e78f1a976ea90b6165268a2a710", "committedDate": "2020-12-07T13:24:26Z", "message": "Nodes need not be Comparable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e483776c84cf3f5c3cf8842ef231c84d08106714", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/e483776c84cf3f5c3cf8842ef231c84d08106714", "committedDate": "2020-12-07T13:24:26Z", "message": "Remove test that is no longer necessary"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "36f79734787f4fbfa736984cd5a51c59640939c1", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/36f79734787f4fbfa736984cd5a51c59640939c1", "committedDate": "2020-12-07T12:23:51Z", "message": "Remove test that is no longer necessary"}, "afterCommit": {"oid": "e483776c84cf3f5c3cf8842ef231c84d08106714", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/e483776c84cf3f5c3cf8842ef231c84d08106714", "committedDate": "2020-12-07T13:24:26Z", "message": "Remove test that is no longer necessary"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2MjA5Mzg0", "url": "https://github.com/kiegroup/optaplanner/pull/1064#pullrequestreview-546209384", "createdAt": "2020-12-07T14:37:53Z", "commit": {"oid": "e483776c84cf3f5c3cf8842ef231c84d08106714"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNDozNzo1NFrOIAp07A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNDozNzo1NFrOIAp07A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU1NjIwNA==", "bodyText": "Not useful anymore. We now have a better test, and that one checks the node indexes directly.", "url": "https://github.com/kiegroup/optaplanner/pull/1064#discussion_r537556204", "createdAt": "2020-12-07T14:37:54Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/test/java/org/optaplanner/core/api/score/stream/uni/UniConstraintStreamTest.java", "diffHunk": "@@ -1419,45 +1419,6 @@ public void duplicateConstraintId() {\n                 constraintStreamImplType));\n     }\n \n-    @TestTemplate\n-    public void globalNodeOrder() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e483776c84cf3f5c3cf8842ef231c84d08106714"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3MDY4NTUz", "url": "https://github.com/kiegroup/optaplanner/pull/1064#pullrequestreview-547068553", "createdAt": "2020-12-08T10:44:43Z", "commit": {"oid": "e483776c84cf3f5c3cf8842ef231c84d08106714"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMDo0NDo0M1rOIBTISw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMDo0NDo0M1rOIBTISw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODIzMjkwNw==", "bodyText": "Interesting approach by pushing that here. It's inline with the rest of what Bavet currently does, so +1.", "url": "https://github.com/kiegroup/optaplanner/pull/1064#discussion_r538232907", "createdAt": "2020-12-08T10:44:43Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/bi/BavetGroupBridgeBiConstraintStream.java", "diffHunk": "@@ -57,20 +57,23 @@ public void setGroupStream(BavetGroupBiConstraintStream<Solution_, NewA, ResultC\n \n     @Override\n     protected BavetAbstractBiNode<A, B> createNode(BavetNodeBuildPolicy<Solution_> buildPolicy,\n-            Score<?> constraintWeight, int nodeOrder, BavetAbstractBiNode<A, B> parentNode) {\n-        BavetGroupBiNode<NewA, ResultContainer_, NewB> groupNode = groupStream.createNodeChain(buildPolicy, constraintWeight,\n-                nodeOrder + 1, null);\n-        BavetGroupBridgeBiNode<A, B, NewA, ResultContainer_, NewB> node = new BavetGroupBridgeBiNode<>(\n-                buildPolicy.getSession(), nodeOrder, parentNode, groupKeyMapping, collector, groupNode);\n-        return node;\n+            Score<?> constraintWeight, BavetAbstractBiNode<A, B> parentNode) {\n+        return new BavetGroupBridgeBiNode<>(buildPolicy.getSession(), buildPolicy.nextNodeIndex(), parentNode,\n+                groupKeyMapping, collector);\n     }\n \n     @Override\n-    protected void createChildNodeChains(BavetNodeBuildPolicy<Solution_> buildPolicy, Score<?> constraintWeight, int nodeOrder,\n+    protected void createChildNodeChains(BavetNodeBuildPolicy<Solution_> buildPolicy, Score<?> constraintWeight,\n             BavetAbstractBiNode<A, B> node) {\n         if (!childStreamList.isEmpty()) {\n             throw new IllegalStateException(\"Impossible state: the stream (\" + this\n                     + \") has an non-empty childStreamList (\" + childStreamList + \") but it's a groupBy bridge.\");\n         }\n+        BavetGroupBiNode<NewA, ResultContainer_, NewB> groupNode = groupStream.createNodeChain(buildPolicy,\n+                constraintWeight, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e483776c84cf3f5c3cf8842ef231c84d08106714"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3MDc0NTcy", "url": "https://github.com/kiegroup/optaplanner/pull/1064#pullrequestreview-547074572", "createdAt": "2020-12-08T10:48:56Z", "commit": {"oid": "e483776c84cf3f5c3cf8842ef231c84d08106714"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMDo0ODo1NlrOIBTTqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMDo0ODo1NlrOIBTTqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODIzNTgxOQ==", "bodyText": "Adding that zero is strange. Use at least 16 (or better yet the default): the memory cost of 16 is triviial, especially as only a handfully policy elements will exist, while the cost of sharing 9 nodes will be quite significant already.\nBy the way, due to from() filtering on initialized variables only, there is pretty much always node sharing.\nSo my advise is to remove this line's change.", "url": "https://github.com/kiegroup/optaplanner/pull/1064#discussion_r538235819", "createdAt": "2020-12-08T10:48:56Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/common/BavetNodeBuildPolicy.java", "diffHunk": "@@ -16,39 +16,39 @@\n \n package org.optaplanner.core.impl.score.stream.bavet.common;\n \n+import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.HashMap;\n import java.util.LinkedHashMap;\n+import java.util.List;\n import java.util.Map;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n import org.optaplanner.core.impl.score.stream.bavet.BavetConstraintSession;\n \n public class BavetNodeBuildPolicy<Solution_> {\n \n     private final BavetConstraintSession session;\n \n-    private int nodeOrderMaximum = 0;\n+    private int nextNodeIndex = 0;\n     private Map<String, BavetScoringNode> constraintIdToScoringNodeMap;\n     private Map<BavetJoinConstraintStream<Solution_>, BavetJoinBridgeNode> joinConstraintStreamToJoinBridgeNodeMap =\n             new HashMap<>();\n-    private Map<BavetAbstractNode, BavetAbstractNode> sharableNodeMap = new HashMap<>();\n+    private Map<BavetAbstractNode, BavetAbstractNode> sharableNodeMap = new HashMap<>(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e483776c84cf3f5c3cf8842ef231c84d08106714"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3MDc5Mzgx", "url": "https://github.com/kiegroup/optaplanner/pull/1064#pullrequestreview-547079381", "createdAt": "2020-12-08T10:51:45Z", "commit": {"oid": "e483776c84cf3f5c3cf8842ef231c84d08106714"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMDo1MTo0NVrOIBTbMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMDo1MTo0NVrOIBTbMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODIzNzc0NQ==", "bodyText": "Why is the distinct needed on the nodes? I'd argue if they are not distinct, then node sharing is broken and we want it to fail fast.", "url": "https://github.com/kiegroup/optaplanner/pull/1064#discussion_r538237745", "createdAt": "2020-12-08T10:51:45Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/common/BavetNodeBuildPolicy.java", "diffHunk": "@@ -77,4 +77,22 @@ public int getNodeOrderMaximum() {\n         return joinConstraintStreamToJoinBridgeNodeMap;\n     }\n \n+    public List<BavetNode> getCreatedNodes() {\n+        // Make a sequential list of unique nodes.\n+        SortedMap<Integer, BavetNode> nodeIndexToNodeMap = Stream.concat(sharableNodeMap.keySet().stream(),\n+                constraintIdToScoringNodeMap.values().stream())\n+                .distinct()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e483776c84cf3f5c3cf8842ef231c84d08106714"}, "originalPosition": 78}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3MDgxNzU1", "url": "https://github.com/kiegroup/optaplanner/pull/1064#pullrequestreview-547081755", "createdAt": "2020-12-08T10:52:57Z", "commit": {"oid": "e483776c84cf3f5c3cf8842ef231c84d08106714"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMDo1Mjo1N1rOIBTeiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMDo1Mjo1N1rOIBTeiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODIzODYwMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                throw new IllegalStateException(\"Impossible state: nodes (\" + a + \") and (\" + b + \") share index.\");\n          \n          \n            \n                                throw new IllegalStateException(\"Impossible state: 2 nodes (\" + a + \", \" + b + \") share the same index (\" + a.getNodeIndex() + \").\");", "url": "https://github.com/kiegroup/optaplanner/pull/1064#discussion_r538238603", "createdAt": "2020-12-08T10:52:57Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/common/BavetNodeBuildPolicy.java", "diffHunk": "@@ -77,4 +77,22 @@ public int getNodeOrderMaximum() {\n         return joinConstraintStreamToJoinBridgeNodeMap;\n     }\n \n+    public List<BavetNode> getCreatedNodes() {\n+        // Make a sequential list of unique nodes.\n+        SortedMap<Integer, BavetNode> nodeIndexToNodeMap = Stream.concat(sharableNodeMap.keySet().stream(),\n+                constraintIdToScoringNodeMap.values().stream())\n+                .distinct()\n+                .collect(Collectors.toMap(k -> k.getNodeIndex(), Function.identity(), (a, b) -> {\n+                    throw new IllegalStateException(\"Impossible state: nodes (\" + a + \") and (\" + b + \") share index.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e483776c84cf3f5c3cf8842ef231c84d08106714"}, "originalPosition": 80}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3MDk5MzU0", "url": "https://github.com/kiegroup/optaplanner/pull/1064#pullrequestreview-547099354", "createdAt": "2020-12-08T11:02:49Z", "commit": {"oid": "e483776c84cf3f5c3cf8842ef231c84d08106714"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4d5d3ca1adfc00bfe1495e2121e83fc76555fe5", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/d4d5d3ca1adfc00bfe1495e2121e83fc76555fe5", "committedDate": "2020-12-08T11:07:46Z", "message": "Update optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/common/BavetNodeBuildPolicy.java\n\nCo-authored-by: Geoffrey De Smet <gds.geoffrey.de.smet@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b496437ad158f4ae76af1f3602a74da64435f92b", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/b496437ad158f4ae76af1f3602a74da64435f92b", "committedDate": "2020-12-08T11:09:13Z", "message": "Address code review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64a07396c3afb79ad49c51513de8c2084bd8d9a0", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/64a07396c3afb79ad49c51513de8c2084bd8d9a0", "committedDate": "2020-12-08T11:27:46Z", "message": "Fix bug"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3152, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}