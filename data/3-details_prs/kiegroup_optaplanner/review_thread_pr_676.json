{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNDgyNzcy", "number": 676, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjowNDowNlrODeEgYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjowNDowNlrODeEgYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODU3Njk5OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/test/java/org/optaplanner/core/api/solver/SolverManagerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjowNDowNlrOFnB_lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjoxNTozMVrOFnCXaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ3MTQ0Ng==", "bodyText": "Are you sure you want to bring the timeouts down to 1 minute isntead of 10 minutes? I remember we set it to 10 minutes for good reasons, even though the slowest test only took 10 seconds on our machines back then.", "url": "https://github.com/kiegroup/optaplanner/pull/676#discussion_r376471446", "createdAt": "2020-02-07T16:04:06Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/test/java/org/optaplanner/core/api/solver/SolverManagerTest.java", "diffHunk": "@@ -47,31 +57,35 @@\n \n public class SolverManagerTest {\n \n-    @Test(timeout = 600_000)\n+    @Test(timeout = 60_000)\n     public void solveBatch_2InParallel() throws ExecutionException, InterruptedException {\n-        CyclicBarrier barrier = new CyclicBarrier(2);\n         final SolverConfig solverConfig = PlannerTestUtils.buildSolverConfig(TestdataSolution.class, TestdataEntity.class)\n-                .withPhases(new CustomPhaseConfig().withCustomPhaseCommands(\n-                        scoreDirector -> {\n-                            try {\n-                                barrier.await();\n-                            } catch (InterruptedException | BrokenBarrierException e) {\n-                                fail(\"Cyclic barrier failed.\");\n-                            }\n-                        }), new ConstructionHeuristicPhaseConfig());\n+                .withPhases(createPhaseWithConcurrentSolvingStart(2), new ConstructionHeuristicPhaseConfig());\n         SolverManager<TestdataSolution, Long> solverManager = SolverManager.create(\n                 solverConfig, new SolverManagerConfig().withParallelSolverCount(\"2\"));\n \n         SolverJob<TestdataSolution, Long> solverJob1 = solverManager.solve(1L,\n-                PlannerTestUtils.generateTestdataSolution(\"s1\"));\n+                                                                           PlannerTestUtils.generateTestdataSolution(\"s1\"));\n         SolverJob<TestdataSolution, Long> solverJob2 = solverManager.solve(2L,\n-                PlannerTestUtils.generateTestdataSolution(\"s2\"));\n+                                                                           PlannerTestUtils.generateTestdataSolution(\"s2\"));\n \n         assertSolutionInitialized(solverJob1.getFinalBestSolution());\n         assertSolutionInitialized(solverJob2.getFinalBestSolution());\n     }\n \n-    @Test(timeout = 600_000)\n+    private CustomPhaseConfig createPhaseWithConcurrentSolvingStart(int barrierPartiesCount) {\n+        CyclicBarrier barrier = new CyclicBarrier(barrierPartiesCount);\n+        return new CustomPhaseConfig().withCustomPhaseCommands(\n+                scoreDirector -> {\n+                    try {\n+                        barrier.await();\n+                    } catch (InterruptedException | BrokenBarrierException e) {\n+                        fail(\"Cyclic barrier failed.\");\n+                    }\n+                });\n+    }\n+\n+    @Test(timeout = 60_000)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4cb00b67bb8dbf5db1a9948a14d3fb54dceeae4"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ3NzU0Nw==", "bodyText": "Each test runs below 1 sec, I don't believe the CI environment will be > 60 times slower. If some test runs longer than 1 minute, I prefer to know about it (by seeing it failing on timeout).", "url": "https://github.com/kiegroup/optaplanner/pull/676#discussion_r376477547", "createdAt": "2020-02-07T16:15:31Z", "author": {"login": "rsynek"}, "path": "optaplanner-core/src/test/java/org/optaplanner/core/api/solver/SolverManagerTest.java", "diffHunk": "@@ -47,31 +57,35 @@\n \n public class SolverManagerTest {\n \n-    @Test(timeout = 600_000)\n+    @Test(timeout = 60_000)\n     public void solveBatch_2InParallel() throws ExecutionException, InterruptedException {\n-        CyclicBarrier barrier = new CyclicBarrier(2);\n         final SolverConfig solverConfig = PlannerTestUtils.buildSolverConfig(TestdataSolution.class, TestdataEntity.class)\n-                .withPhases(new CustomPhaseConfig().withCustomPhaseCommands(\n-                        scoreDirector -> {\n-                            try {\n-                                barrier.await();\n-                            } catch (InterruptedException | BrokenBarrierException e) {\n-                                fail(\"Cyclic barrier failed.\");\n-                            }\n-                        }), new ConstructionHeuristicPhaseConfig());\n+                .withPhases(createPhaseWithConcurrentSolvingStart(2), new ConstructionHeuristicPhaseConfig());\n         SolverManager<TestdataSolution, Long> solverManager = SolverManager.create(\n                 solverConfig, new SolverManagerConfig().withParallelSolverCount(\"2\"));\n \n         SolverJob<TestdataSolution, Long> solverJob1 = solverManager.solve(1L,\n-                PlannerTestUtils.generateTestdataSolution(\"s1\"));\n+                                                                           PlannerTestUtils.generateTestdataSolution(\"s1\"));\n         SolverJob<TestdataSolution, Long> solverJob2 = solverManager.solve(2L,\n-                PlannerTestUtils.generateTestdataSolution(\"s2\"));\n+                                                                           PlannerTestUtils.generateTestdataSolution(\"s2\"));\n \n         assertSolutionInitialized(solverJob1.getFinalBestSolution());\n         assertSolutionInitialized(solverJob2.getFinalBestSolution());\n     }\n \n-    @Test(timeout = 600_000)\n+    private CustomPhaseConfig createPhaseWithConcurrentSolvingStart(int barrierPartiesCount) {\n+        CyclicBarrier barrier = new CyclicBarrier(barrierPartiesCount);\n+        return new CustomPhaseConfig().withCustomPhaseCommands(\n+                scoreDirector -> {\n+                    try {\n+                        barrier.await();\n+                    } catch (InterruptedException | BrokenBarrierException e) {\n+                        fail(\"Cyclic barrier failed.\");\n+                    }\n+                });\n+    }\n+\n+    @Test(timeout = 60_000)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ3MTQ0Ng=="}, "originalCommit": {"oid": "f4cb00b67bb8dbf5db1a9948a14d3fb54dceeae4"}, "originalPosition": 81}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4606, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}