{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczMDI5MjE3", "number": 678, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNDoxNzo1NFrODeeCtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNDoyNjo0MVrODeeQOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMjc2MDg0OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/test/java/org/optaplanner/core/api/score/stream/JoinersTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNDoxNzo1NFrOFnnptw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNDoxNzo1NFrOFnnptw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA4ODQzOQ==", "bodyText": "Code style: I think that * imports are generally less preferable. Is it intentional here or is it an accident caused by IDE?", "url": "https://github.com/kiegroup/optaplanner/pull/678#discussion_r377088439", "createdAt": "2020-02-10T14:17:54Z", "author": {"login": "rsynek"}, "path": "optaplanner-core/src/test/java/org/optaplanner/core/api/score/stream/JoinersTest.java", "diffHunk": "@@ -0,0 +1,349 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.api.score.stream;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+\n+import org.junit.Test;\n+import org.optaplanner.core.api.function.QuadFunction;\n+import org.optaplanner.core.api.function.TriFunction;\n+import org.optaplanner.core.impl.score.stream.bi.AbstractBiJoiner;\n+import org.optaplanner.core.impl.score.stream.penta.AbstractPentaJoiner;\n+import org.optaplanner.core.impl.score.stream.quad.AbstractQuadJoiner;\n+import org.optaplanner.core.impl.score.stream.tri.AbstractTriJoiner;\n+\n+import static java.math.BigInteger.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82aad3ce8fd21e3f6075c942a55fb72f31c9ad48"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMjc4OTkzOnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/common/AbstractJoiner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNDoyNToxMFrOFnn7Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNDoyNToxMFrOFnn7Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA5MjkxNQ==", "bodyText": "This presumes that that we'll never do this:\nBi<A,B>.join(Bi<C,D>)\nI don't want to close off that opportunity.\n-1 to abstract the Right generatic type here...", "url": "https://github.com/kiegroup/optaplanner/pull/678#discussion_r377092915", "createdAt": "2020-02-10T14:25:10Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/common/AbstractJoiner.java", "diffHunk": "@@ -16,8 +16,30 @@\n \n package org.optaplanner.core.impl.score.stream.common;\n \n-public abstract class AbstractJoiner {\n+import java.util.Arrays;\n+import java.util.function.Function;\n+import java.util.stream.IntStream;\n+\n+public abstract class AbstractJoiner<Right> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82aad3ce8fd21e3f6075c942a55fb72f31c9ad48"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMjc5NTQ2OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bi/AbstractBiJoiner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNDoyNjo0MVrOFnn-pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNTowMzoxN1rOFnpYHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA5Mzc5OA==", "bodyText": "You can probably use f::apply (one less wrapper lambda)", "url": "https://github.com/kiegroup/optaplanner/pull/678#discussion_r377093798", "createdAt": "2020-02-10T14:26:41Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bi/AbstractBiJoiner.java", "diffHunk": "@@ -75,11 +77,14 @@ public boolean matches(A a, B b) {\n \n     public abstract Function<A, Object> getLeftMapping(int index);\n \n-    public abstract Function<A, Object[]> getLeftCombinedMapping();\n-\n-    public abstract Function<B, Object> getRightMapping(int index);\n-\n-    public abstract Function<B, Object[]> getRightCombinedMapping();\n+    public Function<A, Object[]> getLeftCombinedMapping() {\n+        Function<A, Object>[] mappings = IntStream.range(0, getJoinerTypes().length)\n+                .mapToObj(this::getLeftMapping)\n+                .toArray(Function[]::new);\n+        return (A a) -> Arrays.stream(mappings)\n+                .map(f -> f.apply(a))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82aad3ce8fd21e3f6075c942a55fb72f31c9ad48"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzExNjcwMA==", "bodyText": "Not in this case. It would work if I was trying to get rid of f, but here I need to pass a to f and therefore I need to do it like this.", "url": "https://github.com/kiegroup/optaplanner/pull/678#discussion_r377116700", "createdAt": "2020-02-10T15:03:17Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bi/AbstractBiJoiner.java", "diffHunk": "@@ -75,11 +77,14 @@ public boolean matches(A a, B b) {\n \n     public abstract Function<A, Object> getLeftMapping(int index);\n \n-    public abstract Function<A, Object[]> getLeftCombinedMapping();\n-\n-    public abstract Function<B, Object> getRightMapping(int index);\n-\n-    public abstract Function<B, Object[]> getRightCombinedMapping();\n+    public Function<A, Object[]> getLeftCombinedMapping() {\n+        Function<A, Object>[] mappings = IntStream.range(0, getJoinerTypes().length)\n+                .mapToObj(this::getLeftMapping)\n+                .toArray(Function[]::new);\n+        return (A a) -> Arrays.stream(mappings)\n+                .map(f -> f.apply(a))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA5Mzc5OA=="}, "originalCommit": {"oid": "82aad3ce8fd21e3f6075c942a55fb72f31c9ad48"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4608, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}