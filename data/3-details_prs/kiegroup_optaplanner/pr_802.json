{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1Mzg4ODU3", "number": 802, "title": "PLANNER-2021 Don't use JUnit 4's Assert class anymore", "bodyText": "Manual review of this PR is not practical. I suggest we merge this when:\n\n CI shows no failures and\n Sonar shows no drop in test coverage.\n Maven build passes even if kie-parent doesn't have junit dependency (needs some local building) (Jiri's suggestion).", "createdAt": "2020-06-16T18:13:41Z", "url": "https://github.com/kiegroup/optaplanner/pull/802", "merged": true, "mergeCommit": {"oid": "3d6deb85a65976c50ab98ccc6bf1dce0a1ad650f"}, "closed": true, "closedAt": "2020-06-17T15:28:49Z", "author": {"login": "triceo"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcryiVhgH2gAyNDM1Mzg4ODU3OmNiNWMwNWQyNGFkZDAzMmVmMTBkNWU3ZjM1YTllZWNmMzJhYjQ0YWQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcsLbEGAFqTQzMjUxMDc4OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "cb5c05d24add032ef10d5e7f35a9eecf32ab44ad", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/cb5c05d24add032ef10d5e7f35a9eecf32ab44ad", "committedDate": "2020-06-16T10:17:35Z", "message": "Replace JUnit 4 assertions by AssertJ in optaplanner-benchmark"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a94093f881e81261162cf4e0605cbf69eaefa16", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/8a94093f881e81261162cf4e0605cbf69eaefa16", "committedDate": "2020-06-16T10:25:00Z", "message": "Replace JUnit 4 assertions by AssertJ in springboot"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39cd41cf3b371c2c5a301a01bdeadf3d19617057", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/39cd41cf3b371c2c5a301a01bdeadf3d19617057", "committedDate": "2020-06-16T10:41:26Z", "message": "Replace JUnit 4 assertions by AssertJ in persistence"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27de29e9986e7e827c2b7741a8c5739942b786b6", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/27de29e9986e7e827c2b7741a8c5739942b786b6", "committedDate": "2020-06-16T11:12:00Z", "message": "Replace JUnit 4 assertions by AssertJ in examples"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f34215ea4410a4da533768ad7f29a0461687403", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/9f34215ea4410a4da533768ad7f29a0461687403", "committedDate": "2020-06-16T13:37:12Z", "message": "WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88d6a688e9c6f9711ede0db39b41532156561909", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/88d6a688e9c6f9711ede0db39b41532156561909", "committedDate": "2020-06-16T17:54:16Z", "message": "Conversion done"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e00298d27c62ddac85b4d008a1265f8773e98cf4", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/e00298d27c62ddac85b4d008a1265f8773e98cf4", "committedDate": "2020-06-16T18:14:53Z", "message": "Inline"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b12029655171c1168f1a9a0671a2d668b0feae56", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/b12029655171c1168f1a9a0671a2d668b0feae56", "committedDate": "2020-06-16T18:11:19Z", "message": "Inline"}, "afterCommit": {"oid": "e00298d27c62ddac85b4d008a1265f8773e98cf4", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/e00298d27c62ddac85b4d008a1265f8773e98cf4", "committedDate": "2020-06-16T18:14:53Z", "message": "Inline"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99241f9259f345a0ccadd4275275237dc2a4e0d5", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/99241f9259f345a0ccadd4275275237dc2a4e0d5", "committedDate": "2020-06-17T07:09:15Z", "message": "Fix leftovers"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMTMzMzMz", "url": "https://github.com/kiegroup/optaplanner/pull/802#pullrequestreview-432133333", "createdAt": "2020-06-17T07:34:57Z", "commit": {"oid": "99241f9259f345a0ccadd4275275237dc2a4e0d5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNzozNDo1N1rOGk5VUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMDowNToyNVrOGk-86Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0MTI2Nw==", "bodyText": "Add static import for offset(). Improves readability. It's the same approach as with Joiners.*.", "url": "https://github.com/kiegroup/optaplanner/pull/802#discussion_r441341267", "createdAt": "2020-06-17T07:34:57Z", "author": {"login": "yurloc"}, "path": "optaplanner-benchmark/src/test/java/org/optaplanner/benchmark/impl/measurement/ScoreDifferencePercentageTest.java", "diffHunk": "@@ -41,60 +42,60 @@ public void calculateScoreDifferencePercentage() {\n         SimpleScore score2 = SimpleScore.of(-100);\n         ScoreDifferencePercentage scoreDifferencePercentage = ScoreDifferencePercentage\n                 .calculateScoreDifferencePercentage(score1, score2);\n-        assertEquals(0.0, scoreDifferencePercentage.getPercentageLevels()[0], tolerance);\n+        assertThat(scoreDifferencePercentage.getPercentageLevels()[0]).isEqualTo(0.0, Offset.offset(tolerance));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99241f9259f345a0ccadd4275275237dc2a4e0d5"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0MjcyMQ==", "bodyText": "Maybe even?\nprivate static final Offset tolerance = ...;", "url": "https://github.com/kiegroup/optaplanner/pull/802#discussion_r441342721", "createdAt": "2020-06-17T07:37:25Z", "author": {"login": "yurloc"}, "path": "optaplanner-benchmark/src/test/java/org/optaplanner/benchmark/impl/measurement/ScoreDifferencePercentageTest.java", "diffHunk": "@@ -41,60 +42,60 @@ public void calculateScoreDifferencePercentage() {\n         SimpleScore score2 = SimpleScore.of(-100);\n         ScoreDifferencePercentage scoreDifferencePercentage = ScoreDifferencePercentage\n                 .calculateScoreDifferencePercentage(score1, score2);\n-        assertEquals(0.0, scoreDifferencePercentage.getPercentageLevels()[0], tolerance);\n+        assertThat(scoreDifferencePercentage.getPercentageLevels()[0]).isEqualTo(0.0, Offset.offset(tolerance));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0MTI2Nw=="}, "originalCommit": {"oid": "99241f9259f345a0ccadd4275275237dc2a4e0d5"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM1Nzc2NQ==", "bodyText": "Redundant cast.", "url": "https://github.com/kiegroup/optaplanner/pull/802#discussion_r441357765", "createdAt": "2020-06-17T08:03:20Z", "author": {"login": "yurloc"}, "path": "optaplanner-core/src/test/java/org/optaplanner/core/impl/domain/solution/AbstractSolutionTest.java", "diffHunk": "@@ -61,7 +61,7 @@ public void getProblemFacts() {\n         solution.setSingleEntity(singleEntity);\n         SimpleScore score = SimpleScore.of(-10);\n         solution.setScore(score);\n-        assertCollectionContainsExactly(solution.getProblemFactList(), singleValue, v1, v2, v3);\n+        assertThat((Collection<Object>) solution.getProblemFactList()).containsExactly(singleValue, v1, v2, v3);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99241f9259f345a0ccadd4275275237dc2a4e0d5"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM1Nzg1MA==", "bodyText": "Redundant cast.", "url": "https://github.com/kiegroup/optaplanner/pull/802#discussion_r441357850", "createdAt": "2020-06-17T08:03:29Z", "author": {"login": "yurloc"}, "path": "optaplanner-core/src/test/java/org/optaplanner/core/impl/domain/solution/AbstractSolutionTest.java", "diffHunk": "@@ -76,7 +76,7 @@ public void getProblemFactsWithNullField() {\n         solution.setEntityList(null);\n         solution.setSingleEntity(null);\n         solution.setScore(null);\n-        assertCollectionContainsExactly(solution.getProblemFactList(), v1, v2, v3);\n+        assertThat((Collection<Object>) solution.getProblemFactList()).containsExactly(v1, v2, v3);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99241f9259f345a0ccadd4275275237dc2a4e0d5"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQyOTc1Nw==", "bodyText": "This cast doesn't make sense. Casting the \"actual\" argument to SimpleScore would make sense.", "url": "https://github.com/kiegroup/optaplanner/pull/802#discussion_r441429757", "createdAt": "2020-06-17T09:59:17Z", "author": {"login": "yurloc"}, "path": "optaplanner-core/src/test/java/org/optaplanner/core/api/score/constraint/ConstraintMatchTotalTest.java", "diffHunk": "@@ -32,22 +32,22 @@ public void getScoreTotal() {\n         TestdataEntity e2 = new TestdataEntity(\"e2\");\n         TestdataEntity e3 = new TestdataEntity(\"e3\");\n         ConstraintMatchTotal constraintMatchTotal = new ConstraintMatchTotal(\"package1\", \"constraint1\", SimpleScore.ZERO);\n-        assertEquals(SimpleScore.ZERO, constraintMatchTotal.getScore());\n+        assertThat(constraintMatchTotal.getScore()).isEqualTo((org.optaplanner.core.api.score.Score) SimpleScore.ZERO);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99241f9259f345a0ccadd4275275237dc2a4e0d5"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQzMDI0MQ==", "bodyText": "Wrong cast again. See also children of AbstractConstraintStreamTest.", "url": "https://github.com/kiegroup/optaplanner/pull/802#discussion_r441430241", "createdAt": "2020-06-17T10:00:08Z", "author": {"login": "yurloc"}, "path": "optaplanner-core/src/test/java/org/optaplanner/core/api/score/constraint/IndictmentTest.java", "diffHunk": "@@ -32,28 +32,28 @@ public void getScoreTotal() {\n         TestdataEntity e2 = new TestdataEntity(\"e2\");\n         TestdataEntity e3 = new TestdataEntity(\"e3\");\n         Indictment indictment = new Indictment(e1, SimpleScore.ZERO);\n-        assertEquals(SimpleScore.ZERO, indictment.getScore());\n+        assertThat(indictment.getScore()).isEqualTo((org.optaplanner.core.api.score.Score) SimpleScore.ZERO);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99241f9259f345a0ccadd4275275237dc2a4e0d5"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQzMjMwOA==", "bodyText": "Redundant cast. It seems this is done automatically by your IDE. Please check if you can avoid that.", "url": "https://github.com/kiegroup/optaplanner/pull/802#discussion_r441432308", "createdAt": "2020-06-17T10:03:40Z", "author": {"login": "yurloc"}, "path": "optaplanner-core/src/test/java/org/optaplanner/core/config/heuristic/selector/entity/EntitySelectorConfigTest.java", "diffHunk": "@@ -39,9 +37,11 @@ public void phaseOriginal() {\n         EntitySelector entitySelector = entitySelectorConfig.buildEntitySelector(\n                 buildHeuristicConfigPolicy(),\n                 SelectionCacheType.JUST_IN_TIME, SelectionOrder.RANDOM);\n-        assertInstanceOf(FromSolutionEntitySelector.class, entitySelector);\n-        assertNotInstanceOf(ShufflingEntitySelector.class, entitySelector);\n-        assertEquals(SelectionCacheType.PHASE, entitySelector.getCacheType());\n+        assertThat((Object) entitySelector)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99241f9259f345a0ccadd4275275237dc2a4e0d5"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQzMzMyMQ==", "bodyText": "Why this if?", "url": "https://github.com/kiegroup/optaplanner/pull/802#discussion_r441433321", "createdAt": "2020-06-17T10:05:25Z", "author": {"login": "yurloc"}, "path": "optaplanner-core/src/test/java/org/optaplanner/core/config/heuristic/selector/move/MoveSelectorConfigTest.java", "diffHunk": "@@ -53,8 +50,12 @@ public AssertingMoveSelectorConfig(MoveSelector baseMoveSelector,\n         protected MoveSelector buildBaseMoveSelector(\n                 HeuristicConfigPolicy configPolicy,\n                 SelectionCacheType minimumCacheType, boolean randomSelection) {\n-            assertEquals(expectedMinimumCacheType, minimumCacheType);\n-            assertEquals(expectedRandomSelection, randomSelection);\n+            assertThat(minimumCacheType).isEqualTo(expectedMinimumCacheType);\n+            if (expectedRandomSelection) {\n+                assertThat(randomSelection).isTrue();\n+            } else {\n+                assertThat(randomSelection).isFalse();\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99241f9259f345a0ccadd4275275237dc2a4e0d5"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMjU1NDAx", "url": "https://github.com/kiegroup/optaplanner/pull/802#pullrequestreview-432255401", "createdAt": "2020-06-17T10:10:34Z", "commit": {"oid": "99241f9259f345a0ccadd4275275237dc2a4e0d5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMDoxMDozNVrOGk_IVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMDoxMDozNVrOGk_IVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQzNjI0Nw==", "bodyText": "Redundant cast.", "url": "https://github.com/kiegroup/optaplanner/pull/802#discussion_r441436247", "createdAt": "2020-06-17T10:10:35Z", "author": {"login": "yurloc"}, "path": "optaplanner-core/src/test/java/org/optaplanner/core/impl/domain/constraintweight/descriptor/ConstraintWeightDescriptorTest.java", "diffHunk": "@@ -55,10 +53,12 @@ public void extractionFunction() {\n         constraintConfiguration.setSecondWeight(SimpleScore.of(7));\n         solution.setConstraintConfiguration(constraintConfiguration);\n \n-        assertSame(constraintConfiguration,\n-                solutionDescriptor.getConstraintConfigurationMemberAccessor().executeGetter(solution));\n-        assertEquals(SimpleScore.ZERO, firstWeightDescriptor.createExtractor().apply(solution));\n-        assertEquals(SimpleScore.of(7), secondWeightDescriptor.createExtractor().apply(solution));\n+        assertThat(solutionDescriptor.getConstraintConfigurationMemberAccessor().executeGetter(solution))\n+                .isSameAs(constraintConfiguration);\n+        assertThat(firstWeightDescriptor.createExtractor().apply(solution)).isEqualTo(\n+                (org.optaplanner.core.api.score.Score<? extends org.optaplanner.core.api.score.Score>) SimpleScore.ZERO);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99241f9259f345a0ccadd4275275237dc2a4e0d5"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMjU2Nzk2", "url": "https://github.com/kiegroup/optaplanner/pull/802#pullrequestreview-432256796", "createdAt": "2020-06-17T10:12:26Z", "commit": {"oid": "99241f9259f345a0ccadd4275275237dc2a4e0d5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMDoxMjoyNlrOGk_MtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMDoxMjoyNlrOGk_MtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQzNzM2NA==", "bodyText": "Redundant cast.", "url": "https://github.com/kiegroup/optaplanner/pull/802#discussion_r441437364", "createdAt": "2020-06-17T10:12:26Z", "author": {"login": "yurloc"}, "path": "optaplanner-core/src/test/java/org/optaplanner/core/config/score/director/ScoreDirectorFactoryConfigTest.java", "diffHunk": "@@ -184,13 +181,13 @@ public SimpleScore calculateScore() {\n     @Test\n     public void testGenerateDroolsTestOption() {\n         ScoreDirectorFactoryConfig config = new ScoreDirectorFactoryConfig();\n-        assertNull(config.isGenerateDroolsTestOnError());\n+        assertThat(config.isGenerateDroolsTestOnError()).isNull();\n         config.setGenerateDroolsTestOnError(true);\n-        assertTrue(config.isGenerateDroolsTestOnError());\n+        assertThat((boolean) config.isGenerateDroolsTestOnError()).isTrue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99241f9259f345a0ccadd4275275237dc2a4e0d5"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMjcwNTIz", "url": "https://github.com/kiegroup/optaplanner/pull/802#pullrequestreview-432270523", "createdAt": "2020-06-17T10:32:28Z", "commit": {"oid": "99241f9259f345a0ccadd4275275237dc2a4e0d5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMDozMjoyOFrOGk_2Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMDozMjoyOFrOGk_2Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ0Nzk5NA==", "bodyText": "Is this if intentional?", "url": "https://github.com/kiegroup/optaplanner/pull/802#discussion_r441447994", "createdAt": "2020-06-17T10:32:28Z", "author": {"login": "yurloc"}, "path": "optaplanner-core/src/test/java/org/optaplanner/core/impl/solver/thread/OrderByMoveIndexBlockingQueueTest.java", "diffHunk": "@@ -170,19 +169,24 @@ public void addExceptionIsNotEatenIfNextStepStartsBeforeTaken() throws Interrupt\n             queue.startNextStep(1);\n             fail(\"There was no RuntimeException thrown.\");\n         } catch (RuntimeException e) {\n-            assertSame(exception, e.getCause());\n+            assertThat(e.getCause()).isSameAs((Throwable) exception);\n         }\n     }\n \n     private void assertResult(String moveCode, int score, OrderByMoveIndexBlockingQueue.MoveResult<TestdataSolution> result) {\n         assertCode(moveCode, result.getMove());\n-        assertEquals(SimpleScore.of(score), result.getScore());\n+        assertThat(result.getScore()).isEqualTo((org.optaplanner.core.api.score.Score) SimpleScore.of(score));\n     }\n \n     private void assertResult(String moveCode, boolean doable,\n             OrderByMoveIndexBlockingQueue.MoveResult<TestdataSolution> result) {\n         assertCode(moveCode, result.getMove());\n-        assertEquals(doable, result.isMoveDoable());\n+        boolean y = result.isMoveDoable();\n+        if (doable) {\n+            assertThat(y).isTrue();\n+        } else {\n+            assertThat(y).isFalse();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99241f9259f345a0ccadd4275275237dc2a4e0d5"}, "originalPosition": 53}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "636003f6c3f8671fd890e949a8cda48a5bc4cc7c", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/636003f6c3f8671fd890e949a8cda48a5bc4cc7c", "committedDate": "2020-06-17T10:33:50Z", "message": "Remove some unnecessary casts"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMjcyMTMy", "url": "https://github.com/kiegroup/optaplanner/pull/802#pullrequestreview-432272132", "createdAt": "2020-06-17T10:34:45Z", "commit": {"oid": "99241f9259f345a0ccadd4275275237dc2a4e0d5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMDozNDo0NVrOGk_6vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMDozNDo0NVrOGk_6vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ0OTE0OA==", "bodyText": "as() needs to go before assertions, otherwise it's unreachable.", "url": "https://github.com/kiegroup/optaplanner/pull/802#discussion_r441449148", "createdAt": "2020-06-17T10:34:45Z", "author": {"login": "yurloc"}, "path": "optaplanner-examples/src/test/java/org/optaplanner/examples/common/app/SolverPerformanceTest.java", "diffHunk": "@@ -121,27 +119,28 @@ private void runSpeedTest(\n \n     private void assertScoreAndConstraintMatches(SolverFactory<Solution_> solverFactory,\n             Solution_ bestSolution, String bestScoreLimitString) {\n-        assertNotNull(bestSolution);\n+        assertThat(bestSolution).isNotNull();\n         InnerScoreDirectorFactory<Solution_> scoreDirectorFactory = (InnerScoreDirectorFactory<Solution_>) solverFactory\n                 .getScoreDirectorFactory();\n         Score bestScore = scoreDirectorFactory.getSolutionDescriptor().getScore(bestSolution);\n         ScoreDefinition scoreDefinition = scoreDirectorFactory.getScoreDefinition();\n         Score bestScoreLimit = scoreDefinition.parseScore(bestScoreLimitString);\n-        assertTrue(\"The bestScore (\" + bestScore + \") must be at least the bestScoreLimit (\" + bestScoreLimit + \").\",\n-                bestScore.compareTo(bestScoreLimit) >= 0);\n+        assertThat(bestScore)\n+                .isGreaterThanOrEqualTo(bestScoreLimit)\n+                .as(\"The bestScore (\" + bestScore + \") must be at least the bestScoreLimit (\" + bestScoreLimit + \").\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99241f9259f345a0ccadd4275275237dc2a4e0d5"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMjczMTMw", "url": "https://github.com/kiegroup/optaplanner/pull/802#pullrequestreview-432273130", "createdAt": "2020-06-17T10:36:10Z", "commit": {"oid": "99241f9259f345a0ccadd4275275237dc2a4e0d5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMDozNjoxMFrOGk_97Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMDozNjoxMFrOGk_97Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ0OTk2NQ==", "bodyText": "Committed by mistake?", "url": "https://github.com/kiegroup/optaplanner/pull/802#discussion_r441449965", "createdAt": "2020-06-17T10:36:10Z", "author": {"login": "yurloc"}, "path": "optaplanner-integration/optaplanner-spring-boot-autoconfigure/src/test/java/org/optaplanner/spring/boot/autoconfigure/OptaPlannerAutoConfigurationTest.java", "diffHunk": "@@ -131,46 +130,49 @@ public void solverProperties() {\n                 .run(context -> {\n                     SolverConfig solverConfig = context.getBean(SolverConfig.class);\n                     assertEquals(EnvironmentMode.FULL_ASSERT, solverConfig.getEnvironmentMode());\n-                    assertNotNull(context.getBean(SolverFactory.class));\n+                    assertThat(context.getBean(SolverFactory.class)).isNotNull();\n                 });\n         contextRunner\n                 .withPropertyValues(\"optaplanner.solver.daemon=true\")\n                 .run(context -> {\n                     SolverConfig solverConfig = context.getBean(SolverConfig.class);\n-                    assertTrue(solverConfig.getDaemon());\n-                    assertNotNull(context.getBean(SolverFactory.class));\n+                    assertThat(solverConfig.getDaemon()).isTrue();\n+                    assertThat(context.getBean(SolverFactory.class)).isNotNull();\n                 });\n         contextRunner\n                 .withPropertyValues(\"optaplanner.solver.move-thread-count=2\")\n                 .run(context -> {\n                     SolverConfig solverConfig = context.getBean(SolverConfig.class);\n-                    assertEquals(\"2\", solverConfig.getMoveThreadCount());\n-                    assertNotNull(context.getBean(SolverFactory.class));\n+                    assertThat(solverConfig.getMoveThreadCount()).isEqualTo(\"2\");\n+                    assertThat(context.getBean(SolverFactory.class)).isNotNull();\n                 });\n     }\n \n+    private void assertEquals(EnvironmentMode fullAssert, EnvironmentMode environmentMode) {\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99241f9259f345a0ccadd4275275237dc2a4e0d5"}, "originalPosition": 127}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0127a92d1fead3c333086b1bac2ceb70c6d82de6", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/0127a92d1fead3c333086b1bac2ceb70c6d82de6", "committedDate": "2020-06-17T10:36:10Z", "message": "More static imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3b8d7832de167dc7ac6674e199fac288ba1fb9a", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/f3b8d7832de167dc7ac6674e199fac288ba1fb9a", "committedDate": "2020-06-17T10:50:59Z", "message": "Remove some more unnecessary code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6732447d654fba0fae053d64760fb7638d7c39d0", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/6732447d654fba0fae053d64760fb7638d7c39d0", "committedDate": "2020-06-17T10:59:32Z", "message": "Remove even more unnecessary code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8980a9d63097cc567997a38b052c2feb2b761e88", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/8980a9d63097cc567997a38b052c2feb2b761e88", "committedDate": "2020-06-17T14:51:47Z", "message": "Remove JUnit 4 assumptions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyNTEwNzg4", "url": "https://github.com/kiegroup/optaplanner/pull/802#pullrequestreview-432510788", "createdAt": "2020-06-17T15:17:17Z", "commit": {"oid": "8980a9d63097cc567997a38b052c2feb2b761e88"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3289, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}