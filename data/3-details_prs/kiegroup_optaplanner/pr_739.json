{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxMzEzMzYz", "number": 739, "title": "PLANNER-1929 Constraint Verifier properly supports match weights", "bodyText": "", "createdAt": "2020-04-09T09:28:18Z", "url": "https://github.com/kiegroup/optaplanner/pull/739", "merged": true, "mergeCommit": {"oid": "1144bda8e92480890cfe31761ae7d33cbeefafc4"}, "closed": true, "closedAt": "2020-04-11T16:18:16Z", "author": {"login": "triceo"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcV5JBUAFqTM5MDYzNjM5Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcWnwxRgH2gAyNDAxMzEzMzYzOjc0ZWJjYjI2NGYzNTdmNTY4ZWNhMDIzOTliMzE2NGVhMTFiZGJmMWI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwNjM2Mzk2", "url": "https://github.com/kiegroup/optaplanner/pull/739#pullrequestreview-390636396", "createdAt": "2020-04-09T09:32:56Z", "commit": {"oid": "c76a95d9d3bac1f0f4b477d0534b25491254f647"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwOTozMjo1NlrOGDREXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwOTozMjo1NlrOGDREXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA3ODU1OQ==", "bodyText": "Public API change.\nThis is a default method, so that the interface remains 100 % backwards compatible.", "url": "https://github.com/kiegroup/optaplanner/pull/739#discussion_r406078559", "createdAt": "2020-04-09T09:32:56Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/Score.java", "diffHunk": "@@ -102,6 +102,22 @@\n      */\n     Score_ divide(double divisor);\n \n+    /**\n+     * Return a Score whose every level is a result of dividing the matching levels in this and the divisor.\n+     * When rounding is needed, it should be floored (as defined by {@link Math#floor(double)}).\n+     * <p>\n+     * If the implementation has a scale/precision, then the unspecified scale/precision of the double divisor\n+     * should have no impact on the returned scale/precision.\n+     * <p>\n+     * Allows division by zero if and only if both levels are zero, in which case the resulting level will also be zero.\n+     * Otherwise {@link ArithmeticException} is thrown.\n+     * @param divisor value by which this Score is to be divided\n+     * @return this / divisor\n+     */\n+    default Score_ divide(Score_ divisor) {\n+        throw new UnsupportedOperationException();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c76a95d9d3bac1f0f4b477d0534b25491254f647"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwNzQxMjc1", "url": "https://github.com/kiegroup/optaplanner/pull/739#pullrequestreview-390741275", "createdAt": "2020-04-09T12:20:25Z", "commit": {"oid": "0663a1725a5dcf25094d067507ac0f366133b174"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMjoyMDoyNVrOGDWSxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMjo0OTowN1rOGDXO2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE2NDE2NQ==", "bodyText": "Soft suggestion: The empty string should be a named constant.", "url": "https://github.com/kiegroup/optaplanner/pull/739#discussion_r406164165", "createdAt": "2020-04-09T12:20:25Z", "author": {"login": "yurloc"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/buildin/simple/SimpleScore.java", "diffHunk": "@@ -133,11 +133,18 @@ public SimpleScore multiply(double multiplicand) {\n \n     @Override\n     public SimpleScore divide(double divisor) {\n-        return new SimpleScore(\n-                (int) Math.floor(initScore / divisor),\n+        int newInitScore = divideInitScore(divisor);\n+        return ofUninitialized(newInitScore,\n                 (int) Math.floor(score / divisor));\n     }\n \n+    @Override\n+    public SimpleScore divide(SimpleScore divisor) {\n+        int newInitScore = divideInitScore(divisor.initScore);\n+        int newScore = divideScoreLevel(score, divisor.score, \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0663a1725a5dcf25094d067507ac0f366133b174"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE3Mjg5MQ==", "bodyText": "Given that s is a ConstraintMatchTotal the variable name seems a bit arbitrary. Is it a mistake?", "url": "https://github.com/kiegroup/optaplanner/pull/739#discussion_r406172891", "createdAt": "2020-04-09T12:36:49Z", "author": {"login": "yurloc"}, "path": "optaplanner-test/src/main/java/org/optaplanner/test/api/score/stream/SingleConstraintAssertion.java", "diffHunk": "@@ -39,9 +43,27 @@\n     }\n \n     private Number getImpact() {\n-        return constraintMatchTotalMap.values().stream()\n-                .mapToInt(ConstraintMatchTotal::getConstraintMatchCount)\n-                .sum();\n+        Score<?> zero = getParentConstraintVerifier().getConstraintStreamScoreDirectorFactory()\n+                .getScoreDefinition()\n+                .getZeroScore();\n+        if (constraintMatchTotalMap.isEmpty()) {\n+            return zero.toLevelNumbers()[0]; // Return zero in the numeric type expected by the caller.\n+        }\n+        // We do not know the matchWeight, so we need to deduce it.\n+        // Constraint matches give us a score, whose levels are in the form of (matchWeight * constraintWeight).\n+        // Here, we strip the constraintWeight.\n+        Score<?> totalMatchWeightedScore = constraintMatchTotalMap.values().stream()\n+                .map(s -> s.getScore().divide(s.getConstraintWeight()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0663a1725a5dcf25094d067507ac0f366133b174"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE3NjA0Nw==", "bodyText": "IIUC, what this does is that it fails fast if the constraint impacts different score levels with different weights, so -5medium/-5soft is valid but -1medium/-2soft fails here. Is that correct?", "url": "https://github.com/kiegroup/optaplanner/pull/739#discussion_r406176047", "createdAt": "2020-04-09T12:42:39Z", "author": {"login": "yurloc"}, "path": "optaplanner-test/src/main/java/org/optaplanner/test/api/score/stream/SingleConstraintAssertion.java", "diffHunk": "@@ -39,9 +43,27 @@\n     }\n \n     private Number getImpact() {\n-        return constraintMatchTotalMap.values().stream()\n-                .mapToInt(ConstraintMatchTotal::getConstraintMatchCount)\n-                .sum();\n+        Score<?> zero = getParentConstraintVerifier().getConstraintStreamScoreDirectorFactory()\n+                .getScoreDefinition()\n+                .getZeroScore();\n+        if (constraintMatchTotalMap.isEmpty()) {\n+            return zero.toLevelNumbers()[0]; // Return zero in the numeric type expected by the caller.\n+        }\n+        // We do not know the matchWeight, so we need to deduce it.\n+        // Constraint matches give us a score, whose levels are in the form of (matchWeight * constraintWeight).\n+        // Here, we strip the constraintWeight.\n+        Score<?> totalMatchWeightedScore = constraintMatchTotalMap.values().stream()\n+                .map(s -> s.getScore().divide(s.getConstraintWeight()))\n+                .reduce(zero, Score::add);\n+        // Each level of the resulting score now has to be the same number, the matchWeight.\n+        List<Number> matchWeightsFound = Arrays.stream(totalMatchWeightedScore.toLevelNumbers())\n+                .distinct()\n+                .collect(Collectors.toList());\n+        if (matchWeightsFound.size() != 1) {\n+            throw new IllegalStateException(\"Programming error: only one match weight should have been found (\"\n+                    + matchWeightsFound + \").\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0663a1725a5dcf25094d067507ac0f366133b174"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE3OTU0Nw==", "bodyText": "If yes, why there is such restriction? Maybe there's a technical limitation related to how Constraint Streams are implemented, that is obvious to you but it makes me ask this question. Maybe it's a general OptaPlanner limitation.\nPlease consider leaving a short explanation in the source code comment if you think that kind of information would be relevant here.", "url": "https://github.com/kiegroup/optaplanner/pull/739#discussion_r406179547", "createdAt": "2020-04-09T12:49:07Z", "author": {"login": "yurloc"}, "path": "optaplanner-test/src/main/java/org/optaplanner/test/api/score/stream/SingleConstraintAssertion.java", "diffHunk": "@@ -39,9 +43,27 @@\n     }\n \n     private Number getImpact() {\n-        return constraintMatchTotalMap.values().stream()\n-                .mapToInt(ConstraintMatchTotal::getConstraintMatchCount)\n-                .sum();\n+        Score<?> zero = getParentConstraintVerifier().getConstraintStreamScoreDirectorFactory()\n+                .getScoreDefinition()\n+                .getZeroScore();\n+        if (constraintMatchTotalMap.isEmpty()) {\n+            return zero.toLevelNumbers()[0]; // Return zero in the numeric type expected by the caller.\n+        }\n+        // We do not know the matchWeight, so we need to deduce it.\n+        // Constraint matches give us a score, whose levels are in the form of (matchWeight * constraintWeight).\n+        // Here, we strip the constraintWeight.\n+        Score<?> totalMatchWeightedScore = constraintMatchTotalMap.values().stream()\n+                .map(s -> s.getScore().divide(s.getConstraintWeight()))\n+                .reduce(zero, Score::add);\n+        // Each level of the resulting score now has to be the same number, the matchWeight.\n+        List<Number> matchWeightsFound = Arrays.stream(totalMatchWeightedScore.toLevelNumbers())\n+                .distinct()\n+                .collect(Collectors.toList());\n+        if (matchWeightsFound.size() != 1) {\n+            throw new IllegalStateException(\"Programming error: only one match weight should have been found (\"\n+                    + matchWeightsFound + \").\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE3NjA0Nw=="}, "originalCommit": {"oid": "0663a1725a5dcf25094d067507ac0f366133b174"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwODg5ODY0", "url": "https://github.com/kiegroup/optaplanner/pull/739#pullrequestreview-390889864", "createdAt": "2020-04-09T15:18:28Z", "commit": {"oid": "9e34cde34bd022aa74eaade7f8a453b870f2992c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNToxODoyOFrOGDdcnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNToxODoyOFrOGDdcnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI4MTM3Mg==", "bodyText": "Nitpicking: You have just moved one instance of SimpleScore's label to another place. What I was pointing out is that \"\" is the score label of SimpleScore and I noticed the the string literal (\"\") is used multiple times in the SimpleScore class and therefore should be replaced by a constant (provided that all \"\" occurrences have the same meaning, which I presume they do).\nIn another words, what would happen if we decided that SimpleScore will get a new label of simp? We would replace two \"\" occurrences in SimpleScore with \"simp\" and we would probably miss this instance (on line 43).", "url": "https://github.com/kiegroup/optaplanner/pull/739#discussion_r406281372", "createdAt": "2020-04-09T15:18:28Z", "author": {"login": "yurloc"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/AbstractScore.java", "diffHunk": "@@ -34,6 +35,74 @@\n \n     protected static final String INIT_LABEL = \"init\";\n \n+    protected static int divideScoreLevel(int score, int scoreDivisor) {\n+        return divideScoreLevel(score, scoreDivisor, null);\n+    }\n+\n+    protected static int divideScoreLevel(int score, int scoreDivisor, String maybeLabel) {\n+        String label = maybeLabel == null ? \"\" : maybeLabel;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e34cde34bd022aa74eaade7f8a453b870f2992c"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwOTA1NDIz", "url": "https://github.com/kiegroup/optaplanner/pull/739#pullrequestreview-390905423", "createdAt": "2020-04-09T15:35:48Z", "commit": {"oid": "9e34cde34bd022aa74eaade7f8a453b870f2992c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09b1611ae17b63f7989eedb4449fdd413b924ca7", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/09b1611ae17b63f7989eedb4449fdd413b924ca7", "committedDate": "2020-04-11T14:28:04Z", "message": "Merge changes without updates to the API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2d1402f2f62f67a70bb7eb229d9898de13736fd", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/b2d1402f2f62f67a70bb7eb229d9898de13736fd", "committedDate": "2020-04-11T14:59:29Z", "message": "Add new method to the score definition"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ff0ca627a218c3ac46d81947893f9c9d79e566e", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/5ff0ca627a218c3ac46d81947893f9c9d79e566e", "committedDate": "2020-04-11T15:35:12Z", "message": "Add tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9e34cde34bd022aa74eaade7f8a453b870f2992c", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/9e34cde34bd022aa74eaade7f8a453b870f2992c", "committedDate": "2020-04-09T14:18:37Z", "message": "Reuse a string constant"}, "afterCommit": {"oid": "5ff0ca627a218c3ac46d81947893f9c9d79e566e", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/5ff0ca627a218c3ac46d81947893f9c9d79e566e", "committedDate": "2020-04-11T15:35:12Z", "message": "Add tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNzc2NTY4", "url": "https://github.com/kiegroup/optaplanner/pull/739#pullrequestreview-391776568", "createdAt": "2020-04-11T15:39:34Z", "commit": {"oid": "5ff0ca627a218c3ac46d81947893f9c9d79e566e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxNTozOTozNFrOGEOEAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxNTozOTozNFrOGEOEAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA3Nzg5MA==", "bodyText": "My spider sense is tingling, expecting comments here.\nSee table \"Preferred Scales for Results of Arithmetic Operations\" in BigDecimal Javadoc.", "url": "https://github.com/kiegroup/optaplanner/pull/739#discussion_r407077890", "createdAt": "2020-04-11T15:39:34Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/definition/AbstractScoreDefinition.java", "diffHunk": "@@ -30,6 +32,38 @@\n \n     private final String[] levelLabels;\n \n+    protected static int sanitize(int number) {\n+        return number == 0 ? 1 : number;\n+    }\n+\n+    protected static long sanitize(long number) {\n+        return number == 0L ? 1L : number;\n+    }\n+\n+    protected static double sanitize(double number) {\n+        return number == 0d ? 1d : number;\n+    }\n+\n+    protected static BigDecimal sanitize(BigDecimal number) {\n+        return number.signum() == 0 ? BigDecimal.ONE : number;\n+    }\n+\n+    protected static int divide(int dividend, int divisor) {\n+        return (int) Math.floor(divide(dividend, (double) divisor));\n+    }\n+\n+    protected static long divide(long dividend, long divisor) {\n+        return (long) Math.floor(divide(dividend, (double) divisor));\n+    }\n+\n+    protected static double divide(double dividend, double divisor) {\n+        return dividend / divisor;\n+    }\n+\n+    protected static BigDecimal divide(BigDecimal dividend, BigDecimal divisor) {\n+        return dividend.divide(divisor, dividend.scale() - divisor.scale(), RoundingMode.FLOOR);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ff0ca627a218c3ac46d81947893f9c9d79e566e"}, "originalPosition": 49}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d65e206b977f4cf50dc636d1c7e3c84e7579f439", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/d65e206b977f4cf50dc636d1c7e3c84e7579f439", "committedDate": "2020-04-11T15:41:28Z", "message": "Fix Revapi"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNzc3MjM1", "url": "https://github.com/kiegroup/optaplanner/pull/739#pullrequestreview-391777235", "createdAt": "2020-04-11T15:47:26Z", "commit": {"oid": "d65e206b977f4cf50dc636d1c7e3c84e7579f439"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxNTo0NzoyNlrOGEOHQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxNTo0NzoyNlrOGEOHQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA3ODcyMQ==", "bodyText": "javadoc link to Score", "url": "https://github.com/kiegroup/optaplanner/pull/739#discussion_r407078721", "createdAt": "2020-04-11T15:47:26Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/definition/ScoreDefinition.java", "diffHunk": "@@ -152,4 +152,14 @@ default boolean isNegativeOrZero(S score) {\n      */\n     S buildPessimisticBound(InitializingScoreTrend initializingScoreTrend, S score);\n \n+    /**\n+     * Return a Score whose every level is the result of dividing the matching levels in this and the divisor.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d65e206b977f4cf50dc636d1c7e3c84e7579f439"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNzc3Mjgy", "url": "https://github.com/kiegroup/optaplanner/pull/739#pullrequestreview-391777282", "createdAt": "2020-04-11T15:48:07Z", "commit": {"oid": "d65e206b977f4cf50dc636d1c7e3c84e7579f439"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxNTo0ODowN1rOGEOHhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxNTo0ODowN1rOGEOHhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA3ODc4OQ==", "bodyText": "Did the buildPessimisticBoundOnlyDown() test get removed?", "url": "https://github.com/kiegroup/optaplanner/pull/739#discussion_r407078789", "createdAt": "2020-04-11T15:48:07Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/test/java/org/optaplanner/core/impl/score/buildin/hardsoft/HardSoftScoreDefinitionTest.java", "diffHunk": "@@ -89,14 +89,18 @@ public void buildPessimisticBoundOnlyUp() {\n     }\n \n     @Test\n-    public void buildPessimisticBoundOnlyDown() {\n+    public void divideBySanitizedDivisor() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d65e206b977f4cf50dc636d1c7e3c84e7579f439"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNzc3MzM1", "url": "https://github.com/kiegroup/optaplanner/pull/739#pullrequestreview-391777335", "createdAt": "2020-04-11T15:48:45Z", "commit": {"oid": "d65e206b977f4cf50dc636d1c7e3c84e7579f439"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74ebcb264f357f568eca02399b3164ea11bdbf1b", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/74ebcb264f357f568eca02399b3164ea11bdbf1b", "committedDate": "2020-04-11T15:51:59Z", "message": "Address review comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2922, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}