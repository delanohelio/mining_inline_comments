{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxMjUyMjIw", "number": 674, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwODo1Nzo1MlrODdQQ5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwOTowMjo1OFrODdQW0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDAxNzY1OnYy", "diffSide": "RIGHT", "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/tsp/app/TspApp.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwODo1Nzo1MlrOFlwAkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwOTowNDozNlrOFlwMlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEyODIxMA==", "bodyText": "Why extract that in a separate file? The more files in an example, the harder it is to understand for our users.", "url": "https://github.com/kiegroup/optaplanner/pull/674#discussion_r375128210", "createdAt": "2020-02-05T08:57:52Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/tsp/app/TspApp.java", "diffHunk": "@@ -55,7 +55,7 @@ protected TspPanel createSolutionPanel() {\n \n     @Override\n     public SolutionFileIO<TspSolution> createSolutionFileIO() {\n-        return new XStreamSolutionFileIO<>(TspSolution.class);\n+        return new TspXStreamSolutionFileIO();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce4e8f3a4169894224d11645b68697870c144452"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEyOTg1OA==", "bodyText": "I thought you were going to ask. :-) I have a harness that allows me to run all examples in a single benchmark - essentially an abstraction to easily perform score director benchmarks over all examples and all score directors, without having a benchmark template of a million lines.\nThe downside of that is that it relies pretty heavily on generics. And I had to do this to standardize it with the other examples. (This was the only one that didn't have its own solution file IO.)\nI will submit the harness as a PR later and we can discuss it.", "url": "https://github.com/kiegroup/optaplanner/pull/674#discussion_r375129858", "createdAt": "2020-02-05T09:01:25Z", "author": {"login": "triceo"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/tsp/app/TspApp.java", "diffHunk": "@@ -55,7 +55,7 @@ protected TspPanel createSolutionPanel() {\n \n     @Override\n     public SolutionFileIO<TspSolution> createSolutionFileIO() {\n-        return new XStreamSolutionFileIO<>(TspSolution.class);\n+        return new TspXStreamSolutionFileIO();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEyODIxMA=="}, "originalCommit": {"oid": "ce4e8f3a4169894224d11645b68697870c144452"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEzMTI4Nw==", "bodyText": "If all other examples do it, there is very little point indeed in this example not doing it to be easier to understand. +1 for this change (consistency)", "url": "https://github.com/kiegroup/optaplanner/pull/674#discussion_r375131287", "createdAt": "2020-02-05T09:04:36Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/tsp/app/TspApp.java", "diffHunk": "@@ -55,7 +55,7 @@ protected TspPanel createSolutionPanel() {\n \n     @Override\n     public SolutionFileIO<TspSolution> createSolutionFileIO() {\n-        return new XStreamSolutionFileIO<>(TspSolution.class);\n+        return new TspXStreamSolutionFileIO();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEyODIxMA=="}, "originalCommit": {"oid": "ce4e8f3a4169894224d11645b68697870c144452"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDAxODQyOnYy", "diffSide": "RIGHT", "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/tsp/optional/score/TspConstraintProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwODo1ODowN1rOFlwBDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwODo1ODowN1rOFlwBDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEyODMzMw==", "bodyText": "Use SimpleLongScore.ONE", "url": "https://github.com/kiegroup/optaplanner/pull/674#discussion_r375128333", "createdAt": "2020-02-05T08:58:07Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/tsp/optional/score/TspConstraintProvider.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.tsp.optional.score;\n+\n+import org.optaplanner.core.api.score.buildin.simplelong.SimpleLongScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.core.api.score.stream.Joiners;\n+import org.optaplanner.examples.tsp.domain.Domicile;\n+import org.optaplanner.examples.tsp.domain.Visit;\n+\n+public final class TspConstraintProvider implements ConstraintProvider {\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n+        return new Constraint[]{\n+                distanceToPreviousStandstill(constraintFactory),\n+                distanceFromLastVisitToDomicile(constraintFactory)\n+        };\n+    }\n+\n+    private Constraint distanceToPreviousStandstill(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Visit.class)\n+                .penalizeLong(\"Distance to previous standstill\",\n+                        SimpleLongScore.of(1),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce4e8f3a4169894224d11645b68697870c144452"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDAzMjgwOnYy", "diffSide": "RIGHT", "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/tsp/optional/score/TspConstraintProvider.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwOTowMjo1OFrOFlwJ1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwOTowNTozOVrOFlwOaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEzMDU4MQ==", "bodyText": "I guess \"visit -> visit\" is better than \"Function.identity()\"?\nShould we experiment with thisEqual() or equalToThat() ? I guess that's overkill...", "url": "https://github.com/kiegroup/optaplanner/pull/674#discussion_r375130581", "createdAt": "2020-02-05T09:02:58Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/tsp/optional/score/TspConstraintProvider.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.tsp.optional.score;\n+\n+import org.optaplanner.core.api.score.buildin.simplelong.SimpleLongScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.core.api.score.stream.Joiners;\n+import org.optaplanner.examples.tsp.domain.Domicile;\n+import org.optaplanner.examples.tsp.domain.Visit;\n+\n+public final class TspConstraintProvider implements ConstraintProvider {\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n+        return new Constraint[]{\n+                distanceToPreviousStandstill(constraintFactory),\n+                distanceFromLastVisitToDomicile(constraintFactory)\n+        };\n+    }\n+\n+    private Constraint distanceToPreviousStandstill(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Visit.class)\n+                .penalizeLong(\"Distance to previous standstill\",\n+                        SimpleLongScore.of(1),\n+                        Visit::getDistanceFromPreviousStandstill);\n+    }\n+\n+    private Constraint distanceFromLastVisitToDomicile(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Visit.class)\n+                .ifNotExists(Visit.class, Joiners.equal(visit -> visit, Visit::getPreviousStandstill))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce4e8f3a4169894224d11645b68697870c144452"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEzMTUyMQ==", "bodyText": "(just a thought, no changes needed)", "url": "https://github.com/kiegroup/optaplanner/pull/674#discussion_r375131521", "createdAt": "2020-02-05T09:05:06Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/tsp/optional/score/TspConstraintProvider.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.tsp.optional.score;\n+\n+import org.optaplanner.core.api.score.buildin.simplelong.SimpleLongScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.core.api.score.stream.Joiners;\n+import org.optaplanner.examples.tsp.domain.Domicile;\n+import org.optaplanner.examples.tsp.domain.Visit;\n+\n+public final class TspConstraintProvider implements ConstraintProvider {\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n+        return new Constraint[]{\n+                distanceToPreviousStandstill(constraintFactory),\n+                distanceFromLastVisitToDomicile(constraintFactory)\n+        };\n+    }\n+\n+    private Constraint distanceToPreviousStandstill(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Visit.class)\n+                .penalizeLong(\"Distance to previous standstill\",\n+                        SimpleLongScore.of(1),\n+                        Visit::getDistanceFromPreviousStandstill);\n+    }\n+\n+    private Constraint distanceFromLastVisitToDomicile(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Visit.class)\n+                .ifNotExists(Visit.class, Joiners.equal(visit -> visit, Visit::getPreviousStandstill))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEzMDU4MQ=="}, "originalCommit": {"oid": "ce4e8f3a4169894224d11645b68697870c144452"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEzMTc1Mw==", "bodyText": "In this particular case, Function.identity() didn't compile.identity() returns a Visit while getPreviousStandstill() returns a Standstill. The compiler didn't like that.", "url": "https://github.com/kiegroup/optaplanner/pull/674#discussion_r375131753", "createdAt": "2020-02-05T09:05:39Z", "author": {"login": "triceo"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/tsp/optional/score/TspConstraintProvider.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.tsp.optional.score;\n+\n+import org.optaplanner.core.api.score.buildin.simplelong.SimpleLongScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.core.api.score.stream.Joiners;\n+import org.optaplanner.examples.tsp.domain.Domicile;\n+import org.optaplanner.examples.tsp.domain.Visit;\n+\n+public final class TspConstraintProvider implements ConstraintProvider {\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n+        return new Constraint[]{\n+                distanceToPreviousStandstill(constraintFactory),\n+                distanceFromLastVisitToDomicile(constraintFactory)\n+        };\n+    }\n+\n+    private Constraint distanceToPreviousStandstill(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Visit.class)\n+                .penalizeLong(\"Distance to previous standstill\",\n+                        SimpleLongScore.of(1),\n+                        Visit::getDistanceFromPreviousStandstill);\n+    }\n+\n+    private Constraint distanceFromLastVisitToDomicile(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Visit.class)\n+                .ifNotExists(Visit.class, Joiners.equal(visit -> visit, Visit::getPreviousStandstill))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEzMDU4MQ=="}, "originalCommit": {"oid": "ce4e8f3a4169894224d11645b68697870c144452"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4600, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}