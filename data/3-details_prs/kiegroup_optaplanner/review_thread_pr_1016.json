{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE3NjgzMjk3", "number": 1016, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMToyMjozM1rOE2uAxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMjo1NTo1MFrOE2wAhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1ODEyNDIxOnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/test/java/org/optaplanner/core/impl/score/director/ScoreDirectorFactoryFactoryTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMToyMjozM1rOHvqH5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMTozMTo1OFrOHvqcEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTczNTI2OQ==", "bodyText": "I 'd argue it needs to have the word \"scoreDRL\" in the message, because that is the breadcrumb that ties back into the solverConfig's <scoreDRL> line.\nIt's also important for us when we get support tickets, to know that they went through scoreDrl and not though kmodule.xml or CS.", "url": "https://github.com/kiegroup/optaplanner/pull/1016#discussion_r519735269", "createdAt": "2020-11-09T11:22:33Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/test/java/org/optaplanner/core/impl/score/director/ScoreDirectorFactoryFactoryTest.java", "diffHunk": "@@ -140,16 +140,20 @@ void multipleScoreCalculations_throwsException() {\n \n     @Test\n     void nonExistingDrlResource_throwsException() {\n-        ScoreDirectorFactoryConfig config = new ScoreDirectorFactoryConfig().withScoreDrls(\"nonExisting.drl\");\n-        assertThatExceptionOfType(IllegalArgumentException.class).isThrownBy(() -> buildTestdataScoreDirectoryFactory(config))\n-                .withMessageContaining(\"scoreDrl\");\n+        ScoreDirectorFactoryConfig config = new ScoreDirectorFactoryConfig()\n+                .withScoreDrls(\"nonExisting.drl\");\n+        assertThatExceptionOfType(IllegalStateException.class)\n+                .isThrownBy(() -> buildTestdataScoreDirectoryFactory(config))\n+                .withMessageContaining(\"DRL\");\n     }\n \n     @Test\n     void nonExistingDrlFile_throwsException() {\n-        ScoreDirectorFactoryConfig config = new ScoreDirectorFactoryConfig().withScoreDrlFiles(new File(\"nonExisting.drl\"));\n-        assertThatExceptionOfType(IllegalArgumentException.class).isThrownBy(() -> buildTestdataScoreDirectoryFactory(config))\n-                .withMessageContaining(\"scoreDrlFile\");\n+        ScoreDirectorFactoryConfig config = new ScoreDirectorFactoryConfig()\n+                .withScoreDrlFiles(new File(\"nonExisting.drl\"));\n+        assertThatExceptionOfType(IllegalStateException.class)\n+                .isThrownBy(() -> buildTestdataScoreDirectoryFactory(config))\n+                .withMessageContaining(\"DRL\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ab25d9192472c2ca0d046f4e80e07598355d81f"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc0MDQzNQ==", "bodyText": "This code will only be used when they go through scoreDrl/scoreDrlFile.\nIn fact, I'd argue that saying \"DRL\" is better than saying \"scoreDrl or scoreDrlFile\".", "url": "https://github.com/kiegroup/optaplanner/pull/1016#discussion_r519740435", "createdAt": "2020-11-09T11:31:58Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/test/java/org/optaplanner/core/impl/score/director/ScoreDirectorFactoryFactoryTest.java", "diffHunk": "@@ -140,16 +140,20 @@ void multipleScoreCalculations_throwsException() {\n \n     @Test\n     void nonExistingDrlResource_throwsException() {\n-        ScoreDirectorFactoryConfig config = new ScoreDirectorFactoryConfig().withScoreDrls(\"nonExisting.drl\");\n-        assertThatExceptionOfType(IllegalArgumentException.class).isThrownBy(() -> buildTestdataScoreDirectoryFactory(config))\n-                .withMessageContaining(\"scoreDrl\");\n+        ScoreDirectorFactoryConfig config = new ScoreDirectorFactoryConfig()\n+                .withScoreDrls(\"nonExisting.drl\");\n+        assertThatExceptionOfType(IllegalStateException.class)\n+                .isThrownBy(() -> buildTestdataScoreDirectoryFactory(config))\n+                .withMessageContaining(\"DRL\");\n     }\n \n     @Test\n     void nonExistingDrlFile_throwsException() {\n-        ScoreDirectorFactoryConfig config = new ScoreDirectorFactoryConfig().withScoreDrlFiles(new File(\"nonExisting.drl\"));\n-        assertThatExceptionOfType(IllegalArgumentException.class).isThrownBy(() -> buildTestdataScoreDirectoryFactory(config))\n-                .withMessageContaining(\"scoreDrlFile\");\n+        ScoreDirectorFactoryConfig config = new ScoreDirectorFactoryConfig()\n+                .withScoreDrlFiles(new File(\"nonExisting.drl\"));\n+        assertThatExceptionOfType(IllegalStateException.class)\n+                .isThrownBy(() -> buildTestdataScoreDirectoryFactory(config))\n+                .withMessageContaining(\"DRL\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTczNTI2OQ=="}, "originalCommit": {"oid": "2ab25d9192472c2ca0d046f4e80e07598355d81f"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1ODQ1MTI0OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/director/ScoreDirectorFactoryFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMjo1NTo1MFrOHvtM3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMjo1NTo1MFrOHvtM3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc4NTY5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new IllegalStateException(\"There are problems in your DRL.\", ex);\n          \n          \n            \n                        throw new IllegalStateException(\"There is an error in a scoreDrl or scoreDrlFile.\", ex);", "url": "https://github.com/kiegroup/optaplanner/pull/1016#discussion_r519785694", "createdAt": "2020-11-09T12:55:50Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/director/ScoreDirectorFactoryFactory.java", "diffHunk": "@@ -237,76 +232,32 @@ public ScoreDirectorFactoryFactory(ScoreDirectorFactoryConfig config) {\n             return null;\n         }\n \n-        KieServices kieServices = KieServices.Factory.get();\n-        KieResources kieResources = kieServices.getResources();\n-        KieFileSystem kieFileSystem = kieServices.newKieFileSystem();\n-\n-        writeScoreDrlListToKieFileSystem(kieFileSystem, kieResources, classLoader);\n-        writeScoreDrlFileListToKieFileSystem(kieFileSystem, kieResources);\n-\n-        // Can be overwritten by kieBaseConfigurationProperties\n-        KieModuleModel kmodel = kieServices.newKieModuleModel()\n-                .setConfigurationProperty(PropertySpecificOption.PROPERTY_NAME,\n-                        PropertySpecificOption.ALLOWED.toString());\n-        kieFileSystem.writeKModuleXML(kmodel.toXML());\n-\n-        KieBuilder kieBuilder = kieServices.newKieBuilder(kieFileSystem);\n-        kieBuilder.buildAll(ExecutableModelProject.class);\n-        Results results = kieBuilder.getResults();\n-        if (results.hasMessages(Message.Level.ERROR)) {\n-            throw new IllegalStateException(\"There are errors in a score DRL:\\n\" + results);\n-        } else if (results.hasMessages(Message.Level.WARNING)) {\n-            logger.warn(\"There are warnings in a score DRL:\\n{}\", results);\n-        }\n-        KieContainer kieContainer = kieServices.newKieContainer(kieBuilder.getKieModule().getReleaseId());\n-\n-        KieBaseConfiguration kieBaseConfiguration = buildKieBaseConfiguration(kieServices);\n-        KieBase kieBase = kieContainer.newKieBase(kieBaseConfiguration);\n-        if (generateDroolsTestOnError) {\n-            return new TestGenDroolsScoreDirectorFactory<>(solutionDescriptor, kieBase, config.getScoreDrlList(),\n-                    config.getScoreDrlFileList());\n-        } else {\n-            return new DroolsScoreDirectorFactory<>(solutionDescriptor, kieBase);\n-        }\n-    }\n-\n-    private void writeScoreDrlListToKieFileSystem(KieFileSystem kieFileSystem, KieResources kieResources,\n-            ClassLoader classLoader) {\n+        KieHelper kieHelper = new KieHelper(PropertySpecificOption.ALLOWED)\n+                .setClassLoader(classLoader);\n         if (!ConfigUtils.isEmptyCollection(config.getScoreDrlList())) {\n-            ClassLoader actualClassLoader =\n-                    (classLoader != null) ? classLoader : Thread.currentThread().getContextClassLoader();\n             for (String scoreDrl : config.getScoreDrlList()) {\n                 if (scoreDrl == null) {\n                     throw new IllegalArgumentException(\"The scoreDrl (\" + scoreDrl + \") cannot be null.\");\n                 }\n-                URL scoreDrlURL = actualClassLoader.getResource(scoreDrl);\n-                if (scoreDrlURL == null) {\n-                    String errorMessage = \"The scoreDrl (\" + scoreDrl + \") does not exist as a classpath resource\"\n-                            + \" in the classLoader (\" + actualClassLoader + \").\";\n-                    if (scoreDrl.startsWith(\"/\")) {\n-                        errorMessage += \"\\nAs from 6.1, a classpath resource should not start with a slash (/).\"\n-                                + \" A scoreDrl now adheres to ClassLoader.getResource(String).\"\n-                                + \" Remove the leading slash from the scoreDrl if you're upgrading from 6.0.\";\n-                    }\n-                    throw new IllegalArgumentException(errorMessage);\n-                }\n-                kieFileSystem.write(kieResources.newClassPathResource(scoreDrl, \"UTF-8\", actualClassLoader));\n+                kieHelper.addResource(new ClassPathResource(scoreDrl, classLoader));\n             }\n         }\n-    }\n-\n-    private void writeScoreDrlFileListToKieFileSystem(KieFileSystem kieFileSystem, KieResources kieResources) {\n         if (!ConfigUtils.isEmptyCollection(config.getScoreDrlFileList())) {\n             for (File scoreDrlFile : config.getScoreDrlFileList()) {\n-                if (scoreDrlFile == null) {\n-                    throw new IllegalArgumentException(\"The scoreDrlFile (\" + scoreDrlFile + \") cannot be null.\");\n-                }\n-                if (!scoreDrlFile.exists()) {\n-                    throw new IllegalArgumentException(\"The scoreDrlFile (\" + scoreDrlFile\n-                            + \") does not exist.\");\n-                }\n-                kieFileSystem.write(kieResources.newFileSystemResource(scoreDrlFile, \"UTF-8\"));\n+                kieHelper.addResource(new FileSystemResource(scoreDrlFile));\n+            }\n+        }\n+\n+        try {\n+            KieBase kieBase = kieHelper.build(ExecutableModelProject.class);\n+            if (generateDroolsTestOnError) {\n+                return new TestGenDroolsScoreDirectorFactory<>(solutionDescriptor, kieBase, config.getScoreDrlList(),\n+                        config.getScoreDrlFileList());\n+            } else {\n+                return new DroolsScoreDirectorFactory<>(solutionDescriptor, kieBase);\n             }\n+        } catch (Exception ex) {\n+            throw new IllegalStateException(\"There are problems in your DRL.\", ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ab25d9192472c2ca0d046f4e80e07598355d81f"}, "originalPosition": 118}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4150, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}