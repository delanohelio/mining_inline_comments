{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5OTUyMTE4", "number": 888, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNzoyMjowOFrOEZ1sAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNzoyMjowOFrOEZ1sAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NTI5NDczOnYy", "diffSide": "RIGHT", "path": "optaplanner-quarkus-integration/optaplanner-quarkus/deployment/src/main/java/org/optaplanner/quarkus/deployment/OptaPlannerProcessor.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNzoyMjowOFrOHC5TrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMDo0NTozMlrOHDBupg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc5ODEyNA==", "bodyText": "Do we care about DRL (less than about easy score calculation)?", "url": "https://github.com/kiegroup/optaplanner/pull/888#discussion_r472798124", "createdAt": "2020-08-19T07:22:08Z", "author": {"login": "rsynek"}, "path": "optaplanner-quarkus-integration/optaplanner-quarkus/deployment/src/main/java/org/optaplanner/quarkus/deployment/OptaPlannerProcessor.java", "diffHunk": "@@ -81,18 +86,37 @@ HotDeploymentWatchedFileBuildItem watchScoreDrl() {\n     }\n \n     @BuildStep\n-    void registerAdditionalBeans(BuildProducer<AdditionalBeanBuildItem> additionalBeans) {\n+    void registerAdditionalBeans(CombinedIndexBuildItem combinedIndex,\n+            BuildProducer<AdditionalBeanBuildItem> additionalBeans) {\n+        IndexView indexView = combinedIndex.getIndex();\n+        if (hasNoOptaPlannerContent(indexView)) {\n+            return;\n+        }\n         // The bean encapsulating the SolverFactory\n         additionalBeans.produce(new AdditionalBeanBuildItem(OptaPlannerBeanProvider.class));\n     }\n \n+    private boolean hasNoOptaPlannerContent(IndexView indexView) {\n+        // Only skip this extension if everything is missing. Otherwise, if some parts are missing, fail fast later.\n+        return indexView.getAnnotations(DotNames.PLANNING_SOLUTION).isEmpty()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d8090f82d2a3c3bdc122c3320e1b4d1f781acd7"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjgwMzYzMQ==", "bodyText": "We could do add a classLoader.getResource(SolverBuildTimeConfig.DEFAULT_SCORE_DRL_URL) == null check?", "url": "https://github.com/kiegroup/optaplanner/pull/888#discussion_r472803631", "createdAt": "2020-08-19T07:28:20Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-quarkus-integration/optaplanner-quarkus/deployment/src/main/java/org/optaplanner/quarkus/deployment/OptaPlannerProcessor.java", "diffHunk": "@@ -81,18 +86,37 @@ HotDeploymentWatchedFileBuildItem watchScoreDrl() {\n     }\n \n     @BuildStep\n-    void registerAdditionalBeans(BuildProducer<AdditionalBeanBuildItem> additionalBeans) {\n+    void registerAdditionalBeans(CombinedIndexBuildItem combinedIndex,\n+            BuildProducer<AdditionalBeanBuildItem> additionalBeans) {\n+        IndexView indexView = combinedIndex.getIndex();\n+        if (hasNoOptaPlannerContent(indexView)) {\n+            return;\n+        }\n         // The bean encapsulating the SolverFactory\n         additionalBeans.produce(new AdditionalBeanBuildItem(OptaPlannerBeanProvider.class));\n     }\n \n+    private boolean hasNoOptaPlannerContent(IndexView indexView) {\n+        // Only skip this extension if everything is missing. Otherwise, if some parts are missing, fail fast later.\n+        return indexView.getAnnotations(DotNames.PLANNING_SOLUTION).isEmpty()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc5ODEyNA=="}, "originalCommit": {"oid": "7d8090f82d2a3c3bdc122c3320e1b4d1f781acd7"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjgwOTE0Mg==", "bodyText": "That partially helps; now people might override the default location by solverConfig.xml. Where is the borderline of what else to check? What about the opposite approach: check just the annotations and provide a debug-level message explaining what's going on.\nBecause if we check the project just partially, for a couple of corner cases it will be very difficult for a user to investigate why the extension does just nothing.", "url": "https://github.com/kiegroup/optaplanner/pull/888#discussion_r472809142", "createdAt": "2020-08-19T07:34:58Z", "author": {"login": "rsynek"}, "path": "optaplanner-quarkus-integration/optaplanner-quarkus/deployment/src/main/java/org/optaplanner/quarkus/deployment/OptaPlannerProcessor.java", "diffHunk": "@@ -81,18 +86,37 @@ HotDeploymentWatchedFileBuildItem watchScoreDrl() {\n     }\n \n     @BuildStep\n-    void registerAdditionalBeans(BuildProducer<AdditionalBeanBuildItem> additionalBeans) {\n+    void registerAdditionalBeans(CombinedIndexBuildItem combinedIndex,\n+            BuildProducer<AdditionalBeanBuildItem> additionalBeans) {\n+        IndexView indexView = combinedIndex.getIndex();\n+        if (hasNoOptaPlannerContent(indexView)) {\n+            return;\n+        }\n         // The bean encapsulating the SolverFactory\n         additionalBeans.produce(new AdditionalBeanBuildItem(OptaPlannerBeanProvider.class));\n     }\n \n+    private boolean hasNoOptaPlannerContent(IndexView indexView) {\n+        // Only skip this extension if everything is missing. Otherwise, if some parts are missing, fail fast later.\n+        return indexView.getAnnotations(DotNames.PLANNING_SOLUTION).isEmpty()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc5ODEyNA=="}, "originalCommit": {"oid": "7d8090f82d2a3c3bdc122c3320e1b4d1f781acd7"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkzNjEwMg==", "bodyText": "Very good point about the debug message!", "url": "https://github.com/kiegroup/optaplanner/pull/888#discussion_r472936102", "createdAt": "2020-08-19T10:45:32Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-quarkus-integration/optaplanner-quarkus/deployment/src/main/java/org/optaplanner/quarkus/deployment/OptaPlannerProcessor.java", "diffHunk": "@@ -81,18 +86,37 @@ HotDeploymentWatchedFileBuildItem watchScoreDrl() {\n     }\n \n     @BuildStep\n-    void registerAdditionalBeans(BuildProducer<AdditionalBeanBuildItem> additionalBeans) {\n+    void registerAdditionalBeans(CombinedIndexBuildItem combinedIndex,\n+            BuildProducer<AdditionalBeanBuildItem> additionalBeans) {\n+        IndexView indexView = combinedIndex.getIndex();\n+        if (hasNoOptaPlannerContent(indexView)) {\n+            return;\n+        }\n         // The bean encapsulating the SolverFactory\n         additionalBeans.produce(new AdditionalBeanBuildItem(OptaPlannerBeanProvider.class));\n     }\n \n+    private boolean hasNoOptaPlannerContent(IndexView indexView) {\n+        // Only skip this extension if everything is missing. Otherwise, if some parts are missing, fail fast later.\n+        return indexView.getAnnotations(DotNames.PLANNING_SOLUTION).isEmpty()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc5ODEyNA=="}, "originalCommit": {"oid": "7d8090f82d2a3c3bdc122c3320e1b4d1f781acd7"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4410, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}