{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4NTk3ODg4", "number": 666, "title": "PLANNER-1788 ifExists()/ifNotExists() for BiStream", "bodyText": "", "createdAt": "2020-01-29T14:49:09Z", "url": "https://github.com/kiegroup/optaplanner/pull/666", "merged": true, "mergeCommit": {"oid": "7d585605a334215e9f0bcb236b39edfe2b610844"}, "closed": true, "closedAt": "2020-02-03T08:41:09Z", "author": {"login": "triceo"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb_CfyGgH2gAyMzY4NTk3ODg4OmYxMzNhZTUyMzQ0YWJhMmE2ZTcyZDZkYzZjZGI0YmU5MjE1MmIxYzI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcAo1KQgH2gAyMzY4NTk3ODg4OjFiZjlkOTMwMTE2YThiYjI1NGUyOWQyOWNjYTg1MzZiZGE1ZmY3MWM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f133ae52344aba2a6e72d6dc6cdb4be92152b1c2", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/f133ae52344aba2a6e72d6dc6cdb4be92152b1c2", "committedDate": "2020-01-29T09:26:41Z", "message": "Add the API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "147346e64d00e9c269f7606c0596bf5338064730", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/147346e64d00e9c269f7606c0596bf5338064730", "committedDate": "2020-01-29T09:37:39Z", "message": "Add the scaffolding"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb326dd2172d0a3fe6aeedd8b5b1e3ee9568995e", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/fb326dd2172d0a3fe6aeedd8b5b1e3ee9568995e", "committedDate": "2020-01-29T09:57:46Z", "message": "Add the implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "053b43c5674f994ad1f303113a41f3d836b7ee99", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/053b43c5674f994ad1f303113a41f3d836b7ee99", "committedDate": "2020-01-29T11:36:40Z", "message": "Update Javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fcda2cb9cbcc6e1fefd48173e85cec49f541b334", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/fcda2cb9cbcc6e1fefd48173e85cec49f541b334", "committedDate": "2020-01-29T13:50:18Z", "message": "Refactor justification list processing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31926e923f85c5e3e3040d30688092fe6234ac8a", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/31926e923f85c5e3e3040d30688092fe6234ac8a", "committedDate": "2020-01-29T14:35:23Z", "message": "Add all basic tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2552e31c3913ec137777315c42d3560ea1ad15e4", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/2552e31c3913ec137777315c42d3560ea1ad15e4", "committedDate": "2020-01-29T14:44:20Z", "message": "Add additional test coverage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6135deec6f1875b35db7606420b40d7eccbc664", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/d6135deec6f1875b35db7606420b40d7eccbc664", "committedDate": "2020-01-29T14:53:57Z", "message": "Remove obsolete comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7cd2c38ff0f994c0385662c3063024c1de433192", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/7cd2c38ff0f994c0385662c3063024c1de433192", "committedDate": "2020-01-29T14:59:16Z", "message": "Alter comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2db10997f0e8c829f1a9641fb4ad5b1667cbe42", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/f2db10997f0e8c829f1a9641fb4ad5b1667cbe42", "committedDate": "2020-01-29T15:07:19Z", "message": "Fix Revapi"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e303c49328fc52f12b7f6ecfb037c23237df0c4", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/3e303c49328fc52f12b7f6ecfb037c23237df0c4", "committedDate": "2020-01-29T20:00:55Z", "message": "Minor cleanups I just noticed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d44250756e0df73ba036c2d3ebeb13a05aeaee5", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/7d44250756e0df73ba036c2d3ebeb13a05aeaee5", "committedDate": "2020-01-29T20:39:51Z", "message": "Change naming"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwOTYxMDU3", "url": "https://github.com/kiegroup/optaplanner/pull/666#pullrequestreview-350961057", "createdAt": "2020-01-30T16:27:09Z", "commit": {"oid": "7d44250756e0df73ba036c2d3ebeb13a05aeaee5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNjoyNzowOVrOFjxZgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNjoyNzowOVrOFjxZgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA1MzgyNw==", "bodyText": "I just experimented with this, and if called like ifNotExists(Visit.class) - without the joiners - this gives varargs warnings in IDE. Not sure what to do about this method (and its likes here and in UniStream).", "url": "https://github.com/kiegroup/optaplanner/pull/666#discussion_r373053827", "createdAt": "2020-01-30T16:27:09Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/bi/BiConstraintStream.java", "diffHunk": "@@ -198,6 +198,166 @@\n         return join(otherClass, AbstractTriJoiner.merge(joiners));\n     }\n \n+    // ************************************************************************\n+    // If (Not) Exists\n+    // ************************************************************************\n+\n+    /**\n+     * Create a new {@link BiConstraintStream} for every pair of A and B where C exists for which the {@link TriJoiner}\n+     * is true (for the properties it extracts from the facts).\n+     * <p>\n+     * This method has overloaded methods with multiple {@link TriJoiner} parameters.\n+     * @param otherClass never null\n+     * @param joiner never null\n+     * @param <C> the type of the third matched fact\n+     * @return never null, a stream that matches every pair of A and B where C exists for which the {@link TriJoiner}\n+     * is true\n+     */\n+    default <C> BiConstraintStream<A, B> ifExists(Class<C> otherClass, TriJoiner<A, B, C> joiner) {\n+        return ifExists(otherClass, new TriJoiner[] { joiner });\n+    }\n+\n+    /**\n+     * As defined by {@link #ifExists(Class, TriJoiner)}. For performance reasons, indexing joiners must be placed\n+     * before filtering joiners.\n+     * @param otherClass never null\n+     * @param joiner1 never null\n+     * @param joiner2 never null\n+     * @param <C> the type of the third matched fact\n+     * @return never null, a stream that matches every pair of A and B where C exists for which the {@link TriJoiner}s\n+     * are true\n+     */\n+    default <C> BiConstraintStream<A, B> ifExists(Class<C> otherClass, TriJoiner<A, B, C> joiner1,\n+            TriJoiner<A, B, C> joiner2) {\n+        return ifExists(otherClass, new TriJoiner[] {joiner1, joiner2});\n+    }\n+\n+    /**\n+     * As defined by {@link #ifExists(Class, TriJoiner)}. For performance reasons, indexing joiners must be placed\n+     * before filtering joiners.\n+     * @param otherClass never null\n+     * @param joiner1 never null\n+     * @param joiner2 never null\n+     * @param joiner3 never null\n+     * @param <C> the type of the third matched fact\n+     * @return never null, a stream that matches every pair of A and B where C exists for which the {@link TriJoiner}s\n+     * are true\n+     */\n+    default <C> BiConstraintStream<A, B> ifExists(Class<C> otherClass, TriJoiner<A, B, C> joiner1,\n+            TriJoiner<A, B, C> joiner2, TriJoiner<A, B, C> joiner3) {\n+        return ifExists(otherClass, new TriJoiner[] {joiner1, joiner2, joiner3});\n+    }\n+\n+    /**\n+     * As defined by {@link #ifExists(Class, TriJoiner)}. For performance reasons, indexing joiners must be placed\n+     * before filtering joiners.\n+     * @param otherClass never null\n+     * @param joiner1 never null\n+     * @param joiner2 never null\n+     * @param joiner3 never null\n+     * @param joiner4 never null\n+     * @param <C> the type of the third matched fact\n+     * @return never null, a stream that matches every pair of A and B where C exists for which the {@link TriJoiner}s\n+     * are true\n+     */\n+    default <C> BiConstraintStream<A, B> ifExists(Class<C> otherClass, TriJoiner<A, B, C> joiner1,\n+            TriJoiner<A, B, C> joiner2, TriJoiner<A, B, C> joiner3, TriJoiner<A, B, C> joiner4) {\n+        return ifExists(otherClass, new TriJoiner[] {joiner1, joiner2, joiner3, joiner4});\n+    }\n+\n+    /**\n+     * As defined by {@link #ifExists(Class, TriJoiner)}. For performance reasons, indexing joiners must be placed\n+     * before filtering joiners.\n+     * <p>\n+     * This method causes <i>Unchecked generics array creation for varargs parameter</i> warnings,\n+     * but we can't fix it with a {@link SafeVarargs} annotation because it's an interface method.\n+     * Therefore, there are overloaded methods with up to 4 {@link TriJoiner} parameters.\n+     * @param otherClass never null\n+     * @param joiners never null\n+     * @param <C> the type of the third matched fact\n+     * @return never null, a stream that matches every pair of A and B where C exists for which the {@link TriJoiner}s\n+     * are true\n+     */\n+    <C> BiConstraintStream<A, B> ifExists(Class<C> otherClass, TriJoiner<A, B, C>... joiners);\n+\n+    /**\n+     * Create a new {@link BiConstraintStream} for every pair of A and B where C does not exist for which the\n+     * {@link TriJoiner} is true (for the properties it extracts from the facts).\n+     * <p>\n+     * This method has overloaded methods with multiple {@link TriJoiner} parameters.\n+     * @param otherClass never null\n+     * @param joiner never null\n+     * @param <C> the type of the third matched fact\n+     * @return never null, a stream that matches every pair of A and B where C does not exist for which the\n+     * {@link TriJoiner} is true\n+     */\n+    default <C> BiConstraintStream<A, B> ifNotExists(Class<C> otherClass, TriJoiner<A, B, C> joiner) {\n+        return ifNotExists(otherClass, new TriJoiner[] { joiner });\n+    }\n+\n+    /**\n+     * As defined by {@link #ifNotExists(Class, TriJoiner)}. For performance reasons, indexing joiners must be placed\n+     * before filtering joiners.\n+     * @param otherClass never null\n+     * @param joiner1 never null\n+     * @param joiner2 never null\n+     * @param <C> the type of the third matched fact\n+     * @return never null, a stream that matches every pair of A and B where C does not exist for which the\n+     * {@link TriJoiner}s are true\n+     */\n+    default <C> BiConstraintStream<A, B> ifNotExists(Class<C> otherClass, TriJoiner<A, B, C> joiner1,\n+            TriJoiner<A, B, C> joiner2) {\n+        return ifNotExists(otherClass, new TriJoiner[] {joiner1, joiner2});\n+    }\n+\n+    /**\n+     * As defined by {@link #ifNotExists(Class, TriJoiner)}. For performance reasons, indexing joiners must be placed\n+     * before filtering joiners.\n+     * @param otherClass never null\n+     * @param joiner1 never null\n+     * @param joiner2 never null\n+     * @param joiner3 never null\n+     * @param <C> the type of the third matched fact\n+     * @return never null, a stream that matches every pair of A and B where C does not exist for which the\n+     * {@link TriJoiner}s are true\n+     */\n+    default <C> BiConstraintStream<A, B> ifNotExists(Class<C> otherClass, TriJoiner<A, B, C> joiner1,\n+            TriJoiner<A, B, C> joiner2, TriJoiner<A, B, C> joiner3) {\n+        return ifNotExists(otherClass, new TriJoiner[] {joiner1, joiner2, joiner3});\n+    }\n+\n+    /**\n+     * As defined by {@link #ifNotExists(Class, TriJoiner)}. For performance reasons, indexing joiners must be placed\n+     * before filtering joiners.\n+     * @param otherClass never null\n+     * @param joiner1 never null\n+     * @param joiner2 never null\n+     * @param joiner3 never null\n+     * @param joiner4 never null\n+     * @param <C> the type of the third matched fact\n+     * @return never null, a stream that matches every pair of A and B where C does not exist for which the\n+     * {@link TriJoiner}s are true\n+     */\n+    default <C> BiConstraintStream<A, B> ifNotExists(Class<C> otherClass, TriJoiner<A, B, C> joiner1,\n+            TriJoiner<A, B, C> joiner2, TriJoiner<A, B, C> joiner3, TriJoiner<A, B, C> joiner4) {\n+        return ifNotExists(otherClass, new TriJoiner[] {joiner1, joiner2, joiner3, joiner4});\n+    }\n+\n+    /**\n+     * As defined by {@link #ifNotExists(Class, TriJoiner)}. For performance reasons, indexing joiners must be placed\n+     * before filtering joiners.\n+     * <p>\n+     * This method causes <i>Unchecked generics array creation for varargs parameter</i> warnings,\n+     * but we can't fix it with a {@link SafeVarargs} annotation because it's an interface method.\n+     * Therefore, there are overloaded methods with up to 4 {@link TriJoiner} parameters.\n+     * @param otherClass never null\n+     * @param joiners never null\n+     * @param <C> the type of the third matched fact\n+     * @return never null, a stream that matches every pair of A and B where C does not exist for which the\n+     * {@link TriJoiner}s are true\n+     */\n+    <C> BiConstraintStream<A, B> ifNotExists(Class<C> otherClass, TriJoiner<A, B, C>... joiners);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d44250756e0df73ba036c2d3ebeb13a05aeaee5"}, "originalPosition": 162}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMDgxMjg0", "url": "https://github.com/kiegroup/optaplanner/pull/666#pullrequestreview-352081284", "createdAt": "2020-02-03T08:25:44Z", "commit": {"oid": "7d44250756e0df73ba036c2d3ebeb13a05aeaee5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwODoyNTo0NVrOFkpUAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwODoyNTo0NVrOFkpUAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk2OTkyMA==", "bodyText": "style: Not and Exists without capital. only first word has capital in comments", "url": "https://github.com/kiegroup/optaplanner/pull/666#discussion_r373969920", "createdAt": "2020-02-03T08:25:45Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/bi/BiConstraintStream.java", "diffHunk": "@@ -198,6 +198,166 @@\n         return join(otherClass, AbstractTriJoiner.merge(joiners));\n     }\n \n+    // ************************************************************************\n+    // If (Not) Exists", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d44250756e0df73ba036c2d3ebeb13a05aeaee5"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMDgzNDEx", "url": "https://github.com/kiegroup/optaplanner/pull/666#pullrequestreview-352083411", "createdAt": "2020-02-03T08:30:07Z", "commit": {"oid": "7d44250756e0df73ba036c2d3ebeb13a05aeaee5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1bf9d930116a8bb254e29d29cca8536bda5ff71c", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/1bf9d930116a8bb254e29d29cca8536bda5ff71c", "committedDate": "2020-02-03T08:40:21Z", "message": "Fix Javadoc"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3057, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}