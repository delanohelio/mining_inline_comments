{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxNTk3ODkx", "number": 654, "title": "PLANNER-1777 bugfix when using java generics or kotlin open classes", "bodyText": "I am getting following error when using kotlin data classes as PlanningEntity having a PlanningVariable with valueRangeProviderRefs to a collection of kotlin data classes. Following is the stacktrace of the error. I was able to reproduce this issue on master branch of optaplanner.\n\njava.lang.IllegalArgumentException: The entityClass (class org.divy.resource.planning.domain.allocation.IterationAllocation) has a PlanningVariable annotated property (employee) that refers to a ValueRangeProvider annotated member (field private java.util.List org.divy.resource.planning.domain.iteration.IterationAllocations.employeeList) that returns a parameterized Collection with an unsupported type arguments (? extends org.divy.resource.planning.domain.employee.Employee).\n\n\tat org.optaplanner.core.impl.domain.valuerange.descriptor.AbstractFromPropertyValueRangeDescriptor.processValueRangeProviderAnnotation(AbstractFromPropertyValueRangeDescriptor.java:117)\n\tat org.optaplanner.core.impl.domain.valuerange.descriptor.AbstractFromPropertyValueRangeDescriptor.<init>(AbstractFromPropertyValueRangeDescriptor.java:57)\n\tat org.optaplanner.core.impl.domain.valuerange.descriptor.FromSolutionPropertyValueRangeDescriptor.<init>(FromSolutionPropertyValueRangeDescriptor.java:34)\n\tat org.optaplanner.core.impl.domain.variable.descriptor.GenuineVariableDescriptor.buildValueRangeDescriptor(GenuineVariableDescriptor.java:152)\n\tat org.optaplanner.core.impl.domain.variable.descriptor.GenuineVariableDescriptor.processValueRangeRefs(GenuineVariableDescriptor.java:139)\n\tat org.optaplanner.core.impl.domain.variable.descriptor.GenuineVariableDescriptor.processPropertyAnnotations(GenuineVariableDescriptor.java:84)\n\tat org.optaplanner.core.impl.domain.variable.descriptor.GenuineVariableDescriptor.processAnnotations(GenuineVariableDescriptor.java:77)", "createdAt": "2020-01-10T19:51:06Z", "url": "https://github.com/kiegroup/optaplanner/pull/654", "merged": true, "mergeCommit": {"oid": "fb2c41c7fcab920972c5d6eda850d73fd171bb37"}, "closed": true, "closedAt": "2020-01-22T08:36:42Z", "author": {"login": "divyakumarjain"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb5bm6SgFqTM0MTU0NTQ4Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb6pU_HAH2gAyMzYxNTk3ODkxOjMwMDI2ZTc3MWQ5ODA3NGFlNGUxZDJkZDFjODRmMTMxMGQ0NmM4NGM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxNTQ1NDg3", "url": "https://github.com/kiegroup/optaplanner/pull/654#pullrequestreview-341545487", "createdAt": "2020-01-11T23:17:22Z", "commit": {"oid": "8933a3afd8723b5a52f7d895631b26d00ddec69a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQyMzoxODowOVrOFcnOgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQyMzoxODowOVrOFcnOgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU0NzEzOA==", "bodyText": "Our code style prescribes a space after if, and no whitespace before the closing parenthesis.\nAlso, it would be nice if you could provide a reproducing test.", "url": "https://github.com/kiegroup/optaplanner/pull/654#discussion_r365547138", "createdAt": "2020-01-11T23:18:09Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/domain/valuerange/descriptor/AbstractFromPropertyValueRangeDescriptor.java", "diffHunk": "@@ -108,6 +109,11 @@ private void processValueRangeProviderAnnotation(ValueRangeProvider valueRangePr\n                 // with the variableDescriptor's generic type's type arguments\n                 typeArgument = ((ParameterizedType) typeArgument).getRawType();\n             }\n+\n+            if(typeArgument instanceof WildcardType ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8933a3afd8723b5a52f7d895631b26d00ddec69a"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxNjU0MzUz", "url": "https://github.com/kiegroup/optaplanner/pull/654#pullrequestreview-341654353", "createdAt": "2020-01-13T06:34:07Z", "commit": {"oid": "736bb01b4251328ec1b5d3a94eb82dbaa0bc41a5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyNjc4OTk0", "url": "https://github.com/kiegroup/optaplanner/pull/654#pullrequestreview-342678994", "createdAt": "2020-01-14T16:44:38Z", "commit": {"oid": "736bb01b4251328ec1b5d3a94eb82dbaa0bc41a5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNjo0NDozOFrOFdeVVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNjo0NDozOFrOFdeVVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ1MDAwNw==", "bodyText": "Are there any test methods using this?", "url": "https://github.com/kiegroup/optaplanner/pull/654#discussion_r366450007", "createdAt": "2020-01-14T16:44:38Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/test/java/org/optaplanner/core/impl/testdata/domain/reflect/generic/TestdataGenericEntity.java", "diffHunk": "@@ -59,10 +60,19 @@ public TestdataGenericEntity(String code, TestdataGenericValue value) {\n         return value;\n     }\n \n+    @PlanningVariable(valueRangeProviderRefs = \"subTypeValueRange\")\n+    public TestdataGenericValue<T> getSubTypeValue() {\n+        return subTypeValue;\n+    }\n+\n     public void setValue(TestdataGenericValue<T> value) {\n         this.value = value;\n     }\n \n+    public void setSubTypeValue(TestdataGenericValue<T> subTypeValue) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "736bb01b4251328ec1b5d3a94eb82dbaa0bc41a5"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30026e771d98074ae4e1d2dd1c84f1310d46c84c", "author": {"user": {"login": "divyakumarjain", "name": "divyakumarjain"}}, "url": "https://github.com/kiegroup/optaplanner/commit/30026e771d98074ae4e1d2dd1c84f1310d46c84c", "committedDate": "2020-01-15T17:51:34Z", "message": "bugfix when using java generics or kotlin open classes"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3038, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}