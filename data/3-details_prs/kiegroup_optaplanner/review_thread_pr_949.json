{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1NTA2MDI1", "number": 949, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMzozMzoyNVrOEpCFUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMzozMzoyNVrOEpCFUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNDYxMjAyOnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/calculator/ConstraintMatchAwareIncrementalScoreCalculator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMzozMzoyNVrOHadwpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMzozMzoyNVrOHadwpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUxMjYxMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return null if it should to be calculated non-incrementally from {@link #getConstraintMatchTotals()}\n          \n          \n            \n                 * @return null if it should be calculated non-incrementally from {@link #getConstraintMatchTotals()}", "url": "https://github.com/kiegroup/optaplanner/pull/949#discussion_r497512612", "createdAt": "2020-09-30T13:33:25Z", "author": {"login": "rsynek"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/calculator/ConstraintMatchAwareIncrementalScoreCalculator.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.api.score.calculator;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+\n+import org.optaplanner.core.api.domain.solution.PlanningSolution;\n+import org.optaplanner.core.api.score.Score;\n+import org.optaplanner.core.api.score.constraint.ConstraintMatchTotal;\n+import org.optaplanner.core.api.score.constraint.Indictment;\n+import org.optaplanner.core.impl.score.director.ScoreDirector;\n+\n+/**\n+ * Allows a {@link IncrementalScoreCalculator} to report {@link ConstraintMatchTotal}s\n+ * for explaining a score (= which score constraints match for how much)\n+ * and also for score corruption analysis.\n+ *\n+ * @param <Solution_> the solution type, the class with the {@link PlanningSolution} annotation\n+ * @param <Score_> the score type to go with the solution\n+ */\n+public interface ConstraintMatchAwareIncrementalScoreCalculator<Solution_, Score_ extends Score>\n+        extends IncrementalScoreCalculator<Solution_, Score_> {\n+\n+    /**\n+     * Allows for increased performance because it only tracks if constraintMatchEnabled is true.\n+     * <p>\n+     * Every implementation should call {@link #resetWorkingSolution}\n+     * and only handle the constraintMatchEnabled parameter specifically (or ignore it).\n+     *\n+     * @param workingSolution never null, to pass to {@link #resetWorkingSolution}.\n+     * @param constraintMatchEnabled true if {@link #getConstraintMatchTotals()} or {@link #getIndictmentMap()} might be called.\n+     */\n+    void resetWorkingSolution(Solution_ workingSolution, boolean constraintMatchEnabled);\n+\n+    /**\n+     * @return never null\n+     * @throws IllegalStateException if {@link #resetWorkingSolution}'s constraintMatchEnabled parameter was false\n+     * @see ScoreDirector#getConstraintMatchTotals()\n+     */\n+    Collection<ConstraintMatchTotal> getConstraintMatchTotals();\n+\n+    /**\n+     * @return null if it should to be calculated non-incrementally from {@link #getConstraintMatchTotals()}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91c062a83dccc232a7f0519e5a703b18b9227fb0"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4262, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}