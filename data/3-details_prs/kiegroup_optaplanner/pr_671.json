{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwODUyNDI4", "number": 671, "title": "PLANNER-1838 Conditional propagation documentation", "bodyText": "", "createdAt": "2020-02-04T13:58:27Z", "url": "https://github.com/kiegroup/optaplanner/pull/671", "merged": true, "mergeCommit": {"oid": "1f4a2bb3e3fb5a836f601180b7765145dcb08a4d"}, "closed": true, "closedAt": "2020-02-04T14:31:22Z", "author": {"login": "triceo"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcBB97MgH2gAyMzcwODUyNDI4OjdjODE2ZDBhNzI3MmJkZmNlMTUyNTg4NTg1Njg3ZTlkMzEzMjEzMTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcBCZ-HgH2gAyMzcwODUyNDI4OjNmMTBkOTEwMWQ0YjY4Y2ZjMzJjN2NjYjQyNGJlZmFlYWMzNWRhNzE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7c816d0a7272bdfce152588585687e9d31321318", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/7c816d0a7272bdfce152588585687e9d31321318", "committedDate": "2020-02-04T13:57:33Z", "message": "Conditional propagation docs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyOTk3NjI0", "url": "https://github.com/kiegroup/optaplanner/pull/671#pullrequestreview-352997624", "createdAt": "2020-02-04T14:04:07Z", "commit": {"oid": "7c816d0a7272bdfce152588585687e9d31321318"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMDA5NjM5", "url": "https://github.com/kiegroup/optaplanner/pull/671#pullrequestreview-353009639", "createdAt": "2020-02-04T14:19:41Z", "commit": {"oid": "7c816d0a7272bdfce152588585687e9d31321318"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNDoxOTo0MVrOFlVqFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNDoxOTo0MVrOFlVqFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY5NjQ2OA==", "bodyText": "future tense: avoid \"will\" -> \"are penalized\"", "url": "https://github.com/kiegroup/optaplanner/pull/671#discussion_r374696468", "createdAt": "2020-02-04T14:19:41Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-docs/src/main/asciidoc/ConstraintStreams/ConstraintStreams-chapter.adoc", "diffHunk": "@@ -482,6 +483,58 @@ The following example finds a computer which runs the most power-demanding proce\n ----\n \n \n+[[constraintStreamsConditionalPropagation]]\n+=== Conditional propagation\n+\n+Conditional propagation enables you to exclude constraint matches from the constraint stream based on the presence or\n+absence of some other object.\n+The following example penalizes computers which have at least one process running on them:\n+\n+[source,java,options=\"nowrap\"]\n+----\n+    private Constraint runningComputer(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(CloudComputer.class)\n+                .ifExists(CloudProcess.class, Joiners.equal(Function.identity(), CloudProcess::getComputer))\n+                .penalize(\"runningComputer\",\n+                        HardSoftScore.ONE_SOFT,\n+                        computer -> ...);\n+    }\n+----\n+\n+Note the use of the `ifExists()` building block.\n+On `UniConstraintStream`, the `ifExistsOther()` building block is also available, useful in situations where your\n+`from()` constraint match type is the same as your `ifExists()` type.\n+\n+Conversely, the `ifNotExists()` (and `ifNotExistsOther()` on `UniConstraintStream`) are available to achieve the\n+opposite effect:\n+\n+[source,java,options=\"nowrap\"]\n+----\n+    private Constraint unusedComputer(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(CloudComputer.class)\n+                .ifNotExists(CloudProcess.class, Joiners.equal(Function.identity(), CloudProcess::getComputer))\n+                .penalize(\"unusedComputer\",\n+                        HardSoftScore.ONE_HARD,\n+                        computer -> ...);\n+    }\n+----\n+\n+Here, only the computers without processes running on them will be penalized.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c816d0a7272bdfce152588585687e9d31321318"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMDA5OTc2", "url": "https://github.com/kiegroup/optaplanner/pull/671#pullrequestreview-353009976", "createdAt": "2020-02-04T14:20:08Z", "commit": {"oid": "7c816d0a7272bdfce152588585687e9d31321318"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNDoyMDowOFrOFlVq-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNDoyMDowOFrOFlVq-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY5NjY5OA==", "bodyText": "will not be -> are not", "url": "https://github.com/kiegroup/optaplanner/pull/671#discussion_r374696698", "createdAt": "2020-02-04T14:20:08Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-docs/src/main/asciidoc/ConstraintStreams/ConstraintStreams-chapter.adoc", "diffHunk": "@@ -482,6 +483,58 @@ The following example finds a computer which runs the most power-demanding proce\n ----\n \n \n+[[constraintStreamsConditionalPropagation]]\n+=== Conditional propagation\n+\n+Conditional propagation enables you to exclude constraint matches from the constraint stream based on the presence or\n+absence of some other object.\n+The following example penalizes computers which have at least one process running on them:\n+\n+[source,java,options=\"nowrap\"]\n+----\n+    private Constraint runningComputer(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(CloudComputer.class)\n+                .ifExists(CloudProcess.class, Joiners.equal(Function.identity(), CloudProcess::getComputer))\n+                .penalize(\"runningComputer\",\n+                        HardSoftScore.ONE_SOFT,\n+                        computer -> ...);\n+    }\n+----\n+\n+Note the use of the `ifExists()` building block.\n+On `UniConstraintStream`, the `ifExistsOther()` building block is also available, useful in situations where your\n+`from()` constraint match type is the same as your `ifExists()` type.\n+\n+Conversely, the `ifNotExists()` (and `ifNotExistsOther()` on `UniConstraintStream`) are available to achieve the\n+opposite effect:\n+\n+[source,java,options=\"nowrap\"]\n+----\n+    private Constraint unusedComputer(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(CloudComputer.class)\n+                .ifNotExists(CloudProcess.class, Joiners.equal(Function.identity(), CloudProcess::getComputer))\n+                .penalize(\"unusedComputer\",\n+                        HardSoftScore.ONE_HARD,\n+                        computer -> ...);\n+    }\n+----\n+\n+Here, only the computers without processes running on them will be penalized.\n+\n+Also note the use of the `Joiner` class to limit the constraint matches.\n+For a description of `Joiners`, see <<constraintStreamsJoin,joining>>.\n+Conditional propagation operates much like joining, with the exception of not increasing the\n+<<constraintStreamsCardinality, stream cardinality>>.\n+The matches from `ifExists()` and other similar building blocks will not be available further down the stream.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c816d0a7272bdfce152588585687e9d31321318"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMDExMjU1", "url": "https://github.com/kiegroup/optaplanner/pull/671#pullrequestreview-353011255", "createdAt": "2020-02-04T14:21:47Z", "commit": {"oid": "7c816d0a7272bdfce152588585687e9d31321318"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNDoyMTo0OFrOFlVuoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNDoyMTo0OFrOFlVuoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY5NzYzMw==", "bodyText": "I'd argue that's not the most important difference between join() and ifExists().\nThis is the real difference:\n[a1, a2, a3].join([b1, b2], someCondition) gives up to 6 matches.\n[a1, a2, a3].ifExists([b1, b2], someCondition) gives up to 3 matches.", "url": "https://github.com/kiegroup/optaplanner/pull/671#discussion_r374697633", "createdAt": "2020-02-04T14:21:48Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-docs/src/main/asciidoc/ConstraintStreams/ConstraintStreams-chapter.adoc", "diffHunk": "@@ -482,6 +483,58 @@ The following example finds a computer which runs the most power-demanding proce\n ----\n \n \n+[[constraintStreamsConditionalPropagation]]\n+=== Conditional propagation\n+\n+Conditional propagation enables you to exclude constraint matches from the constraint stream based on the presence or\n+absence of some other object.\n+The following example penalizes computers which have at least one process running on them:\n+\n+[source,java,options=\"nowrap\"]\n+----\n+    private Constraint runningComputer(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(CloudComputer.class)\n+                .ifExists(CloudProcess.class, Joiners.equal(Function.identity(), CloudProcess::getComputer))\n+                .penalize(\"runningComputer\",\n+                        HardSoftScore.ONE_SOFT,\n+                        computer -> ...);\n+    }\n+----\n+\n+Note the use of the `ifExists()` building block.\n+On `UniConstraintStream`, the `ifExistsOther()` building block is also available, useful in situations where your\n+`from()` constraint match type is the same as your `ifExists()` type.\n+\n+Conversely, the `ifNotExists()` (and `ifNotExistsOther()` on `UniConstraintStream`) are available to achieve the\n+opposite effect:\n+\n+[source,java,options=\"nowrap\"]\n+----\n+    private Constraint unusedComputer(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(CloudComputer.class)\n+                .ifNotExists(CloudProcess.class, Joiners.equal(Function.identity(), CloudProcess::getComputer))\n+                .penalize(\"unusedComputer\",\n+                        HardSoftScore.ONE_HARD,\n+                        computer -> ...);\n+    }\n+----\n+\n+Here, only the computers without processes running on them will be penalized.\n+\n+Also note the use of the `Joiner` class to limit the constraint matches.\n+For a description of `Joiners`, see <<constraintStreamsJoin,joining>>.\n+Conditional propagation operates much like joining, with the exception of not increasing the\n+<<constraintStreamsCardinality, stream cardinality>>.\n+The matches from `ifExists()` and other similar building blocks will not be available further down the stream.\n+\n+[NOTE]\n+====\n+For performance reasons, using conditional propagation with the appropriate `Joiner` is preferable to joining.\n+Joining should only be used in cases where the other instance is actually required for another operation further down\n+the stream.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c816d0a7272bdfce152588585687e9d31321318"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMDExNTYz", "url": "https://github.com/kiegroup/optaplanner/pull/671#pullrequestreview-353011563", "createdAt": "2020-02-04T14:22:08Z", "commit": {"oid": "7c816d0a7272bdfce152588585687e9d31321318"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f10d9101d4b68cfc32c7ccb424befaeac35da71", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/3f10d9101d4b68cfc32c7ccb424befaeac35da71", "committedDate": "2020-02-04T14:28:11Z", "message": "Address review comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3062, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}