{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5MzY4OTIy", "number": 938, "title": "PLANNER-1821 & PLANNER-1873: Add Constraint Provider for Coach Shuttle Gathering", "bodyText": "JIRA\n\nhttps://issues.redhat.com/browse/PLANNER-1873\nhttps://issues.redhat.com/browse/PLANNER-1821\nReferenced pull requests\n\n\nChecklist\n\n Documentation updated if applicable.\n Upgrade recipe provided if applicable.\n\n\n\nHow to retest this PR or trigger a specific build:\n\n\nfor a pull request build please add comment: Jenkins retest this\nfor a full downstream build please add comment: Jenkins run fdb\nfor a compile downstream build please add comment: Jenkins run cdb\nfor a full production downstream build please add comment: Jenkins execute product fdb\nfor an upstream build please add comment: Jenkins run upstream\n\n\nReplaces #691 and #793\nCoach Capacity was a fun one; it would be easy if we had an accumlate that works on empty streams, but since we don't, I need to implement it as three constraints: One when no streams are empty, one that handles when coach is overfilled without shuttle, and one to remove double counting.", "createdAt": "2020-09-18T14:54:34Z", "url": "https://github.com/kiegroup/optaplanner/pull/938", "merged": true, "mergeCommit": {"oid": "9fd5749f3238fba70dfe00426c34d20fc6a19b04"}, "closed": true, "closedAt": "2020-09-22T15:24:38Z", "author": {"login": "Christopher-Chianelli"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdJ04OnAH2gAyNDg5MzY4OTIyOjU3NDc5YzliMzcyOWVlMDhjNTIxYmY1YTM3ZjIyMTQ4YWNlMjVhYTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLY9gHAH2gAyNDg5MzY4OTIyOmEyZGE5M2Y3ODM3YTY5MmFiMDZlOGU2NzBhMmEyYmRkZDMzNzJlM2M=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "57479c9b3729ee08c521bf5a37f22148ace25aa6", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/57479c9b3729ee08c521bf5a37f22148ace25aa6", "committedDate": "2020-09-17T17:59:02Z", "message": "shuttle capacity"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a91e49252bf3078561edf198cda47bad1339223f", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/a91e49252bf3078561edf198cda47bad1339223f", "committedDate": "2020-09-17T17:59:06Z", "message": "Making progress on coach capacity"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc9fe458bb940645abd85da935eeb008b4b8f13b", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/dc9fe458bb940645abd85da935eeb008b4b8f13b", "committedDate": "2020-09-17T17:59:06Z", "message": "Making more progress"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "443c4bc07caf376a4f345873ec54f33cdb24a74e", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/443c4bc07caf376a4f345873ec54f33cdb24a74e", "committedDate": "2020-09-17T17:59:06Z", "message": "Removing debugging printlns"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "879ee3e211c1b31a652909d7aa0e64f82d31fe44", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/879ee3e211c1b31a652909d7aa0e64f82d31fe44", "committedDate": "2020-09-17T17:59:06Z", "message": "Fix toString"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5ea1fc3d3c14a604fb30d2463e8603d54df3485", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/c5ea1fc3d3c14a604fb30d2463e8603d54df3485", "committedDate": "2020-09-17T17:59:06Z", "message": "Adapt to the latest API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8fc4d458b7f3738a48b1a550b5b6a745f112b05a", "author": {"user": {"login": "Christopher-Chianelli", "name": "Christopher Chianelli"}}, "url": "https://github.com/kiegroup/optaplanner/commit/8fc4d458b7f3738a48b1a550b5b6a745f112b05a", "committedDate": "2020-09-18T14:48:43Z", "message": "PLANNER-1873: Add ConstraintProvider for CoachShuttleGathering"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMzU3OTIz", "url": "https://github.com/kiegroup/optaplanner/pull/938#pullrequestreview-492357923", "createdAt": "2020-09-21T08:03:50Z", "commit": {"oid": "8fc4d458b7f3738a48b1a550b5b6a745f112b05a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwODowMzo1MFrOHVEgzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwODowMzo1MFrOHVEgzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg1NjA3Ng==", "bodyText": "Something to try if it works: You might be able to move this @CustomShadowVariable of Coach and Shuttle to Bus. Even though the sources differ, just use the union of sources.", "url": "https://github.com/kiegroup/optaplanner/pull/938#discussion_r491856076", "createdAt": "2020-09-21T08:03:50Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/coachshuttlegathering/domain/Shuttle.java", "diffHunk": "@@ -51,6 +54,14 @@ public void setDestination(StopOrHub destination) {\n         this.destination = destination;\n     }\n \n+    @Override\n+    @CustomShadowVariable(variableListenerClass = ShuttlePassengerCountTotalUpdatingVariableListener.class,\n+            sources = { @PlanningVariableReference(entityClass = BusStop.class, variableName = \"bus\"),\n+                    @PlanningVariableReference(entityClass = Shuttle.class, variableName = \"destination\") })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fc4d458b7f3738a48b1a550b5b6a745f112b05a"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMzU4OTU5", "url": "https://github.com/kiegroup/optaplanner/pull/938#pullrequestreview-492358959", "createdAt": "2020-09-21T08:05:27Z", "commit": {"oid": "8fc4d458b7f3738a48b1a550b5b6a745f112b05a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwODowNToyOFrOHVEjyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwODowNToyOFrOHVEjyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg1Njg0MQ==", "bodyText": "Please follow the naming of the other VariableListeners for consistency across examples, such as ArrivalTimeUpdatingVariableListener. These 2 methods would be \"update...\" and be below the before/after calls.", "url": "https://github.com/kiegroup/optaplanner/pull/938#discussion_r491856841", "createdAt": "2020-09-21T08:05:28Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/coachshuttlegathering/domain/solver/CoachPassengerCountTotalUpdatingVariableListener.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.coachshuttlegathering.domain.solver;\n+\n+import org.optaplanner.core.api.score.director.ScoreDirector;\n+import org.optaplanner.core.impl.domain.variable.listener.VariableListener;\n+import org.optaplanner.examples.coachshuttlegathering.domain.Bus;\n+import org.optaplanner.examples.coachshuttlegathering.domain.BusStop;\n+import org.optaplanner.examples.coachshuttlegathering.domain.Coach;\n+import org.optaplanner.examples.coachshuttlegathering.domain.CoachShuttleGatheringSolution;\n+\n+public class CoachPassengerCountTotalUpdatingVariableListener implements VariableListener<BusStop> {\n+\n+    private static void adjustBus(ScoreDirector<CoachShuttleGatheringSolution> scoreDirector, Bus bus, int difference) {\n+        if (difference == 0) {\n+            return;\n+        }\n+        scoreDirector.beforeVariableChanged(bus, \"passengerQuantityTotal\");\n+        bus.setPassengerQuantityTotal(bus.getPassengerQuantityTotal() + difference);\n+        scoreDirector.afterVariableChanged(bus, \"passengerQuantityTotal\");\n+        if (bus.getPassengerQuantityTotal() < 0) {\n+            throw new IllegalStateException(\"Passenger quantity in \" + bus + \" got under zero here.\");\n+        }\n+    }\n+\n+    private static void adjust(ScoreDirector<CoachShuttleGatheringSolution> scoreDirector, BusStop busStop,\n+            boolean increase) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fc4d458b7f3738a48b1a550b5b6a745f112b05a"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMzU5ODU0", "url": "https://github.com/kiegroup/optaplanner/pull/938#pullrequestreview-492359854", "createdAt": "2020-09-21T08:06:51Z", "commit": {"oid": "8fc4d458b7f3738a48b1a550b5b6a745f112b05a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwODowNjo1MlrOHVEmdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwODowNjo1MlrOHVEmdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg1NzUyNw==", "bodyText": "method naming: increase/decrease what?\nAlso, I wouldn't extract them into separate methods, just call true/false directly from before/after.", "url": "https://github.com/kiegroup/optaplanner/pull/938#discussion_r491857527", "createdAt": "2020-09-21T08:06:52Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/coachshuttlegathering/domain/solver/CoachPassengerCountTotalUpdatingVariableListener.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.coachshuttlegathering.domain.solver;\n+\n+import org.optaplanner.core.api.score.director.ScoreDirector;\n+import org.optaplanner.core.impl.domain.variable.listener.VariableListener;\n+import org.optaplanner.examples.coachshuttlegathering.domain.Bus;\n+import org.optaplanner.examples.coachshuttlegathering.domain.BusStop;\n+import org.optaplanner.examples.coachshuttlegathering.domain.Coach;\n+import org.optaplanner.examples.coachshuttlegathering.domain.CoachShuttleGatheringSolution;\n+\n+public class CoachPassengerCountTotalUpdatingVariableListener implements VariableListener<BusStop> {\n+\n+    private static void adjustBus(ScoreDirector<CoachShuttleGatheringSolution> scoreDirector, Bus bus, int difference) {\n+        if (difference == 0) {\n+            return;\n+        }\n+        scoreDirector.beforeVariableChanged(bus, \"passengerQuantityTotal\");\n+        bus.setPassengerQuantityTotal(bus.getPassengerQuantityTotal() + difference);\n+        scoreDirector.afterVariableChanged(bus, \"passengerQuantityTotal\");\n+        if (bus.getPassengerQuantityTotal() < 0) {\n+            throw new IllegalStateException(\"Passenger quantity in \" + bus + \" got under zero here.\");\n+        }\n+    }\n+\n+    private static void adjust(ScoreDirector<CoachShuttleGatheringSolution> scoreDirector, BusStop busStop,\n+            boolean increase) {\n+        Bus bus = busStop.getBus();\n+        if (!(bus instanceof Coach)) {\n+            return;\n+        }\n+        adjustBus(scoreDirector, bus, increase ? busStop.getPassengerQuantity() : -busStop.getPassengerQuantity());\n+    }\n+\n+    private static void increase(ScoreDirector<CoachShuttleGatheringSolution> scoreDirector, BusStop busStop) {\n+        adjust(scoreDirector, busStop, true);\n+    }\n+\n+    private static void decrease(ScoreDirector<CoachShuttleGatheringSolution> scoreDirector, BusStop busStop) {\n+        adjust(scoreDirector, busStop, false);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fc4d458b7f3738a48b1a550b5b6a745f112b05a"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMzYxODkz", "url": "https://github.com/kiegroup/optaplanner/pull/938#pullrequestreview-492361893", "createdAt": "2020-09-21T08:09:52Z", "commit": {"oid": "8fc4d458b7f3738a48b1a550b5b6a745f112b05a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyNDE3NjA2", "url": "https://github.com/kiegroup/optaplanner/pull/938#pullrequestreview-492417606", "createdAt": "2020-09-21T09:26:58Z", "commit": {"oid": "8fc4d458b7f3738a48b1a550b5b6a745f112b05a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3f62cfbe9d59ea4f61bdd8ee29ec22b66cfe6b79", "author": {"user": {"login": "Christopher-Chianelli", "name": "Christopher Chianelli"}}, "url": "https://github.com/kiegroup/optaplanner/commit/3f62cfbe9d59ea4f61bdd8ee29ec22b66cfe6b79", "committedDate": "2020-09-21T19:33:28Z", "message": "Refactor the bus passenger count listener, update names"}, "afterCommit": {"oid": "1dc8d2910875dacab8d133b073967cd4f2c59b79", "author": {"user": {"login": "Christopher-Chianelli", "name": "Christopher Chianelli"}}, "url": "https://github.com/kiegroup/optaplanner/commit/1dc8d2910875dacab8d133b073967cd4f2c59b79", "committedDate": "2020-09-21T19:35:55Z", "message": "Refactor the bus passenger count listener, update names"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1dc8d2910875dacab8d133b073967cd4f2c59b79", "author": {"user": {"login": "Christopher-Chianelli", "name": "Christopher Chianelli"}}, "url": "https://github.com/kiegroup/optaplanner/commit/1dc8d2910875dacab8d133b073967cd4f2c59b79", "committedDate": "2020-09-21T19:35:55Z", "message": "Refactor the bus passenger count listener, update names"}, "afterCommit": {"oid": "59581a56c5ebd32c61f4ff430cbbc3ae34ad5362", "author": {"user": {"login": "Christopher-Chianelli", "name": "Christopher Chianelli"}}, "url": "https://github.com/kiegroup/optaplanner/commit/59581a56c5ebd32c61f4ff430cbbc3ae34ad5362", "committedDate": "2020-09-21T19:37:25Z", "message": "Refactor the bus passenger count listener, update names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "310795edbdbb79f6519be13c8bb71cb055710134", "author": {"user": {"login": "Christopher-Chianelli", "name": "Christopher Chianelli"}}, "url": "https://github.com/kiegroup/optaplanner/commit/310795edbdbb79f6519be13c8bb71cb055710134", "committedDate": "2020-09-21T19:38:52Z", "message": "Refactor the bus passenger count listener, update names"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "59581a56c5ebd32c61f4ff430cbbc3ae34ad5362", "author": {"user": {"login": "Christopher-Chianelli", "name": "Christopher Chianelli"}}, "url": "https://github.com/kiegroup/optaplanner/commit/59581a56c5ebd32c61f4ff430cbbc3ae34ad5362", "committedDate": "2020-09-21T19:37:25Z", "message": "Refactor the bus passenger count listener, update names"}, "afterCommit": {"oid": "310795edbdbb79f6519be13c8bb71cb055710134", "author": {"user": {"login": "Christopher-Chianelli", "name": "Christopher Chianelli"}}, "url": "https://github.com/kiegroup/optaplanner/commit/310795edbdbb79f6519be13c8bb71cb055710134", "committedDate": "2020-09-21T19:38:52Z", "message": "Refactor the bus passenger count listener, update names"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyOTI0Mjc5", "url": "https://github.com/kiegroup/optaplanner/pull/938#pullrequestreview-492924279", "createdAt": "2020-09-21T19:40:47Z", "commit": {"oid": "59581a56c5ebd32c61f4ff430cbbc3ae34ad5362"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxOTo0MjowMVrOHVfyyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxOTo0Njo0MVrOHVf8Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMwMzA0OQ==", "bodyText": "We can probably improve this:\nint quantity = busStop.getPassengerQuantity();\nif (quantity == 0) {\n    return;\n}\nint difference = increase ? quantity : -quantity;\n\nIf this code is called often, this will bring a small perf improvement.", "url": "https://github.com/kiegroup/optaplanner/pull/938#discussion_r492303049", "createdAt": "2020-09-21T19:42:01Z", "author": {"login": "triceo"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/coachshuttlegathering/domain/solver/BusPassengerCountTotalUpdatingVariableListener.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.coachshuttlegathering.domain.solver;\n+\n+import org.optaplanner.core.api.score.director.ScoreDirector;\n+import org.optaplanner.core.impl.domain.variable.listener.VariableListener;\n+import org.optaplanner.examples.coachshuttlegathering.domain.Bus;\n+import org.optaplanner.examples.coachshuttlegathering.domain.BusStop;\n+import org.optaplanner.examples.coachshuttlegathering.domain.CoachShuttleGatheringSolution;\n+\n+public abstract class BusPassengerCountTotalUpdatingVariableListener implements VariableListener<Object> {\n+\n+    @Override\n+    public void beforeEntityAdded(ScoreDirector scoreDirector, Object busStop) {\n+        // Do nothing\n+    }\n+\n+    @Override\n+    public void afterEntityAdded(ScoreDirector scoreDirector, Object entity) {\n+        if (entity instanceof BusStop) {\n+            updateBusPassengerCount(scoreDirector, (BusStop) entity, true);\n+        }\n+    }\n+\n+    @Override\n+    public void beforeVariableChanged(ScoreDirector scoreDirector, Object entity) {\n+        if (entity instanceof BusStop) {\n+            updateBusPassengerCount(scoreDirector, (BusStop) entity, false);\n+        }\n+    }\n+\n+    @Override\n+    public void afterVariableChanged(ScoreDirector scoreDirector, Object entity) {\n+        if (entity instanceof BusStop) {\n+            updateBusPassengerCount(scoreDirector, (BusStop) entity, true);\n+        }\n+    }\n+\n+    @Override\n+    public void beforeEntityRemoved(ScoreDirector scoreDirector, Object entity) {\n+        // Do nothing\n+    }\n+\n+    @Override\n+    public void afterEntityRemoved(ScoreDirector scoreDirector, Object entity) {\n+        if (entity instanceof BusStop) {\n+            updateBusPassengerCount(scoreDirector, (BusStop) entity, false);\n+        }\n+    }\n+\n+    private void updateBusPassengerCount(ScoreDirector<CoachShuttleGatheringSolution> scoreDirector, BusStop busStop,\n+            boolean increase) {\n+        Bus bus = busStop.getBus();\n+        if (!isCorrectBusInstance(bus)) {\n+            return;\n+        }\n+        int difference = increase ? busStop.getPassengerQuantity() : -busStop.getPassengerQuantity();\n+        if (difference == 0) {\n+            return;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "310795edbdbb79f6519be13c8bb71cb055710134"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMwMzUzMw==", "bodyText": "Let's import static ...ConstraintCollectors...\nAFAIK the other constraint providers do it too.", "url": "https://github.com/kiegroup/optaplanner/pull/938#discussion_r492303533", "createdAt": "2020-09-21T19:43:03Z", "author": {"login": "triceo"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/coachshuttlegathering/solver/CoachShuttleGatheringConstraintProvider.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package org.optaplanner.examples.coachshuttlegathering.solver;\n+\n+import java.util.function.Function;\n+\n+import org.optaplanner.core.api.score.buildin.hardsoftlong.HardSoftLongScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintCollectors;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.core.api.score.stream.Joiners;\n+import org.optaplanner.examples.coachshuttlegathering.domain.Bus;\n+import org.optaplanner.examples.coachshuttlegathering.domain.BusStop;\n+import org.optaplanner.examples.coachshuttlegathering.domain.Coach;\n+import org.optaplanner.examples.coachshuttlegathering.domain.Shuttle;\n+import org.optaplanner.examples.coachshuttlegathering.domain.StopOrHub;\n+\n+public class CoachShuttleGatheringConstraintProvider implements ConstraintProvider {\n+    final static String CONSTRAINT_PACKAGE = \"org.optaplanner.examples.coachshuttlegathering.solver\";\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n+        return new Constraint[] {\n+                coachStopLimit(constraintFactory),\n+                shuttleCapacity(constraintFactory),\n+                coachCapacity(constraintFactory),\n+                coachCapacityShuttleButNoShuttle(constraintFactory),\n+                coachCapacityCorrection(constraintFactory),\n+                transportTime(constraintFactory),\n+                shuttleDestinationIsCoachOrHub(constraintFactory),\n+                shuttleSetupCost(constraintFactory),\n+                distanceFromPrevious(constraintFactory),\n+                distanceBusStopToBusDestination(constraintFactory),\n+                distanceCoachDirectlyToDestination(constraintFactory)\n+        };\n+    }\n+\n+    Constraint coachStopLimit(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Coach.class)\n+                .join(BusStop.class, Joiners.equal(coach -> coach, BusStop::getBus))\n+                .groupBy((coach, busStop) -> coach, ConstraintCollectors.countBi())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "310795edbdbb79f6519be13c8bb71cb055710134"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMwMzk1Mw==", "bodyText": "Not sure what the convention here is, but maybe import static ... HardSoftLongScore... as well?", "url": "https://github.com/kiegroup/optaplanner/pull/938#discussion_r492303953", "createdAt": "2020-09-21T19:43:54Z", "author": {"login": "triceo"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/coachshuttlegathering/solver/CoachShuttleGatheringConstraintProvider.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package org.optaplanner.examples.coachshuttlegathering.solver;\n+\n+import java.util.function.Function;\n+\n+import org.optaplanner.core.api.score.buildin.hardsoftlong.HardSoftLongScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintCollectors;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.core.api.score.stream.Joiners;\n+import org.optaplanner.examples.coachshuttlegathering.domain.Bus;\n+import org.optaplanner.examples.coachshuttlegathering.domain.BusStop;\n+import org.optaplanner.examples.coachshuttlegathering.domain.Coach;\n+import org.optaplanner.examples.coachshuttlegathering.domain.Shuttle;\n+import org.optaplanner.examples.coachshuttlegathering.domain.StopOrHub;\n+\n+public class CoachShuttleGatheringConstraintProvider implements ConstraintProvider {\n+    final static String CONSTRAINT_PACKAGE = \"org.optaplanner.examples.coachshuttlegathering.solver\";\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n+        return new Constraint[] {\n+                coachStopLimit(constraintFactory),\n+                shuttleCapacity(constraintFactory),\n+                coachCapacity(constraintFactory),\n+                coachCapacityShuttleButNoShuttle(constraintFactory),\n+                coachCapacityCorrection(constraintFactory),\n+                transportTime(constraintFactory),\n+                shuttleDestinationIsCoachOrHub(constraintFactory),\n+                shuttleSetupCost(constraintFactory),\n+                distanceFromPrevious(constraintFactory),\n+                distanceBusStopToBusDestination(constraintFactory),\n+                distanceCoachDirectlyToDestination(constraintFactory)\n+        };\n+    }\n+\n+    Constraint coachStopLimit(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Coach.class)\n+                .join(BusStop.class, Joiners.equal(coach -> coach, BusStop::getBus))\n+                .groupBy((coach, busStop) -> coach, ConstraintCollectors.countBi())\n+                .filter((coach, stopCount) -> stopCount > coach.getStopLimit())\n+                .penalizeLong(CONSTRAINT_PACKAGE, \"coachStopLimit\", HardSoftLongScore.ONE_HARD,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "310795edbdbb79f6519be13c8bb71cb055710134"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMwNDc5OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Correct the double counting\n          \n          \n            \n                // Explanation: groupBy is like accumlate, but it doesn't trigger on empty streams.\n          \n          \n            \n                // We need something like\n          \n          \n            \n                // .accumlate(Function<ConstraintStream, UniConstraintStream<T>>, T defaultValue): ConstraintStream+1\n          \n          \n            \n                // To change it from 3 separate constraints (one for the normal case, one in the case of empty stream,\n          \n          \n            \n                // one to remove double counting)\n          \n          \n            \n                /* \n          \n          \n            \n                   Correct the double counting\n          \n          \n            \n                   Explanation: groupBy is like accumulate, but it doesn't trigger on empty streams.\n          \n          \n            \n                   We need something like\n          \n          \n            \n                    .accumulate(Function<ConstraintStream, UniConstraintStream<T>>, T defaultValue): ConstraintStream+1\n          \n          \n            \n                   To change it from 3 separate constraints (one for the normal case, one in the case of empty stream,\n          \n          \n            \n                   one to remove double counting).\n          \n          \n            \n                 */", "url": "https://github.com/kiegroup/optaplanner/pull/938#discussion_r492304799", "createdAt": "2020-09-21T19:45:21Z", "author": {"login": "triceo"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/coachshuttlegathering/solver/CoachShuttleGatheringConstraintProvider.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package org.optaplanner.examples.coachshuttlegathering.solver;\n+\n+import java.util.function.Function;\n+\n+import org.optaplanner.core.api.score.buildin.hardsoftlong.HardSoftLongScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintCollectors;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.core.api.score.stream.Joiners;\n+import org.optaplanner.examples.coachshuttlegathering.domain.Bus;\n+import org.optaplanner.examples.coachshuttlegathering.domain.BusStop;\n+import org.optaplanner.examples.coachshuttlegathering.domain.Coach;\n+import org.optaplanner.examples.coachshuttlegathering.domain.Shuttle;\n+import org.optaplanner.examples.coachshuttlegathering.domain.StopOrHub;\n+\n+public class CoachShuttleGatheringConstraintProvider implements ConstraintProvider {\n+    final static String CONSTRAINT_PACKAGE = \"org.optaplanner.examples.coachshuttlegathering.solver\";\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n+        return new Constraint[] {\n+                coachStopLimit(constraintFactory),\n+                shuttleCapacity(constraintFactory),\n+                coachCapacity(constraintFactory),\n+                coachCapacityShuttleButNoShuttle(constraintFactory),\n+                coachCapacityCorrection(constraintFactory),\n+                transportTime(constraintFactory),\n+                shuttleDestinationIsCoachOrHub(constraintFactory),\n+                shuttleSetupCost(constraintFactory),\n+                distanceFromPrevious(constraintFactory),\n+                distanceBusStopToBusDestination(constraintFactory),\n+                distanceCoachDirectlyToDestination(constraintFactory)\n+        };\n+    }\n+\n+    Constraint coachStopLimit(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Coach.class)\n+                .join(BusStop.class, Joiners.equal(coach -> coach, BusStop::getBus))\n+                .groupBy((coach, busStop) -> coach, ConstraintCollectors.countBi())\n+                .filter((coach, stopCount) -> stopCount > coach.getStopLimit())\n+                .penalizeLong(CONSTRAINT_PACKAGE, \"coachStopLimit\", HardSoftLongScore.ONE_HARD,\n+                        (coach, stopCount) -> (stopCount - coach.getStopLimit()) * 1000000L);\n+    }\n+\n+    Constraint shuttleCapacity(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Shuttle.class)\n+                .filter((bus) -> bus.getPassengerQuantityTotal() > bus.getCapacity())\n+                .penalizeLong(CONSTRAINT_PACKAGE, \"shuttleCapacity\", HardSoftLongScore.ONE_HARD,\n+                        (bus) -> (bus.getPassengerQuantityTotal() - bus.getCapacity()) * 1000L);\n+    }\n+\n+    Constraint coachCapacity(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Coach.class)\n+                .join(Shuttle.class)\n+                .join(BusStop.class, Joiners.equal((coach, shuttle) -> shuttle.getDestination(), stop -> stop),\n+                        Joiners.equal((coach, shuttle) -> coach, BusStop::getBus))\n+                .join(BusStop.class, Joiners.equal((coach, shuttle, stop) -> shuttle, BusStop::getBus))\n+                .groupBy((coach, shuttle, stop1, stop2) -> coach,\n+                        ConstraintCollectors.sum((coach, shuttle, stop1, stop2) -> stop2.getPassengerQuantity()))\n+                .filter((coach,\n+                        shuttlePassengerQuantityTotal) -> coach.getPassengerQuantityTotal()\n+                                + shuttlePassengerQuantityTotal > coach.getCapacity())\n+                .penalizeLong(CONSTRAINT_PACKAGE, \"coachCapacity\", HardSoftLongScore.ONE_HARD,\n+                        (coach, shuttlePassengerQuantityTotal) -> (coach.getPassengerQuantityTotal()\n+                                + shuttlePassengerQuantityTotal - coach.getCapacity()) * 1000L);\n+    }\n+\n+    // Correct the double counting\n+    // Explanation: groupBy is like accumlate, but it doesn't trigger on empty streams.\n+    // We need something like\n+    // .accumlate(Function<ConstraintStream, UniConstraintStream<T>>, T defaultValue): ConstraintStream+1\n+    // To change it from 3 separate constraints (one for the normal case, one in the case of empty stream,\n+    // one to remove double counting)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "310795edbdbb79f6519be13c8bb71cb055710134"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMwNTQzOQ==", "bodyText": "Another static import on Joiners?", "url": "https://github.com/kiegroup/optaplanner/pull/938#discussion_r492305439", "createdAt": "2020-09-21T19:46:41Z", "author": {"login": "triceo"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/coachshuttlegathering/solver/CoachShuttleGatheringConstraintProvider.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package org.optaplanner.examples.coachshuttlegathering.solver;\n+\n+import java.util.function.Function;\n+\n+import org.optaplanner.core.api.score.buildin.hardsoftlong.HardSoftLongScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintCollectors;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.core.api.score.stream.Joiners;\n+import org.optaplanner.examples.coachshuttlegathering.domain.Bus;\n+import org.optaplanner.examples.coachshuttlegathering.domain.BusStop;\n+import org.optaplanner.examples.coachshuttlegathering.domain.Coach;\n+import org.optaplanner.examples.coachshuttlegathering.domain.Shuttle;\n+import org.optaplanner.examples.coachshuttlegathering.domain.StopOrHub;\n+\n+public class CoachShuttleGatheringConstraintProvider implements ConstraintProvider {\n+    final static String CONSTRAINT_PACKAGE = \"org.optaplanner.examples.coachshuttlegathering.solver\";\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n+        return new Constraint[] {\n+                coachStopLimit(constraintFactory),\n+                shuttleCapacity(constraintFactory),\n+                coachCapacity(constraintFactory),\n+                coachCapacityShuttleButNoShuttle(constraintFactory),\n+                coachCapacityCorrection(constraintFactory),\n+                transportTime(constraintFactory),\n+                shuttleDestinationIsCoachOrHub(constraintFactory),\n+                shuttleSetupCost(constraintFactory),\n+                distanceFromPrevious(constraintFactory),\n+                distanceBusStopToBusDestination(constraintFactory),\n+                distanceCoachDirectlyToDestination(constraintFactory)\n+        };\n+    }\n+\n+    Constraint coachStopLimit(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Coach.class)\n+                .join(BusStop.class, Joiners.equal(coach -> coach, BusStop::getBus))\n+                .groupBy((coach, busStop) -> coach, ConstraintCollectors.countBi())\n+                .filter((coach, stopCount) -> stopCount > coach.getStopLimit())\n+                .penalizeLong(CONSTRAINT_PACKAGE, \"coachStopLimit\", HardSoftLongScore.ONE_HARD,\n+                        (coach, stopCount) -> (stopCount - coach.getStopLimit()) * 1000000L);\n+    }\n+\n+    Constraint shuttleCapacity(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Shuttle.class)\n+                .filter((bus) -> bus.getPassengerQuantityTotal() > bus.getCapacity())\n+                .penalizeLong(CONSTRAINT_PACKAGE, \"shuttleCapacity\", HardSoftLongScore.ONE_HARD,\n+                        (bus) -> (bus.getPassengerQuantityTotal() - bus.getCapacity()) * 1000L);\n+    }\n+\n+    Constraint coachCapacity(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Coach.class)\n+                .join(Shuttle.class)\n+                .join(BusStop.class, Joiners.equal((coach, shuttle) -> shuttle.getDestination(), stop -> stop),\n+                        Joiners.equal((coach, shuttle) -> coach, BusStop::getBus))\n+                .join(BusStop.class, Joiners.equal((coach, shuttle, stop) -> shuttle, BusStop::getBus))\n+                .groupBy((coach, shuttle, stop1, stop2) -> coach,\n+                        ConstraintCollectors.sum((coach, shuttle, stop1, stop2) -> stop2.getPassengerQuantity()))\n+                .filter((coach,\n+                        shuttlePassengerQuantityTotal) -> coach.getPassengerQuantityTotal()\n+                                + shuttlePassengerQuantityTotal > coach.getCapacity())\n+                .penalizeLong(CONSTRAINT_PACKAGE, \"coachCapacity\", HardSoftLongScore.ONE_HARD,\n+                        (coach, shuttlePassengerQuantityTotal) -> (coach.getPassengerQuantityTotal()\n+                                + shuttlePassengerQuantityTotal - coach.getCapacity()) * 1000L);\n+    }\n+\n+    // Correct the double counting\n+    // Explanation: groupBy is like accumlate, but it doesn't trigger on empty streams.\n+    // We need something like\n+    // .accumlate(Function<ConstraintStream, UniConstraintStream<T>>, T defaultValue): ConstraintStream+1\n+    // To change it from 3 separate constraints (one for the normal case, one in the case of empty stream,\n+    // one to remove double counting)\n+    Constraint coachCapacityCorrection(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Coach.class)\n+                .join(Shuttle.class)\n+                .join(BusStop.class, Joiners.equal((coach, shuttle) -> shuttle.getDestination(), stop -> stop),\n+                        Joiners.equal((coach, shuttle) -> coach, BusStop::getBus))\n+                .join(BusStop.class, Joiners.equal((coach, shuttle, stop) -> shuttle, BusStop::getBus))\n+                .groupBy((coach, shuttle, stop1, stop2) -> coach,\n+                        ConstraintCollectors.sum((coach, shuttle, stop1, stop2) -> stop2.getPassengerQuantity()))\n+                .filter((coach,\n+                        shuttlePassengerQuantityTotal) -> coach.getPassengerQuantityTotal() > coach.getCapacity())\n+                .rewardLong(CONSTRAINT_PACKAGE, \"coachCapacityCorrection\", HardSoftLongScore.ONE_HARD,\n+                        (coach, shuttlePassengerQuantityTotal) -> (coach.getPassengerQuantityTotal() - coach.getCapacity())\n+                                * 1000L);\n+    }\n+\n+    Constraint coachCapacityShuttleButNoShuttle(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Coach.class)\n+                .filter(coach -> coach.getPassengerQuantityTotal() > coach.getCapacity())\n+                .penalizeLong(CONSTRAINT_PACKAGE, \"coachCapacityShuttleButNoShuttle\", HardSoftLongScore.ONE_HARD,\n+                        coach -> (coach.getPassengerQuantityTotal() - coach.getCapacity()) * 1000L);\n+    }\n+\n+    Constraint transportTime(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BusStop.class)\n+                .filter((busStop) -> busStop.getTransportTimeToHub() != null && busStop.getTransportTimeRemainder() < 0)\n+                .penalizeLong(CONSTRAINT_PACKAGE, \"transportTime\", HardSoftLongScore.ONE_HARD,\n+                        (busStop) -> -busStop.getTransportTimeRemainder());\n+    }\n+\n+    Constraint shuttleDestinationIsCoachOrHub(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Shuttle.class)\n+                .filter((shuttle) -> shuttle.getDestination() != null)\n+                .join(StopOrHub.class, Joiners.equal(Shuttle::getDestination, Function.identity()))\n+                .filter((shuttle, stop) -> !stop.isVisitedByCoach())\n+                .penalizeLong(CONSTRAINT_PACKAGE, \"shuttleDestinationIsCoachOrHub\", HardSoftLongScore.ONE_HARD,\n+                        (bus, stop) -> 1000000000L);\n+    }\n+\n+    Constraint shuttleSetupCost(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Bus.class)\n+                .filter(bus -> bus.getNextStop() != null)\n+                .penalizeLong(CONSTRAINT_PACKAGE, \"shuttleSetupCost\", HardSoftLongScore.ONE_SOFT, Bus::getSetupCost);\n+    }\n+\n+    Constraint distanceFromPrevious(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BusStop.class)\n+                .filter(bus -> bus.getPreviousBusOrStop() != null)\n+                .penalizeLong(CONSTRAINT_PACKAGE, \"distanceFromPrevious\", HardSoftLongScore.ONE_SOFT,\n+                        BusStop::getDistanceFromPreviousCost);\n+    }\n+\n+    Constraint distanceBusStopToBusDestination(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BusStop.class)\n+                .filter(busStop -> busStop.getNextStop() == null)\n+                .join(Bus.class, Joiners.equal(BusStop::getBus, Function.identity()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "310795edbdbb79f6519be13c8bb71cb055710134"}, "originalPosition": 129}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42499218083324ad6eeabe6d70656e0f84ae795f", "author": {"user": {"login": "Christopher-Chianelli", "name": "Christopher Chianelli"}}, "url": "https://github.com/kiegroup/optaplanner/commit/42499218083324ad6eeabe6d70656e0f84ae795f", "committedDate": "2020-09-21T20:09:38Z", "message": "Remove check that never happens, use static imports for Joiners and Collectors"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyOTQ2MDE5", "url": "https://github.com/kiegroup/optaplanner/pull/938#pullrequestreview-492946019", "createdAt": "2020-09-21T20:13:45Z", "commit": {"oid": "42499218083324ad6eeabe6d70656e0f84ae795f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2da93f7837a692ab06e8e670a2a2bddd3372e3c", "author": {"user": {"login": "Christopher-Chianelli", "name": "Christopher Chianelli"}}, "url": "https://github.com/kiegroup/optaplanner/commit/a2da93f7837a692ab06e8e670a2a2bddd3372e3c", "committedDate": "2020-09-22T14:35:18Z", "message": "Add constraint provider tests for coach shuttle gathering"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3213, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}