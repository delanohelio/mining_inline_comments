{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNDgyNzcy", "number": 676, "title": "PLANNER-1791 Add SolverManager tests", "bodyText": "This PR incorporates #665 + addresses a majority of review comments.\n@michaltomco please go over the original comments from #665 and open a new PR to address the remaining ones of them.", "createdAt": "2020-02-07T15:59:55Z", "url": "https://github.com/kiegroup/optaplanner/pull/676", "merged": true, "mergeCommit": {"oid": "26c6102e15a08f4e52739903ab67255958b13067"}, "closed": true, "closedAt": "2020-02-07T16:08:10Z", "author": {"login": "rsynek"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcCBcgFAH2gAyMzcyNDgyNzcyOjgxYTBkZDk1ZTliMjNjY2ExYThhZDk0ZmRiZGIwNzdiNTdkOWUxNjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcCBlKxAFqTM1NTI2MTkyMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "81a0dd95e9b23cca1a8ad94fdbdb077b57d9e164", "author": {"user": null}, "url": "https://github.com/kiegroup/optaplanner/commit/81a0dd95e9b23cca1a8ad94fdbdb077b57d9e164", "committedDate": "2020-02-07T15:54:58Z", "message": "PLANNER-1791 Add SolverManager tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3fdb1b210ad8bb1fb5118b7d2ecaed543cb5cf5", "author": {"user": null}, "url": "https://github.com/kiegroup/optaplanner/commit/b3fdb1b210ad8bb1fb5118b7d2ecaed543cb5cf5", "committedDate": "2020-02-07T15:54:58Z", "message": "PLANNER-1791 Add checks for consumers and multiple threaded moves"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc29f27df29a8233edcda076b4b37bc6fe0ed991", "author": {"user": null}, "url": "https://github.com/kiegroup/optaplanner/commit/cc29f27df29a8233edcda076b4b37bc6fe0ed991", "committedDate": "2020-02-07T15:54:58Z", "message": "PLANNER-1791 Let the config deduce threadCount automatically"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d16ffca5b9c88c54e827dea0b52dca4fd2b0d74", "author": {"user": null}, "url": "https://github.com/kiegroup/optaplanner/commit/6d16ffca5b9c88c54e827dea0b52dca4fd2b0d74", "committedDate": "2020-02-07T15:54:58Z", "message": "PLANNER-1791 Refactor methods and decrease timeout"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44b47afd60dff2d8de80fa0d2af8c21d01062a1b", "author": {"user": null}, "url": "https://github.com/kiegroup/optaplanner/commit/44b47afd60dff2d8de80fa0d2af8c21d01062a1b", "committedDate": "2020-02-07T15:54:58Z", "message": "PLANNER-1791 Increase timeout to a more reasonable amount"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b98e04642265f3bea99898dce21e139593a9ccc", "author": {"user": null}, "url": "https://github.com/kiegroup/optaplanner/commit/2b98e04642265f3bea99898dce21e139593a9ccc", "committedDate": "2020-02-07T15:54:58Z", "message": "PLANNER-1791 Add Jira link to @Ignore text"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4cb00b67bb8dbf5db1a9948a14d3fb54dceeae4", "author": {"user": {"login": "rsynek", "name": "Radovan Synek"}}, "url": "https://github.com/kiegroup/optaplanner/commit/f4cb00b67bb8dbf5db1a9948a14d3fb54dceeae4", "committedDate": "2020-02-07T15:54:58Z", "message": "Address review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1MjYxNjk0", "url": "https://github.com/kiegroup/optaplanner/pull/676#pullrequestreview-355261694", "createdAt": "2020-02-07T16:04:06Z", "commit": {"oid": "f4cb00b67bb8dbf5db1a9948a14d3fb54dceeae4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjowNDowNlrOFnB_lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjowNDowNlrOFnB_lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ3MTQ0Ng==", "bodyText": "Are you sure you want to bring the timeouts down to 1 minute isntead of 10 minutes? I remember we set it to 10 minutes for good reasons, even though the slowest test only took 10 seconds on our machines back then.", "url": "https://github.com/kiegroup/optaplanner/pull/676#discussion_r376471446", "createdAt": "2020-02-07T16:04:06Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/test/java/org/optaplanner/core/api/solver/SolverManagerTest.java", "diffHunk": "@@ -47,31 +57,35 @@\n \n public class SolverManagerTest {\n \n-    @Test(timeout = 600_000)\n+    @Test(timeout = 60_000)\n     public void solveBatch_2InParallel() throws ExecutionException, InterruptedException {\n-        CyclicBarrier barrier = new CyclicBarrier(2);\n         final SolverConfig solverConfig = PlannerTestUtils.buildSolverConfig(TestdataSolution.class, TestdataEntity.class)\n-                .withPhases(new CustomPhaseConfig().withCustomPhaseCommands(\n-                        scoreDirector -> {\n-                            try {\n-                                barrier.await();\n-                            } catch (InterruptedException | BrokenBarrierException e) {\n-                                fail(\"Cyclic barrier failed.\");\n-                            }\n-                        }), new ConstructionHeuristicPhaseConfig());\n+                .withPhases(createPhaseWithConcurrentSolvingStart(2), new ConstructionHeuristicPhaseConfig());\n         SolverManager<TestdataSolution, Long> solverManager = SolverManager.create(\n                 solverConfig, new SolverManagerConfig().withParallelSolverCount(\"2\"));\n \n         SolverJob<TestdataSolution, Long> solverJob1 = solverManager.solve(1L,\n-                PlannerTestUtils.generateTestdataSolution(\"s1\"));\n+                                                                           PlannerTestUtils.generateTestdataSolution(\"s1\"));\n         SolverJob<TestdataSolution, Long> solverJob2 = solverManager.solve(2L,\n-                PlannerTestUtils.generateTestdataSolution(\"s2\"));\n+                                                                           PlannerTestUtils.generateTestdataSolution(\"s2\"));\n \n         assertSolutionInitialized(solverJob1.getFinalBestSolution());\n         assertSolutionInitialized(solverJob2.getFinalBestSolution());\n     }\n \n-    @Test(timeout = 600_000)\n+    private CustomPhaseConfig createPhaseWithConcurrentSolvingStart(int barrierPartiesCount) {\n+        CyclicBarrier barrier = new CyclicBarrier(barrierPartiesCount);\n+        return new CustomPhaseConfig().withCustomPhaseCommands(\n+                scoreDirector -> {\n+                    try {\n+                        barrier.await();\n+                    } catch (InterruptedException | BrokenBarrierException e) {\n+                        fail(\"Cyclic barrier failed.\");\n+                    }\n+                });\n+    }\n+\n+    @Test(timeout = 60_000)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4cb00b67bb8dbf5db1a9948a14d3fb54dceeae4"}, "originalPosition": 81}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1MjYxOTIw", "url": "https://github.com/kiegroup/optaplanner/pull/676#pullrequestreview-355261920", "createdAt": "2020-02-07T16:04:26Z", "commit": {"oid": "f4cb00b67bb8dbf5db1a9948a14d3fb54dceeae4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3073, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}