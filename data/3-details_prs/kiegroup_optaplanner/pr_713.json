{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzNDM5NDM2", "number": 713, "title": "PLANNER-1861 ConstraintVerifier API", "bodyText": "", "createdAt": "2020-03-04T09:41:15Z", "url": "https://github.com/kiegroup/optaplanner/pull/713", "merged": true, "mergeCommit": {"oid": "c684080674b7089bd8d2767ceb09383f7605e2d3"}, "closed": true, "closedAt": "2020-03-27T18:33:34Z", "author": {"login": "triceo"}, "timelineItems": {"totalCount": 82, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcL91lNgFqTM3MTE3NjczNw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcR0_7UgH2gAyMzgzNDM5NDM2OjEwYzBhZDU3MzM1YTVkZDBlOGQ0ODE3N2Q4N2JhZGVhYzc3MDhjNTc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxMTc2NzM3", "url": "https://github.com/kiegroup/optaplanner/pull/713#pullrequestreview-371176737", "createdAt": "2020-03-09T13:21:58Z", "commit": {"oid": "6611cdbf2c278d69515e3e0a3a7fd1312ca0026e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMzoyMTo1OVrOFzmubw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMzoyMTo1OVrOFzmubw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY1NjE3NQ==", "bodyText": "test method should not start with \"test\", that's verbose (and junit 3 era)", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r389656175", "createdAt": "2020-03-09T13:21:59Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.nqueens.solver.score;\n+\n+import org.junit.Test;\n+import org.optaplanner.core.api.score.buildin.simple.SimpleScore;\n+import org.optaplanner.examples.nqueens.domain.NQueens;\n+import org.optaplanner.examples.nqueens.domain.Queen;\n+import org.optaplanner.examples.nqueens.domain.Row;\n+import org.optaplanner.test.impl.score.stream.ConstraintProviderVerifier;\n+\n+import static org.optaplanner.test.impl.score.stream.ConstraintVerifier.forConstraint;\n+import static org.optaplanner.test.impl.score.stream.ConstraintVerifier.forConstraintProvider;\n+\n+public class NQueensConstraintProviderTest {\n+\n+    // Dummy data, the tests don't actually do anything.\n+    private Queen queen1, queen2;\n+    private Row row1, row2;\n+\n+    @Test\n+    public void testSingleConstraint() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6611cdbf2c278d69515e3e0a3a7fd1312ca0026e"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxMTc3NDU0", "url": "https://github.com/kiegroup/optaplanner/pull/713#pullrequestreview-371177454", "createdAt": "2020-03-09T13:22:58Z", "commit": {"oid": "6611cdbf2c278d69515e3e0a3a7fd1312ca0026e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMzoyMjo1OFrOFzmyWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMzoyMjo1OFrOFzmyWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY1NzE3OA==", "bodyText": "Let's write the code to initialize those in the test strawman too.\nIt might affect how we design methods, such as adding varargs params.", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r389657178", "createdAt": "2020-03-09T13:22:58Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.nqueens.solver.score;\n+\n+import org.junit.Test;\n+import org.optaplanner.core.api.score.buildin.simple.SimpleScore;\n+import org.optaplanner.examples.nqueens.domain.NQueens;\n+import org.optaplanner.examples.nqueens.domain.Queen;\n+import org.optaplanner.examples.nqueens.domain.Row;\n+import org.optaplanner.test.impl.score.stream.ConstraintProviderVerifier;\n+\n+import static org.optaplanner.test.impl.score.stream.ConstraintVerifier.forConstraint;\n+import static org.optaplanner.test.impl.score.stream.ConstraintVerifier.forConstraintProvider;\n+\n+public class NQueensConstraintProviderTest {\n+\n+    // Dummy data, the tests don't actually do anything.\n+    private Queen queen1, queen2;\n+    private Row row1, row2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6611cdbf2c278d69515e3e0a3a7fd1312ca0026e"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxMTc4MzIx", "url": "https://github.com/kiegroup/optaplanner/pull/713#pullrequestreview-371178321", "createdAt": "2020-03-09T13:24:07Z", "commit": {"oid": "6611cdbf2c278d69515e3e0a3a7fd1312ca0026e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMzoyNDowN1rOFzm3Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMzoyNDowN1rOFzm3Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY1ODQyNw==", "bodyText": "All ScoreVerifier checks should be regardless of the constraingWeight. Only the matchWeight needs to be asserted.\nThis is for both fixed constraintWeight and penalizeConfigurable constraintWeights etc.\nSo there is no need for a \"SimpleScore.ONE\" here.\nIt should verify if it's a penality or a reward. So no \"impact\" in most cases.\nWe need an .expectPenality(1) (or .assertPenality(1)?) I guess. And assertReward(...). And .assertPenality() with no parameters that is same as with 1.", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r389658427", "createdAt": "2020-03-09T13:24:07Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.nqueens.solver.score;\n+\n+import org.junit.Test;\n+import org.optaplanner.core.api.score.buildin.simple.SimpleScore;\n+import org.optaplanner.examples.nqueens.domain.NQueens;\n+import org.optaplanner.examples.nqueens.domain.Queen;\n+import org.optaplanner.examples.nqueens.domain.Row;\n+import org.optaplanner.test.impl.score.stream.ConstraintProviderVerifier;\n+\n+import static org.optaplanner.test.impl.score.stream.ConstraintVerifier.forConstraint;\n+import static org.optaplanner.test.impl.score.stream.ConstraintVerifier.forConstraintProvider;\n+\n+public class NQueensConstraintProviderTest {\n+\n+    // Dummy data, the tests don't actually do anything.\n+    private Queen queen1, queen2;\n+    private Row row1, row2;\n+\n+    @Test\n+    public void testSingleConstraint() {\n+        NQueensConstraintProvider constraintProvider = new NQueensConstraintProvider();\n+        forConstraint(constraintProvider::ascendingDiagonalConflict)\n+                .givenFacts(queen1, queen2, row1, row2)\n+                .expectImpact(SimpleScore.ONE)  // No type check here. Wrong score type fails at runtime.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6611cdbf2c278d69515e3e0a3a7fd1312ca0026e"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxMTgyMDU3", "url": "https://github.com/kiegroup/optaplanner/pull/713#pullrequestreview-371182057", "createdAt": "2020-03-09T13:28:55Z", "commit": {"oid": "6611cdbf2c278d69515e3e0a3a7fd1312ca0026e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMzoyODo1NlrOFznMpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMzoyODo1NlrOFznMpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY2MzkwOA==", "bodyText": "where do we set which constraint we're verifying?\nThe goal is to verify a single constraint in isolation, so that when refactoring the other constraints, this unit test is unaffected.", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r389663908", "createdAt": "2020-03-09T13:28:56Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.nqueens.solver.score;\n+\n+import org.junit.Test;\n+import org.optaplanner.core.api.score.buildin.simple.SimpleScore;\n+import org.optaplanner.examples.nqueens.domain.NQueens;\n+import org.optaplanner.examples.nqueens.domain.Queen;\n+import org.optaplanner.examples.nqueens.domain.Row;\n+import org.optaplanner.test.impl.score.stream.ConstraintProviderVerifier;\n+\n+import static org.optaplanner.test.impl.score.stream.ConstraintVerifier.forConstraint;\n+import static org.optaplanner.test.impl.score.stream.ConstraintVerifier.forConstraintProvider;\n+\n+public class NQueensConstraintProviderTest {\n+\n+    // Dummy data, the tests don't actually do anything.\n+    private Queen queen1, queen2;\n+    private Row row1, row2;\n+\n+    @Test\n+    public void testSingleConstraint() {\n+        NQueensConstraintProvider constraintProvider = new NQueensConstraintProvider();\n+        forConstraint(constraintProvider::ascendingDiagonalConflict)\n+                .givenFacts(queen1, queen2, row1, row2)\n+                .expectImpact(SimpleScore.ONE)  // No type check here. Wrong score type fails at runtime.\n+                .expectConstraintMatches(queen1, queen2);\n+        //      ^^^^^^ We shouldn't allow this until we have a clear definition and correct implementation of\n+        //      constraint matches.\n+        //      I suggest that this is out of scope for now, and therefore so is this method.\n+    }\n+\n+    @Test\n+    public void testEntireConstraintProvider() {\n+        forConstraintProvider(new NQueensConstraintProvider())\n+                .givenPlanningSolution(new NQueens()) // You would read some XStream solution here.\n+                .expectImpact(SimpleScore.ONE); // Does not allow to check constraint matches, pointless with Solution.\n+    }\n+\n+    @Test\n+    public void testVerifierReuse() {\n+        ConstraintProviderVerifier constraintVerifier = forConstraintProvider(new NQueensConstraintProvider());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6611cdbf2c278d69515e3e0a3a7fd1312ca0026e"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxMTgyODA3", "url": "https://github.com/kiegroup/optaplanner/pull/713#pullrequestreview-371182807", "createdAt": "2020-03-09T13:29:54Z", "commit": {"oid": "6611cdbf2c278d69515e3e0a3a7fd1312ca0026e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMzoyOTo1NFrOFznQ5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMzoyOTo1NFrOFznQ5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY2NDk5OQ==", "bodyText": "Makes sense probably to add indeed. But givenFacts() is going to be used far more frequently.", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r389664999", "createdAt": "2020-03-09T13:29:54Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.nqueens.solver.score;\n+\n+import org.junit.Test;\n+import org.optaplanner.core.api.score.buildin.simple.SimpleScore;\n+import org.optaplanner.examples.nqueens.domain.NQueens;\n+import org.optaplanner.examples.nqueens.domain.Queen;\n+import org.optaplanner.examples.nqueens.domain.Row;\n+import org.optaplanner.test.impl.score.stream.ConstraintProviderVerifier;\n+\n+import static org.optaplanner.test.impl.score.stream.ConstraintVerifier.forConstraint;\n+import static org.optaplanner.test.impl.score.stream.ConstraintVerifier.forConstraintProvider;\n+\n+public class NQueensConstraintProviderTest {\n+\n+    // Dummy data, the tests don't actually do anything.\n+    private Queen queen1, queen2;\n+    private Row row1, row2;\n+\n+    @Test\n+    public void testSingleConstraint() {\n+        NQueensConstraintProvider constraintProvider = new NQueensConstraintProvider();\n+        forConstraint(constraintProvider::ascendingDiagonalConflict)\n+                .givenFacts(queen1, queen2, row1, row2)\n+                .expectImpact(SimpleScore.ONE)  // No type check here. Wrong score type fails at runtime.\n+                .expectConstraintMatches(queen1, queen2);\n+        //      ^^^^^^ We shouldn't allow this until we have a clear definition and correct implementation of\n+        //      constraint matches.\n+        //      I suggest that this is out of scope for now, and therefore so is this method.\n+    }\n+\n+    @Test\n+    public void testEntireConstraintProvider() {\n+        forConstraintProvider(new NQueensConstraintProvider())\n+                .givenPlanningSolution(new NQueens()) // You would read some XStream solution here.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6611cdbf2c278d69515e3e0a3a7fd1312ca0026e"}, "originalPosition": 50}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6611cdbf2c278d69515e3e0a3a7fd1312ca0026e", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/6611cdbf2c278d69515e3e0a3a7fd1312ca0026e", "committedDate": "2020-03-04T09:40:15Z", "message": "API strawman"}, "afterCommit": {"oid": "33a4fcff24c14b475be4cb3a02fd79aeada8394b", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/33a4fcff24c14b475be4cb3a02fd79aeada8394b", "committedDate": "2020-03-10T10:45:15Z", "message": "API strawman"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMTA5ODE2", "url": "https://github.com/kiegroup/optaplanner/pull/713#pullrequestreview-380109816", "createdAt": "2020-03-24T09:00:07Z", "commit": {"oid": "bbc7ef6f04dcd9c66f7ab098fea5ac9d76294aea"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwOTowMDowN1rOF6mh8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwOTowMDowN1rOF6mh8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk5MzAwOA==", "bodyText": "This mess is what I hoped to avoid by allowing the user to simply deserialize a ready-made solution.\nKeep in mind that this is a trival example - testing real-world constraints will become a nightmare, unless we allow working with ready-made solutions.", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r396993008", "createdAt": "2020-03-24T09:00:07Z", "author": {"login": "triceo"}, "path": "optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.nqueens.solver.score;\n+\n+import org.junit.Test;\n+import org.optaplanner.examples.nqueens.domain.Column;\n+import org.optaplanner.examples.nqueens.domain.NQueens;\n+import org.optaplanner.examples.nqueens.domain.Queen;\n+import org.optaplanner.examples.nqueens.domain.Row;\n+import org.optaplanner.test.impl.score.stream.ConstraintVerifier;\n+import org.optaplanner.test.impl.score.stream.SingleConstraintVerifier;\n+\n+public class NQueensConstraintProviderTest {\n+\n+    private final NQueensConstraintProvider constraintProvider = new NQueensConstraintProvider();\n+    private final ConstraintVerifier<NQueens> constraintVerifier =\n+            ConstraintVerifier.createFor(NQueens.class, Queen.class);\n+\n+    @Test\n+    public void testSingleConstraint() {\n+        Column column1 = new Column();\n+        column1.setId(0L);\n+        column1.setIndex(0);\n+        Column column2 = new Column();\n+        column2.setId(1L);\n+        column2.setIndex(1);\n+        Row row = new Row();\n+        row.setId(0L);\n+        row.setIndex(0);\n+        Queen queen1 = new Queen();\n+        queen1.setId(0L);\n+        queen1.setRow(row);\n+        queen1.setColumn(column1);\n+        Queen queen2 = new Queen();\n+        queen2.setId(1L);\n+        queen2.setRow(row);\n+        queen2.setColumn(column2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbc7ef6f04dcd9c66f7ab098fea5ac9d76294aea"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMTEwNjMw", "url": "https://github.com/kiegroup/optaplanner/pull/713#pullrequestreview-380110630", "createdAt": "2020-03-24T09:01:11Z", "commit": {"oid": "bbc7ef6f04dcd9c66f7ab098fea5ac9d76294aea"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwOTowMToxMlrOF6mklw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwOTowMToxMlrOF6mklw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk5MzY4Nw==", "bodyText": "This is the important bit that needs discussion, the test.\nDon't focus on the implementation code just yet.", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r396993687", "createdAt": "2020-03-24T09:01:12Z", "author": {"login": "triceo"}, "path": "optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.nqueens.solver.score;\n+\n+import org.junit.Test;\n+import org.optaplanner.examples.nqueens.domain.Column;\n+import org.optaplanner.examples.nqueens.domain.NQueens;\n+import org.optaplanner.examples.nqueens.domain.Queen;\n+import org.optaplanner.examples.nqueens.domain.Row;\n+import org.optaplanner.test.impl.score.stream.ConstraintVerifier;\n+import org.optaplanner.test.impl.score.stream.SingleConstraintVerifier;\n+\n+public class NQueensConstraintProviderTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbc7ef6f04dcd9c66f7ab098fea5ac9d76294aea"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMTE0NzY3", "url": "https://github.com/kiegroup/optaplanner/pull/713#pullrequestreview-380114767", "createdAt": "2020-03-24T09:06:47Z", "commit": {"oid": "bbc7ef6f04dcd9c66f7ab098fea5ac9d76294aea"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwOTowNjo0N1rOF6mxhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwOTowNjo0N1rOF6mxhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk5Njk5OQ==", "bodyText": "Now that I see this, I realize this needs a message argument, much like JUnit assertions.", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r396996999", "createdAt": "2020-03-24T09:06:47Z", "author": {"login": "triceo"}, "path": "optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.nqueens.solver.score;\n+\n+import org.junit.Test;\n+import org.optaplanner.examples.nqueens.domain.Column;\n+import org.optaplanner.examples.nqueens.domain.NQueens;\n+import org.optaplanner.examples.nqueens.domain.Queen;\n+import org.optaplanner.examples.nqueens.domain.Row;\n+import org.optaplanner.test.impl.score.stream.ConstraintVerifier;\n+import org.optaplanner.test.impl.score.stream.SingleConstraintVerifier;\n+\n+public class NQueensConstraintProviderTest {\n+\n+    private final NQueensConstraintProvider constraintProvider = new NQueensConstraintProvider();\n+    private final ConstraintVerifier<NQueens> constraintVerifier =\n+            ConstraintVerifier.createFor(NQueens.class, Queen.class);\n+\n+    @Test\n+    public void testSingleConstraint() {\n+        Column column1 = new Column();\n+        column1.setId(0L);\n+        column1.setIndex(0);\n+        Column column2 = new Column();\n+        column2.setId(1L);\n+        column2.setIndex(1);\n+        Row row = new Row();\n+        row.setId(0L);\n+        row.setIndex(0);\n+        Queen queen1 = new Queen();\n+        queen1.setId(0L);\n+        queen1.setRow(row);\n+        queen1.setColumn(column1);\n+        Queen queen2 = new Queen();\n+        queen2.setId(1L);\n+        queen2.setRow(row);\n+        queen2.setColumn(column2);\n+        SingleConstraintVerifier<NQueens> horizontalConflictConstraintVerifier =\n+                constraintVerifier.forConstraint(constraintProvider::horizontalConflict);\n+        horizontalConflictConstraintVerifier.givenFacts(queen1, row, column1, column2)\n+                .expectImpact(0);\n+        horizontalConflictConstraintVerifier.givenFacts(queen1, queen2, row, column1, column2)\n+                .expectImpact(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbc7ef6f04dcd9c66f7ab098fea5ac9d76294aea"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNTUyMzcx", "url": "https://github.com/kiegroup/optaplanner/pull/713#pullrequestreview-380552371", "createdAt": "2020-03-24T17:43:47Z", "commit": {"oid": "a6f4e06b1f9feef6e9a9bf07ef5dc915deb38183"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzo0Mzo0N1rOF67_ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzo0Mzo0N1rOF67_ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM0NDY1MA==", "bodyText": "[TIP] I like to do this:", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r397344650", "createdAt": "2020-03-24T17:43:47Z", "author": {"login": "yurloc"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/director/AbstractScoreDirector.java", "diffHunk": "@@ -162,6 +162,7 @@ public SupplyManager getSupplyManager() {\n \n     @Override\n     public void setWorkingSolution(Solution_ workingSolution) {\n+        Objects.requireNonNull(workingSolution);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6f4e06b1f9feef6e9a9bf07ef5dc915deb38183"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwOTY4MDg3", "url": "https://github.com/kiegroup/optaplanner/pull/713#pullrequestreview-380968087", "createdAt": "2020-03-25T09:14:14Z", "commit": {"oid": "a6f4e06b1f9feef6e9a9bf07ef5dc915deb38183"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwOToxNDoxNFrOF7R6tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwOToxNDoxNFrOF7R6tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcwMzg2Mw==", "bodyText": "What is this number? Is it the sum of matchWeights from all matches of this constraint?", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r397703863", "createdAt": "2020-03-25T09:14:14Z", "author": {"login": "yurloc"}, "path": "optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.nqueens.solver.score;\n+\n+import org.junit.Test;\n+import org.optaplanner.examples.nqueens.domain.Column;\n+import org.optaplanner.examples.nqueens.domain.NQueens;\n+import org.optaplanner.examples.nqueens.domain.Queen;\n+import org.optaplanner.examples.nqueens.domain.Row;\n+import org.optaplanner.test.impl.score.stream.ConstraintVerifier;\n+import org.optaplanner.test.impl.score.stream.SingleConstraintVerifier;\n+\n+public class NQueensConstraintProviderTest {\n+\n+    private final NQueensConstraintProvider constraintProvider = new NQueensConstraintProvider();\n+    private final ConstraintVerifier<NQueens> constraintVerifier =\n+            ConstraintVerifier.createFor(NQueens.class, Queen.class);\n+\n+    @Test\n+    public void testSingleConstraint() {\n+        Column column1 = new Column();\n+        column1.setId(0L);\n+        column1.setIndex(0);\n+        Row row = new Row();\n+        row.setId(0L);\n+        row.setIndex(0);\n+        Queen queen1 = new Queen();\n+        queen1.setId(0L);\n+        queen1.setRow(row);\n+        queen1.setColumn(column1);\n+        // One queen\n+        SingleConstraintVerifier<NQueens> horizontalConflictConstraintVerifier =\n+                constraintVerifier.forConstraint(constraintProvider::horizontalConflict);\n+        horizontalConflictConstraintVerifier.givenFacts(queen1, row, column1)\n+                .expectImpact(\"No horizontal conflicts with just one queen.\", 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6f4e06b1f9feef6e9a9bf07ef5dc915deb38183"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwOTc5ODIy", "url": "https://github.com/kiegroup/optaplanner/pull/713#pullrequestreview-380979822", "createdAt": "2020-03-25T09:30:17Z", "commit": {"oid": "a6f4e06b1f9feef6e9a9bf07ef5dc915deb38183"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwOTozMDoxN1rOF7Sh6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwOTozMDoxN1rOF7Sh6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcxMzg5Ng==", "bodyText": "If 3 is the total match weight, I think it should be SimpleScore.of(3). I think it will make the tests easier to understand although it requires more keystrokes than just providing the number.", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r397713896", "createdAt": "2020-03-25T09:30:17Z", "author": {"login": "yurloc"}, "path": "optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.nqueens.solver.score;\n+\n+import org.junit.Test;\n+import org.optaplanner.examples.nqueens.domain.Column;\n+import org.optaplanner.examples.nqueens.domain.NQueens;\n+import org.optaplanner.examples.nqueens.domain.Queen;\n+import org.optaplanner.examples.nqueens.domain.Row;\n+import org.optaplanner.test.impl.score.stream.ConstraintVerifier;\n+import org.optaplanner.test.impl.score.stream.SingleConstraintVerifier;\n+\n+public class NQueensConstraintProviderTest {\n+\n+    private final NQueensConstraintProvider constraintProvider = new NQueensConstraintProvider();\n+    private final ConstraintVerifier<NQueens> constraintVerifier =\n+            ConstraintVerifier.createFor(NQueens.class, Queen.class);\n+\n+    @Test\n+    public void testSingleConstraint() {\n+        Column column1 = new Column();\n+        column1.setId(0L);\n+        column1.setIndex(0);\n+        Row row = new Row();\n+        row.setId(0L);\n+        row.setIndex(0);\n+        Queen queen1 = new Queen();\n+        queen1.setId(0L);\n+        queen1.setRow(row);\n+        queen1.setColumn(column1);\n+        // One queen\n+        SingleConstraintVerifier<NQueens> horizontalConflictConstraintVerifier =\n+                constraintVerifier.forConstraint(constraintProvider::horizontalConflict);\n+        horizontalConflictConstraintVerifier.givenFacts(queen1, row, column1)\n+                .expectImpact(\"No horizontal conflicts with just one queen.\", 0);\n+        // Two queens\n+        Column column2 = new Column();\n+        column2.setId(1L);\n+        column2.setIndex(1);\n+        Queen queen2 = new Queen();\n+        queen2.setId(1L);\n+        queen2.setRow(row);\n+        queen2.setColumn(column2);\n+        horizontalConflictConstraintVerifier.givenFacts(queen1, queen2, row, column1, column2)\n+                .expectImpact(\"One pair of queens on the same row.\", 1);\n+        // Three queens\n+        Column column3 = new Column();\n+        column2.setId(2L);\n+        column2.setIndex(2);\n+        Queen queen3 = new Queen();\n+        queen3.setId(2L);\n+        queen3.setRow(row);\n+        queen3.setColumn(column3);\n+        horizontalConflictConstraintVerifier.givenFacts(queen1, queen2, queen3, row, column1, column2, column3)\n+                .expectImpact(\"Three pairs of queens on the same row.\", 3);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6f4e06b1f9feef6e9a9bf07ef5dc915deb38183"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxMTY5NjEx", "url": "https://github.com/kiegroup/optaplanner/pull/713#pullrequestreview-381169611", "createdAt": "2020-03-25T13:55:51Z", "commit": {"oid": "bbc7ef6f04dcd9c66f7ab098fea5ac9d76294aea"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMzo1NTo1MVrOF7cM5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMzo1NTo1MVrOF7cM5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg3MjM1Ng==", "bodyText": "Why not using AssertionError? E.g. jUnit throws this exception in case of a test failure.", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r397872356", "createdAt": "2020-03-25T13:55:51Z", "author": {"login": "rsynek"}, "path": "optaplanner-test/src/main/java/org/optaplanner/test/impl/score/stream/AbstractConstraintVerifierAssertion.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.test.impl.score.stream;\n+\n+import java.math.BigDecimal;\n+\n+public abstract class AbstractConstraintVerifierAssertion<A extends AbstractConstraintVerifierAssertion<A, V>,\n+        V extends AbstractConstraintVerifier<A, V>> {\n+\n+    private final V parentConstraintVerifier;\n+\n+    protected AbstractConstraintVerifierAssertion(V constraintVerifier) {\n+        this.parentConstraintVerifier = constraintVerifier;\n+    }\n+\n+    protected final V getParentConstraintVerifier() {\n+        return parentConstraintVerifier;\n+    }\n+\n+    abstract protected Number getImpact();\n+\n+    private void assertImpact(Number weight) {\n+        Number impact = getImpact();\n+        if (!weight.equals(impact)) {\n+            throw new IllegalStateException(\"Expected \" + weight + \" (\" + weight.getClass() + \") is not actual \" + impact + \" (\" + impact.getClass() + \")\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbc7ef6f04dcd9c66f7ab098fea5ac9d76294aea"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxMzEzNjQ5", "url": "https://github.com/kiegroup/optaplanner/pull/713#pullrequestreview-381313649", "createdAt": "2020-03-25T16:20:07Z", "commit": {"oid": "62c09e0627328e5965b5af90a6eb6225ca77e0a9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNjoyMDowN1rOF7jNkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNjoyMDowN1rOF7jNkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk4NzIxOQ==", "bodyText": "throw AssertionError? Frameworks like JUnit or AssertJ throw that or a subclass of it.", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r397987219", "createdAt": "2020-03-25T16:20:07Z", "author": {"login": "yurloc"}, "path": "optaplanner-test/src/main/java/org/optaplanner/test/impl/score/stream/AbstractConstraintVerifierAssertion.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.test.impl.score.stream;\n+\n+import java.math.BigDecimal;\n+\n+public abstract class AbstractConstraintVerifierAssertion<A extends AbstractConstraintVerifierAssertion<A, V>,\n+        V extends AbstractConstraintVerifier<A, V>> {\n+\n+    private final V parentConstraintVerifier;\n+\n+    protected AbstractConstraintVerifierAssertion(V constraintVerifier) {\n+        this.parentConstraintVerifier = constraintVerifier;\n+    }\n+\n+    protected final V getParentConstraintVerifier() {\n+        return parentConstraintVerifier;\n+    }\n+\n+    abstract protected Number getImpact();\n+\n+    private void assertImpact(Number weight, String message) {\n+        Number impact = getImpact();\n+        String constraintId = getParentConstraintVerifier().getConstraint().getConstraintId();\n+        if (weight.equals(impact)) {\n+            return;\n+        }\n+        if (message == null) {\n+            throw new IllegalStateException(\"Broken expectation.\" + System.lineSeparator() +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62c09e0627328e5965b5af90a6eb6225ca77e0a9"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxOTE5NDE4", "url": "https://github.com/kiegroup/optaplanner/pull/713#pullrequestreview-381919418", "createdAt": "2020-03-26T11:29:25Z", "commit": {"oid": "11fb4ba12fe9c879703353b2befe10b458f1e662"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMToyOToyNVrOF8CjSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMToyOToyNVrOF8CjSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUwMDY4Mg==", "bodyText": "Unused.", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r398500682", "createdAt": "2020-03-26T11:29:25Z", "author": {"login": "yurloc"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/ConstraintSession.java", "diffHunk": "@@ -50,6 +50,8 @@\n      */\n     Map<Object, Indictment> getIndictmentMap();\n \n+    ConstraintSessionFactory<Solution_> getSessionFactory();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11fb4ba12fe9c879703353b2befe10b458f1e662"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxOTIzMTc3", "url": "https://github.com/kiegroup/optaplanner/pull/713#pullrequestreview-381923177", "createdAt": "2020-03-26T11:35:08Z", "commit": {"oid": "11fb4ba12fe9c879703353b2befe10b458f1e662"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMTozNTowOFrOF8CvEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMTozNTowOFrOF8CvEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUwMzY5OA==", "bodyText": "Seems to be unused.", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r398503698", "createdAt": "2020-03-26T11:35:08Z", "author": {"login": "yurloc"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/BavetConstraintSession.java", "diffHunk": "@@ -41,6 +42,7 @@\n \n public final class BavetConstraintSession<Solution_> implements ConstraintSession<Solution_> {\n \n+    private final ConstraintSessionFactory<Solution_> sessionFactory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11fb4ba12fe9c879703353b2befe10b458f1e662"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxOTI0NzM5", "url": "https://github.com/kiegroup/optaplanner/pull/713#pullrequestreview-381924739", "createdAt": "2020-03-26T11:37:27Z", "commit": {"oid": "11fb4ba12fe9c879703353b2befe10b458f1e662"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMTozNzoyOFrOF8Cz4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMTozNzoyOFrOF8Cz4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUwNDkyOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // Duplicates validation when the session is build, but this fail-fasts when weights are hard coded\n          \n          \n            \n                    // Duplicates validation when the session is built, but this fails fast when weights are hard coded", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r398504928", "createdAt": "2020-03-26T11:37:28Z", "author": {"login": "yurloc"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/common/AbstractConstraintStream.java", "diffHunk": "@@ -63,7 +63,7 @@\n \n     protected Function<Solution_, Score<?>> buildConstraintWeightExtractor(String constraintPackage, String constraintName, Score<?> constraintWeight) {\n         validateConstraintId(constraintPackage, constraintName);\n-        // Duplicates validation when the session is build, but this fail-faster when weights are hard coded\n+        // Duplicates validation when the session is build, but this fail-fasts when weights are hard coded", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11fb4ba12fe9c879703353b2befe10b458f1e662"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxOTI1NDg1", "url": "https://github.com/kiegroup/optaplanner/pull/713#pullrequestreview-381925485", "createdAt": "2020-03-26T11:38:38Z", "commit": {"oid": "11fb4ba12fe9c879703353b2befe10b458f1e662"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMTozODozOVrOF8C2Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMTozODozOVrOF8C2Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUwNTU3MQ==", "bodyText": "Raw type.", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r398505571", "createdAt": "2020-03-26T11:38:39Z", "author": {"login": "yurloc"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/common/AbstractConstraintSessionFactory.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.score.stream.common;\n+\n+import java.math.BigDecimal;\n+import java.util.Arrays;\n+\n+import org.optaplanner.core.api.score.Score;\n+import org.optaplanner.core.impl.domain.solution.descriptor.SolutionDescriptor;\n+import org.optaplanner.core.impl.score.definition.ScoreDefinition;\n+import org.optaplanner.core.impl.score.stream.ConstraintSessionFactory;\n+\n+public abstract class AbstractConstraintSessionFactory<Solution_> implements ConstraintSessionFactory<Solution_> {\n+\n+    private final ScoreDefinition scoreDefinition;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11fb4ba12fe9c879703353b2befe10b458f1e662"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72dbaa4dc9069ddee4a645bb5916ab8cb23a9d0b", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/72dbaa4dc9069ddee4a645bb5916ab8cb23a9d0b", "committedDate": "2020-03-26T11:42:13Z", "message": "API strawman"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a348578a17b6edb343a4e5b92b0c9feb66b684ce", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/a348578a17b6edb343a4e5b92b0c9feb66b684ce", "committedDate": "2020-03-26T11:42:13Z", "message": "Fix compilation error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "416ad4db27e958d3230a9476c94414354513b8dd", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/416ad4db27e958d3230a9476c94414354513b8dd", "committedDate": "2020-03-26T11:42:13Z", "message": "Remove API we don't want to support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8d4c4f92c34a2a6a877c7ff6922e53e86e557f1", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/c8d4c4f92c34a2a6a877c7ff6922e53e86e557f1", "committedDate": "2020-03-26T11:42:14Z", "message": "Add penalty, reward"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8c7431d1a2b78b30ff83c1f27bf8fa733febe77", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/c8c7431d1a2b78b30ff83c1f27bf8fa733febe77", "committedDate": "2020-03-26T11:42:14Z", "message": "ConstraintVerifier gets to specify stream impl type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ddbe6e2b8b9d79e6d975270269a238fb2120348", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/4ddbe6e2b8b9d79e6d975270269a238fb2120348", "committedDate": "2020-03-26T11:42:14Z", "message": "Prepare for null solutions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41e2ba148329b737a07b93d405edb64cf18679c4", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/41e2ba148329b737a07b93d405edb64cf18679c4", "committedDate": "2020-03-26T11:42:14Z", "message": "Add first successful test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ecfc346b26c214b441acfd2bd9e2858a328d00c7", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/ecfc346b26c214b441acfd2bd9e2858a328d00c7", "committedDate": "2020-03-26T11:42:14Z", "message": "Bit of fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "889a5ecd67906c6148677dbb6c692b8b19107aea", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/889a5ecd67906c6148677dbb6c692b8b19107aea", "committedDate": "2020-03-26T11:42:15Z", "message": "Add expectation message"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f00d0af74c85da3000da8376e0839317d367b8b4", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/f00d0af74c85da3000da8376e0839317d367b8b4", "committedDate": "2020-03-26T11:42:15Z", "message": "Add constraint ID to the message"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e189cab00d29f52609c5ad5b9adc9a05eeec8ac3", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/e189cab00d29f52609c5ad5b9adc9a05eeec8ac3", "committedDate": "2020-03-26T11:42:15Z", "message": "Less nesting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91b82664cf0741a1423f58e6bd66d51d020681ed", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/91b82664cf0741a1423f58e6bd66d51d020681ed", "committedDate": "2020-03-26T11:42:15Z", "message": "requireNonNull() has a return value"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9d3319601277ddff26aa542623f736cf0d2880e", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/e9d3319601277ddff26aa542623f736cf0d2880e", "committedDate": "2020-03-26T11:42:15Z", "message": "Address first set of comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36ae1d2d05102c8c88e81409c78e6169ebd35368", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/36ae1d2d05102c8c88e81409c78e6169ebd35368", "committedDate": "2020-03-26T11:42:15Z", "message": "Address another set of comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "353558da63b9bd9368aff0ab2a9c4106090631ec", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/353558da63b9bd9368aff0ab2a9c4106090631ec", "committedDate": "2020-03-26T11:42:16Z", "message": "Add Javadoc and address other minor issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d339db464de39d5d78a83f2d8530de200ceaa413", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/d339db464de39d5d78a83f2d8530de200ceaa413", "committedDate": "2020-03-26T11:42:16Z", "message": "Fix a memory leak"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0647d8002a878f5140368987d930fcd62ef6ee1", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/a0647d8002a878f5140368987d930fcd62ef6ee1", "committedDate": "2020-03-26T11:42:16Z", "message": "Simplify test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88a4c346016ee4e5ca5babc5a832be5604a6820e", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/88a4c346016ee4e5ca5babc5a832be5604a6820e", "committedDate": "2020-03-26T11:42:16Z", "message": "Generics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "131ced03b5e1f154cc0e214a64edd290ada1a23c", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/131ced03b5e1f154cc0e214a64edd290ada1a23c", "committedDate": "2020-03-26T11:42:16Z", "message": "Test all constraints"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ced2f1e3eea1cb8c4290bdae20bd39f2a0239624", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/ced2f1e3eea1cb8c4290bdae20bd39f2a0239624", "committedDate": "2020-03-26T11:42:16Z", "message": "Allow for asserting on Solution"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0c1ebe16365a674688f4f233a1bad6389fa890a", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/d0c1ebe16365a674688f4f233a1bad6389fa890a", "committedDate": "2020-03-26T11:42:16Z", "message": "Implement solution-based assertions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd29fcc5f3c6c8e5aef2e31a678669cb6636833e", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/fd29fcc5f3c6c8e5aef2e31a678669cb6636833e", "committedDate": "2020-03-26T11:42:17Z", "message": "Complete the NQueensConstraintProviderTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0ddd734e902a0b2487554245c60719760952fa5", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/f0ddd734e902a0b2487554245c60719760952fa5", "committedDate": "2020-03-26T11:42:17Z", "message": "Remove extra dot"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73b0618a41b489282d50484b9508f32f07aa5de3", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/73b0618a41b489282d50484b9508f32f07aa5de3", "committedDate": "2020-03-26T11:42:17Z", "message": "Review ready"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa35304d2e01b3380eb84eec0e66e51e46375290", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/fa35304d2e01b3380eb84eec0e66e51e46375290", "committedDate": "2020-03-26T11:42:17Z", "message": "Remove unused field"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2ddd66212bfcd8bf8a4b91d120386812be07051", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/c2ddd66212bfcd8bf8a4b91d120386812be07051", "committedDate": "2020-03-26T11:42:17Z", "message": "Update optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/common/AbstractConstraintStream.java\n\nCo-Authored-By: Ji\u0159\u00ed Locker <jiri.locker@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6b90c37d94c52bbfac92a34e18eb1c52980bb7ff", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/6b90c37d94c52bbfac92a34e18eb1c52980bb7ff", "committedDate": "2020-03-26T11:40:58Z", "message": "Update optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/common/AbstractConstraintStream.java\n\nCo-Authored-By: Ji\u0159\u00ed Locker <jiri.locker@gmail.com>"}, "afterCommit": {"oid": "c2ddd66212bfcd8bf8a4b91d120386812be07051", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/c2ddd66212bfcd8bf8a4b91d120386812be07051", "committedDate": "2020-03-26T11:42:17Z", "message": "Update optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/common/AbstractConstraintStream.java\n\nCo-Authored-By: Ji\u0159\u00ed Locker <jiri.locker@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxOTI5NTkw", "url": "https://github.com/kiegroup/optaplanner/pull/713#pullrequestreview-381929590", "createdAt": "2020-03-26T11:45:01Z", "commit": {"oid": "c2ddd66212bfcd8bf8a4b91d120386812be07051"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMTo0NTowMlrOF8DDkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMTo0NTowMlrOF8DDkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUwODk0Nw==", "bodyText": "Candidate for a unit test.", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r398508947", "createdAt": "2020-03-26T11:45:02Z", "author": {"login": "yurloc"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/common/AbstractConstraintSessionFactory.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.score.stream.common;\n+\n+import java.math.BigDecimal;\n+import java.util.Arrays;\n+\n+import org.optaplanner.core.api.score.Score;\n+import org.optaplanner.core.impl.domain.solution.descriptor.SolutionDescriptor;\n+import org.optaplanner.core.impl.score.definition.ScoreDefinition;\n+import org.optaplanner.core.impl.score.stream.ConstraintSessionFactory;\n+\n+public abstract class AbstractConstraintSessionFactory<Solution_> implements ConstraintSessionFactory<Solution_> {\n+\n+    private final ScoreDefinition scoreDefinition;\n+\n+    protected AbstractConstraintSessionFactory(SolutionDescriptor<Solution_> solutionDescriptor) {\n+        this.scoreDefinition = solutionDescriptor.getScoreDefinition();\n+    }\n+\n+    protected ScoreDefinition<?> getScoreDefinition() {\n+        return scoreDefinition;\n+    }\n+\n+    protected Score<?> getScoreZero() {\n+        return scoreDefinition.getZeroScore();\n+    }\n+\n+    protected <S extends Score<S>> S getScoreOneSoftest() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2ddd66212bfcd8bf8a4b91d120386812be07051"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxOTM2MjQy", "url": "https://github.com/kiegroup/optaplanner/pull/713#pullrequestreview-381936242", "createdAt": "2020-03-26T11:55:03Z", "commit": {"oid": "c2ddd66212bfcd8bf8a4b91d120386812be07051"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMTo1NTowM1rOF8DZbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMTo1NTowM1rOF8DZbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUxNDU0MA==", "bodyText": "Throws NPE on my machine. Can you confirm that?", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r398514540", "createdAt": "2020-03-26T11:55:03Z", "author": {"login": "yurloc"}, "path": "optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.nqueens.solver.score;\n+\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.junit.Test;\n+import org.optaplanner.core.api.score.buildin.simple.SimpleScore;\n+import org.optaplanner.examples.nqueens.domain.Column;\n+import org.optaplanner.examples.nqueens.domain.NQueens;\n+import org.optaplanner.examples.nqueens.domain.Queen;\n+import org.optaplanner.examples.nqueens.domain.Row;\n+import org.optaplanner.persistence.common.api.domain.solution.SolutionFileIO;\n+import org.optaplanner.persistence.xstream.impl.domain.solution.XStreamSolutionFileIO;\n+import org.optaplanner.test.impl.score.stream.ConstraintVerifier;\n+\n+public class NQueensConstraintProviderTest {\n+\n+    private final NQueensConstraintProvider constraintProvider = new NQueensConstraintProvider();\n+    private final ConstraintVerifier<NQueens> constraintVerifier = ConstraintVerifier.using(NQueens.class, Queen.class);\n+\n+    private final Row row1 = new Row(0);\n+    private final Row row2 = new Row(1);\n+    private final Row row3 = new Row(2);\n+    private final Column column1 = new Column(0);\n+    private final Column column2 = new Column(1);\n+    private final Column column3 = new Column(2);\n+\n+    @Test\n+    public void noHorizontalConflictWithOneQueen() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        constraintVerifier.forConstraint(constraintProvider::horizontalConflict)\n+                .given(queen1)\n+                .expectNoImpact();\n+    }\n+\n+    @Test\n+    public void horizontalConflictWithTwoQueens() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        Queen queen2 = new Queen(1, row1, column2);\n+        constraintVerifier.forConstraint(constraintProvider::horizontalConflict)\n+                .given(queen1, queen2)\n+                .expectReward(1);\n+    }\n+\n+    @Test\n+    public void horizontalConflictWithThreeQueens() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        Queen queen2 = new Queen(1, row1, column2);\n+        Queen queen3 = new Queen(2, row1, column3);\n+        constraintVerifier.forConstraint(constraintProvider::horizontalConflict)\n+                .given(queen1, queen2, queen3)\n+                .expectReward(3);\n+    }\n+\n+    @Test\n+    public void noAscendingDiagonalConflictWithOneQueen() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        constraintVerifier.forConstraint(constraintProvider::ascendingDiagonalConflict)\n+                .given(queen1)\n+                .expectNoImpact();\n+    }\n+\n+    @Test\n+    public void ascendingDiagonalConflictWithTwoQueens() {\n+        Queen queen1 = new Queen(0, row1, column2);\n+        Queen queen2 = new Queen(1, row2, column1);\n+        constraintVerifier.forConstraint(constraintProvider::ascendingDiagonalConflict)\n+                .given(queen1, queen2)\n+                .expectReward(1);\n+    }\n+\n+    @Test\n+    public void ascendingDiagonalConflictWithThreeQueens() {\n+        Queen queen1 = new Queen(0, row1, column3);\n+        Queen queen2 = new Queen(1, row2, column2);\n+        Queen queen3 = new Queen(2, row3, column1);\n+        constraintVerifier.forConstraint(constraintProvider::ascendingDiagonalConflict)\n+                .given(queen1, queen2, queen3)\n+                .expectReward(3);\n+    }\n+\n+    @Test\n+    public void noDescendingDiagonalConflictWithOneQueen() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        constraintVerifier.forConstraint(constraintProvider::descendingDiagonalConflict)\n+                .given(queen1)\n+                .expectNoImpact();\n+    }\n+\n+    @Test\n+    public void descendingDiagonalConflictWithTwoQueens() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        Queen queen2 = new Queen(1, row2, column2);\n+        constraintVerifier.forConstraint(constraintProvider::descendingDiagonalConflict)\n+                .given(queen1, queen2)\n+                .expectReward(1);\n+    }\n+\n+    @Test\n+    public void descendingDiagonalConflictWithThreeQueens() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        Queen queen2 = new Queen(1, row2, column2);\n+        Queen queen3 = new Queen(2, row3, column3);\n+        constraintVerifier.forConstraint(constraintProvider::descendingDiagonalConflict)\n+                .given(queen1, queen2, queen3)\n+                .expectReward(3);\n+    }\n+\n+    private NQueens readSolution(String resource) throws IOException {\n+        Path tempFile = Files.createTempFile(\"optaplanner-test\", \"xml\");\n+        try (InputStreamReader inputStreamReader =\n+                new InputStreamReader(NQueensConstraintProviderTest.class.getResourceAsStream(resource))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2ddd66212bfcd8bf8a4b91d120386812be07051"}, "originalPosition": 132}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxOTM4Njc0", "url": "https://github.com/kiegroup/optaplanner/pull/713#pullrequestreview-381938674", "createdAt": "2020-03-26T11:58:47Z", "commit": {"oid": "c2ddd66212bfcd8bf8a4b91d120386812be07051"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMTo1ODo0N1rOF8DhPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMTo1ODo0N1rOF8DhPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUxNjU0MQ==", "bodyText": "Should be a penalty, shouldn't it?", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r398516541", "createdAt": "2020-03-26T11:58:47Z", "author": {"login": "yurloc"}, "path": "optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.nqueens.solver.score;\n+\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.junit.Test;\n+import org.optaplanner.core.api.score.buildin.simple.SimpleScore;\n+import org.optaplanner.examples.nqueens.domain.Column;\n+import org.optaplanner.examples.nqueens.domain.NQueens;\n+import org.optaplanner.examples.nqueens.domain.Queen;\n+import org.optaplanner.examples.nqueens.domain.Row;\n+import org.optaplanner.persistence.common.api.domain.solution.SolutionFileIO;\n+import org.optaplanner.persistence.xstream.impl.domain.solution.XStreamSolutionFileIO;\n+import org.optaplanner.test.impl.score.stream.ConstraintVerifier;\n+\n+public class NQueensConstraintProviderTest {\n+\n+    private final NQueensConstraintProvider constraintProvider = new NQueensConstraintProvider();\n+    private final ConstraintVerifier<NQueens> constraintVerifier = ConstraintVerifier.using(NQueens.class, Queen.class);\n+\n+    private final Row row1 = new Row(0);\n+    private final Row row2 = new Row(1);\n+    private final Row row3 = new Row(2);\n+    private final Column column1 = new Column(0);\n+    private final Column column2 = new Column(1);\n+    private final Column column3 = new Column(2);\n+\n+    @Test\n+    public void noHorizontalConflictWithOneQueen() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        constraintVerifier.forConstraint(constraintProvider::horizontalConflict)\n+                .given(queen1)\n+                .expectNoImpact();\n+    }\n+\n+    @Test\n+    public void horizontalConflictWithTwoQueens() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        Queen queen2 = new Queen(1, row1, column2);\n+        constraintVerifier.forConstraint(constraintProvider::horizontalConflict)\n+                .given(queen1, queen2)\n+                .expectReward(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2ddd66212bfcd8bf8a4b91d120386812be07051"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxOTYwMzEx", "url": "https://github.com/kiegroup/optaplanner/pull/713#pullrequestreview-381960311", "createdAt": "2020-03-26T12:30:06Z", "commit": {"oid": "c2ddd66212bfcd8bf8a4b91d120386812be07051"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMjozMDowNlrOF8Ekhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMjozMDowNlrOF8Ekhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUzMzc2Nw==", "bodyText": "ConstraintStreamScoreDirectorFactory.getConstraints is non-public API.\nWe avoid defensive copies in non-public API, unless it's a probably-one-day-public-API, to avoid performance surprises and to reduce the code size. Note that even though the array is defensively copied, the constraint instances are not. So it's not watertight.\nThis method will never be part of a public API I'd argue.", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r398533767", "createdAt": "2020-03-26T12:30:06Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/director/stream/ConstraintStreamScoreDirectorFactory.java", "diffHunk": "@@ -62,13 +65,21 @@ public ConstraintStreamScoreDirectorFactory(SolutionDescriptor<Solution_> soluti\n     // ************************************************************************\n \n     @Override\n-    public ConstraintStreamScoreDirector<Solution_> buildScoreDirector(\n-            boolean lookUpEnabled, boolean constraintMatchEnabledPreference) {\n+    public ConstraintStreamScoreDirector<Solution_> buildScoreDirector(boolean lookUpEnabled,\n+            boolean constraintMatchEnabledPreference) {\n         return new ConstraintStreamScoreDirector<>(this, lookUpEnabled, constraintMatchEnabledPreference);\n     }\n \n     public ConstraintSession<Solution_> newConstraintStreamingSession(boolean constraintMatchEnabled, Solution_ workingSolution) {\n         return constraintSessionFactory.buildSession(constraintMatchEnabled, workingSolution);\n     }\n \n+    // ************************************************************************\n+    // Getters/setters\n+    // ************************************************************************\n+\n+    public Constraint[] getConstraints() {\n+        return Arrays.copyOf(constraints, constraints.length);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2ddd66212bfcd8bf8a4b91d120386812be07051"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxOTYxMDE2", "url": "https://github.com/kiegroup/optaplanner/pull/713#pullrequestreview-381961016", "createdAt": "2020-03-26T12:31:08Z", "commit": {"oid": "c2ddd66212bfcd8bf8a4b91d120386812be07051"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMjozMTowOFrOF8Empg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMjozMTowOFrOF8Empg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUzNDMxMA==", "bodyText": "\"may\" or \"will\"?\nIn general, words as \"may\", \"might\", \"could\" should only be used in docs and javadocs if we have proven cases were it doesn't happen too. In the product docs's style guide they are heavily discouraged.", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r398534310", "createdAt": "2020-03-26T12:31:08Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/ConstraintSessionFactory.java", "diffHunk": "@@ -23,7 +23,7 @@\n     /**\n      * This method is thread-safe.\n      * @param constraintMatchEnabled  true if {@link ScoreDirector#isConstraintMatchEnabled()} should be true\n-     * @param workingSolution never null\n+     * @param workingSolution if null, uniform synthetic constraint weights may be applied", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2ddd66212bfcd8bf8a4b91d120386812be07051"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxOTY0MDU2", "url": "https://github.com/kiegroup/optaplanner/pull/713#pullrequestreview-381964056", "createdAt": "2020-03-26T12:35:20Z", "commit": {"oid": "c2ddd66212bfcd8bf8a4b91d120386812be07051"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMjozNToyMFrOF8EwLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMjozNToyMFrOF8EwLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUzNjc1MQ==", "bodyText": "code style: d in capital, just longs L are in capital (which get confused with one otherwise)", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r398536751", "createdAt": "2020-03-26T12:35:20Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/common/AbstractConstraintSessionFactory.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.score.stream.common;\n+\n+import java.math.BigDecimal;\n+import java.util.Arrays;\n+\n+import org.optaplanner.core.api.score.Score;\n+import org.optaplanner.core.impl.domain.solution.descriptor.SolutionDescriptor;\n+import org.optaplanner.core.impl.score.definition.ScoreDefinition;\n+import org.optaplanner.core.impl.score.stream.ConstraintSessionFactory;\n+\n+public abstract class AbstractConstraintSessionFactory<Solution_> implements ConstraintSessionFactory<Solution_> {\n+\n+    private final ScoreDefinition scoreDefinition;\n+\n+    protected AbstractConstraintSessionFactory(SolutionDescriptor<Solution_> solutionDescriptor) {\n+        this.scoreDefinition = solutionDescriptor.getScoreDefinition();\n+    }\n+\n+    protected ScoreDefinition<?> getScoreDefinition() {\n+        return scoreDefinition;\n+    }\n+\n+    protected Score<?> getScoreZero() {\n+        return scoreDefinition.getZeroScore();\n+    }\n+\n+    protected <S extends Score<S>> S getScoreOneSoftest() {\n+        Number[] result = Arrays.copyOf(getScoreZero().toLevelNumbers(), scoreDefinition.getLevelsSize());\n+        Number lastNumber = result[result.length - 1];\n+        if (lastNumber instanceof Integer) {\n+            lastNumber = 1;\n+        } else if (lastNumber instanceof Long) {\n+            lastNumber = 1L;\n+        } else if (lastNumber instanceof Double) {\n+            lastNumber = 1.0d;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2ddd66212bfcd8bf8a4b91d120386812be07051"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxOTY3MDE3", "url": "https://github.com/kiegroup/optaplanner/pull/713#pullrequestreview-381967017", "createdAt": "2020-03-26T12:39:23Z", "commit": {"oid": "c2ddd66212bfcd8bf8a4b91d120386812be07051"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMjozOToyM1rOF8E5lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMjozOToyM1rOF8E5lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUzOTE1Ng==", "bodyText": "-1 on this approach. It is not this classes's responsibility to figure out the \"one soft score\".\n(This will cause pain if ever decide to build a HardLongSoftIntScore. Or with pareto scoring. And even though that pain might be unavoidable, this will hide that pain to the very last moment)\nAdd a method on ScoreDefinition, just like we have getZeroScore() there.", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r398539156", "createdAt": "2020-03-26T12:39:23Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/common/AbstractConstraintSessionFactory.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.score.stream.common;\n+\n+import java.math.BigDecimal;\n+import java.util.Arrays;\n+\n+import org.optaplanner.core.api.score.Score;\n+import org.optaplanner.core.impl.domain.solution.descriptor.SolutionDescriptor;\n+import org.optaplanner.core.impl.score.definition.ScoreDefinition;\n+import org.optaplanner.core.impl.score.stream.ConstraintSessionFactory;\n+\n+public abstract class AbstractConstraintSessionFactory<Solution_> implements ConstraintSessionFactory<Solution_> {\n+\n+    private final ScoreDefinition scoreDefinition;\n+\n+    protected AbstractConstraintSessionFactory(SolutionDescriptor<Solution_> solutionDescriptor) {\n+        this.scoreDefinition = solutionDescriptor.getScoreDefinition();\n+    }\n+\n+    protected ScoreDefinition<?> getScoreDefinition() {\n+        return scoreDefinition;\n+    }\n+\n+    protected Score<?> getScoreZero() {\n+        return scoreDefinition.getZeroScore();\n+    }\n+\n+    protected <S extends Score<S>> S getScoreOneSoftest() {\n+        Number[] result = Arrays.copyOf(getScoreZero().toLevelNumbers(), scoreDefinition.getLevelsSize());\n+        Number lastNumber = result[result.length - 1];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2ddd66212bfcd8bf8a4b91d120386812be07051"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxOTY5MzI3", "url": "https://github.com/kiegroup/optaplanner/pull/713#pullrequestreview-381969327", "createdAt": "2020-03-26T12:42:34Z", "commit": {"oid": "c2ddd66212bfcd8bf8a4b91d120386812be07051"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMjo0MjozNFrOF8FA0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMjo0MjozNFrOF8FA0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU0MTAxMA==", "bodyText": "If we add that comment, we should do it in the other examples that have a default constructor for this reason too.\nPersonally, I wouldn't add the comment.\nBtw, the comment isn't accurate. OptaPlanner itself also needs a no-arg constructor to planning clone Queen.", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r398541010", "createdAt": "2020-03-26T12:42:34Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/nqueens/domain/Queen.java", "diffHunk": "@@ -32,6 +32,16 @@\n     // Planning variables: changes during planning, between score calculations.\n     private Row row;\n \n+    public Queen() {\n+        // For XStream", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2ddd66212bfcd8bf8a4b91d120386812be07051"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxOTc2NDA4", "url": "https://github.com/kiegroup/optaplanner/pull/713#pullrequestreview-381976408", "createdAt": "2020-03-26T12:52:00Z", "commit": {"oid": "c2ddd66212bfcd8bf8a4b91d120386812be07051"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMjo1MjowMFrOF8FYiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMjo1MjowMFrOF8FYiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU0NzA4MQ==", "bodyText": "Code syntax and method parameters look great.\nNow for the difficult part: naming.\nAre we sure we want to settle on these names?\n\nforConstraint(): +0.8 (like Class.forName()).\n-- alternatives: ofConstraint()= +1 (like LocalTime.of())\ngiven: +1 (short and sweet)\n-- alternatives: givenFacts +0 (more descriptive)\nexpectReward: +0\n-- alternatives: assertReward: +1 (because of JUnit's assertEquals(expeted, actual))", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r398547081", "createdAt": "2020-03-26T12:52:00Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.nqueens.solver.score;\n+\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.junit.Test;\n+import org.optaplanner.core.api.score.buildin.simple.SimpleScore;\n+import org.optaplanner.examples.nqueens.domain.Column;\n+import org.optaplanner.examples.nqueens.domain.NQueens;\n+import org.optaplanner.examples.nqueens.domain.Queen;\n+import org.optaplanner.examples.nqueens.domain.Row;\n+import org.optaplanner.persistence.common.api.domain.solution.SolutionFileIO;\n+import org.optaplanner.persistence.xstream.impl.domain.solution.XStreamSolutionFileIO;\n+import org.optaplanner.test.impl.score.stream.ConstraintVerifier;\n+\n+public class NQueensConstraintProviderTest {\n+\n+    private final NQueensConstraintProvider constraintProvider = new NQueensConstraintProvider();\n+    private final ConstraintVerifier<NQueens> constraintVerifier = ConstraintVerifier.using(NQueens.class, Queen.class);\n+\n+    private final Row row1 = new Row(0);\n+    private final Row row2 = new Row(1);\n+    private final Row row3 = new Row(2);\n+    private final Column column1 = new Column(0);\n+    private final Column column2 = new Column(1);\n+    private final Column column3 = new Column(2);\n+\n+    @Test\n+    public void noHorizontalConflictWithOneQueen() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        constraintVerifier.forConstraint(constraintProvider::horizontalConflict)\n+                .given(queen1)\n+                .expectNoImpact();\n+    }\n+\n+    @Test\n+    public void horizontalConflictWithTwoQueens() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        Queen queen2 = new Queen(1, row1, column2);\n+        constraintVerifier.forConstraint(constraintProvider::horizontalConflict)\n+                .given(queen1, queen2)\n+                .expectReward(1);\n+    }\n+\n+    @Test\n+    public void horizontalConflictWithThreeQueens() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        Queen queen2 = new Queen(1, row1, column2);\n+        Queen queen3 = new Queen(2, row1, column3);\n+        constraintVerifier.forConstraint(constraintProvider::horizontalConflict)\n+                .given(queen1, queen2, queen3)\n+                .expectReward(3);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2ddd66212bfcd8bf8a4b91d120386812be07051"}, "originalPosition": 72}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxOTMzMDAz", "url": "https://github.com/kiegroup/optaplanner/pull/713#pullrequestreview-381933003", "createdAt": "2020-03-26T11:50:06Z", "commit": {"oid": "c2ddd66212bfcd8bf8a4b91d120386812be07051"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMTo1MDowNlrOF8DOyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMTo1MDowNlrOF8DOyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUxMTgxNw==", "bodyText": "Why using a temporary file for reading the test dataset?", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r398511817", "createdAt": "2020-03-26T11:50:06Z", "author": {"login": "rsynek"}, "path": "optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.nqueens.solver.score;\n+\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.junit.Test;\n+import org.optaplanner.core.api.score.buildin.simple.SimpleScore;\n+import org.optaplanner.examples.nqueens.domain.Column;\n+import org.optaplanner.examples.nqueens.domain.NQueens;\n+import org.optaplanner.examples.nqueens.domain.Queen;\n+import org.optaplanner.examples.nqueens.domain.Row;\n+import org.optaplanner.persistence.common.api.domain.solution.SolutionFileIO;\n+import org.optaplanner.persistence.xstream.impl.domain.solution.XStreamSolutionFileIO;\n+import org.optaplanner.test.impl.score.stream.ConstraintVerifier;\n+\n+public class NQueensConstraintProviderTest {\n+\n+    private final NQueensConstraintProvider constraintProvider = new NQueensConstraintProvider();\n+    private final ConstraintVerifier<NQueens> constraintVerifier = ConstraintVerifier.using(NQueens.class, Queen.class);\n+\n+    private final Row row1 = new Row(0);\n+    private final Row row2 = new Row(1);\n+    private final Row row3 = new Row(2);\n+    private final Column column1 = new Column(0);\n+    private final Column column2 = new Column(1);\n+    private final Column column3 = new Column(2);\n+\n+    @Test\n+    public void noHorizontalConflictWithOneQueen() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        constraintVerifier.forConstraint(constraintProvider::horizontalConflict)\n+                .given(queen1)\n+                .expectNoImpact();\n+    }\n+\n+    @Test\n+    public void horizontalConflictWithTwoQueens() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        Queen queen2 = new Queen(1, row1, column2);\n+        constraintVerifier.forConstraint(constraintProvider::horizontalConflict)\n+                .given(queen1, queen2)\n+                .expectReward(1);\n+    }\n+\n+    @Test\n+    public void horizontalConflictWithThreeQueens() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        Queen queen2 = new Queen(1, row1, column2);\n+        Queen queen3 = new Queen(2, row1, column3);\n+        constraintVerifier.forConstraint(constraintProvider::horizontalConflict)\n+                .given(queen1, queen2, queen3)\n+                .expectReward(3);\n+    }\n+\n+    @Test\n+    public void noAscendingDiagonalConflictWithOneQueen() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        constraintVerifier.forConstraint(constraintProvider::ascendingDiagonalConflict)\n+                .given(queen1)\n+                .expectNoImpact();\n+    }\n+\n+    @Test\n+    public void ascendingDiagonalConflictWithTwoQueens() {\n+        Queen queen1 = new Queen(0, row1, column2);\n+        Queen queen2 = new Queen(1, row2, column1);\n+        constraintVerifier.forConstraint(constraintProvider::ascendingDiagonalConflict)\n+                .given(queen1, queen2)\n+                .expectReward(1);\n+    }\n+\n+    @Test\n+    public void ascendingDiagonalConflictWithThreeQueens() {\n+        Queen queen1 = new Queen(0, row1, column3);\n+        Queen queen2 = new Queen(1, row2, column2);\n+        Queen queen3 = new Queen(2, row3, column1);\n+        constraintVerifier.forConstraint(constraintProvider::ascendingDiagonalConflict)\n+                .given(queen1, queen2, queen3)\n+                .expectReward(3);\n+    }\n+\n+    @Test\n+    public void noDescendingDiagonalConflictWithOneQueen() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        constraintVerifier.forConstraint(constraintProvider::descendingDiagonalConflict)\n+                .given(queen1)\n+                .expectNoImpact();\n+    }\n+\n+    @Test\n+    public void descendingDiagonalConflictWithTwoQueens() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        Queen queen2 = new Queen(1, row2, column2);\n+        constraintVerifier.forConstraint(constraintProvider::descendingDiagonalConflict)\n+                .given(queen1, queen2)\n+                .expectReward(1);\n+    }\n+\n+    @Test\n+    public void descendingDiagonalConflictWithThreeQueens() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        Queen queen2 = new Queen(1, row2, column2);\n+        Queen queen3 = new Queen(2, row3, column3);\n+        constraintVerifier.forConstraint(constraintProvider::descendingDiagonalConflict)\n+                .given(queen1, queen2, queen3)\n+                .expectReward(3);\n+    }\n+\n+    private NQueens readSolution(String resource) throws IOException {\n+        Path tempFile = Files.createTempFile(\"optaplanner-test\", \"xml\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2ddd66212bfcd8bf8a4b91d120386812be07051"}, "originalPosition": 130}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f64db332588af0a27cf94de2f9cce98500c464c4", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/f64db332588af0a27cf94de2f9cce98500c464c4", "committedDate": "2020-03-26T16:08:45Z", "message": "Recognize penalties properly"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc9f945780bbfa521540c3732cc6d9adef8e6da0", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/cc9f945780bbfa521540c3732cc6d9adef8e6da0", "committedDate": "2020-03-26T16:20:14Z", "message": "Address some code review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2076ae3037e18db43630d9edc0d949fc4ce52a13", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/2076ae3037e18db43630d9edc0d949fc4ce52a13", "committedDate": "2020-03-26T17:05:21Z", "message": "Fix how we deal with scores"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d153e00aed7c2aefe45f3436e7720035b816db8", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/4d153e00aed7c2aefe45f3436e7720035b816db8", "committedDate": "2020-03-26T17:08:28Z", "message": "Fix Revapi"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyODk3Njc4", "url": "https://github.com/kiegroup/optaplanner/pull/713#pullrequestreview-382897678", "createdAt": "2020-03-27T14:17:17Z", "commit": {"oid": "4d153e00aed7c2aefe45f3436e7720035b816db8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDoxNzoxN1rOF8zHjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDoxNzoxN1rOF8zHjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI5NjM5Ng==", "bodyText": "Prop A) using()\nProp B) of()\nProp C) withSolution().withEntities()\nProp D) forSolutionAndEntities()\nProp E) build()\nProp F) buildConstraintVerifier()", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r399296396", "createdAt": "2020-03-27T14:17:17Z", "author": {"login": "triceo"}, "path": "optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.nqueens.solver.score;\n+\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.junit.Test;\n+import org.optaplanner.core.api.score.buildin.simple.SimpleScore;\n+import org.optaplanner.examples.nqueens.domain.Column;\n+import org.optaplanner.examples.nqueens.domain.NQueens;\n+import org.optaplanner.examples.nqueens.domain.Queen;\n+import org.optaplanner.examples.nqueens.domain.Row;\n+import org.optaplanner.persistence.common.api.domain.solution.SolutionFileIO;\n+import org.optaplanner.persistence.xstream.impl.domain.solution.XStreamSolutionFileIO;\n+import org.optaplanner.test.impl.score.stream.ConstraintVerifier;\n+\n+public class NQueensConstraintProviderTest {\n+\n+    private final NQueensConstraintProvider constraintProvider = new NQueensConstraintProvider();\n+    private final ConstraintVerifier<NQueens> constraintVerifier = ConstraintVerifier.using(NQueens.class, Queen.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d153e00aed7c2aefe45f3436e7720035b816db8"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyOTAzMTQw", "url": "https://github.com/kiegroup/optaplanner/pull/713#pullrequestreview-382903140", "createdAt": "2020-03-27T14:23:26Z", "commit": {"oid": "4d153e00aed7c2aefe45f3436e7720035b816db8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDoyMzoyNlrOF8zX_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDoyMzoyNlrOF8zX_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMwMDYwNA==", "bodyText": "Prop A) forConstraint() (geoffrey +1, chris +1)\nProp B) ofConstraint()\nProp C) of()\nProp D) forSingleConstraint()", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r399300604", "createdAt": "2020-03-27T14:23:26Z", "author": {"login": "triceo"}, "path": "optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.nqueens.solver.score;\n+\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.junit.Test;\n+import org.optaplanner.core.api.score.buildin.simple.SimpleScore;\n+import org.optaplanner.examples.nqueens.domain.Column;\n+import org.optaplanner.examples.nqueens.domain.NQueens;\n+import org.optaplanner.examples.nqueens.domain.Queen;\n+import org.optaplanner.examples.nqueens.domain.Row;\n+import org.optaplanner.persistence.common.api.domain.solution.SolutionFileIO;\n+import org.optaplanner.persistence.xstream.impl.domain.solution.XStreamSolutionFileIO;\n+import org.optaplanner.test.impl.score.stream.ConstraintVerifier;\n+\n+public class NQueensConstraintProviderTest {\n+\n+    private final NQueensConstraintProvider constraintProvider = new NQueensConstraintProvider();\n+    private final ConstraintVerifier<NQueens> constraintVerifier = ConstraintVerifier.using(NQueens.class, Queen.class);\n+\n+    private final Row row1 = new Row(0);\n+    private final Row row2 = new Row(1);\n+    private final Row row3 = new Row(2);\n+    private final Column column1 = new Column(0);\n+    private final Column column2 = new Column(1);\n+    private final Column column3 = new Column(2);\n+\n+    @Test\n+    public void noHorizontalConflictWithOneQueen() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        constraintVerifier.forConstraint(constraintProvider::horizontalConflict)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d153e00aed7c2aefe45f3436e7720035b816db8"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyOTAzNzg4", "url": "https://github.com/kiegroup/optaplanner/pull/713#pullrequestreview-382903788", "createdAt": "2020-03-27T14:24:08Z", "commit": {"oid": "4d153e00aed7c2aefe45f3436e7720035b816db8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDoyNDowOFrOF8zaKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDoyNDowOFrOF8zaKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMwMTE2Mw==", "bodyText": "Prop A) given() (geoffrey +1, chris +1)\nProp B) givenFacts()", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r399301163", "createdAt": "2020-03-27T14:24:08Z", "author": {"login": "triceo"}, "path": "optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.nqueens.solver.score;\n+\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.junit.Test;\n+import org.optaplanner.core.api.score.buildin.simple.SimpleScore;\n+import org.optaplanner.examples.nqueens.domain.Column;\n+import org.optaplanner.examples.nqueens.domain.NQueens;\n+import org.optaplanner.examples.nqueens.domain.Queen;\n+import org.optaplanner.examples.nqueens.domain.Row;\n+import org.optaplanner.persistence.common.api.domain.solution.SolutionFileIO;\n+import org.optaplanner.persistence.xstream.impl.domain.solution.XStreamSolutionFileIO;\n+import org.optaplanner.test.impl.score.stream.ConstraintVerifier;\n+\n+public class NQueensConstraintProviderTest {\n+\n+    private final NQueensConstraintProvider constraintProvider = new NQueensConstraintProvider();\n+    private final ConstraintVerifier<NQueens> constraintVerifier = ConstraintVerifier.using(NQueens.class, Queen.class);\n+\n+    private final Row row1 = new Row(0);\n+    private final Row row2 = new Row(1);\n+    private final Row row3 = new Row(2);\n+    private final Column column1 = new Column(0);\n+    private final Column column2 = new Column(1);\n+    private final Column column3 = new Column(2);\n+\n+    @Test\n+    public void noHorizontalConflictWithOneQueen() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        constraintVerifier.forConstraint(constraintProvider::horizontalConflict)\n+                .given(queen1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d153e00aed7c2aefe45f3436e7720035b816db8"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyOTE0Nzcy", "url": "https://github.com/kiegroup/optaplanner/pull/713#pullrequestreview-382914772", "createdAt": "2020-03-27T14:36:18Z", "commit": {"oid": "4d153e00aed7c2aefe45f3436e7720035b816db8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDozNjoxOVrOF8z9Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDozNjoxOVrOF8z9Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMxMDEwMw==", "bodyText": "// Winner\nConstraintVerifier.verifyThat(constraintProvider::horizontalConflict)\n.given(queen1, queen2)\n.penalizesBy(1) / rewardsWith(1) / hasNoImpact();", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r399310103", "createdAt": "2020-03-27T14:36:19Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.nqueens.solver.score;\n+\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.junit.Test;\n+import org.optaplanner.core.api.score.buildin.simple.SimpleScore;\n+import org.optaplanner.examples.nqueens.domain.Column;\n+import org.optaplanner.examples.nqueens.domain.NQueens;\n+import org.optaplanner.examples.nqueens.domain.Queen;\n+import org.optaplanner.examples.nqueens.domain.Row;\n+import org.optaplanner.persistence.common.api.domain.solution.SolutionFileIO;\n+import org.optaplanner.persistence.xstream.impl.domain.solution.XStreamSolutionFileIO;\n+import org.optaplanner.test.impl.score.stream.ConstraintVerifier;\n+\n+public class NQueensConstraintProviderTest {\n+\n+    private final NQueensConstraintProvider constraintProvider = new NQueensConstraintProvider();\n+    private final ConstraintVerifier<NQueens> constraintVerifier = ConstraintVerifier.using(NQueens.class, Queen.class);\n+\n+    private final Row row1 = new Row(0);\n+    private final Row row2 = new Row(1);\n+    private final Row row3 = new Row(2);\n+    private final Column column1 = new Column(0);\n+    private final Column column2 = new Column(1);\n+    private final Column column3 = new Column(2);\n+\n+    @Test\n+    public void noHorizontalConflictWithOneQueen() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        constraintVerifier.forConstraint(constraintProvider::horizontalConflict)\n+                .given(queen1)\n+                .expectNoImpact();\n+    }\n+\n+    @Test\n+    public void horizontalConflictWithTwoQueens() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        Queen queen2 = new Queen(1, row1, column2);\n+        constraintVerifier.forConstraint(constraintProvider::horizontalConflict)\n+                .given(queen1, queen2)\n+                .expectPenalty(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d153e00aed7c2aefe45f3436e7720035b816db8"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyOTQ2MDYy", "url": "https://github.com/kiegroup/optaplanner/pull/713#pullrequestreview-382946062", "createdAt": "2020-03-27T15:10:00Z", "commit": {"oid": "4d153e00aed7c2aefe45f3436e7720035b816db8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNToxMDowMVrOF81eXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNToxMDowMVrOF81eXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMzNTAwNg==", "bodyText": "Throws NPE if you expectNoImpact() but the constraint does a penalty or a reward. To reproduce, change any expectPenalty() in the NQueens test to expectNoImpact().\njava.lang.IllegalStateException: Failed assembling asserting message.\n\n\tat org.optaplanner.test.impl.score.stream.SingleConstraintAssertion.getAssertionErrorMessage(SingleConstraintAssertion.java:93)\n\tat org.optaplanner.test.impl.score.stream.SingleConstraintAssertion.assertImpact(SingleConstraintAssertion.java:62)\n\tat org.optaplanner.test.impl.score.stream.SingleConstraintAssertion.expectNoImpact(SingleConstraintAssertion.java:213)\n\tat org.optaplanner.test.impl.score.stream.SingleConstraintAssertion.expectNoImpact(SingleConstraintAssertion.java:220)\n\tat org.optaplanner.examples.nqueens.solver.score.NQueensConstraintProviderTest.horizontalConflictWithTwoQueens(NQueensConstraintProviderTest.java:62)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:137)\n\tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)\n\tat com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)\n\tat com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230)\n\tat com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat com.intellij.rt.execution.application.AppMainV2.main(AppMainV2.java:131)\nCaused by: java.lang.NullPointerException\n\tat org.optaplanner.test.impl.score.stream.SingleConstraintAssertion.getImpactTypeLabel(SingleConstraintAssertion.java:98)\n\tat org.optaplanner.test.impl.score.stream.SingleConstraintAssertion.getAssertionErrorMessage(SingleConstraintAssertion.java:76)\n\t... 31 more", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r399335006", "createdAt": "2020-03-27T15:10:01Z", "author": {"login": "yurloc"}, "path": "optaplanner-test/src/main/java/org/optaplanner/test/impl/score/stream/SingleConstraintAssertion.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.test.impl.score.stream;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.math.BigDecimal;\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import org.optaplanner.core.api.score.constraint.ConstraintMatchTotal;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.impl.score.stream.common.AbstractConstraint;\n+import org.optaplanner.core.impl.score.stream.common.ScoreImpactType;\n+\n+public final class SingleConstraintAssertion<Solution_> extends AbstractAssertion<Solution_,\n+        SingleConstraintAssertion<Solution_>, SingleConstraintVerifier<Solution_>> {\n+\n+    private final Map<String, ConstraintMatchTotal> constraintMatchTotalMap;\n+\n+    SingleConstraintAssertion(SingleConstraintVerifier<Solution_> singleConstraintVerifier,\n+            Map<String, ConstraintMatchTotal> constraintMatchTotalMap) {\n+        super(singleConstraintVerifier);\n+        this.constraintMatchTotalMap = Collections.unmodifiableMap(constraintMatchTotalMap);\n+    }\n+\n+    private Number getImpact() {\n+        return constraintMatchTotalMap.values().stream()\n+                .mapToInt(ConstraintMatchTotal::getConstraintMatchCount)\n+                .sum();\n+    }\n+\n+    private static void assertCorrectMatchWeight(Number matchWeightTotal) {\n+        if (matchWeightTotal.doubleValue() <= 0) {\n+            throw new IllegalArgumentException(\"Expected a positive match weight, given (\" + matchWeightTotal + \").\");\n+        }\n+    }\n+\n+    private void assertImpact(ScoreImpactType scoreImpactType, Number weight, String message) {\n+        Number impact = getImpact();\n+        AbstractConstraint<?, ?> constraint = (AbstractConstraint<?, ?>) getParentConstraintVerifier().getConstraint();\n+        // Null means we're just looking for any kind of penalty or an impact.\n+        boolean isCorrectImpactType = scoreImpactType == null || scoreImpactType == constraint.getScoreImpactType();\n+        if (isCorrectImpactType && weight.equals(impact)) {\n+            return;\n+        }\n+        String constraintId = constraint.getConstraintId();\n+        String assertionMessage = getAssertionErrorMessage(scoreImpactType, weight, constraint.getScoreImpactType(),\n+                impact, constraintId, message);\n+        throw new AssertionError(assertionMessage);\n+    }\n+\n+    private static String getAssertionErrorMessage(ScoreImpactType expectedImpactType, Number expectedImpact,\n+            ScoreImpactType actualImpactType, Number actualImpact, String constraintId, String message) {\n+        boolean hasMessage = message != null;\n+        try (ByteArrayOutputStream baos = new ByteArrayOutputStream(); PrintStream printStream = new PrintStream(baos)) {\n+            String preformattedMessage = \"Broken expectation.%n\" +\n+                    \"%18s: %s%n\" +\n+                    (hasMessage ? \"%18s: %s%n\" : \"\") +\n+                    \"%18s: %s (%s)%n\" +\n+                    \"%18s: %s (%s)\";\n+            String expectedImpactLabel = \"Expected \" + getImpactTypeLabel(expectedImpactType);\n+            String actualImpactLabel = \"Actual \" + getImpactTypeLabel(actualImpactType);\n+            if (hasMessage) {\n+                printStream.printf(preformattedMessage,\n+                        \"Message\", message,\n+                        \"Constraint\", constraintId,\n+                        expectedImpactLabel, expectedImpact, expectedImpact.getClass(),\n+                        actualImpactLabel, actualImpact, actualImpact.getClass());\n+\n+            } else {\n+                printStream.printf(preformattedMessage,\n+                        \"Constraint\", constraintId,\n+                        expectedImpactLabel, expectedImpact, expectedImpact.getClass(),\n+                        actualImpactLabel, actualImpact, actualImpact.getClass());\n+            }\n+            return baos.toString();\n+        } catch (Exception e) {\n+            throw new IllegalStateException(\"Failed assembling asserting message.\", e);\n+        }\n+    }\n+\n+    private static String getImpactTypeLabel(ScoreImpactType scoreImpactType) {\n+        switch (scoreImpactType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d153e00aed7c2aefe45f3436e7720035b816db8"}, "originalPosition": 98}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyOTY2MzY1", "url": "https://github.com/kiegroup/optaplanner/pull/713#pullrequestreview-382966365", "createdAt": "2020-03-27T15:32:24Z", "commit": {"oid": "4d153e00aed7c2aefe45f3436e7720035b816db8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNTozMjoyNFrOF82ceQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNTozMjoyNFrOF82ceQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM1MDkwNQ==", "bodyText": "Why BendableScoreDefinition.java has getOne() that returns Number, while HardSoftScoreDefinition.java has getOneSoftestScore() that returns Score?\nI'd prefer them all to just have getOneSoftestScore() that returns Score and avoid any levelNumbers magic.\n(LevelNumbers are error prone.)", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r399350905", "createdAt": "2020-03-27T15:32:24Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/buildin/bendable/BendableScoreDefinition.java", "diffHunk": "@@ -44,6 +44,11 @@ public BendableScore getZeroScore() {\n         return BendableScore.zero(hardLevelsSize, softLevelsSize);\n     }\n \n+    @Override\n+    protected Number getOne() {\n+        return 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d153e00aed7c2aefe45f3436e7720035b816db8"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20dffd0d88d08a40f4db8986a4eaa3a5237f7124", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/20dffd0d88d08a40f4db8986a4eaa3a5237f7124", "committedDate": "2020-03-27T15:50:18Z", "message": "Finalized naming"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6496855791688757779b6ffb485f4db6f3aedebb", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/6496855791688757779b6ffb485f4db6f3aedebb", "committedDate": "2020-03-27T15:51:01Z", "message": "Constraint verifier gets its own API package"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05943bcbe281f3739e63d868da67ac2b85b22a6e", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/05943bcbe281f3739e63d868da67ac2b85b22a6e", "committedDate": "2020-03-27T15:55:49Z", "message": "optaplanner-test gets an API package"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyOTg3ODYx", "url": "https://github.com/kiegroup/optaplanner/pull/713#pullrequestreview-382987861", "createdAt": "2020-03-27T15:56:41Z", "commit": {"oid": "4d153e00aed7c2aefe45f3436e7720035b816db8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNTo1Njo0MVrOF83e4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNTo1Njo0MVrOF83e4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM2NzkwNw==", "bodyText": "I recommend avoid toLevelNumbers if possible.\nSo I'd assert that getZeroScore equals BendableScore.of(new int[]{0}, new int[]{0, 0})", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r399367907", "createdAt": "2020-03-27T15:56:41Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/test/java/org/optaplanner/core/impl/score/buildin/bendablebigdecimal/BendableBigDecimalScoreDefinitionTest.java", "diffHunk": "@@ -21,10 +21,24 @@\n import org.junit.Test;\n import org.optaplanner.core.api.score.buildin.bendablebigdecimal.BendableBigDecimalScore;\n \n-import static org.junit.Assert.*;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n \n public class BendableBigDecimalScoreDefinitionTest {\n \n+    @Test\n+    public void getZeroScore() {\n+        BendableBigDecimalScore score = new BendableBigDecimalScoreDefinition(1, 2).getZeroScore();\n+        assertThat(score.toLevelNumbers()).containsOnly(BigDecimal.ZERO);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d153e00aed7c2aefe45f3436e7720035b816db8"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyOTg5NzUw", "url": "https://github.com/kiegroup/optaplanner/pull/713#pullrequestreview-382989750", "createdAt": "2020-03-27T15:58:47Z", "commit": {"oid": "4d153e00aed7c2aefe45f3436e7720035b816db8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNTo1ODo0N1rOF83ksA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNTo1ODo0N1rOF83ksA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM2OTM5Mg==", "bodyText": "code style: \"0.0\" instead of \"0d\"", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r399369392", "createdAt": "2020-03-27T15:58:47Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/test/java/org/optaplanner/core/impl/score/buildin/hardsoftdouble/HardSoftDoubleScoreDefinitionTest.java", "diffHunk": "@@ -21,10 +21,24 @@\n import org.optaplanner.core.config.score.trend.InitializingScoreTrendLevel;\n import org.optaplanner.core.impl.score.trend.InitializingScoreTrend;\n \n-import static org.junit.Assert.*;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n \n public class HardSoftDoubleScoreDefinitionTest {\n \n+    @Test\n+    public void getZeroScore() {\n+        HardSoftDoubleScore score = new HardSoftDoubleScoreDefinition().getZeroScore();\n+        assertThat(score.toLevelNumbers()).containsOnly(0d);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d153e00aed7c2aefe45f3436e7720035b816db8"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyOTkxMzUw", "url": "https://github.com/kiegroup/optaplanner/pull/713#pullrequestreview-382991350", "createdAt": "2020-03-27T16:00:38Z", "commit": {"oid": "4d153e00aed7c2aefe45f3436e7720035b816db8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNjowMDozOVrOF83pzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNjowMDozOVrOF83pzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM3MDcwMA==", "bodyText": "add new method XStreamSolutionFileIO.read(InputStream) and use that instead of writing a temp file.", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r399370700", "createdAt": "2020-03-27T16:00:39Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.nqueens.solver.score;\n+\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.junit.Test;\n+import org.optaplanner.core.api.score.buildin.simple.SimpleScore;\n+import org.optaplanner.examples.nqueens.domain.Column;\n+import org.optaplanner.examples.nqueens.domain.NQueens;\n+import org.optaplanner.examples.nqueens.domain.Queen;\n+import org.optaplanner.examples.nqueens.domain.Row;\n+import org.optaplanner.persistence.common.api.domain.solution.SolutionFileIO;\n+import org.optaplanner.persistence.xstream.impl.domain.solution.XStreamSolutionFileIO;\n+import org.optaplanner.test.impl.score.stream.ConstraintVerifier;\n+\n+public class NQueensConstraintProviderTest {\n+\n+    private final NQueensConstraintProvider constraintProvider = new NQueensConstraintProvider();\n+    private final ConstraintVerifier<NQueens> constraintVerifier = ConstraintVerifier.using(NQueens.class, Queen.class);\n+\n+    private final Row row1 = new Row(0);\n+    private final Row row2 = new Row(1);\n+    private final Row row3 = new Row(2);\n+    private final Column column1 = new Column(0);\n+    private final Column column2 = new Column(1);\n+    private final Column column3 = new Column(2);\n+\n+    @Test\n+    public void noHorizontalConflictWithOneQueen() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        constraintVerifier.forConstraint(constraintProvider::horizontalConflict)\n+                .given(queen1)\n+                .expectNoImpact();\n+    }\n+\n+    @Test\n+    public void horizontalConflictWithTwoQueens() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        Queen queen2 = new Queen(1, row1, column2);\n+        constraintVerifier.forConstraint(constraintProvider::horizontalConflict)\n+                .given(queen1, queen2)\n+                .expectPenalty(1);\n+    }\n+\n+    @Test\n+    public void horizontalConflictWithThreeQueens() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        Queen queen2 = new Queen(1, row1, column2);\n+        Queen queen3 = new Queen(2, row1, column3);\n+        constraintVerifier.forConstraint(constraintProvider::horizontalConflict)\n+                .given(queen1, queen2, queen3)\n+                .expectPenalty(3);\n+    }\n+\n+    @Test\n+    public void noAscendingDiagonalConflictWithOneQueen() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        constraintVerifier.forConstraint(constraintProvider::ascendingDiagonalConflict)\n+                .given(queen1)\n+                .expectNoImpact();\n+    }\n+\n+    @Test\n+    public void ascendingDiagonalConflictWithTwoQueens() {\n+        Queen queen1 = new Queen(0, row1, column2);\n+        Queen queen2 = new Queen(1, row2, column1);\n+        constraintVerifier.forConstraint(constraintProvider::ascendingDiagonalConflict)\n+                .given(queen1, queen2)\n+                .expectPenalty(1);\n+    }\n+\n+    @Test\n+    public void ascendingDiagonalConflictWithThreeQueens() {\n+        Queen queen1 = new Queen(0, row1, column3);\n+        Queen queen2 = new Queen(1, row2, column2);\n+        Queen queen3 = new Queen(2, row3, column1);\n+        constraintVerifier.forConstraint(constraintProvider::ascendingDiagonalConflict)\n+                .given(queen1, queen2, queen3)\n+                .expectPenalty(3);\n+    }\n+\n+    @Test\n+    public void noDescendingDiagonalConflictWithOneQueen() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        constraintVerifier.forConstraint(constraintProvider::descendingDiagonalConflict)\n+                .given(queen1)\n+                .expectNoImpact();\n+    }\n+\n+    @Test\n+    public void descendingDiagonalConflictWithTwoQueens() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        Queen queen2 = new Queen(1, row2, column2);\n+        constraintVerifier.forConstraint(constraintProvider::descendingDiagonalConflict)\n+                .given(queen1, queen2)\n+                .expectPenalty(1);\n+    }\n+\n+    @Test\n+    public void descendingDiagonalConflictWithThreeQueens() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        Queen queen2 = new Queen(1, row2, column2);\n+        Queen queen3 = new Queen(2, row3, column3);\n+        constraintVerifier.forConstraint(constraintProvider::descendingDiagonalConflict)\n+                .given(queen1, queen2, queen3)\n+                .expectPenalty(3);\n+    }\n+\n+    private NQueens readSolution(String resource) throws IOException {\n+        Path tempFile = Files.createTempFile(\"optaplanner-test\", \"xml\");\n+        try (InputStreamReader inputStreamReader =\n+                new InputStreamReader(NQueensConstraintProviderTest.class.getResourceAsStream(resource))) {\n+            List<String> lines = IOUtils.readLines(inputStreamReader);\n+            Files.write(tempFile,lines);\n+            final SolutionFileIO<NQueens> solutionFileIO = new XStreamSolutionFileIO<>(NQueens.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d153e00aed7c2aefe45f3436e7720035b816db8"}, "originalPosition": 135}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyOTkxNjk5", "url": "https://github.com/kiegroup/optaplanner/pull/713#pullrequestreview-382991699", "createdAt": "2020-03-27T16:01:00Z", "commit": {"oid": "4d153e00aed7c2aefe45f3436e7720035b816db8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNjowMTowMFrOF83qyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNjowMTowMFrOF83qyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM3MDk1NA==", "bodyText": "file name needs to be self-explaining.", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r399370954", "createdAt": "2020-03-27T16:01:00Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-examples/src/test/resources/org/optaplanner/examples/nqueens/solver/score/256queens_-30.xml", "diffHunk": "@@ -0,0 +1,3339 @@\n+<NQueens id=\"1\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d153e00aed7c2aefe45f3436e7720035b816db8"}, "originalPosition": 1}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9f20a6903525a8aaec32c3143644b96f1078e70", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/d9f20a6903525a8aaec32c3143644b96f1078e70", "committedDate": "2020-03-27T16:08:48Z", "message": "Fix exception message"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47da4eca4f9853f4825b6bc1cf360a189ad8e516", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/47da4eca4f9853f4825b6bc1cf360a189ad8e516", "committedDate": "2020-03-27T16:15:14Z", "message": "Simpler solution file IO"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e6d50be05a1a56dad9072ae808d8785fe310201", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/9e6d50be05a1a56dad9072ae808d8785fe310201", "committedDate": "2020-03-27T16:16:55Z", "message": "Rename resource"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d44021dbf47a30d22048bb4e0b1b21c8094672d", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/1d44021dbf47a30d22048bb4e0b1b21c8094672d", "committedDate": "2020-03-27T16:35:26Z", "message": "Better score creation and testing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8669c52038b515d6c57b7a33f8251c9f0a24d14d", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/8669c52038b515d6c57b7a33f8251c9f0a24d14d", "committedDate": "2020-03-27T17:00:41Z", "message": "Remove raw type"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMDg1MTE1", "url": "https://github.com/kiegroup/optaplanner/pull/713#pullrequestreview-383085115", "createdAt": "2020-03-27T17:58:59Z", "commit": {"oid": "8669c52038b515d6c57b7a33f8251c9f0a24d14d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNzo1OTowMFrOF88O3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNzo1OTowMFrOF88O3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ0NTcyNA==", "bodyText": "code style: space before (", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r399445724", "createdAt": "2020-03-27T17:59:00Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-persistence/optaplanner-persistence-xstream/src/main/java/org/optaplanner/persistence/xstream/impl/domain/solution/XStreamSolutionFileIO.java", "diffHunk": "@@ -61,11 +62,19 @@ public String getInputFileExtension() {\n \n     @Override\n     public Solution_ read(File inputSolutionFile) {\n+        try(InputStream inputSolutionStream = Files.newInputStream(inputSolutionFile.toPath())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8669c52038b515d6c57b7a33f8251c9f0a24d14d"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMDg4OTkx", "url": "https://github.com/kiegroup/optaplanner/pull/713#pullrequestreview-383088991", "createdAt": "2020-03-27T18:04:25Z", "commit": {"oid": "8669c52038b515d6c57b7a33f8251c9f0a24d14d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxODowNDoyNVrOF88a9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxODowNDoyNVrOF88a9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ0ODgyMg==", "bodyText": "This one is serious: if there an XStreamException or an IOException during read(InputStream), the error message won't mention the inputSolutionFile, which is important as a breadcrumb (to figure out what 's wrong for the user).\nWhy? that read(InputStream) throws an IllegalSargumentException and that isn't caught.\nxstream exceptions are very common btw. Either invalid xml or  that has a  (there is no XSD).\nThinking further:\nif there is such an xml parsing or element nesting error for an resource (not file), then we still want the resource name.\nSuggestion to fix all of this:\n\nDon't add read(InputStream(). Add readResource(String resource) instead. That also decreases the boilerplate in the NQueensCosntraintProviderTest", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r399448822", "createdAt": "2020-03-27T18:04:25Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-persistence/optaplanner-persistence-xstream/src/main/java/org/optaplanner/persistence/xstream/impl/domain/solution/XStreamSolutionFileIO.java", "diffHunk": "@@ -61,11 +62,19 @@ public String getInputFileExtension() {\n \n     @Override\n     public Solution_ read(File inputSolutionFile) {\n+        try(InputStream inputSolutionStream = Files.newInputStream(inputSolutionFile.toPath())) {\n+            return read(inputSolutionStream);\n+        } catch (IOException e) {\n+            throw new IllegalArgumentException(\"Failed reading inputSolutionFile (\" + inputSolutionFile + \").\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8669c52038b515d6c57b7a33f8251c9f0a24d14d"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMDkxMTI0", "url": "https://github.com/kiegroup/optaplanner/pull/713#pullrequestreview-383091124", "createdAt": "2020-03-27T18:07:33Z", "commit": {"oid": "8669c52038b515d6c57b7a33f8251c9f0a24d14d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxODowNzozM1rOF88hew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxODowNzozM1rOF88hew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ1MDQ5MQ==", "bodyText": "Mind renaming V to Verifier_ and A to Assertion_?\nDo we really need this Foo<F extends Foo? I did that for Score and I regret it.\nDo we really need types A and V?\nOk to see this merges already as is and discuss on master.", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r399450491", "createdAt": "2020-03-27T18:07:33Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-test/src/main/java/org/optaplanner/test/api/score/stream/AbstractAssertion.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.test.api.score.stream;\n+\n+public abstract class AbstractAssertion<Solution_, A extends AbstractAssertion<Solution_, A, V>, V\n+        extends AbstractConstraintVerifier<Solution_, A, V>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8669c52038b515d6c57b7a33f8251c9f0a24d14d"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMDkyMjE5", "url": "https://github.com/kiegroup/optaplanner/pull/713#pullrequestreview-383092219", "createdAt": "2020-03-27T18:09:05Z", "commit": {"oid": "8669c52038b515d6c57b7a33f8251c9f0a24d14d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxODowOTowNVrOF88lFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxODowOTowNVrOF88lFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ1MTQxNA==", "bodyText": "Can do withConstraintStreamImplType(ConstraintStreamImplType constraintStreamImplType) like ScoreDirectorFactoryConfig#withConstraintStreamImplType instead?", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r399451414", "createdAt": "2020-03-27T18:09:05Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-test/src/main/java/org/optaplanner/test/api/score/stream/ConstraintVerifier.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.test.api.score.stream;\n+\n+import java.util.function.Function;\n+import java.util.stream.Stream;\n+\n+import org.optaplanner.core.api.domain.entity.PlanningEntity;\n+import org.optaplanner.core.api.domain.solution.PlanningSolution;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.core.api.score.stream.ConstraintStreamImplType;\n+import org.optaplanner.core.impl.domain.solution.descriptor.SolutionDescriptor;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public final class ConstraintVerifier<Solution_> {\n+\n+    private final SolutionDescriptor<Solution_> solutionDescriptor;\n+    private ConstraintStreamImplType constraintStreamImplType = ConstraintStreamImplType.DROOLS;\n+\n+    private ConstraintVerifier(SolutionDescriptor<Solution_> solutionDescriptor) {\n+        this.solutionDescriptor = solutionDescriptor;\n+    }\n+\n+    /**\n+     * Entry point to the API.\n+     *\n+     * @param planningSolutionClass never null, {@link PlanningSolution}-annotated class associated with the constraints\n+     * @param firstPlanningEntityClass never null, {@link PlanningEntity} used by the {@link PlanningSolution}\n+     * @param otherPlanningEntityClasses optional, extra entity classes if {@link PlanningSolution} uses more than one\n+     * @param <Solution_> type of the {@link PlanningSolution}-annotated class\n+     * @return never null\n+     */\n+    public static <Solution_> ConstraintVerifier<Solution_> build(Class<Solution_> planningSolutionClass,\n+            Class<?> firstPlanningEntityClass, Class<?>... otherPlanningEntityClasses) {\n+        Class[] entityClasses = Stream.concat(Stream.of(requireNonNull(firstPlanningEntityClass)),\n+                Stream.of(otherPlanningEntityClasses))\n+                .toArray(Class[]::new);\n+        SolutionDescriptor<Solution_> solutionDescriptor =\n+                SolutionDescriptor.buildSolutionDescriptor(requireNonNull(planningSolutionClass), entityClasses);\n+        return new ConstraintVerifier<>(solutionDescriptor);\n+    }\n+\n+    SolutionDescriptor<Solution_> getSolutionDescriptor() {\n+        return solutionDescriptor;\n+    }\n+\n+    /**\n+     * All subsequent calls to {@link #verifyThat(Function)} and {@link #verifyThat(ConstraintProvider)}\n+     * will use {@link ConstraintStreamImplType#BAVET} instead of the default {@link ConstraintStreamImplType#DROOLS}.\n+     * @return this\n+     */\n+    public ConstraintVerifier<Solution_> useBavet() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8669c52038b515d6c57b7a33f8251c9f0a24d14d"}, "originalPosition": 69}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10c0ad57335a5dd0e8d48177d87badeac7708c57", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/10c0ad57335a5dd0e8d48177d87badeac7708c57", "committedDate": "2020-03-27T18:27:41Z", "message": "Finishing touches"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2890, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}