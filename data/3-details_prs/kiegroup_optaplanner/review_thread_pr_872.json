{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0NzMzNjU5", "number": 872, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzo1OTozN1rOEWTjvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMzoxMjo1MFrOEWySog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODI0NTc1OnYy", "diffSide": "RIGHT", "path": "optaplanner-examples/src/main/resources/org/optaplanner/examples/pas/solver/patientAdmissionScheduleSolverConfig.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzo1OTozN1rOG9i98Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNzozNjo0MVrOG-EHYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE4OTIzMw==", "bodyText": "This should probably never be commented. It has no relation to either DRL or CS-D.", "url": "https://github.com/kiegroup/optaplanner/pull/872#discussion_r467189233", "createdAt": "2020-08-07T17:59:37Z", "author": {"login": "triceo"}, "path": "optaplanner-examples/src/main/resources/org/optaplanner/examples/pas/solver/patientAdmissionScheduleSolverConfig.xml", "diffHunk": "@@ -1,13 +1,19 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <solver>\n-  <!--<environmentMode>FULL_ASSERT</environmentMode>--><!-- To slowly prove there are no bugs in this code -->\n+  <environmentMode>FULL_ASSERT</environmentMode>\n   <!--<moveThreadCount>AUTO</moveThreadCount>--><!-- To solve faster by saturating multiple CPU cores -->\n \n   <solutionClass>org.optaplanner.examples.pas.domain.PatientAdmissionSchedule</solutionClass>\n   <entityClass>org.optaplanner.examples.pas.domain.BedDesignation</entityClass>\n \n   <scoreDirectorFactory>\n-    <scoreDrl>org/optaplanner/examples/pas/solver/patientAdmissionScheduleConstraints.drl</scoreDrl>\n+<!--    <scoreDrl>org/optaplanner/examples/pas/solver/patientAdmissionScheduleConstraints.drl</scoreDrl>-->\n+<!--    Uncomment if you want to use constraints stream-->\n+<!--    <initializingScoreTrend>ONLY_DOWN</initializingScoreTrend>-->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a77adbe40cd58339450dc3ec51b8258fbb4dd2e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzczMTgwMQ==", "bodyText": "Sorry, maybe  I should comment it in the code next time, not in the PR description. I left this like this so you can pull and test it if you want to check something", "url": "https://github.com/kiegroup/optaplanner/pull/872#discussion_r467731801", "createdAt": "2020-08-10T07:35:28Z", "author": {"login": "dupliaka"}, "path": "optaplanner-examples/src/main/resources/org/optaplanner/examples/pas/solver/patientAdmissionScheduleSolverConfig.xml", "diffHunk": "@@ -1,13 +1,19 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <solver>\n-  <!--<environmentMode>FULL_ASSERT</environmentMode>--><!-- To slowly prove there are no bugs in this code -->\n+  <environmentMode>FULL_ASSERT</environmentMode>\n   <!--<moveThreadCount>AUTO</moveThreadCount>--><!-- To solve faster by saturating multiple CPU cores -->\n \n   <solutionClass>org.optaplanner.examples.pas.domain.PatientAdmissionSchedule</solutionClass>\n   <entityClass>org.optaplanner.examples.pas.domain.BedDesignation</entityClass>\n \n   <scoreDirectorFactory>\n-    <scoreDrl>org/optaplanner/examples/pas/solver/patientAdmissionScheduleConstraints.drl</scoreDrl>\n+<!--    <scoreDrl>org/optaplanner/examples/pas/solver/patientAdmissionScheduleConstraints.drl</scoreDrl>-->\n+<!--    Uncomment if you want to use constraints stream-->\n+<!--    <initializingScoreTrend>ONLY_DOWN</initializingScoreTrend>-->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE4OTIzMw=="}, "originalCommit": {"oid": "8a77adbe40cd58339450dc3ec51b8258fbb4dd2e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzczMjMyMg==", "bodyText": "I mean specifically the ONLY_DOWN part - that should not be commented out, as it's a property of the construction heuristic. It has nothing to do with the scoring function.", "url": "https://github.com/kiegroup/optaplanner/pull/872#discussion_r467732322", "createdAt": "2020-08-10T07:36:41Z", "author": {"login": "triceo"}, "path": "optaplanner-examples/src/main/resources/org/optaplanner/examples/pas/solver/patientAdmissionScheduleSolverConfig.xml", "diffHunk": "@@ -1,13 +1,19 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <solver>\n-  <!--<environmentMode>FULL_ASSERT</environmentMode>--><!-- To slowly prove there are no bugs in this code -->\n+  <environmentMode>FULL_ASSERT</environmentMode>\n   <!--<moveThreadCount>AUTO</moveThreadCount>--><!-- To solve faster by saturating multiple CPU cores -->\n \n   <solutionClass>org.optaplanner.examples.pas.domain.PatientAdmissionSchedule</solutionClass>\n   <entityClass>org.optaplanner.examples.pas.domain.BedDesignation</entityClass>\n \n   <scoreDirectorFactory>\n-    <scoreDrl>org/optaplanner/examples/pas/solver/patientAdmissionScheduleConstraints.drl</scoreDrl>\n+<!--    <scoreDrl>org/optaplanner/examples/pas/solver/patientAdmissionScheduleConstraints.drl</scoreDrl>-->\n+<!--    Uncomment if you want to use constraints stream-->\n+<!--    <initializingScoreTrend>ONLY_DOWN</initializingScoreTrend>-->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE4OTIzMw=="}, "originalCommit": {"oid": "8a77adbe40cd58339450dc3ec51b8258fbb4dd2e"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODI1MzY4OnYy", "diffSide": "RIGHT", "path": "optaplanner-examples/src/test/java/org/optaplanner/examples/pas/solver/BedDesignationDO.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODowMjoxNFrOG9jC9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMjo1NTozMFrOG-NTzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5MDUxNg==", "bodyText": "Personally, I see this class as unnecessary complexity - I'd simply change BedDesignation to add the constructors etc.\nThe other examples do it the same way, so I'd appreciate if we stayed consistent.", "url": "https://github.com/kiegroup/optaplanner/pull/872#discussion_r467190516", "createdAt": "2020-08-07T18:02:14Z", "author": {"login": "triceo"}, "path": "optaplanner-examples/src/test/java/org/optaplanner/examples/pas/solver/BedDesignationDO.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.optaplanner.examples.pas.solver;\n+\n+import org.optaplanner.examples.pas.domain.AdmissionPart;\n+import org.optaplanner.examples.pas.domain.Bed;\n+import org.optaplanner.examples.pas.domain.BedDesignation;\n+import org.optaplanner.examples.pas.domain.Night;\n+import org.optaplanner.examples.pas.domain.Patient;\n+import org.optaplanner.examples.pas.domain.Room;\n+import org.optaplanner.examples.pas.domain.Specialism;\n+\n+public class BedDesignationDO extends BedDesignation {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a77adbe40cd58339450dc3ec51b8258fbb4dd2e"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg2OTM5Mg==", "bodyText": "Ok, just a proposal. Will add with methods", "url": "https://github.com/kiegroup/optaplanner/pull/872#discussion_r467869392", "createdAt": "2020-08-10T12:29:51Z", "author": {"login": "dupliaka"}, "path": "optaplanner-examples/src/test/java/org/optaplanner/examples/pas/solver/BedDesignationDO.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.optaplanner.examples.pas.solver;\n+\n+import org.optaplanner.examples.pas.domain.AdmissionPart;\n+import org.optaplanner.examples.pas.domain.Bed;\n+import org.optaplanner.examples.pas.domain.BedDesignation;\n+import org.optaplanner.examples.pas.domain.Night;\n+import org.optaplanner.examples.pas.domain.Patient;\n+import org.optaplanner.examples.pas.domain.Room;\n+import org.optaplanner.examples.pas.domain.Specialism;\n+\n+public class BedDesignationDO extends BedDesignation {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5MDUxNg=="}, "originalCommit": {"oid": "8a77adbe40cd58339450dc3ec51b8258fbb4dd2e"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg4Mjk1Nw==", "bodyText": "7dd1551", "url": "https://github.com/kiegroup/optaplanner/pull/872#discussion_r467882957", "createdAt": "2020-08-10T12:55:30Z", "author": {"login": "dupliaka"}, "path": "optaplanner-examples/src/test/java/org/optaplanner/examples/pas/solver/BedDesignationDO.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.optaplanner.examples.pas.solver;\n+\n+import org.optaplanner.examples.pas.domain.AdmissionPart;\n+import org.optaplanner.examples.pas.domain.Bed;\n+import org.optaplanner.examples.pas.domain.BedDesignation;\n+import org.optaplanner.examples.pas.domain.Night;\n+import org.optaplanner.examples.pas.domain.Patient;\n+import org.optaplanner.examples.pas.domain.Room;\n+import org.optaplanner.examples.pas.domain.Specialism;\n+\n+public class BedDesignationDO extends BedDesignation {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5MDUxNg=="}, "originalCommit": {"oid": "8a77adbe40cd58339450dc3ec51b8258fbb4dd2e"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODI2MjY0OnYy", "diffSide": "RIGHT", "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/pas/solver/score/PatientAdmissionMoveConstraintProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODowNToxNVrOG9jIcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMjoyNzo0OVrOG-Ma8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5MTkyMQ==", "bodyText": "null checks for planning variables are not necessary in Constraint Streams. fromUniquePair will make sure bed is never null.\nPlease check for this in the other constraints as well.", "url": "https://github.com/kiegroup/optaplanner/pull/872#discussion_r467191921", "createdAt": "2020-08-07T18:05:15Z", "author": {"login": "triceo"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/pas/solver/score/PatientAdmissionMoveConstraintProvider.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package org.optaplanner.examples.pas.solver.score;\n+\n+import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.examples.pas.domain.BedDesignation;\n+import org.optaplanner.examples.pas.domain.Department;\n+import org.optaplanner.examples.pas.domain.DepartmentSpecialism;\n+import org.optaplanner.examples.pas.domain.Gender;\n+import org.optaplanner.examples.pas.domain.GenderLimitation;\n+import org.optaplanner.examples.pas.domain.PreferredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RequiredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RoomEquipment;\n+import org.optaplanner.examples.pas.domain.RoomSpecialism;\n+\n+import static org.optaplanner.core.api.score.stream.Joiners.equal;\n+import static org.optaplanner.core.api.score.stream.Joiners.filtering;\n+import static org.optaplanner.core.api.score.stream.Joiners.lessThan;\n+\n+/*\n+ * This is constraints for Hospital Bed Planning\n+ * They are based on patientAdmissionScheduleConstraints.drl\n+ * Planning Entity: BedDesignation\n+ * Planning Variable: Bed(nullable) - would not be prefiltered on uninitialized solutions\n+ * Bed is nullable so in case you need to access it members check that planning value bed is not null\n+ */\n+\n+public class PatientAdmissionMoveConstraintProvider implements ConstraintProvider {\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n+        return new Constraint[]{\n+                sameBedInSameNightConstraint(constraintFactory),\n+                femaleInMaleRoomConstraint(constraintFactory),\n+                maleInFemaleRoomConstraint(constraintFactory),\n+                differentGenderInSameGenderRoomInSameNightConstraint(constraintFactory),\n+                departmentMinimumAgeConstraint(constraintFactory),\n+                departmentMaximumAgeConstraint(constraintFactory),\n+                requiredPatientEquipmentConstraint(constraintFactory),\n+                assignEveryPatientToABedConstraint(constraintFactory),\n+                preferredMaximumRoomCapacityConstraint(constraintFactory),\n+                departmentSpecialismConstraint(constraintFactory),\n+                roomSpecialismNotExistsConstraint(constraintFactory),\n+                roomSpecialismNotFirstPriorityConstraint(constraintFactory),\n+                preferredPatientEquipmentConstraint(constraintFactory)\n+        };\n+    }\n+\n+    public Constraint sameBedInSameNightConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.fromUniquePair(BedDesignation.class)\n+                .filter((left, right) -> left.getBed() != null\n+                        && right.getBed() != null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a77adbe40cd58339450dc3ec51b8258fbb4dd2e"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg2ODQwMA==", "bodyText": "Ignoring since bed is nullable", "url": "https://github.com/kiegroup/optaplanner/pull/872#discussion_r467868400", "createdAt": "2020-08-10T12:27:49Z", "author": {"login": "dupliaka"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/pas/solver/score/PatientAdmissionMoveConstraintProvider.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package org.optaplanner.examples.pas.solver.score;\n+\n+import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.examples.pas.domain.BedDesignation;\n+import org.optaplanner.examples.pas.domain.Department;\n+import org.optaplanner.examples.pas.domain.DepartmentSpecialism;\n+import org.optaplanner.examples.pas.domain.Gender;\n+import org.optaplanner.examples.pas.domain.GenderLimitation;\n+import org.optaplanner.examples.pas.domain.PreferredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RequiredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RoomEquipment;\n+import org.optaplanner.examples.pas.domain.RoomSpecialism;\n+\n+import static org.optaplanner.core.api.score.stream.Joiners.equal;\n+import static org.optaplanner.core.api.score.stream.Joiners.filtering;\n+import static org.optaplanner.core.api.score.stream.Joiners.lessThan;\n+\n+/*\n+ * This is constraints for Hospital Bed Planning\n+ * They are based on patientAdmissionScheduleConstraints.drl\n+ * Planning Entity: BedDesignation\n+ * Planning Variable: Bed(nullable) - would not be prefiltered on uninitialized solutions\n+ * Bed is nullable so in case you need to access it members check that planning value bed is not null\n+ */\n+\n+public class PatientAdmissionMoveConstraintProvider implements ConstraintProvider {\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n+        return new Constraint[]{\n+                sameBedInSameNightConstraint(constraintFactory),\n+                femaleInMaleRoomConstraint(constraintFactory),\n+                maleInFemaleRoomConstraint(constraintFactory),\n+                differentGenderInSameGenderRoomInSameNightConstraint(constraintFactory),\n+                departmentMinimumAgeConstraint(constraintFactory),\n+                departmentMaximumAgeConstraint(constraintFactory),\n+                requiredPatientEquipmentConstraint(constraintFactory),\n+                assignEveryPatientToABedConstraint(constraintFactory),\n+                preferredMaximumRoomCapacityConstraint(constraintFactory),\n+                departmentSpecialismConstraint(constraintFactory),\n+                roomSpecialismNotExistsConstraint(constraintFactory),\n+                roomSpecialismNotFirstPriorityConstraint(constraintFactory),\n+                preferredPatientEquipmentConstraint(constraintFactory)\n+        };\n+    }\n+\n+    public Constraint sameBedInSameNightConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.fromUniquePair(BedDesignation.class)\n+                .filter((left, right) -> left.getBed() != null\n+                        && right.getBed() != null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5MTkyMQ=="}, "originalCommit": {"oid": "8a77adbe40cd58339450dc3ec51b8258fbb4dd2e"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODI2NDExOnYy", "diffSide": "RIGHT", "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/pas/solver/score/PatientAdmissionMoveConstraintProvider.java", "isResolved": true, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODowNTo0OFrOG9jJYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMjo1NToyMFrOG-NTfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5MjE2Mg==", "bodyText": "Please use Joiners.equal(BedDesignation::getBed) for this.", "url": "https://github.com/kiegroup/optaplanner/pull/872#discussion_r467192162", "createdAt": "2020-08-07T18:05:48Z", "author": {"login": "triceo"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/pas/solver/score/PatientAdmissionMoveConstraintProvider.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package org.optaplanner.examples.pas.solver.score;\n+\n+import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.examples.pas.domain.BedDesignation;\n+import org.optaplanner.examples.pas.domain.Department;\n+import org.optaplanner.examples.pas.domain.DepartmentSpecialism;\n+import org.optaplanner.examples.pas.domain.Gender;\n+import org.optaplanner.examples.pas.domain.GenderLimitation;\n+import org.optaplanner.examples.pas.domain.PreferredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RequiredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RoomEquipment;\n+import org.optaplanner.examples.pas.domain.RoomSpecialism;\n+\n+import static org.optaplanner.core.api.score.stream.Joiners.equal;\n+import static org.optaplanner.core.api.score.stream.Joiners.filtering;\n+import static org.optaplanner.core.api.score.stream.Joiners.lessThan;\n+\n+/*\n+ * This is constraints for Hospital Bed Planning\n+ * They are based on patientAdmissionScheduleConstraints.drl\n+ * Planning Entity: BedDesignation\n+ * Planning Variable: Bed(nullable) - would not be prefiltered on uninitialized solutions\n+ * Bed is nullable so in case you need to access it members check that planning value bed is not null\n+ */\n+\n+public class PatientAdmissionMoveConstraintProvider implements ConstraintProvider {\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n+        return new Constraint[]{\n+                sameBedInSameNightConstraint(constraintFactory),\n+                femaleInMaleRoomConstraint(constraintFactory),\n+                maleInFemaleRoomConstraint(constraintFactory),\n+                differentGenderInSameGenderRoomInSameNightConstraint(constraintFactory),\n+                departmentMinimumAgeConstraint(constraintFactory),\n+                departmentMaximumAgeConstraint(constraintFactory),\n+                requiredPatientEquipmentConstraint(constraintFactory),\n+                assignEveryPatientToABedConstraint(constraintFactory),\n+                preferredMaximumRoomCapacityConstraint(constraintFactory),\n+                departmentSpecialismConstraint(constraintFactory),\n+                roomSpecialismNotExistsConstraint(constraintFactory),\n+                roomSpecialismNotFirstPriorityConstraint(constraintFactory),\n+                preferredPatientEquipmentConstraint(constraintFactory)\n+        };\n+    }\n+\n+    public Constraint sameBedInSameNightConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.fromUniquePair(BedDesignation.class)\n+                .filter((left, right) -> left.getBed() != null\n+                        && right.getBed() != null\n+                        && left.getBed() == right.getBed()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a77adbe40cd58339450dc3ec51b8258fbb4dd2e"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg0MDY4OA==", "bodyText": "BTW is that worth to mention that fromUniquePair is a syntax sugar as here: http://github.com/dupliaka/optaplanner/blob/PLANNER-1823/optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/ConstraintFactory.java#L95-L95\nSince I was beliving that sugared syntax should behave absolutely the same under the hood.", "url": "https://github.com/kiegroup/optaplanner/pull/872#discussion_r467840688", "createdAt": "2020-08-10T11:27:03Z", "author": {"login": "dupliaka"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/pas/solver/score/PatientAdmissionMoveConstraintProvider.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package org.optaplanner.examples.pas.solver.score;\n+\n+import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.examples.pas.domain.BedDesignation;\n+import org.optaplanner.examples.pas.domain.Department;\n+import org.optaplanner.examples.pas.domain.DepartmentSpecialism;\n+import org.optaplanner.examples.pas.domain.Gender;\n+import org.optaplanner.examples.pas.domain.GenderLimitation;\n+import org.optaplanner.examples.pas.domain.PreferredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RequiredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RoomEquipment;\n+import org.optaplanner.examples.pas.domain.RoomSpecialism;\n+\n+import static org.optaplanner.core.api.score.stream.Joiners.equal;\n+import static org.optaplanner.core.api.score.stream.Joiners.filtering;\n+import static org.optaplanner.core.api.score.stream.Joiners.lessThan;\n+\n+/*\n+ * This is constraints for Hospital Bed Planning\n+ * They are based on patientAdmissionScheduleConstraints.drl\n+ * Planning Entity: BedDesignation\n+ * Planning Variable: Bed(nullable) - would not be prefiltered on uninitialized solutions\n+ * Bed is nullable so in case you need to access it members check that planning value bed is not null\n+ */\n+\n+public class PatientAdmissionMoveConstraintProvider implements ConstraintProvider {\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n+        return new Constraint[]{\n+                sameBedInSameNightConstraint(constraintFactory),\n+                femaleInMaleRoomConstraint(constraintFactory),\n+                maleInFemaleRoomConstraint(constraintFactory),\n+                differentGenderInSameGenderRoomInSameNightConstraint(constraintFactory),\n+                departmentMinimumAgeConstraint(constraintFactory),\n+                departmentMaximumAgeConstraint(constraintFactory),\n+                requiredPatientEquipmentConstraint(constraintFactory),\n+                assignEveryPatientToABedConstraint(constraintFactory),\n+                preferredMaximumRoomCapacityConstraint(constraintFactory),\n+                departmentSpecialismConstraint(constraintFactory),\n+                roomSpecialismNotExistsConstraint(constraintFactory),\n+                roomSpecialismNotFirstPriorityConstraint(constraintFactory),\n+                preferredPatientEquipmentConstraint(constraintFactory)\n+        };\n+    }\n+\n+    public Constraint sameBedInSameNightConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.fromUniquePair(BedDesignation.class)\n+                .filter((left, right) -> left.getBed() != null\n+                        && right.getBed() != null\n+                        && left.getBed() == right.getBed()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5MjE2Mg=="}, "originalCommit": {"oid": "8a77adbe40cd58339450dc3ec51b8258fbb4dd2e"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg0MDk2NA==", "bodyText": "I mean since fromUniquePair implemented in the way that it is much slower", "url": "https://github.com/kiegroup/optaplanner/pull/872#discussion_r467840964", "createdAt": "2020-08-10T11:27:46Z", "author": {"login": "dupliaka"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/pas/solver/score/PatientAdmissionMoveConstraintProvider.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package org.optaplanner.examples.pas.solver.score;\n+\n+import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.examples.pas.domain.BedDesignation;\n+import org.optaplanner.examples.pas.domain.Department;\n+import org.optaplanner.examples.pas.domain.DepartmentSpecialism;\n+import org.optaplanner.examples.pas.domain.Gender;\n+import org.optaplanner.examples.pas.domain.GenderLimitation;\n+import org.optaplanner.examples.pas.domain.PreferredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RequiredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RoomEquipment;\n+import org.optaplanner.examples.pas.domain.RoomSpecialism;\n+\n+import static org.optaplanner.core.api.score.stream.Joiners.equal;\n+import static org.optaplanner.core.api.score.stream.Joiners.filtering;\n+import static org.optaplanner.core.api.score.stream.Joiners.lessThan;\n+\n+/*\n+ * This is constraints for Hospital Bed Planning\n+ * They are based on patientAdmissionScheduleConstraints.drl\n+ * Planning Entity: BedDesignation\n+ * Planning Variable: Bed(nullable) - would not be prefiltered on uninitialized solutions\n+ * Bed is nullable so in case you need to access it members check that planning value bed is not null\n+ */\n+\n+public class PatientAdmissionMoveConstraintProvider implements ConstraintProvider {\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n+        return new Constraint[]{\n+                sameBedInSameNightConstraint(constraintFactory),\n+                femaleInMaleRoomConstraint(constraintFactory),\n+                maleInFemaleRoomConstraint(constraintFactory),\n+                differentGenderInSameGenderRoomInSameNightConstraint(constraintFactory),\n+                departmentMinimumAgeConstraint(constraintFactory),\n+                departmentMaximumAgeConstraint(constraintFactory),\n+                requiredPatientEquipmentConstraint(constraintFactory),\n+                assignEveryPatientToABedConstraint(constraintFactory),\n+                preferredMaximumRoomCapacityConstraint(constraintFactory),\n+                departmentSpecialismConstraint(constraintFactory),\n+                roomSpecialismNotExistsConstraint(constraintFactory),\n+                roomSpecialismNotFirstPriorityConstraint(constraintFactory),\n+                preferredPatientEquipmentConstraint(constraintFactory)\n+        };\n+    }\n+\n+    public Constraint sameBedInSameNightConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.fromUniquePair(BedDesignation.class)\n+                .filter((left, right) -> left.getBed() != null\n+                        && right.getBed() != null\n+                        && left.getBed() == right.getBed()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5MjE2Mg=="}, "originalCommit": {"oid": "8a77adbe40cd58339450dc3ec51b8258fbb4dd2e"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg0MTQ4NA==", "bodyText": "I believe that the Javadoc is correct - since join, indeed, also filters out uninitialized entities.", "url": "https://github.com/kiegroup/optaplanner/pull/872#discussion_r467841484", "createdAt": "2020-08-10T11:28:58Z", "author": {"login": "triceo"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/pas/solver/score/PatientAdmissionMoveConstraintProvider.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package org.optaplanner.examples.pas.solver.score;\n+\n+import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.examples.pas.domain.BedDesignation;\n+import org.optaplanner.examples.pas.domain.Department;\n+import org.optaplanner.examples.pas.domain.DepartmentSpecialism;\n+import org.optaplanner.examples.pas.domain.Gender;\n+import org.optaplanner.examples.pas.domain.GenderLimitation;\n+import org.optaplanner.examples.pas.domain.PreferredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RequiredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RoomEquipment;\n+import org.optaplanner.examples.pas.domain.RoomSpecialism;\n+\n+import static org.optaplanner.core.api.score.stream.Joiners.equal;\n+import static org.optaplanner.core.api.score.stream.Joiners.filtering;\n+import static org.optaplanner.core.api.score.stream.Joiners.lessThan;\n+\n+/*\n+ * This is constraints for Hospital Bed Planning\n+ * They are based on patientAdmissionScheduleConstraints.drl\n+ * Planning Entity: BedDesignation\n+ * Planning Variable: Bed(nullable) - would not be prefiltered on uninitialized solutions\n+ * Bed is nullable so in case you need to access it members check that planning value bed is not null\n+ */\n+\n+public class PatientAdmissionMoveConstraintProvider implements ConstraintProvider {\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n+        return new Constraint[]{\n+                sameBedInSameNightConstraint(constraintFactory),\n+                femaleInMaleRoomConstraint(constraintFactory),\n+                maleInFemaleRoomConstraint(constraintFactory),\n+                differentGenderInSameGenderRoomInSameNightConstraint(constraintFactory),\n+                departmentMinimumAgeConstraint(constraintFactory),\n+                departmentMaximumAgeConstraint(constraintFactory),\n+                requiredPatientEquipmentConstraint(constraintFactory),\n+                assignEveryPatientToABedConstraint(constraintFactory),\n+                preferredMaximumRoomCapacityConstraint(constraintFactory),\n+                departmentSpecialismConstraint(constraintFactory),\n+                roomSpecialismNotExistsConstraint(constraintFactory),\n+                roomSpecialismNotFirstPriorityConstraint(constraintFactory),\n+                preferredPatientEquipmentConstraint(constraintFactory)\n+        };\n+    }\n+\n+    public Constraint sameBedInSameNightConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.fromUniquePair(BedDesignation.class)\n+                .filter((left, right) -> left.getBed() != null\n+                        && right.getBed() != null\n+                        && left.getBed() == right.getBed()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5MjE2Mg=="}, "originalCommit": {"oid": "8a77adbe40cd58339450dc3ec51b8258fbb4dd2e"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg0MzYzMw==", "bodyText": "+I have a concern about that: if I will use regular join, then since bed is nullable I need to check both (left and right) streams for bed!=null, but I will have a problem there bcs I need to do that before joining and I can not do that", "url": "https://github.com/kiegroup/optaplanner/pull/872#discussion_r467843633", "createdAt": "2020-08-10T11:33:43Z", "author": {"login": "dupliaka"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/pas/solver/score/PatientAdmissionMoveConstraintProvider.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package org.optaplanner.examples.pas.solver.score;\n+\n+import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.examples.pas.domain.BedDesignation;\n+import org.optaplanner.examples.pas.domain.Department;\n+import org.optaplanner.examples.pas.domain.DepartmentSpecialism;\n+import org.optaplanner.examples.pas.domain.Gender;\n+import org.optaplanner.examples.pas.domain.GenderLimitation;\n+import org.optaplanner.examples.pas.domain.PreferredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RequiredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RoomEquipment;\n+import org.optaplanner.examples.pas.domain.RoomSpecialism;\n+\n+import static org.optaplanner.core.api.score.stream.Joiners.equal;\n+import static org.optaplanner.core.api.score.stream.Joiners.filtering;\n+import static org.optaplanner.core.api.score.stream.Joiners.lessThan;\n+\n+/*\n+ * This is constraints for Hospital Bed Planning\n+ * They are based on patientAdmissionScheduleConstraints.drl\n+ * Planning Entity: BedDesignation\n+ * Planning Variable: Bed(nullable) - would not be prefiltered on uninitialized solutions\n+ * Bed is nullable so in case you need to access it members check that planning value bed is not null\n+ */\n+\n+public class PatientAdmissionMoveConstraintProvider implements ConstraintProvider {\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n+        return new Constraint[]{\n+                sameBedInSameNightConstraint(constraintFactory),\n+                femaleInMaleRoomConstraint(constraintFactory),\n+                maleInFemaleRoomConstraint(constraintFactory),\n+                differentGenderInSameGenderRoomInSameNightConstraint(constraintFactory),\n+                departmentMinimumAgeConstraint(constraintFactory),\n+                departmentMaximumAgeConstraint(constraintFactory),\n+                requiredPatientEquipmentConstraint(constraintFactory),\n+                assignEveryPatientToABedConstraint(constraintFactory),\n+                preferredMaximumRoomCapacityConstraint(constraintFactory),\n+                departmentSpecialismConstraint(constraintFactory),\n+                roomSpecialismNotExistsConstraint(constraintFactory),\n+                roomSpecialismNotFirstPriorityConstraint(constraintFactory),\n+                preferredPatientEquipmentConstraint(constraintFactory)\n+        };\n+    }\n+\n+    public Constraint sameBedInSameNightConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.fromUniquePair(BedDesignation.class)\n+                .filter((left, right) -> left.getBed() != null\n+                        && right.getBed() != null\n+                        && left.getBed() == right.getBed()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5MjE2Mg=="}, "originalCommit": {"oid": "8a77adbe40cd58339450dc3ec51b8258fbb4dd2e"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg0NDM2Nw==", "bodyText": "return constraintFactory.from(BedDesignation.class)\n                .filter((left)->left.getBed()!=null) // cannot filter right\n                .join(BedDesignation.class,\n                        equal(BedDesignation::getBed),\n                        lessThan(BedDesignation::getId))\n                .penalize(\"sameBedInSameNight\", HardMediumSoftScore.ofHard(1000)));\n    }```", "url": "https://github.com/kiegroup/optaplanner/pull/872#discussion_r467844367", "createdAt": "2020-08-10T11:35:26Z", "author": {"login": "dupliaka"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/pas/solver/score/PatientAdmissionMoveConstraintProvider.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package org.optaplanner.examples.pas.solver.score;\n+\n+import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.examples.pas.domain.BedDesignation;\n+import org.optaplanner.examples.pas.domain.Department;\n+import org.optaplanner.examples.pas.domain.DepartmentSpecialism;\n+import org.optaplanner.examples.pas.domain.Gender;\n+import org.optaplanner.examples.pas.domain.GenderLimitation;\n+import org.optaplanner.examples.pas.domain.PreferredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RequiredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RoomEquipment;\n+import org.optaplanner.examples.pas.domain.RoomSpecialism;\n+\n+import static org.optaplanner.core.api.score.stream.Joiners.equal;\n+import static org.optaplanner.core.api.score.stream.Joiners.filtering;\n+import static org.optaplanner.core.api.score.stream.Joiners.lessThan;\n+\n+/*\n+ * This is constraints for Hospital Bed Planning\n+ * They are based on patientAdmissionScheduleConstraints.drl\n+ * Planning Entity: BedDesignation\n+ * Planning Variable: Bed(nullable) - would not be prefiltered on uninitialized solutions\n+ * Bed is nullable so in case you need to access it members check that planning value bed is not null\n+ */\n+\n+public class PatientAdmissionMoveConstraintProvider implements ConstraintProvider {\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n+        return new Constraint[]{\n+                sameBedInSameNightConstraint(constraintFactory),\n+                femaleInMaleRoomConstraint(constraintFactory),\n+                maleInFemaleRoomConstraint(constraintFactory),\n+                differentGenderInSameGenderRoomInSameNightConstraint(constraintFactory),\n+                departmentMinimumAgeConstraint(constraintFactory),\n+                departmentMaximumAgeConstraint(constraintFactory),\n+                requiredPatientEquipmentConstraint(constraintFactory),\n+                assignEveryPatientToABedConstraint(constraintFactory),\n+                preferredMaximumRoomCapacityConstraint(constraintFactory),\n+                departmentSpecialismConstraint(constraintFactory),\n+                roomSpecialismNotExistsConstraint(constraintFactory),\n+                roomSpecialismNotFirstPriorityConstraint(constraintFactory),\n+                preferredPatientEquipmentConstraint(constraintFactory)\n+        };\n+    }\n+\n+    public Constraint sameBedInSameNightConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.fromUniquePair(BedDesignation.class)\n+                .filter((left, right) -> left.getBed() != null\n+                        && right.getBed() != null\n+                        && left.getBed() == right.getBed()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5MjE2Mg=="}, "originalCommit": {"oid": "8a77adbe40cd58339450dc3ec51b8258fbb4dd2e"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg0NjMzMA==", "bodyText": "That's the point though, you don't need to do that. The bed != null check is already done for you. This will be enough:\n return constraintFactory.from(BedDesignation.class)\n            .join(BedDesignation.class,\n                    equal(BedDesignation::getBed),\n                    lessThan(BedDesignation::getId))\n            .penalize(\"sameBedInSameNight\", HardMediumSoftScore.ofHard(1000)));\n\nIn fact, now that this constraint is so simple, you probably just need:\n return constraintFactory.fromUniquePair(BedDesignation.class,\n            equal(BedDesignation::getBed))\n            .penalize(\"sameBedInSameNight\", HardMediumSoftScore.ofHard(1000)));", "url": "https://github.com/kiegroup/optaplanner/pull/872#discussion_r467846330", "createdAt": "2020-08-10T11:39:46Z", "author": {"login": "triceo"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/pas/solver/score/PatientAdmissionMoveConstraintProvider.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package org.optaplanner.examples.pas.solver.score;\n+\n+import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.examples.pas.domain.BedDesignation;\n+import org.optaplanner.examples.pas.domain.Department;\n+import org.optaplanner.examples.pas.domain.DepartmentSpecialism;\n+import org.optaplanner.examples.pas.domain.Gender;\n+import org.optaplanner.examples.pas.domain.GenderLimitation;\n+import org.optaplanner.examples.pas.domain.PreferredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RequiredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RoomEquipment;\n+import org.optaplanner.examples.pas.domain.RoomSpecialism;\n+\n+import static org.optaplanner.core.api.score.stream.Joiners.equal;\n+import static org.optaplanner.core.api.score.stream.Joiners.filtering;\n+import static org.optaplanner.core.api.score.stream.Joiners.lessThan;\n+\n+/*\n+ * This is constraints for Hospital Bed Planning\n+ * They are based on patientAdmissionScheduleConstraints.drl\n+ * Planning Entity: BedDesignation\n+ * Planning Variable: Bed(nullable) - would not be prefiltered on uninitialized solutions\n+ * Bed is nullable so in case you need to access it members check that planning value bed is not null\n+ */\n+\n+public class PatientAdmissionMoveConstraintProvider implements ConstraintProvider {\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n+        return new Constraint[]{\n+                sameBedInSameNightConstraint(constraintFactory),\n+                femaleInMaleRoomConstraint(constraintFactory),\n+                maleInFemaleRoomConstraint(constraintFactory),\n+                differentGenderInSameGenderRoomInSameNightConstraint(constraintFactory),\n+                departmentMinimumAgeConstraint(constraintFactory),\n+                departmentMaximumAgeConstraint(constraintFactory),\n+                requiredPatientEquipmentConstraint(constraintFactory),\n+                assignEveryPatientToABedConstraint(constraintFactory),\n+                preferredMaximumRoomCapacityConstraint(constraintFactory),\n+                departmentSpecialismConstraint(constraintFactory),\n+                roomSpecialismNotExistsConstraint(constraintFactory),\n+                roomSpecialismNotFirstPriorityConstraint(constraintFactory),\n+                preferredPatientEquipmentConstraint(constraintFactory)\n+        };\n+    }\n+\n+    public Constraint sameBedInSameNightConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.fromUniquePair(BedDesignation.class)\n+                .filter((left, right) -> left.getBed() != null\n+                        && right.getBed() != null\n+                        && left.getBed() == right.getBed()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5MjE2Mg=="}, "originalCommit": {"oid": "8a77adbe40cd58339450dc3ec51b8258fbb4dd2e"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg2ODAzNw==", "bodyText": "Brilliant idea", "url": "https://github.com/kiegroup/optaplanner/pull/872#discussion_r467868037", "createdAt": "2020-08-10T12:27:06Z", "author": {"login": "dupliaka"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/pas/solver/score/PatientAdmissionMoveConstraintProvider.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package org.optaplanner.examples.pas.solver.score;\n+\n+import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.examples.pas.domain.BedDesignation;\n+import org.optaplanner.examples.pas.domain.Department;\n+import org.optaplanner.examples.pas.domain.DepartmentSpecialism;\n+import org.optaplanner.examples.pas.domain.Gender;\n+import org.optaplanner.examples.pas.domain.GenderLimitation;\n+import org.optaplanner.examples.pas.domain.PreferredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RequiredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RoomEquipment;\n+import org.optaplanner.examples.pas.domain.RoomSpecialism;\n+\n+import static org.optaplanner.core.api.score.stream.Joiners.equal;\n+import static org.optaplanner.core.api.score.stream.Joiners.filtering;\n+import static org.optaplanner.core.api.score.stream.Joiners.lessThan;\n+\n+/*\n+ * This is constraints for Hospital Bed Planning\n+ * They are based on patientAdmissionScheduleConstraints.drl\n+ * Planning Entity: BedDesignation\n+ * Planning Variable: Bed(nullable) - would not be prefiltered on uninitialized solutions\n+ * Bed is nullable so in case you need to access it members check that planning value bed is not null\n+ */\n+\n+public class PatientAdmissionMoveConstraintProvider implements ConstraintProvider {\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n+        return new Constraint[]{\n+                sameBedInSameNightConstraint(constraintFactory),\n+                femaleInMaleRoomConstraint(constraintFactory),\n+                maleInFemaleRoomConstraint(constraintFactory),\n+                differentGenderInSameGenderRoomInSameNightConstraint(constraintFactory),\n+                departmentMinimumAgeConstraint(constraintFactory),\n+                departmentMaximumAgeConstraint(constraintFactory),\n+                requiredPatientEquipmentConstraint(constraintFactory),\n+                assignEveryPatientToABedConstraint(constraintFactory),\n+                preferredMaximumRoomCapacityConstraint(constraintFactory),\n+                departmentSpecialismConstraint(constraintFactory),\n+                roomSpecialismNotExistsConstraint(constraintFactory),\n+                roomSpecialismNotFirstPriorityConstraint(constraintFactory),\n+                preferredPatientEquipmentConstraint(constraintFactory)\n+        };\n+    }\n+\n+    public Constraint sameBedInSameNightConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.fromUniquePair(BedDesignation.class)\n+                .filter((left, right) -> left.getBed() != null\n+                        && right.getBed() != null\n+                        && left.getBed() == right.getBed()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5MjE2Mg=="}, "originalCommit": {"oid": "8a77adbe40cd58339450dc3ec51b8258fbb4dd2e"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg4Mjg3Nw==", "bodyText": "7dd1551", "url": "https://github.com/kiegroup/optaplanner/pull/872#discussion_r467882877", "createdAt": "2020-08-10T12:55:20Z", "author": {"login": "dupliaka"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/pas/solver/score/PatientAdmissionMoveConstraintProvider.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package org.optaplanner.examples.pas.solver.score;\n+\n+import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.examples.pas.domain.BedDesignation;\n+import org.optaplanner.examples.pas.domain.Department;\n+import org.optaplanner.examples.pas.domain.DepartmentSpecialism;\n+import org.optaplanner.examples.pas.domain.Gender;\n+import org.optaplanner.examples.pas.domain.GenderLimitation;\n+import org.optaplanner.examples.pas.domain.PreferredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RequiredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RoomEquipment;\n+import org.optaplanner.examples.pas.domain.RoomSpecialism;\n+\n+import static org.optaplanner.core.api.score.stream.Joiners.equal;\n+import static org.optaplanner.core.api.score.stream.Joiners.filtering;\n+import static org.optaplanner.core.api.score.stream.Joiners.lessThan;\n+\n+/*\n+ * This is constraints for Hospital Bed Planning\n+ * They are based on patientAdmissionScheduleConstraints.drl\n+ * Planning Entity: BedDesignation\n+ * Planning Variable: Bed(nullable) - would not be prefiltered on uninitialized solutions\n+ * Bed is nullable so in case you need to access it members check that planning value bed is not null\n+ */\n+\n+public class PatientAdmissionMoveConstraintProvider implements ConstraintProvider {\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n+        return new Constraint[]{\n+                sameBedInSameNightConstraint(constraintFactory),\n+                femaleInMaleRoomConstraint(constraintFactory),\n+                maleInFemaleRoomConstraint(constraintFactory),\n+                differentGenderInSameGenderRoomInSameNightConstraint(constraintFactory),\n+                departmentMinimumAgeConstraint(constraintFactory),\n+                departmentMaximumAgeConstraint(constraintFactory),\n+                requiredPatientEquipmentConstraint(constraintFactory),\n+                assignEveryPatientToABedConstraint(constraintFactory),\n+                preferredMaximumRoomCapacityConstraint(constraintFactory),\n+                departmentSpecialismConstraint(constraintFactory),\n+                roomSpecialismNotExistsConstraint(constraintFactory),\n+                roomSpecialismNotFirstPriorityConstraint(constraintFactory),\n+                preferredPatientEquipmentConstraint(constraintFactory)\n+        };\n+    }\n+\n+    public Constraint sameBedInSameNightConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.fromUniquePair(BedDesignation.class)\n+                .filter((left, right) -> left.getBed() != null\n+                        && right.getBed() != null\n+                        && left.getBed() == right.getBed()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5MjE2Mg=="}, "originalCommit": {"oid": "8a77adbe40cd58339450dc3ec51b8258fbb4dd2e"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODI3MjMzOnYy", "diffSide": "RIGHT", "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/pas/solver/score/PatientAdmissionMoveConstraintProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODowODozM1rOG9jOkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMjo1NToxM1rOG-NTRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5MzQ5MA==", "bodyText": "Personally, I'd switch the order of operations to first do the ==, then != and only then do the calculateSameNightCount(...). This way, you make sure that the (possibly expensive) calculation is only done when the quick checks are already true, never wasting time.", "url": "https://github.com/kiegroup/optaplanner/pull/872#discussion_r467193490", "createdAt": "2020-08-07T18:08:33Z", "author": {"login": "triceo"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/pas/solver/score/PatientAdmissionMoveConstraintProvider.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package org.optaplanner.examples.pas.solver.score;\n+\n+import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.examples.pas.domain.BedDesignation;\n+import org.optaplanner.examples.pas.domain.Department;\n+import org.optaplanner.examples.pas.domain.DepartmentSpecialism;\n+import org.optaplanner.examples.pas.domain.Gender;\n+import org.optaplanner.examples.pas.domain.GenderLimitation;\n+import org.optaplanner.examples.pas.domain.PreferredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RequiredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RoomEquipment;\n+import org.optaplanner.examples.pas.domain.RoomSpecialism;\n+\n+import static org.optaplanner.core.api.score.stream.Joiners.equal;\n+import static org.optaplanner.core.api.score.stream.Joiners.filtering;\n+import static org.optaplanner.core.api.score.stream.Joiners.lessThan;\n+\n+/*\n+ * This is constraints for Hospital Bed Planning\n+ * They are based on patientAdmissionScheduleConstraints.drl\n+ * Planning Entity: BedDesignation\n+ * Planning Variable: Bed(nullable) - would not be prefiltered on uninitialized solutions\n+ * Bed is nullable so in case you need to access it members check that planning value bed is not null\n+ */\n+\n+public class PatientAdmissionMoveConstraintProvider implements ConstraintProvider {\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n+        return new Constraint[]{\n+                sameBedInSameNightConstraint(constraintFactory),\n+                femaleInMaleRoomConstraint(constraintFactory),\n+                maleInFemaleRoomConstraint(constraintFactory),\n+                differentGenderInSameGenderRoomInSameNightConstraint(constraintFactory),\n+                departmentMinimumAgeConstraint(constraintFactory),\n+                departmentMaximumAgeConstraint(constraintFactory),\n+                requiredPatientEquipmentConstraint(constraintFactory),\n+                assignEveryPatientToABedConstraint(constraintFactory),\n+                preferredMaximumRoomCapacityConstraint(constraintFactory),\n+                departmentSpecialismConstraint(constraintFactory),\n+                roomSpecialismNotExistsConstraint(constraintFactory),\n+                roomSpecialismNotFirstPriorityConstraint(constraintFactory),\n+                preferredPatientEquipmentConstraint(constraintFactory)\n+        };\n+    }\n+\n+    public Constraint sameBedInSameNightConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.fromUniquePair(BedDesignation.class)\n+                .filter((left, right) -> left.getBed() != null\n+                        && right.getBed() != null\n+                        && left.getBed() == right.getBed()\n+                        && left.getAdmissionPart().calculateSameNightCount(right.getAdmissionPart()) > 0)\n+                .penalize(\"sameBedInSameNight\", HardMediumSoftScore.ofHard(1000),\n+                        (leftBd, rightBd) -> leftBd.getAdmissionPart().calculateSameNightCount(rightBd.getAdmissionPart()));\n+    }\n+\n+    public Constraint femaleInMaleRoomConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BedDesignation.class)\n+                .filter(bd -> bd.getPatientGender() == Gender.FEMALE\n+                        && bd.getRoomGenderLimitation() == GenderLimitation.MALE_ONLY)\n+                .penalize(\"femaleInMaleRoom\", HardMediumSoftScore.ofHard(50), BedDesignation::getAdmissionPartNightCount);\n+    }\n+\n+    public Constraint maleInFemaleRoomConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BedDesignation.class)\n+                .filter(bd -> bd.getPatientGender() == Gender.MALE\n+                        && bd.getRoomGenderLimitation() == GenderLimitation.FEMALE_ONLY)\n+                .penalize(\"maleInFemaleRoom\", HardMediumSoftScore.ofHard(50), BedDesignation::getAdmissionPartNightCount);\n+    }\n+\n+    public Constraint differentGenderInSameGenderRoomInSameNightConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BedDesignation.class)\n+                .filter(bd -> bd.getRoomGenderLimitation() == GenderLimitation.SAME_GENDER\n+                        && bd.getBed() != null)\n+                .join(BedDesignation.class,\n+                        equal(BedDesignation::getRoom),\n+                        lessThan(BedDesignation::getId),\n+                        filtering((left, right) -> right.getRoomGenderLimitation() == GenderLimitation.SAME_GENDER\n+                                && left.getAdmissionPart().calculateSameNightCount(right.getAdmissionPart()) > 0\n+                                && left.getPatient().getGender() != right.getPatient().getGender()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a77adbe40cd58339450dc3ec51b8258fbb4dd2e"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg4MjgyMQ==", "bodyText": "7dd1551", "url": "https://github.com/kiegroup/optaplanner/pull/872#discussion_r467882821", "createdAt": "2020-08-10T12:55:13Z", "author": {"login": "dupliaka"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/pas/solver/score/PatientAdmissionMoveConstraintProvider.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package org.optaplanner.examples.pas.solver.score;\n+\n+import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.examples.pas.domain.BedDesignation;\n+import org.optaplanner.examples.pas.domain.Department;\n+import org.optaplanner.examples.pas.domain.DepartmentSpecialism;\n+import org.optaplanner.examples.pas.domain.Gender;\n+import org.optaplanner.examples.pas.domain.GenderLimitation;\n+import org.optaplanner.examples.pas.domain.PreferredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RequiredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RoomEquipment;\n+import org.optaplanner.examples.pas.domain.RoomSpecialism;\n+\n+import static org.optaplanner.core.api.score.stream.Joiners.equal;\n+import static org.optaplanner.core.api.score.stream.Joiners.filtering;\n+import static org.optaplanner.core.api.score.stream.Joiners.lessThan;\n+\n+/*\n+ * This is constraints for Hospital Bed Planning\n+ * They are based on patientAdmissionScheduleConstraints.drl\n+ * Planning Entity: BedDesignation\n+ * Planning Variable: Bed(nullable) - would not be prefiltered on uninitialized solutions\n+ * Bed is nullable so in case you need to access it members check that planning value bed is not null\n+ */\n+\n+public class PatientAdmissionMoveConstraintProvider implements ConstraintProvider {\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n+        return new Constraint[]{\n+                sameBedInSameNightConstraint(constraintFactory),\n+                femaleInMaleRoomConstraint(constraintFactory),\n+                maleInFemaleRoomConstraint(constraintFactory),\n+                differentGenderInSameGenderRoomInSameNightConstraint(constraintFactory),\n+                departmentMinimumAgeConstraint(constraintFactory),\n+                departmentMaximumAgeConstraint(constraintFactory),\n+                requiredPatientEquipmentConstraint(constraintFactory),\n+                assignEveryPatientToABedConstraint(constraintFactory),\n+                preferredMaximumRoomCapacityConstraint(constraintFactory),\n+                departmentSpecialismConstraint(constraintFactory),\n+                roomSpecialismNotExistsConstraint(constraintFactory),\n+                roomSpecialismNotFirstPriorityConstraint(constraintFactory),\n+                preferredPatientEquipmentConstraint(constraintFactory)\n+        };\n+    }\n+\n+    public Constraint sameBedInSameNightConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.fromUniquePair(BedDesignation.class)\n+                .filter((left, right) -> left.getBed() != null\n+                        && right.getBed() != null\n+                        && left.getBed() == right.getBed()\n+                        && left.getAdmissionPart().calculateSameNightCount(right.getAdmissionPart()) > 0)\n+                .penalize(\"sameBedInSameNight\", HardMediumSoftScore.ofHard(1000),\n+                        (leftBd, rightBd) -> leftBd.getAdmissionPart().calculateSameNightCount(rightBd.getAdmissionPart()));\n+    }\n+\n+    public Constraint femaleInMaleRoomConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BedDesignation.class)\n+                .filter(bd -> bd.getPatientGender() == Gender.FEMALE\n+                        && bd.getRoomGenderLimitation() == GenderLimitation.MALE_ONLY)\n+                .penalize(\"femaleInMaleRoom\", HardMediumSoftScore.ofHard(50), BedDesignation::getAdmissionPartNightCount);\n+    }\n+\n+    public Constraint maleInFemaleRoomConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BedDesignation.class)\n+                .filter(bd -> bd.getPatientGender() == Gender.MALE\n+                        && bd.getRoomGenderLimitation() == GenderLimitation.FEMALE_ONLY)\n+                .penalize(\"maleInFemaleRoom\", HardMediumSoftScore.ofHard(50), BedDesignation::getAdmissionPartNightCount);\n+    }\n+\n+    public Constraint differentGenderInSameGenderRoomInSameNightConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BedDesignation.class)\n+                .filter(bd -> bd.getRoomGenderLimitation() == GenderLimitation.SAME_GENDER\n+                        && bd.getBed() != null)\n+                .join(BedDesignation.class,\n+                        equal(BedDesignation::getRoom),\n+                        lessThan(BedDesignation::getId),\n+                        filtering((left, right) -> right.getRoomGenderLimitation() == GenderLimitation.SAME_GENDER\n+                                && left.getAdmissionPart().calculateSameNightCount(right.getAdmissionPart()) > 0\n+                                && left.getPatient().getGender() != right.getPatient().getGender()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5MzQ5MA=="}, "originalCommit": {"oid": "8a77adbe40cd58339450dc3ec51b8258fbb4dd2e"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODI3NTEyOnYy", "diffSide": "RIGHT", "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/pas/solver/score/PatientAdmissionMoveConstraintProvider.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODowOToyOFrOG9jQUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMzowNDozMFrOG-Nmiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5MzkzNw==", "bodyText": "Considering how often calculateSameNightCount() is used, I'd consider caching the calculation somehow. But maybe it's not a problem, doing a quick profiler run would tell you.", "url": "https://github.com/kiegroup/optaplanner/pull/872#discussion_r467193937", "createdAt": "2020-08-07T18:09:28Z", "author": {"login": "triceo"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/pas/solver/score/PatientAdmissionMoveConstraintProvider.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package org.optaplanner.examples.pas.solver.score;\n+\n+import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.examples.pas.domain.BedDesignation;\n+import org.optaplanner.examples.pas.domain.Department;\n+import org.optaplanner.examples.pas.domain.DepartmentSpecialism;\n+import org.optaplanner.examples.pas.domain.Gender;\n+import org.optaplanner.examples.pas.domain.GenderLimitation;\n+import org.optaplanner.examples.pas.domain.PreferredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RequiredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RoomEquipment;\n+import org.optaplanner.examples.pas.domain.RoomSpecialism;\n+\n+import static org.optaplanner.core.api.score.stream.Joiners.equal;\n+import static org.optaplanner.core.api.score.stream.Joiners.filtering;\n+import static org.optaplanner.core.api.score.stream.Joiners.lessThan;\n+\n+/*\n+ * This is constraints for Hospital Bed Planning\n+ * They are based on patientAdmissionScheduleConstraints.drl\n+ * Planning Entity: BedDesignation\n+ * Planning Variable: Bed(nullable) - would not be prefiltered on uninitialized solutions\n+ * Bed is nullable so in case you need to access it members check that planning value bed is not null\n+ */\n+\n+public class PatientAdmissionMoveConstraintProvider implements ConstraintProvider {\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n+        return new Constraint[]{\n+                sameBedInSameNightConstraint(constraintFactory),\n+                femaleInMaleRoomConstraint(constraintFactory),\n+                maleInFemaleRoomConstraint(constraintFactory),\n+                differentGenderInSameGenderRoomInSameNightConstraint(constraintFactory),\n+                departmentMinimumAgeConstraint(constraintFactory),\n+                departmentMaximumAgeConstraint(constraintFactory),\n+                requiredPatientEquipmentConstraint(constraintFactory),\n+                assignEveryPatientToABedConstraint(constraintFactory),\n+                preferredMaximumRoomCapacityConstraint(constraintFactory),\n+                departmentSpecialismConstraint(constraintFactory),\n+                roomSpecialismNotExistsConstraint(constraintFactory),\n+                roomSpecialismNotFirstPriorityConstraint(constraintFactory),\n+                preferredPatientEquipmentConstraint(constraintFactory)\n+        };\n+    }\n+\n+    public Constraint sameBedInSameNightConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.fromUniquePair(BedDesignation.class)\n+                .filter((left, right) -> left.getBed() != null\n+                        && right.getBed() != null\n+                        && left.getBed() == right.getBed()\n+                        && left.getAdmissionPart().calculateSameNightCount(right.getAdmissionPart()) > 0)\n+                .penalize(\"sameBedInSameNight\", HardMediumSoftScore.ofHard(1000),\n+                        (leftBd, rightBd) -> leftBd.getAdmissionPart().calculateSameNightCount(rightBd.getAdmissionPart()));\n+    }\n+\n+    public Constraint femaleInMaleRoomConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BedDesignation.class)\n+                .filter(bd -> bd.getPatientGender() == Gender.FEMALE\n+                        && bd.getRoomGenderLimitation() == GenderLimitation.MALE_ONLY)\n+                .penalize(\"femaleInMaleRoom\", HardMediumSoftScore.ofHard(50), BedDesignation::getAdmissionPartNightCount);\n+    }\n+\n+    public Constraint maleInFemaleRoomConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BedDesignation.class)\n+                .filter(bd -> bd.getPatientGender() == Gender.MALE\n+                        && bd.getRoomGenderLimitation() == GenderLimitation.FEMALE_ONLY)\n+                .penalize(\"maleInFemaleRoom\", HardMediumSoftScore.ofHard(50), BedDesignation::getAdmissionPartNightCount);\n+    }\n+\n+    public Constraint differentGenderInSameGenderRoomInSameNightConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BedDesignation.class)\n+                .filter(bd -> bd.getRoomGenderLimitation() == GenderLimitation.SAME_GENDER\n+                        && bd.getBed() != null)\n+                .join(BedDesignation.class,\n+                        equal(BedDesignation::getRoom),\n+                        lessThan(BedDesignation::getId),\n+                        filtering((left, right) -> right.getRoomGenderLimitation() == GenderLimitation.SAME_GENDER\n+                                && left.getAdmissionPart().calculateSameNightCount(right.getAdmissionPart()) > 0\n+                                && left.getPatient().getGender() != right.getPatient().getGender()))\n+                .penalize(\"differentGenderInSameGenderRoomInSameNight\", HardMediumSoftScore.ofHard(1000),\n+                        (left, right) -> left.getAdmissionPart().calculateSameNightCount(right.getAdmissionPart()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a77adbe40cd58339450dc3ec51b8258fbb4dd2e"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg4MzUzMA==", "bodyText": "Is that still relevant?", "url": "https://github.com/kiegroup/optaplanner/pull/872#discussion_r467883530", "createdAt": "2020-08-10T12:56:38Z", "author": {"login": "dupliaka"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/pas/solver/score/PatientAdmissionMoveConstraintProvider.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package org.optaplanner.examples.pas.solver.score;\n+\n+import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.examples.pas.domain.BedDesignation;\n+import org.optaplanner.examples.pas.domain.Department;\n+import org.optaplanner.examples.pas.domain.DepartmentSpecialism;\n+import org.optaplanner.examples.pas.domain.Gender;\n+import org.optaplanner.examples.pas.domain.GenderLimitation;\n+import org.optaplanner.examples.pas.domain.PreferredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RequiredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RoomEquipment;\n+import org.optaplanner.examples.pas.domain.RoomSpecialism;\n+\n+import static org.optaplanner.core.api.score.stream.Joiners.equal;\n+import static org.optaplanner.core.api.score.stream.Joiners.filtering;\n+import static org.optaplanner.core.api.score.stream.Joiners.lessThan;\n+\n+/*\n+ * This is constraints for Hospital Bed Planning\n+ * They are based on patientAdmissionScheduleConstraints.drl\n+ * Planning Entity: BedDesignation\n+ * Planning Variable: Bed(nullable) - would not be prefiltered on uninitialized solutions\n+ * Bed is nullable so in case you need to access it members check that planning value bed is not null\n+ */\n+\n+public class PatientAdmissionMoveConstraintProvider implements ConstraintProvider {\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n+        return new Constraint[]{\n+                sameBedInSameNightConstraint(constraintFactory),\n+                femaleInMaleRoomConstraint(constraintFactory),\n+                maleInFemaleRoomConstraint(constraintFactory),\n+                differentGenderInSameGenderRoomInSameNightConstraint(constraintFactory),\n+                departmentMinimumAgeConstraint(constraintFactory),\n+                departmentMaximumAgeConstraint(constraintFactory),\n+                requiredPatientEquipmentConstraint(constraintFactory),\n+                assignEveryPatientToABedConstraint(constraintFactory),\n+                preferredMaximumRoomCapacityConstraint(constraintFactory),\n+                departmentSpecialismConstraint(constraintFactory),\n+                roomSpecialismNotExistsConstraint(constraintFactory),\n+                roomSpecialismNotFirstPriorityConstraint(constraintFactory),\n+                preferredPatientEquipmentConstraint(constraintFactory)\n+        };\n+    }\n+\n+    public Constraint sameBedInSameNightConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.fromUniquePair(BedDesignation.class)\n+                .filter((left, right) -> left.getBed() != null\n+                        && right.getBed() != null\n+                        && left.getBed() == right.getBed()\n+                        && left.getAdmissionPart().calculateSameNightCount(right.getAdmissionPart()) > 0)\n+                .penalize(\"sameBedInSameNight\", HardMediumSoftScore.ofHard(1000),\n+                        (leftBd, rightBd) -> leftBd.getAdmissionPart().calculateSameNightCount(rightBd.getAdmissionPart()));\n+    }\n+\n+    public Constraint femaleInMaleRoomConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BedDesignation.class)\n+                .filter(bd -> bd.getPatientGender() == Gender.FEMALE\n+                        && bd.getRoomGenderLimitation() == GenderLimitation.MALE_ONLY)\n+                .penalize(\"femaleInMaleRoom\", HardMediumSoftScore.ofHard(50), BedDesignation::getAdmissionPartNightCount);\n+    }\n+\n+    public Constraint maleInFemaleRoomConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BedDesignation.class)\n+                .filter(bd -> bd.getPatientGender() == Gender.MALE\n+                        && bd.getRoomGenderLimitation() == GenderLimitation.FEMALE_ONLY)\n+                .penalize(\"maleInFemaleRoom\", HardMediumSoftScore.ofHard(50), BedDesignation::getAdmissionPartNightCount);\n+    }\n+\n+    public Constraint differentGenderInSameGenderRoomInSameNightConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BedDesignation.class)\n+                .filter(bd -> bd.getRoomGenderLimitation() == GenderLimitation.SAME_GENDER\n+                        && bd.getBed() != null)\n+                .join(BedDesignation.class,\n+                        equal(BedDesignation::getRoom),\n+                        lessThan(BedDesignation::getId),\n+                        filtering((left, right) -> right.getRoomGenderLimitation() == GenderLimitation.SAME_GENDER\n+                                && left.getAdmissionPart().calculateSameNightCount(right.getAdmissionPart()) > 0\n+                                && left.getPatient().getGender() != right.getPatient().getGender()))\n+                .penalize(\"differentGenderInSameGenderRoomInSameNight\", HardMediumSoftScore.ofHard(1000),\n+                        (left, right) -> left.getAdmissionPart().calculateSameNightCount(right.getAdmissionPart()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5MzkzNw=="}, "originalCommit": {"oid": "8a77adbe40cd58339450dc3ec51b8258fbb4dd2e"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg4Nzc1NQ==", "bodyText": "No.", "url": "https://github.com/kiegroup/optaplanner/pull/872#discussion_r467887755", "createdAt": "2020-08-10T13:04:30Z", "author": {"login": "triceo"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/pas/solver/score/PatientAdmissionMoveConstraintProvider.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package org.optaplanner.examples.pas.solver.score;\n+\n+import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.examples.pas.domain.BedDesignation;\n+import org.optaplanner.examples.pas.domain.Department;\n+import org.optaplanner.examples.pas.domain.DepartmentSpecialism;\n+import org.optaplanner.examples.pas.domain.Gender;\n+import org.optaplanner.examples.pas.domain.GenderLimitation;\n+import org.optaplanner.examples.pas.domain.PreferredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RequiredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RoomEquipment;\n+import org.optaplanner.examples.pas.domain.RoomSpecialism;\n+\n+import static org.optaplanner.core.api.score.stream.Joiners.equal;\n+import static org.optaplanner.core.api.score.stream.Joiners.filtering;\n+import static org.optaplanner.core.api.score.stream.Joiners.lessThan;\n+\n+/*\n+ * This is constraints for Hospital Bed Planning\n+ * They are based on patientAdmissionScheduleConstraints.drl\n+ * Planning Entity: BedDesignation\n+ * Planning Variable: Bed(nullable) - would not be prefiltered on uninitialized solutions\n+ * Bed is nullable so in case you need to access it members check that planning value bed is not null\n+ */\n+\n+public class PatientAdmissionMoveConstraintProvider implements ConstraintProvider {\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n+        return new Constraint[]{\n+                sameBedInSameNightConstraint(constraintFactory),\n+                femaleInMaleRoomConstraint(constraintFactory),\n+                maleInFemaleRoomConstraint(constraintFactory),\n+                differentGenderInSameGenderRoomInSameNightConstraint(constraintFactory),\n+                departmentMinimumAgeConstraint(constraintFactory),\n+                departmentMaximumAgeConstraint(constraintFactory),\n+                requiredPatientEquipmentConstraint(constraintFactory),\n+                assignEveryPatientToABedConstraint(constraintFactory),\n+                preferredMaximumRoomCapacityConstraint(constraintFactory),\n+                departmentSpecialismConstraint(constraintFactory),\n+                roomSpecialismNotExistsConstraint(constraintFactory),\n+                roomSpecialismNotFirstPriorityConstraint(constraintFactory),\n+                preferredPatientEquipmentConstraint(constraintFactory)\n+        };\n+    }\n+\n+    public Constraint sameBedInSameNightConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.fromUniquePair(BedDesignation.class)\n+                .filter((left, right) -> left.getBed() != null\n+                        && right.getBed() != null\n+                        && left.getBed() == right.getBed()\n+                        && left.getAdmissionPart().calculateSameNightCount(right.getAdmissionPart()) > 0)\n+                .penalize(\"sameBedInSameNight\", HardMediumSoftScore.ofHard(1000),\n+                        (leftBd, rightBd) -> leftBd.getAdmissionPart().calculateSameNightCount(rightBd.getAdmissionPart()));\n+    }\n+\n+    public Constraint femaleInMaleRoomConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BedDesignation.class)\n+                .filter(bd -> bd.getPatientGender() == Gender.FEMALE\n+                        && bd.getRoomGenderLimitation() == GenderLimitation.MALE_ONLY)\n+                .penalize(\"femaleInMaleRoom\", HardMediumSoftScore.ofHard(50), BedDesignation::getAdmissionPartNightCount);\n+    }\n+\n+    public Constraint maleInFemaleRoomConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BedDesignation.class)\n+                .filter(bd -> bd.getPatientGender() == Gender.MALE\n+                        && bd.getRoomGenderLimitation() == GenderLimitation.FEMALE_ONLY)\n+                .penalize(\"maleInFemaleRoom\", HardMediumSoftScore.ofHard(50), BedDesignation::getAdmissionPartNightCount);\n+    }\n+\n+    public Constraint differentGenderInSameGenderRoomInSameNightConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BedDesignation.class)\n+                .filter(bd -> bd.getRoomGenderLimitation() == GenderLimitation.SAME_GENDER\n+                        && bd.getBed() != null)\n+                .join(BedDesignation.class,\n+                        equal(BedDesignation::getRoom),\n+                        lessThan(BedDesignation::getId),\n+                        filtering((left, right) -> right.getRoomGenderLimitation() == GenderLimitation.SAME_GENDER\n+                                && left.getAdmissionPart().calculateSameNightCount(right.getAdmissionPart()) > 0\n+                                && left.getPatient().getGender() != right.getPatient().getGender()))\n+                .penalize(\"differentGenderInSameGenderRoomInSameNight\", HardMediumSoftScore.ofHard(1000),\n+                        (left, right) -> left.getAdmissionPart().calculateSameNightCount(right.getAdmissionPart()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5MzkzNw=="}, "originalCommit": {"oid": "8a77adbe40cd58339450dc3ec51b8258fbb4dd2e"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODI3NzcyOnYy", "diffSide": "RIGHT", "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/pas/solver/score/PatientAdmissionMoveConstraintProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODoxMDoxMVrOG9jRzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMjo1NDo0MlrOG-NR9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5NDMxOQ==", "bodyText": "Note: we have Joiners.lessThan(...).", "url": "https://github.com/kiegroup/optaplanner/pull/872#discussion_r467194319", "createdAt": "2020-08-07T18:10:11Z", "author": {"login": "triceo"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/pas/solver/score/PatientAdmissionMoveConstraintProvider.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package org.optaplanner.examples.pas.solver.score;\n+\n+import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.examples.pas.domain.BedDesignation;\n+import org.optaplanner.examples.pas.domain.Department;\n+import org.optaplanner.examples.pas.domain.DepartmentSpecialism;\n+import org.optaplanner.examples.pas.domain.Gender;\n+import org.optaplanner.examples.pas.domain.GenderLimitation;\n+import org.optaplanner.examples.pas.domain.PreferredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RequiredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RoomEquipment;\n+import org.optaplanner.examples.pas.domain.RoomSpecialism;\n+\n+import static org.optaplanner.core.api.score.stream.Joiners.equal;\n+import static org.optaplanner.core.api.score.stream.Joiners.filtering;\n+import static org.optaplanner.core.api.score.stream.Joiners.lessThan;\n+\n+/*\n+ * This is constraints for Hospital Bed Planning\n+ * They are based on patientAdmissionScheduleConstraints.drl\n+ * Planning Entity: BedDesignation\n+ * Planning Variable: Bed(nullable) - would not be prefiltered on uninitialized solutions\n+ * Bed is nullable so in case you need to access it members check that planning value bed is not null\n+ */\n+\n+public class PatientAdmissionMoveConstraintProvider implements ConstraintProvider {\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n+        return new Constraint[]{\n+                sameBedInSameNightConstraint(constraintFactory),\n+                femaleInMaleRoomConstraint(constraintFactory),\n+                maleInFemaleRoomConstraint(constraintFactory),\n+                differentGenderInSameGenderRoomInSameNightConstraint(constraintFactory),\n+                departmentMinimumAgeConstraint(constraintFactory),\n+                departmentMaximumAgeConstraint(constraintFactory),\n+                requiredPatientEquipmentConstraint(constraintFactory),\n+                assignEveryPatientToABedConstraint(constraintFactory),\n+                preferredMaximumRoomCapacityConstraint(constraintFactory),\n+                departmentSpecialismConstraint(constraintFactory),\n+                roomSpecialismNotExistsConstraint(constraintFactory),\n+                roomSpecialismNotFirstPriorityConstraint(constraintFactory),\n+                preferredPatientEquipmentConstraint(constraintFactory)\n+        };\n+    }\n+\n+    public Constraint sameBedInSameNightConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.fromUniquePair(BedDesignation.class)\n+                .filter((left, right) -> left.getBed() != null\n+                        && right.getBed() != null\n+                        && left.getBed() == right.getBed()\n+                        && left.getAdmissionPart().calculateSameNightCount(right.getAdmissionPart()) > 0)\n+                .penalize(\"sameBedInSameNight\", HardMediumSoftScore.ofHard(1000),\n+                        (leftBd, rightBd) -> leftBd.getAdmissionPart().calculateSameNightCount(rightBd.getAdmissionPart()));\n+    }\n+\n+    public Constraint femaleInMaleRoomConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BedDesignation.class)\n+                .filter(bd -> bd.getPatientGender() == Gender.FEMALE\n+                        && bd.getRoomGenderLimitation() == GenderLimitation.MALE_ONLY)\n+                .penalize(\"femaleInMaleRoom\", HardMediumSoftScore.ofHard(50), BedDesignation::getAdmissionPartNightCount);\n+    }\n+\n+    public Constraint maleInFemaleRoomConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BedDesignation.class)\n+                .filter(bd -> bd.getPatientGender() == Gender.MALE\n+                        && bd.getRoomGenderLimitation() == GenderLimitation.FEMALE_ONLY)\n+                .penalize(\"maleInFemaleRoom\", HardMediumSoftScore.ofHard(50), BedDesignation::getAdmissionPartNightCount);\n+    }\n+\n+    public Constraint differentGenderInSameGenderRoomInSameNightConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BedDesignation.class)\n+                .filter(bd -> bd.getRoomGenderLimitation() == GenderLimitation.SAME_GENDER\n+                        && bd.getBed() != null)\n+                .join(BedDesignation.class,\n+                        equal(BedDesignation::getRoom),\n+                        lessThan(BedDesignation::getId),\n+                        filtering((left, right) -> right.getRoomGenderLimitation() == GenderLimitation.SAME_GENDER\n+                                && left.getAdmissionPart().calculateSameNightCount(right.getAdmissionPart()) > 0\n+                                && left.getPatient().getGender() != right.getPatient().getGender()))\n+                .penalize(\"differentGenderInSameGenderRoomInSameNight\", HardMediumSoftScore.ofHard(1000),\n+                        (left, right) -> left.getAdmissionPart().calculateSameNightCount(right.getAdmissionPart()));\n+    }\n+\n+    public Constraint departmentMinimumAgeConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Department.class)\n+                .filter(d -> d.getMinimumAge() != null)\n+                .join(BedDesignation.class,\n+                        equal(d -> d, BedDesignation::getDepartment),\n+                        filtering((d, bd) -> bd.getPatientAge() < d.getMinimumAge()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a77adbe40cd58339450dc3ec51b8258fbb4dd2e"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg4MjQ4NQ==", "bodyText": "94c6008", "url": "https://github.com/kiegroup/optaplanner/pull/872#discussion_r467882485", "createdAt": "2020-08-10T12:54:42Z", "author": {"login": "dupliaka"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/pas/solver/score/PatientAdmissionMoveConstraintProvider.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package org.optaplanner.examples.pas.solver.score;\n+\n+import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.examples.pas.domain.BedDesignation;\n+import org.optaplanner.examples.pas.domain.Department;\n+import org.optaplanner.examples.pas.domain.DepartmentSpecialism;\n+import org.optaplanner.examples.pas.domain.Gender;\n+import org.optaplanner.examples.pas.domain.GenderLimitation;\n+import org.optaplanner.examples.pas.domain.PreferredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RequiredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RoomEquipment;\n+import org.optaplanner.examples.pas.domain.RoomSpecialism;\n+\n+import static org.optaplanner.core.api.score.stream.Joiners.equal;\n+import static org.optaplanner.core.api.score.stream.Joiners.filtering;\n+import static org.optaplanner.core.api.score.stream.Joiners.lessThan;\n+\n+/*\n+ * This is constraints for Hospital Bed Planning\n+ * They are based on patientAdmissionScheduleConstraints.drl\n+ * Planning Entity: BedDesignation\n+ * Planning Variable: Bed(nullable) - would not be prefiltered on uninitialized solutions\n+ * Bed is nullable so in case you need to access it members check that planning value bed is not null\n+ */\n+\n+public class PatientAdmissionMoveConstraintProvider implements ConstraintProvider {\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n+        return new Constraint[]{\n+                sameBedInSameNightConstraint(constraintFactory),\n+                femaleInMaleRoomConstraint(constraintFactory),\n+                maleInFemaleRoomConstraint(constraintFactory),\n+                differentGenderInSameGenderRoomInSameNightConstraint(constraintFactory),\n+                departmentMinimumAgeConstraint(constraintFactory),\n+                departmentMaximumAgeConstraint(constraintFactory),\n+                requiredPatientEquipmentConstraint(constraintFactory),\n+                assignEveryPatientToABedConstraint(constraintFactory),\n+                preferredMaximumRoomCapacityConstraint(constraintFactory),\n+                departmentSpecialismConstraint(constraintFactory),\n+                roomSpecialismNotExistsConstraint(constraintFactory),\n+                roomSpecialismNotFirstPriorityConstraint(constraintFactory),\n+                preferredPatientEquipmentConstraint(constraintFactory)\n+        };\n+    }\n+\n+    public Constraint sameBedInSameNightConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.fromUniquePair(BedDesignation.class)\n+                .filter((left, right) -> left.getBed() != null\n+                        && right.getBed() != null\n+                        && left.getBed() == right.getBed()\n+                        && left.getAdmissionPart().calculateSameNightCount(right.getAdmissionPart()) > 0)\n+                .penalize(\"sameBedInSameNight\", HardMediumSoftScore.ofHard(1000),\n+                        (leftBd, rightBd) -> leftBd.getAdmissionPart().calculateSameNightCount(rightBd.getAdmissionPart()));\n+    }\n+\n+    public Constraint femaleInMaleRoomConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BedDesignation.class)\n+                .filter(bd -> bd.getPatientGender() == Gender.FEMALE\n+                        && bd.getRoomGenderLimitation() == GenderLimitation.MALE_ONLY)\n+                .penalize(\"femaleInMaleRoom\", HardMediumSoftScore.ofHard(50), BedDesignation::getAdmissionPartNightCount);\n+    }\n+\n+    public Constraint maleInFemaleRoomConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BedDesignation.class)\n+                .filter(bd -> bd.getPatientGender() == Gender.MALE\n+                        && bd.getRoomGenderLimitation() == GenderLimitation.FEMALE_ONLY)\n+                .penalize(\"maleInFemaleRoom\", HardMediumSoftScore.ofHard(50), BedDesignation::getAdmissionPartNightCount);\n+    }\n+\n+    public Constraint differentGenderInSameGenderRoomInSameNightConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BedDesignation.class)\n+                .filter(bd -> bd.getRoomGenderLimitation() == GenderLimitation.SAME_GENDER\n+                        && bd.getBed() != null)\n+                .join(BedDesignation.class,\n+                        equal(BedDesignation::getRoom),\n+                        lessThan(BedDesignation::getId),\n+                        filtering((left, right) -> right.getRoomGenderLimitation() == GenderLimitation.SAME_GENDER\n+                                && left.getAdmissionPart().calculateSameNightCount(right.getAdmissionPart()) > 0\n+                                && left.getPatient().getGender() != right.getPatient().getGender()))\n+                .penalize(\"differentGenderInSameGenderRoomInSameNight\", HardMediumSoftScore.ofHard(1000),\n+                        (left, right) -> left.getAdmissionPart().calculateSameNightCount(right.getAdmissionPart()));\n+    }\n+\n+    public Constraint departmentMinimumAgeConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Department.class)\n+                .filter(d -> d.getMinimumAge() != null)\n+                .join(BedDesignation.class,\n+                        equal(d -> d, BedDesignation::getDepartment),\n+                        filtering((d, bd) -> bd.getPatientAge() < d.getMinimumAge()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5NDMxOQ=="}, "originalCommit": {"oid": "8a77adbe40cd58339450dc3ec51b8258fbb4dd2e"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODc5MjQ3OnYy", "diffSide": "RIGHT", "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/pas/solver/score/PatientAdmissionMoveConstraintProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMToyMzoxMFrOG9oNXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMjo1MjozMVrOG-NNhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI3NTEwMA==", "bodyText": "d -> d should be the same as Function.identity().", "url": "https://github.com/kiegroup/optaplanner/pull/872#discussion_r467275100", "createdAt": "2020-08-07T21:23:10Z", "author": {"login": "triceo"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/pas/solver/score/PatientAdmissionMoveConstraintProvider.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package org.optaplanner.examples.pas.solver.score;\n+\n+import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.examples.pas.domain.BedDesignation;\n+import org.optaplanner.examples.pas.domain.Department;\n+import org.optaplanner.examples.pas.domain.DepartmentSpecialism;\n+import org.optaplanner.examples.pas.domain.Gender;\n+import org.optaplanner.examples.pas.domain.GenderLimitation;\n+import org.optaplanner.examples.pas.domain.PreferredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RequiredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RoomEquipment;\n+import org.optaplanner.examples.pas.domain.RoomSpecialism;\n+\n+import static org.optaplanner.core.api.score.stream.Joiners.equal;\n+import static org.optaplanner.core.api.score.stream.Joiners.filtering;\n+import static org.optaplanner.core.api.score.stream.Joiners.lessThan;\n+\n+/*\n+ * This is constraints for Hospital Bed Planning\n+ * They are based on patientAdmissionScheduleConstraints.drl\n+ * Planning Entity: BedDesignation\n+ * Planning Variable: Bed(nullable) - would not be prefiltered on uninitialized solutions\n+ * Bed is nullable so in case you need to access it members check that planning value bed is not null\n+ */\n+\n+public class PatientAdmissionMoveConstraintProvider implements ConstraintProvider {\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n+        return new Constraint[]{\n+                sameBedInSameNightConstraint(constraintFactory),\n+                femaleInMaleRoomConstraint(constraintFactory),\n+                maleInFemaleRoomConstraint(constraintFactory),\n+                differentGenderInSameGenderRoomInSameNightConstraint(constraintFactory),\n+                departmentMinimumAgeConstraint(constraintFactory),\n+                departmentMaximumAgeConstraint(constraintFactory),\n+                requiredPatientEquipmentConstraint(constraintFactory),\n+                assignEveryPatientToABedConstraint(constraintFactory),\n+                preferredMaximumRoomCapacityConstraint(constraintFactory),\n+                departmentSpecialismConstraint(constraintFactory),\n+                roomSpecialismNotExistsConstraint(constraintFactory),\n+                roomSpecialismNotFirstPriorityConstraint(constraintFactory),\n+                preferredPatientEquipmentConstraint(constraintFactory)\n+        };\n+    }\n+\n+    public Constraint sameBedInSameNightConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.fromUniquePair(BedDesignation.class)\n+                .filter((left, right) -> left.getBed() != null\n+                        && right.getBed() != null\n+                        && left.getBed() == right.getBed()\n+                        && left.getAdmissionPart().calculateSameNightCount(right.getAdmissionPart()) > 0)\n+                .penalize(\"sameBedInSameNight\", HardMediumSoftScore.ofHard(1000),\n+                        (leftBd, rightBd) -> leftBd.getAdmissionPart().calculateSameNightCount(rightBd.getAdmissionPart()));\n+    }\n+\n+    public Constraint femaleInMaleRoomConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BedDesignation.class)\n+                .filter(bd -> bd.getPatientGender() == Gender.FEMALE\n+                        && bd.getRoomGenderLimitation() == GenderLimitation.MALE_ONLY)\n+                .penalize(\"femaleInMaleRoom\", HardMediumSoftScore.ofHard(50), BedDesignation::getAdmissionPartNightCount);\n+    }\n+\n+    public Constraint maleInFemaleRoomConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BedDesignation.class)\n+                .filter(bd -> bd.getPatientGender() == Gender.MALE\n+                        && bd.getRoomGenderLimitation() == GenderLimitation.FEMALE_ONLY)\n+                .penalize(\"maleInFemaleRoom\", HardMediumSoftScore.ofHard(50), BedDesignation::getAdmissionPartNightCount);\n+    }\n+\n+    public Constraint differentGenderInSameGenderRoomInSameNightConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BedDesignation.class)\n+                .filter(bd -> bd.getRoomGenderLimitation() == GenderLimitation.SAME_GENDER\n+                        && bd.getBed() != null)\n+                .join(BedDesignation.class,\n+                        equal(BedDesignation::getRoom),\n+                        lessThan(BedDesignation::getId),\n+                        filtering((left, right) -> right.getRoomGenderLimitation() == GenderLimitation.SAME_GENDER\n+                                && left.getAdmissionPart().calculateSameNightCount(right.getAdmissionPart()) > 0\n+                                && left.getPatient().getGender() != right.getPatient().getGender()))\n+                .penalize(\"differentGenderInSameGenderRoomInSameNight\", HardMediumSoftScore.ofHard(1000),\n+                        (left, right) -> left.getAdmissionPart().calculateSameNightCount(right.getAdmissionPart()));\n+    }\n+\n+    public Constraint departmentMinimumAgeConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Department.class)\n+                .filter(d -> d.getMinimumAge() != null)\n+                .join(BedDesignation.class,\n+                        equal(d -> d, BedDesignation::getDepartment),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a77adbe40cd58339450dc3ec51b8258fbb4dd2e"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg4MTM1MQ==", "bodyText": "Fix 94c6008", "url": "https://github.com/kiegroup/optaplanner/pull/872#discussion_r467881351", "createdAt": "2020-08-10T12:52:31Z", "author": {"login": "dupliaka"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/pas/solver/score/PatientAdmissionMoveConstraintProvider.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package org.optaplanner.examples.pas.solver.score;\n+\n+import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.examples.pas.domain.BedDesignation;\n+import org.optaplanner.examples.pas.domain.Department;\n+import org.optaplanner.examples.pas.domain.DepartmentSpecialism;\n+import org.optaplanner.examples.pas.domain.Gender;\n+import org.optaplanner.examples.pas.domain.GenderLimitation;\n+import org.optaplanner.examples.pas.domain.PreferredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RequiredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RoomEquipment;\n+import org.optaplanner.examples.pas.domain.RoomSpecialism;\n+\n+import static org.optaplanner.core.api.score.stream.Joiners.equal;\n+import static org.optaplanner.core.api.score.stream.Joiners.filtering;\n+import static org.optaplanner.core.api.score.stream.Joiners.lessThan;\n+\n+/*\n+ * This is constraints for Hospital Bed Planning\n+ * They are based on patientAdmissionScheduleConstraints.drl\n+ * Planning Entity: BedDesignation\n+ * Planning Variable: Bed(nullable) - would not be prefiltered on uninitialized solutions\n+ * Bed is nullable so in case you need to access it members check that planning value bed is not null\n+ */\n+\n+public class PatientAdmissionMoveConstraintProvider implements ConstraintProvider {\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n+        return new Constraint[]{\n+                sameBedInSameNightConstraint(constraintFactory),\n+                femaleInMaleRoomConstraint(constraintFactory),\n+                maleInFemaleRoomConstraint(constraintFactory),\n+                differentGenderInSameGenderRoomInSameNightConstraint(constraintFactory),\n+                departmentMinimumAgeConstraint(constraintFactory),\n+                departmentMaximumAgeConstraint(constraintFactory),\n+                requiredPatientEquipmentConstraint(constraintFactory),\n+                assignEveryPatientToABedConstraint(constraintFactory),\n+                preferredMaximumRoomCapacityConstraint(constraintFactory),\n+                departmentSpecialismConstraint(constraintFactory),\n+                roomSpecialismNotExistsConstraint(constraintFactory),\n+                roomSpecialismNotFirstPriorityConstraint(constraintFactory),\n+                preferredPatientEquipmentConstraint(constraintFactory)\n+        };\n+    }\n+\n+    public Constraint sameBedInSameNightConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.fromUniquePair(BedDesignation.class)\n+                .filter((left, right) -> left.getBed() != null\n+                        && right.getBed() != null\n+                        && left.getBed() == right.getBed()\n+                        && left.getAdmissionPart().calculateSameNightCount(right.getAdmissionPart()) > 0)\n+                .penalize(\"sameBedInSameNight\", HardMediumSoftScore.ofHard(1000),\n+                        (leftBd, rightBd) -> leftBd.getAdmissionPart().calculateSameNightCount(rightBd.getAdmissionPart()));\n+    }\n+\n+    public Constraint femaleInMaleRoomConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BedDesignation.class)\n+                .filter(bd -> bd.getPatientGender() == Gender.FEMALE\n+                        && bd.getRoomGenderLimitation() == GenderLimitation.MALE_ONLY)\n+                .penalize(\"femaleInMaleRoom\", HardMediumSoftScore.ofHard(50), BedDesignation::getAdmissionPartNightCount);\n+    }\n+\n+    public Constraint maleInFemaleRoomConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BedDesignation.class)\n+                .filter(bd -> bd.getPatientGender() == Gender.MALE\n+                        && bd.getRoomGenderLimitation() == GenderLimitation.FEMALE_ONLY)\n+                .penalize(\"maleInFemaleRoom\", HardMediumSoftScore.ofHard(50), BedDesignation::getAdmissionPartNightCount);\n+    }\n+\n+    public Constraint differentGenderInSameGenderRoomInSameNightConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BedDesignation.class)\n+                .filter(bd -> bd.getRoomGenderLimitation() == GenderLimitation.SAME_GENDER\n+                        && bd.getBed() != null)\n+                .join(BedDesignation.class,\n+                        equal(BedDesignation::getRoom),\n+                        lessThan(BedDesignation::getId),\n+                        filtering((left, right) -> right.getRoomGenderLimitation() == GenderLimitation.SAME_GENDER\n+                                && left.getAdmissionPart().calculateSameNightCount(right.getAdmissionPart()) > 0\n+                                && left.getPatient().getGender() != right.getPatient().getGender()))\n+                .penalize(\"differentGenderInSameGenderRoomInSameNight\", HardMediumSoftScore.ofHard(1000),\n+                        (left, right) -> left.getAdmissionPart().calculateSameNightCount(right.getAdmissionPart()));\n+    }\n+\n+    public Constraint departmentMinimumAgeConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Department.class)\n+                .filter(d -> d.getMinimumAge() != null)\n+                .join(BedDesignation.class,\n+                        equal(d -> d, BedDesignation::getDepartment),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI3NTEwMA=="}, "originalCommit": {"oid": "8a77adbe40cd58339450dc3ec51b8258fbb4dd2e"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMzI2MDMxOnYy", "diffSide": "RIGHT", "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/pas/domain/BedDesignation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMzowNzoyMFrOG-Ns8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNTowOTowNFrOG-Su_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg4OTM5NA==", "bodyText": "In my original comment, I meant that these methods would simply become setters. That is public void set...(...).\nThis way, it becomes consistent with the other examples. (Although unfortunately the test code gets a bit uglier.)\nSorry for not being clear earlier.", "url": "https://github.com/kiegroup/optaplanner/pull/872#discussion_r467889394", "createdAt": "2020-08-10T13:07:20Z", "author": {"login": "triceo"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/pas/domain/BedDesignation.java", "diffHunk": "@@ -118,4 +118,49 @@ public String toString() {\n         return admissionPart.toString();\n     }\n \n+    //Testing builder\n+\n+    public BedDesignation build(){\n+        admissionPart = new AdmissionPart();\n+        bed = new Bed();\n+        return this;\n+    }\n+\n+    //Testing methods\n+\n+    public BedDesignation withNights(int first, int last) {\n+        Night firstNight = new Night();\n+        firstNight.setIndex(first);\n+        admissionPart.setFirstNight(firstNight);\n+        Night lastNight = new Night();\n+        lastNight.setIndex(last);\n+        admissionPart.setLastNight(lastNight);\n+        return this;\n+    }\n+\n+    public BedDesignation withId(Long id) {\n+        this.id = id;\n+        return this;\n+    }\n+\n+    public BedDesignation withPatient(Patient patient) {\n+        this.admissionPart.setPatient(patient);\n+        return this;\n+    }\n+\n+    public BedDesignation withBed(Bed bed) {\n+        this.bed = bed;\n+        return this;\n+    }\n+\n+    public BedDesignation withRoom(Room room) {\n+        this.bed.setRoom(room);\n+        return this;\n+    }\n+\n+    public BedDesignation withSpecialism(Specialism spec1) {\n+        this.admissionPart.setSpecialism(spec1);\n+        return this;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dd155181c6f1f7f867667d82eb53de3aa1d5a38"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk3MTgzOA==", "bodyText": "1f9f2b8", "url": "https://github.com/kiegroup/optaplanner/pull/872#discussion_r467971838", "createdAt": "2020-08-10T15:09:04Z", "author": {"login": "dupliaka"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/pas/domain/BedDesignation.java", "diffHunk": "@@ -118,4 +118,49 @@ public String toString() {\n         return admissionPart.toString();\n     }\n \n+    //Testing builder\n+\n+    public BedDesignation build(){\n+        admissionPart = new AdmissionPart();\n+        bed = new Bed();\n+        return this;\n+    }\n+\n+    //Testing methods\n+\n+    public BedDesignation withNights(int first, int last) {\n+        Night firstNight = new Night();\n+        firstNight.setIndex(first);\n+        admissionPart.setFirstNight(firstNight);\n+        Night lastNight = new Night();\n+        lastNight.setIndex(last);\n+        admissionPart.setLastNight(lastNight);\n+        return this;\n+    }\n+\n+    public BedDesignation withId(Long id) {\n+        this.id = id;\n+        return this;\n+    }\n+\n+    public BedDesignation withPatient(Patient patient) {\n+        this.admissionPart.setPatient(patient);\n+        return this;\n+    }\n+\n+    public BedDesignation withBed(Bed bed) {\n+        this.bed = bed;\n+        return this;\n+    }\n+\n+    public BedDesignation withRoom(Room room) {\n+        this.bed.setRoom(room);\n+        return this;\n+    }\n+\n+    public BedDesignation withSpecialism(Specialism spec1) {\n+        this.admissionPart.setSpecialism(spec1);\n+        return this;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg4OTM5NA=="}, "originalCommit": {"oid": "7dd155181c6f1f7f867667d82eb53de3aa1d5a38"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMzI3MTg5OnYy", "diffSide": "RIGHT", "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/pas/solver/score/PatientAdmissionMoveConstraintProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMzoxMDoxN1rOG-Nz4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMzoyNToyNFrOG-OaTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg5MTE2OQ==", "bodyText": "Please put the null checks first in the filter.\nAlso, since BedDesignation::getBed is equal, you only need to check if left.getBed() != null.", "url": "https://github.com/kiegroup/optaplanner/pull/872#discussion_r467891169", "createdAt": "2020-08-10T13:10:17Z", "author": {"login": "triceo"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/pas/solver/score/PatientAdmissionMoveConstraintProvider.java", "diffHunk": "@@ -0,0 +1,182 @@\n+package org.optaplanner.examples.pas.solver.score;\n+\n+import static org.optaplanner.core.api.score.stream.Joiners.equal;\n+import static org.optaplanner.core.api.score.stream.Joiners.filtering;\n+import static org.optaplanner.core.api.score.stream.Joiners.greaterThan;\n+import static org.optaplanner.core.api.score.stream.Joiners.lessThan;\n+\n+import java.util.function.Function;\n+\n+import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.examples.pas.domain.BedDesignation;\n+import org.optaplanner.examples.pas.domain.Department;\n+import org.optaplanner.examples.pas.domain.DepartmentSpecialism;\n+import org.optaplanner.examples.pas.domain.Gender;\n+import org.optaplanner.examples.pas.domain.GenderLimitation;\n+import org.optaplanner.examples.pas.domain.PreferredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RequiredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RoomEquipment;\n+import org.optaplanner.examples.pas.domain.RoomSpecialism;\n+\n+/*\n+ * This is constraints for Hospital Bed Planning\n+ * They are based on patientAdmissionScheduleConstraints.drl\n+ * Planning Entity: BedDesignation\n+ * Planning Variable: Bed(nullable) - would not be prefiltered on uninitialized solutions\n+ * Bed is nullable so in case you need to access it members check that planning value bed is not null\n+ */\n+\n+public class PatientAdmissionMoveConstraintProvider implements ConstraintProvider {\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n+        return new Constraint[] {\n+                sameBedInSameNightConstraint(constraintFactory),\n+                femaleInMaleRoomConstraint(constraintFactory),\n+                maleInFemaleRoomConstraint(constraintFactory),\n+                differentGenderInSameGenderRoomInSameNightConstraint(constraintFactory),\n+                departmentMinimumAgeConstraint(constraintFactory),\n+                departmentMaximumAgeConstraint(constraintFactory),\n+                requiredPatientEquipmentConstraint(constraintFactory),\n+                assignEveryPatientToABedConstraint(constraintFactory),\n+                preferredMaximumRoomCapacityConstraint(constraintFactory),\n+                departmentSpecialismConstraint(constraintFactory),\n+                roomSpecialismNotExistsConstraint(constraintFactory),\n+                roomSpecialismNotFirstPriorityConstraint(constraintFactory),\n+                preferredPatientEquipmentConstraint(constraintFactory)\n+        };\n+    }\n+\n+    public Constraint sameBedInSameNightConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.fromUniquePair(BedDesignation.class,\n+                        equal(BedDesignation::getBed))\n+                .filter((left,right) -> left.getAdmissionPart().calculateSameNightCount(right.getAdmissionPart()) > 0\n+                && left.getBed()!=null && right.getBed()!=null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dd155181c6f1f7f867667d82eb53de3aa1d5a38"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkwMTAwNw==", "bodyText": "Yeh, the last one I got a call from somewhere inside, thanks for correcting.", "url": "https://github.com/kiegroup/optaplanner/pull/872#discussion_r467901007", "createdAt": "2020-08-10T13:25:24Z", "author": {"login": "dupliaka"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/pas/solver/score/PatientAdmissionMoveConstraintProvider.java", "diffHunk": "@@ -0,0 +1,182 @@\n+package org.optaplanner.examples.pas.solver.score;\n+\n+import static org.optaplanner.core.api.score.stream.Joiners.equal;\n+import static org.optaplanner.core.api.score.stream.Joiners.filtering;\n+import static org.optaplanner.core.api.score.stream.Joiners.greaterThan;\n+import static org.optaplanner.core.api.score.stream.Joiners.lessThan;\n+\n+import java.util.function.Function;\n+\n+import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.examples.pas.domain.BedDesignation;\n+import org.optaplanner.examples.pas.domain.Department;\n+import org.optaplanner.examples.pas.domain.DepartmentSpecialism;\n+import org.optaplanner.examples.pas.domain.Gender;\n+import org.optaplanner.examples.pas.domain.GenderLimitation;\n+import org.optaplanner.examples.pas.domain.PreferredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RequiredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RoomEquipment;\n+import org.optaplanner.examples.pas.domain.RoomSpecialism;\n+\n+/*\n+ * This is constraints for Hospital Bed Planning\n+ * They are based on patientAdmissionScheduleConstraints.drl\n+ * Planning Entity: BedDesignation\n+ * Planning Variable: Bed(nullable) - would not be prefiltered on uninitialized solutions\n+ * Bed is nullable so in case you need to access it members check that planning value bed is not null\n+ */\n+\n+public class PatientAdmissionMoveConstraintProvider implements ConstraintProvider {\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n+        return new Constraint[] {\n+                sameBedInSameNightConstraint(constraintFactory),\n+                femaleInMaleRoomConstraint(constraintFactory),\n+                maleInFemaleRoomConstraint(constraintFactory),\n+                differentGenderInSameGenderRoomInSameNightConstraint(constraintFactory),\n+                departmentMinimumAgeConstraint(constraintFactory),\n+                departmentMaximumAgeConstraint(constraintFactory),\n+                requiredPatientEquipmentConstraint(constraintFactory),\n+                assignEveryPatientToABedConstraint(constraintFactory),\n+                preferredMaximumRoomCapacityConstraint(constraintFactory),\n+                departmentSpecialismConstraint(constraintFactory),\n+                roomSpecialismNotExistsConstraint(constraintFactory),\n+                roomSpecialismNotFirstPriorityConstraint(constraintFactory),\n+                preferredPatientEquipmentConstraint(constraintFactory)\n+        };\n+    }\n+\n+    public Constraint sameBedInSameNightConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.fromUniquePair(BedDesignation.class,\n+                        equal(BedDesignation::getBed))\n+                .filter((left,right) -> left.getAdmissionPart().calculateSameNightCount(right.getAdmissionPart()) > 0\n+                && left.getBed()!=null && right.getBed()!=null)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg5MTE2OQ=="}, "originalCommit": {"oid": "7dd155181c6f1f7f867667d82eb53de3aa1d5a38"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMzI4MDk4OnYy", "diffSide": "RIGHT", "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/pas/solver/score/PatientAdmissionMoveConstraintProvider.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMzoxMjo1MFrOG-N5bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNTowODo1N1rOG-SutQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg5MjU5MQ==", "bodyText": "Since bed is nullable, fromUnfiltered() is no different than from(). You might as well use from().", "url": "https://github.com/kiegroup/optaplanner/pull/872#discussion_r467892591", "createdAt": "2020-08-10T13:12:50Z", "author": {"login": "triceo"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/pas/solver/score/PatientAdmissionMoveConstraintProvider.java", "diffHunk": "@@ -0,0 +1,182 @@\n+package org.optaplanner.examples.pas.solver.score;\n+\n+import static org.optaplanner.core.api.score.stream.Joiners.equal;\n+import static org.optaplanner.core.api.score.stream.Joiners.filtering;\n+import static org.optaplanner.core.api.score.stream.Joiners.greaterThan;\n+import static org.optaplanner.core.api.score.stream.Joiners.lessThan;\n+\n+import java.util.function.Function;\n+\n+import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.examples.pas.domain.BedDesignation;\n+import org.optaplanner.examples.pas.domain.Department;\n+import org.optaplanner.examples.pas.domain.DepartmentSpecialism;\n+import org.optaplanner.examples.pas.domain.Gender;\n+import org.optaplanner.examples.pas.domain.GenderLimitation;\n+import org.optaplanner.examples.pas.domain.PreferredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RequiredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RoomEquipment;\n+import org.optaplanner.examples.pas.domain.RoomSpecialism;\n+\n+/*\n+ * This is constraints for Hospital Bed Planning\n+ * They are based on patientAdmissionScheduleConstraints.drl\n+ * Planning Entity: BedDesignation\n+ * Planning Variable: Bed(nullable) - would not be prefiltered on uninitialized solutions\n+ * Bed is nullable so in case you need to access it members check that planning value bed is not null\n+ */\n+\n+public class PatientAdmissionMoveConstraintProvider implements ConstraintProvider {\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n+        return new Constraint[] {\n+                sameBedInSameNightConstraint(constraintFactory),\n+                femaleInMaleRoomConstraint(constraintFactory),\n+                maleInFemaleRoomConstraint(constraintFactory),\n+                differentGenderInSameGenderRoomInSameNightConstraint(constraintFactory),\n+                departmentMinimumAgeConstraint(constraintFactory),\n+                departmentMaximumAgeConstraint(constraintFactory),\n+                requiredPatientEquipmentConstraint(constraintFactory),\n+                assignEveryPatientToABedConstraint(constraintFactory),\n+                preferredMaximumRoomCapacityConstraint(constraintFactory),\n+                departmentSpecialismConstraint(constraintFactory),\n+                roomSpecialismNotExistsConstraint(constraintFactory),\n+                roomSpecialismNotFirstPriorityConstraint(constraintFactory),\n+                preferredPatientEquipmentConstraint(constraintFactory)\n+        };\n+    }\n+\n+    public Constraint sameBedInSameNightConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.fromUniquePair(BedDesignation.class,\n+                        equal(BedDesignation::getBed))\n+                .filter((left,right) -> left.getAdmissionPart().calculateSameNightCount(right.getAdmissionPart()) > 0\n+                && left.getBed()!=null && right.getBed()!=null)\n+                .penalize(\"sameBedInSameNight\", HardMediumSoftScore.ofHard(1000),\n+                          (left,right) -> left.getAdmissionPart().calculateSameNightCount(right.getAdmissionPart()));\n+    }\n+\n+    public Constraint femaleInMaleRoomConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BedDesignation.class)\n+                .filter(bd -> bd.getPatientGender() == Gender.FEMALE\n+                        && bd.getRoomGenderLimitation() == GenderLimitation.MALE_ONLY)\n+                .penalize(\"femaleInMaleRoom\", HardMediumSoftScore.ofHard(50), BedDesignation::getAdmissionPartNightCount);\n+    }\n+\n+    public Constraint maleInFemaleRoomConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BedDesignation.class)\n+                .filter(bd -> bd.getPatientGender() == Gender.MALE\n+                        && bd.getRoomGenderLimitation() == GenderLimitation.FEMALE_ONLY)\n+                .penalize(\"maleInFemaleRoom\", HardMediumSoftScore.ofHard(50), BedDesignation::getAdmissionPartNightCount);\n+    }\n+\n+    public Constraint differentGenderInSameGenderRoomInSameNightConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BedDesignation.class)\n+                .filter(bd -> bd.getRoomGenderLimitation() == GenderLimitation.SAME_GENDER\n+                        && bd.getBed() != null)\n+                .join(BedDesignation.class,\n+                        equal(BedDesignation::getRoom),\n+                        lessThan(BedDesignation::getId),\n+                        filtering((left, right) -> right.getRoomGenderLimitation() == GenderLimitation.SAME_GENDER\n+                                && left.getPatient().getGender() != right.getPatient().getGender()\n+                                && left.getAdmissionPart().calculateSameNightCount(right.getAdmissionPart()) > 0))\n+                .penalize(\"differentGenderInSameGenderRoomInSameNight\", HardMediumSoftScore.ofHard(1000),\n+                        (left, right) -> left.getAdmissionPart().calculateSameNightCount(right.getAdmissionPart()));\n+    }\n+\n+    public Constraint departmentMinimumAgeConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Department.class)\n+                .filter(d -> d.getMinimumAge() != null)\n+                .join(BedDesignation.class,\n+                        equal(Function.identity(), BedDesignation::getDepartment),\n+                        greaterThan(Department::getMinimumAge, BedDesignation::getPatientAge))\n+                .penalize(\"departmentMinimumAge\", HardMediumSoftScore.ofHard(100),\n+                        (d, bd) -> bd.getAdmissionPartNightCount());\n+    }\n+\n+    public Constraint departmentMaximumAgeConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Department.class)\n+                .filter(d -> d.getMaximumAge() != null)\n+                .join(BedDesignation.class,\n+                        equal(Function.identity(), BedDesignation::getDepartment),\n+                        lessThan(Department::getMaximumAge, BedDesignation::getPatientAge))\n+                .penalize(\"departmentMaximumAge\", HardMediumSoftScore.ofHard(100),\n+                        (d, bd) -> bd.getAdmissionPartNightCount());\n+    }\n+\n+    public Constraint requiredPatientEquipmentConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(RequiredPatientEquipment.class)\n+                .join(BedDesignation.class,\n+                        equal(RequiredPatientEquipment::getPatient, BedDesignation::getPatient),\n+                        filtering((rpe, bd) -> bd.getBed() != null))\n+                .ifNotExists(RoomEquipment.class,\n+                        equal((rpe, bd) -> bd.getRoom(), RoomEquipment::getRoom),\n+                        equal((rpe, bd) -> rpe.getEquipment(), RoomEquipment::getEquipment))\n+                .penalize(\"requiredPatientEquipment\", HardMediumSoftScore.ofHard(50),\n+                        (rpe, bd) -> bd.getAdmissionPartNightCount());\n+    }\n+\n+    //Medium\n+    public Constraint assignEveryPatientToABedConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.fromUnfiltered(BedDesignation.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dd155181c6f1f7f867667d82eb53de3aa1d5a38"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkwMDkzOA==", "bodyText": "Yes, leftover.", "url": "https://github.com/kiegroup/optaplanner/pull/872#discussion_r467900938", "createdAt": "2020-08-10T13:25:18Z", "author": {"login": "dupliaka"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/pas/solver/score/PatientAdmissionMoveConstraintProvider.java", "diffHunk": "@@ -0,0 +1,182 @@\n+package org.optaplanner.examples.pas.solver.score;\n+\n+import static org.optaplanner.core.api.score.stream.Joiners.equal;\n+import static org.optaplanner.core.api.score.stream.Joiners.filtering;\n+import static org.optaplanner.core.api.score.stream.Joiners.greaterThan;\n+import static org.optaplanner.core.api.score.stream.Joiners.lessThan;\n+\n+import java.util.function.Function;\n+\n+import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.examples.pas.domain.BedDesignation;\n+import org.optaplanner.examples.pas.domain.Department;\n+import org.optaplanner.examples.pas.domain.DepartmentSpecialism;\n+import org.optaplanner.examples.pas.domain.Gender;\n+import org.optaplanner.examples.pas.domain.GenderLimitation;\n+import org.optaplanner.examples.pas.domain.PreferredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RequiredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RoomEquipment;\n+import org.optaplanner.examples.pas.domain.RoomSpecialism;\n+\n+/*\n+ * This is constraints for Hospital Bed Planning\n+ * They are based on patientAdmissionScheduleConstraints.drl\n+ * Planning Entity: BedDesignation\n+ * Planning Variable: Bed(nullable) - would not be prefiltered on uninitialized solutions\n+ * Bed is nullable so in case you need to access it members check that planning value bed is not null\n+ */\n+\n+public class PatientAdmissionMoveConstraintProvider implements ConstraintProvider {\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n+        return new Constraint[] {\n+                sameBedInSameNightConstraint(constraintFactory),\n+                femaleInMaleRoomConstraint(constraintFactory),\n+                maleInFemaleRoomConstraint(constraintFactory),\n+                differentGenderInSameGenderRoomInSameNightConstraint(constraintFactory),\n+                departmentMinimumAgeConstraint(constraintFactory),\n+                departmentMaximumAgeConstraint(constraintFactory),\n+                requiredPatientEquipmentConstraint(constraintFactory),\n+                assignEveryPatientToABedConstraint(constraintFactory),\n+                preferredMaximumRoomCapacityConstraint(constraintFactory),\n+                departmentSpecialismConstraint(constraintFactory),\n+                roomSpecialismNotExistsConstraint(constraintFactory),\n+                roomSpecialismNotFirstPriorityConstraint(constraintFactory),\n+                preferredPatientEquipmentConstraint(constraintFactory)\n+        };\n+    }\n+\n+    public Constraint sameBedInSameNightConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.fromUniquePair(BedDesignation.class,\n+                        equal(BedDesignation::getBed))\n+                .filter((left,right) -> left.getAdmissionPart().calculateSameNightCount(right.getAdmissionPart()) > 0\n+                && left.getBed()!=null && right.getBed()!=null)\n+                .penalize(\"sameBedInSameNight\", HardMediumSoftScore.ofHard(1000),\n+                          (left,right) -> left.getAdmissionPart().calculateSameNightCount(right.getAdmissionPart()));\n+    }\n+\n+    public Constraint femaleInMaleRoomConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BedDesignation.class)\n+                .filter(bd -> bd.getPatientGender() == Gender.FEMALE\n+                        && bd.getRoomGenderLimitation() == GenderLimitation.MALE_ONLY)\n+                .penalize(\"femaleInMaleRoom\", HardMediumSoftScore.ofHard(50), BedDesignation::getAdmissionPartNightCount);\n+    }\n+\n+    public Constraint maleInFemaleRoomConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BedDesignation.class)\n+                .filter(bd -> bd.getPatientGender() == Gender.MALE\n+                        && bd.getRoomGenderLimitation() == GenderLimitation.FEMALE_ONLY)\n+                .penalize(\"maleInFemaleRoom\", HardMediumSoftScore.ofHard(50), BedDesignation::getAdmissionPartNightCount);\n+    }\n+\n+    public Constraint differentGenderInSameGenderRoomInSameNightConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BedDesignation.class)\n+                .filter(bd -> bd.getRoomGenderLimitation() == GenderLimitation.SAME_GENDER\n+                        && bd.getBed() != null)\n+                .join(BedDesignation.class,\n+                        equal(BedDesignation::getRoom),\n+                        lessThan(BedDesignation::getId),\n+                        filtering((left, right) -> right.getRoomGenderLimitation() == GenderLimitation.SAME_GENDER\n+                                && left.getPatient().getGender() != right.getPatient().getGender()\n+                                && left.getAdmissionPart().calculateSameNightCount(right.getAdmissionPart()) > 0))\n+                .penalize(\"differentGenderInSameGenderRoomInSameNight\", HardMediumSoftScore.ofHard(1000),\n+                        (left, right) -> left.getAdmissionPart().calculateSameNightCount(right.getAdmissionPart()));\n+    }\n+\n+    public Constraint departmentMinimumAgeConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Department.class)\n+                .filter(d -> d.getMinimumAge() != null)\n+                .join(BedDesignation.class,\n+                        equal(Function.identity(), BedDesignation::getDepartment),\n+                        greaterThan(Department::getMinimumAge, BedDesignation::getPatientAge))\n+                .penalize(\"departmentMinimumAge\", HardMediumSoftScore.ofHard(100),\n+                        (d, bd) -> bd.getAdmissionPartNightCount());\n+    }\n+\n+    public Constraint departmentMaximumAgeConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Department.class)\n+                .filter(d -> d.getMaximumAge() != null)\n+                .join(BedDesignation.class,\n+                        equal(Function.identity(), BedDesignation::getDepartment),\n+                        lessThan(Department::getMaximumAge, BedDesignation::getPatientAge))\n+                .penalize(\"departmentMaximumAge\", HardMediumSoftScore.ofHard(100),\n+                        (d, bd) -> bd.getAdmissionPartNightCount());\n+    }\n+\n+    public Constraint requiredPatientEquipmentConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(RequiredPatientEquipment.class)\n+                .join(BedDesignation.class,\n+                        equal(RequiredPatientEquipment::getPatient, BedDesignation::getPatient),\n+                        filtering((rpe, bd) -> bd.getBed() != null))\n+                .ifNotExists(RoomEquipment.class,\n+                        equal((rpe, bd) -> bd.getRoom(), RoomEquipment::getRoom),\n+                        equal((rpe, bd) -> rpe.getEquipment(), RoomEquipment::getEquipment))\n+                .penalize(\"requiredPatientEquipment\", HardMediumSoftScore.ofHard(50),\n+                        (rpe, bd) -> bd.getAdmissionPartNightCount());\n+    }\n+\n+    //Medium\n+    public Constraint assignEveryPatientToABedConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.fromUnfiltered(BedDesignation.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg5MjU5MQ=="}, "originalCommit": {"oid": "7dd155181c6f1f7f867667d82eb53de3aa1d5a38"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk3MTc2NQ==", "bodyText": "1f9f2b8", "url": "https://github.com/kiegroup/optaplanner/pull/872#discussion_r467971765", "createdAt": "2020-08-10T15:08:57Z", "author": {"login": "dupliaka"}, "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/pas/solver/score/PatientAdmissionMoveConstraintProvider.java", "diffHunk": "@@ -0,0 +1,182 @@\n+package org.optaplanner.examples.pas.solver.score;\n+\n+import static org.optaplanner.core.api.score.stream.Joiners.equal;\n+import static org.optaplanner.core.api.score.stream.Joiners.filtering;\n+import static org.optaplanner.core.api.score.stream.Joiners.greaterThan;\n+import static org.optaplanner.core.api.score.stream.Joiners.lessThan;\n+\n+import java.util.function.Function;\n+\n+import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.examples.pas.domain.BedDesignation;\n+import org.optaplanner.examples.pas.domain.Department;\n+import org.optaplanner.examples.pas.domain.DepartmentSpecialism;\n+import org.optaplanner.examples.pas.domain.Gender;\n+import org.optaplanner.examples.pas.domain.GenderLimitation;\n+import org.optaplanner.examples.pas.domain.PreferredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RequiredPatientEquipment;\n+import org.optaplanner.examples.pas.domain.RoomEquipment;\n+import org.optaplanner.examples.pas.domain.RoomSpecialism;\n+\n+/*\n+ * This is constraints for Hospital Bed Planning\n+ * They are based on patientAdmissionScheduleConstraints.drl\n+ * Planning Entity: BedDesignation\n+ * Planning Variable: Bed(nullable) - would not be prefiltered on uninitialized solutions\n+ * Bed is nullable so in case you need to access it members check that planning value bed is not null\n+ */\n+\n+public class PatientAdmissionMoveConstraintProvider implements ConstraintProvider {\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n+        return new Constraint[] {\n+                sameBedInSameNightConstraint(constraintFactory),\n+                femaleInMaleRoomConstraint(constraintFactory),\n+                maleInFemaleRoomConstraint(constraintFactory),\n+                differentGenderInSameGenderRoomInSameNightConstraint(constraintFactory),\n+                departmentMinimumAgeConstraint(constraintFactory),\n+                departmentMaximumAgeConstraint(constraintFactory),\n+                requiredPatientEquipmentConstraint(constraintFactory),\n+                assignEveryPatientToABedConstraint(constraintFactory),\n+                preferredMaximumRoomCapacityConstraint(constraintFactory),\n+                departmentSpecialismConstraint(constraintFactory),\n+                roomSpecialismNotExistsConstraint(constraintFactory),\n+                roomSpecialismNotFirstPriorityConstraint(constraintFactory),\n+                preferredPatientEquipmentConstraint(constraintFactory)\n+        };\n+    }\n+\n+    public Constraint sameBedInSameNightConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.fromUniquePair(BedDesignation.class,\n+                        equal(BedDesignation::getBed))\n+                .filter((left,right) -> left.getAdmissionPart().calculateSameNightCount(right.getAdmissionPart()) > 0\n+                && left.getBed()!=null && right.getBed()!=null)\n+                .penalize(\"sameBedInSameNight\", HardMediumSoftScore.ofHard(1000),\n+                          (left,right) -> left.getAdmissionPart().calculateSameNightCount(right.getAdmissionPart()));\n+    }\n+\n+    public Constraint femaleInMaleRoomConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BedDesignation.class)\n+                .filter(bd -> bd.getPatientGender() == Gender.FEMALE\n+                        && bd.getRoomGenderLimitation() == GenderLimitation.MALE_ONLY)\n+                .penalize(\"femaleInMaleRoom\", HardMediumSoftScore.ofHard(50), BedDesignation::getAdmissionPartNightCount);\n+    }\n+\n+    public Constraint maleInFemaleRoomConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BedDesignation.class)\n+                .filter(bd -> bd.getPatientGender() == Gender.MALE\n+                        && bd.getRoomGenderLimitation() == GenderLimitation.FEMALE_ONLY)\n+                .penalize(\"maleInFemaleRoom\", HardMediumSoftScore.ofHard(50), BedDesignation::getAdmissionPartNightCount);\n+    }\n+\n+    public Constraint differentGenderInSameGenderRoomInSameNightConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BedDesignation.class)\n+                .filter(bd -> bd.getRoomGenderLimitation() == GenderLimitation.SAME_GENDER\n+                        && bd.getBed() != null)\n+                .join(BedDesignation.class,\n+                        equal(BedDesignation::getRoom),\n+                        lessThan(BedDesignation::getId),\n+                        filtering((left, right) -> right.getRoomGenderLimitation() == GenderLimitation.SAME_GENDER\n+                                && left.getPatient().getGender() != right.getPatient().getGender()\n+                                && left.getAdmissionPart().calculateSameNightCount(right.getAdmissionPart()) > 0))\n+                .penalize(\"differentGenderInSameGenderRoomInSameNight\", HardMediumSoftScore.ofHard(1000),\n+                        (left, right) -> left.getAdmissionPart().calculateSameNightCount(right.getAdmissionPart()));\n+    }\n+\n+    public Constraint departmentMinimumAgeConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Department.class)\n+                .filter(d -> d.getMinimumAge() != null)\n+                .join(BedDesignation.class,\n+                        equal(Function.identity(), BedDesignation::getDepartment),\n+                        greaterThan(Department::getMinimumAge, BedDesignation::getPatientAge))\n+                .penalize(\"departmentMinimumAge\", HardMediumSoftScore.ofHard(100),\n+                        (d, bd) -> bd.getAdmissionPartNightCount());\n+    }\n+\n+    public Constraint departmentMaximumAgeConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Department.class)\n+                .filter(d -> d.getMaximumAge() != null)\n+                .join(BedDesignation.class,\n+                        equal(Function.identity(), BedDesignation::getDepartment),\n+                        lessThan(Department::getMaximumAge, BedDesignation::getPatientAge))\n+                .penalize(\"departmentMaximumAge\", HardMediumSoftScore.ofHard(100),\n+                        (d, bd) -> bd.getAdmissionPartNightCount());\n+    }\n+\n+    public Constraint requiredPatientEquipmentConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(RequiredPatientEquipment.class)\n+                .join(BedDesignation.class,\n+                        equal(RequiredPatientEquipment::getPatient, BedDesignation::getPatient),\n+                        filtering((rpe, bd) -> bd.getBed() != null))\n+                .ifNotExists(RoomEquipment.class,\n+                        equal((rpe, bd) -> bd.getRoom(), RoomEquipment::getRoom),\n+                        equal((rpe, bd) -> rpe.getEquipment(), RoomEquipment::getEquipment))\n+                .penalize(\"requiredPatientEquipment\", HardMediumSoftScore.ofHard(50),\n+                        (rpe, bd) -> bd.getAdmissionPartNightCount());\n+    }\n+\n+    //Medium\n+    public Constraint assignEveryPatientToABedConstraint(ConstraintFactory constraintFactory) {\n+        return constraintFactory.fromUnfiltered(BedDesignation.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg5MjU5MQ=="}, "originalCommit": {"oid": "7dd155181c6f1f7f867667d82eb53de3aa1d5a38"}, "originalPosition": 124}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4393, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}