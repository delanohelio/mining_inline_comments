{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5NTA4NDEy", "number": 720, "title": "[PLANNER-1867] Add JSONB support for Score JSON in optaplanner-persistence-jsonb", "bodyText": "Jira: https://issues.redhat.com/browse/PLANNER-1867\nMerge with kiegroup/droolsjbpm-build-bootstrap#1238", "createdAt": "2020-03-16T21:41:15Z", "url": "https://github.com/kiegroup/optaplanner/pull/720", "merged": true, "mergeCommit": {"oid": "a8659eb04565ad2a9f1713b8adc176250b2e73b8"}, "closed": true, "closedAt": "2020-03-19T14:37:12Z", "author": {"login": "cuijulian"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcOWiEqgFqTM3NTY0MzIyMg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcPMf2qAH2gAyMzg5NTA4NDEyOjVhMjk1Yjc0OGFhYTMxYTlmYTk3NzY0MjRhMTkzYmIwMzRlMzUxODk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NjQzMjIy", "url": "https://github.com/kiegroup/optaplanner/pull/720#pullrequestreview-375643222", "createdAt": "2020-03-16T23:12:22Z", "commit": {"oid": "1e528ef56836c6748bc6ee7a4a446fa53454d354"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMzoxMjoyMlrOF3I5tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMzoxMjoyMlrOF3I5tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM2MTg0NA==", "bodyText": "Did you consider using JsonbAdapter? It would bring the serializer and deserializer under one roof, and from what I've seen in this PR, you don't need the advanced access to parser that the deserializer provides.", "url": "https://github.com/kiegroup/optaplanner/pull/720#discussion_r393361844", "createdAt": "2020-03-16T23:12:22Z", "author": {"login": "triceo"}, "path": "optaplanner-persistence/optaplanner-persistence-jsonb/src/main/java/org/optaplanner/persistence/jsonb/api/score/AbstractScoreJsonbDeserializer.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.persistence.jsonb.api.score;\n+\n+import javax.json.bind.serializer.JsonbDeserializer;\n+\n+import org.optaplanner.core.api.score.Score;\n+\n+/**\n+ * JSONB binding support for a {@link Score} type.\n+ * <p>\n+ * For example: use {@code @JsonbTypeSerializer(HardSoftScoreJsonbSerializer.class) @JsonbTypeDeserializer(HardSoftScoreJsonbDeserializer.class)}\n+ * on a {@code HardSoftScore score} field and it will marshalled to JSON as {@code \"score\":\"-999hard/-999soft\"}.\n+ * @see Score\n+ * @param <Score_> the actual score type\n+ */\n+public abstract class AbstractScoreJsonbDeserializer<Score_ extends Score<Score_>>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e528ef56836c6748bc6ee7a4a446fa53454d354"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "700d6bcb9c0db8d832fad7706717d6fddf49c16d", "author": {"user": null}, "url": "https://github.com/kiegroup/optaplanner/commit/700d6bcb9c0db8d832fad7706717d6fddf49c16d", "committedDate": "2020-03-17T18:43:14Z", "message": "Add JSONB adapters for Score de/serialization + tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1e528ef56836c6748bc6ee7a4a446fa53454d354", "author": {"user": null}, "url": "https://github.com/kiegroup/optaplanner/commit/1e528ef56836c6748bc6ee7a4a446fa53454d354", "committedDate": "2020-03-16T14:52:27Z", "message": "Add javadocs for jsonb serializers and deserializers"}, "afterCommit": {"oid": "700d6bcb9c0db8d832fad7706717d6fddf49c16d", "author": {"user": null}, "url": "https://github.com/kiegroup/optaplanner/commit/700d6bcb9c0db8d832fad7706717d6fddf49c16d", "committedDate": "2020-03-17T18:43:14Z", "message": "Add JSONB adapters for Score de/serialization + tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2MzQ1MDQw", "url": "https://github.com/kiegroup/optaplanner/pull/720#pullrequestreview-376345040", "createdAt": "2020-03-17T19:35:00Z", "commit": {"oid": "700d6bcb9c0db8d832fad7706717d6fddf49c16d"}, "state": "COMMENTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxOTozNTowMVrOF3rFuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxOTo0OTozN1rOF3rjVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkyMTk3Nw==", "bodyText": "Did you actually test this in an OSGi environment? Truth be told, I don't even know where to start with that. Perhaps Geoffrey would know?", "url": "https://github.com/kiegroup/optaplanner/pull/720#discussion_r393921977", "createdAt": "2020-03-17T19:35:01Z", "author": {"login": "triceo"}, "path": "optaplanner-persistence/optaplanner-persistence-jsonb/pom.xml", "diffHunk": "@@ -0,0 +1,95 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.optaplanner</groupId>\n+    <artifactId>optaplanner-persistence</artifactId>\n+    <version>7.35.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <artifactId>optaplanner-persistence-jsonb</artifactId>\n+  <packaging>bundle</packaging><!-- bundle = jar + OSGi metadata -->\n+\n+  <name>OptaPlanner persistence JSON-B</name>\n+  <description>\n+    OptaPlanner solves planning problems.\n+    This lightweight, embeddable planning engine implements powerful and scalable algorithms\n+    to optimize business resource scheduling and planning.\n+\n+    This module contains the JSON-B integration.\n+  </description>\n+  <url>https://www.optaplanner.org</url>\n+\n+  <properties>\n+    <java.module.name>org.optaplanner.persistence.jsonb</java.module.name>\n+  </properties>\n+\n+  <dependencies>\n+    <!-- Internal dependencies -->\n+    <dependency>\n+      <groupId>org.optaplanner</groupId>\n+      <artifactId>optaplanner-core</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.optaplanner</groupId>\n+      <artifactId>optaplanner-core</artifactId>\n+      <type>test-jar</type>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.optaplanner</groupId>\n+      <artifactId>optaplanner-persistence-common</artifactId>\n+    </dependency>\n+    <!-- External dependencies -->\n+    <!-- Logging -->\n+    <dependency>\n+      <groupId>ch.qos.logback</groupId>\n+      <artifactId>logback-classic</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <!-- JSON -->\n+    <dependency>\n+      <groupId>jakarta.json.bind</groupId>\n+      <artifactId>jakarta.json.bind-api</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.glassfish</groupId>\n+      <artifactId>jakarta.json</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.eclipse</groupId>\n+      <artifactId>yasson</artifactId>\n+      <scope>test</scope>\n+      <exclusions>\n+        <exclusion>\n+          <groupId>jakarta.json</groupId>\n+          <artifactId>jakarta.json-api</artifactId>\n+        </exclusion>\n+        <exclusion>\n+          <groupId>org.glassfish</groupId>\n+          <artifactId>jakarta.json</artifactId>\n+        </exclusion>\n+      </exclusions>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.felix</groupId>\n+        <artifactId>maven-bundle-plugin</artifactId>\n+        <extensions>true</extensions>\n+        <configuration>\n+          <instructions>\n+            <Export-Package>\n+              org.optaplanner.persistence.jsonb.*\n+            </Export-Package>\n+          </instructions>\n+        </configuration>\n+      </plugin>\n+    </plugins>\n+  </build>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700d6bcb9c0db8d832fad7706717d6fddf49c16d"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkyMjI5Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * on a {@code HardSoftScore score} field and it will serialized to JSON as {@code \"score\":\"-999hard/-999soft\"}.\n          \n          \n            \n             * on a {@code HardSoftScore score} field and it will be serialized to JSON as {@code \"score\":\"-999hard/-999soft\"}.", "url": "https://github.com/kiegroup/optaplanner/pull/720#discussion_r393922297", "createdAt": "2020-03-17T19:35:37Z", "author": {"login": "triceo"}, "path": "optaplanner-persistence/optaplanner-persistence-jsonb/src/main/java/org/optaplanner/persistence/jsonb/api/score/AbstractScoreJsonbAdapter.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.persistence.jsonb.api.score;\n+\n+import javax.json.bind.adapter.JsonbAdapter;\n+\n+import org.optaplanner.core.api.score.Score;\n+\n+/**\n+ * JSON-B binding support for a {@link Score} type.\n+ * <p>\n+ * For example: use {@code @JsonbTypeAdapter(HardSoftScoreJsonbAdapter.class)}\n+ * on a {@code HardSoftScore score} field and it will serialized to JSON as {@code \"score\":\"-999hard/-999soft\"}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700d6bcb9c0db8d832fad7706717d6fddf49c16d"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkyMjk4NA==", "bodyText": "I have not seen this line anywhere in core or examples. Is there any particular reason why you included it?", "url": "https://github.com/kiegroup/optaplanner/pull/720#discussion_r393922984", "createdAt": "2020-03-17T19:36:52Z", "author": {"login": "triceo"}, "path": "optaplanner-persistence/optaplanner-persistence-jsonb/src/main/java/org/optaplanner/persistence/jsonb/api/score/buildin/bendable/BendableScoreJsonbAdapter.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.persistence.jsonb.api.score.buildin.bendable;\n+\n+import org.optaplanner.core.api.score.buildin.bendable.BendableScore;\n+import org.optaplanner.persistence.jsonb.api.score.AbstractScoreJsonbAdapter;\n+\n+@SuppressWarnings(\"checkstyle:javadocstyle\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700d6bcb9c0db8d832fad7706717d6fddf49c16d"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkyMzc5MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * JSON-B binders for {@link org.optaplanner.core.api.score.Score}.\n          \n          \n            \n             * JSON-B bindings for {@link org.optaplanner.core.api.score.Score}.", "url": "https://github.com/kiegroup/optaplanner/pull/720#discussion_r393923791", "createdAt": "2020-03-17T19:38:27Z", "author": {"login": "triceo"}, "path": "optaplanner-persistence/optaplanner-persistence-jsonb/src/main/java/org/optaplanner/persistence/jsonb/api/score/package-info.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+/**\n+ * JSON-B binders for {@link org.optaplanner.core.api.score.Score}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700d6bcb9c0db8d832fad7706717d6fddf49c16d"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkyNTA4OQ==", "bodyText": "I don't much like regexes in Java, as they become very hard to read. Did you consider using \\Q no need to escape in here \\E to reduce some of that escaping?", "url": "https://github.com/kiegroup/optaplanner/pull/720#discussion_r393925089", "createdAt": "2020-03-17T19:40:59Z", "author": {"login": "triceo"}, "path": "optaplanner-persistence/optaplanner-persistence-jsonb/src/test/java/org/optaplanner/persistence/jsonb/api/score/AbstractScoreJsonbAdapterTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.persistence.jsonb.api.score;\n+\n+import java.io.Serializable;\n+\n+import javax.json.bind.Jsonb;\n+import javax.json.bind.JsonbBuilder;\n+import javax.json.bind.JsonbException;\n+\n+import org.optaplanner.core.api.score.Score;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+public class AbstractScoreJsonbAdapterTest {\n+\n+    // ************************************************************************\n+    // Helper methods\n+    // ************************************************************************\n+\n+    protected <S extends Score, W extends TestScoreWrapper<S>> void assertSerializeAndDeserialize(S expectedScore, W input) {\n+        String jsonString;\n+        W output;\n+        try {\n+            Jsonb jsonb = JsonbBuilder.create();\n+            jsonString = jsonb.toJson(input);\n+            output = (W) jsonb.fromJson(jsonString, input.getClass());\n+        } catch (JsonbException e) {\n+            throw new IllegalStateException(\"Marshalling or unmarshalling for input (\" + input + \") failed.\", e);\n+        }\n+        assertEquals(expectedScore, output.getScore());\n+\n+        String newLine = System.lineSeparator();\n+        String regex;\n+        if (expectedScore != null) {\n+            regex = \"\\\\{\\\"score\\\":\\\"\" // Start of element\n+                    + expectedScore.toString().replaceAll(\"\\\\[\", \"\\\\\\\\[\").replaceAll(\"\\\\]\", \"\\\\\\\\]\") // Score\n+                    + \"\\\"\\\\}\"; // End of element\n+        } else {\n+            regex = \"\\\\{\\\\}\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700d6bcb9c0db8d832fad7706717d6fddf49c16d"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkyNTk4NA==", "bodyText": "Suggestion: instead of using a regex, consider parsing the JSON again and make sure it has the structure you're expecting it to. This will make sure the JSON is valid, without you having to deal with the actual JSON syntax.", "url": "https://github.com/kiegroup/optaplanner/pull/720#discussion_r393925984", "createdAt": "2020-03-17T19:42:49Z", "author": {"login": "triceo"}, "path": "optaplanner-persistence/optaplanner-persistence-jsonb/src/test/java/org/optaplanner/persistence/jsonb/api/score/AbstractScoreJsonbAdapterTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.persistence.jsonb.api.score;\n+\n+import java.io.Serializable;\n+\n+import javax.json.bind.Jsonb;\n+import javax.json.bind.JsonbBuilder;\n+import javax.json.bind.JsonbException;\n+\n+import org.optaplanner.core.api.score.Score;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+public class AbstractScoreJsonbAdapterTest {\n+\n+    // ************************************************************************\n+    // Helper methods\n+    // ************************************************************************\n+\n+    protected <S extends Score, W extends TestScoreWrapper<S>> void assertSerializeAndDeserialize(S expectedScore, W input) {\n+        String jsonString;\n+        W output;\n+        try {\n+            Jsonb jsonb = JsonbBuilder.create();\n+            jsonString = jsonb.toJson(input);\n+            output = (W) jsonb.fromJson(jsonString, input.getClass());\n+        } catch (JsonbException e) {\n+            throw new IllegalStateException(\"Marshalling or unmarshalling for input (\" + input + \") failed.\", e);\n+        }\n+        assertEquals(expectedScore, output.getScore());\n+\n+        String newLine = System.lineSeparator();\n+        String regex;\n+        if (expectedScore != null) {\n+            regex = \"\\\\{\\\"score\\\":\\\"\" // Start of element\n+                    + expectedScore.toString().replaceAll(\"\\\\[\", \"\\\\\\\\[\").replaceAll(\"\\\\]\", \"\\\\\\\\]\") // Score\n+                    + \"\\\"\\\\}\"; // End of element\n+        } else {\n+            regex = \"\\\\{\\\\}\";\n+        }\n+        if (!jsonString.matches(regex)) {\n+            fail(\"Regular expression match failed.\" + newLine + \"Expected regular expression: \" + regex + newLine +\n+                         \"Actual string: \" + jsonString);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700d6bcb9c0db8d832fad7706717d6fddf49c16d"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkyNjM3OA==", "bodyText": "Abstract class without any methods? Looks like an interface to me. :-)", "url": "https://github.com/kiegroup/optaplanner/pull/720#discussion_r393926378", "createdAt": "2020-03-17T19:43:34Z", "author": {"login": "triceo"}, "path": "optaplanner-persistence/optaplanner-persistence-jsonb/src/test/java/org/optaplanner/persistence/jsonb/api/score/AbstractScoreJsonbAdapterTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.persistence.jsonb.api.score;\n+\n+import java.io.Serializable;\n+\n+import javax.json.bind.Jsonb;\n+import javax.json.bind.JsonbBuilder;\n+import javax.json.bind.JsonbException;\n+\n+import org.optaplanner.core.api.score.Score;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+public class AbstractScoreJsonbAdapterTest {\n+\n+    // ************************************************************************\n+    // Helper methods\n+    // ************************************************************************\n+\n+    protected <S extends Score, W extends TestScoreWrapper<S>> void assertSerializeAndDeserialize(S expectedScore, W input) {\n+        String jsonString;\n+        W output;\n+        try {\n+            Jsonb jsonb = JsonbBuilder.create();\n+            jsonString = jsonb.toJson(input);\n+            output = (W) jsonb.fromJson(jsonString, input.getClass());\n+        } catch (JsonbException e) {\n+            throw new IllegalStateException(\"Marshalling or unmarshalling for input (\" + input + \") failed.\", e);\n+        }\n+        assertEquals(expectedScore, output.getScore());\n+\n+        String newLine = System.lineSeparator();\n+        String regex;\n+        if (expectedScore != null) {\n+            regex = \"\\\\{\\\"score\\\":\\\"\" // Start of element\n+                    + expectedScore.toString().replaceAll(\"\\\\[\", \"\\\\\\\\[\").replaceAll(\"\\\\]\", \"\\\\\\\\]\") // Score\n+                    + \"\\\"\\\\}\"; // End of element\n+        } else {\n+            regex = \"\\\\{\\\\}\";\n+        }\n+        if (!jsonString.matches(regex)) {\n+            fail(\"Regular expression match failed.\" + newLine + \"Expected regular expression: \" + regex + newLine +\n+                         \"Actual string: \" + jsonString);\n+        }\n+    }\n+\n+    public static abstract class TestScoreWrapper<S extends Score> implements Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700d6bcb9c0db8d832fad7706717d6fddf49c16d"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkyNjgzNw==", "bodyText": "Also, as you're using it from a whole bunch of subclasses, I feel that it should be a top-level interface.", "url": "https://github.com/kiegroup/optaplanner/pull/720#discussion_r393926837", "createdAt": "2020-03-17T19:44:30Z", "author": {"login": "triceo"}, "path": "optaplanner-persistence/optaplanner-persistence-jsonb/src/test/java/org/optaplanner/persistence/jsonb/api/score/AbstractScoreJsonbAdapterTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.persistence.jsonb.api.score;\n+\n+import java.io.Serializable;\n+\n+import javax.json.bind.Jsonb;\n+import javax.json.bind.JsonbBuilder;\n+import javax.json.bind.JsonbException;\n+\n+import org.optaplanner.core.api.score.Score;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+public class AbstractScoreJsonbAdapterTest {\n+\n+    // ************************************************************************\n+    // Helper methods\n+    // ************************************************************************\n+\n+    protected <S extends Score, W extends TestScoreWrapper<S>> void assertSerializeAndDeserialize(S expectedScore, W input) {\n+        String jsonString;\n+        W output;\n+        try {\n+            Jsonb jsonb = JsonbBuilder.create();\n+            jsonString = jsonb.toJson(input);\n+            output = (W) jsonb.fromJson(jsonString, input.getClass());\n+        } catch (JsonbException e) {\n+            throw new IllegalStateException(\"Marshalling or unmarshalling for input (\" + input + \") failed.\", e);\n+        }\n+        assertEquals(expectedScore, output.getScore());\n+\n+        String newLine = System.lineSeparator();\n+        String regex;\n+        if (expectedScore != null) {\n+            regex = \"\\\\{\\\"score\\\":\\\"\" // Start of element\n+                    + expectedScore.toString().replaceAll(\"\\\\[\", \"\\\\\\\\[\").replaceAll(\"\\\\]\", \"\\\\\\\\]\") // Score\n+                    + \"\\\"\\\\}\"; // End of element\n+        } else {\n+            regex = \"\\\\{\\\\}\";\n+        }\n+        if (!jsonString.matches(regex)) {\n+            fail(\"Regular expression match failed.\" + newLine + \"Expected regular expression: \" + regex + newLine +\n+                         \"Actual string: \" + jsonString);\n+        }\n+    }\n+\n+    public static abstract class TestScoreWrapper<S extends Score> implements Serializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkyNjM3OA=="}, "originalCommit": {"oid": "700d6bcb9c0db8d832fad7706717d6fddf49c16d"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkyNzU0Mg==", "bodyText": "Not sure why does this method have the score argument, when it also has the wrapper which can return the score?", "url": "https://github.com/kiegroup/optaplanner/pull/720#discussion_r393927542", "createdAt": "2020-03-17T19:45:51Z", "author": {"login": "triceo"}, "path": "optaplanner-persistence/optaplanner-persistence-jsonb/src/test/java/org/optaplanner/persistence/jsonb/api/score/buildin/bendable/BendableScoreJsonbAdapterTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.persistence.jsonb.api.score.buildin.bendable;\n+\n+import javax.json.bind.annotation.JsonbTypeAdapter;\n+\n+import org.junit.Test;\n+import org.optaplanner.core.api.score.buildin.bendable.BendableScore;\n+import org.optaplanner.persistence.jsonb.api.score.AbstractScoreJsonbAdapterTest;\n+\n+public class BendableScoreJsonbAdapterTest extends AbstractScoreJsonbAdapterTest {\n+\n+    @Test\n+    public void serializeAndDeserialize() {\n+        assertSerializeAndDeserialize(null, new TestBendableScoreWrapper(null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700d6bcb9c0db8d832fad7706717d6fddf49c16d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkyODUzNw==", "bodyText": "Suggestion: put a comment in the empty constructor, saying something like \"Required by JSON-B.\" People won't have to spend time thinking why the unused constructor is there.", "url": "https://github.com/kiegroup/optaplanner/pull/720#discussion_r393928537", "createdAt": "2020-03-17T19:47:42Z", "author": {"login": "triceo"}, "path": "optaplanner-persistence/optaplanner-persistence-jsonb/src/test/java/org/optaplanner/persistence/jsonb/api/score/buildin/bendable/BendableScoreJsonbAdapterTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.persistence.jsonb.api.score.buildin.bendable;\n+\n+import javax.json.bind.annotation.JsonbTypeAdapter;\n+\n+import org.junit.Test;\n+import org.optaplanner.core.api.score.buildin.bendable.BendableScore;\n+import org.optaplanner.persistence.jsonb.api.score.AbstractScoreJsonbAdapterTest;\n+\n+public class BendableScoreJsonbAdapterTest extends AbstractScoreJsonbAdapterTest {\n+\n+    @Test\n+    public void serializeAndDeserialize() {\n+        assertSerializeAndDeserialize(null, new TestBendableScoreWrapper(null));\n+        BendableScore score = BendableScore.of(new int[]{1000, 200}, new int[]{34});\n+        assertSerializeAndDeserialize(score, new TestBendableScoreWrapper(score));\n+        score = BendableScore.ofUninitialized(-7, new int[]{1000, 200}, new int[]{34});\n+        assertSerializeAndDeserialize(score, new TestBendableScoreWrapper(score));\n+    }\n+\n+    public static class TestBendableScoreWrapper extends TestScoreWrapper<BendableScore> {\n+\n+        @JsonbTypeAdapter(BendableScoreJsonbAdapter.class)\n+        private BendableScore score;\n+\n+        @SuppressWarnings(\"unused\")\n+        public TestBendableScoreWrapper() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700d6bcb9c0db8d832fad7706717d6fddf49c16d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkyOTE4MQ==", "bodyText": "Some of the test classes don't have the blank lines in here. I don't mind if you want to keep them - but in that case, be consistent, please.", "url": "https://github.com/kiegroup/optaplanner/pull/720#discussion_r393929181", "createdAt": "2020-03-17T19:48:51Z", "author": {"login": "triceo"}, "path": "optaplanner-persistence/optaplanner-persistence-jsonb/src/test/java/org/optaplanner/persistence/jsonb/api/score/buildin/bendablelong/BendableLongScoreJsonbAdapterTest.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.persistence.jsonb.api.score.buildin.bendablelong;\n+\n+import javax.json.bind.annotation.JsonbTypeAdapter;\n+\n+import org.junit.Test;\n+import org.optaplanner.core.api.score.buildin.bendablelong.BendableLongScore;\n+import org.optaplanner.persistence.jsonb.api.score.AbstractScoreJsonbAdapterTest;\n+\n+public class BendableLongScoreJsonbAdapterTest extends AbstractScoreJsonbAdapterTest {\n+\n+    @Test\n+    public void serializeAndDeserialize() {\n+        assertSerializeAndDeserialize(null, new TestBendableLongScoreWrapper(null));\n+\n+        BendableLongScore score = BendableLongScore.of(new long[]{1000L, 200L}, new long[]{34L});\n+        assertSerializeAndDeserialize(score, new TestBendableLongScoreWrapper(score));\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700d6bcb9c0db8d832fad7706717d6fddf49c16d"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkyOTU1Nw==", "bodyText": "Our friend, the code style. :-) We don't align on columns.\nAnyway... leave it as it is, let's wait for Radek to bring his unifying PR.", "url": "https://github.com/kiegroup/optaplanner/pull/720#discussion_r393929557", "createdAt": "2020-03-17T19:49:37Z", "author": {"login": "triceo"}, "path": "optaplanner-persistence/optaplanner-persistence-jsonb/src/test/java/org/optaplanner/persistence/jsonb/api/score/buildin/hardmediumsoftbigdecimal/HardMediumSoftBigDecimalScoreJsonbAdapterTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.persistence.jsonb.api.score.buildin.hardmediumsoftbigdecimal;\n+\n+import java.math.BigDecimal;\n+\n+import javax.json.bind.annotation.JsonbTypeAdapter;\n+\n+import org.junit.Test;\n+import org.optaplanner.core.api.score.buildin.hardmediumsoftbigdecimal.HardMediumSoftBigDecimalScore;\n+import org.optaplanner.persistence.jsonb.api.score.AbstractScoreJsonbAdapterTest;\n+\n+public class HardMediumSoftBigDecimalScoreJsonbAdapterTest extends AbstractScoreJsonbAdapterTest {\n+\n+    @Test\n+    public void serializeAndDeserialize() {\n+        assertSerializeAndDeserialize(null, new TestHardMediumSoftBigDecimalScoreWrapper(null));\n+\n+        HardMediumSoftBigDecimalScore score = HardMediumSoftBigDecimalScore.of(new BigDecimal(\"1200.0021\"),\n+                                                                               new BigDecimal(\"-3.1415\"),\n+                                                                               new BigDecimal(\"34.4300\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700d6bcb9c0db8d832fad7706717d6fddf49c16d"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aded4f60bbbc0367feecbee8582b2e9b5f56c87c", "author": {"user": null}, "url": "https://github.com/kiegroup/optaplanner/commit/aded4f60bbbc0367feecbee8582b2e9b5f56c87c", "committedDate": "2020-03-17T20:47:47Z", "message": "Minor formatting and typo fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2Mzk1NDUz", "url": "https://github.com/kiegroup/optaplanner/pull/720#pullrequestreview-376395453", "createdAt": "2020-03-17T20:51:00Z", "commit": {"oid": "aded4f60bbbc0367feecbee8582b2e9b5f56c87c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea642bfc0a80c7299e1116e871f71e241b2a0af6", "author": {"user": null}, "url": "https://github.com/kiegroup/optaplanner/commit/ea642bfc0a80c7299e1116e871f71e241b2a0af6", "committedDate": "2020-03-19T02:15:58Z", "message": "Add OptaPlannerJsonbConfig + tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3NDgwMzQz", "url": "https://github.com/kiegroup/optaplanner/pull/720#pullrequestreview-377480343", "createdAt": "2020-03-19T07:39:47Z", "commit": {"oid": "ea642bfc0a80c7299e1116e871f71e241b2a0af6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwNzozOTo0OFrOF4i9MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwNzozOTo0OFrOF4i9MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDgzNzI5Ng==", "bodyText": "In light of your recent changes, I was wondering... could we get rid of the Test...ScoreWrappers, if we use the new OptaplannerJsonbConfig here, @cuijulian ?\nUnless there's some technical hurdle I'm overlooking, this could remove a lot of code from this PR.", "url": "https://github.com/kiegroup/optaplanner/pull/720#discussion_r394837296", "createdAt": "2020-03-19T07:39:48Z", "author": {"login": "triceo"}, "path": "optaplanner-persistence/optaplanner-persistence-jsonb/src/test/java/org/optaplanner/persistence/jsonb/api/score/AbstractScoreJsonbAdapterTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.persistence.jsonb.api.score;\n+\n+import java.io.Serializable;\n+\n+import javax.json.bind.Jsonb;\n+import javax.json.bind.JsonbBuilder;\n+import javax.json.bind.JsonbException;\n+\n+import org.optaplanner.core.api.score.Score;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+public class AbstractScoreJsonbAdapterTest {\n+\n+    // ************************************************************************\n+    // Helper methods\n+    // ************************************************************************\n+\n+    protected <S extends Score, W extends TestScoreWrapper<S>> void assertSerializeAndDeserialize(S expectedScore, W input) {\n+        String jsonString;\n+        W output;\n+        try {\n+            Jsonb jsonb = JsonbBuilder.create();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea642bfc0a80c7299e1116e871f71e241b2a0af6"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3NTQ5NDM5", "url": "https://github.com/kiegroup/optaplanner/pull/720#pullrequestreview-377549439", "createdAt": "2020-03-19T09:28:42Z", "commit": {"oid": "ea642bfc0a80c7299e1116e871f71e241b2a0af6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwOToyODo0MlrOF4mSHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwOToyODo0MlrOF4mSHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg5MTgwNg==", "bodyText": "For moment, I got confused that this test duplicates HardSoftScoreJsonbAdapterTest, but it doesn't.\nThe jackson version of this has 2 Scores, including a \"generic Score\", something not supported by JSON-B (which is fine).\nSuggestion: Add a BendableScore too in this test (so it has 2 scores). Also add a BendableScore in the jackson version of this test (so it has 3 scores).\nThis does give us some extra test code coverage, to prove that bendables also work without explicit annotations :)", "url": "https://github.com/kiegroup/optaplanner/pull/720#discussion_r394891806", "createdAt": "2020-03-19T09:28:42Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-persistence/optaplanner-persistence-jsonb/src/test/java/org/optaplanner/persistence/jsonb/api/OptaPlannerJsonbConfigTest.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.persistence.jsonb.api;\n+\n+import javax.json.bind.Jsonb;\n+import javax.json.bind.JsonbBuilder;\n+import javax.json.bind.JsonbConfig;\n+\n+import org.junit.Test;\n+\n+import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScore;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class OptaPlannerJsonbConfigTest extends AbstractJsonbJsonAdapterTest {\n+\n+    @Test\n+    public void jsonbConfigSerializeAndDeserialize() {\n+        JsonbConfig config = OptaPlannerJsonbConfig.createConfig();\n+        Jsonb jsonb = JsonbBuilder.create(config);\n+\n+        TestOptaPlannerJsonbConfigWrapper input = new TestOptaPlannerJsonbConfigWrapper();\n+        input.setHardSoftScore(HardSoftScore.of(-1, -20));\n+        TestOptaPlannerJsonbConfigWrapper output = serializeAndDeserialize(jsonb, input);\n+        assertEquals(HardSoftScore.of(-1, -20), output.getHardSoftScore());\n+    }\n+\n+    public static class TestOptaPlannerJsonbConfigWrapper {\n+\n+        private HardSoftScore hardSoftScore;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea642bfc0a80c7299e1116e871f71e241b2a0af6"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3NTQ5NTI2", "url": "https://github.com/kiegroup/optaplanner/pull/720#pullrequestreview-377549526", "createdAt": "2020-03-19T09:28:49Z", "commit": {"oid": "ea642bfc0a80c7299e1116e871f71e241b2a0af6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a295b748aaa31a9fa9776424a193bb034e35189", "author": {"user": null}, "url": "https://github.com/kiegroup/optaplanner/commit/5a295b748aaa31a9fa9776424a193bb034e35189", "committedDate": "2020-03-19T14:08:36Z", "message": "Add BendableScore in JacksonModule and JsonbConfig tests"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2898, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}