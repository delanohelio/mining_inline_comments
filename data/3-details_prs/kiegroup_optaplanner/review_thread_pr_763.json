{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwMjU2OTc1", "number": 763, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNzozNTowNlrOD3Tk1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNzozODowMVrOD3TpfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MzE4OTk3OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/localsearch/decider/forager/finalist/AbstractFinalistPodium.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNzozNTowNlrOGNfWJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwODoxODozN1rOGOeuXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc5ODI0Nw==", "bodyText": "Any particular reason why so many finalists would be a good idea?", "url": "https://github.com/kiegroup/optaplanner/pull/763#discussion_r416798247", "createdAt": "2020-04-28T17:35:06Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/localsearch/decider/forager/finalist/AbstractFinalistPodium.java", "diffHunk": "@@ -32,6 +32,8 @@\n  */\n public abstract class AbstractFinalistPodium extends LocalSearchPhaseLifecycleListenerAdapter implements FinalistPodium {\n \n+    protected static final int FINALIST_LIST_MAX_SIZE = 1_024_000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e005b56c5b1b66768438e4b4ad27e9dc2adfa0f4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzgzNjYzOA==", "bodyText": "No, but with a normal amount of memory we can handle this.\nFiguring out the MAX_SIZE on which these so many finalist would be 100% of the time a bad idea, is impossible.\nIt would be a good guesstimate at best, so if we get it wrong: an potential risk for silent, surprising misbehaviour in how the algorithm reacts in certain conditions. That's a risk I am unwilling to take (low chance it happens but too high impact if it does).\nThis MAX_SIZE isn't meant to distinguish between good and bad. It's to distinguish between bad without OOME trouble and bad with OOME.", "url": "https://github.com/kiegroup/optaplanner/pull/763#discussion_r417836638", "createdAt": "2020-04-30T08:18:37Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/localsearch/decider/forager/finalist/AbstractFinalistPodium.java", "diffHunk": "@@ -32,6 +32,8 @@\n  */\n public abstract class AbstractFinalistPodium extends LocalSearchPhaseLifecycleListenerAdapter implements FinalistPodium {\n \n+    protected static final int FINALIST_LIST_MAX_SIZE = 1_024_000;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc5ODI0Nw=="}, "originalCommit": {"oid": "e005b56c5b1b66768438e4b4ad27e9dc2adfa0f4"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MzIwMTg4OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/localsearch/decider/forager/finalist/AbstractFinalistPodium.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNzozODowMVrOGNfdpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwODoyNToxN1rOGOe-JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgwMDE2Nw==", "bodyText": "Wouldn't it make sense to instead remove the least recent finalist? Or perhaps the worst finalist?", "url": "https://github.com/kiegroup/optaplanner/pull/763#discussion_r416800167", "createdAt": "2020-04-28T17:38:01Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/localsearch/decider/forager/finalist/AbstractFinalistPodium.java", "diffHunk": "@@ -44,6 +46,19 @@ public void stepStarted(LocalSearchStepScope stepScope) {\n         finalistList = new ArrayList<>(1024);\n     }\n \n+    protected void clearAndAddFinalist(LocalSearchMoveScope moveScope) {\n+        finalistList.clear();\n+        finalistList.add(moveScope);\n+    }\n+\n+    protected void addFinalist(LocalSearchMoveScope moveScope) {\n+        if (finalistList.size() >= FINALIST_LIST_MAX_SIZE) {\n+            // Avoid unbounded growth and OutOfMemoryException\n+            return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e005b56c5b1b66768438e4b4ad27e9dc2adfa0f4"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg0MDY3Nw==", "bodyText": "All moves in the finalistList have the same score (which is the reason that in most cases, it's typically size 1 to at most 100). There is no way to distinguish out the worst one.\nI doubted about ignoring the oldest or the newest.\nRemoving the oldest in an ArrayList (not ArrayDeque) has a big0(n) perf cost. Ignoring the newest doesn't.\nBoth the first move evaluated and the last move evaluated in the same step with the same score, have equal right to be selected - recency doesn't count (there is no changes in the steps).\nSo I went for ignoring the newest.", "url": "https://github.com/kiegroup/optaplanner/pull/763#discussion_r417840677", "createdAt": "2020-04-30T08:25:17Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/localsearch/decider/forager/finalist/AbstractFinalistPodium.java", "diffHunk": "@@ -44,6 +46,19 @@ public void stepStarted(LocalSearchStepScope stepScope) {\n         finalistList = new ArrayList<>(1024);\n     }\n \n+    protected void clearAndAddFinalist(LocalSearchMoveScope moveScope) {\n+        finalistList.clear();\n+        finalistList.add(moveScope);\n+    }\n+\n+    protected void addFinalist(LocalSearchMoveScope moveScope) {\n+        if (finalistList.size() >= FINALIST_LIST_MAX_SIZE) {\n+            // Avoid unbounded growth and OutOfMemoryException\n+            return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgwMDE2Nw=="}, "originalCommit": {"oid": "e005b56c5b1b66768438e4b4ad27e9dc2adfa0f4"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4510, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}