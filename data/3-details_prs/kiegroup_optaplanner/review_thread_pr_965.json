{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxMjExNTMz", "number": 965, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNTo1NzoyMFrOEssKKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNjowNDoxMFrOEssT4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Mjk2Mjk2OnYy", "diffSide": "RIGHT", "path": "optaplanner-benchmark/src/main/java/org/optaplanner/benchmark/impl/result/SolverBenchmarkResult.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNTo1NzoyMFrOHgEdmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNTo1NzoyMFrOHgEdmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM4OTU5NQ==", "bodyText": "Nitpick: I don't mind the explicit cast from int to double here. Autocasting for primitives has been shown to be dangerous. For example double a = 9007199254740993L becomes 9007199254740992.0 (1 off error)", "url": "https://github.com/kiegroup/optaplanner/pull/965#discussion_r503389595", "createdAt": "2020-10-12T15:57:20Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-benchmark/src/main/java/org/optaplanner/benchmark/impl/result/SolverBenchmarkResult.java", "diffHunk": "@@ -337,7 +337,7 @@ protected void determineTotalsAndAverages() {\n         if (!firstNonFailure) {\n             int successCount = getSuccessCount();\n             averageScore = totalScore.divide(successCount);\n-            averageWorstScoreDifferencePercentage = totalWorstScoreDifferencePercentage.divide((double) successCount);\n+            averageWorstScoreDifferencePercentage = totalWorstScoreDifferencePercentage.divide(successCount);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16bd919b686e7b5237db15b93b1a92064de95029"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Mjk3ODExOnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/heuristic/selector/move/factory/MoveIteratorFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNjowMToxOVrOHgEm5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNjowMToxOVrOHgEm5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM5MTk3NA==", "bodyText": "Will affect upgrade recipe and docs", "url": "https://github.com/kiegroup/optaplanner/pull/965#discussion_r503391974", "createdAt": "2020-10-12T16:01:19Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/heuristic/selector/move/factory/MoveIteratorFactory.java", "diffHunk": "@@ -32,7 +32,7 @@\n  *\n  * @param <Solution_> the solution type, the class with the {@link PlanningSolution} annotation\n  */\n-public interface MoveIteratorFactory<Solution_> {\n+public interface MoveIteratorFactory<Solution_, Move_ extends Move<Solution_>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16bd919b686e7b5237db15b93b1a92064de95029"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Mjk4Nzg1OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/ScoreUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNjowNDoxMFrOHgEtEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNjowNzowMlrOHgEzcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM5MzU1Mw==", "bodyText": "-1 veto. This is a bug. Given scorediffLevel 4 and totalDiffLevel 5, the levelTimeGradient changes from 0.8 to 0.0.", "url": "https://github.com/kiegroup/optaplanner/pull/965#discussion_r503393553", "createdAt": "2020-10-12T16:04:10Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/ScoreUtils.java", "diffHunk": "@@ -118,7 +118,7 @@ public static double calculateTimeGradient(Number[] totalDiffNumbers, Number[] s\n                 // timeGradient += 0.0\n                 break;\n             } else {\n-                double levelTimeGradient = (double) scoreDiffLevel / (double) totalDiffLevel;\n+                double levelTimeGradient = scoreDiffLevel / totalDiffLevel;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16bd919b686e7b5237db15b93b1a92064de95029"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM5Mzg4OA==", "bodyText": "nevermind, it isn't. those aren't ints, but doubles already. Ignore the comment above.", "url": "https://github.com/kiegroup/optaplanner/pull/965#discussion_r503393888", "createdAt": "2020-10-12T16:04:43Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/ScoreUtils.java", "diffHunk": "@@ -118,7 +118,7 @@ public static double calculateTimeGradient(Number[] totalDiffNumbers, Number[] s\n                 // timeGradient += 0.0\n                 break;\n             } else {\n-                double levelTimeGradient = (double) scoreDiffLevel / (double) totalDiffLevel;\n+                double levelTimeGradient = scoreDiffLevel / totalDiffLevel;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM5MzU1Mw=="}, "originalCommit": {"oid": "16bd919b686e7b5237db15b93b1a92064de95029"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM5NTE4NA==", "bodyText": "Not true. Both of those values are already doubles, the casts do nothing.", "url": "https://github.com/kiegroup/optaplanner/pull/965#discussion_r503395184", "createdAt": "2020-10-12T16:07:02Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/ScoreUtils.java", "diffHunk": "@@ -118,7 +118,7 @@ public static double calculateTimeGradient(Number[] totalDiffNumbers, Number[] s\n                 // timeGradient += 0.0\n                 break;\n             } else {\n-                double levelTimeGradient = (double) scoreDiffLevel / (double) totalDiffLevel;\n+                double levelTimeGradient = scoreDiffLevel / totalDiffLevel;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM5MzU1Mw=="}, "originalCommit": {"oid": "16bd919b686e7b5237db15b93b1a92064de95029"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4284, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}