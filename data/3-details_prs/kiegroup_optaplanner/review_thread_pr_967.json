{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyMDY0OTM1", "number": 967, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzo0MTowMlrOEs6CNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwODowNToxMFrOEt25Cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTIzNjM2OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/domain/variable/VariableListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzo0MTowMlrOHgZb8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzo0MTowMlrOHgZb8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzczMzIzNQ==", "bodyText": "Supply is not a public API, so I removed it. Which forced me to do this:\nhttps://github.com/kiegroup/optaplanner/pull/967/files#diff-1915332f290b70fd6c30cb1b442821c7b9fd64423386942e3e73c817707b5205R77", "url": "https://github.com/kiegroup/optaplanner/pull/967#discussion_r503733235", "createdAt": "2020-10-13T07:41:02Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/domain/variable/VariableListener.java", "diffHunk": "@@ -29,8 +28,11 @@\n  * <p>\n  * Each {@link ScoreDirector} has a different {@link VariableListener} instance, so it can be stateful.\n  * If it is stateful, it must implement {@link StatefulVariableListener}.\n+ * <p>\n+ * Implementation note: if/when any new method is added to this interface, make sure that\n+ * {@link SupplyVariableListener} overrides it and delegates to it.\n  */\n-public interface VariableListener<Solution_, Entity_> extends Supply {\n+public interface VariableListener<Solution_, Entity_> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51a4777024dcd3d6648e81aed3b3da392c5fd0aa"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTI0MTMzOnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/domain/variable/StatefulVariableListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzo0MjoxNlrOHgZe6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwODoyMjo1MVrOHgbDLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzczMzk5NQ==", "bodyText": "This will make VariableDescriptor leak to public API.\n(It leaked anyway, since people were using StatefulVariableListener anyway. This just makes it more \"official\".)", "url": "https://github.com/kiegroup/optaplanner/pull/967#discussion_r503733995", "createdAt": "2020-10-13T07:42:16Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/domain/variable/StatefulVariableListener.java", "diffHunk": "@@ -14,15 +14,19 @@\n  * limitations under the License.\n  */\n \n-package org.optaplanner.core.impl.domain.variable.listener;\n+package org.optaplanner.core.api.domain.variable;\n \n+import org.optaplanner.core.api.domain.variable.VariableListener;\n import org.optaplanner.core.api.score.director.ScoreDirector;\n import org.optaplanner.core.impl.domain.variable.descriptor.VariableDescriptor;\n import org.optaplanner.core.impl.domain.variable.supply.Supply;\n \n /**\n  * A stateful {@link VariableListener},\n  * often used to externalize data for a {@link Supply} from the domain model itself.\n+ * <p>\n+ * Implementation note: if/when any new method is added to this interface, make sure that\n+ * {@link SupplyVariableListener} overrides it and delegates to it.\n  */\n public interface StatefulVariableListener<Solution_, Entity_> extends VariableListener<Solution_, Entity_> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51a4777024dcd3d6648e81aed3b3da392c5fd0aa"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc1OTY2Mg==", "bodyText": "Are many users using StatefulVariableListener? I don't think so. Let's not move StatefulVariableListener into the api package yet? When in doubt, leave it out?", "url": "https://github.com/kiegroup/optaplanner/pull/967#discussion_r503759662", "createdAt": "2020-10-13T08:22:51Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/domain/variable/StatefulVariableListener.java", "diffHunk": "@@ -14,15 +14,19 @@\n  * limitations under the License.\n  */\n \n-package org.optaplanner.core.impl.domain.variable.listener;\n+package org.optaplanner.core.api.domain.variable;\n \n+import org.optaplanner.core.api.domain.variable.VariableListener;\n import org.optaplanner.core.api.score.director.ScoreDirector;\n import org.optaplanner.core.impl.domain.variable.descriptor.VariableDescriptor;\n import org.optaplanner.core.impl.domain.variable.supply.Supply;\n \n /**\n  * A stateful {@link VariableListener},\n  * often used to externalize data for a {@link Supply} from the domain model itself.\n+ * <p>\n+ * Implementation note: if/when any new method is added to this interface, make sure that\n+ * {@link SupplyVariableListener} overrides it and delegates to it.\n  */\n public interface StatefulVariableListener<Solution_, Entity_> extends VariableListener<Solution_, Entity_> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzczMzk5NQ=="}, "originalCommit": {"oid": "51a4777024dcd3d6648e81aed3b3da392c5fd0aa"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTQxNDI1OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/domain/variable/listener/support/SupplyStatefulVariableListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwODoyNTowMVrOHgbJUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwODoyNTowMVrOHgbJUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc2MTIzMw==", "bodyText": "nitpick: Let's cast it once in the constructor instead of every method?", "url": "https://github.com/kiegroup/optaplanner/pull/967#discussion_r503761233", "createdAt": "2020-10-13T08:25:01Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/domain/variable/listener/support/SupplyStatefulVariableListener.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.domain.variable.listener.support;\n+\n+import org.optaplanner.core.api.domain.variable.StatefulVariableListener;\n+import org.optaplanner.core.api.score.director.ScoreDirector;\n+import org.optaplanner.core.impl.domain.variable.descriptor.VariableDescriptor;\n+\n+public class SupplyStatefulVariableListener<Solution_, Entity_> extends SupplyVariableListener<Solution_, Entity_>\n+        implements StatefulVariableListener<Solution_, Entity_> {\n+\n+    public SupplyStatefulVariableListener(StatefulVariableListener<Solution_, Entity_> variableListener) {\n+        super(variableListener);\n+    }\n+\n+    @Override\n+    public VariableDescriptor<Solution_> getSourceVariableDescriptor() {\n+        return ((StatefulVariableListener<Solution_, Entity_>) variableListener).getSourceVariableDescriptor();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9db3e27b367c39f0deef2daf29b75fec0e534b9a"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTQyMDA4OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/domain/variable/listener/support/SupplyVariableListener.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwODoyNjoxNVrOHgbMvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwODoyNzo1M1rOHgbRUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc2MjExMA==", "bodyText": "Naming wise, it seems more sense to call it VariableListenerSupply?", "url": "https://github.com/kiegroup/optaplanner/pull/967#discussion_r503762110", "createdAt": "2020-10-13T08:26:15Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/domain/variable/listener/support/SupplyVariableListener.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.domain.variable.listener.support;\n+\n+import java.util.Objects;\n+\n+import org.optaplanner.core.api.domain.variable.VariableListener;\n+import org.optaplanner.core.api.score.director.ScoreDirector;\n+import org.optaplanner.core.impl.domain.variable.supply.Supply;\n+\n+public class SupplyVariableListener<Solution_, Entity_> implements Supply, VariableListener<Solution_, Entity_> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9db3e27b367c39f0deef2daf29b75fec0e534b9a"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc2Mjc2Nw==", "bodyText": "Thinking aloud: Supply is an empty interface. Is it worth being an interface?", "url": "https://github.com/kiegroup/optaplanner/pull/967#discussion_r503762767", "createdAt": "2020-10-13T08:27:08Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/domain/variable/listener/support/SupplyVariableListener.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.domain.variable.listener.support;\n+\n+import java.util.Objects;\n+\n+import org.optaplanner.core.api.domain.variable.VariableListener;\n+import org.optaplanner.core.api.score.director.ScoreDirector;\n+import org.optaplanner.core.impl.domain.variable.supply.Supply;\n+\n+public class SupplyVariableListener<Solution_, Entity_> implements Supply, VariableListener<Solution_, Entity_> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc2MjExMA=="}, "originalCommit": {"oid": "9db3e27b367c39f0deef2daf29b75fec0e534b9a"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc2MzI4MA==", "bodyText": "Btw I guess this is an Adaptor or Bridge pattern (GoF), so we should probably name it accordingly.", "url": "https://github.com/kiegroup/optaplanner/pull/967#discussion_r503763280", "createdAt": "2020-10-13T08:27:53Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/domain/variable/listener/support/SupplyVariableListener.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.domain.variable.listener.support;\n+\n+import java.util.Objects;\n+\n+import org.optaplanner.core.api.domain.variable.VariableListener;\n+import org.optaplanner.core.api.score.director.ScoreDirector;\n+import org.optaplanner.core.impl.domain.variable.supply.Supply;\n+\n+public class SupplyVariableListener<Solution_, Entity_> implements Supply, VariableListener<Solution_, Entity_> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc2MjExMA=="}, "originalCommit": {"oid": "9db3e27b367c39f0deef2daf29b75fec0e534b9a"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTQzMDA4OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/domain/variable/listener/support/VariableListenerSupport.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwODoyODozNFrOHgbTIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwODoyODozNFrOHgbTIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc2Mzc0NQ==", "bodyText": "If we get rid of the Supply interface, we don't need to do this. Not sure if we want to though. (Discuss during meeting)", "url": "https://github.com/kiegroup/optaplanner/pull/967#discussion_r503763745", "createdAt": "2020-10-13T08:28:34Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/domain/variable/listener/support/VariableListenerSupport.java", "diffHunk": "@@ -60,6 +60,21 @@ public VariableListenerSupport(InnerScoreDirector<Solution_, ?> scoreDirector) {\n         supplyMap = new LinkedHashMap<>();\n     }\n \n+    private VariableListener<Solution_, ?>\n+            getVariableListenerAsSupply(ShadowVariableDescriptor<Solution_> shadowVariableDescriptor) {\n+        VariableListener<Solution_, ?> variableListener = shadowVariableDescriptor.buildVariableListener(scoreDirector);\n+        if (variableListener instanceof Supply) {\n+            // Many internal implementations already provide the Supply interface; we need to keep those.\n+            return variableListener;\n+        }\n+        // Otherwise wrap the variable listener to implement Supply.\n+        if (variableListener instanceof StatefulVariableListener) {\n+            return new SupplyStatefulVariableListener<>((StatefulVariableListener<Solution_, ?>) variableListener);\n+        } else {\n+            return new SupplyVariableListener<>(variableListener);\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9db3e27b367c39f0deef2daf29b75fec0e534b9a"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NzQ4NTQ1OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/domain/variable/VariableListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNjoyMjoxNFrOHgvD8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNjoyMjoxNFrOHgvD8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA4NzUzOQ==", "bodyText": "Not AutoClosable, as I don't intend this API to be used in try (...). It makes no sense.", "url": "https://github.com/kiegroup/optaplanner/pull/967#discussion_r504087539", "createdAt": "2020-10-13T16:22:14Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/domain/variable/VariableListener.java", "diffHunk": "@@ -27,10 +30,14 @@\n  * It can change its shadow variable(s) on multiple entity instances\n  * (for example: an arrivalTime change affects all trailing entities too).\n  * <p>\n- * Each {@link ScoreDirector} has a different {@link VariableListener} instance, so it can be stateful.\n- * If it is stateful, it must implement {@link StatefulVariableListener}.\n+ * It is recommended that implementations be kept stateless.\n+ * If state must be implemented, implementations may need to override the default methods\n+ * ({@link #resetWorkingSolution(ScoreDirector)}, {@link #close()}).\n+ *\n+ * @param <Solution_> @{@link PlanningSolution} holding the @{@link PlanningEntity} on which the variable is declared\n+ * @param <Entity_> @{@link PlanningEntity} on which the variable is declared\n  */\n-public interface VariableListener<Solution_, Entity_> extends Supply {\n+public interface VariableListener<Solution_, Entity_> extends Closeable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bc4c1b4f6e1d0b1b6e44c88f773ff5c48668108"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NTA3MzgxOnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/domain/variable/VariableListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNzo0NjoyMFrOHh4LmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNzo0NjoyMFrOHh4LmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI4NTUyOQ==", "bodyText": "+1 good idea - this indeed belongs next to the CustomVariable annotation", "url": "https://github.com/kiegroup/optaplanner/pull/967#discussion_r505285529", "createdAt": "2020-10-15T07:46:20Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/domain/variable/VariableListener.java", "diffHunk": "@@ -14,10 +14,13 @@\n  * limitations under the License.\n  */\n \n-package org.optaplanner.core.impl.domain.variable.listener;\n+package org.optaplanner.core.api.domain.variable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bc4c1b4f6e1d0b1b6e44c88f773ff5c48668108"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NTA5MDc2OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/domain/variable/VariableListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNzo0OToyNFrOHh4XFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNzo0OToyNFrOHh4XFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI4ODQ2OA==", "bodyText": "This \"the PlanningEntity\" kinda implies there there is only one planning entity class and only one planning entity.\nAlso, I suggest we standarize the javadoc sentence for this generic parameter across all javadocs. Most use this sentence (that we might want to improve):\n* @param <Solution_> the solution type, the class with the {@link PlanningSolution} annotation", "url": "https://github.com/kiegroup/optaplanner/pull/967#discussion_r505288468", "createdAt": "2020-10-15T07:49:24Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/domain/variable/VariableListener.java", "diffHunk": "@@ -27,10 +30,14 @@\n  * It can change its shadow variable(s) on multiple entity instances\n  * (for example: an arrivalTime change affects all trailing entities too).\n  * <p>\n- * Each {@link ScoreDirector} has a different {@link VariableListener} instance, so it can be stateful.\n- * If it is stateful, it must implement {@link StatefulVariableListener}.\n+ * It is recommended that implementations be kept stateless.\n+ * If state must be implemented, implementations may need to override the default methods\n+ * ({@link #resetWorkingSolution(ScoreDirector)}, {@link #close()}).\n+ *\n+ * @param <Solution_> @{@link PlanningSolution} holding the @{@link PlanningEntity} on which the variable is declared", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bc4c1b4f6e1d0b1b6e44c88f773ff5c48668108"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NTE3MjQyOnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/domain/variable/VariableListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwODowMDo0MVrOHh5PCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwODowMDo0MVrOHh5PCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTMwMjc5NQ==", "bodyText": "This should specify if beforeEntityAdded(), afterEnityAdded() and/or beforeEntityRemoved()/afterEntityRemoved() are called too in such an event on the new entities and the old entities.\nI don't recall if they actually are or aren't.", "url": "https://github.com/kiegroup/optaplanner/pull/967#discussion_r505302795", "createdAt": "2020-10-15T08:00:41Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/domain/variable/VariableListener.java", "diffHunk": "@@ -79,4 +86,21 @@ default boolean requiresUniqueEntityEvents() {\n      */\n     void afterEntityRemoved(ScoreDirector<Solution_> scoreDirector, Entity_ entity);\n \n+    /**\n+     * Called when the entire working solution changes.\n+     * At this point, implementations should clear state, if any.\n+     * ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bc4c1b4f6e1d0b1b6e44c88f773ff5c48668108"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NTE4Mjk1OnYy", "diffSide": "LEFT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/domain/variable/listener/VariableListenerAdapter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwODowMjowMVrOHh5WPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwODowMjowMVrOHh5WPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTMwNDYzNg==", "bodyText": "upgrade recipe of course", "url": "https://github.com/kiegroup/optaplanner/pull/967#discussion_r505304636", "createdAt": "2020-10-15T08:02:01Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/domain/variable/listener/VariableListenerAdapter.java", "diffHunk": "@@ -1,53 +0,0 @@\n-/*\n- * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.optaplanner.core.impl.domain.variable.listener;\n-\n-import org.optaplanner.core.api.score.director.ScoreDirector;\n-\n-public abstract class VariableListenerAdapter<Solution_, Entity_> implements VariableListener<Solution_, Entity_> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bc4c1b4f6e1d0b1b6e44c88f773ff5c48668108"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NTIwNzE0OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/test/java/org/optaplanner/core/impl/testdata/domain/shadow/cyclic/TestdataSevenNonCyclicShadowedEntity.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwODowNToxMFrOHh5mUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwODoxMDoxMVrOHh58Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTMwODc1Mg==", "bodyText": "It's wierd that this doesn't trigger a fail-fast because it's not a concrete class it can instantiate. We probably want such a fail fast (can be separate issue)?\nFor this reason, we might want to keep VariableListenerAdapter in src/test/java as DummyVariableListener", "url": "https://github.com/kiegroup/optaplanner/pull/967#discussion_r505308752", "createdAt": "2020-10-15T08:05:10Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/test/java/org/optaplanner/core/impl/testdata/domain/shadow/cyclic/TestdataSevenNonCyclicShadowedEntity.java", "diffHunk": "@@ -73,7 +73,7 @@ public void setValue(TestdataValue value) {\n         this.value = value;\n     }\n \n-    @CustomShadowVariable(variableListenerClass = VariableListenerAdapter.class, sources = {\n+    @CustomShadowVariable(variableListenerClass = VariableListener.class, sources = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bc4c1b4f6e1d0b1b6e44c88f773ff5c48668108"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTMxNDM5OQ==", "bodyText": "VariableListenerAdapter used to be abstract, so there's no direct instances of that either. Status quo does not change.", "url": "https://github.com/kiegroup/optaplanner/pull/967#discussion_r505314399", "createdAt": "2020-10-15T08:10:11Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/test/java/org/optaplanner/core/impl/testdata/domain/shadow/cyclic/TestdataSevenNonCyclicShadowedEntity.java", "diffHunk": "@@ -73,7 +73,7 @@ public void setValue(TestdataValue value) {\n         this.value = value;\n     }\n \n-    @CustomShadowVariable(variableListenerClass = VariableListenerAdapter.class, sources = {\n+    @CustomShadowVariable(variableListenerClass = VariableListener.class, sources = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTMwODc1Mg=="}, "originalCommit": {"oid": "6bc4c1b4f6e1d0b1b6e44c88f773ff5c48668108"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4288, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}