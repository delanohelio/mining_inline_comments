{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE3NjgzMjk3", "number": 1016, "title": "PLANNER-2240 Switch OptaPlanner to KieHelper", "bodyText": "I would argue this does not need to land on 8.0.x.", "createdAt": "2020-11-09T11:10:54Z", "url": "https://github.com/kiegroup/optaplanner/pull/1016", "merged": true, "mergeCommit": {"oid": "bcbd656966094bfba85868b686d606697908ee2d"}, "closed": true, "closedAt": "2020-11-09T13:38:47Z", "author": {"login": "triceo"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdayzKQAH2gAyNTE3NjgzMjk3OjJhYjI1ZDkxOTI0NzJjMmNhMGQwNDZmNGU4MGUwNzU5ODM1NWQ4MWY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABda0de8AH2gAyNTE3NjgzMjk3OjgzMzk3ODI5MGE5MzgxZDA2YzQ5MzljNjQyNGMwZmEzZTU3MmJiMTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2ab25d9192472c2ca0d046f4e80e07598355d81f", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/2ab25d9192472c2ca0d046f4e80e07598355d81f", "committedDate": "2020-11-09T11:10:24Z", "message": "PLANNER-2240 Switch OptaPlanner to KieHelper"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2MTU2NDQ5", "url": "https://github.com/kiegroup/optaplanner/pull/1016#pullrequestreview-526156449", "createdAt": "2020-11-09T11:22:33Z", "commit": {"oid": "2ab25d9192472c2ca0d046f4e80e07598355d81f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMToyMjozM1rOHvqH5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMToyMjozM1rOHvqH5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTczNTI2OQ==", "bodyText": "I 'd argue it needs to have the word \"scoreDRL\" in the message, because that is the breadcrumb that ties back into the solverConfig's <scoreDRL> line.\nIt's also important for us when we get support tickets, to know that they went through scoreDrl and not though kmodule.xml or CS.", "url": "https://github.com/kiegroup/optaplanner/pull/1016#discussion_r519735269", "createdAt": "2020-11-09T11:22:33Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/test/java/org/optaplanner/core/impl/score/director/ScoreDirectorFactoryFactoryTest.java", "diffHunk": "@@ -140,16 +140,20 @@ void multipleScoreCalculations_throwsException() {\n \n     @Test\n     void nonExistingDrlResource_throwsException() {\n-        ScoreDirectorFactoryConfig config = new ScoreDirectorFactoryConfig().withScoreDrls(\"nonExisting.drl\");\n-        assertThatExceptionOfType(IllegalArgumentException.class).isThrownBy(() -> buildTestdataScoreDirectoryFactory(config))\n-                .withMessageContaining(\"scoreDrl\");\n+        ScoreDirectorFactoryConfig config = new ScoreDirectorFactoryConfig()\n+                .withScoreDrls(\"nonExisting.drl\");\n+        assertThatExceptionOfType(IllegalStateException.class)\n+                .isThrownBy(() -> buildTestdataScoreDirectoryFactory(config))\n+                .withMessageContaining(\"DRL\");\n     }\n \n     @Test\n     void nonExistingDrlFile_throwsException() {\n-        ScoreDirectorFactoryConfig config = new ScoreDirectorFactoryConfig().withScoreDrlFiles(new File(\"nonExisting.drl\"));\n-        assertThatExceptionOfType(IllegalArgumentException.class).isThrownBy(() -> buildTestdataScoreDirectoryFactory(config))\n-                .withMessageContaining(\"scoreDrlFile\");\n+        ScoreDirectorFactoryConfig config = new ScoreDirectorFactoryConfig()\n+                .withScoreDrlFiles(new File(\"nonExisting.drl\"));\n+        assertThatExceptionOfType(IllegalStateException.class)\n+                .isThrownBy(() -> buildTestdataScoreDirectoryFactory(config))\n+                .withMessageContaining(\"DRL\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ab25d9192472c2ca0d046f4e80e07598355d81f"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6cb59d180daa3ad3ced63ff663e10b01cb2b642c", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/6cb59d180daa3ad3ced63ff663e10b01cb2b642c", "committedDate": "2020-11-09T11:45:04Z", "message": "Add test for an invalid DRL"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "572a1173d71ddd06b255b377b96552dc2c44f9fd", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/572a1173d71ddd06b255b377b96552dc2c44f9fd", "committedDate": "2020-11-09T12:08:54Z", "message": "Fix test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2MjIzODgw", "url": "https://github.com/kiegroup/optaplanner/pull/1016#pullrequestreview-526223880", "createdAt": "2020-11-09T12:55:50Z", "commit": {"oid": "2ab25d9192472c2ca0d046f4e80e07598355d81f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMjo1NTo1MFrOHvtM3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMjo1NTo1MFrOHvtM3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc4NTY5NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new IllegalStateException(\"There are problems in your DRL.\", ex);\n          \n          \n            \n                        throw new IllegalStateException(\"There is an error in a scoreDrl or scoreDrlFile.\", ex);", "url": "https://github.com/kiegroup/optaplanner/pull/1016#discussion_r519785694", "createdAt": "2020-11-09T12:55:50Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/director/ScoreDirectorFactoryFactory.java", "diffHunk": "@@ -237,76 +232,32 @@ public ScoreDirectorFactoryFactory(ScoreDirectorFactoryConfig config) {\n             return null;\n         }\n \n-        KieServices kieServices = KieServices.Factory.get();\n-        KieResources kieResources = kieServices.getResources();\n-        KieFileSystem kieFileSystem = kieServices.newKieFileSystem();\n-\n-        writeScoreDrlListToKieFileSystem(kieFileSystem, kieResources, classLoader);\n-        writeScoreDrlFileListToKieFileSystem(kieFileSystem, kieResources);\n-\n-        // Can be overwritten by kieBaseConfigurationProperties\n-        KieModuleModel kmodel = kieServices.newKieModuleModel()\n-                .setConfigurationProperty(PropertySpecificOption.PROPERTY_NAME,\n-                        PropertySpecificOption.ALLOWED.toString());\n-        kieFileSystem.writeKModuleXML(kmodel.toXML());\n-\n-        KieBuilder kieBuilder = kieServices.newKieBuilder(kieFileSystem);\n-        kieBuilder.buildAll(ExecutableModelProject.class);\n-        Results results = kieBuilder.getResults();\n-        if (results.hasMessages(Message.Level.ERROR)) {\n-            throw new IllegalStateException(\"There are errors in a score DRL:\\n\" + results);\n-        } else if (results.hasMessages(Message.Level.WARNING)) {\n-            logger.warn(\"There are warnings in a score DRL:\\n{}\", results);\n-        }\n-        KieContainer kieContainer = kieServices.newKieContainer(kieBuilder.getKieModule().getReleaseId());\n-\n-        KieBaseConfiguration kieBaseConfiguration = buildKieBaseConfiguration(kieServices);\n-        KieBase kieBase = kieContainer.newKieBase(kieBaseConfiguration);\n-        if (generateDroolsTestOnError) {\n-            return new TestGenDroolsScoreDirectorFactory<>(solutionDescriptor, kieBase, config.getScoreDrlList(),\n-                    config.getScoreDrlFileList());\n-        } else {\n-            return new DroolsScoreDirectorFactory<>(solutionDescriptor, kieBase);\n-        }\n-    }\n-\n-    private void writeScoreDrlListToKieFileSystem(KieFileSystem kieFileSystem, KieResources kieResources,\n-            ClassLoader classLoader) {\n+        KieHelper kieHelper = new KieHelper(PropertySpecificOption.ALLOWED)\n+                .setClassLoader(classLoader);\n         if (!ConfigUtils.isEmptyCollection(config.getScoreDrlList())) {\n-            ClassLoader actualClassLoader =\n-                    (classLoader != null) ? classLoader : Thread.currentThread().getContextClassLoader();\n             for (String scoreDrl : config.getScoreDrlList()) {\n                 if (scoreDrl == null) {\n                     throw new IllegalArgumentException(\"The scoreDrl (\" + scoreDrl + \") cannot be null.\");\n                 }\n-                URL scoreDrlURL = actualClassLoader.getResource(scoreDrl);\n-                if (scoreDrlURL == null) {\n-                    String errorMessage = \"The scoreDrl (\" + scoreDrl + \") does not exist as a classpath resource\"\n-                            + \" in the classLoader (\" + actualClassLoader + \").\";\n-                    if (scoreDrl.startsWith(\"/\")) {\n-                        errorMessage += \"\\nAs from 6.1, a classpath resource should not start with a slash (/).\"\n-                                + \" A scoreDrl now adheres to ClassLoader.getResource(String).\"\n-                                + \" Remove the leading slash from the scoreDrl if you're upgrading from 6.0.\";\n-                    }\n-                    throw new IllegalArgumentException(errorMessage);\n-                }\n-                kieFileSystem.write(kieResources.newClassPathResource(scoreDrl, \"UTF-8\", actualClassLoader));\n+                kieHelper.addResource(new ClassPathResource(scoreDrl, classLoader));\n             }\n         }\n-    }\n-\n-    private void writeScoreDrlFileListToKieFileSystem(KieFileSystem kieFileSystem, KieResources kieResources) {\n         if (!ConfigUtils.isEmptyCollection(config.getScoreDrlFileList())) {\n             for (File scoreDrlFile : config.getScoreDrlFileList()) {\n-                if (scoreDrlFile == null) {\n-                    throw new IllegalArgumentException(\"The scoreDrlFile (\" + scoreDrlFile + \") cannot be null.\");\n-                }\n-                if (!scoreDrlFile.exists()) {\n-                    throw new IllegalArgumentException(\"The scoreDrlFile (\" + scoreDrlFile\n-                            + \") does not exist.\");\n-                }\n-                kieFileSystem.write(kieResources.newFileSystemResource(scoreDrlFile, \"UTF-8\"));\n+                kieHelper.addResource(new FileSystemResource(scoreDrlFile));\n+            }\n+        }\n+\n+        try {\n+            KieBase kieBase = kieHelper.build(ExecutableModelProject.class);\n+            if (generateDroolsTestOnError) {\n+                return new TestGenDroolsScoreDirectorFactory<>(solutionDescriptor, kieBase, config.getScoreDrlList(),\n+                        config.getScoreDrlFileList());\n+            } else {\n+                return new DroolsScoreDirectorFactory<>(solutionDescriptor, kieBase);\n             }\n+        } catch (Exception ex) {\n+            throw new IllegalStateException(\"There are problems in your DRL.\", ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ab25d9192472c2ca0d046f4e80e07598355d81f"}, "originalPosition": 118}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac2fbbafa0f1ca0ba50c1b18ca924fb10eccd455", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/ac2fbbafa0f1ca0ba50c1b18ca924fb10eccd455", "committedDate": "2020-11-09T12:57:31Z", "message": "Update optaplanner-core/src/main/java/org/optaplanner/core/impl/score/director/ScoreDirectorFactoryFactory.java\n\nCo-authored-by: Geoffrey De Smet <gds.geoffrey.de.smet@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2MjM1MTA1", "url": "https://github.com/kiegroup/optaplanner/pull/1016#pullrequestreview-526235105", "createdAt": "2020-11-09T13:01:17Z", "commit": {"oid": "572a1173d71ddd06b255b377b96552dc2c44f9fd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "833978290a9381d06c4939c6424c0fa3e572bb12", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/833978290a9381d06c4939c6424c0fa3e572bb12", "committedDate": "2020-11-09T13:06:32Z", "message": "Fix test"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3118, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}