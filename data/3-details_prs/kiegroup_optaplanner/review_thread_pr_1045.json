{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1OTM1OTg3", "number": 1045, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxOTowNzowMlrOE8W1pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwODowMDowN1rOE8j5xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzI0MTk3OnYy", "diffSide": "RIGHT", "path": "Jenkinsfile.promote", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxOTowNzowMlrOH4bgfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxOTowNzowMlrOH4bgfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkzMjk4OA==", "bodyText": "TODO: return back after testing.", "url": "https://github.com/kiegroup/optaplanner/pull/1045#discussion_r528932988", "createdAt": "2020-11-23T19:07:02Z", "author": {"login": "rsynek"}, "path": "Jenkinsfile.promote", "diffHunk": "@@ -77,34 +81,126 @@ pipeline {\n             }\n         }\n \n+        stage('Setup global Maven arguments') {\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps{\n+                script {\n+                    if (isSpecificMavenConfig()) {\n+                        echo 'Setup Maven release config'\n+                        configFileProvider([configFile(fileId: maven.getSubmarineSettingsXmlId(), targetLocation: 'maven-settings.xml', variable: 'MAVEN_SETTINGS_FILE')]){\n+                            // expose the temp file via a global environment variable for other stages\n+                            env.GLOBAL_MAVEN_ARGS = \"-B -s ${MAVEN_SETTINGS_FILE} -Denforcer.skip=true\"\n+\n+                            sh \"sed -i 's|<repositories>|<repositories><repository><id>staging</id><name>Staging Repository</name><url>${params.MAVEN_DEPENDENCIES_REPOSITORY}</url><layout>default</layout><snapshots><enabled>true</enabled></snapshots><releases><enabled>true</enabled></releases></repository>|g' ${MAVEN_SETTINGS_FILE}\"\n+                            sh \"sed -i 's|<pluginRepositories>|<pluginRepositories><pluginRepository><id>staging</id><name>Staging Repository</name><url>${params.MAVEN_DEPENDENCIES_REPOSITORY}</url><layout>default</layout><snapshots><enabled>true</enabled></snapshots><releases><enabled>true</enabled></releases></pluginRepository>|g' ${MAVEN_SETTINGS_FILE}\"\n+                            sh \"sed -i 's|external:\\\\*|external:*,!staging|g' ${MAVEN_SETTINGS_FILE}\" // Done to allow Maven to download release artifacts from MAVEN_DEPENDENCIES_REPOSITORY\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n         stage('Merge OptaPlanner deploy PR and tag') {\n             when {\n                 expression { return isRelease() }\n             }\n             steps{\n                 script {\n-                    dir('optaplanner') {\n-                        checkoutRepo('optaplanner')\n-                        mergeAndPush('optaplanner', getDeployPrLink('optaplanner'))\n+                    dir(optaplannerRepository) {\n+                        checkoutRepo(optaplannerRepository)\n+                        mergeAndPush(getDeployPrLink(optaplannerRepository))\n+                        tagLatest()\n+                    }\n+                }\n+            }\n+        }\n+\n+        stage('Merge Optaweb Vehicle Routing deploy PR and tag') {\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps{\n+                script {\n+                    dir(vehicleRoutingRepository) {\n+                        checkoutRepo(vehicleRoutingRepository)\n+                        mergeAndPush(getDeployPrLink(vehicleRoutingRepository))\n+                        tagLatest()\n+                    }\n+                }\n+            }\n+        }\n+\n+        stage('Merge Optaweb Employee Rostering deploy PR and tag') {\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps{\n+                script {\n+                    dir(employeeRosteringRepository) {\n+                        checkoutRepo(employeeRosteringRepository)\n+                        mergeAndPush(getDeployPrLink(employeeRosteringRepository))\n                         tagLatest()\n                     }\n                 }\n             }\n         }\n \n-        stage('Upload documentation and distribution') {\n+        stage('Upload OptaPlanner documentation and distribution') {\n             when {\n                 expression { return isRelease() }\n             }\n             steps {\n                 script {\n-                    mavenCleanInstall('optaplanner', true, [], '-Dfull')\n-                    dir('optaplanner') {\n+                    dir(optaplannerRepository) {\n+                        mavenCleanInstall(true, [], '-Dfull')\n                         withCredentials(bindings: [sshUserPrivateKey(credentialsId: 'optaplanner-filemgmt',\n                                              keyFileVariable: 'SSH_KEY_JBOSS_FILEMGMT')]) {\n                             // For testing, simulate connection via SSH:\n-                            // sh \"ssh -i $SSH_KEY_JBOSS_FILEMGMT -oKexAlgorithms=+diffie-hellman-group1-sha1 optaplanner@filemgmt.jboss.org\"\n-                            sh \"./build/release/upload_distribution.sh ${getProjectVersion()} $SSH_KEY_JBOSS_FILEMGMT\"\n+                            sh \"ssh -i $SSH_KEY_JBOSS_FILEMGMT -oKexAlgorithms=+diffie-hellman-group1-sha1 optaplanner@filemgmt.jboss.org\"\n+                            // TODO: return back", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a0fd8e1e3e941e51aab4702f29f4cde89e15ede"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzI0MjMyOnYy", "diffSide": "RIGHT", "path": "Jenkinsfile.promote", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxOTowNzowOFrOH4bgsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxOTowNzowOFrOH4bgsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkzMzA0Mg==", "bodyText": "TODO: return back after testing.", "url": "https://github.com/kiegroup/optaplanner/pull/1045#discussion_r528933042", "createdAt": "2020-11-23T19:07:08Z", "author": {"login": "rsynek"}, "path": "Jenkinsfile.promote", "diffHunk": "@@ -77,34 +81,126 @@ pipeline {\n             }\n         }\n \n+        stage('Setup global Maven arguments') {\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps{\n+                script {\n+                    if (isSpecificMavenConfig()) {\n+                        echo 'Setup Maven release config'\n+                        configFileProvider([configFile(fileId: maven.getSubmarineSettingsXmlId(), targetLocation: 'maven-settings.xml', variable: 'MAVEN_SETTINGS_FILE')]){\n+                            // expose the temp file via a global environment variable for other stages\n+                            env.GLOBAL_MAVEN_ARGS = \"-B -s ${MAVEN_SETTINGS_FILE} -Denforcer.skip=true\"\n+\n+                            sh \"sed -i 's|<repositories>|<repositories><repository><id>staging</id><name>Staging Repository</name><url>${params.MAVEN_DEPENDENCIES_REPOSITORY}</url><layout>default</layout><snapshots><enabled>true</enabled></snapshots><releases><enabled>true</enabled></releases></repository>|g' ${MAVEN_SETTINGS_FILE}\"\n+                            sh \"sed -i 's|<pluginRepositories>|<pluginRepositories><pluginRepository><id>staging</id><name>Staging Repository</name><url>${params.MAVEN_DEPENDENCIES_REPOSITORY}</url><layout>default</layout><snapshots><enabled>true</enabled></snapshots><releases><enabled>true</enabled></releases></pluginRepository>|g' ${MAVEN_SETTINGS_FILE}\"\n+                            sh \"sed -i 's|external:\\\\*|external:*,!staging|g' ${MAVEN_SETTINGS_FILE}\" // Done to allow Maven to download release artifacts from MAVEN_DEPENDENCIES_REPOSITORY\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n         stage('Merge OptaPlanner deploy PR and tag') {\n             when {\n                 expression { return isRelease() }\n             }\n             steps{\n                 script {\n-                    dir('optaplanner') {\n-                        checkoutRepo('optaplanner')\n-                        mergeAndPush('optaplanner', getDeployPrLink('optaplanner'))\n+                    dir(optaplannerRepository) {\n+                        checkoutRepo(optaplannerRepository)\n+                        mergeAndPush(getDeployPrLink(optaplannerRepository))\n+                        tagLatest()\n+                    }\n+                }\n+            }\n+        }\n+\n+        stage('Merge Optaweb Vehicle Routing deploy PR and tag') {\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps{\n+                script {\n+                    dir(vehicleRoutingRepository) {\n+                        checkoutRepo(vehicleRoutingRepository)\n+                        mergeAndPush(getDeployPrLink(vehicleRoutingRepository))\n+                        tagLatest()\n+                    }\n+                }\n+            }\n+        }\n+\n+        stage('Merge Optaweb Employee Rostering deploy PR and tag') {\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps{\n+                script {\n+                    dir(employeeRosteringRepository) {\n+                        checkoutRepo(employeeRosteringRepository)\n+                        mergeAndPush(getDeployPrLink(employeeRosteringRepository))\n                         tagLatest()\n                     }\n                 }\n             }\n         }\n \n-        stage('Upload documentation and distribution') {\n+        stage('Upload OptaPlanner documentation and distribution') {\n             when {\n                 expression { return isRelease() }\n             }\n             steps {\n                 script {\n-                    mavenCleanInstall('optaplanner', true, [], '-Dfull')\n-                    dir('optaplanner') {\n+                    dir(optaplannerRepository) {\n+                        mavenCleanInstall(true, [], '-Dfull')\n                         withCredentials(bindings: [sshUserPrivateKey(credentialsId: 'optaplanner-filemgmt',\n                                              keyFileVariable: 'SSH_KEY_JBOSS_FILEMGMT')]) {\n                             // For testing, simulate connection via SSH:\n-                            // sh \"ssh -i $SSH_KEY_JBOSS_FILEMGMT -oKexAlgorithms=+diffie-hellman-group1-sha1 optaplanner@filemgmt.jboss.org\"\n-                            sh \"./build/release/upload_distribution.sh ${getProjectVersion()} $SSH_KEY_JBOSS_FILEMGMT\"\n+                            sh \"ssh -i $SSH_KEY_JBOSS_FILEMGMT -oKexAlgorithms=+diffie-hellman-group1-sha1 optaplanner@filemgmt.jboss.org\"\n+                            // TODO: return back\n+                            //sh \"./build/release/upload_distribution.sh ${getProjectVersion()} $SSH_KEY_JBOSS_FILEMGMT\"\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+        stage('Upload Vehicle Routing documentation and distribution') {\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps {\n+                script {\n+                    dir(vehicleRoutingRepository) {\n+                        mavenCleanInstall(true)\n+                        withCredentials(bindings: [sshUserPrivateKey(credentialsId: 'optaplanner-filemgmt',\n+                                keyFileVariable: 'SSH_KEY_JBOSS_FILEMGMT')]) {\n+                            // For testing, simulate connection via SSH:\n+                            sh \"ssh -i $SSH_KEY_JBOSS_FILEMGMT -oKexAlgorithms=+diffie-hellman-group1-sha1 optaplanner@filemgmt.jboss.org\"\n+                            // TODO: return back", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a0fd8e1e3e941e51aab4702f29f4cde89e15ede"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzI0MjU1OnYy", "diffSide": "RIGHT", "path": "Jenkinsfile.promote", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxOTowNzoxMlrOH4bg2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxOTowNzoxMlrOH4bg2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkzMzA4Mg==", "bodyText": "TODO: return back after testing.", "url": "https://github.com/kiegroup/optaplanner/pull/1045#discussion_r528933082", "createdAt": "2020-11-23T19:07:12Z", "author": {"login": "rsynek"}, "path": "Jenkinsfile.promote", "diffHunk": "@@ -77,34 +81,126 @@ pipeline {\n             }\n         }\n \n+        stage('Setup global Maven arguments') {\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps{\n+                script {\n+                    if (isSpecificMavenConfig()) {\n+                        echo 'Setup Maven release config'\n+                        configFileProvider([configFile(fileId: maven.getSubmarineSettingsXmlId(), targetLocation: 'maven-settings.xml', variable: 'MAVEN_SETTINGS_FILE')]){\n+                            // expose the temp file via a global environment variable for other stages\n+                            env.GLOBAL_MAVEN_ARGS = \"-B -s ${MAVEN_SETTINGS_FILE} -Denforcer.skip=true\"\n+\n+                            sh \"sed -i 's|<repositories>|<repositories><repository><id>staging</id><name>Staging Repository</name><url>${params.MAVEN_DEPENDENCIES_REPOSITORY}</url><layout>default</layout><snapshots><enabled>true</enabled></snapshots><releases><enabled>true</enabled></releases></repository>|g' ${MAVEN_SETTINGS_FILE}\"\n+                            sh \"sed -i 's|<pluginRepositories>|<pluginRepositories><pluginRepository><id>staging</id><name>Staging Repository</name><url>${params.MAVEN_DEPENDENCIES_REPOSITORY}</url><layout>default</layout><snapshots><enabled>true</enabled></snapshots><releases><enabled>true</enabled></releases></pluginRepository>|g' ${MAVEN_SETTINGS_FILE}\"\n+                            sh \"sed -i 's|external:\\\\*|external:*,!staging|g' ${MAVEN_SETTINGS_FILE}\" // Done to allow Maven to download release artifacts from MAVEN_DEPENDENCIES_REPOSITORY\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n         stage('Merge OptaPlanner deploy PR and tag') {\n             when {\n                 expression { return isRelease() }\n             }\n             steps{\n                 script {\n-                    dir('optaplanner') {\n-                        checkoutRepo('optaplanner')\n-                        mergeAndPush('optaplanner', getDeployPrLink('optaplanner'))\n+                    dir(optaplannerRepository) {\n+                        checkoutRepo(optaplannerRepository)\n+                        mergeAndPush(getDeployPrLink(optaplannerRepository))\n+                        tagLatest()\n+                    }\n+                }\n+            }\n+        }\n+\n+        stage('Merge Optaweb Vehicle Routing deploy PR and tag') {\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps{\n+                script {\n+                    dir(vehicleRoutingRepository) {\n+                        checkoutRepo(vehicleRoutingRepository)\n+                        mergeAndPush(getDeployPrLink(vehicleRoutingRepository))\n+                        tagLatest()\n+                    }\n+                }\n+            }\n+        }\n+\n+        stage('Merge Optaweb Employee Rostering deploy PR and tag') {\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps{\n+                script {\n+                    dir(employeeRosteringRepository) {\n+                        checkoutRepo(employeeRosteringRepository)\n+                        mergeAndPush(getDeployPrLink(employeeRosteringRepository))\n                         tagLatest()\n                     }\n                 }\n             }\n         }\n \n-        stage('Upload documentation and distribution') {\n+        stage('Upload OptaPlanner documentation and distribution') {\n             when {\n                 expression { return isRelease() }\n             }\n             steps {\n                 script {\n-                    mavenCleanInstall('optaplanner', true, [], '-Dfull')\n-                    dir('optaplanner') {\n+                    dir(optaplannerRepository) {\n+                        mavenCleanInstall(true, [], '-Dfull')\n                         withCredentials(bindings: [sshUserPrivateKey(credentialsId: 'optaplanner-filemgmt',\n                                              keyFileVariable: 'SSH_KEY_JBOSS_FILEMGMT')]) {\n                             // For testing, simulate connection via SSH:\n-                            // sh \"ssh -i $SSH_KEY_JBOSS_FILEMGMT -oKexAlgorithms=+diffie-hellman-group1-sha1 optaplanner@filemgmt.jboss.org\"\n-                            sh \"./build/release/upload_distribution.sh ${getProjectVersion()} $SSH_KEY_JBOSS_FILEMGMT\"\n+                            sh \"ssh -i $SSH_KEY_JBOSS_FILEMGMT -oKexAlgorithms=+diffie-hellman-group1-sha1 optaplanner@filemgmt.jboss.org\"\n+                            // TODO: return back\n+                            //sh \"./build/release/upload_distribution.sh ${getProjectVersion()} $SSH_KEY_JBOSS_FILEMGMT\"\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+        stage('Upload Vehicle Routing documentation and distribution') {\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps {\n+                script {\n+                    dir(vehicleRoutingRepository) {\n+                        mavenCleanInstall(true)\n+                        withCredentials(bindings: [sshUserPrivateKey(credentialsId: 'optaplanner-filemgmt',\n+                                keyFileVariable: 'SSH_KEY_JBOSS_FILEMGMT')]) {\n+                            // For testing, simulate connection via SSH:\n+                            sh \"ssh -i $SSH_KEY_JBOSS_FILEMGMT -oKexAlgorithms=+diffie-hellman-group1-sha1 optaplanner@filemgmt.jboss.org\"\n+                            // TODO: return back\n+                            // sh \"./build/release/upload_distribution.sh ${getProjectVersion()} $SSH_KEY_JBOSS_FILEMGMT\"\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+        stage('Upload Employee Rostering documentation and distribution') {\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps {\n+                script {\n+                    dir(employeeRosteringRepository) {\n+                        mavenCleanInstall(true)\n+                        withCredentials(bindings: [sshUserPrivateKey(credentialsId: 'optaplanner-filemgmt',\n+                                keyFileVariable: 'SSH_KEY_JBOSS_FILEMGMT')]) {\n+                            // For testing, simulate connection via SSH:\n+                            sh \"ssh -i $SSH_KEY_JBOSS_FILEMGMT -oKexAlgorithms=+diffie-hellman-group1-sha1 optaplanner@filemgmt.jboss.org\"\n+                            // TODO: return back", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a0fd8e1e3e941e51aab4702f29f4cde89e15ede"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzI2MjE1OnYy", "diffSide": "RIGHT", "path": "Jenkinsfile.deploy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxOToxMjozNVrOH4bsSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNzo0MDowMVrOH4vd2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkzNjAwOQ==", "bodyText": "Changes in package-lock.json should not be ignored.", "url": "https://github.com/kiegroup/optaplanner/pull/1045#discussion_r528936009", "createdAt": "2020-11-23T19:12:35Z", "author": {"login": "yurloc"}, "path": "Jenkinsfile.deploy", "diffHunk": "@@ -263,6 +277,13 @@ void commitAndCreatePR(String repo) {\n     }\n }\n \n+void commitAndCreatePRIgnoringPackageLock(String repo) {\n+    dir(repo) {\n+        sh 'git checkout -- */package-lock.json'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a0fd8e1e3e941e51aab4702f29f4cde89e15ede"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI1OTk5NQ==", "bodyText": "Good point. We should commit the changes as these are exact versions we built with, right?", "url": "https://github.com/kiegroup/optaplanner/pull/1045#discussion_r529259995", "createdAt": "2020-11-24T07:40:01Z", "author": {"login": "rsynek"}, "path": "Jenkinsfile.deploy", "diffHunk": "@@ -263,6 +277,13 @@ void commitAndCreatePR(String repo) {\n     }\n }\n \n+void commitAndCreatePRIgnoringPackageLock(String repo) {\n+    dir(repo) {\n+        sh 'git checkout -- */package-lock.json'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkzNjAwOQ=="}, "originalCommit": {"oid": "6a0fd8e1e3e941e51aab4702f29f4cde89e15ede"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTM4MjQ3OnYy", "diffSide": "RIGHT", "path": "Jenkinsfile.promote", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwODowMDowN1rOH4wHkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwODowMDowN1rOH4wHkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI3MDY3Mw==", "bodyText": "I say this (ssh + script call) could be factorized as you are executing 3 times the same or ?\neven better as you are also using the creds part", "url": "https://github.com/kiegroup/optaplanner/pull/1045#discussion_r529270673", "createdAt": "2020-11-24T08:00:07Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.promote", "diffHunk": "@@ -77,34 +81,126 @@ pipeline {\n             }\n         }\n \n+        stage('Setup global Maven arguments') {\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps{\n+                script {\n+                    if (isSpecificMavenConfig()) {\n+                        echo 'Setup Maven release config'\n+                        configFileProvider([configFile(fileId: maven.getSubmarineSettingsXmlId(), targetLocation: 'maven-settings.xml', variable: 'MAVEN_SETTINGS_FILE')]){\n+                            // expose the temp file via a global environment variable for other stages\n+                            env.GLOBAL_MAVEN_ARGS = \"-B -s ${MAVEN_SETTINGS_FILE} -Denforcer.skip=true\"\n+\n+                            sh \"sed -i 's|<repositories>|<repositories><repository><id>staging</id><name>Staging Repository</name><url>${params.MAVEN_DEPENDENCIES_REPOSITORY}</url><layout>default</layout><snapshots><enabled>true</enabled></snapshots><releases><enabled>true</enabled></releases></repository>|g' ${MAVEN_SETTINGS_FILE}\"\n+                            sh \"sed -i 's|<pluginRepositories>|<pluginRepositories><pluginRepository><id>staging</id><name>Staging Repository</name><url>${params.MAVEN_DEPENDENCIES_REPOSITORY}</url><layout>default</layout><snapshots><enabled>true</enabled></snapshots><releases><enabled>true</enabled></releases></pluginRepository>|g' ${MAVEN_SETTINGS_FILE}\"\n+                            sh \"sed -i 's|external:\\\\*|external:*,!staging|g' ${MAVEN_SETTINGS_FILE}\" // Done to allow Maven to download release artifacts from MAVEN_DEPENDENCIES_REPOSITORY\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n         stage('Merge OptaPlanner deploy PR and tag') {\n             when {\n                 expression { return isRelease() }\n             }\n             steps{\n                 script {\n-                    dir('optaplanner') {\n-                        checkoutRepo('optaplanner')\n-                        mergeAndPush('optaplanner', getDeployPrLink('optaplanner'))\n+                    dir(optaplannerRepository) {\n+                        checkoutRepo(optaplannerRepository)\n+                        mergeAndPush(getDeployPrLink(optaplannerRepository))\n+                        tagLatest()\n+                    }\n+                }\n+            }\n+        }\n+\n+        stage('Merge Optaweb Vehicle Routing deploy PR and tag') {\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps{\n+                script {\n+                    dir(vehicleRoutingRepository) {\n+                        checkoutRepo(vehicleRoutingRepository)\n+                        mergeAndPush(getDeployPrLink(vehicleRoutingRepository))\n+                        tagLatest()\n+                    }\n+                }\n+            }\n+        }\n+\n+        stage('Merge Optaweb Employee Rostering deploy PR and tag') {\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps{\n+                script {\n+                    dir(employeeRosteringRepository) {\n+                        checkoutRepo(employeeRosteringRepository)\n+                        mergeAndPush(getDeployPrLink(employeeRosteringRepository))\n                         tagLatest()\n                     }\n                 }\n             }\n         }\n \n-        stage('Upload documentation and distribution') {\n+        stage('Upload OptaPlanner documentation and distribution') {\n             when {\n                 expression { return isRelease() }\n             }\n             steps {\n                 script {\n-                    mavenCleanInstall('optaplanner', true, [], '-Dfull')\n-                    dir('optaplanner') {\n+                    dir(optaplannerRepository) {\n+                        mavenCleanInstall(true, [], '-Dfull')\n                         withCredentials(bindings: [sshUserPrivateKey(credentialsId: 'optaplanner-filemgmt',\n                                              keyFileVariable: 'SSH_KEY_JBOSS_FILEMGMT')]) {\n                             // For testing, simulate connection via SSH:\n-                            // sh \"ssh -i $SSH_KEY_JBOSS_FILEMGMT -oKexAlgorithms=+diffie-hellman-group1-sha1 optaplanner@filemgmt.jboss.org\"\n-                            sh \"./build/release/upload_distribution.sh ${getProjectVersion()} $SSH_KEY_JBOSS_FILEMGMT\"\n+                            sh \"ssh -i $SSH_KEY_JBOSS_FILEMGMT -oKexAlgorithms=+diffie-hellman-group1-sha1 optaplanner@filemgmt.jboss.org\"\n+                            // TODO: return back\n+                            //sh \"./build/release/upload_distribution.sh ${getProjectVersion()} $SSH_KEY_JBOSS_FILEMGMT\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a0fd8e1e3e941e51aab4702f29f4cde89e15ede"}, "originalPosition": 102}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4163, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}