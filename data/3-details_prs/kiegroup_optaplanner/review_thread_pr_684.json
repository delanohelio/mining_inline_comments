{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0MzAxODM4", "number": 684, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMDozODo1NlrODffwjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMDo0MjoyMFrODff07g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MzUyNzgyOnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/ConstraintCollectors.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMDozODo1NlrOFpO2ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMDozODo1NlrOFpO2ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc3OTI0Mg==", "bodyText": "avoid future tense.\n-> \"that returns\"", "url": "https://github.com/kiegroup/optaplanner/pull/684#discussion_r378779242", "createdAt": "2020-02-13T10:38:56Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/ConstraintCollectors.java", "diffHunk": "@@ -554,4 +561,171 @@ private static Runnable innerCountDistinctLong(CountDistinctLongResultContainer\n     private ConstraintCollectors() {\n     }\n \n+    // ************************************************************************\n+    // toCollection\n+    // ************************************************************************\n+\n+    /**\n+     * Creates constraint collector that will return matched facts as a collection.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b16506510308d0ffb3826ecd7c33e37acea7ea39"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MzUzMDk5OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/ConstraintCollectors.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMDozOTo1MFrOFpO4cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNjo1MTozOFrOFpbjDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc3OTc2MA==", "bodyText": "Do we need toCollection? When in doubt leave it out. I 'd rather start with just toSet() and toList() until someone complains of the lack of toCollection(). Wdyt?", "url": "https://github.com/kiegroup/optaplanner/pull/684#discussion_r378779760", "createdAt": "2020-02-13T10:39:50Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/ConstraintCollectors.java", "diffHunk": "@@ -554,4 +561,171 @@ private static Runnable innerCountDistinctLong(CountDistinctLongResultContainer\n     private ConstraintCollectors() {\n     }\n \n+    // ************************************************************************\n+    // toCollection\n+    // ************************************************************************\n+\n+    /**\n+     * Creates constraint collector that will return matched facts as a collection.\n+     *\n+     * @param collectionFunction never null, provides new instance of the target collection with given initial capacity\n+     * @param <A> type of the matched fact, matching the type of elements in the resulting collection\n+     * @param <Result> type of the target collection\n+     * @return never null\n+     */\n+    public static <A, Result extends Collection<A>> UniConstraintCollector<A, ?, Result> toCollection(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b16506510308d0ffb3826ecd7c33e37acea7ea39"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc4MTAxMA==", "bodyText": "I consider it useful for when you want a stable iteration order, so you request toCollection(TreeSet::new).", "url": "https://github.com/kiegroup/optaplanner/pull/684#discussion_r378781010", "createdAt": "2020-02-13T10:42:11Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/ConstraintCollectors.java", "diffHunk": "@@ -554,4 +561,171 @@ private static Runnable innerCountDistinctLong(CountDistinctLongResultContainer\n     private ConstraintCollectors() {\n     }\n \n+    // ************************************************************************\n+    // toCollection\n+    // ************************************************************************\n+\n+    /**\n+     * Creates constraint collector that will return matched facts as a collection.\n+     *\n+     * @param collectionFunction never null, provides new instance of the target collection with given initial capacity\n+     * @param <A> type of the matched fact, matching the type of elements in the resulting collection\n+     * @param <Result> type of the target collection\n+     * @return never null\n+     */\n+    public static <A, Result extends Collection<A>> UniConstraintCollector<A, ?, Result> toCollection(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc3OTc2MA=="}, "originalCommit": {"oid": "b16506510308d0ffb3826ecd7c33e37acea7ea39"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk4NjYxNA==", "bodyText": "Agreed, or to pick your collection type. Keep it indeed.\nThis is the special case though. The toList() is the normal case. So toList() gets a full proper javadoc (they others can use \"As defined by\"). Wdyt?", "url": "https://github.com/kiegroup/optaplanner/pull/684#discussion_r378986614", "createdAt": "2020-02-13T16:50:37Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/ConstraintCollectors.java", "diffHunk": "@@ -554,4 +561,171 @@ private static Runnable innerCountDistinctLong(CountDistinctLongResultContainer\n     private ConstraintCollectors() {\n     }\n \n+    // ************************************************************************\n+    // toCollection\n+    // ************************************************************************\n+\n+    /**\n+     * Creates constraint collector that will return matched facts as a collection.\n+     *\n+     * @param collectionFunction never null, provides new instance of the target collection with given initial capacity\n+     * @param <A> type of the matched fact, matching the type of elements in the resulting collection\n+     * @param <Result> type of the target collection\n+     * @return never null\n+     */\n+    public static <A, Result extends Collection<A>> UniConstraintCollector<A, ?, Result> toCollection(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc3OTc2MA=="}, "originalCommit": {"oid": "b16506510308d0ffb3826ecd7c33e37acea7ea39"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk4NzI3OQ==", "bodyText": "So, I guess we want toCollection(constructor), but not toCollection()?", "url": "https://github.com/kiegroup/optaplanner/pull/684#discussion_r378987279", "createdAt": "2020-02-13T16:51:38Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/ConstraintCollectors.java", "diffHunk": "@@ -554,4 +561,171 @@ private static Runnable innerCountDistinctLong(CountDistinctLongResultContainer\n     private ConstraintCollectors() {\n     }\n \n+    // ************************************************************************\n+    // toCollection\n+    // ************************************************************************\n+\n+    /**\n+     * Creates constraint collector that will return matched facts as a collection.\n+     *\n+     * @param collectionFunction never null, provides new instance of the target collection with given initial capacity\n+     * @param <A> type of the matched fact, matching the type of elements in the resulting collection\n+     * @param <Result> type of the target collection\n+     * @return never null\n+     */\n+    public static <A, Result extends Collection<A>> UniConstraintCollector<A, ?, Result> toCollection(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc3OTc2MA=="}, "originalCommit": {"oid": "b16506510308d0ffb3826ecd7c33e37acea7ea39"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MzUzMjg0OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/ConstraintCollectors.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMDo0MDoyN1rOFpO5rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNjo0OToxOFrOFpbdUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc4MDA3Nw==", "bodyText": "javadocs :)\nEspecially for toList() as that's the main one.", "url": "https://github.com/kiegroup/optaplanner/pull/684#discussion_r378780077", "createdAt": "2020-02-13T10:40:27Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/ConstraintCollectors.java", "diffHunk": "@@ -554,4 +561,171 @@ private static Runnable innerCountDistinctLong(CountDistinctLongResultContainer\n     private ConstraintCollectors() {\n     }\n \n+    // ************************************************************************\n+    // toCollection\n+    // ************************************************************************\n+\n+    /**\n+     * Creates constraint collector that will return matched facts as a collection.\n+     *\n+     * @param collectionFunction never null, provides new instance of the target collection with given initial capacity\n+     * @param <A> type of the matched fact, matching the type of elements in the resulting collection\n+     * @param <Result> type of the target collection\n+     * @return never null\n+     */\n+    public static <A, Result extends Collection<A>> UniConstraintCollector<A, ?, Result> toCollection(\n+            IntFunction<Result> collectionFunction) {\n+        return toCollection(Function.identity(), collectionFunction);\n+    }\n+\n+    public static <A> UniConstraintCollector<A, ?, Set<A>> toSet() {\n+        return toSet(Function.identity());\n+    }\n+\n+    public static <A> UniConstraintCollector<A, ?, List<A>> toList() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b16506510308d0ffb3826ecd7c33e37acea7ea39"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc4MTIwNQ==", "bodyText": "Yeah, the Javadoc is on toCollection() now.", "url": "https://github.com/kiegroup/optaplanner/pull/684#discussion_r378781205", "createdAt": "2020-02-13T10:42:34Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/ConstraintCollectors.java", "diffHunk": "@@ -554,4 +561,171 @@ private static Runnable innerCountDistinctLong(CountDistinctLongResultContainer\n     private ConstraintCollectors() {\n     }\n \n+    // ************************************************************************\n+    // toCollection\n+    // ************************************************************************\n+\n+    /**\n+     * Creates constraint collector that will return matched facts as a collection.\n+     *\n+     * @param collectionFunction never null, provides new instance of the target collection with given initial capacity\n+     * @param <A> type of the matched fact, matching the type of elements in the resulting collection\n+     * @param <Result> type of the target collection\n+     * @return never null\n+     */\n+    public static <A, Result extends Collection<A>> UniConstraintCollector<A, ?, Result> toCollection(\n+            IntFunction<Result> collectionFunction) {\n+        return toCollection(Function.identity(), collectionFunction);\n+    }\n+\n+    public static <A> UniConstraintCollector<A, ?, Set<A>> toSet() {\n+        return toSet(Function.identity());\n+    }\n+\n+    public static <A> UniConstraintCollector<A, ?, List<A>> toList() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc4MDA3Nw=="}, "originalCommit": {"oid": "b16506510308d0ffb3826ecd7c33e37acea7ea39"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk4NTgxMQ==", "bodyText": "Add at least a \"As defined by ...\"", "url": "https://github.com/kiegroup/optaplanner/pull/684#discussion_r378985811", "createdAt": "2020-02-13T16:49:18Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/ConstraintCollectors.java", "diffHunk": "@@ -554,4 +561,171 @@ private static Runnable innerCountDistinctLong(CountDistinctLongResultContainer\n     private ConstraintCollectors() {\n     }\n \n+    // ************************************************************************\n+    // toCollection\n+    // ************************************************************************\n+\n+    /**\n+     * Creates constraint collector that will return matched facts as a collection.\n+     *\n+     * @param collectionFunction never null, provides new instance of the target collection with given initial capacity\n+     * @param <A> type of the matched fact, matching the type of elements in the resulting collection\n+     * @param <Result> type of the target collection\n+     * @return never null\n+     */\n+    public static <A, Result extends Collection<A>> UniConstraintCollector<A, ?, Result> toCollection(\n+            IntFunction<Result> collectionFunction) {\n+        return toCollection(Function.identity(), collectionFunction);\n+    }\n+\n+    public static <A> UniConstraintCollector<A, ?, Set<A>> toSet() {\n+        return toSet(Function.identity());\n+    }\n+\n+    public static <A> UniConstraintCollector<A, ?, List<A>> toList() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc4MDA3Nw=="}, "originalCommit": {"oid": "b16506510308d0ffb3826ecd7c33e37acea7ea39"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MzUzOTAyOnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/ConstraintCollectors.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMDo0MjoyMFrOFpO9pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNjo0ODo0NlrOFpbb_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc4MTA5Mw==", "bodyText": "Thinking aloud: The method name doesn't indicate it's used as the undo operation.\nHow about calling it to undoToCollection?", "url": "https://github.com/kiegroup/optaplanner/pull/684#discussion_r378781093", "createdAt": "2020-02-13T10:42:20Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/ConstraintCollectors.java", "diffHunk": "@@ -554,4 +561,171 @@ private static Runnable innerCountDistinctLong(CountDistinctLongResultContainer\n     private ConstraintCollectors() {\n     }\n \n+    // ************************************************************************\n+    // toCollection\n+    // ************************************************************************\n+\n+    /**\n+     * Creates constraint collector that will return matched facts as a collection.\n+     *\n+     * @param collectionFunction never null, provides new instance of the target collection with given initial capacity\n+     * @param <A> type of the matched fact, matching the type of elements in the resulting collection\n+     * @param <Result> type of the target collection\n+     * @return never null\n+     */\n+    public static <A, Result extends Collection<A>> UniConstraintCollector<A, ?, Result> toCollection(\n+            IntFunction<Result> collectionFunction) {\n+        return toCollection(Function.identity(), collectionFunction);\n+    }\n+\n+    public static <A> UniConstraintCollector<A, ?, Set<A>> toSet() {\n+        return toSet(Function.identity());\n+    }\n+\n+    public static <A> UniConstraintCollector<A, ?, List<A>> toList() {\n+        return toList(Function.identity());\n+    }\n+\n+    /**\n+     * Creates constraint collector that will return a collection of the given type.\n+     *\n+     * @param mappingFunction never null, converts matched facts to elements of the resulting collection\n+     * @param collectionFunction never null, provides new instance of the target collection with given initial capacity\n+     * @param <A> type of the matched fact\n+     * @param <Mapped> type of elements in the resulting collection\n+     * @param <Result> type of the resulting collection\n+     * @return never null\n+     */\n+    public static <A, Mapped, Result extends Collection<Mapped>> UniConstraintCollector<A, ?, Result> toCollection(\n+            Function<A, Mapped> mappingFunction, IntFunction<Result> collectionFunction) {\n+        return new DefaultUniConstraintCollector<>(\n+                (Supplier<List<Mapped>>) ArrayList::new,\n+                (resultContainer, a) -> {\n+                    Mapped mapped = mappingFunction.apply(a);\n+                    resultContainer.add(mapped);\n+                    return () -> resultContainer.remove(mapped);\n+                },\n+                resultContainer -> finishToCollection(collectionFunction, resultContainer));\n+    }\n+\n+    private static <Mapped, Container extends List<Mapped>, Result extends Collection<Mapped>> Result\n+    finishToCollection(IntFunction<Result> collectionFunction, Container resultContainer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b16506510308d0ffb3826ecd7c33e37acea7ea39"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc4MTcxMw==", "bodyText": "This is not the undo. This is the finisher, which takes the incremental container and turns it into a final immutable product.", "url": "https://github.com/kiegroup/optaplanner/pull/684#discussion_r378781713", "createdAt": "2020-02-13T10:43:30Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/ConstraintCollectors.java", "diffHunk": "@@ -554,4 +561,171 @@ private static Runnable innerCountDistinctLong(CountDistinctLongResultContainer\n     private ConstraintCollectors() {\n     }\n \n+    // ************************************************************************\n+    // toCollection\n+    // ************************************************************************\n+\n+    /**\n+     * Creates constraint collector that will return matched facts as a collection.\n+     *\n+     * @param collectionFunction never null, provides new instance of the target collection with given initial capacity\n+     * @param <A> type of the matched fact, matching the type of elements in the resulting collection\n+     * @param <Result> type of the target collection\n+     * @return never null\n+     */\n+    public static <A, Result extends Collection<A>> UniConstraintCollector<A, ?, Result> toCollection(\n+            IntFunction<Result> collectionFunction) {\n+        return toCollection(Function.identity(), collectionFunction);\n+    }\n+\n+    public static <A> UniConstraintCollector<A, ?, Set<A>> toSet() {\n+        return toSet(Function.identity());\n+    }\n+\n+    public static <A> UniConstraintCollector<A, ?, List<A>> toList() {\n+        return toList(Function.identity());\n+    }\n+\n+    /**\n+     * Creates constraint collector that will return a collection of the given type.\n+     *\n+     * @param mappingFunction never null, converts matched facts to elements of the resulting collection\n+     * @param collectionFunction never null, provides new instance of the target collection with given initial capacity\n+     * @param <A> type of the matched fact\n+     * @param <Mapped> type of elements in the resulting collection\n+     * @param <Result> type of the resulting collection\n+     * @return never null\n+     */\n+    public static <A, Mapped, Result extends Collection<Mapped>> UniConstraintCollector<A, ?, Result> toCollection(\n+            Function<A, Mapped> mappingFunction, IntFunction<Result> collectionFunction) {\n+        return new DefaultUniConstraintCollector<>(\n+                (Supplier<List<Mapped>>) ArrayList::new,\n+                (resultContainer, a) -> {\n+                    Mapped mapped = mappingFunction.apply(a);\n+                    resultContainer.add(mapped);\n+                    return () -> resultContainer.remove(mapped);\n+                },\n+                resultContainer -> finishToCollection(collectionFunction, resultContainer));\n+    }\n+\n+    private static <Mapped, Container extends List<Mapped>, Result extends Collection<Mapped>> Result\n+    finishToCollection(IntFunction<Result> collectionFunction, Container resultContainer) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc4MTA5Mw=="}, "originalCommit": {"oid": "b16506510308d0ffb3826ecd7c33e37acea7ea39"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk4NTQ2OQ==", "bodyText": "Agreed, then the name is correct. I interpreted \"finish\" as last part that is common, not as finisher.\nMaybe toCollectionFinisher? Although name is fine now.", "url": "https://github.com/kiegroup/optaplanner/pull/684#discussion_r378985469", "createdAt": "2020-02-13T16:48:46Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/ConstraintCollectors.java", "diffHunk": "@@ -554,4 +561,171 @@ private static Runnable innerCountDistinctLong(CountDistinctLongResultContainer\n     private ConstraintCollectors() {\n     }\n \n+    // ************************************************************************\n+    // toCollection\n+    // ************************************************************************\n+\n+    /**\n+     * Creates constraint collector that will return matched facts as a collection.\n+     *\n+     * @param collectionFunction never null, provides new instance of the target collection with given initial capacity\n+     * @param <A> type of the matched fact, matching the type of elements in the resulting collection\n+     * @param <Result> type of the target collection\n+     * @return never null\n+     */\n+    public static <A, Result extends Collection<A>> UniConstraintCollector<A, ?, Result> toCollection(\n+            IntFunction<Result> collectionFunction) {\n+        return toCollection(Function.identity(), collectionFunction);\n+    }\n+\n+    public static <A> UniConstraintCollector<A, ?, Set<A>> toSet() {\n+        return toSet(Function.identity());\n+    }\n+\n+    public static <A> UniConstraintCollector<A, ?, List<A>> toList() {\n+        return toList(Function.identity());\n+    }\n+\n+    /**\n+     * Creates constraint collector that will return a collection of the given type.\n+     *\n+     * @param mappingFunction never null, converts matched facts to elements of the resulting collection\n+     * @param collectionFunction never null, provides new instance of the target collection with given initial capacity\n+     * @param <A> type of the matched fact\n+     * @param <Mapped> type of elements in the resulting collection\n+     * @param <Result> type of the resulting collection\n+     * @return never null\n+     */\n+    public static <A, Mapped, Result extends Collection<Mapped>> UniConstraintCollector<A, ?, Result> toCollection(\n+            Function<A, Mapped> mappingFunction, IntFunction<Result> collectionFunction) {\n+        return new DefaultUniConstraintCollector<>(\n+                (Supplier<List<Mapped>>) ArrayList::new,\n+                (resultContainer, a) -> {\n+                    Mapped mapped = mappingFunction.apply(a);\n+                    resultContainer.add(mapped);\n+                    return () -> resultContainer.remove(mapped);\n+                },\n+                resultContainer -> finishToCollection(collectionFunction, resultContainer));\n+    }\n+\n+    private static <Mapped, Container extends List<Mapped>, Result extends Collection<Mapped>> Result\n+    finishToCollection(IntFunction<Result> collectionFunction, Container resultContainer) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc4MTA5Mw=="}, "originalCommit": {"oid": "b16506510308d0ffb3826ecd7c33e37acea7ea39"}, "originalPosition": 74}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4620, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}