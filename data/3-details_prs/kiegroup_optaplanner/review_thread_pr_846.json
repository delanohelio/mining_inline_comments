{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0MjQ4MjI5", "number": 846, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMDozNDozOFrOEQkDvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMDozNDozOFrOEQkDvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1ODAzNDU0OnYy", "diffSide": "LEFT", "path": "optaplanner-core/src/test/java/org/optaplanner/core/api/score/buildin/bendable/BendableScoreTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMDozNDozOFrOG0yESA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMDo0MTowNVrOG0yRSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk5OTQzMg==", "bodyText": "No replacement for the test?", "url": "https://github.com/kiegroup/optaplanner/pull/846#discussion_r457999432", "createdAt": "2020-07-21T10:34:38Z", "author": {"login": "yurloc"}, "path": "optaplanner-core/src/test/java/org/optaplanner/core/api/score/buildin/bendable/BendableScoreTest.java", "diffHunk": "@@ -298,25 +297,4 @@ public void compareToHHSSS() {\n                 scoreDefinitionHHSSS.createScore(1, Integer.MIN_VALUE, -20, 0, 0),\n                 scoreDefinitionHHSSS.createScore(1, -20, Integer.MIN_VALUE, 0, 0));\n     }\n-\n-    @Test\n-    public void serializeAndDeserialize() {\n-        PlannerTestUtils.serializeAndDeserializeWithXStream(\n-                scoreDefinitionHSS.createScore(-12, 3400, -56),\n-                output -> {\n-                    assertThat(output.getInitScore()).isEqualTo(0);\n-                    assertThat(output.getHardScore(0)).isEqualTo(-12);\n-                    assertThat(output.getSoftScore(0)).isEqualTo(3400);\n-                    assertThat(output.getSoftScore(1)).isEqualTo(-56);\n-                });\n-        PlannerTestUtils.serializeAndDeserializeWithXStream(\n-                scoreDefinitionHSS.createScoreUninitialized(-7, -12, 3400, -56),\n-                output -> {\n-                    assertThat(output.getInitScore()).isEqualTo(-7);\n-                    assertThat(output.getHardScore(0)).isEqualTo(-12);\n-                    assertThat(output.getSoftScore(0)).isEqualTo(3400);\n-                    assertThat(output.getSoftScore(1)).isEqualTo(-56);\n-                });\n-    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0283fc0ae00d2052815b25d6cc916cdb203d9e57"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAwMjc2Mw==", "bodyText": "https://github.com/kiegroup/optaplanner/blob/master/optaplanner-persistence/optaplanner-persistence-xstream/src/test/java/org/optaplanner/persistence/xstream/api/score/buildin/bendable/BendableScoreXStreamConverterTest.java\nBoth the removed tests and tests located in optaplanner-persistence-xstream verify that individual score types can be (de)serialized via XStream correctly.", "url": "https://github.com/kiegroup/optaplanner/pull/846#discussion_r458002763", "createdAt": "2020-07-21T10:41:05Z", "author": {"login": "rsynek"}, "path": "optaplanner-core/src/test/java/org/optaplanner/core/api/score/buildin/bendable/BendableScoreTest.java", "diffHunk": "@@ -298,25 +297,4 @@ public void compareToHHSSS() {\n                 scoreDefinitionHHSSS.createScore(1, Integer.MIN_VALUE, -20, 0, 0),\n                 scoreDefinitionHHSSS.createScore(1, -20, Integer.MIN_VALUE, 0, 0));\n     }\n-\n-    @Test\n-    public void serializeAndDeserialize() {\n-        PlannerTestUtils.serializeAndDeserializeWithXStream(\n-                scoreDefinitionHSS.createScore(-12, 3400, -56),\n-                output -> {\n-                    assertThat(output.getInitScore()).isEqualTo(0);\n-                    assertThat(output.getHardScore(0)).isEqualTo(-12);\n-                    assertThat(output.getSoftScore(0)).isEqualTo(3400);\n-                    assertThat(output.getSoftScore(1)).isEqualTo(-56);\n-                });\n-        PlannerTestUtils.serializeAndDeserializeWithXStream(\n-                scoreDefinitionHSS.createScoreUninitialized(-7, -12, 3400, -56),\n-                output -> {\n-                    assertThat(output.getInitScore()).isEqualTo(-7);\n-                    assertThat(output.getHardScore(0)).isEqualTo(-12);\n-                    assertThat(output.getSoftScore(0)).isEqualTo(3400);\n-                    assertThat(output.getSoftScore(1)).isEqualTo(-56);\n-                });\n-    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk5OTQzMg=="}, "originalCommit": {"oid": "0283fc0ae00d2052815b25d6cc916cdb203d9e57"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4364, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}