{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwOTcwOTcx", "number": 893, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxNjozMzozNFrOEbVR8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxNjo0Njo0NlrOEbVWCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MDk1NjY2OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/AbstractFromConfigFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxNjozMzozNFrOHFOSWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxNjozMzozNFrOHFOSWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIzOTAwMg==", "bodyText": "Please merge the assignment with the declaration.", "url": "https://github.com/kiegroup/optaplanner/pull/893#discussion_r475239002", "createdAt": "2020-08-23T16:33:34Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/AbstractFromConfigFactory.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import org.optaplanner.core.api.domain.solution.PlanningSolution;\n+import org.optaplanner.core.config.AbstractConfig;\n+import org.optaplanner.core.impl.domain.entity.descriptor.EntityDescriptor;\n+import org.optaplanner.core.impl.domain.solution.descriptor.SolutionDescriptor;\n+import org.optaplanner.core.impl.domain.variable.descriptor.GenuineVariableDescriptor;\n+\n+public abstract class AbstractFromConfigFactory<Config_ extends AbstractConfig<Config_>> {\n+\n+    protected final Config_ config;\n+\n+    public AbstractFromConfigFactory(Config_ config) {\n+        this.config = config;\n+    }\n+\n+    protected EntityDescriptor deduceEntityDescriptor(SolutionDescriptor solutionDescriptor, Class<?> entityClass) {\n+        EntityDescriptor entityDescriptor;\n+        entityDescriptor = solutionDescriptor.getEntityDescriptorStrict(Objects.requireNonNull(entityClass));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53325e9463ef79cb7cc6a0331aed08a452937964"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MDk1NzIxOnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/AbstractFromConfigFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxNjozNDoxNVrOHFOSoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxNjozNDoxNVrOHFOSoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIzOTA3Mg==", "bodyText": "Dtto.", "url": "https://github.com/kiegroup/optaplanner/pull/893#discussion_r475239072", "createdAt": "2020-08-23T16:34:15Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/AbstractFromConfigFactory.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import org.optaplanner.core.api.domain.solution.PlanningSolution;\n+import org.optaplanner.core.config.AbstractConfig;\n+import org.optaplanner.core.impl.domain.entity.descriptor.EntityDescriptor;\n+import org.optaplanner.core.impl.domain.solution.descriptor.SolutionDescriptor;\n+import org.optaplanner.core.impl.domain.variable.descriptor.GenuineVariableDescriptor;\n+\n+public abstract class AbstractFromConfigFactory<Config_ extends AbstractConfig<Config_>> {\n+\n+    protected final Config_ config;\n+\n+    public AbstractFromConfigFactory(Config_ config) {\n+        this.config = config;\n+    }\n+\n+    protected EntityDescriptor deduceEntityDescriptor(SolutionDescriptor solutionDescriptor, Class<?> entityClass) {\n+        EntityDescriptor entityDescriptor;\n+        entityDescriptor = solutionDescriptor.getEntityDescriptorStrict(Objects.requireNonNull(entityClass));\n+        if (entityDescriptor == null) {\n+            throw new IllegalArgumentException(\"The config (\" + config\n+                    + \") has an entityClass (\" + entityClass + \") that is not a known planning entity.\\n\"\n+                    + \"Check your solver configuration. If that class (\" + entityClass.getSimpleName()\n+                    + \") is not in the entityClassSet (\" + solutionDescriptor.getEntityClassSet()\n+                    + \"), check your \" + PlanningSolution.class.getSimpleName()\n+                    + \" implementation's annotated methods too.\");\n+        }\n+        return entityDescriptor;\n+    }\n+\n+    protected EntityDescriptor deduceEntityDescriptor(SolutionDescriptor solutionDescriptor) {\n+        Collection<EntityDescriptor> entityDescriptors = solutionDescriptor.getGenuineEntityDescriptors();\n+        if (entityDescriptors.size() != 1) {\n+            throw new IllegalArgumentException(\"The config (\" + config\n+                    + \") has no entityClass configured and because there are multiple in the entityClassSet (\"\n+                    + solutionDescriptor.getEntityClassSet()\n+                    + \"), it cannot be deduced automatically.\");\n+        }\n+        return entityDescriptors.iterator().next();\n+    }\n+\n+    protected GenuineVariableDescriptor deduceVariableDescriptor(EntityDescriptor entityDescriptor, String variableName) {\n+        GenuineVariableDescriptor variableDescriptor;\n+        variableDescriptor = entityDescriptor.getGenuineVariableDescriptor(Objects.requireNonNull(variableName));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53325e9463ef79cb7cc6a0331aed08a452937964"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MDk2MTc3OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/AbstractFromConfigFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxNjo0MDoxMlrOHFOU4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNjo0MDo0MFrOHFWd2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIzOTY0OQ==", "bodyText": "This could be a nice stream.\nreturn variableNameIncludeList.stream()\n    .map(n -> variableDescriptorList.stream()\n        .filter(d -> d.gerVariableName().equals(n))\n        .findFirst()\n        .orElseThrow(...))\n    .collect(Collectors.toList());\n\nIn my opinion, this reads better as you don't need to mentally track the state of found.", "url": "https://github.com/kiegroup/optaplanner/pull/893#discussion_r475239649", "createdAt": "2020-08-23T16:40:12Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/AbstractFromConfigFactory.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import org.optaplanner.core.api.domain.solution.PlanningSolution;\n+import org.optaplanner.core.config.AbstractConfig;\n+import org.optaplanner.core.impl.domain.entity.descriptor.EntityDescriptor;\n+import org.optaplanner.core.impl.domain.solution.descriptor.SolutionDescriptor;\n+import org.optaplanner.core.impl.domain.variable.descriptor.GenuineVariableDescriptor;\n+\n+public abstract class AbstractFromConfigFactory<Config_ extends AbstractConfig<Config_>> {\n+\n+    protected final Config_ config;\n+\n+    public AbstractFromConfigFactory(Config_ config) {\n+        this.config = config;\n+    }\n+\n+    protected EntityDescriptor deduceEntityDescriptor(SolutionDescriptor solutionDescriptor, Class<?> entityClass) {\n+        EntityDescriptor entityDescriptor;\n+        entityDescriptor = solutionDescriptor.getEntityDescriptorStrict(Objects.requireNonNull(entityClass));\n+        if (entityDescriptor == null) {\n+            throw new IllegalArgumentException(\"The config (\" + config\n+                    + \") has an entityClass (\" + entityClass + \") that is not a known planning entity.\\n\"\n+                    + \"Check your solver configuration. If that class (\" + entityClass.getSimpleName()\n+                    + \") is not in the entityClassSet (\" + solutionDescriptor.getEntityClassSet()\n+                    + \"), check your \" + PlanningSolution.class.getSimpleName()\n+                    + \" implementation's annotated methods too.\");\n+        }\n+        return entityDescriptor;\n+    }\n+\n+    protected EntityDescriptor deduceEntityDescriptor(SolutionDescriptor solutionDescriptor) {\n+        Collection<EntityDescriptor> entityDescriptors = solutionDescriptor.getGenuineEntityDescriptors();\n+        if (entityDescriptors.size() != 1) {\n+            throw new IllegalArgumentException(\"The config (\" + config\n+                    + \") has no entityClass configured and because there are multiple in the entityClassSet (\"\n+                    + solutionDescriptor.getEntityClassSet()\n+                    + \"), it cannot be deduced automatically.\");\n+        }\n+        return entityDescriptors.iterator().next();\n+    }\n+\n+    protected GenuineVariableDescriptor deduceVariableDescriptor(EntityDescriptor entityDescriptor, String variableName) {\n+        GenuineVariableDescriptor variableDescriptor;\n+        variableDescriptor = entityDescriptor.getGenuineVariableDescriptor(Objects.requireNonNull(variableName));\n+        if (variableDescriptor == null) {\n+            throw new IllegalArgumentException(\"The config (\" + config\n+                    + \") has a variableName (\" + variableName\n+                    + \") which is not a valid planning variable on entityClass (\"\n+                    + entityDescriptor.getEntityClass() + \").\\n\"\n+                    + entityDescriptor.buildInvalidVariableNameExceptionMessage(variableName));\n+        }\n+        return variableDescriptor;\n+    }\n+\n+    protected GenuineVariableDescriptor deduceVariableDescriptor(EntityDescriptor entityDescriptor) {\n+        Collection<GenuineVariableDescriptor> variableDescriptors = entityDescriptor.getGenuineVariableDescriptors();\n+        if (variableDescriptors.size() != 1) {\n+            throw new IllegalArgumentException(\"The config (\" + config\n+                    + \") has no configured variableName for entityClass (\" + entityDescriptor.getEntityClass()\n+                    + \") and because there are multiple variableNames (\"\n+                    + entityDescriptor.getGenuineVariableNameSet()\n+                    + \"), it cannot be deduced automatically.\");\n+        }\n+        return variableDescriptors.iterator().next();\n+    }\n+\n+    protected List<GenuineVariableDescriptor> deduceVariableDescriptorList(EntityDescriptor entityDescriptor,\n+            List<String> variableNameIncludeList) {\n+        Objects.requireNonNull(entityDescriptor);\n+        List<GenuineVariableDescriptor> variableDescriptorList = entityDescriptor.getGenuineVariableDescriptorList();\n+        if (variableNameIncludeList == null) {\n+            return variableDescriptorList;\n+        }\n+        List<GenuineVariableDescriptor> resolvedVariableDescriptorList =\n+                new ArrayList<>(variableDescriptorList.size());\n+        for (String variableNameInclude : variableNameIncludeList) {\n+            boolean found = false;\n+            for (GenuineVariableDescriptor variableDescriptor : variableDescriptorList) {\n+                if (variableDescriptor.getVariableName().equals(variableNameInclude)) {\n+                    resolvedVariableDescriptorList.add(variableDescriptor);\n+                    found = true;\n+                    break;\n+                }\n+            }\n+            if (!found) {\n+                throw new IllegalArgumentException(\"The config (\" + this\n+                        + \") has a variableNameInclude (\" + variableNameInclude\n+                        + \") which does not exist in the entity (\" + entityDescriptor.getEntityClass()\n+                        + \")'s variableDescriptorList (\" + variableDescriptorList + \").\");\n+            }\n+        }\n+        return resolvedVariableDescriptorList;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53325e9463ef79cb7cc6a0331aed08a452937964"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM3MzAxNw==", "bodyText": "I didn't touch the existing code if I wasn't changing it. That said, if there is an opportunity to improve it, I will take a look at this one and other suggestions you made.", "url": "https://github.com/kiegroup/optaplanner/pull/893#discussion_r475373017", "createdAt": "2020-08-24T06:40:40Z", "author": {"login": "rsynek"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/AbstractFromConfigFactory.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import org.optaplanner.core.api.domain.solution.PlanningSolution;\n+import org.optaplanner.core.config.AbstractConfig;\n+import org.optaplanner.core.impl.domain.entity.descriptor.EntityDescriptor;\n+import org.optaplanner.core.impl.domain.solution.descriptor.SolutionDescriptor;\n+import org.optaplanner.core.impl.domain.variable.descriptor.GenuineVariableDescriptor;\n+\n+public abstract class AbstractFromConfigFactory<Config_ extends AbstractConfig<Config_>> {\n+\n+    protected final Config_ config;\n+\n+    public AbstractFromConfigFactory(Config_ config) {\n+        this.config = config;\n+    }\n+\n+    protected EntityDescriptor deduceEntityDescriptor(SolutionDescriptor solutionDescriptor, Class<?> entityClass) {\n+        EntityDescriptor entityDescriptor;\n+        entityDescriptor = solutionDescriptor.getEntityDescriptorStrict(Objects.requireNonNull(entityClass));\n+        if (entityDescriptor == null) {\n+            throw new IllegalArgumentException(\"The config (\" + config\n+                    + \") has an entityClass (\" + entityClass + \") that is not a known planning entity.\\n\"\n+                    + \"Check your solver configuration. If that class (\" + entityClass.getSimpleName()\n+                    + \") is not in the entityClassSet (\" + solutionDescriptor.getEntityClassSet()\n+                    + \"), check your \" + PlanningSolution.class.getSimpleName()\n+                    + \" implementation's annotated methods too.\");\n+        }\n+        return entityDescriptor;\n+    }\n+\n+    protected EntityDescriptor deduceEntityDescriptor(SolutionDescriptor solutionDescriptor) {\n+        Collection<EntityDescriptor> entityDescriptors = solutionDescriptor.getGenuineEntityDescriptors();\n+        if (entityDescriptors.size() != 1) {\n+            throw new IllegalArgumentException(\"The config (\" + config\n+                    + \") has no entityClass configured and because there are multiple in the entityClassSet (\"\n+                    + solutionDescriptor.getEntityClassSet()\n+                    + \"), it cannot be deduced automatically.\");\n+        }\n+        return entityDescriptors.iterator().next();\n+    }\n+\n+    protected GenuineVariableDescriptor deduceVariableDescriptor(EntityDescriptor entityDescriptor, String variableName) {\n+        GenuineVariableDescriptor variableDescriptor;\n+        variableDescriptor = entityDescriptor.getGenuineVariableDescriptor(Objects.requireNonNull(variableName));\n+        if (variableDescriptor == null) {\n+            throw new IllegalArgumentException(\"The config (\" + config\n+                    + \") has a variableName (\" + variableName\n+                    + \") which is not a valid planning variable on entityClass (\"\n+                    + entityDescriptor.getEntityClass() + \").\\n\"\n+                    + entityDescriptor.buildInvalidVariableNameExceptionMessage(variableName));\n+        }\n+        return variableDescriptor;\n+    }\n+\n+    protected GenuineVariableDescriptor deduceVariableDescriptor(EntityDescriptor entityDescriptor) {\n+        Collection<GenuineVariableDescriptor> variableDescriptors = entityDescriptor.getGenuineVariableDescriptors();\n+        if (variableDescriptors.size() != 1) {\n+            throw new IllegalArgumentException(\"The config (\" + config\n+                    + \") has no configured variableName for entityClass (\" + entityDescriptor.getEntityClass()\n+                    + \") and because there are multiple variableNames (\"\n+                    + entityDescriptor.getGenuineVariableNameSet()\n+                    + \"), it cannot be deduced automatically.\");\n+        }\n+        return variableDescriptors.iterator().next();\n+    }\n+\n+    protected List<GenuineVariableDescriptor> deduceVariableDescriptorList(EntityDescriptor entityDescriptor,\n+            List<String> variableNameIncludeList) {\n+        Objects.requireNonNull(entityDescriptor);\n+        List<GenuineVariableDescriptor> variableDescriptorList = entityDescriptor.getGenuineVariableDescriptorList();\n+        if (variableNameIncludeList == null) {\n+            return variableDescriptorList;\n+        }\n+        List<GenuineVariableDescriptor> resolvedVariableDescriptorList =\n+                new ArrayList<>(variableDescriptorList.size());\n+        for (String variableNameInclude : variableNameIncludeList) {\n+            boolean found = false;\n+            for (GenuineVariableDescriptor variableDescriptor : variableDescriptorList) {\n+                if (variableDescriptor.getVariableName().equals(variableNameInclude)) {\n+                    resolvedVariableDescriptorList.add(variableDescriptor);\n+                    found = true;\n+                    break;\n+                }\n+            }\n+            if (!found) {\n+                throw new IllegalArgumentException(\"The config (\" + this\n+                        + \") has a variableNameInclude (\" + variableNameInclude\n+                        + \") which does not exist in the entity (\" + entityDescriptor.getEntityClass()\n+                        + \")'s variableDescriptorList (\" + variableDescriptorList + \").\");\n+            }\n+        }\n+        return resolvedVariableDescriptorList;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIzOTY0OQ=="}, "originalCommit": {"oid": "53325e9463ef79cb7cc6a0331aed08a452937964"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MDk2NDMwOnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/heuristic/selector/common/nearby/NearbyRandomFactory.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxNjo0MzoyNlrOHFOWIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMDowNDo1NVrOHFdgWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIzOTk2OA==", "bodyText": "How about:\nboolean distributionEnabled = false;\nswitch (nearbySelectionConfig.getNearbySelectionDistributionType()) {\n     case LINEAR_DISTRIBUTION:\n          distributionEnabled = nearbySelectionConfig.getLinearDistributionSizeMaximum() != null;\n          break;\n     ...\n}\n\nLess repetition, and in my opinion more clarity.", "url": "https://github.com/kiegroup/optaplanner/pull/893#discussion_r475239968", "createdAt": "2020-08-23T16:43:26Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/heuristic/selector/common/nearby/NearbyRandomFactory.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.heuristic.selector.common.nearby;\n+\n+import static org.apache.commons.lang3.ObjectUtils.defaultIfNull;\n+\n+import org.optaplanner.core.config.heuristic.selector.common.nearby.NearbySelectionConfig;\n+import org.optaplanner.core.config.heuristic.selector.common.nearby.NearbySelectionDistributionType;\n+\n+public class NearbyRandomFactory {\n+\n+    public static NearbyRandomFactory create(NearbySelectionConfig nearbySelectionConfig) {\n+        return new NearbyRandomFactory(nearbySelectionConfig);\n+    }\n+\n+    private final NearbySelectionConfig nearbySelectionConfig;\n+\n+    public NearbyRandomFactory(NearbySelectionConfig nearbySelectionConfig) {\n+        this.nearbySelectionConfig = nearbySelectionConfig;\n+    }\n+\n+    public NearbyRandom buildNearbyRandom(boolean randomSelection) {\n+        boolean blockDistributionEnabled =\n+                nearbySelectionConfig.getNearbySelectionDistributionType() == NearbySelectionDistributionType.BLOCK_DISTRIBUTION\n+                        || nearbySelectionConfig.getBlockDistributionSizeMinimum() != null\n+                        || nearbySelectionConfig.getBlockDistributionSizeMaximum() != null\n+                        || nearbySelectionConfig.getBlockDistributionSizeRatio() != null\n+                        || nearbySelectionConfig.getBlockDistributionUniformDistributionProbability() != null;\n+        boolean linearDistributionEnabled = nearbySelectionConfig\n+                .getNearbySelectionDistributionType() == NearbySelectionDistributionType.LINEAR_DISTRIBUTION\n+                || nearbySelectionConfig.getLinearDistributionSizeMaximum() != null;\n+        boolean parabolicDistributionEnabled = nearbySelectionConfig\n+                .getNearbySelectionDistributionType() == NearbySelectionDistributionType.PARABOLIC_DISTRIBUTION\n+                || nearbySelectionConfig.getParabolicDistributionSizeMaximum() != null;\n+        boolean betaDistributionEnabled =\n+                nearbySelectionConfig.getNearbySelectionDistributionType() == NearbySelectionDistributionType.BETA_DISTRIBUTION\n+                        || nearbySelectionConfig.getBetaDistributionAlpha() != null\n+                        || nearbySelectionConfig.getBetaDistributionBeta() != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53325e9463ef79cb7cc6a0331aed08a452937964"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQyMjE5MA==", "bodyText": "Let me just answer this and the next two comments together, as they are connected with each other:\nThe method consists of 3 steps:\n\ndiscovers which distribution types are enabled\nfails fast if multiple distribution types have been configured\nreturns the computed distribution\n\nFrom your comments, I understand you suggest implementing all these steps in a single switch statement.\nTo implement step 2, the subsequent branches of the switch statement would have to depend on preceding ones. Each case would contain:\n\nthe logic for discovering its distribution type\nfail fast condition(s)\ninstantiation of the NearbyRandom\n\nSince the implementation of fail fast conditions requires avoiding break after any case, we cannot use the default branch, which is supposed to return LinearDistributionNearbyRandom(Integer.MAX_VALUE).\nTo sum this up, I don't think doing all 3 steps in the switch statement (while there will be additional if conditions after it anyway) is as an improvement. But I like the idea of using switch for the step 1.", "url": "https://github.com/kiegroup/optaplanner/pull/893#discussion_r475422190", "createdAt": "2020-08-24T08:23:27Z", "author": {"login": "rsynek"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/heuristic/selector/common/nearby/NearbyRandomFactory.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.heuristic.selector.common.nearby;\n+\n+import static org.apache.commons.lang3.ObjectUtils.defaultIfNull;\n+\n+import org.optaplanner.core.config.heuristic.selector.common.nearby.NearbySelectionConfig;\n+import org.optaplanner.core.config.heuristic.selector.common.nearby.NearbySelectionDistributionType;\n+\n+public class NearbyRandomFactory {\n+\n+    public static NearbyRandomFactory create(NearbySelectionConfig nearbySelectionConfig) {\n+        return new NearbyRandomFactory(nearbySelectionConfig);\n+    }\n+\n+    private final NearbySelectionConfig nearbySelectionConfig;\n+\n+    public NearbyRandomFactory(NearbySelectionConfig nearbySelectionConfig) {\n+        this.nearbySelectionConfig = nearbySelectionConfig;\n+    }\n+\n+    public NearbyRandom buildNearbyRandom(boolean randomSelection) {\n+        boolean blockDistributionEnabled =\n+                nearbySelectionConfig.getNearbySelectionDistributionType() == NearbySelectionDistributionType.BLOCK_DISTRIBUTION\n+                        || nearbySelectionConfig.getBlockDistributionSizeMinimum() != null\n+                        || nearbySelectionConfig.getBlockDistributionSizeMaximum() != null\n+                        || nearbySelectionConfig.getBlockDistributionSizeRatio() != null\n+                        || nearbySelectionConfig.getBlockDistributionUniformDistributionProbability() != null;\n+        boolean linearDistributionEnabled = nearbySelectionConfig\n+                .getNearbySelectionDistributionType() == NearbySelectionDistributionType.LINEAR_DISTRIBUTION\n+                || nearbySelectionConfig.getLinearDistributionSizeMaximum() != null;\n+        boolean parabolicDistributionEnabled = nearbySelectionConfig\n+                .getNearbySelectionDistributionType() == NearbySelectionDistributionType.PARABOLIC_DISTRIBUTION\n+                || nearbySelectionConfig.getParabolicDistributionSizeMaximum() != null;\n+        boolean betaDistributionEnabled =\n+                nearbySelectionConfig.getNearbySelectionDistributionType() == NearbySelectionDistributionType.BETA_DISTRIBUTION\n+                        || nearbySelectionConfig.getBetaDistributionAlpha() != null\n+                        || nearbySelectionConfig.getBetaDistributionBeta() != null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIzOTk2OA=="}, "originalCommit": {"oid": "53325e9463ef79cb7cc6a0331aed08a452937964"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ4ODM0NA==", "bodyText": "Actually even using switch just for step 1 wouldn't help, as the individual conditions are connected with logical OR.", "url": "https://github.com/kiegroup/optaplanner/pull/893#discussion_r475488344", "createdAt": "2020-08-24T10:04:55Z", "author": {"login": "rsynek"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/heuristic/selector/common/nearby/NearbyRandomFactory.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.heuristic.selector.common.nearby;\n+\n+import static org.apache.commons.lang3.ObjectUtils.defaultIfNull;\n+\n+import org.optaplanner.core.config.heuristic.selector.common.nearby.NearbySelectionConfig;\n+import org.optaplanner.core.config.heuristic.selector.common.nearby.NearbySelectionDistributionType;\n+\n+public class NearbyRandomFactory {\n+\n+    public static NearbyRandomFactory create(NearbySelectionConfig nearbySelectionConfig) {\n+        return new NearbyRandomFactory(nearbySelectionConfig);\n+    }\n+\n+    private final NearbySelectionConfig nearbySelectionConfig;\n+\n+    public NearbyRandomFactory(NearbySelectionConfig nearbySelectionConfig) {\n+        this.nearbySelectionConfig = nearbySelectionConfig;\n+    }\n+\n+    public NearbyRandom buildNearbyRandom(boolean randomSelection) {\n+        boolean blockDistributionEnabled =\n+                nearbySelectionConfig.getNearbySelectionDistributionType() == NearbySelectionDistributionType.BLOCK_DISTRIBUTION\n+                        || nearbySelectionConfig.getBlockDistributionSizeMinimum() != null\n+                        || nearbySelectionConfig.getBlockDistributionSizeMaximum() != null\n+                        || nearbySelectionConfig.getBlockDistributionSizeRatio() != null\n+                        || nearbySelectionConfig.getBlockDistributionUniformDistributionProbability() != null;\n+        boolean linearDistributionEnabled = nearbySelectionConfig\n+                .getNearbySelectionDistributionType() == NearbySelectionDistributionType.LINEAR_DISTRIBUTION\n+                || nearbySelectionConfig.getLinearDistributionSizeMaximum() != null;\n+        boolean parabolicDistributionEnabled = nearbySelectionConfig\n+                .getNearbySelectionDistributionType() == NearbySelectionDistributionType.PARABOLIC_DISTRIBUTION\n+                || nearbySelectionConfig.getParabolicDistributionSizeMaximum() != null;\n+        boolean betaDistributionEnabled =\n+                nearbySelectionConfig.getNearbySelectionDistributionType() == NearbySelectionDistributionType.BETA_DISTRIBUTION\n+                        || nearbySelectionConfig.getBetaDistributionAlpha() != null\n+                        || nearbySelectionConfig.getBetaDistributionBeta() != null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIzOTk2OA=="}, "originalCommit": {"oid": "53325e9463ef79cb7cc6a0331aed08a452937964"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MDk2NTM0OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/heuristic/selector/common/nearby/NearbyRandomFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxNjo0NDo0OVrOHFOWrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxNjo0NDo0OVrOHFOWrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0MDEwOA==", "bodyText": "Implementing my previous comment would complicate this. But I suppose you could set these variables in the switch directly.", "url": "https://github.com/kiegroup/optaplanner/pull/893#discussion_r475240108", "createdAt": "2020-08-23T16:44:49Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/heuristic/selector/common/nearby/NearbyRandomFactory.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.heuristic.selector.common.nearby;\n+\n+import static org.apache.commons.lang3.ObjectUtils.defaultIfNull;\n+\n+import org.optaplanner.core.config.heuristic.selector.common.nearby.NearbySelectionConfig;\n+import org.optaplanner.core.config.heuristic.selector.common.nearby.NearbySelectionDistributionType;\n+\n+public class NearbyRandomFactory {\n+\n+    public static NearbyRandomFactory create(NearbySelectionConfig nearbySelectionConfig) {\n+        return new NearbyRandomFactory(nearbySelectionConfig);\n+    }\n+\n+    private final NearbySelectionConfig nearbySelectionConfig;\n+\n+    public NearbyRandomFactory(NearbySelectionConfig nearbySelectionConfig) {\n+        this.nearbySelectionConfig = nearbySelectionConfig;\n+    }\n+\n+    public NearbyRandom buildNearbyRandom(boolean randomSelection) {\n+        boolean blockDistributionEnabled =\n+                nearbySelectionConfig.getNearbySelectionDistributionType() == NearbySelectionDistributionType.BLOCK_DISTRIBUTION\n+                        || nearbySelectionConfig.getBlockDistributionSizeMinimum() != null\n+                        || nearbySelectionConfig.getBlockDistributionSizeMaximum() != null\n+                        || nearbySelectionConfig.getBlockDistributionSizeRatio() != null\n+                        || nearbySelectionConfig.getBlockDistributionUniformDistributionProbability() != null;\n+        boolean linearDistributionEnabled = nearbySelectionConfig\n+                .getNearbySelectionDistributionType() == NearbySelectionDistributionType.LINEAR_DISTRIBUTION\n+                || nearbySelectionConfig.getLinearDistributionSizeMaximum() != null;\n+        boolean parabolicDistributionEnabled = nearbySelectionConfig\n+                .getNearbySelectionDistributionType() == NearbySelectionDistributionType.PARABOLIC_DISTRIBUTION\n+                || nearbySelectionConfig.getParabolicDistributionSizeMaximum() != null;\n+        boolean betaDistributionEnabled =\n+                nearbySelectionConfig.getNearbySelectionDistributionType() == NearbySelectionDistributionType.BETA_DISTRIBUTION\n+                        || nearbySelectionConfig.getBetaDistributionAlpha() != null\n+                        || nearbySelectionConfig.getBetaDistributionBeta() != null;\n+        if (!randomSelection) {\n+            if (blockDistributionEnabled || linearDistributionEnabled || parabolicDistributionEnabled\n+                    || betaDistributionEnabled) {\n+                throw new IllegalArgumentException(\"The nearbySelectorConfig (\" + nearbySelectionConfig\n+                        + \") with randomSelection (\" + randomSelection\n+                        + \") has distribution parameters.\");\n+            }\n+            return null;\n+        }\n+        if (blockDistributionEnabled && linearDistributionEnabled) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53325e9463ef79cb7cc6a0331aed08a452937964"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MDk2NjU4OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/heuristic/selector/common/nearby/NearbyRandomFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxNjo0NTo1MlrOHFOXPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxNjo0NTo1MlrOHFOXPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0MDI1Mw==", "bodyText": "Personally, I'd make this part of the switch, too. There should only be one place where decisions are made from a single piece of data.", "url": "https://github.com/kiegroup/optaplanner/pull/893#discussion_r475240253", "createdAt": "2020-08-23T16:45:52Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/heuristic/selector/common/nearby/NearbyRandomFactory.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.heuristic.selector.common.nearby;\n+\n+import static org.apache.commons.lang3.ObjectUtils.defaultIfNull;\n+\n+import org.optaplanner.core.config.heuristic.selector.common.nearby.NearbySelectionConfig;\n+import org.optaplanner.core.config.heuristic.selector.common.nearby.NearbySelectionDistributionType;\n+\n+public class NearbyRandomFactory {\n+\n+    public static NearbyRandomFactory create(NearbySelectionConfig nearbySelectionConfig) {\n+        return new NearbyRandomFactory(nearbySelectionConfig);\n+    }\n+\n+    private final NearbySelectionConfig nearbySelectionConfig;\n+\n+    public NearbyRandomFactory(NearbySelectionConfig nearbySelectionConfig) {\n+        this.nearbySelectionConfig = nearbySelectionConfig;\n+    }\n+\n+    public NearbyRandom buildNearbyRandom(boolean randomSelection) {\n+        boolean blockDistributionEnabled =\n+                nearbySelectionConfig.getNearbySelectionDistributionType() == NearbySelectionDistributionType.BLOCK_DISTRIBUTION\n+                        || nearbySelectionConfig.getBlockDistributionSizeMinimum() != null\n+                        || nearbySelectionConfig.getBlockDistributionSizeMaximum() != null\n+                        || nearbySelectionConfig.getBlockDistributionSizeRatio() != null\n+                        || nearbySelectionConfig.getBlockDistributionUniformDistributionProbability() != null;\n+        boolean linearDistributionEnabled = nearbySelectionConfig\n+                .getNearbySelectionDistributionType() == NearbySelectionDistributionType.LINEAR_DISTRIBUTION\n+                || nearbySelectionConfig.getLinearDistributionSizeMaximum() != null;\n+        boolean parabolicDistributionEnabled = nearbySelectionConfig\n+                .getNearbySelectionDistributionType() == NearbySelectionDistributionType.PARABOLIC_DISTRIBUTION\n+                || nearbySelectionConfig.getParabolicDistributionSizeMaximum() != null;\n+        boolean betaDistributionEnabled =\n+                nearbySelectionConfig.getNearbySelectionDistributionType() == NearbySelectionDistributionType.BETA_DISTRIBUTION\n+                        || nearbySelectionConfig.getBetaDistributionAlpha() != null\n+                        || nearbySelectionConfig.getBetaDistributionBeta() != null;\n+        if (!randomSelection) {\n+            if (blockDistributionEnabled || linearDistributionEnabled || parabolicDistributionEnabled\n+                    || betaDistributionEnabled) {\n+                throw new IllegalArgumentException(\"The nearbySelectorConfig (\" + nearbySelectionConfig\n+                        + \") with randomSelection (\" + randomSelection\n+                        + \") has distribution parameters.\");\n+            }\n+            return null;\n+        }\n+        if (blockDistributionEnabled && linearDistributionEnabled) {\n+            throw new IllegalArgumentException(\"The nearbySelectorConfig (\" + nearbySelectionConfig\n+                    + \") has both blockDistribution and linearDistribution parameters.\");\n+        }\n+        if (blockDistributionEnabled && parabolicDistributionEnabled) {\n+            throw new IllegalArgumentException(\"The nearbySelectorConfig (\" + nearbySelectionConfig\n+                    + \") has both blockDistribution and parabolicDistribution parameters.\");\n+        }\n+        if (blockDistributionEnabled && betaDistributionEnabled) {\n+            throw new IllegalArgumentException(\"The nearbySelectorConfig (\" + nearbySelectionConfig\n+                    + \") has both blockDistribution and betaDistribution parameters.\");\n+        }\n+        if (linearDistributionEnabled && parabolicDistributionEnabled) {\n+            throw new IllegalArgumentException(\"The nearbySelectorConfig (\" + nearbySelectionConfig\n+                    + \") has both linearDistribution and parabolicDistribution parameters.\");\n+        }\n+        if (linearDistributionEnabled && betaDistributionEnabled) {\n+            throw new IllegalArgumentException(\"The nearbySelectorConfig (\" + nearbySelectionConfig\n+                    + \") has both linearDistribution and betaDistribution parameters.\");\n+        }\n+        if (parabolicDistributionEnabled && betaDistributionEnabled) {\n+            throw new IllegalArgumentException(\"The nearbySelectorConfig (\" + nearbySelectionConfig\n+                    + \") has both parabolicDistribution and betaDistribution parameters.\");\n+        }\n+        if (blockDistributionEnabled) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53325e9463ef79cb7cc6a0331aed08a452937964"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MDk2NzE0OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/heuristic/selector/entity/EntitySelectorFactory.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxNjo0Njo0NlrOHFOXgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwODoyNzoxMlrOHFZmOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0MDMyMg==", "bodyText": "Good that you're not doing mutation testing. You'd grow old testing all the permutations of this particular condition.", "url": "https://github.com/kiegroup/optaplanner/pull/893#discussion_r475240322", "createdAt": "2020-08-23T16:46:46Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/heuristic/selector/entity/EntitySelectorFactory.java", "diffHunk": "@@ -0,0 +1,396 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.heuristic.selector.entity;\n+\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.List;\n+\n+import org.optaplanner.core.api.domain.solution.PlanningSolution;\n+import org.optaplanner.core.config.heuristic.selector.common.SelectionCacheType;\n+import org.optaplanner.core.config.heuristic.selector.common.SelectionOrder;\n+import org.optaplanner.core.config.heuristic.selector.common.decorator.SelectionSorterOrder;\n+import org.optaplanner.core.config.heuristic.selector.common.nearby.NearbySelectionConfig;\n+import org.optaplanner.core.config.heuristic.selector.entity.EntitySelectorConfig;\n+import org.optaplanner.core.config.util.ConfigUtils;\n+import org.optaplanner.core.impl.domain.entity.descriptor.EntityDescriptor;\n+import org.optaplanner.core.impl.domain.solution.descriptor.SolutionDescriptor;\n+import org.optaplanner.core.impl.heuristic.HeuristicConfigPolicy;\n+import org.optaplanner.core.impl.heuristic.selector.AbstractSelectorFactory;\n+import org.optaplanner.core.impl.heuristic.selector.common.decorator.ComparatorSelectionSorter;\n+import org.optaplanner.core.impl.heuristic.selector.common.decorator.SelectionFilter;\n+import org.optaplanner.core.impl.heuristic.selector.common.decorator.SelectionProbabilityWeightFactory;\n+import org.optaplanner.core.impl.heuristic.selector.common.decorator.SelectionSorter;\n+import org.optaplanner.core.impl.heuristic.selector.common.decorator.SelectionSorterWeightFactory;\n+import org.optaplanner.core.impl.heuristic.selector.common.decorator.WeightFactorySelectionSorter;\n+import org.optaplanner.core.impl.heuristic.selector.common.nearby.NearbyDistanceMeter;\n+import org.optaplanner.core.impl.heuristic.selector.common.nearby.NearbyRandom;\n+import org.optaplanner.core.impl.heuristic.selector.common.nearby.NearbyRandomFactory;\n+import org.optaplanner.core.impl.heuristic.selector.entity.decorator.CachingEntitySelector;\n+import org.optaplanner.core.impl.heuristic.selector.entity.decorator.FilteringEntitySelector;\n+import org.optaplanner.core.impl.heuristic.selector.entity.decorator.ProbabilityEntitySelector;\n+import org.optaplanner.core.impl.heuristic.selector.entity.decorator.SelectedCountLimitEntitySelector;\n+import org.optaplanner.core.impl.heuristic.selector.entity.decorator.ShufflingEntitySelector;\n+import org.optaplanner.core.impl.heuristic.selector.entity.decorator.SortingEntitySelector;\n+import org.optaplanner.core.impl.heuristic.selector.entity.mimic.EntityMimicRecorder;\n+import org.optaplanner.core.impl.heuristic.selector.entity.mimic.MimicRecordingEntitySelector;\n+import org.optaplanner.core.impl.heuristic.selector.entity.mimic.MimicReplayingEntitySelector;\n+import org.optaplanner.core.impl.heuristic.selector.entity.nearby.NearEntityNearbyEntitySelector;\n+\n+public class EntitySelectorFactory extends AbstractSelectorFactory<EntitySelectorConfig> {\n+\n+    public static EntitySelectorFactory create(EntitySelectorConfig entitySelectorConfig) {\n+        return new EntitySelectorFactory(entitySelectorConfig);\n+    }\n+\n+    public EntitySelectorFactory(EntitySelectorConfig entitySelectorConfig) {\n+        super(entitySelectorConfig);\n+    }\n+\n+    public EntityDescriptor extractEntityDescriptor(HeuristicConfigPolicy configPolicy) {\n+        if (config.getEntityClass() != null) {\n+            SolutionDescriptor solutionDescriptor = configPolicy.getSolutionDescriptor();\n+            EntityDescriptor entityDescriptor = solutionDescriptor.getEntityDescriptorStrict(config.getEntityClass());\n+            if (entityDescriptor == null) {\n+                throw new IllegalArgumentException(\"The selectorConfig (\" + config\n+                        + \") has an entityClass (\" + config.getEntityClass() + \") that is not a known planning entity.\\n\"\n+                        + \"Check your solver configuration. If that class (\" + config.getEntityClass().getSimpleName()\n+                        + \") is not in the entityClassSet (\" + solutionDescriptor.getEntityClassSet()\n+                        + \"), check your \" + PlanningSolution.class.getSimpleName()\n+                        + \" implementation's annotated methods too.\");\n+            }\n+            return entityDescriptor;\n+        } else if (config.getMimicSelectorRef() != null) {\n+            return configPolicy.getEntityMimicRecorder(config.getMimicSelectorRef()).getEntityDescriptor();\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * @param configPolicy never null\n+     * @param minimumCacheType never null, If caching is used (different from {@link SelectionCacheType#JUST_IN_TIME}),\n+     *        then it should be at least this {@link SelectionCacheType} because an ancestor already uses such caching\n+     *        and less would be pointless.\n+     * @param inheritedSelectionOrder never null\n+     * @return never null\n+     */\n+    public EntitySelector buildEntitySelector(HeuristicConfigPolicy configPolicy, SelectionCacheType minimumCacheType,\n+            SelectionOrder inheritedSelectionOrder) {\n+        if (config.getMimicSelectorRef() != null) {\n+            return buildMimicReplaying(configPolicy);\n+        }\n+        EntityDescriptor entityDescriptor =\n+                config.getEntityClass() == null ? deduceEntityDescriptor(configPolicy.getSolutionDescriptor())\n+                        : deduceEntityDescriptor(configPolicy.getSolutionDescriptor(), config.getEntityClass());\n+        SelectionCacheType resolvedCacheType = SelectionCacheType.resolve(config.getCacheType(), minimumCacheType);\n+        SelectionOrder resolvedSelectionOrder = SelectionOrder.resolve(config.getSelectionOrder(), inheritedSelectionOrder);\n+\n+        if (config.getNearbySelectionConfig() != null) {\n+            config.getNearbySelectionConfig().validateNearby(resolvedCacheType, resolvedSelectionOrder);\n+        }\n+        validateCacheTypeVersusSelectionOrder(resolvedCacheType, resolvedSelectionOrder);\n+        validateSorting(resolvedSelectionOrder);\n+        validateProbability(resolvedSelectionOrder);\n+        validateSelectedLimit(minimumCacheType);\n+\n+        // baseEntitySelector and lower should be SelectionOrder.ORIGINAL if they are going to get cached completely\n+        boolean baseRandomSelection = determineBaseRandomSelection(entityDescriptor, resolvedCacheType, resolvedSelectionOrder);\n+        SelectionCacheType baseSelectionCacheType = SelectionCacheType.max(minimumCacheType, resolvedCacheType);\n+        EntitySelector entitySelector = buildBaseEntitySelector(entityDescriptor, baseSelectionCacheType, baseRandomSelection);\n+        if (config.getNearbySelectionConfig() != null) {\n+            // TODO Static filtering (such as movableEntitySelectionFilter) should affect nearbySelection\n+            entitySelector = applyNearbySelection(configPolicy, config.getNearbySelectionConfig(), minimumCacheType,\n+                    resolvedSelectionOrder, entitySelector);\n+        }\n+        entitySelector = applyFiltering(entitySelector);\n+        entitySelector = applySorting(resolvedCacheType, resolvedSelectionOrder, entitySelector);\n+        entitySelector = applyProbability(resolvedCacheType, resolvedSelectionOrder, entitySelector);\n+        entitySelector = applyShuffling(resolvedCacheType, resolvedSelectionOrder, entitySelector);\n+        entitySelector = applyCaching(resolvedCacheType, resolvedSelectionOrder, entitySelector);\n+        entitySelector = applySelectedLimit(resolvedSelectionOrder, entitySelector);\n+        entitySelector = applyMimicRecording(configPolicy, entitySelector);\n+        return entitySelector;\n+    }\n+\n+    protected EntitySelector buildMimicReplaying(HeuristicConfigPolicy configPolicy) {\n+        if (config.getId() != null\n+                || config.getEntityClass() != null\n+                || config.getCacheType() != null\n+                || config.getSelectionOrder() != null\n+                || config.getNearbySelectionConfig() != null\n+                || config.getFilterClass() != null\n+                || config.getSorterManner() != null\n+                || config.getSorterComparatorClass() != null\n+                || config.getSorterWeightFactoryClass() != null\n+                || config.getSorterOrder() != null\n+                || config.getSorterClass() != null\n+                || config.getProbabilityWeightFactoryClass() != null\n+                || config.getSelectedCountLimit() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53325e9463ef79cb7cc6a0331aed08a452937964"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0MDQ2Nw==", "bodyText": "But to be constructive here - I'd add all of the calls into a stream, and then filter anything non null. That way, the code would  more readily express what you're trying to do.", "url": "https://github.com/kiegroup/optaplanner/pull/893#discussion_r475240467", "createdAt": "2020-08-23T16:48:23Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/heuristic/selector/entity/EntitySelectorFactory.java", "diffHunk": "@@ -0,0 +1,396 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.heuristic.selector.entity;\n+\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.List;\n+\n+import org.optaplanner.core.api.domain.solution.PlanningSolution;\n+import org.optaplanner.core.config.heuristic.selector.common.SelectionCacheType;\n+import org.optaplanner.core.config.heuristic.selector.common.SelectionOrder;\n+import org.optaplanner.core.config.heuristic.selector.common.decorator.SelectionSorterOrder;\n+import org.optaplanner.core.config.heuristic.selector.common.nearby.NearbySelectionConfig;\n+import org.optaplanner.core.config.heuristic.selector.entity.EntitySelectorConfig;\n+import org.optaplanner.core.config.util.ConfigUtils;\n+import org.optaplanner.core.impl.domain.entity.descriptor.EntityDescriptor;\n+import org.optaplanner.core.impl.domain.solution.descriptor.SolutionDescriptor;\n+import org.optaplanner.core.impl.heuristic.HeuristicConfigPolicy;\n+import org.optaplanner.core.impl.heuristic.selector.AbstractSelectorFactory;\n+import org.optaplanner.core.impl.heuristic.selector.common.decorator.ComparatorSelectionSorter;\n+import org.optaplanner.core.impl.heuristic.selector.common.decorator.SelectionFilter;\n+import org.optaplanner.core.impl.heuristic.selector.common.decorator.SelectionProbabilityWeightFactory;\n+import org.optaplanner.core.impl.heuristic.selector.common.decorator.SelectionSorter;\n+import org.optaplanner.core.impl.heuristic.selector.common.decorator.SelectionSorterWeightFactory;\n+import org.optaplanner.core.impl.heuristic.selector.common.decorator.WeightFactorySelectionSorter;\n+import org.optaplanner.core.impl.heuristic.selector.common.nearby.NearbyDistanceMeter;\n+import org.optaplanner.core.impl.heuristic.selector.common.nearby.NearbyRandom;\n+import org.optaplanner.core.impl.heuristic.selector.common.nearby.NearbyRandomFactory;\n+import org.optaplanner.core.impl.heuristic.selector.entity.decorator.CachingEntitySelector;\n+import org.optaplanner.core.impl.heuristic.selector.entity.decorator.FilteringEntitySelector;\n+import org.optaplanner.core.impl.heuristic.selector.entity.decorator.ProbabilityEntitySelector;\n+import org.optaplanner.core.impl.heuristic.selector.entity.decorator.SelectedCountLimitEntitySelector;\n+import org.optaplanner.core.impl.heuristic.selector.entity.decorator.ShufflingEntitySelector;\n+import org.optaplanner.core.impl.heuristic.selector.entity.decorator.SortingEntitySelector;\n+import org.optaplanner.core.impl.heuristic.selector.entity.mimic.EntityMimicRecorder;\n+import org.optaplanner.core.impl.heuristic.selector.entity.mimic.MimicRecordingEntitySelector;\n+import org.optaplanner.core.impl.heuristic.selector.entity.mimic.MimicReplayingEntitySelector;\n+import org.optaplanner.core.impl.heuristic.selector.entity.nearby.NearEntityNearbyEntitySelector;\n+\n+public class EntitySelectorFactory extends AbstractSelectorFactory<EntitySelectorConfig> {\n+\n+    public static EntitySelectorFactory create(EntitySelectorConfig entitySelectorConfig) {\n+        return new EntitySelectorFactory(entitySelectorConfig);\n+    }\n+\n+    public EntitySelectorFactory(EntitySelectorConfig entitySelectorConfig) {\n+        super(entitySelectorConfig);\n+    }\n+\n+    public EntityDescriptor extractEntityDescriptor(HeuristicConfigPolicy configPolicy) {\n+        if (config.getEntityClass() != null) {\n+            SolutionDescriptor solutionDescriptor = configPolicy.getSolutionDescriptor();\n+            EntityDescriptor entityDescriptor = solutionDescriptor.getEntityDescriptorStrict(config.getEntityClass());\n+            if (entityDescriptor == null) {\n+                throw new IllegalArgumentException(\"The selectorConfig (\" + config\n+                        + \") has an entityClass (\" + config.getEntityClass() + \") that is not a known planning entity.\\n\"\n+                        + \"Check your solver configuration. If that class (\" + config.getEntityClass().getSimpleName()\n+                        + \") is not in the entityClassSet (\" + solutionDescriptor.getEntityClassSet()\n+                        + \"), check your \" + PlanningSolution.class.getSimpleName()\n+                        + \" implementation's annotated methods too.\");\n+            }\n+            return entityDescriptor;\n+        } else if (config.getMimicSelectorRef() != null) {\n+            return configPolicy.getEntityMimicRecorder(config.getMimicSelectorRef()).getEntityDescriptor();\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * @param configPolicy never null\n+     * @param minimumCacheType never null, If caching is used (different from {@link SelectionCacheType#JUST_IN_TIME}),\n+     *        then it should be at least this {@link SelectionCacheType} because an ancestor already uses such caching\n+     *        and less would be pointless.\n+     * @param inheritedSelectionOrder never null\n+     * @return never null\n+     */\n+    public EntitySelector buildEntitySelector(HeuristicConfigPolicy configPolicy, SelectionCacheType minimumCacheType,\n+            SelectionOrder inheritedSelectionOrder) {\n+        if (config.getMimicSelectorRef() != null) {\n+            return buildMimicReplaying(configPolicy);\n+        }\n+        EntityDescriptor entityDescriptor =\n+                config.getEntityClass() == null ? deduceEntityDescriptor(configPolicy.getSolutionDescriptor())\n+                        : deduceEntityDescriptor(configPolicy.getSolutionDescriptor(), config.getEntityClass());\n+        SelectionCacheType resolvedCacheType = SelectionCacheType.resolve(config.getCacheType(), minimumCacheType);\n+        SelectionOrder resolvedSelectionOrder = SelectionOrder.resolve(config.getSelectionOrder(), inheritedSelectionOrder);\n+\n+        if (config.getNearbySelectionConfig() != null) {\n+            config.getNearbySelectionConfig().validateNearby(resolvedCacheType, resolvedSelectionOrder);\n+        }\n+        validateCacheTypeVersusSelectionOrder(resolvedCacheType, resolvedSelectionOrder);\n+        validateSorting(resolvedSelectionOrder);\n+        validateProbability(resolvedSelectionOrder);\n+        validateSelectedLimit(minimumCacheType);\n+\n+        // baseEntitySelector and lower should be SelectionOrder.ORIGINAL if they are going to get cached completely\n+        boolean baseRandomSelection = determineBaseRandomSelection(entityDescriptor, resolvedCacheType, resolvedSelectionOrder);\n+        SelectionCacheType baseSelectionCacheType = SelectionCacheType.max(minimumCacheType, resolvedCacheType);\n+        EntitySelector entitySelector = buildBaseEntitySelector(entityDescriptor, baseSelectionCacheType, baseRandomSelection);\n+        if (config.getNearbySelectionConfig() != null) {\n+            // TODO Static filtering (such as movableEntitySelectionFilter) should affect nearbySelection\n+            entitySelector = applyNearbySelection(configPolicy, config.getNearbySelectionConfig(), minimumCacheType,\n+                    resolvedSelectionOrder, entitySelector);\n+        }\n+        entitySelector = applyFiltering(entitySelector);\n+        entitySelector = applySorting(resolvedCacheType, resolvedSelectionOrder, entitySelector);\n+        entitySelector = applyProbability(resolvedCacheType, resolvedSelectionOrder, entitySelector);\n+        entitySelector = applyShuffling(resolvedCacheType, resolvedSelectionOrder, entitySelector);\n+        entitySelector = applyCaching(resolvedCacheType, resolvedSelectionOrder, entitySelector);\n+        entitySelector = applySelectedLimit(resolvedSelectionOrder, entitySelector);\n+        entitySelector = applyMimicRecording(configPolicy, entitySelector);\n+        return entitySelector;\n+    }\n+\n+    protected EntitySelector buildMimicReplaying(HeuristicConfigPolicy configPolicy) {\n+        if (config.getId() != null\n+                || config.getEntityClass() != null\n+                || config.getCacheType() != null\n+                || config.getSelectionOrder() != null\n+                || config.getNearbySelectionConfig() != null\n+                || config.getFilterClass() != null\n+                || config.getSorterManner() != null\n+                || config.getSorterComparatorClass() != null\n+                || config.getSorterWeightFactoryClass() != null\n+                || config.getSorterOrder() != null\n+                || config.getSorterClass() != null\n+                || config.getProbabilityWeightFactoryClass() != null\n+                || config.getSelectedCountLimit() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0MDMyMg=="}, "originalCommit": {"oid": "53325e9463ef79cb7cc6a0331aed08a452937964"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQyNDMxNA==", "bodyText": "Good point, I used the same \"trick\" for resolving terminationConfigs; here it suits pretty well too.", "url": "https://github.com/kiegroup/optaplanner/pull/893#discussion_r475424314", "createdAt": "2020-08-24T08:27:12Z", "author": {"login": "rsynek"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/heuristic/selector/entity/EntitySelectorFactory.java", "diffHunk": "@@ -0,0 +1,396 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.heuristic.selector.entity;\n+\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.List;\n+\n+import org.optaplanner.core.api.domain.solution.PlanningSolution;\n+import org.optaplanner.core.config.heuristic.selector.common.SelectionCacheType;\n+import org.optaplanner.core.config.heuristic.selector.common.SelectionOrder;\n+import org.optaplanner.core.config.heuristic.selector.common.decorator.SelectionSorterOrder;\n+import org.optaplanner.core.config.heuristic.selector.common.nearby.NearbySelectionConfig;\n+import org.optaplanner.core.config.heuristic.selector.entity.EntitySelectorConfig;\n+import org.optaplanner.core.config.util.ConfigUtils;\n+import org.optaplanner.core.impl.domain.entity.descriptor.EntityDescriptor;\n+import org.optaplanner.core.impl.domain.solution.descriptor.SolutionDescriptor;\n+import org.optaplanner.core.impl.heuristic.HeuristicConfigPolicy;\n+import org.optaplanner.core.impl.heuristic.selector.AbstractSelectorFactory;\n+import org.optaplanner.core.impl.heuristic.selector.common.decorator.ComparatorSelectionSorter;\n+import org.optaplanner.core.impl.heuristic.selector.common.decorator.SelectionFilter;\n+import org.optaplanner.core.impl.heuristic.selector.common.decorator.SelectionProbabilityWeightFactory;\n+import org.optaplanner.core.impl.heuristic.selector.common.decorator.SelectionSorter;\n+import org.optaplanner.core.impl.heuristic.selector.common.decorator.SelectionSorterWeightFactory;\n+import org.optaplanner.core.impl.heuristic.selector.common.decorator.WeightFactorySelectionSorter;\n+import org.optaplanner.core.impl.heuristic.selector.common.nearby.NearbyDistanceMeter;\n+import org.optaplanner.core.impl.heuristic.selector.common.nearby.NearbyRandom;\n+import org.optaplanner.core.impl.heuristic.selector.common.nearby.NearbyRandomFactory;\n+import org.optaplanner.core.impl.heuristic.selector.entity.decorator.CachingEntitySelector;\n+import org.optaplanner.core.impl.heuristic.selector.entity.decorator.FilteringEntitySelector;\n+import org.optaplanner.core.impl.heuristic.selector.entity.decorator.ProbabilityEntitySelector;\n+import org.optaplanner.core.impl.heuristic.selector.entity.decorator.SelectedCountLimitEntitySelector;\n+import org.optaplanner.core.impl.heuristic.selector.entity.decorator.ShufflingEntitySelector;\n+import org.optaplanner.core.impl.heuristic.selector.entity.decorator.SortingEntitySelector;\n+import org.optaplanner.core.impl.heuristic.selector.entity.mimic.EntityMimicRecorder;\n+import org.optaplanner.core.impl.heuristic.selector.entity.mimic.MimicRecordingEntitySelector;\n+import org.optaplanner.core.impl.heuristic.selector.entity.mimic.MimicReplayingEntitySelector;\n+import org.optaplanner.core.impl.heuristic.selector.entity.nearby.NearEntityNearbyEntitySelector;\n+\n+public class EntitySelectorFactory extends AbstractSelectorFactory<EntitySelectorConfig> {\n+\n+    public static EntitySelectorFactory create(EntitySelectorConfig entitySelectorConfig) {\n+        return new EntitySelectorFactory(entitySelectorConfig);\n+    }\n+\n+    public EntitySelectorFactory(EntitySelectorConfig entitySelectorConfig) {\n+        super(entitySelectorConfig);\n+    }\n+\n+    public EntityDescriptor extractEntityDescriptor(HeuristicConfigPolicy configPolicy) {\n+        if (config.getEntityClass() != null) {\n+            SolutionDescriptor solutionDescriptor = configPolicy.getSolutionDescriptor();\n+            EntityDescriptor entityDescriptor = solutionDescriptor.getEntityDescriptorStrict(config.getEntityClass());\n+            if (entityDescriptor == null) {\n+                throw new IllegalArgumentException(\"The selectorConfig (\" + config\n+                        + \") has an entityClass (\" + config.getEntityClass() + \") that is not a known planning entity.\\n\"\n+                        + \"Check your solver configuration. If that class (\" + config.getEntityClass().getSimpleName()\n+                        + \") is not in the entityClassSet (\" + solutionDescriptor.getEntityClassSet()\n+                        + \"), check your \" + PlanningSolution.class.getSimpleName()\n+                        + \" implementation's annotated methods too.\");\n+            }\n+            return entityDescriptor;\n+        } else if (config.getMimicSelectorRef() != null) {\n+            return configPolicy.getEntityMimicRecorder(config.getMimicSelectorRef()).getEntityDescriptor();\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * @param configPolicy never null\n+     * @param minimumCacheType never null, If caching is used (different from {@link SelectionCacheType#JUST_IN_TIME}),\n+     *        then it should be at least this {@link SelectionCacheType} because an ancestor already uses such caching\n+     *        and less would be pointless.\n+     * @param inheritedSelectionOrder never null\n+     * @return never null\n+     */\n+    public EntitySelector buildEntitySelector(HeuristicConfigPolicy configPolicy, SelectionCacheType minimumCacheType,\n+            SelectionOrder inheritedSelectionOrder) {\n+        if (config.getMimicSelectorRef() != null) {\n+            return buildMimicReplaying(configPolicy);\n+        }\n+        EntityDescriptor entityDescriptor =\n+                config.getEntityClass() == null ? deduceEntityDescriptor(configPolicy.getSolutionDescriptor())\n+                        : deduceEntityDescriptor(configPolicy.getSolutionDescriptor(), config.getEntityClass());\n+        SelectionCacheType resolvedCacheType = SelectionCacheType.resolve(config.getCacheType(), minimumCacheType);\n+        SelectionOrder resolvedSelectionOrder = SelectionOrder.resolve(config.getSelectionOrder(), inheritedSelectionOrder);\n+\n+        if (config.getNearbySelectionConfig() != null) {\n+            config.getNearbySelectionConfig().validateNearby(resolvedCacheType, resolvedSelectionOrder);\n+        }\n+        validateCacheTypeVersusSelectionOrder(resolvedCacheType, resolvedSelectionOrder);\n+        validateSorting(resolvedSelectionOrder);\n+        validateProbability(resolvedSelectionOrder);\n+        validateSelectedLimit(minimumCacheType);\n+\n+        // baseEntitySelector and lower should be SelectionOrder.ORIGINAL if they are going to get cached completely\n+        boolean baseRandomSelection = determineBaseRandomSelection(entityDescriptor, resolvedCacheType, resolvedSelectionOrder);\n+        SelectionCacheType baseSelectionCacheType = SelectionCacheType.max(minimumCacheType, resolvedCacheType);\n+        EntitySelector entitySelector = buildBaseEntitySelector(entityDescriptor, baseSelectionCacheType, baseRandomSelection);\n+        if (config.getNearbySelectionConfig() != null) {\n+            // TODO Static filtering (such as movableEntitySelectionFilter) should affect nearbySelection\n+            entitySelector = applyNearbySelection(configPolicy, config.getNearbySelectionConfig(), minimumCacheType,\n+                    resolvedSelectionOrder, entitySelector);\n+        }\n+        entitySelector = applyFiltering(entitySelector);\n+        entitySelector = applySorting(resolvedCacheType, resolvedSelectionOrder, entitySelector);\n+        entitySelector = applyProbability(resolvedCacheType, resolvedSelectionOrder, entitySelector);\n+        entitySelector = applyShuffling(resolvedCacheType, resolvedSelectionOrder, entitySelector);\n+        entitySelector = applyCaching(resolvedCacheType, resolvedSelectionOrder, entitySelector);\n+        entitySelector = applySelectedLimit(resolvedSelectionOrder, entitySelector);\n+        entitySelector = applyMimicRecording(configPolicy, entitySelector);\n+        return entitySelector;\n+    }\n+\n+    protected EntitySelector buildMimicReplaying(HeuristicConfigPolicy configPolicy) {\n+        if (config.getId() != null\n+                || config.getEntityClass() != null\n+                || config.getCacheType() != null\n+                || config.getSelectionOrder() != null\n+                || config.getNearbySelectionConfig() != null\n+                || config.getFilterClass() != null\n+                || config.getSorterManner() != null\n+                || config.getSorterComparatorClass() != null\n+                || config.getSorterWeightFactoryClass() != null\n+                || config.getSorterOrder() != null\n+                || config.getSorterClass() != null\n+                || config.getProbabilityWeightFactoryClass() != null\n+                || config.getSelectedCountLimit() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0MDMyMg=="}, "originalCommit": {"oid": "53325e9463ef79cb7cc6a0331aed08a452937964"}, "originalPosition": 143}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4422, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}