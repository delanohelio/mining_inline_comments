{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1OTIyOTA4", "number": 976, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMjoyMDoyMVrOEvST4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNjo0Mzo1OFrOExEqYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MDE4NTMxOnYy", "diffSide": "RIGHT", "path": "Jenkinsfile.deploy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMjoyMDoyMVrOHkLlSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMjozODozN1rOHkMR5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcwMDU1Mw==", "bodyText": "May be worth moving to a shared library (after parametrization).", "url": "https://github.com/kiegroup/optaplanner/pull/976#discussion_r507700553", "createdAt": "2020-10-19T12:20:21Z", "author": {"login": "rsynek"}, "path": "Jenkinsfile.deploy", "diffHunk": "@@ -129,6 +247,55 @@ void runMaven(String goals, String directory, boolean skipTests = false, List pr\n         mvnCmd += \" ${extraArgs}\"\n     }\n     dir(directory) {\n-        maven.runMavenWithSubmarineSettings(mvnCmd, skipTests)\n+        if(isRelease()){\n+            // In case of release, we already have the settings.xml\n+            maven.runMaven(mvnCmd, skipTests, ['-fae'])\n+        } else {\n+            maven.runMavenWithSubmarineSettings(mvnCmd, skipTests)\n+        }\n+    }\n+}\n+\n+void updateKogitoVersion(String newVersion) {\n+    sh \"mvn versions:set-property -Dproperty=version.org.kie.kogito -DnewVersion=$newVersion -DallowSnapshots=true -DgenerateBackupPoms=false\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9ed3729a02067197bff2e4f6bf4457dfa159ad8"}, "originalPosition": 220}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcxMTk3NQ==", "bodyText": "I do agree", "url": "https://github.com/kiegroup/optaplanner/pull/976#discussion_r507711975", "createdAt": "2020-10-19T12:38:37Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.deploy", "diffHunk": "@@ -129,6 +247,55 @@ void runMaven(String goals, String directory, boolean skipTests = false, List pr\n         mvnCmd += \" ${extraArgs}\"\n     }\n     dir(directory) {\n-        maven.runMavenWithSubmarineSettings(mvnCmd, skipTests)\n+        if(isRelease()){\n+            // In case of release, we already have the settings.xml\n+            maven.runMaven(mvnCmd, skipTests, ['-fae'])\n+        } else {\n+            maven.runMavenWithSubmarineSettings(mvnCmd, skipTests)\n+        }\n+    }\n+}\n+\n+void updateKogitoVersion(String newVersion) {\n+    sh \"mvn versions:set-property -Dproperty=version.org.kie.kogito -DnewVersion=$newVersion -DallowSnapshots=true -DgenerateBackupPoms=false\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcwMDU1Mw=="}, "originalCommit": {"oid": "e9ed3729a02067197bff2e4f6bf4457dfa159ad8"}, "originalPosition": 220}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MDE5NjIyOnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMjoyMzowMlrOHkLr5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMTozOTowOVrOHlnfbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcwMjI0NQ==", "bodyText": "Required just for testing the pipeline. Enforcer fails the build due to the http:// protocol of the testing Nexus server (https:// required).", "url": "https://github.com/kiegroup/optaplanner/pull/976#discussion_r507702245", "createdAt": "2020-10-19T12:23:02Z", "author": {"login": "rsynek"}, "path": "pom.xml", "diffHunk": "@@ -34,6 +34,8 @@\n   </licenses>\n \n   <properties>\n+    <!-- TODO: remove before merging -->\n+    <enforcer.skip>true</enforcer.skip>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9ed3729a02067197bff2e4f6bf4457dfa159ad8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYwMDUzNg==", "bodyText": "Yes, this must not make it to master.", "url": "https://github.com/kiegroup/optaplanner/pull/976#discussion_r508600536", "createdAt": "2020-10-20T15:20:11Z", "author": {"login": "ge0ffrey"}, "path": "pom.xml", "diffHunk": "@@ -34,6 +34,8 @@\n   </licenses>\n \n   <properties>\n+    <!-- TODO: remove before merging -->\n+    <enforcer.skip>true</enforcer.skip>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcwMjI0NQ=="}, "originalCommit": {"oid": "e9ed3729a02067197bff2e4f6bf4457dfa159ad8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYwMTI1Mw==", "bodyText": "Maybe you can use -Denforcer.skip=true in the pipeline instead?", "url": "https://github.com/kiegroup/optaplanner/pull/976#discussion_r508601253", "createdAt": "2020-10-20T15:20:53Z", "author": {"login": "ge0ffrey"}, "path": "pom.xml", "diffHunk": "@@ -34,6 +34,8 @@\n   </licenses>\n \n   <properties>\n+    <!-- TODO: remove before merging -->\n+    <enforcer.skip>true</enforcer.skip>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcwMjI0NQ=="}, "originalCommit": {"oid": "e9ed3729a02067197bff2e4f6bf4457dfa159ad8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYwMzIwMQ==", "bodyText": "this would be something similar to: https://github.com/kiegroup/kogito-runtimes/pull/835/files#diff-102df37262fd32095c3c8ccc12daad8face4939c97eb4a207fba25c1aa0be4a1R274", "url": "https://github.com/kiegroup/optaplanner/pull/976#discussion_r508603201", "createdAt": "2020-10-20T15:22:30Z", "author": {"login": "radtriste"}, "path": "pom.xml", "diffHunk": "@@ -34,6 +34,8 @@\n   </licenses>\n \n   <properties>\n+    <!-- TODO: remove before merging -->\n+    <enforcer.skip>true</enforcer.skip>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcwMjI0NQ=="}, "originalCommit": {"oid": "e9ed3729a02067197bff2e4f6bf4457dfa159ad8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY1NjU4MA==", "bodyText": "That's an option too, thanks.", "url": "https://github.com/kiegroup/optaplanner/pull/976#discussion_r508656580", "createdAt": "2020-10-20T16:09:22Z", "author": {"login": "rsynek"}, "path": "pom.xml", "diffHunk": "@@ -34,6 +34,8 @@\n   </licenses>\n \n   <properties>\n+    <!-- TODO: remove before merging -->\n+    <enforcer.skip>true</enforcer.skip>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcwMjI0NQ=="}, "originalCommit": {"oid": "e9ed3729a02067197bff2e4f6bf4457dfa159ad8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTIwNjM4MQ==", "bodyText": "+1 for doing it in the pipeline which also adds the http:// url, instead of doing it in the pom.xml and affecting local builds too.", "url": "https://github.com/kiegroup/optaplanner/pull/976#discussion_r509206381", "createdAt": "2020-10-21T11:39:09Z", "author": {"login": "ge0ffrey"}, "path": "pom.xml", "diffHunk": "@@ -34,6 +34,8 @@\n   </licenses>\n \n   <properties>\n+    <!-- TODO: remove before merging -->\n+    <enforcer.skip>true</enforcer.skip>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcwMjI0NQ=="}, "originalCommit": {"oid": "e9ed3729a02067197bff2e4f6bf4457dfa159ad8"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MDI0NzA5OnYy", "diffSide": "RIGHT", "path": "Jenkinsfile.deploy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMjozNTo1MFrOHkMK3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMjo1ODowOVrOHkNC-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcxMDE3NA==", "bodyText": "maybe add KOGITO_VERSION as well in deployment.properties, as you will need it in promote pipeline", "url": "https://github.com/kiegroup/optaplanner/pull/976#discussion_r507710174", "createdAt": "2020-10-19T12:35:50Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.deploy", "diffHunk": "@@ -42,37 +56,118 @@ pipeline {\n                     if (params.DISPLAY_NAME != '') {\n                         currentBuild.displayName = params.DISPLAY_NAME\n                     }\n+\n+                    if (isRelease()) {\n+                        assert getProjectVersion() != ''\n+                    }\n                 }\n             }\n             post {\n                 success {\n                     script {\n                         setDeployPropertyIfNeeded('git.branch', getBuildBranch())\n                         setDeployPropertyIfNeeded('git.author', getGitAuthor())\n+                        setDeployPropertyIfNeeded('project.version', getProjectVersion())\n+                        setDeployPropertyIfNeeded('release', isRelease())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71611aedb229a76f3b2d66d547518483b42c6171"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcyNDUzOQ==", "bodyText": "I get the version there via a parameter, I suppose. But +1 to make it consistent.", "url": "https://github.com/kiegroup/optaplanner/pull/976#discussion_r507724539", "createdAt": "2020-10-19T12:58:09Z", "author": {"login": "rsynek"}, "path": "Jenkinsfile.deploy", "diffHunk": "@@ -42,37 +56,118 @@ pipeline {\n                     if (params.DISPLAY_NAME != '') {\n                         currentBuild.displayName = params.DISPLAY_NAME\n                     }\n+\n+                    if (isRelease()) {\n+                        assert getProjectVersion() != ''\n+                    }\n                 }\n             }\n             post {\n                 success {\n                     script {\n                         setDeployPropertyIfNeeded('git.branch', getBuildBranch())\n                         setDeployPropertyIfNeeded('git.author', getGitAuthor())\n+                        setDeployPropertyIfNeeded('project.version', getProjectVersion())\n+                        setDeployPropertyIfNeeded('release', isRelease())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcxMDE3NA=="}, "originalCommit": {"oid": "71611aedb229a76f3b2d66d547518483b42c6171"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MDI1MTY2OnYy", "diffSide": "RIGHT", "path": "Jenkinsfile.deploy", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMjozNjo1MlrOHkMNlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMzowNToxMlrOHkNUkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcxMDg3MQ==", "bodyText": "this parameter should not be mandatory. runtimes could have been released already. thus this pipeline would not need any MAVEN_DEPENDENCIES_REPOSITORY", "url": "https://github.com/kiegroup/optaplanner/pull/976#discussion_r507710871", "createdAt": "2020-10-19T12:36:52Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.deploy", "diffHunk": "@@ -42,37 +56,118 @@ pipeline {\n                     if (params.DISPLAY_NAME != '') {\n                         currentBuild.displayName = params.DISPLAY_NAME\n                     }\n+\n+                    if (isRelease()) {\n+                        assert getProjectVersion() != ''\n+                    }\n                 }\n             }\n             post {\n                 success {\n                     script {\n                         setDeployPropertyIfNeeded('git.branch', getBuildBranch())\n                         setDeployPropertyIfNeeded('git.author', getGitAuthor())\n+                        setDeployPropertyIfNeeded('project.version', getProjectVersion())\n+                        setDeployPropertyIfNeeded('release', isRelease())\n                     }\n                 }\n             }\n         }\n+\n         stage('Clone repositories') {\n             steps {\n                 checkoutRepo('optaplanner')\n             }\n         }\n+\n+        stage('Prepare for PR'){\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps {\n+                prepareForPR('optaplanner')\n+            }\n+        }\n+\n+        stage('Setup Maven release config'){\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps {\n+                echo 'Setup Maven release config'\n+                configFileProvider([configFile(fileId: maven.getSubmarineSettingsXmlId(), targetLocation: 'maven-settings.xml', variable: 'MAVEN_SETTINGS_FILE')]){\n+                    sh \"echo '-B -s ${MAVEN_SETTINGS_FILE}' | tee optaplanner/.mvn/maven.config\"\n+                    // TODO: figure out why the assert does not work\n+                    // assert params.MAVEN_DEPENDENCIES_REPOSITORY != '' // OptaPlanner depends on Kogito Runtimes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71611aedb229a76f3b2d66d547518483b42c6171"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcxMTM4Mg==", "bodyText": "just thinking I need to update that as well on examples that we should check params.MAVEN_DEPENDENCIES_REPOSITORY is not empty before doing the change ...", "url": "https://github.com/kiegroup/optaplanner/pull/976#discussion_r507711382", "createdAt": "2020-10-19T12:37:44Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.deploy", "diffHunk": "@@ -42,37 +56,118 @@ pipeline {\n                     if (params.DISPLAY_NAME != '') {\n                         currentBuild.displayName = params.DISPLAY_NAME\n                     }\n+\n+                    if (isRelease()) {\n+                        assert getProjectVersion() != ''\n+                    }\n                 }\n             }\n             post {\n                 success {\n                     script {\n                         setDeployPropertyIfNeeded('git.branch', getBuildBranch())\n                         setDeployPropertyIfNeeded('git.author', getGitAuthor())\n+                        setDeployPropertyIfNeeded('project.version', getProjectVersion())\n+                        setDeployPropertyIfNeeded('release', isRelease())\n                     }\n                 }\n             }\n         }\n+\n         stage('Clone repositories') {\n             steps {\n                 checkoutRepo('optaplanner')\n             }\n         }\n+\n+        stage('Prepare for PR'){\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps {\n+                prepareForPR('optaplanner')\n+            }\n+        }\n+\n+        stage('Setup Maven release config'){\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps {\n+                echo 'Setup Maven release config'\n+                configFileProvider([configFile(fileId: maven.getSubmarineSettingsXmlId(), targetLocation: 'maven-settings.xml', variable: 'MAVEN_SETTINGS_FILE')]){\n+                    sh \"echo '-B -s ${MAVEN_SETTINGS_FILE}' | tee optaplanner/.mvn/maven.config\"\n+                    // TODO: figure out why the assert does not work\n+                    // assert params.MAVEN_DEPENDENCIES_REPOSITORY != '' // OptaPlanner depends on Kogito Runtimes", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcxMDg3MQ=="}, "originalCommit": {"oid": "71611aedb229a76f3b2d66d547518483b42c6171"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcxODkzMQ==", "bodyText": "already implemented in fact on examples.See https://github.com/kiegroup/kogito-examples/blob/master/Jenkinsfile.deploy#L97", "url": "https://github.com/kiegroup/optaplanner/pull/976#discussion_r507718931", "createdAt": "2020-10-19T12:49:30Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.deploy", "diffHunk": "@@ -42,37 +56,118 @@ pipeline {\n                     if (params.DISPLAY_NAME != '') {\n                         currentBuild.displayName = params.DISPLAY_NAME\n                     }\n+\n+                    if (isRelease()) {\n+                        assert getProjectVersion() != ''\n+                    }\n                 }\n             }\n             post {\n                 success {\n                     script {\n                         setDeployPropertyIfNeeded('git.branch', getBuildBranch())\n                         setDeployPropertyIfNeeded('git.author', getGitAuthor())\n+                        setDeployPropertyIfNeeded('project.version', getProjectVersion())\n+                        setDeployPropertyIfNeeded('release', isRelease())\n                     }\n                 }\n             }\n         }\n+\n         stage('Clone repositories') {\n             steps {\n                 checkoutRepo('optaplanner')\n             }\n         }\n+\n+        stage('Prepare for PR'){\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps {\n+                prepareForPR('optaplanner')\n+            }\n+        }\n+\n+        stage('Setup Maven release config'){\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps {\n+                echo 'Setup Maven release config'\n+                configFileProvider([configFile(fileId: maven.getSubmarineSettingsXmlId(), targetLocation: 'maven-settings.xml', variable: 'MAVEN_SETTINGS_FILE')]){\n+                    sh \"echo '-B -s ${MAVEN_SETTINGS_FILE}' | tee optaplanner/.mvn/maven.config\"\n+                    // TODO: figure out why the assert does not work\n+                    // assert params.MAVEN_DEPENDENCIES_REPOSITORY != '' // OptaPlanner depends on Kogito Runtimes", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcxMDg3MQ=="}, "originalCommit": {"oid": "71611aedb229a76f3b2d66d547518483b42c6171"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcyOTA0Mg==", "bodyText": "Good point, will remove the assert and add a condition.", "url": "https://github.com/kiegroup/optaplanner/pull/976#discussion_r507729042", "createdAt": "2020-10-19T13:05:12Z", "author": {"login": "rsynek"}, "path": "Jenkinsfile.deploy", "diffHunk": "@@ -42,37 +56,118 @@ pipeline {\n                     if (params.DISPLAY_NAME != '') {\n                         currentBuild.displayName = params.DISPLAY_NAME\n                     }\n+\n+                    if (isRelease()) {\n+                        assert getProjectVersion() != ''\n+                    }\n                 }\n             }\n             post {\n                 success {\n                     script {\n                         setDeployPropertyIfNeeded('git.branch', getBuildBranch())\n                         setDeployPropertyIfNeeded('git.author', getGitAuthor())\n+                        setDeployPropertyIfNeeded('project.version', getProjectVersion())\n+                        setDeployPropertyIfNeeded('release', isRelease())\n                     }\n                 }\n             }\n         }\n+\n         stage('Clone repositories') {\n             steps {\n                 checkoutRepo('optaplanner')\n             }\n         }\n+\n+        stage('Prepare for PR'){\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps {\n+                prepareForPR('optaplanner')\n+            }\n+        }\n+\n+        stage('Setup Maven release config'){\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps {\n+                echo 'Setup Maven release config'\n+                configFileProvider([configFile(fileId: maven.getSubmarineSettingsXmlId(), targetLocation: 'maven-settings.xml', variable: 'MAVEN_SETTINGS_FILE')]){\n+                    sh \"echo '-B -s ${MAVEN_SETTINGS_FILE}' | tee optaplanner/.mvn/maven.config\"\n+                    // TODO: figure out why the assert does not work\n+                    // assert params.MAVEN_DEPENDENCIES_REPOSITORY != '' // OptaPlanner depends on Kogito Runtimes", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcxMDg3MQ=="}, "originalCommit": {"oid": "71611aedb229a76f3b2d66d547518483b42c6171"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MDI1NjcyOnYy", "diffSide": "RIGHT", "path": "Jenkinsfile.deploy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMjozODowNVrOHkMQmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNjowODo0NFrOHlF5JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcxMTY0MQ==", "bodyText": "what happen if KOGITO_VERSION is empty ?", "url": "https://github.com/kiegroup/optaplanner/pull/976#discussion_r507711641", "createdAt": "2020-10-19T12:38:05Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.deploy", "diffHunk": "@@ -42,37 +56,118 @@ pipeline {\n                     if (params.DISPLAY_NAME != '') {\n                         currentBuild.displayName = params.DISPLAY_NAME\n                     }\n+\n+                    if (isRelease()) {\n+                        assert getProjectVersion() != ''\n+                    }\n                 }\n             }\n             post {\n                 success {\n                     script {\n                         setDeployPropertyIfNeeded('git.branch', getBuildBranch())\n                         setDeployPropertyIfNeeded('git.author', getGitAuthor())\n+                        setDeployPropertyIfNeeded('project.version', getProjectVersion())\n+                        setDeployPropertyIfNeeded('release', isRelease())\n                     }\n                 }\n             }\n         }\n+\n         stage('Clone repositories') {\n             steps {\n                 checkoutRepo('optaplanner')\n             }\n         }\n+\n+        stage('Prepare for PR'){\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps {\n+                prepareForPR('optaplanner')\n+            }\n+        }\n+\n+        stage('Setup Maven release config'){\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps {\n+                echo 'Setup Maven release config'\n+                configFileProvider([configFile(fileId: maven.getSubmarineSettingsXmlId(), targetLocation: 'maven-settings.xml', variable: 'MAVEN_SETTINGS_FILE')]){\n+                    sh \"echo '-B -s ${MAVEN_SETTINGS_FILE}' | tee optaplanner/.mvn/maven.config\"\n+                    // TODO: figure out why the assert does not work\n+                    // assert params.MAVEN_DEPENDENCIES_REPOSITORY != '' // OptaPlanner depends on Kogito Runtimes\n+                    echo \"MAVEN_DEPENDENCIES_REPOSITORY passed: ${params.MAVEN_DEPENDENCIES_REPOSITORY}\"\n+                    sh \"sed -i 's|<repositories>|<repositories><repository><id>staging</id><name>Staging Repository</name><url>${params.MAVEN_DEPENDENCIES_REPOSITORY}</url><layout>default</layout><snapshots><enabled>true</enabled></snapshots><releases><enabled>true</enabled></releases></repository>|g' ${MAVEN_SETTINGS_FILE}\"\n+                    sh \"sed -i 's|<pluginRepositories>|<pluginRepositories><pluginRepository><id>staging</id><name>Staging Repository</name><url>${params.MAVEN_DEPENDENCIES_REPOSITORY}</url><layout>default</layout><snapshots><enabled>true</enabled></snapshots><releases><enabled>true</enabled></releases></pluginRepository>|g' ${MAVEN_SETTINGS_FILE}\"\n+                    sh \"sed -i 's|external:\\\\*|external:*,!staging|g' ${MAVEN_SETTINGS_FILE}\" // Done to allow Maven to download release artifacts from MAVEN_DEPENDENCIES_REPOSITORY\n+\n+                    echo 'Resulting maven settings.xml:'\n+                    sh \"cat ${MAVEN_SETTINGS_FILE}\"\n+                }\n+            }\n+        }\n+\n+        stage('Update project version'){\n+            when {\n+                expression { return getProjectVersion() != '' }\n+            }\n+            steps {\n+                script {\n+                    // To make sure that the project will resolve during version upgrade.\n+                    mavenCleanInstall('optaplanner', true, [], '-U')\n+                    dir('optaplanner') {\n+                        maven.mvnVersionsSet(getProjectVersion())\n+                        updateKogitoVersion(getKogitoVersion())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71611aedb229a76f3b2d66d547518483b42c6171"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY1NTkwOQ==", "bodyText": "Already fixed by making the parameter mandatory.", "url": "https://github.com/kiegroup/optaplanner/pull/976#discussion_r508655909", "createdAt": "2020-10-20T16:08:44Z", "author": {"login": "rsynek"}, "path": "Jenkinsfile.deploy", "diffHunk": "@@ -42,37 +56,118 @@ pipeline {\n                     if (params.DISPLAY_NAME != '') {\n                         currentBuild.displayName = params.DISPLAY_NAME\n                     }\n+\n+                    if (isRelease()) {\n+                        assert getProjectVersion() != ''\n+                    }\n                 }\n             }\n             post {\n                 success {\n                     script {\n                         setDeployPropertyIfNeeded('git.branch', getBuildBranch())\n                         setDeployPropertyIfNeeded('git.author', getGitAuthor())\n+                        setDeployPropertyIfNeeded('project.version', getProjectVersion())\n+                        setDeployPropertyIfNeeded('release', isRelease())\n                     }\n                 }\n             }\n         }\n+\n         stage('Clone repositories') {\n             steps {\n                 checkoutRepo('optaplanner')\n             }\n         }\n+\n+        stage('Prepare for PR'){\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps {\n+                prepareForPR('optaplanner')\n+            }\n+        }\n+\n+        stage('Setup Maven release config'){\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps {\n+                echo 'Setup Maven release config'\n+                configFileProvider([configFile(fileId: maven.getSubmarineSettingsXmlId(), targetLocation: 'maven-settings.xml', variable: 'MAVEN_SETTINGS_FILE')]){\n+                    sh \"echo '-B -s ${MAVEN_SETTINGS_FILE}' | tee optaplanner/.mvn/maven.config\"\n+                    // TODO: figure out why the assert does not work\n+                    // assert params.MAVEN_DEPENDENCIES_REPOSITORY != '' // OptaPlanner depends on Kogito Runtimes\n+                    echo \"MAVEN_DEPENDENCIES_REPOSITORY passed: ${params.MAVEN_DEPENDENCIES_REPOSITORY}\"\n+                    sh \"sed -i 's|<repositories>|<repositories><repository><id>staging</id><name>Staging Repository</name><url>${params.MAVEN_DEPENDENCIES_REPOSITORY}</url><layout>default</layout><snapshots><enabled>true</enabled></snapshots><releases><enabled>true</enabled></releases></repository>|g' ${MAVEN_SETTINGS_FILE}\"\n+                    sh \"sed -i 's|<pluginRepositories>|<pluginRepositories><pluginRepository><id>staging</id><name>Staging Repository</name><url>${params.MAVEN_DEPENDENCIES_REPOSITORY}</url><layout>default</layout><snapshots><enabled>true</enabled></snapshots><releases><enabled>true</enabled></releases></pluginRepository>|g' ${MAVEN_SETTINGS_FILE}\"\n+                    sh \"sed -i 's|external:\\\\*|external:*,!staging|g' ${MAVEN_SETTINGS_FILE}\" // Done to allow Maven to download release artifacts from MAVEN_DEPENDENCIES_REPOSITORY\n+\n+                    echo 'Resulting maven settings.xml:'\n+                    sh \"cat ${MAVEN_SETTINGS_FILE}\"\n+                }\n+            }\n+        }\n+\n+        stage('Update project version'){\n+            when {\n+                expression { return getProjectVersion() != '' }\n+            }\n+            steps {\n+                script {\n+                    // To make sure that the project will resolve during version upgrade.\n+                    mavenCleanInstall('optaplanner', true, [], '-U')\n+                    dir('optaplanner') {\n+                        maven.mvnVersionsSet(getProjectVersion())\n+                        updateKogitoVersion(getKogitoVersion())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcxMTY0MQ=="}, "originalCommit": {"oid": "71611aedb229a76f3b2d66d547518483b42c6171"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MDI2Njk2OnYy", "diffSide": "RIGHT", "path": "Jenkinsfile.promote", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMjo0MDo0N1rOHkMWzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMjo0MDo0N1rOHkMWzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcxMzIzMA==", "bodyText": "here is the needed kogito.version from deployment.properties", "url": "https://github.com/kiegroup/optaplanner/pull/976#discussion_r507713230", "createdAt": "2020-10-19T12:40:47Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.promote", "diffHunk": "@@ -0,0 +1,282 @@\n+import org.jenkinsci.plugins.workflow.libs.Library\n+@Library('jenkins-pipeline-shared-libraries')_\n+\n+deployProperties = [:]\n+pipelineProperties = [:]\n+\n+pipeline {\n+    agent {\n+        label 'kie-rhel7'\n+    }\n+\n+    tools {\n+        maven 'kie-maven-3.6.2'\n+        jdk 'kie-jdk11'\n+    }\n+    \n+    options {\n+        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '10')\n+    }\n+\n+    parameters {\n+        string(name: 'DISPLAY_NAME', defaultValue: '', description: 'Setup a specific build display name')\n+        \n+        // Deploy job url to retrieve deployment.properties\n+        string(name: 'DEPLOY_BUILD_URL', defaultValue: '', description: 'URL to jenkins deploy build to retrieve the `deployment.properties` file. If base parameters are defined, they will override the `deployment.properties` information')\n+        \n+        // Git information which can override `deployment.properties`\n+        string(name: 'BUILD_BRANCH_NAME', defaultValue: '', description: 'Override `deployment.properties`. Which branch to build? Set if you are not on a multibranch pipeline.')\n+        string(name: 'GIT_AUTHOR', defaultValue: '', description: 'Override `deployment.properties`. Which Git author repository ?')\n+        \n+        // Release information which can override `deployment.properties`\n+        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Override `deployment.properties`. Is this build for a release?')\n+\n+        string(name: 'PROJECT_VERSION', defaultValue: '', description: 'Override `deployment.properties`. Optional if not RELEASE. If RELEASE, cannot be empty.')\n+        string(name: 'KOGITO_VERSION', defaultValue: '', description: 'Optional if not RELEASE. If RELEASE, cannot be empty.')\n+\n+        string(name: 'STAGING_REPO_URL', defaultValue: '', description: 'Override `deployment.properties`.')\n+        string(name: 'GIT_TAG', defaultValue: '', description: 'Git tag to set, if different from PROJECT_VERSION')\n+\n+        // Bot author information. Set as params for easy testing.\n+        string(name: 'BOT_CREDENTIALS_ID', defaultValue: 'bsig-gh-bot', description: 'Credentials for PR creation')\n+\n+        // Main author creds\n+        string(name: 'AUTHOR_CREDS_ID', defaultValue: 'kie-ci', description: 'Credentials for PR merge')\n+        string(name: 'GITHUB_TOKEN_CREDS_ID', defaultValue: 'kie-ci2-token', description: 'GH token to be used with GH CLI')\n+    }\n+\n+    environment {\n+        PROPERTIES_FILE_NAME = 'deployment.properties'\n+        BOT_BRANCH_HASH = \"${util.generateHash(10)}\"\n+        GITHUB_CLI_VERSION = '0.11.1'\n+    }\n+\n+    stages {\n+        stage('Initialization') {\n+            steps {\n+                script {\n+                    cleanWs()\n+                    \n+                    if (params.DISPLAY_NAME != '') {\n+                        currentBuild.displayName = params.DISPLAY_NAME\n+                    }\n+\n+                    readDeployProperties()\n+\n+                    if (isRelease()) {\n+                        assert getProjectVersion() != ''\n+                    }\n+\n+                    installGithubCLI()\n+                }\n+            }\n+        }\n+\n+        stage('Merge OptaPlanner deploy PR and tag') {\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps{\n+                script {\n+                    dir('optaplanner') {\n+                        checkoutRepo('optaplanner')\n+                        mergeAndPush('optaplanner', getDeployPrLink('optaplanner'))\n+                        tagLatest()\n+                    }\n+                }\n+            }\n+        }\n+\n+        stage('Set OptaPlanner next snapshot version'){\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps {\n+                script {\n+                    dir('optaplanner-bot') {\n+                        prepareForPR('optaplanner')\n+\n+                        maven.mvnVersionsSet(getNextSnapshotVersion(getProjectVersion()), true)\n+                        updateKogitoVersion(getNextSnapshotVersion(getKogitoVersion()))\n+\n+                        commitAndCreatePR('optaplanner')\n+                    }\n+                    dir('optaplanner') {\n+                        sh \"git checkout ${getBuildBranch()}\"\n+                        mergeAndPush('optaplanner', getPipelinePrLink('optaplanner'))\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    post {\n+        always {\n+            cleanWs()\n+        }\n+    }\n+}\n+\n+//////////////////////////////////////////////////////////////////////////////\n+// Deployment properties\n+//////////////////////////////////////////////////////////////////////////////\n+\n+void readDeployProperties(){\n+    String deployUrl = params.DEPLOY_BUILD_URL\n+    if (deployUrl != ''){\n+        if(!deployUrl.endsWith('/')){\n+            deployUrl += '/'\n+        }\n+        sh \"wget ${deployUrl}artifact/${PROPERTIES_FILE_NAME} -O ${PROPERTIES_FILE_NAME}\"\n+        deployProperties = readProperties file: PROPERTIES_FILE_NAME\n+        // echo all properties\n+        echo deployProperties.collect{ entry -> \"${entry.key}=${entry.value}\" }.join('\\n')\n+    }\n+}\n+\n+boolean hasDeployProperty(String key){\n+    return deployProperties[key] != null\n+}\n+\n+String getDeployProperty(String key){\n+    if(hasDeployProperty(key)){\n+        return deployProperties[key]\n+    }\n+    return ''\n+}\n+\n+String getParamOrDeployProperty(String paramKey, String deployPropertyKey){\n+    if (params[paramKey] != ''){\n+        return params[paramKey]\n+    }\n+    return getDeployProperty(deployPropertyKey)\n+}\n+\n+//////////////////////////////////////////////////////////////////////////////\n+// Getter / Setter\n+//////////////////////////////////////////////////////////////////////////////\n+\n+boolean isRelease() {\n+    return params.RELEASE || (getDeployProperty('release') == 'true')\n+}\n+\n+String getProjectVersion() {\n+    return getParamOrDeployProperty('PROJECT_VERSION', 'project.version')\n+}\n+\n+String getKogitoVersion() {\n+    return getParamOrDeployProperty('KOGITO_VERSION', 'kogito.version')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71611aedb229a76f3b2d66d547518483b42c6171"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NTI3MTQ4OnYy", "diffSide": "RIGHT", "path": "Jenkinsfile.deploy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMTozOToxMFrOHmdf5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMTozOToxMFrOHmdf5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA5MTIzOQ==", "bodyText": "should add also here the sh \"echo '\\n-Denforcer.skip=true' | tee -a .mvn/maven.config\" command or ?", "url": "https://github.com/kiegroup/optaplanner/pull/976#discussion_r510091239", "createdAt": "2020-10-22T11:39:10Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.deploy", "diffHunk": "@@ -99,7 +99,7 @@ pipeline {\n                 script {\n                     echo 'Setup Maven release config'\n                     configFileProvider([configFile(fileId: maven.getSubmarineSettingsXmlId(), targetLocation: 'maven-settings.xml', variable: 'MAVEN_SETTINGS_FILE')]) {\n-                        sh \"echo '-B -s ${MAVEN_SETTINGS_FILE}' | tee optaplanner/.mvn/maven.config\"\n+                        sh \"echo '\\n-B -s ${MAVEN_SETTINGS_FILE}' | tee -a optaplanner/.mvn/maven.config\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "227c484cabfe3bdec55b1cb9e7c266158cc92c61"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5ODkyMDY3OnYy", "diffSide": "RIGHT", "path": "Jenkinsfile.deploy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNjo0Mzo1OFrOHnAr_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNjo0Mzo1OFrOHnAr_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY2Nzc3NA==", "bodyText": "similar here for the change. See https://github.com/kiegroup/kogito-examples/pull/416/files#diff-102df37262fd32095c3c8ccc12daad8face4939c97eb4a207fba25c1aa0be4a1L285-R284", "url": "https://github.com/kiegroup/optaplanner/pull/976#discussion_r510667774", "createdAt": "2020-10-23T06:43:58Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.deploy", "diffHunk": "@@ -129,6 +249,55 @@ void runMaven(String goals, String directory, boolean skipTests = false, List pr\n         mvnCmd += \" ${extraArgs}\"\n     }\n     dir(directory) {\n-        maven.runMavenWithSubmarineSettings(mvnCmd, skipTests)\n+        if(isRelease()){\n+            // In case of release, we already have the settings.xml\n+            maven.runMaven(mvnCmd, skipTests, ['-fae'])", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9d65f17ea1aa0f4338064b278d8c1fcb2f0cfe9"}, "originalPosition": 223}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4298, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}