{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzNjIxNjY1", "number": 748, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOToxMDoyM1rODx-7wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOToxMjoyOFrODx--wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzM3OTIxOnYy", "diffSide": "RIGHT", "path": "optaplanner-docs/src/main/asciidoc/DroolsScoreCalculation/DroolsScoreCalculation-chapter.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOToxMDoyM1rOGFwwfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOToxMTo0N1rOGFwzsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5NDkxMA==", "bodyText": "\"we\"", "url": "https://github.com/kiegroup/optaplanner/pull/748#discussion_r408694910", "createdAt": "2020-04-15T09:10:23Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-docs/src/main/asciidoc/DroolsScoreCalculation/DroolsScoreCalculation-chapter.adoc", "diffHunk": "@@ -301,3 +301,98 @@ end\n Notice how `addSoftConstraintMatch()` specifies that it's a soft constraint,\n and needs a negative number to penalize each match. Otherwise it would reward such matches.\n The parameter `($capacity - $studentSize)` always results in a negative number because `studentSize > $capacity`.\n+\n+\n+[[testingDroolsConstraints]]\n+== Testing Drools-based constraints\n+\n+Drools-based constraints come with a unit testing harness.\n+To use it, first add a test scoped dependency to the `optaplanner-test` jar to take advantage of the JUnit integration\n+and use the `ScoreVerifier` classes to test score rules in DRL (or a constraint match aware incremental score calculator).\n+For example, suppose we want to test these score rules:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dca3c83183dfcf359c7ea8d94665491fffcb130"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5NTcyOA==", "bodyText": "ah, it's in my old writing. In any case, if you could replace it with \"you\", that would be nice :)", "url": "https://github.com/kiegroup/optaplanner/pull/748#discussion_r408695728", "createdAt": "2020-04-15T09:11:47Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-docs/src/main/asciidoc/DroolsScoreCalculation/DroolsScoreCalculation-chapter.adoc", "diffHunk": "@@ -301,3 +301,98 @@ end\n Notice how `addSoftConstraintMatch()` specifies that it's a soft constraint,\n and needs a negative number to penalize each match. Otherwise it would reward such matches.\n The parameter `($capacity - $studentSize)` always results in a negative number because `studentSize > $capacity`.\n+\n+\n+[[testingDroolsConstraints]]\n+== Testing Drools-based constraints\n+\n+Drools-based constraints come with a unit testing harness.\n+To use it, first add a test scoped dependency to the `optaplanner-test` jar to take advantage of the JUnit integration\n+and use the `ScoreVerifier` classes to test score rules in DRL (or a constraint match aware incremental score calculator).\n+For example, suppose we want to test these score rules:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5NDkxMA=="}, "originalCommit": {"oid": "5dca3c83183dfcf359c7ea8d94665491fffcb130"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzM4Njg4OnYy", "diffSide": "RIGHT", "path": "optaplanner-docs/src/main/asciidoc/DroolsScoreCalculation/DroolsScoreCalculation-chapter.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOToxMjoyOFrOGFw1OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOToxMjoyOFrOGFw1OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5NjEyMQ==", "bodyText": "\"we have a ...\" -> \"create a ...\"", "url": "https://github.com/kiegroup/optaplanner/pull/748#discussion_r408696121", "createdAt": "2020-04-15T09:12:28Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-docs/src/main/asciidoc/DroolsScoreCalculation/DroolsScoreCalculation-chapter.adoc", "diffHunk": "@@ -301,3 +301,98 @@ end\n Notice how `addSoftConstraintMatch()` specifies that it's a soft constraint,\n and needs a negative number to penalize each match. Otherwise it would reward such matches.\n The parameter `($capacity - $studentSize)` always results in a negative number because `studentSize > $capacity`.\n+\n+\n+[[testingDroolsConstraints]]\n+== Testing Drools-based constraints\n+\n+Drools-based constraints come with a unit testing harness.\n+To use it, first add a test scoped dependency to the `optaplanner-test` jar to take advantage of the JUnit integration\n+and use the `ScoreVerifier` classes to test score rules in DRL (or a constraint match aware incremental score calculator).\n+For example, suppose we want to test these score rules:\n+\n+[source,options=\"nowrap\"]\n+----\n+global HardSoftScoreHolder scoreHolder;\n+\n+rule \"requiredCpuPowerTotal\"\n+    when\n+        ...\n+    then\n+        scoreHolder.addHardConstraintMatch(...);\n+end\n+\n+...\n+\n+rule \"computerCost\"\n+    when\n+        ...\n+    then\n+        scoreHolder.addSoftConstraintMatch(...);\n+end\n+----\n+\n+For each score rule, we have a separate `@Test` that only tests the effect of that score rule on the score:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dca3c83183dfcf359c7ea8d94665491fffcb130"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4489, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}