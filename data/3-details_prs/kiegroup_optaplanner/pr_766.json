{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyMDA0MDQ0", "number": 766, "title": "Apply Quarkus code style", "bodyText": "", "createdAt": "2020-05-01T06:25:57Z", "url": "https://github.com/kiegroup/optaplanner/pull/766", "merged": true, "mergeCommit": {"oid": "e5018ee28beaf3552c11cd0bc5371d68f55ae6a4"}, "closed": true, "closedAt": "2020-05-01T16:39:10Z", "author": {"login": "rsynek"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcc7J4MgH2gAyNDEyMDA0MDQ0OmIxYzRhYzNiM2RhZmMwMDg3OThjMTcyYzFkYWQ3NGNhNGJmMGY1MGY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcgizWRgFqTQwOTk1Nzc5Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b1c4ac3b3dafc008798c172c1dad74ca4bf0f50f", "author": {"user": {"login": "rsynek", "name": "Radovan Synek"}}, "url": "https://github.com/kiegroup/optaplanner/commit/b1c4ac3b3dafc008798c172c1dad74ca4bf0f50f", "committedDate": "2020-05-01T05:51:09Z", "message": "Enable the formatter maven plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e99f48ba83718cc49cabf0a7494ad767fec3250", "author": {"user": {"login": "rsynek", "name": "Radovan Synek"}}, "url": "https://github.com/kiegroup/optaplanner/commit/8e99f48ba83718cc49cabf0a7494ad767fec3250", "committedDate": "2020-05-01T06:23:46Z", "message": "Apply Quarkus code style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24ca17c70fae70ba6a9d8a188cf33eba68da2f32", "author": {"user": {"login": "rsynek", "name": "Radovan Synek"}}, "url": "https://github.com/kiegroup/optaplanner/commit/24ca17c70fae70ba6a9d8a188cf33eba68da2f32", "committedDate": "2020-05-01T09:10:24Z", "message": "Enforce LF as the newline character"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MjE1NjE2", "url": "https://github.com/kiegroup/optaplanner/pull/766#pullrequestreview-404215616", "createdAt": "2020-05-01T15:15:43Z", "commit": {"oid": "24ca17c70fae70ba6a9d8a188cf33eba68da2f32"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNToxNTo0M1rOGPMeuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNToxNTo0M1rOGPMeuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU4NjI5Ng==", "bodyText": "I highly recommend to eliminate the trailing space. Trailing spaces are a style-smell, I would say. Git highlights it as an error when displaying a diff. IDEs can be configured to automatically strip off trailing white space on save.\nI know this is a result of applying the maven plugin and I'd argue it's a bug. But note that it won't reintroduce the trailing white space if the Javadoc is already formatted correctly and contains the blank line after description.", "url": "https://github.com/kiegroup/optaplanner/pull/766#discussion_r418586296", "createdAt": "2020-05-01T15:15:43Z", "author": {"login": "yurloc"}, "path": "optaplanner-benchmark/src/main/java/org/optaplanner/benchmark/api/PlannerBenchmarkFactory.java", "diffHunk": "@@ -51,8 +51,9 @@\n      * The XML root element must be {@code <solver>}.\n      * <p>\n      * To read an XML benchmark configuration instead, use {@link #createFromXmlResource(String)}.\n+     * ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24ca17c70fae70ba6a9d8a188cf33eba68da2f32"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MjM2ODA1", "url": "https://github.com/kiegroup/optaplanner/pull/766#pullrequestreview-404236805", "createdAt": "2020-05-01T15:52:55Z", "commit": {"oid": "f0ddb746db7a702eb14b7ba3fcdf6a7b38d9646e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "105604b01fb7aef1262eb3e13a2525c0638d78f9", "author": {"user": {"login": "rsynek", "name": "Radovan Synek"}}, "url": "https://github.com/kiegroup/optaplanner/commit/105604b01fb7aef1262eb3e13a2525c0638d78f9", "committedDate": "2020-05-01T16:01:08Z", "message": "Get rid of trailing spaces in javadoc"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f0ddb746db7a702eb14b7ba3fcdf6a7b38d9646e", "author": {"user": {"login": "rsynek", "name": "Radovan Synek"}}, "url": "https://github.com/kiegroup/optaplanner/commit/f0ddb746db7a702eb14b7ba3fcdf6a7b38d9646e", "committedDate": "2020-05-01T15:31:12Z", "message": "Get rid of trailing spaces in javadoc"}, "afterCommit": {"oid": "105604b01fb7aef1262eb3e13a2525c0638d78f9", "author": {"user": {"login": "rsynek", "name": "Radovan Synek"}}, "url": "https://github.com/kiegroup/optaplanner/commit/105604b01fb7aef1262eb3e13a2525c0638d78f9", "committedDate": "2020-05-01T16:01:08Z", "message": "Get rid of trailing spaces in javadoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0Mjk4ODMx", "url": "https://github.com/kiegroup/optaplanner/pull/766#pullrequestreview-404298831", "createdAt": "2020-05-01T17:46:14Z", "commit": {"oid": "105604b01fb7aef1262eb3e13a2525c0638d78f9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNzo0NjoxNFrOGPQpag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNzo0NjoxNFrOGPQpag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY1NDU3MA==", "bodyText": "Not nice (especially the space inside brackets).", "url": "https://github.com/kiegroup/optaplanner/pull/766#discussion_r418654570", "createdAt": "2020-05-01T17:46:14Z", "author": {"login": "yurloc"}, "path": "optaplanner-benchmark/src/main/java/org/optaplanner/benchmark/impl/DefaultPlannerBenchmark.java", "diffHunk": "@@ -250,10 +252,11 @@ private void warmUp(Map<Future<SubSingleBenchmarkRunner>, SubSingleBenchmarkRunn\n                 }\n             }\n \n-            SolverBenchmarkResult solverBenchmarkResult = subSingleBenchmarkRunner.getSubSingleBenchmarkResult().getSingleBenchmarkResult().getSolverBenchmarkResult();\n+            SolverBenchmarkResult solverBenchmarkResult = subSingleBenchmarkRunner.getSubSingleBenchmarkResult()\n+                    .getSingleBenchmarkResult().getSolverBenchmarkResult();\n             long timeLeftInCycle = timePhaseEnd - System.currentTimeMillis();\n             if (timeLeftInCycle > 0L) {\n-                SolverBenchmarkResult[] solverBenchmarkResultSingleton = new SolverBenchmarkResult[]{solverBenchmarkResult};\n+                SolverBenchmarkResult[] solverBenchmarkResultSingleton = new SolverBenchmarkResult[] { solverBenchmarkResult };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "105604b01fb7aef1262eb3e13a2525c0638d78f9"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MzAwOTA0", "url": "https://github.com/kiegroup/optaplanner/pull/766#pullrequestreview-404300904", "createdAt": "2020-05-01T17:49:59Z", "commit": {"oid": "105604b01fb7aef1262eb3e13a2525c0638d78f9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNzo0OTo1OVrOGPQwTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNzo0OTo1OVrOGPQwTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY1NjMzMg==", "bodyText": "Another example of the unexpected space inside brackets.", "url": "https://github.com/kiegroup/optaplanner/pull/766#discussion_r418656332", "createdAt": "2020-05-01T17:49:59Z", "author": {"login": "yurloc"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/domain/solution/PlanningScore.java", "diffHunk": "@@ -35,7 +35,7 @@\n  * This property is modified by the {@link Solver},\n  * every time when the {@link Score} of this {@link PlanningSolution} has been calculated.\n  */\n-@Target({METHOD, FIELD})\n+@Target({ METHOD, FIELD })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "105604b01fb7aef1262eb3e13a2525c0638d78f9"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MzA0NTEx", "url": "https://github.com/kiegroup/optaplanner/pull/766#pullrequestreview-404304511", "createdAt": "2020-05-01T17:56:33Z", "commit": {"oid": "105604b01fb7aef1262eb3e13a2525c0638d78f9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNzo1NjozM1rOGPQ8nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNzo1NjozM1rOGPQ8nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY1OTQ4Nw==", "bodyText": "The style allows lines longer than 120 chars -> GitHub diff windows with scrollbars.", "url": "https://github.com/kiegroup/optaplanner/pull/766#discussion_r418659487", "createdAt": "2020-05-01T17:56:33Z", "author": {"login": "yurloc"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/holder/AbstractScoreHolder.java", "diffHunk": "@@ -114,15 +115,16 @@ public void configureConstraintWeight(Rule rule, Score_ constraintWeight) {\n      * Requires @{@link OptaPlannerRuleEventListener} to be added as event listener on {@link KieSession}, otherwise the\n      * score changes caused by the constraint matches would not be undone. See\n      * {@link DroolsScoreDirector#resetKieSession()} for an example.\n+     *\n      * @param kcontext The rule for which to register the match.\n      * @param constraintUndoListener The operation to run to undo the match.\n      * @param scoreSupplier The score change to be undone when constraint justification enabled.\n      */\n     protected void registerConstraintMatch(RuleContext kcontext,\n             final Runnable constraintUndoListener, Supplier<Score_> scoreSupplier) {\n         AgendaItem<?> agendaItem = (AgendaItem) kcontext.getMatch();\n-        ConstraintActivationUnMatchListener constraintActivationUnMatchListener\n-                = new ConstraintActivationUnMatchListener(constraintUndoListener);\n+        ConstraintActivationUnMatchListener constraintActivationUnMatchListener = new ConstraintActivationUnMatchListener(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "105604b01fb7aef1262eb3e13a2525c0638d78f9"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MzA5Mzg4", "url": "https://github.com/kiegroup/optaplanner/pull/766#pullrequestreview-404309388", "createdAt": "2020-05-01T18:05:01Z", "commit": {"oid": "105604b01fb7aef1262eb3e13a2525c0638d78f9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxODowNTowMVrOGPRMCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxODowNTowMVrOGPRMCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY2MzQzNA==", "bodyText": "Not nice. And it violates Checkstyle's GenericWhitespace.", "url": "https://github.com/kiegroup/optaplanner/pull/766#discussion_r418663434", "createdAt": "2020-05-01T18:05:01Z", "author": {"login": "yurloc"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/config/domain/ReflectionsWorkaroundClasspathHelper.java", "diffHunk": "@@ -203,7 +203,7 @@ public static URL forClass(Class<?> aClass, ClassLoader... classLoaders) {\n                 if (classLoader instanceof URLClassLoader) {\n                     URL[] urls = ((URLClassLoader) classLoader).getURLs();\n                     if (urls != null) {\n-                        result.addAll(Sets.<URL>newHashSet(urls));\n+                        result.addAll(Sets.<URL> newHashSet(urls));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "105604b01fb7aef1262eb3e13a2525c0638d78f9"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MzE2MDY0", "url": "https://github.com/kiegroup/optaplanner/pull/766#pullrequestreview-404316064", "createdAt": "2020-05-01T18:17:11Z", "commit": {"oid": "105604b01fb7aef1262eb3e13a2525c0638d78f9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxODoxNzoxMVrOGPRgmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxODoxNzoxMVrOGPRgmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY2ODY5Nw==", "bodyText": "Impossible to break line around assignment operator -> forces to violate line length limit.", "url": "https://github.com/kiegroup/optaplanner/pull/766#discussion_r418668697", "createdAt": "2020-05-01T18:17:11Z", "author": {"login": "yurloc"}, "path": "optaplanner-examples/src/test/java/org/optaplanner/examples/vehiclerouting/optional/score/VehicleRoutingConstraintProviderTest.java", "diffHunk": "@@ -30,8 +30,8 @@\n \n public class VehicleRoutingConstraintProviderTest {\n \n-    private final ConstraintVerifier<VehicleRoutingConstraintProvider, VehicleRoutingSolution> constraintVerifier\n-            = ConstraintVerifier.build(new VehicleRoutingConstraintProvider(),\n+    private final ConstraintVerifier<VehicleRoutingConstraintProvider, VehicleRoutingSolution> constraintVerifier = ConstraintVerifier", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "105604b01fb7aef1262eb3e13a2525c0638d78f9"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5OTM3OTM2", "url": "https://github.com/kiegroup/optaplanner/pull/766#pullrequestreview-409937936", "createdAt": "2020-05-12T11:14:04Z", "commit": {"oid": "105604b01fb7aef1262eb3e13a2525c0638d78f9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMToxNDowNFrOGUBuQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMToxNDowNFrOGUBuQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY1MjkzMA==", "bodyText": "@rsynek Example of removing \"manual\" line break.", "url": "https://github.com/kiegroup/optaplanner/pull/766#discussion_r423652930", "createdAt": "2020-05-12T11:14:04Z", "author": {"login": "yurloc"}, "path": "optaplanner-benchmark/src/main/java/org/optaplanner/benchmark/impl/report/BenchmarkReport.java", "diffHunk": "@@ -739,8 +755,7 @@ private XYItemRenderer createScalabilityPlotRenderer(NumberFormat numberFormat)\n         XYItemRenderer renderer = new StandardXYItemRenderer(StandardXYItemRenderer.SHAPES_AND_LINES);\n         // Use dashed line\n         renderer.setSeriesStroke(0, new BasicStroke(\n-                1.0f, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND, 1.0f, new float[] {2.0f, 6.0f}, 0.0f\n-        ));\n+                1.0f, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND, 1.0f, new float[] { 2.0f, 6.0f }, 0.0f));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "105604b01fb7aef1262eb3e13a2525c0638d78f9"}, "originalPosition": 159}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5OTM5MjI5", "url": "https://github.com/kiegroup/optaplanner/pull/766#pullrequestreview-409939229", "createdAt": "2020-05-12T11:16:01Z", "commit": {"oid": "105604b01fb7aef1262eb3e13a2525c0638d78f9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMToxNjowMVrOGUBySA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMToxNjowMVrOGUBySA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY1Mzk2MA==", "bodyText": "@rsynek Example of removing \"manual\" line break.", "url": "https://github.com/kiegroup/optaplanner/pull/766#discussion_r423653960", "createdAt": "2020-05-12T11:16:01Z", "author": {"login": "yurloc"}, "path": "optaplanner-benchmark/src/main/java/org/optaplanner/benchmark/impl/statistic/movecountperstep/MoveCountPerStepSubSingleStatistic.java", "diffHunk": "@@ -64,8 +64,7 @@ public void stepEnded(AbstractStepScope<Solution_> stepScope) {\n         private void localSearchStepEnded(LocalSearchStepScope<Solution_> stepScope) {\n             long timeMillisSpent = stepScope.getPhaseScope().calculateSolverTimeMillisSpentUpToNow();\n             pointList.add(new MoveCountPerStepStatisticPoint(timeMillisSpent,\n-                    new MoveCountPerStepMeasurement(stepScope.getAcceptedMoveCount(), stepScope.getSelectedMoveCount())\n-            ));\n+                    new MoveCountPerStepMeasurement(stepScope.getAcceptedMoveCount(), stepScope.getSelectedMoveCount())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "105604b01fb7aef1262eb3e13a2525c0638d78f9"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5OTQyMTc0", "url": "https://github.com/kiegroup/optaplanner/pull/766#pullrequestreview-409942174", "createdAt": "2020-05-12T11:20:33Z", "commit": {"oid": "105604b01fb7aef1262eb3e13a2525c0638d78f9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMToyMDozNFrOGUB7oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMToyMDozNFrOGUB7oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY1NjM1Mg==", "bodyText": "@rsynek Another example of removing \"manual\" line break of a different type. It's impossible to insert a line break anywhere on this line other than inside the parentheses around method parameters.", "url": "https://github.com/kiegroup/optaplanner/pull/766#discussion_r423656352", "createdAt": "2020-05-12T11:20:34Z", "author": {"login": "yurloc"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/domain/entity/PlanningEntity.java", "diffHunk": "@@ -68,25 +69,28 @@\n      * Process B (1GB RAM), Process A (2GB RAM), Process C (7GB RAM),\n      * <p>\n      * Do not use together with {@link #difficultyWeightFactoryClass()}.\n+     *\n      * @return {@link NullDifficultyComparator} when it is null (workaround for annotation limitation)\n      * @see #difficultyWeightFactoryClass()\n      */\n     Class<? extends Comparator> difficultyComparatorClass() default NullDifficultyComparator.class;\n \n     /** Workaround for annotation limitation in {@link #difficultyComparatorClass()}. */\n-    interface NullDifficultyComparator extends Comparator {}\n+    interface NullDifficultyComparator extends Comparator {\n+    }\n \n     /**\n      * The {@link SelectionSorterWeightFactory} alternative for {@link #difficultyComparatorClass()}.\n      * <p>\n      * Do not use together with {@link #difficultyComparatorClass()}.\n+     *\n      * @return {@link NullDifficultyWeightFactory} when it is null (workaround for annotation limitation)\n      * @see #difficultyComparatorClass()\n      */\n-    Class<? extends SelectionSorterWeightFactory> difficultyWeightFactoryClass()\n-            default NullDifficultyWeightFactory.class;\n+    Class<? extends SelectionSorterWeightFactory> difficultyWeightFactoryClass() default NullDifficultyWeightFactory.class;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "105604b01fb7aef1262eb3e13a2525c0638d78f9"}, "originalPosition": 72}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5OTQ3MDc4", "url": "https://github.com/kiegroup/optaplanner/pull/766#pullrequestreview-409947078", "createdAt": "2020-05-12T11:27:55Z", "commit": {"oid": "105604b01fb7aef1262eb3e13a2525c0638d78f9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMToyNzo1NVrOGUCK1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMToyNzo1NVrOGUCK1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY2MDI0NA==", "bodyText": "@rsynek Example of removing \"manual\" line break of different type. It's not allowed to break line around the arrow token.", "url": "https://github.com/kiegroup/optaplanner/pull/766#discussion_r423660244", "createdAt": "2020-05-12T11:27:55Z", "author": {"login": "yurloc"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/buildin/hardmediumsoftbigdecimal/HardMediumSoftBigDecimalScoreHolder.java", "diffHunk": "@@ -64,29 +64,32 @@ public void configureConstraintWeight(Rule rule, HardMediumSoftBigDecimalScore c\n         super.configureConstraintWeight(rule, constraintWeight);\n         BiConsumer<RuleContext, BigDecimal> matchExecutor;\n         if (constraintWeight.equals(HardMediumSoftBigDecimalScore.ZERO)) {\n-            matchExecutor = (RuleContext kcontext, BigDecimal matchWeight) -> {};\n-        } else if (constraintWeight.getMediumScore().equals(BigDecimal.ZERO) && constraintWeight.getSoftScore().equals(BigDecimal.ZERO)) {\n-            matchExecutor = (RuleContext kcontext, BigDecimal matchWeight)\n-                    -> addHardConstraintMatch(kcontext, constraintWeight.getHardScore().multiply(matchWeight));\n-        } else if (constraintWeight.getHardScore().equals(BigDecimal.ZERO) && constraintWeight.getSoftScore().equals(BigDecimal.ZERO)) {\n-            matchExecutor = (RuleContext kcontext, BigDecimal matchWeight)\n-                    -> addMediumConstraintMatch(kcontext, constraintWeight.getMediumScore().multiply(matchWeight));\n-        } else if (constraintWeight.getHardScore().equals(BigDecimal.ZERO) && constraintWeight.getMediumScore().equals(BigDecimal.ZERO)) {\n-            matchExecutor = (RuleContext kcontext, BigDecimal matchWeight)\n-                    -> addSoftConstraintMatch(kcontext, constraintWeight.getSoftScore().multiply(matchWeight));\n+            matchExecutor = (RuleContext kcontext, BigDecimal matchWeight) -> {\n+            };\n+        } else if (constraintWeight.getMediumScore().equals(BigDecimal.ZERO)\n+                && constraintWeight.getSoftScore().equals(BigDecimal.ZERO)) {\n+            matchExecutor = (RuleContext kcontext, BigDecimal matchWeight) -> addHardConstraintMatch(kcontext,\n+                    constraintWeight.getHardScore().multiply(matchWeight));\n+        } else if (constraintWeight.getHardScore().equals(BigDecimal.ZERO)\n+                && constraintWeight.getSoftScore().equals(BigDecimal.ZERO)) {\n+            matchExecutor = (RuleContext kcontext, BigDecimal matchWeight) -> addMediumConstraintMatch(kcontext,\n+                    constraintWeight.getMediumScore().multiply(matchWeight));\n+        } else if (constraintWeight.getHardScore().equals(BigDecimal.ZERO)\n+                && constraintWeight.getMediumScore().equals(BigDecimal.ZERO)) {\n+            matchExecutor = (RuleContext kcontext, BigDecimal matchWeight) -> addSoftConstraintMatch(kcontext,\n+                    constraintWeight.getSoftScore().multiply(matchWeight));\n         } else {\n-            matchExecutor = (RuleContext kcontext, BigDecimal matchWeight)\n-                    -> addMultiConstraintMatch(kcontext,\n+            matchExecutor = (RuleContext kcontext, BigDecimal matchWeight) -> addMultiConstraintMatch(kcontext,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "105604b01fb7aef1262eb3e13a2525c0638d78f9"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5OTUyNTk0", "url": "https://github.com/kiegroup/optaplanner/pull/766#pullrequestreview-409952594", "createdAt": "2020-05-12T11:36:33Z", "commit": {"oid": "105604b01fb7aef1262eb3e13a2525c0638d78f9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMTozNjozNFrOGUCbfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMTozNjozNFrOGUCbfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY2NDUwOA==", "bodyText": "Another nice example. Impossible not to break line length limit here.", "url": "https://github.com/kiegroup/optaplanner/pull/766#discussion_r423664508", "createdAt": "2020-05-12T11:36:34Z", "author": {"login": "yurloc"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/ConstraintCollectors.java", "diffHunk": "@@ -1724,8 +1758,7 @@ public void remove(Key key, Value value) {\n      * @param <ValueSet> type of the value set\n      * @return never null\n      */\n-    public static <A, B, C, D, Key extends Comparable<Key>, Value, ValueSet extends Set<Value>>\n-    QuadConstraintCollector<A, B, C, D, ?, SortedMap<Key, ValueSet>> toSortedMap(\n+    public static <A, B, C, D, Key extends Comparable<Key>, Value, ValueSet extends Set<Value>> QuadConstraintCollector<A, B, C, D, ?, SortedMap<Key, ValueSet>> toSortedMap(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "105604b01fb7aef1262eb3e13a2525c0638d78f9"}, "originalPosition": 567}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5OTU3Nzk2", "url": "https://github.com/kiegroup/optaplanner/pull/766#pullrequestreview-409957796", "createdAt": "2020-05-12T11:44:31Z", "commit": {"oid": "105604b01fb7aef1262eb3e13a2525c0638d78f9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMTo0NDozMVrOGUCrAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMTo0NDozMVrOGUCrAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY2ODQ4MQ==", "bodyText": "@rsynek Another example. This doesn't look harmful but it's a different type of place where breaking a line is not allowed.", "url": "https://github.com/kiegroup/optaplanner/pull/766#discussion_r423668481", "createdAt": "2020-05-12T11:44:31Z", "author": {"login": "yurloc"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/domain/solution/cloner/FieldAccessingSolutionCloner.java", "diffHunk": "@@ -419,33 +423,32 @@ protected Object cloneArray(Class<?> expectedType, Object originalArray) {\n \n         /**\n          * Fails fast if {@link #isFieldAnEntityPropertyOnSolution} assumptions were wrong.\n+         *\n          * @param originalSolution never null\n          * @param cloneSolution never null\n          */\n         protected void validateCloneSolution(Solution_ originalSolution, Solution_ cloneSolution) {\n-            for (MemberAccessor memberAccessor\n-                    : solutionDescriptor.getEntityMemberAccessorMap().values()) {\n+            for (MemberAccessor memberAccessor : solutionDescriptor.getEntityMemberAccessorMap().values()) {\n                 Object originalProperty = memberAccessor.executeGetter(originalSolution);\n                 if (originalProperty != null) {\n                     Object cloneProperty = memberAccessor.executeGetter(cloneSolution);\n                     if (originalProperty == cloneProperty) {\n                         throw new IllegalStateException(\n                                 \"The solutionProperty (\" + memberAccessor.getName() + \") was not cloned as expected.\"\n-                                + \" The \" + FieldAccessingSolutionCloner.class.getSimpleName() + \" failed to recognize\"\n-                                + \" that property's field, probably because its field name is different.\");\n+                                        + \" The \" + FieldAccessingSolutionCloner.class.getSimpleName() + \" failed to recognize\"\n+                                        + \" that property's field, probably because its field name is different.\");\n                     }\n                 }\n             }\n-            for (MemberAccessor memberAccessor\n-                    : solutionDescriptor.getEntityCollectionMemberAccessorMap().values()) {\n+            for (MemberAccessor memberAccessor : solutionDescriptor.getEntityCollectionMemberAccessorMap().values()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "105604b01fb7aef1262eb3e13a2525c0638d78f9"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2965, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}