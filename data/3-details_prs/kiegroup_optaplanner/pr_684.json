{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0MzAxODM4", "number": 684, "title": "PLANNER-1613 toList() and toSet() constraint collectors", "bodyText": "This is a simple \"last resort\" collector for when our other collectors are insufficient. People can always retrieve a collection of the facts, and perform whatever operation they want on them afterwards.\nWIthout providing this functionality, people would have to resort to submitting feature requests and be blocked before we implement them.", "createdAt": "2020-02-12T13:15:44Z", "url": "https://github.com/kiegroup/optaplanner/pull/684", "merged": true, "mergeCommit": {"oid": "82ace222dce89650d8a1600420886f913d7384aa"}, "closed": true, "closedAt": "2020-02-13T18:38:36Z", "author": {"login": "triceo"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcDl_whgH2gAyMzc0MzAxODM4Ojc3NzA4MDExZTA3MmJkMzc4YzJjZmExODY1ZjQzNTZkNmNhODNhOGE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcD-kLSgH2gAyMzc0MzAxODM4OjYyY2JlMjEzOWNiMmE4ZGJhZGNiMDFkMjdlNjk0NGNkYjQ5YTBjNTU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "77708011e072bd378c2cfa1865f4356d6ca83a8a", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/77708011e072bd378c2cfa1865f4356d6ca83a8a", "committedDate": "2020-02-12T13:03:59Z", "message": "PLANNER-1613 toList() and toSet() constraint collectors"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "595d2c6949ddcc4a88a7c140d1f53bcc53b4e549", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/595d2c6949ddcc4a88a7c140d1f53bcc53b4e549", "committedDate": "2020-02-12T13:53:55Z", "message": "PLANNER-1613 Documentation: toList() and toSet() constraint collectors"}, "afterCommit": {"oid": "3b1c7844c2238bdb888062ed13766ee50b0e79b4", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/3b1c7844c2238bdb888062ed13766ee50b0e79b4", "committedDate": "2020-02-12T13:56:16Z", "message": "PLANNER-1613 Documentation: toList() and toSet() constraint collectors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b16506510308d0ffb3826ecd7c33e37acea7ea39", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/b16506510308d0ffb3826ecd7c33e37acea7ea39", "committedDate": "2020-02-12T13:59:01Z", "message": "PLANNER-1613 Documentation: toList() and toSet() constraint collectors"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3b1c7844c2238bdb888062ed13766ee50b0e79b4", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/3b1c7844c2238bdb888062ed13766ee50b0e79b4", "committedDate": "2020-02-12T13:56:16Z", "message": "PLANNER-1613 Documentation: toList() and toSet() constraint collectors"}, "afterCommit": {"oid": "b16506510308d0ffb3826ecd7c33e37acea7ea39", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/b16506510308d0ffb3826ecd7c33e37acea7ea39", "committedDate": "2020-02-12T13:59:01Z", "message": "PLANNER-1613 Documentation: toList() and toSet() constraint collectors"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4MTEzMTQ3", "url": "https://github.com/kiegroup/optaplanner/pull/684#pullrequestreview-358113147", "createdAt": "2020-02-13T10:38:55Z", "commit": {"oid": "b16506510308d0ffb3826ecd7c33e37acea7ea39"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMDozODo1NlrOFpO2ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMDozODo1NlrOFpO2ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc3OTI0Mg==", "bodyText": "avoid future tense.\n-> \"that returns\"", "url": "https://github.com/kiegroup/optaplanner/pull/684#discussion_r378779242", "createdAt": "2020-02-13T10:38:56Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/ConstraintCollectors.java", "diffHunk": "@@ -554,4 +561,171 @@ private static Runnable innerCountDistinctLong(CountDistinctLongResultContainer\n     private ConstraintCollectors() {\n     }\n \n+    // ************************************************************************\n+    // toCollection\n+    // ************************************************************************\n+\n+    /**\n+     * Creates constraint collector that will return matched facts as a collection.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b16506510308d0ffb3826ecd7c33e37acea7ea39"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4MTEzNzU1", "url": "https://github.com/kiegroup/optaplanner/pull/684#pullrequestreview-358113755", "createdAt": "2020-02-13T10:39:50Z", "commit": {"oid": "b16506510308d0ffb3826ecd7c33e37acea7ea39"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMDozOTo1MFrOFpO4cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMDozOTo1MFrOFpO4cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc3OTc2MA==", "bodyText": "Do we need toCollection? When in doubt leave it out. I 'd rather start with just toSet() and toList() until someone complains of the lack of toCollection(). Wdyt?", "url": "https://github.com/kiegroup/optaplanner/pull/684#discussion_r378779760", "createdAt": "2020-02-13T10:39:50Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/ConstraintCollectors.java", "diffHunk": "@@ -554,4 +561,171 @@ private static Runnable innerCountDistinctLong(CountDistinctLongResultContainer\n     private ConstraintCollectors() {\n     }\n \n+    // ************************************************************************\n+    // toCollection\n+    // ************************************************************************\n+\n+    /**\n+     * Creates constraint collector that will return matched facts as a collection.\n+     *\n+     * @param collectionFunction never null, provides new instance of the target collection with given initial capacity\n+     * @param <A> type of the matched fact, matching the type of elements in the resulting collection\n+     * @param <Result> type of the target collection\n+     * @return never null\n+     */\n+    public static <A, Result extends Collection<A>> UniConstraintCollector<A, ?, Result> toCollection(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b16506510308d0ffb3826ecd7c33e37acea7ea39"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4MTE0MTUx", "url": "https://github.com/kiegroup/optaplanner/pull/684#pullrequestreview-358114151", "createdAt": "2020-02-13T10:40:27Z", "commit": {"oid": "b16506510308d0ffb3826ecd7c33e37acea7ea39"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMDo0MDoyN1rOFpO5rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMDo0MDoyN1rOFpO5rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc4MDA3Nw==", "bodyText": "javadocs :)\nEspecially for toList() as that's the main one.", "url": "https://github.com/kiegroup/optaplanner/pull/684#discussion_r378780077", "createdAt": "2020-02-13T10:40:27Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/ConstraintCollectors.java", "diffHunk": "@@ -554,4 +561,171 @@ private static Runnable innerCountDistinctLong(CountDistinctLongResultContainer\n     private ConstraintCollectors() {\n     }\n \n+    // ************************************************************************\n+    // toCollection\n+    // ************************************************************************\n+\n+    /**\n+     * Creates constraint collector that will return matched facts as a collection.\n+     *\n+     * @param collectionFunction never null, provides new instance of the target collection with given initial capacity\n+     * @param <A> type of the matched fact, matching the type of elements in the resulting collection\n+     * @param <Result> type of the target collection\n+     * @return never null\n+     */\n+    public static <A, Result extends Collection<A>> UniConstraintCollector<A, ?, Result> toCollection(\n+            IntFunction<Result> collectionFunction) {\n+        return toCollection(Function.identity(), collectionFunction);\n+    }\n+\n+    public static <A> UniConstraintCollector<A, ?, Set<A>> toSet() {\n+        return toSet(Function.identity());\n+    }\n+\n+    public static <A> UniConstraintCollector<A, ?, List<A>> toList() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b16506510308d0ffb3826ecd7c33e37acea7ea39"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4MTE1NDUy", "url": "https://github.com/kiegroup/optaplanner/pull/684#pullrequestreview-358115452", "createdAt": "2020-02-13T10:42:20Z", "commit": {"oid": "b16506510308d0ffb3826ecd7c33e37acea7ea39"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMDo0MjoyMFrOFpO9pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMDo0MjoyMFrOFpO9pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc4MTA5Mw==", "bodyText": "Thinking aloud: The method name doesn't indicate it's used as the undo operation.\nHow about calling it to undoToCollection?", "url": "https://github.com/kiegroup/optaplanner/pull/684#discussion_r378781093", "createdAt": "2020-02-13T10:42:20Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/ConstraintCollectors.java", "diffHunk": "@@ -554,4 +561,171 @@ private static Runnable innerCountDistinctLong(CountDistinctLongResultContainer\n     private ConstraintCollectors() {\n     }\n \n+    // ************************************************************************\n+    // toCollection\n+    // ************************************************************************\n+\n+    /**\n+     * Creates constraint collector that will return matched facts as a collection.\n+     *\n+     * @param collectionFunction never null, provides new instance of the target collection with given initial capacity\n+     * @param <A> type of the matched fact, matching the type of elements in the resulting collection\n+     * @param <Result> type of the target collection\n+     * @return never null\n+     */\n+    public static <A, Result extends Collection<A>> UniConstraintCollector<A, ?, Result> toCollection(\n+            IntFunction<Result> collectionFunction) {\n+        return toCollection(Function.identity(), collectionFunction);\n+    }\n+\n+    public static <A> UniConstraintCollector<A, ?, Set<A>> toSet() {\n+        return toSet(Function.identity());\n+    }\n+\n+    public static <A> UniConstraintCollector<A, ?, List<A>> toList() {\n+        return toList(Function.identity());\n+    }\n+\n+    /**\n+     * Creates constraint collector that will return a collection of the given type.\n+     *\n+     * @param mappingFunction never null, converts matched facts to elements of the resulting collection\n+     * @param collectionFunction never null, provides new instance of the target collection with given initial capacity\n+     * @param <A> type of the matched fact\n+     * @param <Mapped> type of elements in the resulting collection\n+     * @param <Result> type of the resulting collection\n+     * @return never null\n+     */\n+    public static <A, Mapped, Result extends Collection<Mapped>> UniConstraintCollector<A, ?, Result> toCollection(\n+            Function<A, Mapped> mappingFunction, IntFunction<Result> collectionFunction) {\n+        return new DefaultUniConstraintCollector<>(\n+                (Supplier<List<Mapped>>) ArrayList::new,\n+                (resultContainer, a) -> {\n+                    Mapped mapped = mappingFunction.apply(a);\n+                    resultContainer.add(mapped);\n+                    return () -> resultContainer.remove(mapped);\n+                },\n+                resultContainer -> finishToCollection(collectionFunction, resultContainer));\n+    }\n+\n+    private static <Mapped, Container extends List<Mapped>, Result extends Collection<Mapped>> Result\n+    finishToCollection(IntFunction<Result> collectionFunction, Container resultContainer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b16506510308d0ffb3826ecd7c33e37acea7ea39"}, "originalPosition": 74}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62cbe2139cb2a8dbadcb01d27e6944cdb49a0c55", "author": {"user": {"login": "triceo", "name": "Luk\u00e1\u0161 Petrovick\u00fd"}}, "url": "https://github.com/kiegroup/optaplanner/commit/62cbe2139cb2a8dbadcb01d27e6944cdb49a0c55", "committedDate": "2020-02-13T17:41:29Z", "message": "Fix Javadocs"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3087, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}