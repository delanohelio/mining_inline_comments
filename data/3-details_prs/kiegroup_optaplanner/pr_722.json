{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5ODYwNjE0", "number": 722, "title": "PLANNER-1894 SolverManager.terminateEarly() fix", "bodyText": "https://issues.redhat.com/browse/PLANNER-1894", "createdAt": "2020-03-17T14:11:10Z", "url": "https://github.com/kiegroup/optaplanner/pull/722", "merged": true, "mergeCommit": {"oid": "0664dbc94a8722abd17dab98abdac964ddf7a7f9"}, "closed": true, "closedAt": "2020-03-18T18:50:18Z", "author": {"login": "ge0ffrey"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcOjUxJgH2gAyMzg5ODYwNjE0OmZlNWJjY2VlMGE3ZDM3ZjBlNjQzYWFhNWUzZDc1MmM2MTNiNmIxMzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcO23OcgH2gAyMzg5ODYwNjE0OjFjMmM4NTE1ZTllZGUyYWUyNDMzMDg4NDc4Y2E3MTdjZTVkMTE4OGY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "fe5bccee0a7d37f0e643aaa5e3d752c613b6b130", "author": {"user": {"login": "ge0ffrey", "name": "Geoffrey De Smet"}}, "url": "https://github.com/kiegroup/optaplanner/commit/fe5bccee0a7d37f0e643aaa5e3d752c613b6b130", "committedDate": "2020-03-17T14:10:23Z", "message": "PLANNER-1894 SolverManager.terminateEarly() fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1b027f12b8a2225a9a07d9039c5105c4dba23e6", "author": {"user": {"login": "ge0ffrey", "name": "Geoffrey De Smet"}}, "url": "https://github.com/kiegroup/optaplanner/commit/d1b027f12b8a2225a9a07d9039c5105c4dba23e6", "committedDate": "2020-03-17T14:15:37Z", "message": "PLANNER-1894 Clean up SolverManager map (memory leak)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2MjAwNjkx", "url": "https://github.com/kiegroup/optaplanner/pull/722#pullrequestreview-376200691", "createdAt": "2020-03-17T16:28:08Z", "commit": {"oid": "d1b027f12b8a2225a9a07d9039c5105c4dba23e6"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2MjA5MzQ1", "url": "https://github.com/kiegroup/optaplanner/pull/722#pullrequestreview-376209345", "createdAt": "2020-03-17T16:38:05Z", "commit": {"oid": "d1b027f12b8a2225a9a07d9039c5105c4dba23e6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNjozODowNVrOF3klTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNjozODowNVrOF3klTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgxNTM3NQ==", "bodyText": "@triceo I actually originally tried an AtomicRefence, for the reasons you mentioned.\nTrouble was the code above versus the terminateEarly() code.\nThat latter did change drastically, so maybe there's a way to reintroduce the AtomicReference, let me try.", "url": "https://github.com/kiegroup/optaplanner/pull/722#discussion_r393815375", "createdAt": "2020-03-17T16:38:05Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/solver/DefaultSolverJob.java", "diffHunk": "@@ -77,13 +78,19 @@ public ProblemId_ getProblemId() {\n     }\n \n     @Override\n-    public SolverStatus getSolverStatus() {\n+    public synchronized SolverStatus getSolverStatus() {\n         return solverStatus;\n     }\n \n     @Override\n     public Solution_ call() {\n-        solverStatus = SolverStatus.SOLVING_ACTIVE;\n+        synchronized (this) {\n+            if (solverStatus != SolverStatus.SOLVING_SCHEDULED) {\n+                // This job has been canceled before it started\n+                return problemFinder.apply(problemId);\n+            }\n+            solverStatus = SolverStatus.SOLVING_ACTIVE;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1b027f12b8a2225a9a07d9039c5105c4dba23e6"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2MjM2OTQy", "url": "https://github.com/kiegroup/optaplanner/pull/722#pullrequestreview-376236942", "createdAt": "2020-03-17T17:09:35Z", "commit": {"oid": "d1b027f12b8a2225a9a07d9039c5105c4dba23e6"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNzowOTozNVrOF3l5xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNzoxMzowNlrOF3mCXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzNjk5Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    synchronized (this) {\n          \n          \n            \n                        if (solverStatus != SolverStatus.SOLVING_SCHEDULED) {\n          \n          \n            \n                            // This job has been canceled before it started\n          \n          \n            \n                            return problemFinder.apply(problemId);\n          \n          \n            \n                        }\n          \n          \n            \n                        solverStatus = SolverStatus.SOLVING_ACTIVE;\n          \n          \n            \n                    }\n          \n          \n            \n                        SolverStatus previousSolverStatus = solverStatus.getAndSet(SOLVING_ACTIVE);\n          \n          \n            \n                        if (previousSolverStatus != SolverStatus.SOLVING_SCHEDULED) {\n          \n          \n            \n                            // This job has been canceled before it started\n          \n          \n            \n                            return problemFinder.apply(problemId);\n          \n          \n            \n                        }", "url": "https://github.com/kiegroup/optaplanner/pull/722#discussion_r393836996", "createdAt": "2020-03-17T17:09:35Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/solver/DefaultSolverJob.java", "diffHunk": "@@ -77,13 +78,19 @@ public ProblemId_ getProblemId() {\n     }\n \n     @Override\n-    public SolverStatus getSolverStatus() {\n+    public synchronized SolverStatus getSolverStatus() {\n         return solverStatus;\n     }\n \n     @Override\n     public Solution_ call() {\n-        solverStatus = SolverStatus.SOLVING_ACTIVE;\n+        synchronized (this) {\n+            if (solverStatus != SolverStatus.SOLVING_SCHEDULED) {\n+                // This job has been canceled before it started\n+                return problemFinder.apply(problemId);\n+            }\n+            solverStatus = SolverStatus.SOLVING_ACTIVE;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1b027f12b8a2225a9a07d9039c5105c4dba23e6"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzNzkwMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    solverManager.getProblemIdToSolverJobMap().remove(problemId);\n          \n          \n            \n                    solverStatus = SolverStatus.NOT_SOLVING;\n          \n          \n            \n                    terminatedLatch.countDown();\n          \n          \n            \n                    SolverStatus previousSolverStatus = solverStatus.getAndSet(NOT_SOLVING);\n          \n          \n            \n                    if (previousSolverStatus != NOT_SOLVING) {\n          \n          \n            \n                        solverManager.getProblemIdToSolverJobMap().remove(problemId);\n          \n          \n            \n                        terminatedLatch.countDown();\n          \n          \n            \n                    }", "url": "https://github.com/kiegroup/optaplanner/pull/722#discussion_r393837903", "createdAt": "2020-03-17T17:10:58Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/solver/DefaultSolverJob.java", "diffHunk": "@@ -96,12 +103,16 @@ public Solution_ call() {\n             exceptionHandler.accept(problemId, e);\n             throw new IllegalStateException(\"Solving failed for problemId (\" + problemId + \").\", e);\n         } finally {\n-            solverManager.getProblemIdToSolverJobMap().remove(problemId);\n-            solverStatus = SolverStatus.NOT_SOLVING;\n-            terminatedLatch.countDown();\n+            solvingTerminated();\n         }\n     }\n \n+    private synchronized void solvingTerminated() {\n+        solverManager.getProblemIdToSolverJobMap().remove(problemId);\n+        solverStatus = SolverStatus.NOT_SOLVING;\n+        terminatedLatch.countDown();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1b027f12b8a2225a9a07d9039c5105c4dba23e6"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzOTE5Nw==", "bodyText": "This should be replacable by switch (solverStatus.get()), as all the actual state mutation happens in solvingTerminated()/solver.terminateEarly() as I've suggested above.", "url": "https://github.com/kiegroup/optaplanner/pull/722#discussion_r393839197", "createdAt": "2020-03-17T17:13:06Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/solver/DefaultSolverJob.java", "diffHunk": "@@ -116,20 +127,26 @@ public Solution_ call() {\n \n     @Override\n     public void terminateEarly() {\n-        boolean cancelled = future.cancel(false);\n-        if (cancelled) {\n-            solverStatus = SolverStatus.NOT_SOLVING;\n-        } else {\n-            // The solver is either actively solving or has already terminated\n-            solver.terminateEarly();\n-            try {\n-                // Don't return until bestSolutionConsumer won't be called any more\n-                terminatedLatch.await();\n-            } catch (InterruptedException e) {\n-                Thread.currentThread().interrupt();\n-                logger.warn(\"The terminateEarly() call is interrupted.\", e);\n+        future.cancel(false);\n+        synchronized (this) {\n+            if (solverStatus == SolverStatus.SOLVING_SCHEDULED) {\n+                solvingTerminated();\n+            } else if (solverStatus == SolverStatus.SOLVING_ACTIVE) {\n+                // Indirectly triggers solvingTerminated()\n+                solver.terminateEarly();\n+            } else if (solverStatus == SolverStatus.NOT_SOLVING) {\n+                // Do nothing, solvingTerminated() already called\n+            } else {\n+                throw new IllegalStateException(\"Unsupported solverStatus (\" + solverStatus + \").\");\n             }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1b027f12b8a2225a9a07d9039c5105c4dba23e6"}, "originalPosition": 80}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4bb3d0d882bd830ecdd5eadfef93dee9c5e554ad", "author": {"user": {"login": "ge0ffrey", "name": "Geoffrey De Smet"}}, "url": "https://github.com/kiegroup/optaplanner/commit/4bb3d0d882bd830ecdd5eadfef93dee9c5e554ad", "committedDate": "2020-03-18T12:41:13Z", "message": "Use AtomicReference for solverStatus"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d22057b6157d4ed402befff6d3d1b875d4436fa9", "author": {"user": {"login": "ge0ffrey", "name": "Geoffrey De Smet"}}, "url": "https://github.com/kiegroup/optaplanner/commit/d22057b6157d4ed402befff6d3d1b875d4436fa9", "committedDate": "2020-03-18T12:40:08Z", "message": "Use AtomicReference for solverStatus"}, "afterCommit": {"oid": "4bb3d0d882bd830ecdd5eadfef93dee9c5e554ad", "author": {"user": {"login": "ge0ffrey", "name": "Geoffrey De Smet"}}, "url": "https://github.com/kiegroup/optaplanner/commit/4bb3d0d882bd830ecdd5eadfef93dee9c5e554ad", "committedDate": "2020-03-18T12:41:13Z", "message": "Use AtomicReference for solverStatus"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2ODMxMDg1", "url": "https://github.com/kiegroup/optaplanner/pull/722#pullrequestreview-376831085", "createdAt": "2020-03-18T12:50:39Z", "commit": {"oid": "4bb3d0d882bd830ecdd5eadfef93dee9c5e554ad"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2ODMxNzU0", "url": "https://github.com/kiegroup/optaplanner/pull/722#pullrequestreview-376831754", "createdAt": "2020-03-18T12:51:36Z", "commit": {"oid": "4bb3d0d882bd830ecdd5eadfef93dee9c5e554ad"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjo1MTozNlrOF4Df8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjo1MTozNlrOF4Df8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMyMTkwNw==", "bodyText": "Looks like this one could be final.", "url": "https://github.com/kiegroup/optaplanner/pull/722#discussion_r394321907", "createdAt": "2020-03-18T12:51:36Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/solver/DefaultSolverJob.java", "diffHunk": "@@ -47,8 +48,9 @@\n     private final Consumer<? super Solution_> finalBestSolutionConsumer;\n     private final BiConsumer<? super ProblemId_, ? super Throwable> exceptionHandler;\n \n-    private volatile SolverStatus solverStatus;\n+    private AtomicReference<SolverStatus> solverStatusReference;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb3d0d882bd830ecdd5eadfef93dee9c5e554ad"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c2c8515e9ede2ae2433088478ca717ce5d1188f", "author": {"user": {"login": "ge0ffrey", "name": "Geoffrey De Smet"}}, "url": "https://github.com/kiegroup/optaplanner/commit/1c2c8515e9ede2ae2433088478ca717ce5d1188f", "committedDate": "2020-03-18T12:56:13Z", "message": "Make AtomicReference final"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2903, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}