{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0MTc3OTQw", "number": 682, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwOTowMjowMlrODfGF_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwOTowMjowMlrODfGF_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzOTMyMjg1OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/common/BavetAbstractConstraintStream.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwOTowMjowMlrOFomXmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwOTowMjowMlrOFomXmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODExNTk5Mw==", "bodyText": "-1 Avoid number.doubleValue(), intValue(), ... like the plague. Why?\n\nrounding errors, try (double) 9007199254740993L, see https://ge0ffrey.github.io/ge0ffrey-presentations/cornerCaseCheatSheet/cheatSheetJava.html\ndoubleValue() on some large or extremely accurate BigDecimals are questionable\n\nYou could in theory prove that the signum well never change by rounding. But seeing how Math.abs() behaves on MIN_VALUE, let's not take that risk. Furthermore, this causes auto-inboxing to Number, which will have a performance impact.\nAlso, keep the operands of the same type, to avoid java-puzzlers-bugs. So keep the second operand specifically a double: if (impact.doubleValue() < 0.0) {. (Same goes for longs: in LongScore etc, we use 0L to send a zero long, not 0.)\nThis implies we'll have an assertPositiveImpact(, int), assertPositiveImpact(, long), etc", "url": "https://github.com/kiegroup/optaplanner/pull/682#discussion_r378115993", "createdAt": "2020-02-12T09:02:02Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/common/BavetAbstractConstraintStream.java", "diffHunk": "@@ -68,4 +69,12 @@ public BavetAbstractConstraintStream(BavetConstraintFactory<Solution_> constrain\n         return constraintFactory;\n     }\n \n+    protected static void assertPositiveImpact(Constraint constraint, Number impact) {\n+        if (impact.doubleValue() < 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ace237cd3ad12c1904ef58fb3f3ebb7e9ff1373b"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4617, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}