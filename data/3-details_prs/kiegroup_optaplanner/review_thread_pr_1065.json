{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzNzUxNDY1", "number": 1065, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNzo1NjoyMVrOFCyDeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzo1NDo1MlrOFFmZOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NDYxNTYwOnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/director/ScoreDirectorFactoryFactory.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNzo1NjoyMVrOICHAwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwOTowNzo1NlrOICJ4-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA4Mjk0NQ==", "bodyText": "It's not a simple getter and it's for a toString, so how about we call it composeScoreDrlAndScoreDrlFileToString?\nIt might not be clear for everyone that DrlResourcesAndFiles applies to scoreDrl and scoreDrlFile.", "url": "https://github.com/kiegroup/optaplanner/pull/1065#discussion_r539082945", "createdAt": "2020-12-09T07:56:21Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/director/ScoreDirectorFactoryFactory.java", "diffHunk": "@@ -139,6 +144,29 @@ public ScoreDirectorFactoryFactory(ScoreDirectorFactoryConfig config) {\n         return scoreDirectorFactory;\n     }\n \n+    protected String getDrlResourcesAndFilesOverview() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c36263858a5f3774745b0326ea4f2193e2c69ee"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA4NjQyNA==", "bodyText": "Update: I think we can remove this entire method if we add ConfigUtils.abbreviate(List<String> list) which calls ConfigUtils.abbreviate(list, 3) (also a new method to implement) for which 3 is the limit size.", "url": "https://github.com/kiegroup/optaplanner/pull/1065#discussion_r539086424", "createdAt": "2020-12-09T08:02:25Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/director/ScoreDirectorFactoryFactory.java", "diffHunk": "@@ -139,6 +144,29 @@ public ScoreDirectorFactoryFactory(ScoreDirectorFactoryConfig config) {\n         return scoreDirectorFactory;\n     }\n \n+    protected String getDrlResourcesAndFilesOverview() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA4Mjk0NQ=="}, "originalCommit": {"oid": "5c36263858a5f3774745b0326ea4f2193e2c69ee"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTEzMDEwNA==", "bodyText": "Sure thing; I like the idea of reposrting the DrlList and DrlFileList separately, which makes this method obsolete.", "url": "https://github.com/kiegroup/optaplanner/pull/1065#discussion_r539130104", "createdAt": "2020-12-09T09:07:56Z", "author": {"login": "rsynek"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/director/ScoreDirectorFactoryFactory.java", "diffHunk": "@@ -139,6 +144,29 @@ public ScoreDirectorFactoryFactory(ScoreDirectorFactoryConfig config) {\n         return scoreDirectorFactory;\n     }\n \n+    protected String getDrlResourcesAndFilesOverview() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA4Mjk0NQ=="}, "originalCommit": {"oid": "5c36263858a5f3774745b0326ea4f2193e2c69ee"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NDYxODk4OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/director/ScoreDirectorFactoryFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNzo1NzoxMFrOICHCrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwODowMDozMVrOICHKHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA4MzQzOA==", "bodyText": "It might not be clear for everyone that droolsScoreDirectorFactory applies to scoreDrl and scoreDrlFile in their solverConfig.xml, making it much harder to fix the error.", "url": "https://github.com/kiegroup/optaplanner/pull/1065#discussion_r539083438", "createdAt": "2020-12-09T07:57:10Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/director/ScoreDirectorFactoryFactory.java", "diffHunk": "@@ -108,16 +109,20 @@ public ScoreDirectorFactoryFactory(ScoreDirectorFactoryConfig config) {\n                 .filter(Objects::nonNull).count() > 1) {\n             List<String> scoreDirectorFactoryPropertyList = new ArrayList<>(4);\n             if (easyScoreDirectorFactory != null) {\n-                scoreDirectorFactoryPropertyList.add(\"an easyScoreCalculatorClass\");\n+                scoreDirectorFactoryPropertyList\n+                        .add(\"an easyScoreCalculatorClass (\" + config.getEasyScoreCalculatorClass().getName() + \")\");\n             }\n             if (constraintStreamScoreDirectorFactory != null) {\n-                scoreDirectorFactoryPropertyList.add(\"a constraintProviderClass\");\n+                scoreDirectorFactoryPropertyList\n+                        .add(\"a constraintProviderClass (\" + config.getConstraintProviderClass().getName() + \")\");\n             }\n             if (incrementalScoreDirectorFactory != null) {\n-                scoreDirectorFactoryPropertyList.add(\"an incrementalScoreCalculatorClass\");\n+                scoreDirectorFactoryPropertyList.add(\n+                        \"an incrementalScoreCalculatorClass (\" + config.getIncrementalScoreCalculatorClass().getName() + \")\");\n             }\n             if (droolsScoreDirectorFactory != null) {\n-                scoreDirectorFactoryPropertyList.add(\"a droolsScoreDirectorFactory\");\n+                scoreDirectorFactoryPropertyList\n+                        .add(\"a droolsScoreDirectorFactory (\" + getDrlResourcesAndFilesOverview() + \")\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c36263858a5f3774745b0326ea4f2193e2c69ee"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA4NTM0MQ==", "bodyText": "Can we do something like this?\n                        .add(\"a scoreDrlList (\" + ConfigUtils.abbreviate(solverConfig.getScoreDrlList())\n                        + \") or a scoreDrlFileList (\" + ConfigUtils.abbreviate(solverConfig.getScoreFileDrlList().stream().map(File::getName).toList()) + \"));", "url": "https://github.com/kiegroup/optaplanner/pull/1065#discussion_r539085341", "createdAt": "2020-12-09T08:00:31Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/director/ScoreDirectorFactoryFactory.java", "diffHunk": "@@ -108,16 +109,20 @@ public ScoreDirectorFactoryFactory(ScoreDirectorFactoryConfig config) {\n                 .filter(Objects::nonNull).count() > 1) {\n             List<String> scoreDirectorFactoryPropertyList = new ArrayList<>(4);\n             if (easyScoreDirectorFactory != null) {\n-                scoreDirectorFactoryPropertyList.add(\"an easyScoreCalculatorClass\");\n+                scoreDirectorFactoryPropertyList\n+                        .add(\"an easyScoreCalculatorClass (\" + config.getEasyScoreCalculatorClass().getName() + \")\");\n             }\n             if (constraintStreamScoreDirectorFactory != null) {\n-                scoreDirectorFactoryPropertyList.add(\"a constraintProviderClass\");\n+                scoreDirectorFactoryPropertyList\n+                        .add(\"a constraintProviderClass (\" + config.getConstraintProviderClass().getName() + \")\");\n             }\n             if (incrementalScoreDirectorFactory != null) {\n-                scoreDirectorFactoryPropertyList.add(\"an incrementalScoreCalculatorClass\");\n+                scoreDirectorFactoryPropertyList.add(\n+                        \"an incrementalScoreCalculatorClass (\" + config.getIncrementalScoreCalculatorClass().getName() + \")\");\n             }\n             if (droolsScoreDirectorFactory != null) {\n-                scoreDirectorFactoryPropertyList.add(\"a droolsScoreDirectorFactory\");\n+                scoreDirectorFactoryPropertyList\n+                        .add(\"a droolsScoreDirectorFactory (\" + getDrlResourcesAndFilesOverview() + \")\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA4MzQzOA=="}, "originalCommit": {"oid": "5c36263858a5f3774745b0326ea4f2193e2c69ee"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NDY0OTg2OnYy", "diffSide": "RIGHT", "path": "optaplanner-docs/src/main/asciidoc/Integration/Integration-chapter.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwODowNDo1MVrOICHTtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwODoxOToxNVrOICH6xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA4Nzc5OA==", "bodyText": "docs style guidelines: \"must not be defined\" is too passive tense (= too verbose). The tell tale sign is the \"be\".\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This property must NOT be defined in case a `ConstraintProvider` implementation or other score calculation type exists.\n          \n          \n            \n            Do note define this property when a `ConstraintProvider` implementation or other score calculation type exists.", "url": "https://github.com/kiegroup/optaplanner/pull/1065#discussion_r539087798", "createdAt": "2020-12-09T08:04:51Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-docs/src/main/asciidoc/Integration/Integration-chapter.adoc", "diffHunk": "@@ -508,6 +508,10 @@ optaplanner.solver-config-xml::\n A classpath resource to read the solver configuration XML.\n Defaults to `solverConfig.xml`.\n If this property isn't specified, that file is optional.\n+optaplanner.constraints-drl::\n+A classpath resource to read the solver score DRL.\n+Defaults to `constraints.drl`.\n+This property must NOT be defined in case a `ConstraintProvider` implementation or other score calculation type exists.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c36263858a5f3774745b0326ea4f2193e2c69ee"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA5Nzc5OQ==", "bodyText": "Update: more specific is better:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This property must NOT be defined in case a `ConstraintProvider` implementation or other score calculation type exists.\n          \n          \n            \n            Do note define this property when a `ConstraintProvider`, `EasyScoreCalculator` or `IncrementalScoreCalculator` class exists.", "url": "https://github.com/kiegroup/optaplanner/pull/1065#discussion_r539097799", "createdAt": "2020-12-09T08:19:15Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-docs/src/main/asciidoc/Integration/Integration-chapter.adoc", "diffHunk": "@@ -508,6 +508,10 @@ optaplanner.solver-config-xml::\n A classpath resource to read the solver configuration XML.\n Defaults to `solverConfig.xml`.\n If this property isn't specified, that file is optional.\n+optaplanner.constraints-drl::\n+A classpath resource to read the solver score DRL.\n+Defaults to `constraints.drl`.\n+This property must NOT be defined in case a `ConstraintProvider` implementation or other score calculation type exists.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA4Nzc5OA=="}, "originalCommit": {"oid": "5c36263858a5f3774745b0326ea4f2193e2c69ee"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NDY3MjExOnYy", "diffSide": "RIGHT", "path": "optaplanner-docs/src/main/asciidoc/Integration/Integration-chapter.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwODowOTozN1rOICHguw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwODowOTozN1rOICHguw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA5MTEzMQ==", "bodyText": "Very soft suggestion: I can't explain why, but \"solver score DRL\" doesn't sound right to me, maybe because it implies there is a difference between \"score DRL\" and \"solver score DRL\"? (which there is not). 3 lines, above, \"Solver configuration XML\" is right.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A classpath resource to read the solver score DRL.\n          \n          \n            \n            A classpath resource to read the score DRL.", "url": "https://github.com/kiegroup/optaplanner/pull/1065#discussion_r539091131", "createdAt": "2020-12-09T08:09:37Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-docs/src/main/asciidoc/Integration/Integration-chapter.adoc", "diffHunk": "@@ -508,6 +508,10 @@ optaplanner.solver-config-xml::\n A classpath resource to read the solver configuration XML.\n Defaults to `solverConfig.xml`.\n If this property isn't specified, that file is optional.\n+optaplanner.constraints-drl::\n+A classpath resource to read the solver score DRL.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c36263858a5f3774745b0326ea4f2193e2c69ee"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NDY3NzIwOnYy", "diffSide": "RIGHT", "path": "optaplanner-docs/src/main/asciidoc/Integration/Integration-chapter.adoc", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwODoxMDoyOVrOICHjvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMjozNjoxOVrOICSd6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA5MTkwMg==", "bodyText": "This is documented in the Spring boot section. We need it copy paste into the Quarkus section too.", "url": "https://github.com/kiegroup/optaplanner/pull/1065#discussion_r539091902", "createdAt": "2020-12-09T08:10:29Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-docs/src/main/asciidoc/Integration/Integration-chapter.adoc", "diffHunk": "@@ -508,6 +508,10 @@ optaplanner.solver-config-xml::\n A classpath resource to read the solver configuration XML.\n Defaults to `solverConfig.xml`.\n If this property isn't specified, that file is optional.\n+optaplanner.constraints-drl::", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c36263858a5f3774745b0326ea4f2193e2c69ee"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA5MjkxNA==", "bodyText": "Order wise, I suggest we follow the order of SolverConfig.java\nSo this property should come after optaplanner.solver.move-thread-count and before optaplanner.solver.termination.spent-limit", "url": "https://github.com/kiegroup/optaplanner/pull/1065#discussion_r539092914", "createdAt": "2020-12-09T08:11:37Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-docs/src/main/asciidoc/Integration/Integration-chapter.adoc", "diffHunk": "@@ -508,6 +508,10 @@ optaplanner.solver-config-xml::\n A classpath resource to read the solver configuration XML.\n Defaults to `solverConfig.xml`.\n If this property isn't specified, that file is optional.\n+optaplanner.constraints-drl::", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA5MTkwMg=="}, "originalCommit": {"oid": "5c36263858a5f3774745b0326ea4f2193e2c69ee"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTEyMjQwMA==", "bodyText": "That's an option of course; I tried to follow the order of fields in the autoconfiguration.", "url": "https://github.com/kiegroup/optaplanner/pull/1065#discussion_r539122400", "createdAt": "2020-12-09T08:57:08Z", "author": {"login": "rsynek"}, "path": "optaplanner-docs/src/main/asciidoc/Integration/Integration-chapter.adoc", "diffHunk": "@@ -508,6 +508,10 @@ optaplanner.solver-config-xml::\n A classpath resource to read the solver configuration XML.\n Defaults to `solverConfig.xml`.\n If this property isn't specified, that file is optional.\n+optaplanner.constraints-drl::", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA5MTkwMg=="}, "originalCommit": {"oid": "5c36263858a5f3774745b0326ea4f2193e2c69ee"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTE4OTEyMA==", "bodyText": "Decision: respect the order of field in the autoconfiguration.", "url": "https://github.com/kiegroup/optaplanner/pull/1065#discussion_r539189120", "createdAt": "2020-12-09T10:29:51Z", "author": {"login": "rsynek"}, "path": "optaplanner-docs/src/main/asciidoc/Integration/Integration-chapter.adoc", "diffHunk": "@@ -508,6 +508,10 @@ optaplanner.solver-config-xml::\n A classpath resource to read the solver configuration XML.\n Defaults to `solverConfig.xml`.\n If this property isn't specified, that file is optional.\n+optaplanner.constraints-drl::", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA5MTkwMg=="}, "originalCommit": {"oid": "5c36263858a5f3774745b0326ea4f2193e2c69ee"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI3MDYzMg==", "bodyText": "ad the Quarkus section: I was wandering: how could I have missed the quarkus section of our documentation? The answer is quite prosaic: the section is empty so far.\nI assigned the https://issues.redhat.com/browse/PLANNER-2284 I filed to myself; not in scope of this PR, though.", "url": "https://github.com/kiegroup/optaplanner/pull/1065#discussion_r539270632", "createdAt": "2020-12-09T12:36:19Z", "author": {"login": "rsynek"}, "path": "optaplanner-docs/src/main/asciidoc/Integration/Integration-chapter.adoc", "diffHunk": "@@ -508,6 +508,10 @@ optaplanner.solver-config-xml::\n A classpath resource to read the solver configuration XML.\n Defaults to `solverConfig.xml`.\n If this property isn't specified, that file is optional.\n+optaplanner.constraints-drl::", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA5MTkwMg=="}, "originalCommit": {"oid": "5c36263858a5f3774745b0326ea4f2193e2c69ee"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NDY5MTE4OnYy", "diffSide": "RIGHT", "path": "optaplanner-quarkus-integration/optaplanner-quarkus/deployment/src/main/java/org/optaplanner/quarkus/deployment/OptaPlannerBuildTimeConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwODoxMzoxNlrOICHsJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwODoxNjozOVrOICH0TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA5NDA1NQ==", "bodyText": "None of the other properties have a hard coded string like this in the non-test classes. Can we move it to the test class?\nI am a fan of hard coded strings in tests, especially if those strings are part of the public API,\njust like I am of hard coding values in tests:\nassertjEquals(calculator.plus(3, 4), 7)\nis better than\nassertjEquals(calculator.plus(SUM_PART_1, SUM_PART_2), SUM_TOTAL)\nI think.", "url": "https://github.com/kiegroup/optaplanner/pull/1065#discussion_r539094055", "createdAt": "2020-12-09T08:13:16Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-quarkus-integration/optaplanner-quarkus/deployment/src/main/java/org/optaplanner/quarkus/deployment/OptaPlannerBuildTimeConfig.java", "diffHunk": "@@ -31,6 +32,8 @@\n public class OptaPlannerBuildTimeConfig {\n \n     public static final String DEFAULT_SOLVER_CONFIG_URL = \"solverConfig.xml\";\n+    public static final String DEFAULT_CONSTRAINTS_DRL_URL = \"constraints.drl\";\n+    public static final String CONSTRAINTS_DRL_PROPERTY = \"quarkus.optaplanner.constraints-drl\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c36263858a5f3774745b0326ea4f2193e2c69ee"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA5NjE0MA==", "bodyText": "I see your point, however, the property name is used also in exception messages when we fail fast.", "url": "https://github.com/kiegroup/optaplanner/pull/1065#discussion_r539096140", "createdAt": "2020-12-09T08:16:39Z", "author": {"login": "rsynek"}, "path": "optaplanner-quarkus-integration/optaplanner-quarkus/deployment/src/main/java/org/optaplanner/quarkus/deployment/OptaPlannerBuildTimeConfig.java", "diffHunk": "@@ -31,6 +32,8 @@\n public class OptaPlannerBuildTimeConfig {\n \n     public static final String DEFAULT_SOLVER_CONFIG_URL = \"solverConfig.xml\";\n+    public static final String DEFAULT_CONSTRAINTS_DRL_URL = \"constraints.drl\";\n+    public static final String CONSTRAINTS_DRL_PROPERTY = \"quarkus.optaplanner.constraints-drl\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA5NDA1NQ=="}, "originalCommit": {"oid": "5c36263858a5f3774745b0326ea4f2193e2c69ee"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NDcwOTEzOnYy", "diffSide": "RIGHT", "path": "optaplanner-quarkus-integration/optaplanner-quarkus/deployment/src/main/java/org/optaplanner/quarkus/deployment/OptaPlannerBuildTimeConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwODoxNzoyNFrOICH2Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwODoxNzoyNFrOICH2Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA5NjY2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * This property must NOT be defined in case a {@link ConstraintProvider} implementation exists.\n          \n          \n            \n                 * Do note define this property when a {@link ConstraintProvider}, {@link EasyScoreCalculator} or {@link IncrementalScoreCalculator} class exists.", "url": "https://github.com/kiegroup/optaplanner/pull/1065#discussion_r539096662", "createdAt": "2020-12-09T08:17:24Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-quarkus-integration/optaplanner-quarkus/deployment/src/main/java/org/optaplanner/quarkus/deployment/OptaPlannerBuildTimeConfig.java", "diffHunk": "@@ -40,6 +43,14 @@\n     @ConfigItem\n     Optional<String> solverConfigXml;\n \n+    /**\n+     * A classpath resource to read the solver score DRL.\n+     * Defaults to \"{@link #DEFAULT_CONSTRAINTS_DRL_URL}\".\n+     * This property must NOT be defined in case a {@link ConstraintProvider} implementation exists.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c36263858a5f3774745b0326ea4f2193e2c69ee"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NDc0MTAwOnYy", "diffSide": "RIGHT", "path": "optaplanner-quarkus-integration/optaplanner-quarkus/deployment/src/main/java/org/optaplanner/quarkus/deployment/OptaPlannerBuildTimeConfig.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwODoyNToxNVrOICIJBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMzowMzowN1rOICTiOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTEwMTQ0NA==", "bodyText": "(important)\nShould this be constraintsDrl or scoreDRL? (regardless of what we decided before)\nI'd argue there is no point in naming things in application.properties and solverConfig.xml differently if they do the same thing. It just creates unneeded complexity and takes a user's brainpower unnecessarily. Wdyt?", "url": "https://github.com/kiegroup/optaplanner/pull/1065#discussion_r539101444", "createdAt": "2020-12-09T08:25:15Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-quarkus-integration/optaplanner-quarkus/deployment/src/main/java/org/optaplanner/quarkus/deployment/OptaPlannerBuildTimeConfig.java", "diffHunk": "@@ -40,6 +43,14 @@\n     @ConfigItem\n     Optional<String> solverConfigXml;\n \n+    /**\n+     * A classpath resource to read the solver score DRL.\n+     * Defaults to \"{@link #DEFAULT_CONSTRAINTS_DRL_URL}\".\n+     * This property must NOT be defined in case a {@link ConstraintProvider} implementation exists.\n+     */\n+    @ConfigItem\n+    Optional<String> constraintsDrl;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c36263858a5f3774745b0326ea4f2193e2c69ee"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTEwMjA2Mw==", "bodyText": "On the other hand, it does indeed default to constraints.drl, something we changed intentionally from scoreRules.drl", "url": "https://github.com/kiegroup/optaplanner/pull/1065#discussion_r539102063", "createdAt": "2020-12-09T08:26:18Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-quarkus-integration/optaplanner-quarkus/deployment/src/main/java/org/optaplanner/quarkus/deployment/OptaPlannerBuildTimeConfig.java", "diffHunk": "@@ -40,6 +43,14 @@\n     @ConfigItem\n     Optional<String> solverConfigXml;\n \n+    /**\n+     * A classpath resource to read the solver score DRL.\n+     * Defaults to \"{@link #DEFAULT_CONSTRAINTS_DRL_URL}\".\n+     * This property must NOT be defined in case a {@link ConstraintProvider} implementation exists.\n+     */\n+    @ConfigItem\n+    Optional<String> constraintsDrl;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTEwMTQ0NA=="}, "originalCommit": {"oid": "5c36263858a5f3774745b0326ea4f2193e2c69ee"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTEwMjI3Ng==", "bodyText": "Worth discussing I think on bluejeans. Let me finish the review first.", "url": "https://github.com/kiegroup/optaplanner/pull/1065#discussion_r539102276", "createdAt": "2020-12-09T08:26:38Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-quarkus-integration/optaplanner-quarkus/deployment/src/main/java/org/optaplanner/quarkus/deployment/OptaPlannerBuildTimeConfig.java", "diffHunk": "@@ -40,6 +43,14 @@\n     @ConfigItem\n     Optional<String> solverConfigXml;\n \n+    /**\n+     * A classpath resource to read the solver score DRL.\n+     * Defaults to \"{@link #DEFAULT_CONSTRAINTS_DRL_URL}\".\n+     * This property must NOT be defined in case a {@link ConstraintProvider} implementation exists.\n+     */\n+    @ConfigItem\n+    Optional<String> constraintsDrl;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTEwMTQ0NA=="}, "originalCommit": {"oid": "5c36263858a5f3774745b0326ea4f2193e2c69ee"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTE1OTg0Mg==", "bodyText": "Agreed to change the property name to optaplanner.constraints-drl later(TODO: file Jira).\noptaplanner.score-drl\nThe default stays constraints.drl.", "url": "https://github.com/kiegroup/optaplanner/pull/1065#discussion_r539159842", "createdAt": "2020-12-09T09:48:09Z", "author": {"login": "rsynek"}, "path": "optaplanner-quarkus-integration/optaplanner-quarkus/deployment/src/main/java/org/optaplanner/quarkus/deployment/OptaPlannerBuildTimeConfig.java", "diffHunk": "@@ -40,6 +43,14 @@\n     @ConfigItem\n     Optional<String> solverConfigXml;\n \n+    /**\n+     * A classpath resource to read the solver score DRL.\n+     * Defaults to \"{@link #DEFAULT_CONSTRAINTS_DRL_URL}\".\n+     * This property must NOT be defined in case a {@link ConstraintProvider} implementation exists.\n+     */\n+    @ConfigItem\n+    Optional<String> constraintsDrl;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTEwMTQ0NA=="}, "originalCommit": {"oid": "5c36263858a5f3774745b0326ea4f2193e2c69ee"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI4ODEyMw==", "bodyText": "https://issues.redhat.com/browse/PLANNER-2285", "url": "https://github.com/kiegroup/optaplanner/pull/1065#discussion_r539288123", "createdAt": "2020-12-09T13:03:07Z", "author": {"login": "rsynek"}, "path": "optaplanner-quarkus-integration/optaplanner-quarkus/deployment/src/main/java/org/optaplanner/quarkus/deployment/OptaPlannerBuildTimeConfig.java", "diffHunk": "@@ -40,6 +43,14 @@\n     @ConfigItem\n     Optional<String> solverConfigXml;\n \n+    /**\n+     * A classpath resource to read the solver score DRL.\n+     * Defaults to \"{@link #DEFAULT_CONSTRAINTS_DRL_URL}\".\n+     * This property must NOT be defined in case a {@link ConstraintProvider} implementation exists.\n+     */\n+    @ConfigItem\n+    Optional<String> constraintsDrl;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTEwMTQ0NA=="}, "originalCommit": {"oid": "5c36263858a5f3774745b0326ea4f2193e2c69ee"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NDgyOTk2OnYy", "diffSide": "RIGHT", "path": "optaplanner-quarkus-integration/optaplanner-quarkus/deployment/src/main/java/org/optaplanner/quarkus/deployment/OptaPlannerProcessor.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwODo0NTo0MlrOICI8mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwOTo0OTo0NFrOICLxVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTExNDY0OQ==", "bodyText": "I'd argue that this fail fast duplicates a fail-fast in SolverFactory.create(solverConfig).\nAlso, if we ever support SolverConfigCustomizer in Spring Boot, we can do these checks here yet, because the customer might \"fix it\".", "url": "https://github.com/kiegroup/optaplanner/pull/1065#discussion_r539114649", "createdAt": "2020-12-09T08:45:42Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-quarkus-integration/optaplanner-quarkus/deployment/src/main/java/org/optaplanner/quarkus/deployment/OptaPlannerProcessor.java", "diffHunk": "@@ -211,31 +214,77 @@ private void applySolverProperties(RecorderContext recorderContext,\n     }\n \n     private void applyScoreDirectorFactoryProperties(IndexView indexView, SolverConfig solverConfig) {\n+        Optional<String> constraintsDrlFromProperty = constraintsDrl();\n+        Optional<String> defaultConstraintsDrl = defaultConstraintsDrl();\n+        Optional<String> effectiveConstraintsDrl = constraintsDrlFromProperty.map(Optional::of).orElse(defaultConstraintsDrl);\n         if (solverConfig.getScoreDirectorFactoryConfig() == null) {\n-            ScoreDirectorFactoryConfig scoreDirectorFactoryConfig = new ScoreDirectorFactoryConfig();\n-            scoreDirectorFactoryConfig.setEasyScoreCalculatorClass(\n-                    findImplementingClass(DotNames.EASY_SCORE_CALCULATOR, indexView));\n-            scoreDirectorFactoryConfig.setConstraintProviderClass(\n-                    findImplementingClass(DotNames.CONSTRAINT_PROVIDER, indexView));\n-            scoreDirectorFactoryConfig.setIncrementalScoreCalculatorClass(\n-                    findImplementingClass(DotNames.INCREMENTAL_SCORE_CALCULATOR, indexView));\n+            ScoreDirectorFactoryConfig scoreDirectorFactoryConfig =\n+                    defaultScoreDirectoryFactoryConfig(indexView, effectiveConstraintsDrl);\n+            solverConfig.setScoreDirectorFactoryConfig(scoreDirectorFactoryConfig);\n+        } else {\n+            ScoreDirectorFactoryConfig scoreDirectorFactoryConfig = solverConfig.getScoreDirectorFactoryConfig();\n+            if (constraintsDrlFromProperty.isPresent()) {\n+                scoreDirectorFactoryConfig.setScoreDrlList(Collections.singletonList(constraintsDrlFromProperty.get()));\n+            } else {\n+                if (scoreDirectorFactoryConfig.getScoreDrlList() == null) {\n+                    defaultConstraintsDrl.ifPresent((resolvedConstraintsDrl) -> scoreDirectorFactoryConfig\n+                            .setScoreDrlList(Collections.singletonList(resolvedConstraintsDrl)));\n+                }\n+            }\n+        }\n+\n+        if (solverConfig.getScoreDirectorFactoryConfig().getScoreDrlList() != null) {\n             ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n-            if (classLoader.getResource(SolverBuildTimeConfig.DEFAULT_SCORE_DRL_URL) != null) {\n-                scoreDirectorFactoryConfig.setScoreDrlList(Collections.singletonList(\n-                        SolverBuildTimeConfig.DEFAULT_SCORE_DRL_URL));\n+            try {\n+                Class.forName(\"org.drools.dynamic.DynamicComponentsSupplier\", false, classLoader);\n+            } catch (ClassNotFoundException e) {\n+                throw new IllegalStateException(\n+                        \"Constraints DRL has been detected, but drools-core-dynamic is not on classpath.\"\n+                                + \" Maybe try adding it. Please note that constraints DRL does not work in the native mode.\");\n             }\n-            if (scoreDirectorFactoryConfig.getEasyScoreCalculatorClass() == null\n-                    && scoreDirectorFactoryConfig.getConstraintProviderClass() == null\n-                    && scoreDirectorFactoryConfig.getIncrementalScoreCalculatorClass() == null\n-                    && scoreDirectorFactoryConfig.getScoreDrlList() == null) {\n-                throw new IllegalStateException(\"No classes found that implement \"\n-                        + EasyScoreCalculator.class.getSimpleName() + \", \"\n-                        + ConstraintProvider.class.getSimpleName() + \" or \"\n-                        + IncrementalScoreCalculator.class.getSimpleName() + \", nor a \"\n-                        + SolverBuildTimeConfig.DEFAULT_SCORE_DRL_URL + \" resource.\");\n+        }\n+    }\n+\n+    private Optional<String> constraintsDrl() {\n+        if (optaPlannerBuildTimeConfig.constraintsDrl.isPresent()) {\n+            String constraintsDrl = optaPlannerBuildTimeConfig.constraintsDrl.get();\n+            ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n+            if (classLoader.getResource(constraintsDrl) == null) {\n+                throw new IllegalStateException(\"Invalid \" + OptaPlannerBuildTimeConfig.CONSTRAINTS_DRL_PROPERTY\n+                        + \" property (\" + constraintsDrl + \"): that classpath resource does not exist.\");\n             }\n-            solverConfig.setScoreDirectorFactoryConfig(scoreDirectorFactoryConfig);\n         }\n+        return optaPlannerBuildTimeConfig.constraintsDrl;\n+    }\n+\n+    private Optional<String> defaultConstraintsDrl() {\n+        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n+        return classLoader.getResource(OptaPlannerBuildTimeConfig.DEFAULT_CONSTRAINTS_DRL_URL) != null\n+                ? Optional.of(OptaPlannerBuildTimeConfig.DEFAULT_CONSTRAINTS_DRL_URL)\n+                : Optional.empty();\n+    }\n+\n+    private ScoreDirectorFactoryConfig defaultScoreDirectoryFactoryConfig(IndexView indexView, Optional<String> constrainsDrl) {\n+        ScoreDirectorFactoryConfig scoreDirectorFactoryConfig = new ScoreDirectorFactoryConfig();\n+        scoreDirectorFactoryConfig.setEasyScoreCalculatorClass(\n+                findImplementingClass(DotNames.EASY_SCORE_CALCULATOR, indexView));\n+        scoreDirectorFactoryConfig.setConstraintProviderClass(\n+                findImplementingClass(DotNames.CONSTRAINT_PROVIDER, indexView));\n+        scoreDirectorFactoryConfig.setIncrementalScoreCalculatorClass(\n+                findImplementingClass(DotNames.INCREMENTAL_SCORE_CALCULATOR, indexView));\n+        constrainsDrl.ifPresent(value -> scoreDirectorFactoryConfig.setScoreDrlList(Collections.singletonList(value)));\n+        if (scoreDirectorFactoryConfig.getEasyScoreCalculatorClass() == null\n+                && scoreDirectorFactoryConfig.getConstraintProviderClass() == null\n+                && scoreDirectorFactoryConfig.getIncrementalScoreCalculatorClass() == null\n+                && scoreDirectorFactoryConfig.getScoreDrlList() == null) {\n+            throw new IllegalStateException(\"No classes found that implement \"\n+                    + EasyScoreCalculator.class.getSimpleName() + \", \"\n+                    + ConstraintProvider.class.getSimpleName() + \" or \"\n+                    + IncrementalScoreCalculator.class.getSimpleName() + \".\\n\"\n+                    + \"Neither was a property \" + OptaPlannerBuildTimeConfig.CONSTRAINTS_DRL_PROPERTY + \" defined, nor a \"\n+                    + OptaPlannerBuildTimeConfig.DEFAULT_CONSTRAINTS_DRL_URL + \" resource found.\\n\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c36263858a5f3774745b0326ea4f2193e2c69ee"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTExNTcyOA==", "bodyText": "So far my philosophy has been that the Spring Boot starter and Quarkus extension should not duplicate fail fasts that\n\nare detected as fail-fasts in SolverConfig later itself, once the SolverFActory is created\nhave a good error message.\n\nNow, the 2) is debatable here, indeed.", "url": "https://github.com/kiegroup/optaplanner/pull/1065#discussion_r539115728", "createdAt": "2020-12-09T08:47:22Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-quarkus-integration/optaplanner-quarkus/deployment/src/main/java/org/optaplanner/quarkus/deployment/OptaPlannerProcessor.java", "diffHunk": "@@ -211,31 +214,77 @@ private void applySolverProperties(RecorderContext recorderContext,\n     }\n \n     private void applyScoreDirectorFactoryProperties(IndexView indexView, SolverConfig solverConfig) {\n+        Optional<String> constraintsDrlFromProperty = constraintsDrl();\n+        Optional<String> defaultConstraintsDrl = defaultConstraintsDrl();\n+        Optional<String> effectiveConstraintsDrl = constraintsDrlFromProperty.map(Optional::of).orElse(defaultConstraintsDrl);\n         if (solverConfig.getScoreDirectorFactoryConfig() == null) {\n-            ScoreDirectorFactoryConfig scoreDirectorFactoryConfig = new ScoreDirectorFactoryConfig();\n-            scoreDirectorFactoryConfig.setEasyScoreCalculatorClass(\n-                    findImplementingClass(DotNames.EASY_SCORE_CALCULATOR, indexView));\n-            scoreDirectorFactoryConfig.setConstraintProviderClass(\n-                    findImplementingClass(DotNames.CONSTRAINT_PROVIDER, indexView));\n-            scoreDirectorFactoryConfig.setIncrementalScoreCalculatorClass(\n-                    findImplementingClass(DotNames.INCREMENTAL_SCORE_CALCULATOR, indexView));\n+            ScoreDirectorFactoryConfig scoreDirectorFactoryConfig =\n+                    defaultScoreDirectoryFactoryConfig(indexView, effectiveConstraintsDrl);\n+            solverConfig.setScoreDirectorFactoryConfig(scoreDirectorFactoryConfig);\n+        } else {\n+            ScoreDirectorFactoryConfig scoreDirectorFactoryConfig = solverConfig.getScoreDirectorFactoryConfig();\n+            if (constraintsDrlFromProperty.isPresent()) {\n+                scoreDirectorFactoryConfig.setScoreDrlList(Collections.singletonList(constraintsDrlFromProperty.get()));\n+            } else {\n+                if (scoreDirectorFactoryConfig.getScoreDrlList() == null) {\n+                    defaultConstraintsDrl.ifPresent((resolvedConstraintsDrl) -> scoreDirectorFactoryConfig\n+                            .setScoreDrlList(Collections.singletonList(resolvedConstraintsDrl)));\n+                }\n+            }\n+        }\n+\n+        if (solverConfig.getScoreDirectorFactoryConfig().getScoreDrlList() != null) {\n             ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n-            if (classLoader.getResource(SolverBuildTimeConfig.DEFAULT_SCORE_DRL_URL) != null) {\n-                scoreDirectorFactoryConfig.setScoreDrlList(Collections.singletonList(\n-                        SolverBuildTimeConfig.DEFAULT_SCORE_DRL_URL));\n+            try {\n+                Class.forName(\"org.drools.dynamic.DynamicComponentsSupplier\", false, classLoader);\n+            } catch (ClassNotFoundException e) {\n+                throw new IllegalStateException(\n+                        \"Constraints DRL has been detected, but drools-core-dynamic is not on classpath.\"\n+                                + \" Maybe try adding it. Please note that constraints DRL does not work in the native mode.\");\n             }\n-            if (scoreDirectorFactoryConfig.getEasyScoreCalculatorClass() == null\n-                    && scoreDirectorFactoryConfig.getConstraintProviderClass() == null\n-                    && scoreDirectorFactoryConfig.getIncrementalScoreCalculatorClass() == null\n-                    && scoreDirectorFactoryConfig.getScoreDrlList() == null) {\n-                throw new IllegalStateException(\"No classes found that implement \"\n-                        + EasyScoreCalculator.class.getSimpleName() + \", \"\n-                        + ConstraintProvider.class.getSimpleName() + \" or \"\n-                        + IncrementalScoreCalculator.class.getSimpleName() + \", nor a \"\n-                        + SolverBuildTimeConfig.DEFAULT_SCORE_DRL_URL + \" resource.\");\n+        }\n+    }\n+\n+    private Optional<String> constraintsDrl() {\n+        if (optaPlannerBuildTimeConfig.constraintsDrl.isPresent()) {\n+            String constraintsDrl = optaPlannerBuildTimeConfig.constraintsDrl.get();\n+            ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n+            if (classLoader.getResource(constraintsDrl) == null) {\n+                throw new IllegalStateException(\"Invalid \" + OptaPlannerBuildTimeConfig.CONSTRAINTS_DRL_PROPERTY\n+                        + \" property (\" + constraintsDrl + \"): that classpath resource does not exist.\");\n             }\n-            solverConfig.setScoreDirectorFactoryConfig(scoreDirectorFactoryConfig);\n         }\n+        return optaPlannerBuildTimeConfig.constraintsDrl;\n+    }\n+\n+    private Optional<String> defaultConstraintsDrl() {\n+        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n+        return classLoader.getResource(OptaPlannerBuildTimeConfig.DEFAULT_CONSTRAINTS_DRL_URL) != null\n+                ? Optional.of(OptaPlannerBuildTimeConfig.DEFAULT_CONSTRAINTS_DRL_URL)\n+                : Optional.empty();\n+    }\n+\n+    private ScoreDirectorFactoryConfig defaultScoreDirectoryFactoryConfig(IndexView indexView, Optional<String> constrainsDrl) {\n+        ScoreDirectorFactoryConfig scoreDirectorFactoryConfig = new ScoreDirectorFactoryConfig();\n+        scoreDirectorFactoryConfig.setEasyScoreCalculatorClass(\n+                findImplementingClass(DotNames.EASY_SCORE_CALCULATOR, indexView));\n+        scoreDirectorFactoryConfig.setConstraintProviderClass(\n+                findImplementingClass(DotNames.CONSTRAINT_PROVIDER, indexView));\n+        scoreDirectorFactoryConfig.setIncrementalScoreCalculatorClass(\n+                findImplementingClass(DotNames.INCREMENTAL_SCORE_CALCULATOR, indexView));\n+        constrainsDrl.ifPresent(value -> scoreDirectorFactoryConfig.setScoreDrlList(Collections.singletonList(value)));\n+        if (scoreDirectorFactoryConfig.getEasyScoreCalculatorClass() == null\n+                && scoreDirectorFactoryConfig.getConstraintProviderClass() == null\n+                && scoreDirectorFactoryConfig.getIncrementalScoreCalculatorClass() == null\n+                && scoreDirectorFactoryConfig.getScoreDrlList() == null) {\n+            throw new IllegalStateException(\"No classes found that implement \"\n+                    + EasyScoreCalculator.class.getSimpleName() + \", \"\n+                    + ConstraintProvider.class.getSimpleName() + \" or \"\n+                    + IncrementalScoreCalculator.class.getSimpleName() + \".\\n\"\n+                    + \"Neither was a property \" + OptaPlannerBuildTimeConfig.CONSTRAINTS_DRL_PROPERTY + \" defined, nor a \"\n+                    + OptaPlannerBuildTimeConfig.DEFAULT_CONSTRAINTS_DRL_URL + \" resource found.\\n\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTExNDY0OQ=="}, "originalCommit": {"oid": "5c36263858a5f3774745b0326ea4f2193e2c69ee"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTExNjA3Nw==", "bodyText": "=> bluejeans topic?", "url": "https://github.com/kiegroup/optaplanner/pull/1065#discussion_r539116077", "createdAt": "2020-12-09T08:47:53Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-quarkus-integration/optaplanner-quarkus/deployment/src/main/java/org/optaplanner/quarkus/deployment/OptaPlannerProcessor.java", "diffHunk": "@@ -211,31 +214,77 @@ private void applySolverProperties(RecorderContext recorderContext,\n     }\n \n     private void applyScoreDirectorFactoryProperties(IndexView indexView, SolverConfig solverConfig) {\n+        Optional<String> constraintsDrlFromProperty = constraintsDrl();\n+        Optional<String> defaultConstraintsDrl = defaultConstraintsDrl();\n+        Optional<String> effectiveConstraintsDrl = constraintsDrlFromProperty.map(Optional::of).orElse(defaultConstraintsDrl);\n         if (solverConfig.getScoreDirectorFactoryConfig() == null) {\n-            ScoreDirectorFactoryConfig scoreDirectorFactoryConfig = new ScoreDirectorFactoryConfig();\n-            scoreDirectorFactoryConfig.setEasyScoreCalculatorClass(\n-                    findImplementingClass(DotNames.EASY_SCORE_CALCULATOR, indexView));\n-            scoreDirectorFactoryConfig.setConstraintProviderClass(\n-                    findImplementingClass(DotNames.CONSTRAINT_PROVIDER, indexView));\n-            scoreDirectorFactoryConfig.setIncrementalScoreCalculatorClass(\n-                    findImplementingClass(DotNames.INCREMENTAL_SCORE_CALCULATOR, indexView));\n+            ScoreDirectorFactoryConfig scoreDirectorFactoryConfig =\n+                    defaultScoreDirectoryFactoryConfig(indexView, effectiveConstraintsDrl);\n+            solverConfig.setScoreDirectorFactoryConfig(scoreDirectorFactoryConfig);\n+        } else {\n+            ScoreDirectorFactoryConfig scoreDirectorFactoryConfig = solverConfig.getScoreDirectorFactoryConfig();\n+            if (constraintsDrlFromProperty.isPresent()) {\n+                scoreDirectorFactoryConfig.setScoreDrlList(Collections.singletonList(constraintsDrlFromProperty.get()));\n+            } else {\n+                if (scoreDirectorFactoryConfig.getScoreDrlList() == null) {\n+                    defaultConstraintsDrl.ifPresent((resolvedConstraintsDrl) -> scoreDirectorFactoryConfig\n+                            .setScoreDrlList(Collections.singletonList(resolvedConstraintsDrl)));\n+                }\n+            }\n+        }\n+\n+        if (solverConfig.getScoreDirectorFactoryConfig().getScoreDrlList() != null) {\n             ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n-            if (classLoader.getResource(SolverBuildTimeConfig.DEFAULT_SCORE_DRL_URL) != null) {\n-                scoreDirectorFactoryConfig.setScoreDrlList(Collections.singletonList(\n-                        SolverBuildTimeConfig.DEFAULT_SCORE_DRL_URL));\n+            try {\n+                Class.forName(\"org.drools.dynamic.DynamicComponentsSupplier\", false, classLoader);\n+            } catch (ClassNotFoundException e) {\n+                throw new IllegalStateException(\n+                        \"Constraints DRL has been detected, but drools-core-dynamic is not on classpath.\"\n+                                + \" Maybe try adding it. Please note that constraints DRL does not work in the native mode.\");\n             }\n-            if (scoreDirectorFactoryConfig.getEasyScoreCalculatorClass() == null\n-                    && scoreDirectorFactoryConfig.getConstraintProviderClass() == null\n-                    && scoreDirectorFactoryConfig.getIncrementalScoreCalculatorClass() == null\n-                    && scoreDirectorFactoryConfig.getScoreDrlList() == null) {\n-                throw new IllegalStateException(\"No classes found that implement \"\n-                        + EasyScoreCalculator.class.getSimpleName() + \", \"\n-                        + ConstraintProvider.class.getSimpleName() + \" or \"\n-                        + IncrementalScoreCalculator.class.getSimpleName() + \", nor a \"\n-                        + SolverBuildTimeConfig.DEFAULT_SCORE_DRL_URL + \" resource.\");\n+        }\n+    }\n+\n+    private Optional<String> constraintsDrl() {\n+        if (optaPlannerBuildTimeConfig.constraintsDrl.isPresent()) {\n+            String constraintsDrl = optaPlannerBuildTimeConfig.constraintsDrl.get();\n+            ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n+            if (classLoader.getResource(constraintsDrl) == null) {\n+                throw new IllegalStateException(\"Invalid \" + OptaPlannerBuildTimeConfig.CONSTRAINTS_DRL_PROPERTY\n+                        + \" property (\" + constraintsDrl + \"): that classpath resource does not exist.\");\n             }\n-            solverConfig.setScoreDirectorFactoryConfig(scoreDirectorFactoryConfig);\n         }\n+        return optaPlannerBuildTimeConfig.constraintsDrl;\n+    }\n+\n+    private Optional<String> defaultConstraintsDrl() {\n+        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n+        return classLoader.getResource(OptaPlannerBuildTimeConfig.DEFAULT_CONSTRAINTS_DRL_URL) != null\n+                ? Optional.of(OptaPlannerBuildTimeConfig.DEFAULT_CONSTRAINTS_DRL_URL)\n+                : Optional.empty();\n+    }\n+\n+    private ScoreDirectorFactoryConfig defaultScoreDirectoryFactoryConfig(IndexView indexView, Optional<String> constrainsDrl) {\n+        ScoreDirectorFactoryConfig scoreDirectorFactoryConfig = new ScoreDirectorFactoryConfig();\n+        scoreDirectorFactoryConfig.setEasyScoreCalculatorClass(\n+                findImplementingClass(DotNames.EASY_SCORE_CALCULATOR, indexView));\n+        scoreDirectorFactoryConfig.setConstraintProviderClass(\n+                findImplementingClass(DotNames.CONSTRAINT_PROVIDER, indexView));\n+        scoreDirectorFactoryConfig.setIncrementalScoreCalculatorClass(\n+                findImplementingClass(DotNames.INCREMENTAL_SCORE_CALCULATOR, indexView));\n+        constrainsDrl.ifPresent(value -> scoreDirectorFactoryConfig.setScoreDrlList(Collections.singletonList(value)));\n+        if (scoreDirectorFactoryConfig.getEasyScoreCalculatorClass() == null\n+                && scoreDirectorFactoryConfig.getConstraintProviderClass() == null\n+                && scoreDirectorFactoryConfig.getIncrementalScoreCalculatorClass() == null\n+                && scoreDirectorFactoryConfig.getScoreDrlList() == null) {\n+            throw new IllegalStateException(\"No classes found that implement \"\n+                    + EasyScoreCalculator.class.getSimpleName() + \", \"\n+                    + ConstraintProvider.class.getSimpleName() + \" or \"\n+                    + IncrementalScoreCalculator.class.getSimpleName() + \".\\n\"\n+                    + \"Neither was a property \" + OptaPlannerBuildTimeConfig.CONSTRAINTS_DRL_PROPERTY + \" defined, nor a \"\n+                    + OptaPlannerBuildTimeConfig.DEFAULT_CONSTRAINTS_DRL_URL + \" resource found.\\n\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTExNDY0OQ=="}, "originalCommit": {"oid": "5c36263858a5f3774745b0326ea4f2193e2c69ee"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTEyNDQ3Nw==", "bodyText": "The error a user gets if we remove this check is:\n\"The scoreDirectorFactory lacks a configuration for an easyScoreCalculatorClass, a constraintProviderClass, an incrementalScoreCalculatorClass or a droolsScoreDirectorFactory.\"\nEspecially the \"lacks a configuration\" suggests to me that there is no detection in place and everything needs to be configured via the SolverConfig.\n+1 for discussing this.", "url": "https://github.com/kiegroup/optaplanner/pull/1065#discussion_r539124477", "createdAt": "2020-12-09T08:59:55Z", "author": {"login": "rsynek"}, "path": "optaplanner-quarkus-integration/optaplanner-quarkus/deployment/src/main/java/org/optaplanner/quarkus/deployment/OptaPlannerProcessor.java", "diffHunk": "@@ -211,31 +214,77 @@ private void applySolverProperties(RecorderContext recorderContext,\n     }\n \n     private void applyScoreDirectorFactoryProperties(IndexView indexView, SolverConfig solverConfig) {\n+        Optional<String> constraintsDrlFromProperty = constraintsDrl();\n+        Optional<String> defaultConstraintsDrl = defaultConstraintsDrl();\n+        Optional<String> effectiveConstraintsDrl = constraintsDrlFromProperty.map(Optional::of).orElse(defaultConstraintsDrl);\n         if (solverConfig.getScoreDirectorFactoryConfig() == null) {\n-            ScoreDirectorFactoryConfig scoreDirectorFactoryConfig = new ScoreDirectorFactoryConfig();\n-            scoreDirectorFactoryConfig.setEasyScoreCalculatorClass(\n-                    findImplementingClass(DotNames.EASY_SCORE_CALCULATOR, indexView));\n-            scoreDirectorFactoryConfig.setConstraintProviderClass(\n-                    findImplementingClass(DotNames.CONSTRAINT_PROVIDER, indexView));\n-            scoreDirectorFactoryConfig.setIncrementalScoreCalculatorClass(\n-                    findImplementingClass(DotNames.INCREMENTAL_SCORE_CALCULATOR, indexView));\n+            ScoreDirectorFactoryConfig scoreDirectorFactoryConfig =\n+                    defaultScoreDirectoryFactoryConfig(indexView, effectiveConstraintsDrl);\n+            solverConfig.setScoreDirectorFactoryConfig(scoreDirectorFactoryConfig);\n+        } else {\n+            ScoreDirectorFactoryConfig scoreDirectorFactoryConfig = solverConfig.getScoreDirectorFactoryConfig();\n+            if (constraintsDrlFromProperty.isPresent()) {\n+                scoreDirectorFactoryConfig.setScoreDrlList(Collections.singletonList(constraintsDrlFromProperty.get()));\n+            } else {\n+                if (scoreDirectorFactoryConfig.getScoreDrlList() == null) {\n+                    defaultConstraintsDrl.ifPresent((resolvedConstraintsDrl) -> scoreDirectorFactoryConfig\n+                            .setScoreDrlList(Collections.singletonList(resolvedConstraintsDrl)));\n+                }\n+            }\n+        }\n+\n+        if (solverConfig.getScoreDirectorFactoryConfig().getScoreDrlList() != null) {\n             ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n-            if (classLoader.getResource(SolverBuildTimeConfig.DEFAULT_SCORE_DRL_URL) != null) {\n-                scoreDirectorFactoryConfig.setScoreDrlList(Collections.singletonList(\n-                        SolverBuildTimeConfig.DEFAULT_SCORE_DRL_URL));\n+            try {\n+                Class.forName(\"org.drools.dynamic.DynamicComponentsSupplier\", false, classLoader);\n+            } catch (ClassNotFoundException e) {\n+                throw new IllegalStateException(\n+                        \"Constraints DRL has been detected, but drools-core-dynamic is not on classpath.\"\n+                                + \" Maybe try adding it. Please note that constraints DRL does not work in the native mode.\");\n             }\n-            if (scoreDirectorFactoryConfig.getEasyScoreCalculatorClass() == null\n-                    && scoreDirectorFactoryConfig.getConstraintProviderClass() == null\n-                    && scoreDirectorFactoryConfig.getIncrementalScoreCalculatorClass() == null\n-                    && scoreDirectorFactoryConfig.getScoreDrlList() == null) {\n-                throw new IllegalStateException(\"No classes found that implement \"\n-                        + EasyScoreCalculator.class.getSimpleName() + \", \"\n-                        + ConstraintProvider.class.getSimpleName() + \" or \"\n-                        + IncrementalScoreCalculator.class.getSimpleName() + \", nor a \"\n-                        + SolverBuildTimeConfig.DEFAULT_SCORE_DRL_URL + \" resource.\");\n+        }\n+    }\n+\n+    private Optional<String> constraintsDrl() {\n+        if (optaPlannerBuildTimeConfig.constraintsDrl.isPresent()) {\n+            String constraintsDrl = optaPlannerBuildTimeConfig.constraintsDrl.get();\n+            ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n+            if (classLoader.getResource(constraintsDrl) == null) {\n+                throw new IllegalStateException(\"Invalid \" + OptaPlannerBuildTimeConfig.CONSTRAINTS_DRL_PROPERTY\n+                        + \" property (\" + constraintsDrl + \"): that classpath resource does not exist.\");\n             }\n-            solverConfig.setScoreDirectorFactoryConfig(scoreDirectorFactoryConfig);\n         }\n+        return optaPlannerBuildTimeConfig.constraintsDrl;\n+    }\n+\n+    private Optional<String> defaultConstraintsDrl() {\n+        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n+        return classLoader.getResource(OptaPlannerBuildTimeConfig.DEFAULT_CONSTRAINTS_DRL_URL) != null\n+                ? Optional.of(OptaPlannerBuildTimeConfig.DEFAULT_CONSTRAINTS_DRL_URL)\n+                : Optional.empty();\n+    }\n+\n+    private ScoreDirectorFactoryConfig defaultScoreDirectoryFactoryConfig(IndexView indexView, Optional<String> constrainsDrl) {\n+        ScoreDirectorFactoryConfig scoreDirectorFactoryConfig = new ScoreDirectorFactoryConfig();\n+        scoreDirectorFactoryConfig.setEasyScoreCalculatorClass(\n+                findImplementingClass(DotNames.EASY_SCORE_CALCULATOR, indexView));\n+        scoreDirectorFactoryConfig.setConstraintProviderClass(\n+                findImplementingClass(DotNames.CONSTRAINT_PROVIDER, indexView));\n+        scoreDirectorFactoryConfig.setIncrementalScoreCalculatorClass(\n+                findImplementingClass(DotNames.INCREMENTAL_SCORE_CALCULATOR, indexView));\n+        constrainsDrl.ifPresent(value -> scoreDirectorFactoryConfig.setScoreDrlList(Collections.singletonList(value)));\n+        if (scoreDirectorFactoryConfig.getEasyScoreCalculatorClass() == null\n+                && scoreDirectorFactoryConfig.getConstraintProviderClass() == null\n+                && scoreDirectorFactoryConfig.getIncrementalScoreCalculatorClass() == null\n+                && scoreDirectorFactoryConfig.getScoreDrlList() == null) {\n+            throw new IllegalStateException(\"No classes found that implement \"\n+                    + EasyScoreCalculator.class.getSimpleName() + \", \"\n+                    + ConstraintProvider.class.getSimpleName() + \" or \"\n+                    + IncrementalScoreCalculator.class.getSimpleName() + \".\\n\"\n+                    + \"Neither was a property \" + OptaPlannerBuildTimeConfig.CONSTRAINTS_DRL_PROPERTY + \" defined, nor a \"\n+                    + OptaPlannerBuildTimeConfig.DEFAULT_CONSTRAINTS_DRL_URL + \" resource found.\\n\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTExNDY0OQ=="}, "originalCommit": {"oid": "5c36263858a5f3774745b0326ea4f2193e2c69ee"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTE2MDkxNg==", "bodyText": "Agreed to leave as it is.", "url": "https://github.com/kiegroup/optaplanner/pull/1065#discussion_r539160916", "createdAt": "2020-12-09T09:49:44Z", "author": {"login": "rsynek"}, "path": "optaplanner-quarkus-integration/optaplanner-quarkus/deployment/src/main/java/org/optaplanner/quarkus/deployment/OptaPlannerProcessor.java", "diffHunk": "@@ -211,31 +214,77 @@ private void applySolverProperties(RecorderContext recorderContext,\n     }\n \n     private void applyScoreDirectorFactoryProperties(IndexView indexView, SolverConfig solverConfig) {\n+        Optional<String> constraintsDrlFromProperty = constraintsDrl();\n+        Optional<String> defaultConstraintsDrl = defaultConstraintsDrl();\n+        Optional<String> effectiveConstraintsDrl = constraintsDrlFromProperty.map(Optional::of).orElse(defaultConstraintsDrl);\n         if (solverConfig.getScoreDirectorFactoryConfig() == null) {\n-            ScoreDirectorFactoryConfig scoreDirectorFactoryConfig = new ScoreDirectorFactoryConfig();\n-            scoreDirectorFactoryConfig.setEasyScoreCalculatorClass(\n-                    findImplementingClass(DotNames.EASY_SCORE_CALCULATOR, indexView));\n-            scoreDirectorFactoryConfig.setConstraintProviderClass(\n-                    findImplementingClass(DotNames.CONSTRAINT_PROVIDER, indexView));\n-            scoreDirectorFactoryConfig.setIncrementalScoreCalculatorClass(\n-                    findImplementingClass(DotNames.INCREMENTAL_SCORE_CALCULATOR, indexView));\n+            ScoreDirectorFactoryConfig scoreDirectorFactoryConfig =\n+                    defaultScoreDirectoryFactoryConfig(indexView, effectiveConstraintsDrl);\n+            solverConfig.setScoreDirectorFactoryConfig(scoreDirectorFactoryConfig);\n+        } else {\n+            ScoreDirectorFactoryConfig scoreDirectorFactoryConfig = solverConfig.getScoreDirectorFactoryConfig();\n+            if (constraintsDrlFromProperty.isPresent()) {\n+                scoreDirectorFactoryConfig.setScoreDrlList(Collections.singletonList(constraintsDrlFromProperty.get()));\n+            } else {\n+                if (scoreDirectorFactoryConfig.getScoreDrlList() == null) {\n+                    defaultConstraintsDrl.ifPresent((resolvedConstraintsDrl) -> scoreDirectorFactoryConfig\n+                            .setScoreDrlList(Collections.singletonList(resolvedConstraintsDrl)));\n+                }\n+            }\n+        }\n+\n+        if (solverConfig.getScoreDirectorFactoryConfig().getScoreDrlList() != null) {\n             ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n-            if (classLoader.getResource(SolverBuildTimeConfig.DEFAULT_SCORE_DRL_URL) != null) {\n-                scoreDirectorFactoryConfig.setScoreDrlList(Collections.singletonList(\n-                        SolverBuildTimeConfig.DEFAULT_SCORE_DRL_URL));\n+            try {\n+                Class.forName(\"org.drools.dynamic.DynamicComponentsSupplier\", false, classLoader);\n+            } catch (ClassNotFoundException e) {\n+                throw new IllegalStateException(\n+                        \"Constraints DRL has been detected, but drools-core-dynamic is not on classpath.\"\n+                                + \" Maybe try adding it. Please note that constraints DRL does not work in the native mode.\");\n             }\n-            if (scoreDirectorFactoryConfig.getEasyScoreCalculatorClass() == null\n-                    && scoreDirectorFactoryConfig.getConstraintProviderClass() == null\n-                    && scoreDirectorFactoryConfig.getIncrementalScoreCalculatorClass() == null\n-                    && scoreDirectorFactoryConfig.getScoreDrlList() == null) {\n-                throw new IllegalStateException(\"No classes found that implement \"\n-                        + EasyScoreCalculator.class.getSimpleName() + \", \"\n-                        + ConstraintProvider.class.getSimpleName() + \" or \"\n-                        + IncrementalScoreCalculator.class.getSimpleName() + \", nor a \"\n-                        + SolverBuildTimeConfig.DEFAULT_SCORE_DRL_URL + \" resource.\");\n+        }\n+    }\n+\n+    private Optional<String> constraintsDrl() {\n+        if (optaPlannerBuildTimeConfig.constraintsDrl.isPresent()) {\n+            String constraintsDrl = optaPlannerBuildTimeConfig.constraintsDrl.get();\n+            ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n+            if (classLoader.getResource(constraintsDrl) == null) {\n+                throw new IllegalStateException(\"Invalid \" + OptaPlannerBuildTimeConfig.CONSTRAINTS_DRL_PROPERTY\n+                        + \" property (\" + constraintsDrl + \"): that classpath resource does not exist.\");\n             }\n-            solverConfig.setScoreDirectorFactoryConfig(scoreDirectorFactoryConfig);\n         }\n+        return optaPlannerBuildTimeConfig.constraintsDrl;\n+    }\n+\n+    private Optional<String> defaultConstraintsDrl() {\n+        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n+        return classLoader.getResource(OptaPlannerBuildTimeConfig.DEFAULT_CONSTRAINTS_DRL_URL) != null\n+                ? Optional.of(OptaPlannerBuildTimeConfig.DEFAULT_CONSTRAINTS_DRL_URL)\n+                : Optional.empty();\n+    }\n+\n+    private ScoreDirectorFactoryConfig defaultScoreDirectoryFactoryConfig(IndexView indexView, Optional<String> constrainsDrl) {\n+        ScoreDirectorFactoryConfig scoreDirectorFactoryConfig = new ScoreDirectorFactoryConfig();\n+        scoreDirectorFactoryConfig.setEasyScoreCalculatorClass(\n+                findImplementingClass(DotNames.EASY_SCORE_CALCULATOR, indexView));\n+        scoreDirectorFactoryConfig.setConstraintProviderClass(\n+                findImplementingClass(DotNames.CONSTRAINT_PROVIDER, indexView));\n+        scoreDirectorFactoryConfig.setIncrementalScoreCalculatorClass(\n+                findImplementingClass(DotNames.INCREMENTAL_SCORE_CALCULATOR, indexView));\n+        constrainsDrl.ifPresent(value -> scoreDirectorFactoryConfig.setScoreDrlList(Collections.singletonList(value)));\n+        if (scoreDirectorFactoryConfig.getEasyScoreCalculatorClass() == null\n+                && scoreDirectorFactoryConfig.getConstraintProviderClass() == null\n+                && scoreDirectorFactoryConfig.getIncrementalScoreCalculatorClass() == null\n+                && scoreDirectorFactoryConfig.getScoreDrlList() == null) {\n+            throw new IllegalStateException(\"No classes found that implement \"\n+                    + EasyScoreCalculator.class.getSimpleName() + \", \"\n+                    + ConstraintProvider.class.getSimpleName() + \" or \"\n+                    + IncrementalScoreCalculator.class.getSimpleName() + \".\\n\"\n+                    + \"Neither was a property \" + OptaPlannerBuildTimeConfig.CONSTRAINTS_DRL_PROPERTY + \" defined, nor a \"\n+                    + OptaPlannerBuildTimeConfig.DEFAULT_CONSTRAINTS_DRL_URL + \" resource found.\\n\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTExNDY0OQ=="}, "originalCommit": {"oid": "5c36263858a5f3774745b0326ea4f2193e2c69ee"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NDkyMjQxOnYy", "diffSide": "LEFT", "path": "optaplanner-quarkus-integration/optaplanner-quarkus/deployment/src/main/java/org/optaplanner/quarkus/deployment/OptaPlannerProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwOTowNTozNlrOICJyJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwOTowODo0N1rOICJ7Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTEyODM1OQ==", "bodyText": "Ow, it was here already...", "url": "https://github.com/kiegroup/optaplanner/pull/1065#discussion_r539128359", "createdAt": "2020-12-09T09:05:36Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-quarkus-integration/optaplanner-quarkus/deployment/src/main/java/org/optaplanner/quarkus/deployment/OptaPlannerProcessor.java", "diffHunk": "@@ -211,31 +214,77 @@ private void applySolverProperties(RecorderContext recorderContext,\n     }\n \n     private void applyScoreDirectorFactoryProperties(IndexView indexView, SolverConfig solverConfig) {\n+        Optional<String> constraintsDrlFromProperty = constraintsDrl();\n+        Optional<String> defaultConstraintsDrl = defaultConstraintsDrl();\n+        Optional<String> effectiveConstraintsDrl = constraintsDrlFromProperty.map(Optional::of).orElse(defaultConstraintsDrl);\n         if (solverConfig.getScoreDirectorFactoryConfig() == null) {\n-            ScoreDirectorFactoryConfig scoreDirectorFactoryConfig = new ScoreDirectorFactoryConfig();\n-            scoreDirectorFactoryConfig.setEasyScoreCalculatorClass(\n-                    findImplementingClass(DotNames.EASY_SCORE_CALCULATOR, indexView));\n-            scoreDirectorFactoryConfig.setConstraintProviderClass(\n-                    findImplementingClass(DotNames.CONSTRAINT_PROVIDER, indexView));\n-            scoreDirectorFactoryConfig.setIncrementalScoreCalculatorClass(\n-                    findImplementingClass(DotNames.INCREMENTAL_SCORE_CALCULATOR, indexView));\n+            ScoreDirectorFactoryConfig scoreDirectorFactoryConfig =\n+                    defaultScoreDirectoryFactoryConfig(indexView, effectiveConstraintsDrl);\n+            solverConfig.setScoreDirectorFactoryConfig(scoreDirectorFactoryConfig);\n+        } else {\n+            ScoreDirectorFactoryConfig scoreDirectorFactoryConfig = solverConfig.getScoreDirectorFactoryConfig();\n+            if (constraintsDrlFromProperty.isPresent()) {\n+                scoreDirectorFactoryConfig.setScoreDrlList(Collections.singletonList(constraintsDrlFromProperty.get()));\n+            } else {\n+                if (scoreDirectorFactoryConfig.getScoreDrlList() == null) {\n+                    defaultConstraintsDrl.ifPresent((resolvedConstraintsDrl) -> scoreDirectorFactoryConfig\n+                            .setScoreDrlList(Collections.singletonList(resolvedConstraintsDrl)));\n+                }\n+            }\n+        }\n+\n+        if (solverConfig.getScoreDirectorFactoryConfig().getScoreDrlList() != null) {\n             ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n-            if (classLoader.getResource(SolverBuildTimeConfig.DEFAULT_SCORE_DRL_URL) != null) {\n-                scoreDirectorFactoryConfig.setScoreDrlList(Collections.singletonList(\n-                        SolverBuildTimeConfig.DEFAULT_SCORE_DRL_URL));\n+            try {\n+                Class.forName(\"org.drools.dynamic.DynamicComponentsSupplier\", false, classLoader);\n+            } catch (ClassNotFoundException e) {\n+                throw new IllegalStateException(\n+                        \"Constraints DRL has been detected, but drools-core-dynamic is not on classpath.\"\n+                                + \" Maybe try adding it. Please note that constraints DRL does not work in the native mode.\");\n             }\n-            if (scoreDirectorFactoryConfig.getEasyScoreCalculatorClass() == null\n-                    && scoreDirectorFactoryConfig.getConstraintProviderClass() == null\n-                    && scoreDirectorFactoryConfig.getIncrementalScoreCalculatorClass() == null\n-                    && scoreDirectorFactoryConfig.getScoreDrlList() == null) {\n-                throw new IllegalStateException(\"No classes found that implement \"\n-                        + EasyScoreCalculator.class.getSimpleName() + \", \"\n-                        + ConstraintProvider.class.getSimpleName() + \" or \"\n-                        + IncrementalScoreCalculator.class.getSimpleName() + \", nor a \"\n-                        + SolverBuildTimeConfig.DEFAULT_SCORE_DRL_URL + \" resource.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c36263858a5f3774745b0326ea4f2193e2c69ee"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTEzMDY5OA==", "bodyText": ":) oh yes, but nevermind, it's a good topic to go through.", "url": "https://github.com/kiegroup/optaplanner/pull/1065#discussion_r539130698", "createdAt": "2020-12-09T09:08:47Z", "author": {"login": "rsynek"}, "path": "optaplanner-quarkus-integration/optaplanner-quarkus/deployment/src/main/java/org/optaplanner/quarkus/deployment/OptaPlannerProcessor.java", "diffHunk": "@@ -211,31 +214,77 @@ private void applySolverProperties(RecorderContext recorderContext,\n     }\n \n     private void applyScoreDirectorFactoryProperties(IndexView indexView, SolverConfig solverConfig) {\n+        Optional<String> constraintsDrlFromProperty = constraintsDrl();\n+        Optional<String> defaultConstraintsDrl = defaultConstraintsDrl();\n+        Optional<String> effectiveConstraintsDrl = constraintsDrlFromProperty.map(Optional::of).orElse(defaultConstraintsDrl);\n         if (solverConfig.getScoreDirectorFactoryConfig() == null) {\n-            ScoreDirectorFactoryConfig scoreDirectorFactoryConfig = new ScoreDirectorFactoryConfig();\n-            scoreDirectorFactoryConfig.setEasyScoreCalculatorClass(\n-                    findImplementingClass(DotNames.EASY_SCORE_CALCULATOR, indexView));\n-            scoreDirectorFactoryConfig.setConstraintProviderClass(\n-                    findImplementingClass(DotNames.CONSTRAINT_PROVIDER, indexView));\n-            scoreDirectorFactoryConfig.setIncrementalScoreCalculatorClass(\n-                    findImplementingClass(DotNames.INCREMENTAL_SCORE_CALCULATOR, indexView));\n+            ScoreDirectorFactoryConfig scoreDirectorFactoryConfig =\n+                    defaultScoreDirectoryFactoryConfig(indexView, effectiveConstraintsDrl);\n+            solverConfig.setScoreDirectorFactoryConfig(scoreDirectorFactoryConfig);\n+        } else {\n+            ScoreDirectorFactoryConfig scoreDirectorFactoryConfig = solverConfig.getScoreDirectorFactoryConfig();\n+            if (constraintsDrlFromProperty.isPresent()) {\n+                scoreDirectorFactoryConfig.setScoreDrlList(Collections.singletonList(constraintsDrlFromProperty.get()));\n+            } else {\n+                if (scoreDirectorFactoryConfig.getScoreDrlList() == null) {\n+                    defaultConstraintsDrl.ifPresent((resolvedConstraintsDrl) -> scoreDirectorFactoryConfig\n+                            .setScoreDrlList(Collections.singletonList(resolvedConstraintsDrl)));\n+                }\n+            }\n+        }\n+\n+        if (solverConfig.getScoreDirectorFactoryConfig().getScoreDrlList() != null) {\n             ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n-            if (classLoader.getResource(SolverBuildTimeConfig.DEFAULT_SCORE_DRL_URL) != null) {\n-                scoreDirectorFactoryConfig.setScoreDrlList(Collections.singletonList(\n-                        SolverBuildTimeConfig.DEFAULT_SCORE_DRL_URL));\n+            try {\n+                Class.forName(\"org.drools.dynamic.DynamicComponentsSupplier\", false, classLoader);\n+            } catch (ClassNotFoundException e) {\n+                throw new IllegalStateException(\n+                        \"Constraints DRL has been detected, but drools-core-dynamic is not on classpath.\"\n+                                + \" Maybe try adding it. Please note that constraints DRL does not work in the native mode.\");\n             }\n-            if (scoreDirectorFactoryConfig.getEasyScoreCalculatorClass() == null\n-                    && scoreDirectorFactoryConfig.getConstraintProviderClass() == null\n-                    && scoreDirectorFactoryConfig.getIncrementalScoreCalculatorClass() == null\n-                    && scoreDirectorFactoryConfig.getScoreDrlList() == null) {\n-                throw new IllegalStateException(\"No classes found that implement \"\n-                        + EasyScoreCalculator.class.getSimpleName() + \", \"\n-                        + ConstraintProvider.class.getSimpleName() + \" or \"\n-                        + IncrementalScoreCalculator.class.getSimpleName() + \", nor a \"\n-                        + SolverBuildTimeConfig.DEFAULT_SCORE_DRL_URL + \" resource.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTEyODM1OQ=="}, "originalCommit": {"oid": "5c36263858a5f3774745b0326ea4f2193e2c69ee"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NDk0MTA1OnYy", "diffSide": "RIGHT", "path": "optaplanner-quarkus-integration/optaplanner-quarkus/deployment/src/main/java/org/optaplanner/quarkus/deployment/OptaPlannerProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwOTowOToyMlrOICJ89g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwOTowOToyMlrOICJ89g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTEzMTEyNg==", "bodyText": "We put a newline between the \"error fact\" and the \"error maybe suggestion\":\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    \"Constraints DRL has been detected, but drools-core-dynamic is not on classpath.\"\n          \n          \n            \n                                    \"Using scoreDRL in Quarkus, but the dependency drools-core-dynamic is not on the classpath.\\n\"", "url": "https://github.com/kiegroup/optaplanner/pull/1065#discussion_r539131126", "createdAt": "2020-12-09T09:09:22Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-quarkus-integration/optaplanner-quarkus/deployment/src/main/java/org/optaplanner/quarkus/deployment/OptaPlannerProcessor.java", "diffHunk": "@@ -211,31 +214,77 @@ private void applySolverProperties(RecorderContext recorderContext,\n     }\n \n     private void applyScoreDirectorFactoryProperties(IndexView indexView, SolverConfig solverConfig) {\n+        Optional<String> constraintsDrlFromProperty = constraintsDrl();\n+        Optional<String> defaultConstraintsDrl = defaultConstraintsDrl();\n+        Optional<String> effectiveConstraintsDrl = constraintsDrlFromProperty.map(Optional::of).orElse(defaultConstraintsDrl);\n         if (solverConfig.getScoreDirectorFactoryConfig() == null) {\n-            ScoreDirectorFactoryConfig scoreDirectorFactoryConfig = new ScoreDirectorFactoryConfig();\n-            scoreDirectorFactoryConfig.setEasyScoreCalculatorClass(\n-                    findImplementingClass(DotNames.EASY_SCORE_CALCULATOR, indexView));\n-            scoreDirectorFactoryConfig.setConstraintProviderClass(\n-                    findImplementingClass(DotNames.CONSTRAINT_PROVIDER, indexView));\n-            scoreDirectorFactoryConfig.setIncrementalScoreCalculatorClass(\n-                    findImplementingClass(DotNames.INCREMENTAL_SCORE_CALCULATOR, indexView));\n+            ScoreDirectorFactoryConfig scoreDirectorFactoryConfig =\n+                    defaultScoreDirectoryFactoryConfig(indexView, effectiveConstraintsDrl);\n+            solverConfig.setScoreDirectorFactoryConfig(scoreDirectorFactoryConfig);\n+        } else {\n+            ScoreDirectorFactoryConfig scoreDirectorFactoryConfig = solverConfig.getScoreDirectorFactoryConfig();\n+            if (constraintsDrlFromProperty.isPresent()) {\n+                scoreDirectorFactoryConfig.setScoreDrlList(Collections.singletonList(constraintsDrlFromProperty.get()));\n+            } else {\n+                if (scoreDirectorFactoryConfig.getScoreDrlList() == null) {\n+                    defaultConstraintsDrl.ifPresent((resolvedConstraintsDrl) -> scoreDirectorFactoryConfig\n+                            .setScoreDrlList(Collections.singletonList(resolvedConstraintsDrl)));\n+                }\n+            }\n+        }\n+\n+        if (solverConfig.getScoreDirectorFactoryConfig().getScoreDrlList() != null) {\n             ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n-            if (classLoader.getResource(SolverBuildTimeConfig.DEFAULT_SCORE_DRL_URL) != null) {\n-                scoreDirectorFactoryConfig.setScoreDrlList(Collections.singletonList(\n-                        SolverBuildTimeConfig.DEFAULT_SCORE_DRL_URL));\n+            try {\n+                Class.forName(\"org.drools.dynamic.DynamicComponentsSupplier\", false, classLoader);\n+            } catch (ClassNotFoundException e) {\n+                throw new IllegalStateException(\n+                        \"Constraints DRL has been detected, but drools-core-dynamic is not on classpath.\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c36263858a5f3774745b0326ea4f2193e2c69ee"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NDk1NjUyOnYy", "diffSide": "RIGHT", "path": "optaplanner-quarkus-integration/optaplanner-quarkus/deployment/src/main/java/org/optaplanner/quarkus/deployment/OptaPlannerProcessor.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwOToxMjoyOFrOICKF4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwOTo1NTo1OFrOICMDHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTEzMzQwOA==", "bodyText": "I tend to avoid \"it\" references in the \"error maybe fix\" to the previous line, so users can \"just fix it and move on\" faster. Especially if the \"error fact\" is very long and complex to parse (hard to see in a console window, especially if it doesn't wrap and because the error message only starts at column 70 or so)\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                            + \" Maybe try adding it. Please note that constraints DRL does not work in the native mode.\");\n          \n          \n            \n                                            + \"\\nMaybe add the dependency org.kie.kogito:drools-core-dynamic and exclude the dependency org.kie.kogito:drools-core-static.\");", "url": "https://github.com/kiegroup/optaplanner/pull/1065#discussion_r539133408", "createdAt": "2020-12-09T09:12:28Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-quarkus-integration/optaplanner-quarkus/deployment/src/main/java/org/optaplanner/quarkus/deployment/OptaPlannerProcessor.java", "diffHunk": "@@ -211,31 +214,77 @@ private void applySolverProperties(RecorderContext recorderContext,\n     }\n \n     private void applyScoreDirectorFactoryProperties(IndexView indexView, SolverConfig solverConfig) {\n+        Optional<String> constraintsDrlFromProperty = constraintsDrl();\n+        Optional<String> defaultConstraintsDrl = defaultConstraintsDrl();\n+        Optional<String> effectiveConstraintsDrl = constraintsDrlFromProperty.map(Optional::of).orElse(defaultConstraintsDrl);\n         if (solverConfig.getScoreDirectorFactoryConfig() == null) {\n-            ScoreDirectorFactoryConfig scoreDirectorFactoryConfig = new ScoreDirectorFactoryConfig();\n-            scoreDirectorFactoryConfig.setEasyScoreCalculatorClass(\n-                    findImplementingClass(DotNames.EASY_SCORE_CALCULATOR, indexView));\n-            scoreDirectorFactoryConfig.setConstraintProviderClass(\n-                    findImplementingClass(DotNames.CONSTRAINT_PROVIDER, indexView));\n-            scoreDirectorFactoryConfig.setIncrementalScoreCalculatorClass(\n-                    findImplementingClass(DotNames.INCREMENTAL_SCORE_CALCULATOR, indexView));\n+            ScoreDirectorFactoryConfig scoreDirectorFactoryConfig =\n+                    defaultScoreDirectoryFactoryConfig(indexView, effectiveConstraintsDrl);\n+            solverConfig.setScoreDirectorFactoryConfig(scoreDirectorFactoryConfig);\n+        } else {\n+            ScoreDirectorFactoryConfig scoreDirectorFactoryConfig = solverConfig.getScoreDirectorFactoryConfig();\n+            if (constraintsDrlFromProperty.isPresent()) {\n+                scoreDirectorFactoryConfig.setScoreDrlList(Collections.singletonList(constraintsDrlFromProperty.get()));\n+            } else {\n+                if (scoreDirectorFactoryConfig.getScoreDrlList() == null) {\n+                    defaultConstraintsDrl.ifPresent((resolvedConstraintsDrl) -> scoreDirectorFactoryConfig\n+                            .setScoreDrlList(Collections.singletonList(resolvedConstraintsDrl)));\n+                }\n+            }\n+        }\n+\n+        if (solverConfig.getScoreDirectorFactoryConfig().getScoreDrlList() != null) {\n             ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n-            if (classLoader.getResource(SolverBuildTimeConfig.DEFAULT_SCORE_DRL_URL) != null) {\n-                scoreDirectorFactoryConfig.setScoreDrlList(Collections.singletonList(\n-                        SolverBuildTimeConfig.DEFAULT_SCORE_DRL_URL));\n+            try {\n+                Class.forName(\"org.drools.dynamic.DynamicComponentsSupplier\", false, classLoader);\n+            } catch (ClassNotFoundException e) {\n+                throw new IllegalStateException(\n+                        \"Constraints DRL has been detected, but drools-core-dynamic is not on classpath.\"\n+                                + \" Maybe try adding it. Please note that constraints DRL does not work in the native mode.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c36263858a5f3774745b0326ea4f2193e2c69ee"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTEzNDc2Ng==", "bodyText": "For the part about not working in native mode: that doesn't belong here, but in the Quarkus integration chapter docs, especially on the constraints-drl property.\nAlso, if the do try to run it in native mode with a scoreDRL, the error message should be proper - but that's a different check than this one - can we somehow detect that?", "url": "https://github.com/kiegroup/optaplanner/pull/1065#discussion_r539134766", "createdAt": "2020-12-09T09:14:26Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-quarkus-integration/optaplanner-quarkus/deployment/src/main/java/org/optaplanner/quarkus/deployment/OptaPlannerProcessor.java", "diffHunk": "@@ -211,31 +214,77 @@ private void applySolverProperties(RecorderContext recorderContext,\n     }\n \n     private void applyScoreDirectorFactoryProperties(IndexView indexView, SolverConfig solverConfig) {\n+        Optional<String> constraintsDrlFromProperty = constraintsDrl();\n+        Optional<String> defaultConstraintsDrl = defaultConstraintsDrl();\n+        Optional<String> effectiveConstraintsDrl = constraintsDrlFromProperty.map(Optional::of).orElse(defaultConstraintsDrl);\n         if (solverConfig.getScoreDirectorFactoryConfig() == null) {\n-            ScoreDirectorFactoryConfig scoreDirectorFactoryConfig = new ScoreDirectorFactoryConfig();\n-            scoreDirectorFactoryConfig.setEasyScoreCalculatorClass(\n-                    findImplementingClass(DotNames.EASY_SCORE_CALCULATOR, indexView));\n-            scoreDirectorFactoryConfig.setConstraintProviderClass(\n-                    findImplementingClass(DotNames.CONSTRAINT_PROVIDER, indexView));\n-            scoreDirectorFactoryConfig.setIncrementalScoreCalculatorClass(\n-                    findImplementingClass(DotNames.INCREMENTAL_SCORE_CALCULATOR, indexView));\n+            ScoreDirectorFactoryConfig scoreDirectorFactoryConfig =\n+                    defaultScoreDirectoryFactoryConfig(indexView, effectiveConstraintsDrl);\n+            solverConfig.setScoreDirectorFactoryConfig(scoreDirectorFactoryConfig);\n+        } else {\n+            ScoreDirectorFactoryConfig scoreDirectorFactoryConfig = solverConfig.getScoreDirectorFactoryConfig();\n+            if (constraintsDrlFromProperty.isPresent()) {\n+                scoreDirectorFactoryConfig.setScoreDrlList(Collections.singletonList(constraintsDrlFromProperty.get()));\n+            } else {\n+                if (scoreDirectorFactoryConfig.getScoreDrlList() == null) {\n+                    defaultConstraintsDrl.ifPresent((resolvedConstraintsDrl) -> scoreDirectorFactoryConfig\n+                            .setScoreDrlList(Collections.singletonList(resolvedConstraintsDrl)));\n+                }\n+            }\n+        }\n+\n+        if (solverConfig.getScoreDirectorFactoryConfig().getScoreDrlList() != null) {\n             ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n-            if (classLoader.getResource(SolverBuildTimeConfig.DEFAULT_SCORE_DRL_URL) != null) {\n-                scoreDirectorFactoryConfig.setScoreDrlList(Collections.singletonList(\n-                        SolverBuildTimeConfig.DEFAULT_SCORE_DRL_URL));\n+            try {\n+                Class.forName(\"org.drools.dynamic.DynamicComponentsSupplier\", false, classLoader);\n+            } catch (ClassNotFoundException e) {\n+                throw new IllegalStateException(\n+                        \"Constraints DRL has been detected, but drools-core-dynamic is not on classpath.\"\n+                                + \" Maybe try adding it. Please note that constraints DRL does not work in the native mode.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTEzMzQwOA=="}, "originalCommit": {"oid": "5c36263858a5f3774745b0326ea4f2193e2c69ee"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTEzNTAzNg==", "bodyText": "Also, what's the error message if I add dynamic to the classpath but forget to exclude static?", "url": "https://github.com/kiegroup/optaplanner/pull/1065#discussion_r539135036", "createdAt": "2020-12-09T09:14:46Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-quarkus-integration/optaplanner-quarkus/deployment/src/main/java/org/optaplanner/quarkus/deployment/OptaPlannerProcessor.java", "diffHunk": "@@ -211,31 +214,77 @@ private void applySolverProperties(RecorderContext recorderContext,\n     }\n \n     private void applyScoreDirectorFactoryProperties(IndexView indexView, SolverConfig solverConfig) {\n+        Optional<String> constraintsDrlFromProperty = constraintsDrl();\n+        Optional<String> defaultConstraintsDrl = defaultConstraintsDrl();\n+        Optional<String> effectiveConstraintsDrl = constraintsDrlFromProperty.map(Optional::of).orElse(defaultConstraintsDrl);\n         if (solverConfig.getScoreDirectorFactoryConfig() == null) {\n-            ScoreDirectorFactoryConfig scoreDirectorFactoryConfig = new ScoreDirectorFactoryConfig();\n-            scoreDirectorFactoryConfig.setEasyScoreCalculatorClass(\n-                    findImplementingClass(DotNames.EASY_SCORE_CALCULATOR, indexView));\n-            scoreDirectorFactoryConfig.setConstraintProviderClass(\n-                    findImplementingClass(DotNames.CONSTRAINT_PROVIDER, indexView));\n-            scoreDirectorFactoryConfig.setIncrementalScoreCalculatorClass(\n-                    findImplementingClass(DotNames.INCREMENTAL_SCORE_CALCULATOR, indexView));\n+            ScoreDirectorFactoryConfig scoreDirectorFactoryConfig =\n+                    defaultScoreDirectoryFactoryConfig(indexView, effectiveConstraintsDrl);\n+            solverConfig.setScoreDirectorFactoryConfig(scoreDirectorFactoryConfig);\n+        } else {\n+            ScoreDirectorFactoryConfig scoreDirectorFactoryConfig = solverConfig.getScoreDirectorFactoryConfig();\n+            if (constraintsDrlFromProperty.isPresent()) {\n+                scoreDirectorFactoryConfig.setScoreDrlList(Collections.singletonList(constraintsDrlFromProperty.get()));\n+            } else {\n+                if (scoreDirectorFactoryConfig.getScoreDrlList() == null) {\n+                    defaultConstraintsDrl.ifPresent((resolvedConstraintsDrl) -> scoreDirectorFactoryConfig\n+                            .setScoreDrlList(Collections.singletonList(resolvedConstraintsDrl)));\n+                }\n+            }\n+        }\n+\n+        if (solverConfig.getScoreDirectorFactoryConfig().getScoreDrlList() != null) {\n             ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n-            if (classLoader.getResource(SolverBuildTimeConfig.DEFAULT_SCORE_DRL_URL) != null) {\n-                scoreDirectorFactoryConfig.setScoreDrlList(Collections.singletonList(\n-                        SolverBuildTimeConfig.DEFAULT_SCORE_DRL_URL));\n+            try {\n+                Class.forName(\"org.drools.dynamic.DynamicComponentsSupplier\", false, classLoader);\n+            } catch (ClassNotFoundException e) {\n+                throw new IllegalStateException(\n+                        \"Constraints DRL has been detected, but drools-core-dynamic is not on classpath.\"\n+                                + \" Maybe try adding it. Please note that constraints DRL does not work in the native mode.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTEzMzQwOA=="}, "originalCommit": {"oid": "5c36263858a5f3774745b0326ea4f2193e2c69ee"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTE2NTQ3MA==", "bodyText": "Agreed: let's provide fail fast checks for both.\n\"Maybe\" suggestion for native: either use ConstraintProvider or don't use native.", "url": "https://github.com/kiegroup/optaplanner/pull/1065#discussion_r539165470", "createdAt": "2020-12-09T09:55:58Z", "author": {"login": "rsynek"}, "path": "optaplanner-quarkus-integration/optaplanner-quarkus/deployment/src/main/java/org/optaplanner/quarkus/deployment/OptaPlannerProcessor.java", "diffHunk": "@@ -211,31 +214,77 @@ private void applySolverProperties(RecorderContext recorderContext,\n     }\n \n     private void applyScoreDirectorFactoryProperties(IndexView indexView, SolverConfig solverConfig) {\n+        Optional<String> constraintsDrlFromProperty = constraintsDrl();\n+        Optional<String> defaultConstraintsDrl = defaultConstraintsDrl();\n+        Optional<String> effectiveConstraintsDrl = constraintsDrlFromProperty.map(Optional::of).orElse(defaultConstraintsDrl);\n         if (solverConfig.getScoreDirectorFactoryConfig() == null) {\n-            ScoreDirectorFactoryConfig scoreDirectorFactoryConfig = new ScoreDirectorFactoryConfig();\n-            scoreDirectorFactoryConfig.setEasyScoreCalculatorClass(\n-                    findImplementingClass(DotNames.EASY_SCORE_CALCULATOR, indexView));\n-            scoreDirectorFactoryConfig.setConstraintProviderClass(\n-                    findImplementingClass(DotNames.CONSTRAINT_PROVIDER, indexView));\n-            scoreDirectorFactoryConfig.setIncrementalScoreCalculatorClass(\n-                    findImplementingClass(DotNames.INCREMENTAL_SCORE_CALCULATOR, indexView));\n+            ScoreDirectorFactoryConfig scoreDirectorFactoryConfig =\n+                    defaultScoreDirectoryFactoryConfig(indexView, effectiveConstraintsDrl);\n+            solverConfig.setScoreDirectorFactoryConfig(scoreDirectorFactoryConfig);\n+        } else {\n+            ScoreDirectorFactoryConfig scoreDirectorFactoryConfig = solverConfig.getScoreDirectorFactoryConfig();\n+            if (constraintsDrlFromProperty.isPresent()) {\n+                scoreDirectorFactoryConfig.setScoreDrlList(Collections.singletonList(constraintsDrlFromProperty.get()));\n+            } else {\n+                if (scoreDirectorFactoryConfig.getScoreDrlList() == null) {\n+                    defaultConstraintsDrl.ifPresent((resolvedConstraintsDrl) -> scoreDirectorFactoryConfig\n+                            .setScoreDrlList(Collections.singletonList(resolvedConstraintsDrl)));\n+                }\n+            }\n+        }\n+\n+        if (solverConfig.getScoreDirectorFactoryConfig().getScoreDrlList() != null) {\n             ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n-            if (classLoader.getResource(SolverBuildTimeConfig.DEFAULT_SCORE_DRL_URL) != null) {\n-                scoreDirectorFactoryConfig.setScoreDrlList(Collections.singletonList(\n-                        SolverBuildTimeConfig.DEFAULT_SCORE_DRL_URL));\n+            try {\n+                Class.forName(\"org.drools.dynamic.DynamicComponentsSupplier\", false, classLoader);\n+            } catch (ClassNotFoundException e) {\n+                throw new IllegalStateException(\n+                        \"Constraints DRL has been detected, but drools-core-dynamic is not on classpath.\"\n+                                + \" Maybe try adding it. Please note that constraints DRL does not work in the native mode.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTEzMzQwOA=="}, "originalCommit": {"oid": "5c36263858a5f3774745b0326ea4f2193e2c69ee"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNjc5MzM2OnYy", "diffSide": "RIGHT", "path": "optaplanner-quarkus-integration/optaplanner-quarkus/deployment/pom.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwOTo1NTo0M1rOIFIeBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNToyMDoxOVrOIGQy3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI1MjU0OQ==", "bodyText": "This solves the issue with drools-core-static getting on the classpath. A user still has to exclude this dependency from the dependency on optaplanner-quarkus and optaplanner-quarkus-json, etc.", "url": "https://github.com/kiegroup/optaplanner/pull/1065#discussion_r542252549", "createdAt": "2020-12-14T09:55:43Z", "author": {"login": "rsynek"}, "path": "optaplanner-quarkus-integration/optaplanner-quarkus/deployment/pom.xml", "diffHunk": "@@ -25,6 +25,14 @@\n     <dependency>\n       <groupId>org.optaplanner</groupId>\n       <artifactId>optaplanner-quarkus</artifactId>\n+      <exclusions>\n+        <!-- The constraints.drl requires this dependency to be excluded, otherwise the quarkus-maven-plugin\n+             downloads it at runtime. -->\n+        <exclusion>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00216e957a68dc065eaf07646e311105b78b6707"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM0NDM5Mw==", "bodyText": "Intresting, let's dicuss indeed", "url": "https://github.com/kiegroup/optaplanner/pull/1065#discussion_r543344393", "createdAt": "2020-12-15T13:34:07Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-quarkus-integration/optaplanner-quarkus/deployment/pom.xml", "diffHunk": "@@ -25,6 +25,14 @@\n     <dependency>\n       <groupId>org.optaplanner</groupId>\n       <artifactId>optaplanner-quarkus</artifactId>\n+      <exclusions>\n+        <!-- The constraints.drl requires this dependency to be excluded, otherwise the quarkus-maven-plugin\n+             downloads it at runtime. -->\n+        <exclusion>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI1MjU0OQ=="}, "originalCommit": {"oid": "00216e957a68dc065eaf07646e311105b78b6707"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQzNzUzNA==", "bodyText": "As discussed, we won't do this change and remove the fail fast if static is not in the classpath with scoreDRL.", "url": "https://github.com/kiegroup/optaplanner/pull/1065#discussion_r543437534", "createdAt": "2020-12-15T15:20:19Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-quarkus-integration/optaplanner-quarkus/deployment/pom.xml", "diffHunk": "@@ -25,6 +25,14 @@\n     <dependency>\n       <groupId>org.optaplanner</groupId>\n       <artifactId>optaplanner-quarkus</artifactId>\n+      <exclusions>\n+        <!-- The constraints.drl requires this dependency to be excluded, otherwise the quarkus-maven-plugin\n+             downloads it at runtime. -->\n+        <exclusion>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI1MjU0OQ=="}, "originalCommit": {"oid": "00216e957a68dc065eaf07646e311105b78b6707"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDAyNjA1OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/config/util/ConfigUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzoyNzowNlrOIGKzGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzoyODowOFrOIGK2Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMzOTI5MA==", "bodyText": "Nitpick:\nI personally think the method should not accept null lists. Just add a javadoc that has \"@param list never null\"\nBut if should accept null too, we treat is as an exceptionally situation (so handle it with an if statement before doing the real code)\n\nif (list == null) {\n   return \"\";\n}\nString abbreviation = ...", "url": "https://github.com/kiegroup/optaplanner/pull/1065#discussion_r543339290", "createdAt": "2020-12-15T13:27:06Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/config/util/ConfigUtils.java", "diffHunk": "@@ -414,6 +414,21 @@ public static int resolvePoolSize(String propertyName, String value, String... m\n         return memberAccessor;\n     }\n \n+    public static String abbreviate(List<String> list, int limit) {\n+        String abbreviation = \"\";\n+        if (list != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00216e957a68dc065eaf07646e311105b78b6707"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM0MDAzNQ==", "bodyText": "ah, I see below it's easier for it to also accept null.", "url": "https://github.com/kiegroup/optaplanner/pull/1065#discussion_r543340035", "createdAt": "2020-12-15T13:28:08Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/config/util/ConfigUtils.java", "diffHunk": "@@ -414,6 +414,21 @@ public static int resolvePoolSize(String propertyName, String value, String... m\n         return memberAccessor;\n     }\n \n+    public static String abbreviate(List<String> list, int limit) {\n+        String abbreviation = \"\";\n+        if (list != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMzOTI5MA=="}, "originalCommit": {"oid": "00216e957a68dc065eaf07646e311105b78b6707"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDA1ODI3OnYy", "diffSide": "RIGHT", "path": "optaplanner-docs/src/main/asciidoc/Integration/Integration-chapter.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzozMzozOVrOIGLFzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzo0NjoxM1rOIGLpBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM0NDA3Ng==", "bodyText": "Great work. Mind if I add this issue on your backlog (not for this PR)? https://issues.redhat.com/browse/PLANNER-2288", "url": "https://github.com/kiegroup/optaplanner/pull/1065#discussion_r543344076", "createdAt": "2020-12-15T13:33:39Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-docs/src/main/asciidoc/Integration/Integration-chapter.adoc", "diffHunk": "@@ -508,6 +508,10 @@ optaplanner.solver-config-xml::\n A classpath resource to read the solver configuration XML.\n Defaults to `solverConfig.xml`.\n If this property isn't specified, that file is optional.\n+optaplanner.score-drl::\n+A classpath resource to read the score DRL.\n+Defaults to `constraints.drl`.\n+Do not define this property when a `ConstraintProvider`, `EasyScoreCalculator` or `IncrementalScoreCalculator` class exists.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00216e957a68dc065eaf07646e311105b78b6707"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM1MzA5Mw==", "bodyText": "No problem, in fact I have already created one (PLANNER-2284) - see one of my earlier responses on this PR.", "url": "https://github.com/kiegroup/optaplanner/pull/1065#discussion_r543353093", "createdAt": "2020-12-15T13:46:13Z", "author": {"login": "rsynek"}, "path": "optaplanner-docs/src/main/asciidoc/Integration/Integration-chapter.adoc", "diffHunk": "@@ -508,6 +508,10 @@ optaplanner.solver-config-xml::\n A classpath resource to read the solver configuration XML.\n Defaults to `solverConfig.xml`.\n If this property isn't specified, that file is optional.\n+optaplanner.score-drl::\n+A classpath resource to read the score DRL.\n+Defaults to `constraints.drl`.\n+Do not define this property when a `ConstraintProvider`, `EasyScoreCalculator` or `IncrementalScoreCalculator` class exists.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM0NDA3Ng=="}, "originalCommit": {"oid": "00216e957a68dc065eaf07646e311105b78b6707"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDA2NjU3OnYy", "diffSide": "RIGHT", "path": "optaplanner-quarkus-integration/optaplanner-quarkus/deployment/src/main/java/org/optaplanner/quarkus/deployment/OptaPlannerProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzozNTozM1rOIGLKow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzo0Mjo1OVrOIGLf8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM0NTMxNQ==", "bodyText": "Nitpick: Personally, I'd inline these booleans in the if statements, as they are only used once.", "url": "https://github.com/kiegroup/optaplanner/pull/1065#discussion_r543345315", "createdAt": "2020-12-15T13:35:33Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-quarkus-integration/optaplanner-quarkus/deployment/src/main/java/org/optaplanner/quarkus/deployment/OptaPlannerProcessor.java", "diffHunk": "@@ -210,32 +213,95 @@ private void applySolverProperties(RecorderContext recorderContext,\n                 .collect(Collectors.toList());\n     }\n \n-    private void applyScoreDirectorFactoryProperties(IndexView indexView, SolverConfig solverConfig) {\n+    protected void applyScoreDirectorFactoryProperties(IndexView indexView, SolverConfig solverConfig) {\n+        Optional<String> constraintsDrlFromProperty = constraintsDrl();\n+        Optional<String> defaultConstraintsDrl = defaultConstraintsDrl();\n+        Optional<String> effectiveConstraintsDrl = constraintsDrlFromProperty.map(Optional::of).orElse(defaultConstraintsDrl);\n         if (solverConfig.getScoreDirectorFactoryConfig() == null) {\n-            ScoreDirectorFactoryConfig scoreDirectorFactoryConfig = new ScoreDirectorFactoryConfig();\n-            scoreDirectorFactoryConfig.setEasyScoreCalculatorClass(\n-                    findImplementingClass(DotNames.EASY_SCORE_CALCULATOR, indexView));\n-            scoreDirectorFactoryConfig.setConstraintProviderClass(\n-                    findImplementingClass(DotNames.CONSTRAINT_PROVIDER, indexView));\n-            scoreDirectorFactoryConfig.setIncrementalScoreCalculatorClass(\n-                    findImplementingClass(DotNames.INCREMENTAL_SCORE_CALCULATOR, indexView));\n-            ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n-            if (classLoader.getResource(SolverBuildTimeConfig.DEFAULT_SCORE_DRL_URL) != null) {\n-                scoreDirectorFactoryConfig.setScoreDrlList(Collections.singletonList(\n-                        SolverBuildTimeConfig.DEFAULT_SCORE_DRL_URL));\n+            ScoreDirectorFactoryConfig scoreDirectorFactoryConfig =\n+                    defaultScoreDirectoryFactoryConfig(indexView, effectiveConstraintsDrl);\n+            solverConfig.setScoreDirectorFactoryConfig(scoreDirectorFactoryConfig);\n+        } else {\n+            ScoreDirectorFactoryConfig scoreDirectorFactoryConfig = solverConfig.getScoreDirectorFactoryConfig();\n+            if (constraintsDrlFromProperty.isPresent()) {\n+                scoreDirectorFactoryConfig.setScoreDrlList(Collections.singletonList(constraintsDrlFromProperty.get()));\n+            } else {\n+                if (scoreDirectorFactoryConfig.getScoreDrlList() == null) {\n+                    defaultConstraintsDrl.ifPresent(resolvedConstraintsDrl -> scoreDirectorFactoryConfig\n+                            .setScoreDrlList(Collections.singletonList(resolvedConstraintsDrl)));\n+                }\n             }\n-            if (scoreDirectorFactoryConfig.getEasyScoreCalculatorClass() == null\n-                    && scoreDirectorFactoryConfig.getConstraintProviderClass() == null\n-                    && scoreDirectorFactoryConfig.getIncrementalScoreCalculatorClass() == null\n-                    && scoreDirectorFactoryConfig.getScoreDrlList() == null) {\n-                throw new IllegalStateException(\"No classes found that implement \"\n-                        + EasyScoreCalculator.class.getSimpleName() + \", \"\n-                        + ConstraintProvider.class.getSimpleName() + \" or \"\n-                        + IncrementalScoreCalculator.class.getSimpleName() + \", nor a \"\n-                        + SolverBuildTimeConfig.DEFAULT_SCORE_DRL_URL + \" resource.\");\n+        }\n+\n+        if (solverConfig.getScoreDirectorFactoryConfig().getScoreDrlList() != null) {\n+            boolean isDroolsDynamicPresent = isClassDefined(\"org.drools.dynamic.DynamicServiceRegistrySupplier\");\n+            boolean isDroolsStaticPresent = isClassDefined(\"org.drools.statics.StaticServiceRegistrySupplier\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00216e957a68dc065eaf07646e311105b78b6707"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM1MDc3MA==", "bodyText": "Myself, I don't see the DRY principle as the only motivation for creating methods or, in this case, local variables. The variable name clearly states what's the purpose of the check. In contrast to that, isClassDefined(\"org.drools.dynamic.DynamicServiceRegistrySupplier\") is not so clear about it's purpose as I just deliberately picked the class DynamicServiceRegistrySupplier as something pointing to the presence of the drools-core-dynamic. The local variables serve here rather in the role of comments.", "url": "https://github.com/kiegroup/optaplanner/pull/1065#discussion_r543350770", "createdAt": "2020-12-15T13:42:59Z", "author": {"login": "rsynek"}, "path": "optaplanner-quarkus-integration/optaplanner-quarkus/deployment/src/main/java/org/optaplanner/quarkus/deployment/OptaPlannerProcessor.java", "diffHunk": "@@ -210,32 +213,95 @@ private void applySolverProperties(RecorderContext recorderContext,\n                 .collect(Collectors.toList());\n     }\n \n-    private void applyScoreDirectorFactoryProperties(IndexView indexView, SolverConfig solverConfig) {\n+    protected void applyScoreDirectorFactoryProperties(IndexView indexView, SolverConfig solverConfig) {\n+        Optional<String> constraintsDrlFromProperty = constraintsDrl();\n+        Optional<String> defaultConstraintsDrl = defaultConstraintsDrl();\n+        Optional<String> effectiveConstraintsDrl = constraintsDrlFromProperty.map(Optional::of).orElse(defaultConstraintsDrl);\n         if (solverConfig.getScoreDirectorFactoryConfig() == null) {\n-            ScoreDirectorFactoryConfig scoreDirectorFactoryConfig = new ScoreDirectorFactoryConfig();\n-            scoreDirectorFactoryConfig.setEasyScoreCalculatorClass(\n-                    findImplementingClass(DotNames.EASY_SCORE_CALCULATOR, indexView));\n-            scoreDirectorFactoryConfig.setConstraintProviderClass(\n-                    findImplementingClass(DotNames.CONSTRAINT_PROVIDER, indexView));\n-            scoreDirectorFactoryConfig.setIncrementalScoreCalculatorClass(\n-                    findImplementingClass(DotNames.INCREMENTAL_SCORE_CALCULATOR, indexView));\n-            ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n-            if (classLoader.getResource(SolverBuildTimeConfig.DEFAULT_SCORE_DRL_URL) != null) {\n-                scoreDirectorFactoryConfig.setScoreDrlList(Collections.singletonList(\n-                        SolverBuildTimeConfig.DEFAULT_SCORE_DRL_URL));\n+            ScoreDirectorFactoryConfig scoreDirectorFactoryConfig =\n+                    defaultScoreDirectoryFactoryConfig(indexView, effectiveConstraintsDrl);\n+            solverConfig.setScoreDirectorFactoryConfig(scoreDirectorFactoryConfig);\n+        } else {\n+            ScoreDirectorFactoryConfig scoreDirectorFactoryConfig = solverConfig.getScoreDirectorFactoryConfig();\n+            if (constraintsDrlFromProperty.isPresent()) {\n+                scoreDirectorFactoryConfig.setScoreDrlList(Collections.singletonList(constraintsDrlFromProperty.get()));\n+            } else {\n+                if (scoreDirectorFactoryConfig.getScoreDrlList() == null) {\n+                    defaultConstraintsDrl.ifPresent(resolvedConstraintsDrl -> scoreDirectorFactoryConfig\n+                            .setScoreDrlList(Collections.singletonList(resolvedConstraintsDrl)));\n+                }\n             }\n-            if (scoreDirectorFactoryConfig.getEasyScoreCalculatorClass() == null\n-                    && scoreDirectorFactoryConfig.getConstraintProviderClass() == null\n-                    && scoreDirectorFactoryConfig.getIncrementalScoreCalculatorClass() == null\n-                    && scoreDirectorFactoryConfig.getScoreDrlList() == null) {\n-                throw new IllegalStateException(\"No classes found that implement \"\n-                        + EasyScoreCalculator.class.getSimpleName() + \", \"\n-                        + ConstraintProvider.class.getSimpleName() + \" or \"\n-                        + IncrementalScoreCalculator.class.getSimpleName() + \", nor a \"\n-                        + SolverBuildTimeConfig.DEFAULT_SCORE_DRL_URL + \" resource.\");\n+        }\n+\n+        if (solverConfig.getScoreDirectorFactoryConfig().getScoreDrlList() != null) {\n+            boolean isDroolsDynamicPresent = isClassDefined(\"org.drools.dynamic.DynamicServiceRegistrySupplier\");\n+            boolean isDroolsStaticPresent = isClassDefined(\"org.drools.statics.StaticServiceRegistrySupplier\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM0NTMxNQ=="}, "originalCommit": {"oid": "00216e957a68dc065eaf07646e311105b78b6707"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDA5NTk3OnYy", "diffSide": "RIGHT", "path": "optaplanner-quarkus-integration/optaplanner-quarkus/deployment/src/main/java/org/optaplanner/quarkus/deployment/OptaPlannerProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzo0MTozNFrOIGLblg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzo0MjoyNlrOIGLeKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM0OTY1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                            + \" org.kie.kogito:drools-core-static. Use a ConstraintProvider for a native compilation.\");\n          \n          \n            \n                                            + \" org.kie.kogito:drools-core-static.\"\n          \n          \n            \n                                            + \"\\nOr instead, maybe use a \" + ConstraintProvider.class.getSimpleName() + \" instead of scoreDRL.\");", "url": "https://github.com/kiegroup/optaplanner/pull/1065#discussion_r543349654", "createdAt": "2020-12-15T13:41:34Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-quarkus-integration/optaplanner-quarkus/deployment/src/main/java/org/optaplanner/quarkus/deployment/OptaPlannerProcessor.java", "diffHunk": "@@ -210,32 +213,95 @@ private void applySolverProperties(RecorderContext recorderContext,\n                 .collect(Collectors.toList());\n     }\n \n-    private void applyScoreDirectorFactoryProperties(IndexView indexView, SolverConfig solverConfig) {\n+    protected void applyScoreDirectorFactoryProperties(IndexView indexView, SolverConfig solverConfig) {\n+        Optional<String> constraintsDrlFromProperty = constraintsDrl();\n+        Optional<String> defaultConstraintsDrl = defaultConstraintsDrl();\n+        Optional<String> effectiveConstraintsDrl = constraintsDrlFromProperty.map(Optional::of).orElse(defaultConstraintsDrl);\n         if (solverConfig.getScoreDirectorFactoryConfig() == null) {\n-            ScoreDirectorFactoryConfig scoreDirectorFactoryConfig = new ScoreDirectorFactoryConfig();\n-            scoreDirectorFactoryConfig.setEasyScoreCalculatorClass(\n-                    findImplementingClass(DotNames.EASY_SCORE_CALCULATOR, indexView));\n-            scoreDirectorFactoryConfig.setConstraintProviderClass(\n-                    findImplementingClass(DotNames.CONSTRAINT_PROVIDER, indexView));\n-            scoreDirectorFactoryConfig.setIncrementalScoreCalculatorClass(\n-                    findImplementingClass(DotNames.INCREMENTAL_SCORE_CALCULATOR, indexView));\n-            ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n-            if (classLoader.getResource(SolverBuildTimeConfig.DEFAULT_SCORE_DRL_URL) != null) {\n-                scoreDirectorFactoryConfig.setScoreDrlList(Collections.singletonList(\n-                        SolverBuildTimeConfig.DEFAULT_SCORE_DRL_URL));\n+            ScoreDirectorFactoryConfig scoreDirectorFactoryConfig =\n+                    defaultScoreDirectoryFactoryConfig(indexView, effectiveConstraintsDrl);\n+            solverConfig.setScoreDirectorFactoryConfig(scoreDirectorFactoryConfig);\n+        } else {\n+            ScoreDirectorFactoryConfig scoreDirectorFactoryConfig = solverConfig.getScoreDirectorFactoryConfig();\n+            if (constraintsDrlFromProperty.isPresent()) {\n+                scoreDirectorFactoryConfig.setScoreDrlList(Collections.singletonList(constraintsDrlFromProperty.get()));\n+            } else {\n+                if (scoreDirectorFactoryConfig.getScoreDrlList() == null) {\n+                    defaultConstraintsDrl.ifPresent(resolvedConstraintsDrl -> scoreDirectorFactoryConfig\n+                            .setScoreDrlList(Collections.singletonList(resolvedConstraintsDrl)));\n+                }\n             }\n-            if (scoreDirectorFactoryConfig.getEasyScoreCalculatorClass() == null\n-                    && scoreDirectorFactoryConfig.getConstraintProviderClass() == null\n-                    && scoreDirectorFactoryConfig.getIncrementalScoreCalculatorClass() == null\n-                    && scoreDirectorFactoryConfig.getScoreDrlList() == null) {\n-                throw new IllegalStateException(\"No classes found that implement \"\n-                        + EasyScoreCalculator.class.getSimpleName() + \", \"\n-                        + ConstraintProvider.class.getSimpleName() + \" or \"\n-                        + IncrementalScoreCalculator.class.getSimpleName() + \", nor a \"\n-                        + SolverBuildTimeConfig.DEFAULT_SCORE_DRL_URL + \" resource.\");\n+        }\n+\n+        if (solverConfig.getScoreDirectorFactoryConfig().getScoreDrlList() != null) {\n+            boolean isDroolsDynamicPresent = isClassDefined(\"org.drools.dynamic.DynamicServiceRegistrySupplier\");\n+            boolean isDroolsStaticPresent = isClassDefined(\"org.drools.statics.StaticServiceRegistrySupplier\");\n+\n+            if (!isDroolsDynamicPresent) {\n+                throw new IllegalStateException(\n+                        \"Using scoreDRL in Quarkus, but the dependency drools-core-dynamic is not on the classpath.\\n\"\n+                                + \"Maybe add the dependency org.kie.kogito:drools-core-dynamic and exclude the dependency\"\n+                                + \" org.kie.kogito:drools-core-static. Use a ConstraintProvider for a native compilation.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00216e957a68dc065eaf07646e311105b78b6707"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM1MDMxMw==", "bodyText": "I don't think native compilation should be mentioned here - this is not a check related to native compilation.\nThe benefits of using ConstraintProvider over scoreDRL should be in the docs instead.", "url": "https://github.com/kiegroup/optaplanner/pull/1065#discussion_r543350313", "createdAt": "2020-12-15T13:42:26Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-quarkus-integration/optaplanner-quarkus/deployment/src/main/java/org/optaplanner/quarkus/deployment/OptaPlannerProcessor.java", "diffHunk": "@@ -210,32 +213,95 @@ private void applySolverProperties(RecorderContext recorderContext,\n                 .collect(Collectors.toList());\n     }\n \n-    private void applyScoreDirectorFactoryProperties(IndexView indexView, SolverConfig solverConfig) {\n+    protected void applyScoreDirectorFactoryProperties(IndexView indexView, SolverConfig solverConfig) {\n+        Optional<String> constraintsDrlFromProperty = constraintsDrl();\n+        Optional<String> defaultConstraintsDrl = defaultConstraintsDrl();\n+        Optional<String> effectiveConstraintsDrl = constraintsDrlFromProperty.map(Optional::of).orElse(defaultConstraintsDrl);\n         if (solverConfig.getScoreDirectorFactoryConfig() == null) {\n-            ScoreDirectorFactoryConfig scoreDirectorFactoryConfig = new ScoreDirectorFactoryConfig();\n-            scoreDirectorFactoryConfig.setEasyScoreCalculatorClass(\n-                    findImplementingClass(DotNames.EASY_SCORE_CALCULATOR, indexView));\n-            scoreDirectorFactoryConfig.setConstraintProviderClass(\n-                    findImplementingClass(DotNames.CONSTRAINT_PROVIDER, indexView));\n-            scoreDirectorFactoryConfig.setIncrementalScoreCalculatorClass(\n-                    findImplementingClass(DotNames.INCREMENTAL_SCORE_CALCULATOR, indexView));\n-            ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n-            if (classLoader.getResource(SolverBuildTimeConfig.DEFAULT_SCORE_DRL_URL) != null) {\n-                scoreDirectorFactoryConfig.setScoreDrlList(Collections.singletonList(\n-                        SolverBuildTimeConfig.DEFAULT_SCORE_DRL_URL));\n+            ScoreDirectorFactoryConfig scoreDirectorFactoryConfig =\n+                    defaultScoreDirectoryFactoryConfig(indexView, effectiveConstraintsDrl);\n+            solverConfig.setScoreDirectorFactoryConfig(scoreDirectorFactoryConfig);\n+        } else {\n+            ScoreDirectorFactoryConfig scoreDirectorFactoryConfig = solverConfig.getScoreDirectorFactoryConfig();\n+            if (constraintsDrlFromProperty.isPresent()) {\n+                scoreDirectorFactoryConfig.setScoreDrlList(Collections.singletonList(constraintsDrlFromProperty.get()));\n+            } else {\n+                if (scoreDirectorFactoryConfig.getScoreDrlList() == null) {\n+                    defaultConstraintsDrl.ifPresent(resolvedConstraintsDrl -> scoreDirectorFactoryConfig\n+                            .setScoreDrlList(Collections.singletonList(resolvedConstraintsDrl)));\n+                }\n             }\n-            if (scoreDirectorFactoryConfig.getEasyScoreCalculatorClass() == null\n-                    && scoreDirectorFactoryConfig.getConstraintProviderClass() == null\n-                    && scoreDirectorFactoryConfig.getIncrementalScoreCalculatorClass() == null\n-                    && scoreDirectorFactoryConfig.getScoreDrlList() == null) {\n-                throw new IllegalStateException(\"No classes found that implement \"\n-                        + EasyScoreCalculator.class.getSimpleName() + \", \"\n-                        + ConstraintProvider.class.getSimpleName() + \" or \"\n-                        + IncrementalScoreCalculator.class.getSimpleName() + \", nor a \"\n-                        + SolverBuildTimeConfig.DEFAULT_SCORE_DRL_URL + \" resource.\");\n+        }\n+\n+        if (solverConfig.getScoreDirectorFactoryConfig().getScoreDrlList() != null) {\n+            boolean isDroolsDynamicPresent = isClassDefined(\"org.drools.dynamic.DynamicServiceRegistrySupplier\");\n+            boolean isDroolsStaticPresent = isClassDefined(\"org.drools.statics.StaticServiceRegistrySupplier\");\n+\n+            if (!isDroolsDynamicPresent) {\n+                throw new IllegalStateException(\n+                        \"Using scoreDRL in Quarkus, but the dependency drools-core-dynamic is not on the classpath.\\n\"\n+                                + \"Maybe add the dependency org.kie.kogito:drools-core-dynamic and exclude the dependency\"\n+                                + \" org.kie.kogito:drools-core-static. Use a ConstraintProvider for a native compilation.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM0OTY1NA=="}, "originalCommit": {"oid": "00216e957a68dc065eaf07646e311105b78b6707"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDE2MjQ5OnYy", "diffSide": "RIGHT", "path": "optaplanner-spring-integration/optaplanner-spring-boot-autoconfigure/src/main/java/org/optaplanner/spring/boot/autoconfigure/OptaPlannerAutoConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzo1NDo1MlrOIGMCMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzo1NDo1MlrOIGMCMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM1OTUzOQ==", "bodyText": "(non blocking)\nPersonally, I am not a fan of using Optional outside of Streams - a nullable var works just as well - see Stuart's and Goetz's talks around this topic.", "url": "https://github.com/kiegroup/optaplanner/pull/1065#discussion_r543359539", "createdAt": "2020-12-15T13:54:52Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-spring-integration/optaplanner-spring-boot-autoconfigure/src/main/java/org/optaplanner/spring/boot/autoconfigure/OptaPlannerAutoConfiguration.java", "diffHunk": "@@ -200,33 +201,69 @@ private void applySolverProperties(SolverConfig solverConfig) {\n         return new ArrayList<>(entityClassSet);\n     }\n \n-    private void applyScoreDirectorFactoryProperties(SolverConfig solverConfig) {\n+    protected void applyScoreDirectorFactoryProperties(SolverConfig solverConfig) {\n+        Optional<String> constraintsDrlFromProperty = constraintsDrl();\n+        Optional<String> defaultConstraintsDrl = defaultConstraintsDrl();\n+        Optional<String> effectiveConstraintsDrl = constraintsDrlFromProperty.map(Optional::of).orElse(defaultConstraintsDrl);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00216e957a68dc065eaf07646e311105b78b6707"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4195, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}