{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMxMDk3MDQy", "number": 1058, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNTozNjoyNVrOE_rYBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzowNzowM1rOFDd9NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MjA2NDA0OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/BavetConstraintSession.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNTozNjoyNVrOH9g2rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwODowMjowM1rOH-FdRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI2MzQ2OQ==", "bodyText": "This is not actually in use yet. The change to completely remove Node reference from Tuple seemed too invasive for this PR.", "url": "https://github.com/kiegroup/optaplanner/pull/1058#discussion_r534263469", "createdAt": "2020-12-02T15:36:25Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/BavetConstraintSession.java", "diffHunk": "@@ -48,34 +56,80 @@\n     private final ScoreInliner<Score_> scoreInliner;\n \n     private final Map<Class<?>, BavetFromUniNode<Object>> declaredClassToNodeMap;\n-    private final int nodeOrderSize;\n+    private final int nodeIndexSize;\n     private final Map<String, BavetScoringNode> constraintIdToScoringNodeMap;\n \n     private final Map<Class<?>, List<BavetFromUniNode<Object>>> effectiveClassToNodeListMap;\n \n-    private final List<Queue<BavetAbstractTuple>> nodeOrderedQueueList;\n+    private final List<BavetAbstractNode> nodeIndexToNodeMap;\n+    private final List<Queue<BavetAbstractTuple>> nodeIndexToDirtyTupleQueueMap;\n     private final Map<Object, List<BavetFromUniTuple<Object>>> fromTupleListMap;\n \n     public BavetConstraintSession(boolean constraintMatchEnabled, ScoreDefinition<Score_> scoreDefinition,\n             Map<BavetConstraint<Solution_>, Score_> constraintToWeightMap) {\n         this.constraintMatchEnabled = constraintMatchEnabled;\n-        this.zeroScore = scoreDefinition.getZeroScore();\n-        this.scoreInliner = scoreDefinition.buildScoreInliner(constraintMatchEnabled);\n+        zeroScore = scoreDefinition.getZeroScore();\n+        scoreInliner = scoreDefinition.buildScoreInliner(constraintMatchEnabled);\n         declaredClassToNodeMap = new HashMap<>(50);\n         BavetNodeBuildPolicy<Solution_> buildPolicy = new BavetNodeBuildPolicy<>(this, constraintToWeightMap.size());\n         constraintToWeightMap.forEach((constraint, constraintWeight) -> {\n             constraint.createNodes(buildPolicy, declaredClassToNodeMap, constraintWeight);\n         });\n-        this.nodeOrderSize = buildPolicy.getNodeOrderMaximum() + 1;\n+        nodeIndexSize = buildPolicy.getNodeIndexMaximum() + 1;\n         constraintIdToScoringNodeMap = buildPolicy.getConstraintIdToScoringNodeMap();\n         effectiveClassToNodeListMap = new HashMap<>(declaredClassToNodeMap.size());\n-        nodeOrderedQueueList = new ArrayList<>(nodeOrderSize);\n-        for (int i = 0; i < nodeOrderSize; i++) {\n-            nodeOrderedQueueList.add(new ArrayDeque<>(1000));\n+        nodeIndexToNodeMap = new ArrayList<>(this.nodeIndexSize);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a2e3fea9fecf2d18f8cf1d3fb48487476d6dbf3"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg2MzE3Mw==", "bodyText": "Yes, thank you", "url": "https://github.com/kiegroup/optaplanner/pull/1058#discussion_r534863173", "createdAt": "2020-12-03T08:02:03Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/BavetConstraintSession.java", "diffHunk": "@@ -48,34 +56,80 @@\n     private final ScoreInliner<Score_> scoreInliner;\n \n     private final Map<Class<?>, BavetFromUniNode<Object>> declaredClassToNodeMap;\n-    private final int nodeOrderSize;\n+    private final int nodeIndexSize;\n     private final Map<String, BavetScoringNode> constraintIdToScoringNodeMap;\n \n     private final Map<Class<?>, List<BavetFromUniNode<Object>>> effectiveClassToNodeListMap;\n \n-    private final List<Queue<BavetAbstractTuple>> nodeOrderedQueueList;\n+    private final List<BavetAbstractNode> nodeIndexToNodeMap;\n+    private final List<Queue<BavetAbstractTuple>> nodeIndexToDirtyTupleQueueMap;\n     private final Map<Object, List<BavetFromUniTuple<Object>>> fromTupleListMap;\n \n     public BavetConstraintSession(boolean constraintMatchEnabled, ScoreDefinition<Score_> scoreDefinition,\n             Map<BavetConstraint<Solution_>, Score_> constraintToWeightMap) {\n         this.constraintMatchEnabled = constraintMatchEnabled;\n-        this.zeroScore = scoreDefinition.getZeroScore();\n-        this.scoreInliner = scoreDefinition.buildScoreInliner(constraintMatchEnabled);\n+        zeroScore = scoreDefinition.getZeroScore();\n+        scoreInliner = scoreDefinition.buildScoreInliner(constraintMatchEnabled);\n         declaredClassToNodeMap = new HashMap<>(50);\n         BavetNodeBuildPolicy<Solution_> buildPolicy = new BavetNodeBuildPolicy<>(this, constraintToWeightMap.size());\n         constraintToWeightMap.forEach((constraint, constraintWeight) -> {\n             constraint.createNodes(buildPolicy, declaredClassToNodeMap, constraintWeight);\n         });\n-        this.nodeOrderSize = buildPolicy.getNodeOrderMaximum() + 1;\n+        nodeIndexSize = buildPolicy.getNodeIndexMaximum() + 1;\n         constraintIdToScoringNodeMap = buildPolicy.getConstraintIdToScoringNodeMap();\n         effectiveClassToNodeListMap = new HashMap<>(declaredClassToNodeMap.size());\n-        nodeOrderedQueueList = new ArrayList<>(nodeOrderSize);\n-        for (int i = 0; i < nodeOrderSize; i++) {\n-            nodeOrderedQueueList.add(new ArrayDeque<>(1000));\n+        nodeIndexToNodeMap = new ArrayList<>(this.nodeIndexSize);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI2MzQ2OQ=="}, "originalCommit": {"oid": "4a2e3fea9fecf2d18f8cf1d3fb48487476d6dbf3"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MjA2ODI4OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/common/BavetTupleState.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNTozNjo1OVrOH9g44Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNTozNjo1OVrOH9g44Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI2NDAzMw==", "bodyText": "Why is NEW not dirty?", "url": "https://github.com/kiegroup/optaplanner/pull/1058#discussion_r534264033", "createdAt": "2020-12-02T15:36:59Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/common/BavetTupleState.java", "diffHunk": "@@ -17,20 +17,37 @@\n package org.optaplanner.core.impl.score.stream.bavet.common;\n \n public enum BavetTupleState {\n-    NEW,\n-    CREATING,\n-    UPDATING,\n-    OK,\n-    DYING,\n-    DEAD,\n-    ABORTING;\n+    NEW(false, true),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a2e3fea9fecf2d18f8cf1d3fb48487476d6dbf3"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NTgwNzExOnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/BavetConstraintSession.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwODowMTozMFrOH-FZtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwODowMTozMFrOH-FZtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg2MjI2MQ==", "bodyText": "I guess this can be nodeSize? (the number of nodes)", "url": "https://github.com/kiegroup/optaplanner/pull/1058#discussion_r534862261", "createdAt": "2020-12-03T08:01:30Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/BavetConstraintSession.java", "diffHunk": "@@ -48,34 +56,80 @@\n     private final ScoreInliner<Score_> scoreInliner;\n \n     private final Map<Class<?>, BavetFromUniNode<Object>> declaredClassToNodeMap;\n-    private final int nodeOrderSize;\n+    private final int nodeIndexSize;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a2e3fea9fecf2d18f8cf1d3fb48487476d6dbf3"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MTc1Nzc2OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/BavetConstraintSession.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMjo1NToxMVrOIDH5dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMjo1NToxMVrOIDH5dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE0NjAzNw==", "bodyText": "Why doesn't getNode() return type BavetAbstractNode?", "url": "https://github.com/kiegroup/optaplanner/pull/1058#discussion_r540146037", "createdAt": "2020-12-10T12:55:11Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/BavetConstraintSession.java", "diffHunk": "@@ -88,6 +89,23 @@ public BavetConstraintSession(boolean constraintMatchEnabled, ScoreDefinition<Sc\n         return nodeIndexedNodeMap;\n     }\n \n+    private static void refreshTuple(BavetAbstractTuple tuple) {\n+        ((BavetAbstractNode) tuple.getNode()).refresh(tuple);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "651a3c2c03a1218f2cd4138edcccd363e9bb0f2d"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MTc2MDAzOnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/BavetConstraintSession.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMjo1NTo0NVrOIDH60A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMjo1Nzo1NFrOIDIAFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE0NjM4NA==", "bodyText": "Let's a default case that throws an exception?", "url": "https://github.com/kiegroup/optaplanner/pull/1058#discussion_r540146384", "createdAt": "2020-12-10T12:55:45Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/BavetConstraintSession.java", "diffHunk": "@@ -88,6 +89,23 @@ public BavetConstraintSession(boolean constraintMatchEnabled, ScoreDefinition<Sc\n         return nodeIndexedNodeMap;\n     }\n \n+    private static void refreshTuple(BavetAbstractTuple tuple) {\n+        ((BavetAbstractNode) tuple.getNode()).refresh(tuple);\n+        switch (tuple.getState()) {\n+            case CREATING:\n+            case UPDATING:\n+                tuple.setState(BavetTupleState.OK);\n+                return;\n+            case DYING:\n+            case ABORTING:\n+                tuple.setState(BavetTupleState.DEAD);\n+                return;\n+            case DEAD:\n+                throw new IllegalStateException(\n+                        \"The tuple (\" + tuple + \") is already in the dead state (\" + tuple.getState() + \").\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "651a3c2c03a1218f2cd4138edcccd363e9bb0f2d"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE0NjgzMg==", "bodyText": "Also, this exception can start with \"Impossible state:\"\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    \"The tuple (\" + tuple + \") is already in the dead state (\" + tuple.getState() + \").\");\n          \n          \n            \n                                    \"Impossible state: the tuple (\" + tuple + \") is already in the dead state (\" + tuple.getState() + \").\");", "url": "https://github.com/kiegroup/optaplanner/pull/1058#discussion_r540146832", "createdAt": "2020-12-10T12:56:29Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/BavetConstraintSession.java", "diffHunk": "@@ -88,6 +89,23 @@ public BavetConstraintSession(boolean constraintMatchEnabled, ScoreDefinition<Sc\n         return nodeIndexedNodeMap;\n     }\n \n+    private static void refreshTuple(BavetAbstractTuple tuple) {\n+        ((BavetAbstractNode) tuple.getNode()).refresh(tuple);\n+        switch (tuple.getState()) {\n+            case CREATING:\n+            case UPDATING:\n+                tuple.setState(BavetTupleState.OK);\n+                return;\n+            case DYING:\n+            case ABORTING:\n+                tuple.setState(BavetTupleState.DEAD);\n+                return;\n+            case DEAD:\n+                throw new IllegalStateException(\n+                        \"The tuple (\" + tuple + \") is already in the dead state (\" + tuple.getState() + \").\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE0NjM4NA=="}, "originalCommit": {"oid": "651a3c2c03a1218f2cd4138edcccd363e9bb0f2d"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE0NzczNQ==", "bodyText": "Do we also want to print out the node toString in the exception message? Might be useful if someone ever sees it on production and asks us what could be the cause.\nOr even print out BavetNode.getDownstreamConstraintsString(), to know the constraint(s) that are involved", "url": "https://github.com/kiegroup/optaplanner/pull/1058#discussion_r540147735", "createdAt": "2020-12-10T12:57:54Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/BavetConstraintSession.java", "diffHunk": "@@ -88,6 +89,23 @@ public BavetConstraintSession(boolean constraintMatchEnabled, ScoreDefinition<Sc\n         return nodeIndexedNodeMap;\n     }\n \n+    private static void refreshTuple(BavetAbstractTuple tuple) {\n+        ((BavetAbstractNode) tuple.getNode()).refresh(tuple);\n+        switch (tuple.getState()) {\n+            case CREATING:\n+            case UPDATING:\n+                tuple.setState(BavetTupleState.OK);\n+                return;\n+            case DYING:\n+            case ABORTING:\n+                tuple.setState(BavetTupleState.DEAD);\n+                return;\n+            case DEAD:\n+                throw new IllegalStateException(\n+                        \"The tuple (\" + tuple + \") is already in the dead state (\" + tuple.getState() + \").\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE0NjM4NA=="}, "originalCommit": {"oid": "651a3c2c03a1218f2cd4138edcccd363e9bb0f2d"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MTc4MDMwOnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/bi/BavetFilterBiNode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzowMDoxOVrOIDIGXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzowMDoxOVrOIDIGXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE0OTM0Mg==", "bodyText": "(important IMO)\nThe entire Bavet implementation is not public API. We don't need to wrap in unmodifiableList() etc, as that will only create perf loss and memory usage increase.", "url": "https://github.com/kiegroup/optaplanner/pull/1058#discussion_r540149342", "createdAt": "2020-12-10T13:00:19Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/bi/BavetFilterBiNode.java", "diffHunk": "@@ -43,6 +45,11 @@ public void addChildNode(BavetAbstractBiNode<A, B> childNode) {\n         childNodeList.add(childNode);\n     }\n \n+    @Override\n+    public List<BavetAbstractBiNode<A, B>> getChildNodes() {\n+        return Collections.unmodifiableList(childNodeList);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "651a3c2c03a1218f2cd4138edcccd363e9bb0f2d"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MTc5MTM5OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/bi/BavetGroupBiNode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzowMjo0MlrOIDIMyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzowMjo0MlrOIDIMyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE1MDk4Ng==", "bodyText": "For consistency sake, please call this method getChildNodeList().\nThe color of the curtains is pink, I know you hate it, but let's not mix colors of curtains - it's going to look ugly.", "url": "https://github.com/kiegroup/optaplanner/pull/1058#discussion_r540150986", "createdAt": "2020-12-10T13:02:42Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/bi/BavetGroupBiNode.java", "diffHunk": "@@ -40,6 +42,11 @@ public void addChildNode(BavetAbstractBiNode<GroupKey_, Result_> childNode) {\n         childNodeList.add(childNode);\n     }\n \n+    @Override\n+    public List<BavetAbstractBiNode<GroupKey_, Result_>> getChildNodes() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "651a3c2c03a1218f2cd4138edcccd363e9bb0f2d"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MTc5MjIxOnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/bi/BavetGroupBiNode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzowMjo1NFrOIDINRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzowMjo1NFrOIDINRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE1MTEwOQ==", "bodyText": "see above, no need for unmodifiableList", "url": "https://github.com/kiegroup/optaplanner/pull/1058#discussion_r540151109", "createdAt": "2020-12-10T13:02:54Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/bi/BavetGroupBiNode.java", "diffHunk": "@@ -40,6 +42,11 @@ public void addChildNode(BavetAbstractBiNode<GroupKey_, Result_> childNode) {\n         childNodeList.add(childNode);\n     }\n \n+    @Override\n+    public List<BavetAbstractBiNode<GroupKey_, Result_>> getChildNodes() {\n+        return Collections.unmodifiableList(childNodeList);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "651a3c2c03a1218f2cd4138edcccd363e9bb0f2d"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MTc5OTYwOnYy", "diffSide": "LEFT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/bi/BavetJoinBridgeBiTuple.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzowNDo1M1rOIDIRuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNTozOTo0N1rOIDPhig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE1MjI0OQ==", "bodyText": "This is intresting. The Set becomes a List (which is a good thing I think.)\nDid this bring a performance gain? If not, is it possible it was offset by the unmodifiable wrapping?\nProbably not, but OTH measuring is knowing... (and more work, yes ...) Wdyt?", "url": "https://github.com/kiegroup/optaplanner/pull/1058#discussion_r540152249", "createdAt": "2020-12-10T13:04:53Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/bi/BavetJoinBridgeBiTuple.java", "diffHunk": "@@ -16,19 +16,14 @@\n \n package org.optaplanner.core.impl.score.stream.bavet.bi;\n \n-import java.util.LinkedHashSet;\n-import java.util.Set;\n-\n import org.optaplanner.core.impl.score.stream.bavet.common.BavetJoinBridgeTuple;\n-import org.optaplanner.core.impl.score.stream.bavet.common.BavetJoinTuple;\n \n public final class BavetJoinBridgeBiTuple<A, B> extends BavetAbstractBiTuple<A, B>\n         implements BavetJoinBridgeTuple {\n \n     protected final BavetAbstractBiTuple<A, B> parentTuple;\n     private final BavetJoinBridgeBiNode<A, B> node;\n \n-    protected Set<BavetJoinTuple> childTupleSet = new LinkedHashSet<>(); // TODO capacity", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "651a3c2c03a1218f2cd4138edcccd363e9bb0f2d"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI3MDk4Ng==", "bodyText": "I'll re-benchmark once this is merged. But I don't really think this should result in such a big gain - it's just inside one particular tuple, not inside all of them.", "url": "https://github.com/kiegroup/optaplanner/pull/1058#discussion_r540270986", "createdAt": "2020-12-10T15:39:47Z", "author": {"login": "triceo"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/bi/BavetJoinBridgeBiTuple.java", "diffHunk": "@@ -16,19 +16,14 @@\n \n package org.optaplanner.core.impl.score.stream.bavet.bi;\n \n-import java.util.LinkedHashSet;\n-import java.util.Set;\n-\n import org.optaplanner.core.impl.score.stream.bavet.common.BavetJoinBridgeTuple;\n-import org.optaplanner.core.impl.score.stream.bavet.common.BavetJoinTuple;\n \n public final class BavetJoinBridgeBiTuple<A, B> extends BavetAbstractBiTuple<A, B>\n         implements BavetJoinBridgeTuple {\n \n     protected final BavetAbstractBiTuple<A, B> parentTuple;\n     private final BavetJoinBridgeBiNode<A, B> node;\n \n-    protected Set<BavetJoinTuple> childTupleSet = new LinkedHashSet<>(); // TODO capacity", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE1MjI0OQ=="}, "originalCommit": {"oid": "651a3c2c03a1218f2cd4138edcccd363e9bb0f2d"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MTgwODUzOnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/tri/BavetJoinTriNode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzowNzowM1rOIDIW9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzowNzowM1rOIDIW9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE1MzU4OQ==", "bodyText": "see above: method name + unmodifiableList", "url": "https://github.com/kiegroup/optaplanner/pull/1058#discussion_r540153589", "createdAt": "2020-12-10T13:07:03Z", "author": {"login": "ge0ffrey"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/tri/BavetJoinTriNode.java", "diffHunk": "@@ -49,6 +50,11 @@ public void addChildNode(BavetAbstractTriNode<A, B, C> childNode) {\n         childNodeList.add(childNode);\n     }\n \n+    @Override\n+    public List<BavetAbstractTriNode<A, B, C>> getChildNodes() {\n+        return Collections.unmodifiableList(childNodeList);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "651a3c2c03a1218f2cd4138edcccd363e9bb0f2d"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4176, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}