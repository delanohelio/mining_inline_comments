{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxNDgyODcy", "number": 894, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwOTowODo1NlrOEa4b-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwOTowOTo1MFrOEa4d8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NjIzMDk5OnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/solver/SolverManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwOTowODo1NlrOHEkqJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwOTowODo1NlrOHEkqJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDU1Njk2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param problemId never null, a ID for each planning problem. This must be unique.\n          \n          \n            \n                 * @param problemId never null, an ID for each planning problem. This must be unique.", "url": "https://github.com/kiegroup/optaplanner/pull/894#discussion_r474556966", "createdAt": "2020-08-21T09:08:56Z", "author": {"login": "rsynek"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/solver/SolverManager.java", "diffHunk": "@@ -222,8 +223,39 @@\n      *        If null it defaults to logging the exception as an error.\n      * @return never null\n      */\n+    default SolverJob<Solution_, ProblemId_> solveAndListen(ProblemId_ problemId,\n+            Function<? super ProblemId_, ? extends Solution_> problemFinder,\n+            Consumer<? super Solution_> bestSolutionConsumer,\n+            BiConsumer<? super ProblemId_, ? super Throwable> exceptionHandler) {\n+        return solveAndListen(problemId, problemFinder, bestSolutionConsumer, null, exceptionHandler);\n+    }\n+\n+    /**\n+     * As defined by {@link #solveAndListen(Object, Function, Consumer)}.\n+     * <p>\n+     * The final best solution is delivered twice:\n+     * first to the {@code bestSolutionConsumer} when it is found\n+     * and then again to the {@code finalBestSolutionConsumer} when the solver terminates.\n+     * Do not store the solution twice.\n+     * This allows for use cases that only process the {@link Score} first (during best solution changed events)\n+     * and then store the solution upon termination.\n+     *\n+     * @param problemId never null, a ID for each planning problem. This must be unique.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bdbdf2f24ced6a6a98e02b5e50cff3c50442699"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NjIzNjAwOnYy", "diffSide": "RIGHT", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/solver/SolverManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwOTowOTo1MFrOHEktTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwOTowOTo1MFrOHEktTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDU1Nzc3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param finalBestSolutionConsumer sometimes null, called only once, at the end, on a consumer thread,\n          \n          \n            \n                 * @param finalBestSolutionConsumer sometimes null, called only once, at the end, on a consumer thread.", "url": "https://github.com/kiegroup/optaplanner/pull/894#discussion_r474557773", "createdAt": "2020-08-21T09:09:50Z", "author": {"login": "rsynek"}, "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/solver/SolverManager.java", "diffHunk": "@@ -222,8 +223,39 @@\n      *        If null it defaults to logging the exception as an error.\n      * @return never null\n      */\n+    default SolverJob<Solution_, ProblemId_> solveAndListen(ProblemId_ problemId,\n+            Function<? super ProblemId_, ? extends Solution_> problemFinder,\n+            Consumer<? super Solution_> bestSolutionConsumer,\n+            BiConsumer<? super ProblemId_, ? super Throwable> exceptionHandler) {\n+        return solveAndListen(problemId, problemFinder, bestSolutionConsumer, null, exceptionHandler);\n+    }\n+\n+    /**\n+     * As defined by {@link #solveAndListen(Object, Function, Consumer)}.\n+     * <p>\n+     * The final best solution is delivered twice:\n+     * first to the {@code bestSolutionConsumer} when it is found\n+     * and then again to the {@code finalBestSolutionConsumer} when the solver terminates.\n+     * Do not store the solution twice.\n+     * This allows for use cases that only process the {@link Score} first (during best solution changed events)\n+     * and then store the solution upon termination.\n+     *\n+     * @param problemId never null, a ID for each planning problem. This must be unique.\n+     *        Use this problemId to {@link #terminateEarly(Object) terminate} the solver early,\n+     *        {@link #getSolverStatus(Object) to get the status} or if the problem changes while solving.\n+     * @param problemFinder never null, function that returns a {@link PlanningSolution}, usually with uninitialized planning\n+     *        variables\n+     * @param bestSolutionConsumer never null, called multiple times, on a consumer thread\n+     * @param finalBestSolutionConsumer sometimes null, called only once, at the end, on a consumer thread,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bdbdf2f24ced6a6a98e02b5e50cff3c50442699"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4206, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}