{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxMTAwNDAy", "number": 892, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNzoxNDowNlrODs-a4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMTozNjoyN1rODtEPlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDg2NjI3OnYy", "diffSide": "RIGHT", "path": "okapi-common/src/test/java/org/folio/okapi/common/OkapiTokenTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNzoxNDowNlrOF-IMAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMTowODo0NVrOF-Ql3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY5MDE3OQ==", "bodyText": "I've moved the duplicated code into this method and moved each exception test into its own method.", "url": "https://github.com/folio-org/okapi/pull/892#discussion_r400690179", "createdAt": "2020-03-31T07:14:06Z", "author": {"login": "julianladisch"}, "path": "okapi-common/src/test/java/org/folio/okapi/common/OkapiTokenTest.java", "diffHunk": "@@ -1,99 +1,68 @@\n package org.folio.okapi.common;\n \n import io.vertx.core.json.JsonObject;\n-import org.junit.Test;\n-import static org.junit.Assert.*;\n import java.util.Base64;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n \n public class OkapiTokenTest {\n \n   @Test\n   public void test() {\n-    OkapiToken t = new OkapiToken();\n-\n     JsonObject o = new JsonObject();\n     o.put(\"tenant\", \"test-lib\");\n     o.put(\"foo\", \"bar\");\n     String s = o.encodePrettily();\n     byte[] encodedBytes = Base64.getEncoder().encode(s.getBytes());\n     String e = new String(encodedBytes);\n     String tokenStr = \"method.\" + e + \".trail\";\n-    t.setToken(tokenStr);\n-    assertEquals(\"test-lib\", t.getTenant());\n+    OkapiToken tok = new OkapiToken(tokenStr);\n+    Assert.assertEquals(\"test-lib\", tok.getTenant());\n   }\n \n   @Test\n-  public void test2() {\n-    String s = \"eyJzdWIiOiJfX3VuZGVmaW5lZF9fIiwidXNlcl9pZCI6Ijk5OTk5OTk5L\"\n-      + \"Tk5OTktNDk5OS05OTk5LTk5OTk5OTk5OTk5OSIsInRlbmFudCI6InRlc3RsaWIifQ\";\n-    byte[] buf = Base64.getDecoder().decode(s);\n-    String got = new String(buf);\n-    String exp = \"{\\\"sub\\\":\\\"__undefined__\\\",\"\n-      + \"\\\"user_id\\\":\\\"99999999-9999-4999-9999-999999999999\\\",\\\"tenant\\\":\\\"testlib\\\"}\";\n-    assertEquals(exp, got);\n+  public void noTenant() {\n+    OkapiToken tok = new OkapiToken(\"a.eyB9Cg==.c\"); // \"{ }\"\n+    Assert.assertNull(tok.getTenant());\n   }\n \n   @Test\n-  public void test3() {\n-    OkapiToken tok = new OkapiToken();\n-    tok.setToken(null);\n-    assertEquals(null, tok.getTenant());\n-\n-    Boolean ex;\n+  public void testNull() {\n+    OkapiToken tok = new OkapiToken(null);\n+    Assert.assertEquals(null, tok.getTenant());\n+  }\n \n-    ex = false;\n-    tok.setToken(\"\");\n-    try {\n-      String v = tok.getTenant();\n-    } catch (IllegalArgumentException e) {\n-      ex = true;\n-    }\n-    assertTrue(ex);\n+  private String exceptionMessage(String token) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "695b31918b439523d416890ed9c347ea0ec9f3d7"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgyNzg3MA==", "bodyText": "thx", "url": "https://github.com/folio-org/okapi/pull/892#discussion_r400827870", "createdAt": "2020-03-31T11:08:45Z", "author": {"login": "adamdickmeiss"}, "path": "okapi-common/src/test/java/org/folio/okapi/common/OkapiTokenTest.java", "diffHunk": "@@ -1,99 +1,68 @@\n package org.folio.okapi.common;\n \n import io.vertx.core.json.JsonObject;\n-import org.junit.Test;\n-import static org.junit.Assert.*;\n import java.util.Base64;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n \n public class OkapiTokenTest {\n \n   @Test\n   public void test() {\n-    OkapiToken t = new OkapiToken();\n-\n     JsonObject o = new JsonObject();\n     o.put(\"tenant\", \"test-lib\");\n     o.put(\"foo\", \"bar\");\n     String s = o.encodePrettily();\n     byte[] encodedBytes = Base64.getEncoder().encode(s.getBytes());\n     String e = new String(encodedBytes);\n     String tokenStr = \"method.\" + e + \".trail\";\n-    t.setToken(tokenStr);\n-    assertEquals(\"test-lib\", t.getTenant());\n+    OkapiToken tok = new OkapiToken(tokenStr);\n+    Assert.assertEquals(\"test-lib\", tok.getTenant());\n   }\n \n   @Test\n-  public void test2() {\n-    String s = \"eyJzdWIiOiJfX3VuZGVmaW5lZF9fIiwidXNlcl9pZCI6Ijk5OTk5OTk5L\"\n-      + \"Tk5OTktNDk5OS05OTk5LTk5OTk5OTk5OTk5OSIsInRlbmFudCI6InRlc3RsaWIifQ\";\n-    byte[] buf = Base64.getDecoder().decode(s);\n-    String got = new String(buf);\n-    String exp = \"{\\\"sub\\\":\\\"__undefined__\\\",\"\n-      + \"\\\"user_id\\\":\\\"99999999-9999-4999-9999-999999999999\\\",\\\"tenant\\\":\\\"testlib\\\"}\";\n-    assertEquals(exp, got);\n+  public void noTenant() {\n+    OkapiToken tok = new OkapiToken(\"a.eyB9Cg==.c\"); // \"{ }\"\n+    Assert.assertNull(tok.getTenant());\n   }\n \n   @Test\n-  public void test3() {\n-    OkapiToken tok = new OkapiToken();\n-    tok.setToken(null);\n-    assertEquals(null, tok.getTenant());\n-\n-    Boolean ex;\n+  public void testNull() {\n+    OkapiToken tok = new OkapiToken(null);\n+    Assert.assertEquals(null, tok.getTenant());\n+  }\n \n-    ex = false;\n-    tok.setToken(\"\");\n-    try {\n-      String v = tok.getTenant();\n-    } catch (IllegalArgumentException e) {\n-      ex = true;\n-    }\n-    assertTrue(ex);\n+  private String exceptionMessage(String token) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY5MDE3OQ=="}, "originalCommit": {"oid": "695b31918b439523d416890ed9c347ea0ec9f3d7"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDkxNDIwOnYy", "diffSide": "RIGHT", "path": "okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNzoyODo1OFrOF-Ipmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMTowODo1NVrOF-QmOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY5Nzc1NA==", "bodyText": "https://tools.ietf.org/html/rfc6750#section-2.1 requires a single space after Bearer.\nCan you check for startsWith(\"Bearer \")?", "url": "https://github.com/folio-org/okapi/pull/892#discussion_r400697754", "createdAt": "2020-03-31T07:28:58Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java", "diffHunk": "@@ -254,27 +252,24 @@ private String tenantHeader(ProxyContext pc) {\n     String tok = ctx.request().getHeader(XOkapiHeaders.TOKEN);\n \n     if (auth != null) {\n-      Pattern pattern = Pattern.compile(\"Bearer\\\\s+(.+)\"); // Grab anything after 'Bearer' and whitespace\n-      Matcher matcher = pattern.matcher(auth);\n-      if (matcher.find() && matcher.groupCount() > 0) {\n-        auth = matcher.group(1);\n+      if (auth.startsWith(\"Bearer\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "695b31918b439523d416890ed9c347ea0ec9f3d7"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcwMDIwNw==", "bodyText": "We don't want to match BearerExtension foo.", "url": "https://github.com/folio-org/okapi/pull/892#discussion_r400700207", "createdAt": "2020-03-31T07:33:28Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java", "diffHunk": "@@ -254,27 +252,24 @@ private String tenantHeader(ProxyContext pc) {\n     String tok = ctx.request().getHeader(XOkapiHeaders.TOKEN);\n \n     if (auth != null) {\n-      Pattern pattern = Pattern.compile(\"Bearer\\\\s+(.+)\"); // Grab anything after 'Bearer' and whitespace\n-      Matcher matcher = pattern.matcher(auth);\n-      if (matcher.find() && matcher.groupCount() > 0) {\n-        auth = matcher.group(1);\n+      if (auth.startsWith(\"Bearer\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY5Nzc1NA=="}, "originalCommit": {"oid": "695b31918b439523d416890ed9c347ea0ec9f3d7"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgyNzk2MQ==", "bodyText": "sure", "url": "https://github.com/folio-org/okapi/pull/892#discussion_r400827961", "createdAt": "2020-03-31T11:08:55Z", "author": {"login": "adamdickmeiss"}, "path": "okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java", "diffHunk": "@@ -254,27 +252,24 @@ private String tenantHeader(ProxyContext pc) {\n     String tok = ctx.request().getHeader(XOkapiHeaders.TOKEN);\n \n     if (auth != null) {\n-      Pattern pattern = Pattern.compile(\"Bearer\\\\s+(.+)\"); // Grab anything after 'Bearer' and whitespace\n-      Matcher matcher = pattern.matcher(auth);\n-      if (matcher.find() && matcher.groupCount() > 0) {\n-        auth = matcher.group(1);\n+      if (auth.startsWith(\"Bearer\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY5Nzc1NA=="}, "originalCommit": {"oid": "695b31918b439523d416890ed9c347ea0ec9f3d7"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTMxNzU1OnYy", "diffSide": "RIGHT", "path": "okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwOToxODowM1rOF-MoFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMTowOToxMVrOF-Qm4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc2MjkwMA==", "bodyText": "Can you drop this else to reduce indentation?", "url": "https://github.com/folio-org/okapi/pull/892#discussion_r400762900", "createdAt": "2020-03-31T09:18:03Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java", "diffHunk": "@@ -254,27 +252,24 @@ private String tenantHeader(ProxyContext pc) {\n     String tok = ctx.request().getHeader(XOkapiHeaders.TOKEN);\n \n     if (auth != null) {\n-      Pattern pattern = Pattern.compile(\"Bearer\\\\s+(.+)\"); // Grab anything after 'Bearer' and whitespace\n-      Matcher matcher = pattern.matcher(auth);\n-      if (matcher.find() && matcher.groupCount() > 0) {\n-        auth = matcher.group(1);\n+      if (auth.startsWith(\"Bearer\")) {\n+        auth = auth.substring(6).trim();\n+      }\n+      if (tok != null && !auth.equals(tok)) {\n+        pc.responseError(400, messages.getMessage(\"10104\"));\n+        return null;\n+      } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "695b31918b439523d416890ed9c347ea0ec9f3d7"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgyODEyOQ==", "bodyText": "yep", "url": "https://github.com/folio-org/okapi/pull/892#discussion_r400828129", "createdAt": "2020-03-31T11:09:11Z", "author": {"login": "adamdickmeiss"}, "path": "okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java", "diffHunk": "@@ -254,27 +252,24 @@ private String tenantHeader(ProxyContext pc) {\n     String tok = ctx.request().getHeader(XOkapiHeaders.TOKEN);\n \n     if (auth != null) {\n-      Pattern pattern = Pattern.compile(\"Bearer\\\\s+(.+)\"); // Grab anything after 'Bearer' and whitespace\n-      Matcher matcher = pattern.matcher(auth);\n-      if (matcher.find() && matcher.groupCount() > 0) {\n-        auth = matcher.group(1);\n+      if (auth.startsWith(\"Bearer\")) {\n+        auth = auth.substring(6).trim();\n+      }\n+      if (tok != null && !auth.equals(tok)) {\n+        pc.responseError(400, messages.getMessage(\"10104\"));\n+        return null;\n+      } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc2MjkwMA=="}, "originalCommit": {"oid": "695b31918b439523d416890ed9c347ea0ec9f3d7"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTgxMzg1OnYy", "diffSide": "RIGHT", "path": "okapi-common/src/main/java/org/folio/okapi/common/OkapiToken.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMTozNDoyNlrOF-Ragg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNzo1NjoyMlrOF-hjAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg0MTM0Ng==", "bodyText": "This returns the payload without validating the JWT using the signature. This may be a security issue if used in other contexts.\nCan the method been renamed to getPayloadWithoutValidation and javadoc added that there is no JWT signature validation?", "url": "https://github.com/folio-org/okapi/pull/892#discussion_r400841346", "createdAt": "2020-03-31T11:34:26Z", "author": {"login": "julianladisch"}, "path": "okapi-common/src/main/java/org/folio/okapi/common/OkapiToken.java", "diffHunk": "@@ -15,25 +14,21 @@\n public class OkapiToken {\n   private String token;\n \n-  public OkapiToken() {\n-    this.token = null;\n-  }\n-\n-  public OkapiToken(RoutingContext ctx) {\n-    this.token = ctx.request().getHeader(XOkapiHeaders.TOKEN);\n-  }\n-\n-  public void setToken(String token) {\n+  public OkapiToken(String token) {\n     this.token = token;\n   }\n \n   private JsonObject getPayload() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "695b31918b439523d416890ed9c347ea0ec9f3d7"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEwNTY2Nw==", "bodyText": "ok.. getPayload renamed.. Internal so nothing is affected.", "url": "https://github.com/folio-org/okapi/pull/892#discussion_r401105667", "createdAt": "2020-03-31T17:56:22Z", "author": {"login": "adamdickmeiss"}, "path": "okapi-common/src/main/java/org/folio/okapi/common/OkapiToken.java", "diffHunk": "@@ -15,25 +14,21 @@\n public class OkapiToken {\n   private String token;\n \n-  public OkapiToken() {\n-    this.token = null;\n-  }\n-\n-  public OkapiToken(RoutingContext ctx) {\n-    this.token = ctx.request().getHeader(XOkapiHeaders.TOKEN);\n-  }\n-\n-  public void setToken(String token) {\n+  public OkapiToken(String token) {\n     this.token = token;\n   }\n \n   private JsonObject getPayload() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg0MTM0Ng=="}, "originalCommit": {"oid": "695b31918b439523d416890ed9c347ea0ec9f3d7"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTgyMDM3OnYy", "diffSide": "RIGHT", "path": "okapi-common/src/main/java/org/folio/okapi/common/OkapiToken.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMTozNjoyN1rOF-Reig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxODoyNTo1MFrOF-injg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg0MjM3OA==", "bodyText": "You can avoid this variable and save 2 lines by using return new JsonObject(decodedJson);", "url": "https://github.com/folio-org/okapi/pull/892#discussion_r400842378", "createdAt": "2020-03-31T11:36:27Z", "author": {"login": "julianladisch"}, "path": "okapi-common/src/main/java/org/folio/okapi/common/OkapiToken.java", "diffHunk": "@@ -15,25 +14,21 @@\n public class OkapiToken {\n   private String token;\n \n-  public OkapiToken() {\n-    this.token = null;\n-  }\n-\n-  public OkapiToken(RoutingContext ctx) {\n-    this.token = ctx.request().getHeader(XOkapiHeaders.TOKEN);\n-  }\n-\n-  public void setToken(String token) {\n+  public OkapiToken(String token) {\n     this.token = token;\n   }\n \n   private JsonObject getPayload() {\n-    String encodedJson;\n-    try {\n-      encodedJson = this.token.split(\"\\\\.\")[1];\n-    } catch (ArrayIndexOutOfBoundsException e) {\n-      throw new IllegalArgumentException(e.getMessage());\n+    int idx1 = token.indexOf('.');\n+    if (idx1 == -1) {\n+      throw new IllegalArgumentException(\"Missing . separator for token\");\n+    }\n+    idx1++;\n+    int idx2 = token.indexOf('.', idx1);\n+    if (idx2 == -1) {\n+      throw new IllegalArgumentException(\"Missing . separator for token\");\n     }\n+    String encodedJson = token.substring(idx1, idx2);\n     String decodedJson = new String(Base64.getDecoder().decode(encodedJson));\n     JsonObject j;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "695b31918b439523d416890ed9c347ea0ec9f3d7"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEyMzIxNA==", "bodyText": "yep", "url": "https://github.com/folio-org/okapi/pull/892#discussion_r401123214", "createdAt": "2020-03-31T18:25:50Z", "author": {"login": "adamdickmeiss"}, "path": "okapi-common/src/main/java/org/folio/okapi/common/OkapiToken.java", "diffHunk": "@@ -15,25 +14,21 @@\n public class OkapiToken {\n   private String token;\n \n-  public OkapiToken() {\n-    this.token = null;\n-  }\n-\n-  public OkapiToken(RoutingContext ctx) {\n-    this.token = ctx.request().getHeader(XOkapiHeaders.TOKEN);\n-  }\n-\n-  public void setToken(String token) {\n+  public OkapiToken(String token) {\n     this.token = token;\n   }\n \n   private JsonObject getPayload() {\n-    String encodedJson;\n-    try {\n-      encodedJson = this.token.split(\"\\\\.\")[1];\n-    } catch (ArrayIndexOutOfBoundsException e) {\n-      throw new IllegalArgumentException(e.getMessage());\n+    int idx1 = token.indexOf('.');\n+    if (idx1 == -1) {\n+      throw new IllegalArgumentException(\"Missing . separator for token\");\n+    }\n+    idx1++;\n+    int idx2 = token.indexOf('.', idx1);\n+    if (idx2 == -1) {\n+      throw new IllegalArgumentException(\"Missing . separator for token\");\n     }\n+    String encodedJson = token.substring(idx1, idx2);\n     String decodedJson = new String(Base64.getDecoder().decode(encodedJson));\n     JsonObject j;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg0MjM3OA=="}, "originalCommit": {"oid": "695b31918b439523d416890ed9c347ea0ec9f3d7"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 222, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}