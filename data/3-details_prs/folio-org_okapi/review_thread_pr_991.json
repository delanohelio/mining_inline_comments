{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5MzE4MDE1", "number": 991, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNzo0MDoxMVrOErSbNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNzo0MDoxMVrOErSbNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODI2MTAxOnYy", "diffSide": "RIGHT", "path": "okapi-core/src/main/java/org/folio/okapi/service/impl/DockerModuleHandle.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNzo0MDoxMVrOHd-dmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwNzo1Nzo1MVrOHeSXmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE5NDEzNg==", "bodyText": "Using Future methods and less line breaks for readability:\n    return getImage().map(res -> {\n      try {\n        return getExposedPort(res);\n      } catch (Exception e) {\n        logger.warn(\"{}\", e.getMessage(), e);\n        throw e;\n      }\n    }).compose(this::createContainer)\n    .compose(res -> startContainer().onFailure(cause -> deleteContainer()))\n    .compose(res -> getContainerLog().onFailure(cause -> stop()));\n\ndeleteContainer should use force:\nreturn deleteUrl(\"/containers/\" + containerId + \"?force=true\", \"deleteContainer\");\n\nstop should try to delete (with force) even if stopContainer has failed:\n  @Override\n  public Future<Void> stop() {\n    return stopContainer()\n        .compose(\n            x -> deleteContainer(),\n            // if stopContainer fails with e run deleteContainer but return original failure e\n            e -> deleteContainer().onComplete(x -> Future.failedFuture(e)))\n        .onComplete(x -> ports.free(hostPort));\n  }", "url": "https://github.com/folio-org/okapi/pull/991#discussion_r501194136", "createdAt": "2020-10-07T17:40:11Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/main/java/org/folio/okapi/service/impl/DockerModuleHandle.java", "diffHunk": "@@ -363,8 +363,9 @@ private int getExposedPort(JsonObject b) {\n       return createContainer(exposedPort)\n           .compose(res2 -> startContainer()\n               .onFailure(cause -> deleteContainer())\n-              .compose(res3 -> getContainerLog())\n-      );\n+              .compose(res3 -> getContainerLog()\n+                  .onFailure(cause -> this.stop()))\n+          );\n     });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0df8c257656d2ac44915932e17fa1e59f124f17"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUyMDI4Mw==", "bodyText": "ok. Hasn't been a problem, but it makes sense", "url": "https://github.com/folio-org/okapi/pull/991#discussion_r501520283", "createdAt": "2020-10-08T07:57:51Z", "author": {"login": "adamdickmeiss"}, "path": "okapi-core/src/main/java/org/folio/okapi/service/impl/DockerModuleHandle.java", "diffHunk": "@@ -363,8 +363,9 @@ private int getExposedPort(JsonObject b) {\n       return createContainer(exposedPort)\n           .compose(res2 -> startContainer()\n               .onFailure(cause -> deleteContainer())\n-              .compose(res3 -> getContainerLog())\n-      );\n+              .compose(res3 -> getContainerLog()\n+                  .onFailure(cause -> this.stop()))\n+          );\n     });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE5NDEzNg=="}, "originalCommit": {"oid": "e0df8c257656d2ac44915932e17fa1e59f124f17"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 161, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}