{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2Njk1NjM1", "number": 1007, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDo1MzozNVrOEv0oOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNzowNjo0NVrOEv5BJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTgwNzkzOnYy", "diffSide": "RIGHT", "path": "doc/guide.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDo1MzozNVrOHlBM7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNTo1MzoyOFrOHlE7Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU3OTA1Mg==", "bodyText": "https://docs.docker.com/engine/api/v1.40/#section/Authentication allows \"identitytoken\", we should also support this.", "url": "https://github.com/folio-org/okapi/pull/1007#discussion_r508579052", "createdAt": "2020-10-20T14:53:35Z", "author": {"login": "julianladisch"}, "path": "doc/guide.md", "diffHunk": "@@ -2750,6 +2750,13 @@ there happens to be one, Okapi will remove it.  Note that it may end\n with a path like in `https://folio.example.com/okapi`.\n * `dockerUrl`: Tells the Okapi deployment where the Docker Daemon\n is. Defaults to `unix:///var/run/docker.sock`.\n+* `dockerRegistries`: List of registries to use for Docker image pull. The\n+value is a JSON array of of objects where each object may have the following properties\n+`username`, `password`, `email`, `serveraddress` and `registry`. The first 4 properties\n+are passed as autentication to the Docker registry - refer to\n+[Docker Authenticaton](https://docs.docker.com/engine/api/v1.40/#section/Authentication).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b555d00a24ebdcca5500ee4d2fdef9f21a28f3bb"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYxMzEzNA==", "bodyText": "I don't think so. This is returned by auth which is not used by Okapi. How long is that valid?", "url": "https://github.com/folio-org/okapi/pull/1007#discussion_r508613134", "createdAt": "2020-10-20T15:30:48Z", "author": {"login": "adamdickmeiss"}, "path": "doc/guide.md", "diffHunk": "@@ -2750,6 +2750,13 @@ there happens to be one, Okapi will remove it.  Note that it may end\n with a path like in `https://folio.example.com/okapi`.\n * `dockerUrl`: Tells the Okapi deployment where the Docker Daemon\n is. Defaults to `unix:///var/run/docker.sock`.\n+* `dockerRegistries`: List of registries to use for Docker image pull. The\n+value is a JSON array of of objects where each object may have the following properties\n+`username`, `password`, `email`, `serveraddress` and `registry`. The first 4 properties\n+are passed as autentication to the Docker registry - refer to\n+[Docker Authenticaton](https://docs.docker.com/engine/api/v1.40/#section/Authentication).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU3OTA1Mg=="}, "originalCommit": {"oid": "b555d00a24ebdcca5500ee4d2fdef9f21a28f3bb"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY0MDA4Mg==", "bodyText": "Added, if somebody finds it useful :-)", "url": "https://github.com/folio-org/okapi/pull/1007#discussion_r508640082", "createdAt": "2020-10-20T15:53:28Z", "author": {"login": "adamdickmeiss"}, "path": "doc/guide.md", "diffHunk": "@@ -2750,6 +2750,13 @@ there happens to be one, Okapi will remove it.  Note that it may end\n with a path like in `https://folio.example.com/okapi`.\n * `dockerUrl`: Tells the Okapi deployment where the Docker Daemon\n is. Defaults to `unix:///var/run/docker.sock`.\n+* `dockerRegistries`: List of registries to use for Docker image pull. The\n+value is a JSON array of of objects where each object may have the following properties\n+`username`, `password`, `email`, `serveraddress` and `registry`. The first 4 properties\n+are passed as autentication to the Docker registry - refer to\n+[Docker Authenticaton](https://docs.docker.com/engine/api/v1.40/#section/Authentication).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU3OTA1Mg=="}, "originalCommit": {"oid": "b555d00a24ebdcca5500ee4d2fdef9f21a28f3bb"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTgxMDIzOnYy", "diffSide": "RIGHT", "path": "doc/guide.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDo1Mzo1OVrOHlBORw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNTo1Mjo1MlrOHlE4hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU3OTM5OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            value is a JSON array of of objects where each object may have the following properties\n          \n          \n            \n            value is a JSON array of objects where each object may have the following properties", "url": "https://github.com/folio-org/okapi/pull/1007#discussion_r508579399", "createdAt": "2020-10-20T14:53:59Z", "author": {"login": "julianladisch"}, "path": "doc/guide.md", "diffHunk": "@@ -2750,6 +2750,13 @@ there happens to be one, Okapi will remove it.  Note that it may end\n with a path like in `https://folio.example.com/okapi`.\n * `dockerUrl`: Tells the Okapi deployment where the Docker Daemon\n is. Defaults to `unix:///var/run/docker.sock`.\n+* `dockerRegistries`: List of registries to use for Docker image pull. The\n+value is a JSON array of of objects where each object may have the following properties", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b555d00a24ebdcca5500ee4d2fdef9f21a28f3bb"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYzOTM2NA==", "bodyText": "yep", "url": "https://github.com/folio-org/okapi/pull/1007#discussion_r508639364", "createdAt": "2020-10-20T15:52:52Z", "author": {"login": "adamdickmeiss"}, "path": "doc/guide.md", "diffHunk": "@@ -2750,6 +2750,13 @@ there happens to be one, Okapi will remove it.  Note that it may end\n with a path like in `https://folio.example.com/okapi`.\n * `dockerUrl`: Tells the Okapi deployment where the Docker Daemon\n is. Defaults to `unix:///var/run/docker.sock`.\n+* `dockerRegistries`: List of registries to use for Docker image pull. The\n+value is a JSON array of of objects where each object may have the following properties", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU3OTM5OQ=="}, "originalCommit": {"oid": "b555d00a24ebdcca5500ee4d2fdef9f21a28f3bb"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTgxODE0OnYy", "diffSide": "RIGHT", "path": "doc/guide.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDo1NToxOVrOHlBTHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNTo1MzowM1rOHlE5Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU4MDYzNg==", "bodyText": "Can you add an example that also shows how we support unauthenticated pulls?", "url": "https://github.com/folio-org/okapi/pull/1007#discussion_r508580636", "createdAt": "2020-10-20T14:55:19Z", "author": {"login": "julianladisch"}, "path": "doc/guide.md", "diffHunk": "@@ -2750,6 +2750,13 @@ there happens to be one, Okapi will remove it.  Note that it may end\n with a path like in `https://folio.example.com/okapi`.\n * `dockerUrl`: Tells the Okapi deployment where the Docker Daemon\n is. Defaults to `unix:///var/run/docker.sock`.\n+* `dockerRegistries`: List of registries to use for Docker image pull. The\n+value is a JSON array of of objects where each object may have the following properties\n+`username`, `password`, `email`, `serveraddress` and `registry`. The first 4 properties\n+are passed as autentication to the Docker registry - refer to\n+[Docker Authenticaton](https://docs.docker.com/engine/api/v1.40/#section/Authentication).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b555d00a24ebdcca5500ee4d2fdef9f21a28f3bb"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYxNjM0NQ==", "bodyText": "That would be an empty object as one of the element for dockerRegistries .. is that the example you want? (And also the existing behavior of Okapi, when no dockerRegistries is defined).", "url": "https://github.com/folio-org/okapi/pull/1007#discussion_r508616345", "createdAt": "2020-10-20T15:33:29Z", "author": {"login": "adamdickmeiss"}, "path": "doc/guide.md", "diffHunk": "@@ -2750,6 +2750,13 @@ there happens to be one, Okapi will remove it.  Note that it may end\n with a path like in `https://folio.example.com/okapi`.\n * `dockerUrl`: Tells the Okapi deployment where the Docker Daemon\n is. Defaults to `unix:///var/run/docker.sock`.\n+* `dockerRegistries`: List of registries to use for Docker image pull. The\n+value is a JSON array of of objects where each object may have the following properties\n+`username`, `password`, `email`, `serveraddress` and `registry`. The first 4 properties\n+are passed as autentication to the Docker registry - refer to\n+[Docker Authenticaton](https://docs.docker.com/engine/api/v1.40/#section/Authentication).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU4MDYzNg=="}, "originalCommit": {"oid": "b555d00a24ebdcca5500ee4d2fdef9f21a28f3bb"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYzOTU4Nw==", "bodyText": "Mentioned in doc now", "url": "https://github.com/folio-org/okapi/pull/1007#discussion_r508639587", "createdAt": "2020-10-20T15:53:03Z", "author": {"login": "adamdickmeiss"}, "path": "doc/guide.md", "diffHunk": "@@ -2750,6 +2750,13 @@ there happens to be one, Okapi will remove it.  Note that it may end\n with a path like in `https://folio.example.com/okapi`.\n * `dockerUrl`: Tells the Okapi deployment where the Docker Daemon\n is. Defaults to `unix:///var/run/docker.sock`.\n+* `dockerRegistries`: List of registries to use for Docker image pull. The\n+value is a JSON array of of objects where each object may have the following properties\n+`username`, `password`, `email`, `serveraddress` and `registry`. The first 4 properties\n+are passed as autentication to the Docker registry - refer to\n+[Docker Authenticaton](https://docs.docker.com/engine/api/v1.40/#section/Authentication).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU4MDYzNg=="}, "originalCommit": {"oid": "b555d00a24ebdcca5500ee4d2fdef9f21a28f3bb"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NjAxMDQ4OnYy", "diffSide": "RIGHT", "path": "okapi-core/src/main/java/org/folio/okapi/service/impl/DockerModuleHandle.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNTozMDowNFrOHlDOhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNTo0MTozOFrOHlEEGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYxMjIyOA==", "bodyText": "You can replace the Boolean by future.recover:\nFuture<Void> future = Future.failedFuture(\"\");\nfor (int i = 0; i < dockerRegistries.size(); i++) {\n  ...\n  future = future.recover(failure -> {\n    ...\n    return postUrlJson(\"/images/create?fromImage=\" + prefix + image, authObject, \"pullImage\", \"\");\n  });\n}\nreturn future;\n\nThis has the additional benefit of returning the failure details of the last registry entry.", "url": "https://github.com/folio-org/okapi/pull/1007#discussion_r508612228", "createdAt": "2020-10-20T15:30:04Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/main/java/org/folio/okapi/service/impl/DockerModuleHandle.java", "diffHunk": "@@ -237,15 +242,51 @@ private void logHandler(Buffer b) {\n     return getUrl(\"/images/\" + image + \"/json\");\n   }\n \n-  private Future<Void> pullImage() {\n-    logger.info(\"pull image {}\", image);\n-    return postUrlJson(\"/images/create?fromImage=\" + image, \"pullImage\", \"\")\n-        .mapEmpty();\n+  Future<Void> pullImage() {\n+    if (dockerRegistries == null) {\n+      logger.info(\"pull image {}\", image);\n+      return postUrlJson(\"/images/create?fromImage=\" + image, null, \"pullImage\", \"\")\n+          .mapEmpty();\n+    }\n+    logger.info(\"pull Image using dockerRegistries\");\n+    Future<Boolean> future = Future.succeededFuture(Boolean.FALSE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b555d00a24ebdcca5500ee4d2fdef9f21a28f3bb"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYyNTk0NQ==", "bodyText": "Much better. Thx", "url": "https://github.com/folio-org/okapi/pull/1007#discussion_r508625945", "createdAt": "2020-10-20T15:41:38Z", "author": {"login": "adamdickmeiss"}, "path": "okapi-core/src/main/java/org/folio/okapi/service/impl/DockerModuleHandle.java", "diffHunk": "@@ -237,15 +242,51 @@ private void logHandler(Buffer b) {\n     return getUrl(\"/images/\" + image + \"/json\");\n   }\n \n-  private Future<Void> pullImage() {\n-    logger.info(\"pull image {}\", image);\n-    return postUrlJson(\"/images/create?fromImage=\" + image, \"pullImage\", \"\")\n-        .mapEmpty();\n+  Future<Void> pullImage() {\n+    if (dockerRegistries == null) {\n+      logger.info(\"pull image {}\", image);\n+      return postUrlJson(\"/images/create?fromImage=\" + image, null, \"pullImage\", \"\")\n+          .mapEmpty();\n+    }\n+    logger.info(\"pull Image using dockerRegistries\");\n+    Future<Boolean> future = Future.succeededFuture(Boolean.FALSE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYxMjIyOA=="}, "originalCommit": {"oid": "b555d00a24ebdcca5500ee4d2fdef9f21a28f3bb"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NjA4MzA0OnYy", "diffSide": "RIGHT", "path": "okapi-core/src/test/java/org/folio/okapi/service/impl/DockerModuleHandleTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNTo0MDoyM1rOHlD-SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNzoxNzoxNlrOHlIx2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYyNDQ1Nw==", "bodyText": "Can you also add a test with an empty JsonObject for unauthenticated pull?\nconf.put(\"dockerRegistries\", new JsonArray()\n        .add(new JsonObject())\n        .add(new JsonObject().put(\"username\", \"x\").put(\"password\", \"y\")));", "url": "https://github.com/folio-org/okapi/pull/1007#discussion_r508624457", "createdAt": "2020-10-20T15:40:23Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/test/java/org/folio/okapi/service/impl/DockerModuleHandleTest.java", "diffHunk": "@@ -136,6 +150,110 @@ private void dockerMockHandle(RoutingContext ctx) {\n     }\n   }\n \n+  @Test\n+  public void testDockerPull(TestContext context) {\n+    Vertx vertx = Vertx.vertx();\n+    int dockerPort = 9231;\n+\n+    Router router = Router.router(vertx);\n+    router.routeWithRegex(\"/.*\").handler(this::dockerMockHandle);\n+\n+    HttpServerOptions so = new HttpServerOptions().setHandle100ContinueAutomatically(true);\n+    HttpServer listen = vertx.createHttpServer(so)\n+        .requestHandler(router)\n+        .listen(dockerPort, context.asyncAssertSuccess());\n+    LaunchDescriptor ld = new LaunchDescriptor();\n+    ld.setWaitIterations(2);\n+    ld.setDockerImage(\"folioci/mod-x\");\n+    ld.setDockerPull(true);\n+\n+    Ports ports = new Ports(9232, 9233);\n+    JsonObject conf = new JsonObject().put(\"dockerUrl\", \"tcp://localhost:\" + dockerPort);\n+\n+    dockerPullJson = new JsonObject().put(\"message\", \"some message\");\n+    dockerPullStatus = 200;\n+\n+    {\n+      DockerModuleHandle dh = new DockerModuleHandle(vertx, ld,\n+          \"mod-users-5.0.0-SNAPSHOT\", ports, \"localhost\",\n+          9231, conf);\n+      Async async = context.async();\n+      dh.pullImage().onComplete(context.asyncAssertSuccess(x -> {\n+        async.complete();\n+      }));\n+      async.await();\n+    }\n+\n+    conf.put(\"dockerRegistries\", new JsonArray());\n+    {\n+      DockerModuleHandle dh = new DockerModuleHandle(vertx, ld,\n+          \"mod-users-5.0.0-SNAPSHOT\", ports, \"localhost\",\n+          9231, conf);\n+      Async async = context.async();\n+      dh.pullImage().onComplete(context.asyncAssertFailure(x -> {\n+        async.complete();\n+      }));\n+      async.await();\n+    }\n+\n+    conf.put(\"dockerRegistries\", new JsonArray()\n+        .addNull()\n+        .add(new JsonObject().put(\"username\", \"x\").put(\"password\", \"y\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b555d00a24ebdcca5500ee4d2fdef9f21a28f3bb"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYyNzU5Mg==", "bodyText": "sure", "url": "https://github.com/folio-org/okapi/pull/1007#discussion_r508627592", "createdAt": "2020-10-20T15:43:01Z", "author": {"login": "adamdickmeiss"}, "path": "okapi-core/src/test/java/org/folio/okapi/service/impl/DockerModuleHandleTest.java", "diffHunk": "@@ -136,6 +150,110 @@ private void dockerMockHandle(RoutingContext ctx) {\n     }\n   }\n \n+  @Test\n+  public void testDockerPull(TestContext context) {\n+    Vertx vertx = Vertx.vertx();\n+    int dockerPort = 9231;\n+\n+    Router router = Router.router(vertx);\n+    router.routeWithRegex(\"/.*\").handler(this::dockerMockHandle);\n+\n+    HttpServerOptions so = new HttpServerOptions().setHandle100ContinueAutomatically(true);\n+    HttpServer listen = vertx.createHttpServer(so)\n+        .requestHandler(router)\n+        .listen(dockerPort, context.asyncAssertSuccess());\n+    LaunchDescriptor ld = new LaunchDescriptor();\n+    ld.setWaitIterations(2);\n+    ld.setDockerImage(\"folioci/mod-x\");\n+    ld.setDockerPull(true);\n+\n+    Ports ports = new Ports(9232, 9233);\n+    JsonObject conf = new JsonObject().put(\"dockerUrl\", \"tcp://localhost:\" + dockerPort);\n+\n+    dockerPullJson = new JsonObject().put(\"message\", \"some message\");\n+    dockerPullStatus = 200;\n+\n+    {\n+      DockerModuleHandle dh = new DockerModuleHandle(vertx, ld,\n+          \"mod-users-5.0.0-SNAPSHOT\", ports, \"localhost\",\n+          9231, conf);\n+      Async async = context.async();\n+      dh.pullImage().onComplete(context.asyncAssertSuccess(x -> {\n+        async.complete();\n+      }));\n+      async.await();\n+    }\n+\n+    conf.put(\"dockerRegistries\", new JsonArray());\n+    {\n+      DockerModuleHandle dh = new DockerModuleHandle(vertx, ld,\n+          \"mod-users-5.0.0-SNAPSHOT\", ports, \"localhost\",\n+          9231, conf);\n+      Async async = context.async();\n+      dh.pullImage().onComplete(context.asyncAssertFailure(x -> {\n+        async.complete();\n+      }));\n+      async.await();\n+    }\n+\n+    conf.put(\"dockerRegistries\", new JsonArray()\n+        .addNull()\n+        .add(new JsonObject().put(\"username\", \"x\").put(\"password\", \"y\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYyNDQ1Nw=="}, "originalCommit": {"oid": "b555d00a24ebdcca5500ee4d2fdef9f21a28f3bb"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY5NzkyNQ==", "bodyText": "I still cannot find such a test that should succeed.", "url": "https://github.com/folio-org/okapi/pull/1007#discussion_r508697925", "createdAt": "2020-10-20T17:08:38Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/test/java/org/folio/okapi/service/impl/DockerModuleHandleTest.java", "diffHunk": "@@ -136,6 +150,110 @@ private void dockerMockHandle(RoutingContext ctx) {\n     }\n   }\n \n+  @Test\n+  public void testDockerPull(TestContext context) {\n+    Vertx vertx = Vertx.vertx();\n+    int dockerPort = 9231;\n+\n+    Router router = Router.router(vertx);\n+    router.routeWithRegex(\"/.*\").handler(this::dockerMockHandle);\n+\n+    HttpServerOptions so = new HttpServerOptions().setHandle100ContinueAutomatically(true);\n+    HttpServer listen = vertx.createHttpServer(so)\n+        .requestHandler(router)\n+        .listen(dockerPort, context.asyncAssertSuccess());\n+    LaunchDescriptor ld = new LaunchDescriptor();\n+    ld.setWaitIterations(2);\n+    ld.setDockerImage(\"folioci/mod-x\");\n+    ld.setDockerPull(true);\n+\n+    Ports ports = new Ports(9232, 9233);\n+    JsonObject conf = new JsonObject().put(\"dockerUrl\", \"tcp://localhost:\" + dockerPort);\n+\n+    dockerPullJson = new JsonObject().put(\"message\", \"some message\");\n+    dockerPullStatus = 200;\n+\n+    {\n+      DockerModuleHandle dh = new DockerModuleHandle(vertx, ld,\n+          \"mod-users-5.0.0-SNAPSHOT\", ports, \"localhost\",\n+          9231, conf);\n+      Async async = context.async();\n+      dh.pullImage().onComplete(context.asyncAssertSuccess(x -> {\n+        async.complete();\n+      }));\n+      async.await();\n+    }\n+\n+    conf.put(\"dockerRegistries\", new JsonArray());\n+    {\n+      DockerModuleHandle dh = new DockerModuleHandle(vertx, ld,\n+          \"mod-users-5.0.0-SNAPSHOT\", ports, \"localhost\",\n+          9231, conf);\n+      Async async = context.async();\n+      dh.pullImage().onComplete(context.asyncAssertFailure(x -> {\n+        async.complete();\n+      }));\n+      async.await();\n+    }\n+\n+    conf.put(\"dockerRegistries\", new JsonArray()\n+        .addNull()\n+        .add(new JsonObject().put(\"username\", \"x\").put(\"password\", \"y\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYyNDQ1Nw=="}, "originalCommit": {"oid": "b555d00a24ebdcca5500ee4d2fdef9f21a28f3bb"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcwMzE5Mw==", "bodyText": "I still don't see it, can you point me to the line?", "url": "https://github.com/folio-org/okapi/pull/1007#discussion_r508703193", "createdAt": "2020-10-20T17:17:16Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/test/java/org/folio/okapi/service/impl/DockerModuleHandleTest.java", "diffHunk": "@@ -136,6 +150,110 @@ private void dockerMockHandle(RoutingContext ctx) {\n     }\n   }\n \n+  @Test\n+  public void testDockerPull(TestContext context) {\n+    Vertx vertx = Vertx.vertx();\n+    int dockerPort = 9231;\n+\n+    Router router = Router.router(vertx);\n+    router.routeWithRegex(\"/.*\").handler(this::dockerMockHandle);\n+\n+    HttpServerOptions so = new HttpServerOptions().setHandle100ContinueAutomatically(true);\n+    HttpServer listen = vertx.createHttpServer(so)\n+        .requestHandler(router)\n+        .listen(dockerPort, context.asyncAssertSuccess());\n+    LaunchDescriptor ld = new LaunchDescriptor();\n+    ld.setWaitIterations(2);\n+    ld.setDockerImage(\"folioci/mod-x\");\n+    ld.setDockerPull(true);\n+\n+    Ports ports = new Ports(9232, 9233);\n+    JsonObject conf = new JsonObject().put(\"dockerUrl\", \"tcp://localhost:\" + dockerPort);\n+\n+    dockerPullJson = new JsonObject().put(\"message\", \"some message\");\n+    dockerPullStatus = 200;\n+\n+    {\n+      DockerModuleHandle dh = new DockerModuleHandle(vertx, ld,\n+          \"mod-users-5.0.0-SNAPSHOT\", ports, \"localhost\",\n+          9231, conf);\n+      Async async = context.async();\n+      dh.pullImage().onComplete(context.asyncAssertSuccess(x -> {\n+        async.complete();\n+      }));\n+      async.await();\n+    }\n+\n+    conf.put(\"dockerRegistries\", new JsonArray());\n+    {\n+      DockerModuleHandle dh = new DockerModuleHandle(vertx, ld,\n+          \"mod-users-5.0.0-SNAPSHOT\", ports, \"localhost\",\n+          9231, conf);\n+      Async async = context.async();\n+      dh.pullImage().onComplete(context.asyncAssertFailure(x -> {\n+        async.complete();\n+      }));\n+      async.await();\n+    }\n+\n+    conf.put(\"dockerRegistries\", new JsonArray()\n+        .addNull()\n+        .add(new JsonObject().put(\"username\", \"x\").put(\"password\", \"y\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYyNDQ1Nw=="}, "originalCommit": {"oid": "b555d00a24ebdcca5500ee4d2fdef9f21a28f3bb"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NjIzNjU5OnYy", "diffSide": "RIGHT", "path": "okapi-core/src/test/java/org/folio/okapi/service/impl/DockerModuleHandleTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNjowMjozNFrOHlFg0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNjowMjozNFrOHlFg0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY0OTY4MQ==", "bodyText": "All these code blocks are almost the same and might be extracted into a method, for example\nboolean pullImage(TestContext context, Vertx vertx, String host, JsonObject conf) {\n  LaunchDescriptor ld = new LaunchDescriptor();\n  ld.setWaitIterations(2);\n  ld.setDockerImage(\"folioci/mod-x\");\n  ld.setDockerPull(true);\n  Ports ports = new Ports(9232, 9233);\n  DockerModuleHandle dh = new DockerModuleHandle(vertx, ld,\n          \"mod-users-5.0.0-SNAPSHOT\", ports, host,\n          9231, conf);\n  Async async = context.async();\n  AtomicBoolean succeeded = new AtomicBoolean();\n  dh.pullImage().onComplete(done -> {\n    succeeded.set(done.succeeded()));\n    async.complete();\n  });\n  async.await();\n  return succeeded.get();\n}\n\nassertThat(pullImage(context, vertx, \"localhost\", conf), is(true));", "url": "https://github.com/folio-org/okapi/pull/1007#discussion_r508649681", "createdAt": "2020-10-20T16:02:34Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/test/java/org/folio/okapi/service/impl/DockerModuleHandleTest.java", "diffHunk": "@@ -136,6 +150,124 @@ private void dockerMockHandle(RoutingContext ctx) {\n     }\n   }\n \n+  @Test\n+  public void testDockerPull(TestContext context) {\n+    Vertx vertx = Vertx.vertx();\n+    int dockerPort = 9231;\n+\n+    Router router = Router.router(vertx);\n+    router.routeWithRegex(\"/.*\").handler(this::dockerMockHandle);\n+\n+    HttpServerOptions so = new HttpServerOptions().setHandle100ContinueAutomatically(true);\n+    HttpServer listen = vertx.createHttpServer(so)\n+        .requestHandler(router)\n+        .listen(dockerPort, context.asyncAssertSuccess());\n+    LaunchDescriptor ld = new LaunchDescriptor();\n+    ld.setWaitIterations(2);\n+    ld.setDockerImage(\"folioci/mod-x\");\n+    ld.setDockerPull(true);\n+\n+    Ports ports = new Ports(9232, 9233);\n+    JsonObject conf = new JsonObject().put(\"dockerUrl\", \"tcp://localhost:\" + dockerPort);\n+\n+    dockerPullJson = new JsonObject().put(\"message\", \"some message\");\n+    dockerPullStatus = 200;\n+\n+    {\n+      DockerModuleHandle dh = new DockerModuleHandle(vertx, ld,\n+          \"mod-users-5.0.0-SNAPSHOT\", ports, \"localhost\",\n+          9231, conf);\n+      Async async = context.async();\n+      dh.pullImage().onComplete(context.asyncAssertSuccess(x -> {\n+        async.complete();\n+      }));\n+      async.await();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74f949e1e2b0fd32afa0bfebabac6cee891cd0bd"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NjUyNzA5OnYy", "diffSide": "RIGHT", "path": "okapi-core/src/test/java/org/folio/okapi/service/impl/DockerModuleHandleTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNzowNjo0NVrOHlIYzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOTo0ODo1M1rOHmZtRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY5Njc4MA==", "bodyText": "The host value was \"localhost:5000\" before the last commit.\nIf we always use \"localhost\" this parameter can be removed and it can be hardcoded in pullImage.\nHow can we unit test that the \"registry\" parameter is handled correctly?", "url": "https://github.com/folio-org/okapi/pull/1007#discussion_r508696780", "createdAt": "2020-10-20T17:06:45Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/test/java/org/folio/okapi/service/impl/DockerModuleHandleTest.java", "diffHunk": "@@ -136,6 +151,68 @@ private void dockerMockHandle(RoutingContext ctx) {\n     }\n   }\n \n+  boolean pullImage(TestContext context, Vertx vertx, String host, JsonObject conf) {\n+    LaunchDescriptor ld = new LaunchDescriptor();\n+    ld.setWaitIterations(2);\n+    ld.setDockerImage(\"folioci/mod-x\");\n+    ld.setDockerPull(true);\n+    Ports ports = new Ports(9232, 9233);\n+    DockerModuleHandle dh = new DockerModuleHandle(vertx, ld,\n+        \"mod-users-5.0.0-SNAPSHOT\", ports, host,\n+        9231, conf);\n+    Async async = context.async();\n+    AtomicBoolean succeeded = new AtomicBoolean();\n+    dh.pullImage().onComplete(done -> {\n+      succeeded.set(done.succeeded());\n+      async.complete();\n+    });\n+    async.await();\n+    return succeeded.get();\n+  }\n+\n+  @Test\n+  public void testDockerPull(TestContext context) {\n+    Vertx vertx = Vertx.vertx();\n+    int dockerPort = 9231;\n+\n+    Router router = Router.router(vertx);\n+    router.routeWithRegex(\"/.*\").handler(this::dockerMockHandle);\n+\n+    HttpServerOptions so = new HttpServerOptions().setHandle100ContinueAutomatically(true);\n+    HttpServer listen = vertx.createHttpServer(so)\n+        .requestHandler(router)\n+        .listen(dockerPort, context.asyncAssertSuccess());\n+    dockerPullJson = new JsonObject().put(\"message\", \"some message\");\n+    dockerPullStatus = 200;\n+\n+    JsonObject conf = new JsonObject().put(\"dockerUrl\", \"tcp://localhost:\" + dockerPort);\n+    context.assertTrue(pullImage(context, vertx, \"localhost\", conf));\n+\n+    conf.put(\"dockerRegistries\", new JsonArray());\n+    context.assertFalse(pullImage(context, vertx, \"localhost\", conf));\n+\n+    conf.put(\"dockerRegistries\", new JsonArray()\n+        .addNull()\n+        .add(new JsonObject().put(\"username\", \"x\").put(\"password\", \"y\")));\n+    context.assertFalse(pullImage(context, vertx, \"localhost\", conf));\n+\n+    conf.put(\"dockerRegistries\", new JsonArray()\n+        .add(new JsonObject().put(\"username\", \"x\").put(\"password\", \"y\"))\n+        .add(new JsonObject().put(\"username\", \"x\").put(\"password\", \"x\"))\n+        .add(new JsonObject().put(\"username\", \"x\").put(\"password\", \"z\")));\n+    context.assertTrue(pullImage(context, vertx, \"localhost\", conf));\n+\n+    conf.put(\"dockerRegistries\", new JsonArray()\n+        .add(new JsonObject().put(\"registry\", \"localhost:5000\")));\n+    context.assertTrue(pullImage(context, vertx, \"localhost\", conf));\n+\n+    conf.put(\"dockerRegistries\", new JsonArray()\n+        .add(new JsonObject().put(\"registry\", \"localhost:5000/\")));\n+    context.assertTrue(pullImage(context, vertx, \"localhost\", conf));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6c04206e278c0a9ca50cc6dd85d8d220e230454"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAwOTE4OA==", "bodyText": "There's one localhost:5000 and localhost:5000/ now.", "url": "https://github.com/folio-org/okapi/pull/1007#discussion_r510009188", "createdAt": "2020-10-22T09:18:52Z", "author": {"login": "adamdickmeiss"}, "path": "okapi-core/src/test/java/org/folio/okapi/service/impl/DockerModuleHandleTest.java", "diffHunk": "@@ -136,6 +151,68 @@ private void dockerMockHandle(RoutingContext ctx) {\n     }\n   }\n \n+  boolean pullImage(TestContext context, Vertx vertx, String host, JsonObject conf) {\n+    LaunchDescriptor ld = new LaunchDescriptor();\n+    ld.setWaitIterations(2);\n+    ld.setDockerImage(\"folioci/mod-x\");\n+    ld.setDockerPull(true);\n+    Ports ports = new Ports(9232, 9233);\n+    DockerModuleHandle dh = new DockerModuleHandle(vertx, ld,\n+        \"mod-users-5.0.0-SNAPSHOT\", ports, host,\n+        9231, conf);\n+    Async async = context.async();\n+    AtomicBoolean succeeded = new AtomicBoolean();\n+    dh.pullImage().onComplete(done -> {\n+      succeeded.set(done.succeeded());\n+      async.complete();\n+    });\n+    async.await();\n+    return succeeded.get();\n+  }\n+\n+  @Test\n+  public void testDockerPull(TestContext context) {\n+    Vertx vertx = Vertx.vertx();\n+    int dockerPort = 9231;\n+\n+    Router router = Router.router(vertx);\n+    router.routeWithRegex(\"/.*\").handler(this::dockerMockHandle);\n+\n+    HttpServerOptions so = new HttpServerOptions().setHandle100ContinueAutomatically(true);\n+    HttpServer listen = vertx.createHttpServer(so)\n+        .requestHandler(router)\n+        .listen(dockerPort, context.asyncAssertSuccess());\n+    dockerPullJson = new JsonObject().put(\"message\", \"some message\");\n+    dockerPullStatus = 200;\n+\n+    JsonObject conf = new JsonObject().put(\"dockerUrl\", \"tcp://localhost:\" + dockerPort);\n+    context.assertTrue(pullImage(context, vertx, \"localhost\", conf));\n+\n+    conf.put(\"dockerRegistries\", new JsonArray());\n+    context.assertFalse(pullImage(context, vertx, \"localhost\", conf));\n+\n+    conf.put(\"dockerRegistries\", new JsonArray()\n+        .addNull()\n+        .add(new JsonObject().put(\"username\", \"x\").put(\"password\", \"y\")));\n+    context.assertFalse(pullImage(context, vertx, \"localhost\", conf));\n+\n+    conf.put(\"dockerRegistries\", new JsonArray()\n+        .add(new JsonObject().put(\"username\", \"x\").put(\"password\", \"y\"))\n+        .add(new JsonObject().put(\"username\", \"x\").put(\"password\", \"x\"))\n+        .add(new JsonObject().put(\"username\", \"x\").put(\"password\", \"z\")));\n+    context.assertTrue(pullImage(context, vertx, \"localhost\", conf));\n+\n+    conf.put(\"dockerRegistries\", new JsonArray()\n+        .add(new JsonObject().put(\"registry\", \"localhost:5000\")));\n+    context.assertTrue(pullImage(context, vertx, \"localhost\", conf));\n+\n+    conf.put(\"dockerRegistries\", new JsonArray()\n+        .add(new JsonObject().put(\"registry\", \"localhost:5000/\")));\n+    context.assertTrue(pullImage(context, vertx, \"localhost\", conf));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY5Njc4MA=="}, "originalCommit": {"oid": "c6c04206e278c0a9ca50cc6dd85d8d220e230454"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAyOTEyNg==", "bodyText": "Yes. That \"localhost\" is the containerHost.. something completely different. And that can be hard-coded.", "url": "https://github.com/folio-org/okapi/pull/1007#discussion_r510029126", "createdAt": "2020-10-22T09:48:53Z", "author": {"login": "adamdickmeiss"}, "path": "okapi-core/src/test/java/org/folio/okapi/service/impl/DockerModuleHandleTest.java", "diffHunk": "@@ -136,6 +151,68 @@ private void dockerMockHandle(RoutingContext ctx) {\n     }\n   }\n \n+  boolean pullImage(TestContext context, Vertx vertx, String host, JsonObject conf) {\n+    LaunchDescriptor ld = new LaunchDescriptor();\n+    ld.setWaitIterations(2);\n+    ld.setDockerImage(\"folioci/mod-x\");\n+    ld.setDockerPull(true);\n+    Ports ports = new Ports(9232, 9233);\n+    DockerModuleHandle dh = new DockerModuleHandle(vertx, ld,\n+        \"mod-users-5.0.0-SNAPSHOT\", ports, host,\n+        9231, conf);\n+    Async async = context.async();\n+    AtomicBoolean succeeded = new AtomicBoolean();\n+    dh.pullImage().onComplete(done -> {\n+      succeeded.set(done.succeeded());\n+      async.complete();\n+    });\n+    async.await();\n+    return succeeded.get();\n+  }\n+\n+  @Test\n+  public void testDockerPull(TestContext context) {\n+    Vertx vertx = Vertx.vertx();\n+    int dockerPort = 9231;\n+\n+    Router router = Router.router(vertx);\n+    router.routeWithRegex(\"/.*\").handler(this::dockerMockHandle);\n+\n+    HttpServerOptions so = new HttpServerOptions().setHandle100ContinueAutomatically(true);\n+    HttpServer listen = vertx.createHttpServer(so)\n+        .requestHandler(router)\n+        .listen(dockerPort, context.asyncAssertSuccess());\n+    dockerPullJson = new JsonObject().put(\"message\", \"some message\");\n+    dockerPullStatus = 200;\n+\n+    JsonObject conf = new JsonObject().put(\"dockerUrl\", \"tcp://localhost:\" + dockerPort);\n+    context.assertTrue(pullImage(context, vertx, \"localhost\", conf));\n+\n+    conf.put(\"dockerRegistries\", new JsonArray());\n+    context.assertFalse(pullImage(context, vertx, \"localhost\", conf));\n+\n+    conf.put(\"dockerRegistries\", new JsonArray()\n+        .addNull()\n+        .add(new JsonObject().put(\"username\", \"x\").put(\"password\", \"y\")));\n+    context.assertFalse(pullImage(context, vertx, \"localhost\", conf));\n+\n+    conf.put(\"dockerRegistries\", new JsonArray()\n+        .add(new JsonObject().put(\"username\", \"x\").put(\"password\", \"y\"))\n+        .add(new JsonObject().put(\"username\", \"x\").put(\"password\", \"x\"))\n+        .add(new JsonObject().put(\"username\", \"x\").put(\"password\", \"z\")));\n+    context.assertTrue(pullImage(context, vertx, \"localhost\", conf));\n+\n+    conf.put(\"dockerRegistries\", new JsonArray()\n+        .add(new JsonObject().put(\"registry\", \"localhost:5000\")));\n+    context.assertTrue(pullImage(context, vertx, \"localhost\", conf));\n+\n+    conf.put(\"dockerRegistries\", new JsonArray()\n+        .add(new JsonObject().put(\"registry\", \"localhost:5000/\")));\n+    context.assertTrue(pullImage(context, vertx, \"localhost\", conf));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY5Njc4MA=="}, "originalCommit": {"oid": "c6c04206e278c0a9ca50cc6dd85d8d220e230454"}, "originalPosition": 116}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 172, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}