{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0OTUwNDYy", "number": 981, "title": "OKAPI-890 - Formalize Token Cache PoC", "bodyText": "Purpose\nFormalize the TokenCache PoC.\nSee OKAPI-890 and the wiki \nApproach\n\nAdd new config parameters:\n\ntoken_cache_max_size\ntoken_cache_ttl_ms\n\n\nUpdate the guide\nImplement an LRU Cache based on LinkedHashMap\nAdd metrics for cache events (was part of the 2nd part of the PoC)\nAdd unit tests\n\nNOTE:  This branch is based off the tokenCache branch.", "createdAt": "2020-09-29T16:15:25Z", "url": "https://github.com/folio-org/okapi/pull/981", "merged": true, "mergeCommit": {"oid": "15643449551a60bd9f8af510e57151c13542fbdc"}, "closed": true, "closedAt": "2020-10-09T20:24:41Z", "author": {"login": "craigmcnally"}, "timelineItems": {"totalCount": 42, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdI1DfwgH2gAyNDk0OTUwNDYyOjY2Yzg5YjdkYjhiMzE0MzRhYjQzNDI3YTFjNTc4NmM2NTc4YmI2NmU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdQ71lWgH2gAyNDk0OTUwNDYyOjE0ODQwNTFiNzcwNjUxNTFmOGVjZjA5Zjc0NzA2YTkyODdjN2YxMDE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "66c89b7db8b31434ab43427a1c5786c6578bb66e", "author": {"user": {"login": "craigmcnally", "name": "Craig McNally"}}, "url": "https://github.com/folio-org/okapi/commit/66c89b7db8b31434ab43427a1c5786c6578bb66e", "committedDate": "2020-09-14T15:37:25Z", "message": "port to Okapi4 and add metrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ba1f75ef3a1991331a2f5e97a7fe2b960a89fd2", "author": {"user": {"login": "craigmcnally", "name": "Craig McNally"}}, "url": "https://github.com/folio-org/okapi/commit/9ba1f75ef3a1991331a2f5e97a7fe2b960a89fd2", "committedDate": "2020-09-14T15:58:43Z", "message": "Merge branch 'master' into tokenCache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c1620ff4bb845914e2af0d4df8b8f62490da35e", "author": {"user": {"login": "craigmcnally", "name": "Craig McNally"}}, "url": "https://github.com/folio-org/okapi/commit/4c1620ff4bb845914e2af0d4df8b8f62490da35e", "committedDate": "2020-09-14T18:19:14Z", "message": "sonar"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "162ae801921e2328b938264cd85ed5723835d979", "author": {"user": {"login": "craigmcnally", "name": "Craig McNally"}}, "url": "https://github.com/folio-org/okapi/commit/162ae801921e2328b938264cd85ed5723835d979", "committedDate": "2020-09-14T18:19:33Z", "message": "Merge branch 'tokenCache' of github.com:folio-org/okapi into tokenCache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f3e3e222bfa8d6d2687d4cf08fc333e8bc15e35", "author": {"user": {"login": "craigmcnally", "name": "Craig McNally"}}, "url": "https://github.com/folio-org/okapi/commit/4f3e3e222bfa8d6d2687d4cf08fc333e8bc15e35", "committedDate": "2020-09-14T19:40:15Z", "message": "fix regex"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77e98f0f58a1f844b66e2d6c03b3a9fd1465fc7a", "author": {"user": {"login": "craigmcnally", "name": "Craig McNally"}}, "url": "https://github.com/folio-org/okapi/commit/77e98f0f58a1f844b66e2d6c03b3a9fd1465fc7a", "committedDate": "2020-09-14T20:11:51Z", "message": "sonar - again"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b17184d07cb5d18d4213e2d8a4eb1b7e35b1b7bd", "author": {"user": {"login": "craigmcnally", "name": "Craig McNally"}}, "url": "https://github.com/folio-org/okapi/commit/b17184d07cb5d18d4213e2d8a4eb1b7e35b1b7bd", "committedDate": "2020-09-14T20:15:59Z", "message": "fixing line length"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9dfebe1389526f06f09d19b79a76c523f5c9d42", "author": {"user": {"login": "craigmcnally", "name": "Craig McNally"}}, "url": "https://github.com/folio-org/okapi/commit/a9dfebe1389526f06f09d19b79a76c523f5c9d42", "committedDate": "2020-09-23T19:21:49Z", "message": "addres NPE on missing userId"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b48bbef331bcc21f3bf51a3f354e7ed1dea68434", "author": {"user": {"login": "craigmcnally", "name": "Craig McNally"}}, "url": "https://github.com/folio-org/okapi/commit/b48bbef331bcc21f3bf51a3f354e7ed1dea68434", "committedDate": "2020-09-23T19:26:45Z", "message": "Merge branch 'master' into tokenCache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ae7a4bf5e5b7f2fc79ee587ef7fa6c430c396b5", "author": {"user": {"login": "craigmcnally", "name": "Craig McNally"}}, "url": "https://github.com/folio-org/okapi/commit/4ae7a4bf5e5b7f2fc79ee587ef7fa6c430c396b5", "committedDate": "2020-09-29T16:11:52Z", "message": "OKAPI-890: formalize tokenCache PoC"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a45ee7efbdd9b9d826a8d86164fb2b02ff09f91c", "author": {"user": {"login": "craigmcnally", "name": "Craig McNally"}}, "url": "https://github.com/folio-org/okapi/commit/a45ee7efbdd9b9d826a8d86164fb2b02ff09f91c", "committedDate": "2020-09-29T16:23:38Z", "message": "Merge branch 'master' into OKAPI-890"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40bafe2c6bd0f03324b2b79af7e5bd1b7a5c9382", "author": {"user": {"login": "craigmcnally", "name": "Craig McNally"}}, "url": "https://github.com/folio-org/okapi/commit/40bafe2c6bd0f03324b2b79af7e5bd1b7a5c9382", "committedDate": "2020-09-29T17:10:01Z", "message": "fixing equals and hashcode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76368d0c418f925f1a6bf204318965cdf5023562", "author": {"user": {"login": "craigmcnally", "name": "Craig McNally"}}, "url": "https://github.com/folio-org/okapi/commit/76368d0c418f925f1a6bf204318965cdf5023562", "committedDate": "2020-09-29T21:00:09Z", "message": "allow token cache args to be specified as system properties"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48e4bb494f9026e7d0dcd994ab85d7be2f5e392c", "author": {"user": {"login": "craigmcnally", "name": "Craig McNally"}}, "url": "https://github.com/folio-org/okapi/commit/48e4bb494f9026e7d0dcd994ab85d7be2f5e392c", "committedDate": "2020-09-30T21:10:42Z", "message": "Merge branch 'master' into OKAPI-890"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwMjU0NDQx", "url": "https://github.com/folio-org/okapi/pull/981#pullrequestreview-500254441", "createdAt": "2020-10-01T11:33:39Z", "commit": {"oid": "48e4bb494f9026e7d0dcd994ab85d7be2f5e392c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMTozMzozOVrOHbGMtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMTozMzozOVrOHbGMtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE3NTE1OQ==", "bodyText": "Not in use anywhere, so I don't think it's necessary to define it.", "url": "https://github.com/folio-org/okapi/pull/981#discussion_r498175159", "createdAt": "2020-10-01T11:33:39Z", "author": {"login": "adamdickmeiss"}, "path": "okapi-core/src/main/java/org/folio/okapi/util/TokenCache.java", "diffHunk": "@@ -0,0 +1,181 @@\n+package org.folio.okapi.util;\n+\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import org.apache.logging.log4j.Logger;\n+import org.folio.okapi.common.OkapiLogger;\n+\n+public class TokenCache {\n+\n+  public static final long DEFAULT_TTL = 3 * 60 * 1000L;\n+  public static final int DEFAULT_MAX_SIZE = 10000;\n+\n+  private final Map<String, CacheEntry> cache;\n+  private final long ttl;\n+\n+  private static final Logger logger = OkapiLogger.get(TokenCache.class);\n+\n+  /**\n+   * Convenience constructor using the default TTL and max size.\n+   */\n+  public TokenCache() {\n+    this(DEFAULT_TTL, DEFAULT_MAX_SIZE);\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48e4bb494f9026e7d0dcd994ab85d7be2f5e392c"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwMjU0NzE4", "url": "https://github.com/folio-org/okapi/pull/981#pullrequestreview-500254718", "createdAt": "2020-10-01T11:34:07Z", "commit": {"oid": "48e4bb494f9026e7d0dcd994ab85d7be2f5e392c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMTozNDowN1rOHbGNbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMTozNDowN1rOHbGNbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE3NTM0MQ==", "bodyText": "That's going to be a lot of logging by default.. with info log-level I mean.", "url": "https://github.com/folio-org/okapi/pull/981#discussion_r498175341", "createdAt": "2020-10-01T11:34:07Z", "author": {"login": "adamdickmeiss"}, "path": "okapi-core/src/main/java/org/folio/okapi/util/TokenCache.java", "diffHunk": "@@ -0,0 +1,181 @@\n+package org.folio.okapi.util;\n+\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import org.apache.logging.log4j.Logger;\n+import org.folio.okapi.common.OkapiLogger;\n+\n+public class TokenCache {\n+\n+  public static final long DEFAULT_TTL = 3 * 60 * 1000L;\n+  public static final int DEFAULT_MAX_SIZE = 10000;\n+\n+  private final Map<String, CacheEntry> cache;\n+  private final long ttl;\n+\n+  private static final Logger logger = OkapiLogger.get(TokenCache.class);\n+\n+  /**\n+   * Convenience constructor using the default TTL and max size.\n+   */\n+  public TokenCache() {\n+    this(DEFAULT_TTL, DEFAULT_MAX_SIZE);\n+  }\n+\n+  /**\n+   * Constructor using the provided TTL and maxSize.\n+   * \n+   * @param ttl cache entry time to live in milliseconds\n+   * @param maxSize the maximum number of entries that may be cached at once\n+   */\n+  private TokenCache(long ttl, int maxSize) {\n+    logger.info(\"Initializing token cache w/ ttl: {}, maxSize: {}\", ttl, maxSize);\n+    this.ttl = ttl;\n+\n+    this.cache = Collections.synchronizedMap(new LruCache<>(maxSize));\n+  }\n+\n+  /**\n+   * Cache an entry.\n+   * \n+   * @param method HTTP method\n+   * @param path path pattern\n+   * @param userId X-Okapi-User-Id header to cache\n+   * @param xokapiPerms X-Okapi-Permissions header to cache\n+   * @param keyToken the token to be used in the cache key, from the request which triggered the\n+   *        call to mod-authtoken\n+   * @param token access token to cache - from the mod-authtoken response\n+   */\n+  public void put(String tenant, String method, String path, String userId, String xokapiPerms,\n+      String keyToken, String token) {\n+    long now = System.currentTimeMillis();\n+    CacheEntry entry = new CacheEntry(token, userId, xokapiPerms, now + ttl);\n+    String key = genKey(method, path, userId, keyToken);\n+    MetricsHelper.recordTokenCacheCached(tenant, method, path, userId);\n+    logger.info(\"Caching: {} -> {}\", key, token);\n+    cache.put(key, entry);\n+  }\n+\n+  /**\n+   * Get a cached entry.\n+   * \n+   * @param tenant tenant id\n+   * @param method HTTP method\n+   * @param path path pattern\n+   * @param token X-Okapi-Token header\n+   * @param userId X-Okapi-User-Id header\n+   * @return cache entry or null\n+   */\n+  public CacheEntry get(String tenant, String method, String path, String userId, String token) {\n+    String key = genKey(method, path, userId, token);\n+    CacheEntry ret = cache.get(key);\n+    if (ret == null) {\n+      MetricsHelper.recordTokenCacheMiss(tenant, method, path, userId);\n+      logger.info(\"Cache Miss: {}\", key);\n+      return ret;\n+    } else if (ret.isExpired()) {\n+      MetricsHelper.recordTokenCacheExpired(tenant, method, path, userId);\n+      logger.info(\"Cache Hit (Expired): {}\", key);\n+      cache.remove(key);\n+      return null;\n+    } else {\n+      MetricsHelper.recordTokenCacheHit(tenant, method, path, userId);\n+      logger.info(\"Cache Hit: {} -> {}\", key, ret.token);\n+      return ret;\n+    }\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48e4bb494f9026e7d0dcd994ab85d7be2f5e392c"}, "originalPosition": 88}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fc9613da775d173e0541a0f761f8f5e72dd5c7b", "author": {"user": {"login": "craigmcnally", "name": "Craig McNally"}}, "url": "https://github.com/folio-org/okapi/commit/4fc9613da775d173e0541a0f761f8f5e72dd5c7b", "committedDate": "2020-10-01T12:50:27Z", "message": "Merge branch 'master' into OKAPI-890"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwMzEzMDM2", "url": "https://github.com/folio-org/okapi/pull/981#pullrequestreview-500313036", "createdAt": "2020-10-01T12:52:15Z", "commit": {"oid": "4fc9613da775d173e0541a0f761f8f5e72dd5c7b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "516eb2b77f861512714a8c4e8d41310bf21247b8", "author": {"user": {"login": "craigmcnally", "name": "Craig McNally"}}, "url": "https://github.com/folio-org/okapi/commit/516eb2b77f861512714a8c4e8d41310bf21247b8", "committedDate": "2020-10-01T12:59:31Z", "message": "log cache messages at debug level"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "244ed3841aa28b9b36f9860a0febe208cd9ebca3", "author": {"user": {"login": "craigmcnally", "name": "Craig McNally"}}, "url": "https://github.com/folio-org/okapi/commit/244ed3841aa28b9b36f9860a0febe208cd9ebca3", "committedDate": "2020-10-01T14:57:58Z", "message": "Merge branch 'master' into OKAPI-890"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxMzA2MDY2", "url": "https://github.com/folio-org/okapi/pull/981#pullrequestreview-501306066", "createdAt": "2020-10-02T17:08:37Z", "commit": {"oid": "244ed3841aa28b9b36f9860a0febe208cd9ebca3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNzowODozN1rOHb1LOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNzowODozN1rOHb1LOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk0NDgyNQ==", "bodyText": "Since userId is part of the key, is there a reason to store it as part of the CacheEntry as well?", "url": "https://github.com/folio-org/okapi/pull/981#discussion_r498944825", "createdAt": "2020-10-02T17:08:37Z", "author": {"login": "hjiebsco"}, "path": "okapi-core/src/main/java/org/folio/okapi/util/TokenCache.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package org.folio.okapi.util;\n+\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import org.apache.logging.log4j.Logger;\n+import org.folio.okapi.common.OkapiLogger;\n+\n+public class TokenCache {\n+\n+  public static final long DEFAULT_TTL = 3 * 60 * 1000L;\n+  public static final int DEFAULT_MAX_SIZE = 10000;\n+\n+  private final Map<String, CacheEntry> cache;\n+  private final long ttl;\n+\n+  private static final Logger logger = OkapiLogger.get(TokenCache.class);\n+\n+  /**\n+   * Constructor using the provided TTL and maxSize.\n+   * \n+   * @param ttl cache entry time to live in milliseconds\n+   * @param maxSize the maximum number of entries that may be cached at once\n+   */\n+  private TokenCache(long ttl, int maxSize) {\n+    logger.info(\"Initializing token cache w/ ttl: {}, maxSize: {}\", ttl, maxSize);\n+    this.ttl = ttl;\n+\n+    this.cache = Collections.synchronizedMap(new LruCache<>(maxSize));\n+  }\n+\n+  /**\n+   * Cache an entry.\n+   * \n+   * @param method HTTP method\n+   * @param path path pattern\n+   * @param userId X-Okapi-User-Id header to cache\n+   * @param xokapiPerms X-Okapi-Permissions header to cache\n+   * @param keyToken the token to be used in the cache key, from the request which triggered the\n+   *        call to mod-authtoken\n+   * @param token access token to cache - from the mod-authtoken response\n+   */\n+  public void put(String tenant, String method, String path, String userId, String xokapiPerms,\n+      String keyToken, String token) {\n+    long now = System.currentTimeMillis();\n+    CacheEntry entry = new CacheEntry(token, userId, xokapiPerms, now + ttl);\n+    String key = genKey(method, path, userId, keyToken);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "244ed3841aa28b9b36f9860a0febe208cd9ebca3"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMDI4NzYx", "url": "https://github.com/folio-org/okapi/pull/981#pullrequestreview-502028761", "createdAt": "2020-10-05T12:59:10Z", "commit": {"oid": "244ed3841aa28b9b36f9860a0febe208cd9ebca3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMjo1OToxMFrOHcb41Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMjo1OToxMFrOHcb41Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU3OTA5Mw==", "bodyText": "Can you use consistent case of id, either always upper or always lower in method, parameter and variable?", "url": "https://github.com/folio-org/okapi/pull/981#discussion_r499579093", "createdAt": "2020-10-05T12:59:10Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/main/java/org/folio/okapi/bean/ModuleInstance.java", "diffHunk": "@@ -86,4 +88,20 @@ public ModuleInstance withRetry() {\n     this.withRetry = true;\n     return this;\n   }\n+\n+  public String getxOkapiUserId() {\n+    return xokapiUserid;\n+  }\n+\n+  public void setxOkapiUserId(String xokapiUserid) {\n+    this.xokapiUserid = xokapiUserid;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "244ed3841aa28b9b36f9860a0febe208cd9ebca3"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMDMwNDcy", "url": "https://github.com/folio-org/okapi/pull/981#pullrequestreview-502030472", "createdAt": "2020-10-05T13:01:10Z", "commit": {"oid": "244ed3841aa28b9b36f9860a0febe208cd9ebca3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzowMToxMFrOHcb9rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzowMToxMFrOHcb9rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU4MDMzNQ==", "bodyText": "The lower x looks odd but it is required by Google Code Style.\nCan we remove \"xOkapi\" from the name?", "url": "https://github.com/folio-org/okapi/pull/981#discussion_r499580335", "createdAt": "2020-10-05T13:01:10Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/main/java/org/folio/okapi/bean/ModuleInstance.java", "diffHunk": "@@ -86,4 +88,20 @@ public ModuleInstance withRetry() {\n     this.withRetry = true;\n     return this;\n   }\n+\n+  public String getxOkapiUserId() {\n+    return xokapiUserid;\n+  }\n+\n+  public void setxOkapiUserId(String xokapiUserid) {\n+    this.xokapiUserid = xokapiUserid;\n+  }\n+\n+  public String getxOkapiPermissions() {\n+    return xokapiPermissions;\n+  }\n+\n+  public void setxOkapiPermissions(String xokapiPermissions) {\n+    this.xokapiPermissions = xokapiPermissions;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "244ed3841aa28b9b36f9860a0febe208cd9ebca3"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMDMyNzg1", "url": "https://github.com/folio-org/okapi/pull/981#pullrequestreview-502032785", "createdAt": "2020-10-05T13:03:51Z", "commit": {"oid": "244ed3841aa28b9b36f9860a0febe208cd9ebca3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzowMzo1MlrOHccEOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzowMzo1MlrOHccEOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU4MjAwOQ==", "bodyText": "Can we be sure that there is no old userId and permission in mi? Or should we set them to null?", "url": "https://github.com/folio-org/okapi/pull/981#discussion_r499582009", "createdAt": "2020-10-05T13:03:52Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java", "diffHunk": "@@ -174,6 +187,27 @@ private boolean resolveRedirects(ProxyContext pc,\n     return true;\n   }\n \n+  private boolean checkTokenCache(ProxyContext pc, HttpServerRequest req, RoutingEntry re,\n+      ModuleInstance mi) {\n+    boolean skipAuth = false;\n+    String pathPattern = re.getPathPattern();\n+\n+    CacheEntry cached = tokenCache.get(pc.getTenant(), req.method().name(),\n+        pathPattern == null ? req.path() : pathPattern, req.getHeader(XOkapiHeaders.USER_ID),\n+        req.headers().get(XOkapiHeaders.TOKEN));\n+\n+    if (cached != null) {\n+      mi.setAuthToken(cached.token);\n+      mi.setxOkapiUserId(cached.xokapiUserid);\n+      mi.setxOkapiPermissions(cached.xokapiPermissions);\n+\n+      skipAuth = true;\n+    } else {\n+      mi.setAuthToken(req.headers().get(XOkapiHeaders.TOKEN));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "244ed3841aa28b9b36f9860a0febe208cd9ebca3"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMDM1NTYw", "url": "https://github.com/folio-org/okapi/pull/981#pullrequestreview-502035560", "createdAt": "2020-10-05T13:07:01Z", "commit": {"oid": "244ed3841aa28b9b36f9860a0febe208cd9ebca3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzowNzowMVrOHccLrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzowNzowMVrOHccLrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU4MzkxOQ==", "bodyText": "This variable is not needed. We can directly return true or false.\nThere should be javadoc explaining the return value.", "url": "https://github.com/folio-org/okapi/pull/981#discussion_r499583919", "createdAt": "2020-10-05T13:07:01Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java", "diffHunk": "@@ -174,6 +187,27 @@ private boolean resolveRedirects(ProxyContext pc,\n     return true;\n   }\n \n+  private boolean checkTokenCache(ProxyContext pc, HttpServerRequest req, RoutingEntry re,\n+      ModuleInstance mi) {\n+    boolean skipAuth = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "244ed3841aa28b9b36f9860a0febe208cd9ebca3"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMDYzOTM1", "url": "https://github.com/folio-org/okapi/pull/981#pullrequestreview-502063935", "createdAt": "2020-10-05T13:37:34Z", "commit": {"oid": "244ed3841aa28b9b36f9860a0febe208cd9ebca3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzozNzozNFrOHcdcIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzozNzozNFrOHcdcIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYwNDUxNA==", "bodyText": "Why do we the replaceAll?\nCan the replaceAll been applied to only those variables that needs it?", "url": "https://github.com/folio-org/okapi/pull/981#discussion_r499604514", "createdAt": "2020-10-05T13:37:34Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/main/java/org/folio/okapi/util/TokenCache.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package org.folio.okapi.util;\n+\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import org.apache.logging.log4j.Logger;\n+import org.folio.okapi.common.OkapiLogger;\n+\n+public class TokenCache {\n+\n+  public static final long DEFAULT_TTL = 3 * 60 * 1000L;\n+  public static final int DEFAULT_MAX_SIZE = 10000;\n+\n+  private final Map<String, CacheEntry> cache;\n+  private final long ttl;\n+\n+  private static final Logger logger = OkapiLogger.get(TokenCache.class);\n+\n+  /**\n+   * Constructor using the provided TTL and maxSize.\n+   * \n+   * @param ttl cache entry time to live in milliseconds\n+   * @param maxSize the maximum number of entries that may be cached at once\n+   */\n+  private TokenCache(long ttl, int maxSize) {\n+    logger.info(\"Initializing token cache w/ ttl: {}, maxSize: {}\", ttl, maxSize);\n+    this.ttl = ttl;\n+\n+    this.cache = Collections.synchronizedMap(new LruCache<>(maxSize));\n+  }\n+\n+  /**\n+   * Cache an entry.\n+   * \n+   * @param method HTTP method\n+   * @param path path pattern\n+   * @param userId X-Okapi-User-Id header to cache\n+   * @param xokapiPerms X-Okapi-Permissions header to cache\n+   * @param keyToken the token to be used in the cache key, from the request which triggered the\n+   *        call to mod-authtoken\n+   * @param token access token to cache - from the mod-authtoken response\n+   */\n+  public void put(String tenant, String method, String path, String userId, String xokapiPerms,\n+      String keyToken, String token) {\n+    long now = System.currentTimeMillis();\n+    CacheEntry entry = new CacheEntry(token, userId, xokapiPerms, now + ttl);\n+    String key = genKey(method, path, userId, keyToken);\n+    MetricsHelper.recordTokenCacheCached(tenant, method, path, userId);\n+    logger.debug(\"Caching: {} -> {}\", key, token);\n+    cache.put(key, entry);\n+  }\n+\n+  /**\n+   * Get a cached entry.\n+   * \n+   * @param tenant tenant id\n+   * @param method HTTP method\n+   * @param path path pattern\n+   * @param token X-Okapi-Token header\n+   * @param userId X-Okapi-User-Id header\n+   * @return cache entry or null\n+   */\n+  public CacheEntry get(String tenant, String method, String path, String userId, String token) {\n+    String key = genKey(method, path, userId, token);\n+    CacheEntry ret = cache.get(key);\n+    if (ret == null) {\n+      MetricsHelper.recordTokenCacheMiss(tenant, method, path, userId);\n+      logger.debug(\"Cache Miss: {}\", key);\n+      return ret;\n+    } else if (ret.isExpired()) {\n+      MetricsHelper.recordTokenCacheExpired(tenant, method, path, userId);\n+      logger.debug(\"Cache Hit (Expired): {}\", key);\n+      cache.remove(key);\n+      return null;\n+    } else {\n+      MetricsHelper.recordTokenCacheHit(tenant, method, path, userId);\n+      logger.debug(\"Cache Hit: {} -> {}\", key, ret.token);\n+      return ret;\n+    }\n+  }\n+\n+  private String genKey(String method, String path, String userId, String token) {\n+    return (userId + \"|\" + method + \"|\" + path + \"|\" + token).replaceAll(\"[\\n\\t\\r]\", \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "244ed3841aa28b9b36f9860a0febe208cd9ebca3"}, "originalPosition": 83}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMTU0NDA3", "url": "https://github.com/folio-org/okapi/pull/981#pullrequestreview-502154407", "createdAt": "2020-10-05T15:08:20Z", "commit": {"oid": "244ed3841aa28b9b36f9860a0febe208cd9ebca3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNTowODoyMFrOHcheWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNTowODoyMFrOHcheWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY3MDYxOA==", "bodyText": "The test runs faster when using 50 ms for ttl and 10 ms for polling.\natMost should use ttl + 2*poll. Using ttl + poll may fail because of a race condition, we don't want spurious failures.", "url": "https://github.com/folio-org/okapi/pull/981#discussion_r499670618", "createdAt": "2020-10-05T15:08:20Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/test/java/org/folio/okapi/util/TokenCacheTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package org.folio.okapi.util;\n+\n+import org.junit.Test;\n+import static org.awaitility.Awaitility.await;\n+import static org.junit.Assert.*;\n+import java.util.concurrent.TimeUnit;\n+\n+public class TokenCacheTest {\n+  \n+  @Test\n+  public void testMaxSize() {\n+    TokenCache cache = TokenCache.builder()\n+        .withMaxSize(2)\n+        .build();\n+    \n+    cache.put(\"tenant\", \"method\", \"path\", \"userId\", \"xokapiPerms\", \"foo\", \"fooTok\");\n+    assertEquals(\"fooTok\", cache.get(\"tenant\", \"method\", \"path\", \"userId\", \"foo\").token);\n+    assertEquals(1, cache.size());\n+    \n+    cache.put(\"tenant\", \"method\", \"path\", \"userId\", \"xokapiPerms\", \"bar\", \"barTok\");\n+    assertEquals(\"barTok\", cache.get(\"tenant\", \"method\", \"path\", \"userId\", \"bar\").token);\n+    assertEquals(\"fooTok\", cache.get(\"tenant\", \"method\", \"path\", \"userId\", \"foo\").token);\n+    assertEquals(2, cache.size());\n+    \n+    cache.put(\"tenant\", \"method\", \"path\", \"userId\", \"xokapiPerms\", \"baz\", \"bazTok\");\n+    assertEquals(\"bazTok\", cache.get(\"tenant\", \"method\", \"path\", \"userId\", \"baz\").token);\n+    assertEquals(2, cache.size());\n+    \n+    assertEquals(\"fooTok\", cache.get(\"tenant\", \"method\", \"path\", \"userId\", \"foo\").token);\n+    assertEquals(null, cache.get(\"tenant\", \"method\", \"path\", \"userId\", \"bar\")); //evicted.\n+    assertEquals(\"bazTok\", cache.get(\"tenant\", \"method\", \"path\", \"userId\", \"baz\").token);\n+  }\n+  \n+  @Test\n+  public void testTtl() {\n+    long ttl = 500l;\n+\n+    TokenCache cache = TokenCache.builder()\n+        .withTtl(ttl)\n+        .build();\n+\n+    cache.put(\"tenant\", \"method\", \"path\", \"userId\", \"xokapiPerms\", \"foo\", \"fooTok\");\n+\n+    await().with()\n+        .pollInterval(100, TimeUnit.MILLISECONDS)\n+        .atMost(ttl + 100, TimeUnit.MILLISECONDS)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "244ed3841aa28b9b36f9860a0febe208cd9ebca3"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMTU2NDI2", "url": "https://github.com/folio-org/okapi/pull/981#pullrequestreview-502156426", "createdAt": "2020-10-05T15:10:26Z", "commit": {"oid": "244ed3841aa28b9b36f9860a0febe208cd9ebca3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNToxMDoyNlrOHchkUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNToxMDoyNlrOHchkUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY3MjE0Nw==", "bodyText": "This can be reduced to 200L", "url": "https://github.com/folio-org/okapi/pull/981#discussion_r499672147", "createdAt": "2020-10-05T15:10:26Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/test/java/org/folio/okapi/util/MetricsHelperTest.java", "diffHunk": "@@ -99,6 +101,51 @@ void testRecordHttpClientResponseTime() {\n     assertEquals(1, timer.count());\n   }\n \n+  @Test\n+  void testRecordTokenCacheEvent() {\n+    String userId = \"03975dd7-8004-48cf-bd21-4d7ff2e74ca2\";\n+    String anotherUserId = \"54412e3d-a024-4914-8d54-8b84e66513a6\";\n+\n+    long ttl = 2000L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "244ed3841aa28b9b36f9860a0febe208cd9ebca3"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMTY3OTU1", "url": "https://github.com/folio-org/okapi/pull/981#pullrequestreview-502167955", "createdAt": "2020-10-05T15:22:50Z", "commit": {"oid": "244ed3841aa28b9b36f9860a0febe208cd9ebca3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNToyMjo1MFrOHciHAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNToyMjo1MFrOHciHAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY4MTAyNg==", "bodyText": "The cache will grow to its max size and will never shrink because an expired token is only evicted if there is a get request. If there is a get request for an expired token then mod-authtoken is called and a new cache entry is created.\nConsider to extend the put method to check the two oldest cache entries whether they are expired and to remove them.", "url": "https://github.com/folio-org/okapi/pull/981#discussion_r499681026", "createdAt": "2020-10-05T15:22:50Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/main/java/org/folio/okapi/util/TokenCache.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package org.folio.okapi.util;\n+\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import org.apache.logging.log4j.Logger;\n+import org.folio.okapi.common.OkapiLogger;\n+\n+public class TokenCache {\n+\n+  public static final long DEFAULT_TTL = 3 * 60 * 1000L;\n+  public static final int DEFAULT_MAX_SIZE = 10000;\n+\n+  private final Map<String, CacheEntry> cache;\n+  private final long ttl;\n+\n+  private static final Logger logger = OkapiLogger.get(TokenCache.class);\n+\n+  /**\n+   * Constructor using the provided TTL and maxSize.\n+   * \n+   * @param ttl cache entry time to live in milliseconds\n+   * @param maxSize the maximum number of entries that may be cached at once\n+   */\n+  private TokenCache(long ttl, int maxSize) {\n+    logger.info(\"Initializing token cache w/ ttl: {}, maxSize: {}\", ttl, maxSize);\n+    this.ttl = ttl;\n+\n+    this.cache = Collections.synchronizedMap(new LruCache<>(maxSize));\n+  }\n+\n+  /**\n+   * Cache an entry.\n+   * \n+   * @param method HTTP method\n+   * @param path path pattern\n+   * @param userId X-Okapi-User-Id header to cache\n+   * @param xokapiPerms X-Okapi-Permissions header to cache\n+   * @param keyToken the token to be used in the cache key, from the request which triggered the\n+   *        call to mod-authtoken\n+   * @param token access token to cache - from the mod-authtoken response\n+   */\n+  public void put(String tenant, String method, String path, String userId, String xokapiPerms,\n+      String keyToken, String token) {\n+    long now = System.currentTimeMillis();\n+    CacheEntry entry = new CacheEntry(token, userId, xokapiPerms, now + ttl);\n+    String key = genKey(method, path, userId, keyToken);\n+    MetricsHelper.recordTokenCacheCached(tenant, method, path, userId);\n+    logger.debug(\"Caching: {} -> {}\", key, token);\n+    cache.put(key, entry);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "244ed3841aa28b9b36f9860a0febe208cd9ebca3"}, "originalPosition": 50}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42616bfc5810c305f492adc1c15f52ac9837c7c3", "author": {"user": {"login": "craigmcnally", "name": "Craig McNally"}}, "url": "https://github.com/folio-org/okapi/commit/42616bfc5810c305f492adc1c15f52ac9837c7c3", "committedDate": "2020-10-09T02:56:18Z", "message": "OKAPI-890 Add iat claim to token"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea941baa73ccee20329f302c9a09afa92a44dbbf", "author": {"user": {"login": "craigmcnally", "name": "Craig McNally"}}, "url": "https://github.com/folio-org/okapi/commit/ea941baa73ccee20329f302c9a09afa92a44dbbf", "committedDate": "2020-10-09T02:57:41Z", "message": "OKAPI-890 remove userId from cache key"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a546c9f7f0c8b77e65f90a617dd58b5bdf0a804", "author": {"user": {"login": "craigmcnally", "name": "Craig McNally"}}, "url": "https://github.com/folio-org/okapi/commit/2a546c9f7f0c8b77e65f90a617dd58b5bdf0a804", "committedDate": "2020-10-09T03:12:14Z", "message": "OKAPI-890 work skipAuth into existing loop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9179bf50e6a9c1a724b8cb5c629bd77e142ff0f8", "author": {"user": {"login": "craigmcnally", "name": "Craig McNally"}}, "url": "https://github.com/folio-org/okapi/commit/9179bf50e6a9c1a724b8cb5c629bd77e142ff0f8", "committedDate": "2020-10-09T03:15:39Z", "message": "OKAPI-890 rename members for readability"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3aa221bbc89262d224e8518ac0b6338991a30826", "author": {"user": {"login": "craigmcnally", "name": "Craig McNally"}}, "url": "https://github.com/folio-org/okapi/commit/3aa221bbc89262d224e8518ac0b6338991a30826", "committedDate": "2020-10-09T03:24:28Z", "message": "OKAPI-890 minor tweaks to checkTokenCache method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5eeb07bde26ad7529b48e7f7bf46b5365696b7d", "author": {"user": {"login": "craigmcnally", "name": "Craig McNally"}}, "url": "https://github.com/folio-org/okapi/commit/d5eeb07bde26ad7529b48e7f7bf46b5365696b7d", "committedDate": "2020-10-09T03:29:15Z", "message": "OKAPI-890 shorter ttls and pollInterval"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59b39eb8b0cbe978145b040bb6c3a2672268739f", "author": {"user": {"login": "craigmcnally", "name": "Craig McNally"}}, "url": "https://github.com/folio-org/okapi/commit/59b39eb8b0cbe978145b040bb6c3a2672268739f", "committedDate": "2020-10-09T03:45:42Z", "message": "Merge branch 'master' into OKAPI-890"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89bd9d152a9b9f15bb6288808f494c4777942414", "author": {"user": {"login": "craigmcnally", "name": "Craig McNally"}}, "url": "https://github.com/folio-org/okapi/commit/89bd9d152a9b9f15bb6288808f494c4777942414", "committedDate": "2020-10-09T04:21:13Z", "message": "Merge branch 'master' into OKAPI-890"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd05c4195085aa0bd1f77f9a0fda0c6b4a3fe53e", "author": {"user": {"login": "craigmcnally", "name": "Craig McNally"}}, "url": "https://github.com/folio-org/okapi/commit/bd05c4195085aa0bd1f77f9a0fda0c6b4a3fe53e", "committedDate": "2020-10-09T13:34:26Z", "message": "Merge branch 'master' into OKAPI-890"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1NzMzNTcz", "url": "https://github.com/folio-org/okapi/pull/981#pullrequestreview-505733573", "createdAt": "2020-10-09T14:38:04Z", "commit": {"oid": "bd05c4195085aa0bd1f77f9a0fda0c6b4a3fe53e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1ODEwMzMz", "url": "https://github.com/folio-org/okapi/pull/981#pullrequestreview-505810333", "createdAt": "2020-10-09T16:07:36Z", "commit": {"oid": "bd05c4195085aa0bd1f77f9a0fda0c6b4a3fe53e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "112335a9400dd63bb3ba22d435e584abba2bcf1d", "author": {"user": {"login": "craigmcnally", "name": "Craig McNally"}}, "url": "https://github.com/folio-org/okapi/commit/112335a9400dd63bb3ba22d435e584abba2bcf1d", "committedDate": "2020-10-09T16:31:48Z", "message": "Merge branch 'master' into OKAPI-890"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1484051b77065151f8ecf09f74706a9287c7f101", "author": {"user": {"login": "craigmcnally", "name": "Craig McNally"}}, "url": "https://github.com/folio-org/okapi/commit/1484051b77065151f8ecf09f74706a9287c7f101", "committedDate": "2020-10-09T20:02:57Z", "message": "OKAPI-890 improved cache pruning"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2850, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}