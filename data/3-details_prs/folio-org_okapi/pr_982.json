{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2MTUxNTY3", "number": 982, "title": "K8s compatible liveness and readiness probes OKAPI-904", "bodyText": "New configuration healthPort which when set and non-zero enables that Okapi\nlistens on that port and offers /readiness and /liveness services.. Both of\nwhich returns 204 No Content on success. 500 on failure.", "createdAt": "2020-10-01T10:33:45Z", "url": "https://github.com/folio-org/okapi/pull/982", "merged": true, "mergeCommit": {"oid": "e782add53b292c1e3f105c862819e3afb3eb9d23"}, "closed": true, "closedAt": "2020-10-19T14:47:17Z", "author": {"login": "adamdickmeiss"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdOO30ggH2gAyNDk2MTUxNTY3OjYzYmM1YzIxZmRhNzBjYzcyNTYxYzAwZGY0NDk1NmI3ZmVkMGUzZWQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdUE3G6AH2gAyNDk2MTUxNTY3OmZhYzJmNDQ1MWM0NTEyZjI3NWQzYjg2YzEyN2Q2ZWI2ZjNjY2VhNDE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "63bc5c21fda70cc72561c00df44956b7fed0e3ed", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/63bc5c21fda70cc72561c00df44956b7fed0e3ed", "committedDate": "2020-10-01T10:31:49Z", "message": "K8s compatible liveness and readiness probes OKAPI-904\n\nNew configuration healthPort which when set and non-zero enables that Okapi\nlistens on that port and offers /readiness and /liveness services.. Both of\nwhich returns 204 No Content on success. 500 on failure."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d1e1b2615d84f51864447128b6b4544a78850bb", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/5d1e1b2615d84f51864447128b6b4544a78850bb", "committedDate": "2020-10-01T11:10:51Z", "message": "More testing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNDQxOTYz", "url": "https://github.com/folio-org/okapi/pull/982#pullrequestreview-500441963", "createdAt": "2020-10-01T15:01:53Z", "commit": {"oid": "5d1e1b2615d84f51864447128b6b4544a78850bb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNTowMTo1M1rOHbOrkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNTowMTo1M1rOHbOrkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMxNDEzMA==", "bodyText": "this includes supertenant, right?", "url": "https://github.com/folio-org/okapi/pull/982#discussion_r498314130", "createdAt": "2020-10-01T15:01:53Z", "author": {"login": "craigmcnally"}, "path": "okapi-core/src/main/java/org/folio/okapi/managers/TenantManager.java", "diffHunk": "@@ -1035,4 +1036,8 @@ private ModuleInstance getTenantInstanceForInterface(\n     });\n   }\n \n+  @Override\n+  public Future<Void> isAlive() {\n+    return tenantStore.listTenants().mapEmpty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d1e1b2615d84f51864447128b6b4544a78850bb"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMTgyMDQ0", "url": "https://github.com/folio-org/okapi/pull/982#pullrequestreview-502182044", "createdAt": "2020-10-05T15:37:48Z", "commit": {"oid": "5d1e1b2615d84f51864447128b6b4544a78850bb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNTozNzo0OVrOHciwtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNTozNzo0OVrOHciwtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY5MTcwMQ==", "bodyText": "The method should be renamed to testPortReadinessPort0 and port = 0 been used. Then we can delete testPort0.", "url": "https://github.com/folio-org/okapi/pull/982#discussion_r499691701", "createdAt": "2020-10-05T15:37:49Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/test/java/org/folio/okapi/managers/HealthManagerTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package org.folio.okapi.managers;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.Vertx;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.junit5.VertxExtension;\n+import io.vertx.junit5.VertxTestContext;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import org.folio.okapi.service.Liveness;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+@ExtendWith(VertxExtension.class)\n+public class HealthManagerTest {\n+\n+  @Test\n+  void testPort0(Vertx vertx, VertxTestContext context) {\n+    HealthManager m = new HealthManager(0);\n+    m.init(vertx, Collections.emptyList()).onComplete(context.succeedingThenComplete());\n+  }\n+\n+  @Test\n+  void testPortPortOK(Vertx vertx, VertxTestContext context) {\n+    final int port = 9130;\n+    HealthManager m = new HealthManager(port);\n+    m.init(vertx, Collections.emptyList()).onComplete(context.succeedingThenComplete());\n+  }\n+\n+  @Test\n+  void testPortReadinessSuccess(Vertx vertx, VertxTestContext context) {\n+    final int port = 9130;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d1e1b2615d84f51864447128b6b4544a78850bb"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMTgyNzgw", "url": "https://github.com/folio-org/okapi/pull/982#pullrequestreview-502182780", "createdAt": "2020-10-05T15:38:33Z", "commit": {"oid": "5d1e1b2615d84f51864447128b6b4544a78850bb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNTozODozM1rOHciy6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNTozODozM1rOHciy6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY5MjI2Ng==", "bodyText": "This should be renamed to testPortReadinessPort9130. Then we can remove testPortOK.", "url": "https://github.com/folio-org/okapi/pull/982#discussion_r499692266", "createdAt": "2020-10-05T15:38:33Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/test/java/org/folio/okapi/managers/HealthManagerTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package org.folio.okapi.managers;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.Vertx;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.junit5.VertxExtension;\n+import io.vertx.junit5.VertxTestContext;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import org.folio.okapi.service.Liveness;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+@ExtendWith(VertxExtension.class)\n+public class HealthManagerTest {\n+\n+  @Test\n+  void testPort0(Vertx vertx, VertxTestContext context) {\n+    HealthManager m = new HealthManager(0);\n+    m.init(vertx, Collections.emptyList()).onComplete(context.succeedingThenComplete());\n+  }\n+\n+  @Test\n+  void testPortPortOK(Vertx vertx, VertxTestContext context) {\n+    final int port = 9130;\n+    HealthManager m = new HealthManager(port);\n+    m.init(vertx, Collections.emptyList()).onComplete(context.succeedingThenComplete());\n+  }\n+\n+  @Test\n+  void testPortReadinessSuccess(Vertx vertx, VertxTestContext context) {\n+    final int port = 9130;\n+    HealthManager m = new HealthManager(port);\n+    m.init(vertx, Collections.emptyList()).onComplete(context.succeeding(res -> {\n+      WebClient client = WebClient.create(vertx);\n+      client.get(port, \"localhost\", \"/readiness\")\n+          .send(context.succeeding(response -> {\n+            assertThat(response.statusCode()).isEqualTo(204);\n+            context.completeNow();\n+          }));\n+    }));\n+  }\n+\n+  @Test\n+  void testPortReadiness(Vertx vertx, VertxTestContext context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d1e1b2615d84f51864447128b6b4544a78850bb"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMTg2MTMy", "url": "https://github.com/folio-org/okapi/pull/982#pullrequestreview-502186132", "createdAt": "2020-10-05T15:42:11Z", "commit": {"oid": "5d1e1b2615d84f51864447128b6b4544a78850bb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNTo0MjoxMVrOHci81A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNTo0MjoxMVrOHci81A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY5NDgwNA==", "bodyText": "The list should be [IsAlive(), IsNotAlive()] to test that it not only checks the first one.", "url": "https://github.com/folio-org/okapi/pull/982#discussion_r499694804", "createdAt": "2020-10-05T15:42:11Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/test/java/org/folio/okapi/managers/HealthManagerTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package org.folio.okapi.managers;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.Vertx;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.junit5.VertxExtension;\n+import io.vertx.junit5.VertxTestContext;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import org.folio.okapi.service.Liveness;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+@ExtendWith(VertxExtension.class)\n+public class HealthManagerTest {\n+\n+  @Test\n+  void testPort0(Vertx vertx, VertxTestContext context) {\n+    HealthManager m = new HealthManager(0);\n+    m.init(vertx, Collections.emptyList()).onComplete(context.succeedingThenComplete());\n+  }\n+\n+  @Test\n+  void testPortPortOK(Vertx vertx, VertxTestContext context) {\n+    final int port = 9130;\n+    HealthManager m = new HealthManager(port);\n+    m.init(vertx, Collections.emptyList()).onComplete(context.succeedingThenComplete());\n+  }\n+\n+  @Test\n+  void testPortReadinessSuccess(Vertx vertx, VertxTestContext context) {\n+    final int port = 9130;\n+    HealthManager m = new HealthManager(port);\n+    m.init(vertx, Collections.emptyList()).onComplete(context.succeeding(res -> {\n+      WebClient client = WebClient.create(vertx);\n+      client.get(port, \"localhost\", \"/readiness\")\n+          .send(context.succeeding(response -> {\n+            assertThat(response.statusCode()).isEqualTo(204);\n+            context.completeNow();\n+          }));\n+    }));\n+  }\n+\n+  @Test\n+  void testPortReadiness(Vertx vertx, VertxTestContext context) {\n+    final int port = 9130;\n+    HealthManager m = new HealthManager(port);\n+    m.init(vertx, Collections.emptyList()).onComplete(context.succeeding(res -> {\n+      WebClient client = WebClient.create(vertx);\n+      client.get(port, \"localhost\", \"/readiness\")\n+          .send(context.succeeding(response -> {\n+            assertThat(response.statusCode()).isEqualTo(204);\n+            context.completeNow();\n+          }));\n+    }));\n+  }\n+\n+  @Test\n+  void testPortLivenessSuccess(Vertx vertx, VertxTestContext context) {\n+    final int port = 9130;\n+    HealthManager m = new HealthManager(port);\n+    m.init(vertx, Arrays.asList(new IsAlive())).onComplete(context.succeeding(res -> {\n+      WebClient client = WebClient.create(vertx);\n+      client.get(port, \"localhost\", \"/liveness\")\n+          .send(context.succeeding(response -> {\n+            assertThat(response.statusCode()).isEqualTo(204);\n+            context.completeNow();\n+          }));\n+    }));\n+  }\n+\n+  @Test\n+  void testPortLivenessFailure(Vertx vertx, VertxTestContext context) {\n+    final int port = 9130;\n+    HealthManager m = new HealthManager(port);\n+    m.init(vertx, Arrays.asList(new IsNotAlive())).onComplete(context.succeeding(res -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d1e1b2615d84f51864447128b6b4544a78850bb"}, "originalPosition": 78}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMjEzOTk4", "url": "https://github.com/folio-org/okapi/pull/982#pullrequestreview-502213998", "createdAt": "2020-10-05T16:14:00Z", "commit": {"oid": "5d1e1b2615d84f51864447128b6b4544a78850bb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjoxNDowMFrOHckOyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjoxNDowMFrOHckOyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcxNTc4Ng==", "bodyText": "This variable is not used.", "url": "https://github.com/folio-org/okapi/pull/982#discussion_r499715786", "createdAt": "2020-10-05T16:14:00Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/main/java/org/folio/okapi/managers/HealthManager.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package org.folio.okapi.managers;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.http.HttpServerOptions;\n+import io.vertx.ext.web.Router;\n+import io.vertx.ext.web.RoutingContext;\n+import java.util.List;\n+import org.folio.okapi.service.Liveness;\n+\n+public class HealthManager {\n+  private Vertx vertx;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d1e1b2615d84f51864447128b6b4544a78850bb"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMjIwNDk0", "url": "https://github.com/folio-org/okapi/pull/982#pullrequestreview-502220494", "createdAt": "2020-10-05T16:21:44Z", "commit": {"oid": "5d1e1b2615d84f51864447128b6b4544a78850bb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjoyMTo0NFrOHckiEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjoyMTo0NFrOHckiEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcyMDcyMg==", "bodyText": "The idiomatic way using Future methods:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                future.onComplete(res -> {\n          \n          \n            \n                  if (res.failed()) {\n          \n          \n            \n                    ctx.response().putHeader(\"Content-Type\", \"text/plain\");\n          \n          \n            \n                    ctx.response().setStatusCode(500);\n          \n          \n            \n                    ctx.response().end(res.cause().getMessage());\n          \n          \n            \n                    return;\n          \n          \n            \n                  }\n          \n          \n            \n                  ctx.response().setStatusCode(204);\n          \n          \n            \n                  ctx.response().end();\n          \n          \n            \n                });\n          \n          \n            \n                future.onFailure(e -> {\n          \n          \n            \n                  ctx.response().putHeader(\"Content-Type\", \"text/plain\");\n          \n          \n            \n                  ctx.response().setStatusCode(500);\n          \n          \n            \n                  ctx.response().end(e.getMessage());\n          \n          \n            \n                }).onSuccess(handler -> {\n          \n          \n            \n                  ctx.response().setStatusCode(204);\n          \n          \n            \n                  ctx.response().end();\n          \n          \n            \n                });", "url": "https://github.com/folio-org/okapi/pull/982#discussion_r499720722", "createdAt": "2020-10-05T16:21:44Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/main/java/org/folio/okapi/managers/HealthManager.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package org.folio.okapi.managers;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.http.HttpServerOptions;\n+import io.vertx.ext.web.Router;\n+import io.vertx.ext.web.RoutingContext;\n+import java.util.List;\n+import org.folio.okapi.service.Liveness;\n+\n+public class HealthManager {\n+  private Vertx vertx;\n+  private final int listenPort;\n+  private List<Liveness> livenessChecks;\n+\n+  public HealthManager(int listenPort) {\n+    this.listenPort = listenPort;\n+  }\n+\n+  /**\n+   * Initialize health manager.\n+   * This should be called when the service should start\n+   * serving readiness and liveness.\n+   * @param vertx Vert.x handle\n+   * @return future result\n+   *\n+   */\n+  public Future<Void> init(Vertx vertx, List<Liveness> livenessChecks) {\n+    this.vertx = vertx;\n+    this.livenessChecks = livenessChecks;\n+    if (listenPort == 0) {\n+      return Future.succeededFuture();\n+    }\n+    Router router = Router.router(vertx);\n+\n+    router.route(HttpMethod.GET, \"/readiness\").handler(this::readinessHandler);\n+    router.route(HttpMethod.GET, \"/liveness\").handler(this::livenessHandler);\n+    HttpServerOptions serverOptions = new HttpServerOptions()\n+        .setHandle100ContinueAutomatically(true);\n+    return vertx.createHttpServer(serverOptions)\n+        .requestHandler(router)\n+        .listen(listenPort)\n+        .mapEmpty();\n+  }\n+\n+  private void readinessHandler(RoutingContext ctx) {\n+    ctx.response().setStatusCode(204);\n+    ctx.response().end();\n+  }\n+\n+  private void livenessHandler(RoutingContext ctx) {\n+    Future<Void> future = Future.succeededFuture();\n+    for (Liveness l : livenessChecks) {\n+      future = future.compose(x -> l.isAlive());\n+    }\n+    future.onComplete(res -> {\n+      if (res.failed()) {\n+        ctx.response().putHeader(\"Content-Type\", \"text/plain\");\n+        ctx.response().setStatusCode(500);\n+        ctx.response().end(res.cause().getMessage());\n+        return;\n+      }\n+      ctx.response().setStatusCode(204);\n+      ctx.response().end();\n+    });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d1e1b2615d84f51864447128b6b4544a78850bb"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMjIyNjcz", "url": "https://github.com/folio-org/okapi/pull/982#pullrequestreview-502222673", "createdAt": "2020-10-05T16:24:36Z", "commit": {"oid": "5d1e1b2615d84f51864447128b6b4544a78850bb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjoyNDozNlrOHckosQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjoyNDozNlrOHckosQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcyMjQxNw==", "bodyText": "Should we also log the exception (message + stacktrace) on failure? One reason might be that the database query fails. This should also be in the log, not only in the HTTP body.", "url": "https://github.com/folio-org/okapi/pull/982#discussion_r499722417", "createdAt": "2020-10-05T16:24:36Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/main/java/org/folio/okapi/managers/HealthManager.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package org.folio.okapi.managers;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.http.HttpServerOptions;\n+import io.vertx.ext.web.Router;\n+import io.vertx.ext.web.RoutingContext;\n+import java.util.List;\n+import org.folio.okapi.service.Liveness;\n+\n+public class HealthManager {\n+  private Vertx vertx;\n+  private final int listenPort;\n+  private List<Liveness> livenessChecks;\n+\n+  public HealthManager(int listenPort) {\n+    this.listenPort = listenPort;\n+  }\n+\n+  /**\n+   * Initialize health manager.\n+   * This should be called when the service should start\n+   * serving readiness and liveness.\n+   * @param vertx Vert.x handle\n+   * @return future result\n+   *\n+   */\n+  public Future<Void> init(Vertx vertx, List<Liveness> livenessChecks) {\n+    this.vertx = vertx;\n+    this.livenessChecks = livenessChecks;\n+    if (listenPort == 0) {\n+      return Future.succeededFuture();\n+    }\n+    Router router = Router.router(vertx);\n+\n+    router.route(HttpMethod.GET, \"/readiness\").handler(this::readinessHandler);\n+    router.route(HttpMethod.GET, \"/liveness\").handler(this::livenessHandler);\n+    HttpServerOptions serverOptions = new HttpServerOptions()\n+        .setHandle100ContinueAutomatically(true);\n+    return vertx.createHttpServer(serverOptions)\n+        .requestHandler(router)\n+        .listen(listenPort)\n+        .mapEmpty();\n+  }\n+\n+  private void readinessHandler(RoutingContext ctx) {\n+    ctx.response().setStatusCode(204);\n+    ctx.response().end();\n+  }\n+\n+  private void livenessHandler(RoutingContext ctx) {\n+    Future<Void> future = Future.succeededFuture();\n+    for (Liveness l : livenessChecks) {\n+      future = future.compose(x -> l.isAlive());\n+    }\n+    future.onComplete(res -> {\n+      if (res.failed()) {\n+        ctx.response().putHeader(\"Content-Type\", \"text/plain\");\n+        ctx.response().setStatusCode(500);\n+        ctx.response().end(res.cause().getMessage());\n+        return;\n+      }\n+      ctx.response().setStatusCode(204);\n+      ctx.response().end();\n+    });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d1e1b2615d84f51864447128b6b4544a78850bb"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMjI3NjUw", "url": "https://github.com/folio-org/okapi/pull/982#pullrequestreview-502227650", "createdAt": "2020-10-05T16:30:54Z", "commit": {"oid": "5d1e1b2615d84f51864447128b6b4544a78850bb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjozMDo1NFrOHck3qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjozMDo1NFrOHck3qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcyNjI0OQ==", "bodyText": "The if clause should be move to the first line to avoid storing livenessChecks if they are not needed.", "url": "https://github.com/folio-org/okapi/pull/982#discussion_r499726249", "createdAt": "2020-10-05T16:30:54Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/main/java/org/folio/okapi/managers/HealthManager.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package org.folio.okapi.managers;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.http.HttpServerOptions;\n+import io.vertx.ext.web.Router;\n+import io.vertx.ext.web.RoutingContext;\n+import java.util.List;\n+import org.folio.okapi.service.Liveness;\n+\n+public class HealthManager {\n+  private Vertx vertx;\n+  private final int listenPort;\n+  private List<Liveness> livenessChecks;\n+\n+  public HealthManager(int listenPort) {\n+    this.listenPort = listenPort;\n+  }\n+\n+  /**\n+   * Initialize health manager.\n+   * This should be called when the service should start\n+   * serving readiness and liveness.\n+   * @param vertx Vert.x handle\n+   * @return future result\n+   *\n+   */\n+  public Future<Void> init(Vertx vertx, List<Liveness> livenessChecks) {\n+    this.vertx = vertx;\n+    this.livenessChecks = livenessChecks;\n+    if (listenPort == 0) {\n+      return Future.succeededFuture();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d1e1b2615d84f51864447128b6b4544a78850bb"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMjM1NDU3", "url": "https://github.com/folio-org/okapi/pull/982#pullrequestreview-502235457", "createdAt": "2020-10-05T16:41:23Z", "commit": {"oid": "5d1e1b2615d84f51864447128b6b4544a78850bb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjo0MToyM1rOHclPHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjo0MToyM1rOHclPHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczMjI1Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * `healthPort`: port for readiness and liveness checks. Default value is\n          \n          \n            \n               0 (disabled). Provide non-zero value to enable.\n          \n          \n            \n            * `healthPort`: port for the GET /readiness and GET /liveness health checks. Use 0 to disable, this is the default. They return 204 if Okapi is ready/responsive and 500 otherwise.", "url": "https://github.com/folio-org/okapi/pull/982#discussion_r499732252", "createdAt": "2020-10-05T16:41:23Z", "author": {"login": "julianladisch"}, "path": "doc/guide.md", "diffHunk": "@@ -2737,6 +2737,8 @@ Defaults to `localhost`\n system-generated UUID (in cluster mode), or `localhost` (in dev mode)\n * `storage`: Defines the storage back end, `postgres`, `mongo` or (the default)\n `inmemory`\n+* `healthPort`: port for readiness and liveness checks. Default value is\n+   0 (disabled). Provide non-zero value to enable.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d1e1b2615d84f51864447128b6b4544a78850bb"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b27fbc11855d61c19e03be1b9ba1d5c602f634c4", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/b27fbc11855d61c19e03be1b9ba1d5c602f634c4", "committedDate": "2020-10-07T16:11:32Z", "message": "Hopefully most of Julians suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75585bdfab4608194b33549bf2eb40b71599b3a6", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/75585bdfab4608194b33549bf2eb40b71599b3a6", "committedDate": "2020-10-07T16:58:24Z", "message": "Merge branch 'master' into OKAPI-904-k8s-liveness-readiness"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0MTM2NDQ4", "url": "https://github.com/folio-org/okapi/pull/982#pullrequestreview-504136448", "createdAt": "2020-10-07T18:03:28Z", "commit": {"oid": "75585bdfab4608194b33549bf2eb40b71599b3a6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f946e9deb7482157c85a70a27c022227e6f9db58", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/f946e9deb7482157c85a70a27c022227e6f9db58", "committedDate": "2020-10-14T15:15:40Z", "message": "Merge branch 'master' into OKAPI-904-k8s-liveness-readiness"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92723ece454094a2f6d7f8fc9ceea3c6fa0e80f6", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/92723ece454094a2f6d7f8fc9ceea3c6fa0e80f6", "committedDate": "2020-10-18T14:38:38Z", "message": "Merge branch 'master' into OKAPI-904-k8s-liveness-readiness"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fac2f4451c4512f275d3b86c127d6eb6f3ccea41", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/fac2f4451c4512f275d3b86c127d6eb6f3ccea41", "committedDate": "2020-10-19T14:15:32Z", "message": "Merge branch 'master' into OKAPI-904-k8s-liveness-readiness"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2854, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}