{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2NzQ2NzYy", "number": 1036, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNTo1OTo0NFrOE3xEZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMTo0ODoxNVrOE5-ueQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2OTExMDc4OnYy", "diffSide": "RIGHT", "path": "okapi-core/src/main/java/org/folio/okapi/MainVerticle.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNTo1OTo0NFrOHxTZFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxOToyODo1OFrOHxbQew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ1OTk5MQ==", "bodyText": "This indentation allows to remove @SuppressWarnings(\"indentation\"):\nreturn moduleManager.get(okapiModule).compose(\n    gres -> {\n      // we already have one, go on\n      logger.debug(\"checkInternalModules: Already have {} \"\n          + \" with interface version {}\", okapiModule, interfaceVersion);\n      // See Okapi-359 about version checks across the cluster\n      return Future.succeededFuture();\n    },\n    cause -> {\n      if (OkapiError.getType(cause) != ErrorType.NOT_FOUND) {\n        return Future.failedFuture(cause); // something went badly wrong\n      }\n      logger.debug(\"Creating the internal Okapi module {} with interface version {}\",\n          okapiModule, interfaceVersion);\n      return moduleManager.create(md, true, true, true);\n    })\n    .compose(x -> checkSuperTenant(okapiModule));", "url": "https://github.com/folio-org/okapi/pull/1036#discussion_r521459991", "createdAt": "2020-11-11T15:59:44Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/main/java/org/folio/okapi/MainVerticle.java", "diffHunk": "@@ -244,93 +243,45 @@ public void start(Promise<Void> promise) {\n     return tenantManager.init(vertx);\n   }\n \n+  @SuppressWarnings(\"indentation\")\n   private Future<Void> checkInternalModules() {\n     logger.info(\"checkInternalModules\");\n-    Promise<Void> promise = Promise.promise();\n     final ModuleDescriptor md = InternalModule.moduleDescriptor(okapiVersion);\n     final String okapiModule = md.getId();\n     final String interfaceVersion = md.getProvides()[0].getVersion();\n-    moduleManager.get(okapiModule).onSuccess(gres -> {\n+    return moduleManager.get(okapiModule).compose(gres -> {\n       // we already have one, go on\n       logger.debug(\"checkInternalModules: Already have {} \"\n           + \" with interface version {}\", okapiModule, interfaceVersion);\n       // See Okapi-359 about version checks across the cluster\n-      checkSuperTenant(okapiModule, promise);\n-    }).onFailure(cause -> {\n+      return Future.succeededFuture();\n+    }, cause -> {\n       if (OkapiError.getType(cause) != ErrorType.NOT_FOUND) {\n-        promise.fail(cause); // something went badly wrong\n-        return;\n+        return Future.failedFuture(cause); // something went badly wrong\n       }\n       logger.debug(\"Creating the internal Okapi module {} with interface version {}\",\n           okapiModule, interfaceVersion);\n-      moduleManager.create(md, true, true, true).onFailure(cause1 ->\n-          promise.fail(cause1) // something went badly wrong\n-      ).onSuccess(ires -> {\n-        checkSuperTenant(okapiModule, promise);\n-      });\n-    });\n-    return promise.future();\n+      return moduleManager.create(md, true, true, true);\n+    }).compose(x -> checkSuperTenant(okapiModule));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9fec55c44d5180c84605c5faba345721456fad1"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU4ODg1OQ==", "bodyText": "Nice. Thx", "url": "https://github.com/folio-org/okapi/pull/1036#discussion_r521588859", "createdAt": "2020-11-11T19:28:58Z", "author": {"login": "adamdickmeiss"}, "path": "okapi-core/src/main/java/org/folio/okapi/MainVerticle.java", "diffHunk": "@@ -244,93 +243,45 @@ public void start(Promise<Void> promise) {\n     return tenantManager.init(vertx);\n   }\n \n+  @SuppressWarnings(\"indentation\")\n   private Future<Void> checkInternalModules() {\n     logger.info(\"checkInternalModules\");\n-    Promise<Void> promise = Promise.promise();\n     final ModuleDescriptor md = InternalModule.moduleDescriptor(okapiVersion);\n     final String okapiModule = md.getId();\n     final String interfaceVersion = md.getProvides()[0].getVersion();\n-    moduleManager.get(okapiModule).onSuccess(gres -> {\n+    return moduleManager.get(okapiModule).compose(gres -> {\n       // we already have one, go on\n       logger.debug(\"checkInternalModules: Already have {} \"\n           + \" with interface version {}\", okapiModule, interfaceVersion);\n       // See Okapi-359 about version checks across the cluster\n-      checkSuperTenant(okapiModule, promise);\n-    }).onFailure(cause -> {\n+      return Future.succeededFuture();\n+    }, cause -> {\n       if (OkapiError.getType(cause) != ErrorType.NOT_FOUND) {\n-        promise.fail(cause); // something went badly wrong\n-        return;\n+        return Future.failedFuture(cause); // something went badly wrong\n       }\n       logger.debug(\"Creating the internal Okapi module {} with interface version {}\",\n           okapiModule, interfaceVersion);\n-      moduleManager.create(md, true, true, true).onFailure(cause1 ->\n-          promise.fail(cause1) // something went badly wrong\n-      ).onSuccess(ires -> {\n-        checkSuperTenant(okapiModule, promise);\n-      });\n-    });\n-    return promise.future();\n+      return moduleManager.create(md, true, true, true);\n+    }).compose(x -> checkSuperTenant(okapiModule));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ1OTk5MQ=="}, "originalCommit": {"oid": "a9fec55c44d5180c84605c5faba345721456fad1"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODM5MTgzOnYy", "diffSide": "RIGHT", "path": "okapi-core/src/main/java/org/folio/okapi/managers/ModuleManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNzo0ODo1NVrOH0KcZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNzo0ODo1NVrOH0KcZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ1OTExMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Get a module descriptor from ID and return Error if not found.\n          \n          \n            \n               * Get a module descriptor from ID, if not found the Future will fail with\n          \n          \n            \n               * an {@link OkapiError} with {@link ErrorType#NOT_FOUND}.", "url": "https://github.com/folio-org/okapi/pull/1036#discussion_r524459110", "createdAt": "2020-11-16T17:48:55Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/main/java/org/folio/okapi/managers/ModuleManager.java", "diffHunk": "@@ -193,15 +185,12 @@ private void invalidateCacheEntry(String id) {\n   }\n \n   /**\n-   * Get a module descriptor from ID.\n+   * Get a module descriptor from ID and return Error if not found.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "666b739d11ec7033a4224cb22c027a156a95a0bb"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODUzMjc5OnYy", "diffSide": "RIGHT", "path": "okapi-core/src/main/java/org/folio/okapi/managers/TenantManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxODoyNDozMFrOH0Lx7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwNzowMTozM1rOH0mvNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ4MTAwNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Future<ModuleDescriptor> future1 = moduleTo != null\n          \n          \n            \n                    ?  moduleManager.getLatest(moduleTo) : Future.succeededFuture(null);\n          \n          \n            \n                return future1.compose(mdTo -> {\n          \n          \n            \n                  Future<ModuleDescriptor> future2 = moduleFrom != null\n          \n          \n            \n                      ? moduleManager.get(moduleFrom) : Future.succeededFuture(null);\n          \n          \n            \n                  return future2.compose(mdFrom -> {\n          \n          \n            \n                    Future<Void> future3 = options.getDepCheck()\n          \n          \n            \n                        ? enableAndDisableCheck(tenant, mdFrom, mdTo) : Future.succeededFuture();\n          \n          \n            \n                    return future3\n          \n          \n            \n                        .compose(x -> enableAndDisableModule(tenant, options, mdFrom, mdTo, pc));\n          \n          \n            \n                  });\n          \n          \n            \n                });\n          \n          \n            \n                Future<ModuleDescriptor> mdFrom = moduleFrom != null\n          \n          \n            \n                    ? moduleManager.get(moduleFrom) : Future.succeededFuture(null);\n          \n          \n            \n                Future<ModuleDescriptor> mdTo = moduleTo != null\n          \n          \n            \n                    ? moduleManager.getLatest(moduleTo) : Future.succeededFuture(null);\n          \n          \n            \n                return mdFrom\n          \n          \n            \n                    .compose(x -> mdTo)\n          \n          \n            \n                    .compose(x -> options.getDepCheck()\n          \n          \n            \n                          ? enableAndDisableCheck(tenant, mdFrom.result(), mdTo.result())\n          \n          \n            \n                          : Future.succeededFuture())\n          \n          \n            \n                    .compose(x -> enableAndDisableModule(tenant, options, mdFrom.result(), mdTo.result(), pc));", "url": "https://github.com/folio-org/okapi/pull/1036#discussion_r524481006", "createdAt": "2020-11-16T18:24:30Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/main/java/org/folio/okapi/managers/TenantManager.java", "diffHunk": "@@ -268,30 +247,30 @@ public void setProxyService(ProxyService px) {\n     });\n   }\n \n-\n   Future<String> enableAndDisableModule(\n       String tenantId, TenantInstallOptions options, String moduleFrom,\n       TenantModuleDescriptor td, ProxyContext pc) {\n \n-    return tenants.getNotFound(tenantId)\n-        .compose(tenant -> Future.succeededFuture()\n-            .compose(res -> {\n-              if (td == null) {\n-                return Future.succeededFuture(null);\n-              }\n-              return moduleManager.getLatest(td.getId());\n-            }).compose(mdTo ->\n-                moduleManager.get(moduleFrom).compose(mdFrom -> {\n-                  Future<Void> future = Future.succeededFuture();\n-                  if (options.getDepCheck()) {\n-                    future = future\n-                        .compose(x -> enableAndDisableCheck(tenant, mdFrom, mdTo));\n-                  }\n-                  return future\n-                      .compose(x -> enableAndDisableModule(tenant, options, mdFrom, mdTo, pc));\n-                })\n-            )\n-        );\n+    return tenants.getNotFound(tenantId).compose(tenant ->\n+        enableAndDisableModule(tenant, options, moduleFrom, td != null ? td.getId() : null, pc));\n+  }\n+\n+  private Future<String> enableAndDisableModule(\n+      Tenant tenant, TenantInstallOptions options, String moduleFrom,\n+      String moduleTo, ProxyContext pc) {\n+\n+    Future<ModuleDescriptor> future1 = moduleTo != null\n+        ?  moduleManager.getLatest(moduleTo) : Future.succeededFuture(null);\n+    return future1.compose(mdTo -> {\n+      Future<ModuleDescriptor> future2 = moduleFrom != null\n+          ? moduleManager.get(moduleFrom) : Future.succeededFuture(null);\n+      return future2.compose(mdFrom -> {\n+        Future<Void> future3 = options.getDepCheck()\n+            ? enableAndDisableCheck(tenant, mdFrom, mdTo) : Future.succeededFuture();\n+        return future3\n+            .compose(x -> enableAndDisableModule(tenant, options, mdFrom, mdTo, pc));\n+      });\n+    });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "666b739d11ec7033a4224cb22c027a156a95a0bb"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkyMjY3Ng==", "bodyText": "ok", "url": "https://github.com/folio-org/okapi/pull/1036#discussion_r524922676", "createdAt": "2020-11-17T07:01:33Z", "author": {"login": "adamdickmeiss"}, "path": "okapi-core/src/main/java/org/folio/okapi/managers/TenantManager.java", "diffHunk": "@@ -268,30 +247,30 @@ public void setProxyService(ProxyService px) {\n     });\n   }\n \n-\n   Future<String> enableAndDisableModule(\n       String tenantId, TenantInstallOptions options, String moduleFrom,\n       TenantModuleDescriptor td, ProxyContext pc) {\n \n-    return tenants.getNotFound(tenantId)\n-        .compose(tenant -> Future.succeededFuture()\n-            .compose(res -> {\n-              if (td == null) {\n-                return Future.succeededFuture(null);\n-              }\n-              return moduleManager.getLatest(td.getId());\n-            }).compose(mdTo ->\n-                moduleManager.get(moduleFrom).compose(mdFrom -> {\n-                  Future<Void> future = Future.succeededFuture();\n-                  if (options.getDepCheck()) {\n-                    future = future\n-                        .compose(x -> enableAndDisableCheck(tenant, mdFrom, mdTo));\n-                  }\n-                  return future\n-                      .compose(x -> enableAndDisableModule(tenant, options, mdFrom, mdTo, pc));\n-                })\n-            )\n-        );\n+    return tenants.getNotFound(tenantId).compose(tenant ->\n+        enableAndDisableModule(tenant, options, moduleFrom, td != null ? td.getId() : null, pc));\n+  }\n+\n+  private Future<String> enableAndDisableModule(\n+      Tenant tenant, TenantInstallOptions options, String moduleFrom,\n+      String moduleTo, ProxyContext pc) {\n+\n+    Future<ModuleDescriptor> future1 = moduleTo != null\n+        ?  moduleManager.getLatest(moduleTo) : Future.succeededFuture(null);\n+    return future1.compose(mdTo -> {\n+      Future<ModuleDescriptor> future2 = moduleFrom != null\n+          ? moduleManager.get(moduleFrom) : Future.succeededFuture(null);\n+      return future2.compose(mdFrom -> {\n+        Future<Void> future3 = options.getDepCheck()\n+            ? enableAndDisableCheck(tenant, mdFrom, mdTo) : Future.succeededFuture();\n+        return future3\n+            .compose(x -> enableAndDisableModule(tenant, options, mdFrom, mdTo, pc));\n+      });\n+    });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ4MTAwNg=="}, "originalCommit": {"oid": "666b739d11ec7033a4224cb22c027a156a95a0bb"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODc3MTA2OnYy", "diffSide": "RIGHT", "path": "okapi-core/src/test/java/org/folio/okapi/MainDeployTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxOToyNjo0MlrOH0OCkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMTo0NzoyNVrOH0xKww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUxODAzMg==", "bodyText": "The comment should be removed.", "url": "https://github.com/folio-org/okapi/pull/1036#discussion_r524518032", "createdAt": "2020-11-16T19:26:42Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/test/java/org/folio/okapi/MainDeployTest.java", "diffHunk": "@@ -22,30 +22,28 @@\n public class MainDeployTest {\n \n   private final Logger logger = OkapiLogger.get();\n-  private final int port = 9230;\n-  private Async async;\n-  private Vertx vertx;\n-  private RamlDefinition api;\n+  private static final int port = 9230;\n+  // private Async async;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "666b739d11ec7033a4224cb22c027a156a95a0bb"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA5MzU3MQ==", "bodyText": "yes", "url": "https://github.com/folio-org/okapi/pull/1036#discussion_r525093571", "createdAt": "2020-11-17T11:47:25Z", "author": {"login": "adamdickmeiss"}, "path": "okapi-core/src/test/java/org/folio/okapi/MainDeployTest.java", "diffHunk": "@@ -22,30 +22,28 @@\n public class MainDeployTest {\n \n   private final Logger logger = OkapiLogger.get();\n-  private final int port = 9230;\n-  private Async async;\n-  private Vertx vertx;\n-  private RamlDefinition api;\n+  private static final int port = 9230;\n+  // private Async async;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUxODAzMg=="}, "originalCommit": {"oid": "666b739d11ec7033a4224cb22c027a156a95a0bb"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODc4ODg1OnYy", "diffSide": "LEFT", "path": "okapi-core/src/test/java/org/folio/okapi/MainDeployTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxOTozMTozN1rOH0ONdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwNzowNTozNVrOH0m1LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUyMDgyMw==", "bodyText": "@After can be changed to @AfterClass, setProperty can be changed to clearProperty.", "url": "https://github.com/folio-org/okapi/pull/1036#discussion_r524520823", "createdAt": "2020-11-16T19:31:37Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/test/java/org/folio/okapi/MainDeployTest.java", "diffHunk": "@@ -22,30 +22,28 @@\n public class MainDeployTest {\n \n   private final Logger logger = OkapiLogger.get();\n-  private final int port = 9230;\n-  private Async async;\n-  private Vertx vertx;\n-  private RamlDefinition api;\n+  private static final int port = 9230;\n+  // private Async async;\n+  private static RamlDefinition api;\n \n-  @Before\n-  public void setUp(TestContext context) {\n+  @BeforeClass\n+  public static void setupBeforeClass(TestContext context) {\n     System.setProperty(\"vertx.logger-delegate-factory-class-name\",\n         \"io.vertx.core.logging.Log4jLogDelegateFactory\");\n     // can't set Verticle options so we set a property instead\n     System.setProperty(\"port\", Integer.toString(port));\n-    async = context.async();\n     api = RamlLoaders.fromFile(\"src/main/raml\").load(\"okapi.raml\");\n     RestAssured.port = port;\n-    async.complete();\n+  }\n+\n+  @Before\n+  public void setup(TestContext context) {\n+    System.setProperty(\"port\", Integer.toString(port));\n   }\n \n   @After\n   public void tearDown(TestContext context) {\n     System.setProperty(\"port\", \"\"); // disable port by emptying it\n-    if (vertx != null) {\n-      vertx.close(context.asyncAssertSuccess());\n-      vertx = null;\n-    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "666b739d11ec7033a4224cb22c027a156a95a0bb"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkyNDIwNA==", "bodyText": "yep. And @before can be removed entirely.", "url": "https://github.com/folio-org/okapi/pull/1036#discussion_r524924204", "createdAt": "2020-11-17T07:05:35Z", "author": {"login": "adamdickmeiss"}, "path": "okapi-core/src/test/java/org/folio/okapi/MainDeployTest.java", "diffHunk": "@@ -22,30 +22,28 @@\n public class MainDeployTest {\n \n   private final Logger logger = OkapiLogger.get();\n-  private final int port = 9230;\n-  private Async async;\n-  private Vertx vertx;\n-  private RamlDefinition api;\n+  private static final int port = 9230;\n+  // private Async async;\n+  private static RamlDefinition api;\n \n-  @Before\n-  public void setUp(TestContext context) {\n+  @BeforeClass\n+  public static void setupBeforeClass(TestContext context) {\n     System.setProperty(\"vertx.logger-delegate-factory-class-name\",\n         \"io.vertx.core.logging.Log4jLogDelegateFactory\");\n     // can't set Verticle options so we set a property instead\n     System.setProperty(\"port\", Integer.toString(port));\n-    async = context.async();\n     api = RamlLoaders.fromFile(\"src/main/raml\").load(\"okapi.raml\");\n     RestAssured.port = port;\n-    async.complete();\n+  }\n+\n+  @Before\n+  public void setup(TestContext context) {\n+    System.setProperty(\"port\", Integer.toString(port));\n   }\n \n   @After\n   public void tearDown(TestContext context) {\n     System.setProperty(\"port\", \"\"); // disable port by emptying it\n-    if (vertx != null) {\n-      vertx.close(context.asyncAssertSuccess());\n-      vertx = null;\n-    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUyMDgyMw=="}, "originalCommit": {"oid": "666b739d11ec7033a4224cb22c027a156a95a0bb"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODgxNDgxOnYy", "diffSide": "RIGHT", "path": "okapi-core/src/test/java/org/folio/okapi/MainDeployTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxOTozOToxMFrOH0OduQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwNzowNjowMVrOH0m1yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUyNDk4NQ==", "bodyText": "countDown() should be replaced by complete()", "url": "https://github.com/folio-org/okapi/pull/1036#discussion_r524524985", "createdAt": "2020-11-16T19:39:10Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/test/java/org/folio/okapi/MainDeployTest.java", "diffHunk": "@@ -236,87 +189,53 @@ public void testClusterMode(TestContext context) {\n         .then().statusCode(200).log().ifValidationFails().extract().response();\n       Assert.assertTrue(\"raml: \" + c.getLastReport().toString(),\n         c.getLastReport().isEmpty());\n-      async.complete();\n-    });\n+      vertx.close(context.asyncAssertSuccess(x -> async.complete()));\n+    }));\n+    async.await();\n   }\n \n   @Test\n   public void testClusterModeFail1(TestContext context) {\n-    async = context.async();\n-\n     String[] args = {\"cluster\", \"-cluster-host\", \"foobar\", \"-cluster-port\", \"5701\"};\n \n     MainDeploy d = new MainDeploy();\n-    d.init(args, res -> {\n-      vertx = res.succeeded() ? res.result() : null;\n-      Assert.assertTrue(\"main1 \" + res.cause(), res.failed());\n-      async.complete();\n-    });\n-    async.await(1000);\n+    d.init(args, context.asyncAssertFailure());\n   }\n \n   @Test\n   public void testClusterModeFail2(TestContext context) {\n-    async = context.async();\n-\n     String[] args = {\"cluster\", \"-hazelcast-config-file\", \"foobar\"};\n-\n     MainDeploy d = new MainDeploy();\n-    d.init(args, res -> {\n-      vertx = res.succeeded() ? res.result() : null;\n-      Assert.assertTrue(\"main1 \" + res.cause(), res.failed());\n-      async.complete();\n-    });\n-    async.await(1000);\n+    d.init(args, context.asyncAssertFailure());\n   }\n \n   @Test\n   public void testClusterModeFail3(TestContext context) {\n-    async = context.async();\n-\n     String[] args = {\"cluster\", \"-hazelcast-config-cp\", \"foobar\"};\n-\n     MainDeploy d = new MainDeploy();\n-    d.init(args, res -> {\n-      vertx = res.succeeded() ? res.result() : null;\n-      Assert.assertTrue(\"main1 \" + res.cause(), res.failed());\n-      async.complete();\n-    });\n-    async.await(1000);\n+    d.init(args, context.asyncAssertFailure());\n   }\n \n   @Test\n   public void testClusterModeFail4(TestContext context) {\n-    async = context.async();\n-\n     String[] args = {\"cluster\", \"-hazelcast-config-url\", \"foobar\"};\n \n     MainDeploy d = new MainDeploy();\n-    d.init(args, res -> {\n-      vertx = res.succeeded() ? res.result() : null;\n-      Assert.assertTrue(\"main1 \" + res.cause(), res.failed());\n-      async.complete();\n-    });\n-    async.await(1000);\n+    d.init(args, context.asyncAssertFailure());\n   }\n \n   @Test\n   public void testOkapiSamePort(TestContext context) {\n-    async = context.async();\n-\n     String[] args = {\"dev\"};\n \n+    Async async = context.async();\n     MainDeploy d1 = new MainDeploy();\n-    d1.init(args, res1 -> {\n-      vertx = res1.succeeded() ? res1.result() : null;\n-      Assert.assertTrue(\"d1 \" + res1.cause(), res1.succeeded());\n-\n+    d1.init(args, context.asyncAssertSuccess(vertx -> {\n       MainDeploy d2 = new MainDeploy();\n-      d2.init(args, res2 -> {\n-        Assert.assertTrue(\"d2 \" + res2.cause(), res2.failed());\n-        async.complete();\n-      });\n-    });\n+      d2.init(args, context.asyncAssertFailure(\n+          x -> vertx.close(context.asyncAssertSuccess(y -> async.countDown()))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "666b739d11ec7033a4224cb22c027a156a95a0bb"}, "originalPosition": 348}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkyNDM2MA==", "bodyText": "Jesus!. Yes.", "url": "https://github.com/folio-org/okapi/pull/1036#discussion_r524924360", "createdAt": "2020-11-17T07:06:01Z", "author": {"login": "adamdickmeiss"}, "path": "okapi-core/src/test/java/org/folio/okapi/MainDeployTest.java", "diffHunk": "@@ -236,87 +189,53 @@ public void testClusterMode(TestContext context) {\n         .then().statusCode(200).log().ifValidationFails().extract().response();\n       Assert.assertTrue(\"raml: \" + c.getLastReport().toString(),\n         c.getLastReport().isEmpty());\n-      async.complete();\n-    });\n+      vertx.close(context.asyncAssertSuccess(x -> async.complete()));\n+    }));\n+    async.await();\n   }\n \n   @Test\n   public void testClusterModeFail1(TestContext context) {\n-    async = context.async();\n-\n     String[] args = {\"cluster\", \"-cluster-host\", \"foobar\", \"-cluster-port\", \"5701\"};\n \n     MainDeploy d = new MainDeploy();\n-    d.init(args, res -> {\n-      vertx = res.succeeded() ? res.result() : null;\n-      Assert.assertTrue(\"main1 \" + res.cause(), res.failed());\n-      async.complete();\n-    });\n-    async.await(1000);\n+    d.init(args, context.asyncAssertFailure());\n   }\n \n   @Test\n   public void testClusterModeFail2(TestContext context) {\n-    async = context.async();\n-\n     String[] args = {\"cluster\", \"-hazelcast-config-file\", \"foobar\"};\n-\n     MainDeploy d = new MainDeploy();\n-    d.init(args, res -> {\n-      vertx = res.succeeded() ? res.result() : null;\n-      Assert.assertTrue(\"main1 \" + res.cause(), res.failed());\n-      async.complete();\n-    });\n-    async.await(1000);\n+    d.init(args, context.asyncAssertFailure());\n   }\n \n   @Test\n   public void testClusterModeFail3(TestContext context) {\n-    async = context.async();\n-\n     String[] args = {\"cluster\", \"-hazelcast-config-cp\", \"foobar\"};\n-\n     MainDeploy d = new MainDeploy();\n-    d.init(args, res -> {\n-      vertx = res.succeeded() ? res.result() : null;\n-      Assert.assertTrue(\"main1 \" + res.cause(), res.failed());\n-      async.complete();\n-    });\n-    async.await(1000);\n+    d.init(args, context.asyncAssertFailure());\n   }\n \n   @Test\n   public void testClusterModeFail4(TestContext context) {\n-    async = context.async();\n-\n     String[] args = {\"cluster\", \"-hazelcast-config-url\", \"foobar\"};\n \n     MainDeploy d = new MainDeploy();\n-    d.init(args, res -> {\n-      vertx = res.succeeded() ? res.result() : null;\n-      Assert.assertTrue(\"main1 \" + res.cause(), res.failed());\n-      async.complete();\n-    });\n-    async.await(1000);\n+    d.init(args, context.asyncAssertFailure());\n   }\n \n   @Test\n   public void testOkapiSamePort(TestContext context) {\n-    async = context.async();\n-\n     String[] args = {\"dev\"};\n \n+    Async async = context.async();\n     MainDeploy d1 = new MainDeploy();\n-    d1.init(args, res1 -> {\n-      vertx = res1.succeeded() ? res1.result() : null;\n-      Assert.assertTrue(\"d1 \" + res1.cause(), res1.succeeded());\n-\n+    d1.init(args, context.asyncAssertSuccess(vertx -> {\n       MainDeploy d2 = new MainDeploy();\n-      d2.init(args, res2 -> {\n-        Assert.assertTrue(\"d2 \" + res2.cause(), res2.failed());\n-        async.complete();\n-      });\n-    });\n+      d2.init(args, context.asyncAssertFailure(\n+          x -> vertx.close(context.asyncAssertSuccess(y -> async.countDown()))));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUyNDk4NQ=="}, "originalCommit": {"oid": "666b739d11ec7033a4224cb22c027a156a95a0bb"}, "originalPosition": 348}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MjIzMDIxOnYy", "diffSide": "RIGHT", "path": "okapi-core/src/test/java/org/folio/okapi/ModuleTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMToyMzoyNFrOH0wVug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMToyMzoyNFrOH0wVug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA3OTk5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private Future<String> redeploy(TestContext context) {\n          \n          \n            \n                Async async = context.async();\n          \n          \n            \n                Promise<String> promise = Promise.promise();\n          \n          \n            \n                redeploy().onComplete(res -> {\n          \n          \n            \n                  promise.handle(res);\n          \n          \n            \n                  async.complete();\n          \n          \n            \n                });\n          \n          \n            \n                async.await();\n          \n          \n            \n                return promise.future();\n          \n          \n            \n              private Future<String> redeploy(TestContext context) {\n          \n          \n            \n                Async async = context.async();\n          \n          \n            \n                Future<String> future = redeploy().onComplete(res -> async.complete());\n          \n          \n            \n                async.await();\n          \n          \n            \n                return future;", "url": "https://github.com/folio-org/okapi/pull/1036#discussion_r525079994", "createdAt": "2020-11-17T11:23:24Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/test/java/org/folio/okapi/ModuleTest.java", "diffHunk": "@@ -2551,122 +2501,234 @@ public void testSemVer(TestContext context) {\n         .log().ifValidationFails()\n         .extract().response();\n     assertEmptyReport(c);\n-\n-    async.complete();\n   }\n \n-  @Test\n-  public void testManyModules(TestContext context) {\n-    async = context.async();\n-\n-    RestAssuredClient c;\n-    Response r;\n-\n-    int i;\n-    for (i = 0; i < 10; i++) {\n-      String docSampleModule = \"{\" + LS\n-        + \"  \\\"id\\\" : \\\"sample-1.2.\" + Integer.toString(i) + \"\\\",\" + LS\n-        + \"  \\\"name\\\" : \\\"sample module \" + Integer.toString(i) + \"\\\",\" + LS\n-        + \"  \\\"requires\\\" : [ ]\" + LS\n-        + \"}\";\n-      c = api.createRestAssured3();\n-      c.given()\n-        .header(\"Content-Type\", \"application/json\")\n-        .body(docSampleModule)\n-        .post(\"/_/proxy/modules\")\n-        .then()\n-        .statusCode(201)\n-        .log().ifValidationFails();\n-      assertEmptyReport(c);\n-    }\n-    c = api.createRestAssured3();\n-    r = c.given()\n-      .get(\"/_/proxy/modules\")\n-      .then()\n-      .statusCode(200).log().ifValidationFails().extract().response();\n-    assertEmptyReport(c);\n-\n-    async.complete();\n-  }\n-\n-  private void undeployFirst(Handler<AsyncResult<Void>> fut) {\n+  private Future<Void> undeployAll() {\n     Set<String> ids = vertx.deploymentIDs();\n     Iterator<String> it = ids.iterator();\n-    if (it.hasNext()) {\n-      vertx.undeploy(it.next(), fut);\n-    } else {\n-      fut.handle(Future.succeededFuture());\n+    Future<Void> future = Future.succeededFuture();\n+    while (it.hasNext()) {\n+      future = future.compose(x -> vertx.undeploy(it.next()));\n     }\n+    return future;\n   }\n \n-  private void undeployFirstAndDeploy(TestContext context, Handler<AsyncResult<String>> fut) {\n-    async = context.async();\n+  private Future<String> redeploy() {\n     httpClient = null;\n-    undeployFirst(context.asyncAssertSuccess(handler -> {\n+    return undeployAll().compose(x -> {\n       DeploymentOptions opt = new DeploymentOptions().setConfig(conf);\n-      vertx.deployVerticle(MainVerticle.class.getName(), opt, res -> {\n-        fut.handle(res);\n-        async.complete();\n-      });\n-    }));\n+      return vertx.deployVerticle(MainVerticle.class.getName(), opt);\n+    });\n+  }\n+\n+  private Future<String> redeploy(TestContext context) {\n+    Async async = context.async();\n+    Promise<String> promise = Promise.promise();\n+    redeploy().onComplete(res -> {\n+      promise.handle(res);\n+      async.complete();\n+    });\n+    async.await();\n+    return promise.future();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "806752cf0c9b840f98fe5011039cf46abe339558"}, "originalPosition": 437}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MjMxMjEwOnYy", "diffSide": "RIGHT", "path": "okapi-test-header-module/src/test/java/HeaderModuleTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMTo0NjowMlrOH0xHrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMTo1MDo0NlrOH0xSGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA5Mjc4Mw==", "bodyText": "This is from a POST request, MainVerticle.java should write \"POST test-header-module ...\" into the header.", "url": "https://github.com/folio-org/okapi/pull/1036#discussion_r525092783", "createdAt": "2020-11-17T11:46:02Z", "author": {"login": "julianladisch"}, "path": "okapi-test-header-module/src/test/java/HeaderModuleTest.java", "diffHunk": "@@ -49,52 +49,69 @@ public void tearDown(TestContext context) {\n \n   @Test\n   public void test1(TestContext context) {\n-    Async async = context.async();\n-\n-    HashMap<String, String> headers = new HashMap<>();\n-\n-    OkapiClient cli = new OkapiClient(URL, vertx, headers);\n-    cli.get(\"/testb\", res -> {\n-      cli.close();\n-      context.assertTrue(res.succeeded());\n-      context.assertEquals(\"foo\", cli.getRespHeaders().get(\"X-my-header\"));\n-      test2(context, async);\n-    });\n-  }\n-\n-  private void test2(TestContext context, Async async) {\n-\n     HashMap<String, String> headers = new HashMap<>();\n+    {\n+      OkapiClient cli = new OkapiClient(URL, vertx, headers);\n+      Async async = context.async();\n+      cli.get(\"/testb\", res -> {\n+        cli.close();\n+        context.assertTrue(res.succeeded());\n+        context.assertEquals(\"foo\", cli.getRespHeaders().get(\"X-my-header\"));\n+        async.complete();\n+      });\n+      async.await();\n+    }\n+    headers = new HashMap<>();\n     headers.put(\"X-my-header\", \"hello\");\n-    OkapiClient cli = new OkapiClient(URL, vertx, headers);\n-    cli.get(\"/testb\", res -> {\n-      cli.close();\n-      context.assertTrue(res.succeeded());\n-      context.assertEquals(\"hello,foo\", cli.getRespHeaders().get(\"X-my-header\"));\n-      test3(context, async);\n-    });\n-\n-  }\n-\n-  public void test3(TestContext context, Async async) {\n-\n-    HashMap<String, String> headers = new HashMap<>();\n-\n-    OkapiClient cli = new OkapiClient(URL, vertx, headers);\n-    cli.post(\"/_/tenantPermissions\", \"{\", res1 -> {\n-      context.assertTrue(res1.failed());\n-      JsonObject perm = new JsonObject(\"{\\\"k\\\": \\\"v\\\"}\");\n-      cli.post(\"/_/tenantPermissions\", perm.encode(), res2 -> {\n-        context.assertTrue(res2.succeeded());\n-        context.assertEquals(\"GET test-header-module /_/tenantPermissions 200 -\",\n-            cli.getRespHeaders().get(XOkapiHeaders.TRACE));\n-        cli.get(\"/permResult\", res3 -> {\n-          cli.close();\n-          context.assertEquals(perm, new JsonArray(res3.result()).getJsonObject(0));\n+    {\n+      Async async = context.async();\n+      OkapiClient cli = new OkapiClient(URL, vertx, headers);\n+\n+      cli.get(\"/testb\", res -> {\n+        cli.close();\n+        context.assertTrue(res.succeeded());\n+        context.assertEquals(\"hello,foo\", cli.getRespHeaders().get(\"X-my-header\"));\n+        async.complete();\n+      });\n+      async.await();\n+    }\n+    headers = new HashMap<>();\n+    headers.put(XOkapiHeaders.TENANT, \"testlib\");\n+    JsonObject perm = new JsonObject(\"{\\\"k\\\": \\\"v\\\"}\");\n+    {\n+      Async async = context.async();\n+      OkapiClient cli = new OkapiClient(URL, vertx, headers);\n+      cli.post(\"/_/tenantPermissions\", \"{\", res1 -> {\n+        context.assertTrue(res1.failed());\n+        cli.post(\"/_/tenantPermissions\", perm.encode(), res2 -> {\n+          context.assertTrue(res2.succeeded());\n+          context.assertEquals(\"GET test-header-module /_/tenantPermissions 200 -\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7261c4cb2caa750f1aff441438194954b50bca33"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA5NTQ0OQ==", "bodyText": "myPermissionHandle hardcodes GET.. I'll fix that.", "url": "https://github.com/folio-org/okapi/pull/1036#discussion_r525095449", "createdAt": "2020-11-17T11:50:46Z", "author": {"login": "adamdickmeiss"}, "path": "okapi-test-header-module/src/test/java/HeaderModuleTest.java", "diffHunk": "@@ -49,52 +49,69 @@ public void tearDown(TestContext context) {\n \n   @Test\n   public void test1(TestContext context) {\n-    Async async = context.async();\n-\n-    HashMap<String, String> headers = new HashMap<>();\n-\n-    OkapiClient cli = new OkapiClient(URL, vertx, headers);\n-    cli.get(\"/testb\", res -> {\n-      cli.close();\n-      context.assertTrue(res.succeeded());\n-      context.assertEquals(\"foo\", cli.getRespHeaders().get(\"X-my-header\"));\n-      test2(context, async);\n-    });\n-  }\n-\n-  private void test2(TestContext context, Async async) {\n-\n     HashMap<String, String> headers = new HashMap<>();\n+    {\n+      OkapiClient cli = new OkapiClient(URL, vertx, headers);\n+      Async async = context.async();\n+      cli.get(\"/testb\", res -> {\n+        cli.close();\n+        context.assertTrue(res.succeeded());\n+        context.assertEquals(\"foo\", cli.getRespHeaders().get(\"X-my-header\"));\n+        async.complete();\n+      });\n+      async.await();\n+    }\n+    headers = new HashMap<>();\n     headers.put(\"X-my-header\", \"hello\");\n-    OkapiClient cli = new OkapiClient(URL, vertx, headers);\n-    cli.get(\"/testb\", res -> {\n-      cli.close();\n-      context.assertTrue(res.succeeded());\n-      context.assertEquals(\"hello,foo\", cli.getRespHeaders().get(\"X-my-header\"));\n-      test3(context, async);\n-    });\n-\n-  }\n-\n-  public void test3(TestContext context, Async async) {\n-\n-    HashMap<String, String> headers = new HashMap<>();\n-\n-    OkapiClient cli = new OkapiClient(URL, vertx, headers);\n-    cli.post(\"/_/tenantPermissions\", \"{\", res1 -> {\n-      context.assertTrue(res1.failed());\n-      JsonObject perm = new JsonObject(\"{\\\"k\\\": \\\"v\\\"}\");\n-      cli.post(\"/_/tenantPermissions\", perm.encode(), res2 -> {\n-        context.assertTrue(res2.succeeded());\n-        context.assertEquals(\"GET test-header-module /_/tenantPermissions 200 -\",\n-            cli.getRespHeaders().get(XOkapiHeaders.TRACE));\n-        cli.get(\"/permResult\", res3 -> {\n-          cli.close();\n-          context.assertEquals(perm, new JsonArray(res3.result()).getJsonObject(0));\n+    {\n+      Async async = context.async();\n+      OkapiClient cli = new OkapiClient(URL, vertx, headers);\n+\n+      cli.get(\"/testb\", res -> {\n+        cli.close();\n+        context.assertTrue(res.succeeded());\n+        context.assertEquals(\"hello,foo\", cli.getRespHeaders().get(\"X-my-header\"));\n+        async.complete();\n+      });\n+      async.await();\n+    }\n+    headers = new HashMap<>();\n+    headers.put(XOkapiHeaders.TENANT, \"testlib\");\n+    JsonObject perm = new JsonObject(\"{\\\"k\\\": \\\"v\\\"}\");\n+    {\n+      Async async = context.async();\n+      OkapiClient cli = new OkapiClient(URL, vertx, headers);\n+      cli.post(\"/_/tenantPermissions\", \"{\", res1 -> {\n+        context.assertTrue(res1.failed());\n+        cli.post(\"/_/tenantPermissions\", perm.encode(), res2 -> {\n+          context.assertTrue(res2.succeeded());\n+          context.assertEquals(\"GET test-header-module /_/tenantPermissions 200 -\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA5Mjc4Mw=="}, "originalCommit": {"oid": "7261c4cb2caa750f1aff441438194954b50bca33"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MjMxOTkzOnYy", "diffSide": "RIGHT", "path": "okapi-test-header-module/src/test/java/HeaderModuleTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMTo0ODoxNVrOH0xMkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMTo1NDowOFrOH0xZPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA5NDAzNQ==", "bodyText": "Splitting this big method into smaller ones and using rest-assured could improve readability. It's up to you if you want to change it or merge as is.", "url": "https://github.com/folio-org/okapi/pull/1036#discussion_r525094035", "createdAt": "2020-11-17T11:48:15Z", "author": {"login": "julianladisch"}, "path": "okapi-test-header-module/src/test/java/HeaderModuleTest.java", "diffHunk": "@@ -49,52 +49,69 @@ public void tearDown(TestContext context) {\n \n   @Test\n   public void test1(TestContext context) {\n-    Async async = context.async();\n-\n-    HashMap<String, String> headers = new HashMap<>();\n-\n-    OkapiClient cli = new OkapiClient(URL, vertx, headers);\n-    cli.get(\"/testb\", res -> {\n-      cli.close();\n-      context.assertTrue(res.succeeded());\n-      context.assertEquals(\"foo\", cli.getRespHeaders().get(\"X-my-header\"));\n-      test2(context, async);\n-    });\n-  }\n-\n-  private void test2(TestContext context, Async async) {\n-\n     HashMap<String, String> headers = new HashMap<>();\n+    {\n+      OkapiClient cli = new OkapiClient(URL, vertx, headers);\n+      Async async = context.async();\n+      cli.get(\"/testb\", res -> {\n+        cli.close();\n+        context.assertTrue(res.succeeded());\n+        context.assertEquals(\"foo\", cli.getRespHeaders().get(\"X-my-header\"));\n+        async.complete();\n+      });\n+      async.await();\n+    }\n+    headers = new HashMap<>();\n     headers.put(\"X-my-header\", \"hello\");\n-    OkapiClient cli = new OkapiClient(URL, vertx, headers);\n-    cli.get(\"/testb\", res -> {\n-      cli.close();\n-      context.assertTrue(res.succeeded());\n-      context.assertEquals(\"hello,foo\", cli.getRespHeaders().get(\"X-my-header\"));\n-      test3(context, async);\n-    });\n-\n-  }\n-\n-  public void test3(TestContext context, Async async) {\n-\n-    HashMap<String, String> headers = new HashMap<>();\n-\n-    OkapiClient cli = new OkapiClient(URL, vertx, headers);\n-    cli.post(\"/_/tenantPermissions\", \"{\", res1 -> {\n-      context.assertTrue(res1.failed());\n-      JsonObject perm = new JsonObject(\"{\\\"k\\\": \\\"v\\\"}\");\n-      cli.post(\"/_/tenantPermissions\", perm.encode(), res2 -> {\n-        context.assertTrue(res2.succeeded());\n-        context.assertEquals(\"GET test-header-module /_/tenantPermissions 200 -\",\n-            cli.getRespHeaders().get(XOkapiHeaders.TRACE));\n-        cli.get(\"/permResult\", res3 -> {\n-          cli.close();\n-          context.assertEquals(perm, new JsonArray(res3.result()).getJsonObject(0));\n+    {\n+      Async async = context.async();\n+      OkapiClient cli = new OkapiClient(URL, vertx, headers);\n+\n+      cli.get(\"/testb\", res -> {\n+        cli.close();\n+        context.assertTrue(res.succeeded());\n+        context.assertEquals(\"hello,foo\", cli.getRespHeaders().get(\"X-my-header\"));\n+        async.complete();\n+      });\n+      async.await();\n+    }\n+    headers = new HashMap<>();\n+    headers.put(XOkapiHeaders.TENANT, \"testlib\");\n+    JsonObject perm = new JsonObject(\"{\\\"k\\\": \\\"v\\\"}\");\n+    {\n+      Async async = context.async();\n+      OkapiClient cli = new OkapiClient(URL, vertx, headers);\n+      cli.post(\"/_/tenantPermissions\", \"{\", res1 -> {\n+        context.assertTrue(res1.failed());\n+        cli.post(\"/_/tenantPermissions\", perm.encode(), res2 -> {\n+          context.assertTrue(res2.succeeded());\n+          context.assertEquals(\"GET test-header-module /_/tenantPermissions 200 -\",\n+              cli.getRespHeaders().get(XOkapiHeaders.TRACE));\n           async.complete();\n         });\n       });\n-    });\n+      async.await();\n+    }\n+    {\n+      Async async = context.async();\n+      OkapiClient cli = new OkapiClient(URL, vertx, headers);\n+      cli.get(\"/permResult\", res -> {\n+        context.assertEquals(perm, new JsonArray(res.result()).getJsonObject(0));\n+        cli.close();\n+        async.complete();\n+      });\n+      async.await();\n+    }\n+    {\n+      Async async = context.async();\n+      headers.replace(XOkapiHeaders.TENANT, \"other\");\n+      OkapiClient cli = new OkapiClient(URL, vertx, headers);\n+      cli.get(\"/permResult\", res -> {\n+        context.assertNull(res.result());\n+        cli.close();\n+        async.complete();\n+      });\n+      async.await();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7261c4cb2caa750f1aff441438194954b50bca33"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA5NzI3OA==", "bodyText": "ok. I'll do it. Not pretty.", "url": "https://github.com/folio-org/okapi/pull/1036#discussion_r525097278", "createdAt": "2020-11-17T11:54:08Z", "author": {"login": "adamdickmeiss"}, "path": "okapi-test-header-module/src/test/java/HeaderModuleTest.java", "diffHunk": "@@ -49,52 +49,69 @@ public void tearDown(TestContext context) {\n \n   @Test\n   public void test1(TestContext context) {\n-    Async async = context.async();\n-\n-    HashMap<String, String> headers = new HashMap<>();\n-\n-    OkapiClient cli = new OkapiClient(URL, vertx, headers);\n-    cli.get(\"/testb\", res -> {\n-      cli.close();\n-      context.assertTrue(res.succeeded());\n-      context.assertEquals(\"foo\", cli.getRespHeaders().get(\"X-my-header\"));\n-      test2(context, async);\n-    });\n-  }\n-\n-  private void test2(TestContext context, Async async) {\n-\n     HashMap<String, String> headers = new HashMap<>();\n+    {\n+      OkapiClient cli = new OkapiClient(URL, vertx, headers);\n+      Async async = context.async();\n+      cli.get(\"/testb\", res -> {\n+        cli.close();\n+        context.assertTrue(res.succeeded());\n+        context.assertEquals(\"foo\", cli.getRespHeaders().get(\"X-my-header\"));\n+        async.complete();\n+      });\n+      async.await();\n+    }\n+    headers = new HashMap<>();\n     headers.put(\"X-my-header\", \"hello\");\n-    OkapiClient cli = new OkapiClient(URL, vertx, headers);\n-    cli.get(\"/testb\", res -> {\n-      cli.close();\n-      context.assertTrue(res.succeeded());\n-      context.assertEquals(\"hello,foo\", cli.getRespHeaders().get(\"X-my-header\"));\n-      test3(context, async);\n-    });\n-\n-  }\n-\n-  public void test3(TestContext context, Async async) {\n-\n-    HashMap<String, String> headers = new HashMap<>();\n-\n-    OkapiClient cli = new OkapiClient(URL, vertx, headers);\n-    cli.post(\"/_/tenantPermissions\", \"{\", res1 -> {\n-      context.assertTrue(res1.failed());\n-      JsonObject perm = new JsonObject(\"{\\\"k\\\": \\\"v\\\"}\");\n-      cli.post(\"/_/tenantPermissions\", perm.encode(), res2 -> {\n-        context.assertTrue(res2.succeeded());\n-        context.assertEquals(\"GET test-header-module /_/tenantPermissions 200 -\",\n-            cli.getRespHeaders().get(XOkapiHeaders.TRACE));\n-        cli.get(\"/permResult\", res3 -> {\n-          cli.close();\n-          context.assertEquals(perm, new JsonArray(res3.result()).getJsonObject(0));\n+    {\n+      Async async = context.async();\n+      OkapiClient cli = new OkapiClient(URL, vertx, headers);\n+\n+      cli.get(\"/testb\", res -> {\n+        cli.close();\n+        context.assertTrue(res.succeeded());\n+        context.assertEquals(\"hello,foo\", cli.getRespHeaders().get(\"X-my-header\"));\n+        async.complete();\n+      });\n+      async.await();\n+    }\n+    headers = new HashMap<>();\n+    headers.put(XOkapiHeaders.TENANT, \"testlib\");\n+    JsonObject perm = new JsonObject(\"{\\\"k\\\": \\\"v\\\"}\");\n+    {\n+      Async async = context.async();\n+      OkapiClient cli = new OkapiClient(URL, vertx, headers);\n+      cli.post(\"/_/tenantPermissions\", \"{\", res1 -> {\n+        context.assertTrue(res1.failed());\n+        cli.post(\"/_/tenantPermissions\", perm.encode(), res2 -> {\n+          context.assertTrue(res2.succeeded());\n+          context.assertEquals(\"GET test-header-module /_/tenantPermissions 200 -\",\n+              cli.getRespHeaders().get(XOkapiHeaders.TRACE));\n           async.complete();\n         });\n       });\n-    });\n+      async.await();\n+    }\n+    {\n+      Async async = context.async();\n+      OkapiClient cli = new OkapiClient(URL, vertx, headers);\n+      cli.get(\"/permResult\", res -> {\n+        context.assertEquals(perm, new JsonArray(res.result()).getJsonObject(0));\n+        cli.close();\n+        async.complete();\n+      });\n+      async.await();\n+    }\n+    {\n+      Async async = context.async();\n+      headers.replace(XOkapiHeaders.TENANT, \"other\");\n+      OkapiClient cli = new OkapiClient(URL, vertx, headers);\n+      cli.get(\"/permResult\", res -> {\n+        context.assertNull(res.result());\n+        cli.close();\n+        async.complete();\n+      });\n+      async.await();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA5NDAzNQ=="}, "originalCommit": {"oid": "7261c4cb2caa750f1aff441438194954b50bca33"}, "originalPosition": 108}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 198, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}