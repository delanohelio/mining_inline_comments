{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4MjkzMzcz", "number": 884, "title": "Optional dependencies OKAPI-509", "bodyText": "", "createdAt": "2020-02-21T13:53:16Z", "url": "https://github.com/folio-org/okapi/pull/884", "merged": true, "mergeCommit": {"oid": "4f8988bebe135941f380c7da254b602d50da2c85"}, "closed": true, "closedAt": "2020-02-26T10:26:36Z", "author": {"login": "adamdickmeiss"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcGgFB4gH2gAyMzc4MjkzMzczOjRmYTEyNjgxMTQ0ZTVkNTM3OTc2NTM0OWQ2NGJmMThmNzhhOTU5MmI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcIEHofAFqTM2NDc4MTg4OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4fa12681144e5d5379765349d64bf18f78a9592b", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/4fa12681144e5d5379765349d64bf18f78a9592b", "committedDate": "2020-02-21T13:52:05Z", "message": "Optional dependencies OKAPI-509"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2262c06c9d4c7af7ee982db6eb7cbd6753af0156", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/2262c06c9d4c7af7ee982db6eb7cbd6753af0156", "committedDate": "2020-02-21T14:34:41Z", "message": "Unused argument"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac150d772e4fb7fe5489ddae3b22132d62b1455e", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/ac150d772e4fb7fe5489ddae3b22132d62b1455e", "committedDate": "2020-02-24T10:37:00Z", "message": "Pull in dependencies for optional interface if already existing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b7ebd500e511e30634468f207fe6d0ed0ffed03", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/2b7ebd500e511e30634468f207fe6d0ed0ffed03", "committedDate": "2020-02-24T10:41:53Z", "message": "Change some log info to log debug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66737df6b10006b74fdfdd990af6f631f9e3e37b", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/66737df6b10006b74fdfdd990af6f631f9e3e37b", "committedDate": "2020-02-24T10:49:12Z", "message": "One more test case"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMzIzMjg5", "url": "https://github.com/folio-org/okapi/pull/884#pullrequestreview-363323289", "createdAt": "2020-02-24T11:28:34Z", "commit": {"oid": "66737df6b10006b74fdfdd990af6f631f9e3e37b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMToyODozNFrOFtddXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMToyODozNFrOFtddXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIxMjg5NA==", "bodyText": "There are two relevant cases that should also been tested:\nIf mdA100, mdA110, mdD100 and mdD110 are available, and mdA100 and mdD100 are enabled.\nFirst case: Enable mdA110 and check that both are upgraded.\nSecond case: Enable mdD110 and check that both are upgraded.", "url": "https://github.com/folio-org/okapi/pull/884#discussion_r383212894", "createdAt": "2020-02-24T11:28:34Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/test/java/org/folio/okapi/util/DepResolutionTest.java", "diffHunk": "@@ -220,23 +235,180 @@ public void test4(TestContext context) {\n     });\n   }\n \n+  // install optional with no provided ingerface enabled\n+  @Test\n+  public void testInstallOptional1(TestContext context) {\n+    Async async = context.async();\n+\n+    Map<String, ModuleDescriptor> modsAvailable = new HashMap<>();\n+    modsAvailable.put(mdA100.getId(), mdA100);\n+    modsAvailable.put(mdA110.getId(), mdA110);\n+    modsAvailable.put(mdD100.getId(), mdD100);\n+    modsAvailable.put(mdD110.getId(), mdD110);\n+    modsAvailable.put(mdE100.getId(), mdE100);\n+\n+    Map<String, ModuleDescriptor> modsEnabled = new HashMap<>();\n+\n+    List<TenantModuleDescriptor> tml = new LinkedList<>();\n+    TenantModuleDescriptor tm = new TenantModuleDescriptor();\n+    tm.setAction(TenantModuleDescriptor.Action.enable);\n+    tm.setId(mdD100.getId());\n+    tml.add(tm);\n+\n+    DepResolution.installSimulate(modsAvailable, modsEnabled, tml, res -> {\n+      context.assertTrue(res.succeeded());\n+      logger.debug(\"tml result = \" + Json.encodePrettily(tml));\n+      context.assertEquals(1, tml.size());\n+      context.assertEquals(\"moduleD-1.0.0\", tml.get(0).getId());\n+      context.assertEquals(null, tml.get(0).getFrom());\n+      context.assertEquals(\"enable\", tml.get(0).getAction().name());\n+      async.complete();\n+    });\n+  }\n+\n+  // install optional with a matched interface provided\n+  @Test\n+  public void testInstallOptional2(TestContext context) {\n+    Async async = context.async();\n+\n+    Map<String, ModuleDescriptor> modsAvailable = new HashMap<>();\n+    modsAvailable.put(mdA100.getId(), mdA100);\n+    modsAvailable.put(mdA110.getId(), mdA110);\n+    modsAvailable.put(mdD100.getId(), mdD100);\n+    modsAvailable.put(mdE100.getId(), mdE100);\n+\n+    Map<String, ModuleDescriptor> modsEnabled = new HashMap<>();\n+    modsEnabled.put(mdA100.getId(), mdA100);\n+\n+    List<TenantModuleDescriptor> tml = new LinkedList<>();\n+    TenantModuleDescriptor tm = new TenantModuleDescriptor();\n+    tm.setAction(TenantModuleDescriptor.Action.enable);\n+    tm.setId(mdD100.getId());\n+    tml.add(tm);\n+\n+    DepResolution.installSimulate(modsAvailable, modsEnabled, tml, res -> {\n+      context.assertTrue(res.succeeded());\n+      logger.debug(\"tml result = \" + Json.encodePrettily(tml));\n+      context.assertEquals(1, tml.size());\n+      context.assertEquals(\"moduleD-1.0.0\", tml.get(0).getId());\n+      context.assertEquals(null, tml.get(0).getFrom());\n+      context.assertEquals(\"enable\", tml.get(0).getAction().name());\n+      async.complete();\n+    });\n+  }\n+\n+  // install optional with existing interface that is too low (error)\n+  @Test\n+  public void testInstallOptionalFail(TestContext context) {\n+    Async async = context.async();\n+\n+    Map<String, ModuleDescriptor> modsAvailable = new HashMap<>();\n+    modsAvailable.put(mdA100.getId(), mdA100);\n+    modsAvailable.put(mdD100.getId(), mdD100);\n+    modsAvailable.put(mdD110.getId(), mdD110);\n+    modsAvailable.put(mdE100.getId(), mdE100);\n+\n+    Map<String, ModuleDescriptor> modsEnabled = new HashMap<>();\n+    modsEnabled.put(mdA100.getId(), mdA100);\n+\n+    List<TenantModuleDescriptor> tml = new LinkedList<>();\n+    TenantModuleDescriptor tm = new TenantModuleDescriptor();\n+    tm.setAction(TenantModuleDescriptor.Action.enable);\n+    tm.setId(mdD110.getId());\n+    tml.add(tm);\n+\n+    DepResolution.installSimulate(modsAvailable, modsEnabled, tml, res -> {\n+      context.assertTrue(res.failed());\n+      context.assertEquals(\"enable moduleD-1.1.0 failed: interface int required by module moduleD-1.1.0 not found\", res.cause().getMessage());\n+      async.complete();\n+    });\n+  }\n+\n+  // install optional with existing interface that needs upgrading\n+  @Test\n+  public void testInstallOptionalExistingModule(TestContext context) {\n+    Async async = context.async();\n+\n+    Map<String, ModuleDescriptor> modsAvailable = new HashMap<>();\n+    modsAvailable.put(mdA100.getId(), mdA100);\n+    modsAvailable.put(mdA110.getId(), mdA110);\n+    modsAvailable.put(mdD100.getId(), mdD100);\n+    modsAvailable.put(mdD110.getId(), mdD110);\n+    modsAvailable.put(mdE100.getId(), mdE100);\n+\n+    Map<String, ModuleDescriptor> modsEnabled = new HashMap<>();\n+    modsEnabled.put(mdA100.getId(), mdA100);\n+\n+    List<TenantModuleDescriptor> tml = new LinkedList<>();\n+    TenantModuleDescriptor tm = new TenantModuleDescriptor();\n+    tm.setAction(TenantModuleDescriptor.Action.enable);\n+    tm.setId(mdD110.getId());\n+    tml.add(tm);\n+\n+    DepResolution.installSimulate(modsAvailable, modsEnabled, tml, res -> {\n+      context.assertTrue(res.succeeded());\n+      logger.debug(\"tml result = \" + Json.encodePrettily(tml));\n+      context.assertEquals(2, tml.size());\n+      context.assertEquals(\"moduleA-1.1.0\", tml.get(0).getId());\n+      context.assertEquals(\"moduleA-1.0.0\", tml.get(0).getFrom());\n+      context.assertEquals(\"enable\", tml.get(0).getAction().name());\n+      context.assertEquals(\"moduleD-1.1.0\", tml.get(1).getId());\n+      context.assertEquals(null, tml.get(1).getFrom());\n+      context.assertEquals(\"enable\", tml.get(1).getAction().name());\n+      async.complete();\n+    });\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66737df6b10006b74fdfdd990af6f631f9e3e37b"}, "originalPosition": 313}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMzI0NTM1", "url": "https://github.com/folio-org/okapi/pull/884#pullrequestreview-363324535", "createdAt": "2020-02-24T11:31:07Z", "commit": {"oid": "66737df6b10006b74fdfdd990af6f631f9e3e37b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMTozMTowN1rOFtdhGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMTozMTowN1rOFtdhGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIxMzg1MQ==", "bodyText": "In all these tests there is no need to use Async.\nReplace \"res -> { context.assertTrue(res.succeeded());\" by \"context.asyncAssertSuccess(res ->\"\nand \"res -> { context.assertTrue(res.failed());\" by \"context.asyncAssertFailure(exception ->\"", "url": "https://github.com/folio-org/okapi/pull/884#discussion_r383213851", "createdAt": "2020-02-24T11:31:07Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/test/java/org/folio/okapi/util/DepResolutionTest.java", "diffHunk": "@@ -220,23 +235,180 @@ public void test4(TestContext context) {\n     });\n   }\n \n+  // install optional with no provided ingerface enabled\n+  @Test\n+  public void testInstallOptional1(TestContext context) {\n+    Async async = context.async();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66737df6b10006b74fdfdd990af6f631f9e3e37b"}, "originalPosition": 194}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f961e1f75c81e2cc1bd41213b77e61a0932a796e", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/f961e1f75c81e2cc1bd41213b77e61a0932a796e", "committedDate": "2020-02-24T11:46:45Z", "message": "checkInterfaceDep funcs into one again"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3754a05ede3cbc3e9f219fd313730a8b9fcfee9", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/e3754a05ede3cbc3e9f219fd313730a8b9fcfee9", "committedDate": "2020-02-24T11:53:54Z", "message": "Bummer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0bee14755543a6c2a25e61c555992eec01668835", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/0bee14755543a6c2a25e61c555992eec01668835", "committedDate": "2020-02-24T12:06:50Z", "message": "Two more tests cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f9196e01f079f92ea80d4f1995573cf244f2d2c", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/7f9196e01f079f92ea80d4f1995573cf244f2d2c", "committedDate": "2020-02-24T12:08:52Z", "message": "Comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMzgyNzIx", "url": "https://github.com/folio-org/okapi/pull/884#pullrequestreview-363382721", "createdAt": "2020-02-24T13:21:39Z", "commit": {"oid": "7f9196e01f079f92ea80d4f1995573cf244f2d2c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMzoyMTozOVrOFtgXOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMzoyMTozOVrOFtgXOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI2MDQ3NQ==", "bodyText": "Yes, no moduleD upgrade is needed because moduleA's new interface is compatible (int-1.0 -> int-1.1).\nCan you add another test where moduleA-1.0.0 is upgraded to moduleA-2.0.0 with int-2.0 and this triggers the moduleD upgrade from moduleD-1.0.0 to moduleD-2.0.0 because moduleD-2.0.0 has optional dependency on int-2.0?", "url": "https://github.com/folio-org/okapi/pull/884#discussion_r383260475", "createdAt": "2020-02-24T13:21:39Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/test/java/org/folio/okapi/util/DepResolutionTest.java", "diffHunk": "@@ -220,23 +235,247 @@ public void test4(TestContext context) {\n     });\n   }\n \n+  // install optional with no provided ingerface enabled\n+  @Test\n+  public void testInstallOptional1(TestContext context) {\n+    Async async = context.async();\n+\n+    Map<String, ModuleDescriptor> modsAvailable = new HashMap<>();\n+    modsAvailable.put(mdA100.getId(), mdA100);\n+    modsAvailable.put(mdA110.getId(), mdA110);\n+    modsAvailable.put(mdD100.getId(), mdD100);\n+    modsAvailable.put(mdD110.getId(), mdD110);\n+    modsAvailable.put(mdE100.getId(), mdE100);\n+\n+    Map<String, ModuleDescriptor> modsEnabled = new HashMap<>();\n+\n+    List<TenantModuleDescriptor> tml = new LinkedList<>();\n+    TenantModuleDescriptor tm = new TenantModuleDescriptor();\n+    tm.setAction(TenantModuleDescriptor.Action.enable);\n+    tm.setId(mdD100.getId());\n+    tml.add(tm);\n+\n+    DepResolution.installSimulate(modsAvailable, modsEnabled, tml, res -> {\n+      context.assertTrue(res.succeeded());\n+      logger.debug(\"tml result = \" + Json.encodePrettily(tml));\n+      context.assertEquals(1, tml.size());\n+      context.assertEquals(\"moduleD-1.0.0\", tml.get(0).getId());\n+      context.assertEquals(null, tml.get(0).getFrom());\n+      context.assertEquals(\"enable\", tml.get(0).getAction().name());\n+      async.complete();\n+    });\n+  }\n+\n+  // install optional with a matched interface provided\n+  @Test\n+  public void testInstallOptional2(TestContext context) {\n+    Async async = context.async();\n+\n+    Map<String, ModuleDescriptor> modsAvailable = new HashMap<>();\n+    modsAvailable.put(mdA100.getId(), mdA100);\n+    modsAvailable.put(mdA110.getId(), mdA110);\n+    modsAvailable.put(mdD100.getId(), mdD100);\n+    modsAvailable.put(mdE100.getId(), mdE100);\n+\n+    Map<String, ModuleDescriptor> modsEnabled = new HashMap<>();\n+    modsEnabled.put(mdA100.getId(), mdA100);\n+\n+    List<TenantModuleDescriptor> tml = new LinkedList<>();\n+    TenantModuleDescriptor tm = new TenantModuleDescriptor();\n+    tm.setAction(TenantModuleDescriptor.Action.enable);\n+    tm.setId(mdD100.getId());\n+    tml.add(tm);\n+\n+    DepResolution.installSimulate(modsAvailable, modsEnabled, tml, res -> {\n+      context.assertTrue(res.succeeded());\n+      logger.debug(\"tml result = \" + Json.encodePrettily(tml));\n+      context.assertEquals(1, tml.size());\n+      context.assertEquals(\"moduleD-1.0.0\", tml.get(0).getId());\n+      context.assertEquals(null, tml.get(0).getFrom());\n+      context.assertEquals(\"enable\", tml.get(0).getAction().name());\n+      async.complete();\n+    });\n+  }\n+\n+  // install optional with existing interface that is too low (error)\n+  @Test\n+  public void testInstallOptionalFail(TestContext context) {\n+    Async async = context.async();\n+\n+    Map<String, ModuleDescriptor> modsAvailable = new HashMap<>();\n+    modsAvailable.put(mdA100.getId(), mdA100);\n+    modsAvailable.put(mdD100.getId(), mdD100);\n+    modsAvailable.put(mdD110.getId(), mdD110);\n+    modsAvailable.put(mdE100.getId(), mdE100);\n+\n+    Map<String, ModuleDescriptor> modsEnabled = new HashMap<>();\n+    modsEnabled.put(mdA100.getId(), mdA100);\n+\n+    List<TenantModuleDescriptor> tml = new LinkedList<>();\n+    TenantModuleDescriptor tm = new TenantModuleDescriptor();\n+    tm.setAction(TenantModuleDescriptor.Action.enable);\n+    tm.setId(mdD110.getId());\n+    tml.add(tm);\n+\n+    DepResolution.installSimulate(modsAvailable, modsEnabled, tml, res -> {\n+      context.assertTrue(res.failed());\n+      context.assertEquals(\"enable moduleD-1.1.0 failed: interface int required by module moduleD-1.1.0 not found\", res.cause().getMessage());\n+      async.complete();\n+    });\n+  }\n+\n+  // install optional with existing interface that needs upgrading\n+  @Test\n+  public void testInstallOptionalExistingModule(TestContext context) {\n+    Async async = context.async();\n+\n+    Map<String, ModuleDescriptor> modsAvailable = new HashMap<>();\n+    modsAvailable.put(mdA100.getId(), mdA100);\n+    modsAvailable.put(mdA110.getId(), mdA110);\n+    modsAvailable.put(mdD100.getId(), mdD100);\n+    modsAvailable.put(mdD110.getId(), mdD110);\n+    modsAvailable.put(mdE100.getId(), mdE100);\n+\n+    Map<String, ModuleDescriptor> modsEnabled = new HashMap<>();\n+    modsEnabled.put(mdA100.getId(), mdA100);\n+\n+    List<TenantModuleDescriptor> tml = new LinkedList<>();\n+    TenantModuleDescriptor tm = new TenantModuleDescriptor();\n+    tm.setAction(TenantModuleDescriptor.Action.enable);\n+    tm.setId(mdD110.getId());\n+    tml.add(tm);\n+\n+    DepResolution.installSimulate(modsAvailable, modsEnabled, tml, res -> {\n+      context.assertTrue(res.succeeded());\n+      logger.debug(\"tml result = \" + Json.encodePrettily(tml));\n+      context.assertEquals(2, tml.size());\n+      context.assertEquals(\"moduleA-1.1.0\", tml.get(0).getId());\n+      context.assertEquals(\"moduleA-1.0.0\", tml.get(0).getFrom());\n+      context.assertEquals(\"enable\", tml.get(0).getAction().name());\n+      context.assertEquals(\"moduleD-1.1.0\", tml.get(1).getId());\n+      context.assertEquals(null, tml.get(1).getFrom());\n+      context.assertEquals(\"enable\", tml.get(1).getAction().name());\n+      async.complete();\n+    });\n+  }\n+\n+  // upgrade base dependency which is still compatible with optional interface\n+  @Test\n+  public void testInstallOptionalExistingModule2(TestContext context) {\n+    Async async = context.async();\n+\n+    Map<String, ModuleDescriptor> modsAvailable = new HashMap<>();\n+    modsAvailable.put(mdA100.getId(), mdA100);\n+    modsAvailable.put(mdA110.getId(), mdA110);\n+    modsAvailable.put(mdD100.getId(), mdD100);\n+    modsAvailable.put(mdD110.getId(), mdD110);\n+\n+    Map<String, ModuleDescriptor> modsEnabled = new HashMap<>();\n+    modsEnabled.put(mdA100.getId(), mdA100);\n+    modsEnabled.put(mdD100.getId(), mdD100);\n+\n+    List<TenantModuleDescriptor> tml = new LinkedList<>();\n+    TenantModuleDescriptor tm = new TenantModuleDescriptor();\n+    tm.setAction(TenantModuleDescriptor.Action.enable);\n+    tm.setId(mdA110.getId());\n+    tml.add(tm);\n+\n+    DepResolution.installSimulate(modsAvailable, modsEnabled, tml, res -> {\n+      context.assertTrue(res.succeeded());\n+      logger.debug(\"tml result = \" + Json.encodePrettily(tml));\n+      context.assertEquals(1, tml.size());\n+      context.assertEquals(\"moduleA-1.1.0\", tml.get(0).getId());\n+      context.assertEquals(\"moduleA-1.0.0\", tml.get(0).getFrom());\n+      context.assertEquals(\"enable\", tml.get(0).getAction().name());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9196e01f079f92ea80d4f1995573cf244f2d2c"}, "originalPosition": 342}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "757aec1531861244e26af07a53574f885da4818d", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/757aec1531861244e26af07a53574f885da4818d", "committedDate": "2020-02-25T11:41:45Z", "message": "Upgrade for \"leaf\" dependency"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MTI5MzE0", "url": "https://github.com/folio-org/okapi/pull/884#pullrequestreview-364129314", "createdAt": "2020-02-25T13:14:50Z", "commit": {"oid": "757aec1531861244e26af07a53574f885da4818d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMzoxNDo1MFrOFuFkFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMzoxNDo1MFrOFuFkFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg2OTk3Mg==", "bodyText": "ret is not used. Can you remove this variable?", "url": "https://github.com/folio-org/okapi/pull/884#discussion_r383869972", "createdAt": "2020-02-25T13:14:50Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/main/java/org/folio/okapi/util/DepResolution.java", "diffHunk": "@@ -458,14 +487,57 @@ private static void addOrReplace(List<TenantModuleDescriptor> tml, ModuleDescrip\n     tml.add(t);\n   }\n \n+  private static void upgradeLeafs(ModuleDescriptor md, Map<String, ModuleDescriptor> modsAvailable,\n+    Map<String, ModuleDescriptor> modsEnabled, List<TenantModuleDescriptor> tml) {\n+\n+    Iterator<ModuleDescriptor> it = modsEnabled.values().iterator();\n+    while (it.hasNext()) {\n+      ModuleDescriptor me = it.next();\n+      if (me.equals(md)) {\n+        continue;\n+      }\n+      ModuleDescriptor mTo = null;\n+      for (InterfaceDescriptor prov : md.getProvidesList()) {\n+        for (InterfaceDescriptor req : me.getRequiresOptionalList()) {\n+          if (prov.getId().equals(req.getId()) && !prov.isCompatible(req)) {\n+            for (ModuleDescriptor ma : modsAvailable.values()) {\n+              if (me.getProduct().equals(ma.getProduct())) {\n+                for (InterfaceDescriptor re1 : ma.getRequiresOptionalList()) {\n+                  if (prov.isCompatible(re1)) {\n+                    if (mTo == null || ma.compareTo(mTo) > 0) {\n+                      mTo = ma;\n+                    }\n+                  }\n+                }\n+              }\n+            }\n+          }\n+        }\n+      }\n+      if (mTo != null) {\n+        List<String> ret = addModuleDependencies(mTo, modsAvailable, modsEnabled, tml);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "757aec1531861244e26af07a53574f885da4818d"}, "originalPosition": 233}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MTQzMDA5", "url": "https://github.com/folio-org/okapi/pull/884#pullrequestreview-364143009", "createdAt": "2020-02-25T13:35:33Z", "commit": {"oid": "757aec1531861244e26af07a53574f885da4818d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMzozNTozM1rOFuGOwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMzozNTozM1rOFuGOwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg4MDg5Ng==", "bodyText": "This will reduce the cyclomatic complexity from 52 to 37 -- less nesting improves readability:\n  for (InterfaceDescriptor prov : md.getProvidesList()) {\n    for (InterfaceDescriptor req : me.getRequiresOptionalList()) {\n      if (! prov.getId().equals(req.getId()) || prov.isCompatible(req)) {\n        continue;\n      }\n      for (ModuleDescriptor ma : modsAvailable.values()) {\n        if (! me.getProduct().equals(ma.getProduct())) {\n          continue;\n        }\n        for (InterfaceDescriptor re1 : ma.getRequiresOptionalList()) {\n          if (prov.isCompatible(re1) && (mTo == null || ma.compareTo(mTo) > 0)) {\n            mTo = ma;\n          }\n        }\n      }\n    }\n  }", "url": "https://github.com/folio-org/okapi/pull/884#discussion_r383880896", "createdAt": "2020-02-25T13:35:33Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/main/java/org/folio/okapi/util/DepResolution.java", "diffHunk": "@@ -458,14 +487,57 @@ private static void addOrReplace(List<TenantModuleDescriptor> tml, ModuleDescrip\n     tml.add(t);\n   }\n \n+  private static void upgradeLeafs(ModuleDescriptor md, Map<String, ModuleDescriptor> modsAvailable,\n+    Map<String, ModuleDescriptor> modsEnabled, List<TenantModuleDescriptor> tml) {\n+\n+    Iterator<ModuleDescriptor> it = modsEnabled.values().iterator();\n+    while (it.hasNext()) {\n+      ModuleDescriptor me = it.next();\n+      if (me.equals(md)) {\n+        continue;\n+      }\n+      ModuleDescriptor mTo = null;\n+      for (InterfaceDescriptor prov : md.getProvidesList()) {\n+        for (InterfaceDescriptor req : me.getRequiresOptionalList()) {\n+          if (prov.getId().equals(req.getId()) && !prov.isCompatible(req)) {\n+            for (ModuleDescriptor ma : modsAvailable.values()) {\n+              if (me.getProduct().equals(ma.getProduct())) {\n+                for (InterfaceDescriptor re1 : ma.getRequiresOptionalList()) {\n+                  if (prov.isCompatible(re1)) {\n+                    if (mTo == null || ma.compareTo(mTo) > 0) {\n+                      mTo = ma;\n+                    }\n+                  }\n+                }\n+              }\n+            }\n+          }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "757aec1531861244e26af07a53574f885da4818d"}, "originalPosition": 230}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8283500616b44cdf000965c9719e64fbc16c1a33", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/8283500616b44cdf000965c9719e64fbc16c1a33", "committedDate": "2020-02-25T13:57:59Z", "message": "SQ fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86a6b902babeaf6d267c7840092e39e0d654502d", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/86a6b902babeaf6d267c7840092e39e0d654502d", "committedDate": "2020-02-25T14:28:06Z", "message": "Split updateLeafs into two"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32d462c44980ec702a94c1c6d4dd90da7452b2f3", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/32d462c44980ec702a94c1c6d4dd90da7452b2f3", "committedDate": "2020-02-25T14:40:58Z", "message": "Merge branch 'master' into okapi-509-optional-dependencies"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NzgxODg4", "url": "https://github.com/folio-org/okapi/pull/884#pullrequestreview-364781888", "createdAt": "2020-02-26T10:25:26Z", "commit": {"oid": "32d462c44980ec702a94c1c6d4dd90da7452b2f3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2929, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}