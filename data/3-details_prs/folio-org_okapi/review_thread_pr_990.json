{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5MDgwMTYz", "number": 990, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNDoyODo0NVrOErpFAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNDo1NTozNVrOErp4sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MTk3MjUxOnYy", "diffSide": "LEFT", "path": "okapi-core/src/main/java/org/folio/okapi/service/impl/ProcessModuleHandle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNDoyODo0NVrOHehaFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNDoyODo0NVrOHehaFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc2NjY3Ng==", "bodyText": "Can you also remove the import of TimeUnit?", "url": "https://github.com/folio-org/okapi/pull/990#discussion_r501766676", "createdAt": "2020-10-08T14:28:45Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/main/java/org/folio/okapi/service/impl/ProcessModuleHandle.java", "diffHunk": "@@ -125,48 +129,39 @@ private NuProcess launch(Vertx vertx, String id, EnvEntry[] env,\n     return process;\n   }\n \n-  @SuppressWarnings(\"indentation\")\n   private Future<Void> start2() {\n-    return vertx.executeBlocking(future -> {\n-      if (process == null) {\n-        String c = \"\";\n-        try {\n-          String[] l;\n-          if (exec != null) {\n-            if (!exec.contains(\"%p\")) {\n-              future.fail(\"Can not deploy: No %p in the exec line\");\n-              return;\n-            }\n-            c = exec.replace(\"%p\", Integer.toString(port));\n-            l = c.split(\" \");\n-          } else if (cmdlineStart != null) {\n-            if (!cmdlineStart.contains(\"%p\")) {\n-              future.fail(\"Can not deploy: No %p in the cmdlineStart\");\n-              return;\n-            }\n-            c = cmdlineStart.replace(\"%p\", Integer.toString(port));\n-            l = new String[]{\"sh\", \"-c\", c};\n-          } else {\n-            future.fail(\"Can not deploy: No exec, no CmdlineStart in LaunchDescriptor\");\n-            return;\n-          }\n-          process = launch(vertx, id, env, l);\n-          process.waitFor(1, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b46c873d6504431e80178c4eb738670b402a1465"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjA3NjExOnYy", "diffSide": "RIGHT", "path": "okapi-core/src/main/java/org/folio/okapi/service/impl/ProcessModuleHandle.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNDo0OTo1MVrOHeibJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNjo0NjoxOFrOHenZaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc4MzMzNA==", "bodyText": "A few lines below we have this code:\n  socket.close();\n  return Future.failedFuture(messages.getMessage(\"11502\", Integer.toString(port)));\n\nThis doesn't wait until the socket has been closed. Better:\n  return socket.close().otherwiseEmpty()\n      .compose(x -> Future.failedFuture(messages.getMessage(\"11502\", Integer.toString(port))));", "url": "https://github.com/folio-org/okapi/pull/990#discussion_r501783334", "createdAt": "2020-10-08T14:49:51Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/main/java/org/folio/okapi/service/impl/ProcessModuleHandle.java", "diffHunk": "@@ -72,6 +73,9 @@ public ProcessModuleHandle(Vertx vertx, LaunchDescriptor desc, String id,\n \n   @Override\n   public Future<Void> start() {\n+    if (process != null) {\n+      return Future.failedFuture(\"already started \" + commandLine);\n+    }\n     if (port == 0) {\n       return start2();\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b46c873d6504431e80178c4eb738670b402a1465"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg2NDgxMQ==", "bodyText": "ok.", "url": "https://github.com/folio-org/okapi/pull/990#discussion_r501864811", "createdAt": "2020-10-08T16:46:18Z", "author": {"login": "adamdickmeiss"}, "path": "okapi-core/src/main/java/org/folio/okapi/service/impl/ProcessModuleHandle.java", "diffHunk": "@@ -72,6 +73,9 @@ public ProcessModuleHandle(Vertx vertx, LaunchDescriptor desc, String id,\n \n   @Override\n   public Future<Void> start() {\n+    if (process != null) {\n+      return Future.failedFuture(\"already started \" + commandLine);\n+    }\n     if (port == 0) {\n       return start2();\n     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc4MzMzNA=="}, "originalCommit": {"oid": "b46c873d6504431e80178c4eb738670b402a1465"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjEwNDgyOnYy", "diffSide": "RIGHT", "path": "okapi-core/src/main/java/org/folio/okapi/service/impl/ProcessModuleHandle.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNDo1NTozNlrOHeitHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNjo0NjozM1rOHenZ6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc4NzkzMg==", "bodyText": "Easier to read:\nif (process.isRunning() || exitCode == 0) {\n  promise.complete();\n  return;\n}\nif (exitCode == Integer.MIN_VALUE) {\n  promise.fail(messages.getMessage(\"11504\", commandLineF));\n} else {\n  promise.fail(messages.getMessage(\"11500\", exitCode));\n}", "url": "https://github.com/folio-org/okapi/pull/990#discussion_r501787932", "createdAt": "2020-10-08T14:55:36Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/main/java/org/folio/okapi/service/impl/ProcessModuleHandle.java", "diffHunk": "@@ -125,48 +129,39 @@ private NuProcess launch(Vertx vertx, String id, EnvEntry[] env,\n     return process;\n   }\n \n-  @SuppressWarnings(\"indentation\")\n   private Future<Void> start2() {\n-    return vertx.executeBlocking(future -> {\n-      if (process == null) {\n-        String c = \"\";\n-        try {\n-          String[] l;\n-          if (exec != null) {\n-            if (!exec.contains(\"%p\")) {\n-              future.fail(\"Can not deploy: No %p in the exec line\");\n-              return;\n-            }\n-            c = exec.replace(\"%p\", Integer.toString(port));\n-            l = c.split(\" \");\n-          } else if (cmdlineStart != null) {\n-            if (!cmdlineStart.contains(\"%p\")) {\n-              future.fail(\"Can not deploy: No %p in the cmdlineStart\");\n-              return;\n-            }\n-            c = cmdlineStart.replace(\"%p\", Integer.toString(port));\n-            l = new String[]{\"sh\", \"-c\", c};\n-          } else {\n-            future.fail(\"Can not deploy: No exec, no CmdlineStart in LaunchDescriptor\");\n-            return;\n-          }\n-          process = launch(vertx, id, env, l);\n-          process.waitFor(1, TimeUnit.SECONDS);\n-        } catch (InterruptedException ex) {\n-          logger.warn(\"when starting {}\", c, ex);\n-          Thread.currentThread().interrupt();\n-        }\n-        if (!process.isRunning() && exitCode != 0) {\n-          if (exitCode == Integer.MIN_VALUE) {\n-            future.handle(Future.failedFuture(messages.getMessage(\"11504\", c)));\n-          } else {\n-            future.handle(Future.failedFuture(messages.getMessage(\"11500\", exitCode)));\n-          }\n-          return;\n+    commandLine = \"\";\n+    String[] l;\n+    if (exec != null) {\n+      if (!exec.contains(\"%p\")) {\n+        return Future.failedFuture(\"Can not deploy: No %p in the exec line\");\n+      }\n+      commandLine = exec.replace(\"%p\", Integer.toString(port));\n+      l = commandLine.split(\" \");\n+    } else if (cmdlineStart != null) {\n+      if (!cmdlineStart.contains(\"%p\")) {\n+        return Future.failedFuture(\"Can not deploy: No %p in the cmdlineStart\");\n+      }\n+      commandLine = cmdlineStart.replace(\"%p\", Integer.toString(port));\n+      l = new String[]{\"sh\", \"-c\", commandLine};\n+    } else {\n+      return Future.failedFuture(\"Can not deploy: No exec, no CmdlineStart in LaunchDescriptor\");\n+    }\n+    final String commandLineF = commandLine;\n+    process = launch(vertx, id, env, l);\n+    Promise<Void> promise = Promise.promise();\n+    vertx.setTimer(1000, timerRes -> {\n+      if (!process.isRunning() && exitCode != 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b46c873d6504431e80178c4eb738670b402a1465"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg2NDkzOQ==", "bodyText": "ok. In two places.", "url": "https://github.com/folio-org/okapi/pull/990#discussion_r501864939", "createdAt": "2020-10-08T16:46:33Z", "author": {"login": "adamdickmeiss"}, "path": "okapi-core/src/main/java/org/folio/okapi/service/impl/ProcessModuleHandle.java", "diffHunk": "@@ -125,48 +129,39 @@ private NuProcess launch(Vertx vertx, String id, EnvEntry[] env,\n     return process;\n   }\n \n-  @SuppressWarnings(\"indentation\")\n   private Future<Void> start2() {\n-    return vertx.executeBlocking(future -> {\n-      if (process == null) {\n-        String c = \"\";\n-        try {\n-          String[] l;\n-          if (exec != null) {\n-            if (!exec.contains(\"%p\")) {\n-              future.fail(\"Can not deploy: No %p in the exec line\");\n-              return;\n-            }\n-            c = exec.replace(\"%p\", Integer.toString(port));\n-            l = c.split(\" \");\n-          } else if (cmdlineStart != null) {\n-            if (!cmdlineStart.contains(\"%p\")) {\n-              future.fail(\"Can not deploy: No %p in the cmdlineStart\");\n-              return;\n-            }\n-            c = cmdlineStart.replace(\"%p\", Integer.toString(port));\n-            l = new String[]{\"sh\", \"-c\", c};\n-          } else {\n-            future.fail(\"Can not deploy: No exec, no CmdlineStart in LaunchDescriptor\");\n-            return;\n-          }\n-          process = launch(vertx, id, env, l);\n-          process.waitFor(1, TimeUnit.SECONDS);\n-        } catch (InterruptedException ex) {\n-          logger.warn(\"when starting {}\", c, ex);\n-          Thread.currentThread().interrupt();\n-        }\n-        if (!process.isRunning() && exitCode != 0) {\n-          if (exitCode == Integer.MIN_VALUE) {\n-            future.handle(Future.failedFuture(messages.getMessage(\"11504\", c)));\n-          } else {\n-            future.handle(Future.failedFuture(messages.getMessage(\"11500\", exitCode)));\n-          }\n-          return;\n+    commandLine = \"\";\n+    String[] l;\n+    if (exec != null) {\n+      if (!exec.contains(\"%p\")) {\n+        return Future.failedFuture(\"Can not deploy: No %p in the exec line\");\n+      }\n+      commandLine = exec.replace(\"%p\", Integer.toString(port));\n+      l = commandLine.split(\" \");\n+    } else if (cmdlineStart != null) {\n+      if (!cmdlineStart.contains(\"%p\")) {\n+        return Future.failedFuture(\"Can not deploy: No %p in the cmdlineStart\");\n+      }\n+      commandLine = cmdlineStart.replace(\"%p\", Integer.toString(port));\n+      l = new String[]{\"sh\", \"-c\", commandLine};\n+    } else {\n+      return Future.failedFuture(\"Can not deploy: No exec, no CmdlineStart in LaunchDescriptor\");\n+    }\n+    final String commandLineF = commandLine;\n+    process = launch(vertx, id, env, l);\n+    Promise<Void> promise = Promise.promise();\n+    vertx.setTimer(1000, timerRes -> {\n+      if (!process.isRunning() && exitCode != 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc4NzkzMg=="}, "originalCommit": {"oid": "b46c873d6504431e80178c4eb738670b402a1465"}, "originalPosition": 81}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 159, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}