{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2MTUxNTY3", "number": 982, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNTowMTo1M1rOEphDdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjo0MToyM1rOEqZf8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTY4NjI5OnYy", "diffSide": "RIGHT", "path": "okapi-core/src/main/java/org/folio/okapi/managers/TenantManager.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNTowMTo1M1rOHbOrkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjoyNjo0NFrOHckt5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMxNDEzMA==", "bodyText": "this includes supertenant, right?", "url": "https://github.com/folio-org/okapi/pull/982#discussion_r498314130", "createdAt": "2020-10-01T15:01:53Z", "author": {"login": "craigmcnally"}, "path": "okapi-core/src/main/java/org/folio/okapi/managers/TenantManager.java", "diffHunk": "@@ -1035,4 +1036,8 @@ private ModuleInstance getTenantInstanceForInterface(\n     });\n   }\n \n+  @Override\n+  public Future<Void> isAlive() {\n+    return tenantStore.listTenants().mapEmpty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d1e1b2615d84f51864447128b6b4544a78850bb"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc3MjU1OA==", "bodyText": "yes.", "url": "https://github.com/folio-org/okapi/pull/982#discussion_r498772558", "createdAt": "2020-10-02T11:47:30Z", "author": {"login": "adamdickmeiss"}, "path": "okapi-core/src/main/java/org/folio/okapi/managers/TenantManager.java", "diffHunk": "@@ -1035,4 +1036,8 @@ private ModuleInstance getTenantInstanceForInterface(\n     });\n   }\n \n+  @Override\n+  public Future<Void> isAlive() {\n+    return tenantStore.listTenants().mapEmpty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMxNDEzMA=="}, "originalCommit": {"oid": "5d1e1b2615d84f51864447128b6b4544a78850bb"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcyMzc1MA==", "bodyText": "isAlive() succeeds if the list is empty, contains the supertenant only, or contains any number of tenants.\nIf only fails if the database query fails.", "url": "https://github.com/folio-org/okapi/pull/982#discussion_r499723750", "createdAt": "2020-10-05T16:26:44Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/main/java/org/folio/okapi/managers/TenantManager.java", "diffHunk": "@@ -1035,4 +1036,8 @@ private ModuleInstance getTenantInstanceForInterface(\n     });\n   }\n \n+  @Override\n+  public Future<Void> isAlive() {\n+    return tenantStore.listTenants().mapEmpty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMxNDEzMA=="}, "originalCommit": {"oid": "5d1e1b2615d84f51864447128b6b4544a78850bb"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODY4MjE1OnYy", "diffSide": "RIGHT", "path": "okapi-core/src/test/java/org/folio/okapi/managers/HealthManagerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNTozNzo0OVrOHciwtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjowMDozNlrOHd6hpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY5MTcwMQ==", "bodyText": "The method should be renamed to testPortReadinessPort0 and port = 0 been used. Then we can delete testPort0.", "url": "https://github.com/folio-org/okapi/pull/982#discussion_r499691701", "createdAt": "2020-10-05T15:37:49Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/test/java/org/folio/okapi/managers/HealthManagerTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package org.folio.okapi.managers;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.Vertx;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.junit5.VertxExtension;\n+import io.vertx.junit5.VertxTestContext;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import org.folio.okapi.service.Liveness;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+@ExtendWith(VertxExtension.class)\n+public class HealthManagerTest {\n+\n+  @Test\n+  void testPort0(Vertx vertx, VertxTestContext context) {\n+    HealthManager m = new HealthManager(0);\n+    m.init(vertx, Collections.emptyList()).onComplete(context.succeedingThenComplete());\n+  }\n+\n+  @Test\n+  void testPortPortOK(Vertx vertx, VertxTestContext context) {\n+    final int port = 9130;\n+    HealthManager m = new HealthManager(port);\n+    m.init(vertx, Collections.emptyList()).onComplete(context.succeedingThenComplete());\n+  }\n+\n+  @Test\n+  void testPortReadinessSuccess(Vertx vertx, VertxTestContext context) {\n+    final int port = 9130;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d1e1b2615d84f51864447128b6b4544a78850bb"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEyOTYzNw==", "bodyText": "if port = 0, then this test will start failing.. There won't be a response to /readiness, then.", "url": "https://github.com/folio-org/okapi/pull/982#discussion_r501129637", "createdAt": "2020-10-07T16:00:36Z", "author": {"login": "adamdickmeiss"}, "path": "okapi-core/src/test/java/org/folio/okapi/managers/HealthManagerTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package org.folio.okapi.managers;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.Vertx;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.junit5.VertxExtension;\n+import io.vertx.junit5.VertxTestContext;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import org.folio.okapi.service.Liveness;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+@ExtendWith(VertxExtension.class)\n+public class HealthManagerTest {\n+\n+  @Test\n+  void testPort0(Vertx vertx, VertxTestContext context) {\n+    HealthManager m = new HealthManager(0);\n+    m.init(vertx, Collections.emptyList()).onComplete(context.succeedingThenComplete());\n+  }\n+\n+  @Test\n+  void testPortPortOK(Vertx vertx, VertxTestContext context) {\n+    final int port = 9130;\n+    HealthManager m = new HealthManager(port);\n+    m.init(vertx, Collections.emptyList()).onComplete(context.succeedingThenComplete());\n+  }\n+\n+  @Test\n+  void testPortReadinessSuccess(Vertx vertx, VertxTestContext context) {\n+    final int port = 9130;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY5MTcwMQ=="}, "originalCommit": {"oid": "5d1e1b2615d84f51864447128b6b4544a78850bb"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODY4NTcwOnYy", "diffSide": "RIGHT", "path": "okapi-core/src/test/java/org/folio/okapi/managers/HealthManagerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNTozODozM1rOHciy6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjowMTo0NFrOHd6lSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY5MjI2Ng==", "bodyText": "This should be renamed to testPortReadinessPort9130. Then we can remove testPortOK.", "url": "https://github.com/folio-org/okapi/pull/982#discussion_r499692266", "createdAt": "2020-10-05T15:38:33Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/test/java/org/folio/okapi/managers/HealthManagerTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package org.folio.okapi.managers;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.Vertx;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.junit5.VertxExtension;\n+import io.vertx.junit5.VertxTestContext;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import org.folio.okapi.service.Liveness;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+@ExtendWith(VertxExtension.class)\n+public class HealthManagerTest {\n+\n+  @Test\n+  void testPort0(Vertx vertx, VertxTestContext context) {\n+    HealthManager m = new HealthManager(0);\n+    m.init(vertx, Collections.emptyList()).onComplete(context.succeedingThenComplete());\n+  }\n+\n+  @Test\n+  void testPortPortOK(Vertx vertx, VertxTestContext context) {\n+    final int port = 9130;\n+    HealthManager m = new HealthManager(port);\n+    m.init(vertx, Collections.emptyList()).onComplete(context.succeedingThenComplete());\n+  }\n+\n+  @Test\n+  void testPortReadinessSuccess(Vertx vertx, VertxTestContext context) {\n+    final int port = 9130;\n+    HealthManager m = new HealthManager(port);\n+    m.init(vertx, Collections.emptyList()).onComplete(context.succeeding(res -> {\n+      WebClient client = WebClient.create(vertx);\n+      client.get(port, \"localhost\", \"/readiness\")\n+          .send(context.succeeding(response -> {\n+            assertThat(response.statusCode()).isEqualTo(204);\n+            context.completeNow();\n+          }));\n+    }));\n+  }\n+\n+  @Test\n+  void testPortReadiness(Vertx vertx, VertxTestContext context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d1e1b2615d84f51864447128b6b4544a78850bb"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEzMDU3MA==", "bodyText": "ok. That will do.", "url": "https://github.com/folio-org/okapi/pull/982#discussion_r501130570", "createdAt": "2020-10-07T16:01:44Z", "author": {"login": "adamdickmeiss"}, "path": "okapi-core/src/test/java/org/folio/okapi/managers/HealthManagerTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package org.folio.okapi.managers;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.Vertx;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.junit5.VertxExtension;\n+import io.vertx.junit5.VertxTestContext;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import org.folio.okapi.service.Liveness;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+@ExtendWith(VertxExtension.class)\n+public class HealthManagerTest {\n+\n+  @Test\n+  void testPort0(Vertx vertx, VertxTestContext context) {\n+    HealthManager m = new HealthManager(0);\n+    m.init(vertx, Collections.emptyList()).onComplete(context.succeedingThenComplete());\n+  }\n+\n+  @Test\n+  void testPortPortOK(Vertx vertx, VertxTestContext context) {\n+    final int port = 9130;\n+    HealthManager m = new HealthManager(port);\n+    m.init(vertx, Collections.emptyList()).onComplete(context.succeedingThenComplete());\n+  }\n+\n+  @Test\n+  void testPortReadinessSuccess(Vertx vertx, VertxTestContext context) {\n+    final int port = 9130;\n+    HealthManager m = new HealthManager(port);\n+    m.init(vertx, Collections.emptyList()).onComplete(context.succeeding(res -> {\n+      WebClient client = WebClient.create(vertx);\n+      client.get(port, \"localhost\", \"/readiness\")\n+          .send(context.succeeding(response -> {\n+            assertThat(response.statusCode()).isEqualTo(204);\n+            context.completeNow();\n+          }));\n+    }));\n+  }\n+\n+  @Test\n+  void testPortReadiness(Vertx vertx, VertxTestContext context) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY5MjI2Ng=="}, "originalCommit": {"oid": "5d1e1b2615d84f51864447128b6b4544a78850bb"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODcwMjI0OnYy", "diffSide": "RIGHT", "path": "okapi-core/src/test/java/org/folio/okapi/managers/HealthManagerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNTo0MjoxMVrOHci81A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjowMjozMlrOHd6niw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY5NDgwNA==", "bodyText": "The list should be [IsAlive(), IsNotAlive()] to test that it not only checks the first one.", "url": "https://github.com/folio-org/okapi/pull/982#discussion_r499694804", "createdAt": "2020-10-05T15:42:11Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/test/java/org/folio/okapi/managers/HealthManagerTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package org.folio.okapi.managers;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.Vertx;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.junit5.VertxExtension;\n+import io.vertx.junit5.VertxTestContext;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import org.folio.okapi.service.Liveness;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+@ExtendWith(VertxExtension.class)\n+public class HealthManagerTest {\n+\n+  @Test\n+  void testPort0(Vertx vertx, VertxTestContext context) {\n+    HealthManager m = new HealthManager(0);\n+    m.init(vertx, Collections.emptyList()).onComplete(context.succeedingThenComplete());\n+  }\n+\n+  @Test\n+  void testPortPortOK(Vertx vertx, VertxTestContext context) {\n+    final int port = 9130;\n+    HealthManager m = new HealthManager(port);\n+    m.init(vertx, Collections.emptyList()).onComplete(context.succeedingThenComplete());\n+  }\n+\n+  @Test\n+  void testPortReadinessSuccess(Vertx vertx, VertxTestContext context) {\n+    final int port = 9130;\n+    HealthManager m = new HealthManager(port);\n+    m.init(vertx, Collections.emptyList()).onComplete(context.succeeding(res -> {\n+      WebClient client = WebClient.create(vertx);\n+      client.get(port, \"localhost\", \"/readiness\")\n+          .send(context.succeeding(response -> {\n+            assertThat(response.statusCode()).isEqualTo(204);\n+            context.completeNow();\n+          }));\n+    }));\n+  }\n+\n+  @Test\n+  void testPortReadiness(Vertx vertx, VertxTestContext context) {\n+    final int port = 9130;\n+    HealthManager m = new HealthManager(port);\n+    m.init(vertx, Collections.emptyList()).onComplete(context.succeeding(res -> {\n+      WebClient client = WebClient.create(vertx);\n+      client.get(port, \"localhost\", \"/readiness\")\n+          .send(context.succeeding(response -> {\n+            assertThat(response.statusCode()).isEqualTo(204);\n+            context.completeNow();\n+          }));\n+    }));\n+  }\n+\n+  @Test\n+  void testPortLivenessSuccess(Vertx vertx, VertxTestContext context) {\n+    final int port = 9130;\n+    HealthManager m = new HealthManager(port);\n+    m.init(vertx, Arrays.asList(new IsAlive())).onComplete(context.succeeding(res -> {\n+      WebClient client = WebClient.create(vertx);\n+      client.get(port, \"localhost\", \"/liveness\")\n+          .send(context.succeeding(response -> {\n+            assertThat(response.statusCode()).isEqualTo(204);\n+            context.completeNow();\n+          }));\n+    }));\n+  }\n+\n+  @Test\n+  void testPortLivenessFailure(Vertx vertx, VertxTestContext context) {\n+    final int port = 9130;\n+    HealthManager m = new HealthManager(port);\n+    m.init(vertx, Arrays.asList(new IsNotAlive())).onComplete(context.succeeding(res -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d1e1b2615d84f51864447128b6b4544a78850bb"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEzMTE0Nw==", "bodyText": "Sure", "url": "https://github.com/folio-org/okapi/pull/982#discussion_r501131147", "createdAt": "2020-10-07T16:02:32Z", "author": {"login": "adamdickmeiss"}, "path": "okapi-core/src/test/java/org/folio/okapi/managers/HealthManagerTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package org.folio.okapi.managers;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.Vertx;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.junit5.VertxExtension;\n+import io.vertx.junit5.VertxTestContext;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import org.folio.okapi.service.Liveness;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+@ExtendWith(VertxExtension.class)\n+public class HealthManagerTest {\n+\n+  @Test\n+  void testPort0(Vertx vertx, VertxTestContext context) {\n+    HealthManager m = new HealthManager(0);\n+    m.init(vertx, Collections.emptyList()).onComplete(context.succeedingThenComplete());\n+  }\n+\n+  @Test\n+  void testPortPortOK(Vertx vertx, VertxTestContext context) {\n+    final int port = 9130;\n+    HealthManager m = new HealthManager(port);\n+    m.init(vertx, Collections.emptyList()).onComplete(context.succeedingThenComplete());\n+  }\n+\n+  @Test\n+  void testPortReadinessSuccess(Vertx vertx, VertxTestContext context) {\n+    final int port = 9130;\n+    HealthManager m = new HealthManager(port);\n+    m.init(vertx, Collections.emptyList()).onComplete(context.succeeding(res -> {\n+      WebClient client = WebClient.create(vertx);\n+      client.get(port, \"localhost\", \"/readiness\")\n+          .send(context.succeeding(response -> {\n+            assertThat(response.statusCode()).isEqualTo(204);\n+            context.completeNow();\n+          }));\n+    }));\n+  }\n+\n+  @Test\n+  void testPortReadiness(Vertx vertx, VertxTestContext context) {\n+    final int port = 9130;\n+    HealthManager m = new HealthManager(port);\n+    m.init(vertx, Collections.emptyList()).onComplete(context.succeeding(res -> {\n+      WebClient client = WebClient.create(vertx);\n+      client.get(port, \"localhost\", \"/readiness\")\n+          .send(context.succeeding(response -> {\n+            assertThat(response.statusCode()).isEqualTo(204);\n+            context.completeNow();\n+          }));\n+    }));\n+  }\n+\n+  @Test\n+  void testPortLivenessSuccess(Vertx vertx, VertxTestContext context) {\n+    final int port = 9130;\n+    HealthManager m = new HealthManager(port);\n+    m.init(vertx, Arrays.asList(new IsAlive())).onComplete(context.succeeding(res -> {\n+      WebClient client = WebClient.create(vertx);\n+      client.get(port, \"localhost\", \"/liveness\")\n+          .send(context.succeeding(response -> {\n+            assertThat(response.statusCode()).isEqualTo(204);\n+            context.completeNow();\n+          }));\n+    }));\n+  }\n+\n+  @Test\n+  void testPortLivenessFailure(Vertx vertx, VertxTestContext context) {\n+    final int port = 9130;\n+    HealthManager m = new HealthManager(port);\n+    m.init(vertx, Arrays.asList(new IsNotAlive())).onComplete(context.succeeding(res -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY5NDgwNA=="}, "originalCommit": {"oid": "5d1e1b2615d84f51864447128b6b4544a78850bb"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODgzMjIwOnYy", "diffSide": "RIGHT", "path": "okapi-core/src/main/java/org/folio/okapi/managers/HealthManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjoxNDowMFrOHckOyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjowMzozMVrOHd6qYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcxNTc4Ng==", "bodyText": "This variable is not used.", "url": "https://github.com/folio-org/okapi/pull/982#discussion_r499715786", "createdAt": "2020-10-05T16:14:00Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/main/java/org/folio/okapi/managers/HealthManager.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package org.folio.okapi.managers;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.http.HttpServerOptions;\n+import io.vertx.ext.web.Router;\n+import io.vertx.ext.web.RoutingContext;\n+import java.util.List;\n+import org.folio.okapi.service.Liveness;\n+\n+public class HealthManager {\n+  private Vertx vertx;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d1e1b2615d84f51864447128b6b4544a78850bb"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEzMTg3NQ==", "bodyText": "yep", "url": "https://github.com/folio-org/okapi/pull/982#discussion_r501131875", "createdAt": "2020-10-07T16:03:31Z", "author": {"login": "adamdickmeiss"}, "path": "okapi-core/src/main/java/org/folio/okapi/managers/HealthManager.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package org.folio.okapi.managers;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.http.HttpServerOptions;\n+import io.vertx.ext.web.Router;\n+import io.vertx.ext.web.RoutingContext;\n+import java.util.List;\n+import org.folio.okapi.service.Liveness;\n+\n+public class HealthManager {\n+  private Vertx vertx;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcxNTc4Ng=="}, "originalCommit": {"oid": "5d1e1b2615d84f51864447128b6b4544a78850bb"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODg2MzU1OnYy", "diffSide": "RIGHT", "path": "okapi-core/src/main/java/org/folio/okapi/managers/HealthManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjoyMTo0NFrOHckiEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjoyMTo0NFrOHckiEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcyMDcyMg==", "bodyText": "The idiomatic way using Future methods:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                future.onComplete(res -> {\n          \n          \n            \n                  if (res.failed()) {\n          \n          \n            \n                    ctx.response().putHeader(\"Content-Type\", \"text/plain\");\n          \n          \n            \n                    ctx.response().setStatusCode(500);\n          \n          \n            \n                    ctx.response().end(res.cause().getMessage());\n          \n          \n            \n                    return;\n          \n          \n            \n                  }\n          \n          \n            \n                  ctx.response().setStatusCode(204);\n          \n          \n            \n                  ctx.response().end();\n          \n          \n            \n                });\n          \n          \n            \n                future.onFailure(e -> {\n          \n          \n            \n                  ctx.response().putHeader(\"Content-Type\", \"text/plain\");\n          \n          \n            \n                  ctx.response().setStatusCode(500);\n          \n          \n            \n                  ctx.response().end(e.getMessage());\n          \n          \n            \n                }).onSuccess(handler -> {\n          \n          \n            \n                  ctx.response().setStatusCode(204);\n          \n          \n            \n                  ctx.response().end();\n          \n          \n            \n                });", "url": "https://github.com/folio-org/okapi/pull/982#discussion_r499720722", "createdAt": "2020-10-05T16:21:44Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/main/java/org/folio/okapi/managers/HealthManager.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package org.folio.okapi.managers;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.http.HttpServerOptions;\n+import io.vertx.ext.web.Router;\n+import io.vertx.ext.web.RoutingContext;\n+import java.util.List;\n+import org.folio.okapi.service.Liveness;\n+\n+public class HealthManager {\n+  private Vertx vertx;\n+  private final int listenPort;\n+  private List<Liveness> livenessChecks;\n+\n+  public HealthManager(int listenPort) {\n+    this.listenPort = listenPort;\n+  }\n+\n+  /**\n+   * Initialize health manager.\n+   * This should be called when the service should start\n+   * serving readiness and liveness.\n+   * @param vertx Vert.x handle\n+   * @return future result\n+   *\n+   */\n+  public Future<Void> init(Vertx vertx, List<Liveness> livenessChecks) {\n+    this.vertx = vertx;\n+    this.livenessChecks = livenessChecks;\n+    if (listenPort == 0) {\n+      return Future.succeededFuture();\n+    }\n+    Router router = Router.router(vertx);\n+\n+    router.route(HttpMethod.GET, \"/readiness\").handler(this::readinessHandler);\n+    router.route(HttpMethod.GET, \"/liveness\").handler(this::livenessHandler);\n+    HttpServerOptions serverOptions = new HttpServerOptions()\n+        .setHandle100ContinueAutomatically(true);\n+    return vertx.createHttpServer(serverOptions)\n+        .requestHandler(router)\n+        .listen(listenPort)\n+        .mapEmpty();\n+  }\n+\n+  private void readinessHandler(RoutingContext ctx) {\n+    ctx.response().setStatusCode(204);\n+    ctx.response().end();\n+  }\n+\n+  private void livenessHandler(RoutingContext ctx) {\n+    Future<Void> future = Future.succeededFuture();\n+    for (Liveness l : livenessChecks) {\n+      future = future.compose(x -> l.isAlive());\n+    }\n+    future.onComplete(res -> {\n+      if (res.failed()) {\n+        ctx.response().putHeader(\"Content-Type\", \"text/plain\");\n+        ctx.response().setStatusCode(500);\n+        ctx.response().end(res.cause().getMessage());\n+        return;\n+      }\n+      ctx.response().setStatusCode(204);\n+      ctx.response().end();\n+    });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d1e1b2615d84f51864447128b6b4544a78850bb"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODg3NDQ1OnYy", "diffSide": "RIGHT", "path": "okapi-core/src/main/java/org/folio/okapi/managers/HealthManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjoyNDozNlrOHckosQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjowOToyN1rOHd67NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcyMjQxNw==", "bodyText": "Should we also log the exception (message + stacktrace) on failure? One reason might be that the database query fails. This should also be in the log, not only in the HTTP body.", "url": "https://github.com/folio-org/okapi/pull/982#discussion_r499722417", "createdAt": "2020-10-05T16:24:36Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/main/java/org/folio/okapi/managers/HealthManager.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package org.folio.okapi.managers;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.http.HttpServerOptions;\n+import io.vertx.ext.web.Router;\n+import io.vertx.ext.web.RoutingContext;\n+import java.util.List;\n+import org.folio.okapi.service.Liveness;\n+\n+public class HealthManager {\n+  private Vertx vertx;\n+  private final int listenPort;\n+  private List<Liveness> livenessChecks;\n+\n+  public HealthManager(int listenPort) {\n+    this.listenPort = listenPort;\n+  }\n+\n+  /**\n+   * Initialize health manager.\n+   * This should be called when the service should start\n+   * serving readiness and liveness.\n+   * @param vertx Vert.x handle\n+   * @return future result\n+   *\n+   */\n+  public Future<Void> init(Vertx vertx, List<Liveness> livenessChecks) {\n+    this.vertx = vertx;\n+    this.livenessChecks = livenessChecks;\n+    if (listenPort == 0) {\n+      return Future.succeededFuture();\n+    }\n+    Router router = Router.router(vertx);\n+\n+    router.route(HttpMethod.GET, \"/readiness\").handler(this::readinessHandler);\n+    router.route(HttpMethod.GET, \"/liveness\").handler(this::livenessHandler);\n+    HttpServerOptions serverOptions = new HttpServerOptions()\n+        .setHandle100ContinueAutomatically(true);\n+    return vertx.createHttpServer(serverOptions)\n+        .requestHandler(router)\n+        .listen(listenPort)\n+        .mapEmpty();\n+  }\n+\n+  private void readinessHandler(RoutingContext ctx) {\n+    ctx.response().setStatusCode(204);\n+    ctx.response().end();\n+  }\n+\n+  private void livenessHandler(RoutingContext ctx) {\n+    Future<Void> future = Future.succeededFuture();\n+    for (Liveness l : livenessChecks) {\n+      future = future.compose(x -> l.isAlive());\n+    }\n+    future.onComplete(res -> {\n+      if (res.failed()) {\n+        ctx.response().putHeader(\"Content-Type\", \"text/plain\");\n+        ctx.response().setStatusCode(500);\n+        ctx.response().end(res.cause().getMessage());\n+        return;\n+      }\n+      ctx.response().setStatusCode(204);\n+      ctx.response().end();\n+    });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d1e1b2615d84f51864447128b6b4544a78850bb"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEzNjE4MQ==", "bodyText": "ok", "url": "https://github.com/folio-org/okapi/pull/982#discussion_r501136181", "createdAt": "2020-10-07T16:09:27Z", "author": {"login": "adamdickmeiss"}, "path": "okapi-core/src/main/java/org/folio/okapi/managers/HealthManager.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package org.folio.okapi.managers;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.http.HttpServerOptions;\n+import io.vertx.ext.web.Router;\n+import io.vertx.ext.web.RoutingContext;\n+import java.util.List;\n+import org.folio.okapi.service.Liveness;\n+\n+public class HealthManager {\n+  private Vertx vertx;\n+  private final int listenPort;\n+  private List<Liveness> livenessChecks;\n+\n+  public HealthManager(int listenPort) {\n+    this.listenPort = listenPort;\n+  }\n+\n+  /**\n+   * Initialize health manager.\n+   * This should be called when the service should start\n+   * serving readiness and liveness.\n+   * @param vertx Vert.x handle\n+   * @return future result\n+   *\n+   */\n+  public Future<Void> init(Vertx vertx, List<Liveness> livenessChecks) {\n+    this.vertx = vertx;\n+    this.livenessChecks = livenessChecks;\n+    if (listenPort == 0) {\n+      return Future.succeededFuture();\n+    }\n+    Router router = Router.router(vertx);\n+\n+    router.route(HttpMethod.GET, \"/readiness\").handler(this::readinessHandler);\n+    router.route(HttpMethod.GET, \"/liveness\").handler(this::livenessHandler);\n+    HttpServerOptions serverOptions = new HttpServerOptions()\n+        .setHandle100ContinueAutomatically(true);\n+    return vertx.createHttpServer(serverOptions)\n+        .requestHandler(router)\n+        .listen(listenPort)\n+        .mapEmpty();\n+  }\n+\n+  private void readinessHandler(RoutingContext ctx) {\n+    ctx.response().setStatusCode(204);\n+    ctx.response().end();\n+  }\n+\n+  private void livenessHandler(RoutingContext ctx) {\n+    Future<Void> future = Future.succeededFuture();\n+    for (Liveness l : livenessChecks) {\n+      future = future.compose(x -> l.isAlive());\n+    }\n+    future.onComplete(res -> {\n+      if (res.failed()) {\n+        ctx.response().putHeader(\"Content-Type\", \"text/plain\");\n+        ctx.response().setStatusCode(500);\n+        ctx.response().end(res.cause().getMessage());\n+        return;\n+      }\n+      ctx.response().setStatusCode(204);\n+      ctx.response().end();\n+    });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcyMjQxNw=="}, "originalCommit": {"oid": "5d1e1b2615d84f51864447128b6b4544a78850bb"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODg5Nzg0OnYy", "diffSide": "RIGHT", "path": "okapi-core/src/main/java/org/folio/okapi/managers/HealthManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjozMDo1NFrOHck3qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjowNzoyOVrOHd61tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcyNjI0OQ==", "bodyText": "The if clause should be move to the first line to avoid storing livenessChecks if they are not needed.", "url": "https://github.com/folio-org/okapi/pull/982#discussion_r499726249", "createdAt": "2020-10-05T16:30:54Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/main/java/org/folio/okapi/managers/HealthManager.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package org.folio.okapi.managers;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.http.HttpServerOptions;\n+import io.vertx.ext.web.Router;\n+import io.vertx.ext.web.RoutingContext;\n+import java.util.List;\n+import org.folio.okapi.service.Liveness;\n+\n+public class HealthManager {\n+  private Vertx vertx;\n+  private final int listenPort;\n+  private List<Liveness> livenessChecks;\n+\n+  public HealthManager(int listenPort) {\n+    this.listenPort = listenPort;\n+  }\n+\n+  /**\n+   * Initialize health manager.\n+   * This should be called when the service should start\n+   * serving readiness and liveness.\n+   * @param vertx Vert.x handle\n+   * @return future result\n+   *\n+   */\n+  public Future<Void> init(Vertx vertx, List<Liveness> livenessChecks) {\n+    this.vertx = vertx;\n+    this.livenessChecks = livenessChecks;\n+    if (listenPort == 0) {\n+      return Future.succeededFuture();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d1e1b2615d84f51864447128b6b4544a78850bb"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEzNDc3NA==", "bodyText": "ok", "url": "https://github.com/folio-org/okapi/pull/982#discussion_r501134774", "createdAt": "2020-10-07T16:07:29Z", "author": {"login": "adamdickmeiss"}, "path": "okapi-core/src/main/java/org/folio/okapi/managers/HealthManager.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package org.folio.okapi.managers;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.http.HttpServerOptions;\n+import io.vertx.ext.web.Router;\n+import io.vertx.ext.web.RoutingContext;\n+import java.util.List;\n+import org.folio.okapi.service.Liveness;\n+\n+public class HealthManager {\n+  private Vertx vertx;\n+  private final int listenPort;\n+  private List<Liveness> livenessChecks;\n+\n+  public HealthManager(int listenPort) {\n+    this.listenPort = listenPort;\n+  }\n+\n+  /**\n+   * Initialize health manager.\n+   * This should be called when the service should start\n+   * serving readiness and liveness.\n+   * @param vertx Vert.x handle\n+   * @return future result\n+   *\n+   */\n+  public Future<Void> init(Vertx vertx, List<Liveness> livenessChecks) {\n+    this.vertx = vertx;\n+    this.livenessChecks = livenessChecks;\n+    if (listenPort == 0) {\n+      return Future.succeededFuture();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcyNjI0OQ=="}, "originalCommit": {"oid": "5d1e1b2615d84f51864447128b6b4544a78850bb"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODkzNDI0OnYy", "diffSide": "RIGHT", "path": "doc/guide.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjo0MToyM1rOHclPHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjoxMToxOFrOHd7AGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczMjI1Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * `healthPort`: port for readiness and liveness checks. Default value is\n          \n          \n            \n               0 (disabled). Provide non-zero value to enable.\n          \n          \n            \n            * `healthPort`: port for the GET /readiness and GET /liveness health checks. Use 0 to disable, this is the default. They return 204 if Okapi is ready/responsive and 500 otherwise.", "url": "https://github.com/folio-org/okapi/pull/982#discussion_r499732252", "createdAt": "2020-10-05T16:41:23Z", "author": {"login": "julianladisch"}, "path": "doc/guide.md", "diffHunk": "@@ -2737,6 +2737,8 @@ Defaults to `localhost`\n system-generated UUID (in cluster mode), or `localhost` (in dev mode)\n * `storage`: Defines the storage back end, `postgres`, `mongo` or (the default)\n `inmemory`\n+* `healthPort`: port for readiness and liveness checks. Default value is\n+   0 (disabled). Provide non-zero value to enable.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d1e1b2615d84f51864447128b6b4544a78850bb"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEzNzQzMg==", "bodyText": "ok", "url": "https://github.com/folio-org/okapi/pull/982#discussion_r501137432", "createdAt": "2020-10-07T16:11:18Z", "author": {"login": "adamdickmeiss"}, "path": "doc/guide.md", "diffHunk": "@@ -2737,6 +2737,8 @@ Defaults to `localhost`\n system-generated UUID (in cluster mode), or `localhost` (in dev mode)\n * `storage`: Defines the storage back end, `postgres`, `mongo` or (the default)\n `inmemory`\n+* `healthPort`: port for readiness and liveness checks. Default value is\n+   0 (disabled). Provide non-zero value to enable.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczMjI1Mg=="}, "originalCommit": {"oid": "5d1e1b2615d84f51864447128b6b4544a78850bb"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 152, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}