{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0NzYwNDM2", "number": 963, "title": "Async install and Futurisation OKAPI-845 OKAPI-874", "bodyText": "This PR comes in rwo parts.\n\n\nFuturisation (95%). Use Future, AsyncResult and compose rigorously. This reduces the code base by at least 10%.\n\n\nasync and ignoreErrors parameters for install/upgrade.\nThere are no changes to the tenant API with this PR. The message property which was present in earlier versions of Okapi is kept as is and is used for error message. A new property is stage which indicates the stage of the module (pending, deploy, call, done).", "createdAt": "2020-08-27T14:59:58Z", "url": "https://github.com/folio-org/okapi/pull/963", "merged": true, "mergeCommit": {"oid": "901b78620e2d54a5de42a691076461703f9e3b7d"}, "closed": true, "closedAt": "2020-09-25T09:09:35Z", "author": {"login": "adamdickmeiss"}, "timelineItems": {"totalCount": 143, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdJyECYgFqTQ5MDY3NDczMQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdMRtFAgH2gAyNDc0NzYwNDM2OmY0MjJmNWM4YmFmMWNlMGRjMGQ4ZGUwNDAzNDA5N2E5ZDdkMjM4MzM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwNjc0NzMx", "url": "https://github.com/folio-org/okapi/pull/963#pullrequestreview-490674731", "createdAt": "2020-09-17T14:42:12Z", "commit": {"oid": "bf5ab7bfcb9304049cfd2b8b53bba92703464963"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDo0MjoxMlrOHTlz-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDo0MjoxMlrOHTlz-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDMwNDUwNw==", "bodyText": "Does this mean it's possible to check the status of a sync install?  Is it worth mentioning that in the docs?", "url": "https://github.com/folio-org/okapi/pull/963#discussion_r490304507", "createdAt": "2020-09-17T14:42:12Z", "author": {"login": "craigmcnally"}, "path": "okapi-core/src/main/java/org/folio/okapi/managers/InternalModule.java", "diffHunk": "@@ -256,11 +254,21 @@ public static ModuleDescriptor moduleDescriptor(String okapiVersion) {\n         + \"    \\\"permissionsRequired\\\" : [ \\\"okapi.proxy.tenants.upgrade.post\\\" ], \"\n         + \"    \\\"type\\\" : \\\"internal\\\" \"\n         + \"   }, {\"\n+        + \"    \\\"methods\\\" :  [ \\\"GET\\\" ],\"\n+        + \"    \\\"pathPattern\\\" : \\\"/_/proxy/tenants/{tenantId}/install\\\",\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf5ab7bfcb9304049cfd2b8b53bba92703464963"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwNjg5ODAy", "url": "https://github.com/folio-org/okapi/pull/963#pullrequestreview-490689802", "createdAt": "2020-09-17T14:56:34Z", "commit": {"oid": "bf5ab7bfcb9304049cfd2b8b53bba92703464963"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66426ba7cd63f2966f7ad684757680a21d0a8c99", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/66426ba7cd63f2966f7ad684757680a21d0a8c99", "committedDate": "2020-09-17T18:51:07Z", "message": "Notes on getting all install jobs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92d63f729135c8ad34283fc1a02545d9ba26ce17", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/92d63f729135c8ad34283fc1a02545d9ba26ce17", "committedDate": "2020-09-17T18:51:30Z", "message": "Merge branch 'OKAPI-804-async-install' of github.com:folio-org/okapi into OKAPI-804-async-install"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwOTk4NDYw", "url": "https://github.com/folio-org/okapi/pull/963#pullrequestreview-490998460", "createdAt": "2020-09-17T21:22:39Z", "commit": {"oid": "92d63f729135c8ad34283fc1a02545d9ba26ce17"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMToyMjo0MFrOHT2ACg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMToyMjo0MFrOHT2ACg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU2OTczOA==", "bodyText": "Consider to use uppercase M for manager part", "url": "https://github.com/folio-org/okapi/pull/963#discussion_r490569738", "createdAt": "2020-09-17T21:22:40Z", "author": {"login": "hjiebsco"}, "path": "okapi-core/src/main/java/org/folio/okapi/MainVerticle.java", "diffHunk": "@@ -214,16 +215,12 @@ public void start(Promise<Void> promise) {\n \n   private Future<Void> startModmanager() {\n     logger.info(\"startModmanager\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92d63f729135c8ad34283fc1a02545d9ba26ce17"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwOTk5MzI0", "url": "https://github.com/folio-org/okapi/pull/963#pullrequestreview-490999324", "createdAt": "2020-09-17T21:24:15Z", "commit": {"oid": "92d63f729135c8ad34283fc1a02545d9ba26ce17"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMToyNDoxNVrOHT2C1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMToyNDoxNVrOHT2C1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU3MDQ1NA==", "bodyText": "Maybe mention and explain possible stages (deploy, call, and undeploy) here?", "url": "https://github.com/folio-org/okapi/pull/963#discussion_r490570454", "createdAt": "2020-09-17T21:24:15Z", "author": {"login": "hjiebsco"}, "path": "doc/guide.md", "diffHunk": "@@ -2621,7 +2623,71 @@ the install operation will also deploy and un-deploy as\n necessary. This will only work if the ModuleDescriptor has the\n launchDescriptor property.\n \n-### Purge\n+### Install jobs and asynchronous operations\n+\n+For Okapi 4.2.0 and later, the install operation can be asynchronous.\n+The asynchronous operation is enabled by URI parameter 'async=true'.\n+As for the \"synchronous\" operation, the dependency check is performed\n+first and install/upgrade will return 400 HTTP error upon failure.\n+\n+Following that, the install operation will create an install \"job\" on the\n+server side and return HTTP status 201 along with a location of the newly\n+created install job. The returned JSON content is defined by schema\n+([InstallJob.json](../okapi-core/src/main/raml/InstallJob.json)).\n+\n+This location can then be inspected with HTTP GET for the progress of\n+the install operation. The location is same base URI as install, but\n+with a slash + the job ID. The install job has properties such as\n+\n+ * `complete`: boolean which tells whether the job has completed\n+ * `id`: job id\n+ * `date`: start time of job in UTC ISO8601 format.\n+ * `modules`: enable/disable list of modules along with status.\n+\n+Each module entry is defined by schema\n+([TenantModuleDescriptor.json](../okapi-core/src/main/raml/TenantModuleDescriptor.json)).\n+Brief list of properties:\n+\n+ * `id`: module ID\n+ * `from`: old module ID (absent if not upgrading)\n+ * `action`: enable/disable/uptodate\n+ * `stage`: the current stage of the module\n+ * `message`: present upon error (error message)\n+\n+If `message` property is present an error has occurred and `stage`\n+indicates at which stage the error occurred.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92d63f729135c8ad34283fc1a02545d9ba26ce17"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxMDAwMDk3", "url": "https://github.com/folio-org/okapi/pull/963#pullrequestreview-491000097", "createdAt": "2020-09-17T21:25:41Z", "commit": {"oid": "92d63f729135c8ad34283fc1a02545d9ba26ce17"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMToyNTo0MVrOHT2FXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMToyNTo0MVrOHT2FXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU3MTEwMQ==", "bodyText": "This is the starting date. Is it possible to add a finish date to know the duration of the install/upgrade?", "url": "https://github.com/folio-org/okapi/pull/963#discussion_r490571101", "createdAt": "2020-09-17T21:25:41Z", "author": {"login": "hjiebsco"}, "path": "okapi-core/src/main/java/org/folio/okapi/bean/InstallJob.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.folio.okapi.bean;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import java.util.List;\n+\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public class InstallJob {\n+\n+  private String id;\n+\n+  private Boolean complete;\n+\n+  private String date;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92d63f729135c8ad34283fc1a02545d9ba26ce17"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxMDExMzQ1", "url": "https://github.com/folio-org/okapi/pull/963#pullrequestreview-491011345", "createdAt": "2020-09-17T21:46:05Z", "commit": {"oid": "92d63f729135c8ad34283fc1a02545d9ba26ce17"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMTo0NjowNlrOHT2o0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMTo0NjowNlrOHT2o0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU4MDE3Ng==", "bodyText": "Consider change id to tenantId", "url": "https://github.com/folio-org/okapi/pull/963#discussion_r490580176", "createdAt": "2020-09-17T21:46:06Z", "author": {"login": "hjiebsco"}, "path": "okapi-core/src/main/java/org/folio/okapi/managers/InternalModule.java", "diffHunk": "@@ -768,154 +729,121 @@ private void installModulesForTenant(ProxyContext pc, String id,\n           TenantModuleDescriptor[].class);\n       List<TenantModuleDescriptor> tm = new LinkedList<>();\n       Collections.addAll(tm, tml);\n-      tenantManager.installUpgradeModules(id, pc, options, tm, res -> {\n-        if (res.failed()) {\n-          fut.handle(new Failure<>(res.getType(), res.cause()));\n-        } else {\n-          logger.info(\"installUpgradeModules returns: {}\", Json.encodePrettily(res.result()));\n-          fut.handle(new Success<>(Json.encodePrettily(res.result())));\n-        }\n-      });\n+      UUID installId = UUID.randomUUID();\n+      return tenantManager.installUpgradeCreate(tenantId, installId.toString(), pc, options, tm)\n+          .compose(res -> {\n+            String jsonResponse = Json.encodePrettily(res);\n+            logger.info(\"installTenantModulesPost returns: {}\", jsonResponse);\n+            if (options.getAsync()) {\n+              return location(pc, installId.toString(), null, jsonResponse);\n+            } else {\n+              return Future.succeededFuture(jsonResponse);\n+            }\n+          });\n     } catch (DecodeException ex) {\n-      fut.handle(new Failure<>(ErrorType.USER, ex));\n+      return Future.failedFuture(new OkapiError(ErrorType.USER, ex.getMessage()));\n     }\n   }\n \n-  private void upgradeModulesForTenant(ProxyContext pc, String id,\n-                                       Handler<ExtendedAsyncResult<String>> fut) {\n+  private Future<String> installTenantModulesGetList(String tenantId) {\n+    return tenantManager.installUpgradeGetList(tenantId)\n+        .compose(installJobList -> Future.succeededFuture(Json.encodePrettily(installJobList)));\n+  }\n+\n+  private Future<String> installTenantModulesGet(String tenantId, String installId) {\n+    return tenantManager.installUpgradeGet(tenantId, installId)\n+        .compose(installJob -> Future.succeededFuture(Json.encodePrettily(installJob)));\n+  }\n+\n+  private Future<String> upgradeModulesForTenant(ProxyContext pc, String id) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92d63f729135c8ad34283fc1a02545d9ba26ce17"}, "originalPosition": 291}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxMDE2NTM3", "url": "https://github.com/folio-org/okapi/pull/963#pullrequestreview-491016537", "createdAt": "2020-09-17T21:56:00Z", "commit": {"oid": "92d63f729135c8ad34283fc1a02545d9ba26ce17"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMTo1NjowMFrOHT25dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMTo1NjowMFrOHT25dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU4NDQzOQ==", "bodyText": "Do we support checking the status of async upgrade?", "url": "https://github.com/folio-org/okapi/pull/963#discussion_r490584439", "createdAt": "2020-09-17T21:56:00Z", "author": {"login": "hjiebsco"}, "path": "okapi-core/src/main/java/org/folio/okapi/managers/InternalModule.java", "diffHunk": "@@ -768,154 +729,121 @@ private void installModulesForTenant(ProxyContext pc, String id,\n           TenantModuleDescriptor[].class);\n       List<TenantModuleDescriptor> tm = new LinkedList<>();\n       Collections.addAll(tm, tml);\n-      tenantManager.installUpgradeModules(id, pc, options, tm, res -> {\n-        if (res.failed()) {\n-          fut.handle(new Failure<>(res.getType(), res.cause()));\n-        } else {\n-          logger.info(\"installUpgradeModules returns: {}\", Json.encodePrettily(res.result()));\n-          fut.handle(new Success<>(Json.encodePrettily(res.result())));\n-        }\n-      });\n+      UUID installId = UUID.randomUUID();\n+      return tenantManager.installUpgradeCreate(tenantId, installId.toString(), pc, options, tm)\n+          .compose(res -> {\n+            String jsonResponse = Json.encodePrettily(res);\n+            logger.info(\"installTenantModulesPost returns: {}\", jsonResponse);\n+            if (options.getAsync()) {\n+              return location(pc, installId.toString(), null, jsonResponse);\n+            } else {\n+              return Future.succeededFuture(jsonResponse);\n+            }\n+          });\n     } catch (DecodeException ex) {\n-      fut.handle(new Failure<>(ErrorType.USER, ex));\n+      return Future.failedFuture(new OkapiError(ErrorType.USER, ex.getMessage()));\n     }\n   }\n \n-  private void upgradeModulesForTenant(ProxyContext pc, String id,\n-                                       Handler<ExtendedAsyncResult<String>> fut) {\n+  private Future<String> installTenantModulesGetList(String tenantId) {\n+    return tenantManager.installUpgradeGetList(tenantId)\n+        .compose(installJobList -> Future.succeededFuture(Json.encodePrettily(installJobList)));\n+  }\n+\n+  private Future<String> installTenantModulesGet(String tenantId, String installId) {\n+    return tenantManager.installUpgradeGet(tenantId, installId)\n+        .compose(installJob -> Future.succeededFuture(Json.encodePrettily(installJob)));\n+  }\n+\n+  private Future<String> upgradeModulesForTenant(ProxyContext pc, String id) {\n \n     TenantInstallOptions options = ModuleUtil.createTenantOptions(pc.getCtx().request());\n-    tenantManager.installUpgradeModules(id, pc, options, null, res -> {\n-      if (res.failed()) {\n-        fut.handle(new Failure<>(res.getType(), res.cause()));\n-      } else {\n-        logger.info(\"installUpgradeModules returns: {}\", Json.encodePrettily(res.result()));\n-        fut.handle(new Success<>(Json.encodePrettily(res.result())));\n-      }\n-    });\n+    UUID installId = UUID.randomUUID();\n+    return tenantManager.installUpgradeCreate(id, installId.toString(), pc, options, null)\n+        .compose(res -> Future.succeededFuture(Json.encodePrettily(res)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92d63f729135c8ad34283fc1a02545d9ba26ce17"}, "originalPosition": 304}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxMDMzODYz", "url": "https://github.com/folio-org/okapi/pull/963#pullrequestreview-491033863", "createdAt": "2020-09-17T22:33:27Z", "commit": {"oid": "92d63f729135c8ad34283fc1a02545d9ba26ce17"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMjozMzoyN1rOHT3xGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMjozMzoyN1rOHT3xGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU5ODY4Mw==", "bodyText": "Typo. Should be Clone, not Close", "url": "https://github.com/folio-org/okapi/pull/963#discussion_r490598683", "createdAt": "2020-09-17T22:33:27Z", "author": {"login": "hjiebsco"}, "path": "okapi-core/src/main/java/org/folio/okapi/bean/TenantModuleDescriptor.java", "diffHunk": "@@ -58,4 +66,27 @@ public String getMessage() {\n   public void setMessage(String message) {\n     this.message = message;\n   }\n+\n+  public Stage getStage() {\n+    return stage;\n+  }\n+\n+  public void setStage(Stage stage) {\n+    this.stage = stage;\n+  }\n+\n+  /**\n+   * Close an entry without status (for Install without async).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92d63f729135c8ad34283fc1a02545d9ba26ce17"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxMDQwODU4", "url": "https://github.com/folio-org/okapi/pull/963#pullrequestreview-491040858", "createdAt": "2020-09-17T22:50:19Z", "commit": {"oid": "92d63f729135c8ad34283fc1a02545d9ba26ce17"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMjo1MDoyMFrOHT4IWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMjo1MDoyMFrOHT4IWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYwNDYzMg==", "bodyText": "Should we also set stage to be pending for tm in tml2?", "url": "https://github.com/folio-org/okapi/pull/963#discussion_r490604632", "createdAt": "2020-09-17T22:50:20Z", "author": {"login": "hjiebsco"}, "path": "okapi-core/src/main/java/org/folio/okapi/managers/TenantManager.java", "diffHunk": "@@ -982,144 +752,186 @@ void listModulesFromInterface(String tenantId,\n             }\n           }\n         }\n-        fut.handle(new Success<>(mdList));\n-      }); // modlist\n-    }); // tenant\n+        return Future.succeededFuture(mdList);\n+      });\n+    });\n   }\n \n-  void installUpgradeModules(String tenantId, ProxyContext pc,\n-                             TenantInstallOptions options, List<TenantModuleDescriptor> tml,\n-                             Handler<ExtendedAsyncResult<List<TenantModuleDescriptor>>> fut) {\n+  Future<InstallJob> installUpgradeGet(String tenantId, String installId) {\n+    return tenants.getNotFound(tenantId).compose(x -> jobs.getNotFound(tenantId, installId));\n+  }\n \n+  Future<List<InstallJob>> installUpgradeGetList(String tenantId) {\n+    return tenants.getNotFound(tenantId).compose(x -> jobs.get(tenantId).compose(list -> {\n+      if (list == null) {\n+        return Future.succeededFuture(new LinkedList<>());\n+      }\n+      return Future.succeededFuture(list);\n+    }));\n+  }\n+\n+  Future<List<TenantModuleDescriptor>> installUpgradeCreate(\n+      String tenantId, String installId, ProxyContext pc,\n+      TenantInstallOptions options, List<TenantModuleDescriptor> tml) {\n+\n+    logger.info(\"installUpgradeCreate InstallId={}\", installId);\n     if (tml != null) {\n       for (TenantModuleDescriptor tm : tml) {\n         if (tm.getAction() == null) {\n-          fut.handle(new Failure<>(ErrorType.USER, messages.getMessage(\"10405\", tm.getId())));\n-          return;\n+          return Future.failedFuture(new OkapiError(ErrorType.USER,\n+              messages.getMessage(\"10405\", tm.getId())));\n         }\n       }\n     }\n-    tenants.get(tenantId, gres -> {\n-      if (gres.failed()) {\n-        fut.handle(new Failure<>(gres.getType(), gres.cause()));\n-        return;\n-      }\n-      Tenant t = gres.result();\n-      moduleManager.getModulesWithFilter(options.getPreRelease(),\n-          options.getNpmSnapshot(), null, mres -> {\n-            if (mres.failed()) {\n-              fut.handle(new Failure<>(mres.getType(), mres.cause()));\n-              return;\n-            }\n-            List<ModuleDescriptor> modResult = mres.result();\n-            HashMap<String, ModuleDescriptor> modsAvailable = new HashMap<>(modResult.size());\n-            HashMap<String, ModuleDescriptor> modsEnabled = new HashMap<>();\n-            for (ModuleDescriptor md : modResult) {\n-              modsAvailable.put(md.getId(), md);\n-              logger.info(\"mod available: {}\", md.getId());\n-              if (t.isEnabled(md.getId())) {\n-                logger.info(\"mod enabled: {}\", md.getId());\n-                modsEnabled.put(md.getId(), md);\n+    return tenants.getNotFound(tenantId).compose(tenant ->\n+        moduleManager.getModulesWithFilter(options.getPreRelease(),\n+            options.getNpmSnapshot(), null)\n+            .compose(modules -> {\n+              HashMap<String, ModuleDescriptor> modsAvailable = new HashMap<>(modules.size());\n+              HashMap<String, ModuleDescriptor> modsEnabled = new HashMap<>();\n+              for (ModuleDescriptor md : modules) {\n+                modsAvailable.put(md.getId(), md);\n+                logger.info(\"mod available: {}\", md.getId());\n+                if (tenant.isEnabled(md.getId())) {\n+                  logger.info(\"mod enabled: {}\", md.getId());\n+                  modsEnabled.put(md.getId(), md);\n+                }\n               }\n-            }\n-            List<TenantModuleDescriptor> tml2\n-                = prepareTenantModuleList(modsAvailable, modsEnabled, tml);\n-            installUpgradeModules2(t, pc, options, modsAvailable, modsEnabled, tml2, fut);\n-          });\n-    });\n+              InstallJob job = new InstallJob();\n+              job.setId(installId);\n+              job.setDate(Instant.now().toString());\n+              if (tml == null) {\n+                job.setModules(upgrades(modsAvailable, modsEnabled));\n+              } else {\n+                job.setModules(tml);\n+              }\n+              job.setComplete(false);\n+              return runJob(tenant, pc, options, modsAvailable, modsEnabled, job);\n+            }));\n   }\n \n-  private List<TenantModuleDescriptor> prepareTenantModuleList(\n-      Map<String, ModuleDescriptor> modsAvailable,\n-      Map<String, ModuleDescriptor> modsEnabled, List<TenantModuleDescriptor> tml) {\n-\n-    if (tml == null) { // upgrade case . Mark all newer modules for install\n-      List<TenantModuleDescriptor> tml2 = new LinkedList<>();\n-      for (String id : modsEnabled.keySet()) {\n-        ModuleId moduleId = new ModuleId(id);\n-        String latestId = moduleId.getLatest(modsAvailable.keySet());\n-        if (!latestId.equals(id)) {\n-          TenantModuleDescriptor tmd = new TenantModuleDescriptor();\n-          tmd.setAction(Action.enable);\n-          tmd.setId(latestId);\n-          logger.info(\"upgrade.. enable {}\", latestId);\n-          tmd.setFrom(id);\n-          tml2.add(tmd);\n-        }\n+  private List<TenantModuleDescriptor> upgrades(\n+      Map<String, ModuleDescriptor> modsAvailable, Map<String, ModuleDescriptor> modsEnabled) {\n+\n+    List<TenantModuleDescriptor> tml = new LinkedList<>();\n+    for (String id : modsEnabled.keySet()) {\n+      ModuleId moduleId = new ModuleId(id);\n+      String latestId = moduleId.getLatest(modsAvailable.keySet());\n+      if (!latestId.equals(id)) {\n+        TenantModuleDescriptor tmd = new TenantModuleDescriptor();\n+        tmd.setAction(Action.enable);\n+        tmd.setId(latestId);\n+        logger.info(\"upgrade.. enable {}\", latestId);\n+        tmd.setFrom(id);\n+        tml.add(tmd);\n       }\n-      return tml2;\n-    } else {\n-      return tml;\n     }\n+    return tml;\n   }\n \n-  private void installUpgradeModules2(\n-      Tenant t, ProxyContext pc,\n-      TenantInstallOptions options,\n+  private Future<List<TenantModuleDescriptor>> runJob(\n+      Tenant t, ProxyContext pc, TenantInstallOptions options,\n       Map<String, ModuleDescriptor> modsAvailable,\n-      Map<String, ModuleDescriptor> modsEnabled, List<TenantModuleDescriptor> tml,\n-      Handler<ExtendedAsyncResult<List<TenantModuleDescriptor>>> fut) {\n+      Map<String, ModuleDescriptor> modsEnabled, InstallJob job) {\n \n-    DepResolution.installSimulate(modsAvailable, modsEnabled, tml, res -> {\n-      if (res.failed()) {\n-        fut.handle(new Failure<>(res.getType(), res.cause()));\n-        return;\n-      }\n+    List<TenantModuleDescriptor> tml = job.getModules();\n+    return DepResolution.installSimulate(modsAvailable, modsEnabled, tml).compose(res -> {\n       if (options.getSimulate()) {\n-        fut.handle(new Success<>(tml));\n-      } else {\n-        installAutodeploy(t, pc, options, modsAvailable, tml, tml.iterator(),\n-            res1 -> {\n-              if (res1.failed()) {\n-                fut.handle(new Failure<>(res1.getType(), res1.cause()));\n-              } else {\n-                fut.handle(new Success<>(tml));\n+        return Future.succeededFuture(tml);\n+      }\n+      return jobs.add(t.getId(), job.getId(), job).compose(res2 -> {\n+        Promise<List<TenantModuleDescriptor>> promise = Promise.promise();\n+        Future<Void> future = Future.succeededFuture();\n+        if (options.getAsync()) {\n+          List<TenantModuleDescriptor> tml2 = new LinkedList<>();\n+          for (TenantModuleDescriptor tm : tml) {\n+            tml2.add(tm.cloneWithoutStatus());\n+          }\n+          promise.complete(tml2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92d63f729135c8ad34283fc1a02545d9ba26ce17"}, "originalPosition": 1189}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxMDUxOTg1", "url": "https://github.com/folio-org/okapi/pull/963#pullrequestreview-491051985", "createdAt": "2020-09-17T23:21:17Z", "commit": {"oid": "92d63f729135c8ad34283fc1a02545d9ba26ce17"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMzoyMToxOFrOHT4t7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMzoyMToxOFrOHT4t7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYxNDI1Mw==", "bodyText": "Should we check async here and update tml stage to undeploy? BTW stage.undeploy has not been used anywhere in the project yet.", "url": "https://github.com/folio-org/okapi/pull/963#discussion_r490614253", "createdAt": "2020-09-17T23:21:18Z", "author": {"login": "hjiebsco"}, "path": "okapi-core/src/main/java/org/folio/okapi/managers/TenantManager.java", "diffHunk": "@@ -982,144 +752,186 @@ void listModulesFromInterface(String tenantId,\n             }\n           }\n         }\n-        fut.handle(new Success<>(mdList));\n-      }); // modlist\n-    }); // tenant\n+        return Future.succeededFuture(mdList);\n+      });\n+    });\n   }\n \n-  void installUpgradeModules(String tenantId, ProxyContext pc,\n-                             TenantInstallOptions options, List<TenantModuleDescriptor> tml,\n-                             Handler<ExtendedAsyncResult<List<TenantModuleDescriptor>>> fut) {\n+  Future<InstallJob> installUpgradeGet(String tenantId, String installId) {\n+    return tenants.getNotFound(tenantId).compose(x -> jobs.getNotFound(tenantId, installId));\n+  }\n \n+  Future<List<InstallJob>> installUpgradeGetList(String tenantId) {\n+    return tenants.getNotFound(tenantId).compose(x -> jobs.get(tenantId).compose(list -> {\n+      if (list == null) {\n+        return Future.succeededFuture(new LinkedList<>());\n+      }\n+      return Future.succeededFuture(list);\n+    }));\n+  }\n+\n+  Future<List<TenantModuleDescriptor>> installUpgradeCreate(\n+      String tenantId, String installId, ProxyContext pc,\n+      TenantInstallOptions options, List<TenantModuleDescriptor> tml) {\n+\n+    logger.info(\"installUpgradeCreate InstallId={}\", installId);\n     if (tml != null) {\n       for (TenantModuleDescriptor tm : tml) {\n         if (tm.getAction() == null) {\n-          fut.handle(new Failure<>(ErrorType.USER, messages.getMessage(\"10405\", tm.getId())));\n-          return;\n+          return Future.failedFuture(new OkapiError(ErrorType.USER,\n+              messages.getMessage(\"10405\", tm.getId())));\n         }\n       }\n     }\n-    tenants.get(tenantId, gres -> {\n-      if (gres.failed()) {\n-        fut.handle(new Failure<>(gres.getType(), gres.cause()));\n-        return;\n-      }\n-      Tenant t = gres.result();\n-      moduleManager.getModulesWithFilter(options.getPreRelease(),\n-          options.getNpmSnapshot(), null, mres -> {\n-            if (mres.failed()) {\n-              fut.handle(new Failure<>(mres.getType(), mres.cause()));\n-              return;\n-            }\n-            List<ModuleDescriptor> modResult = mres.result();\n-            HashMap<String, ModuleDescriptor> modsAvailable = new HashMap<>(modResult.size());\n-            HashMap<String, ModuleDescriptor> modsEnabled = new HashMap<>();\n-            for (ModuleDescriptor md : modResult) {\n-              modsAvailable.put(md.getId(), md);\n-              logger.info(\"mod available: {}\", md.getId());\n-              if (t.isEnabled(md.getId())) {\n-                logger.info(\"mod enabled: {}\", md.getId());\n-                modsEnabled.put(md.getId(), md);\n+    return tenants.getNotFound(tenantId).compose(tenant ->\n+        moduleManager.getModulesWithFilter(options.getPreRelease(),\n+            options.getNpmSnapshot(), null)\n+            .compose(modules -> {\n+              HashMap<String, ModuleDescriptor> modsAvailable = new HashMap<>(modules.size());\n+              HashMap<String, ModuleDescriptor> modsEnabled = new HashMap<>();\n+              for (ModuleDescriptor md : modules) {\n+                modsAvailable.put(md.getId(), md);\n+                logger.info(\"mod available: {}\", md.getId());\n+                if (tenant.isEnabled(md.getId())) {\n+                  logger.info(\"mod enabled: {}\", md.getId());\n+                  modsEnabled.put(md.getId(), md);\n+                }\n               }\n-            }\n-            List<TenantModuleDescriptor> tml2\n-                = prepareTenantModuleList(modsAvailable, modsEnabled, tml);\n-            installUpgradeModules2(t, pc, options, modsAvailable, modsEnabled, tml2, fut);\n-          });\n-    });\n+              InstallJob job = new InstallJob();\n+              job.setId(installId);\n+              job.setDate(Instant.now().toString());\n+              if (tml == null) {\n+                job.setModules(upgrades(modsAvailable, modsEnabled));\n+              } else {\n+                job.setModules(tml);\n+              }\n+              job.setComplete(false);\n+              return runJob(tenant, pc, options, modsAvailable, modsEnabled, job);\n+            }));\n   }\n \n-  private List<TenantModuleDescriptor> prepareTenantModuleList(\n-      Map<String, ModuleDescriptor> modsAvailable,\n-      Map<String, ModuleDescriptor> modsEnabled, List<TenantModuleDescriptor> tml) {\n-\n-    if (tml == null) { // upgrade case . Mark all newer modules for install\n-      List<TenantModuleDescriptor> tml2 = new LinkedList<>();\n-      for (String id : modsEnabled.keySet()) {\n-        ModuleId moduleId = new ModuleId(id);\n-        String latestId = moduleId.getLatest(modsAvailable.keySet());\n-        if (!latestId.equals(id)) {\n-          TenantModuleDescriptor tmd = new TenantModuleDescriptor();\n-          tmd.setAction(Action.enable);\n-          tmd.setId(latestId);\n-          logger.info(\"upgrade.. enable {}\", latestId);\n-          tmd.setFrom(id);\n-          tml2.add(tmd);\n-        }\n+  private List<TenantModuleDescriptor> upgrades(\n+      Map<String, ModuleDescriptor> modsAvailable, Map<String, ModuleDescriptor> modsEnabled) {\n+\n+    List<TenantModuleDescriptor> tml = new LinkedList<>();\n+    for (String id : modsEnabled.keySet()) {\n+      ModuleId moduleId = new ModuleId(id);\n+      String latestId = moduleId.getLatest(modsAvailable.keySet());\n+      if (!latestId.equals(id)) {\n+        TenantModuleDescriptor tmd = new TenantModuleDescriptor();\n+        tmd.setAction(Action.enable);\n+        tmd.setId(latestId);\n+        logger.info(\"upgrade.. enable {}\", latestId);\n+        tmd.setFrom(id);\n+        tml.add(tmd);\n       }\n-      return tml2;\n-    } else {\n-      return tml;\n     }\n+    return tml;\n   }\n \n-  private void installUpgradeModules2(\n-      Tenant t, ProxyContext pc,\n-      TenantInstallOptions options,\n+  private Future<List<TenantModuleDescriptor>> runJob(\n+      Tenant t, ProxyContext pc, TenantInstallOptions options,\n       Map<String, ModuleDescriptor> modsAvailable,\n-      Map<String, ModuleDescriptor> modsEnabled, List<TenantModuleDescriptor> tml,\n-      Handler<ExtendedAsyncResult<List<TenantModuleDescriptor>>> fut) {\n+      Map<String, ModuleDescriptor> modsEnabled, InstallJob job) {\n \n-    DepResolution.installSimulate(modsAvailable, modsEnabled, tml, res -> {\n-      if (res.failed()) {\n-        fut.handle(new Failure<>(res.getType(), res.cause()));\n-        return;\n-      }\n+    List<TenantModuleDescriptor> tml = job.getModules();\n+    return DepResolution.installSimulate(modsAvailable, modsEnabled, tml).compose(res -> {\n       if (options.getSimulate()) {\n-        fut.handle(new Success<>(tml));\n-      } else {\n-        installAutodeploy(t, pc, options, modsAvailable, tml, tml.iterator(),\n-            res1 -> {\n-              if (res1.failed()) {\n-                fut.handle(new Failure<>(res1.getType(), res1.cause()));\n-              } else {\n-                fut.handle(new Success<>(tml));\n+        return Future.succeededFuture(tml);\n+      }\n+      return jobs.add(t.getId(), job.getId(), job).compose(res2 -> {\n+        Promise<List<TenantModuleDescriptor>> promise = Promise.promise();\n+        Future<Void> future = Future.succeededFuture();\n+        if (options.getAsync()) {\n+          List<TenantModuleDescriptor> tml2 = new LinkedList<>();\n+          for (TenantModuleDescriptor tm : tml) {\n+            tml2.add(tm.cloneWithoutStatus());\n+          }\n+          promise.complete(tml2);\n+          future = future.compose(x -> {\n+            for (TenantModuleDescriptor tm : tml) {\n+              tm.setStage(TenantModuleDescriptor.Stage.pending);\n+            }\n+            return jobs.put(t.getId(), job.getId(), job);\n+          });\n+        }\n+        if (options.getDeploy()) {\n+          if (options.getAsync()) {\n+            future = future.compose(x -> {\n+              for (TenantModuleDescriptor tm : tml) {\n+                tm.setStage(TenantModuleDescriptor.Stage.deploy);\n               }\n+              return jobs.put(t.getId(), job.getId(), job);\n             });\n-      }\n+          }\n+          future = future.compose(x -> autoDeploy(t, modsAvailable, tml));\n+        }\n+        for (TenantModuleDescriptor tm : tml) {\n+          if (options.getAsync()) {\n+            future = future.compose(x -> {\n+              tm.setStage(TenantModuleDescriptor.Stage.call);\n+              return jobs.put(t.getId(), job.getId(), job);\n+            });\n+          }\n+          if (options.getIgnoreErrors()) {\n+            Promise<Void> promise1 = Promise.promise();\n+            installTenantModule(t, pc, options, modsAvailable, tm).onComplete(x -> {\n+              if (x.failed()) {\n+                logger.warn(\"Ignoring error for tenant {} module {}\",\n+                    t.getId(), tm.getId(), x.cause());\n+              }\n+              promise1.complete();\n+            });\n+            future = future.compose(x -> promise1.future());\n+          } else {\n+            future = future.compose(x -> installTenantModule(t, pc, options, modsAvailable, tm));\n+          }\n+          if (options.getAsync()) {\n+            future = future.compose(x -> {\n+              if (tm.getMessage() == null) {\n+                tm.setStage(TenantModuleDescriptor.Stage.done);\n+              }\n+              return jobs.put(t.getId(), job.getId(), job);\n+            });\n+          }\n+        }\n+        if (options.getDeploy()) {\n+          future.compose(x -> autoUndeploy(t, modsAvailable, tml));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92d63f729135c8ad34283fc1a02545d9ba26ce17"}, "originalPosition": 1240}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cac6dbf3b8ea1b14a7a31b94d836a29cd0f33416", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/cac6dbf3b8ea1b14a7a31b94d836a29cd0f33416", "committedDate": "2020-09-18T08:47:47Z", "message": "Add okapi.proxy.tenants.install.list; fix okapi.tenantmodules list"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a5e2f2d2e3dddb2e1dd6cb1460d334632d5cb23", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/4a5e2f2d2e3dddb2e1dd6cb1460d334632d5cb23", "committedDate": "2020-09-18T08:53:00Z", "message": "Rename startModmanager to startModuleManager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "868c75be77fcdbfbec25a0936430e9d1b020068a", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/868c75be77fcdbfbec25a0936430e9d1b020068a", "committedDate": "2020-09-18T09:04:06Z", "message": "Describe stage values"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da193fd030319258a09037a0943a3197ce3b4e4a", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/da193fd030319258a09037a0943a3197ce3b4e4a", "committedDate": "2020-09-18T09:09:42Z", "message": "Use tenantId for tenant identifiers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3839db34d8623836a8e5fd631adcf1289d74cdd3", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/3839db34d8623836a8e5fd631adcf1289d74cdd3", "committedDate": "2020-09-18T09:29:07Z", "message": "Fix typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0c9e6794f45ba2ac1ac670295149db35e7b08b4", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/b0c9e6794f45ba2ac1ac670295149db35e7b08b4", "committedDate": "2020-09-18T10:01:24Z", "message": "Save jobs regardless of async; deploy/undeploy status"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "667da414de694fad916f1ecaa95059ba7ae20580", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/667da414de694fad916f1ecaa95059ba7ae20580", "committedDate": "2020-09-18T11:50:05Z", "message": "Merge branch 'master' into OKAPI-804-async-install"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxNDY2MTk2", "url": "https://github.com/folio-org/okapi/pull/963#pullrequestreview-491466196", "createdAt": "2020-09-18T13:30:49Z", "commit": {"oid": "667da414de694fad916f1ecaa95059ba7ae20580"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxNzcyOTI2", "url": "https://github.com/folio-org/okapi/pull/963#pullrequestreview-491772926", "createdAt": "2020-09-18T20:49:24Z", "commit": {"oid": "667da414de694fad916f1ecaa95059ba7ae20580"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMDo0OToyNFrOHUbfpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMDo0OToyNFrOHUbfpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE4NDAzOA==", "bodyText": "status has been renamed to stage.\nShould the javadoc been renamed to Clone an entry without stage and the method been renamed to cloneWithoutState?", "url": "https://github.com/folio-org/okapi/pull/963#discussion_r491184038", "createdAt": "2020-09-18T20:49:24Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/main/java/org/folio/okapi/bean/TenantModuleDescriptor.java", "diffHunk": "@@ -58,4 +66,27 @@ public String getMessage() {\n   public void setMessage(String message) {\n     this.message = message;\n   }\n+\n+  public Stage getStage() {\n+    return stage;\n+  }\n+\n+  public void setStage(Stage stage) {\n+    this.stage = stage;\n+  }\n+\n+  /**\n+   * Clone an entry without status and stage (for Install without async).\n+   * @return entry\n+   */\n+  @JsonIgnore\n+  public TenantModuleDescriptor cloneWithoutStatus() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "667da414de694fad916f1ecaa95059ba7ae20580"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxNzgwNjY0", "url": "https://github.com/folio-org/okapi/pull/963#pullrequestreview-491780664", "createdAt": "2020-09-18T21:05:15Z", "commit": {"oid": "667da414de694fad916f1ecaa95059ba7ae20580"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMTowNToxNVrOHUb4Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMTowNToxNVrOHUb4Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE5MDM1NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      return add(dd).compose(x -> Future.succeededFuture(dd));\n          \n          \n            \n                      return add(dd).map(dd);", "url": "https://github.com/folio-org/okapi/pull/963#discussion_r491190355", "createdAt": "2020-09-18T21:05:15Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/main/java/org/folio/okapi/managers/DiscoveryManager.java", "diffHunk": "@@ -166,196 +126,127 @@ void addAndDeploy(DeploymentDescriptor dd,\n    *   3: No nodeId: Do not deploy at all, just record the existence (URL and instId) of the module.\n    * </p>\n    */\n-  private void addAndDeploy0(DeploymentDescriptor dd,\n-                             Handler<ExtendedAsyncResult<DeploymentDescriptor>> fut) {\n+  private Future<DeploymentDescriptor> addAndDeploy0(DeploymentDescriptor dd) {\n \n     String tmp = Json.encodePrettily(dd);\n     logger.info(\"addAndDeploy: {}\", tmp);\n     final String modId = dd.getSrvcId();\n     if (modId == null) {\n-      fut.handle(new Failure<>(ErrorType.USER, messages.getMessage(\"10800\")));\n-      return;\n+      return Future.failedFuture(new OkapiError(ErrorType.USER, messages.getMessage(\"10800\")));\n     }\n-    moduleManager.get(modId, gres -> {\n-      if (gres.failed()) {\n-        if (gres.getType() == ErrorType.NOT_FOUND) {\n-          fut.handle(new Failure<>(ErrorType.NOT_FOUND, messages.getMessage(\"10801\", modId)));\n-        } else {\n-          fut.handle(new Failure<>(gres.getType(), gres.cause()));\n-        }\n-      } else {\n-        addAndDeploy1(dd, gres.result(), fut);\n-      }\n-    });\n+    return moduleManager.get(modId).compose(gres -> addAndDeploy1(dd, gres));\n   }\n \n-  private void addAndDeploy1(DeploymentDescriptor dd, ModuleDescriptor md,\n-                             Handler<ExtendedAsyncResult<DeploymentDescriptor>> fut) {\n+  private Future<DeploymentDescriptor> addAndDeploy1(DeploymentDescriptor dd, ModuleDescriptor md) {\n \n     LaunchDescriptor launchDesc = dd.getDescriptor();\n     final String nodeId = dd.getNodeId();\n     if (nodeId == null) {\n       if (launchDesc == null) { // 3: externally deployed\n         if (dd.getInstId() == null) {\n-          fut.handle(new Failure<>(ErrorType.USER, messages.getMessage(\"10802\")));\n+          return Future.failedFuture(new OkapiError(ErrorType.USER, messages.getMessage(\"10802\")));\n         } else {\n-          add(dd, res -> { // just add it\n-            if (res.failed()) {\n-              fut.handle(new Failure<>(res.getType(), res.cause()));\n-            } else {\n-              fut.handle(new Success<>(dd));\n-            }\n-          });\n+          return add(dd).compose(x -> Future.succeededFuture(dd));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "667da414de694fad916f1ecaa95059ba7ae20580"}, "originalPosition": 197}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxNzkyMTMx", "url": "https://github.com/folio-org/okapi/pull/963#pullrequestreview-491792131", "createdAt": "2020-09-18T21:31:04Z", "commit": {"oid": "667da414de694fad916f1ecaa95059ba7ae20580"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMTozMTowNVrOHUcc4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMTozMTowNVrOHUcc4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE5OTcxNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return addAndDeploy0(dd).compose(res -> {\n          \n          \n            \n                  return deploymentStore.insert(res).compose(x -> Future.succeededFuture(res));\n          \n          \n            \n                return addAndDeploy0(dd)\n          \n          \n            \n                    .compose(res -> deploymentStore.insert(res).map(res));", "url": "https://github.com/folio-org/okapi/pull/963#discussion_r491199714", "createdAt": "2020-09-18T21:31:05Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/main/java/org/folio/okapi/managers/DiscoveryManager.java", "diffHunk": "@@ -113,48 +94,27 @@ public void setModuleManager(ModuleManager mgr) {\n     this.moduleManager = mgr;\n   }\n \n-  void add(DeploymentDescriptor md, Handler<ExtendedAsyncResult<Void>> fut) {\n-    deployments.getKeys(res -> {\n-      if (res.failed()) {\n-        fut.handle(new Failure<>(res.getType(), res.cause()));\n-        return;\n-      }\n-      CompList<Void> futures = new CompList<>(ErrorType.INTERNAL);\n-      for (String moduleId : res.result()) {\n-        Promise<Void> promise = Promise.promise();\n-        futures.add(promise);\n-        deployments.get(moduleId, md.getInstId(), r -> {\n-          if (r.succeeded()) {\n-            promise.fail(\"dup InstId\");\n-            return;\n+  Future<Void> add(DeploymentDescriptor md) {\n+    return deployments.getKeys().compose(res -> {\n+      Future<Void> future = Future.succeededFuture();\n+      for (String moduleId : res) {\n+        future = future.compose(a -> deployments.get(moduleId, md.getInstId()).compose(b -> {\n+          if (b != null) {\n+            return Future.failedFuture(new OkapiError(ErrorType.USER,\n+                messages.getMessage(\"10809\", md.getInstId())));\n           }\n-          promise.complete();\n-        });\n+          return Future.succeededFuture();\n+        }));\n       }\n-      futures.all(res2 -> {\n-        if (res2.failed()) {\n-          fut.handle(new Failure<>(ErrorType.USER, messages.getMessage(\"10809\", md.getInstId())));\n-          return;\n-        }\n-        deployments.add(md.getSrvcId(), md.getInstId(), md, fut);\n-      });\n+      return future.compose(res2 -> {\n+        return deployments.add(md.getSrvcId(), md.getInstId(), md);\n+      }).mapEmpty();\n     });\n   }\n \n-  void addAndDeploy(DeploymentDescriptor dd,\n-                    Handler<ExtendedAsyncResult<DeploymentDescriptor>> fut) {\n-    addAndDeploy0(dd, res -> {\n-      if (res.failed()) {\n-        fut.handle(new Failure<>(res.getType(), res.cause()));\n-      } else {\n-        deploymentStore.insert(res.result(), res1 -> {\n-          if (res1.failed()) {\n-            fut.handle(new Failure<>(res1.getType(), res1.cause()));\n-          } else {\n-            fut.handle(new Success<>(res.result()));\n-          }\n-        });\n-      }\n+  Future<DeploymentDescriptor> addAndDeploy(DeploymentDescriptor dd) {\n+    return addAndDeploy0(dd).compose(res -> {\n+      return deploymentStore.insert(res).compose(x -> Future.succeededFuture(res));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "667da414de694fad916f1ecaa95059ba7ae20580"}, "originalPosition": 144}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxODE5MTU5", "url": "https://github.com/folio-org/okapi/pull/963#pullrequestreview-491819159", "createdAt": "2020-09-18T22:40:37Z", "commit": {"oid": "667da414de694fad916f1ecaa95059ba7ae20580"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMjo0MDozN1rOHUd6XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMjo0MDozN1rOHUd6XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIyMzY0NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return getNode(nodeId).compose(nodeDescriptor -> {\n          \n          \n            \n                  String reqData = Json.encode(dd);\n          \n          \n            \n                  Promise<DeploymentDescriptor> promise = Promise.promise();\n          \n          \n            \n                  vertx.eventBus().request(nodeDescriptor.getUrl() + \"/deploy\", reqData,\n          \n          \n            \n                      deliveryOptions).onComplete(ar -> {\n          \n          \n            \n                        if (ar.failed()) {\n          \n          \n            \n                          promise.fail(new OkapiError(ErrorType.USER, ar.cause().getMessage()));\n          \n          \n            \n                        } else {\n          \n          \n            \n                          String b = (String) ar.result().body();\n          \n          \n            \n                          DeploymentDescriptor pmd = Json.decodeValue(b, DeploymentDescriptor.class);\n          \n          \n            \n                          promise.complete(pmd);\n          \n          \n            \n                        }\n          \n          \n            \n                      });\n          \n          \n            \n                  return promise.future();\n          \n          \n            \n                return getNode(nodeId)\n          \n          \n            \n                    .flatMap(nodeDescriptor -> {\n          \n          \n            \n                      String url = nodeDescriptor.getUrl() + \"/deploy\";\n          \n          \n            \n                      return vertx.eventBus().request(url, Json.encode(dd), deliveryOptions)\n          \n          \n            \n                          .recover(e -> Future.failedFuture(new OkapiError(ErrorType.USER, e.getMessage())));\n          \n          \n            \n                    })\n          \n          \n            \n                    .map(message -> Json.decodeValue((String) message.body(), DeploymentDescriptor.class));", "url": "https://github.com/folio-org/okapi/pull/963#discussion_r491223645", "createdAt": "2020-09-18T22:40:37Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/main/java/org/folio/okapi/managers/DiscoveryManager.java", "diffHunk": "@@ -166,196 +126,127 @@ void addAndDeploy(DeploymentDescriptor dd,\n    *   3: No nodeId: Do not deploy at all, just record the existence (URL and instId) of the module.\n    * </p>\n    */\n-  private void addAndDeploy0(DeploymentDescriptor dd,\n-                             Handler<ExtendedAsyncResult<DeploymentDescriptor>> fut) {\n+  private Future<DeploymentDescriptor> addAndDeploy0(DeploymentDescriptor dd) {\n \n     String tmp = Json.encodePrettily(dd);\n     logger.info(\"addAndDeploy: {}\", tmp);\n     final String modId = dd.getSrvcId();\n     if (modId == null) {\n-      fut.handle(new Failure<>(ErrorType.USER, messages.getMessage(\"10800\")));\n-      return;\n+      return Future.failedFuture(new OkapiError(ErrorType.USER, messages.getMessage(\"10800\")));\n     }\n-    moduleManager.get(modId, gres -> {\n-      if (gres.failed()) {\n-        if (gres.getType() == ErrorType.NOT_FOUND) {\n-          fut.handle(new Failure<>(ErrorType.NOT_FOUND, messages.getMessage(\"10801\", modId)));\n-        } else {\n-          fut.handle(new Failure<>(gres.getType(), gres.cause()));\n-        }\n-      } else {\n-        addAndDeploy1(dd, gres.result(), fut);\n-      }\n-    });\n+    return moduleManager.get(modId).compose(gres -> addAndDeploy1(dd, gres));\n   }\n \n-  private void addAndDeploy1(DeploymentDescriptor dd, ModuleDescriptor md,\n-                             Handler<ExtendedAsyncResult<DeploymentDescriptor>> fut) {\n+  private Future<DeploymentDescriptor> addAndDeploy1(DeploymentDescriptor dd, ModuleDescriptor md) {\n \n     LaunchDescriptor launchDesc = dd.getDescriptor();\n     final String nodeId = dd.getNodeId();\n     if (nodeId == null) {\n       if (launchDesc == null) { // 3: externally deployed\n         if (dd.getInstId() == null) {\n-          fut.handle(new Failure<>(ErrorType.USER, messages.getMessage(\"10802\")));\n+          return Future.failedFuture(new OkapiError(ErrorType.USER, messages.getMessage(\"10802\")));\n         } else {\n-          add(dd, res -> { // just add it\n-            if (res.failed()) {\n-              fut.handle(new Failure<>(res.getType(), res.cause()));\n-            } else {\n-              fut.handle(new Success<>(dd));\n-            }\n-          });\n+          return add(dd).compose(x -> Future.succeededFuture(dd));\n         }\n       } else {\n-        fut.handle(new Failure<>(ErrorType.USER, messages.getMessage(\"10803\")));\n+        return Future.failedFuture(new OkapiError(ErrorType.USER, messages.getMessage(\"10803\")));\n       }\n     } else {\n       if (launchDesc == null) {\n-        addAndDeploy2(dd, md, fut, nodeId);\n+        return addAndDeploy2(dd, md, nodeId);\n       } else { // Have a launch descriptor already in dd\n-        callDeploy(nodeId, dd, fut);\n+        return callDeploy(nodeId, dd);\n       }\n     }\n   }\n \n-  private void addAndDeploy2(DeploymentDescriptor dd, ModuleDescriptor md,\n-                             Handler<ExtendedAsyncResult<DeploymentDescriptor>> fut,\n-                             String nodeId) {\n+  private Future<DeploymentDescriptor> addAndDeploy2(DeploymentDescriptor dd, ModuleDescriptor md,\n+                                                     String nodeId) {\n     String modId = dd.getSrvcId();\n     LaunchDescriptor modLaunchDesc = md.getLaunchDescriptor();\n     if (modLaunchDesc == null) {\n-      fut.handle(new Failure<>(ErrorType.USER, messages.getMessage(\"10804\", modId)));\n-    } else {\n-      dd.setDescriptor(modLaunchDesc);\n-      callDeploy(nodeId, dd, fut);\n+      return Future.failedFuture(new OkapiError(ErrorType.USER,\n+          messages.getMessage(\"10804\", modId)));\n     }\n+    dd.setDescriptor(modLaunchDesc);\n+    return callDeploy(nodeId, dd);\n   }\n \n   /**\n    * Helper to actually launch (deploy) a module on a node.\n    */\n-  private void callDeploy(String nodeId, DeploymentDescriptor dd,\n-                          Handler<ExtendedAsyncResult<DeploymentDescriptor>> fut) {\n-\n-    getNode(nodeId, nodeRes -> {\n-      if (nodeRes.failed()) {\n-        fut.handle(new Failure<>(nodeRes.getType(), nodeRes.cause()));\n-      } else {\n-        String reqData = Json.encode(dd);\n-        vertx.eventBus().request(nodeRes.result().getUrl() + \"/deploy\", reqData,\n-            deliveryOptions, ar -> {\n-              if (ar.failed()) {\n-                fut.handle(new Failure<>(ErrorType.USER, ar.cause().getMessage()));\n-              } else {\n-                String b = (String) ar.result().body();\n-                DeploymentDescriptor pmd = Json.decodeValue(b, DeploymentDescriptor.class);\n-                fut.handle(new Success<>(pmd));\n-              }\n-            });\n-      }\n+  private Future<DeploymentDescriptor> callDeploy(String nodeId, DeploymentDescriptor dd) {\n+    return getNode(nodeId).compose(nodeDescriptor -> {\n+      String reqData = Json.encode(dd);\n+      Promise<DeploymentDescriptor> promise = Promise.promise();\n+      vertx.eventBus().request(nodeDescriptor.getUrl() + \"/deploy\", reqData,\n+          deliveryOptions).onComplete(ar -> {\n+            if (ar.failed()) {\n+              promise.fail(new OkapiError(ErrorType.USER, ar.cause().getMessage()));\n+            } else {\n+              String b = (String) ar.result().body();\n+              DeploymentDescriptor pmd = Json.decodeValue(b, DeploymentDescriptor.class);\n+              promise.complete(pmd);\n+            }\n+          });\n+      return promise.future();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "667da414de694fad916f1ecaa95059ba7ae20580"}, "originalPosition": 269}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxODIwNzA5", "url": "https://github.com/folio-org/okapi/pull/963#pullrequestreview-491820709", "createdAt": "2020-09-18T22:46:15Z", "commit": {"oid": "667da414de694fad916f1ecaa95059ba7ae20580"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMjo0NjoxNVrOHUd_uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMjo0NjoxNVrOHUd_uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIyNTAxOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  futures.add(callUndeploy(dd).compose(res -> {\n          \n          \n            \n                    return deploymentStore.delete(dd.getInstId());\n          \n          \n            \n                  }).mapEmpty());\n          \n          \n            \n                  futures.add(callUndeploy(dd)\n          \n          \n            \n                      .compose(res -> deploymentStore.delete(dd.getInstId()))\n          \n          \n            \n                      .mapEmpty());", "url": "https://github.com/folio-org/okapi/pull/963#discussion_r491225019", "createdAt": "2020-09-18T22:46:15Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/main/java/org/folio/okapi/managers/DiscoveryManager.java", "diffHunk": "@@ -166,196 +126,127 @@ void addAndDeploy(DeploymentDescriptor dd,\n    *   3: No nodeId: Do not deploy at all, just record the existence (URL and instId) of the module.\n    * </p>\n    */\n-  private void addAndDeploy0(DeploymentDescriptor dd,\n-                             Handler<ExtendedAsyncResult<DeploymentDescriptor>> fut) {\n+  private Future<DeploymentDescriptor> addAndDeploy0(DeploymentDescriptor dd) {\n \n     String tmp = Json.encodePrettily(dd);\n     logger.info(\"addAndDeploy: {}\", tmp);\n     final String modId = dd.getSrvcId();\n     if (modId == null) {\n-      fut.handle(new Failure<>(ErrorType.USER, messages.getMessage(\"10800\")));\n-      return;\n+      return Future.failedFuture(new OkapiError(ErrorType.USER, messages.getMessage(\"10800\")));\n     }\n-    moduleManager.get(modId, gres -> {\n-      if (gres.failed()) {\n-        if (gres.getType() == ErrorType.NOT_FOUND) {\n-          fut.handle(new Failure<>(ErrorType.NOT_FOUND, messages.getMessage(\"10801\", modId)));\n-        } else {\n-          fut.handle(new Failure<>(gres.getType(), gres.cause()));\n-        }\n-      } else {\n-        addAndDeploy1(dd, gres.result(), fut);\n-      }\n-    });\n+    return moduleManager.get(modId).compose(gres -> addAndDeploy1(dd, gres));\n   }\n \n-  private void addAndDeploy1(DeploymentDescriptor dd, ModuleDescriptor md,\n-                             Handler<ExtendedAsyncResult<DeploymentDescriptor>> fut) {\n+  private Future<DeploymentDescriptor> addAndDeploy1(DeploymentDescriptor dd, ModuleDescriptor md) {\n \n     LaunchDescriptor launchDesc = dd.getDescriptor();\n     final String nodeId = dd.getNodeId();\n     if (nodeId == null) {\n       if (launchDesc == null) { // 3: externally deployed\n         if (dd.getInstId() == null) {\n-          fut.handle(new Failure<>(ErrorType.USER, messages.getMessage(\"10802\")));\n+          return Future.failedFuture(new OkapiError(ErrorType.USER, messages.getMessage(\"10802\")));\n         } else {\n-          add(dd, res -> { // just add it\n-            if (res.failed()) {\n-              fut.handle(new Failure<>(res.getType(), res.cause()));\n-            } else {\n-              fut.handle(new Success<>(dd));\n-            }\n-          });\n+          return add(dd).compose(x -> Future.succeededFuture(dd));\n         }\n       } else {\n-        fut.handle(new Failure<>(ErrorType.USER, messages.getMessage(\"10803\")));\n+        return Future.failedFuture(new OkapiError(ErrorType.USER, messages.getMessage(\"10803\")));\n       }\n     } else {\n       if (launchDesc == null) {\n-        addAndDeploy2(dd, md, fut, nodeId);\n+        return addAndDeploy2(dd, md, nodeId);\n       } else { // Have a launch descriptor already in dd\n-        callDeploy(nodeId, dd, fut);\n+        return callDeploy(nodeId, dd);\n       }\n     }\n   }\n \n-  private void addAndDeploy2(DeploymentDescriptor dd, ModuleDescriptor md,\n-                             Handler<ExtendedAsyncResult<DeploymentDescriptor>> fut,\n-                             String nodeId) {\n+  private Future<DeploymentDescriptor> addAndDeploy2(DeploymentDescriptor dd, ModuleDescriptor md,\n+                                                     String nodeId) {\n     String modId = dd.getSrvcId();\n     LaunchDescriptor modLaunchDesc = md.getLaunchDescriptor();\n     if (modLaunchDesc == null) {\n-      fut.handle(new Failure<>(ErrorType.USER, messages.getMessage(\"10804\", modId)));\n-    } else {\n-      dd.setDescriptor(modLaunchDesc);\n-      callDeploy(nodeId, dd, fut);\n+      return Future.failedFuture(new OkapiError(ErrorType.USER,\n+          messages.getMessage(\"10804\", modId)));\n     }\n+    dd.setDescriptor(modLaunchDesc);\n+    return callDeploy(nodeId, dd);\n   }\n \n   /**\n    * Helper to actually launch (deploy) a module on a node.\n    */\n-  private void callDeploy(String nodeId, DeploymentDescriptor dd,\n-                          Handler<ExtendedAsyncResult<DeploymentDescriptor>> fut) {\n-\n-    getNode(nodeId, nodeRes -> {\n-      if (nodeRes.failed()) {\n-        fut.handle(new Failure<>(nodeRes.getType(), nodeRes.cause()));\n-      } else {\n-        String reqData = Json.encode(dd);\n-        vertx.eventBus().request(nodeRes.result().getUrl() + \"/deploy\", reqData,\n-            deliveryOptions, ar -> {\n-              if (ar.failed()) {\n-                fut.handle(new Failure<>(ErrorType.USER, ar.cause().getMessage()));\n-              } else {\n-                String b = (String) ar.result().body();\n-                DeploymentDescriptor pmd = Json.decodeValue(b, DeploymentDescriptor.class);\n-                fut.handle(new Success<>(pmd));\n-              }\n-            });\n-      }\n+  private Future<DeploymentDescriptor> callDeploy(String nodeId, DeploymentDescriptor dd) {\n+    return getNode(nodeId).compose(nodeDescriptor -> {\n+      String reqData = Json.encode(dd);\n+      Promise<DeploymentDescriptor> promise = Promise.promise();\n+      vertx.eventBus().request(nodeDescriptor.getUrl() + \"/deploy\", reqData,\n+          deliveryOptions).onComplete(ar -> {\n+            if (ar.failed()) {\n+              promise.fail(new OkapiError(ErrorType.USER, ar.cause().getMessage()));\n+            } else {\n+              String b = (String) ar.result().body();\n+              DeploymentDescriptor pmd = Json.decodeValue(b, DeploymentDescriptor.class);\n+              promise.complete(pmd);\n+            }\n+          });\n+      return promise.future();\n     });\n   }\n \n-  void removeAndUndeploy(String srvcId, String instId,\n-                         Handler<ExtendedAsyncResult<Void>> fut) {\n-\n+  Future<Void> removeAndUndeploy(String srvcId, String instId) {\n     logger.info(\"removeAndUndeploy: srvcId {} instId {}\", srvcId, instId);\n-    deployments.get(srvcId, instId, res -> {\n-      if (res.failed()) {\n-        logger.warn(\"deployment.get failed\");\n-        fut.handle(new Failure<>(res.getType(), res.cause()));\n-      } else {\n-        List<DeploymentDescriptor> ddList = new LinkedList<>();\n-        ddList.add(res.result());\n-        removeAndUndeploy(ddList, fut);\n-      }\n+    return deployments.getNotFound(srvcId, instId).compose(res -> {\n+      List<DeploymentDescriptor> ddList = new LinkedList<>();\n+      ddList.add(res);\n+      return removeAndUndeploy(ddList);\n     });\n   }\n \n-  void removeAndUndeploy(String srvcId,\n-                         Handler<ExtendedAsyncResult<Void>> fut) {\n-\n+  Future<Void> removeAndUndeploy(String srvcId) {\n     logger.info(\"removeAndUndeploy: srvcId {}\", srvcId);\n-    deployments.get(srvcId, res -> {\n-      if (res.failed()) {\n-        logger.warn(\"deployment.get failed\");\n-        fut.handle(new Failure<>(res.getType(), res.cause()));\n-      } else {\n-        removeAndUndeploy(res.result(), fut);\n+    return deployments.get(srvcId).compose(res -> {\n+      if (res == null) {\n+        return Future.failedFuture(new OkapiError(ErrorType.NOT_FOUND, srvcId));\n       }\n+      return removeAndUndeploy(res);\n     });\n   }\n \n-  void removeAndUndeploy(Handler<ExtendedAsyncResult<Void>> fut) {\n+  Future<Void> removeAndUndeploy() {\n     logger.info(\"removeAndUndeploy all\");\n-    this.get(res -> {\n-      if (res.failed()) {\n-        fut.handle(new Failure<>(res.getType(), res.cause()));\n-      } else {\n-        removeAndUndeploy(res.result(), fut);\n-      }\n-    });\n+    return this.get().compose(res -> removeAndUndeploy(res));\n   }\n \n-  private void removeAndUndeploy(List<DeploymentDescriptor> ddList,\n-                                 Handler<ExtendedAsyncResult<Void>> fut) {\n+  private Future<Void> removeAndUndeploy(List<DeploymentDescriptor> ddList) {\n \n-    CompList<List<Void>> futures = new CompList<>(ErrorType.INTERNAL);\n+    List<Future> futures = new LinkedList<>();\n     for (DeploymentDescriptor dd : ddList) {\n-      Promise<Void> promise = Promise.promise();\n       logger.info(\"removeAndUndeploy {} {}\", dd.getSrvcId(), dd.getInstId());\n-      callUndeploy(dd, res -> {\n-        if (res.succeeded()) {\n-          deploymentStore.delete(dd.getInstId(), promise::handle);\n-        } else {\n-          promise.handle(res);\n-        }\n-      });\n-      futures.add(promise);\n+      futures.add(callUndeploy(dd).compose(res -> {\n+        return deploymentStore.delete(dd.getInstId());\n+      }).mapEmpty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "667da414de694fad916f1ecaa95059ba7ae20580"}, "originalPosition": 345}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3d767ba3a7de4ef07f2fc508611026412fffd48", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/a3d767ba3a7de4ef07f2fc508611026412fffd48", "committedDate": "2020-09-19T15:33:56Z", "message": "Rename cloneWithoutStatus to cloneLegacy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d46a252b8f6a04933e1e7733c42b6ad92619e79", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/2d46a252b8f6a04933e1e7733c42b6ad92619e79", "committedDate": "2020-09-19T15:50:04Z", "message": "Simplifications as suggested by Julian"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d80f3d437365801319c15618725083f09c61426", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/5d80f3d437365801319c15618725083f09c61426", "committedDate": "2020-09-19T15:50:21Z", "message": "More simplifications"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e850ff7fed082d65ea1a70da33a2fc358dcf4dc2", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/e850ff7fed082d65ea1a70da33a2fc358dcf4dc2", "committedDate": "2020-09-19T16:25:57Z", "message": "start+end date of install job"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db10a7fcf4c39551c2f5969bcebac8897e853e6d", "author": {"user": {"login": "hjiebsco", "name": "Hongwei Ji"}}, "url": "https://github.com/folio-org/okapi/commit/db10a7fcf4c39551c2f5969bcebac8897e853e6d", "committedDate": "2020-09-21T21:35:23Z", "message": "Merge branch 'master' into OKAPI-804-async-install"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f59ff59bbdf3a1dbe1ad43311cbcc9280a4a675", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/2f59ff59bbdf3a1dbe1ad43311cbcc9280a4a675", "committedDate": "2020-09-22T12:48:51Z", "message": "Merge branch 'master' into OKAPI-804-async-install"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0NTA3Mzgz", "url": "https://github.com/folio-org/okapi/pull/963#pullrequestreview-494507383", "createdAt": "2020-09-23T10:14:46Z", "commit": {"oid": "2f59ff59bbdf3a1dbe1ad43311cbcc9280a4a675"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMDoxNDo0NlrOHWjaZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMDoxNDo0NlrOHWjaZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQxMDkxOA==", "bodyText": "Should we mention undeploy stage here?", "url": "https://github.com/folio-org/okapi/pull/963#discussion_r493410918", "createdAt": "2020-09-23T10:14:46Z", "author": {"login": "hjiebsco"}, "path": "doc/guide.md", "diffHunk": "@@ -2621,7 +2623,77 @@ the install operation will also deploy and un-deploy as\n necessary. This will only work if the ModuleDescriptor has the\n launchDescriptor property.\n \n-### Purge\n+### Install jobs and asynchronous operations\n+\n+For Okapi 4.2.0 and later, the install operation can be asynchronous.\n+The asynchronous operation is enabled by URI parameter 'async=true'.\n+As for the \"synchronous\" operation, the dependency check is performed\n+first and install/upgrade will return 400 HTTP error upon failure.\n+\n+Following that, the install operation will create an install \"job\" on the\n+server side and return HTTP status 201 along with a location of the newly\n+created install job. The returned JSON content is defined by schema\n+([InstallJob.json](../okapi-core/src/main/raml/InstallJob.json)).\n+\n+This location can then be inspected with HTTP GET for the progress of\n+the install operation. The location is same base URI as install, but\n+with a slash + the job ID. The install job has properties such as\n+\n+ * `complete`: boolean which tells whether the job has completed\n+ * `id`: job id\n+ * `startDate`: start time of job in UTC ISO8601 format.\n+ * `endDate`: end time of job in UTC ISO8601 format (only present when complete)\n+ * `modules`: enable/disable list of modules along with status.\n+\n+Each module entry is defined by schema\n+([TenantModuleDescriptor.json](../okapi-core/src/main/raml/TenantModuleDescriptor.json)).\n+Brief list of properties:\n+\n+ * `id`: module ID\n+ * `from`: old module ID (absent if not upgrading)\n+ * `action`: enable/disable/uptodate\n+ * `stage`: the current stage of the module\n+ * `message`: present upon error (error message)\n+\n+If `message` property is present an error has occurred and `stage`\n+indicates at which stage the error occurred. Stage is one of\n+ * `pending`: module is yet to be upgraded/deployed/etc..\n+ * `deploy`: module is being deployed\n+ * `call`: module is being called via system interface, such as `_tenant`,\n+    `_tenantPermissions`, ..\n+ * `done`: module is fully upgraded", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f59ff59bbdf3a1dbe1ad43311cbcc9280a4a675"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0NTEwMTU4", "url": "https://github.com/folio-org/okapi/pull/963#pullrequestreview-494510158", "createdAt": "2020-09-23T10:18:32Z", "commit": {"oid": "2f59ff59bbdf3a1dbe1ad43311cbcc9280a4a675"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMDoxODozMlrOHWjmyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMDoxODozMlrOHWjmyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQxNDA4OA==", "bodyText": "Maybe just me, Legacy gives me an impression that this method will go away and should not be used. :)", "url": "https://github.com/folio-org/okapi/pull/963#discussion_r493414088", "createdAt": "2020-09-23T10:18:32Z", "author": {"login": "hjiebsco"}, "path": "okapi-core/src/main/java/org/folio/okapi/bean/TenantModuleDescriptor.java", "diffHunk": "@@ -58,4 +66,27 @@ public String getMessage() {\n   public void setMessage(String message) {\n     this.message = message;\n   }\n+\n+  public Stage getStage() {\n+    return stage;\n+  }\n+\n+  public void setStage(Stage stage) {\n+    this.stage = stage;\n+  }\n+\n+  /**\n+   * Clone an entry with only original tenant module information (Before async install).\n+   * @return entry\n+   */\n+  @JsonIgnore\n+  public TenantModuleDescriptor cloneLegacy() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f59ff59bbdf3a1dbe1ad43311cbcc9280a4a675"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "615d46801c285bf238d8bfdd3c112f4d65c76796", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/615d46801c285bf238d8bfdd3c112f4d65c76796", "committedDate": "2020-09-23T11:35:19Z", "message": "Describe undeploy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a8acaa3fd6756912be9ae57f9bd9dca8b97bbd0", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/8a8acaa3fd6756912be9ae57f9bd9dca8b97bbd0", "committedDate": "2020-09-23T13:57:52Z", "message": "Rename cloneLegacy to cloneWithoutStage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a76b75345e95b928fc7517fe7ae7e1e5ab373108", "author": {"user": {"login": "hjiebsco", "name": "Hongwei Ji"}}, "url": "https://github.com/folio-org/okapi/commit/a76b75345e95b928fc7517fe7ae7e1e5ab373108", "committedDate": "2020-09-23T14:54:47Z", "message": "Merge branch 'master' into OKAPI-804-async-install"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0NzU5MDEw", "url": "https://github.com/folio-org/okapi/pull/963#pullrequestreview-494759010", "createdAt": "2020-09-23T15:02:35Z", "commit": {"oid": "a76b75345e95b928fc7517fe7ae7e1e5ab373108"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNTowMjozNVrOHWzB1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNTowMjozNVrOHWzB1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY2Njc3Mg==", "bodyText": "@adamdickmeiss, I asked earlier if we support checking the status of async upgrade? You said yes. But this /upgrade endpoint method does not return location header, so how does the caller know where to track the status?", "url": "https://github.com/folio-org/okapi/pull/963#discussion_r493666772", "createdAt": "2020-09-23T15:02:35Z", "author": {"login": "hjiebsco"}, "path": "okapi-core/src/main/java/org/folio/okapi/managers/InternalModule.java", "diffHunk": "@@ -768,154 +735,121 @@ private void installModulesForTenant(ProxyContext pc, String id,\n           TenantModuleDescriptor[].class);\n       List<TenantModuleDescriptor> tm = new LinkedList<>();\n       Collections.addAll(tm, tml);\n-      tenantManager.installUpgradeModules(id, pc, options, tm, res -> {\n-        if (res.failed()) {\n-          fut.handle(new Failure<>(res.getType(), res.cause()));\n-        } else {\n-          logger.info(\"installUpgradeModules returns: {}\", Json.encodePrettily(res.result()));\n-          fut.handle(new Success<>(Json.encodePrettily(res.result())));\n-        }\n-      });\n+      UUID installId = UUID.randomUUID();\n+      return tenantManager.installUpgradeCreate(tenantId, installId.toString(), pc, options, tm)\n+          .compose(res -> {\n+            String jsonResponse = Json.encodePrettily(res);\n+            logger.info(\"installTenantModulesPost returns: {}\", jsonResponse);\n+            if (options.getAsync()) {\n+              return location(pc, installId.toString(), null, jsonResponse);\n+            } else {\n+              return Future.succeededFuture(jsonResponse);\n+            }\n+          });\n     } catch (DecodeException ex) {\n-      fut.handle(new Failure<>(ErrorType.USER, ex));\n+      return Future.failedFuture(new OkapiError(ErrorType.USER, ex.getMessage()));\n     }\n   }\n \n-  private void upgradeModulesForTenant(ProxyContext pc, String id,\n-                                       Handler<ExtendedAsyncResult<String>> fut) {\n+  private Future<String> installTenantModulesGetList(String tenantId) {\n+    return tenantManager.installUpgradeGetList(tenantId)\n+        .compose(installJobList -> Future.succeededFuture(Json.encodePrettily(installJobList)));\n+  }\n+\n+  private Future<String> installTenantModulesGet(String tenantId, String installId) {\n+    return tenantManager.installUpgradeGet(tenantId, installId)\n+        .compose(installJob -> Future.succeededFuture(Json.encodePrettily(installJob)));\n+  }\n+\n+  private Future<String> upgradeModulesForTenant(ProxyContext pc, String tenantId) {\n \n     TenantInstallOptions options = ModuleUtil.createTenantOptions(pc.getCtx().request());\n-    tenantManager.installUpgradeModules(id, pc, options, null, res -> {\n-      if (res.failed()) {\n-        fut.handle(new Failure<>(res.getType(), res.cause()));\n-      } else {\n-        logger.info(\"installUpgradeModules returns: {}\", Json.encodePrettily(res.result()));\n-        fut.handle(new Success<>(Json.encodePrettily(res.result())));\n-      }\n-    });\n+    UUID installId = UUID.randomUUID();\n+    return tenantManager.installUpgradeCreate(tenantId, installId.toString(), pc, options, null)\n+        .compose(res -> Future.succeededFuture(Json.encodePrettily(res)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a76b75345e95b928fc7517fe7ae7e1e5ab373108"}, "originalPosition": 325}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c85e2c7162b01c80a5535ffa3c5b8dc5bb0ca85f", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/c85e2c7162b01c80a5535ffa3c5b8dc5bb0ca85f", "committedDate": "2020-09-24T08:26:03Z", "message": "Upgrade with async option"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1OTUxODIw", "url": "https://github.com/folio-org/okapi/pull/963#pullrequestreview-495951820", "createdAt": "2020-09-24T21:07:38Z", "commit": {"oid": "c85e2c7162b01c80a5535ffa3c5b8dc5bb0ca85f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMTowNzozOFrOHXsqnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMTowNzozOFrOHXsqnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDYxMTEwMQ==", "bodyText": "Technically right. Maybe a little bit counter intuitive. Mentioning this in the guide should help.", "url": "https://github.com/folio-org/okapi/pull/963#discussion_r494611101", "createdAt": "2020-09-24T21:07:38Z", "author": {"login": "hjiebsco"}, "path": "okapi-core/src/main/java/org/folio/okapi/managers/InternalModule.java", "diffHunk": "@@ -766,7 +766,16 @@ public static ModuleDescriptor moduleDescriptor(String okapiVersion) {\n     TenantInstallOptions options = ModuleUtil.createTenantOptions(pc.getCtx().request());\n     UUID installId = UUID.randomUUID();\n     return tenantManager.installUpgradeCreate(tenantId, installId.toString(), pc, options, null)\n-        .compose(res -> Future.succeededFuture(Json.encodePrettily(res)));\n+        .compose(res -> {\n+          String jsonResponse = Json.encodePrettily(res);\n+          if (options.getAsync()) {\n+            // using same location as install\n+            String baseUri = pc.getCtx().request().uri().replace(\"/upgrade\", \"/install\");\n+            return location(pc, installId.toString(), baseUri, jsonResponse);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c85e2c7162b01c80a5535ffa3c5b8dc5bb0ca85f"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1OTUzOTY2", "url": "https://github.com/folio-org/okapi/pull/963#pullrequestreview-495953966", "createdAt": "2020-09-24T21:11:06Z", "commit": {"oid": "c85e2c7162b01c80a5535ffa3c5b8dc5bb0ca85f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "666f69421b39d52d86329e1d8c810adecb3d26d5", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/666f69421b39d52d86329e1d8c810adecb3d26d5", "committedDate": "2020-09-25T08:14:44Z", "message": "Merge branch 'master' into OKAPI-804-async-install"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e134ecdb74efe4877077ad81cbed19d42cf482aa", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/e134ecdb74efe4877077ad81cbed19d42cf482aa", "committedDate": "2020-09-25T08:40:40Z", "message": "Rename stage call -> invoke\n\nMakes more sense since, the invoke paramerter already controls\nwhether Okapi invokes modules at all (system interfaces)."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f422f5c8baf1ce0dc0d8de04034097a9d7d23833", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/f422f5c8baf1ce0dc0d8de04034097a9d7d23833", "committedDate": "2020-09-25T08:41:57Z", "message": "Jobs are both install+upgrade things"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "056ce4a114d55ee9fb5fb6936ff7cdb0561f81a6", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/056ce4a114d55ee9fb5fb6936ff7cdb0561f81a6", "committedDate": "2020-08-10T10:56:33Z", "message": "Parallel auto deploy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30d5e08ccd6f1ac05e12e4644b4d214174ae7c55", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/30d5e08ccd6f1ac05e12e4644b4d214174ae7c55", "committedDate": "2020-08-24T14:20:43Z", "message": "Futurisation work"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5968c8f0358c6c54b1bbd2e17f2723bf7e37026b", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/5968c8f0358c6c54b1bbd2e17f2723bf7e37026b", "committedDate": "2020-08-25T14:23:33Z", "message": "Merge branch 'master' into OKAPI-804-async-install"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "145bbaf54b4c6568a7ac8b273bd30c6fdcc7cabb", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/145bbaf54b4c6568a7ac8b273bd30c6fdcc7cabb", "committedDate": "2020-08-25T16:27:12Z", "message": "Futurisation work"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ba5faba62f61c72f90a2d6e7e18e1555cd7fb06", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/5ba5faba62f61c72f90a2d6e7e18e1555cd7fb06", "committedDate": "2020-08-25T17:03:54Z", "message": "Futurisation work"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "607b9fb9bd8b80f8a9752f5cf37fa180ec10904f", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/607b9fb9bd8b80f8a9752f5cf37fa180ec10904f", "committedDate": "2020-08-26T09:08:16Z", "message": "Futurisation work"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5a3fd8f563fb81be075a8946028afeec3abcfce", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/a5a3fd8f563fb81be075a8946028afeec3abcfce", "committedDate": "2020-08-26T09:25:23Z", "message": "Futurisation work"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "faae563054e42175a78e7624c8437d8be4860890", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/faae563054e42175a78e7624c8437d8be4860890", "committedDate": "2020-08-26T15:24:42Z", "message": "InstallJob, async option"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "701f73e256d963c64d553010f7a771a63800765e", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/701f73e256d963c64d553010f7a771a63800765e", "committedDate": "2020-08-27T09:46:25Z", "message": "AsyncFactory.create returns Future"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a09b96ab6e24406fe33c402656443556fd14776", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/6a09b96ab6e24406fe33c402656443556fd14776", "committedDate": "2020-08-27T10:23:15Z", "message": "addOrReplace returns Future"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc1d912bb3fc556977573a112cf8dcf923180f67", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/dc1d912bb3fc556977573a112cf8dcf923180f67", "committedDate": "2020-08-27T10:24:44Z", "message": "Missing Future"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c11ddf1e2d3c7788967dff66976bb173fd68e759", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/c11ddf1e2d3c7788967dff66976bb173fd68e759", "committedDate": "2020-08-27T10:29:20Z", "message": "LockedTypedMap1 put returns Future"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24e4313c9a64c0f7251b7ada9497bf59182a1a37", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/24e4313c9a64c0f7251b7ada9497bf59182a1a37", "committedDate": "2020-08-27T14:59:36Z", "message": "First kick of real async install"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dfdaef90306b6daffe0654f2807cc8681e0d639d", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/dfdaef90306b6daffe0654f2807cc8681e0d639d", "committedDate": "2020-08-27T15:25:51Z", "message": "Fewer args"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac9422186c5b88a84821a5195988ff5149d2ecb8", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/ac9422186c5b88a84821a5195988ff5149d2ecb8", "committedDate": "2020-08-27T15:26:01Z", "message": "Unused imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11e699cf6b5cddab2662518c4ffd39047999cb48", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/11e699cf6b5cddab2662518c4ffd39047999cb48", "committedDate": "2020-08-27T15:26:39Z", "message": "Uselogs logs; use Future"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "117623ff8d4f2e90683a4f556e32eea43eecfd88", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/117623ff8d4f2e90683a4f556e32eea43eecfd88", "committedDate": "2020-08-27T15:27:11Z", "message": "Merge branch 'master' into OKAPI-804-async-install"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f360ef6f9937adabec3e2874190a06eddf46513a", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/f360ef6f9937adabec3e2874190a06eddf46513a", "committedDate": "2020-08-28T10:45:30Z", "message": "Futurisation work"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b1830cbb905a29675b2e0818493df0bf9f8fb71", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/4b1830cbb905a29675b2e0818493df0bf9f8fb71", "committedDate": "2020-08-28T11:32:22Z", "message": "Futurisation work (DOES NOT PASS)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "423b7b5db188de565119f5c74e62fd67fa5f5b55", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/423b7b5db188de565119f5c74e62fd67fa5f5b55", "committedDate": "2020-08-28T13:45:46Z", "message": "Futurisation work"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d890a121e050e5d9628d0b92c122fcd6a874562", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/6d890a121e050e5d9628d0b92c122fcd6a874562", "committedDate": "2020-08-28T15:07:34Z", "message": "Futurisation work"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3baee55419eb7c5ff505d3d2b7e3f78fe09e8a16", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/3baee55419eb7c5ff505d3d2b7e3f78fe09e8a16", "committedDate": "2020-08-28T15:38:55Z", "message": "Check tenantId for install GET"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eddfca414c74d8bdeb5b7fb8c885406fc80cb87a", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/eddfca414c74d8bdeb5b7fb8c885406fc80cb87a", "committedDate": "2020-08-31T10:33:30Z", "message": "Merge branch 'master' into OKAPI-804-async-install"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d60ce77d268b35e9e9335a9e80758a9bdbd1f8b0", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/d60ce77d268b35e9e9335a9e80758a9bdbd1f8b0", "committedDate": "2020-08-31T16:24:24Z", "message": "Futurisation work"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc5aebd614d90f1729e3a6879c2262f83eacea23", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/cc5aebd614d90f1729e3a6879c2262f83eacea23", "committedDate": "2020-08-31T16:27:32Z", "message": "Unused imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0743f282eee069d5ae84fca0ccb37778d9f3c994", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/0743f282eee069d5ae84fca0ccb37778d9f3c994", "committedDate": "2020-08-31T16:39:41Z", "message": "Unused import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d876967c80607cdd13d57a521df1ca213d5ffe9", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/0d876967c80607cdd13d57a521df1ca213d5ffe9", "committedDate": "2020-09-01T10:18:46Z", "message": "init method for storage APIs returns Future"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85b4825cc5f7a29e7e16e385f11dac1b2ff048f5", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/85b4825cc5f7a29e7e16e385f11dac1b2ff048f5", "committedDate": "2020-09-01T14:16:59Z", "message": "Storage interfaces uses Future"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2594fcbbb38eab3f353ed82ce8465f45ff01e6ba", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/2594fcbbb38eab3f353ed82ce8465f45ff01e6ba", "committedDate": "2020-09-02T07:47:01Z", "message": "Remove redundant log"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e408e0d36d677167dba0b4cf850118f6f5c68172", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/e408e0d36d677167dba0b4cf850118f6f5c68172", "committedDate": "2020-09-02T07:47:09Z", "message": "Unused imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f00466c124062b39d053a26f2e3f64ea0a5ae0eb", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/f00466c124062b39d053a26f2e3f64ea0a5ae0eb", "committedDate": "2020-09-02T07:52:36Z", "message": "Remove unused ModuleStore.update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae490adc9cf15c2f73304e14b844453254679955", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/ae490adc9cf15c2f73304e14b844453254679955", "committedDate": "2020-09-02T08:25:30Z", "message": "Fix some logs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34ff8384fd6cefa65f58fff588feb90fefaece75", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/34ff8384fd6cefa65f58fff588feb90fefaece75", "committedDate": "2020-09-02T09:12:41Z", "message": "Sequental test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e45894e87baab92bb169af28fabbc2eb8db84ff", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/0e45894e87baab92bb169af28fabbc2eb8db84ff", "committedDate": "2020-09-02T09:42:46Z", "message": "Get rid of LockedStringMap.getString with ExtendedAsyncResult"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5538354cdffe2f6aa5facfbeb60041fe462ca3a8", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/5538354cdffe2f6aa5facfbeb60041fe462ca3a8", "committedDate": "2020-09-02T09:53:41Z", "message": "Get rid of LockedStringMap.getPrefix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ede1d56c0c03a27c06b5462a22d766547d437883", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/ede1d56c0c03a27c06b5462a22d766547d437883", "committedDate": "2020-09-02T10:24:04Z", "message": "Get fid of LockedStringMap.getKeys with ExtendedAsyncResult"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "604128cf5bdeccbf64e6da4c5ae583eeb10859a0", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/604128cf5bdeccbf64e6da4c5ae583eeb10859a0", "committedDate": "2020-09-02T10:41:09Z", "message": "Simplify"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1dc52d4643c3db9374c388d0a95c996d45c00ab4", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/1dc52d4643c3db9374c388d0a95c996d45c00ab4", "committedDate": "2020-09-02T10:41:32Z", "message": "TenantManager.startTimers returns Future"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc1f3e023510f4ba473ef272042bde52057e0cb0", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/bc1f3e023510f4ba473ef272042bde52057e0cb0", "committedDate": "2020-09-02T13:43:09Z", "message": "Sandbox for futurisation work - does not pass"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0207d6cafe5bca9057d1e12c9145febc58ba93ac", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/0207d6cafe5bca9057d1e12c9145febc58ba93ac", "committedDate": "2020-09-03T11:25:47Z", "message": "Fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44038675c8030a7eaac627e6b41e9f62f001ac48", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/44038675c8030a7eaac627e6b41e9f62f001ac48", "committedDate": "2020-09-03T11:50:30Z", "message": "Partial DeploymentManager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b1450069e4a23c364bcb499fbb72aeea16e0681", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/9b1450069e4a23c364bcb499fbb72aeea16e0681", "committedDate": "2020-09-03T12:34:46Z", "message": "EnvManager uses Future"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b0dec3a515456d48b184538430be24f5a777c79", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/0b0dec3a515456d48b184538430be24f5a777c79", "committedDate": "2020-09-03T13:30:47Z", "message": "Further slim-down of String Maps"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c9162b43db4fff7c95e9db617b35af53e35d747", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/5c9162b43db4fff7c95e9db617b35af53e35d747", "committedDate": "2020-09-03T14:58:18Z", "message": "Futurisation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35f3219d921e01452da590464f705b6c973f9076", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/35f3219d921e01452da590464f705b6c973f9076", "committedDate": "2020-09-03T15:39:02Z", "message": "LockedStringMap converted"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66145e07c5b5bbab2bd25dd59011a9f0a887a133", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/66145e07c5b5bbab2bd25dd59011a9f0a887a133", "committedDate": "2020-09-03T16:30:09Z", "message": "Passes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64a97a1c2fb2a345d71a0d0b2345fbc63597a23b", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/64a97a1c2fb2a345d71a0d0b2345fbc63597a23b", "committedDate": "2020-09-03T16:47:20Z", "message": "Goodbye CompList"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0d2511770f8d124059f2c3bd61536d9406c5b0c", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/d0d2511770f8d124059f2c3bd61536d9406c5b0c", "committedDate": "2020-09-03T16:48:21Z", "message": "Merge remote-tracking branch 'origin/master' into OKAPI-804-async-install"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2756e6f3f49efa760da23cc33778a5e79c140c0", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/a2756e6f3f49efa760da23cc33778a5e79c140c0", "committedDate": "2020-09-03T17:23:27Z", "message": "Unused import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "edf79aa2a5b32fc098e99446a1cb2ba043b3c358", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/edf79aa2a5b32fc098e99446a1cb2ba043b3c358", "committedDate": "2020-09-03T17:23:54Z", "message": "Make msg, type final"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4dfc1fef30bc5678845655e2dffcca0368ec84e5", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/4dfc1fef30bc5678845655e2dffcca0368ec84e5", "committedDate": "2020-09-03T17:24:09Z", "message": "PullManager futurized"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ded7603ef355ef2bad34be1dbc301ffaec2bcee", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/0ded7603ef355ef2bad34be1dbc301ffaec2bcee", "committedDate": "2020-09-03T17:28:08Z", "message": "Remove useless test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c44e0cc6aa6dc49f636ad2a70109f3bde0fd6ca3", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/c44e0cc6aa6dc49f636ad2a70109f3bde0fd6ca3", "committedDate": "2020-09-04T08:30:06Z", "message": "ModuleManager.createList returns Future"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3a21f48ee098a704fcbf4c1c71eae4d545fb673", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/c3a21f48ee098a704fcbf4c1c71eae4d545fb673", "committedDate": "2020-09-04T08:51:42Z", "message": "ModuleManager futurized"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1fed28d9411f8bd97578736f3570e82cee05ec0", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/b1fed28d9411f8bd97578736f3570e82cee05ec0", "committedDate": "2020-09-04T09:17:00Z", "message": "Some work on TenantManager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1b0e6dc6de0b0a885d44b00129e7628a73fa242", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/e1b0e6dc6de0b0a885d44b00129e7628a73fa242", "committedDate": "2020-09-04T09:55:42Z", "message": "Rework of tenant interface handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d81eed3e245c6cbec6bf16c7c3e47086f4263b82", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/d81eed3e245c6cbec6bf16c7c3e47086f4263b82", "committedDate": "2020-09-04T10:59:10Z", "message": "Systemcalls, permissions loading refactored"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e4a437ea7f84724bbd59314e764f3776e23a139", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/5e4a437ea7f84724bbd59314e764f3776e23a139", "committedDate": "2020-09-04T11:23:22Z", "message": "DepResolution futurized"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8bb048b63a5bdce4da3bdbb52d2c7e1590569d79", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/8bb048b63a5bdce4da3bdbb52d2c7e1590569d79", "committedDate": "2020-09-04T12:04:18Z", "message": "TenanManager no longer uses ExtendedAsyncResult"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67f0d079f75c6bb22a1303a8c28d16d354c7b887", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/67f0d079f75c6bb22a1303a8c28d16d354c7b887", "committedDate": "2020-09-04T12:19:45Z", "message": "ProxyService no longer uses ExtendedAsyncResult"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a53881da4782f0320d36920c470ceadaec95a7a5", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/a53881da4782f0320d36920c470ceadaec95a7a5", "committedDate": "2020-09-04T12:32:03Z", "message": "Unused imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be8ee455616d19a802a1139557ec72352d543cfb", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/be8ee455616d19a802a1139557ec72352d543cfb", "committedDate": "2020-09-04T12:32:33Z", "message": "No longer necessary asyncAssertSuccess for ExtendedAsyncResult"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46fc2eee3c6b7c5feca9d54799ea902740279374", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/46fc2eee3c6b7c5feca9d54799ea902740279374", "committedDate": "2020-09-04T18:03:58Z", "message": "One stmt in lambda"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "005fd4abbe3f826cd3db53f67770a0be91e216b6", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/005fd4abbe3f826cd3db53f67770a0be91e216b6", "committedDate": "2020-09-04T18:04:11Z", "message": "Use getNotFound"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "edcd6bfabcc7a01bc37b84eabbb455d1ff6b292b", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/edcd6bfabcc7a01bc37b84eabbb455d1ff6b292b", "committedDate": "2020-09-05T07:32:31Z", "message": "Simplify TenantStorePostgres.updateModules"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "087b38c27b1d7313d4e7f5a201e17eb715d297ce", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/087b38c27b1d7313d4e7f5a201e17eb715d297ce", "committedDate": "2020-09-07T08:51:40Z", "message": "Missing return stmts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6cc72a001dde84bb93f12709f4b4b44fdfffdb63", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/6cc72a001dde84bb93f12709f4b4b44fdfffdb63", "committedDate": "2020-09-07T09:12:45Z", "message": "TenantModuleDescriptor clone without status"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f4175602127a0e1080fe16609ae223683ba6545", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/8f4175602127a0e1080fe16609ae223683ba6545", "committedDate": "2020-09-07T09:39:45Z", "message": "TenantManager.runJob returns Future"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce4d4b3b0427debd6e225f3bdca5fa959839342f", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/ce4d4b3b0427debd6e225f3bdca5fa959839342f", "committedDate": "2020-09-07T10:12:00Z", "message": "Refactor out enableAndDisableModuleFut"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31017a4c8fce9decff57a84d2f04b0742809ed9b", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/31017a4c8fce9decff57a84d2f04b0742809ed9b", "committedDate": "2020-09-07T10:12:14Z", "message": "Test tenant delete"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66a32cf348d9412e10f7f38d260d40fb70de77dc", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/66a32cf348d9412e10f7f38d260d40fb70de77dc", "committedDate": "2020-09-07T10:39:50Z", "message": "Refactor a few helpers into one"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0380d8befd237766a1d1284315215ddfc1198fd2", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/0380d8befd237766a1d1284315215ddfc1198fd2", "committedDate": "2020-09-07T10:54:08Z", "message": "Break long line"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4ae3eeca9b83abea3fcee00ff62f2c3a1ffeec5", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/e4ae3eeca9b83abea3fcee00ff62f2c3a1ffeec5", "committedDate": "2020-09-07T14:40:02Z", "message": "okapi-core no longer makes direct use of ExtendedAsyncResult"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bea75d782ef4cf91b7ec281a50712212fecf71eb", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/bea75d782ef4cf91b7ec281a50712212fecf71eb", "committedDate": "2020-09-09T11:46:51Z", "message": "Fix not found message for Install get; set status message for module"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89a8d903d268f8ef0eb54607412136be892799b8", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/89a8d903d268f8ef0eb54607412136be892799b8", "committedDate": "2020-09-09T14:16:54Z", "message": "ignoreErrors=true OKAPI-845"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c871e58403ffd648614959e64435f779908130ee", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/c871e58403ffd648614959e64435f779908130ee", "committedDate": "2020-09-09T14:33:57Z", "message": "Break line"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "929543765cb0136ce62051d66923050116f9885b", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/929543765cb0136ce62051d66923050116f9885b", "committedDate": "2020-09-10T08:46:57Z", "message": "Get all install jobs; permission bit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56593949f7a08f5b2ca74f9a035acca990915814", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/56593949f7a08f5b2ca74f9a035acca990915814", "committedDate": "2020-09-10T08:48:04Z", "message": "Unused import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "135fde3635fa1983b8866811ab17beb19bfd369d", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/135fde3635fa1983b8866811ab17beb19bfd369d", "committedDate": "2020-09-10T09:21:46Z", "message": "id part of InstallJob object"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45ed071ed8d7670ae4a98e663b0bb75224861421", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/45ed071ed8d7670ae4a98e663b0bb75224861421", "committedDate": "2020-09-10T10:13:49Z", "message": "Store date in install job"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9c617cdaca4fe88183694c82902860b87ce5ca3", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/e9c617cdaca4fe88183694c82902860b87ce5ca3", "committedDate": "2020-09-10T10:14:54Z", "message": "Unused import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e49ad0ab53bccc8582679d1b6e91960fb302c004", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/e49ad0ab53bccc8582679d1b6e91960fb302c004", "committedDate": "2020-09-10T12:23:58Z", "message": "Some documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07422163c4de8975b18f474608f41d3162961cab", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/07422163c4de8975b18f474608f41d3162961cab", "committedDate": "2020-09-10T12:46:00Z", "message": "Rename status to stage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b9e920266bb9677d2a210f1d1242d020783b41e", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/9b9e920266bb9677d2a210f1d1242d020783b41e", "committedDate": "2020-09-10T13:25:17Z", "message": "More descriptive section names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83acc1ba758d93258d4ae68701d8160d17c0b568", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/83acc1ba758d93258d4ae68701d8160d17c0b568", "committedDate": "2020-09-11T08:55:55Z", "message": "Merge branch 'master' into OKAPI-804-async-install"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13093b08de7ead39731a2c879fb1b2321a24b532", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/13093b08de7ead39731a2c879fb1b2321a24b532", "committedDate": "2020-09-11T11:41:45Z", "message": "use NotFound version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "697e65d09fc959f56936fd51dc3a35bd3f469051", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/697e65d09fc959f56936fd51dc3a35bd3f469051", "committedDate": "2020-09-11T11:42:14Z", "message": "More coverage of LockedStringMap"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "154babbca3d4568d349798de664738b7fe92ed52", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/154babbca3d4568d349798de664738b7fe92ed52", "committedDate": "2020-09-11T12:00:32Z", "message": "Long shot"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c49ff628fb103563c51317cbd40b9d5c6d0a449", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/8c49ff628fb103563c51317cbd40b9d5c6d0a449", "committedDate": "2020-09-11T15:29:55Z", "message": "Merge remote-tracking branch 'origin/master' into OKAPI-804-async-install"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07dc1527876b25e2217fcc29fd4839e9ddbcbe98", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/07dc1527876b25e2217fcc29fd4839e9ddbcbe98", "committedDate": "2020-09-12T08:00:18Z", "message": "Merge branch 'master' into OKAPI-804-async-install"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6bda3ec926d651d69e5a5075a44c7b00867f3c54", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/6bda3ec926d651d69e5a5075a44c7b00867f3c54", "committedDate": "2020-09-14T05:59:06Z", "message": "Merge branch 'OKAPI-804-async-install' of github.com:folio-org/okapi into OKAPI-804-async-install"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2aa18234cad4be680c6fe9201fc7cf5a1306437f", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/2aa18234cad4be680c6fe9201fc7cf5a1306437f", "committedDate": "2020-09-14T06:36:51Z", "message": "Wait for map to be initialized; fixes 0 ptr exception"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60a521c1f3f3b6f1e5fc013c718c6a6b20eb0832", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/60a521c1f3f3b6f1e5fc013c718c6a6b20eb0832", "committedDate": "2020-09-14T06:39:05Z", "message": "Clean up useless logs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5NTk1OTE3", "url": "https://github.com/folio-org/okapi/pull/963#pullrequestreview-489595917", "createdAt": "2020-09-16T12:57:40Z", "commit": {"oid": "60a521c1f3f3b6f1e5fc013c718c6a6b20eb0832"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMjo1Nzo0MFrOHSvjDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMjo1Nzo0MFrOHSvjDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQxNTQzOA==", "bodyText": "The default value is missing. We need it to display on https://dev.folio.org/reference/api/#okapi", "url": "https://github.com/folio-org/okapi/pull/963#discussion_r489415438", "createdAt": "2020-09-16T12:57:40Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/main/raml/okapi.raml", "diffHunk": "@@ -790,10 +815,18 @@ types:\n           must be deployed (optionally) and enabled/disabled by the existing\n           tenants-modules CRUD service.\n         queryParameters:\n+          async:\n+            description: Whether to install in the background\n+            type: boolean\n+            required: false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60a521c1f3f3b6f1e5fc013c718c6a6b20eb0832"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5NTk2MTg0", "url": "https://github.com/folio-org/okapi/pull/963#pullrequestreview-489596184", "createdAt": "2020-09-16T12:57:59Z", "commit": {"oid": "60a521c1f3f3b6f1e5fc013c718c6a6b20eb0832"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMjo1ODowMFrOHSvj4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMjo1ODowMFrOHSvj4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQxNTY1MQ==", "bodyText": "The default value is missing. We need it to display on https://dev.folio.org/reference/api/#okapi", "url": "https://github.com/folio-org/okapi/pull/963#discussion_r489415651", "createdAt": "2020-09-16T12:58:00Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/main/raml/okapi.raml", "diffHunk": "@@ -790,10 +815,18 @@ types:\n           must be deployed (optionally) and enabled/disabled by the existing\n           tenants-modules CRUD service.\n         queryParameters:\n+          async:\n+            description: Whether to install in the background\n+            type: boolean\n+            required: false\n           deploy:\n             description: Whether to deploy (or undeploy if disabling)\n             type: boolean\n             required: false\n+          ignoreErrors:\n+            description: Whether to ignore module init errors\n+            type: boolean\n+            required: false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60a521c1f3f3b6f1e5fc013c718c6a6b20eb0832"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5NTk5Mjcy", "url": "https://github.com/folio-org/okapi/pull/963#pullrequestreview-489599272", "createdAt": "2020-09-16T13:01:25Z", "commit": {"oid": "60a521c1f3f3b6f1e5fc013c718c6a6b20eb0832"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMzowMToyNVrOHSvtPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMzowMToyNVrOHSvtPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQxODA0NA==", "bodyText": "Should be more verbose what \"ignore\" means. The complete explanation that exists in guide.md should be included in the description here to show on the primary documentation site https://dev.folio.org/reference/api/#okapi", "url": "https://github.com/folio-org/okapi/pull/963#discussion_r489418044", "createdAt": "2020-09-16T13:01:25Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/main/raml/okapi.raml", "diffHunk": "@@ -790,10 +815,18 @@ types:\n           must be deployed (optionally) and enabled/disabled by the existing\n           tenants-modules CRUD service.\n         queryParameters:\n+          async:\n+            description: Whether to install in the background\n+            type: boolean\n+            required: false\n           deploy:\n             description: Whether to deploy (or undeploy if disabling)\n             type: boolean\n             required: false\n+          ignoreErrors:\n+            description: Whether to ignore module init errors", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60a521c1f3f3b6f1e5fc013c718c6a6b20eb0832"}, "originalPosition": 52}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b826183331b7dce9faca8143da31af5ea4ef66b", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/7b826183331b7dce9faca8143da31af5ea4ef66b", "committedDate": "2020-09-16T15:29:57Z", "message": "Add default value for all boolean parameters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60b7ff1effa5d2ae1ff4c477252b2197ed0459a2", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/60b7ff1effa5d2ae1ff4c477252b2197ed0459a2", "committedDate": "2020-09-16T15:35:57Z", "message": "Copy description of ignoreErrors from the guide\n\nAnd add them to upgrade as well."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf5ab7bfcb9304049cfd2b8b53bba92703464963", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/bf5ab7bfcb9304049cfd2b8b53bba92703464963", "committedDate": "2020-09-17T14:13:35Z", "message": "One more compose"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwNjc0MTk1", "url": "https://github.com/folio-org/okapi/pull/963#pullrequestreview-490674195", "createdAt": "2020-09-17T14:41:41Z", "commit": {"oid": "bf5ab7bfcb9304049cfd2b8b53bba92703464963"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDo0MTo0MVrOHTlxwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDo0MTo0MVrOHTlxwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDMwMzkzNg==", "bodyText": "Did you intentionally re-use this permission?", "url": "https://github.com/folio-org/okapi/pull/963#discussion_r490303936", "createdAt": "2020-09-17T14:41:41Z", "author": {"login": "craigmcnally"}, "path": "okapi-core/src/main/java/org/folio/okapi/managers/InternalModule.java", "diffHunk": "@@ -256,11 +254,21 @@ public static ModuleDescriptor moduleDescriptor(String okapiVersion) {\n         + \"    \\\"permissionsRequired\\\" : [ \\\"okapi.proxy.tenants.upgrade.post\\\" ], \"\n         + \"    \\\"type\\\" : \\\"internal\\\" \"\n         + \"   }, {\"\n+        + \"    \\\"methods\\\" :  [ \\\"GET\\\" ],\"\n+        + \"    \\\"pathPattern\\\" : \\\"/_/proxy/tenants/{tenantId}/install\\\",\"\n+        + \"    \\\"permissionsRequired\\\" : [ \\\"okapi.proxy.tenants.install.get\\\" ], \"\n+        + \"    \\\"type\\\" : \\\"internal\\\" \"\n+        + \"   }, {\"\n         + \"    \\\"methods\\\" :  [ \\\"POST\\\" ],\"\n         + \"    \\\"pathPattern\\\" : \\\"/_/proxy/tenants/{tenantId}/install\\\",\"\n         + \"    \\\"permissionsRequired\\\" : [ \\\"okapi.proxy.tenants.install.post\\\" ], \"\n         + \"    \\\"type\\\" : \\\"internal\\\" \"\n         + \"   }, {\"\n+        + \"    \\\"methods\\\" :  [ \\\"GET\\\" ],\"\n+        + \"    \\\"pathPattern\\\" : \\\"/_/proxy/tenants/{tenantId}/install/{installId}\\\",\"\n+        + \"    \\\"permissionsRequired\\\" : [ \\\"okapi.proxy.tenants.install.get\\\" ], \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf5ab7bfcb9304049cfd2b8b53bba92703464963"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2818, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}