{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2MDMxMzY2", "number": 958, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNjoyMjozNVrOEXs-Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNjoyMjozNVrOEXs-Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjg5NTM4OnYy", "diffSide": "RIGHT", "path": "okapi-core/src/main/java/org/folio/okapi/util/MetricsHelper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNjoyMjozNVrOG_o79A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMzowODoyOVrOG_134A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM4NDE4MA==", "bodyText": "There is no need to create an Optional for the sole purpose of providing a default value for null.\nThere exist several idioms for this:\n\nString.toString(influxUrl, \"http://localhost:8086\")\nObject.toString(influxUrl, \"http://localhost:8086\")\nStringUtils.defaultString(influxUrl, \"http://localhost:8086\")\nObjectUtils.firstNonNull(influxUrl, \"http://localhost:8086\")\n\n(There are 5 such Optional instances in this file.)", "url": "https://github.com/folio-org/okapi/pull/958#discussion_r469384180", "createdAt": "2020-08-12T16:22:35Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/main/java/org/folio/okapi/util/MetricsHelper.java", "diffHunk": "@@ -0,0 +1,216 @@\n+package org.folio.okapi.util;\n+\n+import io.micrometer.core.instrument.Counter;\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.Tag;\n+import io.micrometer.core.instrument.Timer;\n+import io.micrometer.core.instrument.Timer.Sample;\n+import io.micrometer.core.instrument.simple.SimpleMeterRegistry;\n+import io.vertx.core.VertxOptions;\n+import io.vertx.micrometer.MicrometerMetricsOptions;\n+import io.vertx.micrometer.VertxInfluxDbOptions;\n+import io.vertx.micrometer.backends.BackendRegistries;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import org.apache.logging.log4j.Logger;\n+import org.folio.okapi.bean.ModuleInstance;\n+import org.folio.okapi.common.OkapiLogger;\n+\n+/**\n+ * Metrics handling.\n+ */\n+public class MetricsHelper {\n+\n+  private static final Logger logger = OkapiLogger.get();\n+\n+  private static final String METRICS_PREFIX = \"org.folio.okapi\";\n+  private static final String METRICS_HTTP = METRICS_PREFIX + \".http\";\n+  private static final String METRICS_HTTP_SERVER = METRICS_HTTP + \".server\";\n+  private static final String METRICS_HTTP_CLIENT = METRICS_HTTP + \".client\";\n+  private static final String METRICS_HTTP_SERVER_PROCESSING_TIME = METRICS_HTTP_SERVER\n+      + \".processingTime\";\n+  private static final String METRICS_HTTP_CLIENT_RESPONSE_TIME = METRICS_HTTP_CLIENT\n+      + \".responseTime\";\n+  private static final String METRICS_HTTP_CLIENT_ERRORS = METRICS_HTTP_CLIENT\n+      + \".errors\";\n+\n+  private static final String TAG_HOST = \"host\";\n+  private static final String TAG_TENANT = \"tenant\";\n+  private static final String TAG_CODE = \"code\";\n+  private static final String TAG_METHOD = \"method\";\n+  private static final String TAG_MODULE = \"module\";\n+  private static final String TAG_URL = \"url\";\n+  private static final String TAG_PHASE = \"phase\";\n+  private static final String TAG_EMPTY = \"null\";\n+\n+  static final String HOST_UNKNOWN = \"unknown\";\n+\n+  private static boolean enabled = false;\n+  private static MeterRegistry registry;\n+\n+  private MetricsHelper() {\n+  }\n+\n+  /**\n+   * Config metrics options - specifically use InfluxDb micrometer options.\n+   *\n+   * @param vertxOptions   - {@link VertxOptions}\n+   * @param influxUrl      - default to http://localhost:8086\n+   * @param influxDbName   - default to okapi\n+   * @param influxUserName - default to null\n+   * @param influxPassword - default to null\n+   */\n+  public static void config(VertxOptions vertxOptions, String influxUrl,\n+      String influxDbName, String influxUserName, String influxPassword) {\n+    VertxInfluxDbOptions influxDbOptions = new VertxInfluxDbOptions()\n+        .setEnabled(true)\n+        .setUri(Optional.ofNullable(influxUrl).orElse(\"http://localhost:8086\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfb196bbf5597f0e028008b4e52c94a8098072df"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU5NjEyOA==", "bodyText": "Thanks for the suggestions. For the four simple string assignments, I switched to use ternary operator to check null. That seems more intuitive. I kept Optional for the registry assignment so we do not have to depend on 3rd party libraries. I am not familiar with the first item on your list String.toString(a, b), which utility library provides that?", "url": "https://github.com/folio-org/okapi/pull/958#discussion_r469596128", "createdAt": "2020-08-12T23:08:29Z", "author": {"login": "hjiebsco"}, "path": "okapi-core/src/main/java/org/folio/okapi/util/MetricsHelper.java", "diffHunk": "@@ -0,0 +1,216 @@\n+package org.folio.okapi.util;\n+\n+import io.micrometer.core.instrument.Counter;\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.Tag;\n+import io.micrometer.core.instrument.Timer;\n+import io.micrometer.core.instrument.Timer.Sample;\n+import io.micrometer.core.instrument.simple.SimpleMeterRegistry;\n+import io.vertx.core.VertxOptions;\n+import io.vertx.micrometer.MicrometerMetricsOptions;\n+import io.vertx.micrometer.VertxInfluxDbOptions;\n+import io.vertx.micrometer.backends.BackendRegistries;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import org.apache.logging.log4j.Logger;\n+import org.folio.okapi.bean.ModuleInstance;\n+import org.folio.okapi.common.OkapiLogger;\n+\n+/**\n+ * Metrics handling.\n+ */\n+public class MetricsHelper {\n+\n+  private static final Logger logger = OkapiLogger.get();\n+\n+  private static final String METRICS_PREFIX = \"org.folio.okapi\";\n+  private static final String METRICS_HTTP = METRICS_PREFIX + \".http\";\n+  private static final String METRICS_HTTP_SERVER = METRICS_HTTP + \".server\";\n+  private static final String METRICS_HTTP_CLIENT = METRICS_HTTP + \".client\";\n+  private static final String METRICS_HTTP_SERVER_PROCESSING_TIME = METRICS_HTTP_SERVER\n+      + \".processingTime\";\n+  private static final String METRICS_HTTP_CLIENT_RESPONSE_TIME = METRICS_HTTP_CLIENT\n+      + \".responseTime\";\n+  private static final String METRICS_HTTP_CLIENT_ERRORS = METRICS_HTTP_CLIENT\n+      + \".errors\";\n+\n+  private static final String TAG_HOST = \"host\";\n+  private static final String TAG_TENANT = \"tenant\";\n+  private static final String TAG_CODE = \"code\";\n+  private static final String TAG_METHOD = \"method\";\n+  private static final String TAG_MODULE = \"module\";\n+  private static final String TAG_URL = \"url\";\n+  private static final String TAG_PHASE = \"phase\";\n+  private static final String TAG_EMPTY = \"null\";\n+\n+  static final String HOST_UNKNOWN = \"unknown\";\n+\n+  private static boolean enabled = false;\n+  private static MeterRegistry registry;\n+\n+  private MetricsHelper() {\n+  }\n+\n+  /**\n+   * Config metrics options - specifically use InfluxDb micrometer options.\n+   *\n+   * @param vertxOptions   - {@link VertxOptions}\n+   * @param influxUrl      - default to http://localhost:8086\n+   * @param influxDbName   - default to okapi\n+   * @param influxUserName - default to null\n+   * @param influxPassword - default to null\n+   */\n+  public static void config(VertxOptions vertxOptions, String influxUrl,\n+      String influxDbName, String influxUserName, String influxPassword) {\n+    VertxInfluxDbOptions influxDbOptions = new VertxInfluxDbOptions()\n+        .setEnabled(true)\n+        .setUri(Optional.ofNullable(influxUrl).orElse(\"http://localhost:8086\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM4NDE4MA=="}, "originalCommit": {"oid": "cfb196bbf5597f0e028008b4e52c94a8098072df"}, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 123, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}