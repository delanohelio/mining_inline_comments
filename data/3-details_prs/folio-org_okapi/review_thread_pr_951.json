{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2MzAwNDY1", "number": 951, "reviewThreads": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMTo0ODo1OFrOEM3ClA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNDozMjozM1rOEXPYrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTIwMTQ4OnYy", "diffSide": "RIGHT", "path": "okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMTo0ODo1OFrOGvNnmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMDoyNzoxMFrOGvyUdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE1OTM4NA==", "bodyText": "I don't think that we need to create yet another context map.\nVert.x already has a map we can easily access with getLocal and putLocal:\nhttps://github.com/eclipse-vertx/vert.x/blob/4.0.0-milestone5/src/main/java/io/vertx/core/impl/ContextImpl.java#L218-L220\nhttps://github.com/eclipse-vertx/vert.x/blob/4.0.0-milestone5/src/main/java/io/vertx/core/impl/AbstractContext.java#L303-L312", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r452159384", "createdAt": "2020-07-09T11:48:58Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package org.folio.okapi.logging;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.core.impl.ContextInternal;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ */\n+@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n+public class FolioLoggingContext implements StrLookup {\n+\n+  public static final String EMPTY_VALUE = \"\";\n+\n+  /**\n+   * Lookup value by key.\n+   *\n+   * @param key the name of logging variable (e.g. requestId)\n+   * @return value for key or *empty string* if there is no such key\n+   */\n+  public String lookup(String key) {\n+    return lookup(null, key);\n+  }\n+\n+  /**\n+  * Lookup value by key. LogEvent isn't used.\n+  *\n+  * @param key the name of logging variable (e.g. requestId)\n+  * @return value for key or *empty string* if there is no such key\n+  */\n+  public String lookup(LogEvent event, String key) {\n+    ContextInternal ctx = (ContextInternal) Vertx.currentContext();\n+    if (ctx != null) {\n+      return getContextMap(ctx).getOrDefault(key, EMPTY_VALUE);\n+    }\n+    return EMPTY_VALUE;\n+  }\n+\n+  /**\n+  * Put value by key to the logging context.   *\n+  * @param key the name of logging variable (e.g. requestId)\n+  */\n+  public static void put(String key, String value) {\n+    ContextInternal ctx = (ContextInternal) Vertx.currentContext();\n+    if (ctx != null) {\n+      getContextMap(ctx).put(key, value);\n+    }\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  private static ConcurrentMap<String, String> getContextMap(ContextInternal ctx) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd3a943cff715588d67d796c12d19bb1d94b3544"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc2MDY5NQ==", "bodyText": "done", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r452760695", "createdAt": "2020-07-10T10:27:10Z", "author": {"login": "MikhailFokanov"}, "path": "okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package org.folio.okapi.logging;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.core.impl.ContextInternal;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ */\n+@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n+public class FolioLoggingContext implements StrLookup {\n+\n+  public static final String EMPTY_VALUE = \"\";\n+\n+  /**\n+   * Lookup value by key.\n+   *\n+   * @param key the name of logging variable (e.g. requestId)\n+   * @return value for key or *empty string* if there is no such key\n+   */\n+  public String lookup(String key) {\n+    return lookup(null, key);\n+  }\n+\n+  /**\n+  * Lookup value by key. LogEvent isn't used.\n+  *\n+  * @param key the name of logging variable (e.g. requestId)\n+  * @return value for key or *empty string* if there is no such key\n+  */\n+  public String lookup(LogEvent event, String key) {\n+    ContextInternal ctx = (ContextInternal) Vertx.currentContext();\n+    if (ctx != null) {\n+      return getContextMap(ctx).getOrDefault(key, EMPTY_VALUE);\n+    }\n+    return EMPTY_VALUE;\n+  }\n+\n+  /**\n+  * Put value by key to the logging context.   *\n+  * @param key the name of logging variable (e.g. requestId)\n+  */\n+  public static void put(String key, String value) {\n+    ContextInternal ctx = (ContextInternal) Vertx.currentContext();\n+    if (ctx != null) {\n+      getContextMap(ctx).put(key, value);\n+    }\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  private static ConcurrentMap<String, String> getContextMap(ContextInternal ctx) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE1OTM4NA=="}, "originalCommit": {"oid": "dd3a943cff715588d67d796c12d19bb1d94b3544"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTIxMDI4OnYy", "diffSide": "RIGHT", "path": "okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMTo1MTo1MlrOGvNtAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNDo0OTozMVrOGvUssA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE2MDc2OQ==", "bodyText": "If we have traditional (non-JSON) log lines we may need EMPTY_VALUE as placeholder.\nFor JSON log lines this is not needed. The key should be completely omitted: https://softwareengineering.stackexchange.com/questions/343710/use-empty-string-null-or-remove-empty-property-in-api-request-response", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r452160769", "createdAt": "2020-07-09T11:51:52Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package org.folio.okapi.logging;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.core.impl.ContextInternal;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ */\n+@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n+public class FolioLoggingContext implements StrLookup {\n+\n+  public static final String EMPTY_VALUE = \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd3a943cff715588d67d796c12d19bb1d94b3544"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI3NTM3Ng==", "bodyText": "There is no easy way to omit empty or null values.\nReturning \"\" or adding a default value like property.requestId = to the log4j2.properties have the same result.", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r452275376", "createdAt": "2020-07-09T14:49:31Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package org.folio.okapi.logging;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.core.impl.ContextInternal;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ */\n+@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n+public class FolioLoggingContext implements StrLookup {\n+\n+  public static final String EMPTY_VALUE = \"\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE2MDc2OQ=="}, "originalCommit": {"oid": "dd3a943cff715588d67d796c12d19bb1d94b3544"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzE2OTYxOnYy", "diffSide": "RIGHT", "path": "okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMToxODoxN1rOGvzpeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMToxODoxN1rOGvzpeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc4MjQ1OA==", "bodyText": "No casting is needed because getLocal is in Context.", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r452782458", "createdAt": "2020-07-10T11:18:17Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package org.folio.okapi.logging;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.core.impl.ContextInternal;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ */\n+@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n+public class FolioLoggingContext implements StrLookup {\n+\n+  private static final String EMPTY_VALUE = \"\";\n+\n+  public static final String LOGGING_VAR_PREFIX = \"folio_\";\n+\n+  /**\n+   * Lookup value by key.\n+   *\n+   * @param key the name of logging variable (e.g. requestId)\n+   * @return value for key or *empty string* if there is no such key\n+   */\n+  public String lookup(String key) {\n+    return lookup(null, key);\n+  }\n+\n+  /**\n+  * Lookup value by key. LogEvent isn't used.\n+  *\n+  * @param key the name of logging variable (e.g. requestId)\n+  * @return value for key or *empty string* if there is no such key\n+  */\n+  public String lookup(LogEvent event, String key) {\n+    ContextInternal ctx = (ContextInternal) Vertx.currentContext();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21ef7503f84e93b2e6acc321bf42b0c2c6242d87"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzE3MTAzOnYy", "diffSide": "RIGHT", "path": "okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMToxODo1MFrOGvzqVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMToxODo1MFrOGvzqVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc4MjY3OA==", "bodyText": "No casting is needed because putLocal is in Context.", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r452782678", "createdAt": "2020-07-10T11:18:50Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package org.folio.okapi.logging;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.core.impl.ContextInternal;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ */\n+@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n+public class FolioLoggingContext implements StrLookup {\n+\n+  private static final String EMPTY_VALUE = \"\";\n+\n+  public static final String LOGGING_VAR_PREFIX = \"folio_\";\n+\n+  /**\n+   * Lookup value by key.\n+   *\n+   * @param key the name of logging variable (e.g. requestId)\n+   * @return value for key or *empty string* if there is no such key\n+   */\n+  public String lookup(String key) {\n+    return lookup(null, key);\n+  }\n+\n+  /**\n+  * Lookup value by key. LogEvent isn't used.\n+  *\n+  * @param key the name of logging variable (e.g. requestId)\n+  * @return value for key or *empty string* if there is no such key\n+  */\n+  public String lookup(LogEvent event, String key) {\n+    ContextInternal ctx = (ContextInternal) Vertx.currentContext();\n+    if (ctx != null) {\n+      String val = ctx.getLocal(LOGGING_VAR_PREFIX + key);\n+      if (val != null) {\n+        return val;\n+      }\n+    }\n+    return EMPTY_VALUE;\n+  }\n+\n+  /**\n+  * Put value by key to the logging context.   *\n+  * @param key the name of logging variable (e.g. requestId)\n+  */\n+  public static void put(String key, String value) {\n+    ContextInternal ctx = (ContextInternal) Vertx.currentContext();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21ef7503f84e93b2e6acc321bf42b0c2c6242d87"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzE4MjcxOnYy", "diffSide": "RIGHT", "path": "okapi-core/src/main/resources/log4j2.properties", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMToyMzozN1rOGvzxfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDo0Nzo1MlrOGxXLvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc4NDUwOA==", "bodyText": "In https://stackoverflow.com/questions/31342950 they advise not to use camel case for plugin names.", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r452784508", "createdAt": "2020-07-10T11:23:37Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/main/resources/log4j2.properties", "diffHunk": "@@ -10,8 +10,27 @@ appenders = console\n \n appender.console.type = Console\n appender.console.name = STDOUT\n-appender.console.layout.type = PatternLayout\n-appender.console.layout.pattern = %d{HH:mm:ss} %-5p %-20.20C{1} %m%n\n+appender.console.layout.type = JSONLayout\n+appender.console.layout.compact = true\n+appender.console.layout.eventEol = true\n+appender.console.layout.stacktraceAsString = true\n+\n+## Folio fields\n+appender.console.layout.requestId.type = KeyValuePair\n+appender.console.layout.requestId.key = requestId\n+appender.console.layout.requestId.value = $${FolioLoggingContext:requestId}\n+\n+appender.console.layout.tenantId.type = KeyValuePair\n+appender.console.layout.tenantId.key = tenantId\n+appender.console.layout.tenantId.value = $${FolioLoggingContext:tenantId}\n+\n+appender.console.layout.userId.type = KeyValuePair\n+appender.console.layout.userId.key = userId\n+appender.console.layout.userId.value = $${FolioLoggingContext:userId}\n+\n+appender.console.layout.moduleId.type = KeyValuePair\n+appender.console.layout.moduleId.key = moduleId\n+appender.console.layout.moduleId.value = $${FolioLoggingContext:moduleId}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21ef7503f84e93b2e6acc321bf42b0c2c6242d87"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc5NTA5OA==", "bodyText": "I haven't faced such issues. Maybe they are for old version of log4j2. Are you proposing to lowercase the variables?", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r452795098", "createdAt": "2020-07-10T11:50:04Z", "author": {"login": "MikhailFokanov"}, "path": "okapi-core/src/main/resources/log4j2.properties", "diffHunk": "@@ -10,8 +10,27 @@ appenders = console\n \n appender.console.type = Console\n appender.console.name = STDOUT\n-appender.console.layout.type = PatternLayout\n-appender.console.layout.pattern = %d{HH:mm:ss} %-5p %-20.20C{1} %m%n\n+appender.console.layout.type = JSONLayout\n+appender.console.layout.compact = true\n+appender.console.layout.eventEol = true\n+appender.console.layout.stacktraceAsString = true\n+\n+## Folio fields\n+appender.console.layout.requestId.type = KeyValuePair\n+appender.console.layout.requestId.key = requestId\n+appender.console.layout.requestId.value = $${FolioLoggingContext:requestId}\n+\n+appender.console.layout.tenantId.type = KeyValuePair\n+appender.console.layout.tenantId.key = tenantId\n+appender.console.layout.tenantId.value = $${FolioLoggingContext:tenantId}\n+\n+appender.console.layout.userId.type = KeyValuePair\n+appender.console.layout.userId.key = userId\n+appender.console.layout.userId.value = $${FolioLoggingContext:userId}\n+\n+appender.console.layout.moduleId.type = KeyValuePair\n+appender.console.layout.moduleId.key = moduleId\n+appender.console.layout.moduleId.value = $${FolioLoggingContext:moduleId}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc4NDUwOA=="}, "originalCommit": {"oid": "21ef7503f84e93b2e6acc321bf42b0c2c6242d87"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgwNDA3OQ==", "bodyText": "It is easier to simply lowercase requestId, tenantId, userId, moduleId and FolioLoggingContext than investigate whether that bug may affect us.", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r452804079", "createdAt": "2020-07-10T12:11:22Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/main/resources/log4j2.properties", "diffHunk": "@@ -10,8 +10,27 @@ appenders = console\n \n appender.console.type = Console\n appender.console.name = STDOUT\n-appender.console.layout.type = PatternLayout\n-appender.console.layout.pattern = %d{HH:mm:ss} %-5p %-20.20C{1} %m%n\n+appender.console.layout.type = JSONLayout\n+appender.console.layout.compact = true\n+appender.console.layout.eventEol = true\n+appender.console.layout.stacktraceAsString = true\n+\n+## Folio fields\n+appender.console.layout.requestId.type = KeyValuePair\n+appender.console.layout.requestId.key = requestId\n+appender.console.layout.requestId.value = $${FolioLoggingContext:requestId}\n+\n+appender.console.layout.tenantId.type = KeyValuePair\n+appender.console.layout.tenantId.key = tenantId\n+appender.console.layout.tenantId.value = $${FolioLoggingContext:tenantId}\n+\n+appender.console.layout.userId.type = KeyValuePair\n+appender.console.layout.userId.key = userId\n+appender.console.layout.userId.value = $${FolioLoggingContext:userId}\n+\n+appender.console.layout.moduleId.type = KeyValuePair\n+appender.console.layout.moduleId.key = moduleId\n+appender.console.layout.moduleId.value = $${FolioLoggingContext:moduleId}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc4NDUwOA=="}, "originalCommit": {"oid": "21ef7503f84e93b2e6acc321bf42b0c2c6242d87"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxMzI0NA==", "bodyText": "done", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r454413244", "createdAt": "2020-07-14T14:47:52Z", "author": {"login": "MikhailFokanov"}, "path": "okapi-core/src/main/resources/log4j2.properties", "diffHunk": "@@ -10,8 +10,27 @@ appenders = console\n \n appender.console.type = Console\n appender.console.name = STDOUT\n-appender.console.layout.type = PatternLayout\n-appender.console.layout.pattern = %d{HH:mm:ss} %-5p %-20.20C{1} %m%n\n+appender.console.layout.type = JSONLayout\n+appender.console.layout.compact = true\n+appender.console.layout.eventEol = true\n+appender.console.layout.stacktraceAsString = true\n+\n+## Folio fields\n+appender.console.layout.requestId.type = KeyValuePair\n+appender.console.layout.requestId.key = requestId\n+appender.console.layout.requestId.value = $${FolioLoggingContext:requestId}\n+\n+appender.console.layout.tenantId.type = KeyValuePair\n+appender.console.layout.tenantId.key = tenantId\n+appender.console.layout.tenantId.value = $${FolioLoggingContext:tenantId}\n+\n+appender.console.layout.userId.type = KeyValuePair\n+appender.console.layout.userId.key = userId\n+appender.console.layout.userId.value = $${FolioLoggingContext:userId}\n+\n+appender.console.layout.moduleId.type = KeyValuePair\n+appender.console.layout.moduleId.key = moduleId\n+appender.console.layout.moduleId.value = $${FolioLoggingContext:moduleId}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc4NDUwOA=="}, "originalCommit": {"oid": "21ef7503f84e93b2e6acc321bf42b0c2c6242d87"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzE5MDU3OnYy", "diffSide": "RIGHT", "path": "okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMToyNjoyOFrOGvz2KA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMTo0ODoyNVrOGv0YZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc4NTcwNA==", "bodyText": "Do we need to add LOGGING_VAR_PREFIX here or should ProxyService prepend it?", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r452785704", "createdAt": "2020-07-10T11:26:28Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package org.folio.okapi.logging;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.core.impl.ContextInternal;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ */\n+@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n+public class FolioLoggingContext implements StrLookup {\n+\n+  private static final String EMPTY_VALUE = \"\";\n+\n+  public static final String LOGGING_VAR_PREFIX = \"folio_\";\n+\n+  /**\n+   * Lookup value by key.\n+   *\n+   * @param key the name of logging variable (e.g. requestId)\n+   * @return value for key or *empty string* if there is no such key\n+   */\n+  public String lookup(String key) {\n+    return lookup(null, key);\n+  }\n+\n+  /**\n+  * Lookup value by key. LogEvent isn't used.\n+  *\n+  * @param key the name of logging variable (e.g. requestId)\n+  * @return value for key or *empty string* if there is no such key\n+  */\n+  public String lookup(LogEvent event, String key) {\n+    ContextInternal ctx = (ContextInternal) Vertx.currentContext();\n+    if (ctx != null) {\n+      String val = ctx.getLocal(LOGGING_VAR_PREFIX + key);\n+      if (val != null) {\n+        return val;\n+      }\n+    }\n+    return EMPTY_VALUE;\n+  }\n+\n+  /**\n+  * Put value by key to the logging context.   *\n+  * @param key the name of logging variable (e.g. requestId)\n+  */\n+  public static void put(String key, String value) {\n+    ContextInternal ctx = (ContextInternal) Vertx.currentContext();\n+    if (ctx != null) {\n+      ctx.putLocal(key, value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21ef7503f84e93b2e6acc321bf42b0c2c6242d87"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc5NDQ3MQ==", "bodyText": "I want to make the usage of the approach as simple, as it can be. If for putting and getting every value there was a need to add a prefix, someone would forget to put it on get or put. So I'd like to stick with the approach of putting it internally.", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r452794471", "createdAt": "2020-07-10T11:48:25Z", "author": {"login": "MikhailFokanov"}, "path": "okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package org.folio.okapi.logging;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.core.impl.ContextInternal;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ */\n+@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n+public class FolioLoggingContext implements StrLookup {\n+\n+  private static final String EMPTY_VALUE = \"\";\n+\n+  public static final String LOGGING_VAR_PREFIX = \"folio_\";\n+\n+  /**\n+   * Lookup value by key.\n+   *\n+   * @param key the name of logging variable (e.g. requestId)\n+   * @return value for key or *empty string* if there is no such key\n+   */\n+  public String lookup(String key) {\n+    return lookup(null, key);\n+  }\n+\n+  /**\n+  * Lookup value by key. LogEvent isn't used.\n+  *\n+  * @param key the name of logging variable (e.g. requestId)\n+  * @return value for key or *empty string* if there is no such key\n+  */\n+  public String lookup(LogEvent event, String key) {\n+    ContextInternal ctx = (ContextInternal) Vertx.currentContext();\n+    if (ctx != null) {\n+      String val = ctx.getLocal(LOGGING_VAR_PREFIX + key);\n+      if (val != null) {\n+        return val;\n+      }\n+    }\n+    return EMPTY_VALUE;\n+  }\n+\n+  /**\n+  * Put value by key to the logging context.   *\n+  * @param key the name of logging variable (e.g. requestId)\n+  */\n+  public static void put(String key, String value) {\n+    ContextInternal ctx = (ContextInternal) Vertx.currentContext();\n+    if (ctx != null) {\n+      ctx.putLocal(key, value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc4NTcwNA=="}, "originalCommit": {"oid": "21ef7503f84e93b2e6acc321bf42b0c2c6242d87"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzQxODQ4OnYy", "diffSide": "RIGHT", "path": "okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjo0NzoyNlrOGv1_yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMzoxMTo0MVrOGxTAZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgyMDkzOA==", "bodyText": "Redundant checks here.. headers are always present.  Move your stuff below the headers local and have it more readable, please.", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r452820938", "createdAt": "2020-07-10T12:47:26Z", "author": {"login": "adamdickmeiss"}, "path": "okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java", "diffHunk": "@@ -514,6 +515,18 @@ public void proxy(RoutingContext ctx) {\n       return; // Error code already set in ctx\n     }\n \n+    FolioLoggingContext.put(\"tenantId\", tenantId);\n+\n+    if (ctx.request() != null && ctx.request().headers() != null) {\n+\n+      FolioLoggingContext.put(\"requestId\", ctx.request().headers().get(XOkapiHeaders.REQUEST_ID));\n+\n+      FolioLoggingContext.put(\"moduleId\", ctx.request().headers().get(XOkapiHeaders.MODULE_ID));\n+\n+      FolioLoggingContext.put(\"userId\", ctx.request().headers().get(XOkapiHeaders.USER_ID));\n+\n+    }\n+\n     final MultiMap headers = ctx.request().headers();\n     sanitizeAuthHeaders(headers);\n     tenantManager.get(tenantId, gres -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96f318785a198ef39bfa3c50fd10868b11005893"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM0NDgwNg==", "bodyText": "done", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r454344806", "createdAt": "2020-07-14T13:11:41Z", "author": {"login": "MikhailFokanov"}, "path": "okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java", "diffHunk": "@@ -514,6 +515,18 @@ public void proxy(RoutingContext ctx) {\n       return; // Error code already set in ctx\n     }\n \n+    FolioLoggingContext.put(\"tenantId\", tenantId);\n+\n+    if (ctx.request() != null && ctx.request().headers() != null) {\n+\n+      FolioLoggingContext.put(\"requestId\", ctx.request().headers().get(XOkapiHeaders.REQUEST_ID));\n+\n+      FolioLoggingContext.put(\"moduleId\", ctx.request().headers().get(XOkapiHeaders.MODULE_ID));\n+\n+      FolioLoggingContext.put(\"userId\", ctx.request().headers().get(XOkapiHeaders.USER_ID));\n+\n+    }\n+\n     final MultiMap headers = ctx.request().headers();\n     sanitizeAuthHeaders(headers);\n     tenantManager.get(tenantId, gres -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgyMDkzOA=="}, "originalCommit": {"oid": "96f318785a198ef39bfa3c50fd10868b11005893"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDI3NjkwOnYy", "diffSide": "RIGHT", "path": "okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNjo1MDowNVrOGv-Y8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMzoxMjozOVrOGxTCwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1ODQ1MQ==", "bodyText": "The class should be moved from okapi-core to okapi-common that already is a dependency of RMB: https://github.com/folio-org/raml-module-builder/blob/v30.2.4/pom.xml#L162", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r452958451", "createdAt": "2020-07-10T16:50:05Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package org.folio.okapi.logging;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96f318785a198ef39bfa3c50fd10868b11005893"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM0NTQwOQ==", "bodyText": "done", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r454345409", "createdAt": "2020-07-14T13:12:39Z", "author": {"login": "MikhailFokanov"}, "path": "okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package org.folio.okapi.logging;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1ODQ1MQ=="}, "originalCommit": {"oid": "96f318785a198ef39bfa3c50fd10868b11005893"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDI4Njc5OnYy", "diffSide": "RIGHT", "path": "okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNjo1MzoyNlrOGv-fLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMzo0MTozMVrOGxUNGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk2MDA0NQ==", "bodyText": "\"Folio\" can be removed from the class name because \"folio\" is already in the package name: \"org.folio.okapi.logging\" or \"org.folio.okapi.common\"", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r452960045", "createdAt": "2020-07-10T16:53:26Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package org.folio.okapi.logging;\n+\n+import io.vertx.core.Context;\n+import io.vertx.core.Vertx;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ */\n+@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n+public class FolioLoggingContext implements StrLookup {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96f318785a198ef39bfa3c50fd10868b11005893"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM2Mzc0Nw==", "bodyText": "In log4j2.properties the name \"FolioLoggingContext\" used as: $${FolioLoggingContext:userid}. If it is just $${LoggingContext:userid}, the name is not self-explaining and there can be some collisions with some other LoggingContext", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r454363747", "createdAt": "2020-07-14T13:40:34Z", "author": {"login": "MikhailFokanov"}, "path": "okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package org.folio.okapi.logging;\n+\n+import io.vertx.core.Context;\n+import io.vertx.core.Vertx;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ */\n+@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n+public class FolioLoggingContext implements StrLookup {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk2MDA0NQ=="}, "originalCommit": {"oid": "96f318785a198ef39bfa3c50fd10868b11005893"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM2NDQ0Mg==", "bodyText": "Having\n@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\npublic class LoggingContext implements StrLookup {\n\nfor me also looks not so good.", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r454364442", "createdAt": "2020-07-14T13:41:31Z", "author": {"login": "MikhailFokanov"}, "path": "okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package org.folio.okapi.logging;\n+\n+import io.vertx.core.Context;\n+import io.vertx.core.Vertx;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ */\n+@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n+public class FolioLoggingContext implements StrLookup {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk2MDA0NQ=="}, "originalCommit": {"oid": "96f318785a198ef39bfa3c50fd10868b11005893"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDc0MDkxOnYy", "diffSide": "RIGHT", "path": "okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNjo0NjozNVrOGxcP1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNjo0NjozNVrOGxcP1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ5NjIxNA==", "bodyText": "Can you be more specific about the usage of this class? It should mention log4j, Vertx context, Vertx vertx local data.", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r454496214", "createdAt": "2020-07-14T16:46:35Z", "author": {"login": "julianladisch"}, "path": "okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package org.folio.okapi.common.logging;\n+\n+import io.vertx.core.Context;\n+import io.vertx.core.Vertx;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff2fe11c0f195f26cfc0ee17f257491c42004166"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDc1MDE1OnYy", "diffSide": "RIGHT", "path": "okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNjo0ODo0MFrOGxcVpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNjo0ODo0MFrOGxcVpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ5NzcwMQ==", "bodyText": "Can you add javadoc for value and explain that null is accepted and will remove the entry?", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r454497701", "createdAt": "2020-07-14T16:48:40Z", "author": {"login": "julianladisch"}, "path": "okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package org.folio.okapi.common.logging;\n+\n+import io.vertx.core.Context;\n+import io.vertx.core.Vertx;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ */\n+@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n+public class FolioLoggingContext implements StrLookup {\n+\n+  private static final String EMPTY_VALUE = \"\";\n+\n+  private static final String LOGGING_VAR_PREFIX = \"folio_\";\n+\n+  public static final String TENANT_ID_LOGGING_VAR_NAME = \"tenantid\";\n+\n+  public static final String REQUEST_ID_LOGGING_VAR_NAME = \"requestid\";\n+\n+  public static final String MODULE_ID_LOGGING_VAR_NAME = \"moduleid\";\n+\n+  public static final String USER_ID_LOGGING_VAR_NAME = \"userid\";\n+\n+  /**\n+   * Lookup value by key.\n+   *\n+   * @param key the name of logging variable (e.g. requestId)\n+   * @return value for key or *empty string* if there is no such key\n+   */\n+  public String lookup(String key) {\n+    return lookup(null, key);\n+  }\n+\n+  /**\n+  * Lookup value by key. LogEvent isn't used.\n+  *\n+  * @param key the name of logging variable (e.g. requestId)\n+  * @return value for key or *empty string* if there is no such key\n+  */\n+  public String lookup(LogEvent event, String key) {\n+    Context ctx = Vertx.currentContext();\n+    if (ctx != null) {\n+      String val = ctx.getLocal(LOGGING_VAR_PREFIX + key);\n+      if (val != null) {\n+        return val;\n+      }\n+    }\n+    return EMPTY_VALUE;\n+  }\n+\n+  /**\n+  * Put value by key to the logging context.   *\n+  * @param key the name of logging variable (e.g. requestId)\n+  */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff2fe11c0f195f26cfc0ee17f257491c42004166"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDc1Mzc5OnYy", "diffSide": "RIGHT", "path": "okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNjo0OTozNVrOGxcX8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMjozMjozMVrOG0J0Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ5ODI4OQ==", "bodyText": "VertxLoggingContext might be a better name.", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r454498289", "createdAt": "2020-07-14T16:49:35Z", "author": {"login": "julianladisch"}, "path": "okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package org.folio.okapi.common.logging;\n+\n+import io.vertx.core.Context;\n+import io.vertx.core.Vertx;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ */\n+@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n+public class FolioLoggingContext implements StrLookup {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff2fe11c0f195f26cfc0ee17f257491c42004166"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzMzOTkzNA==", "bodyText": "I think, that there is a lot of stuff related to Vertx and VertxLoggingContext can be jumble with other Vertx classes. Does that make sense?", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r457339934", "createdAt": "2020-07-20T12:32:31Z", "author": {"login": "MikhailFokanov"}, "path": "okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package org.folio.okapi.common.logging;\n+\n+import io.vertx.core.Context;\n+import io.vertx.core.Vertx;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ */\n+@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n+public class FolioLoggingContext implements StrLookup {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ5ODI4OQ=="}, "originalCommit": {"oid": "ff2fe11c0f195f26cfc0ee17f257491c42004166"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDc2Nzc0OnYy", "diffSide": "LEFT", "path": "okapi-common/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNjo1Mjo1M1rOGxcgvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNjo1Mjo1M1rOGxcgvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUwMDU0MA==", "bodyText": "Why isn't this <optional>true</optional> to allow users of okapi-common to use some other logging library if they want?", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r454500540", "createdAt": "2020-07-14T16:52:53Z", "author": {"login": "julianladisch"}, "path": "okapi-common/pom.xml", "diffHunk": "@@ -15,7 +15,6 @@\n     <dependency>\n       <groupId>org.apache.logging.log4j</groupId>\n       <artifactId>log4j-core</artifactId>\n-      <scope>test</scope>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff2fe11c0f195f26cfc0ee17f257491c42004166"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDc3ODg5OnYy", "diffSide": "RIGHT", "path": "okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNjo1NTozNlrOGxcnow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNjo1NTozNlrOGxcnow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUwMjMwNw==", "bodyText": "The return value should be asserted.", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r454502307", "createdAt": "2020-07-14T16:55:36Z", "author": {"login": "julianladisch"}, "path": "okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.folio.okapi.common;\n+\n+import org.folio.okapi.common.logging.FolioLoggingContext;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.ext.unit.Async;\n+import io.vertx.ext.unit.TestContext;\n+import io.vertx.ext.unit.junit.VertxUnitRunner;\n+\n+@RunWith(VertxUnitRunner.class)\n+public class FolioLoggingContextTest {\n+\n+\n+  private static String KEY = \"KEY\";\n+  private static String VALUE = \"VALUE\";\n+\n+  private Vertx vertx;\n+\n+  @Before\n+  public void setup() {\n+    vertx = Vertx.vertx();\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    vertx.close();\n+  }\n+\n+  @Test\n+  public void lookupWithoutContextTest() {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    loggingContext.lookup(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff2fe11c0f195f26cfc0ee17f257491c42004166"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDc4NDMzOnYy", "diffSide": "RIGHT", "path": "okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNjo1Njo1OFrOGxcq7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNjo1Njo1OFrOGxcq7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUwMzE1MA==", "bodyText": "This line should be wrapped in yet another vertx.runOnContext to make sure that the entry really is passed on.", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r454503150", "createdAt": "2020-07-14T16:56:58Z", "author": {"login": "julianladisch"}, "path": "okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.folio.okapi.common;\n+\n+import org.folio.okapi.common.logging.FolioLoggingContext;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.ext.unit.Async;\n+import io.vertx.ext.unit.TestContext;\n+import io.vertx.ext.unit.junit.VertxUnitRunner;\n+\n+@RunWith(VertxUnitRunner.class)\n+public class FolioLoggingContextTest {\n+\n+\n+  private static String KEY = \"KEY\";\n+  private static String VALUE = \"VALUE\";\n+\n+  private Vertx vertx;\n+\n+  @Before\n+  public void setup() {\n+    vertx = Vertx.vertx();\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    vertx.close();\n+  }\n+\n+  @Test\n+  public void lookupWithoutContextTest() {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    loggingContext.lookup(null);\n+  }\n+\n+\n+  @Test\n+  public void lookupPutTest(TestContext context) {\n+    vertx.runOnContext(e -> {\n+      FolioLoggingContext loggingContext = new FolioLoggingContext();\n+      FolioLoggingContext.put(KEY, VALUE);\n+      context.assertEquals(loggingContext.lookup(KEY), VALUE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff2fe11c0f195f26cfc0ee17f257491c42004166"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDc4OTc3OnYy", "diffSide": "RIGHT", "path": "okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNjo1ODoyMVrOGxcuKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNjo1ODoyMVrOGxcuKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUwMzk3OQ==", "bodyText": "Async is required, otherwise the code inside the runOnContext is executed after test completion and therefore cannot report any failures.", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r454503979", "createdAt": "2020-07-14T16:58:21Z", "author": {"login": "julianladisch"}, "path": "okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.folio.okapi.common;\n+\n+import org.folio.okapi.common.logging.FolioLoggingContext;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.ext.unit.Async;\n+import io.vertx.ext.unit.TestContext;\n+import io.vertx.ext.unit.junit.VertxUnitRunner;\n+\n+@RunWith(VertxUnitRunner.class)\n+public class FolioLoggingContextTest {\n+\n+\n+  private static String KEY = \"KEY\";\n+  private static String VALUE = \"VALUE\";\n+\n+  private Vertx vertx;\n+\n+  @Before\n+  public void setup() {\n+    vertx = Vertx.vertx();\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    vertx.close();\n+  }\n+\n+  @Test\n+  public void lookupWithoutContextTest() {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    loggingContext.lookup(null);\n+  }\n+\n+\n+  @Test\n+  public void lookupPutTest(TestContext context) {\n+    vertx.runOnContext(e -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff2fe11c0f195f26cfc0ee17f257491c42004166"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDc5MjIwOnYy", "diffSide": "RIGHT", "path": "okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNjo1ODo1OFrOGxcvtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNjo1ODo1OFrOGxcvtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUwNDM3Mg==", "bodyText": "Async is missing", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r454504372", "createdAt": "2020-07-14T16:58:58Z", "author": {"login": "julianladisch"}, "path": "okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.folio.okapi.common;\n+\n+import org.folio.okapi.common.logging.FolioLoggingContext;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.ext.unit.Async;\n+import io.vertx.ext.unit.TestContext;\n+import io.vertx.ext.unit.junit.VertxUnitRunner;\n+\n+@RunWith(VertxUnitRunner.class)\n+public class FolioLoggingContextTest {\n+\n+\n+  private static String KEY = \"KEY\";\n+  private static String VALUE = \"VALUE\";\n+\n+  private Vertx vertx;\n+\n+  @Before\n+  public void setup() {\n+    vertx = Vertx.vertx();\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    vertx.close();\n+  }\n+\n+  @Test\n+  public void lookupWithoutContextTest() {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    loggingContext.lookup(null);\n+  }\n+\n+\n+  @Test\n+  public void lookupPutTest(TestContext context) {\n+    vertx.runOnContext(e -> {\n+      FolioLoggingContext loggingContext = new FolioLoggingContext();\n+      FolioLoggingContext.put(KEY, VALUE);\n+      context.assertEquals(loggingContext.lookup(KEY), VALUE);\n+    });\n+  }\n+\n+  @Test\n+  public void lookupNullTest(TestContext context) {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff2fe11c0f195f26cfc0ee17f257491c42004166"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDgxOTMzOnYy", "diffSide": "RIGHT", "path": "okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzowNjoxMVrOGxdAtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMzoxNDowOFrOGyqVlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUwODcyNA==", "bodyText": "These should be moved to okapi-core ProxyService, because this logging context is a general purpose library class.", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r454508724", "createdAt": "2020-07-14T17:06:11Z", "author": {"login": "julianladisch"}, "path": "okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package org.folio.okapi.common.logging;\n+\n+import io.vertx.core.Context;\n+import io.vertx.core.Vertx;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ */\n+@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n+public class FolioLoggingContext implements StrLookup {\n+\n+  private static final String EMPTY_VALUE = \"\";\n+\n+  private static final String LOGGING_VAR_PREFIX = \"folio_\";\n+\n+  public static final String TENANT_ID_LOGGING_VAR_NAME = \"tenantid\";\n+\n+  public static final String REQUEST_ID_LOGGING_VAR_NAME = \"requestid\";\n+\n+  public static final String MODULE_ID_LOGGING_VAR_NAME = \"moduleid\";\n+\n+  public static final String USER_ID_LOGGING_VAR_NAME = \"userid\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff2fe11c0f195f26cfc0ee17f257491c42004166"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc3NTYzOQ==", "bodyText": "These are general platform wide constants, which make sense for every module.", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r455775639", "createdAt": "2020-07-16T13:14:08Z", "author": {"login": "MikhailFokanov"}, "path": "okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package org.folio.okapi.common.logging;\n+\n+import io.vertx.core.Context;\n+import io.vertx.core.Vertx;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ */\n+@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n+public class FolioLoggingContext implements StrLookup {\n+\n+  private static final String EMPTY_VALUE = \"\";\n+\n+  private static final String LOGGING_VAR_PREFIX = \"folio_\";\n+\n+  public static final String TENANT_ID_LOGGING_VAR_NAME = \"tenantid\";\n+\n+  public static final String REQUEST_ID_LOGGING_VAR_NAME = \"requestid\";\n+\n+  public static final String MODULE_ID_LOGGING_VAR_NAME = \"moduleid\";\n+\n+  public static final String USER_ID_LOGGING_VAR_NAME = \"userid\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUwODcyNA=="}, "originalCommit": {"oid": "ff2fe11c0f195f26cfc0ee17f257491c42004166"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDgyODYwOnYy", "diffSide": "RIGHT", "path": "okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzowODo0N1rOGxdGsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzowODo0N1rOGxdGsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUxMDI1Nw==", "bodyText": "Can you add @Override?", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r454510257", "createdAt": "2020-07-14T17:08:47Z", "author": {"login": "julianladisch"}, "path": "okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package org.folio.okapi.common.logging;\n+\n+import io.vertx.core.Context;\n+import io.vertx.core.Vertx;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ */\n+@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n+public class FolioLoggingContext implements StrLookup {\n+\n+  private static final String EMPTY_VALUE = \"\";\n+\n+  private static final String LOGGING_VAR_PREFIX = \"folio_\";\n+\n+  public static final String TENANT_ID_LOGGING_VAR_NAME = \"tenantid\";\n+\n+  public static final String REQUEST_ID_LOGGING_VAR_NAME = \"requestid\";\n+\n+  public static final String MODULE_ID_LOGGING_VAR_NAME = \"moduleid\";\n+\n+  public static final String USER_ID_LOGGING_VAR_NAME = \"userid\";\n+\n+  /**\n+   * Lookup value by key.\n+   *\n+   * @param key the name of logging variable (e.g. requestId)\n+   * @return value for key or *empty string* if there is no such key\n+   */\n+  public String lookup(String key) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff2fe11c0f195f26cfc0ee17f257491c42004166"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDgyOTU1OnYy", "diffSide": "RIGHT", "path": "okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzowOTowNFrOGxdHPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzowOTowNFrOGxdHPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUxMDM5OA==", "bodyText": "Can you add @Override?", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r454510398", "createdAt": "2020-07-14T17:09:04Z", "author": {"login": "julianladisch"}, "path": "okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package org.folio.okapi.common.logging;\n+\n+import io.vertx.core.Context;\n+import io.vertx.core.Vertx;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ */\n+@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n+public class FolioLoggingContext implements StrLookup {\n+\n+  private static final String EMPTY_VALUE = \"\";\n+\n+  private static final String LOGGING_VAR_PREFIX = \"folio_\";\n+\n+  public static final String TENANT_ID_LOGGING_VAR_NAME = \"tenantid\";\n+\n+  public static final String REQUEST_ID_LOGGING_VAR_NAME = \"requestid\";\n+\n+  public static final String MODULE_ID_LOGGING_VAR_NAME = \"moduleid\";\n+\n+  public static final String USER_ID_LOGGING_VAR_NAME = \"userid\";\n+\n+  /**\n+   * Lookup value by key.\n+   *\n+   * @param key the name of logging variable (e.g. requestId)\n+   * @return value for key or *empty string* if there is no such key\n+   */\n+  public String lookup(String key) {\n+    return lookup(null, key);\n+  }\n+\n+  /**\n+  * Lookup value by key. LogEvent isn't used.\n+  *\n+  * @param key the name of logging variable (e.g. requestId)\n+  * @return value for key or *empty string* if there is no such key\n+  */\n+  public String lookup(LogEvent event, String key) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff2fe11c0f195f26cfc0ee17f257491c42004166"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDgzMjU5OnYy", "diffSide": "RIGHT", "path": "okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzowOTo1NVrOGxdJMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzowOTo1NVrOGxdJMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUxMDg5OQ==", "bodyText": "The return value should be asserted.", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r454510899", "createdAt": "2020-07-14T17:09:55Z", "author": {"login": "julianladisch"}, "path": "okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.folio.okapi.common;\n+\n+import org.folio.okapi.common.logging.FolioLoggingContext;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.ext.unit.Async;\n+import io.vertx.ext.unit.TestContext;\n+import io.vertx.ext.unit.junit.VertxUnitRunner;\n+\n+@RunWith(VertxUnitRunner.class)\n+public class FolioLoggingContextTest {\n+\n+\n+  private static String KEY = \"KEY\";\n+  private static String VALUE = \"VALUE\";\n+\n+  private Vertx vertx;\n+\n+  @Before\n+  public void setup() {\n+    vertx = Vertx.vertx();\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    vertx.close();\n+  }\n+\n+  @Test\n+  public void lookupWithoutContextTest() {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    loggingContext.lookup(null);\n+  }\n+\n+\n+  @Test\n+  public void lookupPutTest(TestContext context) {\n+    vertx.runOnContext(e -> {\n+      FolioLoggingContext loggingContext = new FolioLoggingContext();\n+      FolioLoggingContext.put(KEY, VALUE);\n+      context.assertEquals(loggingContext.lookup(KEY), VALUE);\n+    });\n+  }\n+\n+  @Test\n+  public void lookupNullTest(TestContext context) {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    vertx.runOnContext(e -> {\n+      loggingContext.lookup(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff2fe11c0f195f26cfc0ee17f257491c42004166"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDg2MDIzOnYy", "diffSide": "RIGHT", "path": "okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzoxNzowNVrOGxdaOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzoxNzowNVrOGxdaOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUxNTI1OA==", "bodyText": "null as a key may cause an exception, can you use a proper key?", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r454515258", "createdAt": "2020-07-14T17:17:05Z", "author": {"login": "julianladisch"}, "path": "okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.folio.okapi.common;\n+\n+import org.folio.okapi.common.logging.FolioLoggingContext;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.ext.unit.Async;\n+import io.vertx.ext.unit.TestContext;\n+import io.vertx.ext.unit.junit.VertxUnitRunner;\n+\n+@RunWith(VertxUnitRunner.class)\n+public class FolioLoggingContextTest {\n+\n+\n+  private static String KEY = \"KEY\";\n+  private static String VALUE = \"VALUE\";\n+\n+  private Vertx vertx;\n+\n+  @Before\n+  public void setup() {\n+    vertx = Vertx.vertx();\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    vertx.close();\n+  }\n+\n+  @Test\n+  public void lookupWithoutContextTest() {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    loggingContext.lookup(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff2fe11c0f195f26cfc0ee17f257491c42004166"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDg2NTA3OnYy", "diffSide": "RIGHT", "path": "okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzoxODoyNVrOGxddSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzoxODoyNVrOGxddSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUxNjA0MQ==", "bodyText": "Can you add whether null key is allowed?\nThe same for lookup(LogEvent, String)?", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r454516041", "createdAt": "2020-07-14T17:18:25Z", "author": {"login": "julianladisch"}, "path": "okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package org.folio.okapi.common.logging;\n+\n+import io.vertx.core.Context;\n+import io.vertx.core.Vertx;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ */\n+@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n+public class FolioLoggingContext implements StrLookup {\n+\n+  private static final String EMPTY_VALUE = \"\";\n+\n+  private static final String LOGGING_VAR_PREFIX = \"folio_\";\n+\n+  public static final String TENANT_ID_LOGGING_VAR_NAME = \"tenantid\";\n+\n+  public static final String REQUEST_ID_LOGGING_VAR_NAME = \"requestid\";\n+\n+  public static final String MODULE_ID_LOGGING_VAR_NAME = \"moduleid\";\n+\n+  public static final String USER_ID_LOGGING_VAR_NAME = \"userid\";\n+\n+  /**\n+   * Lookup value by key.\n+   *\n+   * @param key the name of logging variable (e.g. requestId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff2fe11c0f195f26cfc0ee17f257491c42004166"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDg3OTgxOnYy", "diffSide": "RIGHT", "path": "okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzoyMjoxMFrOGxdmTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzoyMjoxMFrOGxdmTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUxODM1MA==", "bodyText": "You need to swap the order for context.assertEquals(expected, actual).", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r454518350", "createdAt": "2020-07-14T17:22:10Z", "author": {"login": "julianladisch"}, "path": "okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.folio.okapi.common;\n+\n+import org.folio.okapi.common.logging.FolioLoggingContext;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.ext.unit.Async;\n+import io.vertx.ext.unit.TestContext;\n+import io.vertx.ext.unit.junit.VertxUnitRunner;\n+\n+@RunWith(VertxUnitRunner.class)\n+public class FolioLoggingContextTest {\n+\n+\n+  private static String KEY = \"KEY\";\n+  private static String VALUE = \"VALUE\";\n+\n+  private Vertx vertx;\n+\n+  @Before\n+  public void setup() {\n+    vertx = Vertx.vertx();\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    vertx.close();\n+  }\n+\n+  @Test\n+  public void lookupWithoutContextTest() {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    loggingContext.lookup(null);\n+  }\n+\n+\n+  @Test\n+  public void lookupPutTest(TestContext context) {\n+    vertx.runOnContext(e -> {\n+      FolioLoggingContext loggingContext = new FolioLoggingContext();\n+      FolioLoggingContext.put(KEY, VALUE);\n+      context.assertEquals(loggingContext.lookup(KEY), VALUE);\n+    });\n+  }\n+\n+  @Test\n+  public void lookupNullTest(TestContext context) {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    vertx.runOnContext(e -> {\n+      loggingContext.lookup(null);\n+    });\n+  }\n+\n+  @Test\n+  public void putNullTest(TestContext context) {\n+    Async async = context.async();\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    vertx.runOnContext(e -> {\n+          FolioLoggingContext.put(KEY, null);\n+          context.assertEquals(loggingContext.lookup(KEY), \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff2fe11c0f195f26cfc0ee17f257491c42004166"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDg4MTA1OnYy", "diffSide": "RIGHT", "path": "okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzoyMjozM1rOGxdnJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzoyMjozM1rOGxdnJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUxODU2Nw==", "bodyText": "You need to swap the order for context.assertEquals(expected, actual).", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r454518567", "createdAt": "2020-07-14T17:22:33Z", "author": {"login": "julianladisch"}, "path": "okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.folio.okapi.common;\n+\n+import org.folio.okapi.common.logging.FolioLoggingContext;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.ext.unit.Async;\n+import io.vertx.ext.unit.TestContext;\n+import io.vertx.ext.unit.junit.VertxUnitRunner;\n+\n+@RunWith(VertxUnitRunner.class)\n+public class FolioLoggingContextTest {\n+\n+\n+  private static String KEY = \"KEY\";\n+  private static String VALUE = \"VALUE\";\n+\n+  private Vertx vertx;\n+\n+  @Before\n+  public void setup() {\n+    vertx = Vertx.vertx();\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    vertx.close();\n+  }\n+\n+  @Test\n+  public void lookupWithoutContextTest() {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    loggingContext.lookup(null);\n+  }\n+\n+\n+  @Test\n+  public void lookupPutTest(TestContext context) {\n+    vertx.runOnContext(e -> {\n+      FolioLoggingContext loggingContext = new FolioLoggingContext();\n+      FolioLoggingContext.put(KEY, VALUE);\n+      context.assertEquals(loggingContext.lookup(KEY), VALUE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff2fe11c0f195f26cfc0ee17f257491c42004166"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NDQyMjY0OnYy", "diffSide": "RIGHT", "path": "okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDozNToxOVrOG0QMiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDozNToxOVrOG0QMiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ0NDQ5MQ==", "bodyText": "Can you fix the javadoc? The build fails with a Checkstyle violation.", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r457444491", "createdAt": "2020-07-20T14:35:19Z", "author": {"login": "julianladisch"}, "path": "okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package org.folio.okapi.common.logging;\n+\n+import io.vertx.core.Context;\n+import io.vertx.core.Vertx;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ * The variables are stored in the local vert.x\n+ * {@link io.vertx.core.Context#putLocal Context}\n+ * and can be used in log4j log lines by using\n+ * {@link org.apache.logging.log4j.core.lookup.StrLookup StrLookup}\n+ *\n+ * , Vertx vertx local data\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e3ee1867a8b13ea78349e20874bb70bc39750ae"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NDQyOTkwOnYy", "diffSide": "RIGHT", "path": "okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDozNjoxOFrOG0QQsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDozNjoxOFrOG0QQsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ0NTU1Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              * @param value the value of  logging variable.\n          \n          \n            \n              * @param value the value of logging variable.", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r457445552", "createdAt": "2020-07-20T14:36:18Z", "author": {"login": "julianladisch"}, "path": "okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package org.folio.okapi.common.logging;\n+\n+import io.vertx.core.Context;\n+import io.vertx.core.Vertx;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ * The variables are stored in the local vert.x\n+ * {@link io.vertx.core.Context#putLocal Context}\n+ * and can be used in log4j log lines by using\n+ * {@link org.apache.logging.log4j.core.lookup.StrLookup StrLookup}\n+ *\n+ * , Vertx vertx local data\n+ */\n+@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n+public class FolioLoggingContext implements StrLookup {\n+\n+  private static final String EMPTY_VALUE = \"\";\n+\n+  private static final String LOGGING_VAR_PREFIX = \"folio_\";\n+\n+  public static final String TENANT_ID_LOGGING_VAR_NAME = \"tenantid\";\n+\n+  public static final String REQUEST_ID_LOGGING_VAR_NAME = \"requestid\";\n+\n+  public static final String MODULE_ID_LOGGING_VAR_NAME = \"moduleid\";\n+\n+  public static final String USER_ID_LOGGING_VAR_NAME = \"userid\";\n+\n+  /**\n+   * Lookup value by key.\n+   *\n+   * @param key the name of logging variable, {@code null} key isn't allowed\n+   * @return value for key or *empty string* if there is no such key\n+   */\n+  @Override\n+  public String lookup(String key) {\n+    return lookup(null, key);\n+  }\n+\n+  /**\n+  * Lookup value by key. LogEvent isn't used.\n+  *\n+  * @param key the name of logging variable, {@code null} key isn't allowed\n+  * @return value for key or *empty string* if there is no such key\n+  */\n+  @Override\n+  public String lookup(LogEvent event, String key) {\n+    if (key == null) {\n+      throw new IllegalArgumentException(\"Key cannot be null\");\n+    }\n+    Context ctx = Vertx.currentContext();\n+    if (ctx != null) {\n+      String val = ctx.getLocal(LOGGING_VAR_PREFIX + key);\n+      if (val != null) {\n+        return val;\n+      }\n+    }\n+    return EMPTY_VALUE;\n+  }\n+\n+  /**\n+  * Put value by key to the logging context.\n+  * @param key the name of logging variable, {@code null} key isn't allowed.\n+  * @param value the value of  logging variable.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e3ee1867a8b13ea78349e20874bb70bc39750ae"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NDQ5MjQyOnYy", "diffSide": "RIGHT", "path": "okapi-core/src/main/resources/log4j2-dev.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDo0NjozMFrOG0Q1HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDo0NjozMFrOG0Q1HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ1NDg3Ng==", "bodyText": "Adam said that production default should be JSONLayout and development default should be PatternLayout for readability.\nCan you copy okapi-core/src/main/resources/log4j2-dev.properties to  okapi-core/src/test/resources/log4j2-test.properties?", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r457454876", "createdAt": "2020-07-20T14:46:30Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/main/resources/log4j2-dev.properties", "diffHunk": "@@ -0,0 +1,18 @@\n+status = error", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a043d50cea7b1ee45f1f9fb757071a7ca57484"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NDU4OTI3OnYy", "diffSide": "RIGHT", "path": "okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNTowMTo0N1rOG0RtzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMTowNzowNFrOG4zkuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ2OTM4OQ==", "bodyText": "When running mvn clean install there isn't a single unit test that logs a user id. Can you extend an existing test by adding XOkapiHeaders.USER_ID? You don't need to assert that it is logged, I can look at the output.", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r457469389", "createdAt": "2020-07-20T15:01:47Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java", "diffHunk": "@@ -515,6 +516,16 @@ public void proxy(RoutingContext ctx) {\n     }\n \n     final MultiMap headers = ctx.request().headers();\n+\n+    FolioLoggingContext.put(FolioLoggingContext.TENANT_ID_LOGGING_VAR_NAME,\n+        tenantId);\n+    FolioLoggingContext.put(FolioLoggingContext.REQUEST_ID_LOGGING_VAR_NAME,\n+        headers.get(XOkapiHeaders.REQUEST_ID));\n+    FolioLoggingContext.put(FolioLoggingContext.MODULE_ID_LOGGING_VAR_NAME,\n+        headers.get(XOkapiHeaders.MODULE_ID));\n+    FolioLoggingContext.put(FolioLoggingContext.USER_ID_LOGGING_VAR_NAME,\n+        headers.get(XOkapiHeaders.USER_ID));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a043d50cea7b1ee45f1f9fb757071a7ca57484"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg0MTQ2OA==", "bodyText": "done", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r460841468", "createdAt": "2020-07-27T12:04:24Z", "author": {"login": "MikhailFokanov"}, "path": "okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java", "diffHunk": "@@ -515,6 +516,16 @@ public void proxy(RoutingContext ctx) {\n     }\n \n     final MultiMap headers = ctx.request().headers();\n+\n+    FolioLoggingContext.put(FolioLoggingContext.TENANT_ID_LOGGING_VAR_NAME,\n+        tenantId);\n+    FolioLoggingContext.put(FolioLoggingContext.REQUEST_ID_LOGGING_VAR_NAME,\n+        headers.get(XOkapiHeaders.REQUEST_ID));\n+    FolioLoggingContext.put(FolioLoggingContext.MODULE_ID_LOGGING_VAR_NAME,\n+        headers.get(XOkapiHeaders.MODULE_ID));\n+    FolioLoggingContext.put(FolioLoggingContext.USER_ID_LOGGING_VAR_NAME,\n+        headers.get(XOkapiHeaders.USER_ID));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ2OTM4OQ=="}, "originalCommit": {"oid": "41a043d50cea7b1ee45f1f9fb757071a7ca57484"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkxNjYzOQ==", "bodyText": "done", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r460916639", "createdAt": "2020-07-27T14:08:20Z", "author": {"login": "MikhailFokanov"}, "path": "okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java", "diffHunk": "@@ -515,6 +516,16 @@ public void proxy(RoutingContext ctx) {\n     }\n \n     final MultiMap headers = ctx.request().headers();\n+\n+    FolioLoggingContext.put(FolioLoggingContext.TENANT_ID_LOGGING_VAR_NAME,\n+        tenantId);\n+    FolioLoggingContext.put(FolioLoggingContext.REQUEST_ID_LOGGING_VAR_NAME,\n+        headers.get(XOkapiHeaders.REQUEST_ID));\n+    FolioLoggingContext.put(FolioLoggingContext.MODULE_ID_LOGGING_VAR_NAME,\n+        headers.get(XOkapiHeaders.MODULE_ID));\n+    FolioLoggingContext.put(FolioLoggingContext.USER_ID_LOGGING_VAR_NAME,\n+        headers.get(XOkapiHeaders.USER_ID));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ2OTM4OQ=="}, "originalCommit": {"oid": "41a043d50cea7b1ee45f1f9fb757071a7ca57484"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU1OTY4NQ==", "bodyText": "This works if the user id is passed in as X-Okapi-User-Id header.\nHowever, the front-end passes in the user id in the token. Okapi sends the token to mod-authtoken for validation. When Okapi gets the reply from mod-authtoken that the validation was successful we know the user id and can set the user id in the FolioLoggingContext. Details: https://github.com/folio-org/okapi/blob/master/doc/security.md\nCan you find the code where Okapi gets the validation result and add code for setting the user id?", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r461559685", "createdAt": "2020-07-28T13:00:08Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java", "diffHunk": "@@ -515,6 +516,16 @@ public void proxy(RoutingContext ctx) {\n     }\n \n     final MultiMap headers = ctx.request().headers();\n+\n+    FolioLoggingContext.put(FolioLoggingContext.TENANT_ID_LOGGING_VAR_NAME,\n+        tenantId);\n+    FolioLoggingContext.put(FolioLoggingContext.REQUEST_ID_LOGGING_VAR_NAME,\n+        headers.get(XOkapiHeaders.REQUEST_ID));\n+    FolioLoggingContext.put(FolioLoggingContext.MODULE_ID_LOGGING_VAR_NAME,\n+        headers.get(XOkapiHeaders.MODULE_ID));\n+    FolioLoggingContext.put(FolioLoggingContext.USER_ID_LOGGING_VAR_NAME,\n+        headers.get(XOkapiHeaders.USER_ID));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ2OTM4OQ=="}, "originalCommit": {"oid": "41a043d50cea7b1ee45f1f9fb757071a7ca57484"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIxODQyNQ==", "bodyText": "Are we interested in userId, username (login) or both? I searched Okapi code and looks like currently it does not have a central place to extract those info from the token. I am thinking that we can add those methods to https://github.com/folio-org/okapi/blob/master/okapi-common/src/main/java/org/folio/okapi/common/OkapiToken.java. For example like this https://github.com/folio-org/okapi/compare/username-userid?expand=1", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r462218425", "createdAt": "2020-07-29T11:07:04Z", "author": {"login": "hjiebsco"}, "path": "okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java", "diffHunk": "@@ -515,6 +516,16 @@ public void proxy(RoutingContext ctx) {\n     }\n \n     final MultiMap headers = ctx.request().headers();\n+\n+    FolioLoggingContext.put(FolioLoggingContext.TENANT_ID_LOGGING_VAR_NAME,\n+        tenantId);\n+    FolioLoggingContext.put(FolioLoggingContext.REQUEST_ID_LOGGING_VAR_NAME,\n+        headers.get(XOkapiHeaders.REQUEST_ID));\n+    FolioLoggingContext.put(FolioLoggingContext.MODULE_ID_LOGGING_VAR_NAME,\n+        headers.get(XOkapiHeaders.MODULE_ID));\n+    FolioLoggingContext.put(FolioLoggingContext.USER_ID_LOGGING_VAR_NAME,\n+        headers.get(XOkapiHeaders.USER_ID));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ2OTM4OQ=="}, "originalCommit": {"oid": "41a043d50cea7b1ee45f1f9fb757071a7ca57484"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODE4ODg4OnYy", "diffSide": "RIGHT", "path": "okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNjo0NzoyN1rOG2TAXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNDowODoyN1rOG3kIAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU4NzY3OQ==", "bodyText": "I don't see StrLookup in log4j2.properties. I only see references like $${FolioLoggingContext:requestid}. Can you make the usage explanation more instructive?", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r459587679", "createdAt": "2020-07-23T16:47:27Z", "author": {"login": "julianladisch"}, "path": "okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package org.folio.okapi.common.logging;\n+\n+import io.vertx.core.Context;\n+import io.vertx.core.Vertx;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ * The variables are stored in the local vert.x\n+ * {@link io.vertx.core.Context#putLocal Context}\n+ * and can be used in log4j log lines by using\n+ * {@link org.apache.logging.log4j.core.lookup.StrLookup StrLookup}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b67f6e621f5d2fecf03610da69878abf42cd70de"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg0MTUwNw==", "bodyText": "done", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r460841507", "createdAt": "2020-07-27T12:04:29Z", "author": {"login": "MikhailFokanov"}, "path": "okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package org.folio.okapi.common.logging;\n+\n+import io.vertx.core.Context;\n+import io.vertx.core.Vertx;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ * The variables are stored in the local vert.x\n+ * {@link io.vertx.core.Context#putLocal Context}\n+ * and can be used in log4j log lines by using\n+ * {@link org.apache.logging.log4j.core.lookup.StrLookup StrLookup}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU4NzY3OQ=="}, "originalCommit": {"oid": "b67f6e621f5d2fecf03610da69878abf42cd70de"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkxNjczNg==", "bodyText": "done", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r460916736", "createdAt": "2020-07-27T14:08:27Z", "author": {"login": "MikhailFokanov"}, "path": "okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package org.folio.okapi.common.logging;\n+\n+import io.vertx.core.Context;\n+import io.vertx.core.Vertx;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ * The variables are stored in the local vert.x\n+ * {@link io.vertx.core.Context#putLocal Context}\n+ * and can be used in log4j log lines by using\n+ * {@link org.apache.logging.log4j.core.lookup.StrLookup StrLookup}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU4NzY3OQ=="}, "originalCommit": {"oid": "b67f6e621f5d2fecf03610da69878abf42cd70de"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NTc2NzI0OnYy", "diffSide": "RIGHT", "path": "okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMToxNzozN1rOG4z4vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMjoyMDowOFrOG5gkuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIyMzU0OQ==", "bodyText": "Maybe also add following lines?\n    FolioLoggingContext.put(KEY, VALUE);\n    context.assertEquals(EMPTY_STRING, loggingContext.lookup(KEY));", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r462223549", "createdAt": "2020-07-29T11:17:37Z", "author": {"login": "hjiebsco"}, "path": "okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.folio.okapi.common;\n+\n+import org.folio.okapi.common.logging.FolioLoggingContext;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.ext.unit.Async;\n+import io.vertx.ext.unit.TestContext;\n+import io.vertx.ext.unit.junit.VertxUnitRunner;\n+\n+@RunWith(VertxUnitRunner.class)\n+public class FolioLoggingContextTest {\n+\n+\n+  private static final String KEY = \"KEY\";\n+  private static final String VALUE = \"VALUE\";\n+  private static final String EMPTY_STRING = \"\";\n+\n+  private Vertx vertx;\n+\n+  @Before\n+  public void setup() {\n+    vertx = Vertx.vertx();\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    vertx.close();\n+  }\n+\n+  @Test\n+  public void lookupWithoutContextTest(TestContext context) {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    context.assertEquals(EMPTY_STRING, loggingContext.lookup(KEY));\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe2ae252812765ac8a1af3c4775556298581d839"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk1NTcwNQ==", "bodyText": "done", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r462955705", "createdAt": "2020-07-30T12:20:08Z", "author": {"login": "MikhailFokanov"}, "path": "okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.folio.okapi.common;\n+\n+import org.folio.okapi.common.logging.FolioLoggingContext;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.ext.unit.Async;\n+import io.vertx.ext.unit.TestContext;\n+import io.vertx.ext.unit.junit.VertxUnitRunner;\n+\n+@RunWith(VertxUnitRunner.class)\n+public class FolioLoggingContextTest {\n+\n+\n+  private static final String KEY = \"KEY\";\n+  private static final String VALUE = \"VALUE\";\n+  private static final String EMPTY_STRING = \"\";\n+\n+  private Vertx vertx;\n+\n+  @Before\n+  public void setup() {\n+    vertx = Vertx.vertx();\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    vertx.close();\n+  }\n+\n+  @Test\n+  public void lookupWithoutContextTest(TestContext context) {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    context.assertEquals(EMPTY_STRING, loggingContext.lookup(KEY));\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIyMzU0OQ=="}, "originalCommit": {"oid": "fe2ae252812765ac8a1af3c4775556298581d839"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDc1MjIwOnYy", "diffSide": "RIGHT", "path": "okapi-test-auth-module/src/main/java/org/folio/okapi/auth/Auth.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMzo0MDozMFrOG5jf3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMzo0MDozMFrOG5jf3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAwMzYxNA==", "bodyText": "As chatted, we do not need to change okapi-test-auth-module/src/main/java/org/folio/okapi/auth/Auth.java", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r463003614", "createdAt": "2020-07-30T13:40:30Z", "author": {"login": "hjiebsco"}, "path": "okapi-test-auth-module/src/main/java/org/folio/okapi/auth/Auth.java", "diffHunk": "@@ -222,6 +223,8 @@ public void check(RoutingContext ctx) {\n     }\n     // Fake some module tokens\n     String modTok = moduleTokens(ctx);\n+    FolioLoggingContext.put(FolioLoggingContext.USER_ID_LOGGING_VAR_NAME,\n+        userId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08efadd3db3f7ba349775199b9986ab7809d9e57"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyODA0NzgxOnYy", "diffSide": "RIGHT", "path": "okapi-common/src/main/java/org/folio/okapi/common/OkapiToken.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNDozMjozM1rOG-6y_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMToxMDo0M1rOHDZZAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYyODIyMg==", "bodyText": "Taking a value out of a JWT token without validating the token can cause a security issue because anyone can spoof it.\nSuch a value must be handled with caution and care.\nI suggest to rename the methods to draw developer attention to the missing validation:\n\nrename getTenant() to getTenantWithoutValidation()\nrename getUsername() to getUsernameWithoutValidation()\nrename getUserId() to getUserIdWithoutValidation()\nrename getFieldFromToken(String) to getFieldFromTokenWithoutValidation(String)", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r468628222", "createdAt": "2020-08-11T14:32:33Z", "author": {"login": "julianladisch"}, "path": "okapi-common/src/main/java/org/folio/okapi/common/OkapiToken.java", "diffHunk": "@@ -41,16 +46,37 @@ private JsonObject getPayloadWithoutValidation() {\n     }\n   }\n \n+  private String getFieldFromToken(String field) {\n+    if (payloadWithoutValidation == null) {\n+      return null;\n+    }\n+    return payloadWithoutValidation.getString(field);\n+  }\n+\n   /**\n    * Get the tenant out from the token.\n    * Note there is no JWT validation taking place.\n    * @return null if no token, or no tenant there\n    */\n   public String getTenant() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a5d7a4e5ba7fb951a2e7aa15ee009680e5fdf04"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMyMzc3OQ==", "bodyText": "fixed", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r473323779", "createdAt": "2020-08-19T21:10:43Z", "author": {"login": "MikhailFokanov"}, "path": "okapi-common/src/main/java/org/folio/okapi/common/OkapiToken.java", "diffHunk": "@@ -41,16 +46,37 @@ private JsonObject getPayloadWithoutValidation() {\n     }\n   }\n \n+  private String getFieldFromToken(String field) {\n+    if (payloadWithoutValidation == null) {\n+      return null;\n+    }\n+    return payloadWithoutValidation.getString(field);\n+  }\n+\n   /**\n    * Get the tenant out from the token.\n    * Note there is no JWT validation taking place.\n    * @return null if no token, or no tenant there\n    */\n   public String getTenant() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYyODIyMg=="}, "originalCommit": {"oid": "3a5d7a4e5ba7fb951a2e7aa15ee009680e5fdf04"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 112, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}