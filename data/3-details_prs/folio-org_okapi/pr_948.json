{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxOTg2MjY1", "number": 948, "title": "OKAPI-866 OOM bulk upload", "bodyText": "This should decrease the memory usage for upload and download for Okapi. The problem is fixed by switching from\nhttps://vertx.io/docs/apidocs/io/vertx/core/http/HttpClientRequest.html#write-io.vertx.core.buffer.Buffer-\nto\nhttps://vertx.io/docs/apidocs/io/vertx/core/http/HttpClientRequest.html#write-io.vertx.core.buffer.Buffer-io.vertx.core.Handler-\nThe problem with the former is that, since it will not block it will pile up the request or response in memory.. Using the latter and pause the source from data until complete minimizes memory.\nThis PR has a test-case for okapi-test-module.. That is an end-to-end client + server to analyze the problem, which turned out to be useful.\n2nd part is \"just\" the fix for Okapi and a similar test case .", "createdAt": "2020-06-30T12:13:23Z", "url": "https://github.com/folio-org/okapi/pull/948", "merged": true, "mergeCommit": {"oid": "563a6a54bd714694cd65903ddf8298e445a585ba"}, "closed": true, "closedAt": "2020-07-02T07:42:09Z", "author": {"login": "adamdickmeiss"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcwDOk4gH2gAyNDQxOTg2MjY1OjQ0ZGY3YmE2NGRmMTc1OWY1ZTc5MTAzOWIwMDM5N2Q3ZjYyMWEzMTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcwvHM1gH2gAyNDQxOTg2MjY1OjliODBmZDQ5NmI2ZWM1M2VkYmRkMzk3NDgzOGU1YzE5MzJiZGE2Nzc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "44df7ba64df1759f5e791039b00397d7f621a316", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/44df7ba64df1759f5e791039b00397d7f621a316", "committedDate": "2020-06-29T16:00:05Z", "message": "Tests for OKAPI-866"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e73c46e2781ffcbd6decf21cf042f0a8235f3c2f", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/e73c46e2781ffcbd6decf21cf042f0a8235f3c2f", "committedDate": "2020-06-29T19:00:20Z", "message": "Use HttpClientRequest.write with handler\n\nThat is much much faster and uses no memory."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10ea0614ea383d38d6b65ff3d674cda467072549", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/10ea0614ea383d38d6b65ff3d674cda467072549", "committedDate": "2020-06-30T12:02:01Z", "message": "Pause stream until write is complete"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f709f9cabd0a146cbc6aab102bf2f30b925eba17", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/f709f9cabd0a146cbc6aab102bf2f30b925eba17", "committedDate": "2020-06-30T12:09:13Z", "message": "Ease a bit on testing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMDgwMzM0", "url": "https://github.com/folio-org/okapi/pull/948#pullrequestreview-440080334", "createdAt": "2020-06-30T14:34:59Z", "commit": {"oid": "f709f9cabd0a146cbc6aab102bf2f30b925eba17"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDozNDo1OVrOGq_b9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDozNDo1OVrOGq_b9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzczMjcyNA==", "bodyText": "If r can handle less data per second than ctx.response() the data in r's queue will grow until out of memory.", "url": "https://github.com/folio-org/okapi/pull/948#discussion_r447732724", "createdAt": "2020-06-30T14:34:59Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java", "diffHunk": "@@ -592,7 +592,8 @@ private void proxyResponseImmediate(ProxyContext pc, ReadStream<Buffer> res,\n         for (HttpClientRequest r : clientRequestList) {\n           r.write(data);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f709f9cabd0a146cbc6aab102bf2f30b925eba17"}, "originalPosition": 2}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMDgyMTM2", "url": "https://github.com/folio-org/okapi/pull/948#pullrequestreview-440082136", "createdAt": "2020-06-30T14:36:51Z", "commit": {"oid": "f709f9cabd0a146cbc6aab102bf2f30b925eba17"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDozNjo1MVrOGq_hhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDozNjo1MVrOGq_hhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzczNDE1MA==", "bodyText": "If r can handle less data per second than clientRequest the data in r's queue will grow until out of memory.", "url": "https://github.com/folio-org/okapi/pull/948#discussion_r447734150", "createdAt": "2020-06-30T14:36:51Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java", "diffHunk": "@@ -798,7 +799,8 @@ private void proxyRequestResponse(Iterator<ModuleInstance> it,\n       stream.handler(data -> {\n         pc.trace(\"proxyRequestResponse request chunk '\"\n             + data.toString() + \"'\");\n-        clientRequest.write(data);\n+        stream.pause();\n+        clientRequest.write(data, comp -> stream.resume());\n         for (HttpClientRequest r : clientRequestList) {\n           r.write(data);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f709f9cabd0a146cbc6aab102bf2f30b925eba17"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMDgyOTcy", "url": "https://github.com/folio-org/okapi/pull/948#pullrequestreview-440082972", "createdAt": "2020-06-30T14:37:42Z", "commit": {"oid": "f709f9cabd0a146cbc6aab102bf2f30b925eba17"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDozNzo0MlrOGq_j7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDozNzo0MlrOGq_j7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzczNDc2NQ==", "bodyText": "res should be renamed to stream or readStream", "url": "https://github.com/folio-org/okapi/pull/948#discussion_r447734765", "createdAt": "2020-06-30T14:37:42Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java", "diffHunk": "@@ -592,7 +592,8 @@ private void proxyResponseImmediate(ProxyContext pc, ReadStream<Buffer> res,\n         for (HttpClientRequest r : clientRequestList) {\n           r.write(data);\n         }\n-        ctx.response().write(data);\n+        res.pause();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f709f9cabd0a146cbc6aab102bf2f30b925eba17"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMTM3MTI3", "url": "https://github.com/folio-org/okapi/pull/948#pullrequestreview-440137127", "createdAt": "2020-06-30T15:31:21Z", "commit": {"oid": "f709f9cabd0a146cbc6aab102bf2f30b925eba17"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMTg5NjEx", "url": "https://github.com/folio-org/okapi/pull/948#pullrequestreview-440189611", "createdAt": "2020-06-30T16:29:30Z", "commit": {"oid": "f709f9cabd0a146cbc6aab102bf2f30b925eba17"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjoyOTozMFrOGrEsMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjoyOTozMFrOGrEsMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgxODgwMw==", "bodyText": "write(Buffer, Handler) does NOT wait if the queue is full. It calls the Handler after appending Buffer to the queue regardless of the queue status.\nThe documenation\n\nhttps://vertx.io/docs/apidocs/io/vertx/core/streams/WriteStream.html\nhttps://vertx.io/docs/vertx-core/java/#streams\n\nexplains to call writeQueueFull() to get a signal about a full queue.\nYou probably need to implement\n\nhttps://vertx.io/docs/apidocs/io/vertx/core/streams/Pump.html\nhttps://github.com/eclipse-vertx/vert.x/blob/master/src/main/java/io/vertx/core/streams/impl/PipeImpl.java\n\nwith one ReadStream and multiple WriteStreams.", "url": "https://github.com/folio-org/okapi/pull/948#discussion_r447818803", "createdAt": "2020-06-30T16:29:30Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java", "diffHunk": "@@ -592,7 +592,8 @@ private void proxyResponseImmediate(ProxyContext pc, ReadStream<Buffer> res,\n         for (HttpClientRequest r : clientRequestList) {\n           r.write(data);\n         }\n-        ctx.response().write(data);\n+        res.pause();\n+        ctx.response().write(data, end -> res.resume());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f709f9cabd0a146cbc6aab102bf2f30b925eba17"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e764987fd8ea29d190b40de2f29f8cee7e54182e", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/e764987fd8ea29d190b40de2f29f8cee7e54182e", "committedDate": "2020-06-30T16:52:32Z", "message": "Wait on logging HTTP clients too to be ready"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70876fcafb2470ed7bed26d93fae9236caba22b8", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/70876fcafb2470ed7bed26d93fae9236caba22b8", "committedDate": "2020-06-30T16:52:50Z", "message": "Merge remote-tracking branch 'origin/master' into OKAPI-866-oom-bulk-upload"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40bbaa5c3d54df15340e4a25b198c1d308edcbdb", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/40bbaa5c3d54df15340e4a25b198c1d308edcbdb", "committedDate": "2020-06-30T17:46:00Z", "message": "Solution with writeQueueFull and drainHandler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a72c80cda6d9115c5db34687255f3ad2b5e824b3", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/a72c80cda6d9115c5db34687255f3ad2b5e824b3", "committedDate": "2020-06-30T18:22:47Z", "message": "Bail out"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNDM2NzY5", "url": "https://github.com/folio-org/okapi/pull/948#pullrequestreview-440436769", "createdAt": "2020-06-30T22:46:42Z", "commit": {"oid": "a72c80cda6d9115c5db34687255f3ad2b5e824b3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMjo0Njo0MlrOGrRBFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMjo0Njo0MlrOGrRBFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAyMDc1Nw==", "bodyText": "List<HttpClientRequest> can be changed to List<? extends WriteStream<Buffer>>", "url": "https://github.com/folio-org/okapi/pull/948#discussion_r448020757", "createdAt": "2020-06-30T22:46:42Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java", "diffHunk": "@@ -754,6 +741,57 @@ private void fixupXOkapiToken(ModuleDescriptor md, MultiMap reqHeaders, MultiMap\n     }\n   }\n \n+  private static void streamHandle(ProxyContext pc, ReadStream<Buffer> readStream,\n+                                   WriteStream<Buffer> mainWriteStream,\n+                                   List<HttpClientRequest> logWriteStreams) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a72c80cda6d9115c5db34687255f3ad2b5e824b3"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNDQwMDc5", "url": "https://github.com/folio-org/okapi/pull/948#pullrequestreview-440440079", "createdAt": "2020-06-30T22:55:15Z", "commit": {"oid": "a72c80cda6d9115c5db34687255f3ad2b5e824b3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMjo1NToxNVrOGrRMfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMjo1NToxNVrOGrRMfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAyMzY3OQ==", "bodyText": "This won't work in all cases.\nA WriteStream will always call the drainHandler, even if ProxyService missed the time period where the WriteStream queue was full.\nHow about a pauseAndResume method:\nfor each WriteStream\n  if not full\n    set drainHandler to null\n  else\n    set drainHandler to pauseAndResume\n    pause readStream\n    exit this method.\nresume readStream\n\nCall this method after data has been written to the WriteStreams.", "url": "https://github.com/folio-org/okapi/pull/948#discussion_r448023679", "createdAt": "2020-06-30T22:55:15Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java", "diffHunk": "@@ -754,6 +741,57 @@ private void fixupXOkapiToken(ModuleDescriptor md, MultiMap reqHeaders, MultiMap\n     }\n   }\n \n+  private static void streamHandle(ProxyContext pc, ReadStream<Buffer> readStream,\n+                                   WriteStream<Buffer> mainWriteStream,\n+                                   List<HttpClientRequest> logWriteStreams) {\n+    readStream.handler(data -> {\n+      AtomicInteger pend = new AtomicInteger();\n+      // two passes.. to avoid drainHandler being fired off too early.\n+      // first pass: see if any of writing streams are full?\n+      mainWriteStream.write(data);\n+      if (mainWriteStream.writeQueueFull()) {\n+        pend.incrementAndGet();\n+      }\n+      for (WriteStream<Buffer> w : logWriteStreams) {\n+        w.write(data);\n+        if (w.writeQueueFull()) {\n+          pend.incrementAndGet();\n+        }\n+      }\n+      if (pend.get() == 0) {\n+        return;\n+      }\n+      // second pass: at least one was full. pause and set up drainHandlers for full ones.\n+      readStream.pause();\n+      if (mainWriteStream.writeQueueFull()) {\n+        mainWriteStream.drainHandler(x -> {\n+          if (pend.decrementAndGet() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a72c80cda6d9115c5db34687255f3ad2b5e824b3"}, "originalPosition": 84}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08e0b602eae0d6f827bddf0ff201d735c4096bf1", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/08e0b602eae0d6f827bddf0ff201d735c4096bf1", "committedDate": "2020-07-01T12:42:21Z", "message": "Make simpler utility pumpOneToMany"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwODkzNzU2", "url": "https://github.com/folio-org/okapi/pull/948#pullrequestreview-440893756", "createdAt": "2020-07-01T13:57:02Z", "commit": {"oid": "08e0b602eae0d6f827bddf0ff201d735c4096bf1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMzo1NzowMlrOGrnB6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMzo1NzowMlrOGrnB6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM4MTQxNw==", "bodyText": "Using an AtomicInteger won't work in all cases:\n\nThe drainHandler may be called asynchronously at a later time. It may happen that the ProxyService missed the time period where the WriteStream queue was full and only sees the drainHandler call.\nA WriteStream implementation may have a high watermark for writeQueueFull() and a low watermark for calling drainHandler. Example: https://github.com/eclipse-vertx/vert.x/blob/3.9.1/src/main/java/io/vertx/core/file/impl/AsyncFileImpl.java#L70-L71 where high watermark is 128 * 1024 and low watermark is half of this = 64 * 1024.\n\nThis algorithm for a pauseAndResume method avoids any counting and only uses the current full status:\nfor each WriteStream\n  if not full\n    set drainHandler to null\n  else\n    set drainHandler to pauseAndResume\n    pause readStream\n    exit this method.\n// this point is only reached if all WriteStreams are not full\nresume readStream\n\nCall this method after data has been written to the WriteStreams.", "url": "https://github.com/folio-org/okapi/pull/948#discussion_r448381417", "createdAt": "2020-07-01T13:57:02Z", "author": {"login": "julianladisch"}, "path": "okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java", "diffHunk": "@@ -754,6 +741,55 @@ private void fixupXOkapiToken(ModuleDescriptor md, MultiMap reqHeaders, MultiMap\n     }\n   }\n \n+  private static void streamHandle(ProxyContext pc, ReadStream<Buffer> readStream,\n+                                   WriteStream<Buffer> mainWriteStream,\n+                                   List<HttpClientRequest> logWriteStreams) {\n+    List<WriteStream<Buffer>> writeStreams = new LinkedList<>();\n+    writeStreams.add(mainWriteStream);\n+    for (WriteStream<Buffer> w : logWriteStreams) {\n+      writeStreams.add(w);\n+    }\n+    pumpOneToMany(readStream, writeStreams);\n+    readStream.exceptionHandler(e\n+        -> pc.warn(\"streamHandle: content exception \", e));\n+    readStream.resume();\n+  }\n+\n+  private static void pumpOneToMany(ReadStream<Buffer> readStream,\n+                                    List<WriteStream<Buffer>> writeStreams) {\n+\n+    readStream.handler(data -> {\n+      AtomicInteger pend = new AtomicInteger();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08e0b602eae0d6f827bddf0ff201d735c4096bf1"}, "originalPosition": 78}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8b329464507cc7c7c84d643d46c6cbe5b07d2d4", "author": {"user": {"login": "julianladisch", "name": null}}, "url": "https://github.com/folio-org/okapi/commit/f8b329464507cc7c7c84d643d46c6cbe5b07d2d4", "committedDate": "2020-07-01T15:58:52Z", "message": "pumpOneToMany unit tests and pauseAndResume method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMDQ2NjEw", "url": "https://github.com/folio-org/okapi/pull/948#pullrequestreview-441046610", "createdAt": "2020-07-01T16:59:41Z", "commit": {"oid": "f8b329464507cc7c7c84d643d46c6cbe5b07d2d4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMDY2NzM1", "url": "https://github.com/folio-org/okapi/pull/948#pullrequestreview-441066735", "createdAt": "2020-07-01T17:29:57Z", "commit": {"oid": "f8b329464507cc7c7c84d643d46c6cbe5b07d2d4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b80fd496b6ec53edbdd3974838e5c1932bda677", "author": {"user": {"login": "adamdickmeiss", "name": "Adam Dickmeiss"}}, "url": "https://github.com/folio-org/okapi/commit/9b80fd496b6ec53edbdd3974838e5c1932bda677", "committedDate": "2020-07-01T19:07:51Z", "message": "Test using Okapi with two write streams and pause\n\nNew test testUpload makes use of two modules where one is regular\n(request-response) and other is request-log. The /echo service makes\ndelay which should provoke writeQueueFull returning true."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2797, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}