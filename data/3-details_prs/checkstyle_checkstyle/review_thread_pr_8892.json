{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxMTQzMDcx", "number": 8892, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNzozNzo0OFrOEsZ6nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwNDoyOToxNlrOEsd90g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0OTk3NDA1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNzozNzo0OFrOHfpSQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxOTowMzowOVrOHfp1CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk0NDMyMg==", "bodyText": "Should it be node.getChildCount() > 1 ?", "url": "https://github.com/checkstyle/checkstyle/pull/8892#discussion_r502944322", "createdAt": "2020-10-11T17:37:48Z", "author": {"login": "pbludov"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtil.java", "diffHunk": "@@ -266,7 +266,7 @@ public static boolean isLocalVariableDef(DetailAST node) {\n         }\n \n         if (node.getType() == TokenTypes.RESOURCE) {\n-            localVariableDef = true;\n+            localVariableDef = node.getChildCount() != 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9baeffbe2fcc450c159a5f0375aa0b0251514e01"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk1MzIyNA==", "bodyText": "Good catch, fixed", "url": "https://github.com/checkstyle/checkstyle/pull/8892#discussion_r502953224", "createdAt": "2020-10-11T19:03:09Z", "author": {"login": "strkkk"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtil.java", "diffHunk": "@@ -266,7 +266,7 @@ public static boolean isLocalVariableDef(DetailAST node) {\n         }\n \n         if (node.getType() == TokenTypes.RESOURCE) {\n-            localVariableDef = true;\n+            localVariableDef = node.getChildCount() != 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk0NDMyMg=="}, "originalCommit": {"oid": "9baeffbe2fcc450c159a5f0375aa0b0251514e01"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MDYzNzYyOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtilTest.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwNDoyOToxNlrOHfurfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNzoxMzoxOFrOHgG4lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzAzMjcwMw==", "bodyText": "Can we avoid this type of tests ?\nWe did do much to avoid this level of fakes that make no good to code.", "url": "https://github.com/checkstyle/checkstyle/pull/8892#discussion_r503032703", "createdAt": "2020-10-12T04:29:16Z", "author": {"login": "romani"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtilTest.java", "diffHunk": "@@ -166,7 +166,18 @@ public void testIsLocalVariableDefUnexpected() {\n \n     @Test\n     public void testIsLocalVariableDefResource() {\n-        assertTrue(ScopeUtil.isLocalVariableDef(getNode(TokenTypes.RESOURCE)), \"invalid result\");\n+        final DetailAstImpl resourceTwoChildren = getNode(TokenTypes.RESOURCE);\n+        final DetailAstImpl modifiers = new DetailAstImpl();\n+        modifiers.setType(TokenTypes.MODIFIERS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f14c9df19f33ddd12f96c75f33de9a5d765842a"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA3NTIxNg==", "bodyText": "This method checks node, so we need to provide a node to test. Another way is to parse some file, navigate to node and check result.\nI do not like the way test (and other tests in this file) is written, but it is common approach for this util class.\nI suggest to create separate issue for refactoring of this test class to avoid using fake nodes.", "url": "https://github.com/checkstyle/checkstyle/pull/8892#discussion_r503075216", "createdAt": "2020-10-12T06:56:25Z", "author": {"login": "strkkk"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtilTest.java", "diffHunk": "@@ -166,7 +166,18 @@ public void testIsLocalVariableDefUnexpected() {\n \n     @Test\n     public void testIsLocalVariableDefResource() {\n-        assertTrue(ScopeUtil.isLocalVariableDef(getNode(TokenTypes.RESOURCE)), \"invalid result\");\n+        final DetailAstImpl resourceTwoChildren = getNode(TokenTypes.RESOURCE);\n+        final DetailAstImpl modifiers = new DetailAstImpl();\n+        modifiers.setType(TokenTypes.MODIFIERS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzAzMjcwMw=="}, "originalCommit": {"oid": "0f14c9df19f33ddd12f96c75f33de9a5d765842a"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM0NjY0MQ==", "bodyText": "what force you to create this test ?\nWe had several bad cases of test to satisfy pitest coverage that it split in several groups, so some cases claimed to be not reachable.", "url": "https://github.com/checkstyle/checkstyle/pull/8892#discussion_r503346641", "createdAt": "2020-10-12T14:46:52Z", "author": {"login": "romani"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtilTest.java", "diffHunk": "@@ -166,7 +166,18 @@ public void testIsLocalVariableDefUnexpected() {\n \n     @Test\n     public void testIsLocalVariableDefResource() {\n-        assertTrue(ScopeUtil.isLocalVariableDef(getNode(TokenTypes.RESOURCE)), \"invalid result\");\n+        final DetailAstImpl resourceTwoChildren = getNode(TokenTypes.RESOURCE);\n+        final DetailAstImpl modifiers = new DetailAstImpl();\n+        modifiers.setType(TokenTypes.MODIFIERS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzAzMjcwMw=="}, "originalCommit": {"oid": "0f14c9df19f33ddd12f96c75f33de9a5d765842a"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM1MDY4OQ==", "bodyText": "I am not the one who created this test, it was like this before. I modified the logic, and result for such dummy node (with no children) is changed. This will never happen in real life.\nOther conditions (1 child, 2+ children) are covered by test cases for checks, which is not good since it is indirect test.\nSo I added new cases to check changed logic directly.", "url": "https://github.com/checkstyle/checkstyle/pull/8892#discussion_r503350689", "createdAt": "2020-10-12T14:53:07Z", "author": {"login": "strkkk"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtilTest.java", "diffHunk": "@@ -166,7 +166,18 @@ public void testIsLocalVariableDefUnexpected() {\n \n     @Test\n     public void testIsLocalVariableDefResource() {\n-        assertTrue(ScopeUtil.isLocalVariableDef(getNode(TokenTypes.RESOURCE)), \"invalid result\");\n+        final DetailAstImpl resourceTwoChildren = getNode(TokenTypes.RESOURCE);\n+        final DetailAstImpl modifiers = new DetailAstImpl();\n+        modifiers.setType(TokenTypes.MODIFIERS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzAzMjcwMw=="}, "originalCommit": {"oid": "0f14c9df19f33ddd12f96c75f33de9a5d765842a"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM5Mjc4MQ==", "bodyText": "one more note - there is no need for this test case. Pitest will pass because this condition is tested indirectly by test cases for several checks.\n@romani if this is fine, I can remove it. If not, such test case should be kept to test this util method directly.", "url": "https://github.com/checkstyle/checkstyle/pull/8892#discussion_r503392781", "createdAt": "2020-10-12T16:02:45Z", "author": {"login": "strkkk"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtilTest.java", "diffHunk": "@@ -166,7 +166,18 @@ public void testIsLocalVariableDefUnexpected() {\n \n     @Test\n     public void testIsLocalVariableDefResource() {\n-        assertTrue(ScopeUtil.isLocalVariableDef(getNode(TokenTypes.RESOURCE)), \"invalid result\");\n+        final DetailAstImpl resourceTwoChildren = getNode(TokenTypes.RESOURCE);\n+        final DetailAstImpl modifiers = new DetailAstImpl();\n+        modifiers.setType(TokenTypes.MODIFIERS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzAzMjcwMw=="}, "originalCommit": {"oid": "0f14c9df19f33ddd12f96c75f33de9a5d765842a"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQyOTI3MA==", "bodyText": "Please remove this test, we need to keep pure UT only as very very last resort to satisfy coverage", "url": "https://github.com/checkstyle/checkstyle/pull/8892#discussion_r503429270", "createdAt": "2020-10-12T17:13:18Z", "author": {"login": "romani"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtilTest.java", "diffHunk": "@@ -166,7 +166,18 @@ public void testIsLocalVariableDefUnexpected() {\n \n     @Test\n     public void testIsLocalVariableDefResource() {\n-        assertTrue(ScopeUtil.isLocalVariableDef(getNode(TokenTypes.RESOURCE)), \"invalid result\");\n+        final DetailAstImpl resourceTwoChildren = getNode(TokenTypes.RESOURCE);\n+        final DetailAstImpl modifiers = new DetailAstImpl();\n+        modifiers.setType(TokenTypes.MODIFIERS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzAzMjcwMw=="}, "originalCommit": {"oid": "0f14c9df19f33ddd12f96c75f33de9a5d765842a"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1618, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}