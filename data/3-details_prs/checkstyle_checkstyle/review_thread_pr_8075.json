{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyMjg2MDU5", "number": 8075, "reviewThreads": {"totalCount": 40, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNzo1NzoyMlrOD0XGBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxOTozMzowMlrOD9HDUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MjMwOTE3OnYy", "diffSide": "RIGHT", "path": "config/pmd-main.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNzo1NzoyMlrOGJRJlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNzo1NzoyMlrOGJRJlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM3MTM1MQ==", "bodyText": "I try to add this to suppress CloseResource violation in pmd, but it not effects. I need some help", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r412371351", "createdAt": "2020-04-21T17:57:22Z", "author": {"login": "HuGanghui"}, "path": "config/pmd-main.xml", "diffHunk": "@@ -54,6 +54,8 @@\n                       |//ClassOrInterfaceDeclaration[@Image='CheckstyleAntTask']\n                                  //MethodDeclaration[@Name='getListeners'\n                                                        or @Name='createDefaultLogger']\n+                      |//ClassOrInterfaceDeclaration[@Image='XdocsUrlTest']", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6616c4b708376ddf49e63f9de57029934bc281c7"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MjMzNDQ2OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxODowMjo0MVrOGJRYtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMjo0NDoyM1rOGJgzfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM3NTIyMA==", "bodyText": "I try my best but not find a way to solve CloseResource violation in pmd. If I add try-catch to fix violation in pmd, I will get another violation that Checkstyle only allow failure in try-catch when this is Test class.", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r412375220", "createdAt": "2020-04-21T18:02:41Z", "author": {"login": "HuGanghui"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,202 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.io.File;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    public static final String NODE_NAME = \"a\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    private static String getRootPath() {\n+        return System.getProperty(\"user.dir\");\n+    }\n+\n+    private static String getXmlPath() {\n+        return \"src/xdocs/checks.xml\";\n+    }\n+\n+    private Map<String, String[]> getXdocsMap() {\n+        final String rootPath = getRootPath();\n+        final File checks = new File(rootPath + \"/\" + PACKAGE_NAME);\n+        final String[] checksSubDirNames = checks.list((rootdir, pathname) -> {\n+            return !pathname.endsWith(SUFFIX_JAVA);\n+        });\n+        final Map<String, String[]> checksNamesMap = new HashMap<>();\n+        if (checksSubDirNames != null) {\n+            for (String dirName : checksSubDirNames) {\n+                final File dirFile = new File(rootPath + \"/\" + PACKAGE_NAME + \"/\" + dirName);\n+                final String[] fileNames = dirFile.list((rootdir, pathname) -> {\n+                    return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+                });\n+                checksNamesMap.put(dirName, fileNames);\n+            }\n+            final String[] miscNames = checks.list((rootdir, pathname) -> {\n+                return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+            });\n+            checksNamesMap.put(MISC, miscNames);\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest myhandler = new CheckTest(NODE_NAME);\n+        final InputStream input = Files.newInputStream(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6616c4b708376ddf49e63f9de57029934bc281c7"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYyNzgzNg==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r412627836", "createdAt": "2020-04-22T02:44:23Z", "author": {"login": "HuGanghui"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,202 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.io.File;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    public static final String NODE_NAME = \"a\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    private static String getRootPath() {\n+        return System.getProperty(\"user.dir\");\n+    }\n+\n+    private static String getXmlPath() {\n+        return \"src/xdocs/checks.xml\";\n+    }\n+\n+    private Map<String, String[]> getXdocsMap() {\n+        final String rootPath = getRootPath();\n+        final File checks = new File(rootPath + \"/\" + PACKAGE_NAME);\n+        final String[] checksSubDirNames = checks.list((rootdir, pathname) -> {\n+            return !pathname.endsWith(SUFFIX_JAVA);\n+        });\n+        final Map<String, String[]> checksNamesMap = new HashMap<>();\n+        if (checksSubDirNames != null) {\n+            for (String dirName : checksSubDirNames) {\n+                final File dirFile = new File(rootPath + \"/\" + PACKAGE_NAME + \"/\" + dirName);\n+                final String[] fileNames = dirFile.list((rootdir, pathname) -> {\n+                    return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+                });\n+                checksNamesMap.put(dirName, fileNames);\n+            }\n+            final String[] miscNames = checks.list((rootdir, pathname) -> {\n+                return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+            });\n+            checksNamesMap.put(MISC, miscNames);\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest myhandler = new CheckTest(NODE_NAME);\n+        final InputStream input = Files.newInputStream(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM3NTIyMA=="}, "originalCommit": {"oid": "6616c4b708376ddf49e63f9de57029934bc281c7"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NTI1NzM1OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwODo1MjoxN1rOGJrJfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwODoyMjoxOVrOGLMSlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc5NzMwOQ==", "bodyText": "please use try-with-resources here", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r412797309", "createdAt": "2020-04-22T08:52:17Z", "author": {"login": "strkkk"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,200 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.io.File;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    public static final String NODE_NAME = \"a\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    private static String getRootPath() {\n+        return System.getProperty(\"user.dir\");\n+    }\n+\n+    private static String getXmlPath() {\n+        return \"src/xdocs/checks.xml\";\n+    }\n+\n+    private static Map<String, String[]> getXdocsMap() {\n+        final String rootPath = getRootPath();\n+        final File checks = new File(rootPath + \"/\" + PACKAGE_NAME);\n+        final String[] checksSubDirNames = checks.list((rootDir, pathname) -> {\n+            return !pathname.endsWith(SUFFIX_JAVA);\n+        });\n+        final Map<String, String[]> checksNamesMap = new HashMap<>();\n+        if (checksSubDirNames != null) {\n+            for (String dirName : checksSubDirNames) {\n+                final File dirFile = new File(rootPath + \"/\" + PACKAGE_NAME + \"/\" + dirName);\n+                final String[] fileNames = dirFile.list((rootDir, pathname) -> {\n+                    return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+                });\n+                checksNamesMap.put(dirName, fileNames);\n+            }\n+            final String[] miscNames = checks.list((rootDir, pathname) -> {\n+                return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+            });\n+            checksNamesMap.put(MISC, miscNames);\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest(NODE_NAME);\n+        final InputStream input = Files.newInputStream(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04b300a32e07f45b6fb589a535b4f16f02bdf0ae"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM4ODg4Ng==", "bodyText": "done~", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r414388886", "createdAt": "2020-04-24T08:22:19Z", "author": {"login": "HuGanghui"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,200 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.io.File;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    public static final String NODE_NAME = \"a\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    private static String getRootPath() {\n+        return System.getProperty(\"user.dir\");\n+    }\n+\n+    private static String getXmlPath() {\n+        return \"src/xdocs/checks.xml\";\n+    }\n+\n+    private static Map<String, String[]> getXdocsMap() {\n+        final String rootPath = getRootPath();\n+        final File checks = new File(rootPath + \"/\" + PACKAGE_NAME);\n+        final String[] checksSubDirNames = checks.list((rootDir, pathname) -> {\n+            return !pathname.endsWith(SUFFIX_JAVA);\n+        });\n+        final Map<String, String[]> checksNamesMap = new HashMap<>();\n+        if (checksSubDirNames != null) {\n+            for (String dirName : checksSubDirNames) {\n+                final File dirFile = new File(rootPath + \"/\" + PACKAGE_NAME + \"/\" + dirName);\n+                final String[] fileNames = dirFile.list((rootDir, pathname) -> {\n+                    return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+                });\n+                checksNamesMap.put(dirName, fileNames);\n+            }\n+            final String[] miscNames = checks.list((rootDir, pathname) -> {\n+                return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+            });\n+            checksNamesMap.put(MISC, miscNames);\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest(NODE_NAME);\n+        final InputStream input = Files.newInputStream(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc5NzMwOQ=="}, "originalCommit": {"oid": "04b300a32e07f45b6fb589a535b4f16f02bdf0ae"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NTI1OTg1OnYy", "diffSide": "RIGHT", "path": "config/pmd-test.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwODo1Mjo1MlrOGJrLDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwODoyMjoyNlrOGLMS6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc5NzcxMA==", "bodyText": "please see other comment, it is better to avoid new suppressions", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r412797710", "createdAt": "2020-04-22T08:52:52Z", "author": {"login": "strkkk"}, "path": "config/pmd-test.xml", "diffHunk": "@@ -210,6 +210,7 @@\n                                  //MethodDeclaration[@Name='verifyOutput']\n                       |//ClassOrInterfaceDeclaration[@Image='CommonUtilTest']\n                                  //MethodDeclaration[@Name='testClose']\n+                      |//ClassOrInterfaceDeclaration[@Image='XdocsUrlTest']", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04b300a32e07f45b6fb589a535b4f16f02bdf0ae"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM4ODk2OA==", "bodyText": "done~", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r414388968", "createdAt": "2020-04-24T08:22:26Z", "author": {"login": "HuGanghui"}, "path": "config/pmd-test.xml", "diffHunk": "@@ -210,6 +210,7 @@\n                                  //MethodDeclaration[@Name='verifyOutput']\n                       |//ClassOrInterfaceDeclaration[@Image='CommonUtilTest']\n                                  //MethodDeclaration[@Name='testClose']\n+                      |//ClassOrInterfaceDeclaration[@Image='XdocsUrlTest']", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc5NzcxMA=="}, "originalCommit": {"oid": "04b300a32e07f45b6fb589a535b4f16f02bdf0ae"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NTI2Mzc4OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwODo1Mzo0NlrOGJrNag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMzoyMDo0OVrOGLXXaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc5ODMxNA==", "bodyText": "strings != null && strings[0] != null && qName.equals(nodeName) this check is duplicated (see previous method)", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r412798314", "createdAt": "2020-04-22T08:53:46Z", "author": {"login": "strkkk"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,200 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.io.File;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    public static final String NODE_NAME = \"a\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    private static String getRootPath() {\n+        return System.getProperty(\"user.dir\");\n+    }\n+\n+    private static String getXmlPath() {\n+        return \"src/xdocs/checks.xml\";\n+    }\n+\n+    private static Map<String, String[]> getXdocsMap() {\n+        final String rootPath = getRootPath();\n+        final File checks = new File(rootPath + \"/\" + PACKAGE_NAME);\n+        final String[] checksSubDirNames = checks.list((rootDir, pathname) -> {\n+            return !pathname.endsWith(SUFFIX_JAVA);\n+        });\n+        final Map<String, String[]> checksNamesMap = new HashMap<>();\n+        if (checksSubDirNames != null) {\n+            for (String dirName : checksSubDirNames) {\n+                final File dirFile = new File(rootPath + \"/\" + PACKAGE_NAME + \"/\" + dirName);\n+                final String[] fileNames = dirFile.list((rootDir, pathname) -> {\n+                    return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+                });\n+                checksNamesMap.put(dirName, fileNames);\n+            }\n+            final String[] miscNames = checks.list((rootDir, pathname) -> {\n+                return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+            });\n+            checksNamesMap.put(MISC, miscNames);\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest(NODE_NAME);\n+        final InputStream input = Files.newInputStream(\n+                Paths.get(getRootPath() + \"/\" + getXmlPath()));\n+        parser.parse(input, checkHandler);\n+        final String[][] strings = checkHandler.getStrings();\n+        input.close();\n+        final Map<String, String[]> checksNamesMap = getXdocsMap();\n+        for (String[] sub : strings) {\n+            assertEquals(sub[1], sub[2],\n+                    \"URL in\" + getXmlPath() + \" is inconsistent: \"\n+                            + sub[0] + \" \" + sub[1] + \" \" + sub[2]);\n+            if (sub[1].equals(COMMENTS_INDENTATION) || sub[1].equals(INDENTATION)) {\n+                assertEquals(MISC, sub[0],\n+                        \"URL in\" + getXmlPath() + \" is inconsistent: \"\n+                                + sub[0] + \" \" + sub[1] + \" \" + sub[2]);\n+            }\n+            else if (sub[1].equals(SUPPRESS_WARNINGS_HOLDER)) {\n+                assertEquals(ANNOTATION, sub[0],\n+                        \"URL in\" + getXmlPath() + \" is inconsistent: \"\n+                                + sub[0] + \" \" + sub[1] + \" \" + sub[2]);\n+            }\n+            else {\n+                final String[] moduleFileNames = checksNamesMap.get(sub[0]);\n+                if (moduleFileNames != null) {\n+                    boolean match = false;\n+                    for (String filename : moduleFileNames) {\n+                        if ((sub[1] + SUFFIX_CHECK_JAVA).equals(filename)) {\n+                            match = true;\n+                            break;\n+                        }\n+                    }\n+                    assertTrue(match, \"URL in\" + getXmlPath() + \" is inconsistent: \"\n+                            + sub[0] + \" \" + sub[1] + \" \" + sub[2]);\n+                }\n+            }\n+        }\n+    }\n+\n+    public static final class CheckTest extends DefaultHandler {\n+\n+        public static final String SPLIT_ONE = \"#\";\n+\n+        public static final String SPLIT_TWO = \"\\\\.\";\n+\n+        public static final String PREFIX_CONFIG = \"config_\";\n+\n+        private final String nodeName;\n+\n+        private String[] strings;\n+\n+        private List<String[]> list;\n+\n+        private String currentTag;\n+\n+        public CheckTest(String nodeName) {\n+            this.nodeName = nodeName;\n+        }\n+\n+        public String[][] getStrings() {\n+            final String[][] stringArrays = new String[list.size()][];\n+            return list.toArray(stringArrays);\n+        }\n+\n+        @Override\n+        public void startDocument() {\n+            list = new ArrayList<>();\n+        }\n+\n+        @Override\n+        public void startElement(String uri, String localName, String qName,\n+                                 Attributes attributes) {\n+            if (qName.equals(nodeName)) {\n+                strings = new String[3];\n+                final String[] splitStrings = attributes.getValue(0).split(SPLIT_ONE);\n+                if (splitStrings[0].substring(0, 7).equals(PREFIX_CONFIG)) {\n+                    final String moduleName = splitStrings[0].substring(7).split(SPLIT_TWO)[0];\n+                    strings[0] = moduleName;\n+                    strings[1] = splitStrings[1];\n+                }\n+            }\n+            currentTag = qName;\n+        }\n+\n+        @Override\n+        public void characters(char[] ch, int start, int length) {\n+            if (currentTag != null && strings != null\n+                    && strings[0] != null && currentTag.equals(nodeName)) {\n+                final String currentValue = new String(ch, start, length).trim();\n+                if (!currentValue.isEmpty() && !\"\\n\".equals(currentValue)) {\n+                    strings[2] = currentValue;\n+                }\n+                currentTag = null;\n+            }\n+        }\n+\n+        @Override\n+        public void endElement(String uri, String localName, String qName) {\n+            if (strings != null && strings[0] != null && qName.equals(nodeName)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04b300a32e07f45b6fb589a535b4f16f02bdf0ae"}, "originalPosition": 194}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM5MDA2MA==", "bodyText": "actually, it is not duplicated and is meaningful. If I remove strings != null && strings[0] != null or  strings != null, it will both have null point error.", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r414390060", "createdAt": "2020-04-24T08:24:11Z", "author": {"login": "HuGanghui"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,200 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.io.File;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    public static final String NODE_NAME = \"a\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    private static String getRootPath() {\n+        return System.getProperty(\"user.dir\");\n+    }\n+\n+    private static String getXmlPath() {\n+        return \"src/xdocs/checks.xml\";\n+    }\n+\n+    private static Map<String, String[]> getXdocsMap() {\n+        final String rootPath = getRootPath();\n+        final File checks = new File(rootPath + \"/\" + PACKAGE_NAME);\n+        final String[] checksSubDirNames = checks.list((rootDir, pathname) -> {\n+            return !pathname.endsWith(SUFFIX_JAVA);\n+        });\n+        final Map<String, String[]> checksNamesMap = new HashMap<>();\n+        if (checksSubDirNames != null) {\n+            for (String dirName : checksSubDirNames) {\n+                final File dirFile = new File(rootPath + \"/\" + PACKAGE_NAME + \"/\" + dirName);\n+                final String[] fileNames = dirFile.list((rootDir, pathname) -> {\n+                    return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+                });\n+                checksNamesMap.put(dirName, fileNames);\n+            }\n+            final String[] miscNames = checks.list((rootDir, pathname) -> {\n+                return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+            });\n+            checksNamesMap.put(MISC, miscNames);\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest(NODE_NAME);\n+        final InputStream input = Files.newInputStream(\n+                Paths.get(getRootPath() + \"/\" + getXmlPath()));\n+        parser.parse(input, checkHandler);\n+        final String[][] strings = checkHandler.getStrings();\n+        input.close();\n+        final Map<String, String[]> checksNamesMap = getXdocsMap();\n+        for (String[] sub : strings) {\n+            assertEquals(sub[1], sub[2],\n+                    \"URL in\" + getXmlPath() + \" is inconsistent: \"\n+                            + sub[0] + \" \" + sub[1] + \" \" + sub[2]);\n+            if (sub[1].equals(COMMENTS_INDENTATION) || sub[1].equals(INDENTATION)) {\n+                assertEquals(MISC, sub[0],\n+                        \"URL in\" + getXmlPath() + \" is inconsistent: \"\n+                                + sub[0] + \" \" + sub[1] + \" \" + sub[2]);\n+            }\n+            else if (sub[1].equals(SUPPRESS_WARNINGS_HOLDER)) {\n+                assertEquals(ANNOTATION, sub[0],\n+                        \"URL in\" + getXmlPath() + \" is inconsistent: \"\n+                                + sub[0] + \" \" + sub[1] + \" \" + sub[2]);\n+            }\n+            else {\n+                final String[] moduleFileNames = checksNamesMap.get(sub[0]);\n+                if (moduleFileNames != null) {\n+                    boolean match = false;\n+                    for (String filename : moduleFileNames) {\n+                        if ((sub[1] + SUFFIX_CHECK_JAVA).equals(filename)) {\n+                            match = true;\n+                            break;\n+                        }\n+                    }\n+                    assertTrue(match, \"URL in\" + getXmlPath() + \" is inconsistent: \"\n+                            + sub[0] + \" \" + sub[1] + \" \" + sub[2]);\n+                }\n+            }\n+        }\n+    }\n+\n+    public static final class CheckTest extends DefaultHandler {\n+\n+        public static final String SPLIT_ONE = \"#\";\n+\n+        public static final String SPLIT_TWO = \"\\\\.\";\n+\n+        public static final String PREFIX_CONFIG = \"config_\";\n+\n+        private final String nodeName;\n+\n+        private String[] strings;\n+\n+        private List<String[]> list;\n+\n+        private String currentTag;\n+\n+        public CheckTest(String nodeName) {\n+            this.nodeName = nodeName;\n+        }\n+\n+        public String[][] getStrings() {\n+            final String[][] stringArrays = new String[list.size()][];\n+            return list.toArray(stringArrays);\n+        }\n+\n+        @Override\n+        public void startDocument() {\n+            list = new ArrayList<>();\n+        }\n+\n+        @Override\n+        public void startElement(String uri, String localName, String qName,\n+                                 Attributes attributes) {\n+            if (qName.equals(nodeName)) {\n+                strings = new String[3];\n+                final String[] splitStrings = attributes.getValue(0).split(SPLIT_ONE);\n+                if (splitStrings[0].substring(0, 7).equals(PREFIX_CONFIG)) {\n+                    final String moduleName = splitStrings[0].substring(7).split(SPLIT_TWO)[0];\n+                    strings[0] = moduleName;\n+                    strings[1] = splitStrings[1];\n+                }\n+            }\n+            currentTag = qName;\n+        }\n+\n+        @Override\n+        public void characters(char[] ch, int start, int length) {\n+            if (currentTag != null && strings != null\n+                    && strings[0] != null && currentTag.equals(nodeName)) {\n+                final String currentValue = new String(ch, start, length).trim();\n+                if (!currentValue.isEmpty() && !\"\\n\".equals(currentValue)) {\n+                    strings[2] = currentValue;\n+                }\n+                currentTag = null;\n+            }\n+        }\n+\n+        @Override\n+        public void endElement(String uri, String localName, String qName) {\n+            if (strings != null && strings[0] != null && qName.equals(nodeName)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc5ODMxNA=="}, "originalCommit": {"oid": "04b300a32e07f45b6fb589a535b4f16f02bdf0ae"}, "originalPosition": 194}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ4NDM4OA==", "bodyText": "why don't use List instead of array? you can change both checks to just !list.isEmpty()", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r414484388", "createdAt": "2020-04-24T10:55:02Z", "author": {"login": "strkkk"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,200 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.io.File;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    public static final String NODE_NAME = \"a\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    private static String getRootPath() {\n+        return System.getProperty(\"user.dir\");\n+    }\n+\n+    private static String getXmlPath() {\n+        return \"src/xdocs/checks.xml\";\n+    }\n+\n+    private static Map<String, String[]> getXdocsMap() {\n+        final String rootPath = getRootPath();\n+        final File checks = new File(rootPath + \"/\" + PACKAGE_NAME);\n+        final String[] checksSubDirNames = checks.list((rootDir, pathname) -> {\n+            return !pathname.endsWith(SUFFIX_JAVA);\n+        });\n+        final Map<String, String[]> checksNamesMap = new HashMap<>();\n+        if (checksSubDirNames != null) {\n+            for (String dirName : checksSubDirNames) {\n+                final File dirFile = new File(rootPath + \"/\" + PACKAGE_NAME + \"/\" + dirName);\n+                final String[] fileNames = dirFile.list((rootDir, pathname) -> {\n+                    return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+                });\n+                checksNamesMap.put(dirName, fileNames);\n+            }\n+            final String[] miscNames = checks.list((rootDir, pathname) -> {\n+                return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+            });\n+            checksNamesMap.put(MISC, miscNames);\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest(NODE_NAME);\n+        final InputStream input = Files.newInputStream(\n+                Paths.get(getRootPath() + \"/\" + getXmlPath()));\n+        parser.parse(input, checkHandler);\n+        final String[][] strings = checkHandler.getStrings();\n+        input.close();\n+        final Map<String, String[]> checksNamesMap = getXdocsMap();\n+        for (String[] sub : strings) {\n+            assertEquals(sub[1], sub[2],\n+                    \"URL in\" + getXmlPath() + \" is inconsistent: \"\n+                            + sub[0] + \" \" + sub[1] + \" \" + sub[2]);\n+            if (sub[1].equals(COMMENTS_INDENTATION) || sub[1].equals(INDENTATION)) {\n+                assertEquals(MISC, sub[0],\n+                        \"URL in\" + getXmlPath() + \" is inconsistent: \"\n+                                + sub[0] + \" \" + sub[1] + \" \" + sub[2]);\n+            }\n+            else if (sub[1].equals(SUPPRESS_WARNINGS_HOLDER)) {\n+                assertEquals(ANNOTATION, sub[0],\n+                        \"URL in\" + getXmlPath() + \" is inconsistent: \"\n+                                + sub[0] + \" \" + sub[1] + \" \" + sub[2]);\n+            }\n+            else {\n+                final String[] moduleFileNames = checksNamesMap.get(sub[0]);\n+                if (moduleFileNames != null) {\n+                    boolean match = false;\n+                    for (String filename : moduleFileNames) {\n+                        if ((sub[1] + SUFFIX_CHECK_JAVA).equals(filename)) {\n+                            match = true;\n+                            break;\n+                        }\n+                    }\n+                    assertTrue(match, \"URL in\" + getXmlPath() + \" is inconsistent: \"\n+                            + sub[0] + \" \" + sub[1] + \" \" + sub[2]);\n+                }\n+            }\n+        }\n+    }\n+\n+    public static final class CheckTest extends DefaultHandler {\n+\n+        public static final String SPLIT_ONE = \"#\";\n+\n+        public static final String SPLIT_TWO = \"\\\\.\";\n+\n+        public static final String PREFIX_CONFIG = \"config_\";\n+\n+        private final String nodeName;\n+\n+        private String[] strings;\n+\n+        private List<String[]> list;\n+\n+        private String currentTag;\n+\n+        public CheckTest(String nodeName) {\n+            this.nodeName = nodeName;\n+        }\n+\n+        public String[][] getStrings() {\n+            final String[][] stringArrays = new String[list.size()][];\n+            return list.toArray(stringArrays);\n+        }\n+\n+        @Override\n+        public void startDocument() {\n+            list = new ArrayList<>();\n+        }\n+\n+        @Override\n+        public void startElement(String uri, String localName, String qName,\n+                                 Attributes attributes) {\n+            if (qName.equals(nodeName)) {\n+                strings = new String[3];\n+                final String[] splitStrings = attributes.getValue(0).split(SPLIT_ONE);\n+                if (splitStrings[0].substring(0, 7).equals(PREFIX_CONFIG)) {\n+                    final String moduleName = splitStrings[0].substring(7).split(SPLIT_TWO)[0];\n+                    strings[0] = moduleName;\n+                    strings[1] = splitStrings[1];\n+                }\n+            }\n+            currentTag = qName;\n+        }\n+\n+        @Override\n+        public void characters(char[] ch, int start, int length) {\n+            if (currentTag != null && strings != null\n+                    && strings[0] != null && currentTag.equals(nodeName)) {\n+                final String currentValue = new String(ch, start, length).trim();\n+                if (!currentValue.isEmpty() && !\"\\n\".equals(currentValue)) {\n+                    strings[2] = currentValue;\n+                }\n+                currentTag = null;\n+            }\n+        }\n+\n+        @Override\n+        public void endElement(String uri, String localName, String qName) {\n+            if (strings != null && strings[0] != null && qName.equals(nodeName)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc5ODMxNA=="}, "originalCommit": {"oid": "04b300a32e07f45b6fb589a535b4f16f02bdf0ae"}, "originalPosition": 194}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU3MDM0NA==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r414570344", "createdAt": "2020-04-24T13:20:49Z", "author": {"login": "HuGanghui"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,200 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.io.File;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    public static final String NODE_NAME = \"a\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    private static String getRootPath() {\n+        return System.getProperty(\"user.dir\");\n+    }\n+\n+    private static String getXmlPath() {\n+        return \"src/xdocs/checks.xml\";\n+    }\n+\n+    private static Map<String, String[]> getXdocsMap() {\n+        final String rootPath = getRootPath();\n+        final File checks = new File(rootPath + \"/\" + PACKAGE_NAME);\n+        final String[] checksSubDirNames = checks.list((rootDir, pathname) -> {\n+            return !pathname.endsWith(SUFFIX_JAVA);\n+        });\n+        final Map<String, String[]> checksNamesMap = new HashMap<>();\n+        if (checksSubDirNames != null) {\n+            for (String dirName : checksSubDirNames) {\n+                final File dirFile = new File(rootPath + \"/\" + PACKAGE_NAME + \"/\" + dirName);\n+                final String[] fileNames = dirFile.list((rootDir, pathname) -> {\n+                    return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+                });\n+                checksNamesMap.put(dirName, fileNames);\n+            }\n+            final String[] miscNames = checks.list((rootDir, pathname) -> {\n+                return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+            });\n+            checksNamesMap.put(MISC, miscNames);\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest(NODE_NAME);\n+        final InputStream input = Files.newInputStream(\n+                Paths.get(getRootPath() + \"/\" + getXmlPath()));\n+        parser.parse(input, checkHandler);\n+        final String[][] strings = checkHandler.getStrings();\n+        input.close();\n+        final Map<String, String[]> checksNamesMap = getXdocsMap();\n+        for (String[] sub : strings) {\n+            assertEquals(sub[1], sub[2],\n+                    \"URL in\" + getXmlPath() + \" is inconsistent: \"\n+                            + sub[0] + \" \" + sub[1] + \" \" + sub[2]);\n+            if (sub[1].equals(COMMENTS_INDENTATION) || sub[1].equals(INDENTATION)) {\n+                assertEquals(MISC, sub[0],\n+                        \"URL in\" + getXmlPath() + \" is inconsistent: \"\n+                                + sub[0] + \" \" + sub[1] + \" \" + sub[2]);\n+            }\n+            else if (sub[1].equals(SUPPRESS_WARNINGS_HOLDER)) {\n+                assertEquals(ANNOTATION, sub[0],\n+                        \"URL in\" + getXmlPath() + \" is inconsistent: \"\n+                                + sub[0] + \" \" + sub[1] + \" \" + sub[2]);\n+            }\n+            else {\n+                final String[] moduleFileNames = checksNamesMap.get(sub[0]);\n+                if (moduleFileNames != null) {\n+                    boolean match = false;\n+                    for (String filename : moduleFileNames) {\n+                        if ((sub[1] + SUFFIX_CHECK_JAVA).equals(filename)) {\n+                            match = true;\n+                            break;\n+                        }\n+                    }\n+                    assertTrue(match, \"URL in\" + getXmlPath() + \" is inconsistent: \"\n+                            + sub[0] + \" \" + sub[1] + \" \" + sub[2]);\n+                }\n+            }\n+        }\n+    }\n+\n+    public static final class CheckTest extends DefaultHandler {\n+\n+        public static final String SPLIT_ONE = \"#\";\n+\n+        public static final String SPLIT_TWO = \"\\\\.\";\n+\n+        public static final String PREFIX_CONFIG = \"config_\";\n+\n+        private final String nodeName;\n+\n+        private String[] strings;\n+\n+        private List<String[]> list;\n+\n+        private String currentTag;\n+\n+        public CheckTest(String nodeName) {\n+            this.nodeName = nodeName;\n+        }\n+\n+        public String[][] getStrings() {\n+            final String[][] stringArrays = new String[list.size()][];\n+            return list.toArray(stringArrays);\n+        }\n+\n+        @Override\n+        public void startDocument() {\n+            list = new ArrayList<>();\n+        }\n+\n+        @Override\n+        public void startElement(String uri, String localName, String qName,\n+                                 Attributes attributes) {\n+            if (qName.equals(nodeName)) {\n+                strings = new String[3];\n+                final String[] splitStrings = attributes.getValue(0).split(SPLIT_ONE);\n+                if (splitStrings[0].substring(0, 7).equals(PREFIX_CONFIG)) {\n+                    final String moduleName = splitStrings[0].substring(7).split(SPLIT_TWO)[0];\n+                    strings[0] = moduleName;\n+                    strings[1] = splitStrings[1];\n+                }\n+            }\n+            currentTag = qName;\n+        }\n+\n+        @Override\n+        public void characters(char[] ch, int start, int length) {\n+            if (currentTag != null && strings != null\n+                    && strings[0] != null && currentTag.equals(nodeName)) {\n+                final String currentValue = new String(ch, start, length).trim();\n+                if (!currentValue.isEmpty() && !\"\\n\".equals(currentValue)) {\n+                    strings[2] = currentValue;\n+                }\n+                currentTag = null;\n+            }\n+        }\n+\n+        @Override\n+        public void endElement(String uri, String localName, String qName) {\n+            if (strings != null && strings[0] != null && qName.equals(nodeName)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc5ODMxNA=="}, "originalCommit": {"oid": "04b300a32e07f45b6fb589a535b4f16f02bdf0ae"}, "originalPosition": 194}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTg2NTA3OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwODoxOToxMVrOGLMLEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwODoxOToxMVrOGLMLEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM4Njk2MQ==", "bodyText": "now I use try but not catch block and it is ok. But when I use try-catch, will have a error as follows:\n[INFO] --- maven-checkstyle-plugin:3.1.1:check (sevntu-checkstyle-check) @ checkstyle ---\n[INFO] There is 1 error reported by Checkstyle 8.29 with /Users/hgh/Desktop/checkstyle/config/checkstyle_sevntu_checks.xml ruleset.\n[ERROR] src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java:[99,9] (extension) RequireFailForTryCatchInJunit: try/catch either requires a fail at the end of the try clause for junit tests or to remove the try/catch completely.\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 02:03 min\n[INFO] Finished at: 2020-04-24T16:16:58+08:00\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-checkstyle-plugin:3.1.1:check (sevntu-checkstyle-check) on project checkstyle: You have 1 Checkstyle violation. -> [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\nis it ok just use try block?", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r414386961", "createdAt": "2020-04-24T08:19:11Z", "author": {"login": "HuGanghui"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,200 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.io.File;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    public static final String NODE_NAME = \"a\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    private static String getRootPath() {\n+        return System.getProperty(\"user.dir\");\n+    }\n+\n+    private static String getXmlPath() {\n+        return \"src/xdocs/checks.xml\";\n+    }\n+\n+    private static Map<String, String[]> getXdocsMap() {\n+        final String rootPath = getRootPath();\n+        final File checks = new File(rootPath + \"/\" + PACKAGE_NAME);\n+        final String[] checksSubDirNames = checks.list((rootDir, pathname) -> {\n+            return !pathname.endsWith(SUFFIX_JAVA);\n+        });\n+        final Map<String, String[]> checksNamesMap = new HashMap<>();\n+        if (checksSubDirNames != null) {\n+            for (String dirName : checksSubDirNames) {\n+                final File dirFile = new File(rootPath + \"/\" + PACKAGE_NAME + \"/\" + dirName);\n+                final String[] fileNames = dirFile.list((rootDir, pathname) -> {\n+                    return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+                });\n+                checksNamesMap.put(dirName, fileNames);\n+            }\n+            final String[] miscNames = checks.list((rootDir, pathname) -> {\n+                return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+            });\n+            checksNamesMap.put(MISC, miscNames);\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest(NODE_NAME);\n+        try (InputStream input = Files.newInputStream(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1df118293bfede0921fde7ba12159d31f1b31bc1"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NjUwNjU0OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMDo1MjoxNVrOGLSBzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMzoyMDo1NlrOGLXXuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ4Mjg5Mg==", "bodyText": "why not use static final field? Such method looks weird", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r414482892", "createdAt": "2020-04-24T10:52:15Z", "author": {"login": "strkkk"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,201 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.io.File;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    public static final String NODE_NAME = \"a\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    private static String getRootPath() {\n+        return System.getProperty(\"user.dir\");\n+    }\n+\n+    private static String getXmlPath() {\n+        return \"src/xdocs/checks.xml\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db1771af7aa14e61c3e1e01c8014c8097715cee"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU3MDQyNw==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r414570427", "createdAt": "2020-04-24T13:20:56Z", "author": {"login": "HuGanghui"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,201 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.io.File;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    public static final String NODE_NAME = \"a\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    private static String getRootPath() {\n+        return System.getProperty(\"user.dir\");\n+    }\n+\n+    private static String getXmlPath() {\n+        return \"src/xdocs/checks.xml\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ4Mjg5Mg=="}, "originalCommit": {"oid": "1db1771af7aa14e61c3e1e01c8014c8097715cee"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NjUxMTI5OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMDo1Mzo0MFrOGLSEnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMzoyMTowNlrOGLXYQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ4MzYxNQ==", "bodyText": "\"URL in\" + getXmlPath() + \" is inconsistent: \"\n                            + sub[0] + \" \" + sub[1] + \" \" + sub[2]\n\nThis string is duplicated 4 times. Please create a variable with this value and reuse it", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r414483615", "createdAt": "2020-04-24T10:53:40Z", "author": {"login": "strkkk"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,201 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.io.File;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    public static final String NODE_NAME = \"a\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    private static String getRootPath() {\n+        return System.getProperty(\"user.dir\");\n+    }\n+\n+    private static String getXmlPath() {\n+        return \"src/xdocs/checks.xml\";\n+    }\n+\n+    private static Map<String, String[]> getXdocsMap() {\n+        final String rootPath = getRootPath();\n+        final File checks = new File(rootPath + \"/\" + PACKAGE_NAME);\n+        final String[] checksSubDirNames = checks.list((rootDir, pathname) -> {\n+            return !pathname.endsWith(SUFFIX_JAVA);\n+        });\n+        final Map<String, String[]> checksNamesMap = new HashMap<>();\n+        if (checksSubDirNames != null) {\n+            for (String dirName : checksSubDirNames) {\n+                final File dirFile = new File(rootPath + \"/\" + PACKAGE_NAME + \"/\" + dirName);\n+                final String[] fileNames = dirFile.list((rootDir, pathname) -> {\n+                    return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+                });\n+                checksNamesMap.put(dirName, fileNames);\n+            }\n+            final String[] miscNames = checks.list((rootDir, pathname) -> {\n+                return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+            });\n+            checksNamesMap.put(MISC, miscNames);\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest(NODE_NAME);\n+        final String[][] strings;\n+        try (InputStream input = Files.newInputStream(\n+                Paths.get(getRootPath() + \"/\" + getXmlPath()))) {\n+            parser.parse(input, checkHandler);\n+            strings = checkHandler.getStrings();\n+        }\n+        final Map<String, String[]> checksNamesMap = getXdocsMap();\n+        for (String[] sub : strings) {\n+            assertEquals(sub[1], sub[2],\n+                    \"URL in\" + getXmlPath() + \" is inconsistent: \"\n+                            + sub[0] + \" \" + sub[1] + \" \" + sub[2]);\n+            if (sub[1].equals(COMMENTS_INDENTATION) || sub[1].equals(INDENTATION)) {\n+                assertEquals(MISC, sub[0],\n+                        \"URL in\" + getXmlPath() + \" is inconsistent: \"\n+                                + sub[0] + \" \" + sub[1] + \" \" + sub[2]);\n+            }\n+            else if (sub[1].equals(SUPPRESS_WARNINGS_HOLDER)) {\n+                assertEquals(ANNOTATION, sub[0],\n+                        \"URL in\" + getXmlPath() + \" is inconsistent: \"\n+                                + sub[0] + \" \" + sub[1] + \" \" + sub[2]);\n+            }\n+            else {\n+                final String[] moduleFileNames = checksNamesMap.get(sub[0]);\n+                if (moduleFileNames != null) {\n+                    boolean match = false;\n+                    for (String filename : moduleFileNames) {\n+                        if ((sub[1] + SUFFIX_CHECK_JAVA).equals(filename)) {\n+                            match = true;\n+                            break;\n+                        }\n+                    }\n+                    assertTrue(match, \"URL in\" + getXmlPath() + \" is inconsistent: \"\n+                            + sub[0] + \" \" + sub[1] + \" \" + sub[2]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db1771af7aa14e61c3e1e01c8014c8097715cee"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU3MDU2MQ==", "bodyText": "done~", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r414570561", "createdAt": "2020-04-24T13:21:06Z", "author": {"login": "HuGanghui"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,201 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.io.File;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    public static final String NODE_NAME = \"a\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    private static String getRootPath() {\n+        return System.getProperty(\"user.dir\");\n+    }\n+\n+    private static String getXmlPath() {\n+        return \"src/xdocs/checks.xml\";\n+    }\n+\n+    private static Map<String, String[]> getXdocsMap() {\n+        final String rootPath = getRootPath();\n+        final File checks = new File(rootPath + \"/\" + PACKAGE_NAME);\n+        final String[] checksSubDirNames = checks.list((rootDir, pathname) -> {\n+            return !pathname.endsWith(SUFFIX_JAVA);\n+        });\n+        final Map<String, String[]> checksNamesMap = new HashMap<>();\n+        if (checksSubDirNames != null) {\n+            for (String dirName : checksSubDirNames) {\n+                final File dirFile = new File(rootPath + \"/\" + PACKAGE_NAME + \"/\" + dirName);\n+                final String[] fileNames = dirFile.list((rootDir, pathname) -> {\n+                    return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+                });\n+                checksNamesMap.put(dirName, fileNames);\n+            }\n+            final String[] miscNames = checks.list((rootDir, pathname) -> {\n+                return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+            });\n+            checksNamesMap.put(MISC, miscNames);\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest(NODE_NAME);\n+        final String[][] strings;\n+        try (InputStream input = Files.newInputStream(\n+                Paths.get(getRootPath() + \"/\" + getXmlPath()))) {\n+            parser.parse(input, checkHandler);\n+            strings = checkHandler.getStrings();\n+        }\n+        final Map<String, String[]> checksNamesMap = getXdocsMap();\n+        for (String[] sub : strings) {\n+            assertEquals(sub[1], sub[2],\n+                    \"URL in\" + getXmlPath() + \" is inconsistent: \"\n+                            + sub[0] + \" \" + sub[1] + \" \" + sub[2]);\n+            if (sub[1].equals(COMMENTS_INDENTATION) || sub[1].equals(INDENTATION)) {\n+                assertEquals(MISC, sub[0],\n+                        \"URL in\" + getXmlPath() + \" is inconsistent: \"\n+                                + sub[0] + \" \" + sub[1] + \" \" + sub[2]);\n+            }\n+            else if (sub[1].equals(SUPPRESS_WARNINGS_HOLDER)) {\n+                assertEquals(ANNOTATION, sub[0],\n+                        \"URL in\" + getXmlPath() + \" is inconsistent: \"\n+                                + sub[0] + \" \" + sub[1] + \" \" + sub[2]);\n+            }\n+            else {\n+                final String[] moduleFileNames = checksNamesMap.get(sub[0]);\n+                if (moduleFileNames != null) {\n+                    boolean match = false;\n+                    for (String filename : moduleFileNames) {\n+                        if ((sub[1] + SUFFIX_CHECK_JAVA).equals(filename)) {\n+                            match = true;\n+                            break;\n+                        }\n+                    }\n+                    assertTrue(match, \"URL in\" + getXmlPath() + \" is inconsistent: \"\n+                            + sub[0] + \" \" + sub[1] + \" \" + sub[2]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ4MzYxNQ=="}, "originalCommit": {"oid": "1db1771af7aa14e61c3e1e01c8014c8097715cee"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NjUxODY1OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMDo1NTozOVrOGLSI9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMzoyMToxNFrOGLXYlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ4NDcyNQ==", "bodyText": "substring(0, 7) why 7? please avoid magic numbers", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r414484725", "createdAt": "2020-04-24T10:55:39Z", "author": {"login": "strkkk"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,201 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.io.File;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    public static final String NODE_NAME = \"a\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    private static String getRootPath() {\n+        return System.getProperty(\"user.dir\");\n+    }\n+\n+    private static String getXmlPath() {\n+        return \"src/xdocs/checks.xml\";\n+    }\n+\n+    private static Map<String, String[]> getXdocsMap() {\n+        final String rootPath = getRootPath();\n+        final File checks = new File(rootPath + \"/\" + PACKAGE_NAME);\n+        final String[] checksSubDirNames = checks.list((rootDir, pathname) -> {\n+            return !pathname.endsWith(SUFFIX_JAVA);\n+        });\n+        final Map<String, String[]> checksNamesMap = new HashMap<>();\n+        if (checksSubDirNames != null) {\n+            for (String dirName : checksSubDirNames) {\n+                final File dirFile = new File(rootPath + \"/\" + PACKAGE_NAME + \"/\" + dirName);\n+                final String[] fileNames = dirFile.list((rootDir, pathname) -> {\n+                    return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+                });\n+                checksNamesMap.put(dirName, fileNames);\n+            }\n+            final String[] miscNames = checks.list((rootDir, pathname) -> {\n+                return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+            });\n+            checksNamesMap.put(MISC, miscNames);\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest(NODE_NAME);\n+        final String[][] strings;\n+        try (InputStream input = Files.newInputStream(\n+                Paths.get(getRootPath() + \"/\" + getXmlPath()))) {\n+            parser.parse(input, checkHandler);\n+            strings = checkHandler.getStrings();\n+        }\n+        final Map<String, String[]> checksNamesMap = getXdocsMap();\n+        for (String[] sub : strings) {\n+            assertEquals(sub[1], sub[2],\n+                    \"URL in\" + getXmlPath() + \" is inconsistent: \"\n+                            + sub[0] + \" \" + sub[1] + \" \" + sub[2]);\n+            if (sub[1].equals(COMMENTS_INDENTATION) || sub[1].equals(INDENTATION)) {\n+                assertEquals(MISC, sub[0],\n+                        \"URL in\" + getXmlPath() + \" is inconsistent: \"\n+                                + sub[0] + \" \" + sub[1] + \" \" + sub[2]);\n+            }\n+            else if (sub[1].equals(SUPPRESS_WARNINGS_HOLDER)) {\n+                assertEquals(ANNOTATION, sub[0],\n+                        \"URL in\" + getXmlPath() + \" is inconsistent: \"\n+                                + sub[0] + \" \" + sub[1] + \" \" + sub[2]);\n+            }\n+            else {\n+                final String[] moduleFileNames = checksNamesMap.get(sub[0]);\n+                if (moduleFileNames != null) {\n+                    boolean match = false;\n+                    for (String filename : moduleFileNames) {\n+                        if ((sub[1] + SUFFIX_CHECK_JAVA).equals(filename)) {\n+                            match = true;\n+                            break;\n+                        }\n+                    }\n+                    assertTrue(match, \"URL in\" + getXmlPath() + \" is inconsistent: \"\n+                            + sub[0] + \" \" + sub[1] + \" \" + sub[2]);\n+                }\n+            }\n+        }\n+    }\n+\n+    public static final class CheckTest extends DefaultHandler {\n+\n+        public static final String SPLIT_ONE = \"#\";\n+\n+        public static final String SPLIT_TWO = \"\\\\.\";\n+\n+        public static final String PREFIX_CONFIG = \"config_\";\n+\n+        private final String nodeName;\n+\n+        private String[] strings;\n+\n+        private List<String[]> list;\n+\n+        private String currentTag;\n+\n+        public CheckTest(String nodeName) {\n+            this.nodeName = nodeName;\n+        }\n+\n+        public String[][] getStrings() {\n+            final String[][] stringArrays = new String[list.size()][];\n+            return list.toArray(stringArrays);\n+        }\n+\n+        @Override\n+        public void startDocument() {\n+            list = new ArrayList<>();\n+        }\n+\n+        @Override\n+        public void startElement(String uri, String localName, String qName,\n+                                 Attributes attributes) {\n+            if (qName.equals(nodeName)) {\n+                strings = new String[3];\n+                final String[] splitStrings = attributes.getValue(0).split(SPLIT_ONE);\n+                if (splitStrings[0].substring(0, 7).equals(PREFIX_CONFIG)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db1771af7aa14e61c3e1e01c8014c8097715cee"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU3MDY0NQ==", "bodyText": "done~", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r414570645", "createdAt": "2020-04-24T13:21:14Z", "author": {"login": "HuGanghui"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,201 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.io.File;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    public static final String NODE_NAME = \"a\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    private static String getRootPath() {\n+        return System.getProperty(\"user.dir\");\n+    }\n+\n+    private static String getXmlPath() {\n+        return \"src/xdocs/checks.xml\";\n+    }\n+\n+    private static Map<String, String[]> getXdocsMap() {\n+        final String rootPath = getRootPath();\n+        final File checks = new File(rootPath + \"/\" + PACKAGE_NAME);\n+        final String[] checksSubDirNames = checks.list((rootDir, pathname) -> {\n+            return !pathname.endsWith(SUFFIX_JAVA);\n+        });\n+        final Map<String, String[]> checksNamesMap = new HashMap<>();\n+        if (checksSubDirNames != null) {\n+            for (String dirName : checksSubDirNames) {\n+                final File dirFile = new File(rootPath + \"/\" + PACKAGE_NAME + \"/\" + dirName);\n+                final String[] fileNames = dirFile.list((rootDir, pathname) -> {\n+                    return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+                });\n+                checksNamesMap.put(dirName, fileNames);\n+            }\n+            final String[] miscNames = checks.list((rootDir, pathname) -> {\n+                return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+            });\n+            checksNamesMap.put(MISC, miscNames);\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest(NODE_NAME);\n+        final String[][] strings;\n+        try (InputStream input = Files.newInputStream(\n+                Paths.get(getRootPath() + \"/\" + getXmlPath()))) {\n+            parser.parse(input, checkHandler);\n+            strings = checkHandler.getStrings();\n+        }\n+        final Map<String, String[]> checksNamesMap = getXdocsMap();\n+        for (String[] sub : strings) {\n+            assertEquals(sub[1], sub[2],\n+                    \"URL in\" + getXmlPath() + \" is inconsistent: \"\n+                            + sub[0] + \" \" + sub[1] + \" \" + sub[2]);\n+            if (sub[1].equals(COMMENTS_INDENTATION) || sub[1].equals(INDENTATION)) {\n+                assertEquals(MISC, sub[0],\n+                        \"URL in\" + getXmlPath() + \" is inconsistent: \"\n+                                + sub[0] + \" \" + sub[1] + \" \" + sub[2]);\n+            }\n+            else if (sub[1].equals(SUPPRESS_WARNINGS_HOLDER)) {\n+                assertEquals(ANNOTATION, sub[0],\n+                        \"URL in\" + getXmlPath() + \" is inconsistent: \"\n+                                + sub[0] + \" \" + sub[1] + \" \" + sub[2]);\n+            }\n+            else {\n+                final String[] moduleFileNames = checksNamesMap.get(sub[0]);\n+                if (moduleFileNames != null) {\n+                    boolean match = false;\n+                    for (String filename : moduleFileNames) {\n+                        if ((sub[1] + SUFFIX_CHECK_JAVA).equals(filename)) {\n+                            match = true;\n+                            break;\n+                        }\n+                    }\n+                    assertTrue(match, \"URL in\" + getXmlPath() + \" is inconsistent: \"\n+                            + sub[0] + \" \" + sub[1] + \" \" + sub[2]);\n+                }\n+            }\n+        }\n+    }\n+\n+    public static final class CheckTest extends DefaultHandler {\n+\n+        public static final String SPLIT_ONE = \"#\";\n+\n+        public static final String SPLIT_TWO = \"\\\\.\";\n+\n+        public static final String PREFIX_CONFIG = \"config_\";\n+\n+        private final String nodeName;\n+\n+        private String[] strings;\n+\n+        private List<String[]> list;\n+\n+        private String currentTag;\n+\n+        public CheckTest(String nodeName) {\n+            this.nodeName = nodeName;\n+        }\n+\n+        public String[][] getStrings() {\n+            final String[][] stringArrays = new String[list.size()][];\n+            return list.toArray(stringArrays);\n+        }\n+\n+        @Override\n+        public void startDocument() {\n+            list = new ArrayList<>();\n+        }\n+\n+        @Override\n+        public void startElement(String uri, String localName, String qName,\n+                                 Attributes attributes) {\n+            if (qName.equals(nodeName)) {\n+                strings = new String[3];\n+                final String[] splitStrings = attributes.getValue(0).split(SPLIT_ONE);\n+                if (splitStrings[0].substring(0, 7).equals(PREFIX_CONFIG)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ4NDcyNQ=="}, "originalCommit": {"oid": "1db1771af7aa14e61c3e1e01c8014c8097715cee"}, "originalPosition": 172}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NjUyNjI4OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMDo1NzozNVrOGLSNUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMzoyMTozNFrOGLXZrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ4NTg0Mw==", "bodyText": "(rootDir, pathname) -> {\n                    return pathname.endsWith(SUFFIX_CHECK_JAVA);\n                }\n\nthis predicate is also duplicated 3 times (negation counts as well), please make it a variable", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r414485843", "createdAt": "2020-04-24T10:57:35Z", "author": {"login": "strkkk"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,201 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.io.File;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    public static final String NODE_NAME = \"a\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    private static String getRootPath() {\n+        return System.getProperty(\"user.dir\");\n+    }\n+\n+    private static String getXmlPath() {\n+        return \"src/xdocs/checks.xml\";\n+    }\n+\n+    private static Map<String, String[]> getXdocsMap() {\n+        final String rootPath = getRootPath();\n+        final File checks = new File(rootPath + \"/\" + PACKAGE_NAME);\n+        final String[] checksSubDirNames = checks.list((rootDir, pathname) -> {\n+            return !pathname.endsWith(SUFFIX_JAVA);\n+        });\n+        final Map<String, String[]> checksNamesMap = new HashMap<>();\n+        if (checksSubDirNames != null) {\n+            for (String dirName : checksSubDirNames) {\n+                final File dirFile = new File(rootPath + \"/\" + PACKAGE_NAME + \"/\" + dirName);\n+                final String[] fileNames = dirFile.list((rootDir, pathname) -> {\n+                    return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+                });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db1771af7aa14e61c3e1e01c8014c8097715cee"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU3MDkyNQ==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r414570925", "createdAt": "2020-04-24T13:21:34Z", "author": {"login": "HuGanghui"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,201 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.io.File;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    public static final String NODE_NAME = \"a\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    private static String getRootPath() {\n+        return System.getProperty(\"user.dir\");\n+    }\n+\n+    private static String getXmlPath() {\n+        return \"src/xdocs/checks.xml\";\n+    }\n+\n+    private static Map<String, String[]> getXdocsMap() {\n+        final String rootPath = getRootPath();\n+        final File checks = new File(rootPath + \"/\" + PACKAGE_NAME);\n+        final String[] checksSubDirNames = checks.list((rootDir, pathname) -> {\n+            return !pathname.endsWith(SUFFIX_JAVA);\n+        });\n+        final Map<String, String[]> checksNamesMap = new HashMap<>();\n+        if (checksSubDirNames != null) {\n+            for (String dirName : checksSubDirNames) {\n+                final File dirFile = new File(rootPath + \"/\" + PACKAGE_NAME + \"/\" + dirName);\n+                final String[] fileNames = dirFile.list((rootDir, pathname) -> {\n+                    return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+                });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ4NTg0Mw=="}, "originalCommit": {"oid": "1db1771af7aa14e61c3e1e01c8014c8097715cee"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NjUzMzE3OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMDo1OToyOVrOGLSRTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMzoyNzozMFrOGLXqYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ4Njg2MQ==", "bodyText": "System.getProperty(\"user.dir\") I do not really understand purpose of this", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r414486861", "createdAt": "2020-04-24T10:59:29Z", "author": {"login": "strkkk"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,201 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.io.File;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    public static final String NODE_NAME = \"a\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    private static String getRootPath() {\n+        return System.getProperty(\"user.dir\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db1771af7aa14e61c3e1e01c8014c8097715cee"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU3NTIwMw==", "bodyText": "done, I use Paths.get() to get file path now", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r414575203", "createdAt": "2020-04-24T13:27:30Z", "author": {"login": "HuGanghui"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,201 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.io.File;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    public static final String NODE_NAME = \"a\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    private static String getRootPath() {\n+        return System.getProperty(\"user.dir\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ4Njg2MQ=="}, "originalCommit": {"oid": "1db1771af7aa14e61c3e1e01c8014c8097715cee"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NjUzNzQxOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMTowMDo1M1rOGLSUCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMzoyNzo1OFrOGLXrlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ4NzU2Mw==", "bodyText": "Why don't use list or map? it is way more convenient than multidimensional arrays. Please change.", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r414487563", "createdAt": "2020-04-24T11:00:53Z", "author": {"login": "strkkk"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,201 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.io.File;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    public static final String NODE_NAME = \"a\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    private static String getRootPath() {\n+        return System.getProperty(\"user.dir\");\n+    }\n+\n+    private static String getXmlPath() {\n+        return \"src/xdocs/checks.xml\";\n+    }\n+\n+    private static Map<String, String[]> getXdocsMap() {\n+        final String rootPath = getRootPath();\n+        final File checks = new File(rootPath + \"/\" + PACKAGE_NAME);\n+        final String[] checksSubDirNames = checks.list((rootDir, pathname) -> {\n+            return !pathname.endsWith(SUFFIX_JAVA);\n+        });\n+        final Map<String, String[]> checksNamesMap = new HashMap<>();\n+        if (checksSubDirNames != null) {\n+            for (String dirName : checksSubDirNames) {\n+                final File dirFile = new File(rootPath + \"/\" + PACKAGE_NAME + \"/\" + dirName);\n+                final String[] fileNames = dirFile.list((rootDir, pathname) -> {\n+                    return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+                });\n+                checksNamesMap.put(dirName, fileNames);\n+            }\n+            final String[] miscNames = checks.list((rootDir, pathname) -> {\n+                return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+            });\n+            checksNamesMap.put(MISC, miscNames);\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest(NODE_NAME);\n+        final String[][] strings;\n+        try (InputStream input = Files.newInputStream(\n+                Paths.get(getRootPath() + \"/\" + getXmlPath()))) {\n+            parser.parse(input, checkHandler);\n+            strings = checkHandler.getStrings();\n+        }\n+        final Map<String, String[]> checksNamesMap = getXdocsMap();\n+        for (String[] sub : strings) {\n+            assertEquals(sub[1], sub[2],\n+                    \"URL in\" + getXmlPath() + \" is inconsistent: \"\n+                            + sub[0] + \" \" + sub[1] + \" \" + sub[2]);\n+            if (sub[1].equals(COMMENTS_INDENTATION) || sub[1].equals(INDENTATION)) {\n+                assertEquals(MISC, sub[0],\n+                        \"URL in\" + getXmlPath() + \" is inconsistent: \"\n+                                + sub[0] + \" \" + sub[1] + \" \" + sub[2]);\n+            }\n+            else if (sub[1].equals(SUPPRESS_WARNINGS_HOLDER)) {\n+                assertEquals(ANNOTATION, sub[0],\n+                        \"URL in\" + getXmlPath() + \" is inconsistent: \"\n+                                + sub[0] + \" \" + sub[1] + \" \" + sub[2]);\n+            }\n+            else {\n+                final String[] moduleFileNames = checksNamesMap.get(sub[0]);\n+                if (moduleFileNames != null) {\n+                    boolean match = false;\n+                    for (String filename : moduleFileNames) {\n+                        if ((sub[1] + SUFFIX_CHECK_JAVA).equals(filename)) {\n+                            match = true;\n+                            break;\n+                        }\n+                    }\n+                    assertTrue(match, \"URL in\" + getXmlPath() + \" is inconsistent: \"\n+                            + sub[0] + \" \" + sub[1] + \" \" + sub[2]);\n+                }\n+            }\n+        }\n+    }\n+\n+    public static final class CheckTest extends DefaultHandler {\n+\n+        public static final String SPLIT_ONE = \"#\";\n+\n+        public static final String SPLIT_TWO = \"\\\\.\";\n+\n+        public static final String PREFIX_CONFIG = \"config_\";\n+\n+        private final String nodeName;\n+\n+        private String[] strings;\n+\n+        private List<String[]> list;\n+\n+        private String currentTag;\n+\n+        public CheckTest(String nodeName) {\n+            this.nodeName = nodeName;\n+        }\n+\n+        public String[][] getStrings() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db1771af7aa14e61c3e1e01c8014c8097715cee"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU3NTUwOQ==", "bodyText": "done~", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r414575509", "createdAt": "2020-04-24T13:27:58Z", "author": {"login": "HuGanghui"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,201 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.io.File;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    public static final String NODE_NAME = \"a\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    private static String getRootPath() {\n+        return System.getProperty(\"user.dir\");\n+    }\n+\n+    private static String getXmlPath() {\n+        return \"src/xdocs/checks.xml\";\n+    }\n+\n+    private static Map<String, String[]> getXdocsMap() {\n+        final String rootPath = getRootPath();\n+        final File checks = new File(rootPath + \"/\" + PACKAGE_NAME);\n+        final String[] checksSubDirNames = checks.list((rootDir, pathname) -> {\n+            return !pathname.endsWith(SUFFIX_JAVA);\n+        });\n+        final Map<String, String[]> checksNamesMap = new HashMap<>();\n+        if (checksSubDirNames != null) {\n+            for (String dirName : checksSubDirNames) {\n+                final File dirFile = new File(rootPath + \"/\" + PACKAGE_NAME + \"/\" + dirName);\n+                final String[] fileNames = dirFile.list((rootDir, pathname) -> {\n+                    return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+                });\n+                checksNamesMap.put(dirName, fileNames);\n+            }\n+            final String[] miscNames = checks.list((rootDir, pathname) -> {\n+                return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+            });\n+            checksNamesMap.put(MISC, miscNames);\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest(NODE_NAME);\n+        final String[][] strings;\n+        try (InputStream input = Files.newInputStream(\n+                Paths.get(getRootPath() + \"/\" + getXmlPath()))) {\n+            parser.parse(input, checkHandler);\n+            strings = checkHandler.getStrings();\n+        }\n+        final Map<String, String[]> checksNamesMap = getXdocsMap();\n+        for (String[] sub : strings) {\n+            assertEquals(sub[1], sub[2],\n+                    \"URL in\" + getXmlPath() + \" is inconsistent: \"\n+                            + sub[0] + \" \" + sub[1] + \" \" + sub[2]);\n+            if (sub[1].equals(COMMENTS_INDENTATION) || sub[1].equals(INDENTATION)) {\n+                assertEquals(MISC, sub[0],\n+                        \"URL in\" + getXmlPath() + \" is inconsistent: \"\n+                                + sub[0] + \" \" + sub[1] + \" \" + sub[2]);\n+            }\n+            else if (sub[1].equals(SUPPRESS_WARNINGS_HOLDER)) {\n+                assertEquals(ANNOTATION, sub[0],\n+                        \"URL in\" + getXmlPath() + \" is inconsistent: \"\n+                                + sub[0] + \" \" + sub[1] + \" \" + sub[2]);\n+            }\n+            else {\n+                final String[] moduleFileNames = checksNamesMap.get(sub[0]);\n+                if (moduleFileNames != null) {\n+                    boolean match = false;\n+                    for (String filename : moduleFileNames) {\n+                        if ((sub[1] + SUFFIX_CHECK_JAVA).equals(filename)) {\n+                            match = true;\n+                            break;\n+                        }\n+                    }\n+                    assertTrue(match, \"URL in\" + getXmlPath() + \" is inconsistent: \"\n+                            + sub[0] + \" \" + sub[1] + \" \" + sub[2]);\n+                }\n+            }\n+        }\n+    }\n+\n+    public static final class CheckTest extends DefaultHandler {\n+\n+        public static final String SPLIT_ONE = \"#\";\n+\n+        public static final String SPLIT_TWO = \"\\\\.\";\n+\n+        public static final String PREFIX_CONFIG = \"config_\";\n+\n+        private final String nodeName;\n+\n+        private String[] strings;\n+\n+        private List<String[]> list;\n+\n+        private String currentTag;\n+\n+        public CheckTest(String nodeName) {\n+            this.nodeName = nodeName;\n+        }\n+\n+        public String[][] getStrings() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ4NzU2Mw=="}, "originalCommit": {"oid": "1db1771af7aa14e61c3e1e01c8014c8097715cee"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MDYwODQyOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMjoxOToyOFrOGL0u8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwMzo1MzoxNVrOGL-MwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA1MTUwNg==", "bodyText": "I see no need for this variable", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r415051506", "createdAt": "2020-04-25T12:19:28Z", "author": {"login": "strkkk"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,197 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final Path PACKAGE_NAME_PATH =\n+            Paths.get(\"src/main/java/com/puppycrawl/tools/checkstyle/checks\");\n+\n+    public static final String NODE_NAME = \"a\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    public static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, String[]> getXdocsMap() {\n+        final File checks = new File(PACKAGE_NAME_PATH.toString());\n+        final String[] checksSubDirNames = checks.list((rootDir, pathname) -> {\n+            return !pathname.endsWith(SUFFIX_JAVA);\n+        });\n+        final Map<String, String[]> checksNamesMap = new HashMap<>();\n+        if (checksSubDirNames != null) {\n+            final FilenameFilter filter = (rootDir, pathname) -> {\n+                return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+            };\n+            for (String dirName : checksSubDirNames) {\n+                final File dirFile = new File(PACKAGE_NAME_PATH + \"/\" + dirName);\n+                final String[] fileNames = dirFile.list(filter);\n+                checksNamesMap.put(dirName, fileNames);\n+            }\n+            final String[] miscNames = checks.list(filter);\n+            checksNamesMap.put(MISC, miscNames);\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest(NODE_NAME);\n+        final List<List<String>> list;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61a0561609215d2ce89b16edfa0dcb9d7ac79fe9"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIwNjU5Mw==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r415206593", "createdAt": "2020-04-26T03:53:15Z", "author": {"login": "HuGanghui"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,197 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final Path PACKAGE_NAME_PATH =\n+            Paths.get(\"src/main/java/com/puppycrawl/tools/checkstyle/checks\");\n+\n+    public static final String NODE_NAME = \"a\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    public static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, String[]> getXdocsMap() {\n+        final File checks = new File(PACKAGE_NAME_PATH.toString());\n+        final String[] checksSubDirNames = checks.list((rootDir, pathname) -> {\n+            return !pathname.endsWith(SUFFIX_JAVA);\n+        });\n+        final Map<String, String[]> checksNamesMap = new HashMap<>();\n+        if (checksSubDirNames != null) {\n+            final FilenameFilter filter = (rootDir, pathname) -> {\n+                return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+            };\n+            for (String dirName : checksSubDirNames) {\n+                final File dirFile = new File(PACKAGE_NAME_PATH + \"/\" + dirName);\n+                final String[] fileNames = dirFile.list(filter);\n+                checksNamesMap.put(dirName, fileNames);\n+            }\n+            final String[] miscNames = checks.list(filter);\n+            checksNamesMap.put(MISC, miscNames);\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest(NODE_NAME);\n+        final List<List<String>> list;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA1MTUwNg=="}, "originalCommit": {"oid": "61a0561609215d2ce89b16edfa0dcb9d7ac79fe9"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MDYwODQ5OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMjoxOTozMlrOGL0u-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwMzo1Mzo0MVrOGL-M9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA1MTUxNA==", "bodyText": "why do you need to convert it to Path?\nI see 2 usages and both of them converting path to string.", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r415051514", "createdAt": "2020-04-25T12:19:32Z", "author": {"login": "strkkk"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,197 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final Path PACKAGE_NAME_PATH =\n+            Paths.get(\"src/main/java/com/puppycrawl/tools/checkstyle/checks\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61a0561609215d2ce89b16edfa0dcb9d7ac79fe9"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIwNjY0NQ==", "bodyText": "done, this is  not necessary", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r415206645", "createdAt": "2020-04-26T03:53:41Z", "author": {"login": "HuGanghui"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,197 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final Path PACKAGE_NAME_PATH =\n+            Paths.get(\"src/main/java/com/puppycrawl/tools/checkstyle/checks\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA1MTUxNA=="}, "originalCommit": {"oid": "61a0561609215d2ce89b16edfa0dcb9d7ac79fe9"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MDYxNDAxOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMjoyMzoxMFrOGL0xWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxNjowNTo1NlrOGMGhnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA1MjEyMw==", "bodyText": "Please use String.format", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r415052123", "createdAt": "2020-04-25T12:23:10Z", "author": {"login": "strkkk"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,197 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final Path PACKAGE_NAME_PATH =\n+            Paths.get(\"src/main/java/com/puppycrawl/tools/checkstyle/checks\");\n+\n+    public static final String NODE_NAME = \"a\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    public static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, String[]> getXdocsMap() {\n+        final File checks = new File(PACKAGE_NAME_PATH.toString());\n+        final String[] checksSubDirNames = checks.list((rootDir, pathname) -> {\n+            return !pathname.endsWith(SUFFIX_JAVA);\n+        });\n+        final Map<String, String[]> checksNamesMap = new HashMap<>();\n+        if (checksSubDirNames != null) {\n+            final FilenameFilter filter = (rootDir, pathname) -> {\n+                return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+            };\n+            for (String dirName : checksSubDirNames) {\n+                final File dirFile = new File(PACKAGE_NAME_PATH + \"/\" + dirName);\n+                final String[] fileNames = dirFile.list(filter);\n+                checksNamesMap.put(dirName, fileNames);\n+            }\n+            final String[] miscNames = checks.list(filter);\n+            checksNamesMap.put(MISC, miscNames);\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest(NODE_NAME);\n+        final List<List<String>> list;\n+        try (InputStream input = Files.newInputStream(AVAILABLE_CHECKS_PATH)) {\n+            parser.parse(input, checkHandler);\n+            list = checkHandler.list;\n+        }\n+        final Map<String, String[]> checksNamesMap = getXdocsMap();\n+        for (List<String> sub : list) {\n+            final String moduleName = sub.get(0);\n+            final String checkName1 = sub.get(1);\n+            final String checkName2 = sub.get(2);\n+            final String errorMessage =\n+                    \"URL in\" + AVAILABLE_CHECKS_PATH + \" is inconsistent: \"\n+                            + moduleName + \" \" + checkName1 + \" \" + checkName2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61a0561609215d2ce89b16edfa0dcb9d7ac79fe9"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIwNjM0NA==", "bodyText": "String.format is forbidden, so I retain it\n[ERROR] Forbidden method invocation: java.lang.String#format(java.lang.String,java.lang.Object[]) [Uses default locale]\n[ERROR]   in com.puppycrawl.tools.checkstyle.internal.XdocsUrlTest (XdocsUrlTest.java:99)\n[ERROR] Scanned 2034 class file(s) for forbidden API invocations (in 1.54s), 1 error(s).", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r415206344", "createdAt": "2020-04-26T03:51:21Z", "author": {"login": "HuGanghui"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,197 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final Path PACKAGE_NAME_PATH =\n+            Paths.get(\"src/main/java/com/puppycrawl/tools/checkstyle/checks\");\n+\n+    public static final String NODE_NAME = \"a\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    public static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, String[]> getXdocsMap() {\n+        final File checks = new File(PACKAGE_NAME_PATH.toString());\n+        final String[] checksSubDirNames = checks.list((rootDir, pathname) -> {\n+            return !pathname.endsWith(SUFFIX_JAVA);\n+        });\n+        final Map<String, String[]> checksNamesMap = new HashMap<>();\n+        if (checksSubDirNames != null) {\n+            final FilenameFilter filter = (rootDir, pathname) -> {\n+                return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+            };\n+            for (String dirName : checksSubDirNames) {\n+                final File dirFile = new File(PACKAGE_NAME_PATH + \"/\" + dirName);\n+                final String[] fileNames = dirFile.list(filter);\n+                checksNamesMap.put(dirName, fileNames);\n+            }\n+            final String[] miscNames = checks.list(filter);\n+            checksNamesMap.put(MISC, miscNames);\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest(NODE_NAME);\n+        final List<List<String>> list;\n+        try (InputStream input = Files.newInputStream(AVAILABLE_CHECKS_PATH)) {\n+            parser.parse(input, checkHandler);\n+            list = checkHandler.list;\n+        }\n+        final Map<String, String[]> checksNamesMap = getXdocsMap();\n+        for (List<String> sub : list) {\n+            final String moduleName = sub.get(0);\n+            final String checkName1 = sub.get(1);\n+            final String checkName2 = sub.get(2);\n+            final String errorMessage =\n+                    \"URL in\" + AVAILABLE_CHECKS_PATH + \" is inconsistent: \"\n+                            + moduleName + \" \" + checkName1 + \" \" + checkName2;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA1MjEyMw=="}, "originalCommit": {"oid": "61a0561609215d2ce89b16edfa0dcb9d7ac79fe9"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI1OTk4NQ==", "bodyText": "It is not forbidden, its usage without explicit locale setting is forbidden.\nYou should use String.format(Locale.ROOT, \"template\", args) method\nYou can find examples in codebase", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r415259985", "createdAt": "2020-04-26T09:04:06Z", "author": {"login": "strkkk"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,197 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final Path PACKAGE_NAME_PATH =\n+            Paths.get(\"src/main/java/com/puppycrawl/tools/checkstyle/checks\");\n+\n+    public static final String NODE_NAME = \"a\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    public static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, String[]> getXdocsMap() {\n+        final File checks = new File(PACKAGE_NAME_PATH.toString());\n+        final String[] checksSubDirNames = checks.list((rootDir, pathname) -> {\n+            return !pathname.endsWith(SUFFIX_JAVA);\n+        });\n+        final Map<String, String[]> checksNamesMap = new HashMap<>();\n+        if (checksSubDirNames != null) {\n+            final FilenameFilter filter = (rootDir, pathname) -> {\n+                return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+            };\n+            for (String dirName : checksSubDirNames) {\n+                final File dirFile = new File(PACKAGE_NAME_PATH + \"/\" + dirName);\n+                final String[] fileNames = dirFile.list(filter);\n+                checksNamesMap.put(dirName, fileNames);\n+            }\n+            final String[] miscNames = checks.list(filter);\n+            checksNamesMap.put(MISC, miscNames);\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest(NODE_NAME);\n+        final List<List<String>> list;\n+        try (InputStream input = Files.newInputStream(AVAILABLE_CHECKS_PATH)) {\n+            parser.parse(input, checkHandler);\n+            list = checkHandler.list;\n+        }\n+        final Map<String, String[]> checksNamesMap = getXdocsMap();\n+        for (List<String> sub : list) {\n+            final String moduleName = sub.get(0);\n+            final String checkName1 = sub.get(1);\n+            final String checkName2 = sub.get(2);\n+            final String errorMessage =\n+                    \"URL in\" + AVAILABLE_CHECKS_PATH + \" is inconsistent: \"\n+                            + moduleName + \" \" + checkName1 + \" \" + checkName2;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA1MjEyMw=="}, "originalCommit": {"oid": "61a0561609215d2ce89b16edfa0dcb9d7ac79fe9"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM0MzAwNw==", "bodyText": "done~", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r415343007", "createdAt": "2020-04-26T16:05:56Z", "author": {"login": "HuGanghui"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,197 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final Path PACKAGE_NAME_PATH =\n+            Paths.get(\"src/main/java/com/puppycrawl/tools/checkstyle/checks\");\n+\n+    public static final String NODE_NAME = \"a\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    public static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, String[]> getXdocsMap() {\n+        final File checks = new File(PACKAGE_NAME_PATH.toString());\n+        final String[] checksSubDirNames = checks.list((rootDir, pathname) -> {\n+            return !pathname.endsWith(SUFFIX_JAVA);\n+        });\n+        final Map<String, String[]> checksNamesMap = new HashMap<>();\n+        if (checksSubDirNames != null) {\n+            final FilenameFilter filter = (rootDir, pathname) -> {\n+                return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+            };\n+            for (String dirName : checksSubDirNames) {\n+                final File dirFile = new File(PACKAGE_NAME_PATH + \"/\" + dirName);\n+                final String[] fileNames = dirFile.list(filter);\n+                checksNamesMap.put(dirName, fileNames);\n+            }\n+            final String[] miscNames = checks.list(filter);\n+            checksNamesMap.put(MISC, miscNames);\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest(NODE_NAME);\n+        final List<List<String>> list;\n+        try (InputStream input = Files.newInputStream(AVAILABLE_CHECKS_PATH)) {\n+            parser.parse(input, checkHandler);\n+            list = checkHandler.list;\n+        }\n+        final Map<String, String[]> checksNamesMap = getXdocsMap();\n+        for (List<String> sub : list) {\n+            final String moduleName = sub.get(0);\n+            final String checkName1 = sub.get(1);\n+            final String checkName2 = sub.get(2);\n+            final String errorMessage =\n+                    \"URL in\" + AVAILABLE_CHECKS_PATH + \" is inconsistent: \"\n+                            + moduleName + \" \" + checkName1 + \" \" + checkName2;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA1MjEyMw=="}, "originalCommit": {"oid": "61a0561609215d2ce89b16edfa0dcb9d7ac79fe9"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MDYxNTE5OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMjoyMzo1MlrOGL0x3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwMzo1Mzo0OVrOGL-NBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA1MjI1Mg==", "bodyText": "assertEquals\nFor new unit tests google Truth assertWithMessage should be used", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r415052252", "createdAt": "2020-04-25T12:23:52Z", "author": {"login": "strkkk"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,197 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final Path PACKAGE_NAME_PATH =\n+            Paths.get(\"src/main/java/com/puppycrawl/tools/checkstyle/checks\");\n+\n+    public static final String NODE_NAME = \"a\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    public static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, String[]> getXdocsMap() {\n+        final File checks = new File(PACKAGE_NAME_PATH.toString());\n+        final String[] checksSubDirNames = checks.list((rootDir, pathname) -> {\n+            return !pathname.endsWith(SUFFIX_JAVA);\n+        });\n+        final Map<String, String[]> checksNamesMap = new HashMap<>();\n+        if (checksSubDirNames != null) {\n+            final FilenameFilter filter = (rootDir, pathname) -> {\n+                return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+            };\n+            for (String dirName : checksSubDirNames) {\n+                final File dirFile = new File(PACKAGE_NAME_PATH + \"/\" + dirName);\n+                final String[] fileNames = dirFile.list(filter);\n+                checksNamesMap.put(dirName, fileNames);\n+            }\n+            final String[] miscNames = checks.list(filter);\n+            checksNamesMap.put(MISC, miscNames);\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest(NODE_NAME);\n+        final List<List<String>> list;\n+        try (InputStream input = Files.newInputStream(AVAILABLE_CHECKS_PATH)) {\n+            parser.parse(input, checkHandler);\n+            list = checkHandler.list;\n+        }\n+        final Map<String, String[]> checksNamesMap = getXdocsMap();\n+        for (List<String> sub : list) {\n+            final String moduleName = sub.get(0);\n+            final String checkName1 = sub.get(1);\n+            final String checkName2 = sub.get(2);\n+            final String errorMessage =\n+                    \"URL in\" + AVAILABLE_CHECKS_PATH + \" is inconsistent: \"\n+                            + moduleName + \" \" + checkName1 + \" \" + checkName2;\n+            assertEquals(checkName1, checkName2, errorMessage);\n+            if (checkName1.equals(COMMENTS_INDENTATION) || checkName1.equals(INDENTATION)) {\n+                assertEquals(MISC, moduleName, errorMessage);\n+            }\n+            else if (checkName1.equals(SUPPRESS_WARNINGS_HOLDER)) {\n+                assertEquals(ANNOTATION, moduleName, errorMessage);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61a0561609215d2ce89b16edfa0dcb9d7ac79fe9"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIwNjY2Mw==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r415206663", "createdAt": "2020-04-26T03:53:49Z", "author": {"login": "HuGanghui"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,197 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final Path PACKAGE_NAME_PATH =\n+            Paths.get(\"src/main/java/com/puppycrawl/tools/checkstyle/checks\");\n+\n+    public static final String NODE_NAME = \"a\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    public static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, String[]> getXdocsMap() {\n+        final File checks = new File(PACKAGE_NAME_PATH.toString());\n+        final String[] checksSubDirNames = checks.list((rootDir, pathname) -> {\n+            return !pathname.endsWith(SUFFIX_JAVA);\n+        });\n+        final Map<String, String[]> checksNamesMap = new HashMap<>();\n+        if (checksSubDirNames != null) {\n+            final FilenameFilter filter = (rootDir, pathname) -> {\n+                return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+            };\n+            for (String dirName : checksSubDirNames) {\n+                final File dirFile = new File(PACKAGE_NAME_PATH + \"/\" + dirName);\n+                final String[] fileNames = dirFile.list(filter);\n+                checksNamesMap.put(dirName, fileNames);\n+            }\n+            final String[] miscNames = checks.list(filter);\n+            checksNamesMap.put(MISC, miscNames);\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest(NODE_NAME);\n+        final List<List<String>> list;\n+        try (InputStream input = Files.newInputStream(AVAILABLE_CHECKS_PATH)) {\n+            parser.parse(input, checkHandler);\n+            list = checkHandler.list;\n+        }\n+        final Map<String, String[]> checksNamesMap = getXdocsMap();\n+        for (List<String> sub : list) {\n+            final String moduleName = sub.get(0);\n+            final String checkName1 = sub.get(1);\n+            final String checkName2 = sub.get(2);\n+            final String errorMessage =\n+                    \"URL in\" + AVAILABLE_CHECKS_PATH + \" is inconsistent: \"\n+                            + moduleName + \" \" + checkName1 + \" \" + checkName2;\n+            assertEquals(checkName1, checkName2, errorMessage);\n+            if (checkName1.equals(COMMENTS_INDENTATION) || checkName1.equals(INDENTATION)) {\n+                assertEquals(MISC, moduleName, errorMessage);\n+            }\n+            else if (checkName1.equals(SUPPRESS_WARNINGS_HOLDER)) {\n+                assertEquals(ANNOTATION, moduleName, errorMessage);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA1MjI1Mg=="}, "originalCommit": {"oid": "61a0561609215d2ce89b16edfa0dcb9d7ac79fe9"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MDYxNjUwOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMjoyNDo0OFrOGL0ycw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwMzo1Mzo1M1rOGL-NIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA1MjQwMw==", "bodyText": "same for other assertions", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r415052403", "createdAt": "2020-04-25T12:24:48Z", "author": {"login": "strkkk"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,197 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final Path PACKAGE_NAME_PATH =\n+            Paths.get(\"src/main/java/com/puppycrawl/tools/checkstyle/checks\");\n+\n+    public static final String NODE_NAME = \"a\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    public static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, String[]> getXdocsMap() {\n+        final File checks = new File(PACKAGE_NAME_PATH.toString());\n+        final String[] checksSubDirNames = checks.list((rootDir, pathname) -> {\n+            return !pathname.endsWith(SUFFIX_JAVA);\n+        });\n+        final Map<String, String[]> checksNamesMap = new HashMap<>();\n+        if (checksSubDirNames != null) {\n+            final FilenameFilter filter = (rootDir, pathname) -> {\n+                return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+            };\n+            for (String dirName : checksSubDirNames) {\n+                final File dirFile = new File(PACKAGE_NAME_PATH + \"/\" + dirName);\n+                final String[] fileNames = dirFile.list(filter);\n+                checksNamesMap.put(dirName, fileNames);\n+            }\n+            final String[] miscNames = checks.list(filter);\n+            checksNamesMap.put(MISC, miscNames);\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest(NODE_NAME);\n+        final List<List<String>> list;\n+        try (InputStream input = Files.newInputStream(AVAILABLE_CHECKS_PATH)) {\n+            parser.parse(input, checkHandler);\n+            list = checkHandler.list;\n+        }\n+        final Map<String, String[]> checksNamesMap = getXdocsMap();\n+        for (List<String> sub : list) {\n+            final String moduleName = sub.get(0);\n+            final String checkName1 = sub.get(1);\n+            final String checkName2 = sub.get(2);\n+            final String errorMessage =\n+                    \"URL in\" + AVAILABLE_CHECKS_PATH + \" is inconsistent: \"\n+                            + moduleName + \" \" + checkName1 + \" \" + checkName2;\n+            assertEquals(checkName1, checkName2, errorMessage);\n+            if (checkName1.equals(COMMENTS_INDENTATION) || checkName1.equals(INDENTATION)) {\n+                assertEquals(MISC, moduleName, errorMessage);\n+            }\n+            else if (checkName1.equals(SUPPRESS_WARNINGS_HOLDER)) {\n+                assertEquals(ANNOTATION, moduleName, errorMessage);\n+            }\n+            else {\n+                final String[] moduleFileNames = checksNamesMap.get(moduleName);\n+                if (moduleFileNames != null) {\n+                    boolean match = false;\n+                    for (String filename : moduleFileNames) {\n+                        if ((checkName1 + SUFFIX_CHECK_JAVA).equals(filename)) {\n+                            match = true;\n+                            break;\n+                        }\n+                    }\n+                    assertTrue(match, errorMessage);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61a0561609215d2ce89b16edfa0dcb9d7ac79fe9"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIwNjY4OA==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r415206688", "createdAt": "2020-04-26T03:53:53Z", "author": {"login": "HuGanghui"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,197 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final Path PACKAGE_NAME_PATH =\n+            Paths.get(\"src/main/java/com/puppycrawl/tools/checkstyle/checks\");\n+\n+    public static final String NODE_NAME = \"a\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    public static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, String[]> getXdocsMap() {\n+        final File checks = new File(PACKAGE_NAME_PATH.toString());\n+        final String[] checksSubDirNames = checks.list((rootDir, pathname) -> {\n+            return !pathname.endsWith(SUFFIX_JAVA);\n+        });\n+        final Map<String, String[]> checksNamesMap = new HashMap<>();\n+        if (checksSubDirNames != null) {\n+            final FilenameFilter filter = (rootDir, pathname) -> {\n+                return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+            };\n+            for (String dirName : checksSubDirNames) {\n+                final File dirFile = new File(PACKAGE_NAME_PATH + \"/\" + dirName);\n+                final String[] fileNames = dirFile.list(filter);\n+                checksNamesMap.put(dirName, fileNames);\n+            }\n+            final String[] miscNames = checks.list(filter);\n+            checksNamesMap.put(MISC, miscNames);\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest(NODE_NAME);\n+        final List<List<String>> list;\n+        try (InputStream input = Files.newInputStream(AVAILABLE_CHECKS_PATH)) {\n+            parser.parse(input, checkHandler);\n+            list = checkHandler.list;\n+        }\n+        final Map<String, String[]> checksNamesMap = getXdocsMap();\n+        for (List<String> sub : list) {\n+            final String moduleName = sub.get(0);\n+            final String checkName1 = sub.get(1);\n+            final String checkName2 = sub.get(2);\n+            final String errorMessage =\n+                    \"URL in\" + AVAILABLE_CHECKS_PATH + \" is inconsistent: \"\n+                            + moduleName + \" \" + checkName1 + \" \" + checkName2;\n+            assertEquals(checkName1, checkName2, errorMessage);\n+            if (checkName1.equals(COMMENTS_INDENTATION) || checkName1.equals(INDENTATION)) {\n+                assertEquals(MISC, moduleName, errorMessage);\n+            }\n+            else if (checkName1.equals(SUPPRESS_WARNINGS_HOLDER)) {\n+                assertEquals(ANNOTATION, moduleName, errorMessage);\n+            }\n+            else {\n+                final String[] moduleFileNames = checksNamesMap.get(moduleName);\n+                if (moduleFileNames != null) {\n+                    boolean match = false;\n+                    for (String filename : moduleFileNames) {\n+                        if ((checkName1 + SUFFIX_CHECK_JAVA).equals(filename)) {\n+                            match = true;\n+                            break;\n+                        }\n+                    }\n+                    assertTrue(match, errorMessage);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA1MjQwMw=="}, "originalCommit": {"oid": "61a0561609215d2ce89b16edfa0dcb9d7ac79fe9"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MDYxODIwOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMjoyNjowNFrOGL0zMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwMzo1NDoxOFrOGL-NXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA1MjU5Mw==", "bodyText": "why you need to create copy of list?\nI see no usages of this getList() method in code", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r415052593", "createdAt": "2020-04-25T12:26:04Z", "author": {"login": "strkkk"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,197 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final Path PACKAGE_NAME_PATH =\n+            Paths.get(\"src/main/java/com/puppycrawl/tools/checkstyle/checks\");\n+\n+    public static final String NODE_NAME = \"a\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    public static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, String[]> getXdocsMap() {\n+        final File checks = new File(PACKAGE_NAME_PATH.toString());\n+        final String[] checksSubDirNames = checks.list((rootDir, pathname) -> {\n+            return !pathname.endsWith(SUFFIX_JAVA);\n+        });\n+        final Map<String, String[]> checksNamesMap = new HashMap<>();\n+        if (checksSubDirNames != null) {\n+            final FilenameFilter filter = (rootDir, pathname) -> {\n+                return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+            };\n+            for (String dirName : checksSubDirNames) {\n+                final File dirFile = new File(PACKAGE_NAME_PATH + \"/\" + dirName);\n+                final String[] fileNames = dirFile.list(filter);\n+                checksNamesMap.put(dirName, fileNames);\n+            }\n+            final String[] miscNames = checks.list(filter);\n+            checksNamesMap.put(MISC, miscNames);\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest(NODE_NAME);\n+        final List<List<String>> list;\n+        try (InputStream input = Files.newInputStream(AVAILABLE_CHECKS_PATH)) {\n+            parser.parse(input, checkHandler);\n+            list = checkHandler.list;\n+        }\n+        final Map<String, String[]> checksNamesMap = getXdocsMap();\n+        for (List<String> sub : list) {\n+            final String moduleName = sub.get(0);\n+            final String checkName1 = sub.get(1);\n+            final String checkName2 = sub.get(2);\n+            final String errorMessage =\n+                    \"URL in\" + AVAILABLE_CHECKS_PATH + \" is inconsistent: \"\n+                            + moduleName + \" \" + checkName1 + \" \" + checkName2;\n+            assertEquals(checkName1, checkName2, errorMessage);\n+            if (checkName1.equals(COMMENTS_INDENTATION) || checkName1.equals(INDENTATION)) {\n+                assertEquals(MISC, moduleName, errorMessage);\n+            }\n+            else if (checkName1.equals(SUPPRESS_WARNINGS_HOLDER)) {\n+                assertEquals(ANNOTATION, moduleName, errorMessage);\n+            }\n+            else {\n+                final String[] moduleFileNames = checksNamesMap.get(moduleName);\n+                if (moduleFileNames != null) {\n+                    boolean match = false;\n+                    for (String filename : moduleFileNames) {\n+                        if ((checkName1 + SUFFIX_CHECK_JAVA).equals(filename)) {\n+                            match = true;\n+                            break;\n+                        }\n+                    }\n+                    assertTrue(match, errorMessage);\n+                }\n+            }\n+        }\n+    }\n+\n+    public static final class CheckTest extends DefaultHandler {\n+\n+        public static final String SPLIT_ONE = \"#\";\n+\n+        public static final String SPLIT_TWO = \"\\\\.\";\n+\n+        public static final String PREFIX_CONFIG = \"config_\";\n+\n+        private final String nodeName;\n+\n+        private List<List<String>> list;\n+\n+        private List<String> stringList;\n+\n+        private String currentTag;\n+\n+        public CheckTest(String nodeName) {\n+            this.nodeName = nodeName;\n+        }\n+\n+        public List<List<String>> getList() {\n+            final List<List<String>> copyList = new ArrayList<>();\n+            for (List<String> elemList: list) {\n+                final List<String> tempList = new ArrayList<>(elemList);\n+                copyList.add(tempList);\n+            }\n+            return copyList;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61a0561609215d2ce89b16edfa0dcb9d7ac79fe9"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIwNjc0OA==", "bodyText": "done, remove it, it is redundant", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r415206748", "createdAt": "2020-04-26T03:54:18Z", "author": {"login": "HuGanghui"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,197 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final Path PACKAGE_NAME_PATH =\n+            Paths.get(\"src/main/java/com/puppycrawl/tools/checkstyle/checks\");\n+\n+    public static final String NODE_NAME = \"a\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    public static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, String[]> getXdocsMap() {\n+        final File checks = new File(PACKAGE_NAME_PATH.toString());\n+        final String[] checksSubDirNames = checks.list((rootDir, pathname) -> {\n+            return !pathname.endsWith(SUFFIX_JAVA);\n+        });\n+        final Map<String, String[]> checksNamesMap = new HashMap<>();\n+        if (checksSubDirNames != null) {\n+            final FilenameFilter filter = (rootDir, pathname) -> {\n+                return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+            };\n+            for (String dirName : checksSubDirNames) {\n+                final File dirFile = new File(PACKAGE_NAME_PATH + \"/\" + dirName);\n+                final String[] fileNames = dirFile.list(filter);\n+                checksNamesMap.put(dirName, fileNames);\n+            }\n+            final String[] miscNames = checks.list(filter);\n+            checksNamesMap.put(MISC, miscNames);\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest(NODE_NAME);\n+        final List<List<String>> list;\n+        try (InputStream input = Files.newInputStream(AVAILABLE_CHECKS_PATH)) {\n+            parser.parse(input, checkHandler);\n+            list = checkHandler.list;\n+        }\n+        final Map<String, String[]> checksNamesMap = getXdocsMap();\n+        for (List<String> sub : list) {\n+            final String moduleName = sub.get(0);\n+            final String checkName1 = sub.get(1);\n+            final String checkName2 = sub.get(2);\n+            final String errorMessage =\n+                    \"URL in\" + AVAILABLE_CHECKS_PATH + \" is inconsistent: \"\n+                            + moduleName + \" \" + checkName1 + \" \" + checkName2;\n+            assertEquals(checkName1, checkName2, errorMessage);\n+            if (checkName1.equals(COMMENTS_INDENTATION) || checkName1.equals(INDENTATION)) {\n+                assertEquals(MISC, moduleName, errorMessage);\n+            }\n+            else if (checkName1.equals(SUPPRESS_WARNINGS_HOLDER)) {\n+                assertEquals(ANNOTATION, moduleName, errorMessage);\n+            }\n+            else {\n+                final String[] moduleFileNames = checksNamesMap.get(moduleName);\n+                if (moduleFileNames != null) {\n+                    boolean match = false;\n+                    for (String filename : moduleFileNames) {\n+                        if ((checkName1 + SUFFIX_CHECK_JAVA).equals(filename)) {\n+                            match = true;\n+                            break;\n+                        }\n+                    }\n+                    assertTrue(match, errorMessage);\n+                }\n+            }\n+        }\n+    }\n+\n+    public static final class CheckTest extends DefaultHandler {\n+\n+        public static final String SPLIT_ONE = \"#\";\n+\n+        public static final String SPLIT_TWO = \"\\\\.\";\n+\n+        public static final String PREFIX_CONFIG = \"config_\";\n+\n+        private final String nodeName;\n+\n+        private List<List<String>> list;\n+\n+        private List<String> stringList;\n+\n+        private String currentTag;\n+\n+        public CheckTest(String nodeName) {\n+            this.nodeName = nodeName;\n+        }\n+\n+        public List<List<String>> getList() {\n+            final List<List<String>> copyList = new ArrayList<>();\n+            for (List<String> elemList: list) {\n+                final List<String> tempList = new ArrayList<>(elemList);\n+                copyList.add(tempList);\n+            }\n+            return copyList;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA1MjU5Mw=="}, "originalCommit": {"oid": "61a0561609215d2ce89b16edfa0dcb9d7ac79fe9"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MDYyMDQ0OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMjoyNzozNlrOGL00Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwMzo1NDoyM1rOGL-NdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA1Mjg0Mg==", "bodyText": ".substring(0, PREFIX_CONFIG.length()).equals(PREFIX_CONFIG)\nstartsWith(PREFIX_CONFIG) looks simpler", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r415052842", "createdAt": "2020-04-25T12:27:36Z", "author": {"login": "strkkk"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,197 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final Path PACKAGE_NAME_PATH =\n+            Paths.get(\"src/main/java/com/puppycrawl/tools/checkstyle/checks\");\n+\n+    public static final String NODE_NAME = \"a\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    public static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, String[]> getXdocsMap() {\n+        final File checks = new File(PACKAGE_NAME_PATH.toString());\n+        final String[] checksSubDirNames = checks.list((rootDir, pathname) -> {\n+            return !pathname.endsWith(SUFFIX_JAVA);\n+        });\n+        final Map<String, String[]> checksNamesMap = new HashMap<>();\n+        if (checksSubDirNames != null) {\n+            final FilenameFilter filter = (rootDir, pathname) -> {\n+                return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+            };\n+            for (String dirName : checksSubDirNames) {\n+                final File dirFile = new File(PACKAGE_NAME_PATH + \"/\" + dirName);\n+                final String[] fileNames = dirFile.list(filter);\n+                checksNamesMap.put(dirName, fileNames);\n+            }\n+            final String[] miscNames = checks.list(filter);\n+            checksNamesMap.put(MISC, miscNames);\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest(NODE_NAME);\n+        final List<List<String>> list;\n+        try (InputStream input = Files.newInputStream(AVAILABLE_CHECKS_PATH)) {\n+            parser.parse(input, checkHandler);\n+            list = checkHandler.list;\n+        }\n+        final Map<String, String[]> checksNamesMap = getXdocsMap();\n+        for (List<String> sub : list) {\n+            final String moduleName = sub.get(0);\n+            final String checkName1 = sub.get(1);\n+            final String checkName2 = sub.get(2);\n+            final String errorMessage =\n+                    \"URL in\" + AVAILABLE_CHECKS_PATH + \" is inconsistent: \"\n+                            + moduleName + \" \" + checkName1 + \" \" + checkName2;\n+            assertEquals(checkName1, checkName2, errorMessage);\n+            if (checkName1.equals(COMMENTS_INDENTATION) || checkName1.equals(INDENTATION)) {\n+                assertEquals(MISC, moduleName, errorMessage);\n+            }\n+            else if (checkName1.equals(SUPPRESS_WARNINGS_HOLDER)) {\n+                assertEquals(ANNOTATION, moduleName, errorMessage);\n+            }\n+            else {\n+                final String[] moduleFileNames = checksNamesMap.get(moduleName);\n+                if (moduleFileNames != null) {\n+                    boolean match = false;\n+                    for (String filename : moduleFileNames) {\n+                        if ((checkName1 + SUFFIX_CHECK_JAVA).equals(filename)) {\n+                            match = true;\n+                            break;\n+                        }\n+                    }\n+                    assertTrue(match, errorMessage);\n+                }\n+            }\n+        }\n+    }\n+\n+    public static final class CheckTest extends DefaultHandler {\n+\n+        public static final String SPLIT_ONE = \"#\";\n+\n+        public static final String SPLIT_TWO = \"\\\\.\";\n+\n+        public static final String PREFIX_CONFIG = \"config_\";\n+\n+        private final String nodeName;\n+\n+        private List<List<String>> list;\n+\n+        private List<String> stringList;\n+\n+        private String currentTag;\n+\n+        public CheckTest(String nodeName) {\n+            this.nodeName = nodeName;\n+        }\n+\n+        public List<List<String>> getList() {\n+            final List<List<String>> copyList = new ArrayList<>();\n+            for (List<String> elemList: list) {\n+                final List<String> tempList = new ArrayList<>(elemList);\n+                copyList.add(tempList);\n+            }\n+            return copyList;\n+        }\n+\n+        @Override\n+        public void startDocument() {\n+            list = new ArrayList<>();\n+        }\n+\n+        @Override\n+        public void startElement(String uri, String localName, String qName,\n+                                 Attributes attributes) {\n+            if (qName.equals(nodeName)) {\n+                final String[] splitStrings = attributes.getValue(0).split(SPLIT_ONE);\n+                if (splitStrings[0].substring(0, PREFIX_CONFIG.length()).equals(PREFIX_CONFIG)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61a0561609215d2ce89b16edfa0dcb9d7ac79fe9"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIwNjc3Mg==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r415206772", "createdAt": "2020-04-26T03:54:23Z", "author": {"login": "HuGanghui"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,197 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final Path PACKAGE_NAME_PATH =\n+            Paths.get(\"src/main/java/com/puppycrawl/tools/checkstyle/checks\");\n+\n+    public static final String NODE_NAME = \"a\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    public static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, String[]> getXdocsMap() {\n+        final File checks = new File(PACKAGE_NAME_PATH.toString());\n+        final String[] checksSubDirNames = checks.list((rootDir, pathname) -> {\n+            return !pathname.endsWith(SUFFIX_JAVA);\n+        });\n+        final Map<String, String[]> checksNamesMap = new HashMap<>();\n+        if (checksSubDirNames != null) {\n+            final FilenameFilter filter = (rootDir, pathname) -> {\n+                return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+            };\n+            for (String dirName : checksSubDirNames) {\n+                final File dirFile = new File(PACKAGE_NAME_PATH + \"/\" + dirName);\n+                final String[] fileNames = dirFile.list(filter);\n+                checksNamesMap.put(dirName, fileNames);\n+            }\n+            final String[] miscNames = checks.list(filter);\n+            checksNamesMap.put(MISC, miscNames);\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest(NODE_NAME);\n+        final List<List<String>> list;\n+        try (InputStream input = Files.newInputStream(AVAILABLE_CHECKS_PATH)) {\n+            parser.parse(input, checkHandler);\n+            list = checkHandler.list;\n+        }\n+        final Map<String, String[]> checksNamesMap = getXdocsMap();\n+        for (List<String> sub : list) {\n+            final String moduleName = sub.get(0);\n+            final String checkName1 = sub.get(1);\n+            final String checkName2 = sub.get(2);\n+            final String errorMessage =\n+                    \"URL in\" + AVAILABLE_CHECKS_PATH + \" is inconsistent: \"\n+                            + moduleName + \" \" + checkName1 + \" \" + checkName2;\n+            assertEquals(checkName1, checkName2, errorMessage);\n+            if (checkName1.equals(COMMENTS_INDENTATION) || checkName1.equals(INDENTATION)) {\n+                assertEquals(MISC, moduleName, errorMessage);\n+            }\n+            else if (checkName1.equals(SUPPRESS_WARNINGS_HOLDER)) {\n+                assertEquals(ANNOTATION, moduleName, errorMessage);\n+            }\n+            else {\n+                final String[] moduleFileNames = checksNamesMap.get(moduleName);\n+                if (moduleFileNames != null) {\n+                    boolean match = false;\n+                    for (String filename : moduleFileNames) {\n+                        if ((checkName1 + SUFFIX_CHECK_JAVA).equals(filename)) {\n+                            match = true;\n+                            break;\n+                        }\n+                    }\n+                    assertTrue(match, errorMessage);\n+                }\n+            }\n+        }\n+    }\n+\n+    public static final class CheckTest extends DefaultHandler {\n+\n+        public static final String SPLIT_ONE = \"#\";\n+\n+        public static final String SPLIT_TWO = \"\\\\.\";\n+\n+        public static final String PREFIX_CONFIG = \"config_\";\n+\n+        private final String nodeName;\n+\n+        private List<List<String>> list;\n+\n+        private List<String> stringList;\n+\n+        private String currentTag;\n+\n+        public CheckTest(String nodeName) {\n+            this.nodeName = nodeName;\n+        }\n+\n+        public List<List<String>> getList() {\n+            final List<List<String>> copyList = new ArrayList<>();\n+            for (List<String> elemList: list) {\n+                final List<String> tempList = new ArrayList<>(elemList);\n+                copyList.add(tempList);\n+            }\n+            return copyList;\n+        }\n+\n+        @Override\n+        public void startDocument() {\n+            list = new ArrayList<>();\n+        }\n+\n+        @Override\n+        public void startElement(String uri, String localName, String qName,\n+                                 Attributes attributes) {\n+            if (qName.equals(nodeName)) {\n+                final String[] splitStrings = attributes.getValue(0).split(SPLIT_ONE);\n+                if (splitStrings[0].substring(0, PREFIX_CONFIG.length()).equals(PREFIX_CONFIG)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA1Mjg0Mg=="}, "originalCommit": {"oid": "61a0561609215d2ce89b16edfa0dcb9d7ac79fe9"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MDYyMjgxOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMjoyOToxMFrOGL01MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxNjowNDozN1rOGMGgpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA1MzEwNQ==", "bodyText": "splitStrings[0].substring(PREFIX_CONFIG.length()).split(SPLIT_TWO)[0];\nIt is not clear how module name is extracted.", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r415053105", "createdAt": "2020-04-25T12:29:10Z", "author": {"login": "strkkk"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,197 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final Path PACKAGE_NAME_PATH =\n+            Paths.get(\"src/main/java/com/puppycrawl/tools/checkstyle/checks\");\n+\n+    public static final String NODE_NAME = \"a\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    public static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, String[]> getXdocsMap() {\n+        final File checks = new File(PACKAGE_NAME_PATH.toString());\n+        final String[] checksSubDirNames = checks.list((rootDir, pathname) -> {\n+            return !pathname.endsWith(SUFFIX_JAVA);\n+        });\n+        final Map<String, String[]> checksNamesMap = new HashMap<>();\n+        if (checksSubDirNames != null) {\n+            final FilenameFilter filter = (rootDir, pathname) -> {\n+                return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+            };\n+            for (String dirName : checksSubDirNames) {\n+                final File dirFile = new File(PACKAGE_NAME_PATH + \"/\" + dirName);\n+                final String[] fileNames = dirFile.list(filter);\n+                checksNamesMap.put(dirName, fileNames);\n+            }\n+            final String[] miscNames = checks.list(filter);\n+            checksNamesMap.put(MISC, miscNames);\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest(NODE_NAME);\n+        final List<List<String>> list;\n+        try (InputStream input = Files.newInputStream(AVAILABLE_CHECKS_PATH)) {\n+            parser.parse(input, checkHandler);\n+            list = checkHandler.list;\n+        }\n+        final Map<String, String[]> checksNamesMap = getXdocsMap();\n+        for (List<String> sub : list) {\n+            final String moduleName = sub.get(0);\n+            final String checkName1 = sub.get(1);\n+            final String checkName2 = sub.get(2);\n+            final String errorMessage =\n+                    \"URL in\" + AVAILABLE_CHECKS_PATH + \" is inconsistent: \"\n+                            + moduleName + \" \" + checkName1 + \" \" + checkName2;\n+            assertEquals(checkName1, checkName2, errorMessage);\n+            if (checkName1.equals(COMMENTS_INDENTATION) || checkName1.equals(INDENTATION)) {\n+                assertEquals(MISC, moduleName, errorMessage);\n+            }\n+            else if (checkName1.equals(SUPPRESS_WARNINGS_HOLDER)) {\n+                assertEquals(ANNOTATION, moduleName, errorMessage);\n+            }\n+            else {\n+                final String[] moduleFileNames = checksNamesMap.get(moduleName);\n+                if (moduleFileNames != null) {\n+                    boolean match = false;\n+                    for (String filename : moduleFileNames) {\n+                        if ((checkName1 + SUFFIX_CHECK_JAVA).equals(filename)) {\n+                            match = true;\n+                            break;\n+                        }\n+                    }\n+                    assertTrue(match, errorMessage);\n+                }\n+            }\n+        }\n+    }\n+\n+    public static final class CheckTest extends DefaultHandler {\n+\n+        public static final String SPLIT_ONE = \"#\";\n+\n+        public static final String SPLIT_TWO = \"\\\\.\";\n+\n+        public static final String PREFIX_CONFIG = \"config_\";\n+\n+        private final String nodeName;\n+\n+        private List<List<String>> list;\n+\n+        private List<String> stringList;\n+\n+        private String currentTag;\n+\n+        public CheckTest(String nodeName) {\n+            this.nodeName = nodeName;\n+        }\n+\n+        public List<List<String>> getList() {\n+            final List<List<String>> copyList = new ArrayList<>();\n+            for (List<String> elemList: list) {\n+                final List<String> tempList = new ArrayList<>(elemList);\n+                copyList.add(tempList);\n+            }\n+            return copyList;\n+        }\n+\n+        @Override\n+        public void startDocument() {\n+            list = new ArrayList<>();\n+        }\n+\n+        @Override\n+        public void startElement(String uri, String localName, String qName,\n+                                 Attributes attributes) {\n+            if (qName.equals(nodeName)) {\n+                final String[] splitStrings = attributes.getValue(0).split(SPLIT_ONE);\n+                if (splitStrings[0].substring(0, PREFIX_CONFIG.length()).equals(PREFIX_CONFIG)) {\n+                    stringList = new ArrayList<>();\n+                    final String moduleName =\n+                            splitStrings[0].substring(PREFIX_CONFIG.length()).split(SPLIT_TWO)[0];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61a0561609215d2ce89b16edfa0dcb9d7ac79fe9"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIwNjc4NA==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r415206784", "createdAt": "2020-04-26T03:54:29Z", "author": {"login": "HuGanghui"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,197 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final Path PACKAGE_NAME_PATH =\n+            Paths.get(\"src/main/java/com/puppycrawl/tools/checkstyle/checks\");\n+\n+    public static final String NODE_NAME = \"a\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    public static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, String[]> getXdocsMap() {\n+        final File checks = new File(PACKAGE_NAME_PATH.toString());\n+        final String[] checksSubDirNames = checks.list((rootDir, pathname) -> {\n+            return !pathname.endsWith(SUFFIX_JAVA);\n+        });\n+        final Map<String, String[]> checksNamesMap = new HashMap<>();\n+        if (checksSubDirNames != null) {\n+            final FilenameFilter filter = (rootDir, pathname) -> {\n+                return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+            };\n+            for (String dirName : checksSubDirNames) {\n+                final File dirFile = new File(PACKAGE_NAME_PATH + \"/\" + dirName);\n+                final String[] fileNames = dirFile.list(filter);\n+                checksNamesMap.put(dirName, fileNames);\n+            }\n+            final String[] miscNames = checks.list(filter);\n+            checksNamesMap.put(MISC, miscNames);\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest(NODE_NAME);\n+        final List<List<String>> list;\n+        try (InputStream input = Files.newInputStream(AVAILABLE_CHECKS_PATH)) {\n+            parser.parse(input, checkHandler);\n+            list = checkHandler.list;\n+        }\n+        final Map<String, String[]> checksNamesMap = getXdocsMap();\n+        for (List<String> sub : list) {\n+            final String moduleName = sub.get(0);\n+            final String checkName1 = sub.get(1);\n+            final String checkName2 = sub.get(2);\n+            final String errorMessage =\n+                    \"URL in\" + AVAILABLE_CHECKS_PATH + \" is inconsistent: \"\n+                            + moduleName + \" \" + checkName1 + \" \" + checkName2;\n+            assertEquals(checkName1, checkName2, errorMessage);\n+            if (checkName1.equals(COMMENTS_INDENTATION) || checkName1.equals(INDENTATION)) {\n+                assertEquals(MISC, moduleName, errorMessage);\n+            }\n+            else if (checkName1.equals(SUPPRESS_WARNINGS_HOLDER)) {\n+                assertEquals(ANNOTATION, moduleName, errorMessage);\n+            }\n+            else {\n+                final String[] moduleFileNames = checksNamesMap.get(moduleName);\n+                if (moduleFileNames != null) {\n+                    boolean match = false;\n+                    for (String filename : moduleFileNames) {\n+                        if ((checkName1 + SUFFIX_CHECK_JAVA).equals(filename)) {\n+                            match = true;\n+                            break;\n+                        }\n+                    }\n+                    assertTrue(match, errorMessage);\n+                }\n+            }\n+        }\n+    }\n+\n+    public static final class CheckTest extends DefaultHandler {\n+\n+        public static final String SPLIT_ONE = \"#\";\n+\n+        public static final String SPLIT_TWO = \"\\\\.\";\n+\n+        public static final String PREFIX_CONFIG = \"config_\";\n+\n+        private final String nodeName;\n+\n+        private List<List<String>> list;\n+\n+        private List<String> stringList;\n+\n+        private String currentTag;\n+\n+        public CheckTest(String nodeName) {\n+            this.nodeName = nodeName;\n+        }\n+\n+        public List<List<String>> getList() {\n+            final List<List<String>> copyList = new ArrayList<>();\n+            for (List<String> elemList: list) {\n+                final List<String> tempList = new ArrayList<>(elemList);\n+                copyList.add(tempList);\n+            }\n+            return copyList;\n+        }\n+\n+        @Override\n+        public void startDocument() {\n+            list = new ArrayList<>();\n+        }\n+\n+        @Override\n+        public void startElement(String uri, String localName, String qName,\n+                                 Attributes attributes) {\n+            if (qName.equals(nodeName)) {\n+                final String[] splitStrings = attributes.getValue(0).split(SPLIT_ONE);\n+                if (splitStrings[0].substring(0, PREFIX_CONFIG.length()).equals(PREFIX_CONFIG)) {\n+                    stringList = new ArrayList<>();\n+                    final String moduleName =\n+                            splitStrings[0].substring(PREFIX_CONFIG.length()).split(SPLIT_TWO)[0];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA1MzEwNQ=="}, "originalCommit": {"oid": "61a0561609215d2ce89b16edfa0dcb9d7ac79fe9"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI2MDUyOQ==", "bodyText": "It is not clear.\nThe reason I am asking is that variable names like splitStrings, SPLIT_ONE and SPLIT_TWO tells me nothing about logic, it is hard to follow.", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r415260529", "createdAt": "2020-04-26T09:06:54Z", "author": {"login": "strkkk"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,197 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final Path PACKAGE_NAME_PATH =\n+            Paths.get(\"src/main/java/com/puppycrawl/tools/checkstyle/checks\");\n+\n+    public static final String NODE_NAME = \"a\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    public static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, String[]> getXdocsMap() {\n+        final File checks = new File(PACKAGE_NAME_PATH.toString());\n+        final String[] checksSubDirNames = checks.list((rootDir, pathname) -> {\n+            return !pathname.endsWith(SUFFIX_JAVA);\n+        });\n+        final Map<String, String[]> checksNamesMap = new HashMap<>();\n+        if (checksSubDirNames != null) {\n+            final FilenameFilter filter = (rootDir, pathname) -> {\n+                return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+            };\n+            for (String dirName : checksSubDirNames) {\n+                final File dirFile = new File(PACKAGE_NAME_PATH + \"/\" + dirName);\n+                final String[] fileNames = dirFile.list(filter);\n+                checksNamesMap.put(dirName, fileNames);\n+            }\n+            final String[] miscNames = checks.list(filter);\n+            checksNamesMap.put(MISC, miscNames);\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest(NODE_NAME);\n+        final List<List<String>> list;\n+        try (InputStream input = Files.newInputStream(AVAILABLE_CHECKS_PATH)) {\n+            parser.parse(input, checkHandler);\n+            list = checkHandler.list;\n+        }\n+        final Map<String, String[]> checksNamesMap = getXdocsMap();\n+        for (List<String> sub : list) {\n+            final String moduleName = sub.get(0);\n+            final String checkName1 = sub.get(1);\n+            final String checkName2 = sub.get(2);\n+            final String errorMessage =\n+                    \"URL in\" + AVAILABLE_CHECKS_PATH + \" is inconsistent: \"\n+                            + moduleName + \" \" + checkName1 + \" \" + checkName2;\n+            assertEquals(checkName1, checkName2, errorMessage);\n+            if (checkName1.equals(COMMENTS_INDENTATION) || checkName1.equals(INDENTATION)) {\n+                assertEquals(MISC, moduleName, errorMessage);\n+            }\n+            else if (checkName1.equals(SUPPRESS_WARNINGS_HOLDER)) {\n+                assertEquals(ANNOTATION, moduleName, errorMessage);\n+            }\n+            else {\n+                final String[] moduleFileNames = checksNamesMap.get(moduleName);\n+                if (moduleFileNames != null) {\n+                    boolean match = false;\n+                    for (String filename : moduleFileNames) {\n+                        if ((checkName1 + SUFFIX_CHECK_JAVA).equals(filename)) {\n+                            match = true;\n+                            break;\n+                        }\n+                    }\n+                    assertTrue(match, errorMessage);\n+                }\n+            }\n+        }\n+    }\n+\n+    public static final class CheckTest extends DefaultHandler {\n+\n+        public static final String SPLIT_ONE = \"#\";\n+\n+        public static final String SPLIT_TWO = \"\\\\.\";\n+\n+        public static final String PREFIX_CONFIG = \"config_\";\n+\n+        private final String nodeName;\n+\n+        private List<List<String>> list;\n+\n+        private List<String> stringList;\n+\n+        private String currentTag;\n+\n+        public CheckTest(String nodeName) {\n+            this.nodeName = nodeName;\n+        }\n+\n+        public List<List<String>> getList() {\n+            final List<List<String>> copyList = new ArrayList<>();\n+            for (List<String> elemList: list) {\n+                final List<String> tempList = new ArrayList<>(elemList);\n+                copyList.add(tempList);\n+            }\n+            return copyList;\n+        }\n+\n+        @Override\n+        public void startDocument() {\n+            list = new ArrayList<>();\n+        }\n+\n+        @Override\n+        public void startElement(String uri, String localName, String qName,\n+                                 Attributes attributes) {\n+            if (qName.equals(nodeName)) {\n+                final String[] splitStrings = attributes.getValue(0).split(SPLIT_ONE);\n+                if (splitStrings[0].substring(0, PREFIX_CONFIG.length()).equals(PREFIX_CONFIG)) {\n+                    stringList = new ArrayList<>();\n+                    final String moduleName =\n+                            splitStrings[0].substring(PREFIX_CONFIG.length()).split(SPLIT_TWO)[0];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA1MzEwNQ=="}, "originalCommit": {"oid": "61a0561609215d2ce89b16edfa0dcb9d7ac79fe9"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM0Mjc1OA==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r415342758", "createdAt": "2020-04-26T16:04:37Z", "author": {"login": "HuGanghui"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,197 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final Path PACKAGE_NAME_PATH =\n+            Paths.get(\"src/main/java/com/puppycrawl/tools/checkstyle/checks\");\n+\n+    public static final String NODE_NAME = \"a\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    public static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, String[]> getXdocsMap() {\n+        final File checks = new File(PACKAGE_NAME_PATH.toString());\n+        final String[] checksSubDirNames = checks.list((rootDir, pathname) -> {\n+            return !pathname.endsWith(SUFFIX_JAVA);\n+        });\n+        final Map<String, String[]> checksNamesMap = new HashMap<>();\n+        if (checksSubDirNames != null) {\n+            final FilenameFilter filter = (rootDir, pathname) -> {\n+                return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+            };\n+            for (String dirName : checksSubDirNames) {\n+                final File dirFile = new File(PACKAGE_NAME_PATH + \"/\" + dirName);\n+                final String[] fileNames = dirFile.list(filter);\n+                checksNamesMap.put(dirName, fileNames);\n+            }\n+            final String[] miscNames = checks.list(filter);\n+            checksNamesMap.put(MISC, miscNames);\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest(NODE_NAME);\n+        final List<List<String>> list;\n+        try (InputStream input = Files.newInputStream(AVAILABLE_CHECKS_PATH)) {\n+            parser.parse(input, checkHandler);\n+            list = checkHandler.list;\n+        }\n+        final Map<String, String[]> checksNamesMap = getXdocsMap();\n+        for (List<String> sub : list) {\n+            final String moduleName = sub.get(0);\n+            final String checkName1 = sub.get(1);\n+            final String checkName2 = sub.get(2);\n+            final String errorMessage =\n+                    \"URL in\" + AVAILABLE_CHECKS_PATH + \" is inconsistent: \"\n+                            + moduleName + \" \" + checkName1 + \" \" + checkName2;\n+            assertEquals(checkName1, checkName2, errorMessage);\n+            if (checkName1.equals(COMMENTS_INDENTATION) || checkName1.equals(INDENTATION)) {\n+                assertEquals(MISC, moduleName, errorMessage);\n+            }\n+            else if (checkName1.equals(SUPPRESS_WARNINGS_HOLDER)) {\n+                assertEquals(ANNOTATION, moduleName, errorMessage);\n+            }\n+            else {\n+                final String[] moduleFileNames = checksNamesMap.get(moduleName);\n+                if (moduleFileNames != null) {\n+                    boolean match = false;\n+                    for (String filename : moduleFileNames) {\n+                        if ((checkName1 + SUFFIX_CHECK_JAVA).equals(filename)) {\n+                            match = true;\n+                            break;\n+                        }\n+                    }\n+                    assertTrue(match, errorMessage);\n+                }\n+            }\n+        }\n+    }\n+\n+    public static final class CheckTest extends DefaultHandler {\n+\n+        public static final String SPLIT_ONE = \"#\";\n+\n+        public static final String SPLIT_TWO = \"\\\\.\";\n+\n+        public static final String PREFIX_CONFIG = \"config_\";\n+\n+        private final String nodeName;\n+\n+        private List<List<String>> list;\n+\n+        private List<String> stringList;\n+\n+        private String currentTag;\n+\n+        public CheckTest(String nodeName) {\n+            this.nodeName = nodeName;\n+        }\n+\n+        public List<List<String>> getList() {\n+            final List<List<String>> copyList = new ArrayList<>();\n+            for (List<String> elemList: list) {\n+                final List<String> tempList = new ArrayList<>(elemList);\n+                copyList.add(tempList);\n+            }\n+            return copyList;\n+        }\n+\n+        @Override\n+        public void startDocument() {\n+            list = new ArrayList<>();\n+        }\n+\n+        @Override\n+        public void startElement(String uri, String localName, String qName,\n+                                 Attributes attributes) {\n+            if (qName.equals(nodeName)) {\n+                final String[] splitStrings = attributes.getValue(0).split(SPLIT_ONE);\n+                if (splitStrings[0].substring(0, PREFIX_CONFIG.length()).equals(PREFIX_CONFIG)) {\n+                    stringList = new ArrayList<>();\n+                    final String moduleName =\n+                            splitStrings[0].substring(PREFIX_CONFIG.length()).split(SPLIT_TWO)[0];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA1MzEwNQ=="}, "originalCommit": {"oid": "61a0561609215d2ce89b16edfa0dcb9d7ac79fe9"}, "originalPosition": 170}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MDYyMzg0OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMjoyOTo1NlrOGL01nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwMzo1NDozM1rOGL-Niw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA1MzIxMw==", "bodyText": "checkName1 + SUFFIX_CHECK_JAVA\nshould be extracted to variable to avoid concat every time", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r415053213", "createdAt": "2020-04-25T12:29:56Z", "author": {"login": "strkkk"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,197 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final Path PACKAGE_NAME_PATH =\n+            Paths.get(\"src/main/java/com/puppycrawl/tools/checkstyle/checks\");\n+\n+    public static final String NODE_NAME = \"a\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    public static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, String[]> getXdocsMap() {\n+        final File checks = new File(PACKAGE_NAME_PATH.toString());\n+        final String[] checksSubDirNames = checks.list((rootDir, pathname) -> {\n+            return !pathname.endsWith(SUFFIX_JAVA);\n+        });\n+        final Map<String, String[]> checksNamesMap = new HashMap<>();\n+        if (checksSubDirNames != null) {\n+            final FilenameFilter filter = (rootDir, pathname) -> {\n+                return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+            };\n+            for (String dirName : checksSubDirNames) {\n+                final File dirFile = new File(PACKAGE_NAME_PATH + \"/\" + dirName);\n+                final String[] fileNames = dirFile.list(filter);\n+                checksNamesMap.put(dirName, fileNames);\n+            }\n+            final String[] miscNames = checks.list(filter);\n+            checksNamesMap.put(MISC, miscNames);\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest(NODE_NAME);\n+        final List<List<String>> list;\n+        try (InputStream input = Files.newInputStream(AVAILABLE_CHECKS_PATH)) {\n+            parser.parse(input, checkHandler);\n+            list = checkHandler.list;\n+        }\n+        final Map<String, String[]> checksNamesMap = getXdocsMap();\n+        for (List<String> sub : list) {\n+            final String moduleName = sub.get(0);\n+            final String checkName1 = sub.get(1);\n+            final String checkName2 = sub.get(2);\n+            final String errorMessage =\n+                    \"URL in\" + AVAILABLE_CHECKS_PATH + \" is inconsistent: \"\n+                            + moduleName + \" \" + checkName1 + \" \" + checkName2;\n+            assertEquals(checkName1, checkName2, errorMessage);\n+            if (checkName1.equals(COMMENTS_INDENTATION) || checkName1.equals(INDENTATION)) {\n+                assertEquals(MISC, moduleName, errorMessage);\n+            }\n+            else if (checkName1.equals(SUPPRESS_WARNINGS_HOLDER)) {\n+                assertEquals(ANNOTATION, moduleName, errorMessage);\n+            }\n+            else {\n+                final String[] moduleFileNames = checksNamesMap.get(moduleName);\n+                if (moduleFileNames != null) {\n+                    boolean match = false;\n+                    for (String filename : moduleFileNames) {\n+                        if ((checkName1 + SUFFIX_CHECK_JAVA).equals(filename)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61a0561609215d2ce89b16edfa0dcb9d7ac79fe9"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIwNjc5NQ==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r415206795", "createdAt": "2020-04-26T03:54:33Z", "author": {"login": "HuGanghui"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,197 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final Path PACKAGE_NAME_PATH =\n+            Paths.get(\"src/main/java/com/puppycrawl/tools/checkstyle/checks\");\n+\n+    public static final String NODE_NAME = \"a\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    public static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, String[]> getXdocsMap() {\n+        final File checks = new File(PACKAGE_NAME_PATH.toString());\n+        final String[] checksSubDirNames = checks.list((rootDir, pathname) -> {\n+            return !pathname.endsWith(SUFFIX_JAVA);\n+        });\n+        final Map<String, String[]> checksNamesMap = new HashMap<>();\n+        if (checksSubDirNames != null) {\n+            final FilenameFilter filter = (rootDir, pathname) -> {\n+                return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+            };\n+            for (String dirName : checksSubDirNames) {\n+                final File dirFile = new File(PACKAGE_NAME_PATH + \"/\" + dirName);\n+                final String[] fileNames = dirFile.list(filter);\n+                checksNamesMap.put(dirName, fileNames);\n+            }\n+            final String[] miscNames = checks.list(filter);\n+            checksNamesMap.put(MISC, miscNames);\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest(NODE_NAME);\n+        final List<List<String>> list;\n+        try (InputStream input = Files.newInputStream(AVAILABLE_CHECKS_PATH)) {\n+            parser.parse(input, checkHandler);\n+            list = checkHandler.list;\n+        }\n+        final Map<String, String[]> checksNamesMap = getXdocsMap();\n+        for (List<String> sub : list) {\n+            final String moduleName = sub.get(0);\n+            final String checkName1 = sub.get(1);\n+            final String checkName2 = sub.get(2);\n+            final String errorMessage =\n+                    \"URL in\" + AVAILABLE_CHECKS_PATH + \" is inconsistent: \"\n+                            + moduleName + \" \" + checkName1 + \" \" + checkName2;\n+            assertEquals(checkName1, checkName2, errorMessage);\n+            if (checkName1.equals(COMMENTS_INDENTATION) || checkName1.equals(INDENTATION)) {\n+                assertEquals(MISC, moduleName, errorMessage);\n+            }\n+            else if (checkName1.equals(SUPPRESS_WARNINGS_HOLDER)) {\n+                assertEquals(ANNOTATION, moduleName, errorMessage);\n+            }\n+            else {\n+                final String[] moduleFileNames = checksNamesMap.get(moduleName);\n+                if (moduleFileNames != null) {\n+                    boolean match = false;\n+                    for (String filename : moduleFileNames) {\n+                        if ((checkName1 + SUFFIX_CHECK_JAVA).equals(filename)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA1MzIxMw=="}, "originalCommit": {"oid": "61a0561609215d2ce89b16edfa0dcb9d7ac79fe9"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MjQ4MDY1OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwOToxMDozNlrOGMBiFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxNjowNDo0N1rOGMGgyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI2MTIwNA==", "bodyText": "checkName1 and checkName2 please rename to make it more understandable", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r415261204", "createdAt": "2020-04-26T09:10:36Z", "author": {"login": "strkkk"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,186 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    public static final String NODE_NAME = \"a\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    public static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, String[]> getXdocsMap() {\n+        final File checks = new File(PACKAGE_NAME);\n+        final String[] checksSubDirNames = checks.list((rootDir, pathname) -> {\n+            return !pathname.endsWith(SUFFIX_JAVA);\n+        });\n+        final Map<String, String[]> checksNamesMap = new HashMap<>();\n+        if (checksSubDirNames != null) {\n+            final FilenameFilter filter = (rootDir, pathname) -> {\n+                return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+            };\n+            for (String dirName : checksSubDirNames) {\n+                final File dirFile = new File(PACKAGE_NAME + \"/\" + dirName);\n+                final String[] fileNames = dirFile.list(filter);\n+                checksNamesMap.put(dirName, fileNames);\n+            }\n+            final String[] miscNames = checks.list(filter);\n+            checksNamesMap.put(MISC, miscNames);\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest(NODE_NAME);\n+        try (InputStream input = Files.newInputStream(AVAILABLE_CHECKS_PATH)) {\n+            parser.parse(input, checkHandler);\n+        }\n+        final Map<String, String[]> checksNamesMap = getXdocsMap();\n+        for (List<String> sub : checkHandler.list) {\n+            final String moduleName = sub.get(0);\n+            final String checkName1 = sub.get(1);\n+            final String checkName2 = sub.get(2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f34a58ef39199df4a0903559d240e7887e1fe9"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM0Mjc5Mg==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r415342792", "createdAt": "2020-04-26T16:04:47Z", "author": {"login": "HuGanghui"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,186 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    public static final String NODE_NAME = \"a\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    public static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, String[]> getXdocsMap() {\n+        final File checks = new File(PACKAGE_NAME);\n+        final String[] checksSubDirNames = checks.list((rootDir, pathname) -> {\n+            return !pathname.endsWith(SUFFIX_JAVA);\n+        });\n+        final Map<String, String[]> checksNamesMap = new HashMap<>();\n+        if (checksSubDirNames != null) {\n+            final FilenameFilter filter = (rootDir, pathname) -> {\n+                return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+            };\n+            for (String dirName : checksSubDirNames) {\n+                final File dirFile = new File(PACKAGE_NAME + \"/\" + dirName);\n+                final String[] fileNames = dirFile.list(filter);\n+                checksNamesMap.put(dirName, fileNames);\n+            }\n+            final String[] miscNames = checks.list(filter);\n+            checksNamesMap.put(MISC, miscNames);\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest(NODE_NAME);\n+        try (InputStream input = Files.newInputStream(AVAILABLE_CHECKS_PATH)) {\n+            parser.parse(input, checkHandler);\n+        }\n+        final Map<String, String[]> checksNamesMap = getXdocsMap();\n+        for (List<String> sub : checkHandler.list) {\n+            final String moduleName = sub.get(0);\n+            final String checkName1 = sub.get(1);\n+            final String checkName2 = sub.get(2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI2MTIwNA=="}, "originalCommit": {"oid": "d7f34a58ef39199df4a0903559d240e7887e1fe9"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MjQ4Mjk0OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwOToxMTo0NVrOGMBjHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxNjowNTowOVrOGMGhGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI2MTQ2OA==", "bodyText": "here just names are listed, but it is not clear what it is incorrect", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r415261468", "createdAt": "2020-04-26T09:11:45Z", "author": {"login": "strkkk"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,186 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    public static final String NODE_NAME = \"a\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    public static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, String[]> getXdocsMap() {\n+        final File checks = new File(PACKAGE_NAME);\n+        final String[] checksSubDirNames = checks.list((rootDir, pathname) -> {\n+            return !pathname.endsWith(SUFFIX_JAVA);\n+        });\n+        final Map<String, String[]> checksNamesMap = new HashMap<>();\n+        if (checksSubDirNames != null) {\n+            final FilenameFilter filter = (rootDir, pathname) -> {\n+                return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+            };\n+            for (String dirName : checksSubDirNames) {\n+                final File dirFile = new File(PACKAGE_NAME + \"/\" + dirName);\n+                final String[] fileNames = dirFile.list(filter);\n+                checksNamesMap.put(dirName, fileNames);\n+            }\n+            final String[] miscNames = checks.list(filter);\n+            checksNamesMap.put(MISC, miscNames);\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest(NODE_NAME);\n+        try (InputStream input = Files.newInputStream(AVAILABLE_CHECKS_PATH)) {\n+            parser.parse(input, checkHandler);\n+        }\n+        final Map<String, String[]> checksNamesMap = getXdocsMap();\n+        for (List<String> sub : checkHandler.list) {\n+            final String moduleName = sub.get(0);\n+            final String checkName1 = sub.get(1);\n+            final String checkName2 = sub.get(2);\n+            final String errorMessage = \"URL in \" + AVAILABLE_CHECKS_PATH + \" is inconsistent: \"\n+                    + moduleName + \" \" + checkName1 + \" \" + checkName2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f34a58ef39199df4a0903559d240e7887e1fe9"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM0Mjg3NQ==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r415342875", "createdAt": "2020-04-26T16:05:09Z", "author": {"login": "HuGanghui"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,186 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    public static final String NODE_NAME = \"a\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    public static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, String[]> getXdocsMap() {\n+        final File checks = new File(PACKAGE_NAME);\n+        final String[] checksSubDirNames = checks.list((rootDir, pathname) -> {\n+            return !pathname.endsWith(SUFFIX_JAVA);\n+        });\n+        final Map<String, String[]> checksNamesMap = new HashMap<>();\n+        if (checksSubDirNames != null) {\n+            final FilenameFilter filter = (rootDir, pathname) -> {\n+                return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+            };\n+            for (String dirName : checksSubDirNames) {\n+                final File dirFile = new File(PACKAGE_NAME + \"/\" + dirName);\n+                final String[] fileNames = dirFile.list(filter);\n+                checksNamesMap.put(dirName, fileNames);\n+            }\n+            final String[] miscNames = checks.list(filter);\n+            checksNamesMap.put(MISC, miscNames);\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest(NODE_NAME);\n+        try (InputStream input = Files.newInputStream(AVAILABLE_CHECKS_PATH)) {\n+            parser.parse(input, checkHandler);\n+        }\n+        final Map<String, String[]> checksNamesMap = getXdocsMap();\n+        for (List<String> sub : checkHandler.list) {\n+            final String moduleName = sub.get(0);\n+            final String checkName1 = sub.get(1);\n+            final String checkName2 = sub.get(2);\n+            final String errorMessage = \"URL in \" + AVAILABLE_CHECKS_PATH + \" is inconsistent: \"\n+                    + moduleName + \" \" + checkName1 + \" \" + checkName2;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI2MTQ2OA=="}, "originalCommit": {"oid": "d7f34a58ef39199df4a0903559d240e7887e1fe9"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MjQ4NzI4OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwOToxNDo0NlrOGMBlIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxNjowNToxM1rOGMGhHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI2MTk4Ng==", "bodyText": "no need to make a constructor for this, the only value for node is \"a\", it can be used directly", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r415261986", "createdAt": "2020-04-26T09:14:46Z", "author": {"login": "strkkk"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,186 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    public static final String NODE_NAME = \"a\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    public static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, String[]> getXdocsMap() {\n+        final File checks = new File(PACKAGE_NAME);\n+        final String[] checksSubDirNames = checks.list((rootDir, pathname) -> {\n+            return !pathname.endsWith(SUFFIX_JAVA);\n+        });\n+        final Map<String, String[]> checksNamesMap = new HashMap<>();\n+        if (checksSubDirNames != null) {\n+            final FilenameFilter filter = (rootDir, pathname) -> {\n+                return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+            };\n+            for (String dirName : checksSubDirNames) {\n+                final File dirFile = new File(PACKAGE_NAME + \"/\" + dirName);\n+                final String[] fileNames = dirFile.list(filter);\n+                checksNamesMap.put(dirName, fileNames);\n+            }\n+            final String[] miscNames = checks.list(filter);\n+            checksNamesMap.put(MISC, miscNames);\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest(NODE_NAME);\n+        try (InputStream input = Files.newInputStream(AVAILABLE_CHECKS_PATH)) {\n+            parser.parse(input, checkHandler);\n+        }\n+        final Map<String, String[]> checksNamesMap = getXdocsMap();\n+        for (List<String> sub : checkHandler.list) {\n+            final String moduleName = sub.get(0);\n+            final String checkName1 = sub.get(1);\n+            final String checkName2 = sub.get(2);\n+            final String errorMessage = \"URL in \" + AVAILABLE_CHECKS_PATH + \" is inconsistent: \"\n+                    + moduleName + \" \" + checkName1 + \" \" + checkName2;\n+            assertWithMessage(errorMessage).that(checkName2).matches(checkName1);\n+            if (checkName1.equals(COMMENTS_INDENTATION) || checkName1.equals(INDENTATION)) {\n+                assertWithMessage(errorMessage).that(moduleName).matches(MISC);\n+            }\n+            else if (checkName1.equals(SUPPRESS_WARNINGS_HOLDER)) {\n+                assertWithMessage(errorMessage).that(moduleName).matches(ANNOTATION);\n+            }\n+            else {\n+                final String[] moduleFileNames = checksNamesMap.get(moduleName);\n+                if (moduleFileNames != null) {\n+                    boolean match = false;\n+                    final String checkNameWithSuffix = checkName1 + SUFFIX_CHECK_JAVA;\n+                    for (String filename : moduleFileNames) {\n+                        if (checkNameWithSuffix.equals(filename)) {\n+                            match = true;\n+                            break;\n+                        }\n+                    }\n+                    assertWithMessage(errorMessage).that(match).isTrue();\n+                }\n+            }\n+        }\n+    }\n+\n+    public static final class CheckTest extends DefaultHandler {\n+\n+        public static final String SPLIT_ONE = \"#\";\n+\n+        public static final String SPLIT_TWO = \"\\\\.\";\n+\n+        public static final String PREFIX_CONFIG = \"config_\";\n+\n+        private final String nodeName;\n+\n+        private List<List<String>> list;\n+\n+        private List<String> stringList;\n+\n+        private String currentTag;\n+\n+        public CheckTest(String nodeName) {\n+            this.nodeName = nodeName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f34a58ef39199df4a0903559d240e7887e1fe9"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM0Mjg3OQ==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r415342879", "createdAt": "2020-04-26T16:05:13Z", "author": {"login": "HuGanghui"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,186 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    public static final String NODE_NAME = \"a\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    public static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, String[]> getXdocsMap() {\n+        final File checks = new File(PACKAGE_NAME);\n+        final String[] checksSubDirNames = checks.list((rootDir, pathname) -> {\n+            return !pathname.endsWith(SUFFIX_JAVA);\n+        });\n+        final Map<String, String[]> checksNamesMap = new HashMap<>();\n+        if (checksSubDirNames != null) {\n+            final FilenameFilter filter = (rootDir, pathname) -> {\n+                return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+            };\n+            for (String dirName : checksSubDirNames) {\n+                final File dirFile = new File(PACKAGE_NAME + \"/\" + dirName);\n+                final String[] fileNames = dirFile.list(filter);\n+                checksNamesMap.put(dirName, fileNames);\n+            }\n+            final String[] miscNames = checks.list(filter);\n+            checksNamesMap.put(MISC, miscNames);\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest(NODE_NAME);\n+        try (InputStream input = Files.newInputStream(AVAILABLE_CHECKS_PATH)) {\n+            parser.parse(input, checkHandler);\n+        }\n+        final Map<String, String[]> checksNamesMap = getXdocsMap();\n+        for (List<String> sub : checkHandler.list) {\n+            final String moduleName = sub.get(0);\n+            final String checkName1 = sub.get(1);\n+            final String checkName2 = sub.get(2);\n+            final String errorMessage = \"URL in \" + AVAILABLE_CHECKS_PATH + \" is inconsistent: \"\n+                    + moduleName + \" \" + checkName1 + \" \" + checkName2;\n+            assertWithMessage(errorMessage).that(checkName2).matches(checkName1);\n+            if (checkName1.equals(COMMENTS_INDENTATION) || checkName1.equals(INDENTATION)) {\n+                assertWithMessage(errorMessage).that(moduleName).matches(MISC);\n+            }\n+            else if (checkName1.equals(SUPPRESS_WARNINGS_HOLDER)) {\n+                assertWithMessage(errorMessage).that(moduleName).matches(ANNOTATION);\n+            }\n+            else {\n+                final String[] moduleFileNames = checksNamesMap.get(moduleName);\n+                if (moduleFileNames != null) {\n+                    boolean match = false;\n+                    final String checkNameWithSuffix = checkName1 + SUFFIX_CHECK_JAVA;\n+                    for (String filename : moduleFileNames) {\n+                        if (checkNameWithSuffix.equals(filename)) {\n+                            match = true;\n+                            break;\n+                        }\n+                    }\n+                    assertWithMessage(errorMessage).that(match).isTrue();\n+                }\n+            }\n+        }\n+    }\n+\n+    public static final class CheckTest extends DefaultHandler {\n+\n+        public static final String SPLIT_ONE = \"#\";\n+\n+        public static final String SPLIT_TWO = \"\\\\.\";\n+\n+        public static final String PREFIX_CONFIG = \"config_\";\n+\n+        private final String nodeName;\n+\n+        private List<List<String>> list;\n+\n+        private List<String> stringList;\n+\n+        private String currentTag;\n+\n+        public CheckTest(String nodeName) {\n+            this.nodeName = nodeName;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI2MTk4Ng=="}, "originalCommit": {"oid": "d7f34a58ef39199df4a0903559d240e7887e1fe9"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MjQ4ODczOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwOToxNTo1NlrOGMBl3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxNjowNToxN1rOGMGhKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI2MjE3NA==", "bodyText": "please rename variables. It is confusing to see list and stringList, it is not clear what they are for", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r415262174", "createdAt": "2020-04-26T09:15:56Z", "author": {"login": "strkkk"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,186 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    public static final String NODE_NAME = \"a\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    public static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, String[]> getXdocsMap() {\n+        final File checks = new File(PACKAGE_NAME);\n+        final String[] checksSubDirNames = checks.list((rootDir, pathname) -> {\n+            return !pathname.endsWith(SUFFIX_JAVA);\n+        });\n+        final Map<String, String[]> checksNamesMap = new HashMap<>();\n+        if (checksSubDirNames != null) {\n+            final FilenameFilter filter = (rootDir, pathname) -> {\n+                return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+            };\n+            for (String dirName : checksSubDirNames) {\n+                final File dirFile = new File(PACKAGE_NAME + \"/\" + dirName);\n+                final String[] fileNames = dirFile.list(filter);\n+                checksNamesMap.put(dirName, fileNames);\n+            }\n+            final String[] miscNames = checks.list(filter);\n+            checksNamesMap.put(MISC, miscNames);\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest(NODE_NAME);\n+        try (InputStream input = Files.newInputStream(AVAILABLE_CHECKS_PATH)) {\n+            parser.parse(input, checkHandler);\n+        }\n+        final Map<String, String[]> checksNamesMap = getXdocsMap();\n+        for (List<String> sub : checkHandler.list) {\n+            final String moduleName = sub.get(0);\n+            final String checkName1 = sub.get(1);\n+            final String checkName2 = sub.get(2);\n+            final String errorMessage = \"URL in \" + AVAILABLE_CHECKS_PATH + \" is inconsistent: \"\n+                    + moduleName + \" \" + checkName1 + \" \" + checkName2;\n+            assertWithMessage(errorMessage).that(checkName2).matches(checkName1);\n+            if (checkName1.equals(COMMENTS_INDENTATION) || checkName1.equals(INDENTATION)) {\n+                assertWithMessage(errorMessage).that(moduleName).matches(MISC);\n+            }\n+            else if (checkName1.equals(SUPPRESS_WARNINGS_HOLDER)) {\n+                assertWithMessage(errorMessage).that(moduleName).matches(ANNOTATION);\n+            }\n+            else {\n+                final String[] moduleFileNames = checksNamesMap.get(moduleName);\n+                if (moduleFileNames != null) {\n+                    boolean match = false;\n+                    final String checkNameWithSuffix = checkName1 + SUFFIX_CHECK_JAVA;\n+                    for (String filename : moduleFileNames) {\n+                        if (checkNameWithSuffix.equals(filename)) {\n+                            match = true;\n+                            break;\n+                        }\n+                    }\n+                    assertWithMessage(errorMessage).that(match).isTrue();\n+                }\n+            }\n+        }\n+    }\n+\n+    public static final class CheckTest extends DefaultHandler {\n+\n+        public static final String SPLIT_ONE = \"#\";\n+\n+        public static final String SPLIT_TWO = \"\\\\.\";\n+\n+        public static final String PREFIX_CONFIG = \"config_\";\n+\n+        private final String nodeName;\n+\n+        private List<List<String>> list;\n+\n+        private List<String> stringList;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f34a58ef39199df4a0903559d240e7887e1fe9"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM0Mjg4OA==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r415342888", "createdAt": "2020-04-26T16:05:17Z", "author": {"login": "HuGanghui"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,186 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    public static final String NODE_NAME = \"a\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    public static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, String[]> getXdocsMap() {\n+        final File checks = new File(PACKAGE_NAME);\n+        final String[] checksSubDirNames = checks.list((rootDir, pathname) -> {\n+            return !pathname.endsWith(SUFFIX_JAVA);\n+        });\n+        final Map<String, String[]> checksNamesMap = new HashMap<>();\n+        if (checksSubDirNames != null) {\n+            final FilenameFilter filter = (rootDir, pathname) -> {\n+                return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+            };\n+            for (String dirName : checksSubDirNames) {\n+                final File dirFile = new File(PACKAGE_NAME + \"/\" + dirName);\n+                final String[] fileNames = dirFile.list(filter);\n+                checksNamesMap.put(dirName, fileNames);\n+            }\n+            final String[] miscNames = checks.list(filter);\n+            checksNamesMap.put(MISC, miscNames);\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest(NODE_NAME);\n+        try (InputStream input = Files.newInputStream(AVAILABLE_CHECKS_PATH)) {\n+            parser.parse(input, checkHandler);\n+        }\n+        final Map<String, String[]> checksNamesMap = getXdocsMap();\n+        for (List<String> sub : checkHandler.list) {\n+            final String moduleName = sub.get(0);\n+            final String checkName1 = sub.get(1);\n+            final String checkName2 = sub.get(2);\n+            final String errorMessage = \"URL in \" + AVAILABLE_CHECKS_PATH + \" is inconsistent: \"\n+                    + moduleName + \" \" + checkName1 + \" \" + checkName2;\n+            assertWithMessage(errorMessage).that(checkName2).matches(checkName1);\n+            if (checkName1.equals(COMMENTS_INDENTATION) || checkName1.equals(INDENTATION)) {\n+                assertWithMessage(errorMessage).that(moduleName).matches(MISC);\n+            }\n+            else if (checkName1.equals(SUPPRESS_WARNINGS_HOLDER)) {\n+                assertWithMessage(errorMessage).that(moduleName).matches(ANNOTATION);\n+            }\n+            else {\n+                final String[] moduleFileNames = checksNamesMap.get(moduleName);\n+                if (moduleFileNames != null) {\n+                    boolean match = false;\n+                    final String checkNameWithSuffix = checkName1 + SUFFIX_CHECK_JAVA;\n+                    for (String filename : moduleFileNames) {\n+                        if (checkNameWithSuffix.equals(filename)) {\n+                            match = true;\n+                            break;\n+                        }\n+                    }\n+                    assertWithMessage(errorMessage).that(match).isTrue();\n+                }\n+            }\n+        }\n+    }\n+\n+    public static final class CheckTest extends DefaultHandler {\n+\n+        public static final String SPLIT_ONE = \"#\";\n+\n+        public static final String SPLIT_TWO = \"\\\\.\";\n+\n+        public static final String PREFIX_CONFIG = \"config_\";\n+\n+        private final String nodeName;\n+\n+        private List<List<String>> list;\n+\n+        private List<String> stringList;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI2MjE3NA=="}, "originalCommit": {"oid": "d7f34a58ef39199df4a0903559d240e7887e1fe9"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NTY1NTY5OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwOTo0MDo0NVrOGMaKXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNDo0OTowNlrOGMnNOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY2NDczMw==", "bodyText": "it looks like same thing can be done with simple regex (remove start and end of module name\nmoduleNameWithHtml.replaceAll((\".*config_)|(\\\\.html.*))", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r415664733", "createdAt": "2020-04-27T09:40:45Z", "author": {"login": "strkkk"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    public static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, String[]> getXdocsMap() {\n+        final File checks = new File(PACKAGE_NAME);\n+        final String[] checksSubDirNames = checks.list((rootDir, pathname) -> {\n+            return !pathname.endsWith(SUFFIX_JAVA);\n+        });\n+        final Map<String, String[]> checksNamesMap = new HashMap<>();\n+        if (checksSubDirNames != null) {\n+            final FilenameFilter filter = (rootDir, pathname) -> {\n+                return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+            };\n+            for (String dirName : checksSubDirNames) {\n+                final File dirFile = new File(PACKAGE_NAME + \"/\" + dirName);\n+                final String[] fileNames = dirFile.list(filter);\n+                checksNamesMap.put(dirName, fileNames);\n+            }\n+            final String[] miscNames = checks.list(filter);\n+            checksNamesMap.put(MISC, miscNames);\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest();\n+        try (InputStream input = Files.newInputStream(AVAILABLE_CHECKS_PATH)) {\n+            parser.parse(input, checkHandler);\n+        }\n+        final Map<String, String[]> checksNamesMap = getXdocsMap();\n+        for (List<String> sub : checkHandler.checkNamesList) {\n+            final String moduleName = sub.get(0);\n+            final String checkNameInAttribute = sub.get(1);\n+            final String checkNameInText = sub.get(2);\n+            final String checkNameInconsistentErrorMsg = String.format(Locale.ROOT,\n+                    \"checkName %s in attribute is not consistent with %s in text in %s\",\n+                    checkNameInAttribute, checkNameInText, AVAILABLE_CHECKS_PATH);\n+            assertWithMessage(checkNameInconsistentErrorMsg)\n+                    .that(checkNameInText).matches(checkNameInAttribute);\n+            final String checkNameModuleErrorMsg = String.format(Locale.ROOT,\n+                    \"checkName %s is not in %s module\", checkNameInAttribute, moduleName);\n+            if (checkNameInAttribute.equals(COMMENTS_INDENTATION)\n+                    || checkNameInAttribute.equals(INDENTATION)) {\n+                assertWithMessage(checkNameModuleErrorMsg).that(moduleName).matches(MISC);\n+            }\n+            else if (checkNameInAttribute.equals(SUPPRESS_WARNINGS_HOLDER)) {\n+                assertWithMessage(checkNameModuleErrorMsg).that(moduleName).matches(ANNOTATION);\n+            }\n+            else {\n+                final String[] moduleFileNames = checksNamesMap.get(moduleName);\n+                final String moduleNameErrorMsg = String.format(Locale.ROOT,\n+                        \"module name: %s is not exist in %s\", moduleName, PACKAGE_NAME);\n+                assertWithMessage(moduleNameErrorMsg).that(moduleFileNames).isNotNull();\n+                boolean match = false;\n+                final String checkNameWithSuffix = checkNameInAttribute + SUFFIX_CHECK_JAVA;\n+                for (String filename : moduleFileNames) {\n+                    if (checkNameWithSuffix.equals(filename)) {\n+                        match = true;\n+                        break;\n+                    }\n+                }\n+                assertWithMessage(checkNameModuleErrorMsg).that(match).isTrue();\n+            }\n+        }\n+    }\n+\n+    public static final class CheckTest extends DefaultHandler {\n+\n+        public static final String SPLIT_CHECK_NAME_IN_ATTRIBUTE = \"#\";\n+\n+        public static final String SPLIT_MODULE_NAME_IN_ATTRIBUTE = \"\\\\.\";\n+\n+        public static final String PREFIX_CONFIG = \"config_\";\n+\n+        private static final String NODE_NAME = \"a\";\n+\n+        private List<List<String>> checkNamesList;\n+\n+        private List<String> singleCheckNameList;\n+\n+        private String currentTag;\n+\n+        @Override\n+        public void startDocument() {\n+            checkNamesList = new ArrayList<>();\n+        }\n+\n+        @Override\n+        public void startElement(String uri, String localName, String qName,\n+                                 Attributes attributes) {\n+            if (qName.equals(NODE_NAME)) {\n+                final String[] moduleAndCheckName =\n+                        attributes.getValue(0).split(SPLIT_CHECK_NAME_IN_ATTRIBUTE);\n+                if (moduleAndCheckName[0].startsWith(PREFIX_CONFIG)) {\n+                    singleCheckNameList = new ArrayList<>();\n+                    final String moduleNameWithHtml =\n+                            moduleAndCheckName[0].substring(PREFIX_CONFIG.length());\n+                    final String moduleName =\n+                            moduleNameWithHtml.split(SPLIT_MODULE_NAME_IN_ATTRIBUTE)[0];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d79d13ee38142ad26acac05d52d3cfbdb234743"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg3ODQ1Nw==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r415878457", "createdAt": "2020-04-27T14:49:06Z", "author": {"login": "HuGanghui"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    public static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, String[]> getXdocsMap() {\n+        final File checks = new File(PACKAGE_NAME);\n+        final String[] checksSubDirNames = checks.list((rootDir, pathname) -> {\n+            return !pathname.endsWith(SUFFIX_JAVA);\n+        });\n+        final Map<String, String[]> checksNamesMap = new HashMap<>();\n+        if (checksSubDirNames != null) {\n+            final FilenameFilter filter = (rootDir, pathname) -> {\n+                return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+            };\n+            for (String dirName : checksSubDirNames) {\n+                final File dirFile = new File(PACKAGE_NAME + \"/\" + dirName);\n+                final String[] fileNames = dirFile.list(filter);\n+                checksNamesMap.put(dirName, fileNames);\n+            }\n+            final String[] miscNames = checks.list(filter);\n+            checksNamesMap.put(MISC, miscNames);\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest();\n+        try (InputStream input = Files.newInputStream(AVAILABLE_CHECKS_PATH)) {\n+            parser.parse(input, checkHandler);\n+        }\n+        final Map<String, String[]> checksNamesMap = getXdocsMap();\n+        for (List<String> sub : checkHandler.checkNamesList) {\n+            final String moduleName = sub.get(0);\n+            final String checkNameInAttribute = sub.get(1);\n+            final String checkNameInText = sub.get(2);\n+            final String checkNameInconsistentErrorMsg = String.format(Locale.ROOT,\n+                    \"checkName %s in attribute is not consistent with %s in text in %s\",\n+                    checkNameInAttribute, checkNameInText, AVAILABLE_CHECKS_PATH);\n+            assertWithMessage(checkNameInconsistentErrorMsg)\n+                    .that(checkNameInText).matches(checkNameInAttribute);\n+            final String checkNameModuleErrorMsg = String.format(Locale.ROOT,\n+                    \"checkName %s is not in %s module\", checkNameInAttribute, moduleName);\n+            if (checkNameInAttribute.equals(COMMENTS_INDENTATION)\n+                    || checkNameInAttribute.equals(INDENTATION)) {\n+                assertWithMessage(checkNameModuleErrorMsg).that(moduleName).matches(MISC);\n+            }\n+            else if (checkNameInAttribute.equals(SUPPRESS_WARNINGS_HOLDER)) {\n+                assertWithMessage(checkNameModuleErrorMsg).that(moduleName).matches(ANNOTATION);\n+            }\n+            else {\n+                final String[] moduleFileNames = checksNamesMap.get(moduleName);\n+                final String moduleNameErrorMsg = String.format(Locale.ROOT,\n+                        \"module name: %s is not exist in %s\", moduleName, PACKAGE_NAME);\n+                assertWithMessage(moduleNameErrorMsg).that(moduleFileNames).isNotNull();\n+                boolean match = false;\n+                final String checkNameWithSuffix = checkNameInAttribute + SUFFIX_CHECK_JAVA;\n+                for (String filename : moduleFileNames) {\n+                    if (checkNameWithSuffix.equals(filename)) {\n+                        match = true;\n+                        break;\n+                    }\n+                }\n+                assertWithMessage(checkNameModuleErrorMsg).that(match).isTrue();\n+            }\n+        }\n+    }\n+\n+    public static final class CheckTest extends DefaultHandler {\n+\n+        public static final String SPLIT_CHECK_NAME_IN_ATTRIBUTE = \"#\";\n+\n+        public static final String SPLIT_MODULE_NAME_IN_ATTRIBUTE = \"\\\\.\";\n+\n+        public static final String PREFIX_CONFIG = \"config_\";\n+\n+        private static final String NODE_NAME = \"a\";\n+\n+        private List<List<String>> checkNamesList;\n+\n+        private List<String> singleCheckNameList;\n+\n+        private String currentTag;\n+\n+        @Override\n+        public void startDocument() {\n+            checkNamesList = new ArrayList<>();\n+        }\n+\n+        @Override\n+        public void startElement(String uri, String localName, String qName,\n+                                 Attributes attributes) {\n+            if (qName.equals(NODE_NAME)) {\n+                final String[] moduleAndCheckName =\n+                        attributes.getValue(0).split(SPLIT_CHECK_NAME_IN_ATTRIBUTE);\n+                if (moduleAndCheckName[0].startsWith(PREFIX_CONFIG)) {\n+                    singleCheckNameList = new ArrayList<>();\n+                    final String moduleNameWithHtml =\n+                            moduleAndCheckName[0].substring(PREFIX_CONFIG.length());\n+                    final String moduleName =\n+                            moduleNameWithHtml.split(SPLIT_MODULE_NAME_IN_ATTRIBUTE)[0];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY2NDczMw=="}, "originalCommit": {"oid": "8d79d13ee38142ad26acac05d52d3cfbdb234743"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NTY3ODM3OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwOTo0NTo0OVrOGMaXtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNDo1NTowM1rOGMnh_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY2ODE0OQ==", "bodyText": "it is better to have this list and clear it every time, e.g.\nif(qName.equals(NODE_NAME)) {\n  checkNamesList.addAll(singleCheckNameList);\n  singleCheckNameList.clear();\n}\n\nAnd you can remove line 158 and init field with empty list\nSame can be done for checkNamesList ( can be cleared in endDocument method)", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r415668149", "createdAt": "2020-04-27T09:45:49Z", "author": {"login": "strkkk"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    public static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, String[]> getXdocsMap() {\n+        final File checks = new File(PACKAGE_NAME);\n+        final String[] checksSubDirNames = checks.list((rootDir, pathname) -> {\n+            return !pathname.endsWith(SUFFIX_JAVA);\n+        });\n+        final Map<String, String[]> checksNamesMap = new HashMap<>();\n+        if (checksSubDirNames != null) {\n+            final FilenameFilter filter = (rootDir, pathname) -> {\n+                return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+            };\n+            for (String dirName : checksSubDirNames) {\n+                final File dirFile = new File(PACKAGE_NAME + \"/\" + dirName);\n+                final String[] fileNames = dirFile.list(filter);\n+                checksNamesMap.put(dirName, fileNames);\n+            }\n+            final String[] miscNames = checks.list(filter);\n+            checksNamesMap.put(MISC, miscNames);\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest();\n+        try (InputStream input = Files.newInputStream(AVAILABLE_CHECKS_PATH)) {\n+            parser.parse(input, checkHandler);\n+        }\n+        final Map<String, String[]> checksNamesMap = getXdocsMap();\n+        for (List<String> sub : checkHandler.checkNamesList) {\n+            final String moduleName = sub.get(0);\n+            final String checkNameInAttribute = sub.get(1);\n+            final String checkNameInText = sub.get(2);\n+            final String checkNameInconsistentErrorMsg = String.format(Locale.ROOT,\n+                    \"checkName %s in attribute is not consistent with %s in text in %s\",\n+                    checkNameInAttribute, checkNameInText, AVAILABLE_CHECKS_PATH);\n+            assertWithMessage(checkNameInconsistentErrorMsg)\n+                    .that(checkNameInText).matches(checkNameInAttribute);\n+            final String checkNameModuleErrorMsg = String.format(Locale.ROOT,\n+                    \"checkName %s is not in %s module\", checkNameInAttribute, moduleName);\n+            if (checkNameInAttribute.equals(COMMENTS_INDENTATION)\n+                    || checkNameInAttribute.equals(INDENTATION)) {\n+                assertWithMessage(checkNameModuleErrorMsg).that(moduleName).matches(MISC);\n+            }\n+            else if (checkNameInAttribute.equals(SUPPRESS_WARNINGS_HOLDER)) {\n+                assertWithMessage(checkNameModuleErrorMsg).that(moduleName).matches(ANNOTATION);\n+            }\n+            else {\n+                final String[] moduleFileNames = checksNamesMap.get(moduleName);\n+                final String moduleNameErrorMsg = String.format(Locale.ROOT,\n+                        \"module name: %s is not exist in %s\", moduleName, PACKAGE_NAME);\n+                assertWithMessage(moduleNameErrorMsg).that(moduleFileNames).isNotNull();\n+                boolean match = false;\n+                final String checkNameWithSuffix = checkNameInAttribute + SUFFIX_CHECK_JAVA;\n+                for (String filename : moduleFileNames) {\n+                    if (checkNameWithSuffix.equals(filename)) {\n+                        match = true;\n+                        break;\n+                    }\n+                }\n+                assertWithMessage(checkNameModuleErrorMsg).that(match).isTrue();\n+            }\n+        }\n+    }\n+\n+    public static final class CheckTest extends DefaultHandler {\n+\n+        public static final String SPLIT_CHECK_NAME_IN_ATTRIBUTE = \"#\";\n+\n+        public static final String SPLIT_MODULE_NAME_IN_ATTRIBUTE = \"\\\\.\";\n+\n+        public static final String PREFIX_CONFIG = \"config_\";\n+\n+        private static final String NODE_NAME = \"a\";\n+\n+        private List<List<String>> checkNamesList;\n+\n+        private List<String> singleCheckNameList;\n+\n+        private String currentTag;\n+\n+        @Override\n+        public void startDocument() {\n+            checkNamesList = new ArrayList<>();\n+        }\n+\n+        @Override\n+        public void startElement(String uri, String localName, String qName,\n+                                 Attributes attributes) {\n+            if (qName.equals(NODE_NAME)) {\n+                final String[] moduleAndCheckName =\n+                        attributes.getValue(0).split(SPLIT_CHECK_NAME_IN_ATTRIBUTE);\n+                if (moduleAndCheckName[0].startsWith(PREFIX_CONFIG)) {\n+                    singleCheckNameList = new ArrayList<>();\n+                    final String moduleNameWithHtml =\n+                            moduleAndCheckName[0].substring(PREFIX_CONFIG.length());\n+                    final String moduleName =\n+                            moduleNameWithHtml.split(SPLIT_MODULE_NAME_IN_ATTRIBUTE)[0];\n+                    singleCheckNameList.add(moduleName);\n+                    singleCheckNameList.add(moduleAndCheckName[1]);\n+                }\n+            }\n+            currentTag = qName;\n+        }\n+\n+        @Override\n+        public void characters(char[] ch, int start, int length) {\n+            if (currentTag != null && singleCheckNameList != null && currentTag.equals(NODE_NAME)) {\n+                final String currentValue = new String(ch, start, length).trim();\n+                if (!currentValue.isEmpty() && !\"\\n\".equals(currentValue)) {\n+                    singleCheckNameList.add(currentValue);\n+                }\n+                currentTag = null;\n+            }\n+        }\n+\n+        @Override\n+        public void endElement(String uri, String localName, String qName) {\n+            if (singleCheckNameList != null && qName.equals(NODE_NAME)) {\n+                checkNamesList.add(singleCheckNameList);\n+                singleCheckNameList = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d79d13ee38142ad26acac05d52d3cfbdb234743"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg4Mzc3Mw==", "bodyText": "it is not proper, although singleCheckNameList is added to checkNamesList, two references point to the same object, so if clear(), checkNamesList will contain nothing. Same as checkNamesList if it is cleared in endDocument, error will happen in line 94 \"for (List sub : checkHandler.checkNamesList) {\" which is empty", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r415883773", "createdAt": "2020-04-27T14:55:03Z", "author": {"login": "HuGanghui"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    public static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, String[]> getXdocsMap() {\n+        final File checks = new File(PACKAGE_NAME);\n+        final String[] checksSubDirNames = checks.list((rootDir, pathname) -> {\n+            return !pathname.endsWith(SUFFIX_JAVA);\n+        });\n+        final Map<String, String[]> checksNamesMap = new HashMap<>();\n+        if (checksSubDirNames != null) {\n+            final FilenameFilter filter = (rootDir, pathname) -> {\n+                return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+            };\n+            for (String dirName : checksSubDirNames) {\n+                final File dirFile = new File(PACKAGE_NAME + \"/\" + dirName);\n+                final String[] fileNames = dirFile.list(filter);\n+                checksNamesMap.put(dirName, fileNames);\n+            }\n+            final String[] miscNames = checks.list(filter);\n+            checksNamesMap.put(MISC, miscNames);\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest();\n+        try (InputStream input = Files.newInputStream(AVAILABLE_CHECKS_PATH)) {\n+            parser.parse(input, checkHandler);\n+        }\n+        final Map<String, String[]> checksNamesMap = getXdocsMap();\n+        for (List<String> sub : checkHandler.checkNamesList) {\n+            final String moduleName = sub.get(0);\n+            final String checkNameInAttribute = sub.get(1);\n+            final String checkNameInText = sub.get(2);\n+            final String checkNameInconsistentErrorMsg = String.format(Locale.ROOT,\n+                    \"checkName %s in attribute is not consistent with %s in text in %s\",\n+                    checkNameInAttribute, checkNameInText, AVAILABLE_CHECKS_PATH);\n+            assertWithMessage(checkNameInconsistentErrorMsg)\n+                    .that(checkNameInText).matches(checkNameInAttribute);\n+            final String checkNameModuleErrorMsg = String.format(Locale.ROOT,\n+                    \"checkName %s is not in %s module\", checkNameInAttribute, moduleName);\n+            if (checkNameInAttribute.equals(COMMENTS_INDENTATION)\n+                    || checkNameInAttribute.equals(INDENTATION)) {\n+                assertWithMessage(checkNameModuleErrorMsg).that(moduleName).matches(MISC);\n+            }\n+            else if (checkNameInAttribute.equals(SUPPRESS_WARNINGS_HOLDER)) {\n+                assertWithMessage(checkNameModuleErrorMsg).that(moduleName).matches(ANNOTATION);\n+            }\n+            else {\n+                final String[] moduleFileNames = checksNamesMap.get(moduleName);\n+                final String moduleNameErrorMsg = String.format(Locale.ROOT,\n+                        \"module name: %s is not exist in %s\", moduleName, PACKAGE_NAME);\n+                assertWithMessage(moduleNameErrorMsg).that(moduleFileNames).isNotNull();\n+                boolean match = false;\n+                final String checkNameWithSuffix = checkNameInAttribute + SUFFIX_CHECK_JAVA;\n+                for (String filename : moduleFileNames) {\n+                    if (checkNameWithSuffix.equals(filename)) {\n+                        match = true;\n+                        break;\n+                    }\n+                }\n+                assertWithMessage(checkNameModuleErrorMsg).that(match).isTrue();\n+            }\n+        }\n+    }\n+\n+    public static final class CheckTest extends DefaultHandler {\n+\n+        public static final String SPLIT_CHECK_NAME_IN_ATTRIBUTE = \"#\";\n+\n+        public static final String SPLIT_MODULE_NAME_IN_ATTRIBUTE = \"\\\\.\";\n+\n+        public static final String PREFIX_CONFIG = \"config_\";\n+\n+        private static final String NODE_NAME = \"a\";\n+\n+        private List<List<String>> checkNamesList;\n+\n+        private List<String> singleCheckNameList;\n+\n+        private String currentTag;\n+\n+        @Override\n+        public void startDocument() {\n+            checkNamesList = new ArrayList<>();\n+        }\n+\n+        @Override\n+        public void startElement(String uri, String localName, String qName,\n+                                 Attributes attributes) {\n+            if (qName.equals(NODE_NAME)) {\n+                final String[] moduleAndCheckName =\n+                        attributes.getValue(0).split(SPLIT_CHECK_NAME_IN_ATTRIBUTE);\n+                if (moduleAndCheckName[0].startsWith(PREFIX_CONFIG)) {\n+                    singleCheckNameList = new ArrayList<>();\n+                    final String moduleNameWithHtml =\n+                            moduleAndCheckName[0].substring(PREFIX_CONFIG.length());\n+                    final String moduleName =\n+                            moduleNameWithHtml.split(SPLIT_MODULE_NAME_IN_ATTRIBUTE)[0];\n+                    singleCheckNameList.add(moduleName);\n+                    singleCheckNameList.add(moduleAndCheckName[1]);\n+                }\n+            }\n+            currentTag = qName;\n+        }\n+\n+        @Override\n+        public void characters(char[] ch, int start, int length) {\n+            if (currentTag != null && singleCheckNameList != null && currentTag.equals(NODE_NAME)) {\n+                final String currentValue = new String(ch, start, length).trim();\n+                if (!currentValue.isEmpty() && !\"\\n\".equals(currentValue)) {\n+                    singleCheckNameList.add(currentValue);\n+                }\n+                currentTag = null;\n+            }\n+        }\n+\n+        @Override\n+        public void endElement(String uri, String localName, String qName) {\n+            if (singleCheckNameList != null && qName.equals(NODE_NAME)) {\n+                checkNamesList.add(singleCheckNameList);\n+                singleCheckNameList = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY2ODE0OQ=="}, "originalCommit": {"oid": "8d79d13ee38142ad26acac05d52d3cfbdb234743"}, "originalPosition": 185}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NTY4NzQxOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwOTo0Nzo0N1rOGMac_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNDo1NTowOVrOGMniWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY2OTUwMQ==", "bodyText": "checkName -> Check with name\nall %s -> '%s'\nwith %s -> with check name\ntext in %s -> text in file '%s'", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r415669501", "createdAt": "2020-04-27T09:47:47Z", "author": {"login": "strkkk"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    public static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, String[]> getXdocsMap() {\n+        final File checks = new File(PACKAGE_NAME);\n+        final String[] checksSubDirNames = checks.list((rootDir, pathname) -> {\n+            return !pathname.endsWith(SUFFIX_JAVA);\n+        });\n+        final Map<String, String[]> checksNamesMap = new HashMap<>();\n+        if (checksSubDirNames != null) {\n+            final FilenameFilter filter = (rootDir, pathname) -> {\n+                return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+            };\n+            for (String dirName : checksSubDirNames) {\n+                final File dirFile = new File(PACKAGE_NAME + \"/\" + dirName);\n+                final String[] fileNames = dirFile.list(filter);\n+                checksNamesMap.put(dirName, fileNames);\n+            }\n+            final String[] miscNames = checks.list(filter);\n+            checksNamesMap.put(MISC, miscNames);\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest();\n+        try (InputStream input = Files.newInputStream(AVAILABLE_CHECKS_PATH)) {\n+            parser.parse(input, checkHandler);\n+        }\n+        final Map<String, String[]> checksNamesMap = getXdocsMap();\n+        for (List<String> sub : checkHandler.checkNamesList) {\n+            final String moduleName = sub.get(0);\n+            final String checkNameInAttribute = sub.get(1);\n+            final String checkNameInText = sub.get(2);\n+            final String checkNameInconsistentErrorMsg = String.format(Locale.ROOT,\n+                    \"checkName %s in attribute is not consistent with %s in text in %s\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d79d13ee38142ad26acac05d52d3cfbdb234743"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg4Mzg2NQ==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r415883865", "createdAt": "2020-04-27T14:55:09Z", "author": {"login": "HuGanghui"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    public static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, String[]> getXdocsMap() {\n+        final File checks = new File(PACKAGE_NAME);\n+        final String[] checksSubDirNames = checks.list((rootDir, pathname) -> {\n+            return !pathname.endsWith(SUFFIX_JAVA);\n+        });\n+        final Map<String, String[]> checksNamesMap = new HashMap<>();\n+        if (checksSubDirNames != null) {\n+            final FilenameFilter filter = (rootDir, pathname) -> {\n+                return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+            };\n+            for (String dirName : checksSubDirNames) {\n+                final File dirFile = new File(PACKAGE_NAME + \"/\" + dirName);\n+                final String[] fileNames = dirFile.list(filter);\n+                checksNamesMap.put(dirName, fileNames);\n+            }\n+            final String[] miscNames = checks.list(filter);\n+            checksNamesMap.put(MISC, miscNames);\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest();\n+        try (InputStream input = Files.newInputStream(AVAILABLE_CHECKS_PATH)) {\n+            parser.parse(input, checkHandler);\n+        }\n+        final Map<String, String[]> checksNamesMap = getXdocsMap();\n+        for (List<String> sub : checkHandler.checkNamesList) {\n+            final String moduleName = sub.get(0);\n+            final String checkNameInAttribute = sub.get(1);\n+            final String checkNameInText = sub.get(2);\n+            final String checkNameInconsistentErrorMsg = String.format(Locale.ROOT,\n+                    \"checkName %s in attribute is not consistent with %s in text in %s\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY2OTUwMQ=="}, "originalCommit": {"oid": "8d79d13ee38142ad26acac05d52d3cfbdb234743"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NTY4Nzk5OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwOTo0Nzo1NlrOGMadXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNDo0NzoxNVrOGNX0Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY2OTU5Nw==", "bodyText": "same here", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r415669597", "createdAt": "2020-04-27T09:47:56Z", "author": {"login": "strkkk"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    public static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, String[]> getXdocsMap() {\n+        final File checks = new File(PACKAGE_NAME);\n+        final String[] checksSubDirNames = checks.list((rootDir, pathname) -> {\n+            return !pathname.endsWith(SUFFIX_JAVA);\n+        });\n+        final Map<String, String[]> checksNamesMap = new HashMap<>();\n+        if (checksSubDirNames != null) {\n+            final FilenameFilter filter = (rootDir, pathname) -> {\n+                return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+            };\n+            for (String dirName : checksSubDirNames) {\n+                final File dirFile = new File(PACKAGE_NAME + \"/\" + dirName);\n+                final String[] fileNames = dirFile.list(filter);\n+                checksNamesMap.put(dirName, fileNames);\n+            }\n+            final String[] miscNames = checks.list(filter);\n+            checksNamesMap.put(MISC, miscNames);\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest();\n+        try (InputStream input = Files.newInputStream(AVAILABLE_CHECKS_PATH)) {\n+            parser.parse(input, checkHandler);\n+        }\n+        final Map<String, String[]> checksNamesMap = getXdocsMap();\n+        for (List<String> sub : checkHandler.checkNamesList) {\n+            final String moduleName = sub.get(0);\n+            final String checkNameInAttribute = sub.get(1);\n+            final String checkNameInText = sub.get(2);\n+            final String checkNameInconsistentErrorMsg = String.format(Locale.ROOT,\n+                    \"checkName %s in attribute is not consistent with %s in text in %s\",\n+                    checkNameInAttribute, checkNameInText, AVAILABLE_CHECKS_PATH);\n+            assertWithMessage(checkNameInconsistentErrorMsg)\n+                    .that(checkNameInText).matches(checkNameInAttribute);\n+            final String checkNameModuleErrorMsg = String.format(Locale.ROOT,\n+                    \"checkName %s is not in %s module\", checkNameInAttribute, moduleName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d79d13ee38142ad26acac05d52d3cfbdb234743"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg4MzkyNA==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r415883924", "createdAt": "2020-04-27T14:55:13Z", "author": {"login": "HuGanghui"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    public static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, String[]> getXdocsMap() {\n+        final File checks = new File(PACKAGE_NAME);\n+        final String[] checksSubDirNames = checks.list((rootDir, pathname) -> {\n+            return !pathname.endsWith(SUFFIX_JAVA);\n+        });\n+        final Map<String, String[]> checksNamesMap = new HashMap<>();\n+        if (checksSubDirNames != null) {\n+            final FilenameFilter filter = (rootDir, pathname) -> {\n+                return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+            };\n+            for (String dirName : checksSubDirNames) {\n+                final File dirFile = new File(PACKAGE_NAME + \"/\" + dirName);\n+                final String[] fileNames = dirFile.list(filter);\n+                checksNamesMap.put(dirName, fileNames);\n+            }\n+            final String[] miscNames = checks.list(filter);\n+            checksNamesMap.put(MISC, miscNames);\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest();\n+        try (InputStream input = Files.newInputStream(AVAILABLE_CHECKS_PATH)) {\n+            parser.parse(input, checkHandler);\n+        }\n+        final Map<String, String[]> checksNamesMap = getXdocsMap();\n+        for (List<String> sub : checkHandler.checkNamesList) {\n+            final String moduleName = sub.get(0);\n+            final String checkNameInAttribute = sub.get(1);\n+            final String checkNameInText = sub.get(2);\n+            final String checkNameInconsistentErrorMsg = String.format(Locale.ROOT,\n+                    \"checkName %s in attribute is not consistent with %s in text in %s\",\n+                    checkNameInAttribute, checkNameInText, AVAILABLE_CHECKS_PATH);\n+            assertWithMessage(checkNameInconsistentErrorMsg)\n+                    .that(checkNameInText).matches(checkNameInAttribute);\n+            final String checkNameModuleErrorMsg = String.format(Locale.ROOT,\n+                    \"checkName %s is not in %s module\", checkNameInAttribute, moduleName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY2OTU5Nw=="}, "originalCommit": {"oid": "8d79d13ee38142ad26acac05d52d3cfbdb234743"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjUyMjg0Nw==", "bodyText": "no, it is not done :)", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r416522847", "createdAt": "2020-04-28T11:00:24Z", "author": {"login": "strkkk"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    public static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, String[]> getXdocsMap() {\n+        final File checks = new File(PACKAGE_NAME);\n+        final String[] checksSubDirNames = checks.list((rootDir, pathname) -> {\n+            return !pathname.endsWith(SUFFIX_JAVA);\n+        });\n+        final Map<String, String[]> checksNamesMap = new HashMap<>();\n+        if (checksSubDirNames != null) {\n+            final FilenameFilter filter = (rootDir, pathname) -> {\n+                return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+            };\n+            for (String dirName : checksSubDirNames) {\n+                final File dirFile = new File(PACKAGE_NAME + \"/\" + dirName);\n+                final String[] fileNames = dirFile.list(filter);\n+                checksNamesMap.put(dirName, fileNames);\n+            }\n+            final String[] miscNames = checks.list(filter);\n+            checksNamesMap.put(MISC, miscNames);\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest();\n+        try (InputStream input = Files.newInputStream(AVAILABLE_CHECKS_PATH)) {\n+            parser.parse(input, checkHandler);\n+        }\n+        final Map<String, String[]> checksNamesMap = getXdocsMap();\n+        for (List<String> sub : checkHandler.checkNamesList) {\n+            final String moduleName = sub.get(0);\n+            final String checkNameInAttribute = sub.get(1);\n+            final String checkNameInText = sub.get(2);\n+            final String checkNameInconsistentErrorMsg = String.format(Locale.ROOT,\n+                    \"checkName %s in attribute is not consistent with %s in text in %s\",\n+                    checkNameInAttribute, checkNameInText, AVAILABLE_CHECKS_PATH);\n+            assertWithMessage(checkNameInconsistentErrorMsg)\n+                    .that(checkNameInText).matches(checkNameInAttribute);\n+            final String checkNameModuleErrorMsg = String.format(Locale.ROOT,\n+                    \"checkName %s is not in %s module\", checkNameInAttribute, moduleName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY2OTU5Nw=="}, "originalCommit": {"oid": "8d79d13ee38142ad26acac05d52d3cfbdb234743"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjY3NDg1OQ==", "bodyText": "done, sorry I missed it.", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r416674859", "createdAt": "2020-04-28T14:47:15Z", "author": {"login": "HuGanghui"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    public static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, String[]> getXdocsMap() {\n+        final File checks = new File(PACKAGE_NAME);\n+        final String[] checksSubDirNames = checks.list((rootDir, pathname) -> {\n+            return !pathname.endsWith(SUFFIX_JAVA);\n+        });\n+        final Map<String, String[]> checksNamesMap = new HashMap<>();\n+        if (checksSubDirNames != null) {\n+            final FilenameFilter filter = (rootDir, pathname) -> {\n+                return pathname.endsWith(SUFFIX_CHECK_JAVA);\n+            };\n+            for (String dirName : checksSubDirNames) {\n+                final File dirFile = new File(PACKAGE_NAME + \"/\" + dirName);\n+                final String[] fileNames = dirFile.list(filter);\n+                checksNamesMap.put(dirName, fileNames);\n+            }\n+            final String[] miscNames = checks.list(filter);\n+            checksNamesMap.put(MISC, miscNames);\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest();\n+        try (InputStream input = Files.newInputStream(AVAILABLE_CHECKS_PATH)) {\n+            parser.parse(input, checkHandler);\n+        }\n+        final Map<String, String[]> checksNamesMap = getXdocsMap();\n+        for (List<String> sub : checkHandler.checkNamesList) {\n+            final String moduleName = sub.get(0);\n+            final String checkNameInAttribute = sub.get(1);\n+            final String checkNameInText = sub.get(2);\n+            final String checkNameInconsistentErrorMsg = String.format(Locale.ROOT,\n+                    \"checkName %s in attribute is not consistent with %s in text in %s\",\n+                    checkNameInAttribute, checkNameInText, AVAILABLE_CHECKS_PATH);\n+            assertWithMessage(checkNameInconsistentErrorMsg)\n+                    .that(checkNameInText).matches(checkNameInAttribute);\n+            final String checkNameModuleErrorMsg = String.format(Locale.ROOT,\n+                    \"checkName %s is not in %s module\", checkNameInAttribute, moduleName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY2OTU5Nw=="}, "originalCommit": {"oid": "8d79d13ee38142ad26acac05d52d3cfbdb234743"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwODAxMjY0OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwMjozMjowMVrOGPn9AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwOTozMDo0MVrOGS50tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAzNjQxNg==", "bodyText": "I assume this is getting the list of checks in checkstyle and their packages. Why don't you just use CheckUtil.getCheckstyleChecks ?", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r419036416", "createdAt": "2020-05-03T02:32:01Z", "author": {"login": "rnveach"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,187 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    public static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, String[]> getXdocsMap() {\n+        final File checks = new File(PACKAGE_NAME);\n+        final String[] checksSubDirNames = checks.list((rootDir, pathname) -> {\n+            return !pathname.endsWith(SUFFIX_JAVA);\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2f70bccb0b2bfd9bf04c5a446e41ce39fa0b65a"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEwNTU5Mg==", "bodyText": "becase 1. CheckUtil.getCheckstyleChecks only return checks that are TreeWalkerCheck, but checks.xml contains all checks, such as HeaderCheck, LineLengthCheck and so on 2. and CheckUtil.getCheckstyleChecks return a Set<Class<?>>, which is not classified according to packages so we also need to the similar work to classify it.", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r419105592", "createdAt": "2020-05-03T13:42:11Z", "author": {"login": "HuGanghui"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,187 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    public static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, String[]> getXdocsMap() {\n+        final File checks = new File(PACKAGE_NAME);\n+        final String[] checksSubDirNames = checks.list((rootDir, pathname) -> {\n+            return !pathname.endsWith(SUFFIX_JAVA);\n+        });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAzNjQxNg=="}, "originalCommit": {"oid": "b2f70bccb0b2bfd9bf04c5a446e41ce39fa0b65a"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTExMTYyOQ==", "bodyText": "There is CheckUtil.getCheckstyleModules which will return everything. You can use ModuleReflectionUtil to trim down to the specifics you need.\nSince you get the class, you can obtain the package name from that and build using a Map and list.\n\nBy scanning files you are going to get more than final classes, you could pick up abstract classes like AbstractSuperCheck and any misc files we have to add.", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r419111629", "createdAt": "2020-05-03T14:30:24Z", "author": {"login": "rnveach"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,187 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    public static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, String[]> getXdocsMap() {\n+        final File checks = new File(PACKAGE_NAME);\n+        final String[] checksSubDirNames = checks.list((rootDir, pathname) -> {\n+            return !pathname.endsWith(SUFFIX_JAVA);\n+        });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAzNjQxNg=="}, "originalCommit": {"oid": "b2f70bccb0b2bfd9bf04c5a446e41ce39fa0b65a"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ3NDkzMw==", "bodyText": "ok, done~", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r422474933", "createdAt": "2020-05-09T09:30:41Z", "author": {"login": "HuGanghui"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,187 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+public class XdocsUrlTest {\n+\n+    public static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    public static final String SUFFIX_JAVA = \".java\";\n+\n+    public static final String SUFFIX_CHECK_JAVA = \"Check.java\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    public static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, String[]> getXdocsMap() {\n+        final File checks = new File(PACKAGE_NAME);\n+        final String[] checksSubDirNames = checks.list((rootDir, pathname) -> {\n+            return !pathname.endsWith(SUFFIX_JAVA);\n+        });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAzNjQxNg=="}, "originalCommit": {"oid": "b2f70bccb0b2bfd9bf04c5a446e41ce39fa0b65a"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjQzODUyOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMjo0ODoxOVrOGTwC_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNDoxMjozOFrOGT1ZNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2MzMyNQ==", "bodyText": "As I mentioned, you should use ModuleReflectionUtil to find each type of module.\nYou are just looking for isCheckstyleTreeWalkerCheck and isFileSetModule.", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r423363325", "createdAt": "2020-05-11T22:48:19Z", "author": {"login": "rnveach"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,200 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+import com.puppycrawl.tools.checkstyle.internal.utils.CheckUtil;\n+\n+public class XdocsUrlTest {\n+\n+    public static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    public static final String SUFFIX_CHECK = \"Check\";\n+\n+    public static final String CHECKS = \"checks\";\n+\n+    public static final String CHECKSTYLE = \"checkstyle\";\n+\n+    public static final String FILTERS = \"filters\";\n+\n+    public static final String FILE_FILTERS = \"filefilters\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    public static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, ArrayList<String>> getXdocsMap() throws IOException {\n+        final Map<String, ArrayList<String>> checksNamesMap = new HashMap<>();\n+        final Set<Class<?>> checkSet = CheckUtil.getCheckstyleModules();\n+        for (Class<?> check : checkSet) {\n+            final String[] splitArray = check.getName().split(\"\\\\.\");\n+            String subPackage = splitArray[splitArray.length - 2];\n+            if (!subPackage.equals(CHECKSTYLE)\n+                    && !subPackage.equals(FILTERS)\n+                    && !subPackage.equals(FILE_FILTERS)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a9e266533baa4331e084634f278bd4abc95a0e2"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ1MDkzNQ==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r423450935", "createdAt": "2020-05-12T04:12:38Z", "author": {"login": "HuGanghui"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,200 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+import com.puppycrawl.tools.checkstyle.internal.utils.CheckUtil;\n+\n+public class XdocsUrlTest {\n+\n+    public static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    public static final String SUFFIX_CHECK = \"Check\";\n+\n+    public static final String CHECKS = \"checks\";\n+\n+    public static final String CHECKSTYLE = \"checkstyle\";\n+\n+    public static final String FILTERS = \"filters\";\n+\n+    public static final String FILE_FILTERS = \"filefilters\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    public static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, ArrayList<String>> getXdocsMap() throws IOException {\n+        final Map<String, ArrayList<String>> checksNamesMap = new HashMap<>();\n+        final Set<Class<?>> checkSet = CheckUtil.getCheckstyleModules();\n+        for (Class<?> check : checkSet) {\n+            final String[] splitArray = check.getName().split(\"\\\\.\");\n+            String subPackage = splitArray[splitArray.length - 2];\n+            if (!subPackage.equals(CHECKSTYLE)\n+                    && !subPackage.equals(FILTERS)\n+                    && !subPackage.equals(FILE_FILTERS)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2MzMyNQ=="}, "originalCommit": {"oid": "9a9e266533baa4331e084634f278bd4abc95a0e2"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjQ0NTEyOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMjo1MTo0MFrOGTwHHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNDoxMjo0M1rOGT1ZTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2NDM4Mw==", "bodyText": "Why are all these fields public? If they aren't used outside this class, they should be private.", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r423364383", "createdAt": "2020-05-11T22:51:40Z", "author": {"login": "rnveach"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,200 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+import com.puppycrawl.tools.checkstyle.internal.utils.CheckUtil;\n+\n+public class XdocsUrlTest {\n+\n+    public static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    public static final String SUFFIX_CHECK = \"Check\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a9e266533baa4331e084634f278bd4abc95a0e2"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ1MDk1OQ==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r423450959", "createdAt": "2020-05-12T04:12:43Z", "author": {"login": "HuGanghui"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,200 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+import com.puppycrawl.tools.checkstyle.internal.utils.CheckUtil;\n+\n+public class XdocsUrlTest {\n+\n+    public static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    public static final String SUFFIX_CHECK = \"Check\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2NDM4Mw=="}, "originalCommit": {"oid": "9a9e266533baa4331e084634f278bd4abc95a0e2"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjQ0NzE3OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMjo1Mjo0MlrOGTwIZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNTowMDozN1rOGT2Hyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2NDcxMQ==", "bodyText": "You could just do check.getPackage()", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r423364711", "createdAt": "2020-05-11T22:52:42Z", "author": {"login": "rnveach"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,200 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+import com.puppycrawl.tools.checkstyle.internal.utils.CheckUtil;\n+\n+public class XdocsUrlTest {\n+\n+    public static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    public static final String SUFFIX_CHECK = \"Check\";\n+\n+    public static final String CHECKS = \"checks\";\n+\n+    public static final String CHECKSTYLE = \"checkstyle\";\n+\n+    public static final String FILTERS = \"filters\";\n+\n+    public static final String FILE_FILTERS = \"filefilters\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    public static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, ArrayList<String>> getXdocsMap() throws IOException {\n+        final Map<String, ArrayList<String>> checksNamesMap = new HashMap<>();\n+        final Set<Class<?>> checkSet = CheckUtil.getCheckstyleModules();\n+        for (Class<?> check : checkSet) {\n+            final String[] splitArray = check.getName().split(\"\\\\.\");\n+            String subPackage = splitArray[splitArray.length - 2];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a9e266533baa4331e084634f278bd4abc95a0e2"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ2Mjg1OA==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r423462858", "createdAt": "2020-05-12T05:00:37Z", "author": {"login": "HuGanghui"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,200 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+import com.puppycrawl.tools.checkstyle.internal.utils.CheckUtil;\n+\n+public class XdocsUrlTest {\n+\n+    public static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    public static final String SUFFIX_CHECK = \"Check\";\n+\n+    public static final String CHECKS = \"checks\";\n+\n+    public static final String CHECKSTYLE = \"checkstyle\";\n+\n+    public static final String FILTERS = \"filters\";\n+\n+    public static final String FILE_FILTERS = \"filefilters\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    public static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, ArrayList<String>> getXdocsMap() throws IOException {\n+        final Map<String, ArrayList<String>> checksNamesMap = new HashMap<>();\n+        final Set<Class<?>> checkSet = CheckUtil.getCheckstyleModules();\n+        for (Class<?> check : checkSet) {\n+            final String[] splitArray = check.getName().split(\"\\\\.\");\n+            String subPackage = splitArray[splitArray.length - 2];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2NDcxMQ=="}, "originalCommit": {"oid": "9a9e266533baa4331e084634f278bd4abc95a0e2"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjQ0Nzg4OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMjo1MzowMVrOGTwI2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNDoxMzozMFrOGT1aBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2NDgyNQ==", "bodyText": "You could just do check.getSimpleName()", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r423364825", "createdAt": "2020-05-11T22:53:01Z", "author": {"login": "rnveach"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,200 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+import com.puppycrawl.tools.checkstyle.internal.utils.CheckUtil;\n+\n+public class XdocsUrlTest {\n+\n+    public static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    public static final String SUFFIX_CHECK = \"Check\";\n+\n+    public static final String CHECKS = \"checks\";\n+\n+    public static final String CHECKSTYLE = \"checkstyle\";\n+\n+    public static final String FILTERS = \"filters\";\n+\n+    public static final String FILE_FILTERS = \"filefilters\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    public static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, ArrayList<String>> getXdocsMap() throws IOException {\n+        final Map<String, ArrayList<String>> checksNamesMap = new HashMap<>();\n+        final Set<Class<?>> checkSet = CheckUtil.getCheckstyleModules();\n+        for (Class<?> check : checkSet) {\n+            final String[] splitArray = check.getName().split(\"\\\\.\");\n+            String subPackage = splitArray[splitArray.length - 2];\n+            if (!subPackage.equals(CHECKSTYLE)\n+                    && !subPackage.equals(FILTERS)\n+                    && !subPackage.equals(FILE_FILTERS)) {\n+                if (subPackage.equals(CHECKS)) {\n+                    subPackage = MISC;\n+                }\n+                final String checkName = splitArray[splitArray.length - 1];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a9e266533baa4331e084634f278bd4abc95a0e2"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ1MTE0Mw==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r423451143", "createdAt": "2020-05-12T04:13:30Z", "author": {"login": "HuGanghui"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,200 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+import com.puppycrawl.tools.checkstyle.internal.utils.CheckUtil;\n+\n+public class XdocsUrlTest {\n+\n+    public static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    public static final String SUFFIX_CHECK = \"Check\";\n+\n+    public static final String CHECKS = \"checks\";\n+\n+    public static final String CHECKSTYLE = \"checkstyle\";\n+\n+    public static final String FILTERS = \"filters\";\n+\n+    public static final String FILE_FILTERS = \"filefilters\";\n+\n+    public static final String MISC = \"misc\";\n+\n+    public static final String ANNOTATION = \"annotation\";\n+\n+    public static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    public static final String INDENTATION = \"Indentation\";\n+\n+    public static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    public static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, ArrayList<String>> getXdocsMap() throws IOException {\n+        final Map<String, ArrayList<String>> checksNamesMap = new HashMap<>();\n+        final Set<Class<?>> checkSet = CheckUtil.getCheckstyleModules();\n+        for (Class<?> check : checkSet) {\n+            final String[] splitArray = check.getName().split(\"\\\\.\");\n+            String subPackage = splitArray[splitArray.length - 2];\n+            if (!subPackage.equals(CHECKSTYLE)\n+                    && !subPackage.equals(FILTERS)\n+                    && !subPackage.equals(FILE_FILTERS)) {\n+                if (subPackage.equals(CHECKS)) {\n+                    subPackage = MISC;\n+                }\n+                final String checkName = splitArray[splitArray.length - 1];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2NDgyNQ=="}, "originalCommit": {"oid": "9a9e266533baa4331e084634f278bd4abc95a0e2"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDA0NzY2OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxOToyNDozOFrOGWcJ4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMzoxNzowOFrOGXf7aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE4MzEzOQ==", "bodyText": "Can't we or the filter stream to combine the 2 checks, isCheckstyleTreeWalkerCheck and isFileSetModule? This way we only need to parse it once and only have 1 set.", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r426183139", "createdAt": "2020-05-16T19:24:38Z", "author": {"login": "rnveach"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+import com.puppycrawl.tools.checkstyle.internal.utils.CheckUtil;\n+import com.puppycrawl.tools.checkstyle.utils.ModuleReflectionUtil;\n+\n+public class XdocsUrlTest {\n+\n+    private static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    private static final String TREE_WORKER = \"TreeWalker\";\n+\n+    private static final String SUFFIX_CHECK = \"Check\";\n+\n+    private static final String CHECKS = \"checks\";\n+\n+    private static final String MISC = \"misc\";\n+\n+    private static final String ANNOTATION = \"annotation\";\n+\n+    private static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    private static final String INDENTATION = \"Indentation\";\n+\n+    private static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    private static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, ArrayList<String>> getXdocsMap() throws IOException {\n+        final Map<String, ArrayList<String>> checksNamesMap = new HashMap<>();\n+        final Set<Class<?>> checkSet = CheckUtil.getCheckstyleModules();\n+        final Set<Class<?>> treeWalkerCheckSet = checkSet.stream()\n+                .filter(ModuleReflectionUtil::isCheckstyleTreeWalkerCheck)\n+                .collect(Collectors.toSet());\n+        final Set<Class<?>> fileSetCheckSet = checkSet.stream()\n+                .filter(ModuleReflectionUtil::isFileSetModule)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da9402c92f63e6edaa09d8b40891103ce723444a"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI5MzU0NQ==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r427293545", "createdAt": "2020-05-19T13:17:08Z", "author": {"login": "HuGanghui"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+import com.puppycrawl.tools.checkstyle.internal.utils.CheckUtil;\n+import com.puppycrawl.tools.checkstyle.utils.ModuleReflectionUtil;\n+\n+public class XdocsUrlTest {\n+\n+    private static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    private static final String TREE_WORKER = \"TreeWalker\";\n+\n+    private static final String SUFFIX_CHECK = \"Check\";\n+\n+    private static final String CHECKS = \"checks\";\n+\n+    private static final String MISC = \"misc\";\n+\n+    private static final String ANNOTATION = \"annotation\";\n+\n+    private static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    private static final String INDENTATION = \"Indentation\";\n+\n+    private static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    private static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, ArrayList<String>> getXdocsMap() throws IOException {\n+        final Map<String, ArrayList<String>> checksNamesMap = new HashMap<>();\n+        final Set<Class<?>> checkSet = CheckUtil.getCheckstyleModules();\n+        final Set<Class<?>> treeWalkerCheckSet = checkSet.stream()\n+                .filter(ModuleReflectionUtil::isCheckstyleTreeWalkerCheck)\n+                .collect(Collectors.toSet());\n+        final Set<Class<?>> fileSetCheckSet = checkSet.stream()\n+                .filter(ModuleReflectionUtil::isFileSetModule)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE4MzEzOQ=="}, "originalCommit": {"oid": "da9402c92f63e6edaa09d8b40891103ce723444a"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDA0OTEzOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxOToyNjoyOFrOGWcKlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMzoxNzoxNFrOGXf7oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE4MzMxOA==", "bodyText": "is not => does not", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r426183318", "createdAt": "2020-05-16T19:26:28Z", "author": {"login": "rnveach"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+import com.puppycrawl.tools.checkstyle.internal.utils.CheckUtil;\n+import com.puppycrawl.tools.checkstyle.utils.ModuleReflectionUtil;\n+\n+public class XdocsUrlTest {\n+\n+    private static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    private static final String TREE_WORKER = \"TreeWalker\";\n+\n+    private static final String SUFFIX_CHECK = \"Check\";\n+\n+    private static final String CHECKS = \"checks\";\n+\n+    private static final String MISC = \"misc\";\n+\n+    private static final String ANNOTATION = \"annotation\";\n+\n+    private static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    private static final String INDENTATION = \"Indentation\";\n+\n+    private static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    private static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, ArrayList<String>> getXdocsMap() throws IOException {\n+        final Map<String, ArrayList<String>> checksNamesMap = new HashMap<>();\n+        final Set<Class<?>> checkSet = CheckUtil.getCheckstyleModules();\n+        final Set<Class<?>> treeWalkerCheckSet = checkSet.stream()\n+                .filter(ModuleReflectionUtil::isCheckstyleTreeWalkerCheck)\n+                .collect(Collectors.toSet());\n+        final Set<Class<?>> fileSetCheckSet = checkSet.stream()\n+                .filter(ModuleReflectionUtil::isFileSetModule)\n+                .collect(Collectors.toSet());\n+        checkSet.clear();\n+        checkSet.addAll(treeWalkerCheckSet);\n+        checkSet.addAll(fileSetCheckSet);\n+        for (Class<?> check : checkSet) {\n+            final String checkName = check.getSimpleName();\n+            if (!checkName.equals(TREE_WORKER)) {\n+                String packageName = check.getPackage().getName();\n+                packageName = packageName.substring(packageName.lastIndexOf('.') + 1);\n+                if (packageName.equals(CHECKS)) {\n+                    packageName = MISC;\n+                }\n+                if (checksNamesMap.get(packageName) == null) {\n+                    final ArrayList<String> arrayList = new ArrayList<>();\n+                    arrayList.add(checkName);\n+                    checksNamesMap.put(packageName, arrayList);\n+                }\n+                else {\n+                    checksNamesMap.get(packageName).add(checkName);\n+                }\n+            }\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest();\n+        try (InputStream input = Files.newInputStream(AVAILABLE_CHECKS_PATH)) {\n+            parser.parse(input, checkHandler);\n+        }\n+        final Map<String, ArrayList<String>> checksNamesMap = getXdocsMap();\n+        for (List<String> sub : checkHandler.checkNamesList) {\n+            final String moduleName = sub.get(0);\n+            final String checkNameInAttribute = sub.get(1);\n+            final String checkNameInText = sub.get(2);\n+            final String checkNameInconsistentErrorMsg = String.format(Locale.ROOT,\n+                    \"Check with name '%s' in attribute \"\n+                            + \"is not consistent with check name in text in file '%s'\",\n+                    checkNameInAttribute, AVAILABLE_CHECKS_PATH);\n+            assertWithMessage(checkNameInconsistentErrorMsg)\n+                    .that(checkNameInText).matches(checkNameInAttribute);\n+            final String checkNameModuleErrorMsg = String.format(Locale.ROOT,\n+                    \"Check with name '%s' is not in '%s' module\",\n+                    checkNameInAttribute, moduleName);\n+            if (checkNameInAttribute.equals(COMMENTS_INDENTATION)\n+                    || checkNameInAttribute.equals(INDENTATION)) {\n+                assertWithMessage(checkNameModuleErrorMsg).that(moduleName).matches(MISC);\n+            }\n+            else if (checkNameInAttribute.equals(SUPPRESS_WARNINGS_HOLDER)) {\n+                assertWithMessage(checkNameModuleErrorMsg).that(moduleName).matches(ANNOTATION);\n+            }\n+            else {\n+                final Iterable<String> moduleFileNames = checksNamesMap.get(moduleName);\n+                final String moduleNameErrorMsg = String.format(Locale.ROOT,\n+                        \"module name: '%s' is not exist in '%s'\", moduleName, PACKAGE_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da9402c92f63e6edaa09d8b40891103ce723444a"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI5MzYwMA==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r427293600", "createdAt": "2020-05-19T13:17:14Z", "author": {"login": "HuGanghui"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+import com.puppycrawl.tools.checkstyle.internal.utils.CheckUtil;\n+import com.puppycrawl.tools.checkstyle.utils.ModuleReflectionUtil;\n+\n+public class XdocsUrlTest {\n+\n+    private static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    private static final String TREE_WORKER = \"TreeWalker\";\n+\n+    private static final String SUFFIX_CHECK = \"Check\";\n+\n+    private static final String CHECKS = \"checks\";\n+\n+    private static final String MISC = \"misc\";\n+\n+    private static final String ANNOTATION = \"annotation\";\n+\n+    private static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    private static final String INDENTATION = \"Indentation\";\n+\n+    private static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    private static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, ArrayList<String>> getXdocsMap() throws IOException {\n+        final Map<String, ArrayList<String>> checksNamesMap = new HashMap<>();\n+        final Set<Class<?>> checkSet = CheckUtil.getCheckstyleModules();\n+        final Set<Class<?>> treeWalkerCheckSet = checkSet.stream()\n+                .filter(ModuleReflectionUtil::isCheckstyleTreeWalkerCheck)\n+                .collect(Collectors.toSet());\n+        final Set<Class<?>> fileSetCheckSet = checkSet.stream()\n+                .filter(ModuleReflectionUtil::isFileSetModule)\n+                .collect(Collectors.toSet());\n+        checkSet.clear();\n+        checkSet.addAll(treeWalkerCheckSet);\n+        checkSet.addAll(fileSetCheckSet);\n+        for (Class<?> check : checkSet) {\n+            final String checkName = check.getSimpleName();\n+            if (!checkName.equals(TREE_WORKER)) {\n+                String packageName = check.getPackage().getName();\n+                packageName = packageName.substring(packageName.lastIndexOf('.') + 1);\n+                if (packageName.equals(CHECKS)) {\n+                    packageName = MISC;\n+                }\n+                if (checksNamesMap.get(packageName) == null) {\n+                    final ArrayList<String> arrayList = new ArrayList<>();\n+                    arrayList.add(checkName);\n+                    checksNamesMap.put(packageName, arrayList);\n+                }\n+                else {\n+                    checksNamesMap.get(packageName).add(checkName);\n+                }\n+            }\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest();\n+        try (InputStream input = Files.newInputStream(AVAILABLE_CHECKS_PATH)) {\n+            parser.parse(input, checkHandler);\n+        }\n+        final Map<String, ArrayList<String>> checksNamesMap = getXdocsMap();\n+        for (List<String> sub : checkHandler.checkNamesList) {\n+            final String moduleName = sub.get(0);\n+            final String checkNameInAttribute = sub.get(1);\n+            final String checkNameInText = sub.get(2);\n+            final String checkNameInconsistentErrorMsg = String.format(Locale.ROOT,\n+                    \"Check with name '%s' in attribute \"\n+                            + \"is not consistent with check name in text in file '%s'\",\n+                    checkNameInAttribute, AVAILABLE_CHECKS_PATH);\n+            assertWithMessage(checkNameInconsistentErrorMsg)\n+                    .that(checkNameInText).matches(checkNameInAttribute);\n+            final String checkNameModuleErrorMsg = String.format(Locale.ROOT,\n+                    \"Check with name '%s' is not in '%s' module\",\n+                    checkNameInAttribute, moduleName);\n+            if (checkNameInAttribute.equals(COMMENTS_INDENTATION)\n+                    || checkNameInAttribute.equals(INDENTATION)) {\n+                assertWithMessage(checkNameModuleErrorMsg).that(moduleName).matches(MISC);\n+            }\n+            else if (checkNameInAttribute.equals(SUPPRESS_WARNINGS_HOLDER)) {\n+                assertWithMessage(checkNameModuleErrorMsg).that(moduleName).matches(ANNOTATION);\n+            }\n+            else {\n+                final Iterable<String> moduleFileNames = checksNamesMap.get(moduleName);\n+                final String moduleNameErrorMsg = String.format(Locale.ROOT,\n+                        \"module name: '%s' is not exist in '%s'\", moduleName, PACKAGE_NAME);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE4MzMxOA=="}, "originalCommit": {"oid": "da9402c92f63e6edaa09d8b40891103ce723444a"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDA1MDI4OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxOToyODozNlrOGWcLIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMzoxNzoxN1rOGXf7yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE4MzQ1OA==", "bodyText": "This field can be made final.", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r426183458", "createdAt": "2020-05-16T19:28:36Z", "author": {"login": "rnveach"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+import com.puppycrawl.tools.checkstyle.internal.utils.CheckUtil;\n+import com.puppycrawl.tools.checkstyle.utils.ModuleReflectionUtil;\n+\n+public class XdocsUrlTest {\n+\n+    private static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    private static final String TREE_WORKER = \"TreeWalker\";\n+\n+    private static final String SUFFIX_CHECK = \"Check\";\n+\n+    private static final String CHECKS = \"checks\";\n+\n+    private static final String MISC = \"misc\";\n+\n+    private static final String ANNOTATION = \"annotation\";\n+\n+    private static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    private static final String INDENTATION = \"Indentation\";\n+\n+    private static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    private static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, ArrayList<String>> getXdocsMap() throws IOException {\n+        final Map<String, ArrayList<String>> checksNamesMap = new HashMap<>();\n+        final Set<Class<?>> checkSet = CheckUtil.getCheckstyleModules();\n+        final Set<Class<?>> treeWalkerCheckSet = checkSet.stream()\n+                .filter(ModuleReflectionUtil::isCheckstyleTreeWalkerCheck)\n+                .collect(Collectors.toSet());\n+        final Set<Class<?>> fileSetCheckSet = checkSet.stream()\n+                .filter(ModuleReflectionUtil::isFileSetModule)\n+                .collect(Collectors.toSet());\n+        checkSet.clear();\n+        checkSet.addAll(treeWalkerCheckSet);\n+        checkSet.addAll(fileSetCheckSet);\n+        for (Class<?> check : checkSet) {\n+            final String checkName = check.getSimpleName();\n+            if (!checkName.equals(TREE_WORKER)) {\n+                String packageName = check.getPackage().getName();\n+                packageName = packageName.substring(packageName.lastIndexOf('.') + 1);\n+                if (packageName.equals(CHECKS)) {\n+                    packageName = MISC;\n+                }\n+                if (checksNamesMap.get(packageName) == null) {\n+                    final ArrayList<String> arrayList = new ArrayList<>();\n+                    arrayList.add(checkName);\n+                    checksNamesMap.put(packageName, arrayList);\n+                }\n+                else {\n+                    checksNamesMap.get(packageName).add(checkName);\n+                }\n+            }\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest();\n+        try (InputStream input = Files.newInputStream(AVAILABLE_CHECKS_PATH)) {\n+            parser.parse(input, checkHandler);\n+        }\n+        final Map<String, ArrayList<String>> checksNamesMap = getXdocsMap();\n+        for (List<String> sub : checkHandler.checkNamesList) {\n+            final String moduleName = sub.get(0);\n+            final String checkNameInAttribute = sub.get(1);\n+            final String checkNameInText = sub.get(2);\n+            final String checkNameInconsistentErrorMsg = String.format(Locale.ROOT,\n+                    \"Check with name '%s' in attribute \"\n+                            + \"is not consistent with check name in text in file '%s'\",\n+                    checkNameInAttribute, AVAILABLE_CHECKS_PATH);\n+            assertWithMessage(checkNameInconsistentErrorMsg)\n+                    .that(checkNameInText).matches(checkNameInAttribute);\n+            final String checkNameModuleErrorMsg = String.format(Locale.ROOT,\n+                    \"Check with name '%s' is not in '%s' module\",\n+                    checkNameInAttribute, moduleName);\n+            if (checkNameInAttribute.equals(COMMENTS_INDENTATION)\n+                    || checkNameInAttribute.equals(INDENTATION)) {\n+                assertWithMessage(checkNameModuleErrorMsg).that(moduleName).matches(MISC);\n+            }\n+            else if (checkNameInAttribute.equals(SUPPRESS_WARNINGS_HOLDER)) {\n+                assertWithMessage(checkNameModuleErrorMsg).that(moduleName).matches(ANNOTATION);\n+            }\n+            else {\n+                final Iterable<String> moduleFileNames = checksNamesMap.get(moduleName);\n+                final String moduleNameErrorMsg = String.format(Locale.ROOT,\n+                        \"module name: '%s' is not exist in '%s'\", moduleName, PACKAGE_NAME);\n+                assertWithMessage(moduleNameErrorMsg).that(moduleFileNames).isNotNull();\n+                boolean match = false;\n+                final String checkNameWithSuffix = checkNameInAttribute + SUFFIX_CHECK;\n+                for (String filename : moduleFileNames) {\n+                    if (checkNameWithSuffix.equals(filename)) {\n+                        match = true;\n+                        break;\n+                    }\n+                }\n+                assertWithMessage(checkNameModuleErrorMsg).that(match).isTrue();\n+            }\n+        }\n+    }\n+\n+    public static final class CheckTest extends DefaultHandler {\n+\n+        private static final String SPLIT_CHECK_NAME_IN_ATTRIBUTE = \"#\";\n+\n+        private static final String PREFIX_CONFIG = \"config_\";\n+\n+        private static final String NODE_NAME = \"a\";\n+\n+        private List<List<String>> checkNamesList;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da9402c92f63e6edaa09d8b40891103ce723444a"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI5MzY0Mw==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r427293643", "createdAt": "2020-05-19T13:17:17Z", "author": {"login": "HuGanghui"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+import com.puppycrawl.tools.checkstyle.internal.utils.CheckUtil;\n+import com.puppycrawl.tools.checkstyle.utils.ModuleReflectionUtil;\n+\n+public class XdocsUrlTest {\n+\n+    private static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    private static final String TREE_WORKER = \"TreeWalker\";\n+\n+    private static final String SUFFIX_CHECK = \"Check\";\n+\n+    private static final String CHECKS = \"checks\";\n+\n+    private static final String MISC = \"misc\";\n+\n+    private static final String ANNOTATION = \"annotation\";\n+\n+    private static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    private static final String INDENTATION = \"Indentation\";\n+\n+    private static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    private static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, ArrayList<String>> getXdocsMap() throws IOException {\n+        final Map<String, ArrayList<String>> checksNamesMap = new HashMap<>();\n+        final Set<Class<?>> checkSet = CheckUtil.getCheckstyleModules();\n+        final Set<Class<?>> treeWalkerCheckSet = checkSet.stream()\n+                .filter(ModuleReflectionUtil::isCheckstyleTreeWalkerCheck)\n+                .collect(Collectors.toSet());\n+        final Set<Class<?>> fileSetCheckSet = checkSet.stream()\n+                .filter(ModuleReflectionUtil::isFileSetModule)\n+                .collect(Collectors.toSet());\n+        checkSet.clear();\n+        checkSet.addAll(treeWalkerCheckSet);\n+        checkSet.addAll(fileSetCheckSet);\n+        for (Class<?> check : checkSet) {\n+            final String checkName = check.getSimpleName();\n+            if (!checkName.equals(TREE_WORKER)) {\n+                String packageName = check.getPackage().getName();\n+                packageName = packageName.substring(packageName.lastIndexOf('.') + 1);\n+                if (packageName.equals(CHECKS)) {\n+                    packageName = MISC;\n+                }\n+                if (checksNamesMap.get(packageName) == null) {\n+                    final ArrayList<String> arrayList = new ArrayList<>();\n+                    arrayList.add(checkName);\n+                    checksNamesMap.put(packageName, arrayList);\n+                }\n+                else {\n+                    checksNamesMap.get(packageName).add(checkName);\n+                }\n+            }\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest();\n+        try (InputStream input = Files.newInputStream(AVAILABLE_CHECKS_PATH)) {\n+            parser.parse(input, checkHandler);\n+        }\n+        final Map<String, ArrayList<String>> checksNamesMap = getXdocsMap();\n+        for (List<String> sub : checkHandler.checkNamesList) {\n+            final String moduleName = sub.get(0);\n+            final String checkNameInAttribute = sub.get(1);\n+            final String checkNameInText = sub.get(2);\n+            final String checkNameInconsistentErrorMsg = String.format(Locale.ROOT,\n+                    \"Check with name '%s' in attribute \"\n+                            + \"is not consistent with check name in text in file '%s'\",\n+                    checkNameInAttribute, AVAILABLE_CHECKS_PATH);\n+            assertWithMessage(checkNameInconsistentErrorMsg)\n+                    .that(checkNameInText).matches(checkNameInAttribute);\n+            final String checkNameModuleErrorMsg = String.format(Locale.ROOT,\n+                    \"Check with name '%s' is not in '%s' module\",\n+                    checkNameInAttribute, moduleName);\n+            if (checkNameInAttribute.equals(COMMENTS_INDENTATION)\n+                    || checkNameInAttribute.equals(INDENTATION)) {\n+                assertWithMessage(checkNameModuleErrorMsg).that(moduleName).matches(MISC);\n+            }\n+            else if (checkNameInAttribute.equals(SUPPRESS_WARNINGS_HOLDER)) {\n+                assertWithMessage(checkNameModuleErrorMsg).that(moduleName).matches(ANNOTATION);\n+            }\n+            else {\n+                final Iterable<String> moduleFileNames = checksNamesMap.get(moduleName);\n+                final String moduleNameErrorMsg = String.format(Locale.ROOT,\n+                        \"module name: '%s' is not exist in '%s'\", moduleName, PACKAGE_NAME);\n+                assertWithMessage(moduleNameErrorMsg).that(moduleFileNames).isNotNull();\n+                boolean match = false;\n+                final String checkNameWithSuffix = checkNameInAttribute + SUFFIX_CHECK;\n+                for (String filename : moduleFileNames) {\n+                    if (checkNameWithSuffix.equals(filename)) {\n+                        match = true;\n+                        break;\n+                    }\n+                }\n+                assertWithMessage(checkNameModuleErrorMsg).that(match).isTrue();\n+            }\n+        }\n+    }\n+\n+    public static final class CheckTest extends DefaultHandler {\n+\n+        private static final String SPLIT_CHECK_NAME_IN_ATTRIBUTE = \"#\";\n+\n+        private static final String PREFIX_CONFIG = \"config_\";\n+\n+        private static final String NODE_NAME = \"a\";\n+\n+        private List<List<String>> checkNamesList;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE4MzQ1OA=="}, "originalCommit": {"oid": "da9402c92f63e6edaa09d8b40891103ce723444a"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDA1MTg0OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxOTozMTozOVrOGWcL9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMzoxNzoyMFrOGXf78Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE4MzY2OQ==", "bodyText": "ArrayList => List\nYou should use the interface over the exact declaration when possible.", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r426183669", "createdAt": "2020-05-16T19:31:39Z", "author": {"login": "rnveach"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+import com.puppycrawl.tools.checkstyle.internal.utils.CheckUtil;\n+import com.puppycrawl.tools.checkstyle.utils.ModuleReflectionUtil;\n+\n+public class XdocsUrlTest {\n+\n+    private static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    private static final String TREE_WORKER = \"TreeWalker\";\n+\n+    private static final String SUFFIX_CHECK = \"Check\";\n+\n+    private static final String CHECKS = \"checks\";\n+\n+    private static final String MISC = \"misc\";\n+\n+    private static final String ANNOTATION = \"annotation\";\n+\n+    private static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    private static final String INDENTATION = \"Indentation\";\n+\n+    private static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    private static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, ArrayList<String>> getXdocsMap() throws IOException {\n+        final Map<String, ArrayList<String>> checksNamesMap = new HashMap<>();\n+        final Set<Class<?>> checkSet = CheckUtil.getCheckstyleModules();\n+        final Set<Class<?>> treeWalkerCheckSet = checkSet.stream()\n+                .filter(ModuleReflectionUtil::isCheckstyleTreeWalkerCheck)\n+                .collect(Collectors.toSet());\n+        final Set<Class<?>> fileSetCheckSet = checkSet.stream()\n+                .filter(ModuleReflectionUtil::isFileSetModule)\n+                .collect(Collectors.toSet());\n+        checkSet.clear();\n+        checkSet.addAll(treeWalkerCheckSet);\n+        checkSet.addAll(fileSetCheckSet);\n+        for (Class<?> check : checkSet) {\n+            final String checkName = check.getSimpleName();\n+            if (!checkName.equals(TREE_WORKER)) {\n+                String packageName = check.getPackage().getName();\n+                packageName = packageName.substring(packageName.lastIndexOf('.') + 1);\n+                if (packageName.equals(CHECKS)) {\n+                    packageName = MISC;\n+                }\n+                if (checksNamesMap.get(packageName) == null) {\n+                    final ArrayList<String> arrayList = new ArrayList<>();\n+                    arrayList.add(checkName);\n+                    checksNamesMap.put(packageName, arrayList);\n+                }\n+                else {\n+                    checksNamesMap.get(packageName).add(checkName);\n+                }\n+            }\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest();\n+        try (InputStream input = Files.newInputStream(AVAILABLE_CHECKS_PATH)) {\n+            parser.parse(input, checkHandler);\n+        }\n+        final Map<String, ArrayList<String>> checksNamesMap = getXdocsMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da9402c92f63e6edaa09d8b40891103ce723444a"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI5MzY4MQ==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r427293681", "createdAt": "2020-05-19T13:17:20Z", "author": {"login": "HuGanghui"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+import com.puppycrawl.tools.checkstyle.internal.utils.CheckUtil;\n+import com.puppycrawl.tools.checkstyle.utils.ModuleReflectionUtil;\n+\n+public class XdocsUrlTest {\n+\n+    private static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    private static final String TREE_WORKER = \"TreeWalker\";\n+\n+    private static final String SUFFIX_CHECK = \"Check\";\n+\n+    private static final String CHECKS = \"checks\";\n+\n+    private static final String MISC = \"misc\";\n+\n+    private static final String ANNOTATION = \"annotation\";\n+\n+    private static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    private static final String INDENTATION = \"Indentation\";\n+\n+    private static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    private static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, ArrayList<String>> getXdocsMap() throws IOException {\n+        final Map<String, ArrayList<String>> checksNamesMap = new HashMap<>();\n+        final Set<Class<?>> checkSet = CheckUtil.getCheckstyleModules();\n+        final Set<Class<?>> treeWalkerCheckSet = checkSet.stream()\n+                .filter(ModuleReflectionUtil::isCheckstyleTreeWalkerCheck)\n+                .collect(Collectors.toSet());\n+        final Set<Class<?>> fileSetCheckSet = checkSet.stream()\n+                .filter(ModuleReflectionUtil::isFileSetModule)\n+                .collect(Collectors.toSet());\n+        checkSet.clear();\n+        checkSet.addAll(treeWalkerCheckSet);\n+        checkSet.addAll(fileSetCheckSet);\n+        for (Class<?> check : checkSet) {\n+            final String checkName = check.getSimpleName();\n+            if (!checkName.equals(TREE_WORKER)) {\n+                String packageName = check.getPackage().getName();\n+                packageName = packageName.substring(packageName.lastIndexOf('.') + 1);\n+                if (packageName.equals(CHECKS)) {\n+                    packageName = MISC;\n+                }\n+                if (checksNamesMap.get(packageName) == null) {\n+                    final ArrayList<String> arrayList = new ArrayList<>();\n+                    arrayList.add(checkName);\n+                    checksNamesMap.put(packageName, arrayList);\n+                }\n+                else {\n+                    checksNamesMap.get(packageName).add(checkName);\n+                }\n+            }\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest();\n+        try (InputStream input = Files.newInputStream(AVAILABLE_CHECKS_PATH)) {\n+            parser.parse(input, checkHandler);\n+        }\n+        final Map<String, ArrayList<String>> checksNamesMap = getXdocsMap();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE4MzY2OQ=="}, "originalCommit": {"oid": "da9402c92f63e6edaa09d8b40891103ce723444a"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDA1MTk5OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxOTozMjowMVrOGWcMBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMzoxNzozNFrOGXf8oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE4MzY4Nw==", "bodyText": "Why Iterable over List?", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r426183687", "createdAt": "2020-05-16T19:32:01Z", "author": {"login": "rnveach"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+import com.puppycrawl.tools.checkstyle.internal.utils.CheckUtil;\n+import com.puppycrawl.tools.checkstyle.utils.ModuleReflectionUtil;\n+\n+public class XdocsUrlTest {\n+\n+    private static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    private static final String TREE_WORKER = \"TreeWalker\";\n+\n+    private static final String SUFFIX_CHECK = \"Check\";\n+\n+    private static final String CHECKS = \"checks\";\n+\n+    private static final String MISC = \"misc\";\n+\n+    private static final String ANNOTATION = \"annotation\";\n+\n+    private static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    private static final String INDENTATION = \"Indentation\";\n+\n+    private static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    private static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, ArrayList<String>> getXdocsMap() throws IOException {\n+        final Map<String, ArrayList<String>> checksNamesMap = new HashMap<>();\n+        final Set<Class<?>> checkSet = CheckUtil.getCheckstyleModules();\n+        final Set<Class<?>> treeWalkerCheckSet = checkSet.stream()\n+                .filter(ModuleReflectionUtil::isCheckstyleTreeWalkerCheck)\n+                .collect(Collectors.toSet());\n+        final Set<Class<?>> fileSetCheckSet = checkSet.stream()\n+                .filter(ModuleReflectionUtil::isFileSetModule)\n+                .collect(Collectors.toSet());\n+        checkSet.clear();\n+        checkSet.addAll(treeWalkerCheckSet);\n+        checkSet.addAll(fileSetCheckSet);\n+        for (Class<?> check : checkSet) {\n+            final String checkName = check.getSimpleName();\n+            if (!checkName.equals(TREE_WORKER)) {\n+                String packageName = check.getPackage().getName();\n+                packageName = packageName.substring(packageName.lastIndexOf('.') + 1);\n+                if (packageName.equals(CHECKS)) {\n+                    packageName = MISC;\n+                }\n+                if (checksNamesMap.get(packageName) == null) {\n+                    final ArrayList<String> arrayList = new ArrayList<>();\n+                    arrayList.add(checkName);\n+                    checksNamesMap.put(packageName, arrayList);\n+                }\n+                else {\n+                    checksNamesMap.get(packageName).add(checkName);\n+                }\n+            }\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest();\n+        try (InputStream input = Files.newInputStream(AVAILABLE_CHECKS_PATH)) {\n+            parser.parse(input, checkHandler);\n+        }\n+        final Map<String, ArrayList<String>> checksNamesMap = getXdocsMap();\n+        for (List<String> sub : checkHandler.checkNamesList) {\n+            final String moduleName = sub.get(0);\n+            final String checkNameInAttribute = sub.get(1);\n+            final String checkNameInText = sub.get(2);\n+            final String checkNameInconsistentErrorMsg = String.format(Locale.ROOT,\n+                    \"Check with name '%s' in attribute \"\n+                            + \"is not consistent with check name in text in file '%s'\",\n+                    checkNameInAttribute, AVAILABLE_CHECKS_PATH);\n+            assertWithMessage(checkNameInconsistentErrorMsg)\n+                    .that(checkNameInText).matches(checkNameInAttribute);\n+            final String checkNameModuleErrorMsg = String.format(Locale.ROOT,\n+                    \"Check with name '%s' is not in '%s' module\",\n+                    checkNameInAttribute, moduleName);\n+            if (checkNameInAttribute.equals(COMMENTS_INDENTATION)\n+                    || checkNameInAttribute.equals(INDENTATION)) {\n+                assertWithMessage(checkNameModuleErrorMsg).that(moduleName).matches(MISC);\n+            }\n+            else if (checkNameInAttribute.equals(SUPPRESS_WARNINGS_HOLDER)) {\n+                assertWithMessage(checkNameModuleErrorMsg).that(moduleName).matches(ANNOTATION);\n+            }\n+            else {\n+                final Iterable<String> moduleFileNames = checksNamesMap.get(moduleName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da9402c92f63e6edaa09d8b40891103ce723444a"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI5Mzg1Ng==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r427293856", "createdAt": "2020-05-19T13:17:34Z", "author": {"login": "HuGanghui"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+import com.puppycrawl.tools.checkstyle.internal.utils.CheckUtil;\n+import com.puppycrawl.tools.checkstyle.utils.ModuleReflectionUtil;\n+\n+public class XdocsUrlTest {\n+\n+    private static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    private static final String TREE_WORKER = \"TreeWalker\";\n+\n+    private static final String SUFFIX_CHECK = \"Check\";\n+\n+    private static final String CHECKS = \"checks\";\n+\n+    private static final String MISC = \"misc\";\n+\n+    private static final String ANNOTATION = \"annotation\";\n+\n+    private static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    private static final String INDENTATION = \"Indentation\";\n+\n+    private static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    private static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, ArrayList<String>> getXdocsMap() throws IOException {\n+        final Map<String, ArrayList<String>> checksNamesMap = new HashMap<>();\n+        final Set<Class<?>> checkSet = CheckUtil.getCheckstyleModules();\n+        final Set<Class<?>> treeWalkerCheckSet = checkSet.stream()\n+                .filter(ModuleReflectionUtil::isCheckstyleTreeWalkerCheck)\n+                .collect(Collectors.toSet());\n+        final Set<Class<?>> fileSetCheckSet = checkSet.stream()\n+                .filter(ModuleReflectionUtil::isFileSetModule)\n+                .collect(Collectors.toSet());\n+        checkSet.clear();\n+        checkSet.addAll(treeWalkerCheckSet);\n+        checkSet.addAll(fileSetCheckSet);\n+        for (Class<?> check : checkSet) {\n+            final String checkName = check.getSimpleName();\n+            if (!checkName.equals(TREE_WORKER)) {\n+                String packageName = check.getPackage().getName();\n+                packageName = packageName.substring(packageName.lastIndexOf('.') + 1);\n+                if (packageName.equals(CHECKS)) {\n+                    packageName = MISC;\n+                }\n+                if (checksNamesMap.get(packageName) == null) {\n+                    final ArrayList<String> arrayList = new ArrayList<>();\n+                    arrayList.add(checkName);\n+                    checksNamesMap.put(packageName, arrayList);\n+                }\n+                else {\n+                    checksNamesMap.get(packageName).add(checkName);\n+                }\n+            }\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest();\n+        try (InputStream input = Files.newInputStream(AVAILABLE_CHECKS_PATH)) {\n+            parser.parse(input, checkHandler);\n+        }\n+        final Map<String, ArrayList<String>> checksNamesMap = getXdocsMap();\n+        for (List<String> sub : checkHandler.checkNamesList) {\n+            final String moduleName = sub.get(0);\n+            final String checkNameInAttribute = sub.get(1);\n+            final String checkNameInText = sub.get(2);\n+            final String checkNameInconsistentErrorMsg = String.format(Locale.ROOT,\n+                    \"Check with name '%s' in attribute \"\n+                            + \"is not consistent with check name in text in file '%s'\",\n+                    checkNameInAttribute, AVAILABLE_CHECKS_PATH);\n+            assertWithMessage(checkNameInconsistentErrorMsg)\n+                    .that(checkNameInText).matches(checkNameInAttribute);\n+            final String checkNameModuleErrorMsg = String.format(Locale.ROOT,\n+                    \"Check with name '%s' is not in '%s' module\",\n+                    checkNameInAttribute, moduleName);\n+            if (checkNameInAttribute.equals(COMMENTS_INDENTATION)\n+                    || checkNameInAttribute.equals(INDENTATION)) {\n+                assertWithMessage(checkNameModuleErrorMsg).that(moduleName).matches(MISC);\n+            }\n+            else if (checkNameInAttribute.equals(SUPPRESS_WARNINGS_HOLDER)) {\n+                assertWithMessage(checkNameModuleErrorMsg).that(moduleName).matches(ANNOTATION);\n+            }\n+            else {\n+                final Iterable<String> moduleFileNames = checksNamesMap.get(moduleName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE4MzY4Nw=="}, "originalCommit": {"oid": "da9402c92f63e6edaa09d8b40891103ce723444a"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDA1MjY1OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxOTozMzowMlrOGWcMXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMzoxNzozOFrOGXf8zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE4Mzc3Mg==", "bodyText": "Why not moduleFileNames.contains(checkNameWithSuffix)?", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r426183772", "createdAt": "2020-05-16T19:33:02Z", "author": {"login": "rnveach"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+import com.puppycrawl.tools.checkstyle.internal.utils.CheckUtil;\n+import com.puppycrawl.tools.checkstyle.utils.ModuleReflectionUtil;\n+\n+public class XdocsUrlTest {\n+\n+    private static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    private static final String TREE_WORKER = \"TreeWalker\";\n+\n+    private static final String SUFFIX_CHECK = \"Check\";\n+\n+    private static final String CHECKS = \"checks\";\n+\n+    private static final String MISC = \"misc\";\n+\n+    private static final String ANNOTATION = \"annotation\";\n+\n+    private static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    private static final String INDENTATION = \"Indentation\";\n+\n+    private static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    private static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, ArrayList<String>> getXdocsMap() throws IOException {\n+        final Map<String, ArrayList<String>> checksNamesMap = new HashMap<>();\n+        final Set<Class<?>> checkSet = CheckUtil.getCheckstyleModules();\n+        final Set<Class<?>> treeWalkerCheckSet = checkSet.stream()\n+                .filter(ModuleReflectionUtil::isCheckstyleTreeWalkerCheck)\n+                .collect(Collectors.toSet());\n+        final Set<Class<?>> fileSetCheckSet = checkSet.stream()\n+                .filter(ModuleReflectionUtil::isFileSetModule)\n+                .collect(Collectors.toSet());\n+        checkSet.clear();\n+        checkSet.addAll(treeWalkerCheckSet);\n+        checkSet.addAll(fileSetCheckSet);\n+        for (Class<?> check : checkSet) {\n+            final String checkName = check.getSimpleName();\n+            if (!checkName.equals(TREE_WORKER)) {\n+                String packageName = check.getPackage().getName();\n+                packageName = packageName.substring(packageName.lastIndexOf('.') + 1);\n+                if (packageName.equals(CHECKS)) {\n+                    packageName = MISC;\n+                }\n+                if (checksNamesMap.get(packageName) == null) {\n+                    final ArrayList<String> arrayList = new ArrayList<>();\n+                    arrayList.add(checkName);\n+                    checksNamesMap.put(packageName, arrayList);\n+                }\n+                else {\n+                    checksNamesMap.get(packageName).add(checkName);\n+                }\n+            }\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest();\n+        try (InputStream input = Files.newInputStream(AVAILABLE_CHECKS_PATH)) {\n+            parser.parse(input, checkHandler);\n+        }\n+        final Map<String, ArrayList<String>> checksNamesMap = getXdocsMap();\n+        for (List<String> sub : checkHandler.checkNamesList) {\n+            final String moduleName = sub.get(0);\n+            final String checkNameInAttribute = sub.get(1);\n+            final String checkNameInText = sub.get(2);\n+            final String checkNameInconsistentErrorMsg = String.format(Locale.ROOT,\n+                    \"Check with name '%s' in attribute \"\n+                            + \"is not consistent with check name in text in file '%s'\",\n+                    checkNameInAttribute, AVAILABLE_CHECKS_PATH);\n+            assertWithMessage(checkNameInconsistentErrorMsg)\n+                    .that(checkNameInText).matches(checkNameInAttribute);\n+            final String checkNameModuleErrorMsg = String.format(Locale.ROOT,\n+                    \"Check with name '%s' is not in '%s' module\",\n+                    checkNameInAttribute, moduleName);\n+            if (checkNameInAttribute.equals(COMMENTS_INDENTATION)\n+                    || checkNameInAttribute.equals(INDENTATION)) {\n+                assertWithMessage(checkNameModuleErrorMsg).that(moduleName).matches(MISC);\n+            }\n+            else if (checkNameInAttribute.equals(SUPPRESS_WARNINGS_HOLDER)) {\n+                assertWithMessage(checkNameModuleErrorMsg).that(moduleName).matches(ANNOTATION);\n+            }\n+            else {\n+                final Iterable<String> moduleFileNames = checksNamesMap.get(moduleName);\n+                final String moduleNameErrorMsg = String.format(Locale.ROOT,\n+                        \"module name: '%s' is not exist in '%s'\", moduleName, PACKAGE_NAME);\n+                assertWithMessage(moduleNameErrorMsg).that(moduleFileNames).isNotNull();\n+                boolean match = false;\n+                final String checkNameWithSuffix = checkNameInAttribute + SUFFIX_CHECK;\n+                for (String filename : moduleFileNames) {\n+                    if (checkNameWithSuffix.equals(filename)) {\n+                        match = true;\n+                        break;\n+                    }\n+                }\n+                assertWithMessage(checkNameModuleErrorMsg).that(match).isTrue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da9402c92f63e6edaa09d8b40891103ce723444a"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI5MzkwMg==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/8075#discussion_r427293902", "createdAt": "2020-05-19T13:17:38Z", "author": {"login": "HuGanghui"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsUrlTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+import com.puppycrawl.tools.checkstyle.internal.utils.CheckUtil;\n+import com.puppycrawl.tools.checkstyle.utils.ModuleReflectionUtil;\n+\n+public class XdocsUrlTest {\n+\n+    private static final String PACKAGE_NAME =\n+            \"src/main/java/com/puppycrawl/tools/checkstyle/checks\";\n+\n+    private static final String TREE_WORKER = \"TreeWalker\";\n+\n+    private static final String SUFFIX_CHECK = \"Check\";\n+\n+    private static final String CHECKS = \"checks\";\n+\n+    private static final String MISC = \"misc\";\n+\n+    private static final String ANNOTATION = \"annotation\";\n+\n+    private static final String COMMENTS_INDENTATION = \"CommentsIndentation\";\n+\n+    private static final String INDENTATION = \"Indentation\";\n+\n+    private static final String SUPPRESS_WARNINGS_HOLDER = \"SuppressWarningsHolder\";\n+\n+    private static final Path AVAILABLE_CHECKS_PATH = Paths.get(\"src/xdocs/checks.xml\");\n+\n+    private static Map<String, ArrayList<String>> getXdocsMap() throws IOException {\n+        final Map<String, ArrayList<String>> checksNamesMap = new HashMap<>();\n+        final Set<Class<?>> checkSet = CheckUtil.getCheckstyleModules();\n+        final Set<Class<?>> treeWalkerCheckSet = checkSet.stream()\n+                .filter(ModuleReflectionUtil::isCheckstyleTreeWalkerCheck)\n+                .collect(Collectors.toSet());\n+        final Set<Class<?>> fileSetCheckSet = checkSet.stream()\n+                .filter(ModuleReflectionUtil::isFileSetModule)\n+                .collect(Collectors.toSet());\n+        checkSet.clear();\n+        checkSet.addAll(treeWalkerCheckSet);\n+        checkSet.addAll(fileSetCheckSet);\n+        for (Class<?> check : checkSet) {\n+            final String checkName = check.getSimpleName();\n+            if (!checkName.equals(TREE_WORKER)) {\n+                String packageName = check.getPackage().getName();\n+                packageName = packageName.substring(packageName.lastIndexOf('.') + 1);\n+                if (packageName.equals(CHECKS)) {\n+                    packageName = MISC;\n+                }\n+                if (checksNamesMap.get(packageName) == null) {\n+                    final ArrayList<String> arrayList = new ArrayList<>();\n+                    arrayList.add(checkName);\n+                    checksNamesMap.put(packageName, arrayList);\n+                }\n+                else {\n+                    checksNamesMap.get(packageName).add(checkName);\n+                }\n+            }\n+        }\n+        return checksNamesMap;\n+    }\n+\n+    @Test\n+    public void testXdocsUrl() throws Exception {\n+        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n+        final SAXParser parser = parserFactory.newSAXParser();\n+        final CheckTest checkHandler = new CheckTest();\n+        try (InputStream input = Files.newInputStream(AVAILABLE_CHECKS_PATH)) {\n+            parser.parse(input, checkHandler);\n+        }\n+        final Map<String, ArrayList<String>> checksNamesMap = getXdocsMap();\n+        for (List<String> sub : checkHandler.checkNamesList) {\n+            final String moduleName = sub.get(0);\n+            final String checkNameInAttribute = sub.get(1);\n+            final String checkNameInText = sub.get(2);\n+            final String checkNameInconsistentErrorMsg = String.format(Locale.ROOT,\n+                    \"Check with name '%s' in attribute \"\n+                            + \"is not consistent with check name in text in file '%s'\",\n+                    checkNameInAttribute, AVAILABLE_CHECKS_PATH);\n+            assertWithMessage(checkNameInconsistentErrorMsg)\n+                    .that(checkNameInText).matches(checkNameInAttribute);\n+            final String checkNameModuleErrorMsg = String.format(Locale.ROOT,\n+                    \"Check with name '%s' is not in '%s' module\",\n+                    checkNameInAttribute, moduleName);\n+            if (checkNameInAttribute.equals(COMMENTS_INDENTATION)\n+                    || checkNameInAttribute.equals(INDENTATION)) {\n+                assertWithMessage(checkNameModuleErrorMsg).that(moduleName).matches(MISC);\n+            }\n+            else if (checkNameInAttribute.equals(SUPPRESS_WARNINGS_HOLDER)) {\n+                assertWithMessage(checkNameModuleErrorMsg).that(moduleName).matches(ANNOTATION);\n+            }\n+            else {\n+                final Iterable<String> moduleFileNames = checksNamesMap.get(moduleName);\n+                final String moduleNameErrorMsg = String.format(Locale.ROOT,\n+                        \"module name: '%s' is not exist in '%s'\", moduleName, PACKAGE_NAME);\n+                assertWithMessage(moduleNameErrorMsg).that(moduleFileNames).isNotNull();\n+                boolean match = false;\n+                final String checkNameWithSuffix = checkNameInAttribute + SUFFIX_CHECK;\n+                for (String filename : moduleFileNames) {\n+                    if (checkNameWithSuffix.equals(filename)) {\n+                        match = true;\n+                        break;\n+                    }\n+                }\n+                assertWithMessage(checkNameModuleErrorMsg).that(match).isTrue();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE4Mzc3Mg=="}, "originalCommit": {"oid": "da9402c92f63e6edaa09d8b40891103ce723444a"}, "originalPosition": 145}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1102, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}