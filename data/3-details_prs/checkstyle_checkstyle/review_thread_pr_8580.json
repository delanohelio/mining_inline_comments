{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4NzY0MDM1", "number": 8580, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODoxNjowNlrOETyq6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODoxNjowNlrOETyq6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MTg4NTg3OnYy", "diffSide": "RIGHT", "path": "src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/checks/naming/abbreviationaswordinname/InputAbbreviationAsWordInNameCheckRecords.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODoxNjowNlrOG5ufVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODo1OTowMlrOG5v5RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE4MzcwMQ==", "bodyText": "Actually, x4", "url": "https://github.com/checkstyle/checkstyle/pull/8580#discussion_r463183701", "createdAt": "2020-07-30T18:16:06Z", "author": {"login": "pbludov"}, "path": "src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/checks/naming/abbreviationaswordinname/InputAbbreviationAsWordInNameCheckRecords.java", "diffHunk": "@@ -0,0 +1,54 @@\n+//non-compiled with javac: Compilable with Java14\n+package com.puppycrawl.tools.checkstyle.checks.naming.abbreviationaswordinname;\n+\n+import org.w3c.dom.Node;\n+\n+/*\n+ * Config:\n+ * allowedAbbreviationLength = 4\n+ * allowedAbbreviations = n/a\n+ * tokens = {CLASS_DEF,INTERFACE_DEF,ENUM_DEF,ANNOTATION_DEF,ANNOTATION_FIELD_DEF,\n+ *      PARAMETER_DEF,VARIABLE_DEF,METHOD_DEF,PATTERN_VARIABLE_DEF, RECORD_DEF,\n+ *      RECORD_COMPONENT_DEF}\n+ * ignoreStatic = true\n+ * ignoreFinal = true\n+ * ignoreStaticFinal = true\n+ */\n+\n+public class InputAbbreviationAsWordInNameCheckRecords {\n+    class myCLASS { // violation\n+        int INTEGER = 2; // violation\n+        void METHOD(){} // violation\n+\n+        public myCLASS(String STRING) { // violation for param\n+            int INTEGER = 6; // violation\n+\n+        }\n+\n+    }\n+\n+    record myRECORD1(String STRING) { // violation x2\n+\n+        void METHOD(){} // violation\n+\n+        //ctor\n+        public myRECORD1(){\n+            this(\"string\");\n+            int INTEGER = 6; // violation\n+        }\n+\n+    }\n+\n+    record myRECORD2() { // violation\n+        static int INTEGER = 6; // static ignored, all fields in record must be static\n+\n+        //compact ctor\n+        public myRECORD2{\n+            int INTEGER = 2; // violation\n+        }\n+    }\n+\n+    record myRECORD3(String STRING, int INTEGER, Node[] NODES) { // violation x3", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e147c5ddc7e2532753a52438755b7076733fc23"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIwNjcyNA==", "bodyText": "Fixed.", "url": "https://github.com/checkstyle/checkstyle/pull/8580#discussion_r463206724", "createdAt": "2020-07-30T18:59:02Z", "author": {"login": "nmancus1"}, "path": "src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/checks/naming/abbreviationaswordinname/InputAbbreviationAsWordInNameCheckRecords.java", "diffHunk": "@@ -0,0 +1,54 @@\n+//non-compiled with javac: Compilable with Java14\n+package com.puppycrawl.tools.checkstyle.checks.naming.abbreviationaswordinname;\n+\n+import org.w3c.dom.Node;\n+\n+/*\n+ * Config:\n+ * allowedAbbreviationLength = 4\n+ * allowedAbbreviations = n/a\n+ * tokens = {CLASS_DEF,INTERFACE_DEF,ENUM_DEF,ANNOTATION_DEF,ANNOTATION_FIELD_DEF,\n+ *      PARAMETER_DEF,VARIABLE_DEF,METHOD_DEF,PATTERN_VARIABLE_DEF, RECORD_DEF,\n+ *      RECORD_COMPONENT_DEF}\n+ * ignoreStatic = true\n+ * ignoreFinal = true\n+ * ignoreStaticFinal = true\n+ */\n+\n+public class InputAbbreviationAsWordInNameCheckRecords {\n+    class myCLASS { // violation\n+        int INTEGER = 2; // violation\n+        void METHOD(){} // violation\n+\n+        public myCLASS(String STRING) { // violation for param\n+            int INTEGER = 6; // violation\n+\n+        }\n+\n+    }\n+\n+    record myRECORD1(String STRING) { // violation x2\n+\n+        void METHOD(){} // violation\n+\n+        //ctor\n+        public myRECORD1(){\n+            this(\"string\");\n+            int INTEGER = 6; // violation\n+        }\n+\n+    }\n+\n+    record myRECORD2() { // violation\n+        static int INTEGER = 6; // static ignored, all fields in record must be static\n+\n+        //compact ctor\n+        public myRECORD2{\n+            int INTEGER = 2; // violation\n+        }\n+    }\n+\n+    record myRECORD3(String STRING, int INTEGER, Node[] NODES) { // violation x3", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE4MzcwMQ=="}, "originalCommit": {"oid": "7e147c5ddc7e2532753a52438755b7076733fc23"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 743, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}