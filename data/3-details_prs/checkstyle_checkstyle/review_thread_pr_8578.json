{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4NjYxMzQ1", "number": 8578, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQyMjoxNzoxOVrOEWngXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNTozMzo1OFrOEZifPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMTUxMzkxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ClassMemberImpliedModifierCheck.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQyMjoxNzoxOVrOG9-L-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNzoyMDozNlrOG_BtaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzYzNTE5Mw==", "bodyText": "isInTypeBlock ?\nor isInEnumOrClassOrRecordBlock", "url": "https://github.com/checkstyle/checkstyle/pull/8578#discussion_r467635193", "createdAt": "2020-08-09T22:17:19Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ClassMemberImpliedModifierCheck.java", "diffHunk": "@@ -171,12 +203,13 @@ public void setViolateImpliedStaticOnNestedInterface(boolean violateImplied) {\n         return new int[] {\n             TokenTypes.INTERFACE_DEF,\n             TokenTypes.ENUM_DEF,\n+            TokenTypes.RECORD_DEF,\n         };\n     }\n \n     @Override\n     public void visitToken(DetailAST ast) {\n-        if (ScopeUtil.isInClassBlock(ast) || ScopeUtil.isInEnumBlock(ast)) {\n+        if (isInEnumClassOrRecordBlock(ast)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7af9ce235f44764adb355840f9b5f0d7208267fe"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY3MTk4NQ==", "bodyText": "@nmancus1, please do this renaming", "url": "https://github.com/checkstyle/checkstyle/pull/8578#discussion_r467671985", "createdAt": "2020-08-10T03:20:41Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ClassMemberImpliedModifierCheck.java", "diffHunk": "@@ -171,12 +203,13 @@ public void setViolateImpliedStaticOnNestedInterface(boolean violateImplied) {\n         return new int[] {\n             TokenTypes.INTERFACE_DEF,\n             TokenTypes.ENUM_DEF,\n+            TokenTypes.RECORD_DEF,\n         };\n     }\n \n     @Override\n     public void visitToken(DetailAST ast) {\n-        if (ScopeUtil.isInClassBlock(ast) || ScopeUtil.isInEnumBlock(ast)) {\n+        if (isInEnumClassOrRecordBlock(ast)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzYzNTE5Mw=="}, "originalCommit": {"oid": "7af9ce235f44764adb355840f9b5f0d7208267fe"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc0MTQ4MQ==", "bodyText": "Done.", "url": "https://github.com/checkstyle/checkstyle/pull/8578#discussion_r468741481", "createdAt": "2020-08-11T17:20:36Z", "author": {"login": "nmancus1"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ClassMemberImpliedModifierCheck.java", "diffHunk": "@@ -171,12 +203,13 @@ public void setViolateImpliedStaticOnNestedInterface(boolean violateImplied) {\n         return new int[] {\n             TokenTypes.INTERFACE_DEF,\n             TokenTypes.ENUM_DEF,\n+            TokenTypes.RECORD_DEF,\n         };\n     }\n \n     @Override\n     public void visitToken(DetailAST ast) {\n-        if (ScopeUtil.isInClassBlock(ast) || ScopeUtil.isInEnumBlock(ast)) {\n+        if (isInEnumClassOrRecordBlock(ast)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzYzNTE5Mw=="}, "originalCommit": {"oid": "7af9ce235f44764adb355840f9b5f0d7208267fe"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjEwNzM5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ClassMemberImpliedModifierCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNToyNTowNlrOHCZ0lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxODoyNToyMlrOHDUAkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI4MjI2Mw==", "bodyText": "if we treated enums and \"nested type\" I think we can treat record as \"nested type\" also.", "url": "https://github.com/checkstyle/checkstyle/pull/8578#discussion_r472282263", "createdAt": "2020-08-18T15:25:06Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ClassMemberImpliedModifierCheck.java", "diffHunk": "@@ -27,18 +27,18 @@\n \n /**\n  * <p>\n- * Checks for implicit modifiers on nested types in classes.\n+ * Checks for implicit modifiers on nested types in classes and records.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8aa1deea853b4e1f333d07d33308afc757f105f1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIzNTYwMA==", "bodyText": "#8578 (comment)", "url": "https://github.com/checkstyle/checkstyle/pull/8578#discussion_r473235600", "createdAt": "2020-08-19T18:25:22Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ClassMemberImpliedModifierCheck.java", "diffHunk": "@@ -27,18 +27,18 @@\n \n /**\n  * <p>\n- * Checks for implicit modifiers on nested types in classes.\n+ * Checks for implicit modifiers on nested types in classes and records.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI4MjI2Mw=="}, "originalCommit": {"oid": "8aa1deea853b4e1f333d07d33308afc757f105f1"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjEwODczOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ClassMemberImpliedModifierCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNToyNToyNVrOHCZ1fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxODoyNToxN1rOHDUAUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI4MjQ5Mw==", "bodyText": "same as above.", "url": "https://github.com/checkstyle/checkstyle/pull/8578#discussion_r472282493", "createdAt": "2020-08-18T15:25:25Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ClassMemberImpliedModifierCheck.java", "diffHunk": "@@ -27,18 +27,18 @@\n \n /**\n  * <p>\n- * Checks for implicit modifiers on nested types in classes.\n+ * Checks for implicit modifiers on nested types in classes and records.\n  * </p>\n  * <p>\n  * This check is effectively the opposite of\n  * <a href=\"https://checkstyle.org/config_modifier.html#RedundantModifier\">RedundantModifier</a>.\n- * It checks the modifiers on nested types in classes, ensuring that certain modifiers are\n- * explicitly specified even though they are actually redundant.\n+ * It checks the modifiers on nested types in classes and records, ensuring that certain modifiers\n+ * are explicitly specified even though they are actually redundant.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8aa1deea853b4e1f333d07d33308afc757f105f1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIzNTUzOQ==", "bodyText": "#8578 (comment)", "url": "https://github.com/checkstyle/checkstyle/pull/8578#discussion_r473235539", "createdAt": "2020-08-19T18:25:17Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ClassMemberImpliedModifierCheck.java", "diffHunk": "@@ -27,18 +27,18 @@\n \n /**\n  * <p>\n- * Checks for implicit modifiers on nested types in classes.\n+ * Checks for implicit modifiers on nested types in classes and records.\n  * </p>\n  * <p>\n  * This check is effectively the opposite of\n  * <a href=\"https://checkstyle.org/config_modifier.html#RedundantModifier\">RedundantModifier</a>.\n- * It checks the modifiers on nested types in classes, ensuring that certain modifiers are\n- * explicitly specified even though they are actually redundant.\n+ * It checks the modifiers on nested types in classes and records, ensuring that certain modifiers\n+ * are explicitly specified even though they are actually redundant.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI4MjQ5Mw=="}, "originalCommit": {"oid": "8aa1deea853b4e1f333d07d33308afc757f105f1"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjExNTEyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ClassMemberImpliedModifierCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNToyNjo0NFrOHCZ5dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxODoyNDo0MlrOHDT_Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI4MzUwOQ==", "bodyText": "why \"records\" are affecting violateImpliedStaticOnNestedEnum ?", "url": "https://github.com/checkstyle/checkstyle/pull/8578#discussion_r472283509", "createdAt": "2020-08-18T15:26:44Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ClassMemberImpliedModifierCheck.java", "diffHunk": "@@ -48,28 +48,34 @@\n  * }\n  * </pre>\n  * <p>\n- * Rationale for this check: Nested enums and interfaces are treated differently from nested\n- * classes as they are only allowed to be {@code static}. Developers should not need to remember\n- * this rule, and this check provides the means to enforce that the modifier is coded explicitly.\n+ * Rationale for this check: Nested enums, interfaces, and records are treated differently from\n+ * nested classes as they are only allowed to be {@code static}. Developers should not need to\n+ * remember this rule, and this check provides the means to enforce that the modifier is coded\n+ * explicitly.\n  * </p>\n  * <ul>\n  * <li>\n  * Property {@code violateImpliedStaticOnNestedEnum} - Control whether to enforce that\n- * {@code static} is explicitly coded on nested enums in classes.\n+ * {@code static} is explicitly coded on nested enums in classes and records.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8aa1deea853b4e1f333d07d33308afc757f105f1"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIzNTIzNQ==", "bodyText": "#8578 (comment)", "url": "https://github.com/checkstyle/checkstyle/pull/8578#discussion_r473235235", "createdAt": "2020-08-19T18:24:42Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ClassMemberImpliedModifierCheck.java", "diffHunk": "@@ -48,28 +48,34 @@\n  * }\n  * </pre>\n  * <p>\n- * Rationale for this check: Nested enums and interfaces are treated differently from nested\n- * classes as they are only allowed to be {@code static}. Developers should not need to remember\n- * this rule, and this check provides the means to enforce that the modifier is coded explicitly.\n+ * Rationale for this check: Nested enums, interfaces, and records are treated differently from\n+ * nested classes as they are only allowed to be {@code static}. Developers should not need to\n+ * remember this rule, and this check provides the means to enforce that the modifier is coded\n+ * explicitly.\n  * </p>\n  * <ul>\n  * <li>\n  * Property {@code violateImpliedStaticOnNestedEnum} - Control whether to enforce that\n- * {@code static} is explicitly coded on nested enums in classes.\n+ * {@code static} is explicitly coded on nested enums in classes and records.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI4MzUwOQ=="}, "originalCommit": {"oid": "8aa1deea853b4e1f333d07d33308afc757f105f1"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjExNjY4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ClassMemberImpliedModifierCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNToyNzowNVrOHCZ6bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNToyNzowNVrOHCZ6bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI4Mzc1OA==", "bodyText": "this is good extension, we should keep it.", "url": "https://github.com/checkstyle/checkstyle/pull/8578#discussion_r472283758", "createdAt": "2020-08-18T15:27:05Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ClassMemberImpliedModifierCheck.java", "diffHunk": "@@ -48,28 +48,34 @@\n  * }\n  * </pre>\n  * <p>\n- * Rationale for this check: Nested enums and interfaces are treated differently from nested\n- * classes as they are only allowed to be {@code static}. Developers should not need to remember\n- * this rule, and this check provides the means to enforce that the modifier is coded explicitly.\n+ * Rationale for this check: Nested enums, interfaces, and records are treated differently from", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8aa1deea853b4e1f333d07d33308afc757f105f1"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjExNzk2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ClassMemberImpliedModifierCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNToyNzoyMVrOHCZ7LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNToyNzoyMVrOHCZ7LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI4Mzk0OA==", "bodyText": "this is good extension, we should keep it.", "url": "https://github.com/checkstyle/checkstyle/pull/8578#discussion_r472283948", "createdAt": "2020-08-18T15:27:21Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ClassMemberImpliedModifierCheck.java", "diffHunk": "@@ -48,28 +48,34 @@\n  * }\n  * </pre>\n  * <p>\n- * Rationale for this check: Nested enums and interfaces are treated differently from nested\n- * classes as they are only allowed to be {@code static}. Developers should not need to remember\n- * this rule, and this check provides the means to enforce that the modifier is coded explicitly.\n+ * Rationale for this check: Nested enums, interfaces, and records are treated differently from\n+ * nested classes as they are only allowed to be {@code static}. Developers should not need to\n+ * remember this rule, and this check provides the means to enforce that the modifier is coded\n+ * explicitly.\n  * </p>\n  * <ul>\n  * <li>\n  * Property {@code violateImpliedStaticOnNestedEnum} - Control whether to enforce that\n- * {@code static} is explicitly coded on nested enums in classes.\n+ * {@code static} is explicitly coded on nested enums in classes and records.\n  * Type is {@code boolean}.\n  * Default value is {@code true}.\n  * </li>\n  * <li>\n  * Property {@code violateImpliedStaticOnNestedInterface} - Control whether to enforce that\n- * {@code static} is explicitly coded on nested interfaces in classes.\n+ * {@code static} is explicitly coded on nested interfaces in classes and records.\n+ * Type is {@code boolean}.\n+ * Default value is {@code true}.\n+ * </li>\n+ * <li>\n+ * Property {@code violateImpliedStaticOnNestedRecord} - Control whether to enforce that\n+ * {@code static} is explicitly coded on nested records in classes and records.\n  * Type is {@code boolean}.\n  * Default value is {@code true}.\n  * </li>\n  * </ul>\n  * <p>\n- * To configure the check so that it checks that all implicit modifiers on nested\n- * interfaces and enums are\n- * explicitly specified in classes.\n+ * To configure the check so that it checks that all implicit modifiers on nested interfaces, enums,\n+ * and records are explicitly specified in classes and records.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8aa1deea853b4e1f333d07d33308afc757f105f1"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjEyMzM2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ClassMemberImpliedModifierCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNToyODoxNlrOHCZ-dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxODoyNDoyMVrOHDT-hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI4NDc5MQ==", "bodyText": "why \"record\" affect this ?", "url": "https://github.com/checkstyle/checkstyle/pull/8578#discussion_r472284791", "createdAt": "2020-08-18T15:28:16Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ClassMemberImpliedModifierCheck.java", "diffHunk": "@@ -125,19 +139,25 @@\n \n     /**\n      * Control whether to enforce that {@code static} is explicitly coded\n-     * on nested enums in classes.\n+     * on nested enums in classes and records.\n      */\n     private boolean violateImpliedStaticOnNestedEnum = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8aa1deea853b4e1f333d07d33308afc757f105f1"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIzNTA3OQ==", "bodyText": "#8578 (comment)", "url": "https://github.com/checkstyle/checkstyle/pull/8578#discussion_r473235079", "createdAt": "2020-08-19T18:24:21Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ClassMemberImpliedModifierCheck.java", "diffHunk": "@@ -125,19 +139,25 @@\n \n     /**\n      * Control whether to enforce that {@code static} is explicitly coded\n-     * on nested enums in classes.\n+     * on nested enums in classes and records.\n      */\n     private boolean violateImpliedStaticOnNestedEnum = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI4NDc5MQ=="}, "originalCommit": {"oid": "8aa1deea853b4e1f333d07d33308afc757f105f1"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjEyNDkxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ClassMemberImpliedModifierCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNToyODozNVrOHCZ_eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxODoyNDowMVrOHDT91g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI4NTA1MA==", "bodyText": "why \"record\" affect this ?", "url": "https://github.com/checkstyle/checkstyle/pull/8578#discussion_r472285050", "createdAt": "2020-08-18T15:28:35Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ClassMemberImpliedModifierCheck.java", "diffHunk": "@@ -125,19 +139,25 @@\n \n     /**\n      * Control whether to enforce that {@code static} is explicitly coded\n-     * on nested enums in classes.\n+     * on nested enums in classes and records.\n      */\n     private boolean violateImpliedStaticOnNestedEnum = true;\n \n     /**\n      * Control whether to enforce that {@code static} is explicitly coded\n-     * on nested interfaces in classes.\n+     * on nested interfaces in classes and records.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8aa1deea853b4e1f333d07d33308afc757f105f1"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIzNDkwMg==", "bodyText": "explained at #8578 (comment)", "url": "https://github.com/checkstyle/checkstyle/pull/8578#discussion_r473234902", "createdAt": "2020-08-19T18:24:01Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ClassMemberImpliedModifierCheck.java", "diffHunk": "@@ -125,19 +139,25 @@\n \n     /**\n      * Control whether to enforce that {@code static} is explicitly coded\n-     * on nested enums in classes.\n+     * on nested enums in classes and records.\n      */\n     private boolean violateImpliedStaticOnNestedEnum = true;\n \n     /**\n      * Control whether to enforce that {@code static} is explicitly coded\n-     * on nested interfaces in classes.\n+     * on nested interfaces in classes and records.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI4NTA1MA=="}, "originalCommit": {"oid": "8aa1deea853b4e1f333d07d33308afc757f105f1"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjEyNzQ2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ClassMemberImpliedModifierCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNToyOTowOVrOHCaBGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxODoyNDoxMlrOHDT-JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI4NTQ2NQ==", "bodyText": "why \"record\" affect this ?", "url": "https://github.com/checkstyle/checkstyle/pull/8578#discussion_r472285465", "createdAt": "2020-08-18T15:29:09Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ClassMemberImpliedModifierCheck.java", "diffHunk": "@@ -148,7 +168,7 @@ public void setViolateImpliedStaticOnNestedEnum(boolean violateImplied) {\n \n     /**\n      * Setter to control whether to enforce that {@code static} is explicitly coded\n-     * on nested interfaces in classes.\n+     * on nested interfaces in classes and records.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8aa1deea853b4e1f333d07d33308afc757f105f1"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIzNDk4MA==", "bodyText": "#8578 (comment)", "url": "https://github.com/checkstyle/checkstyle/pull/8578#discussion_r473234980", "createdAt": "2020-08-19T18:24:12Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ClassMemberImpliedModifierCheck.java", "diffHunk": "@@ -148,7 +168,7 @@ public void setViolateImpliedStaticOnNestedEnum(boolean violateImplied) {\n \n     /**\n      * Setter to control whether to enforce that {@code static} is explicitly coded\n-     * on nested interfaces in classes.\n+     * on nested interfaces in classes and records.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI4NTQ2NQ=="}, "originalCommit": {"oid": "8aa1deea853b4e1f333d07d33308afc757f105f1"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjE0OTA5OnYy", "diffSide": "RIGHT", "path": "src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/checks/modifier/classmemberimpliedmodifier/InputClassMemberImpliedModifierRecords.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNTozMzo1OFrOHCaOnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNTozMzo1OFrOHCaOnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI4ODkyNw==", "bodyText": "@romani we are checking for implied modifiers inside of records, as well; this is why I changed the documentation to say \"classes and records\". In this case, I didn't think that the addition of records support warranted an entirely new check.\nThis check is more about the missing implied modifiers than whether we are in a class or a record.", "url": "https://github.com/checkstyle/checkstyle/pull/8578#discussion_r472288927", "createdAt": "2020-08-18T15:33:58Z", "author": {"login": "nmancus1"}, "path": "src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/checks/modifier/classmemberimpliedmodifier/InputClassMemberImpliedModifierRecords.java", "diffHunk": "@@ -0,0 +1,34 @@\n+//non-compiled with javac: Compilable with Java14\n+package com.puppycrawl.tools.checkstyle.checks.modifier.classmemberimpliedmodifier;\n+/* Config:\n+ * violateImpliedStaticOnNestedEnum = true\n+ * violateImpliedStaticOnNestedInterface = true\n+ * violateImpliedStaticOnNestedRecord = true\n+ */\n+public class InputClassMemberImpliedModifierRecords {\n+    public static interface GoodInterface {} // OK\n+    // Implied modifier 'static' should be explicit. [ClassMemberImpliedModifier]\n+    public interface BadInterface {}\n+\n+    public static enum GoodEnum {} // OK\n+    // Implied modifier 'static' should be explicit. [ClassMemberImpliedModifier]\n+    public enum BadEnum {}\n+\n+    public static record GoodRecord() {} // OK\n+    // Implied modifier 'static' should be explicit. [ClassMemberImpliedModifier]\n+    public record BadRecord() {}\n+\n+    public static record OuterRecord() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8aa1deea853b4e1f333d07d33308afc757f105f1"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 738, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}